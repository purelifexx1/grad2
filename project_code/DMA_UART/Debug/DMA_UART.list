
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0801b260  0801b260  0002b260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba20  0801ba20  000323e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba20  0801ba20  0002ba20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba28  0801ba28  000323e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba28  0801ba28  0002ba28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba2c  0801ba2c  0002ba2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000023e0  20000000  0801ba30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d758  200023e0  0801de10  000323e0  2**3
                  ALLOC
 10 ._user_heap_stack 000063c0  2000fb38  0801de10  0003fb38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000323e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c14  00000000  00000000  00032410  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065e5  00000000  00000000  00064024  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001de8  00000000  00000000  0006a610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ba0  00000000  00000000  0006c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a087  00000000  00000000  0006df98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002002a  00000000  00000000  0009801f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dde91  00000000  00000000  000b8049  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195eda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c54  00000000  00000000  00195f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200023e0 	.word	0x200023e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b244 	.word	0x0801b244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200023e4 	.word	0x200023e4
 80001cc:	0801b244 	.word	0x0801b244

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <packetRead>:
extern SCARA_LSPB_Clutch_TypeDef  gcode_clutch_configure[200];
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;

Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <packetRead+0x38>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f000 8205 	beq.w	80013c6 <packetRead+0x43e>
 8000fbc:	f000 bfe1 	b.w	8001f82 <packetRead+0xffa>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 8000fd2:	7cbb      	ldrb	r3, [r7, #18]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	f200 81ee 	bhi.w	80013b6 <packetRead+0x42e>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <packetRead+0x58>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	0800110d 	.word	0x0800110d
 8000fe8:	08001259 	.word	0x08001259
 8000fec:	08001259 	.word	0x08001259
 8000ff0:	0800108f 	.word	0x0800108f
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b88      	ldr	r3, [pc, #544]	; (8001230 <packetRead+0x2a8>)
 800100e:	701a      	strb	r2, [r3, #0]
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa83 	bl	8000524 <__aeabi_i2d>
 800101e:	a382      	add	r3, pc, #520	; (adr r3, 8001228 <packetRead+0x2a0>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fae8 	bl	80005f8 <__aeabi_dmul>
 8001028:	4603      	mov	r3, r0
 800102a:	460c      	mov	r4, r1
 800102c:	4a81      	ldr	r2, [pc, #516]	; (8001234 <packetRead+0x2ac>)
 800102e:	e9c2 3400 	strd	r3, r4, [r2]
 8001032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001034:	3304      	adds	r3, #4
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa6f 	bl	8000524 <__aeabi_i2d>
 8001046:	a378      	add	r3, pc, #480	; (adr r3, 8001228 <packetRead+0x2a0>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fad4 	bl	80005f8 <__aeabi_dmul>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	4a78      	ldr	r2, [pc, #480]	; (8001238 <packetRead+0x2b0>)
 8001056:	e9c2 3400 	strd	r3, r4, [r2]
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	3304      	adds	r3, #4
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a74      	ldr	r2, [pc, #464]	; (800123c <packetRead+0x2b4>)
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106e:	3304      	adds	r3, #4
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 8001072:	4b73      	ldr	r3, [pc, #460]	; (8001240 <packetRead+0x2b8>)
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 8001078:	4b72      	ldr	r3, [pc, #456]	; (8001244 <packetRead+0x2bc>)
 800107a:	2200      	movs	r2, #0
 800107c:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <packetRead+0x2c0>)
 8001080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001084:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 8001086:	4b71      	ldr	r3, [pc, #452]	; (800124c <packetRead+0x2c4>)
 8001088:	2205      	movs	r2, #5
 800108a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800108c:	e193      	b.n	80013b6 <packetRead+0x42e>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	3301      	adds	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <packetRead+0x2bc>)
 800109c:	8812      	ldrh	r2, [r2, #0]
 800109e:	4610      	mov	r0, r2
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	496b      	ldr	r1, [pc, #428]	; (8001250 <packetRead+0x2c8>)
 80010a4:	4603      	mov	r3, r0
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4403      	add	r3, r0
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b2:	3304      	adds	r3, #4
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a61      	ldr	r2, [pc, #388]	; (8001244 <packetRead+0x2bc>)
 80010be:	8812      	ldrh	r2, [r2, #0]
 80010c0:	4610      	mov	r0, r2
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4962      	ldr	r1, [pc, #392]	; (8001250 <packetRead+0x2c8>)
 80010c6:	4603      	mov	r3, r0
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4403      	add	r3, r0
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	3304      	adds	r3, #4
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	3304      	adds	r3, #4
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 80010da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	4a58      	ldr	r2, [pc, #352]	; (8001244 <packetRead+0x2bc>)
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	4610      	mov	r0, r2
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4959      	ldr	r1, [pc, #356]	; (8001250 <packetRead+0x2c8>)
 80010ea:	4603      	mov	r3, r0
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4403      	add	r3, r0
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	3308      	adds	r3, #8
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fa:	3304      	adds	r3, #4
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					current_clutch_index++;
 80010fe:	4b51      	ldr	r3, [pc, #324]	; (8001244 <packetRead+0x2bc>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b4f      	ldr	r3, [pc, #316]	; (8001244 <packetRead+0x2bc>)
 8001108:	801a      	strh	r2, [r3, #0]
				}
				break;
 800110a:	e154      	b.n	80013b6 <packetRead+0x42e>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 800110c:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <packetRead+0x2b8>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	4a50      	ldr	r2, [pc, #320]	; (8001254 <packetRead+0x2cc>)
 8001114:	460b      	mov	r3, r1
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	1a5b      	subs	r3, r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	331a      	adds	r3, #26
 8001120:	7cba      	ldrb	r2, [r7, #18]
 8001122:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4a42      	ldr	r2, [pc, #264]	; (8001240 <packetRead+0x2b8>)
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	4611      	mov	r1, r2
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	b2d8      	uxtb	r0, r3
 8001142:	4a44      	ldr	r2, [pc, #272]	; (8001254 <packetRead+0x2cc>)
 8001144:	460b      	mov	r3, r1
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	1a5b      	subs	r3, r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	331b      	adds	r3, #27
 8001150:	4602      	mov	r2, r0
 8001152:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	4a39      	ldr	r2, [pc, #228]	; (8001240 <packetRead+0x2b8>)
 800115c:	8812      	ldrh	r2, [r2, #0]
 800115e:	4610      	mov	r0, r2
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	493c      	ldr	r1, [pc, #240]	; (8001254 <packetRead+0x2cc>)
 8001164:	4603      	mov	r3, r0
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	1a1b      	subs	r3, r3, r0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001172:	3304      	adds	r3, #4
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	4a30      	ldr	r2, [pc, #192]	; (8001240 <packetRead+0x2b8>)
 800117e:	8812      	ldrh	r2, [r2, #0]
 8001180:	4610      	mov	r0, r2
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4933      	ldr	r1, [pc, #204]	; (8001254 <packetRead+0x2cc>)
 8001186:	4603      	mov	r3, r0
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	1a1b      	subs	r3, r3, r0
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3304      	adds	r3, #4
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	3304      	adds	r3, #4
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <packetRead+0x2a8>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	d112      	bne.n	80011c8 <packetRead+0x240>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a25      	ldr	r2, [pc, #148]	; (8001240 <packetRead+0x2b8>)
 80011aa:	8812      	ldrh	r2, [r2, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4928      	ldr	r1, [pc, #160]	; (8001254 <packetRead+0x2cc>)
 80011b2:	4603      	mov	r3, r0
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3308      	adds	r3, #8
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c2:	3304      	adds	r3, #4
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c6:	e025      	b.n	8001214 <packetRead+0x28c>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <packetRead+0x2a8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d121      	bne.n	8001214 <packetRead+0x28c>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <packetRead+0x2bc>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <packetRead+0x2b8>)
 80011d6:	8812      	ldrh	r2, [r2, #0]
 80011d8:	4611      	mov	r1, r2
 80011da:	3b01      	subs	r3, #1
 80011dc:	b298      	uxth	r0, r3
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <packetRead+0x2cc>)
 80011e0:	460b      	mov	r3, r1
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a5b      	subs	r3, r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3318      	adds	r3, #24
 80011ec:	4602      	mov	r2, r0
 80011ee:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <packetRead+0x2b8>)
 80011f8:	8812      	ldrh	r2, [r2, #0]
 80011fa:	4610      	mov	r0, r2
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4915      	ldr	r1, [pc, #84]	; (8001254 <packetRead+0x2cc>)
 8001200:	4603      	mov	r3, r0
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a1b      	subs	r3, r3, r0
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3314      	adds	r3, #20
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	3304      	adds	r3, #4
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					point_counter++;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <packetRead+0x2b8>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <packetRead+0x2b8>)
 800121e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001220:	e0c9      	b.n	80013b6 <packetRead+0x42e>
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	a0000000 	.word	0xa0000000
 800122c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001230:	200065c0 	.word	0x200065c0
 8001234:	20006f30 	.word	0x20006f30
 8001238:	200065b8 	.word	0x200065b8
 800123c:	20006f88 	.word	0x20006f88
 8001240:	200023fc 	.word	0x200023fc
 8001244:	200023fe 	.word	0x200023fe
 8001248:	2000dd02 	.word	0x2000dd02
 800124c:	20006f60 	.word	0x20006f60
 8001250:	200065d0 	.word	0x200065d0
 8001254:	20006f98 	.word	0x20006f98
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 8001258:	4bb9      	ldr	r3, [pc, #740]	; (8001540 <packetRead+0x5b8>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4ab9      	ldr	r2, [pc, #740]	; (8001544 <packetRead+0x5bc>)
 8001260:	460b      	mov	r3, r1
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	1a5b      	subs	r3, r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	331a      	adds	r3, #26
 800126c:	7cba      	ldrb	r2, [r7, #18]
 800126e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4aaf      	ldr	r2, [pc, #700]	; (8001540 <packetRead+0x5b8>)
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	4611      	mov	r1, r2
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	4aad      	ldr	r2, [pc, #692]	; (8001544 <packetRead+0x5bc>)
 8001290:	460b      	mov	r3, r1
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	331b      	adds	r3, #27
 800129c:	4602      	mov	r2, r0
 800129e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	4aa6      	ldr	r2, [pc, #664]	; (8001540 <packetRead+0x5b8>)
 80012a8:	8812      	ldrh	r2, [r2, #0]
 80012aa:	4610      	mov	r0, r2
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	49a5      	ldr	r1, [pc, #660]	; (8001544 <packetRead+0x5bc>)
 80012b0:	4603      	mov	r3, r0
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	1a1b      	subs	r3, r3, r0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	3304      	adds	r3, #4
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a9d      	ldr	r2, [pc, #628]	; (8001540 <packetRead+0x5b8>)
 80012ca:	8812      	ldrh	r2, [r2, #0]
 80012cc:	4610      	mov	r0, r2
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	499c      	ldr	r1, [pc, #624]	; (8001544 <packetRead+0x5bc>)
 80012d2:	4603      	mov	r3, r0
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	1a1b      	subs	r3, r3, r0
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3304      	adds	r3, #4
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	3304      	adds	r3, #4
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 80012e6:	4b98      	ldr	r3, [pc, #608]	; (8001548 <packetRead+0x5c0>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	d112      	bne.n	8001314 <packetRead+0x38c>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a92      	ldr	r2, [pc, #584]	; (8001540 <packetRead+0x5b8>)
 80012f6:	8812      	ldrh	r2, [r2, #0]
 80012f8:	4610      	mov	r0, r2
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4991      	ldr	r1, [pc, #580]	; (8001544 <packetRead+0x5bc>)
 80012fe:	4603      	mov	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	1a1b      	subs	r3, r3, r0
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	3308      	adds	r3, #8
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	3304      	adds	r3, #4
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001312:	e025      	b.n	8001360 <packetRead+0x3d8>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001314:	4b8c      	ldr	r3, [pc, #560]	; (8001548 <packetRead+0x5c0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b08      	cmp	r3, #8
 800131a:	d121      	bne.n	8001360 <packetRead+0x3d8>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800131c:	4b8b      	ldr	r3, [pc, #556]	; (800154c <packetRead+0x5c4>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	4a87      	ldr	r2, [pc, #540]	; (8001540 <packetRead+0x5b8>)
 8001322:	8812      	ldrh	r2, [r2, #0]
 8001324:	4611      	mov	r1, r2
 8001326:	3b01      	subs	r3, #1
 8001328:	b298      	uxth	r0, r3
 800132a:	4a86      	ldr	r2, [pc, #536]	; (8001544 <packetRead+0x5bc>)
 800132c:	460b      	mov	r3, r1
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a5b      	subs	r3, r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3318      	adds	r3, #24
 8001338:	4602      	mov	r2, r0
 800133a:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 800133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	4a7f      	ldr	r2, [pc, #508]	; (8001540 <packetRead+0x5b8>)
 8001344:	8812      	ldrh	r2, [r2, #0]
 8001346:	4610      	mov	r0, r2
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	497e      	ldr	r1, [pc, #504]	; (8001544 <packetRead+0x5bc>)
 800134c:	4603      	mov	r3, r0
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a1b      	subs	r3, r3, r0
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	3314      	adds	r3, #20
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	3304      	adds	r3, #4
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	4a76      	ldr	r2, [pc, #472]	; (8001540 <packetRead+0x5b8>)
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	4610      	mov	r0, r2
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4975      	ldr	r1, [pc, #468]	; (8001544 <packetRead+0x5bc>)
 8001370:	4603      	mov	r3, r0
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	1a1b      	subs	r3, r3, r0
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	330c      	adds	r3, #12
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	3304      	adds	r3, #4
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4413      	add	r3, r2
 800138a:	4a6d      	ldr	r2, [pc, #436]	; (8001540 <packetRead+0x5b8>)
 800138c:	8812      	ldrh	r2, [r2, #0]
 800138e:	4610      	mov	r0, r2
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	496c      	ldr	r1, [pc, #432]	; (8001544 <packetRead+0x5bc>)
 8001394:	4603      	mov	r3, r0
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a1b      	subs	r3, r3, r0
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	3310      	adds	r3, #16
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	3304      	adds	r3, #4
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 80013a8:	4b65      	ldr	r3, [pc, #404]	; (8001540 <packetRead+0x5b8>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b63      	ldr	r3, [pc, #396]	; (8001540 <packetRead+0x5b8>)
 80013b2:	801a      	strh	r2, [r3, #0]
				}
				break;
 80013b4:	bf00      	nop
				}
        	}while(temp_pointer < length);
 80013b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	f6ff ae02 	blt.w	8000fc4 <packetRead+0x3c>
        	return CMD_GCODE;
 80013c0:	231a      	movs	r3, #26
 80013c2:	f000 bddf 	b.w	8001f84 <packetRead+0xffc>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 80013ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013d2:	2b19      	cmp	r3, #25
 80013d4:	f200 85d3 	bhi.w	8001f7e <packetRead+0xff6>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <packetRead+0x458>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	08001449 	.word	0x08001449
 80013e4:	08001461 	.word	0x08001461
 80013e8:	08001479 	.word	0x08001479
 80013ec:	08001561 	.word	0x08001561
 80013f0:	080017a7 	.word	0x080017a7
 80013f4:	08001561 	.word	0x08001561
 80013f8:	08001a19 	.word	0x08001a19
 80013fc:	08001a1d 	.word	0x08001a1d
 8001400:	08001f7f 	.word	0x08001f7f
 8001404:	08001a3d 	.word	0x08001a3d
 8001408:	08001a5b 	.word	0x08001a5b
 800140c:	08001abd 	.word	0x08001abd
 8001410:	08001b8b 	.word	0x08001b8b
 8001414:	08001f4f 	.word	0x08001f4f
 8001418:	08001f5f 	.word	0x08001f5f
 800141c:	08001f7f 	.word	0x08001f7f
 8001420:	08001f7f 	.word	0x08001f7f
 8001424:	08001e8b 	.word	0x08001e8b
 8001428:	08001f6f 	.word	0x08001f6f
 800142c:	08001f3f 	.word	0x08001f3f
 8001430:	08001b29 	.word	0x08001b29
 8001434:	08001b53 	.word	0x08001b53
 8001438:	08001f7f 	.word	0x08001f7f
 800143c:	08001f7f 	.word	0x08001f7f
 8001440:	08001bc5 	.word	0x08001bc5
 8001444:	08001cbd 	.word	0x08001cbd
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 800145a:	2300      	movs	r3, #0
 800145c:	f000 bd92 	b.w	8001f84 <packetRead+0xffc>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2201      	movs	r2, #1
 8001464:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001472:	2301      	movs	r3, #1
 8001474:	f000 bd86 	b.w	8001f84 <packetRead+0xffc>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d15d      	bne.n	800153a <packetRead+0x5b2>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800147e:	f06f 0301 	mvn.w	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	3304      	adds	r3, #4
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001550 <packetRead+0x5c8>
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	ee17 0a90 	vmov	r0, s15
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 80014b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001550 <packetRead+0x5c8>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7ff f83a 	bl	8000548 <__aeabi_f2d>
 80014d4:	4603      	mov	r3, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	4c1b      	ldr	r4, [pc, #108]	; (8001554 <packetRead+0x5cc>)
 80014e6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	4c19      	ldr	r4, [pc, #100]	; (8001558 <packetRead+0x5d0>)
 80014f2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	4c17      	ldr	r4, [pc, #92]	; (800155c <packetRead+0x5d4>)
 80014fe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	f04f 0400 	mov.w	r4, #0
 800150c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2200      	movs	r2, #0
 8001514:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2201      	movs	r2, #1
 8001520:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2202      	movs	r2, #2
 8001526:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 8001534:	2302      	movs	r3, #2
 8001536:	f000 bd25 	b.w	8001f84 <packetRead+0xffc>
                        return CMD_ERROR;
 800153a:	2316      	movs	r3, #22
 800153c:	f000 bd22 	b.w	8001f84 <packetRead+0xffc>
 8001540:	200023fc 	.word	0x200023fc
 8001544:	20006f98 	.word	0x20006f98
 8001548:	200065c0 	.word	0x200065c0
 800154c:	200023fe 	.word	0x200023fe
 8001550:	358637bd 	.word	0x358637bd
 8001554:	406f4000 	.word	0x406f4000
 8001558:	c0690000 	.word	0xc0690000
 800155c:	405e0000 	.word	0x405e0000

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b1d      	cmp	r3, #29
 8001564:	f040 8111 	bne.w	800178a <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 8001568:	f06f 0301 	mvn.w	r3, #1
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	3304      	adds	r3, #4
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffd1 	bl	8000524 <__aeabi_i2d>
 8001582:	f20f 7324 	addw	r3, pc, #1828	; 0x724
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f835 	bl	80005f8 <__aeabi_dmul>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	3304      	adds	r3, #4
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffbc 	bl	8000524 <__aeabi_i2d>
 80015ac:	f20f 63f8 	addw	r3, pc, #1784	; 0x6f8
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f820 	bl	80005f8 <__aeabi_dmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	3304      	adds	r3, #4
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffa7 	bl	8000524 <__aeabi_i2d>
 80015d6:	f20f 63d0 	addw	r3, pc, #1744	; 0x6d0
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f80b 	bl	80005f8 <__aeabi_dmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	460c      	mov	r4, r1
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	3304      	adds	r3, #4
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	f20f 63a4 	addw	r3, pc, #1700	; 0x6a4
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fff6 	bl	80005f8 <__aeabi_dmul>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	3304      	adds	r3, #4
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff7d 	bl	8000524 <__aeabi_i2d>
 800162a:	f20f 637c 	addw	r3, pc, #1660	; 0x67c
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ffe1 	bl	80005f8 <__aeabi_dmul>
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	3304      	adds	r3, #4
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <packetRead+0x700>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	3301      	adds	r3, #1
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff5a 	bl	8000524 <__aeabi_i2d>
 8001670:	f20f 6334 	addw	r3, pc, #1588	; 0x634
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 8001686:	e056      	b.n	8001736 <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001688:	7cfb      	ldrb	r3, [r7, #19]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d118      	bne.n	80016c0 <packetRead+0x738>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	3301      	adds	r3, #1
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff3e 	bl	8000524 <__aeabi_i2d>
 80016a8:	f20f 53fc 	addw	r3, pc, #1532	; 0x5fc
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe ffa2 	bl	80005f8 <__aeabi_dmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80016be:	e03a      	b.n	8001736 <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80016c0:	7cfb      	ldrb	r3, [r7, #19]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d118      	bne.n	80016f8 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2203      	movs	r2, #3
 80016ca:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	3301      	adds	r3, #1
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff22 	bl	8000524 <__aeabi_i2d>
 80016e0:	f20f 53c4 	addw	r3, pc, #1476	; 0x5c4
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff86 	bl	80005f8 <__aeabi_dmul>
 80016ec:	4603      	mov	r3, r0
 80016ee:	460c      	mov	r4, r1
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80016f6:	e01e      	b.n	8001736 <packetRead+0x7ae>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 80016f8:	7cfb      	ldrb	r3, [r7, #19]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d118      	bne.n	8001730 <packetRead+0x7a8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2202      	movs	r2, #2
 8001702:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	3301      	adds	r3, #1
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff06 	bl	8000524 <__aeabi_i2d>
 8001718:	f20f 538c 	addw	r3, pc, #1420	; 0x58c
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe ff6a 	bl	80005f8 <__aeabi_dmul>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 800172e:	e002      	b.n	8001736 <packetRead+0x7ae>
						}else{
							return CMD_ERROR;
 8001730:	2316      	movs	r3, #22
 8001732:	f000 bc27 	b.w	8001f84 <packetRead+0xffc>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	3304      	adds	r3, #4
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	3301      	adds	r3, #1
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 800175a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800175e:	2b03      	cmp	r3, #3
 8001760:	d106      	bne.n	8001770 <packetRead+0x7e8>
							duty_cmd->path_type = DUTY_PATH_LINE;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2200      	movs	r2, #0
 8001766:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	735a      	strb	r2, [r3, #13]
 800176e:	e00e      	b.n	800178e <packetRead+0x806>
						}else if(command_id == CMD_MOVE_JOINT){
 8001770:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001774:	2b05      	cmp	r3, #5
 8001776:	d106      	bne.n	8001786 <packetRead+0x7fe>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	735a      	strb	r2, [r3, #13]
 8001784:	e003      	b.n	800178e <packetRead+0x806>
						}else{
							return CMD_ERROR;
 8001786:	2316      	movs	r3, #22
 8001788:	e3fc      	b.n	8001f84 <packetRead+0xffc>
						}

					}else{
						return CMD_ERROR;
 800178a:	2316      	movs	r3, #22
 800178c:	e3fa      	b.n	8001f84 <packetRead+0xffc>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2202      	movs	r2, #2
 8001792:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
					return command_id;
 80017a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017a4:	e3ee      	b.n	8001f84 <packetRead+0xffc>
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b22      	cmp	r3, #34	; 0x22
 80017aa:	f040 8133 	bne.w	8001a14 <packetRead+0xa8c>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 80017ae:	f06f 0301 	mvn.w	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	3304      	adds	r3, #4
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe feae 	bl	8000524 <__aeabi_i2d>
 80017c8:	f20f 43dc 	addw	r3, pc, #1244	; 0x4dc
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe ff12 	bl	80005f8 <__aeabi_dmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80017de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e0:	3304      	adds	r3, #4
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe99 	bl	8000524 <__aeabi_i2d>
 80017f2:	f20f 43b4 	addw	r3, pc, #1204	; 0x4b4
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	3304      	adds	r3, #4
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe84 	bl	8000524 <__aeabi_i2d>
 800181c:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fee8 	bl	80005f8 <__aeabi_dmul>
 8001828:	4603      	mov	r3, r0
 800182a:	460c      	mov	r4, r1
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	3304      	adds	r3, #4
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe6f 	bl	8000524 <__aeabi_i2d>
 8001846:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fed3 	bl	80005f8 <__aeabi_dmul>
 8001852:	4603      	mov	r3, r0
 8001854:	460c      	mov	r4, r1
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	3304      	adds	r3, #4
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe5a 	bl	8000524 <__aeabi_i2d>
 8001870:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe febe 	bl	80005f8 <__aeabi_dmul>
 800187c:	4603      	mov	r3, r0
 800187e:	460c      	mov	r4, r1
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	3304      	adds	r3, #4
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe45 	bl	8000524 <__aeabi_i2d>
 800189a:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fea9 	bl	80005f8 <__aeabi_dmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	3304      	adds	r3, #4
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 80018c0:	7d7b      	ldrb	r3, [r7, #21]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d103      	bne.n	80018ce <packetRead+0x946>
                			duty_cmd->arc_dir = 1;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	e009      	b.n	80018e2 <packetRead+0x95a>
                		}else if(arc_type == ARC_CW_TYPE){
 80018ce:	7d7b      	ldrb	r3, [r7, #21]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d104      	bne.n	80018de <packetRead+0x956>
                			duty_cmd->arc_dir = -1;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	e001      	b.n	80018e2 <packetRead+0x95a>
                		}else{
                			return CMD_ERROR;
 80018de:	2316      	movs	r3, #22
 80018e0:	e350      	b.n	8001f84 <packetRead+0xffc>
                		}
                		mode_init = message[temp_pointer+=1];
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	3301      	adds	r3, #1
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 80018f2:	7d3b      	ldrb	r3, [r7, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d117      	bne.n	8001928 <packetRead+0x9a0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	3301      	adds	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe09 	bl	8000524 <__aeabi_i2d>
 8001912:	a3e5      	add	r3, pc, #916	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fe6e 	bl	80005f8 <__aeabi_dmul>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 8001926:	e052      	b.n	80019ce <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001928:	7d3b      	ldrb	r3, [r7, #20]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d117      	bne.n	800195e <packetRead+0x9d6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	3301      	adds	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdee 	bl	8000524 <__aeabi_i2d>
 8001948:	a3d7      	add	r3, pc, #860	; (adr r3, 8001ca8 <packetRead+0xd20>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe53 	bl	80005f8 <__aeabi_dmul>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800195c:	e037      	b.n	80019ce <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800195e:	7d3b      	ldrb	r3, [r7, #20]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d117      	bne.n	8001994 <packetRead+0xa0c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2203      	movs	r2, #3
 8001968:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	3301      	adds	r3, #1
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fdd3 	bl	8000524 <__aeabi_i2d>
 800197e:	a3ca      	add	r3, pc, #808	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe38 	bl	80005f8 <__aeabi_dmul>
 8001988:	4603      	mov	r3, r0
 800198a:	460c      	mov	r4, r1
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001992:	e01c      	b.n	80019ce <packetRead+0xa46>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001994:	7d3b      	ldrb	r3, [r7, #20]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d117      	bne.n	80019ca <packetRead+0xa42>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2202      	movs	r2, #2
 800199e:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	3301      	adds	r3, #1
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdb8 	bl	8000524 <__aeabi_i2d>
 80019b4:	a3bc      	add	r3, pc, #752	; (adr r3, 8001ca8 <packetRead+0xd20>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fe1d 	bl	80005f8 <__aeabi_dmul>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 80019c8:	e001      	b.n	80019ce <packetRead+0xa46>
						}else{
							return CMD_ERROR;
 80019ca:	2316      	movs	r3, #22
 80019cc:	e2da      	b.n	8001f84 <packetRead+0xffc>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	3304      	adds	r3, #4
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	3301      	adds	r3, #1
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2202      	movs	r2, #2
 8001a02:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a10:	2304      	movs	r3, #4
 8001a12:	e2b7      	b.n	8001f84 <packetRead+0xffc>
                		return CMD_ERROR;
 8001a14:	2316      	movs	r3, #22
 8001a16:	e2b5      	b.n	8001f84 <packetRead+0xffc>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a18:	2306      	movs	r3, #6
 8001a1a:	e2b3      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d10a      	bne.n	8001a38 <packetRead+0xab0>
						temp_pointer = 2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001a34:	2307      	movs	r3, #7
 8001a36:	e2a5      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001a38:	2316      	movs	r3, #22
 8001a3a:	e2a3      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d109      	bne.n	8001a56 <packetRead+0xace>
						temp_pointer = 2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b98      	ldr	r3, [pc, #608]	; (8001cb0 <packetRead+0xd28>)
 8001a50:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001a52:	2309      	movs	r3, #9
 8001a54:	e296      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001a56:	2316      	movs	r3, #22
 8001a58:	e294      	b.n	8001f84 <packetRead+0xffc>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	d12b      	bne.n	8001ab8 <packetRead+0xb30>
						temp_pointer = 2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b25a      	sxtb	r2, r3
 8001a74:	4b8f      	ldr	r3, [pc, #572]	; (8001cb4 <packetRead+0xd2c>)
 8001a76:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	4b8a      	ldr	r3, [pc, #552]	; (8001cb4 <packetRead+0xd2c>)
 8001a8a:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b25a      	sxtb	r2, r3
 8001a9c:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <packetRead+0xd2c>)
 8001a9e:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	4b80      	ldr	r3, [pc, #512]	; (8001cb4 <packetRead+0xd2c>)
 8001ab2:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	e265      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001ab8:	2316      	movs	r3, #22
 8001aba:	e263      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d130      	bne.n	8001b24 <packetRead+0xb9c>
						uint8_t method;
						temp_pointer = 2;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001ad0:	7dbb      	ldrb	r3, [r7, #22]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d103      	bne.n	8001ade <packetRead+0xb56>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	705a      	strb	r2, [r3, #1]
 8001adc:	e01d      	b.n	8001b1a <packetRead+0xb92>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d103      	bne.n	8001aec <packetRead+0xb64>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	705a      	strb	r2, [r3, #1]
 8001aea:	e016      	b.n	8001b1a <packetRead+0xb92>
						} else if (SCARA_METHOD_GCODE == method) {
 8001aec:	7dbb      	ldrb	r3, [r7, #22]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d103      	bne.n	8001afa <packetRead+0xb72>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2202      	movs	r2, #2
 8001af6:	705a      	strb	r2, [r3, #1]
 8001af8:	e00f      	b.n	8001b1a <packetRead+0xb92>
						}else if(SCARA_METHOD_TEST == method){
 8001afa:	7dbb      	ldrb	r3, [r7, #22]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d103      	bne.n	8001b08 <packetRead+0xb80>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2203      	movs	r2, #3
 8001b04:	705a      	strb	r2, [r3, #1]
 8001b06:	e008      	b.n	8001b1a <packetRead+0xb92>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001b08:	7dbb      	ldrb	r3, [r7, #22]
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d103      	bne.n	8001b16 <packetRead+0xb8e>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2204      	movs	r2, #4
 8001b12:	705a      	strb	r2, [r3, #1]
 8001b14:	e001      	b.n	8001b1a <packetRead+0xb92>
						}else {
							return CMD_ERROR;
 8001b16:	2316      	movs	r3, #22
 8001b18:	e234      	b.n	8001f84 <packetRead+0xffc>
						}
						duty_cmd->change_method = TRUE;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001b20:	230b      	movs	r3, #11
 8001b22:	e22f      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001b24:	2316      	movs	r3, #22
 8001b26:	e22d      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d10f      	bne.n	8001b4e <packetRead+0xbc6>
						int temp_pointer = 2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001b4a:	2314      	movs	r3, #20
 8001b4c:	e21a      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001b4e:	2316      	movs	r3, #22
 8001b50:	e218      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d116      	bne.n	8001b86 <packetRead+0xbfe>
						int temp_pointer = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	dd02      	ble.n	8001b72 <packetRead+0xbea>
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2b0e      	cmp	r3, #14
 8001b70:	dd01      	ble.n	8001b76 <packetRead+0xbee>
							return CMD_ERROR;
 8001b72:	2316      	movs	r3, #22
 8001b74:	e206      	b.n	8001f84 <packetRead+0xffc>
						}
						duty_cmd->key_speed = speed;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <packetRead+0xd30>)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001b82:	2315      	movs	r3, #21
 8001b84:	e1fe      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001b86:	2316      	movs	r3, #22
 8001b88:	e1fc      	b.n	8001f84 <packetRead+0xffc>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d117      	bne.n	8001bc0 <packetRead+0xc38>
						int temp_pointer = 2;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d901      	bls.n	8001ba8 <packetRead+0xc20>
							return CMD_ERROR;
 8001ba4:	2316      	movs	r3, #22
 8001ba6:	e1ed      	b.n	8001f84 <packetRead+0xffc>
						}
						duty_cmd->test_key = test_key;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	7dfa      	ldrb	r2, [r7, #23]
 8001bac:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	e1e1      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001bc0:	2316      	movs	r3, #22
 8001bc2:	e1df      	b.n	8001f84 <packetRead+0xffc>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	d16a      	bne.n	8001ca0 <packetRead+0xd18>
						temp_pointer = -2;
 8001bca:	f06f 0301 	mvn.w	r3, #1
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fca0 	bl	8000524 <__aeabi_i2d>
 8001be4:	a330      	add	r3, pc, #192	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fd05 	bl	80005f8 <__aeabi_dmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc8c 	bl	8000524 <__aeabi_i2d>
 8001c0c:	a326      	add	r3, pc, #152	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fcf1 	bl	80005f8 <__aeabi_dmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	3304      	adds	r3, #4
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc78 	bl	8000524 <__aeabi_i2d>
 8001c34:	a31c      	add	r3, pc, #112	; (adr r3, 8001ca8 <packetRead+0xd20>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fcdd 	bl	80005f8 <__aeabi_dmul>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460c      	mov	r4, r1
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc4e 	bl	8000504 <__aeabi_ui2d>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2200      	movs	r2, #0
 8001c88:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2204      	movs	r2, #4
 8001c94:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001c9c:	2318      	movs	r3, #24
 8001c9e:	e171      	b.n	8001f84 <packetRead+0xffc>
						return CMD_ERROR;
 8001ca0:	2316      	movs	r3, #22
 8001ca2:	e16f      	b.n	8001f84 <packetRead+0xffc>
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	a0000000 	.word	0xa0000000
 8001cac:	3eb0c6f7 	.word	0x3eb0c6f7
 8001cb0:	2000dd00 	.word	0x2000dd00
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000060 	.word	0x20000060
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 46) { // 11 int32_t number + 2 define byte
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8001cc0:	f040 80e1 	bne.w	8001e86 <packetRead+0xefe>
						temp_pointer = -2;
 8001cc4:	f06f 0301 	mvn.w	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	3304      	adds	r3, #4
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc23 	bl	8000524 <__aeabi_i2d>
 8001cde:	a3ac      	add	r3, pc, #688	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fc88 	bl	80005f8 <__aeabi_dmul>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	460c      	mov	r4, r1
 8001cec:	4aaa      	ldr	r2, [pc, #680]	; (8001f98 <packetRead+0x1010>)
 8001cee:	e9c2 3400 	strd	r3, r4, [r2]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc0f 	bl	8000524 <__aeabi_i2d>
 8001d06:	a3a2      	add	r3, pc, #648	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc74 	bl	80005f8 <__aeabi_dmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	4aa1      	ldr	r2, [pc, #644]	; (8001f9c <packetRead+0x1014>)
 8001d16:	e9c2 3400 	strd	r3, r4, [r2]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fbfb 	bl	8000524 <__aeabi_i2d>
 8001d2e:	a398      	add	r3, pc, #608	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc60 	bl	80005f8 <__aeabi_dmul>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	4a98      	ldr	r2, [pc, #608]	; (8001fa0 <packetRead+0x1018>)
 8001d3e:	e9c2 3400 	strd	r3, r4, [r2]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	3304      	adds	r3, #4
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbe7 	bl	8000524 <__aeabi_i2d>
 8001d56:	a38e      	add	r3, pc, #568	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc4c 	bl	80005f8 <__aeabi_dmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4a8f      	ldr	r2, [pc, #572]	; (8001fa4 <packetRead+0x101c>)
 8001d66:	e9c2 3400 	strd	r3, r4, [r2]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbd3 	bl	8000524 <__aeabi_i2d>
 8001d7e:	a384      	add	r3, pc, #528	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fc38 	bl	80005f8 <__aeabi_dmul>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	4a86      	ldr	r2, [pc, #536]	; (8001fa8 <packetRead+0x1020>)
 8001d8e:	e9c2 3400 	strd	r3, r4, [r2]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	3304      	adds	r3, #4
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbbf 	bl	8000524 <__aeabi_i2d>
 8001da6:	a37a      	add	r3, pc, #488	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fc24 	bl	80005f8 <__aeabi_dmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	4a7d      	ldr	r2, [pc, #500]	; (8001fac <packetRead+0x1024>)
 8001db6:	e9c2 3400 	strd	r3, r4, [r2]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbab 	bl	8000524 <__aeabi_i2d>
 8001dce:	a370      	add	r3, pc, #448	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fc10 	bl	80005f8 <__aeabi_dmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	4a74      	ldr	r2, [pc, #464]	; (8001fb0 <packetRead+0x1028>)
 8001dde:	e9c2 3400 	strd	r3, r4, [r2]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	3304      	adds	r3, #4
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb97 	bl	8000524 <__aeabi_i2d>
 8001df6:	a366      	add	r3, pc, #408	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fbfc 	bl	80005f8 <__aeabi_dmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	4a6b      	ldr	r2, [pc, #428]	; (8001fb4 <packetRead+0x102c>)
 8001e06:	e9c2 3400 	strd	r3, r4, [r2]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb83 	bl	8000524 <__aeabi_i2d>
 8001e1e:	a35c      	add	r3, pc, #368	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fbe8 	bl	80005f8 <__aeabi_dmul>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	4a62      	ldr	r2, [pc, #392]	; (8001fb8 <packetRead+0x1030>)
 8001e2e:	e9c2 3400 	strd	r3, r4, [r2]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	3304      	adds	r3, #4
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	a352      	add	r3, pc, #328	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbd4 	bl	80005f8 <__aeabi_dmul>
 8001e50:	4603      	mov	r3, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	4a59      	ldr	r2, [pc, #356]	; (8001fbc <packetRead+0x1034>)
 8001e56:	e9c2 3400 	strd	r3, r4, [r2]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb5b 	bl	8000524 <__aeabi_i2d>
 8001e6e:	a348      	add	r3, pc, #288	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fbc0 	bl	80005f8 <__aeabi_dmul>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <packetRead+0x1038>)
 8001e7e:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001e82:	2319      	movs	r3, #25
 8001e84:	e07e      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001e86:	2316      	movs	r3, #22
 8001e88:	e07c      	b.n	8001f84 <packetRead+0xffc>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b12      	cmp	r3, #18
 8001e8e:	d154      	bne.n	8001f3a <packetRead+0xfb2>
						temp_pointer = -2;
 8001e90:	f06f 0301 	mvn.w	r3, #1
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	3304      	adds	r3, #4
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb3d 	bl	8000524 <__aeabi_i2d>
 8001eaa:	a339      	add	r3, pc, #228	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fba2 	bl	80005f8 <__aeabi_dmul>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	4a42      	ldr	r2, [pc, #264]	; (8001fc4 <packetRead+0x103c>)
 8001eba:	e9c2 3400 	strd	r3, r4, [r2]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb29 	bl	8000524 <__aeabi_i2d>
 8001ed2:	a32f      	add	r3, pc, #188	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fb8e 	bl	80005f8 <__aeabi_dmul>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	4a39      	ldr	r2, [pc, #228]	; (8001fc8 <packetRead+0x1040>)
 8001ee2:	e9c2 3400 	strd	r3, r4, [r2]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	3304      	adds	r3, #4
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb15 	bl	8000524 <__aeabi_i2d>
 8001efa:	a325      	add	r3, pc, #148	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fb7a 	bl	80005f8 <__aeabi_dmul>
 8001f04:	4603      	mov	r3, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <packetRead+0x1044>)
 8001f0a:	e9c2 3400 	strd	r3, r4, [r2]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	3304      	adds	r3, #4
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fb01 	bl	8000524 <__aeabi_i2d>
 8001f22:	a31b      	add	r3, pc, #108	; (adr r3, 8001f90 <packetRead+0x1008>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	f7fe fb66 	bl	80005f8 <__aeabi_dmul>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <packetRead+0x1048>)
 8001f32:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_GCODE_CONFIGURE;
 8001f36:	2311      	movs	r3, #17
 8001f38:	e024      	b.n	8001f84 <packetRead+0xffc>
					}else{
						return CMD_ERROR;
 8001f3a:	2316      	movs	r3, #22
 8001f3c:	e022      	b.n	8001f84 <packetRead+0xffc>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2202      	movs	r2, #2
 8001f42:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001f4a:	2313      	movs	r3, #19
 8001f4c:	e01a      	b.n	8001f84 <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2202      	movs	r2, #2
 8001f52:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001f5a:	230d      	movs	r3, #13
 8001f5c:	e012      	b.n	8001f84 <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2202      	movs	r2, #2
 8001f62:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001f6a:	230e      	movs	r3, #14
 8001f6c:	e00a      	b.n	8001f84 <packetRead+0xffc>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2202      	movs	r2, #2
 8001f72:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001f7a:	2312      	movs	r3, #18
 8001f7c:	e002      	b.n	8001f84 <packetRead+0xffc>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001f7e:	2316      	movs	r3, #22
 8001f80:	e000      	b.n	8001f84 <packetRead+0xffc>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001f82:	2317      	movs	r3, #23
        }
    }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3734      	adds	r7, #52	; 0x34
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	f3af 8000 	nop.w
 8001f90:	a0000000 	.word	0xa0000000
 8001f94:	3eb0c6f7 	.word	0x3eb0c6f7
 8001f98:	20000058 	.word	0x20000058
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	20000018 	.word	0x20000018
 8001fa8:	20000020 	.word	0x20000020
 8001fac:	20000028 	.word	0x20000028
 8001fb0:	20000030 	.word	0x20000030
 8001fb4:	20000038 	.word	0x20000038
 8001fb8:	20000040 	.word	0x20000040
 8001fbc:	20000048 	.word	0x20000048
 8001fc0:	20000050 	.word	0x20000050
 8001fc4:	20006f80 	.word	0x20006f80
 8001fc8:	2000dd18 	.word	0x2000dd18
 8001fcc:	2000dd08 	.word	0x2000dd08
 8001fd0:	20006f78 	.word	0x20006f78

08001fd4 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b0e2      	sub	sp, #392	; 0x188
 8001fda:	af2e      	add	r7, sp, #184	; 0xb8
 8001fdc:	4601      	mov	r1, r0
 8001fde:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001fe2:	e880 000c 	stmia.w	r0, {r2, r3}
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b1a      	cmp	r3, #26
 8001fee:	f200 815e 	bhi.w	80022ae <commandReply+0x2da>
 8001ff2:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <commandReply+0x24>)
 8001ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff8:	08002065 	.word	0x08002065
 8001ffc:	08002065 	.word	0x08002065
 8002000:	08002065 	.word	0x08002065
 8002004:	08002065 	.word	0x08002065
 8002008:	08002065 	.word	0x08002065
 800200c:	08002065 	.word	0x08002065
 8002010:	08002065 	.word	0x08002065
 8002014:	0800206d 	.word	0x0800206d
 8002018:	080020e7 	.word	0x080020e7
 800201c:	0800211b 	.word	0x0800211b
 8002020:	080021b1 	.word	0x080021b1
 8002024:	080021db 	.word	0x080021db
 8002028:	08002065 	.word	0x08002065
 800202c:	0800223d 	.word	0x0800223d
 8002030:	0800223d 	.word	0x0800223d
 8002034:	0800223d 	.word	0x0800223d
 8002038:	0800223d 	.word	0x0800223d
 800203c:	0800221b 	.word	0x0800221b
 8002040:	0800223d 	.word	0x0800223d
 8002044:	0800223d 	.word	0x0800223d
 8002048:	08002245 	.word	0x08002245
 800204c:	0800224d 	.word	0x0800224d
 8002050:	0800228d 	.word	0x0800228d
 8002054:	080022af 	.word	0x080022af
 8002058:	08002065 	.word	0x08002065
 800205c:	080021d3 	.word	0x080021d3
 8002060:	080021e3 	.word	0x080021e3
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002064:	2309      	movs	r3, #9
 8002066:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800206a:	e130      	b.n	80022ce <commandReply+0x2fa>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 800206c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002070:	2b01      	cmp	r3, #1
 8002072:	d110      	bne.n	8002096 <commandReply+0xc2>
				scaraSetOutput(1);
 8002074:	2001      	movs	r0, #1
 8002076:	f008 fae7 	bl	800a648 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 800207a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002086:	6011      	str	r1, [r2, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800208e:	4413      	add	r3, r2
 8002090:	220d      	movs	r2, #13
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e023      	b.n	80020de <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 8002096:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800209a:	2b00      	cmp	r3, #0
 800209c:	d110      	bne.n	80020c0 <commandReply+0xec>
				scaraSetOutput(0);
 800209e:	2000      	movs	r0, #0
 80020a0:	f008 fad2 	bl	800a648 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 80020a4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1c59      	adds	r1, r3, #1
 80020ac:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020b8:	4413      	add	r3, r2
 80020ba:	220e      	movs	r2, #14
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e00e      	b.n	80020de <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 80020c0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1c59      	adds	r1, r3, #1
 80020c8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020cc:	6011      	str	r1, [r2, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80020d4:	4413      	add	r3, r2
 80020d6:	220f      	movs	r2, #15
 80020d8:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80020da:	2307      	movs	r3, #7
 80020dc:	e0f9      	b.n	80022d2 <commandReply+0x2fe>
			}
			ret = RPD_OK;
 80020de:	2308      	movs	r3, #8
 80020e0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80020e4:	e0f3      	b.n	80022ce <commandReply+0x2fa>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80020e6:	f008 fb11 	bl	800a70c <scaraGetMode>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 80020f0:	f008 fb24 	bl	800a73c <scaraGetDutyState>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80020fa:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <commandReply+0x13e>
 8002102:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <commandReply+0x13e>
				ret = RPD_IDLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8002110:	e0dd      	b.n	80022ce <commandReply+0x2fa>
				ret = RPD_BUSY;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002118:	e0d9      	b.n	80022ce <commandReply+0x2fa>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800211a:	4b71      	ldr	r3, [pc, #452]	; (80022e0 <commandReply+0x30c>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <commandReply+0x156>
 8002122:	4b6f      	ldr	r3, [pc, #444]	; (80022e0 <commandReply+0x30c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d113      	bne.n	8002152 <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fe7e 	bl	8005e30 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	4618      	mov	r0, r3
 800213a:	f002 ff35 	bl	8004fa8 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800213e:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <commandReply+0x30c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d11e      	bne.n	8002184 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4618      	mov	r0, r3
 800214c:	f008 face 	bl	800a6ec <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8002150:	e018      	b.n	8002184 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <commandReply+0x30c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d105      	bne.n	8002166 <commandReply+0x192>
				scaraGetPosition(&position);
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	4618      	mov	r0, r3
 8002160:	f008 fab4 	bl	800a6cc <scaraGetPosition>
 8002164:	e00e      	b.n	8002184 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8002166:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c59      	adds	r1, r3, #1
 800216e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002172:	6011      	str	r1, [r2, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800217a:	4413      	add	r3, r2
 800217c:	2210      	movs	r2, #16
 800217e:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8002180:	2307      	movs	r3, #7
 8002182:	e0a6      	b.n	80022d2 <commandReply+0x2fe>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8002184:	4668      	mov	r0, sp
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	22b8      	movs	r2, #184	; 0xb8
 800218c:	4619      	mov	r1, r3
 800218e:	f013 fdf5 	bl	8015d7c <memcpy>
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	cb0c      	ldmia	r3, {r2, r3}
 8002198:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 800219c:	f008 fb04 	bl	800a7a8 <scaraPosition_packaging>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021a6:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 80021a8:	2302      	movs	r3, #2
 80021aa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80021ae:	e08e      	b.n	80022ce <commandReply+0x2fa>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 80021b0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021c4:	4413      	add	r3, r2
 80021c6:	2211      	movs	r2, #17
 80021c8:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80021ca:	2308      	movs	r3, #8
 80021cc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80021d0:	e07d      	b.n	80022ce <commandReply+0x2fa>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 80021d2:	2308      	movs	r3, #8
 80021d4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80021d8:	e079      	b.n	80022ce <commandReply+0x2fa>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 80021da:	2309      	movs	r3, #9
 80021dc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80021e0:	e075      	b.n	80022ce <commandReply+0x2fa>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 80021e2:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <commandReply+0x310>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <commandReply+0x314>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d110      	bne.n	8002212 <commandReply+0x23e>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 80021f0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1c59      	adds	r1, r3, #1
 80021f8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021fc:	6011      	str	r1, [r2, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002204:	4413      	add	r3, r2
 8002206:	221e      	movs	r2, #30
 8002208:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 800220a:	2308      	movs	r3, #8
 800220c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8002210:	e05d      	b.n	80022ce <commandReply+0x2fa>
			ret = RPD_TRANSFER;
 8002212:	230a      	movs	r3, #10
 8002214:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002218:	e059      	b.n	80022ce <commandReply+0x2fa>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 800221a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1c59      	adds	r1, r3, #1
 8002222:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002226:	6011      	str	r1, [r2, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800222e:	4413      	add	r3, r2
 8002230:	221f      	movs	r2, #31
 8002232:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002234:	2308      	movs	r3, #8
 8002236:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 800223a:	e048      	b.n	80022ce <commandReply+0x2fa>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 800223c:	2309      	movs	r3, #9
 800223e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002242:	e044      	b.n	80022ce <commandReply+0x2fa>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8002244:	2309      	movs	r3, #9
 8002246:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800224a:	e040      	b.n	80022ce <commandReply+0x2fa>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 800224c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002258:	6011      	str	r1, [r2, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002260:	4413      	add	r3, r2
 8002262:	2216      	movs	r2, #22
 8002264:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8002266:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800226a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1c59      	adds	r1, r3, #1
 8002272:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002276:	6011      	str	r1, [r2, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800227e:	4413      	add	r3, r2
 8002280:	b2c2      	uxtb	r2, r0
 8002282:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002284:	2308      	movs	r3, #8
 8002286:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800228a:	e020      	b.n	80022ce <commandReply+0x2fa>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 800228c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1c59      	adds	r1, r3, #1
 8002294:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022a0:	4413      	add	r3, r2
 80022a2:	2215      	movs	r2, #21
 80022a4:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80022a6:	2307      	movs	r3, #7
 80022a8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022ac:	e00f      	b.n	80022ce <commandReply+0x2fa>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 80022ae:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c59      	adds	r1, r3, #1
 80022b6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022ba:	6011      	str	r1, [r2, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022c2:	4413      	add	r3, r2
 80022c4:	2217      	movs	r2, #23
 80022c6:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80022c8:	2307      	movs	r3, #7
 80022ca:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 80022ce:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	37d0      	adds	r7, #208	; 0xd0
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022dc:	b002      	add	sp, #8
 80022de:	4770      	bx	lr
 80022e0:	2000dd00 	.word	0x2000dd00
 80022e4:	200023fc 	.word	0x200023fc
 80022e8:	20006f88 	.word	0x20006f88

080022ec <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	617a      	str	r2, [r7, #20]
 8002306:	461a      	mov	r2, r3
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	4413      	add	r3, r2
 800230c:	2228      	movs	r2, #40	; 0x28
 800230e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	617a      	str	r2, [r7, #20]
 8002316:	461a      	mov	r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	4413      	add	r3, r2
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	617a      	str	r2, [r7, #20]
 8002326:	461a      	mov	r2, r3
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	4413      	add	r3, r2
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	617a      	str	r2, [r7, #20]
 8002336:	461a      	mov	r2, r3
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	4413      	add	r3, r2
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	617a      	str	r2, [r7, #20]
 8002346:	461a      	mov	r2, r3
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	4413      	add	r3, r2
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00c      	beq.n	8002372 <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	6a3a      	ldr	r2, [r7, #32]
 800235c:	4413      	add	r3, r2
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f013 fd0a 	bl	8015d7c <memcpy>
		out_length += detail_length;
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e007      	b.n	8002382 <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	617a      	str	r2, [r7, #20]
 8002378:	461a      	mov	r2, r3
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	4413      	add	r3, r2
 800237e:	2225      	movs	r2, #37	; 0x25
 8002380:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	617a      	str	r2, [r7, #20]
 8002388:	461a      	mov	r2, r3
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	4413      	add	r3, r2
 800238e:	227d      	movs	r2, #125	; 0x7d
 8002390:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	617a      	str	r2, [r7, #20]
 8002398:	461a      	mov	r2, r3
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	4413      	add	r3, r2
 800239e:	2229      	movs	r2, #41	; 0x29
 80023a0:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	3301      	adds	r3, #1
 80023aa:	3a02      	subs	r2, #2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
	return out_length;
 80023b0:	697b      	ldr	r3, [r7, #20]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b096      	sub	sp, #88	; 0x58
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	f107 0008 	add.w	r0, r7, #8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	4a17      	ldr	r2, [pc, #92]	; (8002434 <LOG_REPORT+0x78>)
 80023d6:	213f      	movs	r1, #63	; 0x3f
 80023d8:	f014 fbf8 	bl	8016bcc <sniprintf>
 80023dc:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80023de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d101      	bne.n	80023ea <LOG_REPORT+0x2e>
		return FALSE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e01f      	b.n	800242a <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023f0:	4619      	mov	r1, r3
 80023f2:	4811      	ldr	r0, [pc, #68]	; (8002438 <LOG_REPORT+0x7c>)
 80023f4:	f003 fa38 	bl	8005868 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80023f8:	4810      	ldr	r0, [pc, #64]	; (800243c <LOG_REPORT+0x80>)
 80023fa:	f009 fca1 	bl	800bd40 <HAL_DMA_GetState>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b02      	cmp	r3, #2
 8002402:	d101      	bne.n	8002408 <LOG_REPORT+0x4c>
		return TRUE;
 8002404:	2301      	movs	r3, #1
 8002406:	e010      	b.n	800242a <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <LOG_REPORT+0x84>)
 800240e:	480a      	ldr	r0, [pc, #40]	; (8002438 <LOG_REPORT+0x7c>)
 8002410:	f003 fa52 	bl	80058b8 <ringBuff_PopArray>
 8002414:	4603      	mov	r3, r0
 8002416:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800241a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800241e:	461a      	mov	r2, r3
 8002420:	4907      	ldr	r1, [pc, #28]	; (8002440 <LOG_REPORT+0x84>)
 8002422:	4808      	ldr	r0, [pc, #32]	; (8002444 <LOG_REPORT+0x88>)
 8002424:	f00c fa0c 	bl	800e840 <HAL_UART_Transmit_DMA>
	return TRUE;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	3750      	adds	r7, #80	; 0x50
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	0801b260 	.word	0x0801b260
 8002438:	20001070 	.word	0x20001070
 800243c:	2000edf0 	.word	0x2000edf0
 8002440:	2000dd20 	.word	0x2000dd20
 8002444:	2000edb0 	.word	0x2000edb0

08002448 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3b02      	subs	r3, #2
 8002458:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3301      	adds	r3, #1
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	4293      	cmp	r3, r2
 8002466:	d119      	bne.n	800249c <unPackPayload+0x54>
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <unPackPayload+0xdc>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d115      	bne.n	800249c <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b03      	cmp	r3, #3
 8002474:	dc02      	bgt.n	800247c <unPackPayload+0x34>
			return -1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e04f      	b.n	800251c <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b28      	cmp	r3, #40	; 0x28
 8002482:	d002      	beq.n	800248a <unPackPayload+0x42>
			return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	e048      	b.n	800251c <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1c99      	adds	r1, r3, #2
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3b02      	subs	r3, #2
 8002492:	461a      	mov	r2, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f013 fc71 	bl	8015d7c <memcpy>
 800249a:	e03d      	b.n	8002518 <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3301      	adds	r3, #1
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01b      	beq.n	80024e2 <unPackPayload+0x9a>
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <unPackPayload+0xdc>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d117      	bne.n	80024e2 <unPackPayload+0x9a>
		backup_available = 1;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <unPackPayload+0xdc>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b28      	cmp	r3, #40	; 0x28
 80024be:	d002      	beq.n	80024c6 <unPackPayload+0x7e>
			return -1;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	e02a      	b.n	800251c <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3302      	adds	r3, #2
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f013 fc54 	bl	8015d7c <memcpy>
		backup_length = data_length;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <unPackPayload+0xe0>)
 80024da:	701a      	strb	r2, [r3, #0]
		return - 1;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
 80024e0:	e01c      	b.n	800251c <unPackPayload+0xd4>
	}else if(backup_available == 1){
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <unPackPayload+0xdc>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d113      	bne.n	8002512 <unPackPayload+0xca>
		backup_available = 0;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <unPackPayload+0xdc>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <unPackPayload+0xe0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	4618      	mov	r0, r3
 8002500:	f013 fc3c 	bl	8015d7c <memcpy>
		data_length = backup_length + in_length;
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <unPackPayload+0xe0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4413      	add	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e002      	b.n	8002518 <unPackPayload+0xd0>
	}else{
		return - 1;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	e001      	b.n	800251c <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3b02      	subs	r3, #2
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000de20 	.word	0x2000de20
 8002528:	2000de21 	.word	0x2000de21

0800252c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_DMA_Init+0x3c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <MX_DMA_Init+0x3c>)
 800253c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_DMA_Init+0x3c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2105      	movs	r1, #5
 8002552:	200f      	movs	r0, #15
 8002554:	f009 f918 	bl	800b788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002558:	200f      	movs	r0, #15
 800255a:	f009 f931 	bl	800b7c0 <HAL_NVIC_EnableIRQ>

}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <vApplicationGetIdleTaskMemory+0x2c>)
 800257c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <vApplicationGetIdleTaskMemory+0x30>)
 8002582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20002400 	.word	0x20002400
 800259c:	20002454 	.word	0x20002454

080025a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b094      	sub	sp, #80	; 0x50
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 80025a6:	2300      	movs	r3, #0
 80025a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025aa:	2300      	movs	r3, #0
 80025ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 80025ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025b2:	4618      	mov	r0, r3
 80025b4:	f010 f920 	bl	80127f8 <osMutexCreate>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <MX_FREERTOS_Init+0x90>)
 80025bc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 80025be:	2301      	movs	r3, #1
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 80025ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f010 fa27 	bl	8012a28 <osMailCreate>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <MX_FREERTOS_Init+0x94>)
 80025de:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <MX_FREERTOS_Init+0x98>)
 80025e2:	f107 041c 	add.w	r4, r7, #28
 80025e6:	461d      	mov	r5, r3
 80025e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f010 f810 	bl	8012620 <osThreadCreate>
 8002600:	4602      	mov	r2, r0
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_FREERTOS_Init+0x9c>)
 8002604:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_FREERTOS_Init+0xa0>)
 8002608:	463c      	mov	r4, r7
 800260a:	461d      	mov	r5, r3
 800260c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002618:	463b      	mov	r3, r7
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f00f ffff 	bl	8012620 <osThreadCreate>
 8002622:	4602      	mov	r2, r0
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <MX_FREERTOS_Init+0xa4>)
 8002626:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002628:	bf00      	nop
 800262a:	3750      	adds	r7, #80	; 0x50
 800262c:	46bd      	mov	sp, r7
 800262e:	bdb0      	pop	{r4, r5, r7, pc}
 8002630:	2000de28 	.word	0x2000de28
 8002634:	2000de2c 	.word	0x2000de2c
 8002638:	0801b28c 	.word	0x0801b28c
 800263c:	2000de24 	.word	0x2000de24
 8002640:	0801b2b8 	.word	0x0801b2b8
 8002644:	2000de30 	.word	0x2000de30

08002648 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264a:	f5ad 5d8f 	sub.w	sp, sp, #4576	; 0x11e0
 800264e:	b081      	sub	sp, #4
 8002650:	af6c      	add	r7, sp, #432	; 0x1b0
 8002652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002656:	3b14      	subs	r3, #20
 8002658:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800265a:	f012 fe07 	bl	801526c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 800265e:	2201      	movs	r2, #1
 8002660:	2110      	movs	r1, #16
 8002662:	48c7      	ldr	r0, [pc, #796]	; (8002980 <StartDefaultTask+0x338>)
 8002664:	f009 fdf2 	bl	800c24c <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002668:	2300      	movs	r3, #0
 800266a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800266e:	f102 020f 	add.w	r2, r2, #15
 8002672:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800267a:	f102 020e 	add.w	r2, r2, #14
 800267e:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002686:	f102 020d 	add.w	r2, r2, #13
 800268a:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	f04f 0400 	mov.w	r4, #0
 8002694:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002698:	e9c2 3400 	strd	r3, r4, [r2]
  int run_point = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 80026a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026a6:	3b10      	subs	r3, #16
 80026a8:	4ab6      	ldr	r2, [pc, #728]	; (8002984 <StartDefaultTask+0x33c>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	4611      	mov	r1, r2
 80026ae:	2390      	movs	r3, #144	; 0x90
 80026b0:	461a      	mov	r2, r3
 80026b2:	f013 fb63 	bl	8015d7c <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80026b6:	21e6      	movs	r1, #230	; 0xe6
 80026b8:	48b3      	ldr	r0, [pc, #716]	; (8002988 <StartDefaultTask+0x340>)
 80026ba:	f7ff fe7f 	bl	80023bc <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80026be:	f008 f831 	bl	800a724 <scaraGetMethod>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026c8:	f102 0207 	add.w	r2, r2, #7
 80026cc:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 80026ce:	f008 f81d 	bl	800a70c <scaraGetMode>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026d8:	f102 0206 	add.w	r2, r2, #6
 80026dc:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 80026de:	f008 f82d 	bl	800a73c <scaraGetDutyState>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026e8:	f102 0205 	add.w	r2, r2, #5
 80026ec:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 80026ee:	f004 f8b7 	bl	8006860 <scaraStartup>
  osDelay(10);
 80026f2:	200a      	movs	r0, #10
 80026f4:	f00f ffe0 	bl	80126b8 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 80026f8:	4aa4      	ldr	r2, [pc, #656]	; (800298c <StartDefaultTask+0x344>)
 80026fa:	a499      	add	r4, pc, #612	; (adr r4, 8002960 <StartDefaultTask+0x318>)
 80026fc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002700:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8002704:	4aa1      	ldr	r2, [pc, #644]	; (800298c <StartDefaultTask+0x344>)
 8002706:	a498      	add	r4, pc, #608	; (adr r4, 8002968 <StartDefaultTask+0x320>)
 8002708:	e9d4 3400 	ldrd	r3, r4, [r4]
 800270c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8002710:	4a9e      	ldr	r2, [pc, #632]	; (800298c <StartDefaultTask+0x344>)
 8002712:	a497      	add	r4, pc, #604	; (adr r4, 8002970 <StartDefaultTask+0x328>)
 8002714:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002718:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 800271c:	4a9b      	ldr	r2, [pc, #620]	; (800298c <StartDefaultTask+0x344>)
 800271e:	a496      	add	r4, pc, #600	; (adr r4, 8002978 <StartDefaultTask+0x330>)
 8002720:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002724:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8002728:	4a98      	ldr	r2, [pc, #608]	; (800298c <StartDefaultTask+0x344>)
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	f04f 0400 	mov.w	r4, #0
 8002732:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 8002736:	4895      	ldr	r0, [pc, #596]	; (800298c <StartDefaultTask+0x344>)
 8002738:	f002 fc36 	bl	8004fa8 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800273c:	4894      	ldr	r0, [pc, #592]	; (8002990 <StartDefaultTask+0x348>)
 800273e:	f00b fc5c 	bl	800dffa <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	3b08      	subs	r3, #8
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f010 f806 	bl	8012760 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
	  respond_packed_lenght = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
	  infor_lenght			= 0;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
	  infor_packed_lenght	= 0;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
	  task_usb_lenght		= 0;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
	  usb_lenght			= 0;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
	  total_respond_length  = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800277e:	f102 0208 	add.w	r2, r2, #8
 8002782:	6013      	str	r3, [r2, #0]
	  detail_ptr 			= 0;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800278a:	4a82      	ldr	r2, [pc, #520]	; (8002994 <StartDefaultTask+0x34c>)
 800278c:	4b82      	ldr	r3, [pc, #520]	; (8002998 <StartDefaultTask+0x350>)
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	461a      	mov	r2, r3
 8002796:	f013 faf1 	bl	8015d7c <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 800279a:	4a7f      	ldr	r2, [pc, #508]	; (8002998 <StartDefaultTask+0x350>)
 800279c:	4b7b      	ldr	r3, [pc, #492]	; (800298c <StartDefaultTask+0x344>)
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	23c0      	movs	r3, #192	; 0xc0
 80027a4:	461a      	mov	r2, r3
 80027a6:	f013 fae9 	bl	8015d7c <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <StartDefaultTask+0x354>)
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	f607 73bc 	addw	r3, r7, #4028	; 0xfbc
 80027b2:	2200      	movs	r2, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f010 f9e3 	bl	8012b80 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80027ba:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d119      	bne.n	80027f6 <StartDefaultTask+0x1ae>
		   dataMail = ret_mail.value.p;
 80027c2:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 80027c6:	f8c7 3fd8 	str.w	r3, [r7, #4056]	; 0xfd8
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80027ca:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80027ce:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80027d2:	f8d7 1fd8 	ldr.w	r1, [r7, #4056]	; 0xfd8
 80027d6:	4618      	mov	r0, r3
 80027d8:	f013 fad0 	bl	8015d7c <memcpy>
		   isNewDuty = TRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027e2:	f102 020f 	add.w	r2, r2, #15
 80027e6:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80027e8:	4b6c      	ldr	r3, [pc, #432]	; (800299c <StartDefaultTask+0x354>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8d7 1fd8 	ldr.w	r1, [r7, #4056]	; 0xfd8
 80027f0:	4618      	mov	r0, r3
 80027f2:	f010 fa39 	bl	8012c68 <osMailFree>
	  }
	  if(isNewDuty) {
 80027f6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80027fa:	f103 030f 	add.w	r3, r3, #15
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8476 	beq.w	80030f2 <StartDefaultTask+0xaaa>
		  if (duty_cmd.change_method == TRUE) {
 8002806:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	f040 8140 	bne.w	8002a92 <StartDefaultTask+0x44a>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002812:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d132      	bne.n	8002882 <StartDefaultTask+0x23a>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 800281c:	2300      	movs	r3, #0
 800281e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002822:	f102 0207 	add.w	r2, r2, #7
 8002826:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002828:	2300      	movs	r3, #0
 800282a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800282e:	f102 0205 	add.w	r2, r2, #5
 8002832:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 8002834:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002838:	2218      	movs	r2, #24
 800283a:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800283c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002840:	6899      	ldr	r1, [r3, #8]
 8002842:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002846:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800284a:	f103 0308 	add.w	r3, r3, #8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4413      	add	r3, r2
 8002852:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2301      	movs	r3, #1
 800285a:	2008      	movs	r0, #8
 800285c:	f7ff fd46 	bl	80022ec <commandRespond1>
 8002860:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 8002864:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002868:	f103 0308 	add.w	r3, r3, #8
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002872:	4413      	add	r3, r2
 8002874:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002878:	f102 0208 	add.w	r2, r2, #8
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	f000 bc32 	b.w	80030e6 <StartDefaultTask+0xa9e>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002882:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d131      	bne.n	80028f0 <StartDefaultTask+0x2a8>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 800288c:	2301      	movs	r3, #1
 800288e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002892:	f102 0207 	add.w	r2, r2, #7
 8002896:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002898:	2300      	movs	r3, #0
 800289a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800289e:	f102 0205 	add.w	r2, r2, #5
 80028a2:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 80028a4:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80028a8:	2219      	movs	r2, #25
 80028aa:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80028ac:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80028b0:	6899      	ldr	r1, [r3, #8]
 80028b2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80028b6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028ba:	f103 0308 	add.w	r3, r3, #8
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	2008      	movs	r0, #8
 80028cc:	f7ff fd0e 	bl	80022ec <commandRespond1>
 80028d0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 80028d4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028d8:	f103 0308 	add.w	r3, r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80028e2:	4413      	add	r3, r2
 80028e4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80028e8:	f102 0208 	add.w	r2, r2, #8
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e3fa      	b.n	80030e6 <StartDefaultTask+0xa9e>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 80028f0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d152      	bne.n	80029a0 <StartDefaultTask+0x358>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002900:	f102 0205 	add.w	r2, r2, #5
 8002904:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 8002906:	2302      	movs	r3, #2
 8002908:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800290c:	f102 0207 	add.w	r2, r2, #7
 8002910:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 8002912:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002916:	221a      	movs	r2, #26
 8002918:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800291a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002924:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002928:	f103 0308 	add.w	r3, r3, #8
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4413      	add	r3, r2
 8002930:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	2008      	movs	r0, #8
 800293a:	f7ff fcd7 	bl	80022ec <commandRespond1>
 800293e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				total_respond_length += respond_lenght;
 8002942:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002946:	f103 0308 	add.w	r3, r3, #8
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002950:	4413      	add	r3, r2
 8002952:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002956:	f102 0208 	add.w	r2, r2, #8
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e3c3      	b.n	80030e6 <StartDefaultTask+0xa9e>
 800295e:	bf00      	nop
 8002960:	20000000 	.word	0x20000000
 8002964:	bff7b904 	.word	0xbff7b904
 8002968:	80000000 	.word	0x80000000
 800296c:	4002d893 	.word	0x4002d893
 8002970:	90c91080 	.word	0x90c91080
 8002974:	3fa1eb63 	.word	0x3fa1eb63
 8002978:	cec41dd2 	.word	0xcec41dd2
 800297c:	4007ba14 	.word	0x4007ba14
 8002980:	40020400 	.word	0x40020400
 8002984:	0801b3b8 	.word	0x0801b3b8
 8002988:	0801b2d4 	.word	0x0801b2d4
 800298c:	2000ec30 	.word	0x2000ec30
 8002990:	2000ed70 	.word	0x2000ed70
 8002994:	2000e930 	.word	0x2000e930
 8002998:	2000eab0 	.word	0x2000eab0
 800299c:	2000de2c 	.word	0x2000de2c
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 80029a0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d13b      	bne.n	8002a22 <StartDefaultTask+0x3da>
				  test_value[0] = 0;
 80029aa:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 80029b2:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 80029b6:	2200      	movs	r2, #0
 80029b8:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 80029ba:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 80029be:	2200      	movs	r2, #0
 80029c0:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 80029c2:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 80029c6:	2200      	movs	r2, #0
 80029c8:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 80029ca:	2303      	movs	r3, #3
 80029cc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029d0:	f102 0207 	add.w	r2, r2, #7
 80029d4:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 80029d6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80029da:	221b      	movs	r2, #27
 80029dc:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029de:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80029e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029ec:	f103 0308 	add.w	r3, r3, #8
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	2008      	movs	r0, #8
 80029fe:	f7ff fc75 	bl	80022ec <commandRespond1>
 8002a02:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8002a06:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a0a:	f103 0308 	add.w	r3, r3, #8
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002a14:	4413      	add	r3, r2
 8002a16:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a1a:	f102 0208 	add.w	r2, r2, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e361      	b.n	80030e6 <StartDefaultTask+0xa9e>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002a22:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	f040 835c 	bne.w	80030e6 <StartDefaultTask+0xa9e>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a34:	f102 0207 	add.w	r2, r2, #7
 8002a38:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a40:	f102 0205 	add.w	r2, r2, #5
 8002a44:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002a46:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002a4a:	221c      	movs	r2, #28
 8002a4c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a4e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a52:	6899      	ldr	r1, [r3, #8]
 8002a54:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002a58:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a5c:	f103 0308 	add.w	r3, r3, #8
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2008      	movs	r0, #8
 8002a6e:	f7ff fc3d 	bl	80022ec <commandRespond1>
 8002a72:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8002a76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a7a:	f103 0308 	add.w	r3, r3, #8
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002a84:	4413      	add	r3, r2
 8002a86:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a8a:	f102 0208 	add.w	r2, r2, #8
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e329      	b.n	80030e6 <StartDefaultTask+0xa9e>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002a92:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a9c:	f102 0207 	add.w	r2, r2, #7
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	f040 82f6 	bne.w	8003094 <StartDefaultTask+0xa4c>
				  	  switch( duty_cmd.robot_method) {
 8002aa8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	f200 82ea 	bhi.w	8003088 <StartDefaultTask+0xa40>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <StartDefaultTask+0x474>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002ad1 	.word	0x08002ad1
 8002ac0:	08002b57 	.word	0x08002b57
 8002ac4:	08002f15 	.word	0x08002f15
 8002ac8:	08002da5 	.word	0x08002da5
 8002acc:	08002fbf 	.word	0x08002fbf
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002ad0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ad4:	f103 0303 	add.w	r3, r3, #3
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <StartDefaultTask+0x4c4>
				  			  current_key = duty_cmd.keyboard;
 8002ade:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ae2:	78db      	ldrb	r3, [r3, #3]
 8002ae4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ae8:	f102 0202 	add.w	r2, r2, #2
 8002aec:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002aee:	2301      	movs	r3, #1
 8002af0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002af4:	f102 0203 	add.w	r2, r2, #3
 8002af8:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002afa:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b04:	f102 021c 	add.w	r2, r2, #28
 8002b08:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002b0a:	e2e9      	b.n	80030e0 <StartDefaultTask+0xa98>
				  		  } else if (current_key == duty_cmd.keyboard
 8002b0c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b10:	78db      	ldrb	r3, [r3, #3]
 8002b12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b16:	f102 0202 	add.w	r2, r2, #2
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 82df 	bne.w	80030e0 <StartDefaultTask+0xa98>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002b22:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002b26:	f103 0303 	add.w	r3, r3, #3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	f040 82d7 	bne.w	80030e0 <StartDefaultTask+0xa98>
									  && current_key_speed == duty_cmd.key_speed) {
 8002b32:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b3c:	f102 021c 	add.w	r2, r2, #28
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	f040 82cc 	bne.w	80030e0 <StartDefaultTask+0xa98>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b4e:	f102 0203 	add.w	r2, r2, #3
 8002b52:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002b54:	e2c4      	b.n	80030e0 <StartDefaultTask+0xa98>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002b56:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b5a:	789b      	ldrb	r3, [r3, #2]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d036      	beq.n	8002bce <StartDefaultTask+0x586>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f000 809f 	beq.w	8002ca4 <StartDefaultTask+0x65c>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8115 	bne.w	8002d96 <StartDefaultTask+0x74e>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b72:	f102 0206 	add.w	r2, r2, #6
 8002b76:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002b78:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b80:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002b8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002b8e:	f103 0308 	add.w	r3, r3, #8
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	2008      	movs	r0, #8
 8002ba0:	f7ff fba4 	bl	80022ec <commandRespond1>
 8002ba4:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 8002ba8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002bac:	f103 0308 	add.w	r3, r3, #8
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bbc:	f102 0208 	add.w	r2, r2, #8
 8002bc0:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002bc2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002bc6:	48cd      	ldr	r0, [pc, #820]	; (8002efc <StartDefaultTask+0x8b4>)
 8002bc8:	f7ff fbf8 	bl	80023bc <LOG_REPORT>
							  }
							  break;
 8002bcc:	e0e9      	b.n	8002da2 <StartDefaultTask+0x75a>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002bce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002bd2:	f103 0306 	add.w	r3, r3, #6
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d138      	bne.n	8002c4e <StartDefaultTask+0x606>
 8002bdc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002be0:	f103 0305 	add.w	r3, r3, #5
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d131      	bne.n	8002c4e <StartDefaultTask+0x606>
									  current_mode = SCARA_MODE_SCAN;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bf0:	f102 0206 	add.w	r2, r2, #6
 8002bf4:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bfc:	f102 0204 	add.w	r2, r2, #4
 8002c00:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002c02:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002c06:	2221      	movs	r2, #33	; 0x21
 8002c08:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c0a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002c0e:	6899      	ldr	r1, [r3, #8]
 8002c10:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002c14:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c18:	f103 0308 	add.w	r3, r3, #8
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2301      	movs	r3, #1
 8002c28:	2008      	movs	r0, #8
 8002c2a:	f7ff fb5f 	bl	80022ec <commandRespond1>
 8002c2e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002c32:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c36:	f103 0308 	add.w	r3, r3, #8
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002c40:	4413      	add	r3, r2
 8002c42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c46:	f102 0208 	add.w	r2, r2, #8
 8002c4a:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002c4c:	e0a9      	b.n	8002da2 <StartDefaultTask+0x75a>
									detail_array[0] = BUSY;
 8002c4e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002c52:	2222      	movs	r2, #34	; 0x22
 8002c54:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c56:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002c60:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c64:	f103 0308 	add.w	r3, r3, #8
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2301      	movs	r3, #1
 8002c74:	2007      	movs	r0, #7
 8002c76:	f7ff fb39 	bl	80022ec <commandRespond1>
 8002c7a:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002c7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c82:	f103 0308 	add.w	r3, r3, #8
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c92:	f102 0208 	add.w	r2, r2, #8
 8002c96:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002c98:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8002c9c:	4898      	ldr	r0, [pc, #608]	; (8002f00 <StartDefaultTask+0x8b8>)
 8002c9e:	f7ff fb8d 	bl	80023bc <LOG_REPORT>
							  break;
 8002ca2:	e07e      	b.n	8002da2 <StartDefaultTask+0x75a>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002ca4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ca8:	f103 0306 	add.w	r3, r3, #6
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d145      	bne.n	8002d3e <StartDefaultTask+0x6f6>
 8002cb2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cb6:	f103 0305 	add.w	r3, r3, #5
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d13e      	bne.n	8002d3e <StartDefaultTask+0x6f6>
									  scaraSetScanFlag();
 8002cc0:	f007 fcb6 	bl	800a630 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002cc4:	f007 fd46 	bl	800a754 <scaraIsScanLimit>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <StartDefaultTask+0x6a0>
										  current_mode	 = SCARA_MODE_DUTY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002cd4:	f102 0206 	add.w	r2, r2, #6
 8002cd8:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ce0:	f102 0205 	add.w	r2, r2, #5
 8002ce4:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002ce6:	e055      	b.n	8002d94 <StartDefaultTask+0x74c>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002ce8:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002cec:	2223      	movs	r2, #35	; 0x23
 8002cee:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002cf0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002cfa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cfe:	f103 0308 	add.w	r3, r3, #8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	2007      	movs	r0, #7
 8002d10:	f7ff faec 	bl	80022ec <commandRespond1>
 8002d14:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
										total_respond_length += respond_lenght;
 8002d18:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d1c:	f103 0308 	add.w	r3, r3, #8
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002d26:	4413      	add	r3, r2
 8002d28:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d2c:	f102 0208 	add.w	r2, r2, #8
 8002d30:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002d32:	f240 1187 	movw	r1, #391	; 0x187
 8002d36:	4873      	ldr	r0, [pc, #460]	; (8002f04 <StartDefaultTask+0x8bc>)
 8002d38:	f7ff fb40 	bl	80023bc <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002d3c:	e02a      	b.n	8002d94 <StartDefaultTask+0x74c>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002d3e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8002d42:	2222      	movs	r2, #34	; 0x22
 8002d44:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d46:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8002d50:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d54:	f103 0308 	add.w	r3, r3, #8
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2301      	movs	r3, #1
 8002d64:	2007      	movs	r0, #7
 8002d66:	f7ff fac1 	bl	80022ec <commandRespond1>
 8002d6a:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
									total_respond_length += respond_lenght;
 8002d6e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002d72:	f103 0308 	add.w	r3, r3, #8
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d82:	f102 0208 	add.w	r2, r2, #8
 8002d86:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002d88:	f240 118d 	movw	r1, #397	; 0x18d
 8002d8c:	485e      	ldr	r0, [pc, #376]	; (8002f08 <StartDefaultTask+0x8c0>)
 8002d8e:	f7ff fb15 	bl	80023bc <LOG_REPORT>
								  }
							  }
							  break;
 8002d92:	e006      	b.n	8002da2 <StartDefaultTask+0x75a>
 8002d94:	e005      	b.n	8002da2 <StartDefaultTask+0x75a>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002d96:	f240 1193 	movw	r1, #403	; 0x193
 8002d9a:	485c      	ldr	r0, [pc, #368]	; (8002f0c <StartDefaultTask+0x8c4>)
 8002d9c:	f7ff fb0e 	bl	80023bc <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002da0:	e1a1      	b.n	80030e6 <StartDefaultTask+0xa9e>
 8002da2:	e1a0      	b.n	80030e6 <StartDefaultTask+0xa9e>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002da4:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002dac:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002db0:	2200      	movs	r2, #0
 8002db2:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002db4:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002db8:	2200      	movs	r2, #0
 8002dba:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002dbc:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002dc4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002dc8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002dcc:	2b07      	cmp	r3, #7
 8002dce:	f200 8093 	bhi.w	8002ef8 <StartDefaultTask+0x8b0>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <StartDefaultTask+0x790>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002df9 	.word	0x08002df9
 8002ddc:	08002e15 	.word	0x08002e15
 8002de0:	08002e39 	.word	0x08002e39
 8002de4:	08002e55 	.word	0x08002e55
 8002de8:	08002e79 	.word	0x08002e79
 8002dec:	08002e95 	.word	0x08002e95
 8002df0:	08002eb9 	.word	0x08002eb9
 8002df4:	08002ed5 	.word	0x08002ed5
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002df8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002dfc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b42      	ldr	r3, [pc, #264]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e08:	f993 1000 	ldrsb.w	r1, [r3]
 8002e0c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e10:	5499      	strb	r1, [r3, r2]
						  break;
 8002e12:	e072      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002e14:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e16:	f993 3000 	ldrsb.w	r3, [r3]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	425b      	negs	r3, r3
 8002e1e:	b2d9      	uxtb	r1, r3
 8002e20:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e24:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	b249      	sxtb	r1, r1
 8002e30:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e34:	5499      	strb	r1, [r3, r2]
						  break;
 8002e36:	e060      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002e38:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e3c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e48:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002e4c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e50:	5499      	strb	r1, [r3, r2]
						  break;
 8002e52:	e052      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002e54:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	425b      	negs	r3, r3
 8002e5e:	b2d9      	uxtb	r1, r3
 8002e60:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e64:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	b249      	sxtb	r1, r1
 8002e70:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e74:	5499      	strb	r1, [r3, r2]
						  break;
 8002e76:	e040      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002e78:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002e7c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e88:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002e8c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002e90:	5499      	strb	r1, [r3, r2]
						  break;
 8002e92:	e032      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8002e94:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002e96:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	b2d9      	uxtb	r1, r3
 8002ea0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ea4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	b249      	sxtb	r1, r1
 8002eb0:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002eb4:	5499      	strb	r1, [r3, r2]
						  break;
 8002eb6:	e020      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8002eb8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ebc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002ec8:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8002ecc:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002ed0:	5499      	strb	r1, [r3, r2]
						  break;
 8002ed2:	e012      	b.n	8002efa <StartDefaultTask+0x8b2>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <StartDefaultTask+0x8c8>)
 8002ed6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	425b      	negs	r3, r3
 8002ede:	b2d9      	uxtb	r1, r3
 8002ee0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002ee4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	b249      	sxtb	r1, r1
 8002ef0:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8002ef4:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002ef6:	e000      	b.n	8002efa <StartDefaultTask+0x8b2>
						  default:
							  break;
 8002ef8:	bf00      	nop
						  }
					  }
					  break;
 8002efa:	e0f4      	b.n	80030e6 <StartDefaultTask+0xa9e>
 8002efc:	0801b2f4 	.word	0x0801b2f4
 8002f00:	0801b304 	.word	0x0801b304
 8002f04:	0801b314 	.word	0x0801b314
 8002f08:	0801b328 	.word	0x0801b328
 8002f0c:	0801b338 	.word	0x0801b338
 8002f10:	20000000 	.word	0x20000000
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8002f14:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002f18:	f103 0305 	add.w	r3, r3, #5
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11a      	bne.n	8002f58 <StartDefaultTask+0x910>
 8002f22:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b13      	cmp	r3, #19
 8002f2a:	d115      	bne.n	8002f58 <StartDefaultTask+0x910>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 8002f2c:	4bc0      	ldr	r3, [pc, #768]	; (8003230 <StartDefaultTask+0xbe8>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b07      	cmp	r3, #7
 8002f32:	d103      	bne.n	8002f3c <StartDefaultTask+0x8f4>
				  				run_point = 1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
 8002f3a:	e006      	b.n	8002f4a <StartDefaultTask+0x902>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8002f3c:	4bbc      	ldr	r3, [pc, #752]	; (8003230 <StartDefaultTask+0xbe8>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d102      	bne.n	8002f4a <StartDefaultTask+0x902>
				  				run_point = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002f50:	f102 0205 	add.w	r2, r2, #5
 8002f54:	7013      	strb	r3, [r2, #0]
 8002f56:	e031      	b.n	8002fbc <StartDefaultTask+0x974>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8002f58:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002f5c:	f103 0305 	add.w	r3, r3, #5
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d111      	bne.n	8002f8a <StartDefaultTask+0x942>
 8002f66:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d10c      	bne.n	8002f8a <StartDefaultTask+0x942>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8002f70:	48b0      	ldr	r0, [pc, #704]	; (8003234 <StartDefaultTask+0xbec>)
 8002f72:	f002 ff5d 	bl	8005e30 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8002f76:	48af      	ldr	r0, [pc, #700]	; (8003234 <StartDefaultTask+0xbec>)
 8002f78:	f002 f816 	bl	8004fa8 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002f82:	f102 0205 	add.w	r2, r2, #5
 8002f86:	7013      	strb	r3, [r2, #0]
 8002f88:	e018      	b.n	8002fbc <StartDefaultTask+0x974>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8002f8a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b0d      	cmp	r3, #13
 8002f92:	d106      	bne.n	8002fa2 <StartDefaultTask+0x95a>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002f9a:	f102 0205 	add.w	r2, r2, #5
 8002f9e:	7013      	strb	r3, [r2, #0]
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8002fa0:	e0a0      	b.n	80030e4 <StartDefaultTask+0xa9c>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 8002fa2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b0e      	cmp	r3, #14
 8002faa:	f040 809b 	bne.w	80030e4 <StartDefaultTask+0xa9c>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002fb4:	f102 0205 	add.w	r2, r2, #5
 8002fb8:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002fba:	e093      	b.n	80030e4 <StartDefaultTask+0xa9c>
 8002fbc:	e092      	b.n	80030e4 <StartDefaultTask+0xa9c>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002fbe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002fc2:	f103 030d 	add.w	r3, r3, #13
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002fcc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	18d0      	adds	r0, r2, r3
 8002fd6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002fda:	3328      	adds	r3, #40	; 0x28
 8002fdc:	22c0      	movs	r2, #192	; 0xc0
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f012 fecc 	bl	8015d7c <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8002fe4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8002fe8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002fec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002ff0:	f102 020d 	add.w	r2, r2, #13
 8002ff4:	7815      	ldrb	r5, [r2, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	f7fd fdd5 	bl	8000ba8 <__aeabi_d2uiz>
 8002ffe:	4603      	mov	r3, r0
 8003000:	b299      	uxth	r1, r3
 8003002:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003006:	f44f 73c4 	mov.w	r3, #392	; 0x188
 800300a:	fb03 f305 	mul.w	r3, r3, r5
 800300e:	4413      	add	r3, r2
 8003010:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003014:	460a      	mov	r2, r1
 8003016:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8003018:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800301c:	f103 030d 	add.w	r3, r3, #13
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	425a      	negs	r2, r3
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	f002 0207 	and.w	r2, r2, #7
 800302e:	bf58      	it	pl
 8003030:	4253      	negpl	r3, r2
 8003032:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003036:	f102 020d 	add.w	r2, r2, #13
 800303a:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 800303c:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003040:	221d      	movs	r2, #29
 8003042:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003044:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800304e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003052:	f103 0308 	add.w	r3, r3, #8
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4413      	add	r3, r2
 800305a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2301      	movs	r3, #1
 8003062:	2008      	movs	r0, #8
 8003064:	f7ff f942 	bl	80022ec <commandRespond1>
 8003068:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
						  total_respond_length += respond_lenght;
 800306c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003070:	f103 0308 	add.w	r3, r3, #8
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800307a:	4413      	add	r3, r2
 800307c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003080:	f102 0208 	add.w	r2, r2, #8
 8003084:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 8003086:	e02e      	b.n	80030e6 <StartDefaultTask+0xa9e>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8003088:	f240 11dd 	movw	r1, #477	; 0x1dd
 800308c:	486a      	ldr	r0, [pc, #424]	; (8003238 <StartDefaultTask+0xbf0>)
 800308e:	f7ff f995 	bl	80023bc <LOG_REPORT>
 8003092:	e028      	b.n	80030e6 <StartDefaultTask+0xa9e>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 8003094:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003098:	2224      	movs	r2, #36	; 0x24
 800309a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800309c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80030a6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030aa:	f103 0308 	add.w	r3, r3, #8
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	2007      	movs	r0, #7
 80030bc:	f7ff f916 	bl	80022ec <commandRespond1>
 80030c0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80030c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030c8:	f103 0308 	add.w	r3, r3, #8
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80030d2:	4413      	add	r3, r2
 80030d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030d8:	f102 0208 	add.w	r2, r2, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e002      	b.n	80030e6 <StartDefaultTask+0xa9e>
				  	  break;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <StartDefaultTask+0xa9e>
				  	  break;
 80030e4:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030ec:	f102 020f 	add.w	r2, r2, #15
 80030f0:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80030f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030f6:	f103 0307 	add.w	r3, r3, #7
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	f201 8104 	bhi.w	800430a <StartDefaultTask+0x1cc2>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <StartDefaultTask+0xac0>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	0800311d 	.word	0x0800311d
 800310c:	0800334b 	.word	0x0800334b
 8003110:	08003821 	.word	0x08003821
 8003114:	08003b55 	.word	0x08003b55
 8003118:	08003b7b 	.word	0x08003b7b
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800311c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003120:	f103 0303 	add.w	r3, r3, #3
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b03      	cmp	r3, #3
 8003128:	f201 80ec 	bhi.w	8004304 <StartDefaultTask+0x1cbc>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <StartDefaultTask+0xaec>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003345 	.word	0x08003345
 8003138:	08003145 	.word	0x08003145
 800313c:	080031db 	.word	0x080031db
 8003140:	08003301 	.word	0x08003301
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <StartDefaultTask+0xbf4>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800314c:	f103 0302 	add.w	r3, r3, #2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f007 fc17 	bl	800a988 <scaraKeyInit1>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d135      	bne.n	80031cc <StartDefaultTask+0xb84>
				  run_time = 0;
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800316c:	f102 0210 	add.w	r2, r2, #16
 8003170:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8003174:	2302      	movs	r3, #2
 8003176:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800317a:	f102 0203 	add.w	r2, r2, #3
 800317e:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 8003180:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003184:	2225      	movs	r2, #37	; 0x25
 8003186:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003188:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003192:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003196:	f103 0308 	add.w	r3, r3, #8
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4413      	add	r3, r2
 800319e:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2301      	movs	r3, #1
 80031a6:	2003      	movs	r0, #3
 80031a8:	f7ff f8a0 	bl	80022ec <commandRespond1>
 80031ac:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80031b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031b4:	f103 0308 	add.w	r3, r3, #8
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80031be:	4413      	add	r3, r2
 80031c0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031c4:	f102 0208 	add.w	r2, r2, #8
 80031c8:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 80031ca:	e0bc      	b.n	8003346 <StartDefaultTask+0xcfe>
				  current_key_state = SCARA_KEY_STATE_READY;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031d2:	f102 0203 	add.w	r2, r2, #3
 80031d6:	7013      	strb	r3, [r2, #0]
		  break;
 80031d8:	e0b5      	b.n	8003346 <StartDefaultTask+0xcfe>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80031da:	a313      	add	r3, pc, #76	; (adr r3, 8003228 <StartDefaultTask+0xbe0>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80031e4:	f101 0110 	add.w	r1, r1, #16
 80031e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ec:	f7fd f84e 	bl	800028c <__adddf3>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80031f8:	f102 0210 	add.w	r2, r2, #16
 80031fc:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003200:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003204:	f103 0310 	add.w	r3, r3, #16
 8003208:	ed93 0b00 	vldr	d0, [r3]
 800320c:	f007 faae 	bl	800a76c <scaraIsFinish>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d014      	beq.n	8003240 <StartDefaultTask+0xbf8>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8003216:	2303      	movs	r3, #3
 8003218:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800321c:	f102 0203 	add.w	r2, r2, #3
 8003220:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8003222:	e090      	b.n	8003346 <StartDefaultTask+0xcfe>
 8003224:	f3af 8000 	nop.w
 8003228:	40000000 	.word	0x40000000
 800322c:	3f847ae1 	.word	0x3f847ae1
 8003230:	200065c0 	.word	0x200065c0
 8003234:	2000eab0 	.word	0x2000eab0
 8003238:	0801b34c 	.word	0x0801b34c
 800323c:	20000060 	.word	0x20000060
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8003240:	4cd3      	ldr	r4, [pc, #844]	; (8003590 <StartDefaultTask+0xf48>)
 8003242:	4668      	mov	r0, sp
 8003244:	f104 0308 	add.w	r3, r4, #8
 8003248:	22b8      	movs	r2, #184	; 0xb8
 800324a:	4619      	mov	r1, r3
 800324c:	f012 fd96 	bl	8015d7c <memcpy>
 8003250:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003254:	48cf      	ldr	r0, [pc, #828]	; (8003594 <StartDefaultTask+0xf4c>)
 8003256:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800325a:	f101 0110 	add.w	r1, r1, #16
 800325e:	ed91 0b00 	vldr	d0, [r1]
 8003262:	f006 fbe9 	bl	8009a38 <scaraFlowDuty>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3fc9 	strb.w	r3, [r7, #4041]	; 0xfc9
				  if ( SCARA_STATUS_OK == status) {
 800326c:	f897 3fc9 	ldrb.w	r3, [r7, #4041]	; 0xfc9
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <StartDefaultTask+0xc54>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003274:	4cc6      	ldr	r4, [pc, #792]	; (8003590 <StartDefaultTask+0xf48>)
 8003276:	4ac7      	ldr	r2, [pc, #796]	; (8003594 <StartDefaultTask+0xf4c>)
 8003278:	ab2c      	add	r3, sp, #176	; 0xb0
 800327a:	4611      	mov	r1, r2
 800327c:	22c0      	movs	r2, #192	; 0xc0
 800327e:	4618      	mov	r0, r3
 8003280:	f012 fd7c 	bl	8015d7c <memcpy>
 8003284:	4668      	mov	r0, sp
 8003286:	f104 0310 	add.w	r3, r4, #16
 800328a:	22b0      	movs	r2, #176	; 0xb0
 800328c:	4619      	mov	r1, r3
 800328e:	f012 fd75 	bl	8015d7c <memcpy>
 8003292:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003296:	f002 ff5b 	bl	8006150 <lowlayer_computeAndWritePulse>
		  break;
 800329a:	e054      	b.n	8003346 <StartDefaultTask+0xcfe>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800329c:	2303      	movs	r3, #3
 800329e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80032a2:	f102 0203 	add.w	r2, r2, #3
 80032a6:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 80032a8:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80032ac:	f897 2fc9 	ldrb.w	r2, [r7, #4041]	; 0xfc9
 80032b0:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80032b2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80032bc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80032c0:	f103 0308 	add.w	r3, r3, #8
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	2301      	movs	r3, #1
 80032d0:	2006      	movs	r0, #6
 80032d2:	f7ff f80b 	bl	80022ec <commandRespond1>
 80032d6:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80032da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80032de:	f103 0308 	add.w	r3, r3, #8
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80032e8:	4413      	add	r3, r2
 80032ea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80032ee:	f102 0208 	add.w	r2, r2, #8
 80032f2:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 80032f4:	f240 2111 	movw	r1, #529	; 0x211
 80032f8:	48a7      	ldr	r0, [pc, #668]	; (8003598 <StartDefaultTask+0xf50>)
 80032fa:	f7ff f85f 	bl	80023bc <LOG_REPORT>
		  break;
 80032fe:	e022      	b.n	8003346 <StartDefaultTask+0xcfe>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8003300:	48a4      	ldr	r0, [pc, #656]	; (8003594 <StartDefaultTask+0xf4c>)
 8003302:	f002 fd95 	bl	8005e30 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8003306:	48a3      	ldr	r0, [pc, #652]	; (8003594 <StartDefaultTask+0xf4c>)
 8003308:	f001 fe4e 	bl	8004fa8 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 800330c:	2300      	movs	r3, #0
 800330e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003312:	f102 0203 	add.w	r2, r2, #3
 8003316:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 8003318:	4a9e      	ldr	r2, [pc, #632]	; (8003594 <StartDefaultTask+0xf4c>)
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8003326:	4a9b      	ldr	r2, [pc, #620]	; (8003594 <StartDefaultTask+0xf4c>)
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8003334:	4a97      	ldr	r2, [pc, #604]	; (8003594 <StartDefaultTask+0xf4c>)
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8003342:	e000      	b.n	8003346 <StartDefaultTask+0xcfe>
		  break;
 8003344:	bf00      	nop
		  }
	  }
	  break;
 8003346:	f000 bfdd 	b.w	8004304 <StartDefaultTask+0x1cbc>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 800334a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800334e:	f103 0306 	add.w	r3, r3, #6
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d012      	beq.n	800337e <StartDefaultTask+0xd36>
 8003358:	2b02      	cmp	r3, #2
 800335a:	f000 8089 	beq.w	8003470 <StartDefaultTask+0xe28>
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8256 	bne.w	8003810 <StartDefaultTask+0x11c8>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8003364:	2302      	movs	r3, #2
 8003366:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800336a:	f102 0206 	add.w	r2, r2, #6
 800336e:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8003370:	2300      	movs	r3, #0
 8003372:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003376:	f102 0205 	add.w	r2, r2, #5
 800337a:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 800337c:	e24e      	b.n	800381c <StartDefaultTask+0x11d4>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800337e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003382:	f103 0304 	add.w	r3, r3, #4
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d867      	bhi.n	800345c <StartDefaultTask+0xe14>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <StartDefaultTask+0xd4c>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033b7 	.word	0x080033b7
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033e9 	.word	0x080033e9
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80033a4:	f002 fb3a 	bl	8005a1c <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033ae:	f102 0204 	add.w	r2, r2, #4
 80033b2:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 80033b4:	e05b      	b.n	800346e <StartDefaultTask+0xe26>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80033b6:	f002 fb63 	bl	8005a80 <lowlayer_scanFlow>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d053      	beq.n	8003468 <StartDefaultTask+0xe20>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80033c0:	2302      	movs	r3, #2
 80033c2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033c6:	f102 0204 	add.w	r2, r2, #4
 80033ca:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 80033cc:	e04c      	b.n	8003468 <StartDefaultTask+0xe20>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80033ce:	4871      	ldr	r0, [pc, #452]	; (8003594 <StartDefaultTask+0xf4c>)
 80033d0:	f002 fcb2 	bl	8005d38 <lowlayer_goToSoftLimit>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d048      	beq.n	800346c <StartDefaultTask+0xe24>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80033da:	2303      	movs	r3, #3
 80033dc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033e0:	f102 0204 	add.w	r2, r2, #4
 80033e4:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 80033e6:	e041      	b.n	800346c <StartDefaultTask+0xe24>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 80033e8:	486a      	ldr	r0, [pc, #424]	; (8003594 <StartDefaultTask+0xf4c>)
 80033ea:	f002 fd21 	bl	8005e30 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80033ee:	4869      	ldr	r0, [pc, #420]	; (8003594 <StartDefaultTask+0xf4c>)
 80033f0:	f001 fdda 	bl	8004fa8 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 80033f4:	2302      	movs	r3, #2
 80033f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033fa:	f102 0206 	add.w	r2, r2, #6
 80033fe:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8003400:	2300      	movs	r3, #0
 8003402:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003406:	f102 0205 	add.w	r2, r2, #5
 800340a:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 800340c:	f007 f910 	bl	800a630 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 8003410:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003414:	2225      	movs	r2, #37	; 0x25
 8003416:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003418:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003422:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003426:	f103 0308 	add.w	r3, r3, #8
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4413      	add	r3, r2
 800342e:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2301      	movs	r3, #1
 8003436:	2005      	movs	r0, #5
 8003438:	f7fe ff58 	bl	80022ec <commandRespond1>
 800343c:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
						total_respond_length += respond_lenght;
 8003440:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003444:	f103 0308 	add.w	r3, r3, #8
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800344e:	4413      	add	r3, r2
 8003450:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003454:	f102 0208 	add.w	r2, r2, #8
 8003458:	6013      	str	r3, [r2, #0]
					  }
					  break;
 800345a:	e008      	b.n	800346e <StartDefaultTask+0xe26>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800345c:	f240 215a 	movw	r1, #602	; 0x25a
 8003460:	484e      	ldr	r0, [pc, #312]	; (800359c <StartDefaultTask+0xf54>)
 8003462:	f7fe ffab 	bl	80023bc <LOG_REPORT>
						  while(1);
 8003466:	e7fe      	b.n	8003466 <StartDefaultTask+0xe1e>
					  break;
 8003468:	bf00      	nop
 800346a:	e1d7      	b.n	800381c <StartDefaultTask+0x11d4>
					  break;
 800346c:	bf00      	nop
					  }
				  }

			  }
			  break;
 800346e:	e1d5      	b.n	800381c <StartDefaultTask+0x11d4>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8003470:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003474:	f103 0305 	add.w	r3, r3, #5
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b03      	cmp	r3, #3
 800347c:	f200 81c0 	bhi.w	8003800 <StartDefaultTask+0x11b8>
 8003480:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <StartDefaultTask+0xe40>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	0800380d 	.word	0x0800380d
 800348c:	08003499 	.word	0x08003499
 8003490:	08003669 	.word	0x08003669
 8003494:	08003773 	.word	0x08003773

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8003498:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 800349c:	4668      	mov	r0, sp
 800349e:	f104 0310 	add.w	r3, r4, #16
 80034a2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80034a6:	4619      	mov	r1, r3
 80034a8:	f012 fc68 	bl	8015d7c <memcpy>
 80034ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034b0:	f003 f9e2 	bl	8006878 <scaraInitDuty>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3fcb 	strb.w	r3, [r7, #4043]	; 0xfcb
						  if ( SCARA_STATUS_OK == status1) {
 80034ba:	f897 3fcb 	ldrb.w	r3, [r7, #4043]	; 0xfcb
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 80a0 	bne.w	8003604 <StartDefaultTask+0xfbc>
							  status2 = scaraTestDuty();
 80034c4:	f007 f838 	bl	800a538 <scaraTestDuty>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 3fca 	strb.w	r3, [r7, #4042]	; 0xfca
							  if (SCARA_STATUS_OK == status2) {
 80034ce:	f897 3fca 	ldrb.w	r3, [r7, #4042]	; 0xfca
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d164      	bne.n	80035a0 <StartDefaultTask+0xf58>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80034d6:	2302      	movs	r3, #2
 80034d8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034dc:	f102 0205 	add.w	r2, r2, #5
 80034e0:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	f04f 0400 	mov.w	r4, #0
 80034ea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80034ee:	f102 0210 	add.w	r2, r2, #16
 80034f2:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 80034f6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80034fa:	f897 2fcb 	ldrb.w	r2, [r7, #4043]	; 0xfcb
 80034fe:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003500:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800350a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800350e:	f103 0308 	add.w	r3, r3, #8
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4413      	add	r3, r2
 8003516:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2301      	movs	r3, #1
 800351e:	2008      	movs	r0, #8
 8003520:	f7fe fee4 	bl	80022ec <commandRespond1>
 8003524:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							  total_respond_length += respond_lenght;
 8003528:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800352c:	f103 0308 	add.w	r3, r3, #8
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003536:	4413      	add	r3, r2
 8003538:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800353c:	f102 0208 	add.w	r2, r2, #8
 8003540:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 8003542:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003546:	2225      	movs	r2, #37	; 0x25
 8003548:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800354a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003554:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003558:	f103 0308 	add.w	r3, r3, #8
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2301      	movs	r3, #1
 8003568:	2003      	movs	r0, #3
 800356a:	f7fe febf 	bl	80022ec <commandRespond1>
 800356e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							  total_respond_length += respond_lenght;
 8003572:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003576:	f103 0308 	add.w	r3, r3, #8
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003580:	4413      	add	r3, r2
 8003582:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003586:	f102 0208 	add.w	r2, r2, #8
 800358a:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 800358c:	e13f      	b.n	800380e <StartDefaultTask+0x11c6>
 800358e:	bf00      	nop
 8003590:	2000eab0 	.word	0x2000eab0
 8003594:	2000ec30 	.word	0x2000ec30
 8003598:	0801b364 	.word	0x0801b364
 800359c:	0801b370 	.word	0x0801b370
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035a6:	f102 0205 	add.w	r2, r2, #5
 80035aa:	7013      	strb	r3, [r2, #0]
								  LOG_REPORT("TEST FAIL", __LINE__);
 80035ac:	f240 2185 	movw	r1, #645	; 0x285
 80035b0:	48c7      	ldr	r0, [pc, #796]	; (80038d0 <StartDefaultTask+0x1288>)
 80035b2:	f7fe ff03 	bl	80023bc <LOG_REPORT>
								detail_array[0] = status2;
 80035b6:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80035ba:	f897 2fca 	ldrb.w	r2, [r7, #4042]	; 0xfca
 80035be:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80035c0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80035ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035ce:	f103 0308 	add.w	r3, r3, #8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4413      	add	r3, r2
 80035d6:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2301      	movs	r3, #1
 80035de:	2007      	movs	r0, #7
 80035e0:	f7fe fe84 	bl	80022ec <commandRespond1>
 80035e4:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 80035e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80035ec:	f103 0308 	add.w	r3, r3, #8
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80035f6:	4413      	add	r3, r2
 80035f8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035fc:	f102 0208 	add.w	r2, r2, #8
 8003600:	6013      	str	r3, [r2, #0]
				  break;
 8003602:	e104      	b.n	800380e <StartDefaultTask+0x11c6>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003604:	2300      	movs	r3, #0
 8003606:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800360a:	f102 0205 	add.w	r2, r2, #5
 800360e:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 8003610:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003614:	f897 2fcb 	ldrb.w	r2, [r7, #4043]	; 0xfcb
 8003618:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800361a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003624:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003628:	f103 0308 	add.w	r3, r3, #8
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4413      	add	r3, r2
 8003630:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2301      	movs	r3, #1
 8003638:	2007      	movs	r0, #7
 800363a:	f7fe fe57 	bl	80022ec <commandRespond1>
 800363e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
							total_respond_length += respond_lenght;
 8003642:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003646:	f103 0308 	add.w	r3, r3, #8
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003650:	4413      	add	r3, r2
 8003652:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003656:	f102 0208 	add.w	r2, r2, #8
 800365a:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 800365c:	f44f 7124 	mov.w	r1, #656	; 0x290
 8003660:	489c      	ldr	r0, [pc, #624]	; (80038d4 <StartDefaultTask+0x128c>)
 8003662:	f7fe feab 	bl	80023bc <LOG_REPORT>
				  break;
 8003666:	e0d2      	b.n	800380e <StartDefaultTask+0x11c6>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8003668:	a397      	add	r3, pc, #604	; (adr r3, 80038c8 <StartDefaultTask+0x1280>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003672:	f101 0110 	add.w	r1, r1, #16
 8003676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800367a:	f7fc fe07 	bl	800028c <__adddf3>
 800367e:	4603      	mov	r3, r0
 8003680:	460c      	mov	r4, r1
 8003682:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003686:	f102 0210 	add.w	r2, r2, #16
 800368a:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 800368e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003692:	f103 0310 	add.w	r3, r3, #16
 8003696:	ed93 0b00 	vldr	d0, [r3]
 800369a:	f007 f867 	bl	800a76c <scaraIsFinish>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <StartDefaultTask+0x106a>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80036a4:	2303      	movs	r3, #3
 80036a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036aa:	f102 0205 	add.w	r2, r2, #5
 80036ae:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80036b0:	e0ad      	b.n	800380e <StartDefaultTask+0x11c6>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80036b2:	4c89      	ldr	r4, [pc, #548]	; (80038d8 <StartDefaultTask+0x1290>)
 80036b4:	4668      	mov	r0, sp
 80036b6:	f104 0308 	add.w	r3, r4, #8
 80036ba:	22b8      	movs	r2, #184	; 0xb8
 80036bc:	4619      	mov	r1, r3
 80036be:	f012 fb5d 	bl	8015d7c <memcpy>
 80036c2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80036c6:	4885      	ldr	r0, [pc, #532]	; (80038dc <StartDefaultTask+0x1294>)
 80036c8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80036cc:	f101 0110 	add.w	r1, r1, #16
 80036d0:	ed91 0b00 	vldr	d0, [r1]
 80036d4:	f006 f9b0 	bl	8009a38 <scaraFlowDuty>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3fcc 	strb.w	r3, [r7, #4044]	; 0xfcc
							  if ( SCARA_STATUS_OK == status) {
 80036de:	f897 3fcc 	ldrb.w	r3, [r7, #4044]	; 0xfcc
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d113      	bne.n	800370e <StartDefaultTask+0x10c6>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80036e6:	4c7c      	ldr	r4, [pc, #496]	; (80038d8 <StartDefaultTask+0x1290>)
 80036e8:	4a7c      	ldr	r2, [pc, #496]	; (80038dc <StartDefaultTask+0x1294>)
 80036ea:	ab2c      	add	r3, sp, #176	; 0xb0
 80036ec:	4611      	mov	r1, r2
 80036ee:	22c0      	movs	r2, #192	; 0xc0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f012 fb43 	bl	8015d7c <memcpy>
 80036f6:	4668      	mov	r0, sp
 80036f8:	f104 0310 	add.w	r3, r4, #16
 80036fc:	22b0      	movs	r2, #176	; 0xb0
 80036fe:	4619      	mov	r1, r3
 8003700:	f012 fb3c 	bl	8015d7c <memcpy>
 8003704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003708:	f002 fd22 	bl	8006150 <lowlayer_computeAndWritePulse>
				  break;
 800370c:	e07f      	b.n	800380e <StartDefaultTask+0x11c6>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800370e:	2303      	movs	r3, #3
 8003710:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003714:	f102 0205 	add.w	r2, r2, #5
 8003718:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 800371a:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800371e:	f897 2fcc 	ldrb.w	r2, [r7, #4044]	; 0xfcc
 8003722:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003724:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003728:	6899      	ldr	r1, [r3, #8]
 800372a:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800372e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003732:	f103 0308 	add.w	r3, r3, #8
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4413      	add	r3, r2
 800373a:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2301      	movs	r3, #1
 8003742:	2006      	movs	r0, #6
 8003744:	f7fe fdd2 	bl	80022ec <commandRespond1>
 8003748:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
								total_respond_length += respond_lenght;
 800374c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003750:	f103 0308 	add.w	r3, r3, #8
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 800375a:	4413      	add	r3, r2
 800375c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003760:	f102 0208 	add.w	r2, r2, #8
 8003764:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 8003766:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800376a:	485d      	ldr	r0, [pc, #372]	; (80038e0 <StartDefaultTask+0x1298>)
 800376c:	f7fe fe26 	bl	80023bc <LOG_REPORT>
				  break;
 8003770:	e04d      	b.n	800380e <StartDefaultTask+0x11c6>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8003772:	485a      	ldr	r0, [pc, #360]	; (80038dc <StartDefaultTask+0x1294>)
 8003774:	f002 fb5c 	bl	8005e30 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003778:	4858      	ldr	r0, [pc, #352]	; (80038dc <StartDefaultTask+0x1294>)
 800377a:	f001 fc15 	bl	8004fa8 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800377e:	2300      	movs	r3, #0
 8003780:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003784:	f102 0205 	add.w	r2, r2, #5
 8003788:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 800378a:	4a54      	ldr	r2, [pc, #336]	; (80038dc <StartDefaultTask+0x1294>)
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8003798:	4a50      	ldr	r2, [pc, #320]	; (80038dc <StartDefaultTask+0x1294>)
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 80037a6:	4a4d      	ldr	r2, [pc, #308]	; (80038dc <StartDefaultTask+0x1294>)
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	f04f 0400 	mov.w	r4, #0
 80037b0:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform

					detail_array[0] = NONE;
 80037b4:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80037b8:	2225      	movs	r2, #37	; 0x25
 80037ba:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80037bc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80037c0:	6899      	ldr	r1, [r3, #8]
 80037c2:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80037c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037ca:	f103 0308 	add.w	r3, r3, #8
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2301      	movs	r3, #1
 80037da:	2005      	movs	r0, #5
 80037dc:	f7fe fd86 	bl	80022ec <commandRespond1>
 80037e0:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 80037e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037e8:	f103 0308 	add.w	r3, r3, #8
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80037f2:	4413      	add	r3, r2
 80037f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037f8:	f102 0208 	add.w	r2, r2, #8
 80037fc:	6013      	str	r3, [r2, #0]
					  }
				  break;
 80037fe:	e006      	b.n	800380e <StartDefaultTask+0x11c6>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003800:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8003804:	4837      	ldr	r0, [pc, #220]	; (80038e4 <StartDefaultTask+0x129c>)
 8003806:	f7fe fdd9 	bl	80023bc <LOG_REPORT>
						  while(1);
 800380a:	e7fe      	b.n	800380a <StartDefaultTask+0x11c2>
				  break;
 800380c:	bf00      	nop
					  }
				  }

			  }
			  break;
 800380e:	e005      	b.n	800381c <StartDefaultTask+0x11d4>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003810:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003814:	4834      	ldr	r0, [pc, #208]	; (80038e8 <StartDefaultTask+0x12a0>)
 8003816:	f7fe fdd1 	bl	80023bc <LOG_REPORT>
				  while(1);
 800381a:	e7fe      	b.n	800381a <StartDefaultTask+0x11d2>
			  }
		  }
	  }
	  break;
 800381c:	f000 bd75 	b.w	800430a <StartDefaultTask+0x1cc2>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003820:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003824:	f103 0305 	add.w	r3, r3, #5
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b04      	cmp	r3, #4
 800382c:	f200 8190 	bhi.w	8003b50 <StartDefaultTask+0x1508>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <StartDefaultTask+0x11f0>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003b51 	.word	0x08003b51
 800383c:	08003b51 	.word	0x08003b51
 8003840:	080039ed 	.word	0x080039ed
 8003844:	08003b51 	.word	0x08003b51
 8003848:	0800384d 	.word	0x0800384d
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point], run_point);
 800384c:	4927      	ldr	r1, [pc, #156]	; (80038ec <StartDefaultTask+0x12a4>)
 800384e:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	18cc      	adds	r4, r1, r3
 800385c:	f607 56f8 	addw	r6, r7, #3576	; 0xdf8
 8003860:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 8003864:	9304      	str	r3, [sp, #16]
 8003866:	466d      	mov	r5, sp
 8003868:	f104 030c 	add.w	r3, r4, #12
 800386c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800386e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003872:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003876:	4630      	mov	r0, r6
 8003878:	f000 ff36 	bl	80046e8 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 800387c:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 8003880:	4668      	mov	r0, sp
 8003882:	f104 0310 	add.w	r3, r4, #16
 8003886:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800388a:	4619      	mov	r1, r3
 800388c:	f012 fa76 	bl	8015d7c <memcpy>
 8003890:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003894:	f002 fff0 	bl	8006878 <scaraInitDuty>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 3fce 	strb.w	r3, [r7, #4046]	; 0xfce
			  if(status == SCARA_STATUS_OK){
 800389e:	f897 3fce 	ldrb.w	r3, [r7, #4046]	; 0xfce
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d175      	bne.n	8003992 <StartDefaultTask+0x134a>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR){
 80038a6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80038aa:	7c1b      	ldrb	r3, [r3, #16]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d11f      	bne.n	80038f0 <StartDefaultTask+0x12a8>
					  run_time = 0;
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	f04f 0400 	mov.w	r4, #0
 80038b8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80038bc:	f102 0210 	add.w	r2, r2, #16
 80038c0:	e9c2 3400 	strd	r3, r4, [r2]
 80038c4:	e022      	b.n	800390c <StartDefaultTask+0x12c4>
 80038c6:	bf00      	nop
 80038c8:	40000000 	.word	0x40000000
 80038cc:	3f847ae1 	.word	0x3f847ae1
 80038d0:	0801b380 	.word	0x0801b380
 80038d4:	0801b38c 	.word	0x0801b38c
 80038d8:	2000eab0 	.word	0x2000eab0
 80038dc:	2000ec30 	.word	0x2000ec30
 80038e0:	0801b398 	.word	0x0801b398
 80038e4:	0801b370 	.word	0x0801b370
 80038e8:	0801b3a4 	.word	0x0801b3a4
 80038ec:	20006f98 	.word	0x20006f98
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 80038f0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80038f4:	7c1b      	ldrb	r3, [r3, #16]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d108      	bne.n	800390c <StartDefaultTask+0x12c4>
					  run_time = last_T;
 80038fa:	4bd5      	ldr	r3, [pc, #852]	; (8003c50 <StartDefaultTask+0x1608>)
 80038fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003900:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003904:	f102 0210 	add.w	r2, r2, #16
 8003908:	e9c2 3400 	strd	r3, r4, [r2]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 800390c:	2302      	movs	r3, #2
 800390e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003912:	f102 0205 	add.w	r2, r2, #5
 8003916:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 8003918:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003924:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8003c54 <StartDefaultTask+0x160c>
 8003928:	ee67 6a87 	vmul.f32	s13, s15, s14
 800392c:	4bca      	ldr	r3, [pc, #808]	; (8003c58 <StartDefaultTask+0x1610>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	ee07 3a90 	vmov	s15, r3
 8003934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003940:	edc7 7a01 	vstr	s15, [r7, #4]
 8003944:	793b      	ldrb	r3, [r7, #4]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800394c:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800394e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003952:	6899      	ldr	r1, [r3, #8]
 8003954:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003958:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800395c:	f103 0308 	add.w	r3, r3, #8
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2301      	movs	r3, #1
 800396c:	200b      	movs	r0, #11
 800396e:	f7fe fcbd 	bl	80022ec <commandRespond1>
 8003972:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 8003976:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800397a:	f103 0308 	add.w	r3, r3, #8
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003984:	4413      	add	r3, r2
 8003986:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800398a:	f102 0208 	add.w	r2, r2, #8
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	e02c      	b.n	80039ec <StartDefaultTask+0x13a4>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003992:	2303      	movs	r3, #3
 8003994:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003998:	f102 0205 	add.w	r2, r2, #5
 800399c:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 800399e:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 80039a2:	f897 2fce 	ldrb.w	r2, [r7, #4046]	; 0xfce
 80039a6:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80039a8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 80039b2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039b6:	f103 0308 	add.w	r3, r3, #8
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2301      	movs	r3, #1
 80039c6:	2007      	movs	r0, #7
 80039c8:	f7fe fc90 	bl	80022ec <commandRespond1>
 80039cc:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
				  total_respond_length += respond_lenght;
 80039d0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80039d4:	f103 0308 	add.w	r3, r3, #8
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80039de:	4413      	add	r3, r2
 80039e0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80039e4:	f102 0208 	add.w	r2, r2, #8
 80039e8:	6013      	str	r3, [r2, #0]
				  break;
 80039ea:	e0b2      	b.n	8003b52 <StartDefaultTask+0x150a>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 80039ec:	a396      	add	r3, pc, #600	; (adr r3, 8003c48 <StartDefaultTask+0x1600>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80039f6:	f101 0110 	add.w	r1, r1, #16
 80039fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039fe:	f7fc fc45 	bl	800028c <__adddf3>
 8003a02:	4603      	mov	r3, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003a0a:	f102 0210 	add.w	r2, r2, #16
 8003a0e:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003a12:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a16:	f103 0310 	add.w	r3, r3, #16
 8003a1a:	ed93 0b00 	vldr	d0, [r3]
 8003a1e:	f006 fea5 	bl	800a76c <scaraIsFinish>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d038      	beq.n	8003a9a <StartDefaultTask+0x1452>
				if(run_point >= total_num_of_point){
 8003a28:	4b8b      	ldr	r3, [pc, #556]	; (8003c58 <StartDefaultTask+0x1610>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003a30:	429a      	cmp	r2, r3
 8003a32:	db0c      	blt.n	8003a4e <StartDefaultTask+0x1406>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a3a:	f102 0205 	add.w	r2, r2, #5
 8003a3e:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003a40:	4886      	ldr	r0, [pc, #536]	; (8003c5c <StartDefaultTask+0x1614>)
 8003a42:	f002 f9f5 	bl	8005e30 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003a46:	4885      	ldr	r0, [pc, #532]	; (8003c5c <StartDefaultTask+0x1614>)
 8003a48:	f001 faae 	bl	8004fa8 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003a4c:	e081      	b.n	8003b52 <StartDefaultTask+0x150a>
					accumulate_update(Gcode_Cor[run_point]);
 8003a4e:	4984      	ldr	r1, [pc, #528]	; (8003c60 <StartDefaultTask+0x1618>)
 8003a50:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	; 0xffc
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	466c      	mov	r4, sp
 8003a60:	f103 0210 	add.w	r2, r3, #16
 8003a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a6c:	f001 f9ac 	bl	8004dc8 <accumulate_update>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003a70:	2304      	movs	r3, #4
 8003a72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a76:	f102 0205 	add.w	r2, r2, #5
 8003a7a:	7013      	strb	r3, [r2, #0]
					run_point++;
 8003a7c:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	; 0xffc
 8003a80:	3301      	adds	r3, #1
 8003a82:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003a86:	4a75      	ldr	r2, [pc, #468]	; (8003c5c <StartDefaultTask+0x1614>)
 8003a88:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	3328      	adds	r3, #40	; 0x28
 8003a90:	22c0      	movs	r2, #192	; 0xc0
 8003a92:	4619      	mov	r1, r3
 8003a94:	f012 f972 	bl	8015d7c <memcpy>
		  break;
 8003a98:	e05b      	b.n	8003b52 <StartDefaultTask+0x150a>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003a9a:	4c72      	ldr	r4, [pc, #456]	; (8003c64 <StartDefaultTask+0x161c>)
 8003a9c:	4668      	mov	r0, sp
 8003a9e:	f104 0308 	add.w	r3, r4, #8
 8003aa2:	22b8      	movs	r2, #184	; 0xb8
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f012 f969 	bl	8015d7c <memcpy>
 8003aaa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003aae:	486b      	ldr	r0, [pc, #428]	; (8003c5c <StartDefaultTask+0x1614>)
 8003ab0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003ab4:	f101 0110 	add.w	r1, r1, #16
 8003ab8:	ed91 0b00 	vldr	d0, [r1]
 8003abc:	f005 ffbc 	bl	8009a38 <scaraFlowDuty>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3fcd 	strb.w	r3, [r7, #4045]	; 0xfcd
				if ( SCARA_STATUS_OK == status) {
 8003ac6:	f897 3fcd 	ldrb.w	r3, [r7, #4045]	; 0xfcd
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d113      	bne.n	8003af6 <StartDefaultTask+0x14ae>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003ace:	4c65      	ldr	r4, [pc, #404]	; (8003c64 <StartDefaultTask+0x161c>)
 8003ad0:	4a62      	ldr	r2, [pc, #392]	; (8003c5c <StartDefaultTask+0x1614>)
 8003ad2:	ab2c      	add	r3, sp, #176	; 0xb0
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	22c0      	movs	r2, #192	; 0xc0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f012 f94f 	bl	8015d7c <memcpy>
 8003ade:	4668      	mov	r0, sp
 8003ae0:	f104 0310 	add.w	r3, r4, #16
 8003ae4:	22b0      	movs	r2, #176	; 0xb0
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f012 f948 	bl	8015d7c <memcpy>
 8003aec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003af0:	f002 fb2e 	bl	8006150 <lowlayer_computeAndWritePulse>
		  break;
 8003af4:	e02d      	b.n	8003b52 <StartDefaultTask+0x150a>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003afc:	f102 0205 	add.w	r2, r2, #5
 8003b00:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003b02:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8003b06:	f897 2fcd 	ldrb.w	r2, [r7, #4045]	; 0xfcd
 8003b0a:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003b0c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8003b16:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b1a:	f103 0308 	add.w	r3, r3, #8
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2301      	movs	r3, #1
 8003b2a:	2007      	movs	r0, #7
 8003b2c:	f7fe fbde 	bl	80022ec <commandRespond1>
 8003b30:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					  total_respond_length += respond_lenght;
 8003b34:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b38:	f103 0308 	add.w	r3, r3, #8
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8003b42:	4413      	add	r3, r2
 8003b44:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003b48:	f102 0208 	add.w	r2, r2, #8
 8003b4c:	6013      	str	r3, [r2, #0]
		  break;
 8003b4e:	e000      	b.n	8003b52 <StartDefaultTask+0x150a>

		  }
		  break;
		  
		  default:
			  break;
 8003b50:	bf00      	nop
		  }
	  }

	  break;
 8003b52:	e3da      	b.n	800430a <StartDefaultTask+0x1cc2>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003b54:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003b58:	f993 0000 	ldrsb.w	r0, [r3]
 8003b5c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003b60:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003b64:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003b68:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003b6c:	f607 53f4 	addw	r3, r7, #3572	; 0xdf4
 8003b70:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b74:	f002 fc90 	bl	8006498 <lowlayer_writePulse>
	  }
	  break;
 8003b78:	e3c7      	b.n	800430a <StartDefaultTask+0x1cc2>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003b7a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b7e:	f103 0305 	add.w	r3, r3, #5
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	f200 83be 	bhi.w	8004308 <StartDefaultTask+0x1cc0>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <StartDefaultTask+0x154c>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08004159 	.word	0x08004159
 8003b9c:	080042d7 	.word	0x080042d7
 8003ba0:	08003bf5 	.word	0x08003bf5
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 8003ba4:	4830      	ldr	r0, [pc, #192]	; (8003c68 <StartDefaultTask+0x1620>)
 8003ba6:	f00a fa04 	bl	800dfb2 <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bb0:	f102 020e 	add.w	r2, r2, #14
 8003bb4:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bbc:	f102 020d 	add.w	r2, r2, #13
 8003bc0:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bc8:	f102 020f 	add.w	r2, r2, #15
 8003bcc:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003bce:	2304      	movs	r3, #4
 8003bd0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003bd4:	f102 0205 	add.w	r2, r2, #5
 8003bd8:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003bda:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003bde:	2204      	movs	r2, #4
 8003be0:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003be2:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003be6:	2200      	movs	r2, #0
 8003be8:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003bea:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003bee:	2200      	movs	r2, #0
 8003bf0:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8003bf2:	e386      	b.n	8004302 <StartDefaultTask+0x1cba>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003bf4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003bf8:	f103 030e 	add.w	r3, r3, #14
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c02:	f103 030d 	add.w	r3, r3, #13
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f000 8377 	beq.w	80042fc <StartDefaultTask+0x1cb4>
				  switch(operation_state){
 8003c0e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c12:	f103 030f 	add.w	r3, r3, #15
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b07      	cmp	r3, #7
 8003c1a:	f200 81d1 	bhi.w	8003fc0 <StartDefaultTask+0x1978>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <StartDefaultTask+0x15dc>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003d75 	.word	0x08003d75
 8003c2c:	08003da9 	.word	0x08003da9
 8003c30:	08003dbf 	.word	0x08003dbf
 8003c34:	08003df3 	.word	0x08003df3
 8003c38:	08003f1b 	.word	0x08003f1b
 8003c3c:	08003f4f 	.word	0x08003f4f
 8003c40:	08003f8d 	.word	0x08003f8d
 8003c44:	f3af 8000 	nop.w
 8003c48:	40000000 	.word	0x40000000
 8003c4c:	3f847ae1 	.word	0x3f847ae1
 8003c50:	2000dd10 	.word	0x2000dd10
 8003c54:	42c80000 	.word	0x42c80000
 8003c58:	20006f88 	.word	0x20006f88
 8003c5c:	2000ec30 	.word	0x2000ec30
 8003c60:	20006f98 	.word	0x20006f98
 8003c64:	2000eab0 	.word	0x2000eab0
 8003c68:	2000ed30 	.word	0x2000ed30
 8003c6c:	399c09bf 	.word	0x399c09bf
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 8003c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c7c:	f103 030e 	add.w	r3, r3, #14
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003c86:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003c8a:	fb00 f303 	mul.w	r3, r0, r3
 8003c8e:	440b      	add	r3, r1
 8003c90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca2:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8003c6c <StartDefaultTask+0x1624>
 8003ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003caa:	ee17 0a90 	vmov	r0, s15
 8003cae:	f7fc fc4b 	bl	8000548 <__aeabi_f2d>
 8003cb2:	4bac      	ldr	r3, [pc, #688]	; (8003f64 <StartDefaultTask+0x191c>)
 8003cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	f7fc fae6 	bl	800028c <__adddf3>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4ba7      	ldr	r3, [pc, #668]	; (8003f68 <StartDefaultTask+0x1920>)
 8003cca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	f7fc fadb 	bl	800028c <__adddf3>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	f507 627d 	add.w	r2, r7, #4048	; 0xfd0
 8003cde:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003ce2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003ce6:	f103 030e 	add.w	r3, r3, #14
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003cf0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3350      	adds	r3, #80	; 0x50
 8003cfc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d00:	4b9a      	ldr	r3, [pc, #616]	; (8003f6c <StartDefaultTask+0x1924>)
 8003d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d06:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fc73 	bl	80005f8 <__aeabi_dmul>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003d1a:	f101 010e 	add.w	r1, r1, #14
 8003d1e:	780e      	ldrb	r6, [r1, #0]
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7fc fab0 	bl	8000288 <__aeabi_dsub>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003d30:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003d34:	fb02 f206 	mul.w	r2, r2, r6
 8003d38:	440a      	add	r2, r1
 8003d3a:	3250      	adds	r2, #80	; 0x50
 8003d3c:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003d40:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d44:	f103 030e 	add.w	r3, r3, #14
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	4b89      	ldr	r3, [pc, #548]	; (8003f70 <StartDefaultTask+0x1928>)
 8003d4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d50:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003d54:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003d58:	fb00 f202 	mul.w	r2, r0, r2
 8003d5c:	440a      	add	r2, r1
 8003d5e:	3258      	adds	r2, #88	; 0x58
 8003d60:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8003d64:	4b7f      	ldr	r3, [pc, #508]	; (8003f64 <StartDefaultTask+0x191c>)
 8003d66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d6a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003d6e:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003d72:	e125      	b.n	8003fc0 <StartDefaultTask+0x1978>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003d74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d78:	f103 030e 	add.w	r3, r3, #14
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	4b7d      	ldr	r3, [pc, #500]	; (8003f74 <StartDefaultTask+0x192c>)
 8003d80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d84:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003d88:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003d8c:	fb00 f202 	mul.w	r2, r0, r2
 8003d90:	440a      	add	r2, r1
 8003d92:	3258      	adds	r2, #88	; 0x58
 8003d94:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003d98:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <StartDefaultTask+0x1920>)
 8003d9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d9e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003da2:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003da6:	e10b      	b.n	8003fc0 <StartDefaultTask+0x1978>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8003da8:	4b73      	ldr	r3, [pc, #460]	; (8003f78 <StartDefaultTask+0x1930>)
 8003daa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dae:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003db2:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f006 fc46 	bl	800a648 <scaraSetOutput>
					  }
					  break;
 8003dbc:	e100      	b.n	8003fc0 <StartDefaultTask+0x1978>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003dbe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003dc2:	f103 030e 	add.w	r3, r3, #14
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <StartDefaultTask+0x1928>)
 8003dca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dce:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003dd2:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003dd6:	fb00 f202 	mul.w	r2, r0, r2
 8003dda:	440a      	add	r2, r1
 8003ddc:	3258      	adds	r2, #88	; 0x58
 8003dde:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003de2:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <StartDefaultTask+0x1934>)
 8003de4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003de8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003dec:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003df0:	e0e6      	b.n	8003fc0 <StartDefaultTask+0x1978>
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8003df2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003df6:	f103 030e 	add.w	r3, r3, #14
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003e00:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	33b8      	adds	r3, #184	; 0xb8
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e14:	f103 030e 	add.w	r3, r3, #14
 8003e18:	7818      	ldrb	r0, [r3, #0]
 8003e1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e1e:	3a10      	subs	r2, #16
 8003e20:	460b      	mov	r3, r1
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	440b      	add	r3, r1
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e2e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003e32:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003e36:	fb02 f200 	mul.w	r2, r2, r0
 8003e3a:	440a      	add	r2, r1
 8003e3c:	3248      	adds	r2, #72	; 0x48
 8003e3e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8003e42:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e46:	f103 030e 	add.w	r3, r3, #14
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003e50:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	4413      	add	r3, r2
 8003e5a:	33b8      	adds	r3, #184	; 0xb8
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e64:	f103 030e 	add.w	r3, r3, #14
 8003e68:	7818      	ldrb	r0, [r3, #0]
 8003e6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e6e:	3a10      	subs	r2, #16
 8003e70:	460b      	mov	r3, r1
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	440b      	add	r3, r1
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e80:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003e84:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003e88:	fb02 f200 	mul.w	r2, r2, r0
 8003e8c:	440a      	add	r2, r1
 8003e8e:	3250      	adds	r2, #80	; 0x50
 8003e90:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003e94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003e98:	f103 030e 	add.w	r3, r3, #14
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003ea2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	33b8      	adds	r3, #184	; 0xb8
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003eb6:	f103 030e 	add.w	r3, r3, #14
 8003eba:	7818      	ldrb	r0, [r3, #0]
 8003ebc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ec0:	3a10      	subs	r2, #16
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	440b      	add	r3, r1
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3310      	adds	r3, #16
 8003ece:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ed2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003ed6:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003eda:	fb02 f200 	mul.w	r2, r2, r0
 8003ede:	440a      	add	r2, r1
 8003ee0:	3260      	adds	r2, #96	; 0x60
 8003ee2:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003ee6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003eea:	f103 030e 	add.w	r3, r3, #14
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <StartDefaultTask+0x1928>)
 8003ef2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ef6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003efa:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003efe:	fb00 f202 	mul.w	r2, r0, r2
 8003f02:	440a      	add	r2, r1
 8003f04:	3258      	adds	r2, #88	; 0x58
 8003f06:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <StartDefaultTask+0x191c>)
 8003f0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f10:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f14:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003f18:	e052      	b.n	8003fc0 <StartDefaultTask+0x1978>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003f1a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f1e:	f103 030e 	add.w	r3, r3, #14
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <StartDefaultTask+0x1938>)
 8003f26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f2a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003f2e:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003f32:	fb00 f202 	mul.w	r2, r0, r2
 8003f36:	440a      	add	r2, r1
 8003f38:	3258      	adds	r2, #88	; 0x58
 8003f3a:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <StartDefaultTask+0x193c>)
 8003f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f44:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f48:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003f4c:	e038      	b.n	8003fc0 <StartDefaultTask+0x1978>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <StartDefaultTask+0x1940>)
 8003f50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f54:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f58:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f006 fb73 	bl	800a648 <scaraSetOutput>
					  }
					  break;
 8003f62:	e02d      	b.n	8003fc0 <StartDefaultTask+0x1978>
 8003f64:	20000028 	.word	0x20000028
 8003f68:	20000010 	.word	0x20000010
 8003f6c:	20000058 	.word	0x20000058
 8003f70:	20000040 	.word	0x20000040
 8003f74:	20000048 	.word	0x20000048
 8003f78:	20000030 	.word	0x20000030
 8003f7c:	20000018 	.word	0x20000018
 8003f80:	20000050 	.word	0x20000050
 8003f84:	20000008 	.word	0x20000008
 8003f88:	20000038 	.word	0x20000038
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003f8c:	4bd6      	ldr	r3, [pc, #856]	; (80042e8 <StartDefaultTask+0x1ca0>)
 8003f8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f92:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f96:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003f9a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f9e:	f103 030e 	add.w	r3, r3, #14
 8003fa2:	781a      	ldrb	r2, [r3, #0]
 8003fa4:	4bd1      	ldr	r3, [pc, #836]	; (80042ec <StartDefaultTask+0x1ca4>)
 8003fa6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003faa:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003fae:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003fb2:	fb00 f202 	mul.w	r2, r0, r2
 8003fb6:	440a      	add	r2, r1
 8003fb8:	3258      	adds	r2, #88	; 0x58
 8003fba:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003fbe:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003fc0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fc4:	f103 030e 	add.w	r3, r3, #14
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003fce:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	18d1      	adds	r1, r2, r3
 8003fd8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8003fdc:	3328      	adds	r3, #40	; 0x28
 8003fde:	22c0      	movs	r2, #192	; 0xc0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f011 fecb 	bl	8015d7c <memcpy>
				  duty_cmd.time_total = state_time;
 8003fe6:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8003fea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ff2:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 8003ff6:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	f04f 0400 	mov.w	r4, #0
 8004002:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 8004006:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800400a:	f103 030f 	add.w	r3, r3, #15
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d006      	beq.n	8004022 <StartDefaultTask+0x19da>
 8004014:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004018:	f103 030f 	add.w	r3, r3, #15
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b06      	cmp	r3, #6
 8004020:	d103      	bne.n	800402a <StartDefaultTask+0x19e2>
					  status1 = SCARA_STATUS_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	f887 3ffb 	strb.w	r3, [r7, #4091]	; 0xffb
 8004028:	e03d      	b.n	80040a6 <StartDefaultTask+0x1a5e>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 800402a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800402e:	f103 030f 	add.w	r3, r3, #15
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d014      	beq.n	8004062 <StartDefaultTask+0x1a1a>
 8004038:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800403c:	f103 030f 	add.w	r3, r3, #15
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b05      	cmp	r3, #5
 8004044:	d00d      	beq.n	8004062 <StartDefaultTask+0x1a1a>
 8004046:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800404a:	f103 030f 	add.w	r3, r3, #15
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d006      	beq.n	8004062 <StartDefaultTask+0x1a1a>
 8004054:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004058:	f103 030f 	add.w	r3, r3, #15
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b07      	cmp	r3, #7
 8004060:	d108      	bne.n	8004074 <StartDefaultTask+0x1a2c>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004062:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004066:	2202      	movs	r2, #2
 8004068:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 800406a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800406e:	2203      	movs	r2, #3
 8004070:	745a      	strb	r2, [r3, #17]
 8004072:	e007      	b.n	8004084 <StartDefaultTask+0x1a3c>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 8004074:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004078:	2201      	movs	r2, #1
 800407a:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800407c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004080:	2201      	movs	r2, #1
 8004082:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 8004084:	f607 54f8 	addw	r4, r7, #3576	; 0xdf8
 8004088:	4668      	mov	r0, sp
 800408a:	f104 0310 	add.w	r3, r4, #16
 800408e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004092:	4619      	mov	r1, r3
 8004094:	f011 fe72 	bl	8015d7c <memcpy>
 8004098:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800409c:	f002 fbec 	bl	8006878 <scaraInitDuty>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3ffb 	strb.w	r3, [r7, #4091]	; 0xffb
				  }
				  if ( SCARA_STATUS_OK == status1) {
 80040a6:	f897 3ffb 	ldrb.w	r3, [r7, #4091]	; 0xffb
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d110      	bne.n	80040d0 <StartDefaultTask+0x1a88>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 80040ae:	2302      	movs	r3, #2
 80040b0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80040b4:	f102 0205 	add.w	r2, r2, #5
 80040b8:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	f04f 0400 	mov.w	r4, #0
 80040c2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040c6:	f102 0210 	add.w	r2, r2, #16
 80040ca:	e9c2 3400 	strd	r3, r4, [r2]
 80040ce:	e043      	b.n	8004158 <StartDefaultTask+0x1b10>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80040d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040d4:	f103 030e 	add.w	r3, r3, #14
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	425a      	negs	r2, r3
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	f002 0207 	and.w	r2, r2, #7
 80040e6:	bf58      	it	pl
 80040e8:	4253      	negpl	r3, r2
 80040ea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040ee:	f102 020e 	add.w	r2, r2, #14
 80040f2:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040fa:	f102 020f 	add.w	r2, r2, #15
 80040fe:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 8004100:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 8004104:	f897 2ffb 	ldrb.w	r2, [r7, #4091]	; 0xffb
 8004108:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800410a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800410e:	6899      	ldr	r1, [r3, #8]
 8004110:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 8004114:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004118:	f103 0308 	add.w	r3, r3, #8
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4413      	add	r3, r2
 8004120:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2301      	movs	r3, #1
 8004128:	2007      	movs	r0, #7
 800412a:	f7fe f8df 	bl	80022ec <commandRespond1>
 800412e:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					total_respond_length += respond_lenght;
 8004132:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004136:	f103 0308 	add.w	r3, r3, #8
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 8004140:	4413      	add	r3, r2
 8004142:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004146:	f102 0208 	add.w	r2, r2, #8
 800414a:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 800414c:	f240 3182 	movw	r1, #898	; 0x382
 8004150:	4867      	ldr	r0, [pc, #412]	; (80042f0 <StartDefaultTask+0x1ca8>)
 8004152:	f7fe f933 	bl	80023bc <LOG_REPORT>
					break;
 8004156:	e0d4      	b.n	8004302 <StartDefaultTask+0x1cba>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8004158:	a361      	add	r3, pc, #388	; (adr r3, 80042e0 <StartDefaultTask+0x1c98>)
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004162:	f101 0110 	add.w	r1, r1, #16
 8004166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800416a:	f7fc f88f 	bl	800028c <__adddf3>
 800416e:	4603      	mov	r3, r0
 8004170:	460c      	mov	r4, r1
 8004172:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004176:	f102 0210 	add.w	r2, r2, #16
 800417a:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 800417e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004182:	f103 0310 	add.w	r3, r3, #16
 8004186:	ed93 0b00 	vldr	d0, [r3]
 800418a:	f006 faef 	bl	800a76c <scaraIsFinish>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d037      	beq.n	8004204 <StartDefaultTask+0x1bbc>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004194:	2304      	movs	r3, #4
 8004196:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800419a:	f102 0205 	add.w	r2, r2, #5
 800419e:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 80041a0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041a4:	f103 030f 	add.w	r3, r3, #15
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b07      	cmp	r3, #7
 80041ac:	d118      	bne.n	80041e0 <StartDefaultTask+0x1b98>
					operation_state = SCARA_MOVE_TO_TARGET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041b4:	f102 020f 	add.w	r2, r2, #15
 80041b8:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 80041ba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041be:	f103 030e 	add.w	r3, r3, #14
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	425a      	negs	r2, r3
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	f002 0207 	and.w	r2, r2, #7
 80041d0:	bf58      	it	pl
 80041d2:	4253      	negpl	r3, r2
 80041d4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041d8:	f102 020e 	add.w	r2, r2, #14
 80041dc:	7013      	strb	r3, [r2, #0]
 80041de:	e00a      	b.n	80041f6 <StartDefaultTask+0x1bae>
				}else{
					operation_state += 1; //next state
 80041e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041e4:	f103 030f 	add.w	r3, r3, #15
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041f0:	f102 020f 	add.w	r2, r2, #15
 80041f4:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 80041f6:	483f      	ldr	r0, [pc, #252]	; (80042f4 <StartDefaultTask+0x1cac>)
 80041f8:	f001 fe1a 	bl	8005e30 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 80041fc:	483d      	ldr	r0, [pc, #244]	; (80042f4 <StartDefaultTask+0x1cac>)
 80041fe:	f000 fed3 	bl	8004fa8 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8004202:	e07d      	b.n	8004300 <StartDefaultTask+0x1cb8>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8004204:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004208:	f103 030f 	add.w	r3, r3, #15
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d076      	beq.n	8004300 <StartDefaultTask+0x1cb8>
 8004212:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004216:	f103 030f 	add.w	r3, r3, #15
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b06      	cmp	r3, #6
 800421e:	d06f      	beq.n	8004300 <StartDefaultTask+0x1cb8>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8004220:	4c35      	ldr	r4, [pc, #212]	; (80042f8 <StartDefaultTask+0x1cb0>)
 8004222:	4668      	mov	r0, sp
 8004224:	f104 0308 	add.w	r3, r4, #8
 8004228:	22b8      	movs	r2, #184	; 0xb8
 800422a:	4619      	mov	r1, r3
 800422c:	f011 fda6 	bl	8015d7c <memcpy>
 8004230:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004234:	482f      	ldr	r0, [pc, #188]	; (80042f4 <StartDefaultTask+0x1cac>)
 8004236:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800423a:	f101 0110 	add.w	r1, r1, #16
 800423e:	ed91 0b00 	vldr	d0, [r1]
 8004242:	f005 fbf9 	bl	8009a38 <scaraFlowDuty>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 3fcf 	strb.w	r3, [r7, #4047]	; 0xfcf
				if ( SCARA_STATUS_OK == status) {
 800424c:	f897 3fcf 	ldrb.w	r3, [r7, #4047]	; 0xfcf
 8004250:	2b00      	cmp	r3, #0
 8004252:	d113      	bne.n	800427c <StartDefaultTask+0x1c34>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8004254:	4c28      	ldr	r4, [pc, #160]	; (80042f8 <StartDefaultTask+0x1cb0>)
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <StartDefaultTask+0x1cac>)
 8004258:	ab2c      	add	r3, sp, #176	; 0xb0
 800425a:	4611      	mov	r1, r2
 800425c:	22c0      	movs	r2, #192	; 0xc0
 800425e:	4618      	mov	r0, r3
 8004260:	f011 fd8c 	bl	8015d7c <memcpy>
 8004264:	4668      	mov	r0, sp
 8004266:	f104 0310 	add.w	r3, r4, #16
 800426a:	22b0      	movs	r2, #176	; 0xb0
 800426c:	4619      	mov	r1, r3
 800426e:	f011 fd85 	bl	8015d7c <memcpy>
 8004272:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004276:	f001 ff6b 	bl	8006150 <lowlayer_computeAndWritePulse>
		  break;
 800427a:	e041      	b.n	8004300 <StartDefaultTask+0x1cb8>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800427c:	2303      	movs	r3, #3
 800427e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004282:	f102 0205 	add.w	r2, r2, #5
 8004286:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8004288:	f607 5328 	addw	r3, r7, #3368	; 0xd28
 800428c:	f897 2fcf 	ldrb.w	r2, [r7, #4047]	; 0xfcf
 8004290:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8004292:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004296:	6899      	ldr	r1, [r3, #8]
 8004298:	f607 52cc 	addw	r2, r7, #3532	; 0xdcc
 800429c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042a0:	f103 0308 	add.w	r3, r3, #8
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	f607 5228 	addw	r2, r7, #3368	; 0xd28
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2301      	movs	r3, #1
 80042b0:	2007      	movs	r0, #7
 80042b2:	f7fe f81b 	bl	80022ec <commandRespond1>
 80042b6:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
					  total_respond_length += respond_lenght;
 80042ba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042be:	f103 0308 	add.w	r3, r3, #8
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80042c8:	4413      	add	r3, r2
 80042ca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80042ce:	f102 0208 	add.w	r2, r2, #8
 80042d2:	6013      	str	r3, [r2, #0]
		  break;
 80042d4:	e014      	b.n	8004300 <StartDefaultTask+0x1cb8>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 80042d6:	bf00      	nop
 80042d8:	e016      	b.n	8004308 <StartDefaultTask+0x1cc0>
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w
 80042e0:	40000000 	.word	0x40000000
 80042e4:	3f847ae1 	.word	0x3f847ae1
 80042e8:	20000020 	.word	0x20000020
 80042ec:	20000040 	.word	0x20000040
 80042f0:	0801b38c 	.word	0x0801b38c
 80042f4:	2000ec30 	.word	0x2000ec30
 80042f8:	2000eab0 	.word	0x2000eab0
				  break;
 80042fc:	bf00      	nop
 80042fe:	e003      	b.n	8004308 <StartDefaultTask+0x1cc0>
		  break;
 8004300:	bf00      	nop
		  }
	  }
	  break;
 8004302:	e001      	b.n	8004308 <StartDefaultTask+0x1cc0>
	  break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <StartDefaultTask+0x1cc2>
	  break;
 8004308:	bf00      	nop

	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 800430a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800430e:	f103 0308 	add.w	r3, r3, #8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dd0b      	ble.n	8004330 <StartDefaultTask+0x1ce8>
		CDC_Transmit_FS(respond, total_respond_length);
 8004318:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800431c:	f103 0308 	add.w	r3, r3, #8
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	b29a      	uxth	r2, r3
 8004324:	f607 53cc 	addw	r3, r7, #3532	; 0xdcc
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f011 f8aa 	bl	8015484 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8004330:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004334:	f103 0307 	add.w	r3, r3, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f006 f9b6 	bl	800a6ac <scaraSetMethod>
	  scaraSetMode(current_mode);
 8004340:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004344:	f103 0306 	add.w	r3, r3, #6
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f006 f99e 	bl	800a68c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8004350:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004354:	f103 0305 	add.w	r3, r3, #5
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f006 f986 	bl	800a66c <scaraSetDutyState>

    osDelay(1);
 8004360:	2001      	movs	r0, #1
 8004362:	f00e f9a9 	bl	80126b8 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8004366:	f7fe b9ec 	b.w	8002742 <StartDefaultTask+0xfa>
 800436a:	bf00      	nop

0800436c <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 800436c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800436e:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8004372:	af70      	add	r7, sp, #448	; 0x1c0
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8004378:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800437c:	2201      	movs	r2, #1
 800437e:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004380:	4964      	ldr	r1, [pc, #400]	; (8004514 <Start_USB_RX_Task+0x1a8>)
 8004382:	4865      	ldr	r0, [pc, #404]	; (8004518 <Start_USB_RX_Task+0x1ac>)
 8004384:	f001 fab9 	bl	80058fa <ringBuff_DistanceOf>
 8004388:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 800438c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d0f4      	beq.n	8004380 <Start_USB_RX_Task+0x14>
 8004396:	466b      	mov	r3, sp
 8004398:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 800439a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800439e:	1c58      	adds	r0, r3, #1
 80043a0:	1e43      	subs	r3, r0, #1
 80043a2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80043a6:	4603      	mov	r3, r0
 80043a8:	4619      	mov	r1, r3
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	f04f 0400 	mov.w	r4, #0
 80043b6:	00d4      	lsls	r4, r2, #3
 80043b8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80043bc:	00cb      	lsls	r3, r1, #3
 80043be:	4603      	mov	r3, r0
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	f04f 0400 	mov.w	r4, #0
 80043ce:	00d4      	lsls	r4, r2, #3
 80043d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80043d4:	00cb      	lsls	r3, r1, #3
 80043d6:	4603      	mov	r3, r0
 80043d8:	3307      	adds	r3, #7
 80043da:	08db      	lsrs	r3, r3, #3
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	ebad 0d03 	sub.w	sp, sp, r3
 80043e2:	ab70      	add	r3, sp, #448	; 0x1c0
 80043e4:	3300      	adds	r3, #0
 80043e6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80043ea:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80043ee:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80043f2:	3301      	adds	r3, #1
 80043f4:	461a      	mov	r2, r3
 80043f6:	4848      	ldr	r0, [pc, #288]	; (8004518 <Start_USB_RX_Task+0x1ac>)
 80043f8:	f001 fa5e 	bl	80058b8 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 80043fc:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8004400:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004404:	3301      	adds	r3, #1
 8004406:	f107 020c 	add.w	r2, r7, #12
 800440a:	4619      	mov	r1, r3
 800440c:	f7fe f81c 	bl	8002448 <unPackPayload>
 8004410:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8004414:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d077      	beq.n	800450e <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 800441e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004422:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8004426:	f107 000c 	add.w	r0, r7, #12
 800442a:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 800442e:	f7fc fdab 	bl	8000f88 <packetRead>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8004438:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800443c:	2287      	movs	r2, #135	; 0x87
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f011 fcbf 	bl	8015dc4 <memset>
				  detail_length = 0;
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 800444e:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8004452:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	936f      	str	r3, [sp, #444]	; 0x1bc
 800445c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004460:	936e      	str	r3, [sp, #440]	; 0x1b8
 8004462:	4668      	mov	r0, sp
 8004464:	f104 0308 	add.w	r3, r4, #8
 8004468:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800446c:	4619      	mov	r1, r3
 800446e:	f011 fc85 	bl	8015d7c <memcpy>
 8004472:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004476:	4628      	mov	r0, r5
 8004478:	f7fd fdac 	bl	8001fd4 <commandReply>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8004482:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004486:	2b09      	cmp	r3, #9
 8004488:	d123      	bne.n	80044d2 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8004490:	e008      	b.n	80044a4 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <Start_USB_RX_Task+0x1b0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f04f 31ff 	mov.w	r1, #4294967295
 800449a:	4618      	mov	r0, r3
 800449c:	f00e fb1c 	bl	8012ad8 <osMailAlloc>
 80044a0:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 80044a4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f2      	beq.n	8004492 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80044ac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80044b0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80044b4:	4619      	mov	r1, r3
 80044b6:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 80044ba:	f011 fc5f 	bl	8015d7c <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80044be:	4b17      	ldr	r3, [pc, #92]	; (800451c <Start_USB_RX_Task+0x1b0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 80044c6:	4618      	mov	r0, r3
 80044c8:	f00e fb1c 	bl	8012b04 <osMailPut>
 80044cc:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 80044d0:	e01d      	b.n	800450e <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 80044d2:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80044d6:	2b0a      	cmp	r3, #10
 80044d8:	d019      	beq.n	800450e <Start_USB_RX_Task+0x1a2>

				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 80044da:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 80044de:	f107 0308 	add.w	r3, r7, #8
 80044e2:	681c      	ldr	r4, [r3, #0]
 80044e4:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80044e8:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 80044ec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4623      	mov	r3, r4
 80044f4:	f7fd fefa 	bl	80022ec <commandRespond1>
 80044f8:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 80044fc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8004500:	b29a      	uxth	r2, r3
 8004502:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f010 ffbb 	bl	8015484 <CDC_Transmit_FS>
 800450e:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004510:	e736      	b.n	8004380 <Start_USB_RX_Task+0x14>
 8004512:	bf00      	nop
 8004514:	0801b448 	.word	0x0801b448
 8004518:	20000064 	.word	0x20000064
 800451c:	2000de2c 	.word	0x2000de2c

08004520 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b292      	uxth	r2, r2
 8004530:	801a      	strh	r2, [r3, #0]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	611a      	str	r2, [r3, #16]
 800456c:	615a      	str	r2, [r3, #20]
 800456e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004572:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004576:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <MX_FSMC_Init+0xb8>)
 800457a:	4a26      	ldr	r2, [pc, #152]	; (8004614 <MX_FSMC_Init+0xbc>)
 800457c:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004580:	2200      	movs	r2, #0
 8004582:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004584:	4b22      	ldr	r3, [pc, #136]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004586:	2202      	movs	r2, #2
 8004588:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800458a:	4b21      	ldr	r3, [pc, #132]	; (8004610 <MX_FSMC_Init+0xb8>)
 800458c:	2208      	movs	r2, #8
 800458e:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004590:	4b1f      	ldr	r3, [pc, #124]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004592:	2210      	movs	r2, #16
 8004594:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <MX_FSMC_Init+0xb8>)
 8004598:	2200      	movs	r2, #0
 800459a:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800459c:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <MX_FSMC_Init+0xb8>)
 800459e:	2200      	movs	r2, #0
 80045a0:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80045ae:	4b18      	ldr	r3, [pc, #96]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80045d4:	230f      	movs	r3, #15
 80045d6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80045d8:	230f      	movs	r3, #15
 80045da:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80045dc:	23ff      	movs	r3, #255	; 0xff
 80045de:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80045e0:	230f      	movs	r3, #15
 80045e2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80045e4:	2310      	movs	r3, #16
 80045e6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80045e8:	2311      	movs	r3, #17
 80045ea:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	2200      	movs	r2, #0
 80045f4:	4619      	mov	r1, r3
 80045f6:	4806      	ldr	r0, [pc, #24]	; (8004610 <MX_FSMC_Init+0xb8>)
 80045f8:	f007 fe42 	bl	800c280 <HAL_NOR_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004602:	f001 f89f 	bl	8005744 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004606:	bf00      	nop
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	2000de38 	.word	0x2000de38
 8004614:	a0000104 	.word	0xa0000104

08004618 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800462c:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_FSMC_MspInit+0xa8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d140      	bne.n	80046b6 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_FSMC_MspInit+0xa8>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <HAL_FSMC_MspInit+0xac>)
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	4a20      	ldr	r2, [pc, #128]	; (80046c4 <HAL_FSMC_MspInit+0xac>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6393      	str	r3, [r2, #56]	; 0x38
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <HAL_FSMC_MspInit+0xac>)
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004656:	f64f 7380 	movw	r3, #65408	; 0xff80
 800465a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	2302      	movs	r3, #2
 800465e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004664:	2303      	movs	r3, #3
 8004666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004668:	230c      	movs	r3, #12
 800466a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	4619      	mov	r1, r3
 8004670:	4815      	ldr	r0, [pc, #84]	; (80046c8 <HAL_FSMC_MspInit+0xb0>)
 8004672:	f007 fc51 	bl	800bf18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004676:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800467a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	2303      	movs	r3, #3
 8004686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004688:	230c      	movs	r3, #12
 800468a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	4619      	mov	r1, r3
 8004690:	480e      	ldr	r0, [pc, #56]	; (80046cc <HAL_FSMC_MspInit+0xb4>)
 8004692:	f007 fc41 	bl	800bf18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a2:	2303      	movs	r3, #3
 80046a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80046a6:	230c      	movs	r3, #12
 80046a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4808      	ldr	r0, [pc, #32]	; (80046d0 <HAL_FSMC_MspInit+0xb8>)
 80046b0:	f007 fc32 	bl	800bf18 <HAL_GPIO_Init>
 80046b4:	e000      	b.n	80046b8 <HAL_FSMC_MspInit+0xa0>
    return;
 80046b6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20002854 	.word	0x20002854
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40020c00 	.word	0x40020c00
 80046d0:	40020400 	.word	0x40020400

080046d4 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80046dc:	f7ff ff9c 	bl	8004618 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point, int32_t run_point)
{
 80046e8:	b084      	sub	sp, #16
 80046ea:	b590      	push	{r4, r7, lr}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	f107 001c 	add.w	r0, r7, #28
 80046f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Gcode_Mode == GCODE_LINEAR){
 80046fa:	4baf      	ldr	r3, [pc, #700]	; (80049b8 <update_gcode_point+0x2d0>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b07      	cmp	r3, #7
 8004700:	f040 80e6 	bne.w	80048d0 <update_gcode_point+0x1e8>
		duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fb ff0c 	bl	8000524 <__aeabi_i2d>
 800470c:	a3a8      	add	r3, pc, #672	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f7fb ff71 	bl	80005f8 <__aeabi_dmul>
 8004716:	4603      	mov	r3, r0
 8004718:	460c      	mov	r4, r1
 800471a:	4618      	mov	r0, r3
 800471c:	4621      	mov	r1, r4
 800471e:	4ba7      	ldr	r3, [pc, #668]	; (80049bc <update_gcode_point+0x2d4>)
 8004720:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004724:	461a      	mov	r2, r3
 8004726:	4623      	mov	r3, r4
 8004728:	f7fb fdb0 	bl	800028c <__adddf3>
 800472c:	4603      	mov	r3, r0
 800472e:	460c      	mov	r4, r1
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fef3 	bl	8000524 <__aeabi_i2d>
 800473e:	a39c      	add	r3, pc, #624	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fb ff58 	bl	80005f8 <__aeabi_dmul>
 8004748:	4603      	mov	r3, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4618      	mov	r0, r3
 800474e:	4621      	mov	r1, r4
 8004750:	4b9b      	ldr	r3, [pc, #620]	; (80049c0 <update_gcode_point+0x2d8>)
 8004752:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004756:	461a      	mov	r2, r3
 8004758:	4623      	mov	r3, r4
 800475a:	f7fb fd97 	bl	800028c <__adddf3>
 800475e:	4603      	mov	r3, r0
 8004760:	460c      	mov	r4, r1
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		if(gcode_point.configure.type_define[1] == UP_Z){
 8004768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800476c:	2b05      	cmp	r3, #5
 800476e:	d10f      	bne.n	8004790 <update_gcode_point+0xa8>
		  duty_cmd->target_point.z = up_z_height + offset_z;
 8004770:	4b94      	ldr	r3, [pc, #592]	; (80049c4 <update_gcode_point+0x2dc>)
 8004772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004776:	4b94      	ldr	r3, [pc, #592]	; (80049c8 <update_gcode_point+0x2e0>)
 8004778:	e9d3 3400 	ldrd	r3, r4, [r3]
 800477c:	461a      	mov	r2, r3
 800477e:	4623      	mov	r3, r4
 8004780:	f7fb fd84 	bl	800028c <__adddf3>
 8004784:	4603      	mov	r3, r0
 8004786:	460c      	mov	r4, r1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 800478e:	e00e      	b.n	80047ae <update_gcode_point+0xc6>
		}else{
		  duty_cmd->target_point.z = down_z_height + offset_z;
 8004790:	4b8e      	ldr	r3, [pc, #568]	; (80049cc <update_gcode_point+0x2e4>)
 8004792:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004796:	4b8c      	ldr	r3, [pc, #560]	; (80049c8 <update_gcode_point+0x2e0>)
 8004798:	e9d3 3400 	ldrd	r3, r4, [r3]
 800479c:	461a      	mov	r2, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	f7fb fd74 	bl	800028c <__adddf3>
 80047a4:	4603      	mov	r3, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		}
		duty_cmd->target_point.roll = roll_angle;
 80047ae:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <update_gcode_point+0x2e8>)
 80047b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fb feb1 	bl	8000524 <__aeabi_i2d>
 80047c2:	a37b      	add	r3, pc, #492	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb ff16 	bl	80005f8 <__aeabi_dmul>
 80047cc:	4603      	mov	r3, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	4618      	mov	r0, r3
 80047d2:	4621      	mov	r1, r4
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	4b7e      	ldr	r3, [pc, #504]	; (80049d4 <update_gcode_point+0x2ec>)
 80047da:	f7fc f837 	bl	800084c <__aeabi_ddiv>
 80047de:	4603      	mov	r3, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
		if(run_point == 1){
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10d      	bne.n	800480a <update_gcode_point+0x122>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004808:	e005      	b.n	8004816 <update_gcode_point+0x12e>
		}else{
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	745a      	strb	r2, [r3, #17]
		}
		duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	731a      	strb	r2, [r3, #12]
		if(gcode_point.configure.type_define[0] == LINEAR_TYPE){
 800481c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004820:	2b01      	cmp	r3, #1
 8004822:	d103      	bne.n	800482c <update_gcode_point+0x144>
		  duty_cmd->path_type = DUTY_PATH_LINE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	739a      	strb	r2, [r3, #14]
 800482a:	e04d      	b.n	80048c8 <update_gcode_point+0x1e0>
		}else if(gcode_point.configure.type_define[0] == ARC_AW_TYPE){
 800482c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004830:	2b03      	cmp	r3, #3
 8004832:	d122      	bne.n	800487a <update_gcode_point+0x192>
		  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fe74 	bl	8000524 <__aeabi_i2d>
 800483c:	a35c      	add	r3, pc, #368	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f7fb fed9 	bl	80005f8 <__aeabi_dmul>
 8004846:	4603      	mov	r3, r0
 8004848:	460c      	mov	r4, r1
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	4618      	mov	r0, r3
 8004854:	f7fb fe66 	bl	8000524 <__aeabi_i2d>
 8004858:	a355      	add	r3, pc, #340	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fecb 	bl	80005f8 <__aeabi_dmul>
 8004862:	4603      	mov	r3, r0
 8004864:	460c      	mov	r4, r1
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = 1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	615a      	str	r2, [r3, #20]
 8004878:	e026      	b.n	80048c8 <update_gcode_point+0x1e0>
		}else if(gcode_point.configure.type_define[0] == ARC_CW_TYPE){
 800487a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800487e:	2b02      	cmp	r3, #2
 8004880:	d122      	bne.n	80048c8 <update_gcode_point+0x1e0>
		  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	4618      	mov	r0, r3
 8004886:	f7fb fe4d 	bl	8000524 <__aeabi_i2d>
 800488a:	a349      	add	r3, pc, #292	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f7fb feb2 	bl	80005f8 <__aeabi_dmul>
 8004894:	4603      	mov	r3, r0
 8004896:	460c      	mov	r4, r1
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fb fe3f 	bl	8000524 <__aeabi_i2d>
 80048a6:	a342      	add	r3, pc, #264	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb fea4 	bl	80005f8 <__aeabi_dmul>
 80048b0:	4603      	mov	r3, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = -1;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	615a      	str	r2, [r3, #20]
		}
		duty_cmd->space_type = DUTY_SPACE_TASK;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	735a      	strb	r2, [r3, #13]
			duty_cmd->v_factor = (double)gcode_clutch_configure[gcode_point.configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
			pre_height = gcode_point.configure.type_define[1];
		}
	}

}
 80048ce:	e12e      	b.n	8004b2e <update_gcode_point+0x446>
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <update_gcode_point+0x2d0>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	f040 812a 	bne.w	8004b2e <update_gcode_point+0x446>
		duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fb fe21 	bl	8000524 <__aeabi_i2d>
 80048e2:	a333      	add	r3, pc, #204	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fe86 	bl	80005f8 <__aeabi_dmul>
 80048ec:	4603      	mov	r3, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4618      	mov	r0, r3
 80048f2:	4621      	mov	r1, r4
 80048f4:	4b31      	ldr	r3, [pc, #196]	; (80049bc <update_gcode_point+0x2d4>)
 80048f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048fa:	461a      	mov	r2, r3
 80048fc:	4623      	mov	r3, r4
 80048fe:	f7fb fcc5 	bl	800028c <__adddf3>
 8004902:	4603      	mov	r3, r0
 8004904:	460c      	mov	r4, r1
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fe08 	bl	8000524 <__aeabi_i2d>
 8004914:	a326      	add	r3, pc, #152	; (adr r3, 80049b0 <update_gcode_point+0x2c8>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fe6d 	bl	80005f8 <__aeabi_dmul>
 800491e:	4603      	mov	r3, r0
 8004920:	460c      	mov	r4, r1
 8004922:	4618      	mov	r0, r3
 8004924:	4621      	mov	r1, r4
 8004926:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <update_gcode_point+0x2d8>)
 8004928:	e9d3 3400 	ldrd	r3, r4, [r3]
 800492c:	461a      	mov	r2, r3
 800492e:	4623      	mov	r3, r4
 8004930:	f7fb fcac 	bl	800028c <__adddf3>
 8004934:	4603      	mov	r3, r0
 8004936:	460c      	mov	r4, r1
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		duty_cmd->target_point.roll = roll_angle;
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <update_gcode_point+0x2e8>)
 8004940:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	731a      	strb	r2, [r3, #12]
		duty_cmd->space_type = DUTY_SPACE_TASK;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	735a      	strb	r2, [r3, #13]
		if(gcode_point.configure.type_define[1] == UP_Z){
 8004956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800495a:	2b05      	cmp	r3, #5
 800495c:	d10f      	bne.n	800497e <update_gcode_point+0x296>
		  duty_cmd->target_point.z = up_z_height + offset_z;
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <update_gcode_point+0x2dc>)
 8004960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004964:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <update_gcode_point+0x2e0>)
 8004966:	e9d3 3400 	ldrd	r3, r4, [r3]
 800496a:	461a      	mov	r2, r3
 800496c:	4623      	mov	r3, r4
 800496e:	f7fb fc8d 	bl	800028c <__adddf3>
 8004972:	4603      	mov	r3, r0
 8004974:	460c      	mov	r4, r1
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 800497c:	e00e      	b.n	800499c <update_gcode_point+0x2b4>
		  duty_cmd->target_point.z = down_z_height + offset_z;
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <update_gcode_point+0x2e4>)
 8004980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004984:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <update_gcode_point+0x2e0>)
 8004986:	e9d3 3400 	ldrd	r3, r4, [r3]
 800498a:	461a      	mov	r2, r3
 800498c:	4623      	mov	r3, r4
 800498e:	f7fb fc7d 	bl	800028c <__adddf3>
 8004992:	4603      	mov	r3, r0
 8004994:	460c      	mov	r4, r1
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		if(gcode_point.configure.type_define[0] == LINEAR_TYPE){
 800499c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d119      	bne.n	80049d8 <update_gcode_point+0x2f0>
		  duty_cmd->path_type = DUTY_PATH_LINE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	739a      	strb	r2, [r3, #14]
 80049aa:	e063      	b.n	8004a74 <update_gcode_point+0x38c>
 80049ac:	f3af 8000 	nop.w
 80049b0:	a0000000 	.word	0xa0000000
 80049b4:	3eb0c6f7 	.word	0x3eb0c6f7
 80049b8:	200065c0 	.word	0x200065c0
 80049bc:	20006f80 	.word	0x20006f80
 80049c0:	2000dd18 	.word	0x2000dd18
 80049c4:	200065b8 	.word	0x200065b8
 80049c8:	2000dd08 	.word	0x2000dd08
 80049cc:	20006f30 	.word	0x20006f30
 80049d0:	20006f78 	.word	0x20006f78
 80049d4:	40877000 	.word	0x40877000
		}else if(gcode_point.configure.type_define[0] == ARC_AW_TYPE){
 80049d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d122      	bne.n	8004a26 <update_gcode_point+0x33e>
		  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fb fd9e 	bl	8000524 <__aeabi_i2d>
 80049e8:	a355      	add	r3, pc, #340	; (adr r3, 8004b40 <update_gcode_point+0x458>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb fe03 	bl	80005f8 <__aeabi_dmul>
 80049f2:	4603      	mov	r3, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fb fd90 	bl	8000524 <__aeabi_i2d>
 8004a04:	a34e      	add	r3, pc, #312	; (adr r3, 8004b40 <update_gcode_point+0x458>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb fdf5 	bl	80005f8 <__aeabi_dmul>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = 1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	615a      	str	r2, [r3, #20]
 8004a24:	e026      	b.n	8004a74 <update_gcode_point+0x38c>
		}else if(gcode_point.configure.type_define[0] == ARC_CW_TYPE){
 8004a26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d122      	bne.n	8004a74 <update_gcode_point+0x38c>
		  duty_cmd->sub_point.x = (double)gcode_point.I * COR_INVERSE_SCALE;
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd77 	bl	8000524 <__aeabi_i2d>
 8004a36:	a342      	add	r3, pc, #264	; (adr r3, 8004b40 <update_gcode_point+0x458>)
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f7fb fddc 	bl	80005f8 <__aeabi_dmul>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)gcode_point.J * COR_INVERSE_SCALE;
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fd69 	bl	8000524 <__aeabi_i2d>
 8004a52:	a33b      	add	r3, pc, #236	; (adr r3, 8004b40 <update_gcode_point+0x458>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fdce 	bl	80005f8 <__aeabi_dmul>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = -1;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	615a      	str	r2, [r3, #20]
		if(gcode_point.configure.type_define[1] == pre_height){
 8004a74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004a78:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <update_gcode_point+0x460>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d12c      	bne.n	8004ada <update_gcode_point+0x3f2>
			if(gcode_point.configure.clutch_index != pre_clutch_index){
 8004a80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a82:	461a      	mov	r2, r3
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <update_gcode_point+0x464>)
 8004a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d00f      	beq.n	8004aae <update_gcode_point+0x3c6>
				LSPB_calculation(gcode_clutch_configure[gcode_point.configure.clutch_index]);
 8004a8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a90:	4619      	mov	r1, r3
 8004a92:	4a2f      	ldr	r2, [pc, #188]	; (8004b50 <update_gcode_point+0x468>)
 8004a94:	460b      	mov	r3, r1
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	440b      	add	r3, r1
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004aa2:	f000 f85d 	bl	8004b60 <LSPB_calculation>
				pre_clutch_index = gcode_point.configure.clutch_index;
 8004aa6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004aa8:	b21a      	sxth	r2, r3
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <update_gcode_point+0x464>)
 8004aac:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(gcode_point.T*COR_INVERSE_SCALE);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abe:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004b54 <update_gcode_point+0x46c>
 8004ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac6:	ee17 0a90 	vmov	r0, s15
 8004aca:	f7fb fd3d 	bl	8000548 <__aeabi_f2d>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004ad8:	e029      	b.n	8004b2e <update_gcode_point+0x446>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[gcode_point.configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
 8004ae6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <update_gcode_point+0x468>)
 8004aec:	460b      	mov	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	3308      	adds	r3, #8
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fd12 	bl	8000524 <__aeabi_i2d>
 8004b00:	a30f      	add	r3, pc, #60	; (adr r3, 8004b40 <update_gcode_point+0x458>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fd77 	bl	80005f8 <__aeabi_dmul>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	4618      	mov	r0, r3
 8004b10:	4621      	mov	r1, r4
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <update_gcode_point+0x470>)
 8004b18:	f7fb fe98 	bl	800084c <__aeabi_ddiv>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			pre_height = gcode_point.configure.type_define[1];
 8004b26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004b2a:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <update_gcode_point+0x460>)
 8004b2c:	701a      	strb	r2, [r3, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004b38:	b004      	add	sp, #16
 8004b3a:	4770      	bx	lr
 8004b3c:	f3af 8000 	nop.w
 8004b40:	a0000000 	.word	0xa0000000
 8004b44:	3eb0c6f7 	.word	0x3eb0c6f7
 8004b48:	20006f60 	.word	0x20006f60
 8004b4c:	2000dd02 	.word	0x2000dd02
 8004b50:	200065d0 	.word	0x200065d0
 8004b54:	358637bd 	.word	0x358637bd
 8004b58:	40877000 	.word	0x40877000
 8004b5c:	00000000 	.word	0x00000000

08004b60 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8004b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b62:	b08b      	sub	sp, #44	; 0x2c
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	f04f 0400 	mov.w	r4, #0
 8004b74:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double total_s = (double)configure.total_s*COR_INVERSE_SCALE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fb fcd2 	bl	8000524 <__aeabi_i2d>
 8004b80:	a38e      	add	r3, pc, #568	; (adr r3, 8004dbc <LSPB_calculation+0x25c>)
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f7fb fd37 	bl	80005f8 <__aeabi_dmul>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double veloc   = (double)configure.veloc*COR_INVERSE_SCALE;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fb fcc5 	bl	8000524 <__aeabi_i2d>
 8004b9a:	a388      	add	r3, pc, #544	; (adr r3, 8004dbc <LSPB_calculation+0x25c>)
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f7fb fd2a 	bl	80005f8 <__aeabi_dmul>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	time_move = 1.2*total_s/veloc;
 8004bac:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004bb0:	4b77      	ldr	r3, [pc, #476]	; (8004d90 <LSPB_calculation+0x230>)
 8004bb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bb6:	f7fb fd1f 	bl	80005f8 <__aeabi_dmul>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bc6:	f7fb fe41 	bl	800084c <__aeabi_ddiv>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	460c      	mov	r4, r1
 8004bce:	4a71      	ldr	r2, [pc, #452]	; (8004d94 <LSPB_calculation+0x234>)
 8004bd0:	e9c2 3400 	strd	r3, r4, [r2]
	time_acc = time_move - total_s/veloc;
 8004bd4:	4b6f      	ldr	r3, [pc, #444]	; (8004d94 <LSPB_calculation+0x234>)
 8004bd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004bda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004be2:	f7fb fe33 	bl	800084c <__aeabi_ddiv>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4620      	mov	r0, r4
 8004bec:	4629      	mov	r1, r5
 8004bee:	f7fb fb4b 	bl	8000288 <__aeabi_dsub>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	4a68      	ldr	r2, [pc, #416]	; (8004d98 <LSPB_calculation+0x238>)
 8004bf8:	e9c2 3400 	strd	r3, r4, [r2]
	time_dec = time_move - time_acc;
 8004bfc:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <LSPB_calculation+0x234>)
 8004bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c02:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <LSPB_calculation+0x238>)
 8004c04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	f7fb fb3c 	bl	8000288 <__aeabi_dsub>
 8004c10:	4603      	mov	r3, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	4a61      	ldr	r2, [pc, #388]	; (8004d9c <LSPB_calculation+0x23c>)
 8004c16:	e9c2 3400 	strd	r3, r4, [r2]
	accel = veloc / time_acc;
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	; (8004d98 <LSPB_calculation+0x238>)
 8004c1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c20:	461a      	mov	r2, r3
 8004c22:	4623      	mov	r3, r4
 8004c24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c28:	f7fb fe10 	bl	800084c <__aeabi_ddiv>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	460c      	mov	r4, r1
 8004c30:	e9c7 3408 	strd	r3, r4, [r7, #32]
	acc0 = 0.5*accel;
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <LSPB_calculation+0x240>)
 8004c3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c3e:	f7fb fcdb 	bl	80005f8 <__aeabi_dmul>
 8004c42:	4603      	mov	r3, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	4a57      	ldr	r2, [pc, #348]	; (8004da4 <LSPB_calculation+0x244>)
 8004c48:	e9c2 3400 	strd	r3, r4, [r2]
	constant[0] = veloc;
 8004c4c:	4a56      	ldr	r2, [pc, #344]	; (8004da8 <LSPB_calculation+0x248>)
 8004c4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c52:	e9c2 3400 	strd	r3, r4, [r2]
	constant[1] = -0.5*time_acc*veloc;
 8004c56:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <LSPB_calculation+0x238>)
 8004c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	4b52      	ldr	r3, [pc, #328]	; (8004dac <LSPB_calculation+0x24c>)
 8004c62:	f7fb fcc9 	bl	80005f8 <__aeabi_dmul>
 8004c66:	4603      	mov	r3, r0
 8004c68:	460c      	mov	r4, r1
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c72:	f7fb fcc1 	bl	80005f8 <__aeabi_dmul>
 8004c76:	4603      	mov	r3, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	4a4b      	ldr	r2, [pc, #300]	; (8004da8 <LSPB_calculation+0x248>)
 8004c7c:	e9c2 3402 	strd	r3, r4, [r2, #8]
    deacc[0] 	= -0.5*accel;
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	4b49      	ldr	r3, [pc, #292]	; (8004dac <LSPB_calculation+0x24c>)
 8004c86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c8a:	f7fb fcb5 	bl	80005f8 <__aeabi_dmul>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	460c      	mov	r4, r1
 8004c92:	4a47      	ldr	r2, [pc, #284]	; (8004db0 <LSPB_calculation+0x250>)
 8004c94:	e9c2 3400 	strd	r3, r4, [r2]
    deacc[1]	= veloc + accel*time_dec;
 8004c98:	4b40      	ldr	r3, [pc, #256]	; (8004d9c <LSPB_calculation+0x23c>)
 8004c9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ca2:	f7fb fca9 	bl	80005f8 <__aeabi_dmul>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4618      	mov	r0, r3
 8004cac:	4621      	mov	r1, r4
 8004cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cb2:	f7fb faeb 	bl	800028c <__adddf3>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	4a3d      	ldr	r2, [pc, #244]	; (8004db0 <LSPB_calculation+0x250>)
 8004cbc:	e9c2 3402 	strd	r3, r4, [r2, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8004cc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	f7fb fae0 	bl	800028c <__adddf3>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	4626      	mov	r6, r4
 8004cd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	f7fb fad6 	bl	800028c <__adddf3>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <LSPB_calculation+0x23c>)
 8004cea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	f7fb fc81 	bl	80005f8 <__aeabi_dmul>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4623      	mov	r3, r4
 8004cfe:	4628      	mov	r0, r5
 8004d00:	4631      	mov	r1, r6
 8004d02:	f7fb fac3 	bl	800028c <__adddf3>
 8004d06:	4603      	mov	r3, r0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	4625      	mov	r5, r4
 8004d0c:	461c      	mov	r4, r3
 8004d0e:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <LSPB_calculation+0x234>)
 8004d10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d18:	f7fb fc6e 	bl	80005f8 <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4620      	mov	r0, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7fb fab0 	bl	8000288 <__aeabi_dsub>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4b18      	ldr	r3, [pc, #96]	; (8004d94 <LSPB_calculation+0x234>)
 8004d32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d36:	461a      	mov	r2, r3
 8004d38:	4623      	mov	r3, r4
 8004d3a:	f7fb fc5d 	bl	80005f8 <__aeabi_dmul>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	460c      	mov	r4, r1
 8004d42:	4618      	mov	r0, r3
 8004d44:	4621      	mov	r1, r4
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d4e:	f7fb fd7d 	bl	800084c <__aeabi_ddiv>
 8004d52:	4603      	mov	r3, r0
 8004d54:	460c      	mov	r4, r1
 8004d56:	461a      	mov	r2, r3
 8004d58:	4623      	mov	r3, r4
 8004d5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004d5e:	f7fb fa93 	bl	8000288 <__aeabi_dsub>
 8004d62:	4603      	mov	r3, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <LSPB_calculation+0x250>)
 8004d68:	e9c2 3404 	strd	r3, r4, [r2, #16]
    accumulate_s = 0;
 8004d6c:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <LSPB_calculation+0x254>)
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	f04f 0400 	mov.w	r4, #0
 8004d76:	e9c2 3400 	strd	r3, r4, [r2]
    last_T = 0;
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <LSPB_calculation+0x258>)
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	f04f 0400 	mov.w	r4, #0
 8004d84:	e9c2 3400 	strd	r3, r4, [r2]
}
 8004d88:	bf00      	nop
 8004d8a:	372c      	adds	r7, #44	; 0x2c
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d90:	3ff33333 	.word	0x3ff33333
 8004d94:	20006f90 	.word	0x20006f90
 8004d98:	20006f38 	.word	0x20006f38
 8004d9c:	20006f58 	.word	0x20006f58
 8004da0:	3fe00000 	.word	0x3fe00000
 8004da4:	2000dcf8 	.word	0x2000dcf8
 8004da8:	20006f68 	.word	0x20006f68
 8004dac:	bfe00000 	.word	0xbfe00000
 8004db0:	20006f40 	.word	0x20006f40
 8004db4:	200065c8 	.word	0x200065c8
 8004db8:	2000dd10 	.word	0x2000dd10
 8004dbc:	a0000000 	.word	0xa0000000
 8004dc0:	3eb0c6f7 	.word	0x3eb0c6f7
 8004dc4:	00000000 	.word	0x00000000

08004dc8 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8004dc8:	b084      	sub	sp, #16
 8004dca:	b598      	push	{r3, r4, r7, lr}
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	f107 0410 	add.w	r4, r7, #16
 8004dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//double temper_s;
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*COR_INVERSE_SCALE);
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fba3 	bl	8000524 <__aeabi_i2d>
 8004dde:	a312      	add	r3, pc, #72	; (adr r3, 8004e28 <accumulate_update+0x60>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fc08 	bl	80005f8 <__aeabi_dmul>
 8004de8:	4603      	mov	r3, r0
 8004dea:	460c      	mov	r4, r1
 8004dec:	ec44 3b17 	vmov	d7, r3, r4
 8004df0:	eeb0 0a47 	vmov.f32	s0, s14
 8004df4:	eef0 0a67 	vmov.f32	s1, s15
 8004df8:	480d      	ldr	r0, [pc, #52]	; (8004e30 <accumulate_update+0x68>)
 8004dfa:	f003 ff4d 	bl	8008c98 <scaraFlowGCODE>
	//accumulate_s += temper_s;
	last_T = (double)gcode_point.T*COR_INVERSE_SCALE;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb fb8f 	bl	8000524 <__aeabi_i2d>
 8004e06:	a308      	add	r3, pc, #32	; (adr r3, 8004e28 <accumulate_update+0x60>)
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f7fb fbf4 	bl	80005f8 <__aeabi_dmul>
 8004e10:	4603      	mov	r3, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	4a07      	ldr	r2, [pc, #28]	; (8004e34 <accumulate_update+0x6c>)
 8004e16:	e9c2 3400 	strd	r3, r4, [r2]
}
 8004e1a:	bf00      	nop
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 8004e22:	b004      	add	sp, #16
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	a0000000 	.word	0xa0000000
 8004e2c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004e30:	200065c8 	.word	0x200065c8
 8004e34:	2000dd10 	.word	0x2000dd10

08004e38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3e:	f107 0314 	add.w	r3, r7, #20
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	609a      	str	r2, [r3, #8]
 8004e4a:	60da      	str	r2, [r3, #12]
 8004e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	4b51      	ldr	r3, [pc, #324]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	4a50      	ldr	r2, [pc, #320]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5e:	4b4e      	ldr	r3, [pc, #312]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b4a      	ldr	r3, [pc, #296]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	4a49      	ldr	r2, [pc, #292]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	4b43      	ldr	r3, [pc, #268]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a42      	ldr	r2, [pc, #264]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e90:	f043 0310 	orr.w	r3, r3, #16
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b40      	ldr	r3, [pc, #256]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0310 	and.w	r3, r3, #16
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	4b3c      	ldr	r3, [pc, #240]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	4a3b      	ldr	r2, [pc, #236]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004eac:	f043 0302 	orr.w	r3, r3, #2
 8004eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	4a34      	ldr	r2, [pc, #208]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004ec8:	f043 0308 	orr.w	r3, r3, #8
 8004ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ece:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <MX_GPIO_Init+0x160>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8004eda:	2200      	movs	r2, #0
 8004edc:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8004ee0:	482e      	ldr	r0, [pc, #184]	; (8004f9c <MX_GPIO_Init+0x164>)
 8004ee2:	f007 f9b3 	bl	800c24c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f641 0148 	movw	r1, #6216	; 0x1848
 8004eec:	482c      	ldr	r0, [pc, #176]	; (8004fa0 <MX_GPIO_Init+0x168>)
 8004eee:	f007 f9ad 	bl	800c24c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ef8:	482a      	ldr	r0, [pc, #168]	; (8004fa4 <MX_GPIO_Init+0x16c>)
 8004efa:	f007 f9a7 	bl	800c24c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8004efe:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8004f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f04:	2301      	movs	r3, #1
 8004f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	4619      	mov	r1, r3
 8004f16:	4821      	ldr	r0, [pc, #132]	; (8004f9c <MX_GPIO_Init+0x164>)
 8004f18:	f006 fffe 	bl	800bf18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8004f1c:	f640 0348 	movw	r3, #2120	; 0x848
 8004f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	4619      	mov	r1, r3
 8004f34:	481a      	ldr	r0, [pc, #104]	; (8004fa0 <MX_GPIO_Init+0x168>)
 8004f36:	f006 ffef 	bl	800bf18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8004f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f40:	2301      	movs	r3, #1
 8004f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	4619      	mov	r1, r3
 8004f52:	4813      	ldr	r0, [pc, #76]	; (8004fa0 <MX_GPIO_Init+0x168>)
 8004f54:	f006 ffe0 	bl	800bf18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8004f58:	f242 0304 	movw	r3, #8196	; 0x2004
 8004f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	480c      	ldr	r0, [pc, #48]	; (8004fa0 <MX_GPIO_Init+0x168>)
 8004f6e:	f006 ffd3 	bl	800bf18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8004f72:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f80:	2300      	movs	r3, #0
 8004f82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4806      	ldr	r0, [pc, #24]	; (8004fa4 <MX_GPIO_Init+0x16c>)
 8004f8c:	f006 ffc4 	bl	800bf18 <HAL_GPIO_Init>

}
 8004f90:	bf00      	nop
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40020400 	.word	0x40020400
 8004fa0:	40020c00 	.word	0x40020c00
 8004fa4:	40020000 	.word	0x40020000

08004fa8 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8004fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004faa:	b08b      	sub	sp, #44	; 0x2c
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8004fba:	eef0 0a67 	vmov.f32	s1, s15
 8004fbe:	f014 fccb 	bl	8019958 <cos>
 8004fc2:	ec51 0b10 	vmov	r0, r1, d0
 8004fc6:	a38e      	add	r3, pc, #568	; (adr r3, 8005200 <kinematicForward+0x258>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fb14 	bl	80005f8 <__aeabi_dmul>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	461d      	mov	r5, r3
 8004fd6:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	f7fb f950 	bl	800028c <__adddf3>
 8004fec:	4603      	mov	r3, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	ec44 3b17 	vmov	d7, r3, r4
 8004ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ff8:	eef0 0a67 	vmov.f32	s1, s15
 8004ffc:	f014 fcac 	bl	8019958 <cos>
 8005000:	ec51 0b10 	vmov	r0, r1, d0
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	4b83      	ldr	r3, [pc, #524]	; (8005218 <kinematicForward+0x270>)
 800500a:	f7fb faf5 	bl	80005f8 <__aeabi_dmul>
 800500e:	4603      	mov	r3, r0
 8005010:	460c      	mov	r4, r1
 8005012:	461a      	mov	r2, r3
 8005014:	4623      	mov	r3, r4
 8005016:	4628      	mov	r0, r5
 8005018:	4631      	mov	r1, r6
 800501a:	f7fb f937 	bl	800028c <__adddf3>
 800501e:	4603      	mov	r3, r0
 8005020:	460c      	mov	r4, r1
 8005022:	461d      	mov	r5, r3
 8005024:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005032:	461a      	mov	r2, r3
 8005034:	4623      	mov	r3, r4
 8005036:	f7fb f929 	bl	800028c <__adddf3>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	4618      	mov	r0, r3
 8005040:	4621      	mov	r1, r4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005048:	461a      	mov	r2, r3
 800504a:	4623      	mov	r3, r4
 800504c:	f7fb f91c 	bl	8000288 <__aeabi_dsub>
 8005050:	4603      	mov	r3, r0
 8005052:	460c      	mov	r4, r1
 8005054:	ec44 3b17 	vmov	d7, r3, r4
 8005058:	eeb0 0a47 	vmov.f32	s0, s14
 800505c:	eef0 0a67 	vmov.f32	s1, s15
 8005060:	f014 fc7a 	bl	8019958 <cos>
 8005064:	ec51 0b10 	vmov	r0, r1, d0
 8005068:	a363      	add	r3, pc, #396	; (adr r3, 80051f8 <kinematicForward+0x250>)
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f7fb fac3 	bl	80005f8 <__aeabi_dmul>
 8005072:	4603      	mov	r3, r0
 8005074:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8005076:	461a      	mov	r2, r3
 8005078:	4623      	mov	r3, r4
 800507a:	4628      	mov	r0, r5
 800507c:	4631      	mov	r1, r6
 800507e:	f7fb f905 	bl	800028c <__adddf3>
 8005082:	4603      	mov	r3, r0
 8005084:	460c      	mov	r4, r1
 8005086:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005090:	eeb0 0a47 	vmov.f32	s0, s14
 8005094:	eef0 0a67 	vmov.f32	s1, s15
 8005098:	f014 fcee 	bl	8019a78 <sin>
 800509c:	ec51 0b10 	vmov	r0, r1, d0
 80050a0:	a357      	add	r3, pc, #348	; (adr r3, 8005200 <kinematicForward+0x258>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb faa7 	bl	80005f8 <__aeabi_dmul>
 80050aa:	4603      	mov	r3, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	461d      	mov	r5, r3
 80050b0:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80050be:	461a      	mov	r2, r3
 80050c0:	4623      	mov	r3, r4
 80050c2:	f7fb f8e3 	bl	800028c <__adddf3>
 80050c6:	4603      	mov	r3, r0
 80050c8:	460c      	mov	r4, r1
 80050ca:	ec44 3b17 	vmov	d7, r3, r4
 80050ce:	eeb0 0a47 	vmov.f32	s0, s14
 80050d2:	eef0 0a67 	vmov.f32	s1, s15
 80050d6:	f014 fccf 	bl	8019a78 <sin>
 80050da:	ec51 0b10 	vmov	r0, r1, d0
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	4b4d      	ldr	r3, [pc, #308]	; (8005218 <kinematicForward+0x270>)
 80050e4:	f7fb fa88 	bl	80005f8 <__aeabi_dmul>
 80050e8:	4603      	mov	r3, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	461a      	mov	r2, r3
 80050ee:	4623      	mov	r3, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	4631      	mov	r1, r6
 80050f4:	f7fb f8ca 	bl	800028c <__adddf3>
 80050f8:	4603      	mov	r3, r0
 80050fa:	460c      	mov	r4, r1
 80050fc:	461d      	mov	r5, r3
 80050fe:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800510c:	461a      	mov	r2, r3
 800510e:	4623      	mov	r3, r4
 8005110:	f7fb f8bc 	bl	800028c <__adddf3>
 8005114:	4603      	mov	r3, r0
 8005116:	460c      	mov	r4, r1
 8005118:	4618      	mov	r0, r3
 800511a:	4621      	mov	r1, r4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005122:	461a      	mov	r2, r3
 8005124:	4623      	mov	r3, r4
 8005126:	f7fb f8af 	bl	8000288 <__aeabi_dsub>
 800512a:	4603      	mov	r3, r0
 800512c:	460c      	mov	r4, r1
 800512e:	ec44 3b17 	vmov	d7, r3, r4
 8005132:	eeb0 0a47 	vmov.f32	s0, s14
 8005136:	eef0 0a67 	vmov.f32	s1, s15
 800513a:	f014 fc9d 	bl	8019a78 <sin>
 800513e:	ec51 0b10 	vmov	r0, r1, d0
 8005142:	a32d      	add	r3, pc, #180	; (adr r3, 80051f8 <kinematicForward+0x250>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb fa56 	bl	80005f8 <__aeabi_dmul>
 800514c:	4603      	mov	r3, r0
 800514e:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8005150:	461a      	mov	r2, r3
 8005152:	4623      	mov	r3, r4
 8005154:	4628      	mov	r0, r5
 8005156:	4631      	mov	r1, r6
 8005158:	f7fb f898 	bl	800028c <__adddf3>
 800515c:	4603      	mov	r3, r0
 800515e:	460c      	mov	r4, r1
 8005160:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800516a:	461a      	mov	r2, r3
 800516c:	4623      	mov	r3, r4
 800516e:	a126      	add	r1, pc, #152	; (adr r1, 8005208 <kinematicForward+0x260>)
 8005170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005174:	f7fb f888 	bl	8000288 <__aeabi_dsub>
 8005178:	4603      	mov	r3, r0
 800517a:	460c      	mov	r4, r1
 800517c:	4618      	mov	r0, r3
 800517e:	4621      	mov	r1, r4
 8005180:	a323      	add	r3, pc, #140	; (adr r3, 8005210 <kinematicForward+0x268>)
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f7fb f87f 	bl	8000288 <__aeabi_dsub>
 800518a:	4603      	mov	r3, r0
 800518c:	460c      	mov	r4, r1
 800518e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800519e:	461a      	mov	r2, r3
 80051a0:	4623      	mov	r3, r4
 80051a2:	f7fb f873 	bl	800028c <__adddf3>
 80051a6:	4603      	mov	r3, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	4618      	mov	r0, r3
 80051ac:	4621      	mov	r1, r4
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80051b4:	461a      	mov	r2, r3
 80051b6:	4623      	mov	r3, r4
 80051b8:	f7fb f866 	bl	8000288 <__aeabi_dsub>
 80051bc:	4603      	mov	r3, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80051ca:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80051d4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051de:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80051e8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 80051ec:	2301      	movs	r3, #1
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	372c      	adds	r7, #44	; 0x2c
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	80000000 	.word	0x80000000
 80051fc:	40402e14 	.word	0x40402e14
 8005200:	00000000 	.word	0x00000000
 8005204:	4068a000 	.word	0x4068a000
 8005208:	00000000 	.word	0x00000000
 800520c:	406a6000 	.word	0x406a6000
 8005210:	e0000000 	.word	0xe0000000
 8005214:	40536b22 	.word	0x40536b22
 8005218:	40640000 	.word	0x40640000
 800521c:	00000000 	.word	0x00000000

08005220 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005220:	b082      	sub	sp, #8
 8005222:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005226:	b0a0      	sub	sp, #128	; 0x80
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8005230:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800523a:	a1f2      	add	r1, pc, #968	; (adr r1, 8005604 <kinematicInverse+0x3e4>)
 800523c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005240:	f7fb f822 	bl	8000288 <__aeabi_dsub>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005258:	eeb0 0a47 	vmov.f32	s0, s14
 800525c:	eef0 0a67 	vmov.f32	s1, s15
 8005260:	f014 fb7a 	bl	8019958 <cos>
 8005264:	ec51 0b10 	vmov	r0, r1, d0
 8005268:	a3e8      	add	r3, pc, #928	; (adr r3, 800560c <kinematicInverse+0x3ec>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f7fb f9c3 	bl	80005f8 <__aeabi_dmul>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4650      	mov	r0, sl
 8005278:	4659      	mov	r1, fp
 800527a:	f7fb f805 	bl	8000288 <__aeabi_dsub>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005292:	eeb0 0a47 	vmov.f32	s0, s14
 8005296:	eef0 0a67 	vmov.f32	s1, s15
 800529a:	f014 fbed 	bl	8019a78 <sin>
 800529e:	ec51 0b10 	vmov	r0, r1, d0
 80052a2:	a3da      	add	r3, pc, #872	; (adr r3, 800560c <kinematicInverse+0x3ec>)
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f7fb f9a6 	bl	80005f8 <__aeabi_dmul>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4650      	mov	r0, sl
 80052b2:	4659      	mov	r1, fp
 80052b4:	f7fa ffe8 	bl	8000288 <__aeabi_dsub>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80052c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052c8:	f7fb f996 	bl	80005f8 <__aeabi_dmul>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4692      	mov	sl, r2
 80052d2:	469b      	mov	fp, r3
 80052d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052d8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052dc:	f7fb f98c 	bl	80005f8 <__aeabi_dmul>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4650      	mov	r0, sl
 80052e6:	4659      	mov	r1, fp
 80052e8:	f7fa ffd0 	bl	800028c <__adddf3>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	a3c7      	add	r3, pc, #796	; (adr r3, 8005614 <kinematicInverse+0x3f4>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fa ffc5 	bl	8000288 <__aeabi_dsub>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	4bbb      	ldr	r3, [pc, #748]	; (80055f8 <kinematicInverse+0x3d8>)
 800530c:	f7fa ffbc 	bl	8000288 <__aeabi_dsub>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	a3b3      	add	r3, pc, #716	; (adr r3, 80055e8 <kinematicInverse+0x3c8>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fb fa95 	bl	800084c <__aeabi_ddiv>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800532a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800532e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005332:	f7fb f961 	bl	80005f8 <__aeabi_dmul>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	f04f 0000 	mov.w	r0, #0
 800533e:	49af      	ldr	r1, [pc, #700]	; (80055fc <kinematicInverse+0x3dc>)
 8005340:	f7fa ffa2 	bl	8000288 <__aeabi_dsub>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005358:	f7fb fbc0 	bl	8000adc <__aeabi_dcmplt>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <kinematicInverse+0x146>
		return FALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	e136      	b.n	80055d4 <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8005366:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800536a:	f014 fc0f 	bl	8019b8c <sqrt>
 800536e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8005372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
 8005376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 800537e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8005382:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8005386:	f014 fbff 	bl	8019b88 <atan2>
 800538a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 800538e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8005392:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005396:	f014 fbf7 	bl	8019b88 <atan2>
 800539a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 800539e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80053a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053a6:	f7fa ff6f 	bl	8000288 <__aeabi_dsub>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4614      	mov	r4, r2
 80053b0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80053b4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80053b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053bc:	f7fa ff64 	bl	8000288 <__aeabi_dsub>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4690      	mov	r8, r2
 80053c6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80053ca:	4642      	mov	r2, r8
 80053cc:	464b      	mov	r3, r9
 80053ce:	4620      	mov	r0, r4
 80053d0:	4629      	mov	r1, r5
 80053d2:	f7fb fb8d 	bl	8000af0 <__aeabi_dcmple>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 80053dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80053e0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80053e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80053e8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80053ec:	e007      	b.n	80053fe <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 80053ee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80053f2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 80053f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80053fa:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	4b7f      	ldr	r3, [pc, #508]	; (8005600 <kinematicInverse+0x3e0>)
 8005404:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005408:	f7fb f8f6 	bl	80005f8 <__aeabi_dmul>
 800540c:	4603      	mov	r3, r0
 800540e:	460c      	mov	r4, r1
 8005410:	4618      	mov	r0, r3
 8005412:	4621      	mov	r1, r4
 8005414:	a376      	add	r3, pc, #472	; (adr r3, 80055f0 <kinematicInverse+0x3d0>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fa ff37 	bl	800028c <__adddf3>
 800541e:	4603      	mov	r3, r0
 8005420:	460c      	mov	r4, r1
 8005422:	4618      	mov	r0, r3
 8005424:	4621      	mov	r1, r4
 8005426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800542a:	f7fb f8e5 	bl	80005f8 <__aeabi_dmul>
 800542e:	4603      	mov	r3, r0
 8005430:	460c      	mov	r4, r1
 8005432:	4625      	mov	r5, r4
 8005434:	461c      	mov	r4, r3
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	4b71      	ldr	r3, [pc, #452]	; (8005600 <kinematicInverse+0x3e0>)
 800543c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005440:	f7fb f8da 	bl	80005f8 <__aeabi_dmul>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4610      	mov	r0, r2
 800544a:	4619      	mov	r1, r3
 800544c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005450:	f7fb f8d2 	bl	80005f8 <__aeabi_dmul>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4620      	mov	r0, r4
 800545a:	4629      	mov	r1, r5
 800545c:	f7fa ff14 	bl	8000288 <__aeabi_dsub>
 8005460:	4603      	mov	r3, r0
 8005462:	460c      	mov	r4, r1
 8005464:	4625      	mov	r5, r4
 8005466:	461c      	mov	r4, r3
 8005468:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800546c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005470:	f7fb f8c2 	bl	80005f8 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4690      	mov	r8, r2
 800547a:	4699      	mov	r9, r3
 800547c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005480:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005484:	f7fb f8b8 	bl	80005f8 <__aeabi_dmul>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fa fefc 	bl	800028c <__adddf3>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4620      	mov	r0, r4
 800549a:	4629      	mov	r1, r5
 800549c:	f7fb f9d6 	bl	800084c <__aeabi_ddiv>
 80054a0:	4603      	mov	r3, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	4b54      	ldr	r3, [pc, #336]	; (8005600 <kinematicInverse+0x3e0>)
 80054ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054b2:	f7fb f8a1 	bl	80005f8 <__aeabi_dmul>
 80054b6:	4603      	mov	r3, r0
 80054b8:	460c      	mov	r4, r1
 80054ba:	4618      	mov	r0, r3
 80054bc:	4621      	mov	r1, r4
 80054be:	a34c      	add	r3, pc, #304	; (adr r3, 80055f0 <kinematicInverse+0x3d0>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fa fee2 	bl	800028c <__adddf3>
 80054c8:	4603      	mov	r3, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	4618      	mov	r0, r3
 80054ce:	4621      	mov	r1, r4
 80054d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80054d4:	f7fb f890 	bl	80005f8 <__aeabi_dmul>
 80054d8:	4603      	mov	r3, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	4625      	mov	r5, r4
 80054de:	461c      	mov	r4, r3
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	4b46      	ldr	r3, [pc, #280]	; (8005600 <kinematicInverse+0x3e0>)
 80054e6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80054ea:	f7fb f885 	bl	80005f8 <__aeabi_dmul>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054fa:	f7fb f87d 	bl	80005f8 <__aeabi_dmul>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f7fa fec1 	bl	800028c <__adddf3>
 800550a:	4603      	mov	r3, r0
 800550c:	460c      	mov	r4, r1
 800550e:	4625      	mov	r5, r4
 8005510:	461c      	mov	r4, r3
 8005512:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005516:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800551a:	f7fb f86d 	bl	80005f8 <__aeabi_dmul>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4690      	mov	r8, r2
 8005524:	4699      	mov	r9, r3
 8005526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800552a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800552e:	f7fb f863 	bl	80005f8 <__aeabi_dmul>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4640      	mov	r0, r8
 8005538:	4649      	mov	r1, r9
 800553a:	f7fa fea7 	bl	800028c <__adddf3>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fb f981 	bl	800084c <__aeabi_ddiv>
 800554a:	4603      	mov	r3, r0
 800554c:	460c      	mov	r4, r1
 800554e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8005552:	ed97 1b06 	vldr	d1, [r7, #24]
 8005556:	ed97 0b08 	vldr	d0, [r7, #32]
 800555a:	f014 fb15 	bl	8019b88 <atan2>
 800555e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8005562:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005566:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800556a:	f7fa fe8f 	bl	800028c <__adddf3>
 800556e:	4603      	mov	r3, r0
 8005570:	460c      	mov	r4, r1
 8005572:	4618      	mov	r0, r3
 8005574:	4621      	mov	r1, r4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800557c:	461a      	mov	r2, r3
 800557e:	4623      	mov	r3, r4
 8005580:	f7fa fe82 	bl	8000288 <__aeabi_dsub>
 8005584:	4603      	mov	r3, r0
 8005586:	460c      	mov	r4, r1
 8005588:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 800558c:	ed97 3b02 	vldr	d3, [r7, #8]
 8005590:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8005594:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8005598:	ed97 0b04 	vldr	d0, [r7, #16]
 800559c:	f004 ff44 	bl	800a428 <scaraCheckWorkSpace4>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 80055a6:	2300      	movs	r3, #0
 80055a8:	e014      	b.n	80055d4 <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80055b0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80055ba:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80055c4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80055ce:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 80055d2:	2301      	movs	r3, #1
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3780      	adds	r7, #128	; 0x80
 80055d8:	46bd      	mov	sp, r7
 80055da:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055de:	b002      	add	sp, #8
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	f3af 8000 	nop.w
 80055e8:	00000000 	.word	0x00000000
 80055ec:	40eec800 	.word	0x40eec800
 80055f0:	00000000 	.word	0x00000000
 80055f4:	4068a000 	.word	0x4068a000
 80055f8:	40d90000 	.word	0x40d90000
 80055fc:	3ff00000 	.word	0x3ff00000
 8005600:	40640000 	.word	0x40640000
 8005604:	80000000 	.word	0x80000000
 8005608:	4060aa6e 	.word	0x4060aa6e
 800560c:	80000000 	.word	0x80000000
 8005610:	40402e14 	.word	0x40402e14
 8005614:	00000000 	.word	0x00000000
 8005618:	40e2f320 	.word	0x40e2f320

0800561c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005620:	f005 ff96 	bl	800b550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005624:	f000 f812 	bl	800564c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005628:	f7ff fc06 	bl	8004e38 <MX_GPIO_Init>
  MX_DMA_Init();
 800562c:	f7fc ff7e 	bl	800252c <MX_DMA_Init>
  MX_UART4_Init();
 8005630:	f005 fe90 	bl	800b354 <MX_UART4_Init>
  MX_FSMC_Init();
 8005634:	f7fe ff90 	bl	8004558 <MX_FSMC_Init>
  MX_TIM7_Init();
 8005638:	f005 fe1a 	bl	800b270 <MX_TIM7_Init>
  MX_TIM2_Init();
 800563c:	f005 fdca 	bl	800b1d4 <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005640:	f7fc ffae 	bl	80025a0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8005644:	f00c ffe5 	bl	8012612 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8005648:	e7fe      	b.n	8005648 <main+0x2c>
	...

0800564c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b094      	sub	sp, #80	; 0x50
 8005650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005652:	f107 0320 	add.w	r3, r7, #32
 8005656:	2230      	movs	r2, #48	; 0x30
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f010 fbb2 	bl	8015dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	609a      	str	r2, [r3, #8]
 800566c:	60da      	str	r2, [r3, #12]
 800566e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005670:	2300      	movs	r3, #0
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	4b28      	ldr	r3, [pc, #160]	; (8005718 <SystemClock_Config+0xcc>)
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	4a27      	ldr	r2, [pc, #156]	; (8005718 <SystemClock_Config+0xcc>)
 800567a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567e:	6413      	str	r3, [r2, #64]	; 0x40
 8005680:	4b25      	ldr	r3, [pc, #148]	; (8005718 <SystemClock_Config+0xcc>)
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800568c:	2300      	movs	r3, #0
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	4b22      	ldr	r3, [pc, #136]	; (800571c <SystemClock_Config+0xd0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a21      	ldr	r2, [pc, #132]	; (800571c <SystemClock_Config+0xd0>)
 8005696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	4b1f      	ldr	r3, [pc, #124]	; (800571c <SystemClock_Config+0xd0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056b2:	2302      	movs	r3, #2
 80056b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80056b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80056bc:	2308      	movs	r3, #8
 80056be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80056c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80056c6:	2302      	movs	r3, #2
 80056c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80056ca:	2307      	movs	r3, #7
 80056cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056ce:	f107 0320 	add.w	r3, r7, #32
 80056d2:	4618      	mov	r0, r3
 80056d4:	f007 ffae 	bl	800d634 <HAL_RCC_OscConfig>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80056de:	f000 f831 	bl	8005744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056e2:	230f      	movs	r3, #15
 80056e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056e6:	2302      	movs	r3, #2
 80056e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80056ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80056fa:	f107 030c 	add.w	r3, r7, #12
 80056fe:	2105      	movs	r1, #5
 8005700:	4618      	mov	r0, r3
 8005702:	f008 fa07 	bl	800db14 <HAL_RCC_ClockConfig>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800570c:	f000 f81a 	bl	8005744 <Error_Handler>
  }
}
 8005710:	bf00      	nop
 8005712:	3750      	adds	r7, #80	; 0x50
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40023800 	.word	0x40023800
 800571c:	40007000 	.word	0x40007000

08005720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a04      	ldr	r2, [pc, #16]	; (8005740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005732:	f005 ff2f 	bl	800b594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40001000 	.word	0x40001000

08005744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005764:	3308      	adds	r3, #8
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <ringBuff_PushChar+0x1e>
		return FALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	e02e      	b.n	80057ce <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	78f9      	ldrb	r1, [r7, #3]
 800577c:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3301      	adds	r3, #1
 8005788:	425a      	negs	r2, r3
 800578a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005792:	bf58      	it	pl
 8005794:	4253      	negpl	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800579c:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ac:	3304      	adds	r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d105      	bne.n	80057c0 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ba:	3308      	adds	r3, #8
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c6:	3309      	adds	r3, #9
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
			return TRUE;
 80057cc:	2301      	movs	r3, #1
	}
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ea:	3309      	adds	r3, #9
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <ringBuff_PopChar+0x1c>
		return FALSE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e032      	b.n	800585c <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fc:	3304      	adds	r3, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	5cd2      	ldrb	r2, [r2, r3]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800580e:	3304      	adds	r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3301      	adds	r3, #1
 8005814:	4259      	negs	r1, r3
 8005816:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800581a:	f3c1 030b 	ubfx	r3, r1, #0, #12
 800581e:	bf58      	it	pl
 8005820:	425a      	negpl	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005828:	3304      	adds	r3, #4
 800582a:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583a:	3304      	adds	r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d105      	bne.n	800584e <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005848:	3309      	adds	r3, #9
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005854:	3308      	adds	r3, #8
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
			return TRUE;
 800585a:	2301      	movs	r3, #1
	}
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005874:	2300      	movs	r3, #0
 8005876:	82fb      	strh	r3, [r7, #22]
 8005878:	e011      	b.n	800589e <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 800587a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4413      	add	r3, r2
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	4619      	mov	r1, r3
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff ff63 	bl	8005752 <ringBuff_PushChar>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8005892:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005896:	b29b      	uxth	r3, r3
 8005898:	3301      	adds	r3, #1
 800589a:	b29b      	uxth	r3, r3
 800589c:	82fb      	strh	r3, [r7, #22]
 800589e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	dce8      	bgt.n	800587a <ringBuff_PushArray+0x12>
 80058a8:	e000      	b.n	80058ac <ringBuff_PushArray+0x44>
			break;
 80058aa:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 80058ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e00c      	b.n	80058e4 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	4413      	add	r3, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff ff81 	bl	80057da <ringBuff_PopChar>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	3301      	adds	r3, #1
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	dbee      	blt.n	80058ca <ringBuff_PopArray+0x12>
 80058ec:	e000      	b.n	80058f0 <ringBuff_PopArray+0x38>
			break;
 80058ee:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80058f0:	697b      	ldr	r3, [r7, #20]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b088      	sub	sp, #32
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590a:	3304      	adds	r3, #4
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8005922:	6838      	ldr	r0, [r7, #0]
 8005924:	f7fa fc54 	bl	80001d0 <strlen>
 8005928:	4603      	mov	r3, r0
 800592a:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005932:	3308      	adds	r3, #8
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d066      	beq.n	8005a08 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e030      	b.n	80059a2 <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	440b      	add	r3, r1
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d103      	bne.n	800595c <ringBuff_DistanceOf+0x62>
	                sync_state++;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3301      	adds	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e00c      	b.n	8005976 <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d102      	bne.n	8005972 <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e001      	b.n	8005976 <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	d101      	bne.n	8005982 <ringBuff_DistanceOf+0x88>
	                return distance;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	e048      	b.n	8005a14 <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	3301      	adds	r3, #1
 8005986:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	425a      	negs	r2, r3
 8005994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005998:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800599c:	bf58      	it	pl
 800599e:	4253      	negpl	r3, r2
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a8:	dbca      	blt.n	8005940 <ringBuff_DistanceOf+0x46>
 80059aa:	e031      	b.n	8005a10 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	781a      	ldrb	r2, [r3, #0]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	440b      	add	r3, r1
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d103      	bne.n	80059c8 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	3301      	adds	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e00c      	b.n	80059e2 <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	781a      	ldrb	r2, [r3, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d102      	bne.n	80059de <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e001      	b.n	80059e2 <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d101      	bne.n	80059ee <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	e012      	b.n	8005a14 <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	3301      	adds	r3, #1
 80059f8:	425a      	negs	r2, r3
 80059fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005a02:	bf58      	it	pl
 8005a04:	4253      	negpl	r3, r2
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d1cd      	bne.n	80059ac <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005a20:	f000 fdfe 	bl	8006620 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8005a24:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <lowlayer_scanReset+0x4c>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005a2a:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <lowlayer_scanReset+0x4c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005a30:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <lowlayer_scanReset+0x4c>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <lowlayer_scanReset+0x4c>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <lowlayer_scanReset+0x50>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <lowlayer_scanReset+0x50>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8005a48:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <lowlayer_scanReset+0x50>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <lowlayer_scanReset+0x54>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8005a54:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <lowlayer_scanReset+0x58>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2108      	movs	r1, #8
 8005a5e:	4806      	ldr	r0, [pc, #24]	; (8005a78 <lowlayer_scanReset+0x5c>)
 8005a60:	f006 fbf4 	bl	800c24c <HAL_GPIO_WritePin>
}
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	2000de88 	.word	0x2000de88
 8005a6c:	2000de9c 	.word	0x2000de9c
 8005a70:	2000de98 	.word	0x2000de98
 8005a74:	2000deb8 	.word	0x2000deb8
 8005a78:	40020c00 	.word	0x40020c00
 8005a7c:	00000000 	.word	0x00000000

08005a80 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005a86:	2300      	movs	r3, #0
 8005a88:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005a8a:	f000 fe87 	bl	800679c <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005a8e:	4b98      	ldr	r3, [pc, #608]	; (8005cf0 <lowlayer_scanFlow+0x270>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d837      	bhi.n	8005b06 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8005a96:	4b96      	ldr	r3, [pc, #600]	; (8005cf0 <lowlayer_scanFlow+0x270>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f1c3 0303 	rsb	r3, r3, #3
 8005a9e:	4a95      	ldr	r2, [pc, #596]	; (8005cf4 <lowlayer_scanFlow+0x274>)
 8005aa0:	5cd3      	ldrb	r3, [r2, r3]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d121      	bne.n	8005aea <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8005aa6:	4b92      	ldr	r3, [pc, #584]	; (8005cf0 <lowlayer_scanFlow+0x270>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f1c3 0203 	rsb	r2, r3, #3
 8005aae:	4b90      	ldr	r3, [pc, #576]	; (8005cf0 <lowlayer_scanFlow+0x270>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	f1c3 0303 	rsb	r3, r3, #3
 8005ab6:	4990      	ldr	r1, [pc, #576]	; (8005cf8 <lowlayer_scanFlow+0x278>)
 8005ab8:	568a      	ldrsb	r2, [r1, r2]
 8005aba:	f107 0108 	add.w	r1, r7, #8
 8005abe:	440b      	add	r3, r1
 8005ac0:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8005ac4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	425b      	negs	r3, r3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	b258      	sxtb	r0, r3
 8005ad0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005ad4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	425b      	negs	r3, r3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	b25a      	sxtb	r2, r3
 8005ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae4:	f000 fcd8 	bl	8006498 <lowlayer_writePulse>
 8005ae8:	e00b      	b.n	8005b02 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8005aea:	4b81      	ldr	r3, [pc, #516]	; (8005cf0 <lowlayer_scanFlow+0x270>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	4b7f      	ldr	r3, [pc, #508]	; (8005cf0 <lowlayer_scanFlow+0x270>)
 8005af4:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8005af6:	2300      	movs	r3, #0
 8005af8:	2200      	movs	r2, #0
 8005afa:	2100      	movs	r1, #0
 8005afc:	2000      	movs	r0, #0
 8005afe:	f000 fccb 	bl	8006498 <lowlayer_writePulse>
		}

		return FALSE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e0d8      	b.n	8005cb8 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8005b06:	2201      	movs	r2, #1
 8005b08:	2108      	movs	r1, #8
 8005b0a:	487c      	ldr	r0, [pc, #496]	; (8005cfc <lowlayer_scanFlow+0x27c>)
 8005b0c:	f006 fb9e 	bl	800c24c <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8005b10:	f000 fe28 	bl	8006764 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8005b14:	2300      	movs	r3, #0
 8005b16:	2200      	movs	r2, #0
 8005b18:	2100      	movs	r1, #0
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f000 fcbc 	bl	8006498 <lowlayer_writePulse>
		scan_flag = 1;
 8005b20:	4b77      	ldr	r3, [pc, #476]	; (8005d00 <lowlayer_scanFlow+0x280>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8005b26:	4b77      	ldr	r3, [pc, #476]	; (8005d04 <lowlayer_scanFlow+0x284>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a77      	ldr	r2, [pc, #476]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005b2c:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8005b2e:	4b75      	ldr	r3, [pc, #468]	; (8005d04 <lowlayer_scanFlow+0x284>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4a75      	ldr	r2, [pc, #468]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005b34:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8005b36:	4b73      	ldr	r3, [pc, #460]	; (8005d04 <lowlayer_scanFlow+0x284>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4a73      	ldr	r2, [pc, #460]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005b3c:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8005b3e:	4b73      	ldr	r3, [pc, #460]	; (8005d0c <lowlayer_scanFlow+0x28c>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	4a73      	ldr	r2, [pc, #460]	; (8005d10 <lowlayer_scanFlow+0x290>)
 8005b44:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8005b46:	4b70      	ldr	r3, [pc, #448]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4871      	ldr	r0, [pc, #452]	; (8005d14 <lowlayer_scanFlow+0x294>)
 8005b50:	f7fc fc34 	bl	80023bc <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8005b54:	4b6c      	ldr	r3, [pc, #432]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	486e      	ldr	r0, [pc, #440]	; (8005d18 <lowlayer_scanFlow+0x298>)
 8005b5e:	f7fc fc2d 	bl	80023bc <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8005b62:	4b69      	ldr	r3, [pc, #420]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	4619      	mov	r1, r3
 8005b6a:	486c      	ldr	r0, [pc, #432]	; (8005d1c <lowlayer_scanFlow+0x29c>)
 8005b6c:	f7fc fc26 	bl	80023bc <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8005b70:	4b67      	ldr	r3, [pc, #412]	; (8005d10 <lowlayer_scanFlow+0x290>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	4869      	ldr	r0, [pc, #420]	; (8005d20 <lowlayer_scanFlow+0x2a0>)
 8005b7a:	f7fc fc1f 	bl	80023bc <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8005b7e:	4b62      	ldr	r3, [pc, #392]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b8a:	ee17 0a90 	vmov	r0, s15
 8005b8e:	f7fa fcdb 	bl	8000548 <__aeabi_f2d>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	f7fa fb79 	bl	800028c <__adddf3>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	a347      	add	r3, pc, #284	; (adr r3, 8005cc0 <lowlayer_scanFlow+0x240>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f7fa fd26 	bl	80005f8 <__aeabi_dmul>
 8005bac:	4603      	mov	r3, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	a344      	add	r3, pc, #272	; (adr r3, 8005cc8 <lowlayer_scanFlow+0x248>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f7fa fe47 	bl	800084c <__aeabi_ddiv>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	a142      	add	r1, pc, #264	; (adr r1, 8005cd0 <lowlayer_scanFlow+0x250>)
 8005bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bcc:	f7fa fb5c 	bl	8000288 <__aeabi_dsub>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8005bd4:	4a53      	ldr	r2, [pc, #332]	; (8005d24 <lowlayer_scanFlow+0x2a4>)
 8005bd6:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8005bda:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be6:	ee17 0a90 	vmov	r0, s15
 8005bea:	f7fa fcad 	bl	8000548 <__aeabi_f2d>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	f7fa fb4b 	bl	800028c <__adddf3>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	a330      	add	r3, pc, #192	; (adr r3, 8005cc0 <lowlayer_scanFlow+0x240>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f7fa fcf8 	bl	80005f8 <__aeabi_dmul>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	4621      	mov	r1, r4
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	4b44      	ldr	r3, [pc, #272]	; (8005d28 <lowlayer_scanFlow+0x2a8>)
 8005c16:	f7fa fe19 	bl	800084c <__aeabi_ddiv>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4623      	mov	r3, r4
 8005c22:	a12d      	add	r1, pc, #180	; (adr r1, 8005cd8 <lowlayer_scanFlow+0x258>)
 8005c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c28:	f7fa fb2e 	bl	8000288 <__aeabi_dsub>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8005c30:	4a3c      	ldr	r2, [pc, #240]	; (8005d24 <lowlayer_scanFlow+0x2a4>)
 8005c32:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8005c36:	4b34      	ldr	r3, [pc, #208]	; (8005d08 <lowlayer_scanFlow+0x288>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c42:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8005d2c <lowlayer_scanFlow+0x2ac>
 8005c46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c4a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005d30 <lowlayer_scanFlow+0x2b0>
 8005c4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c52:	ee17 0a90 	vmov	r0, s15
 8005c56:	f7fa fc77 	bl	8000548 <__aeabi_f2d>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8005c5e:	4a31      	ldr	r2, [pc, #196]	; (8005d24 <lowlayer_scanFlow+0x2a4>)
 8005c60:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8005c64:	4b2a      	ldr	r3, [pc, #168]	; (8005d10 <lowlayer_scanFlow+0x290>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fa fc5b 	bl	8000524 <__aeabi_i2d>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	f7fa fb0b 	bl	800028c <__adddf3>
 8005c76:	4603      	mov	r3, r0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	a310      	add	r3, pc, #64	; (adr r3, 8005cc0 <lowlayer_scanFlow+0x240>)
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f7fa fcb8 	bl	80005f8 <__aeabi_dmul>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	4621      	mov	r1, r4
 8005c90:	a313      	add	r3, pc, #76	; (adr r3, 8005ce0 <lowlayer_scanFlow+0x260>)
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f7fa fdd9 	bl	800084c <__aeabi_ddiv>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	a111      	add	r1, pc, #68	; (adr r1, 8005ce8 <lowlayer_scanFlow+0x268>)
 8005ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ca8:	f7fa faee 	bl	8000288 <__aeabi_dsub>
 8005cac:	4603      	mov	r3, r0
 8005cae:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8005cb0:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <lowlayer_scanFlow+0x2a4>)
 8005cb2:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8005cb6:	2301      	movs	r3, #1
	}
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd90      	pop	{r4, r7, pc}
 8005cc0:	60000000 	.word	0x60000000
 8005cc4:	400921fb 	.word	0x400921fb
 8005cc8:	00000000 	.word	0x00000000
 8005ccc:	40f38800 	.word	0x40f38800
 8005cd0:	40000000 	.word	0x40000000
 8005cd4:	bff9f17a 	.word	0xbff9f17a
 8005cd8:	80000000 	.word	0x80000000
 8005cdc:	40039716 	.word	0x40039716
 8005ce0:	a0000000 	.word	0xa0000000
 8005ce4:	40d3bca1 	.word	0x40d3bca1
 8005ce8:	a0000000 	.word	0xa0000000
 8005cec:	4008330d 	.word	0x4008330d
 8005cf0:	2000deb8 	.word	0x2000deb8
 8005cf4:	2000dea8 	.word	0x2000dea8
 8005cf8:	0801b524 	.word	0x0801b524
 8005cfc:	40020c00 	.word	0x40020c00
 8005d00:	2000de98 	.word	0x2000de98
 8005d04:	2000deac 	.word	0x2000deac
 8005d08:	2000dee0 	.word	0x2000dee0
 8005d0c:	2000de88 	.word	0x2000de88
 8005d10:	2000debc 	.word	0x2000debc
 8005d14:	0801b44c 	.word	0x0801b44c
 8005d18:	0801b460 	.word	0x0801b460
 8005d1c:	0801b474 	.word	0x0801b474
 8005d20:	0801b488 	.word	0x0801b488
 8005d24:	2000dec0 	.word	0x2000dec0
 8005d28:	40ff4000 	.word	0x40ff4000
 8005d2c:	4426aaab 	.word	0x4426aaab
 8005d30:	400f1aa0 	.word	0x400f1aa0
 8005d34:	00000000 	.word	0x00000000

08005d38 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005d40:	2300      	movs	r3, #0
 8005d42:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f94d 	bl	8005fe8 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005d54:	a330      	add	r3, pc, #192	; (adr r3, 8005e18 <lowlayer_goToSoftLimit+0xe0>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa febf 	bl	8000adc <__aeabi_dcmplt>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8005d64:	2303      	movs	r3, #3
 8005d66:	723b      	strb	r3, [r7, #8]
		check++;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8005d74:	a32a      	add	r3, pc, #168	; (adr r3, 8005e20 <lowlayer_goToSoftLimit+0xe8>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fecd 	bl	8000b18 <__aeabi_dcmpgt>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d004      	beq.n	8005d8e <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8005d84:	2305      	movs	r3, #5
 8005d86:	727b      	strb	r3, [r7, #9]
		check++;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	f7fa fe9e 	bl	8000adc <__aeabi_dcmplt>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8005da6:	2305      	movs	r3, #5
 8005da8:	72bb      	strb	r3, [r7, #10]
		check++;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	3301      	adds	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8005db6:	a31c      	add	r3, pc, #112	; (adr r3, 8005e28 <lowlayer_goToSoftLimit+0xf0>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa feac 	bl	8000b18 <__aeabi_dcmpgt>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8005dc6:	230a      	movs	r3, #10
 8005dc8:	72fb      	strb	r3, [r7, #11]
		check++;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d013      	beq.n	8005dfe <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8005dd6:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8005dda:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	425b      	negs	r3, r3
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	b259      	sxtb	r1, r3
 8005de6:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8005dea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	425b      	negs	r3, r3
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	f000 fb4f 	bl	8006498 <lowlayer_writePulse>
		return FALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e006      	b.n	8005e0c <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	2200      	movs	r2, #0
 8005e02:	2100      	movs	r1, #0
 8005e04:	2000      	movs	r0, #0
 8005e06:	f000 fb47 	bl	8006498 <lowlayer_writePulse>
		return TRUE;
 8005e0a:	2301      	movs	r3, #1
	}
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	f3af 8000 	nop.w
 8005e18:	daaaaaab 	.word	0xdaaaaaab
 8005e1c:	bff7bc89 	.word	0xbff7bc89
 8005e20:	88000000 	.word	0x88000000
 8005e24:	4002d97c 	.word	0x4002d97c
 8005e28:	daaaaaab 	.word	0xdaaaaaab
 8005e2c:	4007bc89 	.word	0x4007bc89

08005e30 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8005e38:	f000 fc78 	bl	800672c <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8005e3c:	4b62      	ldr	r3, [pc, #392]	; (8005fc8 <lowlayer_readTruePosition+0x198>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4b62      	ldr	r3, [pc, #392]	; (8005fcc <lowlayer_readTruePosition+0x19c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e4e:	ee17 0a90 	vmov	r0, s15
 8005e52:	f7fa fb79 	bl	8000548 <__aeabi_f2d>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	f7fa fa17 	bl	800028c <__adddf3>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	4618      	mov	r0, r3
 8005e64:	4621      	mov	r1, r4
 8005e66:	a34c      	add	r3, pc, #304	; (adr r3, 8005f98 <lowlayer_readTruePosition+0x168>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa fbc4 	bl	80005f8 <__aeabi_dmul>
 8005e70:	4603      	mov	r3, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	4618      	mov	r0, r3
 8005e76:	4621      	mov	r1, r4
 8005e78:	a349      	add	r3, pc, #292	; (adr r3, 8005fa0 <lowlayer_readTruePosition+0x170>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fce5 	bl	800084c <__aeabi_ddiv>
 8005e82:	4603      	mov	r3, r0
 8005e84:	460c      	mov	r4, r1
 8005e86:	4618      	mov	r0, r3
 8005e88:	4621      	mov	r1, r4
 8005e8a:	a347      	add	r3, pc, #284	; (adr r3, 8005fa8 <lowlayer_readTruePosition+0x178>)
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f7fa f9fa 	bl	8000288 <__aeabi_dsub>
 8005e94:	4603      	mov	r3, r0
 8005e96:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8005e9e:	4b4a      	ldr	r3, [pc, #296]	; (8005fc8 <lowlayer_readTruePosition+0x198>)
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	4b4a      	ldr	r3, [pc, #296]	; (8005fcc <lowlayer_readTruePosition+0x19c>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	ee07 3a90 	vmov	s15, r3
 8005eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eb0:	ee17 0a90 	vmov	r0, s15
 8005eb4:	f7fa fb48 	bl	8000548 <__aeabi_f2d>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	f7fa f9e6 	bl	800028c <__adddf3>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	a333      	add	r3, pc, #204	; (adr r3, 8005f98 <lowlayer_readTruePosition+0x168>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f7fa fb93 	bl	80005f8 <__aeabi_dmul>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	4621      	mov	r1, r4
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	4b3c      	ldr	r3, [pc, #240]	; (8005fd0 <lowlayer_readTruePosition+0x1a0>)
 8005ee0:	f7fa fcb4 	bl	800084c <__aeabi_ddiv>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4618      	mov	r0, r3
 8005eea:	4621      	mov	r1, r4
 8005eec:	a330      	add	r3, pc, #192	; (adr r3, 8005fb0 <lowlayer_readTruePosition+0x180>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa f9cb 	bl	800028c <__adddf3>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8005f00:	4b31      	ldr	r3, [pc, #196]	; (8005fc8 <lowlayer_readTruePosition+0x198>)
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	4b31      	ldr	r3, [pc, #196]	; (8005fcc <lowlayer_readTruePosition+0x19c>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f12:	eeb1 7a67 	vneg.f32	s14, s15
 8005f16:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005fd4 <lowlayer_readTruePosition+0x1a4>
 8005f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f1e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005fd8 <lowlayer_readTruePosition+0x1a8>
 8005f22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f26:	ee17 0a90 	vmov	r0, s15
 8005f2a:	f7fa fb0d 	bl	8000548 <__aeabi_f2d>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8005f38:	4b28      	ldr	r3, [pc, #160]	; (8005fdc <lowlayer_readTruePosition+0x1ac>)
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <lowlayer_readTruePosition+0x1b0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fa faee 	bl	8000524 <__aeabi_i2d>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	f7fa f99e 	bl	800028c <__adddf3>
 8005f50:	4603      	mov	r3, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	4618      	mov	r0, r3
 8005f56:	4621      	mov	r1, r4
 8005f58:	a30f      	add	r3, pc, #60	; (adr r3, 8005f98 <lowlayer_readTruePosition+0x168>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa fb4b 	bl	80005f8 <__aeabi_dmul>
 8005f62:	4603      	mov	r3, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	4618      	mov	r0, r3
 8005f68:	4621      	mov	r1, r4
 8005f6a:	a313      	add	r3, pc, #76	; (adr r3, 8005fb8 <lowlayer_readTruePosition+0x188>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa fc6c 	bl	800084c <__aeabi_ddiv>
 8005f74:	4603      	mov	r3, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	4618      	mov	r0, r3
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	a310      	add	r3, pc, #64	; (adr r3, 8005fc0 <lowlayer_readTruePosition+0x190>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f7fa f983 	bl	800028c <__adddf3>
 8005f86:	4603      	mov	r3, r0
 8005f88:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd90      	pop	{r4, r7, pc}
 8005f98:	60000000 	.word	0x60000000
 8005f9c:	400921fb 	.word	0x400921fb
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	40f38800 	.word	0x40f38800
 8005fa8:	40000000 	.word	0x40000000
 8005fac:	3ff9f17a 	.word	0x3ff9f17a
 8005fb0:	80000000 	.word	0x80000000
 8005fb4:	40039716 	.word	0x40039716
 8005fb8:	a0000000 	.word	0xa0000000
 8005fbc:	40d3bca1 	.word	0x40d3bca1
 8005fc0:	a0000000 	.word	0xa0000000
 8005fc4:	4008330d 	.word	0x4008330d
 8005fc8:	2000de9c 	.word	0x2000de9c
 8005fcc:	2000dee0 	.word	0x2000dee0
 8005fd0:	40ff4000 	.word	0x40ff4000
 8005fd4:	4426aaab 	.word	0x4426aaab
 8005fd8:	400f1aa0 	.word	0x400f1aa0
 8005fdc:	2000de88 	.word	0x2000de88
 8005fe0:	2000debc 	.word	0x2000debc
 8005fe4:	00000000 	.word	0x00000000

08005fe8 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8005fe8:	b5b0      	push	{r4, r5, r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8005ff0:	4b53      	ldr	r3, [pc, #332]	; (8006140 <lowlayer_readSetPosition+0x158>)
 8005ff2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ff6:	4b53      	ldr	r3, [pc, #332]	; (8006144 <lowlayer_readSetPosition+0x15c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fa fa92 	bl	8000524 <__aeabi_i2d>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	f7fa f942 	bl	800028c <__adddf3>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4610      	mov	r0, r2
 800600e:	4619      	mov	r1, r3
 8006010:	a345      	add	r3, pc, #276	; (adr r3, 8006128 <lowlayer_readSetPosition+0x140>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f7fa faef 	bl	80005f8 <__aeabi_dmul>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4610      	mov	r0, r2
 8006020:	4619      	mov	r1, r3
 8006022:	a343      	add	r3, pc, #268	; (adr r3, 8006130 <lowlayer_readSetPosition+0x148>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f7fa fc10 	bl	800084c <__aeabi_ddiv>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4620      	mov	r0, r4
 8006032:	4629      	mov	r1, r5
 8006034:	f7fa f92a 	bl	800028c <__adddf3>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8006042:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <lowlayer_readSetPosition+0x158>)
 8006044:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006048:	4b3e      	ldr	r3, [pc, #248]	; (8006144 <lowlayer_readSetPosition+0x15c>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4618      	mov	r0, r3
 800604e:	f7fa fa69 	bl	8000524 <__aeabi_i2d>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	f7fa f919 	bl	800028c <__adddf3>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4610      	mov	r0, r2
 8006060:	4619      	mov	r1, r3
 8006062:	a331      	add	r3, pc, #196	; (adr r3, 8006128 <lowlayer_readSetPosition+0x140>)
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	f7fa fac6 	bl	80005f8 <__aeabi_dmul>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4610      	mov	r0, r2
 8006072:	4619      	mov	r1, r3
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	4b33      	ldr	r3, [pc, #204]	; (8006148 <lowlayer_readSetPosition+0x160>)
 800607a:	f7fa fbe7 	bl	800084c <__aeabi_ddiv>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	f7fa f901 	bl	800028c <__adddf3>
 800608a:	4603      	mov	r3, r0
 800608c:	460c      	mov	r4, r1
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8006094:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <lowlayer_readSetPosition+0x158>)
 8006096:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800609a:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <lowlayer_readSetPosition+0x15c>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800614c <lowlayer_readSetPosition+0x164>
 80060aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060ae:	ee16 0a90 	vmov	r0, s13
 80060b2:	f7fa fa49 	bl	8000548 <__aeabi_f2d>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4620      	mov	r0, r4
 80060bc:	4629      	mov	r1, r5
 80060be:	f7fa f8e5 	bl	800028c <__adddf3>
 80060c2:	4603      	mov	r3, r0
 80060c4:	460c      	mov	r4, r1
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 80060cc:	4b1c      	ldr	r3, [pc, #112]	; (8006140 <lowlayer_readSetPosition+0x158>)
 80060ce:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <lowlayer_readSetPosition+0x15c>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fa fa24 	bl	8000524 <__aeabi_i2d>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	f7fa f8d4 	bl	800028c <__adddf3>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4610      	mov	r0, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	a30e      	add	r3, pc, #56	; (adr r3, 8006128 <lowlayer_readSetPosition+0x140>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa fa81 	bl	80005f8 <__aeabi_dmul>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4610      	mov	r0, r2
 80060fc:	4619      	mov	r1, r3
 80060fe:	a30e      	add	r3, pc, #56	; (adr r3, 8006138 <lowlayer_readSetPosition+0x150>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f7fa fba2 	bl	800084c <__aeabi_ddiv>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	f7fa f8bc 	bl	800028c <__adddf3>
 8006114:	4603      	mov	r3, r0
 8006116:	460c      	mov	r4, r1
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bdb0      	pop	{r4, r5, r7, pc}
 8006126:	bf00      	nop
 8006128:	60000000 	.word	0x60000000
 800612c:	400921fb 	.word	0x400921fb
 8006130:	00000000 	.word	0x00000000
 8006134:	40d38800 	.word	0x40d38800
 8006138:	a0000000 	.word	0xa0000000
 800613c:	40d3bca1 	.word	0x40d3bca1
 8006140:	2000dec0 	.word	0x2000dec0
 8006144:	2000de88 	.word	0x2000de88
 8006148:	40df4000 	.word	0x40df4000
 800614c:	42c80000 	.word	0x42c80000

08006150 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8006150:	b084      	sub	sp, #16
 8006152:	b590      	push	{r4, r7, lr}
 8006154:	b093      	sub	sp, #76	; 0x4c
 8006156:	af00      	add	r7, sp, #0
 8006158:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800615c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006160:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006164:	a3c4      	add	r3, pc, #784	; (adr r3, 8006478 <lowlayer_computeAndWritePulse+0x328>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa f88f 	bl	800028c <__adddf3>
 800616e:	4603      	mov	r3, r0
 8006170:	460c      	mov	r4, r1
 8006172:	4618      	mov	r0, r3
 8006174:	4621      	mov	r1, r4
 8006176:	a3c2      	add	r3, pc, #776	; (adr r3, 8006480 <lowlayer_computeAndWritePulse+0x330>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa fa3c 	bl	80005f8 <__aeabi_dmul>
 8006180:	4603      	mov	r3, r0
 8006182:	460c      	mov	r4, r1
 8006184:	4618      	mov	r0, r3
 8006186:	4621      	mov	r1, r4
 8006188:	a3b5      	add	r3, pc, #724	; (adr r3, 8006460 <lowlayer_computeAndWritePulse+0x310>)
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f7fa fb5d 	bl	800084c <__aeabi_ddiv>
 8006192:	4603      	mov	r3, r0
 8006194:	460c      	mov	r4, r1
 8006196:	ec44 3b17 	vmov	d7, r3, r4
 800619a:	eeb0 0a47 	vmov.f32	s0, s14
 800619e:	eef0 0a67 	vmov.f32	s1, s15
 80061a2:	f013 fc1d 	bl	80199e0 <round>
 80061a6:	ec54 3b10 	vmov	r3, r4, d0
 80061aa:	4618      	mov	r0, r3
 80061ac:	4621      	mov	r1, r4
 80061ae:	f7fa fcfb 	bl	8000ba8 <__aeabi_d2uiz>
 80061b2:	4603      	mov	r3, r0
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80061b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061ba:	a3b3      	add	r3, pc, #716	; (adr r3, 8006488 <lowlayer_computeAndWritePulse+0x338>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa f864 	bl	800028c <__adddf3>
 80061c4:	4603      	mov	r3, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	4618      	mov	r0, r3
 80061ca:	4621      	mov	r1, r4
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	4baf      	ldr	r3, [pc, #700]	; (8006490 <lowlayer_computeAndWritePulse+0x340>)
 80061d2:	f7fa fa11 	bl	80005f8 <__aeabi_dmul>
 80061d6:	4603      	mov	r3, r0
 80061d8:	460c      	mov	r4, r1
 80061da:	4618      	mov	r0, r3
 80061dc:	4621      	mov	r1, r4
 80061de:	a3a0      	add	r3, pc, #640	; (adr r3, 8006460 <lowlayer_computeAndWritePulse+0x310>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa fb32 	bl	800084c <__aeabi_ddiv>
 80061e8:	4603      	mov	r3, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	ec44 3b17 	vmov	d7, r3, r4
 80061f0:	eeb0 0a47 	vmov.f32	s0, s14
 80061f4:	eef0 0a67 	vmov.f32	s1, s15
 80061f8:	f013 fbf2 	bl	80199e0 <round>
 80061fc:	ec54 3b10 	vmov	r3, r4, d0
 8006200:	4618      	mov	r0, r3
 8006202:	4621      	mov	r1, r4
 8006204:	f7fa fcd0 	bl	8000ba8 <__aeabi_d2uiz>
 8006208:	4603      	mov	r3, r0
 800620a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800620c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	4b9f      	ldr	r3, [pc, #636]	; (8006494 <lowlayer_computeAndWritePulse+0x344>)
 8006216:	f7fa f9ef 	bl	80005f8 <__aeabi_dmul>
 800621a:	4603      	mov	r3, r0
 800621c:	460c      	mov	r4, r1
 800621e:	ec44 3b17 	vmov	d7, r3, r4
 8006222:	eeb0 0a47 	vmov.f32	s0, s14
 8006226:	eef0 0a67 	vmov.f32	s1, s15
 800622a:	f013 fbd9 	bl	80199e0 <round>
 800622e:	ec54 3b10 	vmov	r3, r4, d0
 8006232:	4618      	mov	r0, r3
 8006234:	4621      	mov	r1, r4
 8006236:	f7fa fcb7 	bl	8000ba8 <__aeabi_d2uiz>
 800623a:	4603      	mov	r3, r0
 800623c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800623e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006242:	a389      	add	r3, pc, #548	; (adr r3, 8006468 <lowlayer_computeAndWritePulse+0x318>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7fa f820 	bl	800028c <__adddf3>
 800624c:	4603      	mov	r3, r0
 800624e:	460c      	mov	r4, r1
 8006250:	4618      	mov	r0, r3
 8006252:	4621      	mov	r1, r4
 8006254:	a386      	add	r3, pc, #536	; (adr r3, 8006470 <lowlayer_computeAndWritePulse+0x320>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa f9cd 	bl	80005f8 <__aeabi_dmul>
 800625e:	4603      	mov	r3, r0
 8006260:	460c      	mov	r4, r1
 8006262:	4618      	mov	r0, r3
 8006264:	4621      	mov	r1, r4
 8006266:	a37e      	add	r3, pc, #504	; (adr r3, 8006460 <lowlayer_computeAndWritePulse+0x310>)
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f7fa faee 	bl	800084c <__aeabi_ddiv>
 8006270:	4603      	mov	r3, r0
 8006272:	460c      	mov	r4, r1
 8006274:	ec44 3b17 	vmov	d7, r3, r4
 8006278:	eeb0 0a47 	vmov.f32	s0, s14
 800627c:	eef0 0a67 	vmov.f32	s1, s15
 8006280:	f013 fbae 	bl	80199e0 <round>
 8006284:	ec54 3b10 	vmov	r3, r4, d0
 8006288:	4618      	mov	r0, r3
 800628a:	4621      	mov	r1, r4
 800628c:	f7fa fc8c 	bl	8000ba8 <__aeabi_d2uiz>
 8006290:	4603      	mov	r3, r0
 8006292:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8006294:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006298:	a377      	add	r3, pc, #476	; (adr r3, 8006478 <lowlayer_computeAndWritePulse+0x328>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f7f9 fff5 	bl	800028c <__adddf3>
 80062a2:	4603      	mov	r3, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	4618      	mov	r0, r3
 80062a8:	4621      	mov	r1, r4
 80062aa:	a375      	add	r3, pc, #468	; (adr r3, 8006480 <lowlayer_computeAndWritePulse+0x330>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa f9a2 	bl	80005f8 <__aeabi_dmul>
 80062b4:	4603      	mov	r3, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	4618      	mov	r0, r3
 80062ba:	4621      	mov	r1, r4
 80062bc:	a368      	add	r3, pc, #416	; (adr r3, 8006460 <lowlayer_computeAndWritePulse+0x310>)
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f7fa fac3 	bl	800084c <__aeabi_ddiv>
 80062c6:	4603      	mov	r3, r0
 80062c8:	460c      	mov	r4, r1
 80062ca:	ec44 3b17 	vmov	d7, r3, r4
 80062ce:	eeb0 0a47 	vmov.f32	s0, s14
 80062d2:	eef0 0a67 	vmov.f32	s1, s15
 80062d6:	f013 fb83 	bl	80199e0 <round>
 80062da:	ec54 3b10 	vmov	r3, r4, d0
 80062de:	4618      	mov	r0, r3
 80062e0:	4621      	mov	r1, r4
 80062e2:	f7fa fc61 	bl	8000ba8 <__aeabi_d2uiz>
 80062e6:	4603      	mov	r3, r0
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80062ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80062ee:	a366      	add	r3, pc, #408	; (adr r3, 8006488 <lowlayer_computeAndWritePulse+0x338>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7f9 ffca 	bl	800028c <__adddf3>
 80062f8:	4603      	mov	r3, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	4618      	mov	r0, r3
 80062fe:	4621      	mov	r1, r4
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	4b62      	ldr	r3, [pc, #392]	; (8006490 <lowlayer_computeAndWritePulse+0x340>)
 8006306:	f7fa f977 	bl	80005f8 <__aeabi_dmul>
 800630a:	4603      	mov	r3, r0
 800630c:	460c      	mov	r4, r1
 800630e:	4618      	mov	r0, r3
 8006310:	4621      	mov	r1, r4
 8006312:	a353      	add	r3, pc, #332	; (adr r3, 8006460 <lowlayer_computeAndWritePulse+0x310>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7fa fa98 	bl	800084c <__aeabi_ddiv>
 800631c:	4603      	mov	r3, r0
 800631e:	460c      	mov	r4, r1
 8006320:	ec44 3b17 	vmov	d7, r3, r4
 8006324:	eeb0 0a47 	vmov.f32	s0, s14
 8006328:	eef0 0a67 	vmov.f32	s1, s15
 800632c:	f013 fb58 	bl	80199e0 <round>
 8006330:	ec54 3b10 	vmov	r3, r4, d0
 8006334:	4618      	mov	r0, r3
 8006336:	4621      	mov	r1, r4
 8006338:	f7fa fc36 	bl	8000ba8 <__aeabi_d2uiz>
 800633c:	4603      	mov	r3, r0
 800633e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8006340:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	4b52      	ldr	r3, [pc, #328]	; (8006494 <lowlayer_computeAndWritePulse+0x344>)
 800634a:	f7fa f955 	bl	80005f8 <__aeabi_dmul>
 800634e:	4603      	mov	r3, r0
 8006350:	460c      	mov	r4, r1
 8006352:	ec44 3b17 	vmov	d7, r3, r4
 8006356:	eeb0 0a47 	vmov.f32	s0, s14
 800635a:	eef0 0a67 	vmov.f32	s1, s15
 800635e:	f013 fb3f 	bl	80199e0 <round>
 8006362:	ec54 3b10 	vmov	r3, r4, d0
 8006366:	4618      	mov	r0, r3
 8006368:	4621      	mov	r1, r4
 800636a:	f7fa fc1d 	bl	8000ba8 <__aeabi_d2uiz>
 800636e:	4603      	mov	r3, r0
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8006372:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8006376:	a33c      	add	r3, pc, #240	; (adr r3, 8006468 <lowlayer_computeAndWritePulse+0x318>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7f9 ff86 	bl	800028c <__adddf3>
 8006380:	4603      	mov	r3, r0
 8006382:	460c      	mov	r4, r1
 8006384:	4618      	mov	r0, r3
 8006386:	4621      	mov	r1, r4
 8006388:	a339      	add	r3, pc, #228	; (adr r3, 8006470 <lowlayer_computeAndWritePulse+0x320>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7fa f933 	bl	80005f8 <__aeabi_dmul>
 8006392:	4603      	mov	r3, r0
 8006394:	460c      	mov	r4, r1
 8006396:	4618      	mov	r0, r3
 8006398:	4621      	mov	r1, r4
 800639a:	a331      	add	r3, pc, #196	; (adr r3, 8006460 <lowlayer_computeAndWritePulse+0x310>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f7fa fa54 	bl	800084c <__aeabi_ddiv>
 80063a4:	4603      	mov	r3, r0
 80063a6:	460c      	mov	r4, r1
 80063a8:	ec44 3b17 	vmov	d7, r3, r4
 80063ac:	eeb0 0a47 	vmov.f32	s0, s14
 80063b0:	eef0 0a67 	vmov.f32	s1, s15
 80063b4:	f013 fb14 	bl	80199e0 <round>
 80063b8:	ec54 3b10 	vmov	r3, r4, d0
 80063bc:	4618      	mov	r0, r3
 80063be:	4621      	mov	r1, r4
 80063c0:	f7fa fbf2 	bl	8000ba8 <__aeabi_d2uiz>
 80063c4:	4603      	mov	r3, r0
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 80063c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f04f 0400 	mov.w	r4, #0
 80063d2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 80063d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	f04f 0400 	mov.w	r4, #0
 80063e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 80063e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	f04f 0400 	mov.w	r4, #0
 80063ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80063f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f04f 0400 	mov.w	r4, #0
 80063fc:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfb8      	it	lt
 8006406:	425b      	neglt	r3, r3
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	dc11      	bgt.n	8006430 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfb8      	it	lt
 8006412:	425b      	neglt	r3, r3
 8006414:	2b7f      	cmp	r3, #127	; 0x7f
 8006416:	dc0b      	bgt.n	8006430 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	425b      	neglt	r3, r3
 8006420:	2b7f      	cmp	r3, #127	; 0x7f
 8006422:	dc05      	bgt.n	8006430 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	bfb8      	it	lt
 800642a:	425b      	neglt	r3, r3
 800642c:	2b7f      	cmp	r3, #127	; 0x7f
 800642e:	dd01      	ble.n	8006434 <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	e00c      	b.n	800644e <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8006434:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8006438:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800643c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8006440:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8006444:	f000 f828 	bl	8006498 <lowlayer_writePulse>
 8006448:	4603      	mov	r3, r0
 800644a:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 800644c:	79fb      	ldrb	r3, [r7, #7]
}
 800644e:	4618      	mov	r0, r3
 8006450:	374c      	adds	r7, #76	; 0x4c
 8006452:	46bd      	mov	sp, r7
 8006454:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006458:	b004      	add	sp, #16
 800645a:	4770      	bx	lr
 800645c:	f3af 8000 	nop.w
 8006460:	60000000 	.word	0x60000000
 8006464:	401921fb 	.word	0x401921fb
 8006468:	daaaaaab 	.word	0xdaaaaaab
 800646c:	4007bc89 	.word	0x4007bc89
 8006470:	a0000000 	.word	0xa0000000
 8006474:	40d3bca1 	.word	0x40d3bca1
 8006478:	daaaaaab 	.word	0xdaaaaaab
 800647c:	3ff7bc89 	.word	0x3ff7bc89
 8006480:	00000000 	.word	0x00000000
 8006484:	40d38800 	.word	0x40d38800
 8006488:	88000000 	.word	0x88000000
 800648c:	4002d97c 	.word	0x4002d97c
 8006490:	40df4000 	.word	0x40df4000
 8006494:	40590000 	.word	0x40590000

08006498 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4623      	mov	r3, r4
 80064a8:	71fb      	strb	r3, [r7, #7]
 80064aa:	4603      	mov	r3, r0
 80064ac:	71bb      	strb	r3, [r7, #6]
 80064ae:	460b      	mov	r3, r1
 80064b0:	717b      	strb	r3, [r7, #5]
 80064b2:	4613      	mov	r3, r2
 80064b4:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 80064b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da06      	bge.n	80064cc <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	425b      	negs	r3, r3
 80064c2:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	425b      	negs	r3, r3
 80064c8:	75fb      	strb	r3, [r7, #23]
 80064ca:	e006      	b.n	80064da <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 80064da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	da06      	bge.n	80064f0 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 80064e2:	79bb      	ldrb	r3, [r7, #6]
 80064e4:	425b      	negs	r3, r3
 80064e6:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 80064e8:	79bb      	ldrb	r3, [r7, #6]
 80064ea:	425b      	negs	r3, r3
 80064ec:	75bb      	strb	r3, [r7, #22]
 80064ee:	e006      	b.n	80064fe <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 80064f0:	79bb      	ldrb	r3, [r7, #6]
 80064f2:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80064f4:	79bb      	ldrb	r3, [r7, #6]
 80064f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 80064fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006502:	2b00      	cmp	r3, #0
 8006504:	da0b      	bge.n	800651e <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8006506:	797b      	ldrb	r3, [r7, #5]
 8006508:	425b      	negs	r3, r3
 800650a:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 800650c:	797b      	ldrb	r3, [r7, #5]
 800650e:	425b      	negs	r3, r3
 8006510:	b2db      	uxtb	r3, r3
 8006512:	b25b      	sxtb	r3, r3
 8006514:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006518:	b25b      	sxtb	r3, r3
 800651a:	757b      	strb	r3, [r7, #21]
 800651c:	e003      	b.n	8006526 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 800651e:	797b      	ldrb	r3, [r7, #5]
 8006520:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8006522:	797b      	ldrb	r3, [r7, #5]
 8006524:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8006526:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	da06      	bge.n	800653c <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 800652e:	793b      	ldrb	r3, [r7, #4]
 8006530:	425b      	negs	r3, r3
 8006532:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8006534:	793b      	ldrb	r3, [r7, #4]
 8006536:	425b      	negs	r3, r3
 8006538:	753b      	strb	r3, [r7, #20]
 800653a:	e006      	b.n	800654a <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 800653c:	793b      	ldrb	r3, [r7, #4]
 800653e:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8006540:	793b      	ldrb	r3, [r7, #4]
 8006542:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006546:	b25b      	sxtb	r3, r3
 8006548:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 800654a:	7cfb      	ldrb	r3, [r7, #19]
 800654c:	2b4b      	cmp	r3, #75	; 0x4b
 800654e:	d808      	bhi.n	8006562 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8006550:	7cbb      	ldrb	r3, [r7, #18]
 8006552:	2b78      	cmp	r3, #120	; 0x78
 8006554:	d805      	bhi.n	8006562 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8006556:	7c7b      	ldrb	r3, [r7, #17]
 8006558:	2b7d      	cmp	r3, #125	; 0x7d
 800655a:	d802      	bhi.n	8006562 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 800655c:	7c3b      	ldrb	r3, [r7, #16]
 800655e:	2b65      	cmp	r3, #101	; 0x65
 8006560:	d901      	bls.n	8006566 <lowlayer_writePulse+0xce>
		return FALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	e04b      	b.n	80065fe <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8006566:	2200      	movs	r2, #0
 8006568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800656c:	4826      	ldr	r0, [pc, #152]	; (8006608 <lowlayer_writePulse+0x170>)
 800656e:	f005 fe6d 	bl	800c24c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8006572:	2200      	movs	r2, #0
 8006574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006578:	4824      	ldr	r0, [pc, #144]	; (800660c <lowlayer_writePulse+0x174>)
 800657a:	f005 fe67 	bl	800c24c <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	4619      	mov	r1, r3
 8006582:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8006586:	f7fd ffcb 	bl	8004520 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 800658a:	7dbb      	ldrb	r3, [r7, #22]
 800658c:	4619      	mov	r1, r3
 800658e:	4820      	ldr	r0, [pc, #128]	; (8006610 <lowlayer_writePulse+0x178>)
 8006590:	f7fd ffc6 	bl	8004520 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8006594:	7d7b      	ldrb	r3, [r7, #21]
 8006596:	4619      	mov	r1, r3
 8006598:	481e      	ldr	r0, [pc, #120]	; (8006614 <lowlayer_writePulse+0x17c>)
 800659a:	f7fd ffc1 	bl	8004520 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 800659e:	7d3b      	ldrb	r3, [r7, #20]
 80065a0:	4619      	mov	r1, r3
 80065a2:	481d      	ldr	r0, [pc, #116]	; (8006618 <lowlayer_writePulse+0x180>)
 80065a4:	f7fd ffbc 	bl	8004520 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 80065a8:	2364      	movs	r3, #100	; 0x64
 80065aa:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 80065ac:	bf00      	nop
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	73fa      	strb	r2, [r7, #15]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1fa      	bne.n	80065ae <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 80065b8:	2201      	movs	r2, #1
 80065ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065be:	4813      	ldr	r0, [pc, #76]	; (800660c <lowlayer_writePulse+0x174>)
 80065c0:	f005 fe44 	bl	800c24c <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <lowlayer_writePulse+0x184>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065cc:	4413      	add	r3, r2
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <lowlayer_writePulse+0x184>)
 80065d0:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <lowlayer_writePulse+0x184>)
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80065da:	4413      	add	r3, r2
 80065dc:	4a0f      	ldr	r2, [pc, #60]	; (800661c <lowlayer_writePulse+0x184>)
 80065de:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 80065e0:	4b0e      	ldr	r3, [pc, #56]	; (800661c <lowlayer_writePulse+0x184>)
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80065e8:	4413      	add	r3, r2
 80065ea:	4a0c      	ldr	r2, [pc, #48]	; (800661c <lowlayer_writePulse+0x184>)
 80065ec:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <lowlayer_writePulse+0x184>)
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80065f6:	4413      	add	r3, r2
 80065f8:	4a08      	ldr	r2, [pc, #32]	; (800661c <lowlayer_writePulse+0x184>)
 80065fa:	60d3      	str	r3, [r2, #12]

	return TRUE;
 80065fc:	2301      	movs	r3, #1
}
 80065fe:	4618      	mov	r0, r3
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	bf00      	nop
 8006608:	40020000 	.word	0x40020000
 800660c:	40020c00 	.word	0x40020c00
 8006610:	60000002 	.word	0x60000002
 8006614:	60000004 	.word	0x60000004
 8006618:	60000006 	.word	0x60000006
 800661c:	2000de88 	.word	0x2000de88

08006620 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8006626:	2364      	movs	r3, #100	; 0x64
 8006628:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 800662a:	2201      	movs	r2, #1
 800662c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006630:	4809      	ldr	r0, [pc, #36]	; (8006658 <lowlayer_resetEncoder+0x38>)
 8006632:	f005 fe0b 	bl	800c24c <HAL_GPIO_WritePin>
	while (delay--);
 8006636:	bf00      	nop
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	71fa      	strb	r2, [r7, #7]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1fa      	bne.n	8006638 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8006642:	2200      	movs	r2, #0
 8006644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006648:	4803      	ldr	r0, [pc, #12]	; (8006658 <lowlayer_resetEncoder+0x38>)
 800664a:	f005 fdff 	bl	800c24c <HAL_GPIO_WritePin>
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40020c00 	.word	0x40020c00

0800665c <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8006662:	4805      	ldr	r0, [pc, #20]	; (8006678 <lowlayer_readLimitSwitch+0x1c>)
 8006664:	f7fd ff6b 	bl	800453e <FSMC_Read>
 8006668:	4603      	mov	r3, r0
 800666a:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	b2db      	uxtb	r3, r3
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	60000020 	.word	0x60000020

0800667c <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d81c      	bhi.n	80066c6 <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006692:	3310      	adds	r3, #16
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd ff51 	bl	800453e <FSMC_Read>
 800669c:	4603      	mov	r3, r0
 800669e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80066a6:	3310      	adds	r3, #16
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	3302      	adds	r3, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fd ff46 	bl	800453e <FSMC_Read>
 80066b2:	4603      	mov	r3, r0
 80066b4:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80066b6:	893b      	ldrh	r3, [r7, #8]
 80066b8:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	041a      	lsls	r2, r3, #16
 80066be:	897b      	ldrh	r3, [r7, #10]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e001      	b.n	80066ca <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80066ca:	68fb      	ldr	r3, [r7, #12]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d81c      	bhi.n	800671e <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80066ea:	3318      	adds	r3, #24
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fd ff25 	bl	800453e <FSMC_Read>
 80066f4:	4603      	mov	r3, r0
 80066f6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80066fe:	3318      	adds	r3, #24
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	3302      	adds	r3, #2
 8006704:	4618      	mov	r0, r3
 8006706:	f7fd ff1a 	bl	800453e <FSMC_Read>
 800670a:	4603      	mov	r3, r0
 800670c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800670e:	893b      	ldrh	r3, [r7, #8]
 8006710:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	041a      	lsls	r2, r3, #16
 8006716:	897b      	ldrh	r3, [r7, #10]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e001      	b.n	8006722 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006722:	68fb      	ldr	r3, [r7, #12]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 800672c:	b590      	push	{r4, r7, lr}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006732:	2300      	movs	r3, #0
 8006734:	71fb      	strb	r3, [r7, #7]
 8006736:	e00b      	b.n	8006750 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8006738:	79fc      	ldrb	r4, [r7, #7]
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ff9d 	bl	800667c <lowlayer_readEncoder>
 8006742:	4602      	mov	r2, r0
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <lowlayer_updateEncoder+0x34>)
 8006746:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	3301      	adds	r3, #1
 800674e:	71fb      	strb	r3, [r7, #7]
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d9f0      	bls.n	8006738 <lowlayer_updateEncoder+0xc>
	}
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	bd90      	pop	{r4, r7, pc}
 800675e:	bf00      	nop
 8006760:	2000de9c 	.word	0x2000de9c

08006764 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800676a:	2300      	movs	r3, #0
 800676c:	71fb      	strb	r3, [r7, #7]
 800676e:	e00b      	b.n	8006788 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8006770:	79fc      	ldrb	r4, [r7, #7]
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ffad 	bl	80066d4 <lowlayer_readCapture>
 800677a:	4602      	mov	r2, r0
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <lowlayer_updateCapture+0x34>)
 800677e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	3301      	adds	r3, #1
 8006786:	71fb      	strb	r3, [r7, #7]
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d9f0      	bls.n	8006770 <lowlayer_updateCapture+0xc>
	}
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	bd90      	pop	{r4, r7, pc}
 8006796:	bf00      	nop
 8006798:	2000deac 	.word	0x2000deac

0800679c <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 80067a2:	f7ff ff5b 	bl	800665c <lowlayer_readLimitSwitch>
 80067a6:	4603      	mov	r3, r0
 80067a8:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 80067aa:	2300      	movs	r3, #0
 80067ac:	71fb      	strb	r3, [r7, #7]
 80067ae:	e00d      	b.n	80067cc <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 80067b0:	79ba      	ldrb	r2, [r7, #6]
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	fa42 f303 	asr.w	r3, r2, r3
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	f002 0201 	and.w	r2, r2, #1
 80067c0:	b2d1      	uxtb	r1, r2
 80067c2:	4a06      	ldr	r2, [pc, #24]	; (80067dc <lowlayer_updateLimit+0x40>)
 80067c4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	3301      	adds	r3, #1
 80067ca:	71fb      	strb	r3, [r7, #7]
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d9ee      	bls.n	80067b0 <lowlayer_updateLimit+0x14>
	}
}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	2000dea8 	.word	0x2000dea8

080067e0 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 80067f0:	2201      	movs	r2, #1
 80067f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067f6:	4807      	ldr	r0, [pc, #28]	; (8006814 <lowlayer_setOutput+0x34>)
 80067f8:	f005 fd28 	bl	800c24c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 80067fc:	e005      	b.n	800680a <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 80067fe:	2200      	movs	r2, #0
 8006800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006804:	4803      	ldr	r0, [pc, #12]	; (8006814 <lowlayer_setOutput+0x34>)
 8006806:	f005 fd21 	bl	800c24c <HAL_GPIO_WritePin>
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40020400 	.word	0x40020400

08006818 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 800681c:	2201      	movs	r2, #1
 800681e:	2140      	movs	r1, #64	; 0x40
 8006820:	4802      	ldr	r0, [pc, #8]	; (800682c <lowlayer_CPLD_Init+0x14>)
 8006822:	f005 fd13 	bl	800c24c <HAL_GPIO_WritePin>
}
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40020c00 	.word	0x40020c00

08006830 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8006834:	2201      	movs	r2, #1
 8006836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800683a:	4808      	ldr	r0, [pc, #32]	; (800685c <lowlayer_stepMotorInit+0x2c>)
 800683c:	f005 fd06 	bl	800c24c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006840:	2201      	movs	r2, #1
 8006842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006846:	4805      	ldr	r0, [pc, #20]	; (800685c <lowlayer_stepMotorInit+0x2c>)
 8006848:	f005 fd00 	bl	800c24c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 800684c:	2201      	movs	r2, #1
 800684e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006852:	4802      	ldr	r0, [pc, #8]	; (800685c <lowlayer_stepMotorInit+0x2c>)
 8006854:	f005 fcfa 	bl	800c24c <HAL_GPIO_WritePin>
}
 8006858:	bf00      	nop
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40020000 	.word	0x40020000

08006860 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8006864:	f7ff ffd8 	bl	8006818 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006868:	f7ff ffe2 	bl	8006830 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 800686c:	f7ff fed8 	bl	8006620 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006870:	bf00      	nop
 8006872:	bd80      	pop	{r7, pc}
 8006874:	0000      	movs	r0, r0
	...

08006878 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006878:	b084      	sub	sp, #16
 800687a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687c:	ed2d 8b02 	vpush	{d8}
 8006880:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8006884:	af90      	add	r7, sp, #576	; 0x240
 8006886:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 800688a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 800688e:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 83e6 	bne.w	8007064 <scaraInitDuty+0x7ec>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006898:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800689c:	a3c3      	add	r3, pc, #780	; (adr r3, 8006bac <scaraInitDuty+0x334>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f7f9 fea9 	bl	80005f8 <__aeabi_dmul>
 80068a6:	4603      	mov	r3, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	4618      	mov	r0, r3
 80068ac:	4621      	mov	r1, r4
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	4bb7      	ldr	r3, [pc, #732]	; (8006b90 <scaraInitDuty+0x318>)
 80068b4:	f7f9 ffca 	bl	800084c <__aeabi_ddiv>
 80068b8:	4603      	mov	r3, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80068c0:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d13c      	bne.n	8006942 <scaraInitDuty+0xca>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80068c8:	4bb2      	ldr	r3, [pc, #712]	; (8006b94 <scaraInitDuty+0x31c>)
 80068ca:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80068ce:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80068d2:	461a      	mov	r2, r3
 80068d4:	4623      	mov	r3, r4
 80068d6:	f7f9 fcd9 	bl	800028c <__adddf3>
 80068da:	4603      	mov	r3, r0
 80068dc:	460c      	mov	r4, r1
 80068de:	f107 0208 	add.w	r2, r7, #8
 80068e2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80068e6:	4bab      	ldr	r3, [pc, #684]	; (8006b94 <scaraInitDuty+0x31c>)
 80068e8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80068ec:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80068f0:	461a      	mov	r2, r3
 80068f2:	4623      	mov	r3, r4
 80068f4:	f7f9 fcca 	bl	800028c <__adddf3>
 80068f8:	4603      	mov	r3, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	f107 0208 	add.w	r2, r7, #8
 8006900:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006904:	4ba3      	ldr	r3, [pc, #652]	; (8006b94 <scaraInitDuty+0x31c>)
 8006906:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800690a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800690e:	461a      	mov	r2, r3
 8006910:	4623      	mov	r3, r4
 8006912:	f7f9 fcbb 	bl	800028c <__adddf3>
 8006916:	4603      	mov	r3, r0
 8006918:	460c      	mov	r4, r1
 800691a:	f107 0208 	add.w	r2, r7, #8
 800691e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006922:	4b9c      	ldr	r3, [pc, #624]	; (8006b94 <scaraInitDuty+0x31c>)
 8006924:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006928:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800692c:	461a      	mov	r2, r3
 800692e:	4623      	mov	r3, r4
 8006930:	f7f9 fcac 	bl	800028c <__adddf3>
 8006934:	4603      	mov	r3, r0
 8006936:	460c      	mov	r4, r1
 8006938:	f107 0208 	add.w	r2, r7, #8
 800693c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006940:	e01f      	b.n	8006982 <scaraInitDuty+0x10a>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006942:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006946:	2b00      	cmp	r3, #0
 8006948:	d118      	bne.n	800697c <scaraInitDuty+0x104>
			target_point.x 		= command.target_point.x;
 800694a:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800694e:	f107 0208 	add.w	r2, r7, #8
 8006952:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8006956:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800695a:	f107 0208 	add.w	r2, r7, #8
 800695e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8006962:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006966:	f107 0208 	add.w	r2, r7, #8
 800696a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 800696e:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8006972:	f107 0208 	add.w	r2, r7, #8
 8006976:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 800697a:	e002      	b.n	8006982 <scaraInitDuty+0x10a>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 800697c:	230c      	movs	r3, #12
 800697e:	f000 bf2a 	b.w	80077d6 <scaraInitDuty+0xf5e>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800698a:	4b82      	ldr	r3, [pc, #520]	; (8006b94 <scaraInitDuty+0x31c>)
 800698c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006990:	461a      	mov	r2, r3
 8006992:	4623      	mov	r3, r4
 8006994:	f7f9 fc78 	bl	8000288 <__aeabi_dsub>
 8006998:	4603      	mov	r3, r0
 800699a:	460c      	mov	r4, r1
 800699c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
		dir_angle = 1;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80069b2:	f7fa f893 	bl	8000adc <__aeabi_dcmplt>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <scaraInitDuty+0x14a>
			dir_angle = -1;
 80069bc:	23ff      	movs	r3, #255	; 0xff
 80069be:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80069c2:	4b75      	ldr	r3, [pc, #468]	; (8006b98 <scaraInitDuty+0x320>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 80069c8:	4b72      	ldr	r3, [pc, #456]	; (8006b94 <scaraInitDuty+0x31c>)
 80069ca:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80069ce:	4a72      	ldr	r2, [pc, #456]	; (8006b98 <scaraInitDuty+0x320>)
 80069d0:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80069d4:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 80069d8:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d120      	bne.n	8006a22 <scaraInitDuty+0x1aa>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80069e0:	4b6d      	ldr	r3, [pc, #436]	; (8006b98 <scaraInitDuty+0x320>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 80069e6:	4c6b      	ldr	r4, [pc, #428]	; (8006b94 <scaraInitDuty+0x31c>)
 80069e8:	f107 0308 	add.w	r3, r7, #8
 80069ec:	a82e      	add	r0, sp, #184	; 0xb8
 80069ee:	4619      	mov	r1, r3
 80069f0:	23c0      	movs	r3, #192	; 0xc0
 80069f2:	461a      	mov	r2, r3
 80069f4:	f00f f9c2 	bl	8015d7c <memcpy>
 80069f8:	4668      	mov	r0, sp
 80069fa:	f104 0308 	add.w	r3, r4, #8
 80069fe:	22b8      	movs	r2, #184	; 0xb8
 8006a00:	4619      	mov	r1, r3
 8006a02:	f00f f9bb 	bl	8015d7c <memcpy>
 8006a06:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006a0a:	4864      	ldr	r0, [pc, #400]	; (8006b9c <scaraInitDuty+0x324>)
 8006a0c:	f000 fef8 	bl	8007800 <scaraInitLine>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8006a16:	4b60      	ldr	r3, [pc, #384]	; (8006b98 <scaraInitDuty+0x320>)
 8006a18:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8006a1c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8006a20:	e057      	b.n	8006ad2 <scaraInitDuty+0x25a>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006a22:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d150      	bne.n	8006acc <scaraInitDuty+0x254>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8006a2a:	4b5a      	ldr	r3, [pc, #360]	; (8006b94 <scaraInitDuty+0x31c>)
 8006a2c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8006a30:	f107 0208 	add.w	r2, r7, #8
 8006a34:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8006a38:	4b56      	ldr	r3, [pc, #344]	; (8006b94 <scaraInitDuty+0x31c>)
 8006a3a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006a3e:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8006a42:	461a      	mov	r2, r3
 8006a44:	4623      	mov	r3, r4
 8006a46:	f7f9 fc21 	bl	800028c <__adddf3>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006a52:	4b50      	ldr	r3, [pc, #320]	; (8006b94 <scaraInitDuty+0x31c>)
 8006a54:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006a58:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4623      	mov	r3, r4
 8006a60:	f7f9 fc14 	bl	800028c <__adddf3>
 8006a64:	4603      	mov	r3, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8006a6c:	4b49      	ldr	r3, [pc, #292]	; (8006b94 <scaraInitDuty+0x31c>)
 8006a6e:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8006a72:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8006a76:	4b48      	ldr	r3, [pc, #288]	; (8006b98 <scaraInitDuty+0x320>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8006a7c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006a80:	4c44      	ldr	r4, [pc, #272]	; (8006b94 <scaraInitDuty+0x31c>)
 8006a82:	938e      	str	r3, [sp, #568]	; 0x238
 8006a84:	a85e      	add	r0, sp, #376	; 0x178
 8006a86:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a8a:	22c0      	movs	r2, #192	; 0xc0
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f00f f975 	bl	8015d7c <memcpy>
 8006a92:	f107 0308 	add.w	r3, r7, #8
 8006a96:	a82e      	add	r0, sp, #184	; 0xb8
 8006a98:	4619      	mov	r1, r3
 8006a9a:	23c0      	movs	r3, #192	; 0xc0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f00f f96d 	bl	8015d7c <memcpy>
 8006aa2:	4668      	mov	r0, sp
 8006aa4:	f104 0308 	add.w	r3, r4, #8
 8006aa8:	22b8      	movs	r2, #184	; 0xb8
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f00f f966 	bl	8015d7c <memcpy>
 8006ab0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006ab4:	483a      	ldr	r0, [pc, #232]	; (8006ba0 <scaraInitDuty+0x328>)
 8006ab6:	f000 ff67 	bl	8007988 <scaraInitCircle>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8006ac0:	4b35      	ldr	r3, [pc, #212]	; (8006b98 <scaraInitDuty+0x320>)
 8006ac2:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8006ac6:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8006aca:	e002      	b.n	8006ad2 <scaraInitDuty+0x25a>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8006acc:	2303      	movs	r3, #3
 8006ace:	f000 be82 	b.w	80077d6 <scaraInitDuty+0xf5e>
		}

		if ( SCARA_STATUS_OK != status) {
 8006ad2:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <scaraInitDuty+0x26a>
			return status;
 8006ada:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006ade:	f000 be7a 	b.w	80077d6 <scaraInitDuty+0xf5e>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8006ae2:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 80f7 	bne.w	8006cda <scaraInitDuty+0x462>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006aec:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d15f      	bne.n	8006bb4 <scaraInitDuty+0x33c>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006af4:	4b28      	ldr	r3, [pc, #160]	; (8006b98 <scaraInitDuty+0x320>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006afc:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006b00:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006b04:	eeb0 2a46 	vmov.f32	s4, s12
 8006b08:	eef0 2a66 	vmov.f32	s5, s13
 8006b0c:	eeb0 1a47 	vmov.f32	s2, s14
 8006b10:	eef0 1a67 	vmov.f32	s3, s15
 8006b14:	2201      	movs	r2, #1
 8006b16:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	4821      	ldr	r0, [pc, #132]	; (8006ba4 <scaraInitDuty+0x32c>)
 8006b1e:	f001 f93f 	bl	8007da0 <scaraInitLSPB1>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006b28:	4a1b      	ldr	r2, [pc, #108]	; (8006b98 <scaraInitDuty+0x320>)
 8006b2a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006b2e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006b32:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <scaraInitDuty+0x320>)
 8006b34:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8006b38:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <scaraInitDuty+0x320>)
 8006b3a:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006b3e:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <scaraInitDuty+0x320>)
 8006b44:	2202      	movs	r2, #2
 8006b46:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006b4a:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7f9 fce8 	bl	8000524 <__aeabi_i2d>
 8006b54:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006b58:	f7f9 fd4e 	bl	80005f8 <__aeabi_dmul>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	ec44 3b16 	vmov	d6, r3, r4
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <scaraInitDuty+0x320>)
 8006b66:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006b6a:	ed93 7b00 	vldr	d7, [r3]
 8006b6e:	eeb0 1a47 	vmov.f32	s2, s14
 8006b72:	eef0 1a67 	vmov.f32	s3, s15
 8006b76:	2203      	movs	r2, #3
 8006b78:	eeb0 0a46 	vmov.f32	s0, s12
 8006b7c:	eef0 0a66 	vmov.f32	s1, s13
 8006b80:	2105      	movs	r1, #5
 8006b82:	4809      	ldr	r0, [pc, #36]	; (8006ba8 <scaraInitDuty+0x330>)
 8006b84:	f001 f8ba 	bl	8007cfc <scaraInitLinear>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006b8e:	e25a      	b.n	8007046 <scaraInitDuty+0x7ce>
 8006b90:	40668000 	.word	0x40668000
 8006b94:	2000eab0 	.word	0x2000eab0
 8006b98:	2000def0 	.word	0x2000def0
 8006b9c:	2000df00 	.word	0x2000df00
 8006ba0:	2000df70 	.word	0x2000df70
 8006ba4:	2000e008 	.word	0x2000e008
 8006ba8:	2000e2d8 	.word	0x2000e2d8
 8006bac:	60000000 	.word	0x60000000
 8006bb0:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006bb4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f040 808b 	bne.w	8006cd4 <scaraInitDuty+0x45c>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006bbe:	4bbc      	ldr	r3, [pc, #752]	; (8006eb0 <scaraInitDuty+0x638>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006bc6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006bca:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006bce:	eeb0 2a46 	vmov.f32	s4, s12
 8006bd2:	eef0 2a66 	vmov.f32	s5, s13
 8006bd6:	eeb0 1a47 	vmov.f32	s2, s14
 8006bda:	eef0 1a67 	vmov.f32	s3, s15
 8006bde:	2200      	movs	r2, #0
 8006be0:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006be4:	2104      	movs	r1, #4
 8006be6:	48b3      	ldr	r0, [pc, #716]	; (8006eb4 <scaraInitDuty+0x63c>)
 8006be8:	f002 fb32 	bl	8009250 <scaraInitLSPB>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006bf2:	4baf      	ldr	r3, [pc, #700]	; (8006eb0 <scaraInitDuty+0x638>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8006bfa:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006bfe:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c02:	eeb0 2a46 	vmov.f32	s4, s12
 8006c06:	eef0 2a66 	vmov.f32	s5, s13
 8006c0a:	eeb0 1a47 	vmov.f32	s2, s14
 8006c0e:	eef0 1a67 	vmov.f32	s3, s15
 8006c12:	2200      	movs	r2, #0
 8006c14:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006c18:	2105      	movs	r1, #5
 8006c1a:	48a7      	ldr	r0, [pc, #668]	; (8006eb8 <scaraInitDuty+0x640>)
 8006c1c:	f002 fb18 	bl	8009250 <scaraInitLSPB>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8006c26:	4ba2      	ldr	r3, [pc, #648]	; (8006eb0 <scaraInitDuty+0x638>)
 8006c28:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8006c2c:	4ba0      	ldr	r3, [pc, #640]	; (8006eb0 <scaraInitDuty+0x638>)
 8006c2e:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8006c32:	461a      	mov	r2, r3
 8006c34:	4623      	mov	r3, r4
 8006c36:	f7f9 ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d024      	beq.n	8006c8a <scaraInitDuty+0x412>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8006c40:	4b9b      	ldr	r3, [pc, #620]	; (8006eb0 <scaraInitDuty+0x638>)
 8006c42:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8006c46:	4a9a      	ldr	r2, [pc, #616]	; (8006eb0 <scaraInitDuty+0x638>)
 8006c48:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8006c4c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c50:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c54:	eeb0 2a46 	vmov.f32	s4, s12
 8006c58:	eef0 2a66 	vmov.f32	s5, s13
 8006c5c:	eeb0 1a47 	vmov.f32	s2, s14
 8006c60:	eef0 1a67 	vmov.f32	s3, s15
 8006c64:	2201      	movs	r2, #1
 8006c66:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006c6a:	2105      	movs	r1, #5
 8006c6c:	4892      	ldr	r0, [pc, #584]	; (8006eb8 <scaraInitDuty+0x640>)
 8006c6e:	f002 faef 	bl	8009250 <scaraInitLSPB>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006c78:	4b8d      	ldr	r3, [pc, #564]	; (8006eb0 <scaraInitDuty+0x638>)
 8006c7a:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8006c7e:	4a8c      	ldr	r2, [pc, #560]	; (8006eb0 <scaraInitDuty+0x638>)
 8006c80:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006c84:	e9c2 3400 	strd	r3, r4, [r2]
 8006c88:	e1dd      	b.n	8007046 <scaraInitDuty+0x7ce>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8006c8a:	4b89      	ldr	r3, [pc, #548]	; (8006eb0 <scaraInitDuty+0x638>)
 8006c8c:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8006c90:	4a87      	ldr	r2, [pc, #540]	; (8006eb0 <scaraInitDuty+0x638>)
 8006c92:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006c96:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c9a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c9e:	eeb0 2a46 	vmov.f32	s4, s12
 8006ca2:	eef0 2a66 	vmov.f32	s5, s13
 8006ca6:	eeb0 1a47 	vmov.f32	s2, s14
 8006caa:	eef0 1a67 	vmov.f32	s3, s15
 8006cae:	2201      	movs	r2, #1
 8006cb0:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	487f      	ldr	r0, [pc, #508]	; (8006eb4 <scaraInitDuty+0x63c>)
 8006cb8:	f002 faca 	bl	8009250 <scaraInitLSPB>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8006cc2:	4b7b      	ldr	r3, [pc, #492]	; (8006eb0 <scaraInitDuty+0x638>)
 8006cc4:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8006cc8:	4a79      	ldr	r2, [pc, #484]	; (8006eb0 <scaraInitDuty+0x638>)
 8006cca:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006cce:	e9c2 3400 	strd	r3, r4, [r2]
 8006cd2:	e1b8      	b.n	8007046 <scaraInitDuty+0x7ce>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f000 bd7e 	b.w	80077d6 <scaraInitDuty+0xf5e>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8006cda:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	f040 80f2 	bne.w	8006ec8 <scaraInitDuty+0x650>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006ce4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d14d      	bne.n	8006d88 <scaraInitDuty+0x510>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006cec:	4b70      	ldr	r3, [pc, #448]	; (8006eb0 <scaraInitDuty+0x638>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006cf4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006cf8:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006cfc:	eeb0 2a46 	vmov.f32	s4, s12
 8006d00:	eef0 2a66 	vmov.f32	s5, s13
 8006d04:	eeb0 1a47 	vmov.f32	s2, s14
 8006d08:	eef0 1a67 	vmov.f32	s3, s15
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006d12:	2104      	movs	r1, #4
 8006d14:	4869      	ldr	r0, [pc, #420]	; (8006ebc <scaraInitDuty+0x644>)
 8006d16:	f001 fb0b 	bl	8008330 <scaraInitScurve1>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006d20:	4a63      	ldr	r2, [pc, #396]	; (8006eb0 <scaraInitDuty+0x638>)
 8006d22:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006d26:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006d2a:	4b61      	ldr	r3, [pc, #388]	; (8006eb0 <scaraInitDuty+0x638>)
 8006d2c:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8006d30:	4a5f      	ldr	r2, [pc, #380]	; (8006eb0 <scaraInitDuty+0x638>)
 8006d32:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006d36:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006d3a:	4b5d      	ldr	r3, [pc, #372]	; (8006eb0 <scaraInitDuty+0x638>)
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006d42:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7f9 fbec 	bl	8000524 <__aeabi_i2d>
 8006d4c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006d50:	f7f9 fc52 	bl	80005f8 <__aeabi_dmul>
 8006d54:	4603      	mov	r3, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	ec44 3b16 	vmov	d6, r3, r4
 8006d5c:	4b54      	ldr	r3, [pc, #336]	; (8006eb0 <scaraInitDuty+0x638>)
 8006d5e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006d62:	ed93 7b00 	vldr	d7, [r3]
 8006d66:	eeb0 1a47 	vmov.f32	s2, s14
 8006d6a:	eef0 1a67 	vmov.f32	s3, s15
 8006d6e:	2203      	movs	r2, #3
 8006d70:	eeb0 0a46 	vmov.f32	s0, s12
 8006d74:	eef0 0a66 	vmov.f32	s1, s13
 8006d78:	2105      	movs	r1, #5
 8006d7a:	4851      	ldr	r0, [pc, #324]	; (8006ec0 <scaraInitDuty+0x648>)
 8006d7c:	f000 ffbe 	bl	8007cfc <scaraInitLinear>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006d86:	e15e      	b.n	8007046 <scaraInitDuty+0x7ce>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006d88:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f040 808b 	bne.w	8006ea8 <scaraInitDuty+0x630>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006d92:	4b47      	ldr	r3, [pc, #284]	; (8006eb0 <scaraInitDuty+0x638>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006d9a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006d9e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006da2:	eeb0 2a46 	vmov.f32	s4, s12
 8006da6:	eef0 2a66 	vmov.f32	s5, s13
 8006daa:	eeb0 1a47 	vmov.f32	s2, s14
 8006dae:	eef0 1a67 	vmov.f32	s3, s15
 8006db2:	2200      	movs	r2, #0
 8006db4:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006db8:	2104      	movs	r1, #4
 8006dba:	4840      	ldr	r0, [pc, #256]	; (8006ebc <scaraInitDuty+0x644>)
 8006dbc:	f002 fe26 	bl	8009a0c <scaraInitScurve>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006dc6:	4b3a      	ldr	r3, [pc, #232]	; (8006eb0 <scaraInitDuty+0x638>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8006dce:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006dd2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006dd6:	eeb0 2a46 	vmov.f32	s4, s12
 8006dda:	eef0 2a66 	vmov.f32	s5, s13
 8006dde:	eeb0 1a47 	vmov.f32	s2, s14
 8006de2:	eef0 1a67 	vmov.f32	s3, s15
 8006de6:	2200      	movs	r2, #0
 8006de8:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006dec:	2105      	movs	r1, #5
 8006dee:	4835      	ldr	r0, [pc, #212]	; (8006ec4 <scaraInitDuty+0x64c>)
 8006df0:	f002 fe0c 	bl	8009a0c <scaraInitScurve>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8006dfa:	4b2d      	ldr	r3, [pc, #180]	; (8006eb0 <scaraInitDuty+0x638>)
 8006dfc:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8006e00:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e02:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8006e06:	461a      	mov	r2, r3
 8006e08:	4623      	mov	r3, r4
 8006e0a:	f7f9 fe85 	bl	8000b18 <__aeabi_dcmpgt>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d024      	beq.n	8006e5e <scaraInitDuty+0x5e6>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8006e14:	4b26      	ldr	r3, [pc, #152]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e16:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8006e1a:	4a25      	ldr	r2, [pc, #148]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e1c:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8006e20:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006e24:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006e28:	eeb0 2a46 	vmov.f32	s4, s12
 8006e2c:	eef0 2a66 	vmov.f32	s5, s13
 8006e30:	eeb0 1a47 	vmov.f32	s2, s14
 8006e34:	eef0 1a67 	vmov.f32	s3, s15
 8006e38:	2201      	movs	r2, #1
 8006e3a:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8006e3e:	2105      	movs	r1, #5
 8006e40:	4820      	ldr	r0, [pc, #128]	; (8006ec4 <scaraInitDuty+0x64c>)
 8006e42:	f002 fde3 	bl	8009a0c <scaraInitScurve>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8006e4c:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e4e:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8006e52:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e54:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006e58:	e9c2 3400 	strd	r3, r4, [r2]
 8006e5c:	e0f3      	b.n	8007046 <scaraInitDuty+0x7ce>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e60:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8006e64:	4a12      	ldr	r2, [pc, #72]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e66:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8006e6a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006e6e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006e72:	eeb0 2a46 	vmov.f32	s4, s12
 8006e76:	eef0 2a66 	vmov.f32	s5, s13
 8006e7a:	eeb0 1a47 	vmov.f32	s2, s14
 8006e7e:	eef0 1a67 	vmov.f32	s3, s15
 8006e82:	2201      	movs	r2, #1
 8006e84:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006e88:	2104      	movs	r1, #4
 8006e8a:	480c      	ldr	r0, [pc, #48]	; (8006ebc <scaraInitDuty+0x644>)
 8006e8c:	f002 fdbe 	bl	8009a0c <scaraInitScurve>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8006e96:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e98:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8006e9c:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <scaraInitDuty+0x638>)
 8006e9e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006ea2:	e9c2 3400 	strd	r3, r4, [r2]
 8006ea6:	e0ce      	b.n	8007046 <scaraInitDuty+0x7ce>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f000 bc94 	b.w	80077d6 <scaraInitDuty+0xf5e>
 8006eae:	bf00      	nop
 8006eb0:	2000def0 	.word	0x2000def0
 8006eb4:	2000e008 	.word	0x2000e008
 8006eb8:	2000e188 	.word	0x2000e188
 8006ebc:	2000e088 	.word	0x2000e088
 8006ec0:	2000e2d8 	.word	0x2000e2d8
 8006ec4:	2000e208 	.word	0x2000e208
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8006ec8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d172      	bne.n	8006fb6 <scaraInitDuty+0x73e>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006ed0:	4ab7      	ldr	r2, [pc, #732]	; (80071b0 <scaraInitDuty+0x938>)
 8006ed2:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006ed6:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006eda:	4bb5      	ldr	r3, [pc, #724]	; (80071b0 <scaraInitDuty+0x938>)
 8006edc:	2202      	movs	r2, #2
 8006ede:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006ee2:	4bb3      	ldr	r3, [pc, #716]	; (80071b0 <scaraInitDuty+0x938>)
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8006eea:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d118      	bne.n	8006f24 <scaraInitDuty+0x6ac>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8006ef2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8006f06:	eeb0 1a47 	vmov.f32	s2, s14
 8006f0a:	eef0 1a67 	vmov.f32	s3, s15
 8006f0e:	2203      	movs	r2, #3
 8006f10:	ed97 0b00 	vldr	d0, [r7]
 8006f14:	2104      	movs	r1, #4
 8006f16:	48a7      	ldr	r0, [pc, #668]	; (80071b4 <scaraInitDuty+0x93c>)
 8006f18:	f000 fef0 	bl	8007cfc <scaraInitLinear>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006f22:	e01d      	b.n	8006f60 <scaraInitDuty+0x6e8>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8006f24:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d116      	bne.n	8006f5a <scaraInitDuty+0x6e2>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8006f2c:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 8006f30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006f34:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8006f38:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006f3c:	eeb0 1a47 	vmov.f32	s2, s14
 8006f40:	eef0 1a67 	vmov.f32	s3, s15
 8006f44:	2202      	movs	r2, #2
 8006f46:	ec46 5b10 	vmov	d0, r5, r6
 8006f4a:	2104      	movs	r1, #4
 8006f4c:	4899      	ldr	r0, [pc, #612]	; (80071b4 <scaraInitDuty+0x93c>)
 8006f4e:	f000 fed5 	bl	8007cfc <scaraInitLinear>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006f58:	e002      	b.n	8006f60 <scaraInitDuty+0x6e8>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	f000 bc3b 	b.w	80077d6 <scaraInitDuty+0xf5e>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 8006f60:	4b93      	ldr	r3, [pc, #588]	; (80071b0 <scaraInitDuty+0x938>)
 8006f62:	e9d3 34a0 	ldrd	r3, r4, [r3, #640]	; 0x280
 8006f66:	4a92      	ldr	r2, [pc, #584]	; (80071b0 <scaraInitDuty+0x938>)
 8006f68:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006f6c:	e9c2 3400 	strd	r3, r4, [r2]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006f70:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 fad5 	bl	8000524 <__aeabi_i2d>
 8006f7a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006f7e:	f7f9 fb3b 	bl	80005f8 <__aeabi_dmul>
 8006f82:	4603      	mov	r3, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	ec44 3b16 	vmov	d6, r3, r4
 8006f8a:	4b89      	ldr	r3, [pc, #548]	; (80071b0 <scaraInitDuty+0x938>)
 8006f8c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f90:	ed93 7b00 	vldr	d7, [r3]
 8006f94:	eeb0 1a47 	vmov.f32	s2, s14
 8006f98:	eef0 1a67 	vmov.f32	s3, s15
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	eeb0 0a46 	vmov.f32	s0, s12
 8006fa2:	eef0 0a66 	vmov.f32	s1, s13
 8006fa6:	2105      	movs	r1, #5
 8006fa8:	4883      	ldr	r0, [pc, #524]	; (80071b8 <scaraInitDuty+0x940>)
 8006faa:	f000 fea7 	bl	8007cfc <scaraInitLinear>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006fb4:	e047      	b.n	8007046 <scaraInitDuty+0x7ce>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 8006fb6:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d141      	bne.n	8007042 <scaraInitDuty+0x7ca>
			status1 = SCARA_STATUS_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006fc4:	4a7a      	ldr	r2, [pc, #488]	; (80071b0 <scaraInitDuty+0x938>)
 8006fc6:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006fca:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8006fce:	4b78      	ldr	r3, [pc, #480]	; (80071b0 <scaraInitDuty+0x938>)
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006fd6:	4b76      	ldr	r3, [pc, #472]	; (80071b0 <scaraInitDuty+0x938>)
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8006fde:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006fe2:	4a73      	ldr	r2, [pc, #460]	; (80071b0 <scaraInitDuty+0x938>)
 8006fe4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006fe8:	e9c2 3400 	strd	r3, r4, [r2]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 8006fec:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7f9 fa97 	bl	8000524 <__aeabi_i2d>
 8006ff6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006ffa:	f7f9 fafd 	bl	80005f8 <__aeabi_dmul>
 8006ffe:	4603      	mov	r3, r0
 8007000:	460c      	mov	r4, r1
 8007002:	ec44 3b18 	vmov	d8, r3, r4
 8007006:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 800700a:	4b6c      	ldr	r3, [pc, #432]	; (80071bc <scaraInitDuty+0x944>)
 800700c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007010:	461a      	mov	r2, r3
 8007012:	4623      	mov	r3, r4
 8007014:	f7f9 f938 	bl	8000288 <__aeabi_dsub>
 8007018:	4603      	mov	r3, r0
 800701a:	460c      	mov	r4, r1
 800701c:	ec44 3b17 	vmov	d7, r3, r4
 8007020:	eeb0 1a47 	vmov.f32	s2, s14
 8007024:	eef0 1a67 	vmov.f32	s3, s15
 8007028:	2203      	movs	r2, #3
 800702a:	eeb0 0a48 	vmov.f32	s0, s16
 800702e:	eef0 0a68 	vmov.f32	s1, s17
 8007032:	2105      	movs	r1, #5
 8007034:	4860      	ldr	r0, [pc, #384]	; (80071b8 <scaraInitDuty+0x940>)
 8007036:	f000 fe61 	bl	8007cfc <scaraInitLinear>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007040:	e001      	b.n	8007046 <scaraInitDuty+0x7ce>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007042:	2305      	movs	r3, #5
 8007044:	e3c7      	b.n	80077d6 <scaraInitDuty+0xf5e>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8007046:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <scaraInitDuty+0x7dc>
			return status1;
 800704e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007052:	e3c0      	b.n	80077d6 <scaraInitDuty+0xf5e>
		}
		if ( SCARA_STATUS_OK != status2) {
 8007054:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 838e 	beq.w	800777a <scaraInitDuty+0xf02>
			return status2;
 800705e:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8007062:	e3b8      	b.n	80077d6 <scaraInitDuty+0xf5e>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8007064:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8007068:	2b01      	cmp	r3, #1
 800706a:	f040 8384 	bne.w	8007776 <scaraInitDuty+0xefe>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 800706e:	4b50      	ldr	r3, [pc, #320]	; (80071b0 <scaraInitDuty+0x938>)
 8007070:	2201      	movs	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8007074:	4b52      	ldr	r3, [pc, #328]	; (80071c0 <scaraInitDuty+0x948>)
 8007076:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800707a:	4a4d      	ldr	r2, [pc, #308]	; (80071b0 <scaraInitDuty+0x938>)
 800707c:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8007080:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8007084:	4b4e      	ldr	r3, [pc, #312]	; (80071c0 <scaraInitDuty+0x948>)
 8007086:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800708a:	4a49      	ldr	r2, [pc, #292]	; (80071b0 <scaraInitDuty+0x938>)
 800708c:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 8007090:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8007094:	4b4a      	ldr	r3, [pc, #296]	; (80071c0 <scaraInitDuty+0x948>)
 8007096:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800709a:	4a45      	ldr	r2, [pc, #276]	; (80071b0 <scaraInitDuty+0x938>)
 800709c:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 80070a0:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80070a4:	4b46      	ldr	r3, [pc, #280]	; (80071c0 <scaraInitDuty+0x948>)
 80070a6:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80070aa:	4a41      	ldr	r2, [pc, #260]	; (80071b0 <scaraInitDuty+0x938>)
 80070ac:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 80070b0:	e9c2 3400 	strd	r3, r4, [r2]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80070b4:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80070b8:	a33b      	add	r3, pc, #236	; (adr r3, 80071a8 <scaraInitDuty+0x930>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7f9 fa9b 	bl	80005f8 <__aeabi_dmul>
 80070c2:	4603      	mov	r3, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	4618      	mov	r0, r3
 80070c8:	4621      	mov	r1, r4
 80070ca:	f04f 0200 	mov.w	r2, #0
 80070ce:	4b3d      	ldr	r3, [pc, #244]	; (80071c4 <scaraInitDuty+0x94c>)
 80070d0:	f7f9 fbbc 	bl	800084c <__aeabi_ddiv>
 80070d4:	4603      	mov	r3, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80070dc:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d134      	bne.n	800714e <scaraInitDuty+0x8d6>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80070e4:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <scaraInitDuty+0x948>)
 80070e6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80070ea:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80070ee:	461a      	mov	r2, r3
 80070f0:	4623      	mov	r3, r4
 80070f2:	f7f9 f8cb 	bl	800028c <__adddf3>
 80070f6:	4603      	mov	r3, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80070fe:	4b30      	ldr	r3, [pc, #192]	; (80071c0 <scaraInitDuty+0x948>)
 8007100:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007104:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8007108:	461a      	mov	r2, r3
 800710a:	4623      	mov	r3, r4
 800710c:	f7f9 f8be 	bl	800028c <__adddf3>
 8007110:	4603      	mov	r3, r0
 8007112:	460c      	mov	r4, r1
 8007114:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8007118:	4b29      	ldr	r3, [pc, #164]	; (80071c0 <scaraInitDuty+0x948>)
 800711a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800711e:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007122:	461a      	mov	r2, r3
 8007124:	4623      	mov	r3, r4
 8007126:	f7f9 f8b1 	bl	800028c <__adddf3>
 800712a:	4603      	mov	r3, r0
 800712c:	460c      	mov	r4, r1
 800712e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8007132:	4b23      	ldr	r3, [pc, #140]	; (80071c0 <scaraInitDuty+0x948>)
 8007134:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007138:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800713c:	461a      	mov	r2, r3
 800713e:	4623      	mov	r3, r4
 8007140:	f7f9 f8a4 	bl	800028c <__adddf3>
 8007144:	4603      	mov	r3, r0
 8007146:	460c      	mov	r4, r1
 8007148:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800714c:	e016      	b.n	800717c <scaraInitDuty+0x904>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800714e:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8007152:	2b00      	cmp	r3, #0
 8007154:	d110      	bne.n	8007178 <scaraInitDuty+0x900>
			target_point.x 		= command.target_point.x;
 8007156:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800715a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 800715e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8007162:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 8007166:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800716a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 800716e:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8007172:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8007176:	e001      	b.n	800717c <scaraInitDuty+0x904>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8007178:	230c      	movs	r3, #12
 800717a:	e32c      	b.n	80077d6 <scaraInitDuty+0xf5e>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 800717c:	4c10      	ldr	r4, [pc, #64]	; (80071c0 <scaraInitDuty+0x948>)
 800717e:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8007182:	4668      	mov	r0, sp
 8007184:	f104 0308 	add.w	r3, r4, #8
 8007188:	22b8      	movs	r2, #184	; 0xb8
 800718a:	4619      	mov	r1, r3
 800718c:	f00e fdf6 	bl	8015d7c <memcpy>
 8007190:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007194:	4628      	mov	r0, r5
 8007196:	f7fe f843 	bl	8005220 <kinematicInverse>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d113      	bne.n	80071c8 <scaraInitDuty+0x950>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80071a0:	2307      	movs	r3, #7
 80071a2:	e318      	b.n	80077d6 <scaraInitDuty+0xf5e>
 80071a4:	f3af 8000 	nop.w
 80071a8:	60000000 	.word	0x60000000
 80071ac:	400921fb 	.word	0x400921fb
 80071b0:	2000def0 	.word	0x2000def0
 80071b4:	2000e158 	.word	0x2000e158
 80071b8:	2000e2d8 	.word	0x2000e2d8
 80071bc:	2000dd10 	.word	0x2000dd10
 80071c0:	2000eab0 	.word	0x2000eab0
 80071c4:	40668000 	.word	0x40668000
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80071c8:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80071cc:	4bc9      	ldr	r3, [pc, #804]	; (80074f4 <scaraInitDuty+0xc7c>)
 80071ce:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80071d2:	461a      	mov	r2, r3
 80071d4:	4623      	mov	r3, r4
 80071d6:	f7f9 f857 	bl	8000288 <__aeabi_dsub>
 80071da:	4603      	mov	r3, r0
 80071dc:	460c      	mov	r4, r1
 80071de:	f107 0208 	add.w	r2, r7, #8
 80071e2:	e9c2 3400 	strd	r3, r4, [r2]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80071e6:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80071ea:	4bc2      	ldr	r3, [pc, #776]	; (80074f4 <scaraInitDuty+0xc7c>)
 80071ec:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80071f0:	461a      	mov	r2, r3
 80071f2:	4623      	mov	r3, r4
 80071f4:	f7f9 f848 	bl	8000288 <__aeabi_dsub>
 80071f8:	4603      	mov	r3, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	f107 0208 	add.w	r2, r7, #8
 8007200:	e9c2 3402 	strd	r3, r4, [r2, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 8007204:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8007208:	4bba      	ldr	r3, [pc, #744]	; (80074f4 <scaraInitDuty+0xc7c>)
 800720a:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800720e:	461a      	mov	r2, r3
 8007210:	4623      	mov	r3, r4
 8007212:	f7f9 f839 	bl	8000288 <__aeabi_dsub>
 8007216:	4603      	mov	r3, r0
 8007218:	460c      	mov	r4, r1
 800721a:	f107 0208 	add.w	r2, r7, #8
 800721e:	e9c2 3404 	strd	r3, r4, [r2, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8007222:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8007226:	4bb3      	ldr	r3, [pc, #716]	; (80074f4 <scaraInitDuty+0xc7c>)
 8007228:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	f7f9 f82a 	bl	8000288 <__aeabi_dsub>
 8007234:	4603      	mov	r3, r0
 8007236:	460c      	mov	r4, r1
 8007238:	f107 0208 	add.w	r2, r7, #8
 800723c:	e9c2 3406 	strd	r3, r4, [r2, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8007240:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007244:	2b00      	cmp	r3, #0
 8007246:	f040 8148 	bne.w	80074da <scaraInitDuty+0xc62>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800724a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800724e:	2b01      	cmp	r3, #1
 8007250:	d161      	bne.n	8007316 <scaraInitDuty+0xa9e>
				for ( uint8_t i = 0; i < 4; i++) {
 8007252:	2300      	movs	r3, #0
 8007254:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007258:	e051      	b.n	80072fe <scaraInitDuty+0xa86>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800725a:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 800725e:	49a6      	ldr	r1, [pc, #664]	; (80074f8 <scaraInitDuty+0xc80>)
 8007260:	4613      	mov	r3, r2
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	4413      	add	r3, r2
 8007266:	01db      	lsls	r3, r3, #7
 8007268:	440b      	add	r3, r1
 800726a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8007272:	f897 019e 	ldrb.w	r0, [r7, #414]	; 0x19e
 8007276:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 800727a:	4c9f      	ldr	r4, [pc, #636]	; (80074f8 <scaraInitDuty+0xc80>)
 800727c:	4603      	mov	r3, r0
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	4403      	add	r3, r0
 8007282:	01db      	lsls	r3, r3, #7
 8007284:	4423      	add	r3, r4
 8007286:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800728a:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800728e:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007292:	4613      	mov	r3, r2
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	4413      	add	r3, r2
 8007298:	01db      	lsls	r3, r3, #7
 800729a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800729e:	4a96      	ldr	r2, [pc, #600]	; (80074f8 <scaraInitDuty+0xc80>)
 80072a0:	1898      	adds	r0, r3, r2
 80072a2:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80072a6:	4a95      	ldr	r2, [pc, #596]	; (80074fc <scaraInitDuty+0xc84>)
 80072a8:	5cd1      	ldrb	r1, [r2, r3]
 80072aa:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80072ae:	f107 0208 	add.w	r2, r7, #8
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4413      	add	r3, r2
 80072b6:	ed93 7b00 	vldr	d7, [r3]
 80072ba:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80072be:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 80072c2:	eeb0 2a45 	vmov.f32	s4, s10
 80072c6:	eef0 2a65 	vmov.f32	s5, s11
 80072ca:	eeb0 1a46 	vmov.f32	s2, s12
 80072ce:	eef0 1a66 	vmov.f32	s3, s13
 80072d2:	2201      	movs	r2, #1
 80072d4:	eeb0 0a47 	vmov.f32	s0, s14
 80072d8:	eef0 0a67 	vmov.f32	s1, s15
 80072dc:	f000 fd60 	bl	8007da0 <scaraInitLSPB1>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 80072e6:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <scaraInitDuty+0xa7c>
						return status1;
 80072ee:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80072f2:	e270      	b.n	80077d6 <scaraInitDuty+0xf5e>
				for ( uint8_t i = 0; i < 4; i++) {
 80072f4:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80072f8:	3301      	adds	r3, #1
 80072fa:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80072fe:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007302:	2b03      	cmp	r3, #3
 8007304:	d9a9      	bls.n	800725a <scaraInitDuty+0x9e2>
					}
				}
				myDUTY.time_total = command.time_total;
 8007306:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800730a:	4a7b      	ldr	r2, [pc, #492]	; (80074f8 <scaraInitDuty+0xc80>)
 800730c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8007310:	e9c2 3400 	strd	r3, r4, [r2]
 8007314:	e231      	b.n	800777a <scaraInitDuty+0xf02>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007316:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 80db 	bne.w	80074d6 <scaraInitDuty+0xc5e>
				for ( uint8_t i = 0; i < 4; i++) {
 8007320:	2300      	movs	r3, #0
 8007322:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007326:	e03c      	b.n	80073a2 <scaraInitDuty+0xb2a>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007328:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 800732c:	4972      	ldr	r1, [pc, #456]	; (80074f8 <scaraInitDuty+0xc80>)
 800732e:	4613      	mov	r3, r2
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4413      	add	r3, r2
 8007334:	01db      	lsls	r3, r3, #7
 8007336:	440b      	add	r3, r1
 8007338:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007340:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 8007344:	4613      	mov	r3, r2
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	4413      	add	r3, r2
 800734a:	01db      	lsls	r3, r3, #7
 800734c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007350:	4a69      	ldr	r2, [pc, #420]	; (80074f8 <scaraInitDuty+0xc80>)
 8007352:	1898      	adds	r0, r3, r2
 8007354:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007358:	4a68      	ldr	r2, [pc, #416]	; (80074fc <scaraInitDuty+0xc84>)
 800735a:	5cd1      	ldrb	r1, [r2, r3]
 800735c:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007360:	f107 0208 	add.w	r2, r7, #8
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4413      	add	r3, r2
 8007368:	ed93 7b00 	vldr	d7, [r3]
 800736c:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007370:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007374:	eeb0 2a45 	vmov.f32	s4, s10
 8007378:	eef0 2a65 	vmov.f32	s5, s11
 800737c:	eeb0 1a46 	vmov.f32	s2, s12
 8007380:	eef0 1a66 	vmov.f32	s3, s13
 8007384:	2200      	movs	r2, #0
 8007386:	eeb0 0a47 	vmov.f32	s0, s14
 800738a:	eef0 0a67 	vmov.f32	s1, s15
 800738e:	f001 ff5f 	bl	8009250 <scaraInitLSPB>
 8007392:	4603      	mov	r3, r0
 8007394:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007398:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800739c:	3301      	adds	r3, #1
 800739e:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80073a2:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d9be      	bls.n	8007328 <scaraInitDuty+0xab0>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 80073aa:	4b53      	ldr	r3, [pc, #332]	; (80074f8 <scaraInitDuty+0xc80>)
 80073ac:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	f04f 0400 	mov.w	r4, #0
 80073b8:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 80073c2:	e02d      	b.n	8007420 <scaraInitDuty+0xba8>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80073c4:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80073c8:	494b      	ldr	r1, [pc, #300]	; (80074f8 <scaraInitDuty+0xc80>)
 80073ca:	4613      	mov	r3, r2
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	4413      	add	r3, r2
 80073d0:	01db      	lsls	r3, r3, #7
 80073d2:	440b      	add	r3, r1
 80073d4:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80073d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073dc:	4b46      	ldr	r3, [pc, #280]	; (80074f8 <scaraInitDuty+0xc80>)
 80073de:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80073e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073e6:	461a      	mov	r2, r3
 80073e8:	4623      	mov	r3, r4
 80073ea:	f7f9 fb95 	bl	8000b18 <__aeabi_dcmpgt>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d010      	beq.n	8007416 <scaraInitDuty+0xb9e>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80073f4:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80073f8:	493f      	ldr	r1, [pc, #252]	; (80074f8 <scaraInitDuty+0xc80>)
 80073fa:	4613      	mov	r3, r2
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	4413      	add	r3, r2
 8007400:	01db      	lsls	r3, r3, #7
 8007402:	440b      	add	r3, r1
 8007404:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007408:	e9d3 3400 	ldrd	r3, r4, [r3]
 800740c:	4a3a      	ldr	r2, [pc, #232]	; (80074f8 <scaraInitDuty+0xc80>)
 800740e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8007412:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 8007416:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800741a:	3301      	adds	r3, #1
 800741c:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007420:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007424:	2b03      	cmp	r3, #3
 8007426:	d9cd      	bls.n	80073c4 <scaraInitDuty+0xb4c>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007428:	2300      	movs	r3, #0
 800742a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800742e:	e04d      	b.n	80074cc <scaraInitDuty+0xc54>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007430:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007434:	4930      	ldr	r1, [pc, #192]	; (80074f8 <scaraInitDuty+0xc80>)
 8007436:	4613      	mov	r3, r2
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4413      	add	r3, r2
 800743c:	01db      	lsls	r3, r3, #7
 800743e:	440b      	add	r3, r1
 8007440:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8007448:	f897 019b 	ldrb.w	r0, [r7, #411]	; 0x19b
 800744c:	4b2a      	ldr	r3, [pc, #168]	; (80074f8 <scaraInitDuty+0xc80>)
 800744e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007452:	e9d3 1200 	ldrd	r1, r2, [r3]
 8007456:	4c28      	ldr	r4, [pc, #160]	; (80074f8 <scaraInitDuty+0xc80>)
 8007458:	4603      	mov	r3, r0
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4403      	add	r3, r0
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	4423      	add	r3, r4
 8007462:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007466:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800746a:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	01db      	lsls	r3, r3, #7
 8007476:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800747a:	4a1f      	ldr	r2, [pc, #124]	; (80074f8 <scaraInitDuty+0xc80>)
 800747c:	1898      	adds	r0, r3, r2
 800747e:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007482:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <scaraInitDuty+0xc84>)
 8007484:	5cd1      	ldrb	r1, [r2, r3]
 8007486:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800748a:	f107 0208 	add.w	r2, r7, #8
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	4413      	add	r3, r2
 8007492:	ed93 7b00 	vldr	d7, [r3]
 8007496:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800749a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800749e:	eeb0 2a45 	vmov.f32	s4, s10
 80074a2:	eef0 2a65 	vmov.f32	s5, s11
 80074a6:	eeb0 1a46 	vmov.f32	s2, s12
 80074aa:	eef0 1a66 	vmov.f32	s3, s13
 80074ae:	2201      	movs	r2, #1
 80074b0:	eeb0 0a47 	vmov.f32	s0, s14
 80074b4:	eef0 0a67 	vmov.f32	s1, s15
 80074b8:	f001 feca 	bl	8009250 <scaraInitLSPB>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80074c2:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80074c6:	3301      	adds	r3, #1
 80074c8:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 80074cc:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d9ad      	bls.n	8007430 <scaraInitDuty+0xbb8>
 80074d4:	e151      	b.n	800777a <scaraInitDuty+0xf02>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80074d6:	2308      	movs	r3, #8
 80074d8:	e17d      	b.n	80077d6 <scaraInitDuty+0xf5e>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80074da:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	f040 8147 	bne.w	8007772 <scaraInitDuty+0xefa>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80074e4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d160      	bne.n	80075ae <scaraInitDuty+0xd36>
				for ( uint8_t i = 0; i < 4; i++) {
 80074ec:	2300      	movs	r3, #0
 80074ee:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 80074f2:	e050      	b.n	8007596 <scaraInitDuty+0xd1e>
 80074f4:	2000eab0 	.word	0x2000eab0
 80074f8:	2000def0 	.word	0x2000def0
 80074fc:	20002084 	.word	0x20002084
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007500:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007504:	49b9      	ldr	r1, [pc, #740]	; (80077ec <scaraInitDuty+0xf74>)
 8007506:	4613      	mov	r3, r2
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	4413      	add	r3, r2
 800750c:	01db      	lsls	r3, r3, #7
 800750e:	440b      	add	r3, r1
 8007510:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007514:	2201      	movs	r2, #1
 8007516:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8007518:	f897 019a 	ldrb.w	r0, [r7, #410]	; 0x19a
 800751c:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8007520:	4cb2      	ldr	r4, [pc, #712]	; (80077ec <scaraInitDuty+0xf74>)
 8007522:	4603      	mov	r3, r0
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	4403      	add	r3, r0
 8007528:	01db      	lsls	r3, r3, #7
 800752a:	4423      	add	r3, r4
 800752c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007530:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007534:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007538:	4613      	mov	r3, r2
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	4413      	add	r3, r2
 800753e:	01db      	lsls	r3, r3, #7
 8007540:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007544:	4aa9      	ldr	r2, [pc, #676]	; (80077ec <scaraInitDuty+0xf74>)
 8007546:	1898      	adds	r0, r3, r2
 8007548:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800754c:	4aa8      	ldr	r2, [pc, #672]	; (80077f0 <scaraInitDuty+0xf78>)
 800754e:	5cd1      	ldrb	r1, [r2, r3]
 8007550:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007554:	f107 0208 	add.w	r2, r7, #8
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	4413      	add	r3, r2
 800755c:	ed93 7b00 	vldr	d7, [r3]
 8007560:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007564:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007568:	eeb0 2a45 	vmov.f32	s4, s10
 800756c:	eef0 2a65 	vmov.f32	s5, s11
 8007570:	eeb0 1a46 	vmov.f32	s2, s12
 8007574:	eef0 1a66 	vmov.f32	s3, s13
 8007578:	2201      	movs	r2, #1
 800757a:	eeb0 0a47 	vmov.f32	s0, s14
 800757e:	eef0 0a67 	vmov.f32	s1, s15
 8007582:	f002 fa43 	bl	8009a0c <scaraInitScurve>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 800758c:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007590:	3301      	adds	r3, #1
 8007592:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007596:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800759a:	2b03      	cmp	r3, #3
 800759c:	d9b0      	bls.n	8007500 <scaraInitDuty+0xc88>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				}
				myDUTY.time_total = command.time_total;
 800759e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80075a2:	4a92      	ldr	r2, [pc, #584]	; (80077ec <scaraInitDuty+0xf74>)
 80075a4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80075a8:	e9c2 3400 	strd	r3, r4, [r2]
 80075ac:	e0e5      	b.n	800777a <scaraInitDuty+0xf02>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80075ae:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f040 80db 	bne.w	800776e <scaraInitDuty+0xef6>
				for ( uint8_t i = 0; i < 4; i++) {
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 80075be:	e03c      	b.n	800763a <scaraInitDuty+0xdc2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80075c0:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 80075c4:	4989      	ldr	r1, [pc, #548]	; (80077ec <scaraInitDuty+0xf74>)
 80075c6:	4613      	mov	r3, r2
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	4413      	add	r3, r2
 80075cc:	01db      	lsls	r3, r3, #7
 80075ce:	440b      	add	r3, r1
 80075d0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80075d4:	2201      	movs	r2, #1
 80075d6:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80075d8:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 80075dc:	4613      	mov	r3, r2
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	4413      	add	r3, r2
 80075e2:	01db      	lsls	r3, r3, #7
 80075e4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80075e8:	4a80      	ldr	r2, [pc, #512]	; (80077ec <scaraInitDuty+0xf74>)
 80075ea:	1898      	adds	r0, r3, r2
 80075ec:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80075f0:	4a7f      	ldr	r2, [pc, #508]	; (80077f0 <scaraInitDuty+0xf78>)
 80075f2:	5cd1      	ldrb	r1, [r2, r3]
 80075f4:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80075f8:	f107 0208 	add.w	r2, r7, #8
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	4413      	add	r3, r2
 8007600:	ed93 7b00 	vldr	d7, [r3]
 8007604:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007608:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800760c:	eeb0 2a45 	vmov.f32	s4, s10
 8007610:	eef0 2a65 	vmov.f32	s5, s11
 8007614:	eeb0 1a46 	vmov.f32	s2, s12
 8007618:	eef0 1a66 	vmov.f32	s3, s13
 800761c:	2200      	movs	r2, #0
 800761e:	eeb0 0a47 	vmov.f32	s0, s14
 8007622:	eef0 0a67 	vmov.f32	s1, s15
 8007626:	f002 f9f1 	bl	8009a0c <scaraInitScurve>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007630:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007634:	3301      	adds	r3, #1
 8007636:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 800763a:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 800763e:	2b03      	cmp	r3, #3
 8007640:	d9be      	bls.n	80075c0 <scaraInitDuty+0xd48>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007642:	4b6a      	ldr	r3, [pc, #424]	; (80077ec <scaraInitDuty+0xf74>)
 8007644:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	f04f 0400 	mov.w	r4, #0
 8007650:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 8007654:	2300      	movs	r3, #0
 8007656:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 800765a:	e02d      	b.n	80076b8 <scaraInitDuty+0xe40>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 800765c:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007660:	4962      	ldr	r1, [pc, #392]	; (80077ec <scaraInitDuty+0xf74>)
 8007662:	4613      	mov	r3, r2
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	4413      	add	r3, r2
 8007668:	01db      	lsls	r3, r3, #7
 800766a:	440b      	add	r3, r1
 800766c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007674:	4b5d      	ldr	r3, [pc, #372]	; (80077ec <scaraInitDuty+0xf74>)
 8007676:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800767a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800767e:	461a      	mov	r2, r3
 8007680:	4623      	mov	r3, r4
 8007682:	f7f9 fa49 	bl	8000b18 <__aeabi_dcmpgt>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d010      	beq.n	80076ae <scaraInitDuty+0xe36>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800768c:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007690:	4956      	ldr	r1, [pc, #344]	; (80077ec <scaraInitDuty+0xf74>)
 8007692:	4613      	mov	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	01db      	lsls	r3, r3, #7
 800769a:	440b      	add	r3, r1
 800769c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076a4:	4a51      	ldr	r2, [pc, #324]	; (80077ec <scaraInitDuty+0xf74>)
 80076a6:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80076aa:	e9c2 3400 	strd	r3, r4, [r2]
				for ( uint8_t i = 0; i < 4; i++) {
 80076ae:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80076b2:	3301      	adds	r3, #1
 80076b4:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 80076b8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d9cd      	bls.n	800765c <scaraInitDuty+0xde4>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80076c0:	2300      	movs	r3, #0
 80076c2:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 80076c6:	e04d      	b.n	8007764 <scaraInitDuty+0xeec>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80076c8:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 80076cc:	4947      	ldr	r1, [pc, #284]	; (80077ec <scaraInitDuty+0xf74>)
 80076ce:	4613      	mov	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	01db      	lsls	r3, r3, #7
 80076d6:	440b      	add	r3, r1
 80076d8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80076dc:	2201      	movs	r2, #1
 80076de:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 80076e0:	f897 0197 	ldrb.w	r0, [r7, #407]	; 0x197
 80076e4:	4b41      	ldr	r3, [pc, #260]	; (80077ec <scaraInitDuty+0xf74>)
 80076e6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80076ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80076ee:	4c3f      	ldr	r4, [pc, #252]	; (80077ec <scaraInitDuty+0xf74>)
 80076f0:	4603      	mov	r3, r0
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	4403      	add	r3, r0
 80076f6:	01db      	lsls	r3, r3, #7
 80076f8:	4423      	add	r3, r4
 80076fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076fe:	e9c3 1200 	strd	r1, r2, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007702:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007706:	4613      	mov	r3, r2
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	4413      	add	r3, r2
 800770c:	01db      	lsls	r3, r3, #7
 800770e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007712:	4a36      	ldr	r2, [pc, #216]	; (80077ec <scaraInitDuty+0xf74>)
 8007714:	1898      	adds	r0, r3, r2
 8007716:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800771a:	4a35      	ldr	r2, [pc, #212]	; (80077f0 <scaraInitDuty+0xf78>)
 800771c:	5cd1      	ldrb	r1, [r2, r3]
 800771e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007722:	f107 0208 	add.w	r2, r7, #8
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4413      	add	r3, r2
 800772a:	ed93 7b00 	vldr	d7, [r3]
 800772e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007732:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007736:	eeb0 2a45 	vmov.f32	s4, s10
 800773a:	eef0 2a65 	vmov.f32	s5, s11
 800773e:	eeb0 1a46 	vmov.f32	s2, s12
 8007742:	eef0 1a66 	vmov.f32	s3, s13
 8007746:	2201      	movs	r2, #1
 8007748:	eeb0 0a47 	vmov.f32	s0, s14
 800774c:	eef0 0a67 	vmov.f32	s1, s15
 8007750:	f002 f95c 	bl	8009a0c <scaraInitScurve>
 8007754:	4603      	mov	r3, r0
 8007756:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 800775a:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800775e:	3301      	adds	r3, #1
 8007760:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007764:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007768:	2b03      	cmp	r3, #3
 800776a:	d9ad      	bls.n	80076c8 <scaraInitDuty+0xe50>
 800776c:	e005      	b.n	800777a <scaraInitDuty+0xf02>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800776e:	2308      	movs	r3, #8
 8007770:	e031      	b.n	80077d6 <scaraInitDuty+0xf5e>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8007772:	2305      	movs	r3, #5
 8007774:	e02f      	b.n	80077d6 <scaraInitDuty+0xf5e>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007776:	2302      	movs	r3, #2
 8007778:	e02d      	b.n	80077d6 <scaraInitDuty+0xf5e>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 800777a:	4a1e      	ldr	r2, [pc, #120]	; (80077f4 <scaraInitDuty+0xf7c>)
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	f04f 0400 	mov.w	r4, #0
 8007784:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8007788:	4b18      	ldr	r3, [pc, #96]	; (80077ec <scaraInitDuty+0xf74>)
 800778a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800778e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007792:	4a18      	ldr	r2, [pc, #96]	; (80077f4 <scaraInitDuty+0xf7c>)
 8007794:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8007798:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <scaraInitDuty+0xf80>)
 800779a:	f04f 0300 	mov.w	r3, #0
 800779e:	f04f 0400 	mov.w	r4, #0
 80077a2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 80077a6:	4b11      	ldr	r3, [pc, #68]	; (80077ec <scaraInitDuty+0xf74>)
 80077a8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80077ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077b0:	4a11      	ldr	r2, [pc, #68]	; (80077f8 <scaraInitDuty+0xf80>)
 80077b2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 80077b6:	4a11      	ldr	r2, [pc, #68]	; (80077fc <scaraInitDuty+0xf84>)
 80077b8:	f04f 0300 	mov.w	r3, #0
 80077bc:	f04f 0400 	mov.w	r4, #0
 80077c0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 80077c4:	4b09      	ldr	r3, [pc, #36]	; (80077ec <scaraInitDuty+0xf74>)
 80077c6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80077ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077ce:	4a0b      	ldr	r2, [pc, #44]	; (80077fc <scaraInitDuty+0xf84>)
 80077d0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80077dc:	46bd      	mov	sp, r7
 80077de:	ecbd 8b02 	vpop	{d8}
 80077e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80077e6:	b004      	add	sp, #16
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	2000def0 	.word	0x2000def0
 80077f0:	20002084 	.word	0x20002084
 80077f4:	2000eab0 	.word	0x2000eab0
 80077f8:	2000ec30 	.word	0x2000ec30
 80077fc:	2000eb70 	.word	0x2000eb70

08007800 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8007800:	b082      	sub	sp, #8
 8007802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007804:	b0b1      	sub	sp, #196	; 0xc4
 8007806:	af2e      	add	r7, sp, #184	; 0xb8
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	f107 0120 	add.w	r1, r7, #32
 800780e:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8007812:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8007816:	4668      	mov	r0, sp
 8007818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800781c:	22b8      	movs	r2, #184	; 0xb8
 800781e:	4619      	mov	r1, r3
 8007820:	f00e faac 	bl	8015d7c <memcpy>
 8007824:	f107 0320 	add.w	r3, r7, #32
 8007828:	cb0c      	ldmia	r3, {r2, r3}
 800782a:	4620      	mov	r0, r4
 800782c:	f7fd fcf8 	bl	8005220 <kinematicInverse>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007836:	2307      	movs	r3, #7
 8007838:	e09e      	b.n	8007978 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 800783a:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8007844:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 800784e:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8007858:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8007862:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 800786c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8007876:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800787a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800787e:	461a      	mov	r2, r3
 8007880:	4623      	mov	r3, r4
 8007882:	f7f8 fd01 	bl	8000288 <__aeabi_dsub>
 8007886:	4603      	mov	r3, r0
 8007888:	460c      	mov	r4, r1
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007890:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007894:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007898:	461a      	mov	r2, r3
 800789a:	4623      	mov	r3, r4
 800789c:	f7f8 fcf4 	bl	8000288 <__aeabi_dsub>
 80078a0:	4603      	mov	r3, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 80078aa:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80078ae:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80078b2:	461a      	mov	r2, r3
 80078b4:	4623      	mov	r3, r4
 80078b6:	f7f8 fce7 	bl	8000288 <__aeabi_dsub>
 80078ba:	4603      	mov	r3, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80078d0:	461a      	mov	r2, r3
 80078d2:	4623      	mov	r3, r4
 80078d4:	f7f8 fe90 	bl	80005f8 <__aeabi_dmul>
 80078d8:	4603      	mov	r3, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	461d      	mov	r5, r3
 80078de:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80078ec:	461a      	mov	r2, r3
 80078ee:	4623      	mov	r3, r4
 80078f0:	f7f8 fe82 	bl	80005f8 <__aeabi_dmul>
 80078f4:	4603      	mov	r3, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	461a      	mov	r2, r3
 80078fa:	4623      	mov	r3, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	4631      	mov	r1, r6
 8007900:	f7f8 fcc4 	bl	800028c <__adddf3>
 8007904:	4603      	mov	r3, r0
 8007906:	460c      	mov	r4, r1
 8007908:	461d      	mov	r5, r3
 800790a:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8007918:	461a      	mov	r2, r3
 800791a:	4623      	mov	r3, r4
 800791c:	f7f8 fe6c 	bl	80005f8 <__aeabi_dmul>
 8007920:	4603      	mov	r3, r0
 8007922:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007924:	461a      	mov	r2, r3
 8007926:	4623      	mov	r3, r4
 8007928:	4628      	mov	r0, r5
 800792a:	4631      	mov	r1, r6
 800792c:	f7f8 fcae 	bl	800028c <__adddf3>
 8007930:	4603      	mov	r3, r0
 8007932:	460c      	mov	r4, r1
 8007934:	ec44 3b17 	vmov	d7, r3, r4
 8007938:	eeb0 0a47 	vmov.f32	s0, s14
 800793c:	eef0 0a67 	vmov.f32	s1, s15
 8007940:	f012 f924 	bl	8019b8c <sqrt>
 8007944:	eeb0 7a40 	vmov.f32	s14, s0
 8007948:	eef0 7a60 	vmov.f32	s15, s1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007982:	b002      	add	sp, #8
 8007984:	4770      	bx	lr
	...

08007988 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007988:	b082      	sub	sp, #8
 800798a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798e:	b0c5      	sub	sp, #276	; 0x114
 8007990:	af2e      	add	r7, sp, #184	; 0xb8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007998:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 800799c:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 80079a0:	4668      	mov	r0, sp
 80079a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80079a6:	22b8      	movs	r2, #184	; 0xb8
 80079a8:	4619      	mov	r1, r3
 80079aa:	f00e f9e7 	bl	8015d7c <memcpy>
 80079ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80079b2:	cb0c      	ldmia	r3, {r2, r3}
 80079b4:	4620      	mov	r0, r4
 80079b6:	f7fd fc33 	bl	8005220 <kinematicInverse>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80079c0:	2307      	movs	r3, #7
 80079c2:	e187      	b.n	8007cd4 <scaraInitCircle+0x34c>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 80079c4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d006      	beq.n	80079da <scaraInitCircle+0x52>
 80079cc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d001      	beq.n	80079da <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 80079d6:	2306      	movs	r3, #6
 80079d8:	e17c      	b.n	8007cd4 <scaraInitCircle+0x34c>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 80079da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079de:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80079e2:	461a      	mov	r2, r3
 80079e4:	4623      	mov	r3, r4
 80079e6:	f7f8 fc4f 	bl	8000288 <__aeabi_dsub>
 80079ea:	4603      	mov	r3, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 80079f2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80079f6:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80079fa:	461a      	mov	r2, r3
 80079fc:	4623      	mov	r3, r4
 80079fe:	f7f8 fc43 	bl	8000288 <__aeabi_dsub>
 8007a02:	4603      	mov	r3, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007a0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007a0e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8007a12:	461a      	mov	r2, r3
 8007a14:	4623      	mov	r3, r4
 8007a16:	f7f8 fc37 	bl	8000288 <__aeabi_dsub>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007a22:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007a26:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	4623      	mov	r3, r4
 8007a2e:	f7f8 fc2b 	bl	8000288 <__aeabi_dsub>
 8007a32:	4603      	mov	r3, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007a3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a42:	f7f8 fdd9 	bl	80005f8 <__aeabi_dmul>
 8007a46:	4603      	mov	r3, r0
 8007a48:	460c      	mov	r4, r1
 8007a4a:	469a      	mov	sl, r3
 8007a4c:	46a3      	mov	fp, r4
 8007a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a56:	f7f8 fdcf 	bl	80005f8 <__aeabi_dmul>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4623      	mov	r3, r4
 8007a62:	4650      	mov	r0, sl
 8007a64:	4659      	mov	r1, fp
 8007a66:	f7f8 fc11 	bl	800028c <__adddf3>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	ec44 3b17 	vmov	d7, r3, r4
 8007a72:	eeb0 0a47 	vmov.f32	s0, s14
 8007a76:	eef0 0a67 	vmov.f32	s1, s15
 8007a7a:	f012 f887 	bl	8019b8c <sqrt>
 8007a7e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007a82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a8a:	f7f8 fdb5 	bl	80005f8 <__aeabi_dmul>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	460c      	mov	r4, r1
 8007a92:	469a      	mov	sl, r3
 8007a94:	46a3      	mov	fp, r4
 8007a96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	4650      	mov	r0, sl
 8007aac:	4659      	mov	r1, fp
 8007aae:	f7f8 fbed 	bl	800028c <__adddf3>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	ec44 3b17 	vmov	d7, r3, r4
 8007aba:	eeb0 0a47 	vmov.f32	s0, s14
 8007abe:	eef0 0a67 	vmov.f32	s1, s15
 8007ac2:	f012 f863 	bl	8019b8c <sqrt>
 8007ac6:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007ad2:	f7f8 fbd9 	bl	8000288 <__aeabi_dsub>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	4698      	mov	r8, r3
 8007adc:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	4b84      	ldr	r3, [pc, #528]	; (8007cf8 <scaraInitCircle+0x370>)
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	4649      	mov	r1, r9
 8007aea:	f7f9 f815 	bl	8000b18 <__aeabi_dcmpgt>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <scaraInitCircle+0x170>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007af4:	2306      	movs	r3, #6
 8007af6:	e0ed      	b.n	8007cd4 <scaraInitCircle+0x34c>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007af8:	a37b      	add	r3, pc, #492	; (adr r3, 8007ce8 <scaraInitCircle+0x360>)
 8007afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007b02:	f7f8 ffeb 	bl	8000adc <__aeabi_dcmplt>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d109      	bne.n	8007b20 <scaraInitCircle+0x198>
 8007b0c:	a376      	add	r3, pc, #472	; (adr r3, 8007ce8 <scaraInitCircle+0x360>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007b16:	f7f8 ffe1 	bl	8000adc <__aeabi_dcmplt>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <scaraInitCircle+0x19c>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007b20:	2306      	movs	r3, #6
 8007b22:	e0d7      	b.n	8007cd4 <scaraInitCircle+0x34c>
	}

	angle_start = atan2(y_start, x_start);
 8007b24:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007b28:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007b2c:	f012 f82c 	bl	8019b88 <atan2>
 8007b30:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007b34:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007b38:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007b3c:	f012 f824 	bl	8019b88 <atan2>
 8007b40:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b4c:	f7f8 fb9c 	bl	8000288 <__aeabi_dsub>
 8007b50:	4603      	mov	r3, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b64:	f7f8 ffba 	bl	8000adc <__aeabi_dcmplt>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d015      	beq.n	8007b9a <scaraInitCircle+0x212>
 8007b6e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd11      	ble.n	8007b9a <scaraInitCircle+0x212>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b78:	603b      	str	r3, [r7, #0]
 8007b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b80:	607b      	str	r3, [r7, #4]
 8007b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b86:	a15a      	add	r1, pc, #360	; (adr r1, 8007cf0 <scaraInitCircle+0x368>)
 8007b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b8c:	f7f8 fb7c 	bl	8000288 <__aeabi_dsub>
 8007b90:	4603      	mov	r3, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8007b98:	e01d      	b.n	8007bd6 <scaraInitCircle+0x24e>
	}else if(delta_angle > 0 && dir < 0){
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ba6:	f7f8 ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d012      	beq.n	8007bd6 <scaraInitCircle+0x24e>
 8007bb0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	da0e      	bge.n	8007bd6 <scaraInitCircle+0x24e>
		delta_angle = 2*PI - fabs(delta_angle);
 8007bb8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8007bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbc:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8007bc0:	462a      	mov	r2, r5
 8007bc2:	4633      	mov	r3, r6
 8007bc4:	a14a      	add	r1, pc, #296	; (adr r1, 8007cf0 <scaraInitCircle+0x368>)
 8007bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bca:	f7f8 fb5d 	bl	8000288 <__aeabi_dsub>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8007bd6:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8007bda:	f7f8 fca3 	bl	8000524 <__aeabi_i2d>
 8007bde:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007be2:	f7f8 fd09 	bl	80005f8 <__aeabi_dmul>
 8007be6:	4603      	mov	r3, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	4618      	mov	r0, r3
 8007bec:	4621      	mov	r1, r4
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	f7f8 ff71 	bl	8000adc <__aeabi_dcmplt>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <scaraInitCircle+0x284>
		delta_angle = fabs(delta_angle);
 8007c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c02:	653b      	str	r3, [r7, #80]	; 0x50
 8007c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c0a:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8007c0c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007c10:	b25a      	sxtb	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007c1c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007c26:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007c30:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007c3a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8007c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c46:	f7f8 fcd7 	bl	80005f8 <__aeabi_dmul>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8007c54:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8007c5e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8007c68:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8007c72:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8007c7c:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8007c86:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8007c90:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8007c9a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8007ca4:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	375c      	adds	r7, #92	; 0x5c
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cde:	b002      	add	sp, #8
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	9999999a 	.word	0x9999999a
 8007cec:	3fb99999 	.word	0x3fb99999
 8007cf0:	60000000 	.word	0x60000000
 8007cf4:	401921fb 	.word	0x401921fb
 8007cf8:	3ff00000 	.word	0x3ff00000

08007cfc <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6178      	str	r0, [r7, #20]
 8007d04:	460b      	mov	r3, r1
 8007d06:	ed87 0b02 	vstr	d0, [r7, #8]
 8007d0a:	ed87 1b00 	vstr	d1, [r7]
 8007d0e:	74fb      	strb	r3, [r7, #19]
 8007d10:	4613      	mov	r3, r2
 8007d12:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007d14:	7cfb      	ldrb	r3, [r7, #19]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d004      	beq.n	8007d24 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8007d1a:	7cfb      	ldrb	r3, [r7, #19]
 8007d1c:	2b05      	cmp	r3, #5
 8007d1e:	d001      	beq.n	8007d24 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007d20:	2306      	movs	r3, #6
 8007d22:	e034      	b.n	8007d8e <scaraInitLinear+0x92>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007d24:	7cbb      	ldrb	r3, [r7, #18]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d110      	bne.n	8007d4c <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8007d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d32:	f7f8 fd8b 	bl	800084c <__aeabi_ddiv>
 8007d36:	4603      	mov	r3, r0
 8007d38:	460c      	mov	r4, r1
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->Tf = additional_factor;
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007d46:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8007d4a:	e01f      	b.n	8007d8c <scaraInitLinear+0x90>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8007d4c:	7cbb      	ldrb	r3, [r7, #18]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d11a      	bne.n	8007d88 <scaraInitLinear+0x8c>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <scaraInitLinear+0x9c>)
 8007d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d5c:	f7f8 fc4c 	bl	80005f8 <__aeabi_dmul>
 8007d60:	4603      	mov	r3, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->Tf = total_s / linear->constant_v;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007d70:	461a      	mov	r2, r3
 8007d72:	4623      	mov	r3, r4
 8007d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d78:	f7f8 fd68 	bl	800084c <__aeabi_ddiv>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8007d86:	e001      	b.n	8007d8c <scaraInitLinear+0x90>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007d88:	2306      	movs	r3, #6
 8007d8a:	e000      	b.n	8007d8e <scaraInitLinear+0x92>
	}

	return SCARA_STATUS_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd90      	pop	{r4, r7, pc}
 8007d96:	bf00      	nop
 8007d98:	40877000 	.word	0x40877000
 8007d9c:	00000000 	.word	0x00000000

08007da0 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8007da0:	b5b0      	push	{r4, r5, r7, lr}
 8007da2:	b096      	sub	sp, #88	; 0x58
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	61f8      	str	r0, [r7, #28]
 8007da8:	460b      	mov	r3, r1
 8007daa:	ed87 0b04 	vstr	d0, [r7, #16]
 8007dae:	ed87 1b02 	vstr	d1, [r7, #8]
 8007db2:	ed87 2b00 	vstr	d2, [r7]
 8007db6:	76fb      	strb	r3, [r7, #27]
 8007db8:	4613      	mov	r3, r2
 8007dba:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007dc8:	f7f8 fe88 	bl	8000adc <__aeabi_dcmplt>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <scaraInitLSPB1+0x46>
		total_s = -total_s;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007ddc:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	22ff      	movs	r2, #255	; 0xff
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	e002      	b.n	8007dec <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	2201      	movs	r2, #1
 8007dea:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007dec:	7efb      	ldrb	r3, [r7, #27]
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d12c      	bne.n	8007e4c <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007df2:	7ebb      	ldrb	r3, [r7, #26]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d10f      	bne.n	8007e18 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007df8:	f04f 0200 	mov.w	r2, #0
 8007dfc:	4b98      	ldr	r3, [pc, #608]	; (8008060 <scaraInitLSPB1+0x2c0>)
 8007dfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e02:	f7f8 fbf9 	bl	80005f8 <__aeabi_dmul>
 8007e06:	4603      	mov	r3, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007e0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007e12:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007e16:	e073      	b.n	8007f00 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007e18:	7ebb      	ldrb	r3, [r7, #26]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d170      	bne.n	8007f00 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007e1e:	f04f 0200 	mov.w	r2, #0
 8007e22:	4b90      	ldr	r3, [pc, #576]	; (8008064 <scaraInitLSPB1+0x2c4>)
 8007e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e28:	f7f8 fbe6 	bl	80005f8 <__aeabi_dmul>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	4b89      	ldr	r3, [pc, #548]	; (8008060 <scaraInitLSPB1+0x2c0>)
 8007e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e3e:	f7f8 fbdb 	bl	80005f8 <__aeabi_dmul>
 8007e42:	4603      	mov	r3, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8007e4a:	e059      	b.n	8007f00 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007e4c:	7efb      	ldrb	r3, [r7, #27]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d112      	bne.n	8007e78 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007e52:	7ebb      	ldrb	r3, [r7, #26]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d153      	bne.n	8007f00 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007e58:	a373      	add	r3, pc, #460	; (adr r3, 8008028 <scaraInitLSPB1+0x288>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e62:	f7f8 fbc9 	bl	80005f8 <__aeabi_dmul>
 8007e66:	4603      	mov	r3, r0
 8007e68:	460c      	mov	r4, r1
 8007e6a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007e6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007e72:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007e76:	e043      	b.n	8007f00 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8007e78:	7efb      	ldrb	r3, [r7, #27]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d112      	bne.n	8007ea4 <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007e7e:	7ebb      	ldrb	r3, [r7, #26]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d13d      	bne.n	8007f00 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8007e84:	a368      	add	r3, pc, #416	; (adr r3, 8008028 <scaraInitLSPB1+0x288>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e8e:	f7f8 fbb3 	bl	80005f8 <__aeabi_dmul>
 8007e92:	4603      	mov	r3, r0
 8007e94:	460c      	mov	r4, r1
 8007e96:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007e9a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007e9e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007ea2:	e02d      	b.n	8007f00 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 8007ea4:	7efb      	ldrb	r3, [r7, #27]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d112      	bne.n	8007ed0 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007eaa:	7ebb      	ldrb	r3, [r7, #26]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d127      	bne.n	8007f00 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8007eb0:	a35f      	add	r3, pc, #380	; (adr r3, 8008030 <scaraInitLSPB1+0x290>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eba:	f7f8 fb9d 	bl	80005f8 <__aeabi_dmul>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007ec6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007eca:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007ece:	e017      	b.n	8007f00 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007ed0:	7efb      	ldrb	r3, [r7, #27]
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d112      	bne.n	8007efc <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8007ed6:	7ebb      	ldrb	r3, [r7, #26]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d111      	bne.n	8007f00 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007edc:	a356      	add	r3, pc, #344	; (adr r3, 8008038 <scaraInitLSPB1+0x298>)
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ee6:	f7f8 fb87 	bl	80005f8 <__aeabi_dmul>
 8007eea:	4603      	mov	r3, r0
 8007eec:	460c      	mov	r4, r1
 8007eee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007ef2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007ef6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007efa:	e001      	b.n	8007f00 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007efc:	2306      	movs	r3, #6
 8007efe:	e207      	b.n	8008310 <scaraInitLSPB1+0x570>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007f00:	7ebb      	ldrb	r3, [r7, #26]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	f040 80f6 	bne.w	80080f4 <scaraInitLSPB1+0x354>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8007f08:	a34d      	add	r3, pc, #308	; (adr r3, 8008040 <scaraInitLSPB1+0x2a0>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f12:	f7f8 fde3 	bl	8000adc <__aeabi_dcmplt>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01d      	beq.n	8007f58 <scaraInitLSPB1+0x1b8>
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	4b51      	ldr	r3, [pc, #324]	; (8008068 <scaraInitLSPB1+0x2c8>)
 8007f22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f26:	f7f8 fdf7 	bl	8000b18 <__aeabi_dcmpgt>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d013      	beq.n	8007f58 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	4b4d      	ldr	r3, [pc, #308]	; (800806c <scaraInitLSPB1+0x2cc>)
 8007f36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f3a:	f7f8 fb5d 	bl	80005f8 <__aeabi_dmul>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	460c      	mov	r4, r1
 8007f42:	4618      	mov	r0, r3
 8007f44:	4621      	mov	r1, r4
 8007f46:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f4a:	f7f8 fc7f 	bl	800084c <__aeabi_ddiv>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	460c      	mov	r4, r1
 8007f52:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007f56:	e0a6      	b.n	80080a6 <scaraInitLSPB1+0x306>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8007f58:	a339      	add	r3, pc, #228	; (adr r3, 8008040 <scaraInitLSPB1+0x2a0>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f62:	f7f8 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01d      	beq.n	8007fa8 <scaraInitLSPB1+0x208>
 8007f6c:	a336      	add	r3, pc, #216	; (adr r3, 8008048 <scaraInitLSPB1+0x2a8>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f76:	f7f8 fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d013      	beq.n	8007fa8 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8007f80:	f04f 0200 	mov.w	r2, #0
 8007f84:	4b39      	ldr	r3, [pc, #228]	; (800806c <scaraInitLSPB1+0x2cc>)
 8007f86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f8a:	f7f8 fb35 	bl	80005f8 <__aeabi_dmul>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	4618      	mov	r0, r3
 8007f94:	4621      	mov	r1, r4
 8007f96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f9a:	f7f8 fc57 	bl	800084c <__aeabi_ddiv>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8007fa6:	e07e      	b.n	80080a6 <scaraInitLSPB1+0x306>
		}else if(v_design < 0.1 && tf < 0.1){
 8007fa8:	a325      	add	r3, pc, #148	; (adr r3, 8008040 <scaraInitLSPB1+0x2a0>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007fb2:	f7f8 fd93 	bl	8000adc <__aeabi_dcmplt>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <scaraInitLSPB1+0x234>
 8007fbc:	a320      	add	r3, pc, #128	; (adr r3, 8008040 <scaraInitLSPB1+0x2a0>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007fc6:	f7f8 fd89 	bl	8000adc <__aeabi_dcmplt>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8007fd0:	2309      	movs	r3, #9
 8007fd2:	e19d      	b.n	8008310 <scaraInitLSPB1+0x570>
		}
		else{
			if(tf < 0.001){
 8007fd4:	a31e      	add	r3, pc, #120	; (adr r3, 8008050 <scaraInitLSPB1+0x2b0>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007fde:	f7f8 fd7d 	bl	8000adc <__aeabi_dcmplt>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007fe8:	2309      	movs	r3, #9
 8007fea:	e191      	b.n	8008310 <scaraInitLSPB1+0x570>
			}else{
				v_lim = total_s/tf;
 8007fec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ff0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ff4:	f7f8 fc2a 	bl	800084c <__aeabi_ddiv>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8008000:	a315      	add	r3, pc, #84	; (adr r3, 8008058 <scaraInitLSPB1+0x2b8>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800800a:	f7f8 faf5 	bl	80005f8 <__aeabi_dmul>
 800800e:	4603      	mov	r3, r0
 8008010:	460c      	mov	r4, r1
 8008012:	461a      	mov	r2, r3
 8008014:	4623      	mov	r3, r4
 8008016:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800801a:	f7f8 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d025      	beq.n	8008070 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008024:	230a      	movs	r3, #10
 8008026:	e173      	b.n	8008310 <scaraInitLSPB1+0x570>
 8008028:	14000000 	.word	0x14000000
 800802c:	4000f6f0 	.word	0x4000f6f0
 8008030:	00000000 	.word	0x00000000
 8008034:	405c2000 	.word	0x405c2000
 8008038:	6b259425 	.word	0x6b259425
 800803c:	40069b91 	.word	0x40069b91
 8008040:	9999999a 	.word	0x9999999a
 8008044:	3fb99999 	.word	0x3fb99999
 8008048:	33333333 	.word	0x33333333
 800804c:	3fc33333 	.word	0x3fc33333
 8008050:	d2f1a9fc 	.word	0xd2f1a9fc
 8008054:	3f50624d 	.word	0x3f50624d
 8008058:	9999999a 	.word	0x9999999a
 800805c:	3ff19999 	.word	0x3ff19999
 8008060:	40877000 	.word	0x40877000
 8008064:	407f4000 	.word	0x407f4000
 8008068:	40080000 	.word	0x40080000
 800806c:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008070:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	f7f8 f908 	bl	800028c <__adddf3>
 800807c:	4603      	mov	r3, r0
 800807e:	460c      	mov	r4, r1
 8008080:	461a      	mov	r2, r3
 8008082:	4623      	mov	r3, r4
 8008084:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008088:	f7f8 fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <scaraInitLSPB1+0x306>
				v_design = 2*v_lim;
 8008092:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	f7f8 f8f7 	bl	800028c <__adddf3>
 800809e:	4603      	mov	r3, r0
 80080a0:	460c      	mov	r4, r1
 80080a2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 80080a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080ae:	f7f8 fbcd 	bl	800084c <__aeabi_ddiv>
 80080b2:	4603      	mov	r3, r0
 80080b4:	460c      	mov	r4, r1
 80080b6:	461a      	mov	r2, r3
 80080b8:	4623      	mov	r3, r4
 80080ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80080be:	f7f8 f8e3 	bl	8000288 <__aeabi_dsub>
 80080c2:	4603      	mov	r3, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 80080ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80080d2:	f7f8 fbbb 	bl	800084c <__aeabi_ddiv>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 80080de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80080e6:	f7f8 f8cf 	bl	8000288 <__aeabi_dsub>
 80080ea:	4603      	mov	r3, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80080f2:	e0a9      	b.n	8008248 <scaraInitLSPB1+0x4a8>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80080f4:	7ebb      	ldrb	r3, [r7, #26]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f040 80a6 	bne.w	8008248 <scaraInitLSPB1+0x4a8>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 80080fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008104:	f7f8 fa78 	bl	80005f8 <__aeabi_dmul>
 8008108:	4603      	mov	r3, r0
 800810a:	460c      	mov	r4, r1
 800810c:	4625      	mov	r5, r4
 800810e:	461c      	mov	r4, r3
 8008110:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008114:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008118:	f7f8 fa6e 	bl	80005f8 <__aeabi_dmul>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4620      	mov	r0, r4
 8008122:	4629      	mov	r1, r5
 8008124:	f7f8 fcda 	bl	8000adc <__aeabi_dcmplt>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d058      	beq.n	80081e0 <scaraInitLSPB1+0x440>
			if(total_s/v_design < 0.3){ //td too small
 800812e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008132:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008136:	f7f8 fb89 	bl	800084c <__aeabi_ddiv>
 800813a:	4603      	mov	r3, r0
 800813c:	460c      	mov	r4, r1
 800813e:	4618      	mov	r0, r3
 8008140:	4621      	mov	r1, r4
 8008142:	a375      	add	r3, pc, #468	; (adr r3, 8008318 <scaraInitLSPB1+0x578>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <scaraInitLSPB1+0x3c8>
				//recalculate v_design
				v_design = total_s/0.3;
 8008152:	a371      	add	r3, pc, #452	; (adr r3, 8008318 <scaraInitLSPB1+0x578>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800815c:	f7f8 fb76 	bl	800084c <__aeabi_ddiv>
 8008160:	4603      	mov	r3, r0
 8008162:	460c      	mov	r4, r1
 8008164:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800816c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008170:	f7f8 fb6c 	bl	800084c <__aeabi_ddiv>
 8008174:	4603      	mov	r3, r0
 8008176:	460c      	mov	r4, r1
 8008178:	4618      	mov	r0, r3
 800817a:	4621      	mov	r1, r4
 800817c:	a368      	add	r3, pc, #416	; (adr r3, 8008320 <scaraInitLSPB1+0x580>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f7f8 fcab 	bl	8000adc <__aeabi_dcmplt>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <scaraInitLSPB1+0x402>
				//recalculate a_design
				a_design = v_design/0.1;
 800818c:	a364      	add	r3, pc, #400	; (adr r3, 8008320 <scaraInitLSPB1+0x580>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008196:	f7f8 fb59 	bl	800084c <__aeabi_ddiv>
 800819a:	4603      	mov	r3, r0
 800819c:	460c      	mov	r4, r1
 800819e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 80081a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80081aa:	f7f8 fb4f 	bl	800084c <__aeabi_ddiv>
 80081ae:	4603      	mov	r3, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 80081b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081be:	f7f8 fb45 	bl	800084c <__aeabi_ddiv>
 80081c2:	4603      	mov	r3, r0
 80081c4:	460c      	mov	r4, r1
 80081c6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 80081ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081d2:	f7f8 f85b 	bl	800028c <__adddf3>
 80081d6:	4603      	mov	r3, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80081de:	e033      	b.n	8008248 <scaraInitLSPB1+0x4a8>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 80081e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	f7f8 f850 	bl	800028c <__adddf3>
 80081ec:	4603      	mov	r3, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	4618      	mov	r0, r3
 80081f2:	4621      	mov	r1, r4
 80081f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081f8:	f7f8 fb28 	bl	800084c <__aeabi_ddiv>
 80081fc:	4603      	mov	r3, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800820c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008210:	f7f8 fb1c 	bl	800084c <__aeabi_ddiv>
 8008214:	4603      	mov	r3, r0
 8008216:	460c      	mov	r4, r1
 8008218:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008224:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008228:	f7f8 fb10 	bl	800084c <__aeabi_ddiv>
 800822c:	4603      	mov	r3, r0
 800822e:	460c      	mov	r4, r1
 8008230:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8008234:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008238:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800823c:	f7f8 fb06 	bl	800084c <__aeabi_ddiv>
 8008240:	4603      	mov	r3, r0
 8008242:	460c      	mov	r4, r1
 8008244:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8008248:	a337      	add	r3, pc, #220	; (adr r3, 8008328 <scaraInitLSPB1+0x588>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008252:	f7f8 fafb 	bl	800084c <__aeabi_ddiv>
 8008256:	4603      	mov	r3, r0
 8008258:	460c      	mov	r4, r1
 800825a:	4618      	mov	r0, r3
 800825c:	4621      	mov	r1, r4
 800825e:	f7f8 fcc3 	bl	8000be8 <__aeabi_d2f>
 8008262:	4603      	mov	r3, r0
 8008264:	ee00 3a10 	vmov	s0, r3
 8008268:	f011 fc4e 	bl	8019b08 <ceilf>
 800826c:	eef0 7a40 	vmov.f32	s15, s0
 8008270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008274:	ee17 3a90 	vmov	r3, s15
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	f04f 0300 	mov.w	r3, #0
 8008280:	f04f 0400 	mov.w	r4, #0
 8008284:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800828e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008298:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80082a2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80082ac:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80082b6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80082c0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80082ca:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	f04f 0400 	mov.w	r4, #0
 80082d8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	f04f 0400 	mov.w	r4, #0
 80082e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ee:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80082fc:	461a      	mov	r2, r3
 80082fe:	4623      	mov	r3, r4
 8008300:	f7f7 ffc2 	bl	8000288 <__aeabi_dsub>
 8008304:	4603      	mov	r3, r0
 8008306:	460c      	mov	r4, r1
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3758      	adds	r7, #88	; 0x58
 8008314:	46bd      	mov	sp, r7
 8008316:	bdb0      	pop	{r4, r5, r7, pc}
 8008318:	33333333 	.word	0x33333333
 800831c:	3fd33333 	.word	0x3fd33333
 8008320:	9999999a 	.word	0x9999999a
 8008324:	3fb99999 	.word	0x3fb99999
 8008328:	40000000 	.word	0x40000000
 800832c:	3f847ae1 	.word	0x3f847ae1

08008330 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 8008330:	b5b0      	push	{r4, r5, r7, lr}
 8008332:	b094      	sub	sp, #80	; 0x50
 8008334:	af00      	add	r7, sp, #0
 8008336:	61f8      	str	r0, [r7, #28]
 8008338:	460b      	mov	r3, r1
 800833a:	ed87 0b04 	vstr	d0, [r7, #16]
 800833e:	ed87 1b02 	vstr	d1, [r7, #8]
 8008342:	ed87 2b00 	vstr	d2, [r7]
 8008346:	76fb      	strb	r3, [r7, #27]
 8008348:	4613      	mov	r3, r2
 800834a:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008358:	f7f8 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <scaraInitScurve1+0x46>
		total_s = -total_s;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	613b      	str	r3, [r7, #16]
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800836c:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	22ff      	movs	r2, #255	; 0xff
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	e002      	b.n	800837c <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	2201      	movs	r2, #1
 800837a:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 800837c:	7efb      	ldrb	r3, [r7, #27]
 800837e:	2b04      	cmp	r3, #4
 8008380:	d12c      	bne.n	80083dc <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008382:	7ebb      	ldrb	r3, [r7, #26]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d10f      	bne.n	80083a8 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008388:	f04f 0200 	mov.w	r2, #0
 800838c:	4b90      	ldr	r3, [pc, #576]	; (80085d0 <scaraInitScurve1+0x2a0>)
 800838e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008392:	f7f8 f931 	bl	80005f8 <__aeabi_dmul>
 8008396:	4603      	mov	r3, r0
 8008398:	460c      	mov	r4, r1
 800839a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 800839e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80083a2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80083a6:	e073      	b.n	8008490 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 80083a8:	7ebb      	ldrb	r3, [r7, #26]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d170      	bne.n	8008490 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 80083ae:	f04f 0200 	mov.w	r2, #0
 80083b2:	4b88      	ldr	r3, [pc, #544]	; (80085d4 <scaraInitScurve1+0x2a4>)
 80083b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083b8:	f7f8 f91e 	bl	80005f8 <__aeabi_dmul>
 80083bc:	4603      	mov	r3, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	4b81      	ldr	r3, [pc, #516]	; (80085d0 <scaraInitScurve1+0x2a0>)
 80083ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083ce:	f7f8 f913 	bl	80005f8 <__aeabi_dmul>
 80083d2:	4603      	mov	r3, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80083da:	e059      	b.n	8008490 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 80083dc:	7efb      	ldrb	r3, [r7, #27]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d112      	bne.n	8008408 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80083e2:	7ebb      	ldrb	r3, [r7, #26]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d153      	bne.n	8008490 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80083e8:	a36d      	add	r3, pc, #436	; (adr r3, 80085a0 <scaraInitScurve1+0x270>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083f2:	f7f8 f901 	bl	80005f8 <__aeabi_dmul>
 80083f6:	4603      	mov	r3, r0
 80083f8:	460c      	mov	r4, r1
 80083fa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 80083fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008402:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8008406:	e043      	b.n	8008490 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 8008408:	7efb      	ldrb	r3, [r7, #27]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d112      	bne.n	8008434 <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800840e:	7ebb      	ldrb	r3, [r7, #26]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d13d      	bne.n	8008490 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8008414:	a362      	add	r3, pc, #392	; (adr r3, 80085a0 <scaraInitScurve1+0x270>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800841e:	f7f8 f8eb 	bl	80005f8 <__aeabi_dmul>
 8008422:	4603      	mov	r3, r0
 8008424:	460c      	mov	r4, r1
 8008426:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 800842a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800842e:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8008432:	e02d      	b.n	8008490 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 8008434:	7efb      	ldrb	r3, [r7, #27]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d112      	bne.n	8008460 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800843a:	7ebb      	ldrb	r3, [r7, #26]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d127      	bne.n	8008490 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8008440:	a359      	add	r3, pc, #356	; (adr r3, 80085a8 <scaraInitScurve1+0x278>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800844a:	f7f8 f8d5 	bl	80005f8 <__aeabi_dmul>
 800844e:	4603      	mov	r3, r0
 8008450:	460c      	mov	r4, r1
 8008452:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 8008456:	e9d7 3400 	ldrd	r3, r4, [r7]
 800845a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800845e:	e017      	b.n	8008490 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8008460:	7efb      	ldrb	r3, [r7, #27]
 8008462:	2b03      	cmp	r3, #3
 8008464:	d112      	bne.n	800848c <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008466:	7ebb      	ldrb	r3, [r7, #26]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d111      	bne.n	8008490 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 800846c:	a350      	add	r3, pc, #320	; (adr r3, 80085b0 <scaraInitScurve1+0x280>)
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008476:	f7f8 f8bf 	bl	80005f8 <__aeabi_dmul>
 800847a:	4603      	mov	r3, r0
 800847c:	460c      	mov	r4, r1
 800847e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			tf = additional_factor;
 8008482:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008486:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800848a:	e001      	b.n	8008490 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800848c:	2306      	movs	r3, #6
 800848e:	e252      	b.n	8008936 <scaraInitScurve1+0x606>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008490:	7ebb      	ldrb	r3, [r7, #26]
 8008492:	2b01      	cmp	r3, #1
 8008494:	f040 80fe 	bne.w	8008694 <scaraInitScurve1+0x364>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008498:	a347      	add	r3, pc, #284	; (adr r3, 80085b8 <scaraInitScurve1+0x288>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80084a2:	f7f8 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01d      	beq.n	80084e8 <scaraInitScurve1+0x1b8>
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	4b49      	ldr	r3, [pc, #292]	; (80085d8 <scaraInitScurve1+0x2a8>)
 80084b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084b6:	f7f8 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d013      	beq.n	80084e8 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	4b45      	ldr	r3, [pc, #276]	; (80085dc <scaraInitScurve1+0x2ac>)
 80084c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084ca:	f7f8 f895 	bl	80005f8 <__aeabi_dmul>
 80084ce:	4603      	mov	r3, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	4618      	mov	r0, r3
 80084d4:	4621      	mov	r1, r4
 80084d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084da:	f7f8 f9b7 	bl	800084c <__aeabi_ddiv>
 80084de:	4603      	mov	r3, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80084e6:	e096      	b.n	8008616 <scaraInitScurve1+0x2e6>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80084e8:	a333      	add	r3, pc, #204	; (adr r3, 80085b8 <scaraInitScurve1+0x288>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084f2:	f7f8 faf3 	bl	8000adc <__aeabi_dcmplt>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01d      	beq.n	8008538 <scaraInitScurve1+0x208>
 80084fc:	a330      	add	r3, pc, #192	; (adr r3, 80085c0 <scaraInitScurve1+0x290>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008506:	f7f8 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d013      	beq.n	8008538 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	4b31      	ldr	r3, [pc, #196]	; (80085dc <scaraInitScurve1+0x2ac>)
 8008516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800851a:	f7f8 f86d 	bl	80005f8 <__aeabi_dmul>
 800851e:	4603      	mov	r3, r0
 8008520:	460c      	mov	r4, r1
 8008522:	4618      	mov	r0, r3
 8008524:	4621      	mov	r1, r4
 8008526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800852a:	f7f8 f98f 	bl	800084c <__aeabi_ddiv>
 800852e:	4603      	mov	r3, r0
 8008530:	460c      	mov	r4, r1
 8008532:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8008536:	e06e      	b.n	8008616 <scaraInitScurve1+0x2e6>
		}else if(tf < 0.1 && v_design < 0.1){
 8008538:	a31f      	add	r3, pc, #124	; (adr r3, 80085b8 <scaraInitScurve1+0x288>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008542:	f7f8 facb 	bl	8000adc <__aeabi_dcmplt>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00b      	beq.n	8008564 <scaraInitScurve1+0x234>
 800854c:	a31a      	add	r3, pc, #104	; (adr r3, 80085b8 <scaraInitScurve1+0x288>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008556:	f7f8 fac1 	bl	8000adc <__aeabi_dcmplt>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008560:	2309      	movs	r3, #9
 8008562:	e1e8      	b.n	8008936 <scaraInitScurve1+0x606>
		}else{
			v_lim = total_s/tf;
 8008564:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008568:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800856c:	f7f8 f96e 	bl	800084c <__aeabi_ddiv>
 8008570:	4603      	mov	r3, r0
 8008572:	460c      	mov	r4, r1
 8008574:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 8008578:	a313      	add	r3, pc, #76	; (adr r3, 80085c8 <scaraInitScurve1+0x298>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008582:	f7f8 f839 	bl	80005f8 <__aeabi_dmul>
 8008586:	4603      	mov	r3, r0
 8008588:	460c      	mov	r4, r1
 800858a:	461a      	mov	r2, r3
 800858c:	4623      	mov	r3, r4
 800858e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008592:	f7f8 faa3 	bl	8000adc <__aeabi_dcmplt>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d021      	beq.n	80085e0 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 800859c:	230a      	movs	r3, #10
 800859e:	e1ca      	b.n	8008936 <scaraInitScurve1+0x606>
 80085a0:	14000000 	.word	0x14000000
 80085a4:	4000f6f0 	.word	0x4000f6f0
 80085a8:	00000000 	.word	0x00000000
 80085ac:	405c2000 	.word	0x405c2000
 80085b0:	6b259425 	.word	0x6b259425
 80085b4:	40069b91 	.word	0x40069b91
 80085b8:	9999999a 	.word	0x9999999a
 80085bc:	3fb99999 	.word	0x3fb99999
 80085c0:	33333333 	.word	0x33333333
 80085c4:	3fc33333 	.word	0x3fc33333
 80085c8:	9999999a 	.word	0x9999999a
 80085cc:	3ff19999 	.word	0x3ff19999
 80085d0:	40877000 	.word	0x40877000
 80085d4:	407f4000 	.word	0x407f4000
 80085d8:	401e0000 	.word	0x401e0000
 80085dc:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80085e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	f7f7 fe50 	bl	800028c <__adddf3>
 80085ec:	4603      	mov	r3, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	461a      	mov	r2, r3
 80085f2:	4623      	mov	r3, r4
 80085f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085f8:	f7f8 fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <scaraInitScurve1+0x2e6>
				v_design = 2*v_lim;
 8008602:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	f7f7 fe3f 	bl	800028c <__adddf3>
 800860e:	4603      	mov	r3, r0
 8008610:	460c      	mov	r4, r1
 8008612:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 8008616:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	f7f7 fe35 	bl	800028c <__adddf3>
 8008622:	4603      	mov	r3, r0
 8008624:	460c      	mov	r4, r1
 8008626:	4618      	mov	r0, r3
 8008628:	4621      	mov	r1, r4
 800862a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800862e:	f7f7 ffe3 	bl	80005f8 <__aeabi_dmul>
 8008632:	4603      	mov	r3, r0
 8008634:	460c      	mov	r4, r1
 8008636:	4625      	mov	r5, r4
 8008638:	461c      	mov	r4, r3
 800863a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800863e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008642:	f7f7 ffd9 	bl	80005f8 <__aeabi_dmul>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4610      	mov	r0, r2
 800864c:	4619      	mov	r1, r3
 800864e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008652:	f7f7 fe19 	bl	8000288 <__aeabi_dsub>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4620      	mov	r0, r4
 800865c:	4629      	mov	r1, r5
 800865e:	f7f8 f8f5 	bl	800084c <__aeabi_ddiv>
 8008662:	4603      	mov	r3, r0
 8008664:	460c      	mov	r4, r1
 8008666:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 800866a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800866e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008672:	f7f8 f8eb 	bl	800084c <__aeabi_ddiv>
 8008676:	4603      	mov	r3, r0
 8008678:	460c      	mov	r4, r1
 800867a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		td = tf - ta;
 800867e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008682:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008686:	f7f7 fdff 	bl	8000288 <__aeabi_dsub>
 800868a:	4603      	mov	r3, r0
 800868c:	460c      	mov	r4, r1
 800868e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8008692:	e0c0      	b.n	8008816 <scaraInitScurve1+0x4e6>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008694:	7ebb      	ldrb	r3, [r7, #26]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 80bd 	bne.w	8008816 <scaraInitScurve1+0x4e6>
		//check qva condition
		if(total_s*a_design < 2*v_design*v_design){ //condition for ta smaller than tc
 800869c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086a4:	f7f7 ffa8 	bl	80005f8 <__aeabi_dmul>
 80086a8:	4603      	mov	r3, r0
 80086aa:	460c      	mov	r4, r1
 80086ac:	4625      	mov	r5, r4
 80086ae:	461c      	mov	r4, r3
 80086b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	f7f7 fde8 	bl	800028c <__adddf3>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4610      	mov	r0, r2
 80086c2:	4619      	mov	r1, r3
 80086c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086c8:	f7f7 ff96 	bl	80005f8 <__aeabi_dmul>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4620      	mov	r0, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	f7f8 fa02 	bl	8000adc <__aeabi_dcmplt>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d060      	beq.n	80087a0 <scaraInitScurve1+0x470>
			if(total_s/v_design < 0.3){ //tc too small
 80086de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086e6:	f7f8 f8b1 	bl	800084c <__aeabi_ddiv>
 80086ea:	4603      	mov	r3, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	4618      	mov	r0, r3
 80086f0:	4621      	mov	r1, r4
 80086f2:	a396      	add	r3, pc, #600	; (adr r3, 800894c <scaraInitScurve1+0x61c>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f8 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <scaraInitScurve1+0x3e8>
				//recalculate v_design
				v_design = total_s/0.3;
 8008702:	a392      	add	r3, pc, #584	; (adr r3, 800894c <scaraInitScurve1+0x61c>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800870c:	f7f8 f89e 	bl	800084c <__aeabi_ddiv>
 8008710:	4603      	mov	r3, r0
 8008712:	460c      	mov	r4, r1
 8008714:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008718:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800871c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008720:	f7f8 f894 	bl	800084c <__aeabi_ddiv>
 8008724:	4603      	mov	r3, r0
 8008726:	460c      	mov	r4, r1
 8008728:	4618      	mov	r0, r3
 800872a:	4621      	mov	r1, r4
 800872c:	a389      	add	r3, pc, #548	; (adr r3, 8008954 <scaraInitScurve1+0x624>)
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	f7f8 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <scaraInitScurve1+0x422>
				//recalculate a_design
				a_design = v_design/0.1;
 800873c:	a385      	add	r3, pc, #532	; (adr r3, 8008954 <scaraInitScurve1+0x624>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008746:	f7f8 f881 	bl	800084c <__aeabi_ddiv>
 800874a:	4603      	mov	r3, r0
 800874c:	460c      	mov	r4, r1
 800874e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 8008752:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008756:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800875a:	f7f8 f877 	bl	800084c <__aeabi_ddiv>
 800875e:	4603      	mov	r3, r0
 8008760:	460c      	mov	r4, r1
 8008762:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8008766:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800876a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800876e:	f7f8 f86d 	bl	800084c <__aeabi_ddiv>
 8008772:	4603      	mov	r3, r0
 8008774:	460c      	mov	r4, r1
 8008776:	461a      	mov	r2, r3
 8008778:	4623      	mov	r3, r4
 800877a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800877e:	f7f7 fd85 	bl	800028c <__adddf3>
 8008782:	4603      	mov	r3, r0
 8008784:	460c      	mov	r4, r1
 8008786:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			tf = ta + td;
 800878a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800878e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008792:	f7f7 fd7b 	bl	800028c <__adddf3>
 8008796:	4603      	mov	r3, r0
 8008798:	460c      	mov	r4, r1
 800879a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800879e:	e03a      	b.n	8008816 <scaraInitScurve1+0x4e6>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 80087a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	f7f7 fd70 	bl	800028c <__adddf3>
 80087ac:	4603      	mov	r3, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	4618      	mov	r0, r3
 80087b2:	4621      	mov	r1, r4
 80087b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087b8:	f7f8 f848 	bl	800084c <__aeabi_ddiv>
 80087bc:	4603      	mov	r3, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	e9c7 3408 	strd	r3, r4, [r7, #32]
			ta = tf/4;
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	4b5d      	ldr	r3, [pc, #372]	; (8008940 <scaraInitScurve1+0x610>)
 80087ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80087ce:	f7f8 f83d 	bl	800084c <__aeabi_ddiv>
 80087d2:	4603      	mov	r3, r0
 80087d4:	460c      	mov	r4, r1
 80087d6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			td = 3*tf/4;
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	4b59      	ldr	r3, [pc, #356]	; (8008944 <scaraInitScurve1+0x614>)
 80087e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80087e4:	f7f7 ff08 	bl	80005f8 <__aeabi_dmul>
 80087e8:	4603      	mov	r3, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	4618      	mov	r0, r3
 80087ee:	4621      	mov	r1, r4
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	4b52      	ldr	r3, [pc, #328]	; (8008940 <scaraInitScurve1+0x610>)
 80087f6:	f7f8 f829 	bl	800084c <__aeabi_ddiv>
 80087fa:	4603      	mov	r3, r0
 80087fc:	460c      	mov	r4, r1
 80087fe:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			a_design = v_design/ta;
 8008802:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008806:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800880a:	f7f8 f81f 	bl	800084c <__aeabi_ddiv>
 800880e:	4603      	mov	r3, r0
 8008810:	460c      	mov	r4, r1
 8008812:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800881c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	scurve->Tf = tf;
 8008820:	69fa      	ldr	r2, [r7, #28]
 8008822:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008826:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	scurve->Td = td;
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008830:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	scurve->a_design = a_design;
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800883a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	scurve->v_design = v_design;
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008844:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	scurve->v_lim = v_lim;
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800884e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	scurve->total_s = total_s;
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008858:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	scurve->a_current = 0;
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	f04f 0300 	mov.w	r3, #0
 8008862:	f04f 0400 	mov.w	r4, #0
 8008866:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	scurve->v_current = 0;
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	f04f 0400 	mov.w	r4, #0
 8008874:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	scurve->s_current = 0;
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	f04f 0300 	mov.w	r3, #0
 800887e:	f04f 0400 	mov.w	r4, #0
 8008882:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 8008886:	f04f 0200 	mov.w	r2, #0
 800888a:	4b2f      	ldr	r3, [pc, #188]	; (8008948 <scaraInitScurve1+0x618>)
 800888c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008890:	f7f7 feb2 	bl	80005f8 <__aeabi_dmul>
 8008894:	4603      	mov	r3, r0
 8008896:	460c      	mov	r4, r1
 8008898:	4618      	mov	r0, r3
 800889a:	4621      	mov	r1, r4
 800889c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088a0:	f7f7 feaa 	bl	80005f8 <__aeabi_dmul>
 80088a4:	4603      	mov	r3, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	461a      	mov	r2, r3
 80088aa:	4623      	mov	r3, r4
 80088ac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088b0:	f7f7 ffcc 	bl	800084c <__aeabi_ddiv>
 80088b4:	4603      	mov	r3, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 80088be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	f7f7 fce1 	bl	800028c <__adddf3>
 80088ca:	4603      	mov	r3, r0
 80088cc:	460c      	mov	r4, r1
 80088ce:	4618      	mov	r0, r3
 80088d0:	4621      	mov	r1, r4
 80088d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088d6:	f7f7 fe8f 	bl	80005f8 <__aeabi_dmul>
 80088da:	4603      	mov	r3, r0
 80088dc:	460c      	mov	r4, r1
 80088de:	4618      	mov	r0, r3
 80088e0:	4621      	mov	r1, r4
 80088e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088e6:	f7f7 fe87 	bl	80005f8 <__aeabi_dmul>
 80088ea:	4603      	mov	r3, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	scurve->k_3        = 6*ta;
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <scaraInitScurve1+0x618>)
 80088fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80088fe:	f7f7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8008902:	4603      	mov	r3, r0
 8008904:	460c      	mov	r4, r1
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	4b0d      	ldr	r3, [pc, #52]	; (8008948 <scaraInitScurve1+0x618>)
 8008912:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008916:	f7f7 fe6f 	bl	80005f8 <__aeabi_dmul>
 800891a:	4603      	mov	r3, r0
 800891c:	460c      	mov	r4, r1
 800891e:	4618      	mov	r0, r3
 8008920:	4621      	mov	r1, r4
 8008922:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008926:	f7f7 fe67 	bl	80005f8 <__aeabi_dmul>
 800892a:	4603      	mov	r3, r0
 800892c:	460c      	mov	r4, r1
 800892e:	69fa      	ldr	r2, [r7, #28]
 8008930:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	return SCARA_STATUS_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3750      	adds	r7, #80	; 0x50
 800893a:	46bd      	mov	sp, r7
 800893c:	bdb0      	pop	{r4, r5, r7, pc}
 800893e:	bf00      	nop
 8008940:	40100000 	.word	0x40100000
 8008944:	40080000 	.word	0x40080000
 8008948:	40180000 	.word	0x40180000
 800894c:	33333333 	.word	0x33333333
 8008950:	3fd33333 	.word	0x3fd33333
 8008954:	9999999a 	.word	0x9999999a
 8008958:	3fb99999 	.word	0x3fb99999

0800895c <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 800895c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008960:	b08b      	sub	sp, #44	; 0x2c
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008970:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800897a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008984:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008988:	f04f 0200 	mov.w	r2, #0
 800898c:	f04f 0300 	mov.w	r3, #0
 8008990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008994:	f7f8 f8b6 	bl	8000b04 <__aeabi_dcmpge>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d05b      	beq.n	8008a56 <scaraFlowLSPB1+0xfa>
 800899e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089a6:	f7f8 f8a3 	bl	8000af0 <__aeabi_dcmple>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d052      	beq.n	8008a56 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80089c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089cc:	f7f7 fe14 	bl	80005f8 <__aeabi_dmul>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4620      	mov	r0, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	f7f7 fc58 	bl	800028c <__adddf3>
 80089dc:	4603      	mov	r3, r0
 80089de:	460c      	mov	r4, r1
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80089f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4620      	mov	r0, r4
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7f7 fc43 	bl	800028c <__adddf3>
 8008a06:	4603      	mov	r3, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	4625      	mov	r5, r4
 8008a0c:	461c      	mov	r4, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	4b9e      	ldr	r3, [pc, #632]	; (8008c94 <scaraFlowLSPB1+0x338>)
 8008a1a:	f7f7 fded 	bl	80005f8 <__aeabi_dmul>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4610      	mov	r0, r2
 8008a24:	4619      	mov	r1, r3
 8008a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2a:	f7f7 fde5 	bl	80005f8 <__aeabi_dmul>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a3a:	f7f7 fddd 	bl	80005f8 <__aeabi_dmul>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f7 fc21 	bl	800028c <__adddf3>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008a54:	e117      	b.n	8008c86 <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8008a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a5e:	f7f8 f83d 	bl	8000adc <__aeabi_dcmplt>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d056      	beq.n	8008b16 <scaraFlowLSPB1+0x1ba>
 8008a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a70:	f7f8 f83e 	bl	8000af0 <__aeabi_dcmple>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d04d      	beq.n	8008b16 <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	f04f 0400 	mov.w	r4, #0
 8008a84:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008aa4:	f7f7 fda8 	bl	80005f8 <__aeabi_dmul>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4610      	mov	r0, r2
 8008aae:	4619      	mov	r1, r3
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	4b77      	ldr	r3, [pc, #476]	; (8008c94 <scaraFlowLSPB1+0x338>)
 8008ab6:	f7f7 fd9f 	bl	80005f8 <__aeabi_dmul>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7f7 fbe3 	bl	800028c <__adddf3>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	460c      	mov	r4, r1
 8008aca:	4698      	mov	r8, r3
 8008acc:	46a1      	mov	r9, r4
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008ad4:	f04f 0200 	mov.w	r2, #0
 8008ad8:	4b6e      	ldr	r3, [pc, #440]	; (8008c94 <scaraFlowLSPB1+0x338>)
 8008ada:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ade:	f7f7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aea:	f7f7 fbcd 	bl	8000288 <__aeabi_dsub>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f7 fd7f 	bl	80005f8 <__aeabi_dmul>
 8008afa:	4603      	mov	r3, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	461a      	mov	r2, r3
 8008b00:	4623      	mov	r3, r4
 8008b02:	4640      	mov	r0, r8
 8008b04:	4649      	mov	r1, r9
 8008b06:	f7f7 fbc1 	bl	800028c <__adddf3>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008b14:	e0b7      	b.n	8008c86 <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td < time && time <= tf) {
 8008b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b1e:	f7f7 ffdd 	bl	8000adc <__aeabi_dcmplt>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 809a 	beq.w	8008c5e <scaraFlowLSPB1+0x302>
 8008b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b32:	f7f7 ffdd 	bl	8000af0 <__aeabi_dcmple>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 8090 	beq.w	8008c5e <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008b44:	4614      	mov	r4, r2
 8008b46:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b64:	f7f7 fb90 	bl	8000288 <__aeabi_dsub>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 fd42 	bl	80005f8 <__aeabi_dmul>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	f7f7 fb86 	bl	800028c <__adddf3>
 8008b80:	4603      	mov	r3, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b9e:	f7f7 fb73 	bl	8000288 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	4649      	mov	r1, r9
 8008baa:	f7f7 fd25 	bl	80005f8 <__aeabi_dmul>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f7f7 fb67 	bl	8000288 <__aeabi_dsub>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	461d      	mov	r5, r3
 8008bc0:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4623      	mov	r3, r4
 8008bd2:	f7f7 fb59 	bl	8000288 <__aeabi_dsub>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	4698      	mov	r8, r3
 8008bdc:	46a1      	mov	r9, r4
 8008bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008be6:	f7f7 fb4f 	bl	8000288 <__aeabi_dsub>
 8008bea:	4603      	mov	r3, r0
 8008bec:	460c      	mov	r4, r1
 8008bee:	461a      	mov	r2, r3
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	f7f7 fcff 	bl	80005f8 <__aeabi_dmul>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	4698      	mov	r8, r3
 8008c00:	46a1      	mov	r9, r4
 8008c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c0a:	f7f7 fb3d 	bl	8000288 <__aeabi_dsub>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	461a      	mov	r2, r3
 8008c14:	4623      	mov	r3, r4
 8008c16:	4640      	mov	r0, r8
 8008c18:	4649      	mov	r1, r9
 8008c1a:	f7f7 fced 	bl	80005f8 <__aeabi_dmul>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	4698      	mov	r8, r3
 8008c24:	46a1      	mov	r9, r4
 8008c26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	f7f7 fb2d 	bl	800028c <__adddf3>
 8008c32:	4603      	mov	r3, r0
 8008c34:	460c      	mov	r4, r1
 8008c36:	461a      	mov	r2, r3
 8008c38:	4623      	mov	r3, r4
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	f7f7 fe05 	bl	800084c <__aeabi_ddiv>
 8008c42:	4603      	mov	r3, r0
 8008c44:	460c      	mov	r4, r1
 8008c46:	461a      	mov	r2, r3
 8008c48:	4623      	mov	r3, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	f7f7 fb1b 	bl	8000288 <__aeabi_dsub>
 8008c52:	4603      	mov	r3, r0
 8008c54:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008c5c:	e013      	b.n	8008c86 <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	f04f 0300 	mov.w	r3, #0
 8008c64:	f04f 0400 	mov.w	r4, #0
 8008c68:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	f04f 0300 	mov.w	r3, #0
 8008c72:	f04f 0400 	mov.w	r4, #0
 8008c76:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	372c      	adds	r7, #44	; 0x2c
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c92:	bf00      	nop
 8008c94:	3fe00000 	.word	0x3fe00000

08008c98 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8008c98:	b5b0      	push	{r4, r5, r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cb0:	f7f7 ff28 	bl	8000b04 <__aeabi_dcmpge>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d020      	beq.n	8008cfc <scaraFlowGCODE+0x64>
 8008cba:	4b67      	ldr	r3, [pc, #412]	; (8008e58 <scaraFlowGCODE+0x1c0>)
 8008cbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cc8:	f7f7 ff12 	bl	8000af0 <__aeabi_dcmple>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d014      	beq.n	8008cfc <scaraFlowGCODE+0x64>
		*s = acc0*time*time;
 8008cd2:	4b62      	ldr	r3, [pc, #392]	; (8008e5c <scaraFlowGCODE+0x1c4>)
 8008cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cdc:	f7f7 fc8c 	bl	80005f8 <__aeabi_dmul>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cec:	f7f7 fc84 	bl	80005f8 <__aeabi_dmul>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	e9c2 3400 	strd	r3, r4, [r2]
 8008cfa:	e0a8      	b.n	8008e4e <scaraFlowGCODE+0x1b6>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8008cfc:	4b56      	ldr	r3, [pc, #344]	; (8008e58 <scaraFlowGCODE+0x1c0>)
 8008cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d02:	461a      	mov	r2, r3
 8008d04:	4623      	mov	r3, r4
 8008d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d0a:	f7f7 ff05 	bl	8000b18 <__aeabi_dcmpgt>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d023      	beq.n	8008d5c <scaraFlowGCODE+0xc4>
 8008d14:	4b52      	ldr	r3, [pc, #328]	; (8008e60 <scaraFlowGCODE+0x1c8>)
 8008d16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d22:	f7f7 fee5 	bl	8000af0 <__aeabi_dcmple>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d017      	beq.n	8008d5c <scaraFlowGCODE+0xc4>
		*s = constant[0]*time + constant[1];
 8008d2c:	4b4d      	ldr	r3, [pc, #308]	; (8008e64 <scaraFlowGCODE+0x1cc>)
 8008d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d36:	f7f7 fc5f 	bl	80005f8 <__aeabi_dmul>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	4618      	mov	r0, r3
 8008d40:	4621      	mov	r1, r4
 8008d42:	4b48      	ldr	r3, [pc, #288]	; (8008e64 <scaraFlowGCODE+0x1cc>)
 8008d44:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	f7f7 fa9e 	bl	800028c <__adddf3>
 8008d50:	4603      	mov	r3, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	e9c2 3400 	strd	r3, r4, [r2]
 8008d5a:	e078      	b.n	8008e4e <scaraFlowGCODE+0x1b6>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 8008d5c:	4b40      	ldr	r3, [pc, #256]	; (8008e60 <scaraFlowGCODE+0x1c8>)
 8008d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d62:	461a      	mov	r2, r3
 8008d64:	4623      	mov	r3, r4
 8008d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d6a:	f7f7 fed5 	bl	8000b18 <__aeabi_dcmpgt>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d03c      	beq.n	8008dee <scaraFlowGCODE+0x156>
 8008d74:	4b3c      	ldr	r3, [pc, #240]	; (8008e68 <scaraFlowGCODE+0x1d0>)
 8008d76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d82:	f7f7 feb5 	bl	8000af0 <__aeabi_dcmple>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d030      	beq.n	8008dee <scaraFlowGCODE+0x156>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008d8c:	4b37      	ldr	r3, [pc, #220]	; (8008e6c <scaraFlowGCODE+0x1d4>)
 8008d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d96:	f7f7 fc2f 	bl	80005f8 <__aeabi_dmul>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	4618      	mov	r0, r3
 8008da0:	4621      	mov	r1, r4
 8008da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da6:	f7f7 fc27 	bl	80005f8 <__aeabi_dmul>
 8008daa:	4603      	mov	r3, r0
 8008dac:	460c      	mov	r4, r1
 8008dae:	4625      	mov	r5, r4
 8008db0:	461c      	mov	r4, r3
 8008db2:	4b2e      	ldr	r3, [pc, #184]	; (8008e6c <scaraFlowGCODE+0x1d4>)
 8008db4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	f7f7 fc1c 	bl	80005f8 <__aeabi_dmul>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7f7 fa60 	bl	800028c <__adddf3>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4b25      	ldr	r3, [pc, #148]	; (8008e6c <scaraFlowGCODE+0x1d4>)
 8008dd6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	4623      	mov	r3, r4
 8008dde:	f7f7 fa55 	bl	800028c <__adddf3>
 8008de2:	4603      	mov	r3, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	e9c2 3400 	strd	r3, r4, [r2]
 8008dec:	e02f      	b.n	8008e4e <scaraFlowGCODE+0x1b6>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8008dee:	4b1f      	ldr	r3, [pc, #124]	; (8008e6c <scaraFlowGCODE+0x1d4>)
 8008df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df8:	f7f7 fbfe 	bl	80005f8 <__aeabi_dmul>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	4618      	mov	r0, r3
 8008e02:	4621      	mov	r1, r4
 8008e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e08:	f7f7 fbf6 	bl	80005f8 <__aeabi_dmul>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	4625      	mov	r5, r4
 8008e12:	461c      	mov	r4, r3
 8008e14:	4b15      	ldr	r3, [pc, #84]	; (8008e6c <scaraFlowGCODE+0x1d4>)
 8008e16:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1e:	f7f7 fbeb 	bl	80005f8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fa2f 	bl	800028c <__adddf3>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	460c      	mov	r4, r1
 8008e32:	4618      	mov	r0, r3
 8008e34:	4621      	mov	r1, r4
 8008e36:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <scaraFlowGCODE+0x1d4>)
 8008e38:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	4623      	mov	r3, r4
 8008e40:	f7f7 fa24 	bl	800028c <__adddf3>
 8008e44:	4603      	mov	r3, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	e9c2 3400 	strd	r3, r4, [r2]
	}
	return SCARA_STATUS_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bdb0      	pop	{r4, r5, r7, pc}
 8008e58:	20006f38 	.word	0x20006f38
 8008e5c:	2000dcf8 	.word	0x2000dcf8
 8008e60:	20006f58 	.word	0x20006f58
 8008e64:	20006f68 	.word	0x20006f68
 8008e68:	20006f90 	.word	0x20006f90
 8008e6c:	20006f40 	.word	0x20006f40

08008e70 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8008e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e74:	b08d      	sub	sp, #52	; 0x34
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008e84:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8008e8e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	td = scurve->Td;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8008e98:	e9c7 3406 	strd	r3, r4, [r7, #24]
	vc = scurve->v_design;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8008ea2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eb2:	f7f7 fe27 	bl	8000b04 <__aeabi_dcmpge>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d027      	beq.n	8008f0c <scaraFLowScurve1+0x9c>
 8008ebc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ec4:	f7f7 fe14 	bl	8000af0 <__aeabi_dcmple>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d01e      	beq.n	8008f0c <scaraFLowScurve1+0x9c>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8008ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ed6:	f7f7 fb8f 	bl	80005f8 <__aeabi_dmul>
 8008eda:	4603      	mov	r3, r0
 8008edc:	460c      	mov	r4, r1
 8008ede:	4618      	mov	r0, r3
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee6:	f7f7 fb87 	bl	80005f8 <__aeabi_dmul>
 8008eea:	4603      	mov	r3, r0
 8008eec:	460c      	mov	r4, r1
 8008eee:	4618      	mov	r0, r3
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4623      	mov	r3, r4
 8008efc:	f7f7 fb7c 	bl	80005f8 <__aeabi_dmul>
 8008f00:	4603      	mov	r3, r0
 8008f02:	460c      	mov	r4, r1
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008f0a:	e196      	b.n	800923a <scaraFLowScurve1+0x3ca>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8008f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f14:	f7f7 fde2 	bl	8000adc <__aeabi_dcmplt>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d06d      	beq.n	8008ffa <scaraFLowScurve1+0x18a>
 8008f1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	f7f7 f9b1 	bl	800028c <__adddf3>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	461a      	mov	r2, r3
 8008f30:	4623      	mov	r3, r4
 8008f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f36:	f7f7 fddb 	bl	8000af0 <__aeabi_dcmple>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d05c      	beq.n	8008ffa <scaraFLowScurve1+0x18a>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8008f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f48:	f7f7 fb56 	bl	80005f8 <__aeabi_dmul>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	4618      	mov	r0, r3
 8008f52:	4621      	mov	r1, r4
 8008f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f58:	f7f7 fb4e 	bl	80005f8 <__aeabi_dmul>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	4698      	mov	r8, r3
 8008f62:	46a1      	mov	r9, r4
 8008f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f6c:	f7f7 fb44 	bl	80005f8 <__aeabi_dmul>
 8008f70:	4603      	mov	r3, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	4618      	mov	r0, r3
 8008f76:	4621      	mov	r1, r4
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008f7e:	461a      	mov	r2, r3
 8008f80:	4623      	mov	r3, r4
 8008f82:	f7f7 fb39 	bl	80005f8 <__aeabi_dmul>
 8008f86:	4603      	mov	r3, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	4623      	mov	r3, r4
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 f979 	bl	8000288 <__aeabi_dsub>
 8008f96:	4603      	mov	r3, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	4698      	mov	r8, r3
 8008f9c:	46a1      	mov	r9, r4
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8008fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa8:	f7f7 fb26 	bl	80005f8 <__aeabi_dmul>
 8008fac:	4603      	mov	r3, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	4623      	mov	r3, r4
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	f7f7 f968 	bl	800028c <__adddf3>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4623      	mov	r3, r4
 8008fce:	f7f7 f95b 	bl	8000288 <__aeabi_dsub>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	461d      	mov	r5, r3
 8008fd8:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	4631      	mov	r1, r6
 8008fea:	f7f7 fb05 	bl	80005f8 <__aeabi_dmul>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008ff8:	e11f      	b.n	800923a <scaraFLowScurve1+0x3ca>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 8008ffa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	f7f7 f943 	bl	800028c <__adddf3>
 8009006:	4603      	mov	r3, r0
 8009008:	460c      	mov	r4, r1
 800900a:	461a      	mov	r2, r3
 800900c:	4623      	mov	r3, r4
 800900e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009012:	f7f7 fd81 	bl	8000b18 <__aeabi_dcmpgt>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d024      	beq.n	8009066 <scaraFLowScurve1+0x1f6>
 800901c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009020:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009024:	f7f7 f930 	bl	8000288 <__aeabi_dsub>
 8009028:	4603      	mov	r3, r0
 800902a:	460c      	mov	r4, r1
 800902c:	461a      	mov	r2, r3
 800902e:	4623      	mov	r3, r4
 8009030:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009034:	f7f7 fd5c 	bl	8000af0 <__aeabi_dcmple>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d013      	beq.n	8009066 <scaraFLowScurve1+0x1f6>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 800903e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009042:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009046:	f7f7 f91f 	bl	8000288 <__aeabi_dsub>
 800904a:	4603      	mov	r3, r0
 800904c:	460c      	mov	r4, r1
 800904e:	4618      	mov	r0, r3
 8009050:	4621      	mov	r1, r4
 8009052:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009056:	f7f7 facf 	bl	80005f8 <__aeabi_dmul>
 800905a:	4603      	mov	r3, r0
 800905c:	460c      	mov	r4, r1
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009064:	e0e9      	b.n	800923a <scaraFLowScurve1+0x3ca>
	} else if(td-ta < t && t <= td){
 8009066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800906a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800906e:	f7f7 f90b 	bl	8000288 <__aeabi_dsub>
 8009072:	4603      	mov	r3, r0
 8009074:	460c      	mov	r4, r1
 8009076:	461a      	mov	r2, r3
 8009078:	4623      	mov	r3, r4
 800907a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800907e:	f7f7 fd4b 	bl	8000b18 <__aeabi_dcmpgt>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8089 	beq.w	800919c <scaraFLowScurve1+0x32c>
 800908a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800908e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009092:	f7f7 fd2d 	bl	8000af0 <__aeabi_dcmple>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d07f      	beq.n	800919c <scaraFLowScurve1+0x32c>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 80090a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	4b63      	ldr	r3, [pc, #396]	; (8009248 <scaraFLowScurve1+0x3d8>)
 80090bc:	f7f7 fbc6 	bl	800084c <__aeabi_ddiv>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 f8de 	bl	8000288 <__aeabi_dsub>
 80090cc:	4603      	mov	r3, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	4625      	mov	r5, r4
 80090d2:	461c      	mov	r4, r3
 80090d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090dc:	f7f7 f8d4 	bl	8000288 <__aeabi_dsub>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4610      	mov	r0, r2
 80090e6:	4619      	mov	r1, r3
 80090e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090ec:	f7f7 fa84 	bl	80005f8 <__aeabi_dmul>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4620      	mov	r0, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	f7f7 f8c6 	bl	8000288 <__aeabi_dsub>
 80090fc:	4603      	mov	r3, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	461d      	mov	r5, r3
 8009102:	4626      	mov	r6, r4
 8009104:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800910c:	f7f7 f8bc 	bl	8000288 <__aeabi_dsub>
 8009110:	4603      	mov	r3, r0
 8009112:	460c      	mov	r4, r1
 8009114:	4698      	mov	r8, r3
 8009116:	46a1      	mov	r9, r4
 8009118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800911c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009120:	f7f7 f8b2 	bl	8000288 <__aeabi_dsub>
 8009124:	4603      	mov	r3, r0
 8009126:	460c      	mov	r4, r1
 8009128:	461a      	mov	r2, r3
 800912a:	4623      	mov	r3, r4
 800912c:	4640      	mov	r0, r8
 800912e:	4649      	mov	r1, r9
 8009130:	f7f7 fa62 	bl	80005f8 <__aeabi_dmul>
 8009134:	4603      	mov	r3, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4698      	mov	r8, r3
 800913a:	46a1      	mov	r9, r4
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009146:	f7f7 f8a1 	bl	800028c <__adddf3>
 800914a:	4603      	mov	r3, r0
 800914c:	460c      	mov	r4, r1
 800914e:	4618      	mov	r0, r3
 8009150:	4621      	mov	r1, r4
 8009152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009156:	f7f7 f897 	bl	8000288 <__aeabi_dsub>
 800915a:	4603      	mov	r3, r0
 800915c:	460c      	mov	r4, r1
 800915e:	461a      	mov	r2, r3
 8009160:	4623      	mov	r3, r4
 8009162:	4640      	mov	r0, r8
 8009164:	4649      	mov	r1, r9
 8009166:	f7f7 fa47 	bl	80005f8 <__aeabi_dmul>
 800916a:	4603      	mov	r3, r0
 800916c:	460c      	mov	r4, r1
 800916e:	4618      	mov	r0, r3
 8009170:	4621      	mov	r1, r4
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8009178:	461a      	mov	r2, r3
 800917a:	4623      	mov	r3, r4
 800917c:	f7f7 fa3c 	bl	80005f8 <__aeabi_dmul>
 8009180:	4603      	mov	r3, r0
 8009182:	460c      	mov	r4, r1
 8009184:	461a      	mov	r2, r3
 8009186:	4623      	mov	r3, r4
 8009188:	4628      	mov	r0, r5
 800918a:	4631      	mov	r1, r6
 800918c:	f7f7 f87c 	bl	8000288 <__aeabi_dsub>
 8009190:	4603      	mov	r3, r0
 8009192:	460c      	mov	r4, r1
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800919a:	e04e      	b.n	800923a <scaraFLowScurve1+0x3ca>
	} else if(td < t && t <= tf){
 800919c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80091a4:	f7f7 fc9a 	bl	8000adc <__aeabi_dcmplt>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d045      	beq.n	800923a <scaraFLowScurve1+0x3ca>
 80091ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091b6:	f7f7 fc9b 	bl	8000af0 <__aeabi_dcmple>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d03c      	beq.n	800923a <scaraFLowScurve1+0x3ca>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 80091c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091ce:	f7f7 f85b 	bl	8000288 <__aeabi_dsub>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4690      	mov	r8, r2
 80091d8:	4699      	mov	r9, r3
 80091da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091e2:	f7f7 f851 	bl	8000288 <__aeabi_dsub>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	f7f7 fa03 	bl	80005f8 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4690      	mov	r8, r2
 80091f8:	4699      	mov	r9, r3
 80091fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009202:	f7f7 f841 	bl	8000288 <__aeabi_dsub>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4640      	mov	r0, r8
 800920c:	4649      	mov	r1, r9
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	4610      	mov	r0, r2
 8009218:	4619      	mov	r1, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009220:	f7f7 f9ea 	bl	80005f8 <__aeabi_dmul>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4620      	mov	r0, r4
 800922a:	4629      	mov	r1, r5
 800922c:	f7f7 f82e 	bl	800028c <__adddf3>
 8009230:	4603      	mov	r3, r0
 8009232:	460c      	mov	r4, r1
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3734      	adds	r7, #52	; 0x34
 8009240:	46bd      	mov	sp, r7
 8009242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009246:	bf00      	nop
 8009248:	40080000 	.word	0x40080000
 800924c:	00000000 	.word	0x00000000

08009250 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	b0ad      	sub	sp, #180	; 0xb4
 8009256:	af00      	add	r7, sp, #0
 8009258:	62f8      	str	r0, [r7, #44]	; 0x2c
 800925a:	460b      	mov	r3, r1
 800925c:	ed87 0b08 	vstr	d0, [r7, #32]
 8009260:	ed87 1b06 	vstr	d1, [r7, #24]
 8009264:	ed87 2b04 	vstr	d2, [r7, #16]
 8009268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800926c:	4613      	mov	r3, r2
 800926e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8009272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009276:	2b04      	cmp	r3, #4
 8009278:	d118      	bne.n	80092ac <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 800927a:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009286:	f7f7 f9b7 	bl	80005f8 <__aeabi_dmul>
 800928a:	4603      	mov	r3, r0
 800928c:	460c      	mov	r4, r1
 800928e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8009292:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800929e:	f7f7 f9ab 	bl	80005f8 <__aeabi_dmul>
 80092a2:	4603      	mov	r3, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80092aa:	e092      	b.n	80093d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80092ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092b0:	2b05      	cmp	r3, #5
 80092b2:	d118      	bne.n	80092e6 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80092b4:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092c0:	f7f7 f99a 	bl	80005f8 <__aeabi_dmul>
 80092c4:	4603      	mov	r3, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80092cc:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	4603      	mov	r3, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80092e4:	e075      	b.n	80093d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80092e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d118      	bne.n	8009320 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80092ee:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	4603      	mov	r3, r0
 8009300:	460c      	mov	r4, r1
 8009302:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8009306:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009312:	f7f7 f971 	bl	80005f8 <__aeabi_dmul>
 8009316:	4603      	mov	r3, r0
 8009318:	460c      	mov	r4, r1
 800931a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800931e:	e058      	b.n	80093d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8009320:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009324:	2b01      	cmp	r3, #1
 8009326:	d118      	bne.n	800935a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8009328:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009334:	f7f7 f960 	bl	80005f8 <__aeabi_dmul>
 8009338:	4603      	mov	r3, r0
 800933a:	460c      	mov	r4, r1
 800933c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8009340:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800934c:	f7f7 f954 	bl	80005f8 <__aeabi_dmul>
 8009350:	4603      	mov	r3, r0
 8009352:	460c      	mov	r4, r1
 8009354:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8009358:	e03b      	b.n	80093d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 800935a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800935e:	2b02      	cmp	r3, #2
 8009360:	d118      	bne.n	8009394 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8009362:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800936e:	f7f7 f943 	bl	80005f8 <__aeabi_dmul>
 8009372:	4603      	mov	r3, r0
 8009374:	460c      	mov	r4, r1
 8009376:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800937a:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009386:	f7f7 f937 	bl	80005f8 <__aeabi_dmul>
 800938a:	4603      	mov	r3, r0
 800938c:	460c      	mov	r4, r1
 800938e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8009392:	e01e      	b.n	80093d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8009394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009398:	2b03      	cmp	r3, #3
 800939a:	d118      	bne.n	80093ce <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800939c:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093a8:	f7f7 f926 	bl	80005f8 <__aeabi_dmul>
 80093ac:	4603      	mov	r3, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80093b4:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80093c0:	f7f7 f91a 	bl	80005f8 <__aeabi_dmul>
 80093c4:	4603      	mov	r3, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80093cc:	e001      	b.n	80093d2 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80093ce:	2306      	movs	r3, #6
 80093d0:	e2fa      	b.n	80099c8 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 80093d2:	f04f 0300 	mov.w	r3, #0
 80093d6:	f04f 0400 	mov.w	r4, #0
 80093da:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 80093de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80093e2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	f04f 0400 	mov.w	r4, #0
 80093ee:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 80093f2:	f04f 0300 	mov.w	r3, #0
 80093f6:	f04f 0400 	mov.w	r4, #0
 80093fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80093fe:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009402:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009406:	f7f7 fb73 	bl	8000af0 <__aeabi_dcmple>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009416:	e00c      	b.n	8009432 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8009418:	23ff      	movs	r3, #255	; 0xff
 800941a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 800941e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800942a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800942e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8009432:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009436:	2b01      	cmp	r3, #1
 8009438:	f040 809e 	bne.w	8009578 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8009442:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8009446:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009452:	f7f7 fb61 	bl	8000b18 <__aeabi_dcmpgt>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8081 	beq.w	8009560 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 800945e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009462:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009466:	f7f6 ff0f 	bl	8000288 <__aeabi_dsub>
 800946a:	4603      	mov	r3, r0
 800946c:	460c      	mov	r4, r1
 800946e:	4618      	mov	r0, r3
 8009470:	4621      	mov	r1, r4
 8009472:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009476:	f7f7 f9e9 	bl	800084c <__aeabi_ddiv>
 800947a:	4603      	mov	r3, r0
 800947c:	460c      	mov	r4, r1
 800947e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8009482:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009486:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800948a:	f7f6 fefd 	bl	8000288 <__aeabi_dsub>
 800948e:	4603      	mov	r3, r0
 8009490:	460c      	mov	r4, r1
 8009492:	4618      	mov	r0, r3
 8009494:	4621      	mov	r1, r4
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	f7f6 fef7 	bl	800028c <__adddf3>
 800949e:	4603      	mov	r3, r0
 80094a0:	460c      	mov	r4, r1
 80094a2:	4618      	mov	r0, r3
 80094a4:	4621      	mov	r1, r4
 80094a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80094aa:	f7f7 f9cf 	bl	800084c <__aeabi_ddiv>
 80094ae:	4603      	mov	r3, r0
 80094b0:	460c      	mov	r4, r1
 80094b2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80094b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094ba:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80094be:	f7f7 fb0d 	bl	8000adc <__aeabi_dcmplt>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80094c8:	2309      	movs	r3, #9
 80094ca:	e27d      	b.n	80099c8 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 80094cc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80094d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80094d4:	f7f7 fb0c 	bl	8000af0 <__aeabi_dcmple>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 80094de:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80094e2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80094e6:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80094f2:	f7f7 fb11 	bl	8000b18 <__aeabi_dcmpgt>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01a      	beq.n	8009532 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80094fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009500:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009504:	f7f6 fec0 	bl	8000288 <__aeabi_dsub>
 8009508:	4603      	mov	r3, r0
 800950a:	460c      	mov	r4, r1
 800950c:	4618      	mov	r0, r3
 800950e:	4621      	mov	r1, r4
 8009510:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009514:	f7f7 f99a 	bl	800084c <__aeabi_ddiv>
 8009518:	4603      	mov	r3, r0
 800951a:	460c      	mov	r4, r1
 800951c:	461a      	mov	r2, r3
 800951e:	4623      	mov	r3, r4
 8009520:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009524:	f7f6 feb0 	bl	8000288 <__aeabi_dsub>
 8009528:	4603      	mov	r3, r0
 800952a:	460c      	mov	r4, r1
 800952c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8009530:	e00b      	b.n	800954a <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 8009532:	f04f 0200 	mov.w	r2, #0
 8009536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800953a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800953e:	f7f7 f985 	bl	800084c <__aeabi_ddiv>
 8009542:	4603      	mov	r3, r0
 8009544:	460c      	mov	r4, r1
 8009546:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 800954a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800954e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009552:	f7f7 f97b 	bl	800084c <__aeabi_ddiv>
 8009556:	4603      	mov	r3, r0
 8009558:	460c      	mov	r4, r1
 800955a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800955e:	e00b      	b.n	8009578 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	f04f 0400 	mov.w	r4, #0
 8009568:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 800956c:	f04f 0300 	mov.w	r3, #0
 8009570:	f04f 0400 	mov.w	r4, #0
 8009574:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8009578:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009584:	f7f7 fac8 	bl	8000b18 <__aeabi_dcmpgt>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 819c 	beq.w	80098c8 <scaraInitLSPB+0x678>
 8009590:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800959c:	f7f7 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8190 	beq.w	80098c8 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80095a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80095ac:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80095b0:	f7f6 fe6a 	bl	8000288 <__aeabi_dsub>
 80095b4:	4603      	mov	r3, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	461d      	mov	r5, r3
 80095ba:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80095be:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80095c2:	4628      	mov	r0, r5
 80095c4:	4631      	mov	r1, r6
 80095c6:	f7f7 f817 	bl	80005f8 <__aeabi_dmul>
 80095ca:	4603      	mov	r3, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80095d2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80095d6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80095da:	f7f7 f80d 	bl	80005f8 <__aeabi_dmul>
 80095de:	4603      	mov	r3, r0
 80095e0:	460c      	mov	r4, r1
 80095e2:	e9c7 3400 	strd	r3, r4, [r7]
 80095e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80095ee:	f7f7 f803 	bl	80005f8 <__aeabi_dmul>
 80095f2:	4603      	mov	r3, r0
 80095f4:	460c      	mov	r4, r1
 80095f6:	461d      	mov	r5, r3
 80095f8:	4626      	mov	r6, r4
 80095fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80095fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009602:	f7f6 fff9 	bl	80005f8 <__aeabi_dmul>
 8009606:	4603      	mov	r3, r0
 8009608:	460c      	mov	r4, r1
 800960a:	461a      	mov	r2, r3
 800960c:	4623      	mov	r3, r4
 800960e:	4628      	mov	r0, r5
 8009610:	4631      	mov	r1, r6
 8009612:	f7f6 fe3b 	bl	800028c <__adddf3>
 8009616:	4603      	mov	r3, r0
 8009618:	460c      	mov	r4, r1
 800961a:	4618      	mov	r0, r3
 800961c:	4621      	mov	r1, r4
 800961e:	f04f 0200 	mov.w	r2, #0
 8009622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009626:	f7f7 f911 	bl	800084c <__aeabi_ddiv>
 800962a:	4603      	mov	r3, r0
 800962c:	460c      	mov	r4, r1
 800962e:	461a      	mov	r2, r3
 8009630:	4623      	mov	r3, r4
 8009632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009636:	f7f6 fe27 	bl	8000288 <__aeabi_dsub>
 800963a:	4603      	mov	r3, r0
 800963c:	460c      	mov	r4, r1
 800963e:	461a      	mov	r2, r3
 8009640:	4623      	mov	r3, r4
 8009642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009646:	f7f7 fa53 	bl	8000af0 <__aeabi_dcmple>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d075      	beq.n	800973c <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8009650:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009654:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009658:	f7f6 fe16 	bl	8000288 <__aeabi_dsub>
 800965c:	4603      	mov	r3, r0
 800965e:	460c      	mov	r4, r1
 8009660:	469a      	mov	sl, r3
 8009662:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8009666:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800966a:	4650      	mov	r0, sl
 800966c:	4659      	mov	r1, fp
 800966e:	f7f6 ffc3 	bl	80005f8 <__aeabi_dmul>
 8009672:	4603      	mov	r3, r0
 8009674:	460c      	mov	r4, r1
 8009676:	4625      	mov	r5, r4
 8009678:	461c      	mov	r4, r3
 800967a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800967e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4690      	mov	r8, r2
 800968c:	4699      	mov	r9, r3
 800968e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009692:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009696:	f7f6 ffaf 	bl	80005f8 <__aeabi_dmul>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4640      	mov	r0, r8
 80096a0:	4649      	mov	r1, r9
 80096a2:	f7f6 fdf3 	bl	800028c <__adddf3>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4610      	mov	r0, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096b6:	f7f7 f8c9 	bl	800084c <__aeabi_ddiv>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	4620      	mov	r0, r4
 80096c0:	4629      	mov	r1, r5
 80096c2:	f7f6 fde3 	bl	800028c <__adddf3>
 80096c6:	4603      	mov	r3, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	ec44 3b17 	vmov	d7, r3, r4
 80096ce:	eeb0 0a47 	vmov.f32	s0, s14
 80096d2:	eef0 0a67 	vmov.f32	s1, s15
 80096d6:	f010 fa59 	bl	8019b8c <sqrt>
 80096da:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80096de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096e2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096e6:	f7f6 fdcf 	bl	8000288 <__aeabi_dsub>
 80096ea:	4603      	mov	r3, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	4618      	mov	r0, r3
 80096f0:	4621      	mov	r1, r4
 80096f2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80096f6:	f7f7 f8a9 	bl	800084c <__aeabi_ddiv>
 80096fa:	4603      	mov	r3, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009702:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009706:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800970a:	f7f6 fdbd 	bl	8000288 <__aeabi_dsub>
 800970e:	4603      	mov	r3, r0
 8009710:	460c      	mov	r4, r1
 8009712:	4618      	mov	r0, r3
 8009714:	4621      	mov	r1, r4
 8009716:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800971a:	f7f7 f897 	bl	800084c <__aeabi_ddiv>
 800971e:	4603      	mov	r3, r0
 8009720:	460c      	mov	r4, r1
 8009722:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8009726:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800972a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800972e:	f7f6 fdad 	bl	800028c <__adddf3>
 8009732:	4603      	mov	r3, r0
 8009734:	460c      	mov	r4, r1
 8009736:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800973a:	e0e3      	b.n	8009904 <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 800973c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8009740:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800974c:	f7f6 fd9c 	bl	8000288 <__aeabi_dsub>
 8009750:	4603      	mov	r3, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4618      	mov	r0, r3
 8009756:	4621      	mov	r1, r4
 8009758:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800975c:	f7f7 f876 	bl	800084c <__aeabi_ddiv>
 8009760:	4603      	mov	r3, r0
 8009762:	460c      	mov	r4, r1
 8009764:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009768:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800976c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009770:	f7f6 fd8a 	bl	8000288 <__aeabi_dsub>
 8009774:	4603      	mov	r3, r0
 8009776:	460c      	mov	r4, r1
 8009778:	4618      	mov	r0, r3
 800977a:	4621      	mov	r1, r4
 800977c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009780:	f7f7 f864 	bl	800084c <__aeabi_ddiv>
 8009784:	4603      	mov	r3, r0
 8009786:	460c      	mov	r4, r1
 8009788:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800978c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009790:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009794:	f7f6 fd78 	bl	8000288 <__aeabi_dsub>
 8009798:	4603      	mov	r3, r0
 800979a:	460c      	mov	r4, r1
 800979c:	4698      	mov	r8, r3
 800979e:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80097a2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80097a6:	4640      	mov	r0, r8
 80097a8:	4649      	mov	r1, r9
 80097aa:	f7f7 f84f 	bl	800084c <__aeabi_ddiv>
 80097ae:	4603      	mov	r3, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	4625      	mov	r5, r4
 80097b4:	461c      	mov	r4, r3
 80097b6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	f7f6 fd65 	bl	800028c <__adddf3>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80097ca:	f7f7 f83f 	bl	800084c <__aeabi_ddiv>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4690      	mov	r8, r2
 80097d4:	4699      	mov	r9, r3
 80097d6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80097da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80097de:	f7f7 f835 	bl	800084c <__aeabi_ddiv>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	f04f 0000 	mov.w	r0, #0
 80097ea:	497d      	ldr	r1, [pc, #500]	; (80099e0 <scaraInitLSPB+0x790>)
 80097ec:	f7f6 fd4c 	bl	8000288 <__aeabi_dsub>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4640      	mov	r0, r8
 80097f6:	4649      	mov	r1, r9
 80097f8:	f7f6 fefe 	bl	80005f8 <__aeabi_dmul>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4690      	mov	r8, r2
 8009802:	4699      	mov	r9, r3
 8009804:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009808:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800980c:	f7f7 f81e 	bl	800084c <__aeabi_ddiv>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	f04f 0000 	mov.w	r0, #0
 8009818:	4971      	ldr	r1, [pc, #452]	; (80099e0 <scaraInitLSPB+0x790>)
 800981a:	f7f6 fd35 	bl	8000288 <__aeabi_dsub>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4640      	mov	r0, r8
 8009824:	4649      	mov	r1, r9
 8009826:	f7f6 fee7 	bl	80005f8 <__aeabi_dmul>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4620      	mov	r0, r4
 8009830:	4629      	mov	r1, r5
 8009832:	f7f6 fd2b 	bl	800028c <__adddf3>
 8009836:	4603      	mov	r3, r0
 8009838:	460c      	mov	r4, r1
 800983a:	4625      	mov	r5, r4
 800983c:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 800983e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	f7f6 fd21 	bl	800028c <__adddf3>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009852:	f7f6 fffb 	bl	800084c <__aeabi_ddiv>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4690      	mov	r8, r2
 800985c:	4699      	mov	r9, r3
 800985e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009862:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009866:	f7f6 fff1 	bl	800084c <__aeabi_ddiv>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	f04f 0000 	mov.w	r0, #0
 8009872:	495b      	ldr	r1, [pc, #364]	; (80099e0 <scaraInitLSPB+0x790>)
 8009874:	f7f6 fd08 	bl	8000288 <__aeabi_dsub>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4640      	mov	r0, r8
 800987e:	4649      	mov	r1, r9
 8009880:	f7f6 feba 	bl	80005f8 <__aeabi_dmul>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4690      	mov	r8, r2
 800988a:	4699      	mov	r9, r3
 800988c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009890:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009894:	f7f6 ffda 	bl	800084c <__aeabi_ddiv>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	f04f 0000 	mov.w	r0, #0
 80098a0:	494f      	ldr	r1, [pc, #316]	; (80099e0 <scaraInitLSPB+0x790>)
 80098a2:	f7f6 fcf1 	bl	8000288 <__aeabi_dsub>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4640      	mov	r0, r8
 80098ac:	4649      	mov	r1, r9
 80098ae:	f7f6 fea3 	bl	80005f8 <__aeabi_dmul>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80098b6:	4620      	mov	r0, r4
 80098b8:	4629      	mov	r1, r5
 80098ba:	f7f6 fce7 	bl	800028c <__adddf3>
 80098be:	4603      	mov	r3, r0
 80098c0:	460c      	mov	r4, r1
 80098c2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80098c6:	e01d      	b.n	8009904 <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	f04f 0400 	mov.w	r4, #0
 80098d0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80098e0:	f7f6 ffb4 	bl	800084c <__aeabi_ddiv>
 80098e4:	4603      	mov	r3, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80098f8:	f7f6 ffa8 	bl	800084c <__aeabi_ddiv>
 80098fc:	4603      	mov	r3, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8009904:	a334      	add	r3, pc, #208	; (adr r3, 80099d8 <scaraInitLSPB+0x788>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800990e:	f7f6 ff9d 	bl	800084c <__aeabi_ddiv>
 8009912:	4603      	mov	r3, r0
 8009914:	460c      	mov	r4, r1
 8009916:	4618      	mov	r0, r3
 8009918:	4621      	mov	r1, r4
 800991a:	f7f7 f965 	bl	8000be8 <__aeabi_d2f>
 800991e:	4603      	mov	r3, r0
 8009920:	ee00 3a10 	vmov	s0, r3
 8009924:	f010 f8f0 	bl	8019b08 <ceilf>
 8009928:	eef0 7a40 	vmov.f32	s15, s0
 800992c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009930:	ee17 3a90 	vmov	r3, s15
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800993c:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 800993e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009940:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8009944:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8009948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800994a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800994e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8009952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009954:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8009958:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 800995c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800995e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8009962:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8009966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009968:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800996c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8009970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009972:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8009976:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 800997a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800997c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8009980:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8009984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009986:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800998a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 800998e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009990:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8009994:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8009998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800999e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80099a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099a6:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80099b4:	461a      	mov	r2, r3
 80099b6:	4623      	mov	r3, r4
 80099b8:	f7f6 fc66 	bl	8000288 <__aeabi_dsub>
 80099bc:	4603      	mov	r3, r0
 80099be:	460c      	mov	r4, r1
 80099c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099c2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	37b4      	adds	r7, #180	; 0xb4
 80099cc:	46bd      	mov	sp, r7
 80099ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d2:	bf00      	nop
 80099d4:	f3af 8000 	nop.w
 80099d8:	40000000 	.word	0x40000000
 80099dc:	3f847ae1 	.word	0x3f847ae1
 80099e0:	3ff00000 	.word	0x3ff00000
 80099e4:	00000000 	.word	0x00000000
 80099e8:	405c2000 	.word	0x405c2000
 80099ec:	14000000 	.word	0x14000000
 80099f0:	4000f6f0 	.word	0x4000f6f0
 80099f4:	6b259425 	.word	0x6b259425
 80099f8:	40069b91 	.word	0x40069b91
 80099fc:	d2f1a9fc 	.word	0xd2f1a9fc
 8009a00:	3f50624d 	.word	0x3f50624d
 8009a04:	9abcaf48 	.word	0x9abcaf48
 8009a08:	3e7ad7f2 	.word	0x3e7ad7f2

08009a0c <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009a0c:	b480      	push	{r7}
 8009a0e:	b089      	sub	sp, #36	; 0x24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	61f8      	str	r0, [r7, #28]
 8009a14:	460b      	mov	r3, r1
 8009a16:	ed87 0b04 	vstr	d0, [r7, #16]
 8009a1a:	ed87 1b02 	vstr	d1, [r7, #8]
 8009a1e:	ed87 2b00 	vstr	d2, [r7]
 8009a22:	76fb      	strb	r3, [r7, #27]
 8009a24:	4613      	mov	r3, r2
 8009a26:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3724      	adds	r7, #36	; 0x24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
	...

08009a38 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009a38:	b082      	sub	sp, #8
 8009a3a:	b5b0      	push	{r4, r5, r7, lr}
 8009a3c:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009a40:	af2e      	add	r7, sp, #184	; 0xb8
 8009a42:	f107 0108 	add.w	r1, r7, #8
 8009a46:	ed81 0b00 	vstr	d0, [r1]
 8009a4a:	1d39      	adds	r1, r7, #4
 8009a4c:	6008      	str	r0, [r1, #0]
 8009a4e:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8009a52:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8009a56:	f107 0218 	add.w	r2, r7, #24
 8009a5a:	f107 0308 	add.w	r3, r7, #8
 8009a5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a62:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8009a66:	4b96      	ldr	r3, [pc, #600]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f040 81a9 	bne.w	8009dc2 <scaraFlowDuty+0x38a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009a70:	4b93      	ldr	r3, [pc, #588]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009a72:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d12d      	bne.n	8009ad6 <scaraFlowDuty+0x9e>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8009a7a:	f107 0308 	add.w	r3, r7, #8
 8009a7e:	ed93 0b00 	vldr	d0, [r3]
 8009a82:	4890      	ldr	r0, [pc, #576]	; (8009cc4 <scaraFlowDuty+0x28c>)
 8009a84:	f7fe ff6a 	bl	800895c <scaraFlowLSPB1>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009a8e:	4b8c      	ldr	r3, [pc, #560]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009a90:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8009a94:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009a98:	4b89      	ldr	r3, [pc, #548]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009a9a:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8009a9e:	f107 0210 	add.w	r2, r7, #16
 8009aa2:	e9c2 3400 	strd	r3, r4, [r2]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009aa6:	4b86      	ldr	r3, [pc, #536]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009aa8:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8009aac:	f107 0108 	add.w	r1, r7, #8
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4623      	mov	r3, r4
 8009ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ab8:	f7f6 fd9e 	bl	80005f8 <__aeabi_dmul>
 8009abc:	4603      	mov	r3, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009ac4:	4b7e      	ldr	r3, [pc, #504]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009ac6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009aca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009ad4:	e09f      	b.n	8009c16 <scaraFlowDuty+0x1de>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009ad6:	4b7a      	ldr	r3, [pc, #488]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009ad8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d128      	bne.n	8009b32 <scaraFlowDuty+0xfa>
//			s = myDUTY.task.trajectory_3d.scurve.s_current;
//			v = myDUTY.task.trajectory_3d.scurve.v_current;
//			angle = myDUTY.task.trajectory_roll.scurve.s_current;
//			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8009ae0:	f107 0308 	add.w	r3, r7, #8
 8009ae4:	ed93 0b00 	vldr	d0, [r3]
 8009ae8:	4877      	ldr	r0, [pc, #476]	; (8009cc8 <scaraFlowDuty+0x290>)
 8009aea:	f7ff f9c1 	bl	8008e70 <scaraFLowScurve1>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8009af4:	4b72      	ldr	r3, [pc, #456]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009af6:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8009afa:	f107 0210 	add.w	r2, r7, #16
 8009afe:	e9c2 3400 	strd	r3, r4, [r2]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009b02:	4b6f      	ldr	r3, [pc, #444]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009b04:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8009b08:	f107 0108 	add.w	r1, r7, #8
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	4623      	mov	r3, r4
 8009b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b14:	f7f6 fd70 	bl	80005f8 <__aeabi_dmul>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009b20:	4b67      	ldr	r3, [pc, #412]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009b22:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009b26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009b30:	e071      	b.n	8009c16 <scaraFlowDuty+0x1de>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8009b32:	4b63      	ldr	r3, [pc, #396]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009b34:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d129      	bne.n	8009b90 <scaraFlowDuty+0x158>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8009b3c:	4b60      	ldr	r3, [pc, #384]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009b3e:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009b42:	f107 0308 	add.w	r3, r7, #8
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	f7f6 fd55 	bl	80005f8 <__aeabi_dmul>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	460c      	mov	r4, r1
 8009b52:	f107 0210 	add.w	r2, r7, #16
 8009b56:	e9c2 3400 	strd	r3, r4, [r2]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009b5a:	4b59      	ldr	r3, [pc, #356]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009b5c:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8009b60:	f107 0108 	add.w	r1, r7, #8
 8009b64:	461a      	mov	r2, r3
 8009b66:	4623      	mov	r3, r4
 8009b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b6c:	f7f6 fd44 	bl	80005f8 <__aeabi_dmul>
 8009b70:	4603      	mov	r3, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009b78:	4b51      	ldr	r3, [pc, #324]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009b7a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009b7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009b8e:	e042      	b.n	8009c16 <scaraFlowDuty+0x1de>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 8009b90:	4b4b      	ldr	r3, [pc, #300]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009b92:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d13b      	bne.n	8009c12 <scaraFlowDuty+0x1da>
			scaraFlowGCODE(&s, time);
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	f107 0210 	add.w	r2, r7, #16
 8009ba2:	ed93 0b00 	vldr	d0, [r3]
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7ff f876 	bl	8008c98 <scaraFlowGCODE>
			s -= accumulate_s;
 8009bac:	f107 0310 	add.w	r3, r7, #16
 8009bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bb4:	4b45      	ldr	r3, [pc, #276]	; (8009ccc <scaraFlowDuty+0x294>)
 8009bb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	4623      	mov	r3, r4
 8009bbe:	f7f6 fb63 	bl	8000288 <__aeabi_dsub>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	f107 0210 	add.w	r2, r7, #16
 8009bca:	e9c2 3400 	strd	r3, r4, [r2]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009bce:	4b3c      	ldr	r3, [pc, #240]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009bd0:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8009bd4:	4b3e      	ldr	r3, [pc, #248]	; (8009cd0 <scaraFlowDuty+0x298>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f107 0108 	add.w	r1, r7, #8
 8009bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be2:	f7f6 fb51 	bl	8000288 <__aeabi_dsub>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4620      	mov	r0, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7f6 fd03 	bl	80005f8 <__aeabi_dmul>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009bfa:	4b31      	ldr	r3, [pc, #196]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009bfc:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009c00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009c10:	e001      	b.n	8009c16 <scaraFlowDuty+0x1de>

		}else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009c12:	2305      	movs	r3, #5
 8009c14:	e2dd      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009c16:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <scaraFlowDuty+0x1ec>
			return status1;
 8009c1e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009c22:	e2d6      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009c24:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <scaraFlowDuty+0x1fa>
			return status2;
 8009c2c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009c30:	e2cf      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009c32:	4b23      	ldr	r3, [pc, #140]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009c34:	7a1b      	ldrb	r3, [r3, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d11d      	bne.n	8009c76 <scaraFlowDuty+0x23e>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8009c3a:	f107 0310 	add.w	r3, r7, #16
 8009c3e:	ed93 7b00 	vldr	d7, [r3]
 8009c42:	eeb0 0a47 	vmov.f32	s0, s14
 8009c46:	eef0 0a67 	vmov.f32	s1, s15
 8009c4a:	4822      	ldr	r0, [pc, #136]	; (8009cd4 <scaraFlowDuty+0x29c>)
 8009c4c:	f000 facc 	bl	800a1e8 <scaraFlowLine>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009c58:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8009c5c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 8009c60:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009c62:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8009c66:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 8009c6a:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009c6c:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8009c70:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 8009c74:	e032      	b.n	8009cdc <scaraFlowDuty+0x2a4>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8009c76:	4b12      	ldr	r3, [pc, #72]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009c78:	7a1b      	ldrb	r3, [r3, #8]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d11d      	bne.n	8009cba <scaraFlowDuty+0x282>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8009c7e:	f107 0310 	add.w	r3, r7, #16
 8009c82:	ed93 7b00 	vldr	d7, [r3]
 8009c86:	eeb0 0a47 	vmov.f32	s0, s14
 8009c8a:	eef0 0a67 	vmov.f32	s1, s15
 8009c8e:	4812      	ldr	r0, [pc, #72]	; (8009cd8 <scaraFlowDuty+0x2a0>)
 8009c90:	f000 fb32 	bl	800a2f8 <scaraFlowCircle>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009c9c:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8009ca0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 8009ca4:	4b06      	ldr	r3, [pc, #24]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009ca6:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8009caa:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 8009cae:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <scaraFlowDuty+0x288>)
 8009cb0:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8009cb4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 8009cb8:	e010      	b.n	8009cdc <scaraFlowDuty+0x2a4>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e289      	b.n	800a1d2 <scaraFlowDuty+0x79a>
 8009cbe:	bf00      	nop
 8009cc0:	2000def0 	.word	0x2000def0
 8009cc4:	2000e008 	.word	0x2000e008
 8009cc8:	2000e088 	.word	0x2000e088
 8009ccc:	200065c8 	.word	0x200065c8
 8009cd0:	2000dd10 	.word	0x2000dd10
 8009cd4:	2000df00 	.word	0x2000df00
 8009cd8:	2000df70 	.word	0x2000df70
		}

		positionCompute.x 		= x;
 8009cdc:	f107 0218 	add.w	r2, r7, #24
 8009ce0:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8009ce4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8009ce8:	f107 0218 	add.w	r2, r7, #24
 8009cec:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8009cf0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 8009cf4:	f107 0218 	add.w	r2, r7, #24
 8009cf8:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8009cfc:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8009d00:	4bb4      	ldr	r3, [pc, #720]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009d02:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8009d06:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d0a:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7f6 fc08 	bl	8000524 <__aeabi_i2d>
 8009d14:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009d18:	f7f6 fc6e 	bl	80005f8 <__aeabi_dmul>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4620      	mov	r0, r4
 8009d22:	4629      	mov	r1, r5
 8009d24:	f7f6 fab2 	bl	800028c <__adddf3>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	f107 0218 	add.w	r2, r7, #24
 8009d30:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8009d34:	f107 0310 	add.w	r3, r7, #16
 8009d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d3c:	f107 0218 	add.w	r2, r7, #24
 8009d40:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8009d44:	f107 0218 	add.w	r2, r7, #24
 8009d48:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8009d4c:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8009d50:	f107 0218 	add.w	r2, r7, #24
 8009d54:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8009d58:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8009d5c:	f107 0218 	add.w	r2, r7, #24
 8009d60:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8009d64:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8009d68:	4b9a      	ldr	r3, [pc, #616]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009d6a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009d6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d72:	f107 0218 	add.w	r2, r7, #24
 8009d76:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8009d7a:	f107 0218 	add.w	r2, r7, #24
 8009d7e:	f107 0308 	add.w	r3, r7, #8
 8009d82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d86:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8009d8a:	f107 0418 	add.w	r4, r7, #24
 8009d8e:	4668      	mov	r0, sp
 8009d90:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009d94:	22b8      	movs	r2, #184	; 0xb8
 8009d96:	4619      	mov	r1, r3
 8009d98:	f00b fff0 	bl	8015d7c <memcpy>
 8009d9c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009da0:	cb0c      	ldmia	r3, {r2, r3}
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7fb fa3c 	bl	8005220 <kinematicInverse>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <scaraFlowDuty+0x37a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009dae:	2307      	movs	r3, #7
 8009db0:	e20f      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009db2:	f107 0118 	add.w	r1, r7, #24
 8009db6:	1d3b      	adds	r3, r7, #4
 8009db8:	22c0      	movs	r2, #192	; 0xc0
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	f00b ffde 	bl	8015d7c <memcpy>
 8009dc0:	e206      	b.n	800a1d0 <scaraFlowDuty+0x798>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8009dc2:	4b84      	ldr	r3, [pc, #528]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	f040 8200 	bne.w	800a1cc <scaraFlowDuty+0x794>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8009dcc:	4b81      	ldr	r3, [pc, #516]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009dce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d174      	bne.n	8009ec0 <scaraFlowDuty+0x488>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8009dd6:	f107 0308 	add.w	r3, r7, #8
 8009dda:	ed93 0b00 	vldr	d0, [r3]
 8009dde:	487e      	ldr	r0, [pc, #504]	; (8009fd8 <scaraFlowDuty+0x5a0>)
 8009de0:	f7fe fdbc 	bl	800895c <scaraFlowLSPB1>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	ed93 0b00 	vldr	d0, [r3]
 8009df2:	487a      	ldr	r0, [pc, #488]	; (8009fdc <scaraFlowDuty+0x5a4>)
 8009df4:	f7fe fdb2 	bl	800895c <scaraFlowLSPB1>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8009dfe:	f107 0308 	add.w	r3, r7, #8
 8009e02:	ed93 0b00 	vldr	d0, [r3]
 8009e06:	4876      	ldr	r0, [pc, #472]	; (8009fe0 <scaraFlowDuty+0x5a8>)
 8009e08:	f7fe fda8 	bl	800895c <scaraFlowLSPB1>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8009e12:	f107 0308 	add.w	r3, r7, #8
 8009e16:	ed93 0b00 	vldr	d0, [r3]
 8009e1a:	4872      	ldr	r0, [pc, #456]	; (8009fe4 <scaraFlowDuty+0x5ac>)
 8009e1c:	f7fe fd9e 	bl	800895c <scaraFlowLSPB1>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8009e26:	4b6b      	ldr	r3, [pc, #428]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e28:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8009e2c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8009e30:	4b68      	ldr	r3, [pc, #416]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e32:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8009e36:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8009e3a:	4b66      	ldr	r3, [pc, #408]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e3c:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8009e40:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8009e44:	4b63      	ldr	r3, [pc, #396]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e46:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8009e4a:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8009e4e:	4b61      	ldr	r3, [pc, #388]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e50:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009e54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e58:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8009e5c:	4b5d      	ldr	r3, [pc, #372]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e5e:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8009e62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e66:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8009e6a:	4b5a      	ldr	r3, [pc, #360]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e6c:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8009e70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e74:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8009e78:	4b56      	ldr	r3, [pc, #344]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e7a:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8009e7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e82:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8009e86:	4b53      	ldr	r3, [pc, #332]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e88:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8009e8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e90:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8009e94:	4b4f      	ldr	r3, [pc, #316]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009e96:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8009e9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e9e:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8009ea2:	4b4c      	ldr	r3, [pc, #304]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009ea4:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8009ea8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009eac:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8009eb0:	4b48      	ldr	r3, [pc, #288]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009eb2:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8009eb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009eba:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8009ebe:	e07b      	b.n	8009fb8 <scaraFlowDuty+0x580>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8009ec0:	4b44      	ldr	r3, [pc, #272]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009ec2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d174      	bne.n	8009fb4 <scaraFlowDuty+0x57c>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8009eca:	f107 0308 	add.w	r3, r7, #8
 8009ece:	ed93 0b00 	vldr	d0, [r3]
 8009ed2:	4845      	ldr	r0, [pc, #276]	; (8009fe8 <scaraFlowDuty+0x5b0>)
 8009ed4:	f000 fa98 	bl	800a408 <scaraFLowScurve>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8009ede:	f107 0308 	add.w	r3, r7, #8
 8009ee2:	ed93 0b00 	vldr	d0, [r3]
 8009ee6:	4841      	ldr	r0, [pc, #260]	; (8009fec <scaraFlowDuty+0x5b4>)
 8009ee8:	f000 fa8e 	bl	800a408 <scaraFLowScurve>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	ed93 0b00 	vldr	d0, [r3]
 8009efa:	483d      	ldr	r0, [pc, #244]	; (8009ff0 <scaraFlowDuty+0x5b8>)
 8009efc:	f000 fa84 	bl	800a408 <scaraFLowScurve>
 8009f00:	4603      	mov	r3, r0
 8009f02:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8009f06:	f107 0308 	add.w	r3, r7, #8
 8009f0a:	ed93 0b00 	vldr	d0, [r3]
 8009f0e:	4839      	ldr	r0, [pc, #228]	; (8009ff4 <scaraFlowDuty+0x5bc>)
 8009f10:	f000 fa7a 	bl	800a408 <scaraFLowScurve>
 8009f14:	4603      	mov	r3, r0
 8009f16:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8009f1a:	4b2e      	ldr	r3, [pc, #184]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f1c:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8009f20:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8009f24:	4b2b      	ldr	r3, [pc, #172]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f26:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8009f2a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8009f2e:	4b29      	ldr	r3, [pc, #164]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f30:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8009f34:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8009f38:	4b26      	ldr	r3, [pc, #152]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f3a:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8009f3e:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8009f42:	4b24      	ldr	r3, [pc, #144]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f44:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8009f48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f4c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8009f50:	4b20      	ldr	r3, [pc, #128]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f52:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8009f56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f5a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8009f5e:	4b1d      	ldr	r3, [pc, #116]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f60:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8009f64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f68:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8009f6c:	4b19      	ldr	r3, [pc, #100]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f6e:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8009f72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f76:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8009f7a:	4b16      	ldr	r3, [pc, #88]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f7c:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8009f80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f84:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8009f88:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f8a:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8009f8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f92:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8009f96:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009f98:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8009f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fa0:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8009fa4:	4b0b      	ldr	r3, [pc, #44]	; (8009fd4 <scaraFlowDuty+0x59c>)
 8009fa6:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8009faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fae:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8009fb2:	e001      	b.n	8009fb8 <scaraFlowDuty+0x580>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009fb4:	2305      	movs	r3, #5
 8009fb6:	e10c      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8009fb8:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <scaraFlowDuty+0x58e>
			return status1;
 8009fc0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009fc4:	e105      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009fc6:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d014      	beq.n	8009ff8 <scaraFlowDuty+0x5c0>
			return status2;
 8009fce:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009fd2:	e0fe      	b.n	800a1d2 <scaraFlowDuty+0x79a>
 8009fd4:	2000def0 	.word	0x2000def0
 8009fd8:	2000e310 	.word	0x2000e310
 8009fdc:	2000e490 	.word	0x2000e490
 8009fe0:	2000e610 	.word	0x2000e610
 8009fe4:	2000e790 	.word	0x2000e790
 8009fe8:	2000e390 	.word	0x2000e390
 8009fec:	2000e510 	.word	0x2000e510
 8009ff0:	2000e690 	.word	0x2000e690
 8009ff4:	2000e810 	.word	0x2000e810
		}
		if ( SCARA_STATUS_OK != status3) {
 8009ff8:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <scaraFlowDuty+0x5ce>
			return status3;
 800a000:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a004:	e0e5      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a006:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <scaraFlowDuty+0x5dc>
			return status4;
 800a00e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a012:	e0de      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800a014:	4b73      	ldr	r3, [pc, #460]	; (800a1e4 <scaraFlowDuty+0x7ac>)
 800a016:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800a01a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a01e:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800a022:	4618      	mov	r0, r3
 800a024:	f7f6 fa7e 	bl	8000524 <__aeabi_i2d>
 800a028:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a02c:	f7f6 fae4 	bl	80005f8 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4620      	mov	r0, r4
 800a036:	4629      	mov	r1, r5
 800a038:	f7f6 f928 	bl	800028c <__adddf3>
 800a03c:	4603      	mov	r3, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	f107 0218 	add.w	r2, r7, #24
 800a044:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 800a048:	4b66      	ldr	r3, [pc, #408]	; (800a1e4 <scaraFlowDuty+0x7ac>)
 800a04a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800a04e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a052:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800a056:	4618      	mov	r0, r3
 800a058:	f7f6 fa64 	bl	8000524 <__aeabi_i2d>
 800a05c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 f90e 	bl	800028c <__adddf3>
 800a070:	4603      	mov	r3, r0
 800a072:	460c      	mov	r4, r1
 800a074:	f107 0218 	add.w	r2, r7, #24
 800a078:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800a07c:	4b59      	ldr	r3, [pc, #356]	; (800a1e4 <scaraFlowDuty+0x7ac>)
 800a07e:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a082:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a086:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7f6 fa4a 	bl	8000524 <__aeabi_i2d>
 800a090:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a094:	f7f6 fab0 	bl	80005f8 <__aeabi_dmul>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4620      	mov	r0, r4
 800a09e:	4629      	mov	r1, r5
 800a0a0:	f7f6 f8f4 	bl	800028c <__adddf3>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	f107 0218 	add.w	r2, r7, #24
 800a0ac:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 800a0b0:	4b4c      	ldr	r3, [pc, #304]	; (800a1e4 <scaraFlowDuty+0x7ac>)
 800a0b2:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800a0b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a0ba:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f6 fa30 	bl	8000524 <__aeabi_i2d>
 800a0c4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a0c8:	f7f6 fa96 	bl	80005f8 <__aeabi_dmul>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	f7f6 f8da 	bl	800028c <__adddf3>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f107 0218 	add.w	r2, r7, #24
 800a0e0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a0e4:	f107 0218 	add.w	r2, r7, #24
 800a0e8:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800a0ec:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a0f0:	f107 0218 	add.w	r2, r7, #24
 800a0f4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800a0f8:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a0fc:	f107 0218 	add.w	r2, r7, #24
 800a100:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800a104:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a108:	f107 0218 	add.w	r2, r7, #24
 800a10c:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800a110:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a114:	f107 0218 	add.w	r2, r7, #24
 800a118:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800a11c:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800a120:	f107 0218 	add.w	r2, r7, #24
 800a124:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800a128:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800a12c:	f107 0218 	add.w	r2, r7, #24
 800a130:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800a134:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 800a138:	f107 0218 	add.w	r2, r7, #24
 800a13c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800a140:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a144:	4b27      	ldr	r3, [pc, #156]	; (800a1e4 <scaraFlowDuty+0x7ac>)
 800a146:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a14a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a14e:	f107 0218 	add.w	r2, r7, #24
 800a152:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a156:	f107 0218 	add.w	r2, r7, #24
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a162:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a166:	f107 0318 	add.w	r3, r7, #24
 800a16a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a16e:	f107 0318 	add.w	r3, r7, #24
 800a172:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a176:	f107 0318 	add.w	r3, r7, #24
 800a17a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a17e:	f107 0318 	add.w	r3, r7, #24
 800a182:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a186:	eeb0 3a44 	vmov.f32	s6, s8
 800a18a:	eef0 3a64 	vmov.f32	s7, s9
 800a18e:	eeb0 2a45 	vmov.f32	s4, s10
 800a192:	eef0 2a65 	vmov.f32	s5, s11
 800a196:	eeb0 1a46 	vmov.f32	s2, s12
 800a19a:	eef0 1a66 	vmov.f32	s3, s13
 800a19e:	eeb0 0a47 	vmov.f32	s0, s14
 800a1a2:	eef0 0a67 	vmov.f32	s1, s15
 800a1a6:	f000 f93f 	bl	800a428 <scaraCheckWorkSpace4>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <scaraFlowDuty+0x77c>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a1b0:	2307      	movs	r3, #7
 800a1b2:	e00e      	b.n	800a1d2 <scaraFlowDuty+0x79a>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a1b4:	f107 0118 	add.w	r1, r7, #24
 800a1b8:	1d3b      	adds	r3, r7, #4
 800a1ba:	22c0      	movs	r2, #192	; 0xc0
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	f00b fddd 	bl	8015d7c <memcpy>
		}
		kinematicForward(pos_Next);
 800a1c2:	1d3b      	adds	r3, r7, #4
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	f7fa feef 	bl	8004fa8 <kinematicForward>
 800a1ca:	e001      	b.n	800a1d0 <scaraFlowDuty+0x798>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	e000      	b.n	800a1d2 <scaraFlowDuty+0x79a>
	}

	return SCARA_STATUS_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a1de:	b002      	add	sp, #8
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	2000def0 	.word	0x2000def0

0800a1e8 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 800a1e8:	b5b0      	push	{r4, r5, r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a1fa:	a33d      	add	r3, pc, #244	; (adr r3, 800a2f0 <scaraFlowLine+0x108>)
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f7f6 fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d05a      	beq.n	800a2c0 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800a216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a21a:	f7f6 f9ed 	bl	80005f8 <__aeabi_dmul>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	4610      	mov	r0, r2
 800a224:	4619      	mov	r1, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a22c:	f7f6 fb0e 	bl	800084c <__aeabi_ddiv>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	4620      	mov	r0, r4
 800a236:	4629      	mov	r1, r5
 800a238:	f7f6 f828 	bl	800028c <__adddf3>
 800a23c:	4603      	mov	r3, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a252:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a256:	f7f6 f9cf 	bl	80005f8 <__aeabi_dmul>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4610      	mov	r0, r2
 800a260:	4619      	mov	r1, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a268:	f7f6 faf0 	bl	800084c <__aeabi_ddiv>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4620      	mov	r0, r4
 800a272:	4629      	mov	r1, r5
 800a274:	f7f6 f80a 	bl	800028c <__adddf3>
 800a278:	4603      	mov	r3, r0
 800a27a:	460c      	mov	r4, r1
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a28e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a292:	f7f6 f9b1 	bl	80005f8 <__aeabi_dmul>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4610      	mov	r0, r2
 800a29c:	4619      	mov	r1, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a2a4:	f7f6 fad2 	bl	800084c <__aeabi_ddiv>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	f7f5 ffec 	bl	800028c <__adddf3>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 800a2be:	e011      	b.n	800a2e4 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	47ae147b 	.word	0x47ae147b
 800a2f4:	3f847ae1 	.word	0x3f847ae1

0800a2f8 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 800a2f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2fc:	b086      	sub	sp, #24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a30c:	461a      	mov	r2, r3
 800a30e:	4623      	mov	r3, r4
 800a310:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a314:	f7f6 fa9a 	bl	800084c <__aeabi_ddiv>
 800a318:	4603      	mov	r3, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f993 3000 	ldrsb.w	r3, [r3]
 800a338:	4618      	mov	r0, r3
 800a33a:	f7f6 f8f3 	bl	8000524 <__aeabi_i2d>
 800a33e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a342:	f7f6 f959 	bl	80005f8 <__aeabi_dmul>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4650      	mov	r0, sl
 800a34c:	4659      	mov	r1, fp
 800a34e:	f7f5 ff9d 	bl	800028c <__adddf3>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	ec43 2b17 	vmov	d7, r2, r3
 800a35a:	eeb0 0a47 	vmov.f32	s0, s14
 800a35e:	eef0 0a67 	vmov.f32	s1, s15
 800a362:	f00f faf9 	bl	8019958 <cos>
 800a366:	ec53 2b10 	vmov	r2, r3, d0
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	f7f6 f943 	bl	80005f8 <__aeabi_dmul>
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	4620      	mov	r0, r4
 800a378:	4629      	mov	r1, r5
 800a37a:	f7f5 ff87 	bl	800028c <__adddf3>
 800a37e:	4603      	mov	r3, r0
 800a380:	460c      	mov	r4, r1
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f993 3000 	ldrsb.w	r3, [r3]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7f6 f8bf 	bl	8000524 <__aeabi_i2d>
 800a3a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a3aa:	f7f6 f925 	bl	80005f8 <__aeabi_dmul>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4650      	mov	r0, sl
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	f7f5 ff69 	bl	800028c <__adddf3>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	ec43 2b17 	vmov	d7, r2, r3
 800a3c2:	eeb0 0a47 	vmov.f32	s0, s14
 800a3c6:	eef0 0a67 	vmov.f32	s1, s15
 800a3ca:	f00f fb55 	bl	8019a78 <sin>
 800a3ce:	ec53 2b10 	vmov	r2, r3, d0
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	f7f6 f90f 	bl	80005f8 <__aeabi_dmul>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4620      	mov	r0, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	f7f5 ff53 	bl	800028c <__adddf3>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a408 <scaraFLowScurve>:
	return SCARA_STATUS_OK;
}


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	ed87 0b00 	vstr	d0, [r7]
//
//	 } else {
//		 return SCARA_STATUS_ERROR;
//	 }

	 return SCARA_STATUS_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	0000      	movs	r0, r0
 800a424:	0000      	movs	r0, r0
	...

0800a428 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	ed87 0b06 	vstr	d0, [r7, #24]
 800a432:	ed87 1b04 	vstr	d1, [r7, #16]
 800a436:	ed87 2b02 	vstr	d2, [r7, #8]
 800a43a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a43e:	a335      	add	r3, pc, #212	; (adr r3, 800a514 <scaraCheckWorkSpace4+0xec>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a448:	f7f6 fb48 	bl	8000adc <__aeabi_dcmplt>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d109      	bne.n	800a466 <scaraCheckWorkSpace4+0x3e>
 800a452:	a332      	add	r3, pc, #200	; (adr r3, 800a51c <scaraCheckWorkSpace4+0xf4>)
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a45c:	f7f6 fb5c 	bl	8000b18 <__aeabi_dcmpgt>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a466:	2307      	movs	r3, #7
 800a468:	e043      	b.n	800a4f2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a46a:	a32e      	add	r3, pc, #184	; (adr r3, 800a524 <scaraCheckWorkSpace4+0xfc>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a474:	f7f6 fb32 	bl	8000adc <__aeabi_dcmplt>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d109      	bne.n	800a492 <scaraCheckWorkSpace4+0x6a>
 800a47e:	a32b      	add	r3, pc, #172	; (adr r3, 800a52c <scaraCheckWorkSpace4+0x104>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a488:	f7f6 fb46 	bl	8000b18 <__aeabi_dcmpgt>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a492:	2307      	movs	r3, #7
 800a494:	e02d      	b.n	800a4f2 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a496:	f04f 0200 	mov.w	r2, #0
 800a49a:	f04f 0300 	mov.w	r3, #0
 800a49e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4a2:	f7f6 fb1b 	bl	8000adc <__aeabi_dcmplt>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d109      	bne.n	800a4c0 <scaraCheckWorkSpace4+0x98>
 800a4ac:	f04f 0200 	mov.w	r2, #0
 800a4b0:	4b17      	ldr	r3, [pc, #92]	; (800a510 <scaraCheckWorkSpace4+0xe8>)
 800a4b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4b6:	f7f6 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4c0:	2307      	movs	r3, #7
 800a4c2:	e016      	b.n	800a4f2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a4c4:	a30e      	add	r3, pc, #56	; (adr r3, 800a500 <scaraCheckWorkSpace4+0xd8>)
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4ce:	f7f6 fb05 	bl	8000adc <__aeabi_dcmplt>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d109      	bne.n	800a4ec <scaraCheckWorkSpace4+0xc4>
 800a4d8:	a30b      	add	r3, pc, #44	; (adr r3, 800a508 <scaraCheckWorkSpace4+0xe0>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4e2:	f7f6 fb19 	bl	8000b18 <__aeabi_dcmpgt>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4ec:	2307      	movs	r3, #7
 800a4ee:	e000      	b.n	800a4f2 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3720      	adds	r7, #32
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w
 800a500:	a7777778 	.word	0xa7777778
 800a504:	c0088956 	.word	0xc0088956
 800a508:	a7777778 	.word	0xa7777778
 800a50c:	40088956 	.word	0x40088956
 800a510:	40590000 	.word	0x40590000
 800a514:	74444445 	.word	0x74444445
 800a518:	bff95623 	.word	0xbff95623
 800a51c:	74444445 	.word	0x74444445
 800a520:	3ff95623 	.word	0x3ff95623
 800a524:	54cccccd 	.word	0x54cccccd
 800a528:	c003a649 	.word	0xc003a649
 800a52c:	54cccccd 	.word	0x54cccccd
 800a530:	4003a649 	.word	0x4003a649
 800a534:	00000000 	.word	0x00000000

0800a538 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a538:	b5b0      	push	{r4, r5, r7, lr}
 800a53a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a53e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a540:	f04f 0300 	mov.w	r3, #0
 800a544:	f04f 0400 	mov.w	r4, #0
 800a548:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a54c:	463b      	mov	r3, r7
 800a54e:	4a36      	ldr	r2, [pc, #216]	; (800a628 <scaraTestDuty+0xf0>)
 800a550:	4618      	mov	r0, r3
 800a552:	4611      	mov	r1, r2
 800a554:	23c0      	movs	r3, #192	; 0xc0
 800a556:	461a      	mov	r2, r3
 800a558:	f00b fc10 	bl	8015d7c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a55c:	4b33      	ldr	r3, [pc, #204]	; (800a62c <scaraTestDuty+0xf4>)
 800a55e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a562:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a566:	a32e      	add	r3, pc, #184	; (adr r3, 800a620 <scaraTestDuty+0xe8>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f7f6 f96e 	bl	800084c <__aeabi_ddiv>
 800a570:	4603      	mov	r3, r0
 800a572:	460c      	mov	r4, r1
 800a574:	ec44 3b17 	vmov	d7, r3, r4
 800a578:	eeb0 0a47 	vmov.f32	s0, s14
 800a57c:	eef0 0a67 	vmov.f32	s1, s15
 800a580:	f00f f96a 	bl	8019858 <ceil>
 800a584:	ec54 3b10 	vmov	r3, r4, d0
 800a588:	4618      	mov	r0, r3
 800a58a:	4621      	mov	r1, r4
 800a58c:	f7f6 fae4 	bl	8000b58 <__aeabi_d2iz>
 800a590:	4603      	mov	r3, r0
 800a592:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a596:	2301      	movs	r3, #1
 800a598:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a59c:	e032      	b.n	800a604 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a59e:	a320      	add	r3, pc, #128	; (adr r3, 800a620 <scaraTestDuty+0xe8>)
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a5a8:	f7f5 fe70 	bl	800028c <__adddf3>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a5b4:	463c      	mov	r4, r7
 800a5b6:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a5ba:	4668      	mov	r0, sp
 800a5bc:	f104 0308 	add.w	r3, r4, #8
 800a5c0:	22b8      	movs	r2, #184	; 0xb8
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f00b fbda 	bl	8015d7c <memcpy>
 800a5c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a5d2:	f7ff fa31 	bl	8009a38 <scaraFlowDuty>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a5dc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <scaraTestDuty+0xb2>
			return status;
 800a5e4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5e8:	e013      	b.n	800a612 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a5ea:	463a      	mov	r2, r7
 800a5ec:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	22c0      	movs	r2, #192	; 0xc0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f00b fbc1 	bl	8015d7c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a5fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a5fe:	3301      	adds	r3, #1
 800a600:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a604:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a608:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a60c:	429a      	cmp	r2, r3
 800a60e:	dbc6      	blt.n	800a59e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a618:	46bd      	mov	sp, r7
 800a61a:	bdb0      	pop	{r4, r5, r7, pc}
 800a61c:	f3af 8000 	nop.w
 800a620:	40000000 	.word	0x40000000
 800a624:	3f847ae1 	.word	0x3f847ae1
 800a628:	2000eab0 	.word	0x2000eab0
 800a62c:	2000def0 	.word	0x2000def0

0800a630 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a630:	b480      	push	{r7}
 800a632:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a634:	4b03      	ldr	r3, [pc, #12]	; (800a644 <scaraSetScanFlag+0x14>)
 800a636:	2201      	movs	r2, #1
 800a638:	70da      	strb	r2, [r3, #3]
}
 800a63a:	bf00      	nop
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	2000207c 	.word	0x2000207c

0800a648 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a652:	4a05      	ldr	r2, [pc, #20]	; (800a668 <scaraSetOutput+0x20>)
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a658:	79fb      	ldrb	r3, [r7, #7]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fc f8c0 	bl	80067e0 <lowlayer_setOutput>
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	2000207c 	.word	0x2000207c

0800a66c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	4603      	mov	r3, r0
 800a674:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a676:	4a04      	ldr	r2, [pc, #16]	; (800a688 <scaraSetDutyState+0x1c>)
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	7093      	strb	r3, [r2, #2]
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	2000207c 	.word	0x2000207c

0800a68c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a696:	4a04      	ldr	r2, [pc, #16]	; (800a6a8 <scaraSetMode+0x1c>)
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	7053      	strb	r3, [r2, #1]
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	2000207c 	.word	0x2000207c

0800a6ac <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a6b6:	4a04      	ldr	r2, [pc, #16]	; (800a6c8 <scaraSetMethod+0x1c>)
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	7013      	strb	r3, [r2, #0]
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	2000207c 	.word	0x2000207c

0800a6cc <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a6d4:	22c0      	movs	r2, #192	; 0xc0
 800a6d6:	4904      	ldr	r1, [pc, #16]	; (800a6e8 <scaraGetPosition+0x1c>)
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f00b fb4f 	bl	8015d7c <memcpy>
}
 800a6de:	bf00      	nop
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	2000eab0 	.word	0x2000eab0

0800a6ec <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a6f4:	22c0      	movs	r2, #192	; 0xc0
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	4803      	ldr	r0, [pc, #12]	; (800a708 <scaraUpdatePosition+0x1c>)
 800a6fa:	f00b fb3f 	bl	8015d7c <memcpy>
}
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	2000ec30 	.word	0x2000ec30

0800a70c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a710:	4b03      	ldr	r3, [pc, #12]	; (800a720 <scaraGetMode+0x14>)
 800a712:	785b      	ldrb	r3, [r3, #1]
}
 800a714:	4618      	mov	r0, r3
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	2000207c 	.word	0x2000207c

0800a724 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a724:	b480      	push	{r7}
 800a726:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a728:	4b03      	ldr	r3, [pc, #12]	; (800a738 <scaraGetMethod+0x14>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	2000207c 	.word	0x2000207c

0800a73c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a740:	4b03      	ldr	r3, [pc, #12]	; (800a750 <scaraGetDutyState+0x14>)
 800a742:	789b      	ldrb	r3, [r3, #2]
}
 800a744:	4618      	mov	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	2000207c 	.word	0x2000207c

0800a754 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a758:	4b03      	ldr	r3, [pc, #12]	; (800a768 <scaraIsScanLimit+0x14>)
 800a75a:	78db      	ldrb	r3, [r3, #3]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	2000207c 	.word	0x2000207c

0800a76c <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a76c:	b590      	push	{r4, r7, lr}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a776:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <scaraIsFinish+0x34>)
 800a778:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a77c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a780:	461a      	mov	r2, r3
 800a782:	4623      	mov	r3, r4
 800a784:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a788:	f7f6 f9c6 	bl	8000b18 <__aeabi_dcmpgt>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d001      	beq.n	800a796 <scaraIsFinish+0x2a>
		return TRUE;
 800a792:	2301      	movs	r3, #1
 800a794:	e000      	b.n	800a798 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a796:	2300      	movs	r3, #0
	}
}
 800a798:	4618      	mov	r0, r3
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd90      	pop	{r4, r7, pc}
 800a7a0:	2000def0 	.word	0x2000def0
 800a7a4:	00000000 	.word	0x00000000

0800a7a8 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	b590      	push	{r4, r7, lr}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	f107 0120 	add.w	r1, r7, #32
 800a7b6:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a7ba:	f06f 0303 	mvn.w	r3, #3
 800a7be:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a7c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a7c4:	a35c      	add	r3, pc, #368	; (adr r3, 800a938 <scaraPosition_packaging+0x190>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f5 ff15 	bl	80005f8 <__aeabi_dmul>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	f7f6 f9bf 	bl	8000b58 <__aeabi_d2iz>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3304      	adds	r3, #4
 800a7de:	60fb      	str	r3, [r7, #12]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	f000 f8aa 	bl	800a940 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a7ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a7f0:	a351      	add	r3, pc, #324	; (adr r3, 800a938 <scaraPosition_packaging+0x190>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 feff 	bl	80005f8 <__aeabi_dmul>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	4618      	mov	r0, r3
 800a800:	4621      	mov	r1, r4
 800a802:	f7f6 f9a9 	bl	8000b58 <__aeabi_d2iz>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3304      	adds	r3, #4
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	4413      	add	r3, r2
 800a812:	4619      	mov	r1, r3
 800a814:	f000 f894 	bl	800a940 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a818:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a81c:	a346      	add	r3, pc, #280	; (adr r3, 800a938 <scaraPosition_packaging+0x190>)
 800a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a822:	f7f5 fee9 	bl	80005f8 <__aeabi_dmul>
 800a826:	4603      	mov	r3, r0
 800a828:	460c      	mov	r4, r1
 800a82a:	4618      	mov	r0, r3
 800a82c:	4621      	mov	r1, r4
 800a82e:	f7f6 f993 	bl	8000b58 <__aeabi_d2iz>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3304      	adds	r3, #4
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	4413      	add	r3, r2
 800a83e:	4619      	mov	r1, r3
 800a840:	f000 f87e 	bl	800a940 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a844:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a848:	a33b      	add	r3, pc, #236	; (adr r3, 800a938 <scaraPosition_packaging+0x190>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f5 fed3 	bl	80005f8 <__aeabi_dmul>
 800a852:	4603      	mov	r3, r0
 800a854:	460c      	mov	r4, r1
 800a856:	4618      	mov	r0, r3
 800a858:	4621      	mov	r1, r4
 800a85a:	f7f6 f97d 	bl	8000b58 <__aeabi_d2iz>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3304      	adds	r3, #4
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	4413      	add	r3, r2
 800a86a:	4619      	mov	r1, r3
 800a86c:	f000 f868 	bl	800a940 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a870:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a874:	a330      	add	r3, pc, #192	; (adr r3, 800a938 <scaraPosition_packaging+0x190>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f7f5 febd 	bl	80005f8 <__aeabi_dmul>
 800a87e:	4603      	mov	r3, r0
 800a880:	460c      	mov	r4, r1
 800a882:	4618      	mov	r0, r3
 800a884:	4621      	mov	r1, r4
 800a886:	f7f6 f967 	bl	8000b58 <__aeabi_d2iz>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3304      	adds	r3, #4
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	4413      	add	r3, r2
 800a896:	4619      	mov	r1, r3
 800a898:	f000 f852 	bl	800a940 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a89c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a8a0:	a325      	add	r3, pc, #148	; (adr r3, 800a938 <scaraPosition_packaging+0x190>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f5 fea7 	bl	80005f8 <__aeabi_dmul>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	f7f6 f951 	bl	8000b58 <__aeabi_d2iz>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	f000 f83c 	bl	800a940 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8cc:	a31a      	add	r3, pc, #104	; (adr r3, 800a938 <scaraPosition_packaging+0x190>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f7f5 fe91 	bl	80005f8 <__aeabi_dmul>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	460c      	mov	r4, r1
 800a8da:	4618      	mov	r0, r3
 800a8dc:	4621      	mov	r1, r4
 800a8de:	f7f6 f93b 	bl	8000b58 <__aeabi_d2iz>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	60fb      	str	r3, [r7, #12]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	f000 f826 	bl	800a940 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a8f4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a8f8:	a30f      	add	r3, pc, #60	; (adr r3, 800a938 <scaraPosition_packaging+0x190>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	f7f5 fe7b 	bl	80005f8 <__aeabi_dmul>
 800a902:	4603      	mov	r3, r0
 800a904:	460c      	mov	r4, r1
 800a906:	4618      	mov	r0, r3
 800a908:	4621      	mov	r1, r4
 800a90a:	f7f6 f925 	bl	8000b58 <__aeabi_d2iz>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3304      	adds	r3, #4
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	4413      	add	r3, r2
 800a91a:	4619      	mov	r1, r3
 800a91c:	f000 f810 	bl	800a940 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3304      	adds	r3, #4
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a92e:	b002      	add	sp, #8
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	f3af 8000 	nop.w
 800a938:	00000000 	.word	0x00000000
 800a93c:	412e8480 	.word	0x412e8480

0800a940 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	121a      	asrs	r2, r3, #8
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	3301      	adds	r3, #1
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	141a      	asrs	r2, r3, #16
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	3302      	adds	r3, #2
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	161a      	asrs	r2, r3, #24
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	3303      	adds	r3, #3
 800a972:	b2d2      	uxtb	r2, r2
 800a974:	701a      	strb	r2, [r3, #0]
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	0000      	movs	r0, r0
 800a984:	0000      	movs	r0, r0
	...

0800a988 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a988:	b590      	push	{r4, r7, lr}
 800a98a:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a98e:	af6c      	add	r7, sp, #432	; 0x1b0
 800a990:	4602      	mov	r2, r0
 800a992:	463b      	mov	r3, r7
 800a994:	6019      	str	r1, [r3, #0]
 800a996:	1dfb      	adds	r3, r7, #7
 800a998:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a99a:	f107 0308 	add.w	r3, r7, #8
 800a99e:	2201      	movs	r2, #1
 800a9a0:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a9aa:	f107 0308 	add.w	r3, r7, #8
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	f04f 0400 	mov.w	r4, #0
 800a9ba:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a9be:	463b      	mov	r3, r7
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dd03      	ble.n	800a9ce <scaraKeyInit1+0x46>
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b0e      	cmp	r3, #14
 800a9cc:	dd01      	ble.n	800a9d2 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a9ce:	2306      	movs	r3, #6
 800a9d0:	e2c0      	b.n	800af54 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a9d2:	1dfb      	adds	r3, r7, #7
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	2b07      	cmp	r3, #7
 800a9d8:	f200 8298 	bhi.w	800af0c <scaraKeyInit1+0x584>
 800a9dc:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <scaraKeyInit1+0x5c>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800aa05 	.word	0x0800aa05
 800a9e8:	0800aaa7 	.word	0x0800aaa7
 800a9ec:	0800ab4d 	.word	0x0800ab4d
 800a9f0:	0800abeb 	.word	0x0800abeb
 800a9f4:	0800ac8d 	.word	0x0800ac8d
 800a9f8:	0800ad2b 	.word	0x0800ad2b
 800a9fc:	0800adcd 	.word	0x0800adcd
 800aa00:	0800ae6b 	.word	0x0800ae6b
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800aa04:	f107 0208 	add.w	r2, r7, #8
 800aa08:	f04f 0300 	mov.w	r3, #0
 800aa0c:	f04f 0400 	mov.w	r4, #0
 800aa10:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa14:	f107 0308 	add.w	r3, r7, #8
 800aa18:	2200      	movs	r2, #0
 800aa1a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa1c:	f107 0308 	add.w	r3, r7, #8
 800aa20:	2200      	movs	r2, #0
 800aa22:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800aa24:	463b      	mov	r3, r7
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7f5 fd78 	bl	8000524 <__aeabi_i2d>
 800aa34:	4603      	mov	r3, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	f107 0208 	add.w	r2, r7, #8
 800aa3c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aa40:	f107 0208 	add.w	r2, r7, #8
 800aa44:	f04f 0300 	mov.w	r3, #0
 800aa48:	f04f 0400 	mov.w	r4, #0
 800aa4c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aa50:	f107 0208 	add.w	r2, r7, #8
 800aa54:	f04f 0300 	mov.w	r3, #0
 800aa58:	f04f 0400 	mov.w	r4, #0
 800aa5c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa60:	f107 0208 	add.w	r2, r7, #8
 800aa64:	f04f 0300 	mov.w	r3, #0
 800aa68:	f04f 0400 	mov.w	r4, #0
 800aa6c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aa70:	463b      	mov	r3, r7
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	f7f5 fd56 	bl	8000524 <__aeabi_i2d>
 800aa78:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fdba 	bl	80005f8 <__aeabi_dmul>
 800aa84:	4603      	mov	r3, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	4618      	mov	r0, r3
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 fbfa 	bl	800028c <__adddf3>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	f107 0208 	add.w	r2, r7, #8
 800aaa0:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aaa4:	e232      	b.n	800af0c <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800aaa6:	f107 0208 	add.w	r2, r7, #8
 800aaaa:	f04f 0300 	mov.w	r3, #0
 800aaae:	f04f 0400 	mov.w	r4, #0
 800aab2:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aab6:	f107 0308 	add.w	r3, r7, #8
 800aaba:	2200      	movs	r2, #0
 800aabc:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aabe:	f107 0308 	add.w	r3, r7, #8
 800aac2:	2200      	movs	r2, #0
 800aac4:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800aac6:	463b      	mov	r3, r7
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4613      	mov	r3, r2
 800aacc:	079b      	lsls	r3, r3, #30
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7f5 fd25 	bl	8000524 <__aeabi_i2d>
 800aada:	4603      	mov	r3, r0
 800aadc:	460c      	mov	r4, r1
 800aade:	f107 0208 	add.w	r2, r7, #8
 800aae2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aae6:	f107 0208 	add.w	r2, r7, #8
 800aaea:	f04f 0300 	mov.w	r3, #0
 800aaee:	f04f 0400 	mov.w	r4, #0
 800aaf2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aaf6:	f107 0208 	add.w	r2, r7, #8
 800aafa:	f04f 0300 	mov.w	r3, #0
 800aafe:	f04f 0400 	mov.w	r4, #0
 800ab02:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab06:	f107 0208 	add.w	r2, r7, #8
 800ab0a:	f04f 0300 	mov.w	r3, #0
 800ab0e:	f04f 0400 	mov.w	r4, #0
 800ab12:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ab16:	463b      	mov	r3, r7
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f7f5 fd03 	bl	8000524 <__aeabi_i2d>
 800ab1e:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f7f5 fd67 	bl	80005f8 <__aeabi_dmul>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	4618      	mov	r0, r3
 800ab30:	4621      	mov	r1, r4
 800ab32:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fba7 	bl	800028c <__adddf3>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	460c      	mov	r4, r1
 800ab42:	f107 0208 	add.w	r2, r7, #8
 800ab46:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ab4a:	e1df      	b.n	800af0c <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800ab4c:	f107 0208 	add.w	r2, r7, #8
 800ab50:	f04f 0300 	mov.w	r3, #0
 800ab54:	f04f 0400 	mov.w	r4, #0
 800ab58:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab5c:	f107 0308 	add.w	r3, r7, #8
 800ab60:	2200      	movs	r2, #0
 800ab62:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	2200      	movs	r2, #0
 800ab6a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab6c:	f107 0208 	add.w	r2, r7, #8
 800ab70:	f04f 0300 	mov.w	r3, #0
 800ab74:	f04f 0400 	mov.w	r4, #0
 800ab78:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800ab7c:	463b      	mov	r3, r7
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f5 fccc 	bl	8000524 <__aeabi_i2d>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	f107 0208 	add.w	r2, r7, #8
 800ab94:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ab98:	f107 0208 	add.w	r2, r7, #8
 800ab9c:	f04f 0300 	mov.w	r3, #0
 800aba0:	f04f 0400 	mov.w	r4, #0
 800aba4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aba8:	f107 0208 	add.w	r2, r7, #8
 800abac:	f04f 0300 	mov.w	r3, #0
 800abb0:	f04f 0400 	mov.w	r4, #0
 800abb4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800abb8:	463b      	mov	r3, r7
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	f7f5 fcb2 	bl	8000524 <__aeabi_i2d>
 800abc0:	a3e7      	add	r3, pc, #924	; (adr r3, 800af60 <scaraKeyInit1+0x5d8>)
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f7f5 fd17 	bl	80005f8 <__aeabi_dmul>
 800abca:	4603      	mov	r3, r0
 800abcc:	460c      	mov	r4, r1
 800abce:	4618      	mov	r0, r3
 800abd0:	4621      	mov	r1, r4
 800abd2:	a3e5      	add	r3, pc, #916	; (adr r3, 800af68 <scaraKeyInit1+0x5e0>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	f7f5 fb58 	bl	800028c <__adddf3>
 800abdc:	4603      	mov	r3, r0
 800abde:	460c      	mov	r4, r1
 800abe0:	f107 0208 	add.w	r2, r7, #8
 800abe4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800abe8:	e190      	b.n	800af0c <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800abea:	f107 0208 	add.w	r2, r7, #8
 800abee:	f04f 0300 	mov.w	r3, #0
 800abf2:	f04f 0400 	mov.w	r4, #0
 800abf6:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800abfa:	f107 0308 	add.w	r3, r7, #8
 800abfe:	2200      	movs	r2, #0
 800ac00:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac02:	f107 0308 	add.w	r3, r7, #8
 800ac06:	2200      	movs	r2, #0
 800ac08:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac0a:	f107 0208 	add.w	r2, r7, #8
 800ac0e:	f04f 0300 	mov.w	r3, #0
 800ac12:	f04f 0400 	mov.w	r4, #0
 800ac16:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800ac1a:	463b      	mov	r3, r7
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	079b      	lsls	r3, r3, #30
 800ac22:	1a9b      	subs	r3, r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	1a9b      	subs	r3, r3, r2
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7f5 fc7b 	bl	8000524 <__aeabi_i2d>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	460c      	mov	r4, r1
 800ac32:	f107 0208 	add.w	r2, r7, #8
 800ac36:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac3a:	f107 0208 	add.w	r2, r7, #8
 800ac3e:	f04f 0300 	mov.w	r3, #0
 800ac42:	f04f 0400 	mov.w	r4, #0
 800ac46:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ac4a:	f107 0208 	add.w	r2, r7, #8
 800ac4e:	f04f 0300 	mov.w	r3, #0
 800ac52:	f04f 0400 	mov.w	r4, #0
 800ac56:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac5a:	463b      	mov	r3, r7
 800ac5c:	6818      	ldr	r0, [r3, #0]
 800ac5e:	f7f5 fc61 	bl	8000524 <__aeabi_i2d>
 800ac62:	a3bf      	add	r3, pc, #764	; (adr r3, 800af60 <scaraKeyInit1+0x5d8>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	f7f5 fcc6 	bl	80005f8 <__aeabi_dmul>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	4618      	mov	r0, r3
 800ac72:	4621      	mov	r1, r4
 800ac74:	a3bc      	add	r3, pc, #752	; (adr r3, 800af68 <scaraKeyInit1+0x5e0>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fb07 	bl	800028c <__adddf3>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	460c      	mov	r4, r1
 800ac82:	f107 0208 	add.w	r2, r7, #8
 800ac86:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ac8a:	e13f      	b.n	800af0c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ac8c:	f107 0208 	add.w	r2, r7, #8
 800ac90:	f04f 0300 	mov.w	r3, #0
 800ac94:	f04f 0400 	mov.w	r4, #0
 800ac98:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac9c:	f107 0308 	add.w	r3, r7, #8
 800aca0:	2200      	movs	r2, #0
 800aca2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aca4:	f107 0308 	add.w	r3, r7, #8
 800aca8:	2200      	movs	r2, #0
 800acaa:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800acac:	f107 0208 	add.w	r2, r7, #8
 800acb0:	f04f 0300 	mov.w	r3, #0
 800acb4:	f04f 0400 	mov.w	r4, #0
 800acb8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800acbc:	f107 0208 	add.w	r2, r7, #8
 800acc0:	f04f 0300 	mov.w	r3, #0
 800acc4:	f04f 0400 	mov.w	r4, #0
 800acc8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800accc:	463b      	mov	r3, r7
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	4613      	mov	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7f5 fc24 	bl	8000524 <__aeabi_i2d>
 800acdc:	4603      	mov	r3, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	f107 0208 	add.w	r2, r7, #8
 800ace4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ace8:	f107 0208 	add.w	r2, r7, #8
 800acec:	f04f 0300 	mov.w	r3, #0
 800acf0:	f04f 0400 	mov.w	r4, #0
 800acf4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800acf8:	463b      	mov	r3, r7
 800acfa:	6818      	ldr	r0, [r3, #0]
 800acfc:	f7f5 fc12 	bl	8000524 <__aeabi_i2d>
 800ad00:	a397      	add	r3, pc, #604	; (adr r3, 800af60 <scaraKeyInit1+0x5d8>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fc77 	bl	80005f8 <__aeabi_dmul>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	4618      	mov	r0, r3
 800ad10:	4621      	mov	r1, r4
 800ad12:	a395      	add	r3, pc, #596	; (adr r3, 800af68 <scaraKeyInit1+0x5e0>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f7f5 fab8 	bl	800028c <__adddf3>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	460c      	mov	r4, r1
 800ad20:	f107 0208 	add.w	r2, r7, #8
 800ad24:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ad28:	e0f0      	b.n	800af0c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800ad2a:	f107 0208 	add.w	r2, r7, #8
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	f04f 0400 	mov.w	r4, #0
 800ad36:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad3a:	f107 0308 	add.w	r3, r7, #8
 800ad3e:	2200      	movs	r2, #0
 800ad40:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad42:	f107 0308 	add.w	r3, r7, #8
 800ad46:	2200      	movs	r2, #0
 800ad48:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad4a:	f107 0208 	add.w	r2, r7, #8
 800ad4e:	f04f 0300 	mov.w	r3, #0
 800ad52:	f04f 0400 	mov.w	r4, #0
 800ad56:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ad5a:	f107 0208 	add.w	r2, r7, #8
 800ad5e:	f04f 0300 	mov.w	r3, #0
 800ad62:	f04f 0400 	mov.w	r4, #0
 800ad66:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800ad6a:	463b      	mov	r3, r7
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	079b      	lsls	r3, r3, #30
 800ad72:	1a9b      	subs	r3, r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	1a9b      	subs	r3, r3, r2
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7f5 fbd3 	bl	8000524 <__aeabi_i2d>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	460c      	mov	r4, r1
 800ad82:	f107 0208 	add.w	r2, r7, #8
 800ad86:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad8a:	f107 0208 	add.w	r2, r7, #8
 800ad8e:	f04f 0300 	mov.w	r3, #0
 800ad92:	f04f 0400 	mov.w	r4, #0
 800ad96:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad9a:	463b      	mov	r3, r7
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f7f5 fbc1 	bl	8000524 <__aeabi_i2d>
 800ada2:	a36f      	add	r3, pc, #444	; (adr r3, 800af60 <scaraKeyInit1+0x5d8>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	f7f5 fc26 	bl	80005f8 <__aeabi_dmul>
 800adac:	4603      	mov	r3, r0
 800adae:	460c      	mov	r4, r1
 800adb0:	4618      	mov	r0, r3
 800adb2:	4621      	mov	r1, r4
 800adb4:	a36c      	add	r3, pc, #432	; (adr r3, 800af68 <scaraKeyInit1+0x5e0>)
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	f7f5 fa67 	bl	800028c <__adddf3>
 800adbe:	4603      	mov	r3, r0
 800adc0:	460c      	mov	r4, r1
 800adc2:	f107 0208 	add.w	r2, r7, #8
 800adc6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800adca:	e09f      	b.n	800af0c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800adcc:	f107 0208 	add.w	r2, r7, #8
 800add0:	f04f 0300 	mov.w	r3, #0
 800add4:	f04f 0400 	mov.w	r4, #0
 800add8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800addc:	f107 0308 	add.w	r3, r7, #8
 800ade0:	2200      	movs	r2, #0
 800ade2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ade4:	f107 0308 	add.w	r3, r7, #8
 800ade8:	2200      	movs	r2, #0
 800adea:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800adec:	f107 0208 	add.w	r2, r7, #8
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	f04f 0400 	mov.w	r4, #0
 800adf8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800adfc:	f107 0208 	add.w	r2, r7, #8
 800ae00:	f04f 0300 	mov.w	r3, #0
 800ae04:	f04f 0400 	mov.w	r4, #0
 800ae08:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ae0c:	f107 0208 	add.w	r2, r7, #8
 800ae10:	f04f 0300 	mov.w	r3, #0
 800ae14:	f04f 0400 	mov.w	r4, #0
 800ae18:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7f5 fb7c 	bl	8000524 <__aeabi_i2d>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	f107 0208 	add.w	r2, r7, #8
 800ae34:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae38:	463b      	mov	r3, r7
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	f7f5 fb72 	bl	8000524 <__aeabi_i2d>
 800ae40:	a347      	add	r3, pc, #284	; (adr r3, 800af60 <scaraKeyInit1+0x5d8>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f7f5 fbd7 	bl	80005f8 <__aeabi_dmul>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	4618      	mov	r0, r3
 800ae50:	4621      	mov	r1, r4
 800ae52:	a345      	add	r3, pc, #276	; (adr r3, 800af68 <scaraKeyInit1+0x5e0>)
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f7f5 fa18 	bl	800028c <__adddf3>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	460c      	mov	r4, r1
 800ae60:	f107 0208 	add.w	r2, r7, #8
 800ae64:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ae68:	e050      	b.n	800af0c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800ae6a:	f107 0208 	add.w	r2, r7, #8
 800ae6e:	f04f 0300 	mov.w	r3, #0
 800ae72:	f04f 0400 	mov.w	r4, #0
 800ae76:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae7a:	f107 0308 	add.w	r3, r7, #8
 800ae7e:	2200      	movs	r2, #0
 800ae80:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae82:	f107 0308 	add.w	r3, r7, #8
 800ae86:	2200      	movs	r2, #0
 800ae88:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae8a:	f107 0208 	add.w	r2, r7, #8
 800ae8e:	f04f 0300 	mov.w	r3, #0
 800ae92:	f04f 0400 	mov.w	r4, #0
 800ae96:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ae9a:	f107 0208 	add.w	r2, r7, #8
 800ae9e:	f04f 0300 	mov.w	r3, #0
 800aea2:	f04f 0400 	mov.w	r4, #0
 800aea6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800aeaa:	f107 0208 	add.w	r2, r7, #8
 800aeae:	f04f 0300 	mov.w	r3, #0
 800aeb2:	f04f 0400 	mov.w	r4, #0
 800aeb6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800aeba:	463b      	mov	r3, r7
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	4613      	mov	r3, r2
 800aec0:	079b      	lsls	r3, r3, #30
 800aec2:	1a9b      	subs	r3, r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	1a9b      	subs	r3, r3, r2
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7f5 fb2b 	bl	8000524 <__aeabi_i2d>
 800aece:	4603      	mov	r3, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	f107 0208 	add.w	r2, r7, #8
 800aed6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aeda:	463b      	mov	r3, r7
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	f7f5 fb21 	bl	8000524 <__aeabi_i2d>
 800aee2:	a31f      	add	r3, pc, #124	; (adr r3, 800af60 <scaraKeyInit1+0x5d8>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 fb86 	bl	80005f8 <__aeabi_dmul>
 800aeec:	4603      	mov	r3, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	4618      	mov	r0, r3
 800aef2:	4621      	mov	r1, r4
 800aef4:	a31c      	add	r3, pc, #112	; (adr r3, 800af68 <scaraKeyInit1+0x5e0>)
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	f7f5 f9c7 	bl	800028c <__adddf3>
 800aefe:	4603      	mov	r3, r0
 800af00:	460c      	mov	r4, r1
 800af02:	f107 0208 	add.w	r2, r7, #8
 800af06:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800af0a:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800af0c:	f107 0408 	add.w	r4, r7, #8
 800af10:	4668      	mov	r0, sp
 800af12:	f104 0310 	add.w	r3, r4, #16
 800af16:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800af1a:	4619      	mov	r1, r3
 800af1c:	f00a ff2e 	bl	8015d7c <memcpy>
 800af20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af24:	f7fb fca8 	bl	8006878 <scaraInitDuty>
 800af28:	4603      	mov	r3, r0
 800af2a:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800af2e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10b      	bne.n	800af4e <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800af36:	f7ff faff 	bl	800a538 <scaraTestDuty>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800af40:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <scaraKeyInit1+0x5cc>
			return status;
 800af48:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af4c:	e002      	b.n	800af54 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800af4e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800af52:	e7ff      	b.n	800af54 <scaraKeyInit1+0x5cc>
	}
}
 800af54:	4618      	mov	r0, r3
 800af56:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd90      	pop	{r4, r7, pc}
 800af5e:	bf00      	nop
 800af60:	9999999a 	.word	0x9999999a
 800af64:	3fa99999 	.word	0x3fa99999
 800af68:	9999999a 	.word	0x9999999a
 800af6c:	3fe99999 	.word	0x3fe99999

0800af70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af76:	2300      	movs	r3, #0
 800af78:	607b      	str	r3, [r7, #4]
 800af7a:	4b12      	ldr	r3, [pc, #72]	; (800afc4 <HAL_MspInit+0x54>)
 800af7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af7e:	4a11      	ldr	r2, [pc, #68]	; (800afc4 <HAL_MspInit+0x54>)
 800af80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af84:	6453      	str	r3, [r2, #68]	; 0x44
 800af86:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <HAL_MspInit+0x54>)
 800af88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af8e:	607b      	str	r3, [r7, #4]
 800af90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800af92:	2300      	movs	r3, #0
 800af94:	603b      	str	r3, [r7, #0]
 800af96:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <HAL_MspInit+0x54>)
 800af98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9a:	4a0a      	ldr	r2, [pc, #40]	; (800afc4 <HAL_MspInit+0x54>)
 800af9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afa0:	6413      	str	r3, [r2, #64]	; 0x40
 800afa2:	4b08      	ldr	r3, [pc, #32]	; (800afc4 <HAL_MspInit+0x54>)
 800afa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800afae:	2200      	movs	r2, #0
 800afb0:	210f      	movs	r1, #15
 800afb2:	f06f 0001 	mvn.w	r0, #1
 800afb6:	f000 fbe7 	bl	800b788 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	40023800 	.word	0x40023800

0800afc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08c      	sub	sp, #48	; 0x30
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800afd8:	2200      	movs	r2, #0
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	2036      	movs	r0, #54	; 0x36
 800afde:	f000 fbd3 	bl	800b788 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800afe2:	2036      	movs	r0, #54	; 0x36
 800afe4:	f000 fbec 	bl	800b7c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	4b1f      	ldr	r3, [pc, #124]	; (800b06c <HAL_InitTick+0xa4>)
 800afee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff0:	4a1e      	ldr	r2, [pc, #120]	; (800b06c <HAL_InitTick+0xa4>)
 800aff2:	f043 0310 	orr.w	r3, r3, #16
 800aff6:	6413      	str	r3, [r2, #64]	; 0x40
 800aff8:	4b1c      	ldr	r3, [pc, #112]	; (800b06c <HAL_InitTick+0xa4>)
 800affa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b004:	f107 0210 	add.w	r2, r7, #16
 800b008:	f107 0314 	add.w	r3, r7, #20
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f002 ff72 	bl	800def8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b014:	f002 ff48 	bl	800dea8 <HAL_RCC_GetPCLK1Freq>
 800b018:	4603      	mov	r3, r0
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	4a13      	ldr	r2, [pc, #76]	; (800b070 <HAL_InitTick+0xa8>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	0c9b      	lsrs	r3, r3, #18
 800b028:	3b01      	subs	r3, #1
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b02c:	4b11      	ldr	r3, [pc, #68]	; (800b074 <HAL_InitTick+0xac>)
 800b02e:	4a12      	ldr	r2, [pc, #72]	; (800b078 <HAL_InitTick+0xb0>)
 800b030:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b032:	4b10      	ldr	r3, [pc, #64]	; (800b074 <HAL_InitTick+0xac>)
 800b034:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b038:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b03a:	4a0e      	ldr	r2, [pc, #56]	; (800b074 <HAL_InitTick+0xac>)
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b040:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <HAL_InitTick+0xac>)
 800b042:	2200      	movs	r2, #0
 800b044:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b046:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <HAL_InitTick+0xac>)
 800b048:	2200      	movs	r2, #0
 800b04a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b04c:	4809      	ldr	r0, [pc, #36]	; (800b074 <HAL_InitTick+0xac>)
 800b04e:	f002 ff85 	bl	800df5c <HAL_TIM_Base_Init>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d104      	bne.n	800b062 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b058:	4806      	ldr	r0, [pc, #24]	; (800b074 <HAL_InitTick+0xac>)
 800b05a:	f002 ffce 	bl	800dffa <HAL_TIM_Base_Start_IT>
 800b05e:	4603      	mov	r3, r0
 800b060:	e000      	b.n	800b064 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
}
 800b064:	4618      	mov	r0, r3
 800b066:	3730      	adds	r7, #48	; 0x30
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	40023800 	.word	0x40023800
 800b070:	431bde83 	.word	0x431bde83
 800b074:	2000ecf0 	.word	0x2000ecf0
 800b078:	40001000 	.word	0x40001000

0800b07c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b07c:	b480      	push	{r7}
 800b07e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b080:	bf00      	nop
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
	...

0800b08c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b090:	2162      	movs	r1, #98	; 0x62
 800b092:	4802      	ldr	r0, [pc, #8]	; (800b09c <HardFault_Handler+0x10>)
 800b094:	f7f7 f992 	bl	80023bc <LOG_REPORT>
 800b098:	e7fa      	b.n	800b090 <HardFault_Handler+0x4>
 800b09a:	bf00      	nop
 800b09c:	0801b498 	.word	0x0801b498

0800b0a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b0a4:	2172      	movs	r1, #114	; 0x72
 800b0a6:	4802      	ldr	r0, [pc, #8]	; (800b0b0 <MemManage_Handler+0x10>)
 800b0a8:	f7f7 f988 	bl	80023bc <LOG_REPORT>
 800b0ac:	e7fa      	b.n	800b0a4 <MemManage_Handler+0x4>
 800b0ae:	bf00      	nop
 800b0b0:	0801b4b0 	.word	0x0801b4b0

0800b0b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b0b8:	2182      	movs	r1, #130	; 0x82
 800b0ba:	4802      	ldr	r0, [pc, #8]	; (800b0c4 <BusFault_Handler+0x10>)
 800b0bc:	f7f7 f97e 	bl	80023bc <LOG_REPORT>
 800b0c0:	e7fa      	b.n	800b0b8 <BusFault_Handler+0x4>
 800b0c2:	bf00      	nop
 800b0c4:	0801b4c4 	.word	0x0801b4c4

0800b0c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b0cc:	e7fe      	b.n	800b0cc <UsageFault_Handler+0x4>

0800b0ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b0d2:	bf00      	nop
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b0e0:	4802      	ldr	r0, [pc, #8]	; (800b0ec <DMA1_Stream4_IRQHandler+0x10>)
 800b0e2:	f000 fca3 	bl	800ba2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b0e6:	bf00      	nop
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	2000edf0 	.word	0x2000edf0

0800b0f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b0f4:	4802      	ldr	r0, [pc, #8]	; (800b100 <UART4_IRQHandler+0x10>)
 800b0f6:	f003 fc0f 	bl	800e918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b0fa:	bf00      	nop
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	2000edb0 	.word	0x2000edb0

0800b104 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b108:	4802      	ldr	r0, [pc, #8]	; (800b114 <TIM6_DAC_IRQHandler+0x10>)
 800b10a:	f002 ff9a 	bl	800e042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b10e:	bf00      	nop
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	2000ecf0 	.word	0x2000ecf0

0800b118 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <TIM7_IRQHandler+0x1c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2101      	movs	r1, #1
 800b122:	4618      	mov	r0, r3
 800b124:	f007 fadc 	bl	80126e0 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b128:	4803      	ldr	r0, [pc, #12]	; (800b138 <TIM7_IRQHandler+0x20>)
 800b12a:	f002 ff8a 	bl	800e042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b12e:	bf00      	nop
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	2000de24 	.word	0x2000de24
 800b138:	2000ed70 	.word	0x2000ed70

0800b13c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b140:	4802      	ldr	r0, [pc, #8]	; (800b14c <OTG_FS_IRQHandler+0x10>)
 800b142:	f001 fa43 	bl	800c5cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b146:	bf00      	nop
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	2000f72c 	.word	0x2000f72c

0800b150 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b158:	4b11      	ldr	r3, [pc, #68]	; (800b1a0 <_sbrk+0x50>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d102      	bne.n	800b166 <_sbrk+0x16>
		heap_end = &end;
 800b160:	4b0f      	ldr	r3, [pc, #60]	; (800b1a0 <_sbrk+0x50>)
 800b162:	4a10      	ldr	r2, [pc, #64]	; (800b1a4 <_sbrk+0x54>)
 800b164:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b166:	4b0e      	ldr	r3, [pc, #56]	; (800b1a0 <_sbrk+0x50>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b16c:	4b0c      	ldr	r3, [pc, #48]	; (800b1a0 <_sbrk+0x50>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4413      	add	r3, r2
 800b174:	466a      	mov	r2, sp
 800b176:	4293      	cmp	r3, r2
 800b178:	d907      	bls.n	800b18a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b17a:	f00a fdc5 	bl	8015d08 <__errno>
 800b17e:	4602      	mov	r2, r0
 800b180:	230c      	movs	r3, #12
 800b182:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b184:	f04f 33ff 	mov.w	r3, #4294967295
 800b188:	e006      	b.n	800b198 <_sbrk+0x48>
	}

	heap_end += incr;
 800b18a:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <_sbrk+0x50>)
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4413      	add	r3, r2
 800b192:	4a03      	ldr	r2, [pc, #12]	; (800b1a0 <_sbrk+0x50>)
 800b194:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b196:	68fb      	ldr	r3, [r7, #12]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20002858 	.word	0x20002858
 800b1a4:	2000fb38 	.word	0x2000fb38

0800b1a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b1ac:	4b08      	ldr	r3, [pc, #32]	; (800b1d0 <SystemInit+0x28>)
 800b1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b2:	4a07      	ldr	r2, [pc, #28]	; (800b1d0 <SystemInit+0x28>)
 800b1b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b1bc:	4b04      	ldr	r3, [pc, #16]	; (800b1d0 <SystemInit+0x28>)
 800b1be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b1c2:	609a      	str	r2, [r3, #8]
#endif
}
 800b1c4:	bf00      	nop
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	e000ed00 	.word	0xe000ed00

0800b1d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b1da:	f107 0308 	add.w	r3, r7, #8
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	605a      	str	r2, [r3, #4]
 800b1e4:	609a      	str	r2, [r3, #8]
 800b1e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b1e8:	463b      	mov	r3, r7
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b1f0:	4b1e      	ldr	r3, [pc, #120]	; (800b26c <MX_TIM2_Init+0x98>)
 800b1f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b1f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b1f8:	4b1c      	ldr	r3, [pc, #112]	; (800b26c <MX_TIM2_Init+0x98>)
 800b1fa:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b1fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b200:	4b1a      	ldr	r3, [pc, #104]	; (800b26c <MX_TIM2_Init+0x98>)
 800b202:	2200      	movs	r2, #0
 800b204:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b206:	4b19      	ldr	r3, [pc, #100]	; (800b26c <MX_TIM2_Init+0x98>)
 800b208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b20c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b20e:	4b17      	ldr	r3, [pc, #92]	; (800b26c <MX_TIM2_Init+0x98>)
 800b210:	2200      	movs	r2, #0
 800b212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b214:	4b15      	ldr	r3, [pc, #84]	; (800b26c <MX_TIM2_Init+0x98>)
 800b216:	2200      	movs	r2, #0
 800b218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b21a:	4814      	ldr	r0, [pc, #80]	; (800b26c <MX_TIM2_Init+0x98>)
 800b21c:	f002 fe9e 	bl	800df5c <HAL_TIM_Base_Init>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b226:	f7fa fa8d 	bl	8005744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b22a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b22e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	4619      	mov	r1, r3
 800b236:	480d      	ldr	r0, [pc, #52]	; (800b26c <MX_TIM2_Init+0x98>)
 800b238:	f003 f80b 	bl	800e252 <HAL_TIM_ConfigClockSource>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b242:	f7fa fa7f 	bl	8005744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b246:	2300      	movs	r3, #0
 800b248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b24e:	463b      	mov	r3, r7
 800b250:	4619      	mov	r1, r3
 800b252:	4806      	ldr	r0, [pc, #24]	; (800b26c <MX_TIM2_Init+0x98>)
 800b254:	f003 fa16 	bl	800e684 <HAL_TIMEx_MasterConfigSynchronization>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b25e:	f7fa fa71 	bl	8005744 <Error_Handler>
  }

}
 800b262:	bf00      	nop
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	2000ed30 	.word	0x2000ed30

0800b270 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b276:	463b      	mov	r3, r7
 800b278:	2200      	movs	r2, #0
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b27e:	4b15      	ldr	r3, [pc, #84]	; (800b2d4 <MX_TIM7_Init+0x64>)
 800b280:	4a15      	ldr	r2, [pc, #84]	; (800b2d8 <MX_TIM7_Init+0x68>)
 800b282:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b284:	4b13      	ldr	r3, [pc, #76]	; (800b2d4 <MX_TIM7_Init+0x64>)
 800b286:	2253      	movs	r2, #83	; 0x53
 800b288:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <MX_TIM7_Init+0x64>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b290:	4b10      	ldr	r3, [pc, #64]	; (800b2d4 <MX_TIM7_Init+0x64>)
 800b292:	f242 720f 	movw	r2, #9999	; 0x270f
 800b296:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b298:	4b0e      	ldr	r3, [pc, #56]	; (800b2d4 <MX_TIM7_Init+0x64>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b29e:	480d      	ldr	r0, [pc, #52]	; (800b2d4 <MX_TIM7_Init+0x64>)
 800b2a0:	f002 fe5c 	bl	800df5c <HAL_TIM_Base_Init>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b2aa:	f7fa fa4b 	bl	8005744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4806      	ldr	r0, [pc, #24]	; (800b2d4 <MX_TIM7_Init+0x64>)
 800b2bc:	f003 f9e2 	bl	800e684 <HAL_TIMEx_MasterConfigSynchronization>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b2c6:	f7fa fa3d 	bl	8005744 <Error_Handler>
  }

}
 800b2ca:	bf00      	nop
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	2000ed70 	.word	0x2000ed70
 800b2d8:	40001400 	.word	0x40001400

0800b2dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ec:	d10e      	bne.n	800b30c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	4b16      	ldr	r3, [pc, #88]	; (800b34c <HAL_TIM_Base_MspInit+0x70>)
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f6:	4a15      	ldr	r2, [pc, #84]	; (800b34c <HAL_TIM_Base_MspInit+0x70>)
 800b2f8:	f043 0301 	orr.w	r3, r3, #1
 800b2fc:	6413      	str	r3, [r2, #64]	; 0x40
 800b2fe:	4b13      	ldr	r3, [pc, #76]	; (800b34c <HAL_TIM_Base_MspInit+0x70>)
 800b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b30a:	e01a      	b.n	800b342 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a0f      	ldr	r2, [pc, #60]	; (800b350 <HAL_TIM_Base_MspInit+0x74>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d115      	bne.n	800b342 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b316:	2300      	movs	r3, #0
 800b318:	60bb      	str	r3, [r7, #8]
 800b31a:	4b0c      	ldr	r3, [pc, #48]	; (800b34c <HAL_TIM_Base_MspInit+0x70>)
 800b31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31e:	4a0b      	ldr	r2, [pc, #44]	; (800b34c <HAL_TIM_Base_MspInit+0x70>)
 800b320:	f043 0320 	orr.w	r3, r3, #32
 800b324:	6413      	str	r3, [r2, #64]	; 0x40
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <HAL_TIM_Base_MspInit+0x70>)
 800b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	60bb      	str	r3, [r7, #8]
 800b330:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b332:	2200      	movs	r2, #0
 800b334:	2105      	movs	r1, #5
 800b336:	2037      	movs	r0, #55	; 0x37
 800b338:	f000 fa26 	bl	800b788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b33c:	2037      	movs	r0, #55	; 0x37
 800b33e:	f000 fa3f 	bl	800b7c0 <HAL_NVIC_EnableIRQ>
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	40023800 	.word	0x40023800
 800b350:	40001400 	.word	0x40001400

0800b354 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b358:	4b11      	ldr	r3, [pc, #68]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b35a:	4a12      	ldr	r2, [pc, #72]	; (800b3a4 <MX_UART4_Init+0x50>)
 800b35c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b35e:	4b10      	ldr	r3, [pc, #64]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b364:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b366:	4b0e      	ldr	r3, [pc, #56]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b368:	2200      	movs	r2, #0
 800b36a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b36c:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b36e:	2200      	movs	r2, #0
 800b370:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b372:	4b0b      	ldr	r3, [pc, #44]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b374:	2200      	movs	r2, #0
 800b376:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b378:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b37a:	220c      	movs	r2, #12
 800b37c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b37e:	4b08      	ldr	r3, [pc, #32]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b380:	2200      	movs	r2, #0
 800b382:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b384:	4b06      	ldr	r3, [pc, #24]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b386:	2200      	movs	r2, #0
 800b388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b38a:	4805      	ldr	r0, [pc, #20]	; (800b3a0 <MX_UART4_Init+0x4c>)
 800b38c:	f003 fa0a 	bl	800e7a4 <HAL_UART_Init>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b396:	f7fa f9d5 	bl	8005744 <Error_Handler>
  }

}
 800b39a:	bf00      	nop
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	2000edb0 	.word	0x2000edb0
 800b3a4:	40004c00 	.word	0x40004c00

0800b3a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b08a      	sub	sp, #40	; 0x28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3b0:	f107 0314 	add.w	r3, r7, #20
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	605a      	str	r2, [r3, #4]
 800b3ba:	609a      	str	r2, [r3, #8]
 800b3bc:	60da      	str	r2, [r3, #12]
 800b3be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a34      	ldr	r2, [pc, #208]	; (800b498 <HAL_UART_MspInit+0xf0>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d161      	bne.n	800b48e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	613b      	str	r3, [r7, #16]
 800b3ce:	4b33      	ldr	r3, [pc, #204]	; (800b49c <HAL_UART_MspInit+0xf4>)
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	4a32      	ldr	r2, [pc, #200]	; (800b49c <HAL_UART_MspInit+0xf4>)
 800b3d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b3da:	4b30      	ldr	r3, [pc, #192]	; (800b49c <HAL_UART_MspInit+0xf4>)
 800b3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	4b2c      	ldr	r3, [pc, #176]	; (800b49c <HAL_UART_MspInit+0xf4>)
 800b3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ee:	4a2b      	ldr	r2, [pc, #172]	; (800b49c <HAL_UART_MspInit+0xf4>)
 800b3f0:	f043 0301 	orr.w	r3, r3, #1
 800b3f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3f6:	4b29      	ldr	r3, [pc, #164]	; (800b49c <HAL_UART_MspInit+0xf4>)
 800b3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b402:	2303      	movs	r3, #3
 800b404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b406:	2302      	movs	r3, #2
 800b408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b40a:	2301      	movs	r3, #1
 800b40c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b40e:	2303      	movs	r3, #3
 800b410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b412:	2308      	movs	r3, #8
 800b414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b416:	f107 0314 	add.w	r3, r7, #20
 800b41a:	4619      	mov	r1, r3
 800b41c:	4820      	ldr	r0, [pc, #128]	; (800b4a0 <HAL_UART_MspInit+0xf8>)
 800b41e:	f000 fd7b 	bl	800bf18 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b422:	4b20      	ldr	r3, [pc, #128]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b424:	4a20      	ldr	r2, [pc, #128]	; (800b4a8 <HAL_UART_MspInit+0x100>)
 800b426:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b42a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b42e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b430:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b432:	2240      	movs	r2, #64	; 0x40
 800b434:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b436:	4b1b      	ldr	r3, [pc, #108]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b438:	2200      	movs	r2, #0
 800b43a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b43c:	4b19      	ldr	r3, [pc, #100]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b43e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b442:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b444:	4b17      	ldr	r3, [pc, #92]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b446:	2200      	movs	r2, #0
 800b448:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b44a:	4b16      	ldr	r3, [pc, #88]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b450:	4b14      	ldr	r3, [pc, #80]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b452:	2200      	movs	r2, #0
 800b454:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b456:	4b13      	ldr	r3, [pc, #76]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b458:	2200      	movs	r2, #0
 800b45a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b45c:	4b11      	ldr	r3, [pc, #68]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b45e:	2200      	movs	r2, #0
 800b460:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b462:	4810      	ldr	r0, [pc, #64]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b464:	f000 f9ba 	bl	800b7dc <HAL_DMA_Init>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b46e:	f7fa f969 	bl	8005744 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a0b      	ldr	r2, [pc, #44]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b476:	631a      	str	r2, [r3, #48]	; 0x30
 800b478:	4a0a      	ldr	r2, [pc, #40]	; (800b4a4 <HAL_UART_MspInit+0xfc>)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b47e:	2200      	movs	r2, #0
 800b480:	2105      	movs	r1, #5
 800b482:	2034      	movs	r0, #52	; 0x34
 800b484:	f000 f980 	bl	800b788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b488:	2034      	movs	r0, #52	; 0x34
 800b48a:	f000 f999 	bl	800b7c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b48e:	bf00      	nop
 800b490:	3728      	adds	r7, #40	; 0x28
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	40004c00 	.word	0x40004c00
 800b49c:	40023800 	.word	0x40023800
 800b4a0:	40020000 	.word	0x40020000
 800b4a4:	2000edf0 	.word	0x2000edf0
 800b4a8:	40026070 	.word	0x40026070

0800b4ac <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a0c      	ldr	r2, [pc, #48]	; (800b4ec <HAL_UART_TxCpltCallback+0x40>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d112      	bne.n	800b4e4 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b4be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4c2:	490b      	ldr	r1, [pc, #44]	; (800b4f0 <HAL_UART_TxCpltCallback+0x44>)
 800b4c4:	480b      	ldr	r0, [pc, #44]	; (800b4f4 <HAL_UART_TxCpltCallback+0x48>)
 800b4c6:	f7fa f9f7 	bl	80058b8 <ringBuff_PopArray>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b4ce:	89fb      	ldrh	r3, [r7, #14]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d006      	beq.n	800b4e2 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b4d4:	89fb      	ldrh	r3, [r7, #14]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	4905      	ldr	r1, [pc, #20]	; (800b4f0 <HAL_UART_TxCpltCallback+0x44>)
 800b4da:	4807      	ldr	r0, [pc, #28]	; (800b4f8 <HAL_UART_TxCpltCallback+0x4c>)
 800b4dc:	f003 f9b0 	bl	800e840 <HAL_UART_Transmit_DMA>
 800b4e0:	e000      	b.n	800b4e4 <HAL_UART_TxCpltCallback+0x38>
			return;
 800b4e2:	bf00      	nop
	}
}
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	40004c00 	.word	0x40004c00
 800b4f0:	2000dd20 	.word	0x2000dd20
 800b4f4:	20001070 	.word	0x20001070
 800b4f8:	2000edb0 	.word	0x2000edb0

0800b4fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b4fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b534 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b500:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b502:	e003      	b.n	800b50c <LoopCopyDataInit>

0800b504 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b504:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b506:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b508:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b50a:	3104      	adds	r1, #4

0800b50c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b50c:	480b      	ldr	r0, [pc, #44]	; (800b53c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b50e:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b510:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b512:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b514:	d3f6      	bcc.n	800b504 <CopyDataInit>
  ldr  r2, =_sbss
 800b516:	4a0b      	ldr	r2, [pc, #44]	; (800b544 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b518:	e002      	b.n	800b520 <LoopFillZerobss>

0800b51a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b51a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b51c:	f842 3b04 	str.w	r3, [r2], #4

0800b520 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b520:	4b09      	ldr	r3, [pc, #36]	; (800b548 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b522:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b524:	d3f9      	bcc.n	800b51a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b526:	f7ff fe3f 	bl	800b1a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b52a:	f00a fbf3 	bl	8015d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b52e:	f7fa f875 	bl	800561c <main>
  bx  lr    
 800b532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b534:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b538:	0801ba30 	.word	0x0801ba30
  ldr  r0, =_sdata
 800b53c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b540:	200023e0 	.word	0x200023e0
  ldr  r2, =_sbss
 800b544:	200023e0 	.word	0x200023e0
  ldr  r3, = _ebss
 800b548:	2000fb38 	.word	0x2000fb38

0800b54c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b54c:	e7fe      	b.n	800b54c <ADC_IRQHandler>
	...

0800b550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b554:	4b0e      	ldr	r3, [pc, #56]	; (800b590 <HAL_Init+0x40>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a0d      	ldr	r2, [pc, #52]	; (800b590 <HAL_Init+0x40>)
 800b55a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b55e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b560:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <HAL_Init+0x40>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a0a      	ldr	r2, [pc, #40]	; (800b590 <HAL_Init+0x40>)
 800b566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b56a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b56c:	4b08      	ldr	r3, [pc, #32]	; (800b590 <HAL_Init+0x40>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a07      	ldr	r2, [pc, #28]	; (800b590 <HAL_Init+0x40>)
 800b572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b578:	2003      	movs	r0, #3
 800b57a:	f000 f8fa 	bl	800b772 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b57e:	2000      	movs	r0, #0
 800b580:	f7ff fd22 	bl	800afc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b584:	f7ff fcf4 	bl	800af70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	40023c00 	.word	0x40023c00

0800b594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b594:	b480      	push	{r7}
 800b596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b598:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <HAL_IncTick+0x20>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	461a      	mov	r2, r3
 800b59e:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <HAL_IncTick+0x24>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	4a04      	ldr	r2, [pc, #16]	; (800b5b8 <HAL_IncTick+0x24>)
 800b5a6:	6013      	str	r3, [r2, #0]
}
 800b5a8:	bf00      	nop
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20002090 	.word	0x20002090
 800b5b8:	2000ee50 	.word	0x2000ee50

0800b5bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	af00      	add	r7, sp, #0
  return uwTick;
 800b5c0:	4b03      	ldr	r3, [pc, #12]	; (800b5d0 <HAL_GetTick+0x14>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	2000ee50 	.word	0x2000ee50

0800b5d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b5dc:	f7ff ffee 	bl	800b5bc <HAL_GetTick>
 800b5e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ec:	d005      	beq.n	800b5fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b5ee:	4b09      	ldr	r3, [pc, #36]	; (800b614 <HAL_Delay+0x40>)
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b5fa:	bf00      	nop
 800b5fc:	f7ff ffde 	bl	800b5bc <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d8f7      	bhi.n	800b5fc <HAL_Delay+0x28>
  {
  }
}
 800b60c:	bf00      	nop
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	20002090 	.word	0x20002090

0800b618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f003 0307 	and.w	r3, r3, #7
 800b626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b628:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <__NVIC_SetPriorityGrouping+0x44>)
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b634:	4013      	ands	r3, r2
 800b636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b64a:	4a04      	ldr	r2, [pc, #16]	; (800b65c <__NVIC_SetPriorityGrouping+0x44>)
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	60d3      	str	r3, [r2, #12]
}
 800b650:	bf00      	nop
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	e000ed00 	.word	0xe000ed00

0800b660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b660:	b480      	push	{r7}
 800b662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b664:	4b04      	ldr	r3, [pc, #16]	; (800b678 <__NVIC_GetPriorityGrouping+0x18>)
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	0a1b      	lsrs	r3, r3, #8
 800b66a:	f003 0307 	and.w	r3, r3, #7
}
 800b66e:	4618      	mov	r0, r3
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	e000ed00 	.word	0xe000ed00

0800b67c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	db0b      	blt.n	800b6a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	f003 021f 	and.w	r2, r3, #31
 800b694:	4907      	ldr	r1, [pc, #28]	; (800b6b4 <__NVIC_EnableIRQ+0x38>)
 800b696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b69a:	095b      	lsrs	r3, r3, #5
 800b69c:	2001      	movs	r0, #1
 800b69e:	fa00 f202 	lsl.w	r2, r0, r2
 800b6a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	e000e100 	.word	0xe000e100

0800b6b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	6039      	str	r1, [r7, #0]
 800b6c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	db0a      	blt.n	800b6e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	490c      	ldr	r1, [pc, #48]	; (800b704 <__NVIC_SetPriority+0x4c>)
 800b6d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6d6:	0112      	lsls	r2, r2, #4
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	440b      	add	r3, r1
 800b6dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b6e0:	e00a      	b.n	800b6f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	4908      	ldr	r1, [pc, #32]	; (800b708 <__NVIC_SetPriority+0x50>)
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	f003 030f 	and.w	r3, r3, #15
 800b6ee:	3b04      	subs	r3, #4
 800b6f0:	0112      	lsls	r2, r2, #4
 800b6f2:	b2d2      	uxtb	r2, r2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	761a      	strb	r2, [r3, #24]
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	e000e100 	.word	0xe000e100
 800b708:	e000ed00 	.word	0xe000ed00

0800b70c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b089      	sub	sp, #36	; 0x24
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f003 0307 	and.w	r3, r3, #7
 800b71e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	f1c3 0307 	rsb	r3, r3, #7
 800b726:	2b04      	cmp	r3, #4
 800b728:	bf28      	it	cs
 800b72a:	2304      	movcs	r3, #4
 800b72c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	3304      	adds	r3, #4
 800b732:	2b06      	cmp	r3, #6
 800b734:	d902      	bls.n	800b73c <NVIC_EncodePriority+0x30>
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	3b03      	subs	r3, #3
 800b73a:	e000      	b.n	800b73e <NVIC_EncodePriority+0x32>
 800b73c:	2300      	movs	r3, #0
 800b73e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b740:	f04f 32ff 	mov.w	r2, #4294967295
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	fa02 f303 	lsl.w	r3, r2, r3
 800b74a:	43da      	mvns	r2, r3
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	401a      	ands	r2, r3
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b754:	f04f 31ff 	mov.w	r1, #4294967295
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	fa01 f303 	lsl.w	r3, r1, r3
 800b75e:	43d9      	mvns	r1, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b764:	4313      	orrs	r3, r2
         );
}
 800b766:	4618      	mov	r0, r3
 800b768:	3724      	adds	r7, #36	; 0x24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b082      	sub	sp, #8
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff ff4c 	bl	800b618 <__NVIC_SetPriorityGrouping>
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b788:	b580      	push	{r7, lr}
 800b78a:	b086      	sub	sp, #24
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	4603      	mov	r3, r0
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b796:	2300      	movs	r3, #0
 800b798:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b79a:	f7ff ff61 	bl	800b660 <__NVIC_GetPriorityGrouping>
 800b79e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	68b9      	ldr	r1, [r7, #8]
 800b7a4:	6978      	ldr	r0, [r7, #20]
 800b7a6:	f7ff ffb1 	bl	800b70c <NVIC_EncodePriority>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff ff80 	bl	800b6b8 <__NVIC_SetPriority>
}
 800b7b8:	bf00      	nop
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b7ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7ff ff54 	bl	800b67c <__NVIC_EnableIRQ>
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b7e8:	f7ff fee8 	bl	800b5bc <HAL_GetTick>
 800b7ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e099      	b.n	800b92c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f022 0201 	bic.w	r2, r2, #1
 800b816:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b818:	e00f      	b.n	800b83a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b81a:	f7ff fecf 	bl	800b5bc <HAL_GetTick>
 800b81e:	4602      	mov	r2, r0
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	2b05      	cmp	r3, #5
 800b826:	d908      	bls.n	800b83a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2220      	movs	r2, #32
 800b82c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2203      	movs	r2, #3
 800b832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e078      	b.n	800b92c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e8      	bne.n	800b81a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	4b38      	ldr	r3, [pc, #224]	; (800b934 <HAL_DMA_Init+0x158>)
 800b854:	4013      	ands	r3, r2
 800b856:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b866:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b87e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a1b      	ldr	r3, [r3, #32]
 800b884:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	4313      	orrs	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	2b04      	cmp	r3, #4
 800b892:	d107      	bne.n	800b8a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89c:	4313      	orrs	r3, r2
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f023 0307 	bic.w	r3, r3, #7
 800b8ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d117      	bne.n	800b8fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00e      	beq.n	800b8fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fa9f 	bl	800be24 <DMA_CheckFifoParam>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d008      	beq.n	800b8fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2240      	movs	r2, #64	; 0x40
 800b8f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e016      	b.n	800b92c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fa56 	bl	800bdb8 <DMA_CalcBaseAndBitshift>
 800b90c:	4603      	mov	r3, r0
 800b90e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b914:	223f      	movs	r2, #63	; 0x3f
 800b916:	409a      	lsls	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2201      	movs	r2, #1
 800b926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	f010803f 	.word	0xf010803f

0800b938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b94e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b956:	2b01      	cmp	r3, #1
 800b958:	d101      	bne.n	800b95e <HAL_DMA_Start_IT+0x26>
 800b95a:	2302      	movs	r3, #2
 800b95c:	e040      	b.n	800b9e0 <HAL_DMA_Start_IT+0xa8>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d12f      	bne.n	800b9d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2202      	movs	r2, #2
 800b976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	68b9      	ldr	r1, [r7, #8]
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f9e8 	bl	800bd5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b990:	223f      	movs	r2, #63	; 0x3f
 800b992:	409a      	lsls	r2, r3
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f042 0216 	orr.w	r2, r2, #22
 800b9a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d007      	beq.n	800b9c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f042 0208 	orr.w	r2, r2, #8
 800b9be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f042 0201 	orr.w	r2, r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	e005      	b.n	800b9de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b9da:	2302      	movs	r3, #2
 800b9dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d004      	beq.n	800ba06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2280      	movs	r2, #128	; 0x80
 800ba00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e00c      	b.n	800ba20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2205      	movs	r2, #5
 800ba0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f022 0201 	bic.w	r2, r2, #1
 800ba1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ba34:	2300      	movs	r3, #0
 800ba36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ba38:	4b92      	ldr	r3, [pc, #584]	; (800bc84 <HAL_DMA_IRQHandler+0x258>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a92      	ldr	r2, [pc, #584]	; (800bc88 <HAL_DMA_IRQHandler+0x25c>)
 800ba3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba42:	0a9b      	lsrs	r3, r3, #10
 800ba44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba56:	2208      	movs	r2, #8
 800ba58:	409a      	lsls	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d01a      	beq.n	800ba98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d013      	beq.n	800ba98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f022 0204 	bic.w	r2, r2, #4
 800ba7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba84:	2208      	movs	r2, #8
 800ba86:	409a      	lsls	r2, r3
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba90:	f043 0201 	orr.w	r2, r3, #1
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	409a      	lsls	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	4013      	ands	r3, r2
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d012      	beq.n	800bace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00b      	beq.n	800bace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baba:	2201      	movs	r2, #1
 800babc:	409a      	lsls	r2, r3
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac6:	f043 0202 	orr.w	r2, r3, #2
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bad2:	2204      	movs	r2, #4
 800bad4:	409a      	lsls	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	4013      	ands	r3, r2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d012      	beq.n	800bb04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00b      	beq.n	800bb04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baf0:	2204      	movs	r2, #4
 800baf2:	409a      	lsls	r2, r3
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafc:	f043 0204 	orr.w	r2, r3, #4
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb08:	2210      	movs	r2, #16
 800bb0a:	409a      	lsls	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d043      	beq.n	800bb9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 0308 	and.w	r3, r3, #8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d03c      	beq.n	800bb9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb26:	2210      	movs	r2, #16
 800bb28:	409a      	lsls	r2, r3
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d018      	beq.n	800bb6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d108      	bne.n	800bb5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d024      	beq.n	800bb9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	4798      	blx	r3
 800bb5a:	e01f      	b.n	800bb9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d01b      	beq.n	800bb9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	4798      	blx	r3
 800bb6c:	e016      	b.n	800bb9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d107      	bne.n	800bb8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f022 0208 	bic.w	r2, r2, #8
 800bb8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bba0:	2220      	movs	r2, #32
 800bba2:	409a      	lsls	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4013      	ands	r3, r2
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 808e 	beq.w	800bcca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 0310 	and.w	r3, r3, #16
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 8086 	beq.w	800bcca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	409a      	lsls	r2, r3
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b05      	cmp	r3, #5
 800bbd4:	d136      	bne.n	800bc44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f022 0216 	bic.w	r2, r2, #22
 800bbe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	695a      	ldr	r2, [r3, #20]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d103      	bne.n	800bc06 <HAL_DMA_IRQHandler+0x1da>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d007      	beq.n	800bc16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 0208 	bic.w	r2, r2, #8
 800bc14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc1a:	223f      	movs	r2, #63	; 0x3f
 800bc1c:	409a      	lsls	r2, r3
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d07d      	beq.n	800bd36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	4798      	blx	r3
        }
        return;
 800bc42:	e078      	b.n	800bd36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d01c      	beq.n	800bc8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d108      	bne.n	800bc72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d030      	beq.n	800bcca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	4798      	blx	r3
 800bc70:	e02b      	b.n	800bcca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d027      	beq.n	800bcca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	4798      	blx	r3
 800bc82:	e022      	b.n	800bcca <HAL_DMA_IRQHandler+0x29e>
 800bc84:	20002088 	.word	0x20002088
 800bc88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10f      	bne.n	800bcba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f022 0210 	bic.w	r2, r2, #16
 800bca8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d032      	beq.n	800bd38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d022      	beq.n	800bd24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2205      	movs	r2, #5
 800bce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f022 0201 	bic.w	r2, r2, #1
 800bcf4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	60bb      	str	r3, [r7, #8]
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d307      	bcc.n	800bd12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1f2      	bne.n	800bcf6 <HAL_DMA_IRQHandler+0x2ca>
 800bd10:	e000      	b.n	800bd14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bd12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d005      	beq.n	800bd38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	4798      	blx	r3
 800bd34:	e000      	b.n	800bd38 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bd36:	bf00      	nop
    }
  }
}
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop

0800bd40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd4e:	b2db      	uxtb	r3, r3
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bd78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	2b40      	cmp	r3, #64	; 0x40
 800bd88:	d108      	bne.n	800bd9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bd9a:	e007      	b.n	800bdac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	60da      	str	r2, [r3, #12]
}
 800bdac:	bf00      	nop
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	3b10      	subs	r3, #16
 800bdc8:	4a14      	ldr	r2, [pc, #80]	; (800be1c <DMA_CalcBaseAndBitshift+0x64>)
 800bdca:	fba2 2303 	umull	r2, r3, r2, r3
 800bdce:	091b      	lsrs	r3, r3, #4
 800bdd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bdd2:	4a13      	ldr	r2, [pc, #76]	; (800be20 <DMA_CalcBaseAndBitshift+0x68>)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	d909      	bls.n	800bdfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bdee:	f023 0303 	bic.w	r3, r3, #3
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	659a      	str	r2, [r3, #88]	; 0x58
 800bdf8:	e007      	b.n	800be0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800be02:	f023 0303 	bic.w	r3, r3, #3
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3714      	adds	r7, #20
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	aaaaaaab 	.word	0xaaaaaaab
 800be20:	0801b540 	.word	0x0801b540

0800be24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d11f      	bne.n	800be7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	2b03      	cmp	r3, #3
 800be42:	d855      	bhi.n	800bef0 <DMA_CheckFifoParam+0xcc>
 800be44:	a201      	add	r2, pc, #4	; (adr r2, 800be4c <DMA_CheckFifoParam+0x28>)
 800be46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4a:	bf00      	nop
 800be4c:	0800be5d 	.word	0x0800be5d
 800be50:	0800be6f 	.word	0x0800be6f
 800be54:	0800be5d 	.word	0x0800be5d
 800be58:	0800bef1 	.word	0x0800bef1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d045      	beq.n	800bef4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be6c:	e042      	b.n	800bef4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800be76:	d13f      	bne.n	800bef8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be7c:	e03c      	b.n	800bef8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	699b      	ldr	r3, [r3, #24]
 800be82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be86:	d121      	bne.n	800becc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d836      	bhi.n	800befc <DMA_CheckFifoParam+0xd8>
 800be8e:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <DMA_CheckFifoParam+0x70>)
 800be90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be94:	0800bea5 	.word	0x0800bea5
 800be98:	0800beab 	.word	0x0800beab
 800be9c:	0800bea5 	.word	0x0800bea5
 800bea0:	0800bebd 	.word	0x0800bebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	73fb      	strb	r3, [r7, #15]
      break;
 800bea8:	e02f      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d024      	beq.n	800bf00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800beba:	e021      	b.n	800bf00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bec4:	d11e      	bne.n	800bf04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800beca:	e01b      	b.n	800bf04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d902      	bls.n	800bed8 <DMA_CheckFifoParam+0xb4>
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	d003      	beq.n	800bede <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bed6:	e018      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bed8:	2301      	movs	r3, #1
 800beda:	73fb      	strb	r3, [r7, #15]
      break;
 800bedc:	e015      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00e      	beq.n	800bf08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	73fb      	strb	r3, [r7, #15]
      break;
 800beee:	e00b      	b.n	800bf08 <DMA_CheckFifoParam+0xe4>
      break;
 800bef0:	bf00      	nop
 800bef2:	e00a      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
      break;
 800bef4:	bf00      	nop
 800bef6:	e008      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
      break;
 800bef8:	bf00      	nop
 800befa:	e006      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
      break;
 800befc:	bf00      	nop
 800befe:	e004      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
      break;
 800bf00:	bf00      	nop
 800bf02:	e002      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
      break;   
 800bf04:	bf00      	nop
 800bf06:	e000      	b.n	800bf0a <DMA_CheckFifoParam+0xe6>
      break;
 800bf08:	bf00      	nop
    }
  } 
  
  return status; 
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b089      	sub	sp, #36	; 0x24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf2e:	2300      	movs	r3, #0
 800bf30:	61fb      	str	r3, [r7, #28]
 800bf32:	e16b      	b.n	800c20c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bf34:	2201      	movs	r2, #1
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	4013      	ands	r3, r2
 800bf46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bf48:	693a      	ldr	r2, [r7, #16]
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	f040 815a 	bne.w	800c206 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d00b      	beq.n	800bf72 <HAL_GPIO_Init+0x5a>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d007      	beq.n	800bf72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf66:	2b11      	cmp	r3, #17
 800bf68:	d003      	beq.n	800bf72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	2b12      	cmp	r3, #18
 800bf70:	d130      	bne.n	800bfd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	2203      	movs	r2, #3
 800bf7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf82:	43db      	mvns	r3, r3
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	4013      	ands	r3, r2
 800bf88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	68da      	ldr	r2, [r3, #12]
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	fa02 f303 	lsl.w	r3, r2, r3
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb0:	43db      	mvns	r3, r3
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	091b      	lsrs	r3, r3, #4
 800bfbe:	f003 0201 	and.w	r2, r3, #1
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfc8:	69ba      	ldr	r2, [r7, #24]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	2203      	movs	r2, #3
 800bfe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe4:	43db      	mvns	r3, r3
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	4013      	ands	r3, r2
 800bfea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	689a      	ldr	r2, [r3, #8]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	fa02 f303 	lsl.w	r3, r2, r3
 800bff8:	69ba      	ldr	r2, [r7, #24]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	69ba      	ldr	r2, [r7, #24]
 800c002:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d003      	beq.n	800c014 <HAL_GPIO_Init+0xfc>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	2b12      	cmp	r3, #18
 800c012:	d123      	bne.n	800c05c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	08da      	lsrs	r2, r3, #3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3208      	adds	r2, #8
 800c01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	f003 0307 	and.w	r3, r3, #7
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	220f      	movs	r2, #15
 800c02c:	fa02 f303 	lsl.w	r3, r2, r3
 800c030:	43db      	mvns	r3, r3
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	4013      	ands	r3, r2
 800c036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	691a      	ldr	r2, [r3, #16]
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	f003 0307 	and.w	r3, r3, #7
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	fa02 f303 	lsl.w	r3, r2, r3
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	08da      	lsrs	r2, r3, #3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3208      	adds	r2, #8
 800c056:	69b9      	ldr	r1, [r7, #24]
 800c058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	2203      	movs	r2, #3
 800c068:	fa02 f303 	lsl.w	r3, r2, r3
 800c06c:	43db      	mvns	r3, r3
 800c06e:	69ba      	ldr	r2, [r7, #24]
 800c070:	4013      	ands	r3, r2
 800c072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	f003 0203 	and.w	r2, r3, #3
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	005b      	lsls	r3, r3, #1
 800c080:	fa02 f303 	lsl.w	r3, r2, r3
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	4313      	orrs	r3, r2
 800c088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 80b4 	beq.w	800c206 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60fb      	str	r3, [r7, #12]
 800c0a2:	4b5f      	ldr	r3, [pc, #380]	; (800c220 <HAL_GPIO_Init+0x308>)
 800c0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a6:	4a5e      	ldr	r2, [pc, #376]	; (800c220 <HAL_GPIO_Init+0x308>)
 800c0a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0ac:	6453      	str	r3, [r2, #68]	; 0x44
 800c0ae:	4b5c      	ldr	r3, [pc, #368]	; (800c220 <HAL_GPIO_Init+0x308>)
 800c0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c0ba:	4a5a      	ldr	r2, [pc, #360]	; (800c224 <HAL_GPIO_Init+0x30c>)
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	089b      	lsrs	r3, r3, #2
 800c0c0:	3302      	adds	r3, #2
 800c0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	f003 0303 	and.w	r3, r3, #3
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	220f      	movs	r2, #15
 800c0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d6:	43db      	mvns	r3, r3
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	4013      	ands	r3, r2
 800c0dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a51      	ldr	r2, [pc, #324]	; (800c228 <HAL_GPIO_Init+0x310>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d02b      	beq.n	800c13e <HAL_GPIO_Init+0x226>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a50      	ldr	r2, [pc, #320]	; (800c22c <HAL_GPIO_Init+0x314>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d025      	beq.n	800c13a <HAL_GPIO_Init+0x222>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a4f      	ldr	r2, [pc, #316]	; (800c230 <HAL_GPIO_Init+0x318>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d01f      	beq.n	800c136 <HAL_GPIO_Init+0x21e>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a4e      	ldr	r2, [pc, #312]	; (800c234 <HAL_GPIO_Init+0x31c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d019      	beq.n	800c132 <HAL_GPIO_Init+0x21a>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a4d      	ldr	r2, [pc, #308]	; (800c238 <HAL_GPIO_Init+0x320>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d013      	beq.n	800c12e <HAL_GPIO_Init+0x216>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a4c      	ldr	r2, [pc, #304]	; (800c23c <HAL_GPIO_Init+0x324>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d00d      	beq.n	800c12a <HAL_GPIO_Init+0x212>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a4b      	ldr	r2, [pc, #300]	; (800c240 <HAL_GPIO_Init+0x328>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d007      	beq.n	800c126 <HAL_GPIO_Init+0x20e>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a4a      	ldr	r2, [pc, #296]	; (800c244 <HAL_GPIO_Init+0x32c>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d101      	bne.n	800c122 <HAL_GPIO_Init+0x20a>
 800c11e:	2307      	movs	r3, #7
 800c120:	e00e      	b.n	800c140 <HAL_GPIO_Init+0x228>
 800c122:	2308      	movs	r3, #8
 800c124:	e00c      	b.n	800c140 <HAL_GPIO_Init+0x228>
 800c126:	2306      	movs	r3, #6
 800c128:	e00a      	b.n	800c140 <HAL_GPIO_Init+0x228>
 800c12a:	2305      	movs	r3, #5
 800c12c:	e008      	b.n	800c140 <HAL_GPIO_Init+0x228>
 800c12e:	2304      	movs	r3, #4
 800c130:	e006      	b.n	800c140 <HAL_GPIO_Init+0x228>
 800c132:	2303      	movs	r3, #3
 800c134:	e004      	b.n	800c140 <HAL_GPIO_Init+0x228>
 800c136:	2302      	movs	r3, #2
 800c138:	e002      	b.n	800c140 <HAL_GPIO_Init+0x228>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e000      	b.n	800c140 <HAL_GPIO_Init+0x228>
 800c13e:	2300      	movs	r3, #0
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	f002 0203 	and.w	r2, r2, #3
 800c146:	0092      	lsls	r2, r2, #2
 800c148:	4093      	lsls	r3, r2
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c150:	4934      	ldr	r1, [pc, #208]	; (800c224 <HAL_GPIO_Init+0x30c>)
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	089b      	lsrs	r3, r3, #2
 800c156:	3302      	adds	r3, #2
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c15e:	4b3a      	ldr	r3, [pc, #232]	; (800c248 <HAL_GPIO_Init+0x330>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	43db      	mvns	r3, r3
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	4013      	ands	r3, r2
 800c16c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	4313      	orrs	r3, r2
 800c180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c182:	4a31      	ldr	r2, [pc, #196]	; (800c248 <HAL_GPIO_Init+0x330>)
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c188:	4b2f      	ldr	r3, [pc, #188]	; (800c248 <HAL_GPIO_Init+0x330>)
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	43db      	mvns	r3, r3
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	4013      	ands	r3, r2
 800c196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d003      	beq.n	800c1ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c1ac:	4a26      	ldr	r2, [pc, #152]	; (800c248 <HAL_GPIO_Init+0x330>)
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c1b2:	4b25      	ldr	r3, [pc, #148]	; (800c248 <HAL_GPIO_Init+0x330>)
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	43db      	mvns	r3, r3
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	4013      	ands	r3, r2
 800c1c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c1d6:	4a1c      	ldr	r2, [pc, #112]	; (800c248 <HAL_GPIO_Init+0x330>)
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c1dc:	4b1a      	ldr	r3, [pc, #104]	; (800c248 <HAL_GPIO_Init+0x330>)
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	43db      	mvns	r3, r3
 800c1e6:	69ba      	ldr	r2, [r7, #24]
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d003      	beq.n	800c200 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c200:	4a11      	ldr	r2, [pc, #68]	; (800c248 <HAL_GPIO_Init+0x330>)
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	3301      	adds	r3, #1
 800c20a:	61fb      	str	r3, [r7, #28]
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	2b0f      	cmp	r3, #15
 800c210:	f67f ae90 	bls.w	800bf34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c214:	bf00      	nop
 800c216:	3724      	adds	r7, #36	; 0x24
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	40023800 	.word	0x40023800
 800c224:	40013800 	.word	0x40013800
 800c228:	40020000 	.word	0x40020000
 800c22c:	40020400 	.word	0x40020400
 800c230:	40020800 	.word	0x40020800
 800c234:	40020c00 	.word	0x40020c00
 800c238:	40021000 	.word	0x40021000
 800c23c:	40021400 	.word	0x40021400
 800c240:	40021800 	.word	0x40021800
 800c244:	40021c00 	.word	0x40021c00
 800c248:	40013c00 	.word	0x40013c00

0800c24c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	807b      	strh	r3, [r7, #2]
 800c258:	4613      	mov	r3, r2
 800c25a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c25c:	787b      	ldrb	r3, [r7, #1]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c262:	887a      	ldrh	r2, [r7, #2]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c268:	e003      	b.n	800c272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c26a:	887b      	ldrh	r3, [r7, #2]
 800c26c:	041a      	lsls	r2, r3, #16
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	619a      	str	r2, [r3, #24]
}
 800c272:	bf00      	nop
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
	...

0800c280 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e043      	b.n	800c31e <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d106      	bne.n	800c2b0 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7f8 fa12 	bl	80046d4 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	f003 f97e 	bl	800f5bc <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6818      	ldr	r0, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	f003 f9c8 	bl	800f660 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6858      	ldr	r0, [r3, #4]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	689a      	ldr	r2, [r3, #8]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2dc:	6879      	ldr	r1, [r7, #4]
 800c2de:	f003 f9fd 	bl	800f6dc <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	6892      	ldr	r2, [r2, #8]
 800c2ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	6892      	ldr	r2, [r2, #8]
 800c2f6:	f041 0101 	orr.w	r1, r1, #1
 800c2fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d103      	bne.n	800c30e <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c306:	4b08      	ldr	r3, [pc, #32]	; (800c328 <HAL_NOR_Init+0xa8>)
 800c308:	2200      	movs	r2, #0
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	e002      	b.n	800c314 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c30e:	4b06      	ldr	r3, [pc, #24]	; (800c328 <HAL_NOR_Init+0xa8>)
 800c310:	2201      	movs	r2, #1
 800c312:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	2000285c 	.word	0x2000285c

0800c32c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32e:	b08f      	sub	sp, #60	; 0x3c
 800c330:	af0a      	add	r7, sp, #40	; 0x28
 800c332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d101      	bne.n	800c33e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e10f      	b.n	800c55e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d106      	bne.n	800c35e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f009 f9d9 	bl	8015710 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2203      	movs	r2, #3
 800c362:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f003 fb02 	bl	800f986 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	687e      	ldr	r6, [r7, #4]
 800c38a:	466d      	mov	r5, sp
 800c38c:	f106 0410 	add.w	r4, r6, #16
 800c390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c39c:	e885 0003 	stmia.w	r5, {r0, r1}
 800c3a0:	1d33      	adds	r3, r6, #4
 800c3a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3a4:	6838      	ldr	r0, [r7, #0]
 800c3a6:	f003 f9d9 	bl	800f75c <USB_CoreInit>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d005      	beq.n	800c3bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e0d0      	b.n	800c55e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f003 faf0 	bl	800f9a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
 800c3cc:	e04a      	b.n	800c464 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c3ce:	7bfa      	ldrb	r2, [r7, #15]
 800c3d0:	6879      	ldr	r1, [r7, #4]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	00db      	lsls	r3, r3, #3
 800c3d6:	1a9b      	subs	r3, r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	440b      	add	r3, r1
 800c3dc:	333d      	adds	r3, #61	; 0x3d
 800c3de:	2201      	movs	r2, #1
 800c3e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c3e2:	7bfa      	ldrb	r2, [r7, #15]
 800c3e4:	6879      	ldr	r1, [r7, #4]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	1a9b      	subs	r3, r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	440b      	add	r3, r1
 800c3f0:	333c      	adds	r3, #60	; 0x3c
 800c3f2:	7bfa      	ldrb	r2, [r7, #15]
 800c3f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c3f6:	7bfa      	ldrb	r2, [r7, #15]
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	b298      	uxth	r0, r3
 800c3fc:	6879      	ldr	r1, [r7, #4]
 800c3fe:	4613      	mov	r3, r2
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	1a9b      	subs	r3, r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	440b      	add	r3, r1
 800c408:	3342      	adds	r3, #66	; 0x42
 800c40a:	4602      	mov	r2, r0
 800c40c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c40e:	7bfa      	ldrb	r2, [r7, #15]
 800c410:	6879      	ldr	r1, [r7, #4]
 800c412:	4613      	mov	r3, r2
 800c414:	00db      	lsls	r3, r3, #3
 800c416:	1a9b      	subs	r3, r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	440b      	add	r3, r1
 800c41c:	333f      	adds	r3, #63	; 0x3f
 800c41e:	2200      	movs	r2, #0
 800c420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c422:	7bfa      	ldrb	r2, [r7, #15]
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	4613      	mov	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	1a9b      	subs	r3, r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	440b      	add	r3, r1
 800c430:	3344      	adds	r3, #68	; 0x44
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c436:	7bfa      	ldrb	r2, [r7, #15]
 800c438:	6879      	ldr	r1, [r7, #4]
 800c43a:	4613      	mov	r3, r2
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	1a9b      	subs	r3, r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	440b      	add	r3, r1
 800c444:	3348      	adds	r3, #72	; 0x48
 800c446:	2200      	movs	r2, #0
 800c448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c44a:	7bfa      	ldrb	r2, [r7, #15]
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	4613      	mov	r3, r2
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	440b      	add	r3, r1
 800c458:	3350      	adds	r3, #80	; 0x50
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
 800c460:	3301      	adds	r3, #1
 800c462:	73fb      	strb	r3, [r7, #15]
 800c464:	7bfa      	ldrb	r2, [r7, #15]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d3af      	bcc.n	800c3ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]
 800c472:	e044      	b.n	800c4fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c474:	7bfa      	ldrb	r2, [r7, #15]
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	4613      	mov	r3, r2
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	1a9b      	subs	r3, r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	440b      	add	r3, r1
 800c482:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c486:	2200      	movs	r2, #0
 800c488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c48a:	7bfa      	ldrb	r2, [r7, #15]
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	4613      	mov	r3, r2
 800c490:	00db      	lsls	r3, r3, #3
 800c492:	1a9b      	subs	r3, r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	440b      	add	r3, r1
 800c498:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c49c:	7bfa      	ldrb	r2, [r7, #15]
 800c49e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c4a0:	7bfa      	ldrb	r2, [r7, #15]
 800c4a2:	6879      	ldr	r1, [r7, #4]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	00db      	lsls	r3, r3, #3
 800c4a8:	1a9b      	subs	r3, r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	440b      	add	r3, r1
 800c4ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c4b6:	7bfa      	ldrb	r2, [r7, #15]
 800c4b8:	6879      	ldr	r1, [r7, #4]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	1a9b      	subs	r3, r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	440b      	add	r3, r1
 800c4c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c4cc:	7bfa      	ldrb	r2, [r7, #15]
 800c4ce:	6879      	ldr	r1, [r7, #4]
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	1a9b      	subs	r3, r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	440b      	add	r3, r1
 800c4da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c4e2:	7bfa      	ldrb	r2, [r7, #15]
 800c4e4:	6879      	ldr	r1, [r7, #4]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	1a9b      	subs	r3, r3, r2
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	440b      	add	r3, r1
 800c4f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	73fb      	strb	r3, [r7, #15]
 800c4fe:	7bfa      	ldrb	r2, [r7, #15]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	429a      	cmp	r2, r3
 800c506:	d3b5      	bcc.n	800c474 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	603b      	str	r3, [r7, #0]
 800c50e:	687e      	ldr	r6, [r7, #4]
 800c510:	466d      	mov	r5, sp
 800c512:	f106 0410 	add.w	r4, r6, #16
 800c516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c51a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c51c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c51e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c522:	e885 0003 	stmia.w	r5, {r0, r1}
 800c526:	1d33      	adds	r3, r6, #4
 800c528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c52a:	6838      	ldr	r0, [r7, #0]
 800c52c:	f003 fa66 	bl	800f9fc <USB_DevInit>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2202      	movs	r2, #2
 800c53a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c53e:	2301      	movs	r3, #1
 800c540:	e00d      	b.n	800c55e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4618      	mov	r0, r3
 800c558:	f004 faae 	bl	8010ab8 <USB_DevDisconnect>

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c566 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b084      	sub	sp, #16
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d101      	bne.n	800c582 <HAL_PCD_Start+0x1c>
 800c57e:	2302      	movs	r3, #2
 800c580:	e020      	b.n	800c5c4 <HAL_PCD_Start+0x5e>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2201      	movs	r2, #1
 800c586:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d109      	bne.n	800c5a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c596:	2b01      	cmp	r3, #1
 800c598:	d005      	beq.n	800c5a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f003 f9da 	bl	800f964 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f004 fa5e 	bl	8010a76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c5cc:	b590      	push	{r4, r7, lr}
 800c5ce:	b08d      	sub	sp, #52	; 0x34
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f004 fb1c 	bl	8010c20 <USB_GetMode>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f040 839d 	bne.w	800cd2a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f004 fa80 	bl	8010afa <USB_ReadInterrupts>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 8393 	beq.w	800cd28 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4618      	mov	r0, r3
 800c608:	f004 fa77 	bl	8010afa <USB_ReadInterrupts>
 800c60c:	4603      	mov	r3, r0
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b02      	cmp	r3, #2
 800c614:	d107      	bne.n	800c626 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	695a      	ldr	r2, [r3, #20]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f002 0202 	and.w	r2, r2, #2
 800c624:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f004 fa65 	bl	8010afa <USB_ReadInterrupts>
 800c630:	4603      	mov	r3, r0
 800c632:	f003 0310 	and.w	r3, r3, #16
 800c636:	2b10      	cmp	r3, #16
 800c638:	d161      	bne.n	800c6fe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	699a      	ldr	r2, [r3, #24]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f022 0210 	bic.w	r2, r2, #16
 800c648:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	f003 020f 	and.w	r2, r3, #15
 800c656:	4613      	mov	r3, r2
 800c658:	00db      	lsls	r3, r3, #3
 800c65a:	1a9b      	subs	r3, r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	4413      	add	r3, r2
 800c666:	3304      	adds	r3, #4
 800c668:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	0c5b      	lsrs	r3, r3, #17
 800c66e:	f003 030f 	and.w	r3, r3, #15
 800c672:	2b02      	cmp	r3, #2
 800c674:	d124      	bne.n	800c6c0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c676:	69ba      	ldr	r2, [r7, #24]
 800c678:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c67c:	4013      	ands	r3, r2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d035      	beq.n	800c6ee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	091b      	lsrs	r3, r3, #4
 800c68a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c68c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c690:	b29b      	uxth	r3, r3
 800c692:	461a      	mov	r2, r3
 800c694:	6a38      	ldr	r0, [r7, #32]
 800c696:	f004 f8cb 	bl	8010830 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	68da      	ldr	r2, [r3, #12]
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	091b      	lsrs	r3, r3, #4
 800c6a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6a6:	441a      	add	r2, r3
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	699a      	ldr	r2, [r3, #24]
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	091b      	lsrs	r3, r3, #4
 800c6b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6b8:	441a      	add	r2, r3
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	619a      	str	r2, [r3, #24]
 800c6be:	e016      	b.n	800c6ee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	0c5b      	lsrs	r3, r3, #17
 800c6c4:	f003 030f 	and.w	r3, r3, #15
 800c6c8:	2b06      	cmp	r3, #6
 800c6ca:	d110      	bne.n	800c6ee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c6d2:	2208      	movs	r2, #8
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6a38      	ldr	r0, [r7, #32]
 800c6d8:	f004 f8aa 	bl	8010830 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	699a      	ldr	r2, [r3, #24]
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	091b      	lsrs	r3, r3, #4
 800c6e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6e8:	441a      	add	r2, r3
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	699a      	ldr	r2, [r3, #24]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f042 0210 	orr.w	r2, r2, #16
 800c6fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4618      	mov	r0, r3
 800c704:	f004 f9f9 	bl	8010afa <USB_ReadInterrupts>
 800c708:	4603      	mov	r3, r0
 800c70a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c70e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c712:	d16e      	bne.n	800c7f2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f004 f9ff 	bl	8010b20 <USB_ReadDevAllOutEpInterrupt>
 800c722:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c724:	e062      	b.n	800c7ec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d057      	beq.n	800c7e0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c736:	b2d2      	uxtb	r2, r2
 800c738:	4611      	mov	r1, r2
 800c73a:	4618      	mov	r0, r3
 800c73c:	f004 fa24 	bl	8010b88 <USB_ReadDevOutEPInterrupt>
 800c740:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00c      	beq.n	800c766 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	4413      	add	r3, r2
 800c754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c758:	461a      	mov	r2, r3
 800c75a:	2301      	movs	r3, #1
 800c75c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c75e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 fdb1 	bl	800d2c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	f003 0308 	and.w	r3, r3, #8
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00c      	beq.n	800c78a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	4413      	add	r3, r2
 800c778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c77c:	461a      	mov	r2, r3
 800c77e:	2308      	movs	r3, #8
 800c780:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 feab 	bl	800d4e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f003 0310 	and.w	r3, r3, #16
 800c790:	2b00      	cmp	r3, #0
 800c792:	d008      	beq.n	800c7a6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	f003 0320 	and.w	r3, r3, #32
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d008      	beq.n	800c7c2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7bc:	461a      	mov	r2, r3
 800c7be:	2320      	movs	r3, #32
 800c7c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d009      	beq.n	800c7e0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	015a      	lsls	r2, r3, #5
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d8:	461a      	mov	r2, r3
 800c7da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	085b      	lsrs	r3, r3, #1
 800c7ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d199      	bne.n	800c726 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f004 f97f 	bl	8010afa <USB_ReadInterrupts>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c802:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c806:	f040 80c0 	bne.w	800c98a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4618      	mov	r0, r3
 800c810:	f004 f9a0 	bl	8010b54 <USB_ReadDevAllInEpInterrupt>
 800c814:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c816:	2300      	movs	r3, #0
 800c818:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c81a:	e0b2      	b.n	800c982 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	2b00      	cmp	r3, #0
 800c824:	f000 80a7 	beq.w	800c976 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c82e:	b2d2      	uxtb	r2, r2
 800c830:	4611      	mov	r1, r2
 800c832:	4618      	mov	r0, r3
 800c834:	f004 f9c6 	bl	8010bc4 <USB_ReadDevInEPInterrupt>
 800c838:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	d057      	beq.n	800c8f4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	f003 030f 	and.w	r3, r3, #15
 800c84a:	2201      	movs	r2, #1
 800c84c:	fa02 f303 	lsl.w	r3, r2, r3
 800c850:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	43db      	mvns	r3, r3
 800c85e:	69f9      	ldr	r1, [r7, #28]
 800c860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c864:	4013      	ands	r3, r2
 800c866:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c874:	461a      	mov	r2, r3
 800c876:	2301      	movs	r3, #1
 800c878:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d132      	bne.n	800c8e8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c882:	6879      	ldr	r1, [r7, #4]
 800c884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c886:	4613      	mov	r3, r2
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	440b      	add	r3, r1
 800c890:	3348      	adds	r3, #72	; 0x48
 800c892:	6819      	ldr	r1, [r3, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c898:	4613      	mov	r3, r2
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	1a9b      	subs	r3, r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4403      	add	r3, r0
 800c8a2:	3344      	adds	r3, #68	; 0x44
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4419      	add	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	1a9b      	subs	r3, r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4403      	add	r3, r0
 800c8b6:	3348      	adds	r3, #72	; 0x48
 800c8b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d113      	bne.n	800c8e8 <HAL_PCD_IRQHandler+0x31c>
 800c8c0:	6879      	ldr	r1, [r7, #4]
 800c8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	1a9b      	subs	r3, r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	440b      	add	r3, r1
 800c8ce:	3350      	adds	r3, #80	; 0x50
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d108      	bne.n	800c8e8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6818      	ldr	r0, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	f004 f9ce 	bl	8010c84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f008 ff8f 	bl	8015812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f003 0308 	and.w	r3, r3, #8
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d008      	beq.n	800c910 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	015a      	lsls	r2, r3, #5
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	4413      	add	r3, r2
 800c906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c90a:	461a      	mov	r2, r3
 800c90c:	2308      	movs	r3, #8
 800c90e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	f003 0310 	and.w	r3, r3, #16
 800c916:	2b00      	cmp	r3, #0
 800c918:	d008      	beq.n	800c92c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c926:	461a      	mov	r2, r3
 800c928:	2310      	movs	r3, #16
 800c92a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c932:	2b00      	cmp	r3, #0
 800c934:	d008      	beq.n	800c948 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	015a      	lsls	r2, r3, #5
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	4413      	add	r3, r2
 800c93e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c942:	461a      	mov	r2, r3
 800c944:	2340      	movs	r3, #64	; 0x40
 800c946:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	f003 0302 	and.w	r3, r3, #2
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d008      	beq.n	800c964 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	015a      	lsls	r2, r3, #5
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	4413      	add	r3, r2
 800c95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c95e:	461a      	mov	r2, r3
 800c960:	2302      	movs	r3, #2
 800c962:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c96e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fc1b 	bl	800d1ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	3301      	adds	r3, #1
 800c97a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	085b      	lsrs	r3, r3, #1
 800c980:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c984:	2b00      	cmp	r3, #0
 800c986:	f47f af49 	bne.w	800c81c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4618      	mov	r0, r3
 800c990:	f004 f8b3 	bl	8010afa <USB_ReadInterrupts>
 800c994:	4603      	mov	r3, r0
 800c996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c99a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c99e:	d122      	bne.n	800c9e6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	69fa      	ldr	r2, [r7, #28]
 800c9aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9ae:	f023 0301 	bic.w	r3, r3, #1
 800c9b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d108      	bne.n	800c9d0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fe27 	bl	800d61c <HAL_PCDEx_LPM_Callback>
 800c9ce:	e002      	b.n	800c9d6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f008 ff95 	bl	8015900 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	695a      	ldr	r2, [r3, #20]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c9e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f004 f885 	bl	8010afa <USB_ReadInterrupts>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9fa:	d112      	bne.n	800ca22 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d102      	bne.n	800ca12 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f008 ff51 	bl	80158b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	695a      	ldr	r2, [r3, #20]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ca20:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f004 f867 	bl	8010afa <USB_ReadInterrupts>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca36:	f040 80c7 	bne.w	800cbc8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	69fa      	ldr	r2, [r7, #28]
 800ca44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca48:	f023 0301 	bic.w	r3, r3, #1
 800ca4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2110      	movs	r1, #16
 800ca54:	4618      	mov	r0, r3
 800ca56:	f003 f935 	bl	800fcc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca5e:	e056      	b.n	800cb0e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	015a      	lsls	r2, r3, #5
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	4413      	add	r3, r2
 800ca68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ca74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca76:	015a      	lsls	r2, r3, #5
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca84:	0151      	lsls	r1, r2, #5
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	440a      	add	r2, r1
 800ca8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca92:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caa4:	0151      	lsls	r1, r2, #5
 800caa6:	69fa      	ldr	r2, [r7, #28]
 800caa8:	440a      	add	r2, r1
 800caaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cab2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	015a      	lsls	r2, r3, #5
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	4413      	add	r3, r2
 800cabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac0:	461a      	mov	r2, r3
 800cac2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cac6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cad8:	0151      	lsls	r1, r2, #5
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	440a      	add	r2, r1
 800cade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cae2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cae6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	015a      	lsls	r2, r3, #5
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	4413      	add	r3, r2
 800caf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caf8:	0151      	lsls	r1, r2, #5
 800cafa:	69fa      	ldr	r2, [r7, #28]
 800cafc:	440a      	add	r2, r1
 800cafe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d3a3      	bcc.n	800ca60 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	69fa      	ldr	r2, [r7, #28]
 800cb22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb26:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cb2a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d016      	beq.n	800cb62 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb3e:	69fa      	ldr	r2, [r7, #28]
 800cb40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb44:	f043 030b 	orr.w	r3, r3, #11
 800cb48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb54:	69fa      	ldr	r2, [r7, #28]
 800cb56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb5a:	f043 030b 	orr.w	r3, r3, #11
 800cb5e:	6453      	str	r3, [r2, #68]	; 0x44
 800cb60:	e015      	b.n	800cb8e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	69fa      	ldr	r2, [r7, #28]
 800cb6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cb74:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cb78:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	69fa      	ldr	r2, [r7, #28]
 800cb84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb88:	f043 030b 	orr.w	r3, r3, #11
 800cb8c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	69fa      	ldr	r2, [r7, #28]
 800cb98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cba0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6818      	ldr	r0, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	f004 f866 	bl	8010c84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	695a      	ldr	r2, [r3, #20]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cbc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f003 ff94 	bl	8010afa <USB_ReadInterrupts>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbdc:	d124      	bne.n	800cc28 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f004 f82a 	bl	8010c3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f003 f8ca 	bl	800fd86 <USB_GetDevSpeed>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681c      	ldr	r4, [r3, #0]
 800cbfe:	f001 f947 	bl	800de90 <HAL_RCC_GetHCLKFreq>
 800cc02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f002 fe07 	bl	800f820 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f008 fe25 	bl	8015862 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	695a      	ldr	r2, [r3, #20]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800cc26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f003 ff64 	bl	8010afa <USB_ReadInterrupts>
 800cc32:	4603      	mov	r3, r0
 800cc34:	f003 0308 	and.w	r3, r3, #8
 800cc38:	2b08      	cmp	r3, #8
 800cc3a:	d10a      	bne.n	800cc52 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f008 fe02 	bl	8015846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	695a      	ldr	r2, [r3, #20]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f002 0208 	and.w	r2, r2, #8
 800cc50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f003 ff4f 	bl	8010afa <USB_ReadInterrupts>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc66:	d10f      	bne.n	800cc88 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f008 fe64 	bl	8015940 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	695a      	ldr	r2, [r3, #20]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cc86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f003 ff34 	bl	8010afa <USB_ReadInterrupts>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc9c:	d10f      	bne.n	800ccbe <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f008 fe37 	bl	801591c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	695a      	ldr	r2, [r3, #20]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ccbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f003 ff19 	bl	8010afa <USB_ReadInterrupts>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ccce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccd2:	d10a      	bne.n	800ccea <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f008 fe45 	bl	8015964 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	695a      	ldr	r2, [r3, #20]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f003 ff03 	bl	8010afa <USB_ReadInterrupts>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	f003 0304 	and.w	r3, r3, #4
 800ccfa:	2b04      	cmp	r3, #4
 800ccfc:	d115      	bne.n	800cd2a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	f003 0304 	and.w	r3, r3, #4
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f008 fe35 	bl	8015980 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6859      	ldr	r1, [r3, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	69ba      	ldr	r2, [r7, #24]
 800cd22:	430a      	orrs	r2, r1
 800cd24:	605a      	str	r2, [r3, #4]
 800cd26:	e000      	b.n	800cd2a <HAL_PCD_IRQHandler+0x75e>
      return;
 800cd28:	bf00      	nop
    }
  }
}
 800cd2a:	3734      	adds	r7, #52	; 0x34
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd90      	pop	{r4, r7, pc}

0800cd30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d101      	bne.n	800cd4a <HAL_PCD_SetAddress+0x1a>
 800cd46:	2302      	movs	r3, #2
 800cd48:	e013      	b.n	800cd72 <HAL_PCD_SetAddress+0x42>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	78fa      	ldrb	r2, [r7, #3]
 800cd56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	78fa      	ldrb	r2, [r7, #3]
 800cd60:	4611      	mov	r1, r2
 800cd62:	4618      	mov	r0, r3
 800cd64:	f003 fe61 	bl	8010a2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
 800cd82:	4608      	mov	r0, r1
 800cd84:	4611      	mov	r1, r2
 800cd86:	461a      	mov	r2, r3
 800cd88:	4603      	mov	r3, r0
 800cd8a:	70fb      	strb	r3, [r7, #3]
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	803b      	strh	r3, [r7, #0]
 800cd90:	4613      	mov	r3, r2
 800cd92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cd98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	da0f      	bge.n	800cdc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cda0:	78fb      	ldrb	r3, [r7, #3]
 800cda2:	f003 020f 	and.w	r2, r3, #15
 800cda6:	4613      	mov	r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	1a9b      	subs	r3, r3, r2
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	3338      	adds	r3, #56	; 0x38
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	705a      	strb	r2, [r3, #1]
 800cdbe:	e00f      	b.n	800cde0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cdc0:	78fb      	ldrb	r3, [r7, #3]
 800cdc2:	f003 020f 	and.w	r2, r3, #15
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	1a9b      	subs	r3, r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2200      	movs	r2, #0
 800cdde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	f003 030f 	and.w	r3, r3, #15
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cdec:	883a      	ldrh	r2, [r7, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	78ba      	ldrb	r2, [r7, #2]
 800cdf6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	785b      	ldrb	r3, [r3, #1]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d004      	beq.n	800ce0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ce0a:	78bb      	ldrb	r3, [r7, #2]
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d102      	bne.n	800ce16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d101      	bne.n	800ce24 <HAL_PCD_EP_Open+0xaa>
 800ce20:	2302      	movs	r3, #2
 800ce22:	e00e      	b.n	800ce42 <HAL_PCD_EP_Open+0xc8>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68f9      	ldr	r1, [r7, #12]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f002 ffcc 	bl	800fdd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ce40:	7afb      	ldrb	r3, [r7, #11]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b084      	sub	sp, #16
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	460b      	mov	r3, r1
 800ce54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ce56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	da0f      	bge.n	800ce7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce5e:	78fb      	ldrb	r3, [r7, #3]
 800ce60:	f003 020f 	and.w	r2, r3, #15
 800ce64:	4613      	mov	r3, r2
 800ce66:	00db      	lsls	r3, r3, #3
 800ce68:	1a9b      	subs	r3, r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	3338      	adds	r3, #56	; 0x38
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	4413      	add	r3, r2
 800ce72:	3304      	adds	r3, #4
 800ce74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	705a      	strb	r2, [r3, #1]
 800ce7c:	e00f      	b.n	800ce9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce7e:	78fb      	ldrb	r3, [r7, #3]
 800ce80:	f003 020f 	and.w	r2, r3, #15
 800ce84:	4613      	mov	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	4413      	add	r3, r2
 800ce94:	3304      	adds	r3, #4
 800ce96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ce9e:	78fb      	ldrb	r3, [r7, #3]
 800cea0:	f003 030f 	and.w	r3, r3, #15
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d101      	bne.n	800ceb8 <HAL_PCD_EP_Close+0x6e>
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	e00e      	b.n	800ced6 <HAL_PCD_EP_Close+0x8c>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68f9      	ldr	r1, [r7, #12]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f003 f80a 	bl	800fee0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b086      	sub	sp, #24
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
 800ceea:	460b      	mov	r3, r1
 800ceec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ceee:	7afb      	ldrb	r3, [r7, #11]
 800cef0:	f003 020f 	and.w	r2, r3, #15
 800cef4:	4613      	mov	r3, r2
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	1a9b      	subs	r3, r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	4413      	add	r3, r2
 800cf04:	3304      	adds	r3, #4
 800cf06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2200      	movs	r2, #0
 800cf18:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf20:	7afb      	ldrb	r3, [r7, #11]
 800cf22:	f003 030f 	and.w	r3, r3, #15
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d102      	bne.n	800cf3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cf3a:	7afb      	ldrb	r3, [r7, #11]
 800cf3c:	f003 030f 	and.w	r3, r3, #15
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d109      	bne.n	800cf58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	461a      	mov	r2, r3
 800cf50:	6979      	ldr	r1, [r7, #20]
 800cf52:	f003 fae5 	bl	8010520 <USB_EP0StartXfer>
 800cf56:	e008      	b.n	800cf6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6818      	ldr	r0, [r3, #0]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	461a      	mov	r2, r3
 800cf64:	6979      	ldr	r1, [r7, #20]
 800cf66:	f003 f897 	bl	8010098 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cf80:	78fb      	ldrb	r3, [r7, #3]
 800cf82:	f003 020f 	and.w	r2, r3, #15
 800cf86:	6879      	ldr	r1, [r7, #4]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	1a9b      	subs	r3, r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	440b      	add	r3, r1
 800cf92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cf96:	681b      	ldr	r3, [r3, #0]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	607a      	str	r2, [r7, #4]
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cfb4:	7afb      	ldrb	r3, [r7, #11]
 800cfb6:	f003 020f 	and.w	r2, r3, #15
 800cfba:	4613      	mov	r3, r2
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	1a9b      	subs	r3, r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	3338      	adds	r3, #56	; 0x38
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	3304      	adds	r3, #4
 800cfca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfe4:	7afb      	ldrb	r3, [r7, #11]
 800cfe6:	f003 030f 	and.w	r3, r3, #15
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d102      	bne.n	800cffe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cffe:	7afb      	ldrb	r3, [r7, #11]
 800d000:	f003 030f 	and.w	r3, r3, #15
 800d004:	2b00      	cmp	r3, #0
 800d006:	d109      	bne.n	800d01c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	b2db      	uxtb	r3, r3
 800d012:	461a      	mov	r2, r3
 800d014:	6979      	ldr	r1, [r7, #20]
 800d016:	f003 fa83 	bl	8010520 <USB_EP0StartXfer>
 800d01a:	e008      	b.n	800d02e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	6818      	ldr	r0, [r3, #0]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	b2db      	uxtb	r3, r3
 800d026:	461a      	mov	r2, r3
 800d028:	6979      	ldr	r1, [r7, #20]
 800d02a:	f003 f835 	bl	8010098 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3718      	adds	r7, #24
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d044:	78fb      	ldrb	r3, [r7, #3]
 800d046:	f003 020f 	and.w	r2, r3, #15
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d901      	bls.n	800d056 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	e050      	b.n	800d0f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	da0f      	bge.n	800d07e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d05e:	78fb      	ldrb	r3, [r7, #3]
 800d060:	f003 020f 	and.w	r2, r3, #15
 800d064:	4613      	mov	r3, r2
 800d066:	00db      	lsls	r3, r3, #3
 800d068:	1a9b      	subs	r3, r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	3338      	adds	r3, #56	; 0x38
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	4413      	add	r3, r2
 800d072:	3304      	adds	r3, #4
 800d074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2201      	movs	r2, #1
 800d07a:	705a      	strb	r2, [r3, #1]
 800d07c:	e00d      	b.n	800d09a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d07e:	78fa      	ldrb	r2, [r7, #3]
 800d080:	4613      	mov	r3, r2
 800d082:	00db      	lsls	r3, r3, #3
 800d084:	1a9b      	subs	r3, r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	4413      	add	r3, r2
 800d090:	3304      	adds	r3, #4
 800d092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2201      	movs	r2, #1
 800d09e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	f003 030f 	and.w	r3, r3, #15
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d101      	bne.n	800d0ba <HAL_PCD_EP_SetStall+0x82>
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	e01e      	b.n	800d0f8 <HAL_PCD_EP_SetStall+0xc0>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68f9      	ldr	r1, [r7, #12]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f003 fbda 	bl	8010882 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d0ce:	78fb      	ldrb	r3, [r7, #3]
 800d0d0:	f003 030f 	and.w	r3, r3, #15
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10a      	bne.n	800d0ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6818      	ldr	r0, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	b2d9      	uxtb	r1, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	f003 fdcb 	bl	8010c84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d10c:	78fb      	ldrb	r3, [r7, #3]
 800d10e:	f003 020f 	and.w	r2, r3, #15
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	429a      	cmp	r2, r3
 800d118:	d901      	bls.n	800d11e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e042      	b.n	800d1a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d11e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d122:	2b00      	cmp	r3, #0
 800d124:	da0f      	bge.n	800d146 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d126:	78fb      	ldrb	r3, [r7, #3]
 800d128:	f003 020f 	and.w	r2, r3, #15
 800d12c:	4613      	mov	r3, r2
 800d12e:	00db      	lsls	r3, r3, #3
 800d130:	1a9b      	subs	r3, r3, r2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	3338      	adds	r3, #56	; 0x38
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	4413      	add	r3, r2
 800d13a:	3304      	adds	r3, #4
 800d13c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2201      	movs	r2, #1
 800d142:	705a      	strb	r2, [r3, #1]
 800d144:	e00f      	b.n	800d166 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	f003 020f 	and.w	r2, r3, #15
 800d14c:	4613      	mov	r3, r2
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	1a9b      	subs	r3, r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	4413      	add	r3, r2
 800d15c:	3304      	adds	r3, #4
 800d15e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	f003 030f 	and.w	r3, r3, #15
 800d172:	b2da      	uxtb	r2, r3
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d101      	bne.n	800d186 <HAL_PCD_EP_ClrStall+0x86>
 800d182:	2302      	movs	r3, #2
 800d184:	e00e      	b.n	800d1a4 <HAL_PCD_EP_ClrStall+0xa4>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68f9      	ldr	r1, [r7, #12]
 800d194:	4618      	mov	r0, r3
 800d196:	f003 fbe2 	bl	801095e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b08a      	sub	sp, #40	; 0x28
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d1c0:	683a      	ldr	r2, [r7, #0]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	00db      	lsls	r3, r3, #3
 800d1c6:	1a9b      	subs	r3, r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	3338      	adds	r3, #56	; 0x38
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	3304      	adds	r3, #4
 800d1d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	699a      	ldr	r2, [r3, #24]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	695b      	ldr	r3, [r3, #20]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d901      	bls.n	800d1e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e06c      	b.n	800d2be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	695a      	ldr	r2, [r3, #20]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	699b      	ldr	r3, [r3, #24]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	69fa      	ldr	r2, [r7, #28]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d902      	bls.n	800d200 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	3303      	adds	r3, #3
 800d204:	089b      	lsrs	r3, r3, #2
 800d206:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d208:	e02b      	b.n	800d262 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	695a      	ldr	r2, [r3, #20]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	699b      	ldr	r3, [r3, #24]
 800d212:	1ad3      	subs	r3, r2, r3
 800d214:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	69fa      	ldr	r2, [r7, #28]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d902      	bls.n	800d226 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	3303      	adds	r3, #3
 800d22a:	089b      	lsrs	r3, r3, #2
 800d22c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	68d9      	ldr	r1, [r3, #12]
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	b2da      	uxtb	r2, r3
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	4603      	mov	r3, r0
 800d244:	6978      	ldr	r0, [r7, #20]
 800d246:	f003 fabe 	bl	80107c6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	68da      	ldr	r2, [r3, #12]
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	441a      	add	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	699a      	ldr	r2, [r3, #24]
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	441a      	add	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	015a      	lsls	r2, r3, #5
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	4413      	add	r3, r2
 800d26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	b29b      	uxth	r3, r3
 800d272:	69ba      	ldr	r2, [r7, #24]
 800d274:	429a      	cmp	r2, r3
 800d276:	d809      	bhi.n	800d28c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	699a      	ldr	r2, [r3, #24]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d280:	429a      	cmp	r2, r3
 800d282:	d203      	bcs.n	800d28c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1be      	bne.n	800d20a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	695a      	ldr	r2, [r3, #20]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	429a      	cmp	r2, r3
 800d296:	d811      	bhi.n	800d2bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	f003 030f 	and.w	r3, r3, #15
 800d29e:	2201      	movs	r2, #1
 800d2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	43db      	mvns	r3, r3
 800d2b2:	6939      	ldr	r1, [r7, #16]
 800d2b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2b8:	4013      	ands	r3, r2
 800d2ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3720      	adds	r7, #32
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
	...

0800d2c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	333c      	adds	r3, #60	; 0x3c
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	015a      	lsls	r2, r3, #5
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	f040 80a0 	bne.w	800d440 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	f003 0308 	and.w	r3, r3, #8
 800d306:	2b00      	cmp	r3, #0
 800d308:	d015      	beq.n	800d336 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	4a72      	ldr	r2, [pc, #456]	; (800d4d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	f240 80dd 	bls.w	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f000 80d7 	beq.w	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	015a      	lsls	r2, r3, #5
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	4413      	add	r3, r2
 800d328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d32c:	461a      	mov	r2, r3
 800d32e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d332:	6093      	str	r3, [r2, #8]
 800d334:	e0cb      	b.n	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	f003 0320 	and.w	r3, r3, #32
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d009      	beq.n	800d354 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	015a      	lsls	r2, r3, #5
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	4413      	add	r3, r2
 800d348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d34c:	461a      	mov	r2, r3
 800d34e:	2320      	movs	r3, #32
 800d350:	6093      	str	r3, [r2, #8]
 800d352:	e0bc      	b.n	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f040 80b7 	bne.w	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	4a5d      	ldr	r2, [pc, #372]	; (800d4d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d90f      	bls.n	800d388 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00a      	beq.n	800d388 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	015a      	lsls	r2, r3, #5
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	4413      	add	r3, r2
 800d37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d37e:	461a      	mov	r2, r3
 800d380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d384:	6093      	str	r3, [r2, #8]
 800d386:	e0a2      	b.n	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	4613      	mov	r3, r2
 800d38e:	00db      	lsls	r3, r3, #3
 800d390:	1a9b      	subs	r3, r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	440b      	add	r3, r1
 800d396:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d39a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	0159      	lsls	r1, r3, #5
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	440b      	add	r3, r1
 800d3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d3ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	00db      	lsls	r3, r3, #3
 800d3b8:	1a9b      	subs	r3, r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4403      	add	r3, r0
 800d3be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d3c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d3c4:	6879      	ldr	r1, [r7, #4]
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	1a9b      	subs	r3, r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	440b      	add	r3, r1
 800d3d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d3d6:	6819      	ldr	r1, [r3, #0]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	00db      	lsls	r3, r3, #3
 800d3e0:	1a9b      	subs	r3, r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4403      	add	r3, r0
 800d3e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4419      	add	r1, r3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	00db      	lsls	r3, r3, #3
 800d3f6:	1a9b      	subs	r3, r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4403      	add	r3, r0
 800d3fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d400:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d114      	bne.n	800d432 <PCD_EP_OutXfrComplete_int+0x16a>
 800d408:	6879      	ldr	r1, [r7, #4]
 800d40a:	683a      	ldr	r2, [r7, #0]
 800d40c:	4613      	mov	r3, r2
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	1a9b      	subs	r3, r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	440b      	add	r3, r1
 800d416:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d108      	bne.n	800d432 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6818      	ldr	r0, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d42a:	461a      	mov	r2, r3
 800d42c:	2101      	movs	r1, #1
 800d42e:	f003 fc29 	bl	8010c84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	b2db      	uxtb	r3, r3
 800d436:	4619      	mov	r1, r3
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f008 f9cf 	bl	80157dc <HAL_PCD_DataOutStageCallback>
 800d43e:	e046      	b.n	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	4a26      	ldr	r2, [pc, #152]	; (800d4dc <PCD_EP_OutXfrComplete_int+0x214>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d124      	bne.n	800d492 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00a      	beq.n	800d468 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	015a      	lsls	r2, r3, #5
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	4413      	add	r3, r2
 800d45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d45e:	461a      	mov	r2, r3
 800d460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d464:	6093      	str	r3, [r2, #8]
 800d466:	e032      	b.n	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f003 0320 	and.w	r3, r3, #32
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d008      	beq.n	800d484 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	015a      	lsls	r2, r3, #5
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	4413      	add	r3, r2
 800d47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d47e:	461a      	mov	r2, r3
 800d480:	2320      	movs	r3, #32
 800d482:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	b2db      	uxtb	r3, r3
 800d488:	4619      	mov	r1, r3
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f008 f9a6 	bl	80157dc <HAL_PCD_DataOutStageCallback>
 800d490:	e01d      	b.n	800d4ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d114      	bne.n	800d4c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d498:	6879      	ldr	r1, [r7, #4]
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	4613      	mov	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	1a9b      	subs	r3, r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	440b      	add	r3, r1
 800d4a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d108      	bne.n	800d4c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6818      	ldr	r0, [r3, #0]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	2100      	movs	r1, #0
 800d4be:	f003 fbe1 	bl	8010c84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f008 f987 	bl	80157dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3718      	adds	r7, #24
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	4f54300a 	.word	0x4f54300a
 800d4dc:	4f54310a 	.word	0x4f54310a

0800d4e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	333c      	adds	r3, #60	; 0x3c
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	015a      	lsls	r2, r3, #5
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	4413      	add	r3, r2
 800d506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4a15      	ldr	r2, [pc, #84]	; (800d568 <PCD_EP_OutSetupPacket_int+0x88>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d90e      	bls.n	800d534 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d009      	beq.n	800d534 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	015a      	lsls	r2, r3, #5
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	4413      	add	r3, r2
 800d528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d52c:	461a      	mov	r2, r3
 800d52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d532:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f008 f93f 	bl	80157b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	4a0a      	ldr	r2, [pc, #40]	; (800d568 <PCD_EP_OutSetupPacket_int+0x88>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d90c      	bls.n	800d55c <PCD_EP_OutSetupPacket_int+0x7c>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	691b      	ldr	r3, [r3, #16]
 800d546:	2b01      	cmp	r3, #1
 800d548:	d108      	bne.n	800d55c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6818      	ldr	r0, [r3, #0]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d554:	461a      	mov	r2, r3
 800d556:	2101      	movs	r1, #1
 800d558:	f003 fb94 	bl	8010c84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	4f54300a 	.word	0x4f54300a

0800d56c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
 800d578:	4613      	mov	r3, r2
 800d57a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d582:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d584:	78fb      	ldrb	r3, [r7, #3]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d107      	bne.n	800d59a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d58a:	883b      	ldrh	r3, [r7, #0]
 800d58c:	0419      	lsls	r1, r3, #16
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	430a      	orrs	r2, r1
 800d596:	629a      	str	r2, [r3, #40]	; 0x28
 800d598:	e028      	b.n	800d5ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a0:	0c1b      	lsrs	r3, r3, #16
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	73fb      	strb	r3, [r7, #15]
 800d5ac:	e00d      	b.n	800d5ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	3340      	adds	r3, #64	; 0x40
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	0c1b      	lsrs	r3, r3, #16
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	73fb      	strb	r3, [r7, #15]
 800d5ca:	7bfa      	ldrb	r2, [r7, #15]
 800d5cc:	78fb      	ldrb	r3, [r7, #3]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d3ec      	bcc.n	800d5ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d5d4:	883b      	ldrh	r3, [r7, #0]
 800d5d6:	0418      	lsls	r0, r3, #16
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6819      	ldr	r1, [r3, #0]
 800d5dc:	78fb      	ldrb	r3, [r7, #3]
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	4302      	orrs	r2, r0
 800d5e4:	3340      	adds	r3, #64	; 0x40
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	440b      	add	r3, r1
 800d5ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3714      	adds	r7, #20
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b083      	sub	sp, #12
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	460b      	mov	r3, r1
 800d604:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	887a      	ldrh	r2, [r7, #2]
 800d60c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	460b      	mov	r3, r1
 800d626:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b086      	sub	sp, #24
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d101      	bne.n	800d646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d642:	2301      	movs	r3, #1
 800d644:	e25b      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d075      	beq.n	800d73e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d652:	4ba3      	ldr	r3, [pc, #652]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	f003 030c 	and.w	r3, r3, #12
 800d65a:	2b04      	cmp	r3, #4
 800d65c:	d00c      	beq.n	800d678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d65e:	4ba0      	ldr	r3, [pc, #640]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d666:	2b08      	cmp	r3, #8
 800d668:	d112      	bne.n	800d690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d66a:	4b9d      	ldr	r3, [pc, #628]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d676:	d10b      	bne.n	800d690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d678:	4b99      	ldr	r3, [pc, #612]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d680:	2b00      	cmp	r3, #0
 800d682:	d05b      	beq.n	800d73c <HAL_RCC_OscConfig+0x108>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d157      	bne.n	800d73c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e236      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d698:	d106      	bne.n	800d6a8 <HAL_RCC_OscConfig+0x74>
 800d69a:	4b91      	ldr	r3, [pc, #580]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a90      	ldr	r2, [pc, #576]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	e01d      	b.n	800d6e4 <HAL_RCC_OscConfig+0xb0>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d6b0:	d10c      	bne.n	800d6cc <HAL_RCC_OscConfig+0x98>
 800d6b2:	4b8b      	ldr	r3, [pc, #556]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a8a      	ldr	r2, [pc, #552]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	4b88      	ldr	r3, [pc, #544]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a87      	ldr	r2, [pc, #540]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6c8:	6013      	str	r3, [r2, #0]
 800d6ca:	e00b      	b.n	800d6e4 <HAL_RCC_OscConfig+0xb0>
 800d6cc:	4b84      	ldr	r3, [pc, #528]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a83      	ldr	r2, [pc, #524]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	4b81      	ldr	r3, [pc, #516]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a80      	ldr	r2, [pc, #512]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d6de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d013      	beq.n	800d714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6ec:	f7fd ff66 	bl	800b5bc <HAL_GetTick>
 800d6f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d6f2:	e008      	b.n	800d706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d6f4:	f7fd ff62 	bl	800b5bc <HAL_GetTick>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	2b64      	cmp	r3, #100	; 0x64
 800d700:	d901      	bls.n	800d706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d702:	2303      	movs	r3, #3
 800d704:	e1fb      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d706:	4b76      	ldr	r3, [pc, #472]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d0f0      	beq.n	800d6f4 <HAL_RCC_OscConfig+0xc0>
 800d712:	e014      	b.n	800d73e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d714:	f7fd ff52 	bl	800b5bc <HAL_GetTick>
 800d718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d71a:	e008      	b.n	800d72e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d71c:	f7fd ff4e 	bl	800b5bc <HAL_GetTick>
 800d720:	4602      	mov	r2, r0
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	2b64      	cmp	r3, #100	; 0x64
 800d728:	d901      	bls.n	800d72e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d72a:	2303      	movs	r3, #3
 800d72c:	e1e7      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d72e:	4b6c      	ldr	r3, [pc, #432]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1f0      	bne.n	800d71c <HAL_RCC_OscConfig+0xe8>
 800d73a:	e000      	b.n	800d73e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d73c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f003 0302 	and.w	r3, r3, #2
 800d746:	2b00      	cmp	r3, #0
 800d748:	d063      	beq.n	800d812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d74a:	4b65      	ldr	r3, [pc, #404]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	f003 030c 	and.w	r3, r3, #12
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00b      	beq.n	800d76e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d756:	4b62      	ldr	r3, [pc, #392]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d75e:	2b08      	cmp	r3, #8
 800d760:	d11c      	bne.n	800d79c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d762:	4b5f      	ldr	r3, [pc, #380]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d116      	bne.n	800d79c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d76e:	4b5c      	ldr	r3, [pc, #368]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f003 0302 	and.w	r3, r3, #2
 800d776:	2b00      	cmp	r3, #0
 800d778:	d005      	beq.n	800d786 <HAL_RCC_OscConfig+0x152>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d001      	beq.n	800d786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e1bb      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d786:	4b56      	ldr	r3, [pc, #344]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	691b      	ldr	r3, [r3, #16]
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	4952      	ldr	r1, [pc, #328]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d796:	4313      	orrs	r3, r2
 800d798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d79a:	e03a      	b.n	800d812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d020      	beq.n	800d7e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d7a4:	4b4f      	ldr	r3, [pc, #316]	; (800d8e4 <HAL_RCC_OscConfig+0x2b0>)
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7aa:	f7fd ff07 	bl	800b5bc <HAL_GetTick>
 800d7ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7b0:	e008      	b.n	800d7c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d7b2:	f7fd ff03 	bl	800b5bc <HAL_GetTick>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d901      	bls.n	800d7c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d7c0:	2303      	movs	r3, #3
 800d7c2:	e19c      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7c4:	4b46      	ldr	r3, [pc, #280]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f003 0302 	and.w	r3, r3, #2
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d0f0      	beq.n	800d7b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7d0:	4b43      	ldr	r3, [pc, #268]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	00db      	lsls	r3, r3, #3
 800d7de:	4940      	ldr	r1, [pc, #256]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	600b      	str	r3, [r1, #0]
 800d7e4:	e015      	b.n	800d812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d7e6:	4b3f      	ldr	r3, [pc, #252]	; (800d8e4 <HAL_RCC_OscConfig+0x2b0>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7ec:	f7fd fee6 	bl	800b5bc <HAL_GetTick>
 800d7f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d7f2:	e008      	b.n	800d806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d7f4:	f7fd fee2 	bl	800b5bc <HAL_GetTick>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d901      	bls.n	800d806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d802:	2303      	movs	r3, #3
 800d804:	e17b      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d806:	4b36      	ldr	r3, [pc, #216]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f003 0302 	and.w	r3, r3, #2
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1f0      	bne.n	800d7f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f003 0308 	and.w	r3, r3, #8
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d030      	beq.n	800d880 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d016      	beq.n	800d854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d826:	4b30      	ldr	r3, [pc, #192]	; (800d8e8 <HAL_RCC_OscConfig+0x2b4>)
 800d828:	2201      	movs	r2, #1
 800d82a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d82c:	f7fd fec6 	bl	800b5bc <HAL_GetTick>
 800d830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d832:	e008      	b.n	800d846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d834:	f7fd fec2 	bl	800b5bc <HAL_GetTick>
 800d838:	4602      	mov	r2, r0
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d901      	bls.n	800d846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d842:	2303      	movs	r3, #3
 800d844:	e15b      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d846:	4b26      	ldr	r3, [pc, #152]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d84a:	f003 0302 	and.w	r3, r3, #2
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d0f0      	beq.n	800d834 <HAL_RCC_OscConfig+0x200>
 800d852:	e015      	b.n	800d880 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d854:	4b24      	ldr	r3, [pc, #144]	; (800d8e8 <HAL_RCC_OscConfig+0x2b4>)
 800d856:	2200      	movs	r2, #0
 800d858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d85a:	f7fd feaf 	bl	800b5bc <HAL_GetTick>
 800d85e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d860:	e008      	b.n	800d874 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d862:	f7fd feab 	bl	800b5bc <HAL_GetTick>
 800d866:	4602      	mov	r2, r0
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d901      	bls.n	800d874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d870:	2303      	movs	r3, #3
 800d872:	e144      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d874:	4b1a      	ldr	r3, [pc, #104]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d878:	f003 0302 	and.w	r3, r3, #2
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1f0      	bne.n	800d862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f003 0304 	and.w	r3, r3, #4
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80a0 	beq.w	800d9ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d88e:	2300      	movs	r3, #0
 800d890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d892:	4b13      	ldr	r3, [pc, #76]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d10f      	bne.n	800d8be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d89e:	2300      	movs	r3, #0
 800d8a0:	60bb      	str	r3, [r7, #8]
 800d8a2:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a6:	4a0e      	ldr	r2, [pc, #56]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d8a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8ac:	6413      	str	r3, [r2, #64]	; 0x40
 800d8ae:	4b0c      	ldr	r3, [pc, #48]	; (800d8e0 <HAL_RCC_OscConfig+0x2ac>)
 800d8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8b6:	60bb      	str	r3, [r7, #8]
 800d8b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8be:	4b0b      	ldr	r3, [pc, #44]	; (800d8ec <HAL_RCC_OscConfig+0x2b8>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d121      	bne.n	800d90e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d8ca:	4b08      	ldr	r3, [pc, #32]	; (800d8ec <HAL_RCC_OscConfig+0x2b8>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a07      	ldr	r2, [pc, #28]	; (800d8ec <HAL_RCC_OscConfig+0x2b8>)
 800d8d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d8d6:	f7fd fe71 	bl	800b5bc <HAL_GetTick>
 800d8da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8dc:	e011      	b.n	800d902 <HAL_RCC_OscConfig+0x2ce>
 800d8de:	bf00      	nop
 800d8e0:	40023800 	.word	0x40023800
 800d8e4:	42470000 	.word	0x42470000
 800d8e8:	42470e80 	.word	0x42470e80
 800d8ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8f0:	f7fd fe64 	bl	800b5bc <HAL_GetTick>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d901      	bls.n	800d902 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d8fe:	2303      	movs	r3, #3
 800d900:	e0fd      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d902:	4b81      	ldr	r3, [pc, #516]	; (800db08 <HAL_RCC_OscConfig+0x4d4>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d0f0      	beq.n	800d8f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d106      	bne.n	800d924 <HAL_RCC_OscConfig+0x2f0>
 800d916:	4b7d      	ldr	r3, [pc, #500]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d91a:	4a7c      	ldr	r2, [pc, #496]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d91c:	f043 0301 	orr.w	r3, r3, #1
 800d920:	6713      	str	r3, [r2, #112]	; 0x70
 800d922:	e01c      	b.n	800d95e <HAL_RCC_OscConfig+0x32a>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	2b05      	cmp	r3, #5
 800d92a:	d10c      	bne.n	800d946 <HAL_RCC_OscConfig+0x312>
 800d92c:	4b77      	ldr	r3, [pc, #476]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d930:	4a76      	ldr	r2, [pc, #472]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d932:	f043 0304 	orr.w	r3, r3, #4
 800d936:	6713      	str	r3, [r2, #112]	; 0x70
 800d938:	4b74      	ldr	r3, [pc, #464]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93c:	4a73      	ldr	r2, [pc, #460]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d93e:	f043 0301 	orr.w	r3, r3, #1
 800d942:	6713      	str	r3, [r2, #112]	; 0x70
 800d944:	e00b      	b.n	800d95e <HAL_RCC_OscConfig+0x32a>
 800d946:	4b71      	ldr	r3, [pc, #452]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d94a:	4a70      	ldr	r2, [pc, #448]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d94c:	f023 0301 	bic.w	r3, r3, #1
 800d950:	6713      	str	r3, [r2, #112]	; 0x70
 800d952:	4b6e      	ldr	r3, [pc, #440]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d956:	4a6d      	ldr	r2, [pc, #436]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d958:	f023 0304 	bic.w	r3, r3, #4
 800d95c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d015      	beq.n	800d992 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d966:	f7fd fe29 	bl	800b5bc <HAL_GetTick>
 800d96a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d96c:	e00a      	b.n	800d984 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d96e:	f7fd fe25 	bl	800b5bc <HAL_GetTick>
 800d972:	4602      	mov	r2, r0
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	f241 3288 	movw	r2, #5000	; 0x1388
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d901      	bls.n	800d984 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d980:	2303      	movs	r3, #3
 800d982:	e0bc      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d984:	4b61      	ldr	r3, [pc, #388]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d988:	f003 0302 	and.w	r3, r3, #2
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d0ee      	beq.n	800d96e <HAL_RCC_OscConfig+0x33a>
 800d990:	e014      	b.n	800d9bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d992:	f7fd fe13 	bl	800b5bc <HAL_GetTick>
 800d996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d998:	e00a      	b.n	800d9b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d99a:	f7fd fe0f 	bl	800b5bc <HAL_GetTick>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d901      	bls.n	800d9b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	e0a6      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d9b0:	4b56      	ldr	r3, [pc, #344]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b4:	f003 0302 	and.w	r3, r3, #2
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1ee      	bne.n	800d99a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d9bc:	7dfb      	ldrb	r3, [r7, #23]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d105      	bne.n	800d9ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9c2:	4b52      	ldr	r3, [pc, #328]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c6:	4a51      	ldr	r2, [pc, #324]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d9c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	699b      	ldr	r3, [r3, #24]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 8092 	beq.w	800dafc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d9d8:	4b4c      	ldr	r3, [pc, #304]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	f003 030c 	and.w	r3, r3, #12
 800d9e0:	2b08      	cmp	r3, #8
 800d9e2:	d05c      	beq.n	800da9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d141      	bne.n	800da70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d9ec:	4b48      	ldr	r3, [pc, #288]	; (800db10 <HAL_RCC_OscConfig+0x4dc>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d9f2:	f7fd fde3 	bl	800b5bc <HAL_GetTick>
 800d9f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d9f8:	e008      	b.n	800da0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d9fa:	f7fd fddf 	bl	800b5bc <HAL_GetTick>
 800d9fe:	4602      	mov	r2, r0
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	2b02      	cmp	r3, #2
 800da06:	d901      	bls.n	800da0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800da08:	2303      	movs	r3, #3
 800da0a:	e078      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da0c:	4b3f      	ldr	r3, [pc, #252]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1f0      	bne.n	800d9fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	69da      	ldr	r2, [r3, #28]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6a1b      	ldr	r3, [r3, #32]
 800da20:	431a      	orrs	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	019b      	lsls	r3, r3, #6
 800da28:	431a      	orrs	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2e:	085b      	lsrs	r3, r3, #1
 800da30:	3b01      	subs	r3, #1
 800da32:	041b      	lsls	r3, r3, #16
 800da34:	431a      	orrs	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3a:	061b      	lsls	r3, r3, #24
 800da3c:	4933      	ldr	r1, [pc, #204]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800da3e:	4313      	orrs	r3, r2
 800da40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800da42:	4b33      	ldr	r3, [pc, #204]	; (800db10 <HAL_RCC_OscConfig+0x4dc>)
 800da44:	2201      	movs	r2, #1
 800da46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da48:	f7fd fdb8 	bl	800b5bc <HAL_GetTick>
 800da4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da4e:	e008      	b.n	800da62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da50:	f7fd fdb4 	bl	800b5bc <HAL_GetTick>
 800da54:	4602      	mov	r2, r0
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d901      	bls.n	800da62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	e04d      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da62:	4b2a      	ldr	r3, [pc, #168]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d0f0      	beq.n	800da50 <HAL_RCC_OscConfig+0x41c>
 800da6e:	e045      	b.n	800dafc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da70:	4b27      	ldr	r3, [pc, #156]	; (800db10 <HAL_RCC_OscConfig+0x4dc>)
 800da72:	2200      	movs	r2, #0
 800da74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da76:	f7fd fda1 	bl	800b5bc <HAL_GetTick>
 800da7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da7c:	e008      	b.n	800da90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da7e:	f7fd fd9d 	bl	800b5bc <HAL_GetTick>
 800da82:	4602      	mov	r2, r0
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d901      	bls.n	800da90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800da8c:	2303      	movs	r3, #3
 800da8e:	e036      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da90:	4b1e      	ldr	r3, [pc, #120]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1f0      	bne.n	800da7e <HAL_RCC_OscConfig+0x44a>
 800da9c:	e02e      	b.n	800dafc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d101      	bne.n	800daaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e029      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800daaa:	4b18      	ldr	r3, [pc, #96]	; (800db0c <HAL_RCC_OscConfig+0x4d8>)
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d11c      	bne.n	800daf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dac8:	429a      	cmp	r2, r3
 800daca:	d115      	bne.n	800daf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dad2:	4013      	ands	r3, r2
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dad8:	4293      	cmp	r3, r2
 800dada:	d10d      	bne.n	800daf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d106      	bne.n	800daf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d001      	beq.n	800dafc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	e000      	b.n	800dafe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3718      	adds	r7, #24
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	40007000 	.word	0x40007000
 800db0c:	40023800 	.word	0x40023800
 800db10:	42470060 	.word	0x42470060

0800db14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	e0cc      	b.n	800dcc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800db28:	4b68      	ldr	r3, [pc, #416]	; (800dccc <HAL_RCC_ClockConfig+0x1b8>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f003 030f 	and.w	r3, r3, #15
 800db30:	683a      	ldr	r2, [r7, #0]
 800db32:	429a      	cmp	r2, r3
 800db34:	d90c      	bls.n	800db50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db36:	4b65      	ldr	r3, [pc, #404]	; (800dccc <HAL_RCC_ClockConfig+0x1b8>)
 800db38:	683a      	ldr	r2, [r7, #0]
 800db3a:	b2d2      	uxtb	r2, r2
 800db3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db3e:	4b63      	ldr	r3, [pc, #396]	; (800dccc <HAL_RCC_ClockConfig+0x1b8>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f003 030f 	and.w	r3, r3, #15
 800db46:	683a      	ldr	r2, [r7, #0]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d001      	beq.n	800db50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	e0b8      	b.n	800dcc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f003 0302 	and.w	r3, r3, #2
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d020      	beq.n	800db9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 0304 	and.w	r3, r3, #4
 800db64:	2b00      	cmp	r3, #0
 800db66:	d005      	beq.n	800db74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800db68:	4b59      	ldr	r3, [pc, #356]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	4a58      	ldr	r2, [pc, #352]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800db6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800db72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f003 0308 	and.w	r3, r3, #8
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d005      	beq.n	800db8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800db80:	4b53      	ldr	r3, [pc, #332]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	4a52      	ldr	r2, [pc, #328]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800db86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800db8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db8c:	4b50      	ldr	r3, [pc, #320]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	494d      	ldr	r1, [pc, #308]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800db9a:	4313      	orrs	r3, r2
 800db9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 0301 	and.w	r3, r3, #1
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d044      	beq.n	800dc34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d107      	bne.n	800dbc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbb2:	4b47      	ldr	r3, [pc, #284]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d119      	bne.n	800dbf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e07f      	b.n	800dcc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	d003      	beq.n	800dbd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dbce:	2b03      	cmp	r3, #3
 800dbd0:	d107      	bne.n	800dbe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbd2:	4b3f      	ldr	r3, [pc, #252]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d109      	bne.n	800dbf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e06f      	b.n	800dcc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbe2:	4b3b      	ldr	r3, [pc, #236]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f003 0302 	and.w	r3, r3, #2
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d101      	bne.n	800dbf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e067      	b.n	800dcc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dbf2:	4b37      	ldr	r3, [pc, #220]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	f023 0203 	bic.w	r2, r3, #3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	4934      	ldr	r1, [pc, #208]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dc00:	4313      	orrs	r3, r2
 800dc02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dc04:	f7fd fcda 	bl	800b5bc <HAL_GetTick>
 800dc08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc0a:	e00a      	b.n	800dc22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc0c:	f7fd fcd6 	bl	800b5bc <HAL_GetTick>
 800dc10:	4602      	mov	r2, r0
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d901      	bls.n	800dc22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dc1e:	2303      	movs	r3, #3
 800dc20:	e04f      	b.n	800dcc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc22:	4b2b      	ldr	r3, [pc, #172]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	f003 020c 	and.w	r2, r3, #12
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d1eb      	bne.n	800dc0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dc34:	4b25      	ldr	r3, [pc, #148]	; (800dccc <HAL_RCC_ClockConfig+0x1b8>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f003 030f 	and.w	r3, r3, #15
 800dc3c:	683a      	ldr	r2, [r7, #0]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d20c      	bcs.n	800dc5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc42:	4b22      	ldr	r3, [pc, #136]	; (800dccc <HAL_RCC_ClockConfig+0x1b8>)
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	b2d2      	uxtb	r2, r2
 800dc48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc4a:	4b20      	ldr	r3, [pc, #128]	; (800dccc <HAL_RCC_ClockConfig+0x1b8>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f003 030f 	and.w	r3, r3, #15
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d001      	beq.n	800dc5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e032      	b.n	800dcc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f003 0304 	and.w	r3, r3, #4
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d008      	beq.n	800dc7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dc68:	4b19      	ldr	r3, [pc, #100]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	4916      	ldr	r1, [pc, #88]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dc76:	4313      	orrs	r3, r2
 800dc78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0308 	and.w	r3, r3, #8
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d009      	beq.n	800dc9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dc86:	4b12      	ldr	r3, [pc, #72]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	00db      	lsls	r3, r3, #3
 800dc94:	490e      	ldr	r1, [pc, #56]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dc96:	4313      	orrs	r3, r2
 800dc98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dc9a:	f000 f821 	bl	800dce0 <HAL_RCC_GetSysClockFreq>
 800dc9e:	4601      	mov	r1, r0
 800dca0:	4b0b      	ldr	r3, [pc, #44]	; (800dcd0 <HAL_RCC_ClockConfig+0x1bc>)
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	091b      	lsrs	r3, r3, #4
 800dca6:	f003 030f 	and.w	r3, r3, #15
 800dcaa:	4a0a      	ldr	r2, [pc, #40]	; (800dcd4 <HAL_RCC_ClockConfig+0x1c0>)
 800dcac:	5cd3      	ldrb	r3, [r2, r3]
 800dcae:	fa21 f303 	lsr.w	r3, r1, r3
 800dcb2:	4a09      	ldr	r2, [pc, #36]	; (800dcd8 <HAL_RCC_ClockConfig+0x1c4>)
 800dcb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dcb6:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <HAL_RCC_ClockConfig+0x1c8>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fd f984 	bl	800afc8 <HAL_InitTick>

  return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	40023c00 	.word	0x40023c00
 800dcd0:	40023800 	.word	0x40023800
 800dcd4:	0801b528 	.word	0x0801b528
 800dcd8:	20002088 	.word	0x20002088
 800dcdc:	2000208c 	.word	0x2000208c

0800dce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dce6:	2300      	movs	r3, #0
 800dce8:	607b      	str	r3, [r7, #4]
 800dcea:	2300      	movs	r3, #0
 800dcec:	60fb      	str	r3, [r7, #12]
 800dcee:	2300      	movs	r3, #0
 800dcf0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dcf6:	4b63      	ldr	r3, [pc, #396]	; (800de84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	f003 030c 	and.w	r3, r3, #12
 800dcfe:	2b04      	cmp	r3, #4
 800dd00:	d007      	beq.n	800dd12 <HAL_RCC_GetSysClockFreq+0x32>
 800dd02:	2b08      	cmp	r3, #8
 800dd04:	d008      	beq.n	800dd18 <HAL_RCC_GetSysClockFreq+0x38>
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f040 80b4 	bne.w	800de74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dd0c:	4b5e      	ldr	r3, [pc, #376]	; (800de88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dd0e:	60bb      	str	r3, [r7, #8]
       break;
 800dd10:	e0b3      	b.n	800de7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dd12:	4b5e      	ldr	r3, [pc, #376]	; (800de8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800dd14:	60bb      	str	r3, [r7, #8]
      break;
 800dd16:	e0b0      	b.n	800de7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dd18:	4b5a      	ldr	r3, [pc, #360]	; (800de84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dd22:	4b58      	ldr	r3, [pc, #352]	; (800de84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d04a      	beq.n	800ddc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dd2e:	4b55      	ldr	r3, [pc, #340]	; (800de84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	099b      	lsrs	r3, r3, #6
 800dd34:	f04f 0400 	mov.w	r4, #0
 800dd38:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dd3c:	f04f 0200 	mov.w	r2, #0
 800dd40:	ea03 0501 	and.w	r5, r3, r1
 800dd44:	ea04 0602 	and.w	r6, r4, r2
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4632      	mov	r2, r6
 800dd4c:	f04f 0300 	mov.w	r3, #0
 800dd50:	f04f 0400 	mov.w	r4, #0
 800dd54:	0154      	lsls	r4, r2, #5
 800dd56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dd5a:	014b      	lsls	r3, r1, #5
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4622      	mov	r2, r4
 800dd60:	1b49      	subs	r1, r1, r5
 800dd62:	eb62 0206 	sbc.w	r2, r2, r6
 800dd66:	f04f 0300 	mov.w	r3, #0
 800dd6a:	f04f 0400 	mov.w	r4, #0
 800dd6e:	0194      	lsls	r4, r2, #6
 800dd70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dd74:	018b      	lsls	r3, r1, #6
 800dd76:	1a5b      	subs	r3, r3, r1
 800dd78:	eb64 0402 	sbc.w	r4, r4, r2
 800dd7c:	f04f 0100 	mov.w	r1, #0
 800dd80:	f04f 0200 	mov.w	r2, #0
 800dd84:	00e2      	lsls	r2, r4, #3
 800dd86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dd8a:	00d9      	lsls	r1, r3, #3
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	4614      	mov	r4, r2
 800dd90:	195b      	adds	r3, r3, r5
 800dd92:	eb44 0406 	adc.w	r4, r4, r6
 800dd96:	f04f 0100 	mov.w	r1, #0
 800dd9a:	f04f 0200 	mov.w	r2, #0
 800dd9e:	0262      	lsls	r2, r4, #9
 800dda0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800dda4:	0259      	lsls	r1, r3, #9
 800dda6:	460b      	mov	r3, r1
 800dda8:	4614      	mov	r4, r2
 800ddaa:	4618      	mov	r0, r3
 800ddac:	4621      	mov	r1, r4
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f04f 0400 	mov.w	r4, #0
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	4623      	mov	r3, r4
 800ddb8:	f7f2 ff66 	bl	8000c88 <__aeabi_uldivmod>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	60fb      	str	r3, [r7, #12]
 800ddc2:	e049      	b.n	800de58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ddc4:	4b2f      	ldr	r3, [pc, #188]	; (800de84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	099b      	lsrs	r3, r3, #6
 800ddca:	f04f 0400 	mov.w	r4, #0
 800ddce:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ddd2:	f04f 0200 	mov.w	r2, #0
 800ddd6:	ea03 0501 	and.w	r5, r3, r1
 800ddda:	ea04 0602 	and.w	r6, r4, r2
 800ddde:	4629      	mov	r1, r5
 800dde0:	4632      	mov	r2, r6
 800dde2:	f04f 0300 	mov.w	r3, #0
 800dde6:	f04f 0400 	mov.w	r4, #0
 800ddea:	0154      	lsls	r4, r2, #5
 800ddec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ddf0:	014b      	lsls	r3, r1, #5
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	1b49      	subs	r1, r1, r5
 800ddf8:	eb62 0206 	sbc.w	r2, r2, r6
 800ddfc:	f04f 0300 	mov.w	r3, #0
 800de00:	f04f 0400 	mov.w	r4, #0
 800de04:	0194      	lsls	r4, r2, #6
 800de06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800de0a:	018b      	lsls	r3, r1, #6
 800de0c:	1a5b      	subs	r3, r3, r1
 800de0e:	eb64 0402 	sbc.w	r4, r4, r2
 800de12:	f04f 0100 	mov.w	r1, #0
 800de16:	f04f 0200 	mov.w	r2, #0
 800de1a:	00e2      	lsls	r2, r4, #3
 800de1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800de20:	00d9      	lsls	r1, r3, #3
 800de22:	460b      	mov	r3, r1
 800de24:	4614      	mov	r4, r2
 800de26:	195b      	adds	r3, r3, r5
 800de28:	eb44 0406 	adc.w	r4, r4, r6
 800de2c:	f04f 0100 	mov.w	r1, #0
 800de30:	f04f 0200 	mov.w	r2, #0
 800de34:	02a2      	lsls	r2, r4, #10
 800de36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800de3a:	0299      	lsls	r1, r3, #10
 800de3c:	460b      	mov	r3, r1
 800de3e:	4614      	mov	r4, r2
 800de40:	4618      	mov	r0, r3
 800de42:	4621      	mov	r1, r4
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f04f 0400 	mov.w	r4, #0
 800de4a:	461a      	mov	r2, r3
 800de4c:	4623      	mov	r3, r4
 800de4e:	f7f2 ff1b 	bl	8000c88 <__aeabi_uldivmod>
 800de52:	4603      	mov	r3, r0
 800de54:	460c      	mov	r4, r1
 800de56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800de58:	4b0a      	ldr	r3, [pc, #40]	; (800de84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	0c1b      	lsrs	r3, r3, #16
 800de5e:	f003 0303 	and.w	r3, r3, #3
 800de62:	3301      	adds	r3, #1
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800de70:	60bb      	str	r3, [r7, #8]
      break;
 800de72:	e002      	b.n	800de7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800de74:	4b04      	ldr	r3, [pc, #16]	; (800de88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800de76:	60bb      	str	r3, [r7, #8]
      break;
 800de78:	bf00      	nop
    }
  }
  return sysclockfreq;
 800de7a:	68bb      	ldr	r3, [r7, #8]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de84:	40023800 	.word	0x40023800
 800de88:	00f42400 	.word	0x00f42400
 800de8c:	007a1200 	.word	0x007a1200

0800de90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800de90:	b480      	push	{r7}
 800de92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800de94:	4b03      	ldr	r3, [pc, #12]	; (800dea4 <HAL_RCC_GetHCLKFreq+0x14>)
 800de96:	681b      	ldr	r3, [r3, #0]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	20002088 	.word	0x20002088

0800dea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800deac:	f7ff fff0 	bl	800de90 <HAL_RCC_GetHCLKFreq>
 800deb0:	4601      	mov	r1, r0
 800deb2:	4b05      	ldr	r3, [pc, #20]	; (800dec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	0a9b      	lsrs	r3, r3, #10
 800deb8:	f003 0307 	and.w	r3, r3, #7
 800debc:	4a03      	ldr	r2, [pc, #12]	; (800decc <HAL_RCC_GetPCLK1Freq+0x24>)
 800debe:	5cd3      	ldrb	r3, [r2, r3]
 800dec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	40023800 	.word	0x40023800
 800decc:	0801b538 	.word	0x0801b538

0800ded0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ded4:	f7ff ffdc 	bl	800de90 <HAL_RCC_GetHCLKFreq>
 800ded8:	4601      	mov	r1, r0
 800deda:	4b05      	ldr	r3, [pc, #20]	; (800def0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	0b5b      	lsrs	r3, r3, #13
 800dee0:	f003 0307 	and.w	r3, r3, #7
 800dee4:	4a03      	ldr	r2, [pc, #12]	; (800def4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dee6:	5cd3      	ldrb	r3, [r2, r3]
 800dee8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800deec:	4618      	mov	r0, r3
 800deee:	bd80      	pop	{r7, pc}
 800def0:	40023800 	.word	0x40023800
 800def4:	0801b538 	.word	0x0801b538

0800def8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	220f      	movs	r2, #15
 800df06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800df08:	4b12      	ldr	r3, [pc, #72]	; (800df54 <HAL_RCC_GetClockConfig+0x5c>)
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	f003 0203 	and.w	r2, r3, #3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800df14:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <HAL_RCC_GetClockConfig+0x5c>)
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800df20:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <HAL_RCC_GetClockConfig+0x5c>)
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800df2c:	4b09      	ldr	r3, [pc, #36]	; (800df54 <HAL_RCC_GetClockConfig+0x5c>)
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	08db      	lsrs	r3, r3, #3
 800df32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800df3a:	4b07      	ldr	r3, [pc, #28]	; (800df58 <HAL_RCC_GetClockConfig+0x60>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f003 020f 	and.w	r2, r3, #15
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	601a      	str	r2, [r3, #0]
}
 800df46:	bf00      	nop
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	40023800 	.word	0x40023800
 800df58:	40023c00 	.word	0x40023c00

0800df5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e01d      	b.n	800dfaa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df74:	b2db      	uxtb	r3, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	d106      	bne.n	800df88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7fd f9aa 	bl	800b2dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2202      	movs	r2, #2
 800df8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	3304      	adds	r3, #4
 800df98:	4619      	mov	r1, r3
 800df9a:	4610      	mov	r0, r2
 800df9c:	f000 fa38 	bl	800e410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dfa8:	2300      	movs	r3, #0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dfb2:	b480      	push	{r7}
 800dfb4:	b085      	sub	sp, #20
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	f003 0307 	and.w	r3, r3, #7
 800dfcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2b06      	cmp	r3, #6
 800dfd2:	d007      	beq.n	800dfe4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f042 0201 	orr.w	r2, r2, #1
 800dfe2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dfec:	2300      	movs	r3, #0
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3714      	adds	r7, #20
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr

0800dffa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dffa:	b480      	push	{r7}
 800dffc:	b085      	sub	sp, #20
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	68da      	ldr	r2, [r3, #12]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f042 0201 	orr.w	r2, r2, #1
 800e010:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	f003 0307 	and.w	r3, r3, #7
 800e01c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2b06      	cmp	r3, #6
 800e022:	d007      	beq.n	800e034 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f042 0201 	orr.w	r2, r2, #1
 800e032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3714      	adds	r7, #20
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b082      	sub	sp, #8
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	f003 0302 	and.w	r3, r3, #2
 800e054:	2b02      	cmp	r3, #2
 800e056:	d122      	bne.n	800e09e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	f003 0302 	and.w	r3, r3, #2
 800e062:	2b02      	cmp	r3, #2
 800e064:	d11b      	bne.n	800e09e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f06f 0202 	mvn.w	r2, #2
 800e06e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	f003 0303 	and.w	r3, r3, #3
 800e080:	2b00      	cmp	r3, #0
 800e082:	d003      	beq.n	800e08c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f9a5 	bl	800e3d4 <HAL_TIM_IC_CaptureCallback>
 800e08a:	e005      	b.n	800e098 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 f997 	bl	800e3c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f9a8 	bl	800e3e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	f003 0304 	and.w	r3, r3, #4
 800e0a8:	2b04      	cmp	r3, #4
 800e0aa:	d122      	bne.n	800e0f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	f003 0304 	and.w	r3, r3, #4
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	d11b      	bne.n	800e0f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f06f 0204 	mvn.w	r2, #4
 800e0c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d003      	beq.n	800e0e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 f97b 	bl	800e3d4 <HAL_TIM_IC_CaptureCallback>
 800e0de:	e005      	b.n	800e0ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 f96d 	bl	800e3c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f97e 	bl	800e3e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	f003 0308 	and.w	r3, r3, #8
 800e0fc:	2b08      	cmp	r3, #8
 800e0fe:	d122      	bne.n	800e146 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	f003 0308 	and.w	r3, r3, #8
 800e10a:	2b08      	cmp	r3, #8
 800e10c:	d11b      	bne.n	800e146 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f06f 0208 	mvn.w	r2, #8
 800e116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2204      	movs	r2, #4
 800e11c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	f003 0303 	and.w	r3, r3, #3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d003      	beq.n	800e134 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f951 	bl	800e3d4 <HAL_TIM_IC_CaptureCallback>
 800e132:	e005      	b.n	800e140 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f943 	bl	800e3c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f954 	bl	800e3e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2200      	movs	r2, #0
 800e144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	f003 0310 	and.w	r3, r3, #16
 800e150:	2b10      	cmp	r3, #16
 800e152:	d122      	bne.n	800e19a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	f003 0310 	and.w	r3, r3, #16
 800e15e:	2b10      	cmp	r3, #16
 800e160:	d11b      	bne.n	800e19a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f06f 0210 	mvn.w	r2, #16
 800e16a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2208      	movs	r2, #8
 800e170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	69db      	ldr	r3, [r3, #28]
 800e178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d003      	beq.n	800e188 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 f927 	bl	800e3d4 <HAL_TIM_IC_CaptureCallback>
 800e186:	e005      	b.n	800e194 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f919 	bl	800e3c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 f92a 	bl	800e3e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d10e      	bne.n	800e1c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	f003 0301 	and.w	r3, r3, #1
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d107      	bne.n	800e1c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f06f 0201 	mvn.w	r2, #1
 800e1be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7f7 faad 	bl	8005720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1d0:	2b80      	cmp	r3, #128	; 0x80
 800e1d2:	d10e      	bne.n	800e1f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1de:	2b80      	cmp	r3, #128	; 0x80
 800e1e0:	d107      	bne.n	800e1f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 facf 	bl	800e790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1fc:	2b40      	cmp	r3, #64	; 0x40
 800e1fe:	d10e      	bne.n	800e21e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e20a:	2b40      	cmp	r3, #64	; 0x40
 800e20c:	d107      	bne.n	800e21e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 f8ef 	bl	800e3fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	f003 0320 	and.w	r3, r3, #32
 800e228:	2b20      	cmp	r3, #32
 800e22a:	d10e      	bne.n	800e24a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	f003 0320 	and.w	r3, r3, #32
 800e236:	2b20      	cmp	r3, #32
 800e238:	d107      	bne.n	800e24a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f06f 0220 	mvn.w	r2, #32
 800e242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 fa99 	bl	800e77c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e24a:	bf00      	nop
 800e24c:	3708      	adds	r7, #8
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b084      	sub	sp, #16
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
 800e25a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e262:	2b01      	cmp	r3, #1
 800e264:	d101      	bne.n	800e26a <HAL_TIM_ConfigClockSource+0x18>
 800e266:	2302      	movs	r3, #2
 800e268:	e0a6      	b.n	800e3b8 <HAL_TIM_ConfigClockSource+0x166>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2201      	movs	r2, #1
 800e26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2202      	movs	r2, #2
 800e276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e288:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e290:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b40      	cmp	r3, #64	; 0x40
 800e2a0:	d067      	beq.n	800e372 <HAL_TIM_ConfigClockSource+0x120>
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	d80b      	bhi.n	800e2be <HAL_TIM_ConfigClockSource+0x6c>
 800e2a6:	2b10      	cmp	r3, #16
 800e2a8:	d073      	beq.n	800e392 <HAL_TIM_ConfigClockSource+0x140>
 800e2aa:	2b10      	cmp	r3, #16
 800e2ac:	d802      	bhi.n	800e2b4 <HAL_TIM_ConfigClockSource+0x62>
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d06f      	beq.n	800e392 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e2b2:	e078      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e2b4:	2b20      	cmp	r3, #32
 800e2b6:	d06c      	beq.n	800e392 <HAL_TIM_ConfigClockSource+0x140>
 800e2b8:	2b30      	cmp	r3, #48	; 0x30
 800e2ba:	d06a      	beq.n	800e392 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e2bc:	e073      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e2be:	2b70      	cmp	r3, #112	; 0x70
 800e2c0:	d00d      	beq.n	800e2de <HAL_TIM_ConfigClockSource+0x8c>
 800e2c2:	2b70      	cmp	r3, #112	; 0x70
 800e2c4:	d804      	bhi.n	800e2d0 <HAL_TIM_ConfigClockSource+0x7e>
 800e2c6:	2b50      	cmp	r3, #80	; 0x50
 800e2c8:	d033      	beq.n	800e332 <HAL_TIM_ConfigClockSource+0xe0>
 800e2ca:	2b60      	cmp	r3, #96	; 0x60
 800e2cc:	d041      	beq.n	800e352 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e2ce:	e06a      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2d4:	d066      	beq.n	800e3a4 <HAL_TIM_ConfigClockSource+0x152>
 800e2d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2da:	d017      	beq.n	800e30c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e2dc:	e063      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6818      	ldr	r0, [r3, #0]
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	6899      	ldr	r1, [r3, #8]
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	f000 f9a9 	bl	800e644 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e300:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	609a      	str	r2, [r3, #8]
      break;
 800e30a:	e04c      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6818      	ldr	r0, [r3, #0]
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	6899      	ldr	r1, [r3, #8]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	f000 f992 	bl	800e644 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689a      	ldr	r2, [r3, #8]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e32e:	609a      	str	r2, [r3, #8]
      break;
 800e330:	e039      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6818      	ldr	r0, [r3, #0]
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	6859      	ldr	r1, [r3, #4]
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	461a      	mov	r2, r3
 800e340:	f000 f906 	bl	800e550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2150      	movs	r1, #80	; 0x50
 800e34a:	4618      	mov	r0, r3
 800e34c:	f000 f95f 	bl	800e60e <TIM_ITRx_SetConfig>
      break;
 800e350:	e029      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6818      	ldr	r0, [r3, #0]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	6859      	ldr	r1, [r3, #4]
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	461a      	mov	r2, r3
 800e360:	f000 f925 	bl	800e5ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2160      	movs	r1, #96	; 0x60
 800e36a:	4618      	mov	r0, r3
 800e36c:	f000 f94f 	bl	800e60e <TIM_ITRx_SetConfig>
      break;
 800e370:	e019      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6818      	ldr	r0, [r3, #0]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	6859      	ldr	r1, [r3, #4]
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	461a      	mov	r2, r3
 800e380:	f000 f8e6 	bl	800e550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2140      	movs	r1, #64	; 0x40
 800e38a:	4618      	mov	r0, r3
 800e38c:	f000 f93f 	bl	800e60e <TIM_ITRx_SetConfig>
      break;
 800e390:	e009      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4619      	mov	r1, r3
 800e39c:	4610      	mov	r0, r2
 800e39e:	f000 f936 	bl	800e60e <TIM_ITRx_SetConfig>
      break;
 800e3a2:	e000      	b.n	800e3a6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e3a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e3c8:	bf00      	nop
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e3dc:	bf00      	nop
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e3f0:	bf00      	nop
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e404:	bf00      	nop
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e410:	b480      	push	{r7}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4a40      	ldr	r2, [pc, #256]	; (800e524 <TIM_Base_SetConfig+0x114>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d013      	beq.n	800e450 <TIM_Base_SetConfig+0x40>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e42e:	d00f      	beq.n	800e450 <TIM_Base_SetConfig+0x40>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	4a3d      	ldr	r2, [pc, #244]	; (800e528 <TIM_Base_SetConfig+0x118>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d00b      	beq.n	800e450 <TIM_Base_SetConfig+0x40>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	4a3c      	ldr	r2, [pc, #240]	; (800e52c <TIM_Base_SetConfig+0x11c>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d007      	beq.n	800e450 <TIM_Base_SetConfig+0x40>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4a3b      	ldr	r2, [pc, #236]	; (800e530 <TIM_Base_SetConfig+0x120>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d003      	beq.n	800e450 <TIM_Base_SetConfig+0x40>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4a3a      	ldr	r2, [pc, #232]	; (800e534 <TIM_Base_SetConfig+0x124>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d108      	bne.n	800e462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	4313      	orrs	r3, r2
 800e460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4a2f      	ldr	r2, [pc, #188]	; (800e524 <TIM_Base_SetConfig+0x114>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d02b      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e470:	d027      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4a2c      	ldr	r2, [pc, #176]	; (800e528 <TIM_Base_SetConfig+0x118>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d023      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4a2b      	ldr	r2, [pc, #172]	; (800e52c <TIM_Base_SetConfig+0x11c>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d01f      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4a2a      	ldr	r2, [pc, #168]	; (800e530 <TIM_Base_SetConfig+0x120>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d01b      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4a29      	ldr	r2, [pc, #164]	; (800e534 <TIM_Base_SetConfig+0x124>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d017      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4a28      	ldr	r2, [pc, #160]	; (800e538 <TIM_Base_SetConfig+0x128>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d013      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4a27      	ldr	r2, [pc, #156]	; (800e53c <TIM_Base_SetConfig+0x12c>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d00f      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4a26      	ldr	r2, [pc, #152]	; (800e540 <TIM_Base_SetConfig+0x130>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d00b      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4a25      	ldr	r2, [pc, #148]	; (800e544 <TIM_Base_SetConfig+0x134>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d007      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4a24      	ldr	r2, [pc, #144]	; (800e548 <TIM_Base_SetConfig+0x138>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d003      	beq.n	800e4c2 <TIM_Base_SetConfig+0xb2>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a23      	ldr	r2, [pc, #140]	; (800e54c <TIM_Base_SetConfig+0x13c>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d108      	bne.n	800e4d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	695b      	ldr	r3, [r3, #20]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	689a      	ldr	r2, [r3, #8]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4a0a      	ldr	r2, [pc, #40]	; (800e524 <TIM_Base_SetConfig+0x114>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d003      	beq.n	800e508 <TIM_Base_SetConfig+0xf8>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	4a0c      	ldr	r2, [pc, #48]	; (800e534 <TIM_Base_SetConfig+0x124>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d103      	bne.n	800e510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	691a      	ldr	r2, [r3, #16]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2201      	movs	r2, #1
 800e514:	615a      	str	r2, [r3, #20]
}
 800e516:	bf00      	nop
 800e518:	3714      	adds	r7, #20
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	40010000 	.word	0x40010000
 800e528:	40000400 	.word	0x40000400
 800e52c:	40000800 	.word	0x40000800
 800e530:	40000c00 	.word	0x40000c00
 800e534:	40010400 	.word	0x40010400
 800e538:	40014000 	.word	0x40014000
 800e53c:	40014400 	.word	0x40014400
 800e540:	40014800 	.word	0x40014800
 800e544:	40001800 	.word	0x40001800
 800e548:	40001c00 	.word	0x40001c00
 800e54c:	40002000 	.word	0x40002000

0800e550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e550:	b480      	push	{r7}
 800e552:	b087      	sub	sp, #28
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6a1b      	ldr	r3, [r3, #32]
 800e560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	f023 0201 	bic.w	r2, r3, #1
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	699b      	ldr	r3, [r3, #24]
 800e572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e57a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	011b      	lsls	r3, r3, #4
 800e580:	693a      	ldr	r2, [r7, #16]
 800e582:	4313      	orrs	r3, r2
 800e584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	f023 030a 	bic.w	r3, r3, #10
 800e58c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	4313      	orrs	r3, r2
 800e594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	693a      	ldr	r2, [r7, #16]
 800e59a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	621a      	str	r2, [r3, #32]
}
 800e5a2:	bf00      	nop
 800e5a4:	371c      	adds	r7, #28
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e5ae:	b480      	push	{r7}
 800e5b0:	b087      	sub	sp, #28
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6a1b      	ldr	r3, [r3, #32]
 800e5be:	f023 0210 	bic.w	r2, r3, #16
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6a1b      	ldr	r3, [r3, #32]
 800e5d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e5d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	031b      	lsls	r3, r3, #12
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e5ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	011b      	lsls	r3, r3, #4
 800e5f0:	693a      	ldr	r2, [r7, #16]
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	697a      	ldr	r2, [r7, #20]
 800e5fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	693a      	ldr	r2, [r7, #16]
 800e600:	621a      	str	r2, [r3, #32]
}
 800e602:	bf00      	nop
 800e604:	371c      	adds	r7, #28
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr

0800e60e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e60e:	b480      	push	{r7}
 800e610:	b085      	sub	sp, #20
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
 800e616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	f043 0307 	orr.w	r3, r3, #7
 800e630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	609a      	str	r2, [r3, #8]
}
 800e638:	bf00      	nop
 800e63a:	3714      	adds	r7, #20
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e644:	b480      	push	{r7}
 800e646:	b087      	sub	sp, #28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e65e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	021a      	lsls	r2, r3, #8
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	431a      	orrs	r2, r3
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	4313      	orrs	r3, r2
 800e66c:	697a      	ldr	r2, [r7, #20]
 800e66e:	4313      	orrs	r3, r2
 800e670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	697a      	ldr	r2, [r7, #20]
 800e676:	609a      	str	r2, [r3, #8]
}
 800e678:	bf00      	nop
 800e67a:	371c      	adds	r7, #28
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e694:	2b01      	cmp	r3, #1
 800e696:	d101      	bne.n	800e69c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e698:	2302      	movs	r3, #2
 800e69a:	e05a      	b.n	800e752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2202      	movs	r2, #2
 800e6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a21      	ldr	r2, [pc, #132]	; (800e760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d022      	beq.n	800e726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6e8:	d01d      	beq.n	800e726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a1d      	ldr	r2, [pc, #116]	; (800e764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d018      	beq.n	800e726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a1b      	ldr	r2, [pc, #108]	; (800e768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d013      	beq.n	800e726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a1a      	ldr	r2, [pc, #104]	; (800e76c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d00e      	beq.n	800e726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a18      	ldr	r2, [pc, #96]	; (800e770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d009      	beq.n	800e726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4a17      	ldr	r2, [pc, #92]	; (800e774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d004      	beq.n	800e726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a15      	ldr	r2, [pc, #84]	; (800e778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d10c      	bne.n	800e740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e72c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	4313      	orrs	r3, r2
 800e736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2201      	movs	r2, #1
 800e744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3714      	adds	r7, #20
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	40010000 	.word	0x40010000
 800e764:	40000400 	.word	0x40000400
 800e768:	40000800 	.word	0x40000800
 800e76c:	40000c00 	.word	0x40000c00
 800e770:	40010400 	.word	0x40010400
 800e774:	40014000 	.word	0x40014000
 800e778:	40001800 	.word	0x40001800

0800e77c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e784:	bf00      	nop
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e798:	bf00      	nop
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d101      	bne.n	800e7b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e03f      	b.n	800e836 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d106      	bne.n	800e7d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7fc fdec 	bl	800b3a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2224      	movs	r2, #36	; 0x24
 800e7d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68da      	ldr	r2, [r3, #12]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 fb6b 	bl	800eec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	691a      	ldr	r2, [r3, #16]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	695a      	ldr	r2, [r3, #20]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e80c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	68da      	ldr	r2, [r3, #12]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e81c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2220      	movs	r2, #32
 800e828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2220      	movs	r2, #32
 800e830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
	...

0800e840 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	4613      	mov	r3, r2
 800e84c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e854:	b2db      	uxtb	r3, r3
 800e856:	2b20      	cmp	r3, #32
 800e858:	d153      	bne.n	800e902 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <HAL_UART_Transmit_DMA+0x26>
 800e860:	88fb      	ldrh	r3, [r7, #6]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d101      	bne.n	800e86a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e866:	2301      	movs	r3, #1
 800e868:	e04c      	b.n	800e904 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e870:	2b01      	cmp	r3, #1
 800e872:	d101      	bne.n	800e878 <HAL_UART_Transmit_DMA+0x38>
 800e874:	2302      	movs	r3, #2
 800e876:	e045      	b.n	800e904 <HAL_UART_Transmit_DMA+0xc4>
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e880:	68ba      	ldr	r2, [r7, #8]
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	88fa      	ldrh	r2, [r7, #6]
 800e88a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	88fa      	ldrh	r2, [r7, #6]
 800e890:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2200      	movs	r2, #0
 800e896:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2221      	movs	r2, #33	; 0x21
 800e89c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a4:	4a19      	ldr	r2, [pc, #100]	; (800e90c <HAL_UART_Transmit_DMA+0xcc>)
 800e8a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ac:	4a18      	ldr	r2, [pc, #96]	; (800e910 <HAL_UART_Transmit_DMA+0xd0>)
 800e8ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b4:	4a17      	ldr	r2, [pc, #92]	; (800e914 <HAL_UART_Transmit_DMA+0xd4>)
 800e8b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8bc:	2200      	movs	r2, #0
 800e8be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e8c0:	f107 0308 	add.w	r3, r7, #8
 800e8c4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	6819      	ldr	r1, [r3, #0]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	3304      	adds	r3, #4
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	88fb      	ldrh	r3, [r7, #6]
 800e8d8:	f7fd f82e 	bl	800b938 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e8e4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	695a      	ldr	r2, [r3, #20]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e8fc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e8fe:	2300      	movs	r3, #0
 800e900:	e000      	b.n	800e904 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e902:	2302      	movs	r3, #2
  }
}
 800e904:	4618      	mov	r0, r3
 800e906:	3718      	adds	r7, #24
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	0800eb55 	.word	0x0800eb55
 800e910:	0800eba7 	.word	0x0800eba7
 800e914:	0800ebc3 	.word	0x0800ebc3

0800e918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b088      	sub	sp, #32
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e938:	2300      	movs	r3, #0
 800e93a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e93c:	2300      	movs	r3, #0
 800e93e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	f003 030f 	and.w	r3, r3, #15
 800e946:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d10d      	bne.n	800e96a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	f003 0320 	and.w	r3, r3, #32
 800e954:	2b00      	cmp	r3, #0
 800e956:	d008      	beq.n	800e96a <HAL_UART_IRQHandler+0x52>
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	f003 0320 	and.w	r3, r3, #32
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d003      	beq.n	800e96a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 fa2d 	bl	800edc2 <UART_Receive_IT>
      return;
 800e968:	e0d1      	b.n	800eb0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 80b0 	beq.w	800ead2 <HAL_UART_IRQHandler+0x1ba>
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d105      	bne.n	800e988 <HAL_UART_IRQHandler+0x70>
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e982:	2b00      	cmp	r3, #0
 800e984:	f000 80a5 	beq.w	800ead2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00a      	beq.n	800e9a8 <HAL_UART_IRQHandler+0x90>
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d005      	beq.n	800e9a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9a0:	f043 0201 	orr.w	r2, r3, #1
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	f003 0304 	and.w	r3, r3, #4
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00a      	beq.n	800e9c8 <HAL_UART_IRQHandler+0xb0>
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	f003 0301 	and.w	r3, r3, #1
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d005      	beq.n	800e9c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c0:	f043 0202 	orr.w	r2, r3, #2
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	f003 0302 	and.w	r3, r3, #2
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00a      	beq.n	800e9e8 <HAL_UART_IRQHandler+0xd0>
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	f003 0301 	and.w	r3, r3, #1
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d005      	beq.n	800e9e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e0:	f043 0204 	orr.w	r2, r3, #4
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	f003 0308 	and.w	r3, r3, #8
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00f      	beq.n	800ea12 <HAL_UART_IRQHandler+0xfa>
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	f003 0320 	and.w	r3, r3, #32
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d104      	bne.n	800ea06 <HAL_UART_IRQHandler+0xee>
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d005      	beq.n	800ea12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0a:	f043 0208 	orr.w	r2, r3, #8
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d078      	beq.n	800eb0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	f003 0320 	and.w	r3, r3, #32
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d007      	beq.n	800ea34 <HAL_UART_IRQHandler+0x11c>
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	f003 0320 	and.w	r3, r3, #32
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d002      	beq.n	800ea34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f9c7 	bl	800edc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	695b      	ldr	r3, [r3, #20]
 800ea3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea3e:	2b40      	cmp	r3, #64	; 0x40
 800ea40:	bf0c      	ite	eq
 800ea42:	2301      	moveq	r3, #1
 800ea44:	2300      	movne	r3, #0
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea4e:	f003 0308 	and.w	r3, r3, #8
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d102      	bne.n	800ea5c <HAL_UART_IRQHandler+0x144>
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d031      	beq.n	800eac0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f910 	bl	800ec82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	695b      	ldr	r3, [r3, #20]
 800ea68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea6c:	2b40      	cmp	r3, #64	; 0x40
 800ea6e:	d123      	bne.n	800eab8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	695a      	ldr	r2, [r3, #20]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d013      	beq.n	800eab0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea8c:	4a21      	ldr	r2, [pc, #132]	; (800eb14 <HAL_UART_IRQHandler+0x1fc>)
 800ea8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fc ffa7 	bl	800b9e8 <HAL_DMA_Abort_IT>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d016      	beq.n	800eace <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eaaa:	4610      	mov	r0, r2
 800eaac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eaae:	e00e      	b.n	800eace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f845 	bl	800eb40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eab6:	e00a      	b.n	800eace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f841 	bl	800eb40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eabe:	e006      	b.n	800eace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f83d 	bl	800eb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800eacc:	e01e      	b.n	800eb0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eace:	bf00      	nop
    return;
 800ead0:	e01c      	b.n	800eb0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d008      	beq.n	800eaee <HAL_UART_IRQHandler+0x1d6>
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d003      	beq.n	800eaee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 f8fd 	bl	800ece6 <UART_Transmit_IT>
    return;
 800eaec:	e00f      	b.n	800eb0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00a      	beq.n	800eb0e <HAL_UART_IRQHandler+0x1f6>
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d005      	beq.n	800eb0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 f945 	bl	800ed92 <UART_EndTransmit_IT>
    return;
 800eb08:	bf00      	nop
 800eb0a:	e000      	b.n	800eb0e <HAL_UART_IRQHandler+0x1f6>
    return;
 800eb0c:	bf00      	nop
  }
}
 800eb0e:	3720      	adds	r7, #32
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	0800ecbf 	.word	0x0800ecbf

0800eb18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800eb20:	bf00      	nop
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800eb34:	bf00      	nop
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800eb48:	bf00      	nop
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb60:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d113      	bne.n	800eb98 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	695a      	ldr	r2, [r3, #20]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb84:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	68da      	ldr	r2, [r3, #12]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb94:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb96:	e002      	b.n	800eb9e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f7fc fc87 	bl	800b4ac <HAL_UART_TxCpltCallback>
}
 800eb9e:	bf00      	nop
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f7ff ffaf 	bl	800eb18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebba:	bf00      	nop
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	695b      	ldr	r3, [r3, #20]
 800ebda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebde:	2b80      	cmp	r3, #128	; 0x80
 800ebe0:	bf0c      	ite	eq
 800ebe2:	2301      	moveq	r3, #1
 800ebe4:	2300      	movne	r3, #0
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b21      	cmp	r3, #33	; 0x21
 800ebf4:	d108      	bne.n	800ec08 <UART_DMAError+0x46>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d005      	beq.n	800ec08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ec02:	68b8      	ldr	r0, [r7, #8]
 800ec04:	f000 f827 	bl	800ec56 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	695b      	ldr	r3, [r3, #20]
 800ec0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec12:	2b40      	cmp	r3, #64	; 0x40
 800ec14:	bf0c      	ite	eq
 800ec16:	2301      	moveq	r3, #1
 800ec18:	2300      	movne	r3, #0
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b22      	cmp	r3, #34	; 0x22
 800ec28:	d108      	bne.n	800ec3c <UART_DMAError+0x7a>
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d005      	beq.n	800ec3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	2200      	movs	r2, #0
 800ec34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ec36:	68b8      	ldr	r0, [r7, #8]
 800ec38:	f000 f823 	bl	800ec82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec40:	f043 0210 	orr.w	r2, r3, #16
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec48:	68b8      	ldr	r0, [r7, #8]
 800ec4a:	f7ff ff79 	bl	800eb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec4e:	bf00      	nop
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ec56:	b480      	push	{r7}
 800ec58:	b083      	sub	sp, #12
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68da      	ldr	r2, [r3, #12]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ec6c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2220      	movs	r2, #32
 800ec72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ec76:	bf00      	nop
 800ec78:	370c      	adds	r7, #12
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr

0800ec82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec82:	b480      	push	{r7}
 800ec84:	b083      	sub	sp, #12
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68da      	ldr	r2, [r3, #12]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ec98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	695a      	ldr	r2, [r3, #20]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f022 0201 	bic.w	r2, r2, #1
 800eca8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2220      	movs	r2, #32
 800ecae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ecb2:	bf00      	nop
 800ecb4:	370c      	adds	r7, #12
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr

0800ecbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b084      	sub	sp, #16
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f7ff ff31 	bl	800eb40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecde:	bf00      	nop
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ece6:	b480      	push	{r7}
 800ece8:	b085      	sub	sp, #20
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	2b21      	cmp	r3, #33	; 0x21
 800ecf8:	d144      	bne.n	800ed84 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	689b      	ldr	r3, [r3, #8]
 800ecfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed02:	d11a      	bne.n	800ed3a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a1b      	ldr	r3, [r3, #32]
 800ed08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed18:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	691b      	ldr	r3, [r3, #16]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d105      	bne.n	800ed2e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a1b      	ldr	r3, [r3, #32]
 800ed26:	1c9a      	adds	r2, r3, #2
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	621a      	str	r2, [r3, #32]
 800ed2c:	e00e      	b.n	800ed4c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	1c5a      	adds	r2, r3, #1
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	621a      	str	r2, [r3, #32]
 800ed38:	e008      	b.n	800ed4c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a1b      	ldr	r3, [r3, #32]
 800ed3e:	1c59      	adds	r1, r3, #1
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	6211      	str	r1, [r2, #32]
 800ed44:	781a      	ldrb	r2, [r3, #0]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	3b01      	subs	r3, #1
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10f      	bne.n	800ed80 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	68da      	ldr	r2, [r3, #12]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	68da      	ldr	r2, [r3, #12]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	e000      	b.n	800ed86 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ed84:	2302      	movs	r3, #2
  }
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3714      	adds	r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr

0800ed92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b082      	sub	sp, #8
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	68da      	ldr	r2, [r3, #12]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eda8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2220      	movs	r2, #32
 800edae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7fc fb7a 	bl	800b4ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b084      	sub	sp, #16
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	2b22      	cmp	r3, #34	; 0x22
 800edd4:	d171      	bne.n	800eeba <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edde:	d123      	bne.n	800ee28 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10e      	bne.n	800ee0c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee04:	1c9a      	adds	r2, r3, #2
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	629a      	str	r2, [r3, #40]	; 0x28
 800ee0a:	e029      	b.n	800ee60 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	629a      	str	r2, [r3, #40]	; 0x28
 800ee26:	e01b      	b.n	800ee60 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10a      	bne.n	800ee46 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	6858      	ldr	r0, [r3, #4]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee3a:	1c59      	adds	r1, r3, #1
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	6291      	str	r1, [r2, #40]	; 0x28
 800ee40:	b2c2      	uxtb	r2, r0
 800ee42:	701a      	strb	r2, [r3, #0]
 800ee44:	e00c      	b.n	800ee60 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	b2da      	uxtb	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee52:	1c58      	adds	r0, r3, #1
 800ee54:	6879      	ldr	r1, [r7, #4]
 800ee56:	6288      	str	r0, [r1, #40]	; 0x28
 800ee58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee5c:	b2d2      	uxtb	r2, r2
 800ee5e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	3b01      	subs	r3, #1
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d120      	bne.n	800eeb6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68da      	ldr	r2, [r3, #12]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f022 0220 	bic.w	r2, r2, #32
 800ee82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	68da      	ldr	r2, [r3, #12]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	695a      	ldr	r2, [r3, #20]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f022 0201 	bic.w	r2, r2, #1
 800eea2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2220      	movs	r2, #32
 800eea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff fe3d 	bl	800eb2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	e002      	b.n	800eebc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	e000      	b.n	800eebc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800eeba:	2302      	movs	r3, #2
  }
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3710      	adds	r7, #16
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec8:	b085      	sub	sp, #20
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	68da      	ldr	r2, [r3, #12]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	430a      	orrs	r2, r1
 800eee2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	689a      	ldr	r2, [r3, #8]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	691b      	ldr	r3, [r3, #16]
 800eeec:	431a      	orrs	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	695b      	ldr	r3, [r3, #20]
 800eef2:	431a      	orrs	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	69db      	ldr	r3, [r3, #28]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ef06:	f023 030c 	bic.w	r3, r3, #12
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	6812      	ldr	r2, [r2, #0]
 800ef0e:	68f9      	ldr	r1, [r7, #12]
 800ef10:	430b      	orrs	r3, r1
 800ef12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	695b      	ldr	r3, [r3, #20]
 800ef1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	699a      	ldr	r2, [r3, #24]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	430a      	orrs	r2, r1
 800ef28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	69db      	ldr	r3, [r3, #28]
 800ef2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef32:	f040 818b 	bne.w	800f24c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4ac1      	ldr	r2, [pc, #772]	; (800f240 <UART_SetConfig+0x37c>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d005      	beq.n	800ef4c <UART_SetConfig+0x88>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4abf      	ldr	r2, [pc, #764]	; (800f244 <UART_SetConfig+0x380>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	f040 80bd 	bne.w	800f0c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ef4c:	f7fe ffc0 	bl	800ded0 <HAL_RCC_GetPCLK2Freq>
 800ef50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	461d      	mov	r5, r3
 800ef56:	f04f 0600 	mov.w	r6, #0
 800ef5a:	46a8      	mov	r8, r5
 800ef5c:	46b1      	mov	r9, r6
 800ef5e:	eb18 0308 	adds.w	r3, r8, r8
 800ef62:	eb49 0409 	adc.w	r4, r9, r9
 800ef66:	4698      	mov	r8, r3
 800ef68:	46a1      	mov	r9, r4
 800ef6a:	eb18 0805 	adds.w	r8, r8, r5
 800ef6e:	eb49 0906 	adc.w	r9, r9, r6
 800ef72:	f04f 0100 	mov.w	r1, #0
 800ef76:	f04f 0200 	mov.w	r2, #0
 800ef7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ef82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ef86:	4688      	mov	r8, r1
 800ef88:	4691      	mov	r9, r2
 800ef8a:	eb18 0005 	adds.w	r0, r8, r5
 800ef8e:	eb49 0106 	adc.w	r1, r9, r6
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	461d      	mov	r5, r3
 800ef98:	f04f 0600 	mov.w	r6, #0
 800ef9c:	196b      	adds	r3, r5, r5
 800ef9e:	eb46 0406 	adc.w	r4, r6, r6
 800efa2:	461a      	mov	r2, r3
 800efa4:	4623      	mov	r3, r4
 800efa6:	f7f1 fe6f 	bl	8000c88 <__aeabi_uldivmod>
 800efaa:	4603      	mov	r3, r0
 800efac:	460c      	mov	r4, r1
 800efae:	461a      	mov	r2, r3
 800efb0:	4ba5      	ldr	r3, [pc, #660]	; (800f248 <UART_SetConfig+0x384>)
 800efb2:	fba3 2302 	umull	r2, r3, r3, r2
 800efb6:	095b      	lsrs	r3, r3, #5
 800efb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	461d      	mov	r5, r3
 800efc0:	f04f 0600 	mov.w	r6, #0
 800efc4:	46a9      	mov	r9, r5
 800efc6:	46b2      	mov	sl, r6
 800efc8:	eb19 0309 	adds.w	r3, r9, r9
 800efcc:	eb4a 040a 	adc.w	r4, sl, sl
 800efd0:	4699      	mov	r9, r3
 800efd2:	46a2      	mov	sl, r4
 800efd4:	eb19 0905 	adds.w	r9, r9, r5
 800efd8:	eb4a 0a06 	adc.w	sl, sl, r6
 800efdc:	f04f 0100 	mov.w	r1, #0
 800efe0:	f04f 0200 	mov.w	r2, #0
 800efe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eff0:	4689      	mov	r9, r1
 800eff2:	4692      	mov	sl, r2
 800eff4:	eb19 0005 	adds.w	r0, r9, r5
 800eff8:	eb4a 0106 	adc.w	r1, sl, r6
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	461d      	mov	r5, r3
 800f002:	f04f 0600 	mov.w	r6, #0
 800f006:	196b      	adds	r3, r5, r5
 800f008:	eb46 0406 	adc.w	r4, r6, r6
 800f00c:	461a      	mov	r2, r3
 800f00e:	4623      	mov	r3, r4
 800f010:	f7f1 fe3a 	bl	8000c88 <__aeabi_uldivmod>
 800f014:	4603      	mov	r3, r0
 800f016:	460c      	mov	r4, r1
 800f018:	461a      	mov	r2, r3
 800f01a:	4b8b      	ldr	r3, [pc, #556]	; (800f248 <UART_SetConfig+0x384>)
 800f01c:	fba3 1302 	umull	r1, r3, r3, r2
 800f020:	095b      	lsrs	r3, r3, #5
 800f022:	2164      	movs	r1, #100	; 0x64
 800f024:	fb01 f303 	mul.w	r3, r1, r3
 800f028:	1ad3      	subs	r3, r2, r3
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	3332      	adds	r3, #50	; 0x32
 800f02e:	4a86      	ldr	r2, [pc, #536]	; (800f248 <UART_SetConfig+0x384>)
 800f030:	fba2 2303 	umull	r2, r3, r2, r3
 800f034:	095b      	lsrs	r3, r3, #5
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f03c:	4498      	add	r8, r3
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	461d      	mov	r5, r3
 800f042:	f04f 0600 	mov.w	r6, #0
 800f046:	46a9      	mov	r9, r5
 800f048:	46b2      	mov	sl, r6
 800f04a:	eb19 0309 	adds.w	r3, r9, r9
 800f04e:	eb4a 040a 	adc.w	r4, sl, sl
 800f052:	4699      	mov	r9, r3
 800f054:	46a2      	mov	sl, r4
 800f056:	eb19 0905 	adds.w	r9, r9, r5
 800f05a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f05e:	f04f 0100 	mov.w	r1, #0
 800f062:	f04f 0200 	mov.w	r2, #0
 800f066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f06a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f06e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f072:	4689      	mov	r9, r1
 800f074:	4692      	mov	sl, r2
 800f076:	eb19 0005 	adds.w	r0, r9, r5
 800f07a:	eb4a 0106 	adc.w	r1, sl, r6
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	461d      	mov	r5, r3
 800f084:	f04f 0600 	mov.w	r6, #0
 800f088:	196b      	adds	r3, r5, r5
 800f08a:	eb46 0406 	adc.w	r4, r6, r6
 800f08e:	461a      	mov	r2, r3
 800f090:	4623      	mov	r3, r4
 800f092:	f7f1 fdf9 	bl	8000c88 <__aeabi_uldivmod>
 800f096:	4603      	mov	r3, r0
 800f098:	460c      	mov	r4, r1
 800f09a:	461a      	mov	r2, r3
 800f09c:	4b6a      	ldr	r3, [pc, #424]	; (800f248 <UART_SetConfig+0x384>)
 800f09e:	fba3 1302 	umull	r1, r3, r3, r2
 800f0a2:	095b      	lsrs	r3, r3, #5
 800f0a4:	2164      	movs	r1, #100	; 0x64
 800f0a6:	fb01 f303 	mul.w	r3, r1, r3
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	00db      	lsls	r3, r3, #3
 800f0ae:	3332      	adds	r3, #50	; 0x32
 800f0b0:	4a65      	ldr	r2, [pc, #404]	; (800f248 <UART_SetConfig+0x384>)
 800f0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b6:	095b      	lsrs	r3, r3, #5
 800f0b8:	f003 0207 	and.w	r2, r3, #7
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4442      	add	r2, r8
 800f0c2:	609a      	str	r2, [r3, #8]
 800f0c4:	e26f      	b.n	800f5a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f0c6:	f7fe feef 	bl	800dea8 <HAL_RCC_GetPCLK1Freq>
 800f0ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	461d      	mov	r5, r3
 800f0d0:	f04f 0600 	mov.w	r6, #0
 800f0d4:	46a8      	mov	r8, r5
 800f0d6:	46b1      	mov	r9, r6
 800f0d8:	eb18 0308 	adds.w	r3, r8, r8
 800f0dc:	eb49 0409 	adc.w	r4, r9, r9
 800f0e0:	4698      	mov	r8, r3
 800f0e2:	46a1      	mov	r9, r4
 800f0e4:	eb18 0805 	adds.w	r8, r8, r5
 800f0e8:	eb49 0906 	adc.w	r9, r9, r6
 800f0ec:	f04f 0100 	mov.w	r1, #0
 800f0f0:	f04f 0200 	mov.w	r2, #0
 800f0f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f0f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f0fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f100:	4688      	mov	r8, r1
 800f102:	4691      	mov	r9, r2
 800f104:	eb18 0005 	adds.w	r0, r8, r5
 800f108:	eb49 0106 	adc.w	r1, r9, r6
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	461d      	mov	r5, r3
 800f112:	f04f 0600 	mov.w	r6, #0
 800f116:	196b      	adds	r3, r5, r5
 800f118:	eb46 0406 	adc.w	r4, r6, r6
 800f11c:	461a      	mov	r2, r3
 800f11e:	4623      	mov	r3, r4
 800f120:	f7f1 fdb2 	bl	8000c88 <__aeabi_uldivmod>
 800f124:	4603      	mov	r3, r0
 800f126:	460c      	mov	r4, r1
 800f128:	461a      	mov	r2, r3
 800f12a:	4b47      	ldr	r3, [pc, #284]	; (800f248 <UART_SetConfig+0x384>)
 800f12c:	fba3 2302 	umull	r2, r3, r3, r2
 800f130:	095b      	lsrs	r3, r3, #5
 800f132:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	461d      	mov	r5, r3
 800f13a:	f04f 0600 	mov.w	r6, #0
 800f13e:	46a9      	mov	r9, r5
 800f140:	46b2      	mov	sl, r6
 800f142:	eb19 0309 	adds.w	r3, r9, r9
 800f146:	eb4a 040a 	adc.w	r4, sl, sl
 800f14a:	4699      	mov	r9, r3
 800f14c:	46a2      	mov	sl, r4
 800f14e:	eb19 0905 	adds.w	r9, r9, r5
 800f152:	eb4a 0a06 	adc.w	sl, sl, r6
 800f156:	f04f 0100 	mov.w	r1, #0
 800f15a:	f04f 0200 	mov.w	r2, #0
 800f15e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f16a:	4689      	mov	r9, r1
 800f16c:	4692      	mov	sl, r2
 800f16e:	eb19 0005 	adds.w	r0, r9, r5
 800f172:	eb4a 0106 	adc.w	r1, sl, r6
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	461d      	mov	r5, r3
 800f17c:	f04f 0600 	mov.w	r6, #0
 800f180:	196b      	adds	r3, r5, r5
 800f182:	eb46 0406 	adc.w	r4, r6, r6
 800f186:	461a      	mov	r2, r3
 800f188:	4623      	mov	r3, r4
 800f18a:	f7f1 fd7d 	bl	8000c88 <__aeabi_uldivmod>
 800f18e:	4603      	mov	r3, r0
 800f190:	460c      	mov	r4, r1
 800f192:	461a      	mov	r2, r3
 800f194:	4b2c      	ldr	r3, [pc, #176]	; (800f248 <UART_SetConfig+0x384>)
 800f196:	fba3 1302 	umull	r1, r3, r3, r2
 800f19a:	095b      	lsrs	r3, r3, #5
 800f19c:	2164      	movs	r1, #100	; 0x64
 800f19e:	fb01 f303 	mul.w	r3, r1, r3
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	3332      	adds	r3, #50	; 0x32
 800f1a8:	4a27      	ldr	r2, [pc, #156]	; (800f248 <UART_SetConfig+0x384>)
 800f1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ae:	095b      	lsrs	r3, r3, #5
 800f1b0:	005b      	lsls	r3, r3, #1
 800f1b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f1b6:	4498      	add	r8, r3
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	461d      	mov	r5, r3
 800f1bc:	f04f 0600 	mov.w	r6, #0
 800f1c0:	46a9      	mov	r9, r5
 800f1c2:	46b2      	mov	sl, r6
 800f1c4:	eb19 0309 	adds.w	r3, r9, r9
 800f1c8:	eb4a 040a 	adc.w	r4, sl, sl
 800f1cc:	4699      	mov	r9, r3
 800f1ce:	46a2      	mov	sl, r4
 800f1d0:	eb19 0905 	adds.w	r9, r9, r5
 800f1d4:	eb4a 0a06 	adc.w	sl, sl, r6
 800f1d8:	f04f 0100 	mov.w	r1, #0
 800f1dc:	f04f 0200 	mov.w	r2, #0
 800f1e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1ec:	4689      	mov	r9, r1
 800f1ee:	4692      	mov	sl, r2
 800f1f0:	eb19 0005 	adds.w	r0, r9, r5
 800f1f4:	eb4a 0106 	adc.w	r1, sl, r6
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	461d      	mov	r5, r3
 800f1fe:	f04f 0600 	mov.w	r6, #0
 800f202:	196b      	adds	r3, r5, r5
 800f204:	eb46 0406 	adc.w	r4, r6, r6
 800f208:	461a      	mov	r2, r3
 800f20a:	4623      	mov	r3, r4
 800f20c:	f7f1 fd3c 	bl	8000c88 <__aeabi_uldivmod>
 800f210:	4603      	mov	r3, r0
 800f212:	460c      	mov	r4, r1
 800f214:	461a      	mov	r2, r3
 800f216:	4b0c      	ldr	r3, [pc, #48]	; (800f248 <UART_SetConfig+0x384>)
 800f218:	fba3 1302 	umull	r1, r3, r3, r2
 800f21c:	095b      	lsrs	r3, r3, #5
 800f21e:	2164      	movs	r1, #100	; 0x64
 800f220:	fb01 f303 	mul.w	r3, r1, r3
 800f224:	1ad3      	subs	r3, r2, r3
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	3332      	adds	r3, #50	; 0x32
 800f22a:	4a07      	ldr	r2, [pc, #28]	; (800f248 <UART_SetConfig+0x384>)
 800f22c:	fba2 2303 	umull	r2, r3, r2, r3
 800f230:	095b      	lsrs	r3, r3, #5
 800f232:	f003 0207 	and.w	r2, r3, #7
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4442      	add	r2, r8
 800f23c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f23e:	e1b2      	b.n	800f5a6 <UART_SetConfig+0x6e2>
 800f240:	40011000 	.word	0x40011000
 800f244:	40011400 	.word	0x40011400
 800f248:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4ad7      	ldr	r2, [pc, #860]	; (800f5b0 <UART_SetConfig+0x6ec>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d005      	beq.n	800f262 <UART_SetConfig+0x39e>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4ad6      	ldr	r2, [pc, #856]	; (800f5b4 <UART_SetConfig+0x6f0>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	f040 80d1 	bne.w	800f404 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f262:	f7fe fe35 	bl	800ded0 <HAL_RCC_GetPCLK2Freq>
 800f266:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	469a      	mov	sl, r3
 800f26c:	f04f 0b00 	mov.w	fp, #0
 800f270:	46d0      	mov	r8, sl
 800f272:	46d9      	mov	r9, fp
 800f274:	eb18 0308 	adds.w	r3, r8, r8
 800f278:	eb49 0409 	adc.w	r4, r9, r9
 800f27c:	4698      	mov	r8, r3
 800f27e:	46a1      	mov	r9, r4
 800f280:	eb18 080a 	adds.w	r8, r8, sl
 800f284:	eb49 090b 	adc.w	r9, r9, fp
 800f288:	f04f 0100 	mov.w	r1, #0
 800f28c:	f04f 0200 	mov.w	r2, #0
 800f290:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f294:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f298:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f29c:	4688      	mov	r8, r1
 800f29e:	4691      	mov	r9, r2
 800f2a0:	eb1a 0508 	adds.w	r5, sl, r8
 800f2a4:	eb4b 0609 	adc.w	r6, fp, r9
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	f04f 0200 	mov.w	r2, #0
 800f2b2:	f04f 0300 	mov.w	r3, #0
 800f2b6:	f04f 0400 	mov.w	r4, #0
 800f2ba:	0094      	lsls	r4, r2, #2
 800f2bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2c0:	008b      	lsls	r3, r1, #2
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	4623      	mov	r3, r4
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	f7f1 fcdd 	bl	8000c88 <__aeabi_uldivmod>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	460c      	mov	r4, r1
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	4bb8      	ldr	r3, [pc, #736]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f2d6:	fba3 2302 	umull	r2, r3, r3, r2
 800f2da:	095b      	lsrs	r3, r3, #5
 800f2dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	469b      	mov	fp, r3
 800f2e4:	f04f 0c00 	mov.w	ip, #0
 800f2e8:	46d9      	mov	r9, fp
 800f2ea:	46e2      	mov	sl, ip
 800f2ec:	eb19 0309 	adds.w	r3, r9, r9
 800f2f0:	eb4a 040a 	adc.w	r4, sl, sl
 800f2f4:	4699      	mov	r9, r3
 800f2f6:	46a2      	mov	sl, r4
 800f2f8:	eb19 090b 	adds.w	r9, r9, fp
 800f2fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f300:	f04f 0100 	mov.w	r1, #0
 800f304:	f04f 0200 	mov.w	r2, #0
 800f308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f30c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f310:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f314:	4689      	mov	r9, r1
 800f316:	4692      	mov	sl, r2
 800f318:	eb1b 0509 	adds.w	r5, fp, r9
 800f31c:	eb4c 060a 	adc.w	r6, ip, sl
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	4619      	mov	r1, r3
 800f326:	f04f 0200 	mov.w	r2, #0
 800f32a:	f04f 0300 	mov.w	r3, #0
 800f32e:	f04f 0400 	mov.w	r4, #0
 800f332:	0094      	lsls	r4, r2, #2
 800f334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f338:	008b      	lsls	r3, r1, #2
 800f33a:	461a      	mov	r2, r3
 800f33c:	4623      	mov	r3, r4
 800f33e:	4628      	mov	r0, r5
 800f340:	4631      	mov	r1, r6
 800f342:	f7f1 fca1 	bl	8000c88 <__aeabi_uldivmod>
 800f346:	4603      	mov	r3, r0
 800f348:	460c      	mov	r4, r1
 800f34a:	461a      	mov	r2, r3
 800f34c:	4b9a      	ldr	r3, [pc, #616]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f34e:	fba3 1302 	umull	r1, r3, r3, r2
 800f352:	095b      	lsrs	r3, r3, #5
 800f354:	2164      	movs	r1, #100	; 0x64
 800f356:	fb01 f303 	mul.w	r3, r1, r3
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	011b      	lsls	r3, r3, #4
 800f35e:	3332      	adds	r3, #50	; 0x32
 800f360:	4a95      	ldr	r2, [pc, #596]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f362:	fba2 2303 	umull	r2, r3, r2, r3
 800f366:	095b      	lsrs	r3, r3, #5
 800f368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f36c:	4498      	add	r8, r3
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	469b      	mov	fp, r3
 800f372:	f04f 0c00 	mov.w	ip, #0
 800f376:	46d9      	mov	r9, fp
 800f378:	46e2      	mov	sl, ip
 800f37a:	eb19 0309 	adds.w	r3, r9, r9
 800f37e:	eb4a 040a 	adc.w	r4, sl, sl
 800f382:	4699      	mov	r9, r3
 800f384:	46a2      	mov	sl, r4
 800f386:	eb19 090b 	adds.w	r9, r9, fp
 800f38a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f38e:	f04f 0100 	mov.w	r1, #0
 800f392:	f04f 0200 	mov.w	r2, #0
 800f396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f39a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f39e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f3a2:	4689      	mov	r9, r1
 800f3a4:	4692      	mov	sl, r2
 800f3a6:	eb1b 0509 	adds.w	r5, fp, r9
 800f3aa:	eb4c 060a 	adc.w	r6, ip, sl
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	f04f 0200 	mov.w	r2, #0
 800f3b8:	f04f 0300 	mov.w	r3, #0
 800f3bc:	f04f 0400 	mov.w	r4, #0
 800f3c0:	0094      	lsls	r4, r2, #2
 800f3c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3c6:	008b      	lsls	r3, r1, #2
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	4623      	mov	r3, r4
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	f7f1 fc5a 	bl	8000c88 <__aeabi_uldivmod>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	461a      	mov	r2, r3
 800f3da:	4b77      	ldr	r3, [pc, #476]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f3dc:	fba3 1302 	umull	r1, r3, r3, r2
 800f3e0:	095b      	lsrs	r3, r3, #5
 800f3e2:	2164      	movs	r1, #100	; 0x64
 800f3e4:	fb01 f303 	mul.w	r3, r1, r3
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	011b      	lsls	r3, r3, #4
 800f3ec:	3332      	adds	r3, #50	; 0x32
 800f3ee:	4a72      	ldr	r2, [pc, #456]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f3f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f3f4:	095b      	lsrs	r3, r3, #5
 800f3f6:	f003 020f 	and.w	r2, r3, #15
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4442      	add	r2, r8
 800f400:	609a      	str	r2, [r3, #8]
 800f402:	e0d0      	b.n	800f5a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f404:	f7fe fd50 	bl	800dea8 <HAL_RCC_GetPCLK1Freq>
 800f408:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	469a      	mov	sl, r3
 800f40e:	f04f 0b00 	mov.w	fp, #0
 800f412:	46d0      	mov	r8, sl
 800f414:	46d9      	mov	r9, fp
 800f416:	eb18 0308 	adds.w	r3, r8, r8
 800f41a:	eb49 0409 	adc.w	r4, r9, r9
 800f41e:	4698      	mov	r8, r3
 800f420:	46a1      	mov	r9, r4
 800f422:	eb18 080a 	adds.w	r8, r8, sl
 800f426:	eb49 090b 	adc.w	r9, r9, fp
 800f42a:	f04f 0100 	mov.w	r1, #0
 800f42e:	f04f 0200 	mov.w	r2, #0
 800f432:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f436:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f43a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f43e:	4688      	mov	r8, r1
 800f440:	4691      	mov	r9, r2
 800f442:	eb1a 0508 	adds.w	r5, sl, r8
 800f446:	eb4b 0609 	adc.w	r6, fp, r9
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	4619      	mov	r1, r3
 800f450:	f04f 0200 	mov.w	r2, #0
 800f454:	f04f 0300 	mov.w	r3, #0
 800f458:	f04f 0400 	mov.w	r4, #0
 800f45c:	0094      	lsls	r4, r2, #2
 800f45e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f462:	008b      	lsls	r3, r1, #2
 800f464:	461a      	mov	r2, r3
 800f466:	4623      	mov	r3, r4
 800f468:	4628      	mov	r0, r5
 800f46a:	4631      	mov	r1, r6
 800f46c:	f7f1 fc0c 	bl	8000c88 <__aeabi_uldivmod>
 800f470:	4603      	mov	r3, r0
 800f472:	460c      	mov	r4, r1
 800f474:	461a      	mov	r2, r3
 800f476:	4b50      	ldr	r3, [pc, #320]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f478:	fba3 2302 	umull	r2, r3, r3, r2
 800f47c:	095b      	lsrs	r3, r3, #5
 800f47e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	469b      	mov	fp, r3
 800f486:	f04f 0c00 	mov.w	ip, #0
 800f48a:	46d9      	mov	r9, fp
 800f48c:	46e2      	mov	sl, ip
 800f48e:	eb19 0309 	adds.w	r3, r9, r9
 800f492:	eb4a 040a 	adc.w	r4, sl, sl
 800f496:	4699      	mov	r9, r3
 800f498:	46a2      	mov	sl, r4
 800f49a:	eb19 090b 	adds.w	r9, r9, fp
 800f49e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f4a2:	f04f 0100 	mov.w	r1, #0
 800f4a6:	f04f 0200 	mov.w	r2, #0
 800f4aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f4ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f4b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f4b6:	4689      	mov	r9, r1
 800f4b8:	4692      	mov	sl, r2
 800f4ba:	eb1b 0509 	adds.w	r5, fp, r9
 800f4be:	eb4c 060a 	adc.w	r6, ip, sl
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	f04f 0200 	mov.w	r2, #0
 800f4cc:	f04f 0300 	mov.w	r3, #0
 800f4d0:	f04f 0400 	mov.w	r4, #0
 800f4d4:	0094      	lsls	r4, r2, #2
 800f4d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f4da:	008b      	lsls	r3, r1, #2
 800f4dc:	461a      	mov	r2, r3
 800f4de:	4623      	mov	r3, r4
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	f7f1 fbd0 	bl	8000c88 <__aeabi_uldivmod>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	4b32      	ldr	r3, [pc, #200]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f4f0:	fba3 1302 	umull	r1, r3, r3, r2
 800f4f4:	095b      	lsrs	r3, r3, #5
 800f4f6:	2164      	movs	r1, #100	; 0x64
 800f4f8:	fb01 f303 	mul.w	r3, r1, r3
 800f4fc:	1ad3      	subs	r3, r2, r3
 800f4fe:	011b      	lsls	r3, r3, #4
 800f500:	3332      	adds	r3, #50	; 0x32
 800f502:	4a2d      	ldr	r2, [pc, #180]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f504:	fba2 2303 	umull	r2, r3, r2, r3
 800f508:	095b      	lsrs	r3, r3, #5
 800f50a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f50e:	4498      	add	r8, r3
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	469b      	mov	fp, r3
 800f514:	f04f 0c00 	mov.w	ip, #0
 800f518:	46d9      	mov	r9, fp
 800f51a:	46e2      	mov	sl, ip
 800f51c:	eb19 0309 	adds.w	r3, r9, r9
 800f520:	eb4a 040a 	adc.w	r4, sl, sl
 800f524:	4699      	mov	r9, r3
 800f526:	46a2      	mov	sl, r4
 800f528:	eb19 090b 	adds.w	r9, r9, fp
 800f52c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f530:	f04f 0100 	mov.w	r1, #0
 800f534:	f04f 0200 	mov.w	r2, #0
 800f538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f53c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f544:	4689      	mov	r9, r1
 800f546:	4692      	mov	sl, r2
 800f548:	eb1b 0509 	adds.w	r5, fp, r9
 800f54c:	eb4c 060a 	adc.w	r6, ip, sl
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	4619      	mov	r1, r3
 800f556:	f04f 0200 	mov.w	r2, #0
 800f55a:	f04f 0300 	mov.w	r3, #0
 800f55e:	f04f 0400 	mov.w	r4, #0
 800f562:	0094      	lsls	r4, r2, #2
 800f564:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f568:	008b      	lsls	r3, r1, #2
 800f56a:	461a      	mov	r2, r3
 800f56c:	4623      	mov	r3, r4
 800f56e:	4628      	mov	r0, r5
 800f570:	4631      	mov	r1, r6
 800f572:	f7f1 fb89 	bl	8000c88 <__aeabi_uldivmod>
 800f576:	4603      	mov	r3, r0
 800f578:	460c      	mov	r4, r1
 800f57a:	461a      	mov	r2, r3
 800f57c:	4b0e      	ldr	r3, [pc, #56]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f57e:	fba3 1302 	umull	r1, r3, r3, r2
 800f582:	095b      	lsrs	r3, r3, #5
 800f584:	2164      	movs	r1, #100	; 0x64
 800f586:	fb01 f303 	mul.w	r3, r1, r3
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	011b      	lsls	r3, r3, #4
 800f58e:	3332      	adds	r3, #50	; 0x32
 800f590:	4a09      	ldr	r2, [pc, #36]	; (800f5b8 <UART_SetConfig+0x6f4>)
 800f592:	fba2 2303 	umull	r2, r3, r2, r3
 800f596:	095b      	lsrs	r3, r3, #5
 800f598:	f003 020f 	and.w	r2, r3, #15
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4442      	add	r2, r8
 800f5a2:	609a      	str	r2, [r3, #8]
}
 800f5a4:	e7ff      	b.n	800f5a6 <UART_SetConfig+0x6e2>
 800f5a6:	bf00      	nop
 800f5a8:	3714      	adds	r7, #20
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b0:	40011000 	.word	0x40011000
 800f5b4:	40011400 	.word	0x40011400
 800f5b8:	51eb851f 	.word	0x51eb851f

0800f5bc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5d4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	4b20      	ldr	r3, [pc, #128]	; (800f65c <FSMC_NORSRAM_Init+0xa0>)
 800f5da:	4013      	ands	r3, r2
 800f5dc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f5e6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f5ec:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f5f2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f5f8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f5fe:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f604:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f60a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f610:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f616:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f61c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f622:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f628:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f62a:	68fa      	ldr	r2, [r7, #12]
 800f62c:	4313      	orrs	r3, r2
 800f62e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	689b      	ldr	r3, [r3, #8]
 800f634:	2b08      	cmp	r3, #8
 800f636:	d103      	bne.n	800f640 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f63e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	68f9      	ldr	r1, [r7, #12]
 800f648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3714      	adds	r7, #20
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	fff00080 	.word	0xfff00080

0800f660 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f660:	b480      	push	{r7}
 800f662:	b087      	sub	sp, #28
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f66c:	2300      	movs	r3, #0
 800f66e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f682:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f68e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f696:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f69e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f6a8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	695b      	ldr	r3, [r3, #20]
 800f6ae:	3b02      	subs	r3, #2
 800f6b0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f6b2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	1c5a      	adds	r2, r3, #1
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6979      	ldr	r1, [r7, #20]
 800f6c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f6cc:	2300      	movs	r3, #0
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	371c      	adds	r7, #28
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr
	...

0800f6dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b087      	sub	sp, #28
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
 800f6e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6f4:	d122      	bne.n	800f73c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6fe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f700:	697a      	ldr	r2, [r7, #20]
 800f702:	4b15      	ldr	r3, [pc, #84]	; (800f758 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f704:	4013      	ands	r3, r2
 800f706:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f712:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f71a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f722:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f728:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	6979      	ldr	r1, [r7, #20]
 800f736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f73a:	e005      	b.n	800f748 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	371c      	adds	r7, #28
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	cff00000 	.word	0xcff00000

0800f75c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f75c:	b084      	sub	sp, #16
 800f75e:	b580      	push	{r7, lr}
 800f760:	b084      	sub	sp, #16
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
 800f766:	f107 001c 	add.w	r0, r7, #28
 800f76a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	2b01      	cmp	r3, #1
 800f772:	d122      	bne.n	800f7ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f79c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d105      	bne.n	800f7ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f001 fac6 	bl	8010d40 <USB_CoreReset>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	73fb      	strb	r3, [r7, #15]
 800f7b8:	e01a      	b.n	800f7f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f001 faba 	bl	8010d40 <USB_CoreReset>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f7d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d106      	bne.n	800f7e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	639a      	str	r2, [r3, #56]	; 0x38
 800f7e2:	e005      	b.n	800f7f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d10b      	bne.n	800f80e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	f043 0206 	orr.w	r2, r3, #6
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	f043 0220 	orr.w	r2, r3, #32
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f81a:	b004      	add	sp, #16
 800f81c:	4770      	bx	lr
	...

0800f820 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f820:	b480      	push	{r7}
 800f822:	b087      	sub	sp, #28
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	4613      	mov	r3, r2
 800f82c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f82e:	79fb      	ldrb	r3, [r7, #7]
 800f830:	2b02      	cmp	r3, #2
 800f832:	d165      	bne.n	800f900 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	4a41      	ldr	r2, [pc, #260]	; (800f93c <USB_SetTurnaroundTime+0x11c>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d906      	bls.n	800f84a <USB_SetTurnaroundTime+0x2a>
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	4a40      	ldr	r2, [pc, #256]	; (800f940 <USB_SetTurnaroundTime+0x120>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d802      	bhi.n	800f84a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f844:	230f      	movs	r3, #15
 800f846:	617b      	str	r3, [r7, #20]
 800f848:	e062      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	4a3c      	ldr	r2, [pc, #240]	; (800f940 <USB_SetTurnaroundTime+0x120>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d906      	bls.n	800f860 <USB_SetTurnaroundTime+0x40>
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	4a3b      	ldr	r2, [pc, #236]	; (800f944 <USB_SetTurnaroundTime+0x124>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d802      	bhi.n	800f860 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f85a:	230e      	movs	r3, #14
 800f85c:	617b      	str	r3, [r7, #20]
 800f85e:	e057      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	4a38      	ldr	r2, [pc, #224]	; (800f944 <USB_SetTurnaroundTime+0x124>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d906      	bls.n	800f876 <USB_SetTurnaroundTime+0x56>
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	4a37      	ldr	r2, [pc, #220]	; (800f948 <USB_SetTurnaroundTime+0x128>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d802      	bhi.n	800f876 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f870:	230d      	movs	r3, #13
 800f872:	617b      	str	r3, [r7, #20]
 800f874:	e04c      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	4a33      	ldr	r2, [pc, #204]	; (800f948 <USB_SetTurnaroundTime+0x128>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d906      	bls.n	800f88c <USB_SetTurnaroundTime+0x6c>
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	4a32      	ldr	r2, [pc, #200]	; (800f94c <USB_SetTurnaroundTime+0x12c>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d802      	bhi.n	800f88c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f886:	230c      	movs	r3, #12
 800f888:	617b      	str	r3, [r7, #20]
 800f88a:	e041      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	4a2f      	ldr	r2, [pc, #188]	; (800f94c <USB_SetTurnaroundTime+0x12c>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d906      	bls.n	800f8a2 <USB_SetTurnaroundTime+0x82>
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	4a2e      	ldr	r2, [pc, #184]	; (800f950 <USB_SetTurnaroundTime+0x130>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d802      	bhi.n	800f8a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f89c:	230b      	movs	r3, #11
 800f89e:	617b      	str	r3, [r7, #20]
 800f8a0:	e036      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	4a2a      	ldr	r2, [pc, #168]	; (800f950 <USB_SetTurnaroundTime+0x130>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d906      	bls.n	800f8b8 <USB_SetTurnaroundTime+0x98>
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	4a29      	ldr	r2, [pc, #164]	; (800f954 <USB_SetTurnaroundTime+0x134>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d802      	bhi.n	800f8b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f8b2:	230a      	movs	r3, #10
 800f8b4:	617b      	str	r3, [r7, #20]
 800f8b6:	e02b      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	4a26      	ldr	r2, [pc, #152]	; (800f954 <USB_SetTurnaroundTime+0x134>)
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d906      	bls.n	800f8ce <USB_SetTurnaroundTime+0xae>
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	4a25      	ldr	r2, [pc, #148]	; (800f958 <USB_SetTurnaroundTime+0x138>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d802      	bhi.n	800f8ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f8c8:	2309      	movs	r3, #9
 800f8ca:	617b      	str	r3, [r7, #20]
 800f8cc:	e020      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	4a21      	ldr	r2, [pc, #132]	; (800f958 <USB_SetTurnaroundTime+0x138>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d906      	bls.n	800f8e4 <USB_SetTurnaroundTime+0xc4>
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	4a20      	ldr	r2, [pc, #128]	; (800f95c <USB_SetTurnaroundTime+0x13c>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d802      	bhi.n	800f8e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f8de:	2308      	movs	r3, #8
 800f8e0:	617b      	str	r3, [r7, #20]
 800f8e2:	e015      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	4a1d      	ldr	r2, [pc, #116]	; (800f95c <USB_SetTurnaroundTime+0x13c>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d906      	bls.n	800f8fa <USB_SetTurnaroundTime+0xda>
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	4a1c      	ldr	r2, [pc, #112]	; (800f960 <USB_SetTurnaroundTime+0x140>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d802      	bhi.n	800f8fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f8f4:	2307      	movs	r3, #7
 800f8f6:	617b      	str	r3, [r7, #20]
 800f8f8:	e00a      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f8fa:	2306      	movs	r3, #6
 800f8fc:	617b      	str	r3, [r7, #20]
 800f8fe:	e007      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f900:	79fb      	ldrb	r3, [r7, #7]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d102      	bne.n	800f90c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f906:	2309      	movs	r3, #9
 800f908:	617b      	str	r3, [r7, #20]
 800f90a:	e001      	b.n	800f910 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f90c:	2309      	movs	r3, #9
 800f90e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	68da      	ldr	r2, [r3, #12]
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	029b      	lsls	r3, r3, #10
 800f924:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f928:	431a      	orrs	r2, r3
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	371c      	adds	r7, #28
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	00d8acbf 	.word	0x00d8acbf
 800f940:	00e4e1bf 	.word	0x00e4e1bf
 800f944:	00f423ff 	.word	0x00f423ff
 800f948:	0106737f 	.word	0x0106737f
 800f94c:	011a499f 	.word	0x011a499f
 800f950:	01312cff 	.word	0x01312cff
 800f954:	014ca43f 	.word	0x014ca43f
 800f958:	016e35ff 	.word	0x016e35ff
 800f95c:	01a6ab1f 	.word	0x01a6ab1f
 800f960:	01e847ff 	.word	0x01e847ff

0800f964 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f043 0201 	orr.w	r2, r3, #1
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	370c      	adds	r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr

0800f986 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f986:	b480      	push	{r7}
 800f988:	b083      	sub	sp, #12
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	689b      	ldr	r3, [r3, #8]
 800f992:	f023 0201 	bic.w	r2, r3, #1
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f99a:	2300      	movs	r3, #0
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f9c0:	78fb      	ldrb	r3, [r7, #3]
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d106      	bne.n	800f9d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	60da      	str	r2, [r3, #12]
 800f9d2:	e00b      	b.n	800f9ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f9d4:	78fb      	ldrb	r3, [r7, #3]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d106      	bne.n	800f9e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	60da      	str	r2, [r3, #12]
 800f9e6:	e001      	b.n	800f9ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e003      	b.n	800f9f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f9ec:	2032      	movs	r0, #50	; 0x32
 800f9ee:	f7fb fdf1 	bl	800b5d4 <HAL_Delay>

  return HAL_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3708      	adds	r7, #8
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b086      	sub	sp, #24
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
 800fa06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fa0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fa16:	2300      	movs	r3, #0
 800fa18:	613b      	str	r3, [r7, #16]
 800fa1a:	e009      	b.n	800fa30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	3340      	adds	r3, #64	; 0x40
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	2200      	movs	r2, #0
 800fa28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	613b      	str	r3, [r7, #16]
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	2b0e      	cmp	r3, #14
 800fa34:	d9f2      	bls.n	800fa1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fa36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d11c      	bne.n	800fa76 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	68fa      	ldr	r2, [r7, #12]
 800fa46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa4a:	f043 0302 	orr.w	r3, r3, #2
 800fa4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	639a      	str	r2, [r3, #56]	; 0x38
 800fa74:	e00b      	b.n	800fa8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa94:	461a      	mov	r2, r3
 800fa96:	2300      	movs	r3, #0
 800fa98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faa0:	4619      	mov	r1, r3
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faa8:	461a      	mov	r2, r3
 800faaa:	680b      	ldr	r3, [r1, #0]
 800faac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800faae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d10c      	bne.n	800face <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d104      	bne.n	800fac4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800faba:	2100      	movs	r1, #0
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 f949 	bl	800fd54 <USB_SetDevSpeed>
 800fac2:	e008      	b.n	800fad6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fac4:	2101      	movs	r1, #1
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f944 	bl	800fd54 <USB_SetDevSpeed>
 800facc:	e003      	b.n	800fad6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800face:	2103      	movs	r1, #3
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 f93f 	bl	800fd54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fad6:	2110      	movs	r1, #16
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 f8f3 	bl	800fcc4 <USB_FlushTxFifo>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800fae4:	2301      	movs	r3, #1
 800fae6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f911 	bl	800fd10 <USB_FlushRxFifo>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d001      	beq.n	800faf8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fafe:	461a      	mov	r2, r3
 800fb00:	2300      	movs	r3, #0
 800fb02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb16:	461a      	mov	r2, r3
 800fb18:	2300      	movs	r3, #0
 800fb1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	613b      	str	r3, [r7, #16]
 800fb20:	e043      	b.n	800fbaa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	015a      	lsls	r2, r3, #5
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	4413      	add	r3, r2
 800fb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb38:	d118      	bne.n	800fb6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10a      	bne.n	800fb56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	015a      	lsls	r2, r3, #5
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	4413      	add	r3, r2
 800fb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fb52:	6013      	str	r3, [r2, #0]
 800fb54:	e013      	b.n	800fb7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	015a      	lsls	r2, r3, #5
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb62:	461a      	mov	r2, r3
 800fb64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fb68:	6013      	str	r3, [r2, #0]
 800fb6a:	e008      	b.n	800fb7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	015a      	lsls	r2, r3, #5
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	4413      	add	r3, r2
 800fb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb78:	461a      	mov	r2, r3
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	015a      	lsls	r2, r3, #5
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	4413      	add	r3, r2
 800fb86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	015a      	lsls	r2, r3, #5
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	4413      	add	r3, r2
 800fb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fba2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	3301      	adds	r3, #1
 800fba8:	613b      	str	r3, [r7, #16]
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbac:	693a      	ldr	r2, [r7, #16]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d3b7      	bcc.n	800fb22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	613b      	str	r3, [r7, #16]
 800fbb6:	e043      	b.n	800fc40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	015a      	lsls	r2, r3, #5
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbce:	d118      	bne.n	800fc02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d10a      	bne.n	800fbec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	015a      	lsls	r2, r3, #5
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4413      	add	r3, r2
 800fbde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fbe8:	6013      	str	r3, [r2, #0]
 800fbea:	e013      	b.n	800fc14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	015a      	lsls	r2, r3, #5
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fbfe:	6013      	str	r3, [r2, #0]
 800fc00:	e008      	b.n	800fc14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	015a      	lsls	r2, r3, #5
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	4413      	add	r3, r2
 800fc0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc0e:	461a      	mov	r2, r3
 800fc10:	2300      	movs	r3, #0
 800fc12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	015a      	lsls	r2, r3, #5
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc20:	461a      	mov	r2, r3
 800fc22:	2300      	movs	r3, #0
 800fc24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	015a      	lsls	r2, r3, #5
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc32:	461a      	mov	r2, r3
 800fc34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	613b      	str	r3, [r7, #16]
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	693a      	ldr	r2, [r7, #16]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d3b7      	bcc.n	800fbb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fc68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d105      	bne.n	800fc7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	f043 0210 	orr.w	r2, r3, #16
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	699a      	ldr	r2, [r3, #24]
 800fc80:	4b0f      	ldr	r3, [pc, #60]	; (800fcc0 <USB_DevInit+0x2c4>)
 800fc82:	4313      	orrs	r3, r2
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d005      	beq.n	800fc9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	699b      	ldr	r3, [r3, #24]
 800fc92:	f043 0208 	orr.w	r2, r3, #8
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d107      	bne.n	800fcb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	699b      	ldr	r3, [r3, #24]
 800fca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fca8:	f043 0304 	orr.w	r3, r3, #4
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fcb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3718      	adds	r7, #24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fcbc:	b004      	add	sp, #16
 800fcbe:	4770      	bx	lr
 800fcc0:	803c3800 	.word	0x803c3800

0800fcc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	019b      	lsls	r3, r3, #6
 800fcd6:	f043 0220 	orr.w	r2, r3, #32
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	3301      	adds	r3, #1
 800fce2:	60fb      	str	r3, [r7, #12]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	4a09      	ldr	r2, [pc, #36]	; (800fd0c <USB_FlushTxFifo+0x48>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d901      	bls.n	800fcf0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fcec:	2303      	movs	r3, #3
 800fcee:	e006      	b.n	800fcfe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	691b      	ldr	r3, [r3, #16]
 800fcf4:	f003 0320 	and.w	r3, r3, #32
 800fcf8:	2b20      	cmp	r3, #32
 800fcfa:	d0f0      	beq.n	800fcde <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fcfc:	2300      	movs	r3, #0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	00030d40 	.word	0x00030d40

0800fd10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2210      	movs	r2, #16
 800fd20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	3301      	adds	r3, #1
 800fd26:	60fb      	str	r3, [r7, #12]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	4a09      	ldr	r2, [pc, #36]	; (800fd50 <USB_FlushRxFifo+0x40>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d901      	bls.n	800fd34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fd30:	2303      	movs	r3, #3
 800fd32:	e006      	b.n	800fd42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	f003 0310 	and.w	r3, r3, #16
 800fd3c:	2b10      	cmp	r3, #16
 800fd3e:	d0f0      	beq.n	800fd22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3714      	adds	r7, #20
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	00030d40 	.word	0x00030d40

0800fd54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	78fb      	ldrb	r3, [r7, #3]
 800fd6e:	68f9      	ldr	r1, [r7, #12]
 800fd70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd74:	4313      	orrs	r3, r2
 800fd76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3714      	adds	r7, #20
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr

0800fd86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fd86:	b480      	push	{r7}
 800fd88:	b087      	sub	sp, #28
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd98:	689b      	ldr	r3, [r3, #8]
 800fd9a:	f003 0306 	and.w	r3, r3, #6
 800fd9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d102      	bne.n	800fdac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fda6:	2300      	movs	r3, #0
 800fda8:	75fb      	strb	r3, [r7, #23]
 800fdaa:	e00a      	b.n	800fdc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d002      	beq.n	800fdb8 <USB_GetDevSpeed+0x32>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2b06      	cmp	r3, #6
 800fdb6:	d102      	bne.n	800fdbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fdb8:	2302      	movs	r3, #2
 800fdba:	75fb      	strb	r3, [r7, #23]
 800fdbc:	e001      	b.n	800fdc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fdbe:	230f      	movs	r3, #15
 800fdc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fdc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	371c      	adds	r7, #28
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	785b      	ldrb	r3, [r3, #1]
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d13a      	bne.n	800fe62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdf2:	69da      	ldr	r2, [r3, #28]
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	f003 030f 	and.w	r3, r3, #15
 800fdfc:	2101      	movs	r1, #1
 800fdfe:	fa01 f303 	lsl.w	r3, r1, r3
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	68f9      	ldr	r1, [r7, #12]
 800fe06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	015a      	lsls	r2, r3, #5
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	4413      	add	r3, r2
 800fe16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d155      	bne.n	800fed0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	015a      	lsls	r2, r3, #5
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	689b      	ldr	r3, [r3, #8]
 800fe36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	78db      	ldrb	r3, [r3, #3]
 800fe3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	059b      	lsls	r3, r3, #22
 800fe46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe48:	4313      	orrs	r3, r2
 800fe4a:	68ba      	ldr	r2, [r7, #8]
 800fe4c:	0151      	lsls	r1, r2, #5
 800fe4e:	68fa      	ldr	r2, [r7, #12]
 800fe50:	440a      	add	r2, r1
 800fe52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe5e:	6013      	str	r3, [r2, #0]
 800fe60:	e036      	b.n	800fed0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe68:	69da      	ldr	r2, [r3, #28]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	f003 030f 	and.w	r3, r3, #15
 800fe72:	2101      	movs	r1, #1
 800fe74:	fa01 f303 	lsl.w	r3, r1, r3
 800fe78:	041b      	lsls	r3, r3, #16
 800fe7a:	68f9      	ldr	r1, [r7, #12]
 800fe7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe80:	4313      	orrs	r3, r2
 800fe82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	015a      	lsls	r2, r3, #5
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d11a      	bne.n	800fed0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	015a      	lsls	r2, r3, #5
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	4413      	add	r3, r2
 800fea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	78db      	ldrb	r3, [r3, #3]
 800feb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800feb6:	430b      	orrs	r3, r1
 800feb8:	4313      	orrs	r3, r2
 800feba:	68ba      	ldr	r2, [r7, #8]
 800febc:	0151      	lsls	r1, r2, #5
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	440a      	add	r2, r1
 800fec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800feca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fece:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
	...

0800fee0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b085      	sub	sp, #20
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	785b      	ldrb	r3, [r3, #1]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d161      	bne.n	800ffc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	015a      	lsls	r2, r3, #5
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4413      	add	r3, r2
 800ff04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff12:	d11f      	bne.n	800ff54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	015a      	lsls	r2, r3, #5
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	68ba      	ldr	r2, [r7, #8]
 800ff24:	0151      	lsls	r1, r2, #5
 800ff26:	68fa      	ldr	r2, [r7, #12]
 800ff28:	440a      	add	r2, r1
 800ff2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ff32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	015a      	lsls	r2, r3, #5
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68ba      	ldr	r2, [r7, #8]
 800ff44:	0151      	lsls	r1, r2, #5
 800ff46:	68fa      	ldr	r2, [r7, #12]
 800ff48:	440a      	add	r2, r1
 800ff4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	f003 030f 	and.w	r3, r3, #15
 800ff64:	2101      	movs	r1, #1
 800ff66:	fa01 f303 	lsl.w	r3, r1, r3
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	43db      	mvns	r3, r3
 800ff6e:	68f9      	ldr	r1, [r7, #12]
 800ff70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff74:	4013      	ands	r3, r2
 800ff76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff7e:	69da      	ldr	r2, [r3, #28]
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	f003 030f 	and.w	r3, r3, #15
 800ff88:	2101      	movs	r1, #1
 800ff8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	43db      	mvns	r3, r3
 800ff92:	68f9      	ldr	r1, [r7, #12]
 800ff94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff98:	4013      	ands	r3, r2
 800ff9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	015a      	lsls	r2, r3, #5
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	0159      	lsls	r1, r3, #5
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	440b      	add	r3, r1
 800ffb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	4b35      	ldr	r3, [pc, #212]	; (8010090 <USB_DeactivateEndpoint+0x1b0>)
 800ffba:	4013      	ands	r3, r2
 800ffbc:	600b      	str	r3, [r1, #0]
 800ffbe:	e060      	b.n	8010082 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	015a      	lsls	r2, r3, #5
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	4413      	add	r3, r2
 800ffc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffd6:	d11f      	bne.n	8010018 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	015a      	lsls	r2, r3, #5
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	4413      	add	r3, r2
 800ffe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	0151      	lsls	r1, r2, #5
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	440a      	add	r2, r1
 800ffee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fff2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fff6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	015a      	lsls	r2, r3, #5
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	4413      	add	r3, r2
 8010000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	0151      	lsls	r1, r2, #5
 801000a:	68fa      	ldr	r2, [r7, #12]
 801000c:	440a      	add	r2, r1
 801000e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010016:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801001e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	f003 030f 	and.w	r3, r3, #15
 8010028:	2101      	movs	r1, #1
 801002a:	fa01 f303 	lsl.w	r3, r1, r3
 801002e:	041b      	lsls	r3, r3, #16
 8010030:	43db      	mvns	r3, r3
 8010032:	68f9      	ldr	r1, [r7, #12]
 8010034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010038:	4013      	ands	r3, r2
 801003a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010042:	69da      	ldr	r2, [r3, #28]
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	f003 030f 	and.w	r3, r3, #15
 801004c:	2101      	movs	r1, #1
 801004e:	fa01 f303 	lsl.w	r3, r1, r3
 8010052:	041b      	lsls	r3, r3, #16
 8010054:	43db      	mvns	r3, r3
 8010056:	68f9      	ldr	r1, [r7, #12]
 8010058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801005c:	4013      	ands	r3, r2
 801005e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	015a      	lsls	r2, r3, #5
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	4413      	add	r3, r2
 8010068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	0159      	lsls	r1, r3, #5
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	440b      	add	r3, r1
 8010076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801007a:	4619      	mov	r1, r3
 801007c:	4b05      	ldr	r3, [pc, #20]	; (8010094 <USB_DeactivateEndpoint+0x1b4>)
 801007e:	4013      	ands	r3, r2
 8010080:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010082:	2300      	movs	r3, #0
}
 8010084:	4618      	mov	r0, r3
 8010086:	3714      	adds	r7, #20
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr
 8010090:	ec337800 	.word	0xec337800
 8010094:	eff37800 	.word	0xeff37800

08010098 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08a      	sub	sp, #40	; 0x28
 801009c:	af02      	add	r7, sp, #8
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	4613      	mov	r3, r2
 80100a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	785b      	ldrb	r3, [r3, #1]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	f040 815c 	bne.w	8010372 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	695b      	ldr	r3, [r3, #20]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d132      	bne.n	8010128 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	015a      	lsls	r2, r3, #5
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	4413      	add	r3, r2
 80100ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	69ba      	ldr	r2, [r7, #24]
 80100d2:	0151      	lsls	r1, r2, #5
 80100d4:	69fa      	ldr	r2, [r7, #28]
 80100d6:	440a      	add	r2, r1
 80100d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80100e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80100e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	015a      	lsls	r2, r3, #5
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	4413      	add	r3, r2
 80100ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100f2:	691b      	ldr	r3, [r3, #16]
 80100f4:	69ba      	ldr	r2, [r7, #24]
 80100f6:	0151      	lsls	r1, r2, #5
 80100f8:	69fa      	ldr	r2, [r7, #28]
 80100fa:	440a      	add	r2, r1
 80100fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	015a      	lsls	r2, r3, #5
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	4413      	add	r3, r2
 801010e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010112:	691b      	ldr	r3, [r3, #16]
 8010114:	69ba      	ldr	r2, [r7, #24]
 8010116:	0151      	lsls	r1, r2, #5
 8010118:	69fa      	ldr	r2, [r7, #28]
 801011a:	440a      	add	r2, r1
 801011c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010120:	0cdb      	lsrs	r3, r3, #19
 8010122:	04db      	lsls	r3, r3, #19
 8010124:	6113      	str	r3, [r2, #16]
 8010126:	e074      	b.n	8010212 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	015a      	lsls	r2, r3, #5
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	4413      	add	r3, r2
 8010130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	69ba      	ldr	r2, [r7, #24]
 8010138:	0151      	lsls	r1, r2, #5
 801013a:	69fa      	ldr	r2, [r7, #28]
 801013c:	440a      	add	r2, r1
 801013e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010142:	0cdb      	lsrs	r3, r3, #19
 8010144:	04db      	lsls	r3, r3, #19
 8010146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	015a      	lsls	r2, r3, #5
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	4413      	add	r3, r2
 8010150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	69ba      	ldr	r2, [r7, #24]
 8010158:	0151      	lsls	r1, r2, #5
 801015a:	69fa      	ldr	r2, [r7, #28]
 801015c:	440a      	add	r2, r1
 801015e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010162:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010166:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801016a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	015a      	lsls	r2, r3, #5
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	4413      	add	r3, r2
 8010174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010178:	691a      	ldr	r2, [r3, #16]
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	6959      	ldr	r1, [r3, #20]
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	440b      	add	r3, r1
 8010184:	1e59      	subs	r1, r3, #1
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	689b      	ldr	r3, [r3, #8]
 801018a:	fbb1 f3f3 	udiv	r3, r1, r3
 801018e:	04d9      	lsls	r1, r3, #19
 8010190:	4b9d      	ldr	r3, [pc, #628]	; (8010408 <USB_EPStartXfer+0x370>)
 8010192:	400b      	ands	r3, r1
 8010194:	69b9      	ldr	r1, [r7, #24]
 8010196:	0148      	lsls	r0, r1, #5
 8010198:	69f9      	ldr	r1, [r7, #28]
 801019a:	4401      	add	r1, r0
 801019c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80101a0:	4313      	orrs	r3, r2
 80101a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80101a4:	69bb      	ldr	r3, [r7, #24]
 80101a6:	015a      	lsls	r2, r3, #5
 80101a8:	69fb      	ldr	r3, [r7, #28]
 80101aa:	4413      	add	r3, r2
 80101ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101b0:	691a      	ldr	r2, [r3, #16]
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	695b      	ldr	r3, [r3, #20]
 80101b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101ba:	69b9      	ldr	r1, [r7, #24]
 80101bc:	0148      	lsls	r0, r1, #5
 80101be:	69f9      	ldr	r1, [r7, #28]
 80101c0:	4401      	add	r1, r0
 80101c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80101c6:	4313      	orrs	r3, r2
 80101c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	78db      	ldrb	r3, [r3, #3]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d11f      	bne.n	8010212 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	015a      	lsls	r2, r3, #5
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	4413      	add	r3, r2
 80101da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	69ba      	ldr	r2, [r7, #24]
 80101e2:	0151      	lsls	r1, r2, #5
 80101e4:	69fa      	ldr	r2, [r7, #28]
 80101e6:	440a      	add	r2, r1
 80101e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80101f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	015a      	lsls	r2, r3, #5
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	4413      	add	r3, r2
 80101fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101fe:	691b      	ldr	r3, [r3, #16]
 8010200:	69ba      	ldr	r2, [r7, #24]
 8010202:	0151      	lsls	r1, r2, #5
 8010204:	69fa      	ldr	r2, [r7, #28]
 8010206:	440a      	add	r2, r1
 8010208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801020c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010210:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010212:	79fb      	ldrb	r3, [r7, #7]
 8010214:	2b01      	cmp	r3, #1
 8010216:	d14b      	bne.n	80102b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d009      	beq.n	8010234 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	015a      	lsls	r2, r3, #5
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	4413      	add	r3, r2
 8010228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022c:	461a      	mov	r2, r3
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	691b      	ldr	r3, [r3, #16]
 8010232:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	78db      	ldrb	r3, [r3, #3]
 8010238:	2b01      	cmp	r3, #1
 801023a:	d128      	bne.n	801028e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010242:	689b      	ldr	r3, [r3, #8]
 8010244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010248:	2b00      	cmp	r3, #0
 801024a:	d110      	bne.n	801026e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801024c:	69bb      	ldr	r3, [r7, #24]
 801024e:	015a      	lsls	r2, r3, #5
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	4413      	add	r3, r2
 8010254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	69ba      	ldr	r2, [r7, #24]
 801025c:	0151      	lsls	r1, r2, #5
 801025e:	69fa      	ldr	r2, [r7, #28]
 8010260:	440a      	add	r2, r1
 8010262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801026a:	6013      	str	r3, [r2, #0]
 801026c:	e00f      	b.n	801028e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	015a      	lsls	r2, r3, #5
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	4413      	add	r3, r2
 8010276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	69ba      	ldr	r2, [r7, #24]
 801027e:	0151      	lsls	r1, r2, #5
 8010280:	69fa      	ldr	r2, [r7, #28]
 8010282:	440a      	add	r2, r1
 8010284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801028c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	015a      	lsls	r2, r3, #5
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	4413      	add	r3, r2
 8010296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	69ba      	ldr	r2, [r7, #24]
 801029e:	0151      	lsls	r1, r2, #5
 80102a0:	69fa      	ldr	r2, [r7, #28]
 80102a2:	440a      	add	r2, r1
 80102a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80102ac:	6013      	str	r3, [r2, #0]
 80102ae:	e12f      	b.n	8010510 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	015a      	lsls	r2, r3, #5
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	4413      	add	r3, r2
 80102b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	69ba      	ldr	r2, [r7, #24]
 80102c0:	0151      	lsls	r1, r2, #5
 80102c2:	69fa      	ldr	r2, [r7, #28]
 80102c4:	440a      	add	r2, r1
 80102c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80102ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	78db      	ldrb	r3, [r3, #3]
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	d015      	beq.n	8010304 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	695b      	ldr	r3, [r3, #20]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f000 8117 	beq.w	8010510 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80102e2:	69fb      	ldr	r3, [r7, #28]
 80102e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	f003 030f 	and.w	r3, r3, #15
 80102f2:	2101      	movs	r1, #1
 80102f4:	fa01 f303 	lsl.w	r3, r1, r3
 80102f8:	69f9      	ldr	r1, [r7, #28]
 80102fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102fe:	4313      	orrs	r3, r2
 8010300:	634b      	str	r3, [r1, #52]	; 0x34
 8010302:	e105      	b.n	8010510 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010310:	2b00      	cmp	r3, #0
 8010312:	d110      	bne.n	8010336 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	015a      	lsls	r2, r3, #5
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	4413      	add	r3, r2
 801031c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	69ba      	ldr	r2, [r7, #24]
 8010324:	0151      	lsls	r1, r2, #5
 8010326:	69fa      	ldr	r2, [r7, #28]
 8010328:	440a      	add	r2, r1
 801032a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801032e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010332:	6013      	str	r3, [r2, #0]
 8010334:	e00f      	b.n	8010356 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	015a      	lsls	r2, r3, #5
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	4413      	add	r3, r2
 801033e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	69ba      	ldr	r2, [r7, #24]
 8010346:	0151      	lsls	r1, r2, #5
 8010348:	69fa      	ldr	r2, [r7, #28]
 801034a:	440a      	add	r2, r1
 801034c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010354:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	68d9      	ldr	r1, [r3, #12]
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	781a      	ldrb	r2, [r3, #0]
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	695b      	ldr	r3, [r3, #20]
 8010362:	b298      	uxth	r0, r3
 8010364:	79fb      	ldrb	r3, [r7, #7]
 8010366:	9300      	str	r3, [sp, #0]
 8010368:	4603      	mov	r3, r0
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f000 fa2b 	bl	80107c6 <USB_WritePacket>
 8010370:	e0ce      	b.n	8010510 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	015a      	lsls	r2, r3, #5
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	4413      	add	r3, r2
 801037a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801037e:	691b      	ldr	r3, [r3, #16]
 8010380:	69ba      	ldr	r2, [r7, #24]
 8010382:	0151      	lsls	r1, r2, #5
 8010384:	69fa      	ldr	r2, [r7, #28]
 8010386:	440a      	add	r2, r1
 8010388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801038c:	0cdb      	lsrs	r3, r3, #19
 801038e:	04db      	lsls	r3, r3, #19
 8010390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	015a      	lsls	r2, r3, #5
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	4413      	add	r3, r2
 801039a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801039e:	691b      	ldr	r3, [r3, #16]
 80103a0:	69ba      	ldr	r2, [r7, #24]
 80103a2:	0151      	lsls	r1, r2, #5
 80103a4:	69fa      	ldr	r2, [r7, #28]
 80103a6:	440a      	add	r2, r1
 80103a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80103b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80103b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	695b      	ldr	r3, [r3, #20]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d126      	bne.n	801040c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	015a      	lsls	r2, r3, #5
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	4413      	add	r3, r2
 80103c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103ca:	691a      	ldr	r2, [r3, #16]
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103d4:	69b9      	ldr	r1, [r7, #24]
 80103d6:	0148      	lsls	r0, r1, #5
 80103d8:	69f9      	ldr	r1, [r7, #28]
 80103da:	4401      	add	r1, r0
 80103dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80103e0:	4313      	orrs	r3, r2
 80103e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103e4:	69bb      	ldr	r3, [r7, #24]
 80103e6:	015a      	lsls	r2, r3, #5
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	4413      	add	r3, r2
 80103ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f0:	691b      	ldr	r3, [r3, #16]
 80103f2:	69ba      	ldr	r2, [r7, #24]
 80103f4:	0151      	lsls	r1, r2, #5
 80103f6:	69fa      	ldr	r2, [r7, #28]
 80103f8:	440a      	add	r2, r1
 80103fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010402:	6113      	str	r3, [r2, #16]
 8010404:	e036      	b.n	8010474 <USB_EPStartXfer+0x3dc>
 8010406:	bf00      	nop
 8010408:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	695a      	ldr	r2, [r3, #20]
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	4413      	add	r3, r2
 8010416:	1e5a      	subs	r2, r3, #1
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	689b      	ldr	r3, [r3, #8]
 801041c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010420:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	015a      	lsls	r2, r3, #5
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	4413      	add	r3, r2
 801042a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801042e:	691a      	ldr	r2, [r3, #16]
 8010430:	8afb      	ldrh	r3, [r7, #22]
 8010432:	04d9      	lsls	r1, r3, #19
 8010434:	4b39      	ldr	r3, [pc, #228]	; (801051c <USB_EPStartXfer+0x484>)
 8010436:	400b      	ands	r3, r1
 8010438:	69b9      	ldr	r1, [r7, #24]
 801043a:	0148      	lsls	r0, r1, #5
 801043c:	69f9      	ldr	r1, [r7, #28]
 801043e:	4401      	add	r1, r0
 8010440:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010444:	4313      	orrs	r3, r2
 8010446:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	015a      	lsls	r2, r3, #5
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	4413      	add	r3, r2
 8010450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010454:	691a      	ldr	r2, [r3, #16]
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	8af9      	ldrh	r1, [r7, #22]
 801045c:	fb01 f303 	mul.w	r3, r1, r3
 8010460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010464:	69b9      	ldr	r1, [r7, #24]
 8010466:	0148      	lsls	r0, r1, #5
 8010468:	69f9      	ldr	r1, [r7, #28]
 801046a:	4401      	add	r1, r0
 801046c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010470:	4313      	orrs	r3, r2
 8010472:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010474:	79fb      	ldrb	r3, [r7, #7]
 8010476:	2b01      	cmp	r3, #1
 8010478:	d10d      	bne.n	8010496 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d009      	beq.n	8010496 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	68d9      	ldr	r1, [r3, #12]
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	015a      	lsls	r2, r3, #5
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	4413      	add	r3, r2
 801048e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010492:	460a      	mov	r2, r1
 8010494:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	78db      	ldrb	r3, [r3, #3]
 801049a:	2b01      	cmp	r3, #1
 801049c:	d128      	bne.n	80104f0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d110      	bne.n	80104d0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	015a      	lsls	r2, r3, #5
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	4413      	add	r3, r2
 80104b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	69ba      	ldr	r2, [r7, #24]
 80104be:	0151      	lsls	r1, r2, #5
 80104c0:	69fa      	ldr	r2, [r7, #28]
 80104c2:	440a      	add	r2, r1
 80104c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80104cc:	6013      	str	r3, [r2, #0]
 80104ce:	e00f      	b.n	80104f0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	015a      	lsls	r2, r3, #5
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	4413      	add	r3, r2
 80104d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	69ba      	ldr	r2, [r7, #24]
 80104e0:	0151      	lsls	r1, r2, #5
 80104e2:	69fa      	ldr	r2, [r7, #28]
 80104e4:	440a      	add	r2, r1
 80104e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	015a      	lsls	r2, r3, #5
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	4413      	add	r3, r2
 80104f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	69ba      	ldr	r2, [r7, #24]
 8010500:	0151      	lsls	r1, r2, #5
 8010502:	69fa      	ldr	r2, [r7, #28]
 8010504:	440a      	add	r2, r1
 8010506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801050a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801050e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010510:	2300      	movs	r3, #0
}
 8010512:	4618      	mov	r0, r3
 8010514:	3720      	adds	r7, #32
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	1ff80000 	.word	0x1ff80000

08010520 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010520:	b480      	push	{r7}
 8010522:	b087      	sub	sp, #28
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	4613      	mov	r3, r2
 801052c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	785b      	ldrb	r3, [r3, #1]
 801053c:	2b01      	cmp	r3, #1
 801053e:	f040 80cd 	bne.w	80106dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	695b      	ldr	r3, [r3, #20]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d132      	bne.n	80105b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	015a      	lsls	r2, r3, #5
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	4413      	add	r3, r2
 8010552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010556:	691b      	ldr	r3, [r3, #16]
 8010558:	693a      	ldr	r2, [r7, #16]
 801055a:	0151      	lsls	r1, r2, #5
 801055c:	697a      	ldr	r2, [r7, #20]
 801055e:	440a      	add	r2, r1
 8010560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801056c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	015a      	lsls	r2, r3, #5
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	4413      	add	r3, r2
 8010576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801057a:	691b      	ldr	r3, [r3, #16]
 801057c:	693a      	ldr	r2, [r7, #16]
 801057e:	0151      	lsls	r1, r2, #5
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	440a      	add	r2, r1
 8010584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801058c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	015a      	lsls	r2, r3, #5
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	4413      	add	r3, r2
 8010596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801059a:	691b      	ldr	r3, [r3, #16]
 801059c:	693a      	ldr	r2, [r7, #16]
 801059e:	0151      	lsls	r1, r2, #5
 80105a0:	697a      	ldr	r2, [r7, #20]
 80105a2:	440a      	add	r2, r1
 80105a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105a8:	0cdb      	lsrs	r3, r3, #19
 80105aa:	04db      	lsls	r3, r3, #19
 80105ac:	6113      	str	r3, [r2, #16]
 80105ae:	e04e      	b.n	801064e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	015a      	lsls	r2, r3, #5
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	4413      	add	r3, r2
 80105b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105bc:	691b      	ldr	r3, [r3, #16]
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	0151      	lsls	r1, r2, #5
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	440a      	add	r2, r1
 80105c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105ca:	0cdb      	lsrs	r3, r3, #19
 80105cc:	04db      	lsls	r3, r3, #19
 80105ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	015a      	lsls	r2, r3, #5
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	4413      	add	r3, r2
 80105d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105dc:	691b      	ldr	r3, [r3, #16]
 80105de:	693a      	ldr	r2, [r7, #16]
 80105e0:	0151      	lsls	r1, r2, #5
 80105e2:	697a      	ldr	r2, [r7, #20]
 80105e4:	440a      	add	r2, r1
 80105e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80105ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80105f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	695a      	ldr	r2, [r3, #20]
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d903      	bls.n	8010608 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	689a      	ldr	r2, [r3, #8]
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	015a      	lsls	r2, r3, #5
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	4413      	add	r3, r2
 8010610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	693a      	ldr	r2, [r7, #16]
 8010618:	0151      	lsls	r1, r2, #5
 801061a:	697a      	ldr	r2, [r7, #20]
 801061c:	440a      	add	r2, r1
 801061e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010626:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	015a      	lsls	r2, r3, #5
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	4413      	add	r3, r2
 8010630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010634:	691a      	ldr	r2, [r3, #16]
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	695b      	ldr	r3, [r3, #20]
 801063a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801063e:	6939      	ldr	r1, [r7, #16]
 8010640:	0148      	lsls	r0, r1, #5
 8010642:	6979      	ldr	r1, [r7, #20]
 8010644:	4401      	add	r1, r0
 8010646:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801064a:	4313      	orrs	r3, r2
 801064c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801064e:	79fb      	ldrb	r3, [r7, #7]
 8010650:	2b01      	cmp	r3, #1
 8010652:	d11e      	bne.n	8010692 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	691b      	ldr	r3, [r3, #16]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d009      	beq.n	8010670 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	015a      	lsls	r2, r3, #5
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	4413      	add	r3, r2
 8010664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010668:	461a      	mov	r2, r3
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	015a      	lsls	r2, r3, #5
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	4413      	add	r3, r2
 8010678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	693a      	ldr	r2, [r7, #16]
 8010680:	0151      	lsls	r1, r2, #5
 8010682:	697a      	ldr	r2, [r7, #20]
 8010684:	440a      	add	r2, r1
 8010686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801068a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801068e:	6013      	str	r3, [r2, #0]
 8010690:	e092      	b.n	80107b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	015a      	lsls	r2, r3, #5
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	4413      	add	r3, r2
 801069a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	693a      	ldr	r2, [r7, #16]
 80106a2:	0151      	lsls	r1, r2, #5
 80106a4:	697a      	ldr	r2, [r7, #20]
 80106a6:	440a      	add	r2, r1
 80106a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80106b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	695b      	ldr	r3, [r3, #20]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d07e      	beq.n	80107b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	f003 030f 	and.w	r3, r3, #15
 80106ca:	2101      	movs	r1, #1
 80106cc:	fa01 f303 	lsl.w	r3, r1, r3
 80106d0:	6979      	ldr	r1, [r7, #20]
 80106d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106d6:	4313      	orrs	r3, r2
 80106d8:	634b      	str	r3, [r1, #52]	; 0x34
 80106da:	e06d      	b.n	80107b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	015a      	lsls	r2, r3, #5
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	4413      	add	r3, r2
 80106e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106e8:	691b      	ldr	r3, [r3, #16]
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	0151      	lsls	r1, r2, #5
 80106ee:	697a      	ldr	r2, [r7, #20]
 80106f0:	440a      	add	r2, r1
 80106f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106f6:	0cdb      	lsrs	r3, r3, #19
 80106f8:	04db      	lsls	r3, r3, #19
 80106fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	015a      	lsls	r2, r3, #5
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	4413      	add	r3, r2
 8010704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010708:	691b      	ldr	r3, [r3, #16]
 801070a:	693a      	ldr	r2, [r7, #16]
 801070c:	0151      	lsls	r1, r2, #5
 801070e:	697a      	ldr	r2, [r7, #20]
 8010710:	440a      	add	r2, r1
 8010712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010716:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801071a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801071e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	695b      	ldr	r3, [r3, #20]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d003      	beq.n	8010730 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	689a      	ldr	r2, [r3, #8]
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	015a      	lsls	r2, r3, #5
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	4413      	add	r3, r2
 8010738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	693a      	ldr	r2, [r7, #16]
 8010740:	0151      	lsls	r1, r2, #5
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	440a      	add	r2, r1
 8010746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801074a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801074e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	015a      	lsls	r2, r3, #5
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	4413      	add	r3, r2
 8010758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801075c:	691a      	ldr	r2, [r3, #16]
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	689b      	ldr	r3, [r3, #8]
 8010762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010766:	6939      	ldr	r1, [r7, #16]
 8010768:	0148      	lsls	r0, r1, #5
 801076a:	6979      	ldr	r1, [r7, #20]
 801076c:	4401      	add	r1, r0
 801076e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010772:	4313      	orrs	r3, r2
 8010774:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010776:	79fb      	ldrb	r3, [r7, #7]
 8010778:	2b01      	cmp	r3, #1
 801077a:	d10d      	bne.n	8010798 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d009      	beq.n	8010798 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	68d9      	ldr	r1, [r3, #12]
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	015a      	lsls	r2, r3, #5
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	4413      	add	r3, r2
 8010790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010794:	460a      	mov	r2, r1
 8010796:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	015a      	lsls	r2, r3, #5
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	4413      	add	r3, r2
 80107a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	693a      	ldr	r2, [r7, #16]
 80107a8:	0151      	lsls	r1, r2, #5
 80107aa:	697a      	ldr	r2, [r7, #20]
 80107ac:	440a      	add	r2, r1
 80107ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80107b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	371c      	adds	r7, #28
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr

080107c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80107c6:	b480      	push	{r7}
 80107c8:	b089      	sub	sp, #36	; 0x24
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	60f8      	str	r0, [r7, #12]
 80107ce:	60b9      	str	r1, [r7, #8]
 80107d0:	4611      	mov	r1, r2
 80107d2:	461a      	mov	r2, r3
 80107d4:	460b      	mov	r3, r1
 80107d6:	71fb      	strb	r3, [r7, #7]
 80107d8:	4613      	mov	r3, r2
 80107da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80107e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d11a      	bne.n	8010822 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80107ec:	88bb      	ldrh	r3, [r7, #4]
 80107ee:	3303      	adds	r3, #3
 80107f0:	089b      	lsrs	r3, r3, #2
 80107f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80107f4:	2300      	movs	r3, #0
 80107f6:	61bb      	str	r3, [r7, #24]
 80107f8:	e00f      	b.n	801081a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80107fa:	79fb      	ldrb	r3, [r7, #7]
 80107fc:	031a      	lsls	r2, r3, #12
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	4413      	add	r3, r2
 8010802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010806:	461a      	mov	r2, r3
 8010808:	69fb      	ldr	r3, [r7, #28]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	6013      	str	r3, [r2, #0]
      pSrc++;
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	3304      	adds	r3, #4
 8010812:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	3301      	adds	r3, #1
 8010818:	61bb      	str	r3, [r7, #24]
 801081a:	69ba      	ldr	r2, [r7, #24]
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	429a      	cmp	r2, r3
 8010820:	d3eb      	bcc.n	80107fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010822:	2300      	movs	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	3724      	adds	r7, #36	; 0x24
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010830:	b480      	push	{r7}
 8010832:	b089      	sub	sp, #36	; 0x24
 8010834:	af00      	add	r7, sp, #0
 8010836:	60f8      	str	r0, [r7, #12]
 8010838:	60b9      	str	r1, [r7, #8]
 801083a:	4613      	mov	r3, r2
 801083c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010846:	88fb      	ldrh	r3, [r7, #6]
 8010848:	3303      	adds	r3, #3
 801084a:	089b      	lsrs	r3, r3, #2
 801084c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801084e:	2300      	movs	r3, #0
 8010850:	61bb      	str	r3, [r7, #24]
 8010852:	e00b      	b.n	801086c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	3304      	adds	r3, #4
 8010864:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	3301      	adds	r3, #1
 801086a:	61bb      	str	r3, [r7, #24]
 801086c:	69ba      	ldr	r2, [r7, #24]
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	429a      	cmp	r2, r3
 8010872:	d3ef      	bcc.n	8010854 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010874:	69fb      	ldr	r3, [r7, #28]
}
 8010876:	4618      	mov	r0, r3
 8010878:	3724      	adds	r7, #36	; 0x24
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr

08010882 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010882:	b480      	push	{r7}
 8010884:	b085      	sub	sp, #20
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
 801088a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	785b      	ldrb	r3, [r3, #1]
 801089a:	2b01      	cmp	r3, #1
 801089c:	d12c      	bne.n	80108f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	015a      	lsls	r2, r3, #5
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	4413      	add	r3, r2
 80108a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	db12      	blt.n	80108d6 <USB_EPSetStall+0x54>
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00f      	beq.n	80108d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	015a      	lsls	r2, r3, #5
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	4413      	add	r3, r2
 80108be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	68ba      	ldr	r2, [r7, #8]
 80108c6:	0151      	lsls	r1, r2, #5
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	440a      	add	r2, r1
 80108cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80108d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	015a      	lsls	r2, r3, #5
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	4413      	add	r3, r2
 80108de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	0151      	lsls	r1, r2, #5
 80108e8:	68fa      	ldr	r2, [r7, #12]
 80108ea:	440a      	add	r2, r1
 80108ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80108f4:	6013      	str	r3, [r2, #0]
 80108f6:	e02b      	b.n	8010950 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	015a      	lsls	r2, r3, #5
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	4413      	add	r3, r2
 8010900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	db12      	blt.n	8010930 <USB_EPSetStall+0xae>
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00f      	beq.n	8010930 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	015a      	lsls	r2, r3, #5
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	4413      	add	r3, r2
 8010918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	0151      	lsls	r1, r2, #5
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	440a      	add	r2, r1
 8010926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801092a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801092e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	015a      	lsls	r2, r3, #5
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	4413      	add	r3, r2
 8010938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	68ba      	ldr	r2, [r7, #8]
 8010940:	0151      	lsls	r1, r2, #5
 8010942:	68fa      	ldr	r2, [r7, #12]
 8010944:	440a      	add	r2, r1
 8010946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801094a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801094e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3714      	adds	r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr

0801095e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801095e:	b480      	push	{r7}
 8010960:	b085      	sub	sp, #20
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
 8010966:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	785b      	ldrb	r3, [r3, #1]
 8010976:	2b01      	cmp	r3, #1
 8010978:	d128      	bne.n	80109cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	015a      	lsls	r2, r3, #5
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	4413      	add	r3, r2
 8010982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	68ba      	ldr	r2, [r7, #8]
 801098a:	0151      	lsls	r1, r2, #5
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	440a      	add	r2, r1
 8010990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010994:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010998:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	78db      	ldrb	r3, [r3, #3]
 801099e:	2b03      	cmp	r3, #3
 80109a0:	d003      	beq.n	80109aa <USB_EPClearStall+0x4c>
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	78db      	ldrb	r3, [r3, #3]
 80109a6:	2b02      	cmp	r3, #2
 80109a8:	d138      	bne.n	8010a1c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	015a      	lsls	r2, r3, #5
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	4413      	add	r3, r2
 80109b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	0151      	lsls	r1, r2, #5
 80109bc:	68fa      	ldr	r2, [r7, #12]
 80109be:	440a      	add	r2, r1
 80109c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80109c8:	6013      	str	r3, [r2, #0]
 80109ca:	e027      	b.n	8010a1c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	015a      	lsls	r2, r3, #5
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	4413      	add	r3, r2
 80109d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	68ba      	ldr	r2, [r7, #8]
 80109dc:	0151      	lsls	r1, r2, #5
 80109de:	68fa      	ldr	r2, [r7, #12]
 80109e0:	440a      	add	r2, r1
 80109e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80109ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	78db      	ldrb	r3, [r3, #3]
 80109f0:	2b03      	cmp	r3, #3
 80109f2:	d003      	beq.n	80109fc <USB_EPClearStall+0x9e>
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	78db      	ldrb	r3, [r3, #3]
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d10f      	bne.n	8010a1c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	015a      	lsls	r2, r3, #5
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	4413      	add	r3, r2
 8010a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68ba      	ldr	r2, [r7, #8]
 8010a0c:	0151      	lsls	r1, r2, #5
 8010a0e:	68fa      	ldr	r2, [r7, #12]
 8010a10:	440a      	add	r2, r1
 8010a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a1a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3714      	adds	r7, #20
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr

08010a2a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010a2a:	b480      	push	{r7}
 8010a2c:	b085      	sub	sp, #20
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	460b      	mov	r3, r1
 8010a34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	68fa      	ldr	r2, [r7, #12]
 8010a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010a4c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	78fb      	ldrb	r3, [r7, #3]
 8010a58:	011b      	lsls	r3, r3, #4
 8010a5a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010a5e:	68f9      	ldr	r1, [r7, #12]
 8010a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a64:	4313      	orrs	r3, r2
 8010a66:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010a68:	2300      	movs	r3, #0
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3714      	adds	r7, #20
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr

08010a76 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010a76:	b480      	push	{r7}
 8010a78:	b085      	sub	sp, #20
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	68fa      	ldr	r2, [r7, #12]
 8010a8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010a90:	f023 0303 	bic.w	r3, r3, #3
 8010a94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	68fa      	ldr	r2, [r7, #12]
 8010aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010aa4:	f023 0302 	bic.w	r3, r3, #2
 8010aa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3714      	adds	r7, #20
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b085      	sub	sp, #20
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ad2:	f023 0303 	bic.w	r3, r3, #3
 8010ad6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	68fa      	ldr	r2, [r7, #12]
 8010ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ae6:	f043 0302 	orr.w	r3, r3, #2
 8010aea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010aec:	2300      	movs	r3, #0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3714      	adds	r7, #20
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr

08010afa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010afa:	b480      	push	{r7}
 8010afc:	b085      	sub	sp, #20
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	695b      	ldr	r3, [r3, #20]
 8010b06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	4013      	ands	r3, r2
 8010b10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010b12:	68fb      	ldr	r3, [r7, #12]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3714      	adds	r7, #20
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr

08010b20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b20:	b480      	push	{r7}
 8010b22:	b085      	sub	sp, #20
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b32:	699b      	ldr	r3, [r3, #24]
 8010b34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b3c:	69db      	ldr	r3, [r3, #28]
 8010b3e:	68ba      	ldr	r2, [r7, #8]
 8010b40:	4013      	ands	r3, r2
 8010b42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	0c1b      	lsrs	r3, r3, #16
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3714      	adds	r7, #20
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b085      	sub	sp, #20
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b66:	699b      	ldr	r3, [r3, #24]
 8010b68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b70:	69db      	ldr	r3, [r3, #28]
 8010b72:	68ba      	ldr	r2, [r7, #8]
 8010b74:	4013      	ands	r3, r2
 8010b76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	b29b      	uxth	r3, r3
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3714      	adds	r7, #20
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	460b      	mov	r3, r1
 8010b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010b98:	78fb      	ldrb	r3, [r7, #3]
 8010b9a:	015a      	lsls	r2, r3, #5
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ba4:	689b      	ldr	r3, [r3, #8]
 8010ba6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bae:	695b      	ldr	r3, [r3, #20]
 8010bb0:	68ba      	ldr	r2, [r7, #8]
 8010bb2:	4013      	ands	r3, r2
 8010bb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010bb6:	68bb      	ldr	r3, [r7, #8]
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3714      	adds	r7, #20
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr

08010bc4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b087      	sub	sp, #28
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	460b      	mov	r3, r1
 8010bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bda:	691b      	ldr	r3, [r3, #16]
 8010bdc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010be8:	78fb      	ldrb	r3, [r7, #3]
 8010bea:	f003 030f 	and.w	r3, r3, #15
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8010bf4:	01db      	lsls	r3, r3, #7
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	693a      	ldr	r2, [r7, #16]
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010bfe:	78fb      	ldrb	r3, [r7, #3]
 8010c00:	015a      	lsls	r2, r3, #5
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	4413      	add	r3, r2
 8010c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c0a:	689b      	ldr	r3, [r3, #8]
 8010c0c:	693a      	ldr	r2, [r7, #16]
 8010c0e:	4013      	ands	r3, r2
 8010c10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010c12:	68bb      	ldr	r3, [r7, #8]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	371c      	adds	r7, #28
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	695b      	ldr	r3, [r3, #20]
 8010c2c:	f003 0301 	and.w	r3, r3, #1
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010c5a:	f023 0307 	bic.w	r3, r3, #7
 8010c5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3714      	adds	r7, #20
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr
	...

08010c84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b087      	sub	sp, #28
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	607a      	str	r2, [r7, #4]
 8010c90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	333c      	adds	r3, #60	; 0x3c
 8010c9a:	3304      	adds	r3, #4
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	4a26      	ldr	r2, [pc, #152]	; (8010d3c <USB_EP0_OutStart+0xb8>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d90a      	bls.n	8010cbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010cb8:	d101      	bne.n	8010cbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	e037      	b.n	8010d2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cd0:	691b      	ldr	r3, [r3, #16]
 8010cd2:	697a      	ldr	r2, [r7, #20]
 8010cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010cdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ce4:	691b      	ldr	r3, [r3, #16]
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cec:	f043 0318 	orr.w	r3, r3, #24
 8010cf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cf8:	691b      	ldr	r3, [r3, #16]
 8010cfa:	697a      	ldr	r2, [r7, #20]
 8010cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010d04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010d06:	7afb      	ldrb	r3, [r7, #11]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d10f      	bne.n	8010d2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d12:	461a      	mov	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	697a      	ldr	r2, [r7, #20]
 8010d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010d2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	371c      	adds	r7, #28
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	4f54300a 	.word	0x4f54300a

08010d40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b085      	sub	sp, #20
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	60fb      	str	r3, [r7, #12]
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	4a13      	ldr	r2, [pc, #76]	; (8010da4 <USB_CoreReset+0x64>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d901      	bls.n	8010d5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010d5a:	2303      	movs	r3, #3
 8010d5c:	e01b      	b.n	8010d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	daf2      	bge.n	8010d4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010d66:	2300      	movs	r3, #0
 8010d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	691b      	ldr	r3, [r3, #16]
 8010d6e:	f043 0201 	orr.w	r2, r3, #1
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	3301      	adds	r3, #1
 8010d7a:	60fb      	str	r3, [r7, #12]
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	4a09      	ldr	r2, [pc, #36]	; (8010da4 <USB_CoreReset+0x64>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d901      	bls.n	8010d88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010d84:	2303      	movs	r3, #3
 8010d86:	e006      	b.n	8010d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	691b      	ldr	r3, [r3, #16]
 8010d8c:	f003 0301 	and.w	r3, r3, #1
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d0f0      	beq.n	8010d76 <USB_CoreReset+0x36>

  return HAL_OK;
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3714      	adds	r7, #20
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da0:	4770      	bx	lr
 8010da2:	bf00      	nop
 8010da4:	00030d40 	.word	0x00030d40

08010da8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	460b      	mov	r3, r1
 8010db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010db4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010db8:	f004 ffd0 	bl	8015d5c <malloc>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d105      	bne.n	8010dd2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010dce:	2302      	movs	r3, #2
 8010dd0:	e066      	b.n	8010ea0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	68fa      	ldr	r2, [r7, #12]
 8010dd6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	7c1b      	ldrb	r3, [r3, #16]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d119      	bne.n	8010e16 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010de6:	2202      	movs	r2, #2
 8010de8:	2181      	movs	r1, #129	; 0x81
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f004 fe3d 	bl	8015a6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2201      	movs	r2, #1
 8010df4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f004 fe33 	bl	8015a6a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2201      	movs	r2, #1
 8010e08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2210      	movs	r2, #16
 8010e10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010e14:	e016      	b.n	8010e44 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010e16:	2340      	movs	r3, #64	; 0x40
 8010e18:	2202      	movs	r2, #2
 8010e1a:	2181      	movs	r1, #129	; 0x81
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f004 fe24 	bl	8015a6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2201      	movs	r2, #1
 8010e26:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010e28:	2340      	movs	r3, #64	; 0x40
 8010e2a:	2202      	movs	r2, #2
 8010e2c:	2101      	movs	r1, #1
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f004 fe1b 	bl	8015a6a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2201      	movs	r2, #1
 8010e38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2210      	movs	r2, #16
 8010e40:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010e44:	2308      	movs	r3, #8
 8010e46:	2203      	movs	r2, #3
 8010e48:	2182      	movs	r1, #130	; 0x82
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f004 fe0d 	bl	8015a6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2201      	movs	r2, #1
 8010e54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	2200      	movs	r2, #0
 8010e66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	7c1b      	ldrb	r3, [r3, #16]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d109      	bne.n	8010e8e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e84:	2101      	movs	r1, #1
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f004 fede 	bl	8015c48 <USBD_LL_PrepareReceive>
 8010e8c:	e007      	b.n	8010e9e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e94:	2340      	movs	r3, #64	; 0x40
 8010e96:	2101      	movs	r1, #1
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f004 fed5 	bl	8015c48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e9e:	2300      	movs	r3, #0
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3710      	adds	r7, #16
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b084      	sub	sp, #16
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010eb8:	2181      	movs	r1, #129	; 0x81
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f004 fdfb 	bl	8015ab6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010ec6:	2101      	movs	r1, #1
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f004 fdf4 	bl	8015ab6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010ed6:	2182      	movs	r1, #130	; 0x82
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f004 fdec 	bl	8015ab6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d00e      	beq.n	8010f16 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f004 ff2f 	bl	8015d6c <free>
    pdev->pClassData = NULL;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2200      	movs	r2, #0
 8010f12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3710      	adds	r7, #16
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b086      	sub	sp, #24
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f30:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010f32:	2300      	movs	r3, #0
 8010f34:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010f36:	2300      	movs	r3, #0
 8010f38:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d03a      	beq.n	8010fc0 <USBD_CDC_Setup+0xa0>
 8010f4a:	2b20      	cmp	r3, #32
 8010f4c:	f040 8097 	bne.w	801107e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	88db      	ldrh	r3, [r3, #6]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d029      	beq.n	8010fac <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	b25b      	sxtb	r3, r3
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	da11      	bge.n	8010f86 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f68:	689b      	ldr	r3, [r3, #8]
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010f6e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f70:	683a      	ldr	r2, [r7, #0]
 8010f72:	88d2      	ldrh	r2, [r2, #6]
 8010f74:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010f76:	6939      	ldr	r1, [r7, #16]
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	88db      	ldrh	r3, [r3, #6]
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f001 fa9d 	bl	80124be <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010f84:	e082      	b.n	801108c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	785a      	ldrb	r2, [r3, #1]
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	88db      	ldrh	r3, [r3, #6]
 8010f94:	b2da      	uxtb	r2, r3
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010f9c:	6939      	ldr	r1, [r7, #16]
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	88db      	ldrh	r3, [r3, #6]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f001 fab6 	bl	8012516 <USBD_CtlPrepareRx>
    break;
 8010faa:	e06f      	b.n	801108c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fb2:	689b      	ldr	r3, [r3, #8]
 8010fb4:	683a      	ldr	r2, [r7, #0]
 8010fb6:	7850      	ldrb	r0, [r2, #1]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	6839      	ldr	r1, [r7, #0]
 8010fbc:	4798      	blx	r3
    break;
 8010fbe:	e065      	b.n	801108c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	785b      	ldrb	r3, [r3, #1]
 8010fc4:	2b0b      	cmp	r3, #11
 8010fc6:	d84f      	bhi.n	8011068 <USBD_CDC_Setup+0x148>
 8010fc8:	a201      	add	r2, pc, #4	; (adr r2, 8010fd0 <USBD_CDC_Setup+0xb0>)
 8010fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fce:	bf00      	nop
 8010fd0:	08011001 	.word	0x08011001
 8010fd4:	08011077 	.word	0x08011077
 8010fd8:	08011069 	.word	0x08011069
 8010fdc:	08011069 	.word	0x08011069
 8010fe0:	08011069 	.word	0x08011069
 8010fe4:	08011069 	.word	0x08011069
 8010fe8:	08011069 	.word	0x08011069
 8010fec:	08011069 	.word	0x08011069
 8010ff0:	08011069 	.word	0x08011069
 8010ff4:	08011069 	.word	0x08011069
 8010ff8:	08011029 	.word	0x08011029
 8010ffc:	08011051 	.word	0x08011051
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011006:	2b03      	cmp	r3, #3
 8011008:	d107      	bne.n	801101a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801100a:	f107 030c 	add.w	r3, r7, #12
 801100e:	2202      	movs	r2, #2
 8011010:	4619      	mov	r1, r3
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f001 fa53 	bl	80124be <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011018:	e030      	b.n	801107c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801101a:	6839      	ldr	r1, [r7, #0]
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f001 f9dd 	bl	80123dc <USBD_CtlError>
        ret = USBD_FAIL;
 8011022:	2303      	movs	r3, #3
 8011024:	75fb      	strb	r3, [r7, #23]
      break;
 8011026:	e029      	b.n	801107c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801102e:	2b03      	cmp	r3, #3
 8011030:	d107      	bne.n	8011042 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011032:	f107 030f 	add.w	r3, r7, #15
 8011036:	2201      	movs	r2, #1
 8011038:	4619      	mov	r1, r3
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f001 fa3f 	bl	80124be <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011040:	e01c      	b.n	801107c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011042:	6839      	ldr	r1, [r7, #0]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f001 f9c9 	bl	80123dc <USBD_CtlError>
        ret = USBD_FAIL;
 801104a:	2303      	movs	r3, #3
 801104c:	75fb      	strb	r3, [r7, #23]
      break;
 801104e:	e015      	b.n	801107c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011056:	2b03      	cmp	r3, #3
 8011058:	d00f      	beq.n	801107a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 801105a:	6839      	ldr	r1, [r7, #0]
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f001 f9bd 	bl	80123dc <USBD_CtlError>
        ret = USBD_FAIL;
 8011062:	2303      	movs	r3, #3
 8011064:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8011066:	e008      	b.n	801107a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8011068:	6839      	ldr	r1, [r7, #0]
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f001 f9b6 	bl	80123dc <USBD_CtlError>
      ret = USBD_FAIL;
 8011070:	2303      	movs	r3, #3
 8011072:	75fb      	strb	r3, [r7, #23]
      break;
 8011074:	e002      	b.n	801107c <USBD_CDC_Setup+0x15c>
      break;
 8011076:	bf00      	nop
 8011078:	e008      	b.n	801108c <USBD_CDC_Setup+0x16c>
      break;
 801107a:	bf00      	nop
    }
    break;
 801107c:	e006      	b.n	801108c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 801107e:	6839      	ldr	r1, [r7, #0]
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f001 f9ab 	bl	80123dc <USBD_CtlError>
    ret = USBD_FAIL;
 8011086:	2303      	movs	r3, #3
 8011088:	75fb      	strb	r3, [r7, #23]
    break;
 801108a:	bf00      	nop
  }

  return (uint8_t)ret;
 801108c:	7dfb      	ldrb	r3, [r7, #23]
}
 801108e:	4618      	mov	r0, r3
 8011090:	3718      	adds	r7, #24
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop

08011098 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	460b      	mov	r3, r1
 80110a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80110aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d101      	bne.n	80110ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80110b6:	2303      	movs	r3, #3
 80110b8:	e049      	b.n	801114e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80110c2:	78fa      	ldrb	r2, [r7, #3]
 80110c4:	6879      	ldr	r1, [r7, #4]
 80110c6:	4613      	mov	r3, r2
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	4413      	add	r3, r2
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	440b      	add	r3, r1
 80110d0:	3318      	adds	r3, #24
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d029      	beq.n	801112c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80110d8:	78fa      	ldrb	r2, [r7, #3]
 80110da:	6879      	ldr	r1, [r7, #4]
 80110dc:	4613      	mov	r3, r2
 80110de:	009b      	lsls	r3, r3, #2
 80110e0:	4413      	add	r3, r2
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	440b      	add	r3, r1
 80110e6:	3318      	adds	r3, #24
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	78f9      	ldrb	r1, [r7, #3]
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	460b      	mov	r3, r1
 80110f0:	00db      	lsls	r3, r3, #3
 80110f2:	1a5b      	subs	r3, r3, r1
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	4403      	add	r3, r0
 80110f8:	3344      	adds	r3, #68	; 0x44
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8011100:	fb03 f301 	mul.w	r3, r3, r1
 8011104:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011106:	2b00      	cmp	r3, #0
 8011108:	d110      	bne.n	801112c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801110a:	78fa      	ldrb	r2, [r7, #3]
 801110c:	6879      	ldr	r1, [r7, #4]
 801110e:	4613      	mov	r3, r2
 8011110:	009b      	lsls	r3, r3, #2
 8011112:	4413      	add	r3, r2
 8011114:	009b      	lsls	r3, r3, #2
 8011116:	440b      	add	r3, r1
 8011118:	3318      	adds	r3, #24
 801111a:	2200      	movs	r2, #0
 801111c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801111e:	78f9      	ldrb	r1, [r7, #3]
 8011120:	2300      	movs	r3, #0
 8011122:	2200      	movs	r2, #0
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f004 fd6e 	bl	8015c06 <USBD_LL_Transmit>
 801112a:	e00f      	b.n	801114c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	2200      	movs	r2, #0
 8011130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801113a:	691b      	ldr	r3, [r3, #16]
 801113c:	68ba      	ldr	r2, [r7, #8]
 801113e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011142:	68ba      	ldr	r2, [r7, #8]
 8011144:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011148:	78fa      	ldrb	r2, [r7, #3]
 801114a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 801114c:	2300      	movs	r3, #0
}
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b084      	sub	sp, #16
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
 801115e:	460b      	mov	r3, r1
 8011160:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011168:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011170:	2b00      	cmp	r3, #0
 8011172:	d101      	bne.n	8011178 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011174:	2303      	movs	r3, #3
 8011176:	e015      	b.n	80111a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011178:	78fb      	ldrb	r3, [r7, #3]
 801117a:	4619      	mov	r1, r3
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f004 fd84 	bl	8015c8a <USBD_LL_GetRxDataSize>
 8011182:	4602      	mov	r2, r0
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	68fa      	ldr	r2, [r7, #12]
 8011194:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801119e:	4611      	mov	r1, r2
 80111a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80111a2:	2300      	movs	r3, #0
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111ba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d015      	beq.n	80111f2 <USBD_CDC_EP0_RxReady+0x46>
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80111cc:	2bff      	cmp	r3, #255	; 0xff
 80111ce:	d010      	beq.n	80111f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80111de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111e6:	b292      	uxth	r2, r2
 80111e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	22ff      	movs	r2, #255	; 0xff
 80111ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80111f2:	2300      	movs	r3, #0
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3710      	adds	r7, #16
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2243      	movs	r2, #67	; 0x43
 8011208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801120a:	4b03      	ldr	r3, [pc, #12]	; (8011218 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801120c:	4618      	mov	r0, r3
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr
 8011218:	2000211c 	.word	0x2000211c

0801121c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2243      	movs	r2, #67	; 0x43
 8011228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801122a:	4b03      	ldr	r3, [pc, #12]	; (8011238 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801122c:	4618      	mov	r0, r3
 801122e:	370c      	adds	r7, #12
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr
 8011238:	200020d8 	.word	0x200020d8

0801123c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2243      	movs	r2, #67	; 0x43
 8011248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801124a:	4b03      	ldr	r3, [pc, #12]	; (8011258 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801124c:	4618      	mov	r0, r3
 801124e:	370c      	adds	r7, #12
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr
 8011258:	20002160 	.word	0x20002160

0801125c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	220a      	movs	r2, #10
 8011268:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801126a:	4b03      	ldr	r3, [pc, #12]	; (8011278 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801126c:	4618      	mov	r0, r3
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr
 8011278:	20002094 	.word	0x20002094

0801127c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801127c:	b480      	push	{r7}
 801127e:	b083      	sub	sp, #12
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d101      	bne.n	8011290 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801128c:	2303      	movs	r3, #3
 801128e:	e004      	b.n	801129a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	683a      	ldr	r2, [r7, #0]
 8011294:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011298:	2300      	movs	r3, #0
}
 801129a:	4618      	mov	r0, r3
 801129c:	370c      	adds	r7, #12
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr

080112a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80112a6:	b480      	push	{r7}
 80112a8:	b087      	sub	sp, #28
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	60f8      	str	r0, [r7, #12]
 80112ae:	60b9      	str	r1, [r7, #8]
 80112b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	68ba      	ldr	r2, [r7, #8]
 80112be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80112ca:	2300      	movs	r3, #0
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	371c      	adds	r7, #28
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr

080112d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80112d8:	b480      	push	{r7}
 80112da:	b085      	sub	sp, #20
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112e8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	683a      	ldr	r2, [r7, #0]
 80112ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3714      	adds	r7, #20
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801130e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011310:	2301      	movs	r3, #1
 8011312:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801131a:	2b00      	cmp	r3, #0
 801131c:	d101      	bne.n	8011322 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801131e:	2303      	movs	r3, #3
 8011320:	e01a      	b.n	8011358 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011328:	2b00      	cmp	r3, #0
 801132a:	d114      	bne.n	8011356 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	2201      	movs	r2, #1
 8011330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801134a:	2181      	movs	r1, #129	; 0x81
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f004 fc5a 	bl	8015c06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011356:	7bfb      	ldrb	r3, [r7, #15]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801136e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011376:	2b00      	cmp	r3, #0
 8011378:	d101      	bne.n	801137e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801137a:	2303      	movs	r3, #3
 801137c:	e016      	b.n	80113ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	7c1b      	ldrb	r3, [r3, #16]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d109      	bne.n	801139a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801138c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011390:	2101      	movs	r1, #1
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f004 fc58 	bl	8015c48 <USBD_LL_PrepareReceive>
 8011398:	e007      	b.n	80113aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80113a0:	2340      	movs	r3, #64	; 0x40
 80113a2:	2101      	movs	r1, #1
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f004 fc4f 	bl	8015c48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80113aa:	2300      	movs	r3, #0
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3710      	adds	r7, #16
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b086      	sub	sp, #24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	4613      	mov	r3, r2
 80113c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d101      	bne.n	80113cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80113c8:	2303      	movs	r3, #3
 80113ca:	e025      	b.n	8011418 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d003      	beq.n	80113de <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2200      	movs	r2, #0
 80113da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d003      	beq.n	80113f0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2200      	movs	r2, #0
 80113ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d003      	beq.n	80113fe <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2201      	movs	r2, #1
 8011402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	79fa      	ldrb	r2, [r7, #7]
 801140a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	f004 fac5 	bl	801599c <USBD_LL_Init>
 8011412:	4603      	mov	r3, r0
 8011414:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011416:	7dfb      	ldrb	r3, [r7, #23]
}
 8011418:	4618      	mov	r0, r3
 801141a:	3718      	adds	r7, #24
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801142a:	2300      	movs	r3, #0
 801142c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d101      	bne.n	8011438 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011434:	2303      	movs	r3, #3
 8011436:	e010      	b.n	801145a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	683a      	ldr	r2, [r7, #0]
 801143c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011448:	f107 020e 	add.w	r2, r7, #14
 801144c:	4610      	mov	r0, r2
 801144e:	4798      	blx	r3
 8011450:	4602      	mov	r2, r0
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011458:	2300      	movs	r3, #0
}
 801145a:	4618      	mov	r0, r3
 801145c:	3710      	adds	r7, #16
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011462:	b580      	push	{r7, lr}
 8011464:	b082      	sub	sp, #8
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f004 fae2 	bl	8015a34 <USBD_LL_Start>
 8011470:	4603      	mov	r3, r0
}
 8011472:	4618      	mov	r0, r3
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801147a:	b480      	push	{r7}
 801147c:	b083      	sub	sp, #12
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	460b      	mov	r3, r1
 801149a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801149c:	2303      	movs	r3, #3
 801149e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d009      	beq.n	80114be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	78fa      	ldrb	r2, [r7, #3]
 80114b4:	4611      	mov	r1, r2
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	4798      	blx	r3
 80114ba:	4603      	mov	r3, r0
 80114bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80114be:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	460b      	mov	r3, r1
 80114d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d007      	beq.n	80114ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	78fa      	ldrb	r2, [r7, #3]
 80114e8:	4611      	mov	r1, r2
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	4798      	blx	r3
  }

  return USBD_OK;
 80114ee:	2300      	movs	r3, #0
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b084      	sub	sp, #16
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011508:	6839      	ldr	r1, [r7, #0]
 801150a:	4618      	mov	r0, r3
 801150c:	f000 ff2c 	bl	8012368 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2201      	movs	r2, #1
 8011514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801151e:	461a      	mov	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801152c:	f003 031f 	and.w	r3, r3, #31
 8011530:	2b01      	cmp	r3, #1
 8011532:	d00e      	beq.n	8011552 <USBD_LL_SetupStage+0x5a>
 8011534:	2b01      	cmp	r3, #1
 8011536:	d302      	bcc.n	801153e <USBD_LL_SetupStage+0x46>
 8011538:	2b02      	cmp	r3, #2
 801153a:	d014      	beq.n	8011566 <USBD_LL_SetupStage+0x6e>
 801153c:	e01d      	b.n	801157a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011544:	4619      	mov	r1, r3
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 fa18 	bl	801197c <USBD_StdDevReq>
 801154c:	4603      	mov	r3, r0
 801154e:	73fb      	strb	r3, [r7, #15]
      break;
 8011550:	e020      	b.n	8011594 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011558:	4619      	mov	r1, r3
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f000 fa7c 	bl	8011a58 <USBD_StdItfReq>
 8011560:	4603      	mov	r3, r0
 8011562:	73fb      	strb	r3, [r7, #15]
      break;
 8011564:	e016      	b.n	8011594 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801156c:	4619      	mov	r1, r3
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 fab8 	bl	8011ae4 <USBD_StdEPReq>
 8011574:	4603      	mov	r3, r0
 8011576:	73fb      	strb	r3, [r7, #15]
      break;
 8011578:	e00c      	b.n	8011594 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011580:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011584:	b2db      	uxtb	r3, r3
 8011586:	4619      	mov	r1, r3
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f004 fab3 	bl	8015af4 <USBD_LL_StallEP>
 801158e:	4603      	mov	r3, r0
 8011590:	73fb      	strb	r3, [r7, #15]
      break;
 8011592:	bf00      	nop
  }

  return ret;
 8011594:	7bfb      	ldrb	r3, [r7, #15]
}
 8011596:	4618      	mov	r0, r3
 8011598:	3710      	adds	r7, #16
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}

0801159e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801159e:	b580      	push	{r7, lr}
 80115a0:	b086      	sub	sp, #24
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	60f8      	str	r0, [r7, #12]
 80115a6:	460b      	mov	r3, r1
 80115a8:	607a      	str	r2, [r7, #4]
 80115aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80115ac:	7afb      	ldrb	r3, [r7, #11]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d137      	bne.n	8011622 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80115b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80115c0:	2b03      	cmp	r3, #3
 80115c2:	d14a      	bne.n	801165a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	689a      	ldr	r2, [r3, #8]
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d913      	bls.n	80115f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	689a      	ldr	r2, [r3, #8]
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	1ad2      	subs	r2, r2, r3
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	68da      	ldr	r2, [r3, #12]
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	689b      	ldr	r3, [r3, #8]
 80115e6:	4293      	cmp	r3, r2
 80115e8:	bf28      	it	cs
 80115ea:	4613      	movcs	r3, r2
 80115ec:	461a      	mov	r2, r3
 80115ee:	6879      	ldr	r1, [r7, #4]
 80115f0:	68f8      	ldr	r0, [r7, #12]
 80115f2:	f000 ffad 	bl	8012550 <USBD_CtlContinueRx>
 80115f6:	e030      	b.n	801165a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115fe:	691b      	ldr	r3, [r3, #16]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d00a      	beq.n	801161a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801160a:	2b03      	cmp	r3, #3
 801160c:	d105      	bne.n	801161a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011614:	691b      	ldr	r3, [r3, #16]
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f000 ffa9 	bl	8012572 <USBD_CtlSendStatus>
 8011620:	e01b      	b.n	801165a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d013      	beq.n	8011656 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011634:	2b03      	cmp	r3, #3
 8011636:	d10e      	bne.n	8011656 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801163e:	699b      	ldr	r3, [r3, #24]
 8011640:	7afa      	ldrb	r2, [r7, #11]
 8011642:	4611      	mov	r1, r2
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	4798      	blx	r3
 8011648:	4603      	mov	r3, r0
 801164a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801164c:	7dfb      	ldrb	r3, [r7, #23]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d003      	beq.n	801165a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011652:	7dfb      	ldrb	r3, [r7, #23]
 8011654:	e002      	b.n	801165c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011656:	2303      	movs	r3, #3
 8011658:	e000      	b.n	801165c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	3718      	adds	r7, #24
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b086      	sub	sp, #24
 8011668:	af00      	add	r7, sp, #0
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	460b      	mov	r3, r1
 801166e:	607a      	str	r2, [r7, #4]
 8011670:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011672:	7afb      	ldrb	r3, [r7, #11]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d16a      	bne.n	801174e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	3314      	adds	r3, #20
 801167c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011684:	2b02      	cmp	r3, #2
 8011686:	d155      	bne.n	8011734 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	689a      	ldr	r2, [r3, #8]
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	429a      	cmp	r2, r3
 8011692:	d914      	bls.n	80116be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	689a      	ldr	r2, [r3, #8]
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	1ad2      	subs	r2, r2, r3
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	689b      	ldr	r3, [r3, #8]
 80116a6:	461a      	mov	r2, r3
 80116a8:	6879      	ldr	r1, [r7, #4]
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f000 ff22 	bl	80124f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116b0:	2300      	movs	r3, #0
 80116b2:	2200      	movs	r2, #0
 80116b4:	2100      	movs	r1, #0
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f004 fac6 	bl	8015c48 <USBD_LL_PrepareReceive>
 80116bc:	e03a      	b.n	8011734 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	68da      	ldr	r2, [r3, #12]
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d11c      	bne.n	8011704 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d316      	bcc.n	8011704 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d20f      	bcs.n	8011704 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80116e4:	2200      	movs	r2, #0
 80116e6:	2100      	movs	r1, #0
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f000 ff03 	bl	80124f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116f6:	2300      	movs	r3, #0
 80116f8:	2200      	movs	r2, #0
 80116fa:	2100      	movs	r1, #0
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f004 faa3 	bl	8015c48 <USBD_LL_PrepareReceive>
 8011702:	e017      	b.n	8011734 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00a      	beq.n	8011726 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011716:	2b03      	cmp	r3, #3
 8011718:	d105      	bne.n	8011726 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	68f8      	ldr	r0, [r7, #12]
 8011724:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011726:	2180      	movs	r1, #128	; 0x80
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f004 f9e3 	bl	8015af4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f000 ff32 	bl	8012598 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801173a:	2b01      	cmp	r3, #1
 801173c:	d123      	bne.n	8011786 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f7ff fe9b 	bl	801147a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2200      	movs	r2, #0
 8011748:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801174c:	e01b      	b.n	8011786 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011754:	695b      	ldr	r3, [r3, #20]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d013      	beq.n	8011782 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011760:	2b03      	cmp	r3, #3
 8011762:	d10e      	bne.n	8011782 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801176a:	695b      	ldr	r3, [r3, #20]
 801176c:	7afa      	ldrb	r2, [r7, #11]
 801176e:	4611      	mov	r1, r2
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	4798      	blx	r3
 8011774:	4603      	mov	r3, r0
 8011776:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011778:	7dfb      	ldrb	r3, [r7, #23]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d003      	beq.n	8011786 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801177e:	7dfb      	ldrb	r3, [r7, #23]
 8011780:	e002      	b.n	8011788 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011782:	2303      	movs	r3, #3
 8011784:	e000      	b.n	8011788 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3718      	adds	r7, #24
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2201      	movs	r2, #1
 801179c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d009      	beq.n	80117d4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	6852      	ldr	r2, [r2, #4]
 80117cc:	b2d2      	uxtb	r2, r2
 80117ce:	4611      	mov	r1, r2
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117d4:	2340      	movs	r3, #64	; 0x40
 80117d6:	2200      	movs	r2, #0
 80117d8:	2100      	movs	r1, #0
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f004 f945 	bl	8015a6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2201      	movs	r2, #1
 80117e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2240      	movs	r2, #64	; 0x40
 80117ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117f0:	2340      	movs	r3, #64	; 0x40
 80117f2:	2200      	movs	r2, #0
 80117f4:	2180      	movs	r1, #128	; 0x80
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f004 f937 	bl	8015a6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2201      	movs	r2, #1
 8011800:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2240      	movs	r2, #64	; 0x40
 8011806:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011808:	2300      	movs	r3, #0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011812:	b480      	push	{r7}
 8011814:	b083      	sub	sp, #12
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
 801181a:	460b      	mov	r3, r1
 801181c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	78fa      	ldrb	r2, [r7, #3]
 8011822:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr

08011832 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011832:	b480      	push	{r7}
 8011834:	b083      	sub	sp, #12
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2204      	movs	r2, #4
 801184a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801185c:	b480      	push	{r7}
 801185e:	b083      	sub	sp, #12
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801186a:	2b04      	cmp	r3, #4
 801186c:	d105      	bne.n	801187a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801187a:	2300      	movs	r3, #0
}
 801187c:	4618      	mov	r0, r3
 801187e:	370c      	adds	r7, #12
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr

08011888 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011896:	2b03      	cmp	r3, #3
 8011898:	d10b      	bne.n	80118b2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118a0:	69db      	ldr	r3, [r3, #28]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d005      	beq.n	80118b2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ac:	69db      	ldr	r3, [r3, #28]
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80118b2:	2300      	movs	r3, #0
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3708      	adds	r7, #8
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	460b      	mov	r3, r1
 80118c6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80118c8:	2300      	movs	r3, #0
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr

080118d6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80118d6:	b480      	push	{r7}
 80118d8:	b083      	sub	sp, #12
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
 80118de:	460b      	mov	r3, r1
 80118e0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80118e2:	2300      	movs	r3, #0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80118f8:	2300      	movs	r3, #0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	370c      	adds	r7, #12
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr

08011906 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011906:	b580      	push	{r7, lr}
 8011908:	b082      	sub	sp, #8
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2201      	movs	r2, #1
 8011912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801191c:	2b00      	cmp	r3, #0
 801191e:	d009      	beq.n	8011934 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	687a      	ldr	r2, [r7, #4]
 801192a:	6852      	ldr	r2, [r2, #4]
 801192c:	b2d2      	uxtb	r2, r2
 801192e:	4611      	mov	r1, r2
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	4798      	blx	r3
  }

  return USBD_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3708      	adds	r7, #8
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}

0801193e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801193e:	b480      	push	{r7}
 8011940:	b087      	sub	sp, #28
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	3301      	adds	r3, #1
 8011954:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801195c:	8a3b      	ldrh	r3, [r7, #16]
 801195e:	021b      	lsls	r3, r3, #8
 8011960:	b21a      	sxth	r2, r3
 8011962:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011966:	4313      	orrs	r3, r2
 8011968:	b21b      	sxth	r3, r3
 801196a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801196c:	89fb      	ldrh	r3, [r7, #14]
}
 801196e:	4618      	mov	r0, r3
 8011970:	371c      	adds	r7, #28
 8011972:	46bd      	mov	sp, r7
 8011974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011978:	4770      	bx	lr
	...

0801197c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b084      	sub	sp, #16
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011986:	2300      	movs	r3, #0
 8011988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011992:	2b20      	cmp	r3, #32
 8011994:	d004      	beq.n	80119a0 <USBD_StdDevReq+0x24>
 8011996:	2b40      	cmp	r3, #64	; 0x40
 8011998:	d002      	beq.n	80119a0 <USBD_StdDevReq+0x24>
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00a      	beq.n	80119b4 <USBD_StdDevReq+0x38>
 801199e:	e050      	b.n	8011a42 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119a6:	689b      	ldr	r3, [r3, #8]
 80119a8:	6839      	ldr	r1, [r7, #0]
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	4798      	blx	r3
 80119ae:	4603      	mov	r3, r0
 80119b0:	73fb      	strb	r3, [r7, #15]
    break;
 80119b2:	e04b      	b.n	8011a4c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	785b      	ldrb	r3, [r3, #1]
 80119b8:	2b09      	cmp	r3, #9
 80119ba:	d83c      	bhi.n	8011a36 <USBD_StdDevReq+0xba>
 80119bc:	a201      	add	r2, pc, #4	; (adr r2, 80119c4 <USBD_StdDevReq+0x48>)
 80119be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c2:	bf00      	nop
 80119c4:	08011a19 	.word	0x08011a19
 80119c8:	08011a2d 	.word	0x08011a2d
 80119cc:	08011a37 	.word	0x08011a37
 80119d0:	08011a23 	.word	0x08011a23
 80119d4:	08011a37 	.word	0x08011a37
 80119d8:	080119f7 	.word	0x080119f7
 80119dc:	080119ed 	.word	0x080119ed
 80119e0:	08011a37 	.word	0x08011a37
 80119e4:	08011a0f 	.word	0x08011a0f
 80119e8:	08011a01 	.word	0x08011a01
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80119ec:	6839      	ldr	r1, [r7, #0]
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 f9ce 	bl	8011d90 <USBD_GetDescriptor>
      break;
 80119f4:	e024      	b.n	8011a40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80119f6:	6839      	ldr	r1, [r7, #0]
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f000 fb33 	bl	8012064 <USBD_SetAddress>
      break;
 80119fe:	e01f      	b.n	8011a40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011a00:	6839      	ldr	r1, [r7, #0]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 fb70 	bl	80120e8 <USBD_SetConfig>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8011a0c:	e018      	b.n	8011a40 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 fc0d 	bl	8012230 <USBD_GetConfig>
      break;
 8011a16:	e013      	b.n	8011a40 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011a18:	6839      	ldr	r1, [r7, #0]
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 fc3c 	bl	8012298 <USBD_GetStatus>
      break;
 8011a20:	e00e      	b.n	8011a40 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011a22:	6839      	ldr	r1, [r7, #0]
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f000 fc6a 	bl	80122fe <USBD_SetFeature>
      break;
 8011a2a:	e009      	b.n	8011a40 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011a2c:	6839      	ldr	r1, [r7, #0]
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 fc79 	bl	8012326 <USBD_ClrFeature>
      break;
 8011a34:	e004      	b.n	8011a40 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011a36:	6839      	ldr	r1, [r7, #0]
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 fccf 	bl	80123dc <USBD_CtlError>
      break;
 8011a3e:	bf00      	nop
    }
    break;
 8011a40:	e004      	b.n	8011a4c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011a42:	6839      	ldr	r1, [r7, #0]
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 fcc9 	bl	80123dc <USBD_CtlError>
    break;
 8011a4a:	bf00      	nop
  }

  return ret;
 8011a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
 8011a56:	bf00      	nop

08011a58 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a62:	2300      	movs	r3, #0
 8011a64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a6e:	2b20      	cmp	r3, #32
 8011a70:	d003      	beq.n	8011a7a <USBD_StdItfReq+0x22>
 8011a72:	2b40      	cmp	r3, #64	; 0x40
 8011a74:	d001      	beq.n	8011a7a <USBD_StdItfReq+0x22>
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d12a      	bne.n	8011ad0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a80:	3b01      	subs	r3, #1
 8011a82:	2b02      	cmp	r3, #2
 8011a84:	d81d      	bhi.n	8011ac2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	889b      	ldrh	r3, [r3, #4]
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d813      	bhi.n	8011ab8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	6839      	ldr	r1, [r7, #0]
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	4798      	blx	r3
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	88db      	ldrh	r3, [r3, #6]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d110      	bne.n	8011acc <USBD_StdItfReq+0x74>
 8011aaa:	7bfb      	ldrb	r3, [r7, #15]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10d      	bne.n	8011acc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 fd5e 	bl	8012572 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011ab6:	e009      	b.n	8011acc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011ab8:	6839      	ldr	r1, [r7, #0]
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 fc8e 	bl	80123dc <USBD_CtlError>
      break;
 8011ac0:	e004      	b.n	8011acc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011ac2:	6839      	ldr	r1, [r7, #0]
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f000 fc89 	bl	80123dc <USBD_CtlError>
      break;
 8011aca:	e000      	b.n	8011ace <USBD_StdItfReq+0x76>
      break;
 8011acc:	bf00      	nop
    }
    break;
 8011ace:	e004      	b.n	8011ada <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011ad0:	6839      	ldr	r1, [r7, #0]
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f000 fc82 	bl	80123dc <USBD_CtlError>
    break;
 8011ad8:	bf00      	nop
  }

  return ret;
 8011ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3710      	adds	r7, #16
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011aee:	2300      	movs	r3, #0
 8011af0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	889b      	ldrh	r3, [r3, #4]
 8011af6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b00:	2b20      	cmp	r3, #32
 8011b02:	d004      	beq.n	8011b0e <USBD_StdEPReq+0x2a>
 8011b04:	2b40      	cmp	r3, #64	; 0x40
 8011b06:	d002      	beq.n	8011b0e <USBD_StdEPReq+0x2a>
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00a      	beq.n	8011b22 <USBD_StdEPReq+0x3e>
 8011b0c:	e135      	b.n	8011d7a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b14:	689b      	ldr	r3, [r3, #8]
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	4798      	blx	r3
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011b20:	e130      	b.n	8011d84 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	785b      	ldrb	r3, [r3, #1]
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d03e      	beq.n	8011ba8 <USBD_StdEPReq+0xc4>
 8011b2a:	2b03      	cmp	r3, #3
 8011b2c:	d002      	beq.n	8011b34 <USBD_StdEPReq+0x50>
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d077      	beq.n	8011c22 <USBD_StdEPReq+0x13e>
 8011b32:	e11c      	b.n	8011d6e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b3a:	2b02      	cmp	r3, #2
 8011b3c:	d002      	beq.n	8011b44 <USBD_StdEPReq+0x60>
 8011b3e:	2b03      	cmp	r3, #3
 8011b40:	d015      	beq.n	8011b6e <USBD_StdEPReq+0x8a>
 8011b42:	e02b      	b.n	8011b9c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b44:	7bbb      	ldrb	r3, [r7, #14]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d00c      	beq.n	8011b64 <USBD_StdEPReq+0x80>
 8011b4a:	7bbb      	ldrb	r3, [r7, #14]
 8011b4c:	2b80      	cmp	r3, #128	; 0x80
 8011b4e:	d009      	beq.n	8011b64 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b50:	7bbb      	ldrb	r3, [r7, #14]
 8011b52:	4619      	mov	r1, r3
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f003 ffcd 	bl	8015af4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b5a:	2180      	movs	r1, #128	; 0x80
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f003 ffc9 	bl	8015af4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011b62:	e020      	b.n	8011ba6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011b64:	6839      	ldr	r1, [r7, #0]
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 fc38 	bl	80123dc <USBD_CtlError>
        break;
 8011b6c:	e01b      	b.n	8011ba6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	885b      	ldrh	r3, [r3, #2]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d10e      	bne.n	8011b94 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011b76:	7bbb      	ldrb	r3, [r7, #14]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d00b      	beq.n	8011b94 <USBD_StdEPReq+0xb0>
 8011b7c:	7bbb      	ldrb	r3, [r7, #14]
 8011b7e:	2b80      	cmp	r3, #128	; 0x80
 8011b80:	d008      	beq.n	8011b94 <USBD_StdEPReq+0xb0>
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	88db      	ldrh	r3, [r3, #6]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d104      	bne.n	8011b94 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b8a:	7bbb      	ldrb	r3, [r7, #14]
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f003 ffb0 	bl	8015af4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f000 fcec 	bl	8012572 <USBD_CtlSendStatus>

        break;
 8011b9a:	e004      	b.n	8011ba6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8011b9c:	6839      	ldr	r1, [r7, #0]
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f000 fc1c 	bl	80123dc <USBD_CtlError>
        break;
 8011ba4:	bf00      	nop
      }
      break;
 8011ba6:	e0e7      	b.n	8011d78 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	d002      	beq.n	8011bb8 <USBD_StdEPReq+0xd4>
 8011bb2:	2b03      	cmp	r3, #3
 8011bb4:	d015      	beq.n	8011be2 <USBD_StdEPReq+0xfe>
 8011bb6:	e02d      	b.n	8011c14 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011bb8:	7bbb      	ldrb	r3, [r7, #14]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00c      	beq.n	8011bd8 <USBD_StdEPReq+0xf4>
 8011bbe:	7bbb      	ldrb	r3, [r7, #14]
 8011bc0:	2b80      	cmp	r3, #128	; 0x80
 8011bc2:	d009      	beq.n	8011bd8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bc4:	7bbb      	ldrb	r3, [r7, #14]
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f003 ff93 	bl	8015af4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011bce:	2180      	movs	r1, #128	; 0x80
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f003 ff8f 	bl	8015af4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011bd6:	e023      	b.n	8011c20 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011bd8:	6839      	ldr	r1, [r7, #0]
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 fbfe 	bl	80123dc <USBD_CtlError>
        break;
 8011be0:	e01e      	b.n	8011c20 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	885b      	ldrh	r3, [r3, #2]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d119      	bne.n	8011c1e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011bea:	7bbb      	ldrb	r3, [r7, #14]
 8011bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d004      	beq.n	8011bfe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011bf4:	7bbb      	ldrb	r3, [r7, #14]
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f003 ff9a 	bl	8015b32 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 fcb7 	bl	8012572 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c0a:	689b      	ldr	r3, [r3, #8]
 8011c0c:	6839      	ldr	r1, [r7, #0]
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	4798      	blx	r3
        }
        break;
 8011c12:	e004      	b.n	8011c1e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011c14:	6839      	ldr	r1, [r7, #0]
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f000 fbe0 	bl	80123dc <USBD_CtlError>
        break;
 8011c1c:	e000      	b.n	8011c20 <USBD_StdEPReq+0x13c>
        break;
 8011c1e:	bf00      	nop
      }
      break;
 8011c20:	e0aa      	b.n	8011d78 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d002      	beq.n	8011c32 <USBD_StdEPReq+0x14e>
 8011c2c:	2b03      	cmp	r3, #3
 8011c2e:	d032      	beq.n	8011c96 <USBD_StdEPReq+0x1b2>
 8011c30:	e097      	b.n	8011d62 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c32:	7bbb      	ldrb	r3, [r7, #14]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d007      	beq.n	8011c48 <USBD_StdEPReq+0x164>
 8011c38:	7bbb      	ldrb	r3, [r7, #14]
 8011c3a:	2b80      	cmp	r3, #128	; 0x80
 8011c3c:	d004      	beq.n	8011c48 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011c3e:	6839      	ldr	r1, [r7, #0]
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 fbcb 	bl	80123dc <USBD_CtlError>
          break;
 8011c46:	e091      	b.n	8011d6c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	da0b      	bge.n	8011c68 <USBD_StdEPReq+0x184>
 8011c50:	7bbb      	ldrb	r3, [r7, #14]
 8011c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c56:	4613      	mov	r3, r2
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	4413      	add	r3, r2
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	3310      	adds	r3, #16
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	4413      	add	r3, r2
 8011c64:	3304      	adds	r3, #4
 8011c66:	e00b      	b.n	8011c80 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011c68:	7bbb      	ldrb	r3, [r7, #14]
 8011c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c6e:	4613      	mov	r3, r2
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	4413      	add	r3, r2
 8011c74:	009b      	lsls	r3, r3, #2
 8011c76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	3304      	adds	r3, #4
 8011c80:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	2200      	movs	r2, #0
 8011c86:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	2202      	movs	r2, #2
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f000 fc15 	bl	80124be <USBD_CtlSendData>
        break;
 8011c94:	e06a      	b.n	8011d6c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	da11      	bge.n	8011cc2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011c9e:	7bbb      	ldrb	r3, [r7, #14]
 8011ca0:	f003 020f 	and.w	r2, r3, #15
 8011ca4:	6879      	ldr	r1, [r7, #4]
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	440b      	add	r3, r1
 8011cb0:	3324      	adds	r3, #36	; 0x24
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d117      	bne.n	8011ce8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011cb8:	6839      	ldr	r1, [r7, #0]
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 fb8e 	bl	80123dc <USBD_CtlError>
            break;
 8011cc0:	e054      	b.n	8011d6c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011cc2:	7bbb      	ldrb	r3, [r7, #14]
 8011cc4:	f003 020f 	and.w	r2, r3, #15
 8011cc8:	6879      	ldr	r1, [r7, #4]
 8011cca:	4613      	mov	r3, r2
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	4413      	add	r3, r2
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	440b      	add	r3, r1
 8011cd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011cd8:	881b      	ldrh	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d104      	bne.n	8011ce8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011cde:	6839      	ldr	r1, [r7, #0]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 fb7b 	bl	80123dc <USBD_CtlError>
            break;
 8011ce6:	e041      	b.n	8011d6c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	da0b      	bge.n	8011d08 <USBD_StdEPReq+0x224>
 8011cf0:	7bbb      	ldrb	r3, [r7, #14]
 8011cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	3310      	adds	r3, #16
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	4413      	add	r3, r2
 8011d04:	3304      	adds	r3, #4
 8011d06:	e00b      	b.n	8011d20 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011d08:	7bbb      	ldrb	r3, [r7, #14]
 8011d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d0e:	4613      	mov	r3, r2
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4413      	add	r3, r2
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	3304      	adds	r3, #4
 8011d20:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011d22:	7bbb      	ldrb	r3, [r7, #14]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d002      	beq.n	8011d2e <USBD_StdEPReq+0x24a>
 8011d28:	7bbb      	ldrb	r3, [r7, #14]
 8011d2a:	2b80      	cmp	r3, #128	; 0x80
 8011d2c:	d103      	bne.n	8011d36 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2200      	movs	r2, #0
 8011d32:	601a      	str	r2, [r3, #0]
 8011d34:	e00e      	b.n	8011d54 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011d36:	7bbb      	ldrb	r3, [r7, #14]
 8011d38:	4619      	mov	r1, r3
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f003 ff18 	bl	8015b70 <USBD_LL_IsStallEP>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d003      	beq.n	8011d4e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	601a      	str	r2, [r3, #0]
 8011d4c:	e002      	b.n	8011d54 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	2200      	movs	r2, #0
 8011d52:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	2202      	movs	r2, #2
 8011d58:	4619      	mov	r1, r3
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f000 fbaf 	bl	80124be <USBD_CtlSendData>
          break;
 8011d60:	e004      	b.n	8011d6c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011d62:	6839      	ldr	r1, [r7, #0]
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f000 fb39 	bl	80123dc <USBD_CtlError>
        break;
 8011d6a:	bf00      	nop
      }
      break;
 8011d6c:	e004      	b.n	8011d78 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011d6e:	6839      	ldr	r1, [r7, #0]
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f000 fb33 	bl	80123dc <USBD_CtlError>
      break;
 8011d76:	bf00      	nop
    }
    break;
 8011d78:	e004      	b.n	8011d84 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011d7a:	6839      	ldr	r1, [r7, #0]
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f000 fb2d 	bl	80123dc <USBD_CtlError>
    break;
 8011d82:	bf00      	nop
  }

  return ret;
 8011d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3710      	adds	r7, #16
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
	...

08011d90 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011da2:	2300      	movs	r3, #0
 8011da4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	885b      	ldrh	r3, [r3, #2]
 8011daa:	0a1b      	lsrs	r3, r3, #8
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	3b01      	subs	r3, #1
 8011db0:	2b06      	cmp	r3, #6
 8011db2:	f200 8128 	bhi.w	8012006 <USBD_GetDescriptor+0x276>
 8011db6:	a201      	add	r2, pc, #4	; (adr r2, 8011dbc <USBD_GetDescriptor+0x2c>)
 8011db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dbc:	08011dd9 	.word	0x08011dd9
 8011dc0:	08011df1 	.word	0x08011df1
 8011dc4:	08011e31 	.word	0x08011e31
 8011dc8:	08012007 	.word	0x08012007
 8011dcc:	08012007 	.word	0x08012007
 8011dd0:	08011fa7 	.word	0x08011fa7
 8011dd4:	08011fd3 	.word	0x08011fd3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	7c12      	ldrb	r2, [r2, #16]
 8011de4:	f107 0108 	add.w	r1, r7, #8
 8011de8:	4610      	mov	r0, r2
 8011dea:	4798      	blx	r3
 8011dec:	60f8      	str	r0, [r7, #12]
    break;
 8011dee:	e112      	b.n	8012016 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	7c1b      	ldrb	r3, [r3, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d10d      	bne.n	8011e14 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e00:	f107 0208 	add.w	r2, r7, #8
 8011e04:	4610      	mov	r0, r2
 8011e06:	4798      	blx	r3
 8011e08:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	2202      	movs	r2, #2
 8011e10:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011e12:	e100      	b.n	8012016 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e1c:	f107 0208 	add.w	r2, r7, #8
 8011e20:	4610      	mov	r0, r2
 8011e22:	4798      	blx	r3
 8011e24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	2202      	movs	r2, #2
 8011e2c:	701a      	strb	r2, [r3, #0]
    break;
 8011e2e:	e0f2      	b.n	8012016 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	885b      	ldrh	r3, [r3, #2]
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	2b05      	cmp	r3, #5
 8011e38:	f200 80ac 	bhi.w	8011f94 <USBD_GetDescriptor+0x204>
 8011e3c:	a201      	add	r2, pc, #4	; (adr r2, 8011e44 <USBD_GetDescriptor+0xb4>)
 8011e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e42:	bf00      	nop
 8011e44:	08011e5d 	.word	0x08011e5d
 8011e48:	08011e91 	.word	0x08011e91
 8011e4c:	08011ec5 	.word	0x08011ec5
 8011e50:	08011ef9 	.word	0x08011ef9
 8011e54:	08011f2d 	.word	0x08011f2d
 8011e58:	08011f61 	.word	0x08011f61
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d00b      	beq.n	8011e80 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e6e:	685b      	ldr	r3, [r3, #4]
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	7c12      	ldrb	r2, [r2, #16]
 8011e74:	f107 0108 	add.w	r1, r7, #8
 8011e78:	4610      	mov	r0, r2
 8011e7a:	4798      	blx	r3
 8011e7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e7e:	e091      	b.n	8011fa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 faaa 	bl	80123dc <USBD_CtlError>
        err++;
 8011e88:	7afb      	ldrb	r3, [r7, #11]
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	72fb      	strb	r3, [r7, #11]
      break;
 8011e8e:	e089      	b.n	8011fa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00b      	beq.n	8011eb4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ea2:	689b      	ldr	r3, [r3, #8]
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	7c12      	ldrb	r2, [r2, #16]
 8011ea8:	f107 0108 	add.w	r1, r7, #8
 8011eac:	4610      	mov	r0, r2
 8011eae:	4798      	blx	r3
 8011eb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011eb2:	e077      	b.n	8011fa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011eb4:	6839      	ldr	r1, [r7, #0]
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f000 fa90 	bl	80123dc <USBD_CtlError>
        err++;
 8011ebc:	7afb      	ldrb	r3, [r7, #11]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	72fb      	strb	r3, [r7, #11]
      break;
 8011ec2:	e06f      	b.n	8011fa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00b      	beq.n	8011ee8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	7c12      	ldrb	r2, [r2, #16]
 8011edc:	f107 0108 	add.w	r1, r7, #8
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	4798      	blx	r3
 8011ee4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ee6:	e05d      	b.n	8011fa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011ee8:	6839      	ldr	r1, [r7, #0]
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 fa76 	bl	80123dc <USBD_CtlError>
        err++;
 8011ef0:	7afb      	ldrb	r3, [r7, #11]
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	72fb      	strb	r3, [r7, #11]
      break;
 8011ef6:	e055      	b.n	8011fa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011efe:	691b      	ldr	r3, [r3, #16]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d00b      	beq.n	8011f1c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f0a:	691b      	ldr	r3, [r3, #16]
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	7c12      	ldrb	r2, [r2, #16]
 8011f10:	f107 0108 	add.w	r1, r7, #8
 8011f14:	4610      	mov	r0, r2
 8011f16:	4798      	blx	r3
 8011f18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f1a:	e043      	b.n	8011fa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f1c:	6839      	ldr	r1, [r7, #0]
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f000 fa5c 	bl	80123dc <USBD_CtlError>
        err++;
 8011f24:	7afb      	ldrb	r3, [r7, #11]
 8011f26:	3301      	adds	r3, #1
 8011f28:	72fb      	strb	r3, [r7, #11]
      break;
 8011f2a:	e03b      	b.n	8011fa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f32:	695b      	ldr	r3, [r3, #20]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00b      	beq.n	8011f50 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f3e:	695b      	ldr	r3, [r3, #20]
 8011f40:	687a      	ldr	r2, [r7, #4]
 8011f42:	7c12      	ldrb	r2, [r2, #16]
 8011f44:	f107 0108 	add.w	r1, r7, #8
 8011f48:	4610      	mov	r0, r2
 8011f4a:	4798      	blx	r3
 8011f4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f4e:	e029      	b.n	8011fa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f000 fa42 	bl	80123dc <USBD_CtlError>
        err++;
 8011f58:	7afb      	ldrb	r3, [r7, #11]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	72fb      	strb	r3, [r7, #11]
      break;
 8011f5e:	e021      	b.n	8011fa4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f66:	699b      	ldr	r3, [r3, #24]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00b      	beq.n	8011f84 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f72:	699b      	ldr	r3, [r3, #24]
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	7c12      	ldrb	r2, [r2, #16]
 8011f78:	f107 0108 	add.w	r1, r7, #8
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	4798      	blx	r3
 8011f80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f82:	e00f      	b.n	8011fa4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011f84:	6839      	ldr	r1, [r7, #0]
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 fa28 	bl	80123dc <USBD_CtlError>
        err++;
 8011f8c:	7afb      	ldrb	r3, [r7, #11]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	72fb      	strb	r3, [r7, #11]
      break;
 8011f92:	e007      	b.n	8011fa4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011f94:	6839      	ldr	r1, [r7, #0]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 fa20 	bl	80123dc <USBD_CtlError>
      err++;
 8011f9c:	7afb      	ldrb	r3, [r7, #11]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011fa2:	bf00      	nop
    }
    break;
 8011fa4:	e037      	b.n	8012016 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	7c1b      	ldrb	r3, [r3, #16]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d109      	bne.n	8011fc2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fb6:	f107 0208 	add.w	r2, r7, #8
 8011fba:	4610      	mov	r0, r2
 8011fbc:	4798      	blx	r3
 8011fbe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011fc0:	e029      	b.n	8012016 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011fc2:	6839      	ldr	r1, [r7, #0]
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 fa09 	bl	80123dc <USBD_CtlError>
      err++;
 8011fca:	7afb      	ldrb	r3, [r7, #11]
 8011fcc:	3301      	adds	r3, #1
 8011fce:	72fb      	strb	r3, [r7, #11]
    break;
 8011fd0:	e021      	b.n	8012016 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	7c1b      	ldrb	r3, [r3, #16]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10d      	bne.n	8011ff6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fe2:	f107 0208 	add.w	r2, r7, #8
 8011fe6:	4610      	mov	r0, r2
 8011fe8:	4798      	blx	r3
 8011fea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	2207      	movs	r2, #7
 8011ff2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011ff4:	e00f      	b.n	8012016 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011ff6:	6839      	ldr	r1, [r7, #0]
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 f9ef 	bl	80123dc <USBD_CtlError>
      err++;
 8011ffe:	7afb      	ldrb	r3, [r7, #11]
 8012000:	3301      	adds	r3, #1
 8012002:	72fb      	strb	r3, [r7, #11]
    break;
 8012004:	e007      	b.n	8012016 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8012006:	6839      	ldr	r1, [r7, #0]
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f000 f9e7 	bl	80123dc <USBD_CtlError>
    err++;
 801200e:	7afb      	ldrb	r3, [r7, #11]
 8012010:	3301      	adds	r3, #1
 8012012:	72fb      	strb	r3, [r7, #11]
    break;
 8012014:	bf00      	nop
  }

  if (err != 0U)
 8012016:	7afb      	ldrb	r3, [r7, #11]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d11e      	bne.n	801205a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	88db      	ldrh	r3, [r3, #6]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d016      	beq.n	8012052 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8012024:	893b      	ldrh	r3, [r7, #8]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00e      	beq.n	8012048 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	88da      	ldrh	r2, [r3, #6]
 801202e:	893b      	ldrh	r3, [r7, #8]
 8012030:	4293      	cmp	r3, r2
 8012032:	bf28      	it	cs
 8012034:	4613      	movcs	r3, r2
 8012036:	b29b      	uxth	r3, r3
 8012038:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801203a:	893b      	ldrh	r3, [r7, #8]
 801203c:	461a      	mov	r2, r3
 801203e:	68f9      	ldr	r1, [r7, #12]
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f000 fa3c 	bl	80124be <USBD_CtlSendData>
 8012046:	e009      	b.n	801205c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8012048:	6839      	ldr	r1, [r7, #0]
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f000 f9c6 	bl	80123dc <USBD_CtlError>
 8012050:	e004      	b.n	801205c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f000 fa8d 	bl	8012572 <USBD_CtlSendStatus>
 8012058:	e000      	b.n	801205c <USBD_GetDescriptor+0x2cc>
    return;
 801205a:	bf00      	nop
    }
  }
}
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop

08012064 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	889b      	ldrh	r3, [r3, #4]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d130      	bne.n	80120d8 <USBD_SetAddress+0x74>
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	88db      	ldrh	r3, [r3, #6]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d12c      	bne.n	80120d8 <USBD_SetAddress+0x74>
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	885b      	ldrh	r3, [r3, #2]
 8012082:	2b7f      	cmp	r3, #127	; 0x7f
 8012084:	d828      	bhi.n	80120d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	885b      	ldrh	r3, [r3, #2]
 801208a:	b2db      	uxtb	r3, r3
 801208c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012090:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012098:	2b03      	cmp	r3, #3
 801209a:	d104      	bne.n	80120a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801209c:	6839      	ldr	r1, [r7, #0]
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 f99c 	bl	80123dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120a4:	e01c      	b.n	80120e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	7bfa      	ldrb	r2, [r7, #15]
 80120aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80120ae:	7bfb      	ldrb	r3, [r7, #15]
 80120b0:	4619      	mov	r1, r3
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f003 fd88 	bl	8015bc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 fa5a 	bl	8012572 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80120be:	7bfb      	ldrb	r3, [r7, #15]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d004      	beq.n	80120ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2202      	movs	r2, #2
 80120c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120cc:	e008      	b.n	80120e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2201      	movs	r2, #1
 80120d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120d6:	e003      	b.n	80120e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80120d8:	6839      	ldr	r1, [r7, #0]
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 f97e 	bl	80123dc <USBD_CtlError>
  }
}
 80120e0:	bf00      	nop
 80120e2:	3710      	adds	r7, #16
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80120f2:	2300      	movs	r3, #0
 80120f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	885b      	ldrh	r3, [r3, #2]
 80120fa:	b2da      	uxtb	r2, r3
 80120fc:	4b4b      	ldr	r3, [pc, #300]	; (801222c <USBD_SetConfig+0x144>)
 80120fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012100:	4b4a      	ldr	r3, [pc, #296]	; (801222c <USBD_SetConfig+0x144>)
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	2b01      	cmp	r3, #1
 8012106:	d905      	bls.n	8012114 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 f966 	bl	80123dc <USBD_CtlError>
    return USBD_FAIL;
 8012110:	2303      	movs	r3, #3
 8012112:	e087      	b.n	8012224 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801211a:	2b02      	cmp	r3, #2
 801211c:	d002      	beq.n	8012124 <USBD_SetConfig+0x3c>
 801211e:	2b03      	cmp	r3, #3
 8012120:	d025      	beq.n	801216e <USBD_SetConfig+0x86>
 8012122:	e071      	b.n	8012208 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8012124:	4b41      	ldr	r3, [pc, #260]	; (801222c <USBD_SetConfig+0x144>)
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d01c      	beq.n	8012166 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801212c:	4b3f      	ldr	r3, [pc, #252]	; (801222c <USBD_SetConfig+0x144>)
 801212e:	781b      	ldrb	r3, [r3, #0]
 8012130:	461a      	mov	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012136:	4b3d      	ldr	r3, [pc, #244]	; (801222c <USBD_SetConfig+0x144>)
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	4619      	mov	r1, r3
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f7ff f9a7 	bl	8011490 <USBD_SetClassConfig>
 8012142:	4603      	mov	r3, r0
 8012144:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8012146:	7bfb      	ldrb	r3, [r7, #15]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d004      	beq.n	8012156 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801214c:	6839      	ldr	r1, [r7, #0]
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f000 f944 	bl	80123dc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012154:	e065      	b.n	8012222 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f000 fa0b 	bl	8012572 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2203      	movs	r2, #3
 8012160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012164:	e05d      	b.n	8012222 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 fa03 	bl	8012572 <USBD_CtlSendStatus>
    break;
 801216c:	e059      	b.n	8012222 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801216e:	4b2f      	ldr	r3, [pc, #188]	; (801222c <USBD_SetConfig+0x144>)
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d112      	bne.n	801219c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2202      	movs	r2, #2
 801217a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801217e:	4b2b      	ldr	r3, [pc, #172]	; (801222c <USBD_SetConfig+0x144>)
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	461a      	mov	r2, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012188:	4b28      	ldr	r3, [pc, #160]	; (801222c <USBD_SetConfig+0x144>)
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	4619      	mov	r1, r3
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7ff f99a 	bl	80114c8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 f9ec 	bl	8012572 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801219a:	e042      	b.n	8012222 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801219c:	4b23      	ldr	r3, [pc, #140]	; (801222c <USBD_SetConfig+0x144>)
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	461a      	mov	r2, r3
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d02a      	beq.n	8012200 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	4619      	mov	r1, r3
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7ff f988 	bl	80114c8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80121b8:	4b1c      	ldr	r3, [pc, #112]	; (801222c <USBD_SetConfig+0x144>)
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	461a      	mov	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80121c2:	4b1a      	ldr	r3, [pc, #104]	; (801222c <USBD_SetConfig+0x144>)
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	4619      	mov	r1, r3
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7ff f961 	bl	8011490 <USBD_SetClassConfig>
 80121ce:	4603      	mov	r3, r0
 80121d0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80121d2:	7bfb      	ldrb	r3, [r7, #15]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00f      	beq.n	80121f8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80121d8:	6839      	ldr	r1, [r7, #0]
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 f8fe 	bl	80123dc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	4619      	mov	r1, r3
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f7ff f96d 	bl	80114c8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2202      	movs	r2, #2
 80121f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80121f6:	e014      	b.n	8012222 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 f9ba 	bl	8012572 <USBD_CtlSendStatus>
    break;
 80121fe:	e010      	b.n	8012222 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f000 f9b6 	bl	8012572 <USBD_CtlSendStatus>
    break;
 8012206:	e00c      	b.n	8012222 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012208:	6839      	ldr	r1, [r7, #0]
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 f8e6 	bl	80123dc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012210:	4b06      	ldr	r3, [pc, #24]	; (801222c <USBD_SetConfig+0x144>)
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	4619      	mov	r1, r3
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7ff f956 	bl	80114c8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801221c:	2303      	movs	r3, #3
 801221e:	73fb      	strb	r3, [r7, #15]
    break;
 8012220:	bf00      	nop
  }

  return ret;
 8012222:	7bfb      	ldrb	r3, [r7, #15]
}
 8012224:	4618      	mov	r0, r3
 8012226:	3710      	adds	r7, #16
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	20002860 	.word	0x20002860

08012230 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	88db      	ldrh	r3, [r3, #6]
 801223e:	2b01      	cmp	r3, #1
 8012240:	d004      	beq.n	801224c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012242:	6839      	ldr	r1, [r7, #0]
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 f8c9 	bl	80123dc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801224a:	e021      	b.n	8012290 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012252:	2b01      	cmp	r3, #1
 8012254:	db17      	blt.n	8012286 <USBD_GetConfig+0x56>
 8012256:	2b02      	cmp	r3, #2
 8012258:	dd02      	ble.n	8012260 <USBD_GetConfig+0x30>
 801225a:	2b03      	cmp	r3, #3
 801225c:	d00b      	beq.n	8012276 <USBD_GetConfig+0x46>
 801225e:	e012      	b.n	8012286 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	3308      	adds	r3, #8
 801226a:	2201      	movs	r2, #1
 801226c:	4619      	mov	r1, r3
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 f925 	bl	80124be <USBD_CtlSendData>
      break;
 8012274:	e00c      	b.n	8012290 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	3304      	adds	r3, #4
 801227a:	2201      	movs	r2, #1
 801227c:	4619      	mov	r1, r3
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f000 f91d 	bl	80124be <USBD_CtlSendData>
      break;
 8012284:	e004      	b.n	8012290 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8012286:	6839      	ldr	r1, [r7, #0]
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f8a7 	bl	80123dc <USBD_CtlError>
      break;
 801228e:	bf00      	nop
}
 8012290:	bf00      	nop
 8012292:	3708      	adds	r7, #8
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}

08012298 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122a8:	3b01      	subs	r3, #1
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d81e      	bhi.n	80122ec <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	88db      	ldrh	r3, [r3, #6]
 80122b2:	2b02      	cmp	r3, #2
 80122b4:	d004      	beq.n	80122c0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 f88f 	bl	80123dc <USBD_CtlError>
      break;
 80122be:	e01a      	b.n	80122f6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2201      	movs	r2, #1
 80122c4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d005      	beq.n	80122dc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	f043 0202 	orr.w	r2, r3, #2
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	330c      	adds	r3, #12
 80122e0:	2202      	movs	r2, #2
 80122e2:	4619      	mov	r1, r3
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 f8ea 	bl	80124be <USBD_CtlSendData>
    break;
 80122ea:	e004      	b.n	80122f6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80122ec:	6839      	ldr	r1, [r7, #0]
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f000 f874 	bl	80123dc <USBD_CtlError>
    break;
 80122f4:	bf00      	nop
  }
}
 80122f6:	bf00      	nop
 80122f8:	3708      	adds	r7, #8
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}

080122fe <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122fe:	b580      	push	{r7, lr}
 8012300:	b082      	sub	sp, #8
 8012302:	af00      	add	r7, sp, #0
 8012304:	6078      	str	r0, [r7, #4]
 8012306:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	885b      	ldrh	r3, [r3, #2]
 801230c:	2b01      	cmp	r3, #1
 801230e:	d106      	bne.n	801231e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2201      	movs	r2, #1
 8012314:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f000 f92a 	bl	8012572 <USBD_CtlSendStatus>
  }
}
 801231e:	bf00      	nop
 8012320:	3708      	adds	r7, #8
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}

08012326 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012326:	b580      	push	{r7, lr}
 8012328:	b082      	sub	sp, #8
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
 801232e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012336:	3b01      	subs	r3, #1
 8012338:	2b02      	cmp	r3, #2
 801233a:	d80b      	bhi.n	8012354 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	885b      	ldrh	r3, [r3, #2]
 8012340:	2b01      	cmp	r3, #1
 8012342:	d10c      	bne.n	801235e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2200      	movs	r2, #0
 8012348:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f000 f910 	bl	8012572 <USBD_CtlSendStatus>
      }
      break;
 8012352:	e004      	b.n	801235e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012354:	6839      	ldr	r1, [r7, #0]
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 f840 	bl	80123dc <USBD_CtlError>
      break;
 801235c:	e000      	b.n	8012360 <USBD_ClrFeature+0x3a>
      break;
 801235e:	bf00      	nop
  }
}
 8012360:	bf00      	nop
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	781a      	ldrb	r2, [r3, #0]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	3301      	adds	r3, #1
 8012382:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	781a      	ldrb	r2, [r3, #0]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	3301      	adds	r3, #1
 8012390:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012392:	68f8      	ldr	r0, [r7, #12]
 8012394:	f7ff fad3 	bl	801193e <SWAPBYTE>
 8012398:	4603      	mov	r3, r0
 801239a:	461a      	mov	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	3301      	adds	r3, #1
 80123a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	3301      	adds	r3, #1
 80123aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80123ac:	68f8      	ldr	r0, [r7, #12]
 80123ae:	f7ff fac6 	bl	801193e <SWAPBYTE>
 80123b2:	4603      	mov	r3, r0
 80123b4:	461a      	mov	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	3301      	adds	r3, #1
 80123be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	3301      	adds	r3, #1
 80123c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	f7ff fab9 	bl	801193e <SWAPBYTE>
 80123cc:	4603      	mov	r3, r0
 80123ce:	461a      	mov	r2, r3
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	80da      	strh	r2, [r3, #6]
}
 80123d4:	bf00      	nop
 80123d6:	3710      	adds	r7, #16
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80123e6:	2180      	movs	r1, #128	; 0x80
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f003 fb83 	bl	8015af4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80123ee:	2100      	movs	r1, #0
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f003 fb7f 	bl	8015af4 <USBD_LL_StallEP>
}
 80123f6:	bf00      	nop
 80123f8:	3708      	adds	r7, #8
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80123fe:	b580      	push	{r7, lr}
 8012400:	b086      	sub	sp, #24
 8012402:	af00      	add	r7, sp, #0
 8012404:	60f8      	str	r0, [r7, #12]
 8012406:	60b9      	str	r1, [r7, #8]
 8012408:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801240a:	2300      	movs	r3, #0
 801240c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d036      	beq.n	8012482 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012418:	6938      	ldr	r0, [r7, #16]
 801241a:	f000 f836 	bl	801248a <USBD_GetLen>
 801241e:	4603      	mov	r3, r0
 8012420:	3301      	adds	r3, #1
 8012422:	b29b      	uxth	r3, r3
 8012424:	005b      	lsls	r3, r3, #1
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801242c:	7dfb      	ldrb	r3, [r7, #23]
 801242e:	68ba      	ldr	r2, [r7, #8]
 8012430:	4413      	add	r3, r2
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	7812      	ldrb	r2, [r2, #0]
 8012436:	701a      	strb	r2, [r3, #0]
  idx++;
 8012438:	7dfb      	ldrb	r3, [r7, #23]
 801243a:	3301      	adds	r3, #1
 801243c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801243e:	7dfb      	ldrb	r3, [r7, #23]
 8012440:	68ba      	ldr	r2, [r7, #8]
 8012442:	4413      	add	r3, r2
 8012444:	2203      	movs	r2, #3
 8012446:	701a      	strb	r2, [r3, #0]
  idx++;
 8012448:	7dfb      	ldrb	r3, [r7, #23]
 801244a:	3301      	adds	r3, #1
 801244c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801244e:	e013      	b.n	8012478 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012450:	7dfb      	ldrb	r3, [r7, #23]
 8012452:	68ba      	ldr	r2, [r7, #8]
 8012454:	4413      	add	r3, r2
 8012456:	693a      	ldr	r2, [r7, #16]
 8012458:	7812      	ldrb	r2, [r2, #0]
 801245a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	3301      	adds	r3, #1
 8012460:	613b      	str	r3, [r7, #16]
    idx++;
 8012462:	7dfb      	ldrb	r3, [r7, #23]
 8012464:	3301      	adds	r3, #1
 8012466:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012468:	7dfb      	ldrb	r3, [r7, #23]
 801246a:	68ba      	ldr	r2, [r7, #8]
 801246c:	4413      	add	r3, r2
 801246e:	2200      	movs	r2, #0
 8012470:	701a      	strb	r2, [r3, #0]
    idx++;
 8012472:	7dfb      	ldrb	r3, [r7, #23]
 8012474:	3301      	adds	r3, #1
 8012476:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d1e7      	bne.n	8012450 <USBD_GetString+0x52>
 8012480:	e000      	b.n	8012484 <USBD_GetString+0x86>
    return;
 8012482:	bf00      	nop
  }
}
 8012484:	3718      	adds	r7, #24
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801248a:	b480      	push	{r7}
 801248c:	b085      	sub	sp, #20
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012492:	2300      	movs	r3, #0
 8012494:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801249a:	e005      	b.n	80124a8 <USBD_GetLen+0x1e>
  {
    len++;
 801249c:	7bfb      	ldrb	r3, [r7, #15]
 801249e:	3301      	adds	r3, #1
 80124a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	3301      	adds	r3, #1
 80124a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d1f5      	bne.n	801249c <USBD_GetLen+0x12>
  }

  return len;
 80124b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3714      	adds	r7, #20
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr

080124be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80124be:	b580      	push	{r7, lr}
 80124c0:	b084      	sub	sp, #16
 80124c2:	af00      	add	r7, sp, #0
 80124c4:	60f8      	str	r0, [r7, #12]
 80124c6:	60b9      	str	r1, [r7, #8]
 80124c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2202      	movs	r2, #2
 80124ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	68ba      	ldr	r2, [r7, #8]
 80124e2:	2100      	movs	r1, #0
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	f003 fb8e 	bl	8015c06 <USBD_LL_Transmit>

  return USBD_OK;
 80124ea:	2300      	movs	r3, #0
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3710      	adds	r7, #16
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}

080124f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b084      	sub	sp, #16
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	68ba      	ldr	r2, [r7, #8]
 8012504:	2100      	movs	r1, #0
 8012506:	68f8      	ldr	r0, [r7, #12]
 8012508:	f003 fb7d 	bl	8015c06 <USBD_LL_Transmit>

  return USBD_OK;
 801250c:	2300      	movs	r3, #0
}
 801250e:	4618      	mov	r0, r3
 8012510:	3710      	adds	r7, #16
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}

08012516 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012516:	b580      	push	{r7, lr}
 8012518:	b084      	sub	sp, #16
 801251a:	af00      	add	r7, sp, #0
 801251c:	60f8      	str	r0, [r7, #12]
 801251e:	60b9      	str	r1, [r7, #8]
 8012520:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2203      	movs	r2, #3
 8012526:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	68ba      	ldr	r2, [r7, #8]
 801253e:	2100      	movs	r1, #0
 8012540:	68f8      	ldr	r0, [r7, #12]
 8012542:	f003 fb81 	bl	8015c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012546:	2300      	movs	r3, #0
}
 8012548:	4618      	mov	r0, r3
 801254a:	3710      	adds	r7, #16
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	68ba      	ldr	r2, [r7, #8]
 8012560:	2100      	movs	r1, #0
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f003 fb70 	bl	8015c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012568:	2300      	movs	r3, #0
}
 801256a:	4618      	mov	r0, r3
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b082      	sub	sp, #8
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2204      	movs	r2, #4
 801257e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012582:	2300      	movs	r3, #0
 8012584:	2200      	movs	r2, #0
 8012586:	2100      	movs	r1, #0
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f003 fb3c 	bl	8015c06 <USBD_LL_Transmit>

  return USBD_OK;
 801258e:	2300      	movs	r3, #0
}
 8012590:	4618      	mov	r0, r3
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2205      	movs	r2, #5
 80125a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80125a8:	2300      	movs	r3, #0
 80125aa:	2200      	movs	r2, #0
 80125ac:	2100      	movs	r1, #0
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f003 fb4a 	bl	8015c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3708      	adds	r7, #8
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80125be:	b480      	push	{r7}
 80125c0:	b085      	sub	sp, #20
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	4603      	mov	r3, r0
 80125c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80125c8:	2300      	movs	r3, #0
 80125ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80125cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125d0:	2b84      	cmp	r3, #132	; 0x84
 80125d2:	d005      	beq.n	80125e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80125d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	4413      	add	r3, r2
 80125dc:	3303      	adds	r3, #3
 80125de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80125e0:	68fb      	ldr	r3, [r7, #12]
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3714      	adds	r7, #20
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr

080125ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80125ee:	b480      	push	{r7}
 80125f0:	b083      	sub	sp, #12
 80125f2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125f4:	f3ef 8305 	mrs	r3, IPSR
 80125f8:	607b      	str	r3, [r7, #4]
  return(result);
 80125fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	bf14      	ite	ne
 8012600:	2301      	movne	r3, #1
 8012602:	2300      	moveq	r3, #0
 8012604:	b2db      	uxtb	r3, r3
}
 8012606:	4618      	mov	r0, r3
 8012608:	370c      	adds	r7, #12
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr

08012612 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012612:	b580      	push	{r7, lr}
 8012614:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012616:	f001 fb31 	bl	8013c7c <vTaskStartScheduler>
  
  return osOK;
 801261a:	2300      	movs	r3, #0
}
 801261c:	4618      	mov	r0, r3
 801261e:	bd80      	pop	{r7, pc}

08012620 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012622:	b089      	sub	sp, #36	; 0x24
 8012624:	af04      	add	r7, sp, #16
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	695b      	ldr	r3, [r3, #20]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d020      	beq.n	8012674 <osThreadCreate+0x54>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	699b      	ldr	r3, [r3, #24]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d01c      	beq.n	8012674 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	685c      	ldr	r4, [r3, #4]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681d      	ldr	r5, [r3, #0]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	691e      	ldr	r6, [r3, #16]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801264c:	4618      	mov	r0, r3
 801264e:	f7ff ffb6 	bl	80125be <makeFreeRtosPriority>
 8012652:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	695b      	ldr	r3, [r3, #20]
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801265c:	9202      	str	r2, [sp, #8]
 801265e:	9301      	str	r3, [sp, #4]
 8012660:	9100      	str	r1, [sp, #0]
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	4632      	mov	r2, r6
 8012666:	4629      	mov	r1, r5
 8012668:	4620      	mov	r0, r4
 801266a:	f001 f944 	bl	80138f6 <xTaskCreateStatic>
 801266e:	4603      	mov	r3, r0
 8012670:	60fb      	str	r3, [r7, #12]
 8012672:	e01c      	b.n	80126ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685c      	ldr	r4, [r3, #4]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012680:	b29e      	uxth	r6, r3
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012688:	4618      	mov	r0, r3
 801268a:	f7ff ff98 	bl	80125be <makeFreeRtosPriority>
 801268e:	4602      	mov	r2, r0
 8012690:	f107 030c 	add.w	r3, r7, #12
 8012694:	9301      	str	r3, [sp, #4]
 8012696:	9200      	str	r2, [sp, #0]
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	4632      	mov	r2, r6
 801269c:	4629      	mov	r1, r5
 801269e:	4620      	mov	r0, r4
 80126a0:	f001 f983 	bl	80139aa <xTaskCreate>
 80126a4:	4603      	mov	r3, r0
 80126a6:	2b01      	cmp	r3, #1
 80126a8:	d001      	beq.n	80126ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80126aa:	2300      	movs	r3, #0
 80126ac:	e000      	b.n	80126b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80126ae:	68fb      	ldr	r3, [r7, #12]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3714      	adds	r7, #20
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080126b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d001      	beq.n	80126ce <osDelay+0x16>
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	e000      	b.n	80126d0 <osDelay+0x18>
 80126ce:	2301      	movs	r3, #1
 80126d0:	4618      	mov	r0, r3
 80126d2:	f001 fa9f 	bl	8013c14 <vTaskDelay>
  
  return osOK;
 80126d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3710      	adds	r7, #16
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af02      	add	r7, sp, #8
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80126ea:	2300      	movs	r3, #0
 80126ec:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80126ee:	2300      	movs	r3, #0
 80126f0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80126f2:	f7ff ff7c 	bl	80125ee <inHandlerMode>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d01c      	beq.n	8012736 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80126fc:	6839      	ldr	r1, [r7, #0]
 80126fe:	f107 0208 	add.w	r2, r7, #8
 8012702:	f107 030c 	add.w	r3, r7, #12
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	4613      	mov	r3, r2
 801270a:	2201      	movs	r2, #1
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f002 f857 	bl	80147c0 <xTaskGenericNotifyFromISR>
 8012712:	4603      	mov	r3, r0
 8012714:	2b01      	cmp	r3, #1
 8012716:	d002      	beq.n	801271e <osSignalSet+0x3e>
      return 0x80000000;
 8012718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801271c:	e019      	b.n	8012752 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d015      	beq.n	8012750 <osSignalSet+0x70>
 8012724:	4b0d      	ldr	r3, [pc, #52]	; (801275c <osSignalSet+0x7c>)
 8012726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801272a:	601a      	str	r2, [r3, #0]
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	f3bf 8f6f 	isb	sy
 8012734:	e00c      	b.n	8012750 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012736:	6839      	ldr	r1, [r7, #0]
 8012738:	f107 0308 	add.w	r3, r7, #8
 801273c:	2201      	movs	r2, #1
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f001 ff8c 	bl	801465c <xTaskGenericNotify>
 8012744:	4603      	mov	r3, r0
 8012746:	2b01      	cmp	r3, #1
 8012748:	d002      	beq.n	8012750 <osSignalSet+0x70>
    return 0x80000000;
 801274a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801274e:	e000      	b.n	8012752 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012750:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012752:	4618      	mov	r0, r3
 8012754:	3710      	adds	r7, #16
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	e000ed04 	.word	0xe000ed04

08012760 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012760:	b590      	push	{r4, r7, lr}
 8012762:	b089      	sub	sp, #36	; 0x24
 8012764:	af00      	add	r7, sp, #0
 8012766:	60f8      	str	r0, [r7, #12]
 8012768:	60b9      	str	r1, [r7, #8]
 801276a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 801276c:	2300      	movs	r3, #0
 801276e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012770:	2300      	movs	r3, #0
 8012772:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801277a:	d103      	bne.n	8012784 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 801277c:	f04f 33ff 	mov.w	r3, #4294967295
 8012780:	61fb      	str	r3, [r7, #28]
 8012782:	e009      	b.n	8012798 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d006      	beq.n	8012798 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d101      	bne.n	8012798 <osSignalWait+0x38>
      ticks = 1;
 8012794:	2301      	movs	r3, #1
 8012796:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012798:	f7ff ff29 	bl	80125ee <inHandlerMode>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d002      	beq.n	80127a8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80127a2:	2382      	movs	r3, #130	; 0x82
 80127a4:	613b      	str	r3, [r7, #16]
 80127a6:	e01b      	b.n	80127e0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80127a8:	68b9      	ldr	r1, [r7, #8]
 80127aa:	f107 0310 	add.w	r3, r7, #16
 80127ae:	1d1a      	adds	r2, r3, #4
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	2000      	movs	r0, #0
 80127b4:	f001 fef8 	bl	80145a8 <xTaskNotifyWait>
 80127b8:	4603      	mov	r3, r0
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d008      	beq.n	80127d0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d102      	bne.n	80127ca <osSignalWait+0x6a>
 80127c4:	2300      	movs	r3, #0
 80127c6:	613b      	str	r3, [r7, #16]
 80127c8:	e00a      	b.n	80127e0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80127ca:	2340      	movs	r3, #64	; 0x40
 80127cc:	613b      	str	r3, [r7, #16]
 80127ce:	e007      	b.n	80127e0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	da02      	bge.n	80127dc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80127d6:	2386      	movs	r3, #134	; 0x86
 80127d8:	613b      	str	r3, [r7, #16]
 80127da:	e001      	b.n	80127e0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80127dc:	2308      	movs	r3, #8
 80127de:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	461c      	mov	r4, r3
 80127e4:	f107 0310 	add.w	r3, r7, #16
 80127e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80127ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	3724      	adds	r7, #36	; 0x24
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd90      	pop	{r4, r7, pc}

080127f8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d007      	beq.n	8012818 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	4619      	mov	r1, r3
 801280e:	2001      	movs	r0, #1
 8012810:	f000 fc5f 	bl	80130d2 <xQueueCreateMutexStatic>
 8012814:	4603      	mov	r3, r0
 8012816:	e003      	b.n	8012820 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012818:	2001      	movs	r0, #1
 801281a:	f000 fc42 	bl	80130a2 <xQueueCreateMutex>
 801281e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b086      	sub	sp, #24
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	3303      	adds	r3, #3
 8012836:	f023 0303 	bic.w	r3, r3, #3
 801283a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801283c:	2014      	movs	r0, #20
 801283e:	f002 fb3f 	bl	8014ec0 <pvPortMalloc>
 8012842:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d046      	beq.n	80128d8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	2200      	movs	r2, #0
 801285c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4618      	mov	r0, r3
 8012864:	f002 fb2c 	bl	8014ec0 <pvPortMalloc>
 8012868:	4602      	mov	r2, r0
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d02b      	beq.n	80128ce <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	68fa      	ldr	r2, [r7, #12]
 801287c:	fb02 f303 	mul.w	r3, r2, r3
 8012880:	4618      	mov	r0, r3
 8012882:	f002 fb1d 	bl	8014ec0 <pvPortMalloc>
 8012886:	4602      	mov	r2, r0
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d011      	beq.n	80128b8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012894:	2300      	movs	r3, #0
 8012896:	613b      	str	r3, [r7, #16]
 8012898:	e008      	b.n	80128ac <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	685a      	ldr	r2, [r3, #4]
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	4413      	add	r3, r2
 80128a2:	2200      	movs	r2, #0
 80128a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	3301      	adds	r3, #1
 80128aa:	613b      	str	r3, [r7, #16]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	693a      	ldr	r2, [r7, #16]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d3f1      	bcc.n	801289a <osPoolCreate+0x72>
 80128b6:	e00f      	b.n	80128d8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	4618      	mov	r0, r3
 80128be:	f002 fbc1 	bl	8015044 <vPortFree>
        vPortFree(thePool);
 80128c2:	6978      	ldr	r0, [r7, #20]
 80128c4:	f002 fbbe 	bl	8015044 <vPortFree>
        thePool = NULL;
 80128c8:	2300      	movs	r3, #0
 80128ca:	617b      	str	r3, [r7, #20]
 80128cc:	e004      	b.n	80128d8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80128ce:	6978      	ldr	r0, [r7, #20]
 80128d0:	f002 fbb8 	bl	8015044 <vPortFree>
      thePool = NULL;
 80128d4:	2300      	movs	r3, #0
 80128d6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80128d8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3718      	adds	r7, #24
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}

080128e2 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80128e2:	b580      	push	{r7, lr}
 80128e4:	b08a      	sub	sp, #40	; 0x28
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80128ea:	2300      	movs	r3, #0
 80128ec:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80128ee:	2300      	movs	r3, #0
 80128f0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80128f2:	f7ff fe7c 	bl	80125ee <inHandlerMode>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00e      	beq.n	801291a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80128fc:	f3ef 8211 	mrs	r2, BASEPRI
 8012900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012904:	f383 8811 	msr	BASEPRI, r3
 8012908:	f3bf 8f6f 	isb	sy
 801290c:	f3bf 8f4f 	dsb	sy
 8012910:	617a      	str	r2, [r7, #20]
 8012912:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012914:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012916:	627b      	str	r3, [r7, #36]	; 0x24
 8012918:	e001      	b.n	801291e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801291a:	f002 f9b7 	bl	8014c8c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801291e:	2300      	movs	r3, #0
 8012920:	61fb      	str	r3, [r7, #28]
 8012922:	e029      	b.n	8012978 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	691a      	ldr	r2, [r3, #16]
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	4413      	add	r3, r2
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	6892      	ldr	r2, [r2, #8]
 8012930:	fbb3 f1f2 	udiv	r1, r3, r2
 8012934:	fb02 f201 	mul.w	r2, r2, r1
 8012938:	1a9b      	subs	r3, r3, r2
 801293a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	685a      	ldr	r2, [r3, #4]
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	4413      	add	r3, r2
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d113      	bne.n	8012972 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685a      	ldr	r2, [r3, #4]
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	4413      	add	r3, r2
 8012952:	2201      	movs	r2, #1
 8012954:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	4619      	mov	r1, r3
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	69ba      	ldr	r2, [r7, #24]
 8012962:	fb02 f303 	mul.w	r3, r2, r3
 8012966:	440b      	add	r3, r1
 8012968:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	69ba      	ldr	r2, [r7, #24]
 801296e:	611a      	str	r2, [r3, #16]
      break;
 8012970:	e007      	b.n	8012982 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	3301      	adds	r3, #1
 8012976:	61fb      	str	r3, [r7, #28]
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	689b      	ldr	r3, [r3, #8]
 801297c:	69fa      	ldr	r2, [r7, #28]
 801297e:	429a      	cmp	r2, r3
 8012980:	d3d0      	bcc.n	8012924 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012982:	f7ff fe34 	bl	80125ee <inHandlerMode>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d005      	beq.n	8012998 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 801298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f383 8811 	msr	BASEPRI, r3
 8012996:	e001      	b.n	801299c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012998:	f002 f9a6 	bl	8014ce8 <vPortExitCritical>
  }
  
  return p;
 801299c:	6a3b      	ldr	r3, [r7, #32]
}
 801299e:	4618      	mov	r0, r3
 80129a0:	3728      	adds	r7, #40	; 0x28
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80129a6:	b480      	push	{r7}
 80129a8:	b085      	sub	sp, #20
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
 80129ae:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d101      	bne.n	80129ba <osPoolFree+0x14>
    return osErrorParameter;
 80129b6:	2380      	movs	r3, #128	; 0x80
 80129b8:	e030      	b.n	8012a1c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d101      	bne.n	80129c4 <osPoolFree+0x1e>
    return osErrorParameter;
 80129c0:	2380      	movs	r3, #128	; 0x80
 80129c2:	e02b      	b.n	8012a1c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	683a      	ldr	r2, [r7, #0]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d201      	bcs.n	80129d2 <osPoolFree+0x2c>
    return osErrorParameter;
 80129ce:	2380      	movs	r3, #128	; 0x80
 80129d0:	e024      	b.n	8012a1c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	6812      	ldr	r2, [r2, #0]
 80129d8:	1a9b      	subs	r3, r3, r2
 80129da:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	68da      	ldr	r2, [r3, #12]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80129e6:	fb02 f201 	mul.w	r2, r2, r1
 80129ea:	1a9b      	subs	r3, r3, r2
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d001      	beq.n	80129f4 <osPoolFree+0x4e>
    return osErrorParameter;
 80129f0:	2380      	movs	r3, #128	; 0x80
 80129f2:	e013      	b.n	8012a1c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80129fe:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	689b      	ldr	r3, [r3, #8]
 8012a04:	68fa      	ldr	r2, [r7, #12]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d301      	bcc.n	8012a0e <osPoolFree+0x68>
    return osErrorParameter;
 8012a0a:	2380      	movs	r3, #128	; 0x80
 8012a0c:	e006      	b.n	8012a1c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	685a      	ldr	r2, [r3, #4]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	4413      	add	r3, r2
 8012a16:	2200      	movs	r2, #0
 8012a18:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012a1a:	2300      	movs	r3, #0
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3714      	adds	r7, #20
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr

08012a28 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b087      	sub	sp, #28
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	60fb      	str	r3, [r7, #12]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	613b      	str	r3, [r7, #16]
 8012a3e:	2300      	movs	r3, #0
 8012a40:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	689c      	ldr	r4, [r3, #8]
 8012a46:	200c      	movs	r0, #12
 8012a48:	f002 fa3a 	bl	8014ec0 <pvPortMalloc>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	689b      	ldr	r3, [r3, #8]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d101      	bne.n	8012a5e <osMailCreate+0x36>
    return NULL;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	e038      	b.n	8012ad0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	689b      	ldr	r3, [r3, #8]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6818      	ldr	r0, [r3, #0]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	689b      	ldr	r3, [r3, #8]
 8012a70:	681c      	ldr	r4, [r3, #0]
 8012a72:	2200      	movs	r2, #0
 8012a74:	2104      	movs	r1, #4
 8012a76:	f000 fa9c 	bl	8012fb2 <xQueueGenericCreate>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	689b      	ldr	r3, [r3, #8]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d107      	bne.n	8012a9a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	689b      	ldr	r3, [r3, #8]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4618      	mov	r0, r3
 8012a92:	f002 fad7 	bl	8015044 <vPortFree>
    return NULL;
 8012a96:	2300      	movs	r3, #0
 8012a98:	e01a      	b.n	8012ad0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	689b      	ldr	r3, [r3, #8]
 8012a9e:	681c      	ldr	r4, [r3, #0]
 8012aa0:	f107 030c 	add.w	r3, r7, #12
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7ff febf 	bl	8012828 <osPoolCreate>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	689b      	ldr	r3, [r3, #8]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	689b      	ldr	r3, [r3, #8]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d107      	bne.n	8012aca <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	689b      	ldr	r3, [r3, #8]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f002 fabf 	bl	8015044 <vPortFree>
    return NULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	e002      	b.n	8012ad0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	689b      	ldr	r3, [r3, #8]
 8012ace:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	371c      	adds	r7, #28
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd90      	pop	{r4, r7, pc}

08012ad8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b084      	sub	sp, #16
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <osMailAlloc+0x14>
    return NULL;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	e006      	b.n	8012afa <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	689b      	ldr	r3, [r3, #8]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff fef6 	bl	80128e2 <osPoolAlloc>
 8012af6:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012af8:	68fb      	ldr	r3, [r7, #12]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3710      	adds	r7, #16
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
	...

08012b04 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b084      	sub	sp, #16
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d101      	bne.n	8012b18 <osMailPut+0x14>
    return osErrorParameter;
 8012b14:	2380      	movs	r3, #128	; 0x80
 8012b16:	e02c      	b.n	8012b72 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012b1c:	f7ff fd67 	bl	80125ee <inHandlerMode>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d018      	beq.n	8012b58 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6858      	ldr	r0, [r3, #4]
 8012b2a:	f107 020c 	add.w	r2, r7, #12
 8012b2e:	4639      	mov	r1, r7
 8012b30:	2300      	movs	r3, #0
 8012b32:	f000 fbe3 	bl	80132fc <xQueueGenericSendFromISR>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d001      	beq.n	8012b40 <osMailPut+0x3c>
      return osErrorOS;
 8012b3c:	23ff      	movs	r3, #255	; 0xff
 8012b3e:	e018      	b.n	8012b72 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d014      	beq.n	8012b70 <osMailPut+0x6c>
 8012b46:	4b0d      	ldr	r3, [pc, #52]	; (8012b7c <osMailPut+0x78>)
 8012b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b4c:	601a      	str	r2, [r3, #0]
 8012b4e:	f3bf 8f4f 	dsb	sy
 8012b52:	f3bf 8f6f 	isb	sy
 8012b56:	e00b      	b.n	8012b70 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6858      	ldr	r0, [r3, #4]
 8012b5c:	4639      	mov	r1, r7
 8012b5e:	2300      	movs	r3, #0
 8012b60:	2200      	movs	r2, #0
 8012b62:	f000 fad1 	bl	8013108 <xQueueGenericSend>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d001      	beq.n	8012b70 <osMailPut+0x6c>
      return osErrorOS;
 8012b6c:	23ff      	movs	r3, #255	; 0xff
 8012b6e:	e000      	b.n	8012b72 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012b70:	2300      	movs	r3, #0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	e000ed04 	.word	0xe000ed04

08012b80 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012b80:	b590      	push	{r4, r7, lr}
 8012b82:	b08b      	sub	sp, #44	; 0x2c
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d10a      	bne.n	8012bac <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012b96:	2380      	movs	r3, #128	; 0x80
 8012b98:	617b      	str	r3, [r7, #20]
    return event;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	461c      	mov	r4, r3
 8012b9e:	f107 0314 	add.w	r3, r7, #20
 8012ba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012baa:	e056      	b.n	8012c5a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012bac:	2300      	movs	r3, #0
 8012bae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bba:	d103      	bne.n	8012bc4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8012bc2:	e009      	b.n	8012bd8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d006      	beq.n	8012bd8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d101      	bne.n	8012bd8 <osMailGet+0x58>
      ticks = 1;
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012bd8:	f7ff fd09 	bl	80125ee <inHandlerMode>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d01d      	beq.n	8012c1e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	6858      	ldr	r0, [r3, #4]
 8012be6:	f107 0220 	add.w	r2, r7, #32
 8012bea:	f107 0314 	add.w	r3, r7, #20
 8012bee:	3304      	adds	r3, #4
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	f000 fcf3 	bl	80135dc <xQueueReceiveFromISR>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d102      	bne.n	8012c02 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012bfc:	2320      	movs	r3, #32
 8012bfe:	617b      	str	r3, [r7, #20]
 8012c00:	e001      	b.n	8012c06 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012c02:	2300      	movs	r3, #0
 8012c04:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012c06:	6a3b      	ldr	r3, [r7, #32]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d01e      	beq.n	8012c4a <osMailGet+0xca>
 8012c0c:	4b15      	ldr	r3, [pc, #84]	; (8012c64 <osMailGet+0xe4>)
 8012c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c12:	601a      	str	r2, [r3, #0]
 8012c14:	f3bf 8f4f 	dsb	sy
 8012c18:	f3bf 8f6f 	isb	sy
 8012c1c:	e015      	b.n	8012c4a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	6858      	ldr	r0, [r3, #4]
 8012c22:	f107 0314 	add.w	r3, r7, #20
 8012c26:	3304      	adds	r3, #4
 8012c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	f000 fbfa 	bl	8013424 <xQueueReceive>
 8012c30:	4603      	mov	r3, r0
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	d102      	bne.n	8012c3c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012c36:	2320      	movs	r3, #32
 8012c38:	617b      	str	r3, [r7, #20]
 8012c3a:	e006      	b.n	8012c4a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d101      	bne.n	8012c46 <osMailGet+0xc6>
 8012c42:	2300      	movs	r3, #0
 8012c44:	e000      	b.n	8012c48 <osMailGet+0xc8>
 8012c46:	2340      	movs	r3, #64	; 0x40
 8012c48:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	461c      	mov	r4, r3
 8012c4e:	f107 0314 	add.w	r3, r7, #20
 8012c52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012c5a:	68f8      	ldr	r0, [r7, #12]
 8012c5c:	372c      	adds	r7, #44	; 0x2c
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd90      	pop	{r4, r7, pc}
 8012c62:	bf00      	nop
 8012c64:	e000ed04 	.word	0xe000ed04

08012c68 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d101      	bne.n	8012c7c <osMailFree+0x14>
    return osErrorParameter;
 8012c78:	2380      	movs	r3, #128	; 0x80
 8012c7a:	e006      	b.n	8012c8a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	6839      	ldr	r1, [r7, #0]
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7ff fe8f 	bl	80129a6 <osPoolFree>
 8012c88:	4603      	mov	r3, r0
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3708      	adds	r7, #8
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}

08012c92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c92:	b480      	push	{r7}
 8012c94:	b083      	sub	sp, #12
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f103 0208 	add.w	r2, r3, #8
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8012caa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f103 0208 	add.w	r2, r3, #8
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f103 0208 	add.w	r2, r3, #8
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012cc6:	bf00      	nop
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr

08012cd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012cd2:	b480      	push	{r7}
 8012cd4:	b083      	sub	sp, #12
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012ce0:	bf00      	nop
 8012ce2:	370c      	adds	r7, #12
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cec:	b480      	push	{r7}
 8012cee:	b085      	sub	sp, #20
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	685b      	ldr	r3, [r3, #4]
 8012cfa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	689a      	ldr	r2, [r3, #8]
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	689b      	ldr	r3, [r3, #8]
 8012d0e:	683a      	ldr	r2, [r7, #0]
 8012d10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	683a      	ldr	r2, [r7, #0]
 8012d16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	687a      	ldr	r2, [r7, #4]
 8012d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	1c5a      	adds	r2, r3, #1
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	601a      	str	r2, [r3, #0]
}
 8012d28:	bf00      	nop
 8012d2a:	3714      	adds	r7, #20
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr

08012d34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d34:	b480      	push	{r7}
 8012d36:	b085      	sub	sp, #20
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d4a:	d103      	bne.n	8012d54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	691b      	ldr	r3, [r3, #16]
 8012d50:	60fb      	str	r3, [r7, #12]
 8012d52:	e00c      	b.n	8012d6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3308      	adds	r3, #8
 8012d58:	60fb      	str	r3, [r7, #12]
 8012d5a:	e002      	b.n	8012d62 <vListInsert+0x2e>
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	60fb      	str	r3, [r7, #12]
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	68ba      	ldr	r2, [r7, #8]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d2f6      	bcs.n	8012d5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	685a      	ldr	r2, [r3, #4]
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	685b      	ldr	r3, [r3, #4]
 8012d7a:	683a      	ldr	r2, [r7, #0]
 8012d7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	68fa      	ldr	r2, [r7, #12]
 8012d82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	683a      	ldr	r2, [r7, #0]
 8012d88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	1c5a      	adds	r2, r3, #1
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	601a      	str	r2, [r3, #0]
}
 8012d9a:	bf00      	nop
 8012d9c:	3714      	adds	r7, #20
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da4:	4770      	bx	lr

08012da6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012da6:	b480      	push	{r7}
 8012da8:	b085      	sub	sp, #20
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	691b      	ldr	r3, [r3, #16]
 8012db2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	6892      	ldr	r2, [r2, #8]
 8012dbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	6852      	ldr	r2, [r2, #4]
 8012dc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d103      	bne.n	8012dda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	689a      	ldr	r2, [r3, #8]
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	1e5a      	subs	r2, r3, #1
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3714      	adds	r7, #20
 8012df2:	46bd      	mov	sp, r7
 8012df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df8:	4770      	bx	lr
	...

08012dfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d109      	bne.n	8012e24 <xQueueGenericReset+0x28>
	__asm volatile
 8012e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e14:	f383 8811 	msr	BASEPRI, r3
 8012e18:	f3bf 8f6f 	isb	sy
 8012e1c:	f3bf 8f4f 	dsb	sy
 8012e20:	60bb      	str	r3, [r7, #8]
 8012e22:	e7fe      	b.n	8012e22 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012e24:	f001 ff32 	bl	8014c8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681a      	ldr	r2, [r3, #0]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e30:	68f9      	ldr	r1, [r7, #12]
 8012e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e34:	fb01 f303 	mul.w	r3, r1, r3
 8012e38:	441a      	add	r2, r3
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2200      	movs	r2, #0
 8012e42:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e54:	3b01      	subs	r3, #1
 8012e56:	68f9      	ldr	r1, [r7, #12]
 8012e58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e5a:	fb01 f303 	mul.w	r3, r1, r3
 8012e5e:	441a      	add	r2, r3
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	22ff      	movs	r2, #255	; 0xff
 8012e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	22ff      	movs	r2, #255	; 0xff
 8012e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d114      	bne.n	8012ea4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	691b      	ldr	r3, [r3, #16]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d01a      	beq.n	8012eb8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	3310      	adds	r3, #16
 8012e86:	4618      	mov	r0, r3
 8012e88:	f001 f936 	bl	80140f8 <xTaskRemoveFromEventList>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d012      	beq.n	8012eb8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e92:	4b0d      	ldr	r3, [pc, #52]	; (8012ec8 <xQueueGenericReset+0xcc>)
 8012e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e98:	601a      	str	r2, [r3, #0]
 8012e9a:	f3bf 8f4f 	dsb	sy
 8012e9e:	f3bf 8f6f 	isb	sy
 8012ea2:	e009      	b.n	8012eb8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	3310      	adds	r3, #16
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7ff fef2 	bl	8012c92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	3324      	adds	r3, #36	; 0x24
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7ff feed 	bl	8012c92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012eb8:	f001 ff16 	bl	8014ce8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012ebc:	2301      	movs	r3, #1
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3710      	adds	r7, #16
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	e000ed04 	.word	0xe000ed04

08012ecc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b08e      	sub	sp, #56	; 0x38
 8012ed0:	af02      	add	r7, sp, #8
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	607a      	str	r2, [r7, #4]
 8012ed8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d109      	bne.n	8012ef4 <xQueueGenericCreateStatic+0x28>
 8012ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee4:	f383 8811 	msr	BASEPRI, r3
 8012ee8:	f3bf 8f6f 	isb	sy
 8012eec:	f3bf 8f4f 	dsb	sy
 8012ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ef2:	e7fe      	b.n	8012ef2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d109      	bne.n	8012f0e <xQueueGenericCreateStatic+0x42>
 8012efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efe:	f383 8811 	msr	BASEPRI, r3
 8012f02:	f3bf 8f6f 	isb	sy
 8012f06:	f3bf 8f4f 	dsb	sy
 8012f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f0c:	e7fe      	b.n	8012f0c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d002      	beq.n	8012f1a <xQueueGenericCreateStatic+0x4e>
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <xQueueGenericCreateStatic+0x52>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e000      	b.n	8012f20 <xQueueGenericCreateStatic+0x54>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d109      	bne.n	8012f38 <xQueueGenericCreateStatic+0x6c>
 8012f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f28:	f383 8811 	msr	BASEPRI, r3
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	623b      	str	r3, [r7, #32]
 8012f36:	e7fe      	b.n	8012f36 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d102      	bne.n	8012f44 <xQueueGenericCreateStatic+0x78>
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d101      	bne.n	8012f48 <xQueueGenericCreateStatic+0x7c>
 8012f44:	2301      	movs	r3, #1
 8012f46:	e000      	b.n	8012f4a <xQueueGenericCreateStatic+0x7e>
 8012f48:	2300      	movs	r3, #0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d109      	bne.n	8012f62 <xQueueGenericCreateStatic+0x96>
 8012f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f52:	f383 8811 	msr	BASEPRI, r3
 8012f56:	f3bf 8f6f 	isb	sy
 8012f5a:	f3bf 8f4f 	dsb	sy
 8012f5e:	61fb      	str	r3, [r7, #28]
 8012f60:	e7fe      	b.n	8012f60 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f62:	2348      	movs	r3, #72	; 0x48
 8012f64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	2b48      	cmp	r3, #72	; 0x48
 8012f6a:	d009      	beq.n	8012f80 <xQueueGenericCreateStatic+0xb4>
 8012f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	61bb      	str	r3, [r7, #24]
 8012f7e:	e7fe      	b.n	8012f7e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00d      	beq.n	8012fa8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8e:	2201      	movs	r2, #1
 8012f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f94:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	68b9      	ldr	r1, [r7, #8]
 8012fa2:	68f8      	ldr	r0, [r7, #12]
 8012fa4:	f000 f844 	bl	8013030 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3730      	adds	r7, #48	; 0x30
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}

08012fb2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012fb2:	b580      	push	{r7, lr}
 8012fb4:	b08a      	sub	sp, #40	; 0x28
 8012fb6:	af02      	add	r7, sp, #8
 8012fb8:	60f8      	str	r0, [r7, #12]
 8012fba:	60b9      	str	r1, [r7, #8]
 8012fbc:	4613      	mov	r3, r2
 8012fbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d109      	bne.n	8012fda <xQueueGenericCreate+0x28>
 8012fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fca:	f383 8811 	msr	BASEPRI, r3
 8012fce:	f3bf 8f6f 	isb	sy
 8012fd2:	f3bf 8f4f 	dsb	sy
 8012fd6:	613b      	str	r3, [r7, #16]
 8012fd8:	e7fe      	b.n	8012fd8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	61fb      	str	r3, [r7, #28]
 8012fe4:	e004      	b.n	8012ff0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	68ba      	ldr	r2, [r7, #8]
 8012fea:	fb02 f303 	mul.w	r3, r2, r3
 8012fee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012ff0:	69fb      	ldr	r3, [r7, #28]
 8012ff2:	3348      	adds	r3, #72	; 0x48
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f001 ff63 	bl	8014ec0 <pvPortMalloc>
 8012ffa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d011      	beq.n	8013026 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	3348      	adds	r3, #72	; 0x48
 801300a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	2200      	movs	r2, #0
 8013010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013014:	79fa      	ldrb	r2, [r7, #7]
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	9300      	str	r3, [sp, #0]
 801301a:	4613      	mov	r3, r2
 801301c:	697a      	ldr	r2, [r7, #20]
 801301e:	68b9      	ldr	r1, [r7, #8]
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	f000 f805 	bl	8013030 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013026:	69bb      	ldr	r3, [r7, #24]
	}
 8013028:	4618      	mov	r0, r3
 801302a:	3720      	adds	r7, #32
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d103      	bne.n	801304c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013044:	69bb      	ldr	r3, [r7, #24]
 8013046:	69ba      	ldr	r2, [r7, #24]
 8013048:	601a      	str	r2, [r3, #0]
 801304a:	e002      	b.n	8013052 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801304c:	69bb      	ldr	r3, [r7, #24]
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013052:	69bb      	ldr	r3, [r7, #24]
 8013054:	68fa      	ldr	r2, [r7, #12]
 8013056:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013058:	69bb      	ldr	r3, [r7, #24]
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801305e:	2101      	movs	r1, #1
 8013060:	69b8      	ldr	r0, [r7, #24]
 8013062:	f7ff fecb 	bl	8012dfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013066:	bf00      	nop
 8013068:	3710      	adds	r7, #16
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}

0801306e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801306e:	b580      	push	{r7, lr}
 8013070:	b082      	sub	sp, #8
 8013072:	af00      	add	r7, sp, #0
 8013074:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d00e      	beq.n	801309a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2200      	movs	r2, #0
 8013080:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2200      	movs	r2, #0
 8013086:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2200      	movs	r2, #0
 801308c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801308e:	2300      	movs	r3, #0
 8013090:	2200      	movs	r2, #0
 8013092:	2100      	movs	r1, #0
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f000 f837 	bl	8013108 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801309a:	bf00      	nop
 801309c:	3708      	adds	r7, #8
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}

080130a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80130a2:	b580      	push	{r7, lr}
 80130a4:	b086      	sub	sp, #24
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	4603      	mov	r3, r0
 80130aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80130ac:	2301      	movs	r3, #1
 80130ae:	617b      	str	r3, [r7, #20]
 80130b0:	2300      	movs	r3, #0
 80130b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80130b4:	79fb      	ldrb	r3, [r7, #7]
 80130b6:	461a      	mov	r2, r3
 80130b8:	6939      	ldr	r1, [r7, #16]
 80130ba:	6978      	ldr	r0, [r7, #20]
 80130bc:	f7ff ff79 	bl	8012fb2 <xQueueGenericCreate>
 80130c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80130c2:	68f8      	ldr	r0, [r7, #12]
 80130c4:	f7ff ffd3 	bl	801306e <prvInitialiseMutex>

		return xNewQueue;
 80130c8:	68fb      	ldr	r3, [r7, #12]
	}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3718      	adds	r7, #24
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b088      	sub	sp, #32
 80130d6:	af02      	add	r7, sp, #8
 80130d8:	4603      	mov	r3, r0
 80130da:	6039      	str	r1, [r7, #0]
 80130dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80130de:	2301      	movs	r3, #1
 80130e0:	617b      	str	r3, [r7, #20]
 80130e2:	2300      	movs	r3, #0
 80130e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80130e6:	79fb      	ldrb	r3, [r7, #7]
 80130e8:	9300      	str	r3, [sp, #0]
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	2200      	movs	r2, #0
 80130ee:	6939      	ldr	r1, [r7, #16]
 80130f0:	6978      	ldr	r0, [r7, #20]
 80130f2:	f7ff feeb 	bl	8012ecc <xQueueGenericCreateStatic>
 80130f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80130f8:	68f8      	ldr	r0, [r7, #12]
 80130fa:	f7ff ffb8 	bl	801306e <prvInitialiseMutex>

		return xNewQueue;
 80130fe:	68fb      	ldr	r3, [r7, #12]
	}
 8013100:	4618      	mov	r0, r3
 8013102:	3718      	adds	r7, #24
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b08e      	sub	sp, #56	; 0x38
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013116:	2300      	movs	r3, #0
 8013118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013120:	2b00      	cmp	r3, #0
 8013122:	d109      	bne.n	8013138 <xQueueGenericSend+0x30>
 8013124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013128:	f383 8811 	msr	BASEPRI, r3
 801312c:	f3bf 8f6f 	isb	sy
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	62bb      	str	r3, [r7, #40]	; 0x28
 8013136:	e7fe      	b.n	8013136 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d103      	bne.n	8013146 <xQueueGenericSend+0x3e>
 801313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013142:	2b00      	cmp	r3, #0
 8013144:	d101      	bne.n	801314a <xQueueGenericSend+0x42>
 8013146:	2301      	movs	r3, #1
 8013148:	e000      	b.n	801314c <xQueueGenericSend+0x44>
 801314a:	2300      	movs	r3, #0
 801314c:	2b00      	cmp	r3, #0
 801314e:	d109      	bne.n	8013164 <xQueueGenericSend+0x5c>
 8013150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013154:	f383 8811 	msr	BASEPRI, r3
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	f3bf 8f4f 	dsb	sy
 8013160:	627b      	str	r3, [r7, #36]	; 0x24
 8013162:	e7fe      	b.n	8013162 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	2b02      	cmp	r3, #2
 8013168:	d103      	bne.n	8013172 <xQueueGenericSend+0x6a>
 801316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801316e:	2b01      	cmp	r3, #1
 8013170:	d101      	bne.n	8013176 <xQueueGenericSend+0x6e>
 8013172:	2301      	movs	r3, #1
 8013174:	e000      	b.n	8013178 <xQueueGenericSend+0x70>
 8013176:	2300      	movs	r3, #0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d109      	bne.n	8013190 <xQueueGenericSend+0x88>
 801317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	623b      	str	r3, [r7, #32]
 801318e:	e7fe      	b.n	801318e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013190:	f001 f968 	bl	8014464 <xTaskGetSchedulerState>
 8013194:	4603      	mov	r3, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d102      	bne.n	80131a0 <xQueueGenericSend+0x98>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d101      	bne.n	80131a4 <xQueueGenericSend+0x9c>
 80131a0:	2301      	movs	r3, #1
 80131a2:	e000      	b.n	80131a6 <xQueueGenericSend+0x9e>
 80131a4:	2300      	movs	r3, #0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d109      	bne.n	80131be <xQueueGenericSend+0xb6>
 80131aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ae:	f383 8811 	msr	BASEPRI, r3
 80131b2:	f3bf 8f6f 	isb	sy
 80131b6:	f3bf 8f4f 	dsb	sy
 80131ba:	61fb      	str	r3, [r7, #28]
 80131bc:	e7fe      	b.n	80131bc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80131be:	f001 fd65 	bl	8014c8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80131c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d302      	bcc.n	80131d4 <xQueueGenericSend+0xcc>
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d129      	bne.n	8013228 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80131d4:	683a      	ldr	r2, [r7, #0]
 80131d6:	68b9      	ldr	r1, [r7, #8]
 80131d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131da:	f000 fa7c 	bl	80136d6 <prvCopyDataToQueue>
 80131de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d010      	beq.n	801320a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ea:	3324      	adds	r3, #36	; 0x24
 80131ec:	4618      	mov	r0, r3
 80131ee:	f000 ff83 	bl	80140f8 <xTaskRemoveFromEventList>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d013      	beq.n	8013220 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80131f8:	4b3f      	ldr	r3, [pc, #252]	; (80132f8 <xQueueGenericSend+0x1f0>)
 80131fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131fe:	601a      	str	r2, [r3, #0]
 8013200:	f3bf 8f4f 	dsb	sy
 8013204:	f3bf 8f6f 	isb	sy
 8013208:	e00a      	b.n	8013220 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320c:	2b00      	cmp	r3, #0
 801320e:	d007      	beq.n	8013220 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013210:	4b39      	ldr	r3, [pc, #228]	; (80132f8 <xQueueGenericSend+0x1f0>)
 8013212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013216:	601a      	str	r2, [r3, #0]
 8013218:	f3bf 8f4f 	dsb	sy
 801321c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013220:	f001 fd62 	bl	8014ce8 <vPortExitCritical>
				return pdPASS;
 8013224:	2301      	movs	r3, #1
 8013226:	e063      	b.n	80132f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d103      	bne.n	8013236 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801322e:	f001 fd5b 	bl	8014ce8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013232:	2300      	movs	r3, #0
 8013234:	e05c      	b.n	80132f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013238:	2b00      	cmp	r3, #0
 801323a:	d106      	bne.n	801324a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801323c:	f107 0314 	add.w	r3, r7, #20
 8013240:	4618      	mov	r0, r3
 8013242:	f000 ffbb 	bl	80141bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013246:	2301      	movs	r3, #1
 8013248:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801324a:	f001 fd4d 	bl	8014ce8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801324e:	f000 fd73 	bl	8013d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013252:	f001 fd1b 	bl	8014c8c <vPortEnterCritical>
 8013256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801325c:	b25b      	sxtb	r3, r3
 801325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013262:	d103      	bne.n	801326c <xQueueGenericSend+0x164>
 8013264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013266:	2200      	movs	r2, #0
 8013268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801326e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013272:	b25b      	sxtb	r3, r3
 8013274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013278:	d103      	bne.n	8013282 <xQueueGenericSend+0x17a>
 801327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801327c:	2200      	movs	r2, #0
 801327e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013282:	f001 fd31 	bl	8014ce8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013286:	1d3a      	adds	r2, r7, #4
 8013288:	f107 0314 	add.w	r3, r7, #20
 801328c:	4611      	mov	r1, r2
 801328e:	4618      	mov	r0, r3
 8013290:	f000 ffaa 	bl	80141e8 <xTaskCheckForTimeOut>
 8013294:	4603      	mov	r3, r0
 8013296:	2b00      	cmp	r3, #0
 8013298:	d124      	bne.n	80132e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801329a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801329c:	f000 fb13 	bl	80138c6 <prvIsQueueFull>
 80132a0:	4603      	mov	r3, r0
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d018      	beq.n	80132d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80132a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a8:	3310      	adds	r3, #16
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	4611      	mov	r1, r2
 80132ae:	4618      	mov	r0, r3
 80132b0:	f000 fefe 	bl	80140b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80132b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132b6:	f000 fa9e 	bl	80137f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80132ba:	f000 fd4b 	bl	8013d54 <xTaskResumeAll>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	f47f af7c 	bne.w	80131be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80132c6:	4b0c      	ldr	r3, [pc, #48]	; (80132f8 <xQueueGenericSend+0x1f0>)
 80132c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	f3bf 8f4f 	dsb	sy
 80132d2:	f3bf 8f6f 	isb	sy
 80132d6:	e772      	b.n	80131be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80132d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132da:	f000 fa8c 	bl	80137f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132de:	f000 fd39 	bl	8013d54 <xTaskResumeAll>
 80132e2:	e76c      	b.n	80131be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80132e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132e6:	f000 fa86 	bl	80137f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132ea:	f000 fd33 	bl	8013d54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80132ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3738      	adds	r7, #56	; 0x38
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	e000ed04 	.word	0xe000ed04

080132fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b08e      	sub	sp, #56	; 0x38
 8013300:	af00      	add	r7, sp, #0
 8013302:	60f8      	str	r0, [r7, #12]
 8013304:	60b9      	str	r1, [r7, #8]
 8013306:	607a      	str	r2, [r7, #4]
 8013308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013310:	2b00      	cmp	r3, #0
 8013312:	d109      	bne.n	8013328 <xQueueGenericSendFromISR+0x2c>
 8013314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013318:	f383 8811 	msr	BASEPRI, r3
 801331c:	f3bf 8f6f 	isb	sy
 8013320:	f3bf 8f4f 	dsb	sy
 8013324:	627b      	str	r3, [r7, #36]	; 0x24
 8013326:	e7fe      	b.n	8013326 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d103      	bne.n	8013336 <xQueueGenericSendFromISR+0x3a>
 801332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013332:	2b00      	cmp	r3, #0
 8013334:	d101      	bne.n	801333a <xQueueGenericSendFromISR+0x3e>
 8013336:	2301      	movs	r3, #1
 8013338:	e000      	b.n	801333c <xQueueGenericSendFromISR+0x40>
 801333a:	2300      	movs	r3, #0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d109      	bne.n	8013354 <xQueueGenericSendFromISR+0x58>
 8013340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013344:	f383 8811 	msr	BASEPRI, r3
 8013348:	f3bf 8f6f 	isb	sy
 801334c:	f3bf 8f4f 	dsb	sy
 8013350:	623b      	str	r3, [r7, #32]
 8013352:	e7fe      	b.n	8013352 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	2b02      	cmp	r3, #2
 8013358:	d103      	bne.n	8013362 <xQueueGenericSendFromISR+0x66>
 801335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801335e:	2b01      	cmp	r3, #1
 8013360:	d101      	bne.n	8013366 <xQueueGenericSendFromISR+0x6a>
 8013362:	2301      	movs	r3, #1
 8013364:	e000      	b.n	8013368 <xQueueGenericSendFromISR+0x6c>
 8013366:	2300      	movs	r3, #0
 8013368:	2b00      	cmp	r3, #0
 801336a:	d109      	bne.n	8013380 <xQueueGenericSendFromISR+0x84>
 801336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013370:	f383 8811 	msr	BASEPRI, r3
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	61fb      	str	r3, [r7, #28]
 801337e:	e7fe      	b.n	801337e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013380:	f001 fd60 	bl	8014e44 <vPortValidateInterruptPriority>
	__asm volatile
 8013384:	f3ef 8211 	mrs	r2, BASEPRI
 8013388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801338c:	f383 8811 	msr	BASEPRI, r3
 8013390:	f3bf 8f6f 	isb	sy
 8013394:	f3bf 8f4f 	dsb	sy
 8013398:	61ba      	str	r2, [r7, #24]
 801339a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801339c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801339e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80133a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d302      	bcc.n	80133b2 <xQueueGenericSendFromISR+0xb6>
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	2b02      	cmp	r3, #2
 80133b0:	d12c      	bne.n	801340c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80133b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133bc:	683a      	ldr	r2, [r7, #0]
 80133be:	68b9      	ldr	r1, [r7, #8]
 80133c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133c2:	f000 f988 	bl	80136d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80133c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80133ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ce:	d112      	bne.n	80133f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d016      	beq.n	8013406 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133da:	3324      	adds	r3, #36	; 0x24
 80133dc:	4618      	mov	r0, r3
 80133de:	f000 fe8b 	bl	80140f8 <xTaskRemoveFromEventList>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d00e      	beq.n	8013406 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d00b      	beq.n	8013406 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2201      	movs	r2, #1
 80133f2:	601a      	str	r2, [r3, #0]
 80133f4:	e007      	b.n	8013406 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80133f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80133fa:	3301      	adds	r3, #1
 80133fc:	b2db      	uxtb	r3, r3
 80133fe:	b25a      	sxtb	r2, r3
 8013400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013406:	2301      	movs	r3, #1
 8013408:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801340a:	e001      	b.n	8013410 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801340c:	2300      	movs	r3, #0
 801340e:	637b      	str	r3, [r7, #52]	; 0x34
 8013410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013412:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801341c:	4618      	mov	r0, r3
 801341e:	3738      	adds	r7, #56	; 0x38
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b08c      	sub	sp, #48	; 0x30
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013430:	2300      	movs	r3, #0
 8013432:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343a:	2b00      	cmp	r3, #0
 801343c:	d109      	bne.n	8013452 <xQueueReceive+0x2e>
	__asm volatile
 801343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013442:	f383 8811 	msr	BASEPRI, r3
 8013446:	f3bf 8f6f 	isb	sy
 801344a:	f3bf 8f4f 	dsb	sy
 801344e:	623b      	str	r3, [r7, #32]
 8013450:	e7fe      	b.n	8013450 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d103      	bne.n	8013460 <xQueueReceive+0x3c>
 8013458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801345c:	2b00      	cmp	r3, #0
 801345e:	d101      	bne.n	8013464 <xQueueReceive+0x40>
 8013460:	2301      	movs	r3, #1
 8013462:	e000      	b.n	8013466 <xQueueReceive+0x42>
 8013464:	2300      	movs	r3, #0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d109      	bne.n	801347e <xQueueReceive+0x5a>
 801346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346e:	f383 8811 	msr	BASEPRI, r3
 8013472:	f3bf 8f6f 	isb	sy
 8013476:	f3bf 8f4f 	dsb	sy
 801347a:	61fb      	str	r3, [r7, #28]
 801347c:	e7fe      	b.n	801347c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801347e:	f000 fff1 	bl	8014464 <xTaskGetSchedulerState>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d102      	bne.n	801348e <xQueueReceive+0x6a>
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d101      	bne.n	8013492 <xQueueReceive+0x6e>
 801348e:	2301      	movs	r3, #1
 8013490:	e000      	b.n	8013494 <xQueueReceive+0x70>
 8013492:	2300      	movs	r3, #0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d109      	bne.n	80134ac <xQueueReceive+0x88>
 8013498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801349c:	f383 8811 	msr	BASEPRI, r3
 80134a0:	f3bf 8f6f 	isb	sy
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	61bb      	str	r3, [r7, #24]
 80134aa:	e7fe      	b.n	80134aa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80134ac:	f001 fbee 	bl	8014c8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d01f      	beq.n	80134fc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80134bc:	68b9      	ldr	r1, [r7, #8]
 80134be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134c0:	f000 f973 	bl	80137aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80134c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c6:	1e5a      	subs	r2, r3, #1
 80134c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ce:	691b      	ldr	r3, [r3, #16]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d00f      	beq.n	80134f4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d6:	3310      	adds	r3, #16
 80134d8:	4618      	mov	r0, r3
 80134da:	f000 fe0d 	bl	80140f8 <xTaskRemoveFromEventList>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d007      	beq.n	80134f4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80134e4:	4b3c      	ldr	r3, [pc, #240]	; (80135d8 <xQueueReceive+0x1b4>)
 80134e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134ea:	601a      	str	r2, [r3, #0]
 80134ec:	f3bf 8f4f 	dsb	sy
 80134f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80134f4:	f001 fbf8 	bl	8014ce8 <vPortExitCritical>
				return pdPASS;
 80134f8:	2301      	movs	r3, #1
 80134fa:	e069      	b.n	80135d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d103      	bne.n	801350a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013502:	f001 fbf1 	bl	8014ce8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013506:	2300      	movs	r3, #0
 8013508:	e062      	b.n	80135d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350c:	2b00      	cmp	r3, #0
 801350e:	d106      	bne.n	801351e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013510:	f107 0310 	add.w	r3, r7, #16
 8013514:	4618      	mov	r0, r3
 8013516:	f000 fe51 	bl	80141bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801351a:	2301      	movs	r3, #1
 801351c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801351e:	f001 fbe3 	bl	8014ce8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013522:	f000 fc09 	bl	8013d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013526:	f001 fbb1 	bl	8014c8c <vPortEnterCritical>
 801352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013530:	b25b      	sxtb	r3, r3
 8013532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013536:	d103      	bne.n	8013540 <xQueueReceive+0x11c>
 8013538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801353a:	2200      	movs	r2, #0
 801353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013546:	b25b      	sxtb	r3, r3
 8013548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801354c:	d103      	bne.n	8013556 <xQueueReceive+0x132>
 801354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013550:	2200      	movs	r2, #0
 8013552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013556:	f001 fbc7 	bl	8014ce8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801355a:	1d3a      	adds	r2, r7, #4
 801355c:	f107 0310 	add.w	r3, r7, #16
 8013560:	4611      	mov	r1, r2
 8013562:	4618      	mov	r0, r3
 8013564:	f000 fe40 	bl	80141e8 <xTaskCheckForTimeOut>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d123      	bne.n	80135b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801356e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013570:	f000 f993 	bl	801389a <prvIsQueueEmpty>
 8013574:	4603      	mov	r3, r0
 8013576:	2b00      	cmp	r3, #0
 8013578:	d017      	beq.n	80135aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357c:	3324      	adds	r3, #36	; 0x24
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	4611      	mov	r1, r2
 8013582:	4618      	mov	r0, r3
 8013584:	f000 fd94 	bl	80140b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801358a:	f000 f934 	bl	80137f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801358e:	f000 fbe1 	bl	8013d54 <xTaskResumeAll>
 8013592:	4603      	mov	r3, r0
 8013594:	2b00      	cmp	r3, #0
 8013596:	d189      	bne.n	80134ac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013598:	4b0f      	ldr	r3, [pc, #60]	; (80135d8 <xQueueReceive+0x1b4>)
 801359a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801359e:	601a      	str	r2, [r3, #0]
 80135a0:	f3bf 8f4f 	dsb	sy
 80135a4:	f3bf 8f6f 	isb	sy
 80135a8:	e780      	b.n	80134ac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80135aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135ac:	f000 f923 	bl	80137f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80135b0:	f000 fbd0 	bl	8013d54 <xTaskResumeAll>
 80135b4:	e77a      	b.n	80134ac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80135b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135b8:	f000 f91d 	bl	80137f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80135bc:	f000 fbca 	bl	8013d54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80135c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135c2:	f000 f96a 	bl	801389a <prvIsQueueEmpty>
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	f43f af6f 	beq.w	80134ac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80135ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3730      	adds	r7, #48	; 0x30
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}
 80135d8:	e000ed04 	.word	0xe000ed04

080135dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b08e      	sub	sp, #56	; 0x38
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80135ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d109      	bne.n	8013606 <xQueueReceiveFromISR+0x2a>
 80135f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f6:	f383 8811 	msr	BASEPRI, r3
 80135fa:	f3bf 8f6f 	isb	sy
 80135fe:	f3bf 8f4f 	dsb	sy
 8013602:	623b      	str	r3, [r7, #32]
 8013604:	e7fe      	b.n	8013604 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d103      	bne.n	8013614 <xQueueReceiveFromISR+0x38>
 801360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013610:	2b00      	cmp	r3, #0
 8013612:	d101      	bne.n	8013618 <xQueueReceiveFromISR+0x3c>
 8013614:	2301      	movs	r3, #1
 8013616:	e000      	b.n	801361a <xQueueReceiveFromISR+0x3e>
 8013618:	2300      	movs	r3, #0
 801361a:	2b00      	cmp	r3, #0
 801361c:	d109      	bne.n	8013632 <xQueueReceiveFromISR+0x56>
 801361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013622:	f383 8811 	msr	BASEPRI, r3
 8013626:	f3bf 8f6f 	isb	sy
 801362a:	f3bf 8f4f 	dsb	sy
 801362e:	61fb      	str	r3, [r7, #28]
 8013630:	e7fe      	b.n	8013630 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013632:	f001 fc07 	bl	8014e44 <vPortValidateInterruptPriority>
	__asm volatile
 8013636:	f3ef 8211 	mrs	r2, BASEPRI
 801363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801363e:	f383 8811 	msr	BASEPRI, r3
 8013642:	f3bf 8f6f 	isb	sy
 8013646:	f3bf 8f4f 	dsb	sy
 801364a:	61ba      	str	r2, [r7, #24]
 801364c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801364e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013656:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365a:	2b00      	cmp	r3, #0
 801365c:	d02f      	beq.n	80136be <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013668:	68b9      	ldr	r1, [r7, #8]
 801366a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801366c:	f000 f89d 	bl	80137aa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013672:	1e5a      	subs	r2, r3, #1
 8013674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013676:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013678:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013680:	d112      	bne.n	80136a8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013684:	691b      	ldr	r3, [r3, #16]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d016      	beq.n	80136b8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801368c:	3310      	adds	r3, #16
 801368e:	4618      	mov	r0, r3
 8013690:	f000 fd32 	bl	80140f8 <xTaskRemoveFromEventList>
 8013694:	4603      	mov	r3, r0
 8013696:	2b00      	cmp	r3, #0
 8013698:	d00e      	beq.n	80136b8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d00b      	beq.n	80136b8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2201      	movs	r2, #1
 80136a4:	601a      	str	r2, [r3, #0]
 80136a6:	e007      	b.n	80136b8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80136a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136ac:	3301      	adds	r3, #1
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	b25a      	sxtb	r2, r3
 80136b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80136b8:	2301      	movs	r3, #1
 80136ba:	637b      	str	r3, [r7, #52]	; 0x34
 80136bc:	e001      	b.n	80136c2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80136be:	2300      	movs	r3, #0
 80136c0:	637b      	str	r3, [r7, #52]	; 0x34
 80136c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3738      	adds	r7, #56	; 0x38
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80136d6:	b580      	push	{r7, lr}
 80136d8:	b086      	sub	sp, #24
 80136da:	af00      	add	r7, sp, #0
 80136dc:	60f8      	str	r0, [r7, #12]
 80136de:	60b9      	str	r1, [r7, #8]
 80136e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80136e2:	2300      	movs	r3, #0
 80136e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d10d      	bne.n	8013710 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d14d      	bne.n	8013798 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	689b      	ldr	r3, [r3, #8]
 8013700:	4618      	mov	r0, r3
 8013702:	f000 fecd 	bl	80144a0 <xTaskPriorityDisinherit>
 8013706:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2200      	movs	r2, #0
 801370c:	609a      	str	r2, [r3, #8]
 801370e:	e043      	b.n	8013798 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d119      	bne.n	801374a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	6858      	ldr	r0, [r3, #4]
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801371e:	461a      	mov	r2, r3
 8013720:	68b9      	ldr	r1, [r7, #8]
 8013722:	f002 fb2b 	bl	8015d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	685a      	ldr	r2, [r3, #4]
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801372e:	441a      	add	r2, r3
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	685a      	ldr	r2, [r3, #4]
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	429a      	cmp	r2, r3
 801373e:	d32b      	bcc.n	8013798 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	605a      	str	r2, [r3, #4]
 8013748:	e026      	b.n	8013798 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	68d8      	ldr	r0, [r3, #12]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013752:	461a      	mov	r2, r3
 8013754:	68b9      	ldr	r1, [r7, #8]
 8013756:	f002 fb11 	bl	8015d7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	68da      	ldr	r2, [r3, #12]
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013762:	425b      	negs	r3, r3
 8013764:	441a      	add	r2, r3
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	68da      	ldr	r2, [r3, #12]
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	429a      	cmp	r2, r3
 8013774:	d207      	bcs.n	8013786 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	689a      	ldr	r2, [r3, #8]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801377e:	425b      	negs	r3, r3
 8013780:	441a      	add	r2, r3
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2b02      	cmp	r3, #2
 801378a:	d105      	bne.n	8013798 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d002      	beq.n	8013798 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	3b01      	subs	r3, #1
 8013796:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80137a0:	697b      	ldr	r3, [r7, #20]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3718      	adds	r7, #24
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}

080137aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80137aa:	b580      	push	{r7, lr}
 80137ac:	b082      	sub	sp, #8
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	6078      	str	r0, [r7, #4]
 80137b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d018      	beq.n	80137ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	68da      	ldr	r2, [r3, #12]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137c4:	441a      	add	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	68da      	ldr	r2, [r3, #12]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	689b      	ldr	r3, [r3, #8]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d303      	bcc.n	80137de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	68d9      	ldr	r1, [r3, #12]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137e6:	461a      	mov	r2, r3
 80137e8:	6838      	ldr	r0, [r7, #0]
 80137ea:	f002 fac7 	bl	8015d7c <memcpy>
	}
}
 80137ee:	bf00      	nop
 80137f0:	3708      	adds	r7, #8
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}

080137f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80137f6:	b580      	push	{r7, lr}
 80137f8:	b084      	sub	sp, #16
 80137fa:	af00      	add	r7, sp, #0
 80137fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80137fe:	f001 fa45 	bl	8014c8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013808:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801380a:	e011      	b.n	8013830 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013810:	2b00      	cmp	r3, #0
 8013812:	d012      	beq.n	801383a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	3324      	adds	r3, #36	; 0x24
 8013818:	4618      	mov	r0, r3
 801381a:	f000 fc6d 	bl	80140f8 <xTaskRemoveFromEventList>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d001      	beq.n	8013828 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013824:	f000 fd40 	bl	80142a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013828:	7bfb      	ldrb	r3, [r7, #15]
 801382a:	3b01      	subs	r3, #1
 801382c:	b2db      	uxtb	r3, r3
 801382e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013834:	2b00      	cmp	r3, #0
 8013836:	dce9      	bgt.n	801380c <prvUnlockQueue+0x16>
 8013838:	e000      	b.n	801383c <prvUnlockQueue+0x46>
					break;
 801383a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	22ff      	movs	r2, #255	; 0xff
 8013840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013844:	f001 fa50 	bl	8014ce8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013848:	f001 fa20 	bl	8014c8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013852:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013854:	e011      	b.n	801387a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	691b      	ldr	r3, [r3, #16]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d012      	beq.n	8013884 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	3310      	adds	r3, #16
 8013862:	4618      	mov	r0, r3
 8013864:	f000 fc48 	bl	80140f8 <xTaskRemoveFromEventList>
 8013868:	4603      	mov	r3, r0
 801386a:	2b00      	cmp	r3, #0
 801386c:	d001      	beq.n	8013872 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801386e:	f000 fd1b 	bl	80142a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013872:	7bbb      	ldrb	r3, [r7, #14]
 8013874:	3b01      	subs	r3, #1
 8013876:	b2db      	uxtb	r3, r3
 8013878:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801387a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801387e:	2b00      	cmp	r3, #0
 8013880:	dce9      	bgt.n	8013856 <prvUnlockQueue+0x60>
 8013882:	e000      	b.n	8013886 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013884:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	22ff      	movs	r2, #255	; 0xff
 801388a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801388e:	f001 fa2b 	bl	8014ce8 <vPortExitCritical>
}
 8013892:	bf00      	nop
 8013894:	3710      	adds	r7, #16
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801389a:	b580      	push	{r7, lr}
 801389c:	b084      	sub	sp, #16
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80138a2:	f001 f9f3 	bl	8014c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d102      	bne.n	80138b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80138ae:	2301      	movs	r3, #1
 80138b0:	60fb      	str	r3, [r7, #12]
 80138b2:	e001      	b.n	80138b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80138b4:	2300      	movs	r3, #0
 80138b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80138b8:	f001 fa16 	bl	8014ce8 <vPortExitCritical>

	return xReturn;
 80138bc:	68fb      	ldr	r3, [r7, #12]
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3710      	adds	r7, #16
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}

080138c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80138c6:	b580      	push	{r7, lr}
 80138c8:	b084      	sub	sp, #16
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80138ce:	f001 f9dd 	bl	8014c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138da:	429a      	cmp	r2, r3
 80138dc:	d102      	bne.n	80138e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80138de:	2301      	movs	r3, #1
 80138e0:	60fb      	str	r3, [r7, #12]
 80138e2:	e001      	b.n	80138e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80138e4:	2300      	movs	r3, #0
 80138e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80138e8:	f001 f9fe 	bl	8014ce8 <vPortExitCritical>

	return xReturn;
 80138ec:	68fb      	ldr	r3, [r7, #12]
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b08e      	sub	sp, #56	; 0x38
 80138fa:	af04      	add	r7, sp, #16
 80138fc:	60f8      	str	r0, [r7, #12]
 80138fe:	60b9      	str	r1, [r7, #8]
 8013900:	607a      	str	r2, [r7, #4]
 8013902:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013906:	2b00      	cmp	r3, #0
 8013908:	d109      	bne.n	801391e <xTaskCreateStatic+0x28>
	__asm volatile
 801390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390e:	f383 8811 	msr	BASEPRI, r3
 8013912:	f3bf 8f6f 	isb	sy
 8013916:	f3bf 8f4f 	dsb	sy
 801391a:	623b      	str	r3, [r7, #32]
 801391c:	e7fe      	b.n	801391c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013920:	2b00      	cmp	r3, #0
 8013922:	d109      	bne.n	8013938 <xTaskCreateStatic+0x42>
 8013924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013928:	f383 8811 	msr	BASEPRI, r3
 801392c:	f3bf 8f6f 	isb	sy
 8013930:	f3bf 8f4f 	dsb	sy
 8013934:	61fb      	str	r3, [r7, #28]
 8013936:	e7fe      	b.n	8013936 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013938:	2354      	movs	r3, #84	; 0x54
 801393a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	2b54      	cmp	r3, #84	; 0x54
 8013940:	d009      	beq.n	8013956 <xTaskCreateStatic+0x60>
 8013942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013946:	f383 8811 	msr	BASEPRI, r3
 801394a:	f3bf 8f6f 	isb	sy
 801394e:	f3bf 8f4f 	dsb	sy
 8013952:	61bb      	str	r3, [r7, #24]
 8013954:	e7fe      	b.n	8013954 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013956:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395a:	2b00      	cmp	r3, #0
 801395c:	d01e      	beq.n	801399c <xTaskCreateStatic+0xa6>
 801395e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013960:	2b00      	cmp	r3, #0
 8013962:	d01b      	beq.n	801399c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013966:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801396c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013970:	2202      	movs	r2, #2
 8013972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013976:	2300      	movs	r3, #0
 8013978:	9303      	str	r3, [sp, #12]
 801397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397c:	9302      	str	r3, [sp, #8]
 801397e:	f107 0314 	add.w	r3, r7, #20
 8013982:	9301      	str	r3, [sp, #4]
 8013984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013986:	9300      	str	r3, [sp, #0]
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	68b9      	ldr	r1, [r7, #8]
 801398e:	68f8      	ldr	r0, [r7, #12]
 8013990:	f000 f850 	bl	8013a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013996:	f000 f8d3 	bl	8013b40 <prvAddNewTaskToReadyList>
 801399a:	e001      	b.n	80139a0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801399c:	2300      	movs	r3, #0
 801399e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80139a0:	697b      	ldr	r3, [r7, #20]
	}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3728      	adds	r7, #40	; 0x28
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}

080139aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80139aa:	b580      	push	{r7, lr}
 80139ac:	b08c      	sub	sp, #48	; 0x30
 80139ae:	af04      	add	r7, sp, #16
 80139b0:	60f8      	str	r0, [r7, #12]
 80139b2:	60b9      	str	r1, [r7, #8]
 80139b4:	603b      	str	r3, [r7, #0]
 80139b6:	4613      	mov	r3, r2
 80139b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80139ba:	88fb      	ldrh	r3, [r7, #6]
 80139bc:	009b      	lsls	r3, r3, #2
 80139be:	4618      	mov	r0, r3
 80139c0:	f001 fa7e 	bl	8014ec0 <pvPortMalloc>
 80139c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d00e      	beq.n	80139ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80139cc:	2054      	movs	r0, #84	; 0x54
 80139ce:	f001 fa77 	bl	8014ec0 <pvPortMalloc>
 80139d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d003      	beq.n	80139e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	697a      	ldr	r2, [r7, #20]
 80139de:	631a      	str	r2, [r3, #48]	; 0x30
 80139e0:	e005      	b.n	80139ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80139e2:	6978      	ldr	r0, [r7, #20]
 80139e4:	f001 fb2e 	bl	8015044 <vPortFree>
 80139e8:	e001      	b.n	80139ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80139ea:	2300      	movs	r3, #0
 80139ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d017      	beq.n	8013a24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	2200      	movs	r2, #0
 80139f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80139fc:	88fa      	ldrh	r2, [r7, #6]
 80139fe:	2300      	movs	r3, #0
 8013a00:	9303      	str	r3, [sp, #12]
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	9302      	str	r3, [sp, #8]
 8013a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a08:	9301      	str	r3, [sp, #4]
 8013a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0c:	9300      	str	r3, [sp, #0]
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	68b9      	ldr	r1, [r7, #8]
 8013a12:	68f8      	ldr	r0, [r7, #12]
 8013a14:	f000 f80e 	bl	8013a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013a18:	69f8      	ldr	r0, [r7, #28]
 8013a1a:	f000 f891 	bl	8013b40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013a1e:	2301      	movs	r3, #1
 8013a20:	61bb      	str	r3, [r7, #24]
 8013a22:	e002      	b.n	8013a2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013a24:	f04f 33ff 	mov.w	r3, #4294967295
 8013a28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3720      	adds	r7, #32
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b088      	sub	sp, #32
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	607a      	str	r2, [r7, #4]
 8013a40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013a4c:	3b01      	subs	r3, #1
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	4413      	add	r3, r2
 8013a52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013a54:	69bb      	ldr	r3, [r7, #24]
 8013a56:	f023 0307 	bic.w	r3, r3, #7
 8013a5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013a5c:	69bb      	ldr	r3, [r7, #24]
 8013a5e:	f003 0307 	and.w	r3, r3, #7
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d009      	beq.n	8013a7a <prvInitialiseNewTask+0x46>
 8013a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6a:	f383 8811 	msr	BASEPRI, r3
 8013a6e:	f3bf 8f6f 	isb	sy
 8013a72:	f3bf 8f4f 	dsb	sy
 8013a76:	617b      	str	r3, [r7, #20]
 8013a78:	e7fe      	b.n	8013a78 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d01f      	beq.n	8013ac0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013a80:	2300      	movs	r3, #0
 8013a82:	61fb      	str	r3, [r7, #28]
 8013a84:	e012      	b.n	8013aac <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013a86:	68ba      	ldr	r2, [r7, #8]
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	7819      	ldrb	r1, [r3, #0]
 8013a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	4413      	add	r3, r2
 8013a94:	3334      	adds	r3, #52	; 0x34
 8013a96:	460a      	mov	r2, r1
 8013a98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013a9a:	68ba      	ldr	r2, [r7, #8]
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d006      	beq.n	8013ab4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013aa6:	69fb      	ldr	r3, [r7, #28]
 8013aa8:	3301      	adds	r3, #1
 8013aaa:	61fb      	str	r3, [r7, #28]
 8013aac:	69fb      	ldr	r3, [r7, #28]
 8013aae:	2b0f      	cmp	r3, #15
 8013ab0:	d9e9      	bls.n	8013a86 <prvInitialiseNewTask+0x52>
 8013ab2:	e000      	b.n	8013ab6 <prvInitialiseNewTask+0x82>
			{
				break;
 8013ab4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013abe:	e003      	b.n	8013ac8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aca:	2b06      	cmp	r3, #6
 8013acc:	d901      	bls.n	8013ad2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013ace:	2306      	movs	r3, #6
 8013ad0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ad6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013adc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae6:	3304      	adds	r3, #4
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7ff f8f2 	bl	8012cd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af0:	3318      	adds	r3, #24
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7ff f8ed 	bl	8012cd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013afc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b00:	f1c3 0207 	rsb	r2, r3, #7
 8013b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b10:	2200      	movs	r2, #0
 8013b12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b16:	2200      	movs	r2, #0
 8013b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013b1c:	683a      	ldr	r2, [r7, #0]
 8013b1e:	68f9      	ldr	r1, [r7, #12]
 8013b20:	69b8      	ldr	r0, [r7, #24]
 8013b22:	f000 ff8b 	bl	8014a3c <pxPortInitialiseStack>
 8013b26:	4602      	mov	r2, r0
 8013b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d002      	beq.n	8013b38 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b38:	bf00      	nop
 8013b3a:	3720      	adds	r7, #32
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013b48:	f001 f8a0 	bl	8014c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013b4c:	4b2a      	ldr	r3, [pc, #168]	; (8013bf8 <prvAddNewTaskToReadyList+0xb8>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	3301      	adds	r3, #1
 8013b52:	4a29      	ldr	r2, [pc, #164]	; (8013bf8 <prvAddNewTaskToReadyList+0xb8>)
 8013b54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013b56:	4b29      	ldr	r3, [pc, #164]	; (8013bfc <prvAddNewTaskToReadyList+0xbc>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d109      	bne.n	8013b72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013b5e:	4a27      	ldr	r2, [pc, #156]	; (8013bfc <prvAddNewTaskToReadyList+0xbc>)
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013b64:	4b24      	ldr	r3, [pc, #144]	; (8013bf8 <prvAddNewTaskToReadyList+0xb8>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d110      	bne.n	8013b8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013b6c:	f000 fbc0 	bl	80142f0 <prvInitialiseTaskLists>
 8013b70:	e00d      	b.n	8013b8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013b72:	4b23      	ldr	r3, [pc, #140]	; (8013c00 <prvAddNewTaskToReadyList+0xc0>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d109      	bne.n	8013b8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013b7a:	4b20      	ldr	r3, [pc, #128]	; (8013bfc <prvAddNewTaskToReadyList+0xbc>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d802      	bhi.n	8013b8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013b88:	4a1c      	ldr	r2, [pc, #112]	; (8013bfc <prvAddNewTaskToReadyList+0xbc>)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013b8e:	4b1d      	ldr	r3, [pc, #116]	; (8013c04 <prvAddNewTaskToReadyList+0xc4>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	3301      	adds	r3, #1
 8013b94:	4a1b      	ldr	r2, [pc, #108]	; (8013c04 <prvAddNewTaskToReadyList+0xc4>)
 8013b96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	409a      	lsls	r2, r3
 8013ba0:	4b19      	ldr	r3, [pc, #100]	; (8013c08 <prvAddNewTaskToReadyList+0xc8>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	4313      	orrs	r3, r2
 8013ba6:	4a18      	ldr	r2, [pc, #96]	; (8013c08 <prvAddNewTaskToReadyList+0xc8>)
 8013ba8:	6013      	str	r3, [r2, #0]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bae:	4613      	mov	r3, r2
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	4413      	add	r3, r2
 8013bb4:	009b      	lsls	r3, r3, #2
 8013bb6:	4a15      	ldr	r2, [pc, #84]	; (8013c0c <prvAddNewTaskToReadyList+0xcc>)
 8013bb8:	441a      	add	r2, r3
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	3304      	adds	r3, #4
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	4610      	mov	r0, r2
 8013bc2:	f7ff f893 	bl	8012cec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013bc6:	f001 f88f 	bl	8014ce8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013bca:	4b0d      	ldr	r3, [pc, #52]	; (8013c00 <prvAddNewTaskToReadyList+0xc0>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d00e      	beq.n	8013bf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013bd2:	4b0a      	ldr	r3, [pc, #40]	; (8013bfc <prvAddNewTaskToReadyList+0xbc>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d207      	bcs.n	8013bf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013be0:	4b0b      	ldr	r3, [pc, #44]	; (8013c10 <prvAddNewTaskToReadyList+0xd0>)
 8013be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013be6:	601a      	str	r2, [r3, #0]
 8013be8:	f3bf 8f4f 	dsb	sy
 8013bec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013bf0:	bf00      	nop
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	20002964 	.word	0x20002964
 8013bfc:	20002864 	.word	0x20002864
 8013c00:	20002970 	.word	0x20002970
 8013c04:	20002980 	.word	0x20002980
 8013c08:	2000296c 	.word	0x2000296c
 8013c0c:	20002868 	.word	0x20002868
 8013c10:	e000ed04 	.word	0xe000ed04

08013c14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b084      	sub	sp, #16
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d016      	beq.n	8013c54 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013c26:	4b13      	ldr	r3, [pc, #76]	; (8013c74 <vTaskDelay+0x60>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d009      	beq.n	8013c42 <vTaskDelay+0x2e>
 8013c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c32:	f383 8811 	msr	BASEPRI, r3
 8013c36:	f3bf 8f6f 	isb	sy
 8013c3a:	f3bf 8f4f 	dsb	sy
 8013c3e:	60bb      	str	r3, [r7, #8]
 8013c40:	e7fe      	b.n	8013c40 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013c42:	f000 f879 	bl	8013d38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013c46:	2100      	movs	r1, #0
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f000 fe91 	bl	8014970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013c4e:	f000 f881 	bl	8013d54 <xTaskResumeAll>
 8013c52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d107      	bne.n	8013c6a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013c5a:	4b07      	ldr	r3, [pc, #28]	; (8013c78 <vTaskDelay+0x64>)
 8013c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c60:	601a      	str	r2, [r3, #0]
 8013c62:	f3bf 8f4f 	dsb	sy
 8013c66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c6a:	bf00      	nop
 8013c6c:	3710      	adds	r7, #16
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	2000298c 	.word	0x2000298c
 8013c78:	e000ed04 	.word	0xe000ed04

08013c7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b08a      	sub	sp, #40	; 0x28
 8013c80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013c82:	2300      	movs	r3, #0
 8013c84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013c86:	2300      	movs	r3, #0
 8013c88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013c8a:	463a      	mov	r2, r7
 8013c8c:	1d39      	adds	r1, r7, #4
 8013c8e:	f107 0308 	add.w	r3, r7, #8
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7ee fc6a 	bl	800256c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013c98:	6839      	ldr	r1, [r7, #0]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	68ba      	ldr	r2, [r7, #8]
 8013c9e:	9202      	str	r2, [sp, #8]
 8013ca0:	9301      	str	r3, [sp, #4]
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	9300      	str	r3, [sp, #0]
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	460a      	mov	r2, r1
 8013caa:	491d      	ldr	r1, [pc, #116]	; (8013d20 <vTaskStartScheduler+0xa4>)
 8013cac:	481d      	ldr	r0, [pc, #116]	; (8013d24 <vTaskStartScheduler+0xa8>)
 8013cae:	f7ff fe22 	bl	80138f6 <xTaskCreateStatic>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	4b1c      	ldr	r3, [pc, #112]	; (8013d28 <vTaskStartScheduler+0xac>)
 8013cb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013cb8:	4b1b      	ldr	r3, [pc, #108]	; (8013d28 <vTaskStartScheduler+0xac>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d002      	beq.n	8013cc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	617b      	str	r3, [r7, #20]
 8013cc4:	e001      	b.n	8013cca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d115      	bne.n	8013cfc <vTaskStartScheduler+0x80>
 8013cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd4:	f383 8811 	msr	BASEPRI, r3
 8013cd8:	f3bf 8f6f 	isb	sy
 8013cdc:	f3bf 8f4f 	dsb	sy
 8013ce0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013ce2:	4b12      	ldr	r3, [pc, #72]	; (8013d2c <vTaskStartScheduler+0xb0>)
 8013ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ce8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013cea:	4b11      	ldr	r3, [pc, #68]	; (8013d30 <vTaskStartScheduler+0xb4>)
 8013cec:	2201      	movs	r2, #1
 8013cee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013cf0:	4b10      	ldr	r3, [pc, #64]	; (8013d34 <vTaskStartScheduler+0xb8>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013cf6:	f000 ff2b 	bl	8014b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013cfa:	e00d      	b.n	8013d18 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d02:	d109      	bne.n	8013d18 <vTaskStartScheduler+0x9c>
 8013d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d08:	f383 8811 	msr	BASEPRI, r3
 8013d0c:	f3bf 8f6f 	isb	sy
 8013d10:	f3bf 8f4f 	dsb	sy
 8013d14:	60fb      	str	r3, [r7, #12]
 8013d16:	e7fe      	b.n	8013d16 <vTaskStartScheduler+0x9a>
}
 8013d18:	bf00      	nop
 8013d1a:	3718      	adds	r7, #24
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	0801b4d4 	.word	0x0801b4d4
 8013d24:	080142c1 	.word	0x080142c1
 8013d28:	20002988 	.word	0x20002988
 8013d2c:	20002984 	.word	0x20002984
 8013d30:	20002970 	.word	0x20002970
 8013d34:	20002968 	.word	0x20002968

08013d38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013d38:	b480      	push	{r7}
 8013d3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013d3c:	4b04      	ldr	r3, [pc, #16]	; (8013d50 <vTaskSuspendAll+0x18>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	3301      	adds	r3, #1
 8013d42:	4a03      	ldr	r2, [pc, #12]	; (8013d50 <vTaskSuspendAll+0x18>)
 8013d44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013d46:	bf00      	nop
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr
 8013d50:	2000298c 	.word	0x2000298c

08013d54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013d62:	4b41      	ldr	r3, [pc, #260]	; (8013e68 <xTaskResumeAll+0x114>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d109      	bne.n	8013d7e <xTaskResumeAll+0x2a>
 8013d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d6e:	f383 8811 	msr	BASEPRI, r3
 8013d72:	f3bf 8f6f 	isb	sy
 8013d76:	f3bf 8f4f 	dsb	sy
 8013d7a:	603b      	str	r3, [r7, #0]
 8013d7c:	e7fe      	b.n	8013d7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013d7e:	f000 ff85 	bl	8014c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013d82:	4b39      	ldr	r3, [pc, #228]	; (8013e68 <xTaskResumeAll+0x114>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	3b01      	subs	r3, #1
 8013d88:	4a37      	ldr	r2, [pc, #220]	; (8013e68 <xTaskResumeAll+0x114>)
 8013d8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d8c:	4b36      	ldr	r3, [pc, #216]	; (8013e68 <xTaskResumeAll+0x114>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d161      	bne.n	8013e58 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013d94:	4b35      	ldr	r3, [pc, #212]	; (8013e6c <xTaskResumeAll+0x118>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d05d      	beq.n	8013e58 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d9c:	e02e      	b.n	8013dfc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d9e:	4b34      	ldr	r3, [pc, #208]	; (8013e70 <xTaskResumeAll+0x11c>)
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	3318      	adds	r3, #24
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe fffb 	bl	8012da6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	3304      	adds	r3, #4
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fe fff6 	bl	8012da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	409a      	lsls	r2, r3
 8013dc2:	4b2c      	ldr	r3, [pc, #176]	; (8013e74 <xTaskResumeAll+0x120>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	4313      	orrs	r3, r2
 8013dc8:	4a2a      	ldr	r2, [pc, #168]	; (8013e74 <xTaskResumeAll+0x120>)
 8013dca:	6013      	str	r3, [r2, #0]
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dd0:	4613      	mov	r3, r2
 8013dd2:	009b      	lsls	r3, r3, #2
 8013dd4:	4413      	add	r3, r2
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	4a27      	ldr	r2, [pc, #156]	; (8013e78 <xTaskResumeAll+0x124>)
 8013dda:	441a      	add	r2, r3
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	3304      	adds	r3, #4
 8013de0:	4619      	mov	r1, r3
 8013de2:	4610      	mov	r0, r2
 8013de4:	f7fe ff82 	bl	8012cec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dec:	4b23      	ldr	r3, [pc, #140]	; (8013e7c <xTaskResumeAll+0x128>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df2:	429a      	cmp	r2, r3
 8013df4:	d302      	bcc.n	8013dfc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013df6:	4b22      	ldr	r3, [pc, #136]	; (8013e80 <xTaskResumeAll+0x12c>)
 8013df8:	2201      	movs	r2, #1
 8013dfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013dfc:	4b1c      	ldr	r3, [pc, #112]	; (8013e70 <xTaskResumeAll+0x11c>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d1cc      	bne.n	8013d9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d001      	beq.n	8013e0e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013e0a:	f000 fb0b 	bl	8014424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013e0e:	4b1d      	ldr	r3, [pc, #116]	; (8013e84 <xTaskResumeAll+0x130>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d010      	beq.n	8013e3c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013e1a:	f000 f837 	bl	8013e8c <xTaskIncrementTick>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d002      	beq.n	8013e2a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013e24:	4b16      	ldr	r3, [pc, #88]	; (8013e80 <xTaskResumeAll+0x12c>)
 8013e26:	2201      	movs	r2, #1
 8013e28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	3b01      	subs	r3, #1
 8013e2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d1f1      	bne.n	8013e1a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013e36:	4b13      	ldr	r3, [pc, #76]	; (8013e84 <xTaskResumeAll+0x130>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013e3c:	4b10      	ldr	r3, [pc, #64]	; (8013e80 <xTaskResumeAll+0x12c>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d009      	beq.n	8013e58 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013e44:	2301      	movs	r3, #1
 8013e46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013e48:	4b0f      	ldr	r3, [pc, #60]	; (8013e88 <xTaskResumeAll+0x134>)
 8013e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e4e:	601a      	str	r2, [r3, #0]
 8013e50:	f3bf 8f4f 	dsb	sy
 8013e54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e58:	f000 ff46 	bl	8014ce8 <vPortExitCritical>

	return xAlreadyYielded;
 8013e5c:	68bb      	ldr	r3, [r7, #8]
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3710      	adds	r7, #16
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	2000298c 	.word	0x2000298c
 8013e6c:	20002964 	.word	0x20002964
 8013e70:	20002924 	.word	0x20002924
 8013e74:	2000296c 	.word	0x2000296c
 8013e78:	20002868 	.word	0x20002868
 8013e7c:	20002864 	.word	0x20002864
 8013e80:	20002978 	.word	0x20002978
 8013e84:	20002974 	.word	0x20002974
 8013e88:	e000ed04 	.word	0xe000ed04

08013e8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b086      	sub	sp, #24
 8013e90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013e92:	2300      	movs	r3, #0
 8013e94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e96:	4b4e      	ldr	r3, [pc, #312]	; (8013fd0 <xTaskIncrementTick+0x144>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	f040 8087 	bne.w	8013fae <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013ea0:	4b4c      	ldr	r3, [pc, #304]	; (8013fd4 <xTaskIncrementTick+0x148>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013ea8:	4a4a      	ldr	r2, [pc, #296]	; (8013fd4 <xTaskIncrementTick+0x148>)
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d11f      	bne.n	8013ef4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013eb4:	4b48      	ldr	r3, [pc, #288]	; (8013fd8 <xTaskIncrementTick+0x14c>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d009      	beq.n	8013ed2 <xTaskIncrementTick+0x46>
 8013ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec2:	f383 8811 	msr	BASEPRI, r3
 8013ec6:	f3bf 8f6f 	isb	sy
 8013eca:	f3bf 8f4f 	dsb	sy
 8013ece:	603b      	str	r3, [r7, #0]
 8013ed0:	e7fe      	b.n	8013ed0 <xTaskIncrementTick+0x44>
 8013ed2:	4b41      	ldr	r3, [pc, #260]	; (8013fd8 <xTaskIncrementTick+0x14c>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	60fb      	str	r3, [r7, #12]
 8013ed8:	4b40      	ldr	r3, [pc, #256]	; (8013fdc <xTaskIncrementTick+0x150>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	4a3e      	ldr	r2, [pc, #248]	; (8013fd8 <xTaskIncrementTick+0x14c>)
 8013ede:	6013      	str	r3, [r2, #0]
 8013ee0:	4a3e      	ldr	r2, [pc, #248]	; (8013fdc <xTaskIncrementTick+0x150>)
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	6013      	str	r3, [r2, #0]
 8013ee6:	4b3e      	ldr	r3, [pc, #248]	; (8013fe0 <xTaskIncrementTick+0x154>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	3301      	adds	r3, #1
 8013eec:	4a3c      	ldr	r2, [pc, #240]	; (8013fe0 <xTaskIncrementTick+0x154>)
 8013eee:	6013      	str	r3, [r2, #0]
 8013ef0:	f000 fa98 	bl	8014424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013ef4:	4b3b      	ldr	r3, [pc, #236]	; (8013fe4 <xTaskIncrementTick+0x158>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	693a      	ldr	r2, [r7, #16]
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d348      	bcc.n	8013f90 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013efe:	4b36      	ldr	r3, [pc, #216]	; (8013fd8 <xTaskIncrementTick+0x14c>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d104      	bne.n	8013f12 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f08:	4b36      	ldr	r3, [pc, #216]	; (8013fe4 <xTaskIncrementTick+0x158>)
 8013f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f0e:	601a      	str	r2, [r3, #0]
					break;
 8013f10:	e03e      	b.n	8013f90 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f12:	4b31      	ldr	r3, [pc, #196]	; (8013fd8 <xTaskIncrementTick+0x14c>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	68db      	ldr	r3, [r3, #12]
 8013f1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013f22:	693a      	ldr	r2, [r7, #16]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d203      	bcs.n	8013f32 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013f2a:	4a2e      	ldr	r2, [pc, #184]	; (8013fe4 <xTaskIncrementTick+0x158>)
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013f30:	e02e      	b.n	8013f90 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	3304      	adds	r3, #4
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7fe ff35 	bl	8012da6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d004      	beq.n	8013f4e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	3318      	adds	r3, #24
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7fe ff2c 	bl	8012da6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f52:	2201      	movs	r2, #1
 8013f54:	409a      	lsls	r2, r3
 8013f56:	4b24      	ldr	r3, [pc, #144]	; (8013fe8 <xTaskIncrementTick+0x15c>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4313      	orrs	r3, r2
 8013f5c:	4a22      	ldr	r2, [pc, #136]	; (8013fe8 <xTaskIncrementTick+0x15c>)
 8013f5e:	6013      	str	r3, [r2, #0]
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f64:	4613      	mov	r3, r2
 8013f66:	009b      	lsls	r3, r3, #2
 8013f68:	4413      	add	r3, r2
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	4a1f      	ldr	r2, [pc, #124]	; (8013fec <xTaskIncrementTick+0x160>)
 8013f6e:	441a      	add	r2, r3
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	3304      	adds	r3, #4
 8013f74:	4619      	mov	r1, r3
 8013f76:	4610      	mov	r0, r2
 8013f78:	f7fe feb8 	bl	8012cec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f80:	4b1b      	ldr	r3, [pc, #108]	; (8013ff0 <xTaskIncrementTick+0x164>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d3b9      	bcc.n	8013efe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f8e:	e7b6      	b.n	8013efe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013f90:	4b17      	ldr	r3, [pc, #92]	; (8013ff0 <xTaskIncrementTick+0x164>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f96:	4915      	ldr	r1, [pc, #84]	; (8013fec <xTaskIncrementTick+0x160>)
 8013f98:	4613      	mov	r3, r2
 8013f9a:	009b      	lsls	r3, r3, #2
 8013f9c:	4413      	add	r3, r2
 8013f9e:	009b      	lsls	r3, r3, #2
 8013fa0:	440b      	add	r3, r1
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b01      	cmp	r3, #1
 8013fa6:	d907      	bls.n	8013fb8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	617b      	str	r3, [r7, #20]
 8013fac:	e004      	b.n	8013fb8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013fae:	4b11      	ldr	r3, [pc, #68]	; (8013ff4 <xTaskIncrementTick+0x168>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	3301      	adds	r3, #1
 8013fb4:	4a0f      	ldr	r2, [pc, #60]	; (8013ff4 <xTaskIncrementTick+0x168>)
 8013fb6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013fb8:	4b0f      	ldr	r3, [pc, #60]	; (8013ff8 <xTaskIncrementTick+0x16c>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013fc4:	697b      	ldr	r3, [r7, #20]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3718      	adds	r7, #24
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	2000298c 	.word	0x2000298c
 8013fd4:	20002968 	.word	0x20002968
 8013fd8:	2000291c 	.word	0x2000291c
 8013fdc:	20002920 	.word	0x20002920
 8013fe0:	2000297c 	.word	0x2000297c
 8013fe4:	20002984 	.word	0x20002984
 8013fe8:	2000296c 	.word	0x2000296c
 8013fec:	20002868 	.word	0x20002868
 8013ff0:	20002864 	.word	0x20002864
 8013ff4:	20002974 	.word	0x20002974
 8013ff8:	20002978 	.word	0x20002978

08013ffc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b087      	sub	sp, #28
 8014000:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014002:	4b26      	ldr	r3, [pc, #152]	; (801409c <vTaskSwitchContext+0xa0>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d003      	beq.n	8014012 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801400a:	4b25      	ldr	r3, [pc, #148]	; (80140a0 <vTaskSwitchContext+0xa4>)
 801400c:	2201      	movs	r2, #1
 801400e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014010:	e03e      	b.n	8014090 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8014012:	4b23      	ldr	r3, [pc, #140]	; (80140a0 <vTaskSwitchContext+0xa4>)
 8014014:	2200      	movs	r2, #0
 8014016:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014018:	4b22      	ldr	r3, [pc, #136]	; (80140a4 <vTaskSwitchContext+0xa8>)
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	fab3 f383 	clz	r3, r3
 8014024:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014026:	7afb      	ldrb	r3, [r7, #11]
 8014028:	f1c3 031f 	rsb	r3, r3, #31
 801402c:	617b      	str	r3, [r7, #20]
 801402e:	491e      	ldr	r1, [pc, #120]	; (80140a8 <vTaskSwitchContext+0xac>)
 8014030:	697a      	ldr	r2, [r7, #20]
 8014032:	4613      	mov	r3, r2
 8014034:	009b      	lsls	r3, r3, #2
 8014036:	4413      	add	r3, r2
 8014038:	009b      	lsls	r3, r3, #2
 801403a:	440b      	add	r3, r1
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d109      	bne.n	8014056 <vTaskSwitchContext+0x5a>
	__asm volatile
 8014042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014046:	f383 8811 	msr	BASEPRI, r3
 801404a:	f3bf 8f6f 	isb	sy
 801404e:	f3bf 8f4f 	dsb	sy
 8014052:	607b      	str	r3, [r7, #4]
 8014054:	e7fe      	b.n	8014054 <vTaskSwitchContext+0x58>
 8014056:	697a      	ldr	r2, [r7, #20]
 8014058:	4613      	mov	r3, r2
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	4413      	add	r3, r2
 801405e:	009b      	lsls	r3, r3, #2
 8014060:	4a11      	ldr	r2, [pc, #68]	; (80140a8 <vTaskSwitchContext+0xac>)
 8014062:	4413      	add	r3, r2
 8014064:	613b      	str	r3, [r7, #16]
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	685a      	ldr	r2, [r3, #4]
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	605a      	str	r2, [r3, #4]
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	685a      	ldr	r2, [r3, #4]
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	3308      	adds	r3, #8
 8014078:	429a      	cmp	r2, r3
 801407a:	d104      	bne.n	8014086 <vTaskSwitchContext+0x8a>
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	685b      	ldr	r3, [r3, #4]
 8014080:	685a      	ldr	r2, [r3, #4]
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	605a      	str	r2, [r3, #4]
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	4a07      	ldr	r2, [pc, #28]	; (80140ac <vTaskSwitchContext+0xb0>)
 801408e:	6013      	str	r3, [r2, #0]
}
 8014090:	bf00      	nop
 8014092:	371c      	adds	r7, #28
 8014094:	46bd      	mov	sp, r7
 8014096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409a:	4770      	bx	lr
 801409c:	2000298c 	.word	0x2000298c
 80140a0:	20002978 	.word	0x20002978
 80140a4:	2000296c 	.word	0x2000296c
 80140a8:	20002868 	.word	0x20002868
 80140ac:	20002864 	.word	0x20002864

080140b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d109      	bne.n	80140d4 <vTaskPlaceOnEventList+0x24>
 80140c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c4:	f383 8811 	msr	BASEPRI, r3
 80140c8:	f3bf 8f6f 	isb	sy
 80140cc:	f3bf 8f4f 	dsb	sy
 80140d0:	60fb      	str	r3, [r7, #12]
 80140d2:	e7fe      	b.n	80140d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80140d4:	4b07      	ldr	r3, [pc, #28]	; (80140f4 <vTaskPlaceOnEventList+0x44>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	3318      	adds	r3, #24
 80140da:	4619      	mov	r1, r3
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f7fe fe29 	bl	8012d34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80140e2:	2101      	movs	r1, #1
 80140e4:	6838      	ldr	r0, [r7, #0]
 80140e6:	f000 fc43 	bl	8014970 <prvAddCurrentTaskToDelayedList>
}
 80140ea:	bf00      	nop
 80140ec:	3710      	adds	r7, #16
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	20002864 	.word	0x20002864

080140f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b086      	sub	sp, #24
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014108:	693b      	ldr	r3, [r7, #16]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d109      	bne.n	8014122 <xTaskRemoveFromEventList+0x2a>
 801410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014112:	f383 8811 	msr	BASEPRI, r3
 8014116:	f3bf 8f6f 	isb	sy
 801411a:	f3bf 8f4f 	dsb	sy
 801411e:	60fb      	str	r3, [r7, #12]
 8014120:	e7fe      	b.n	8014120 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	3318      	adds	r3, #24
 8014126:	4618      	mov	r0, r3
 8014128:	f7fe fe3d 	bl	8012da6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801412c:	4b1d      	ldr	r3, [pc, #116]	; (80141a4 <xTaskRemoveFromEventList+0xac>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d11c      	bne.n	801416e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014134:	693b      	ldr	r3, [r7, #16]
 8014136:	3304      	adds	r3, #4
 8014138:	4618      	mov	r0, r3
 801413a:	f7fe fe34 	bl	8012da6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801413e:	693b      	ldr	r3, [r7, #16]
 8014140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014142:	2201      	movs	r2, #1
 8014144:	409a      	lsls	r2, r3
 8014146:	4b18      	ldr	r3, [pc, #96]	; (80141a8 <xTaskRemoveFromEventList+0xb0>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	4313      	orrs	r3, r2
 801414c:	4a16      	ldr	r2, [pc, #88]	; (80141a8 <xTaskRemoveFromEventList+0xb0>)
 801414e:	6013      	str	r3, [r2, #0]
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014154:	4613      	mov	r3, r2
 8014156:	009b      	lsls	r3, r3, #2
 8014158:	4413      	add	r3, r2
 801415a:	009b      	lsls	r3, r3, #2
 801415c:	4a13      	ldr	r2, [pc, #76]	; (80141ac <xTaskRemoveFromEventList+0xb4>)
 801415e:	441a      	add	r2, r3
 8014160:	693b      	ldr	r3, [r7, #16]
 8014162:	3304      	adds	r3, #4
 8014164:	4619      	mov	r1, r3
 8014166:	4610      	mov	r0, r2
 8014168:	f7fe fdc0 	bl	8012cec <vListInsertEnd>
 801416c:	e005      	b.n	801417a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801416e:	693b      	ldr	r3, [r7, #16]
 8014170:	3318      	adds	r3, #24
 8014172:	4619      	mov	r1, r3
 8014174:	480e      	ldr	r0, [pc, #56]	; (80141b0 <xTaskRemoveFromEventList+0xb8>)
 8014176:	f7fe fdb9 	bl	8012cec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801417a:	693b      	ldr	r3, [r7, #16]
 801417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801417e:	4b0d      	ldr	r3, [pc, #52]	; (80141b4 <xTaskRemoveFromEventList+0xbc>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014184:	429a      	cmp	r2, r3
 8014186:	d905      	bls.n	8014194 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014188:	2301      	movs	r3, #1
 801418a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801418c:	4b0a      	ldr	r3, [pc, #40]	; (80141b8 <xTaskRemoveFromEventList+0xc0>)
 801418e:	2201      	movs	r2, #1
 8014190:	601a      	str	r2, [r3, #0]
 8014192:	e001      	b.n	8014198 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8014194:	2300      	movs	r3, #0
 8014196:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014198:	697b      	ldr	r3, [r7, #20]
}
 801419a:	4618      	mov	r0, r3
 801419c:	3718      	adds	r7, #24
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	2000298c 	.word	0x2000298c
 80141a8:	2000296c 	.word	0x2000296c
 80141ac:	20002868 	.word	0x20002868
 80141b0:	20002924 	.word	0x20002924
 80141b4:	20002864 	.word	0x20002864
 80141b8:	20002978 	.word	0x20002978

080141bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80141bc:	b480      	push	{r7}
 80141be:	b083      	sub	sp, #12
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80141c4:	4b06      	ldr	r3, [pc, #24]	; (80141e0 <vTaskInternalSetTimeOutState+0x24>)
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80141cc:	4b05      	ldr	r3, [pc, #20]	; (80141e4 <vTaskInternalSetTimeOutState+0x28>)
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	605a      	str	r2, [r3, #4]
}
 80141d4:	bf00      	nop
 80141d6:	370c      	adds	r7, #12
 80141d8:	46bd      	mov	sp, r7
 80141da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141de:	4770      	bx	lr
 80141e0:	2000297c 	.word	0x2000297c
 80141e4:	20002968 	.word	0x20002968

080141e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b088      	sub	sp, #32
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d109      	bne.n	801420c <xTaskCheckForTimeOut+0x24>
 80141f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fc:	f383 8811 	msr	BASEPRI, r3
 8014200:	f3bf 8f6f 	isb	sy
 8014204:	f3bf 8f4f 	dsb	sy
 8014208:	613b      	str	r3, [r7, #16]
 801420a:	e7fe      	b.n	801420a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d109      	bne.n	8014226 <xTaskCheckForTimeOut+0x3e>
 8014212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014216:	f383 8811 	msr	BASEPRI, r3
 801421a:	f3bf 8f6f 	isb	sy
 801421e:	f3bf 8f4f 	dsb	sy
 8014222:	60fb      	str	r3, [r7, #12]
 8014224:	e7fe      	b.n	8014224 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8014226:	f000 fd31 	bl	8014c8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801422a:	4b1d      	ldr	r3, [pc, #116]	; (80142a0 <xTaskCheckForTimeOut+0xb8>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	69ba      	ldr	r2, [r7, #24]
 8014236:	1ad3      	subs	r3, r2, r3
 8014238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014242:	d102      	bne.n	801424a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014244:	2300      	movs	r3, #0
 8014246:	61fb      	str	r3, [r7, #28]
 8014248:	e023      	b.n	8014292 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	4b15      	ldr	r3, [pc, #84]	; (80142a4 <xTaskCheckForTimeOut+0xbc>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	429a      	cmp	r2, r3
 8014254:	d007      	beq.n	8014266 <xTaskCheckForTimeOut+0x7e>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	69ba      	ldr	r2, [r7, #24]
 801425c:	429a      	cmp	r2, r3
 801425e:	d302      	bcc.n	8014266 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014260:	2301      	movs	r3, #1
 8014262:	61fb      	str	r3, [r7, #28]
 8014264:	e015      	b.n	8014292 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	697a      	ldr	r2, [r7, #20]
 801426c:	429a      	cmp	r2, r3
 801426e:	d20b      	bcs.n	8014288 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	681a      	ldr	r2, [r3, #0]
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	1ad2      	subs	r2, r2, r3
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7ff ff9d 	bl	80141bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014282:	2300      	movs	r3, #0
 8014284:	61fb      	str	r3, [r7, #28]
 8014286:	e004      	b.n	8014292 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	2200      	movs	r2, #0
 801428c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801428e:	2301      	movs	r3, #1
 8014290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014292:	f000 fd29 	bl	8014ce8 <vPortExitCritical>

	return xReturn;
 8014296:	69fb      	ldr	r3, [r7, #28]
}
 8014298:	4618      	mov	r0, r3
 801429a:	3720      	adds	r7, #32
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}
 80142a0:	20002968 	.word	0x20002968
 80142a4:	2000297c 	.word	0x2000297c

080142a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80142a8:	b480      	push	{r7}
 80142aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80142ac:	4b03      	ldr	r3, [pc, #12]	; (80142bc <vTaskMissedYield+0x14>)
 80142ae:	2201      	movs	r2, #1
 80142b0:	601a      	str	r2, [r3, #0]
}
 80142b2:	bf00      	nop
 80142b4:	46bd      	mov	sp, r7
 80142b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ba:	4770      	bx	lr
 80142bc:	20002978 	.word	0x20002978

080142c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b082      	sub	sp, #8
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80142c8:	f000 f852 	bl	8014370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80142cc:	4b06      	ldr	r3, [pc, #24]	; (80142e8 <prvIdleTask+0x28>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b01      	cmp	r3, #1
 80142d2:	d9f9      	bls.n	80142c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80142d4:	4b05      	ldr	r3, [pc, #20]	; (80142ec <prvIdleTask+0x2c>)
 80142d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142da:	601a      	str	r2, [r3, #0]
 80142dc:	f3bf 8f4f 	dsb	sy
 80142e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80142e4:	e7f0      	b.n	80142c8 <prvIdleTask+0x8>
 80142e6:	bf00      	nop
 80142e8:	20002868 	.word	0x20002868
 80142ec:	e000ed04 	.word	0xe000ed04

080142f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80142f6:	2300      	movs	r3, #0
 80142f8:	607b      	str	r3, [r7, #4]
 80142fa:	e00c      	b.n	8014316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80142fc:	687a      	ldr	r2, [r7, #4]
 80142fe:	4613      	mov	r3, r2
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	4413      	add	r3, r2
 8014304:	009b      	lsls	r3, r3, #2
 8014306:	4a12      	ldr	r2, [pc, #72]	; (8014350 <prvInitialiseTaskLists+0x60>)
 8014308:	4413      	add	r3, r2
 801430a:	4618      	mov	r0, r3
 801430c:	f7fe fcc1 	bl	8012c92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	3301      	adds	r3, #1
 8014314:	607b      	str	r3, [r7, #4]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2b06      	cmp	r3, #6
 801431a:	d9ef      	bls.n	80142fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801431c:	480d      	ldr	r0, [pc, #52]	; (8014354 <prvInitialiseTaskLists+0x64>)
 801431e:	f7fe fcb8 	bl	8012c92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014322:	480d      	ldr	r0, [pc, #52]	; (8014358 <prvInitialiseTaskLists+0x68>)
 8014324:	f7fe fcb5 	bl	8012c92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014328:	480c      	ldr	r0, [pc, #48]	; (801435c <prvInitialiseTaskLists+0x6c>)
 801432a:	f7fe fcb2 	bl	8012c92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801432e:	480c      	ldr	r0, [pc, #48]	; (8014360 <prvInitialiseTaskLists+0x70>)
 8014330:	f7fe fcaf 	bl	8012c92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014334:	480b      	ldr	r0, [pc, #44]	; (8014364 <prvInitialiseTaskLists+0x74>)
 8014336:	f7fe fcac 	bl	8012c92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801433a:	4b0b      	ldr	r3, [pc, #44]	; (8014368 <prvInitialiseTaskLists+0x78>)
 801433c:	4a05      	ldr	r2, [pc, #20]	; (8014354 <prvInitialiseTaskLists+0x64>)
 801433e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014340:	4b0a      	ldr	r3, [pc, #40]	; (801436c <prvInitialiseTaskLists+0x7c>)
 8014342:	4a05      	ldr	r2, [pc, #20]	; (8014358 <prvInitialiseTaskLists+0x68>)
 8014344:	601a      	str	r2, [r3, #0]
}
 8014346:	bf00      	nop
 8014348:	3708      	adds	r7, #8
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	20002868 	.word	0x20002868
 8014354:	200028f4 	.word	0x200028f4
 8014358:	20002908 	.word	0x20002908
 801435c:	20002924 	.word	0x20002924
 8014360:	20002938 	.word	0x20002938
 8014364:	20002950 	.word	0x20002950
 8014368:	2000291c 	.word	0x2000291c
 801436c:	20002920 	.word	0x20002920

08014370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014376:	e019      	b.n	80143ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014378:	f000 fc88 	bl	8014c8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801437c:	4b0f      	ldr	r3, [pc, #60]	; (80143bc <prvCheckTasksWaitingTermination+0x4c>)
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	68db      	ldr	r3, [r3, #12]
 8014382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	3304      	adds	r3, #4
 8014388:	4618      	mov	r0, r3
 801438a:	f7fe fd0c 	bl	8012da6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801438e:	4b0c      	ldr	r3, [pc, #48]	; (80143c0 <prvCheckTasksWaitingTermination+0x50>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	3b01      	subs	r3, #1
 8014394:	4a0a      	ldr	r2, [pc, #40]	; (80143c0 <prvCheckTasksWaitingTermination+0x50>)
 8014396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014398:	4b0a      	ldr	r3, [pc, #40]	; (80143c4 <prvCheckTasksWaitingTermination+0x54>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	3b01      	subs	r3, #1
 801439e:	4a09      	ldr	r2, [pc, #36]	; (80143c4 <prvCheckTasksWaitingTermination+0x54>)
 80143a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80143a2:	f000 fca1 	bl	8014ce8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f000 f80e 	bl	80143c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80143ac:	4b05      	ldr	r3, [pc, #20]	; (80143c4 <prvCheckTasksWaitingTermination+0x54>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d1e1      	bne.n	8014378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80143b4:	bf00      	nop
 80143b6:	3708      	adds	r7, #8
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	20002938 	.word	0x20002938
 80143c0:	20002964 	.word	0x20002964
 80143c4:	2000294c 	.word	0x2000294c

080143c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d108      	bne.n	80143ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143de:	4618      	mov	r0, r3
 80143e0:	f000 fe30 	bl	8015044 <vPortFree>
				vPortFree( pxTCB );
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f000 fe2d 	bl	8015044 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80143ea:	e017      	b.n	801441c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	d103      	bne.n	80143fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 fe24 	bl	8015044 <vPortFree>
	}
 80143fc:	e00e      	b.n	801441c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014404:	2b02      	cmp	r3, #2
 8014406:	d009      	beq.n	801441c <prvDeleteTCB+0x54>
 8014408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801440c:	f383 8811 	msr	BASEPRI, r3
 8014410:	f3bf 8f6f 	isb	sy
 8014414:	f3bf 8f4f 	dsb	sy
 8014418:	60fb      	str	r3, [r7, #12]
 801441a:	e7fe      	b.n	801441a <prvDeleteTCB+0x52>
	}
 801441c:	bf00      	nop
 801441e:	3710      	adds	r7, #16
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}

08014424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014424:	b480      	push	{r7}
 8014426:	b083      	sub	sp, #12
 8014428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801442a:	4b0c      	ldr	r3, [pc, #48]	; (801445c <prvResetNextTaskUnblockTime+0x38>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d104      	bne.n	801443e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014434:	4b0a      	ldr	r3, [pc, #40]	; (8014460 <prvResetNextTaskUnblockTime+0x3c>)
 8014436:	f04f 32ff 	mov.w	r2, #4294967295
 801443a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801443c:	e008      	b.n	8014450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801443e:	4b07      	ldr	r3, [pc, #28]	; (801445c <prvResetNextTaskUnblockTime+0x38>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	68db      	ldr	r3, [r3, #12]
 8014444:	68db      	ldr	r3, [r3, #12]
 8014446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	4a04      	ldr	r2, [pc, #16]	; (8014460 <prvResetNextTaskUnblockTime+0x3c>)
 801444e:	6013      	str	r3, [r2, #0]
}
 8014450:	bf00      	nop
 8014452:	370c      	adds	r7, #12
 8014454:	46bd      	mov	sp, r7
 8014456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445a:	4770      	bx	lr
 801445c:	2000291c 	.word	0x2000291c
 8014460:	20002984 	.word	0x20002984

08014464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801446a:	4b0b      	ldr	r3, [pc, #44]	; (8014498 <xTaskGetSchedulerState+0x34>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d102      	bne.n	8014478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014472:	2301      	movs	r3, #1
 8014474:	607b      	str	r3, [r7, #4]
 8014476:	e008      	b.n	801448a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014478:	4b08      	ldr	r3, [pc, #32]	; (801449c <xTaskGetSchedulerState+0x38>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d102      	bne.n	8014486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014480:	2302      	movs	r3, #2
 8014482:	607b      	str	r3, [r7, #4]
 8014484:	e001      	b.n	801448a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014486:	2300      	movs	r3, #0
 8014488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801448a:	687b      	ldr	r3, [r7, #4]
	}
 801448c:	4618      	mov	r0, r3
 801448e:	370c      	adds	r7, #12
 8014490:	46bd      	mov	sp, r7
 8014492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014496:	4770      	bx	lr
 8014498:	20002970 	.word	0x20002970
 801449c:	2000298c 	.word	0x2000298c

080144a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b086      	sub	sp, #24
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80144ac:	2300      	movs	r3, #0
 80144ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d06c      	beq.n	8014590 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80144b6:	4b39      	ldr	r3, [pc, #228]	; (801459c <xTaskPriorityDisinherit+0xfc>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	693a      	ldr	r2, [r7, #16]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d009      	beq.n	80144d4 <xTaskPriorityDisinherit+0x34>
 80144c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c4:	f383 8811 	msr	BASEPRI, r3
 80144c8:	f3bf 8f6f 	isb	sy
 80144cc:	f3bf 8f4f 	dsb	sy
 80144d0:	60fb      	str	r3, [r7, #12]
 80144d2:	e7fe      	b.n	80144d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d109      	bne.n	80144f0 <xTaskPriorityDisinherit+0x50>
 80144dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e0:	f383 8811 	msr	BASEPRI, r3
 80144e4:	f3bf 8f6f 	isb	sy
 80144e8:	f3bf 8f4f 	dsb	sy
 80144ec:	60bb      	str	r3, [r7, #8]
 80144ee:	e7fe      	b.n	80144ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144f4:	1e5a      	subs	r2, r3, #1
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014502:	429a      	cmp	r2, r3
 8014504:	d044      	beq.n	8014590 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801450a:	2b00      	cmp	r3, #0
 801450c:	d140      	bne.n	8014590 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	3304      	adds	r3, #4
 8014512:	4618      	mov	r0, r3
 8014514:	f7fe fc47 	bl	8012da6 <uxListRemove>
 8014518:	4603      	mov	r3, r0
 801451a:	2b00      	cmp	r3, #0
 801451c:	d115      	bne.n	801454a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014522:	491f      	ldr	r1, [pc, #124]	; (80145a0 <xTaskPriorityDisinherit+0x100>)
 8014524:	4613      	mov	r3, r2
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	4413      	add	r3, r2
 801452a:	009b      	lsls	r3, r3, #2
 801452c:	440b      	add	r3, r1
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d10a      	bne.n	801454a <xTaskPriorityDisinherit+0xaa>
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014538:	2201      	movs	r2, #1
 801453a:	fa02 f303 	lsl.w	r3, r2, r3
 801453e:	43da      	mvns	r2, r3
 8014540:	4b18      	ldr	r3, [pc, #96]	; (80145a4 <xTaskPriorityDisinherit+0x104>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4013      	ands	r3, r2
 8014546:	4a17      	ldr	r2, [pc, #92]	; (80145a4 <xTaskPriorityDisinherit+0x104>)
 8014548:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801454e:	693b      	ldr	r3, [r7, #16]
 8014550:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014556:	f1c3 0207 	rsb	r2, r3, #7
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014562:	2201      	movs	r2, #1
 8014564:	409a      	lsls	r2, r3
 8014566:	4b0f      	ldr	r3, [pc, #60]	; (80145a4 <xTaskPriorityDisinherit+0x104>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4313      	orrs	r3, r2
 801456c:	4a0d      	ldr	r2, [pc, #52]	; (80145a4 <xTaskPriorityDisinherit+0x104>)
 801456e:	6013      	str	r3, [r2, #0]
 8014570:	693b      	ldr	r3, [r7, #16]
 8014572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014574:	4613      	mov	r3, r2
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	4413      	add	r3, r2
 801457a:	009b      	lsls	r3, r3, #2
 801457c:	4a08      	ldr	r2, [pc, #32]	; (80145a0 <xTaskPriorityDisinherit+0x100>)
 801457e:	441a      	add	r2, r3
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	3304      	adds	r3, #4
 8014584:	4619      	mov	r1, r3
 8014586:	4610      	mov	r0, r2
 8014588:	f7fe fbb0 	bl	8012cec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801458c:	2301      	movs	r3, #1
 801458e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014590:	697b      	ldr	r3, [r7, #20]
	}
 8014592:	4618      	mov	r0, r3
 8014594:	3718      	adds	r7, #24
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}
 801459a:	bf00      	nop
 801459c:	20002864 	.word	0x20002864
 80145a0:	20002868 	.word	0x20002868
 80145a4:	2000296c 	.word	0x2000296c

080145a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	607a      	str	r2, [r7, #4]
 80145b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80145b6:	f000 fb69 	bl	8014c8c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80145ba:	4b26      	ldr	r3, [pc, #152]	; (8014654 <xTaskNotifyWait+0xac>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	2b02      	cmp	r3, #2
 80145c6:	d01a      	beq.n	80145fe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80145c8:	4b22      	ldr	r3, [pc, #136]	; (8014654 <xTaskNotifyWait+0xac>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80145ce:	68fa      	ldr	r2, [r7, #12]
 80145d0:	43d2      	mvns	r2, r2
 80145d2:	400a      	ands	r2, r1
 80145d4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80145d6:	4b1f      	ldr	r3, [pc, #124]	; (8014654 <xTaskNotifyWait+0xac>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2201      	movs	r2, #1
 80145dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d00b      	beq.n	80145fe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80145e6:	2101      	movs	r1, #1
 80145e8:	6838      	ldr	r0, [r7, #0]
 80145ea:	f000 f9c1 	bl	8014970 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80145ee:	4b1a      	ldr	r3, [pc, #104]	; (8014658 <xTaskNotifyWait+0xb0>)
 80145f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145f4:	601a      	str	r2, [r3, #0]
 80145f6:	f3bf 8f4f 	dsb	sy
 80145fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80145fe:	f000 fb73 	bl	8014ce8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014602:	f000 fb43 	bl	8014c8c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d004      	beq.n	8014616 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801460c:	4b11      	ldr	r3, [pc, #68]	; (8014654 <xTaskNotifyWait+0xac>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014616:	4b0f      	ldr	r3, [pc, #60]	; (8014654 <xTaskNotifyWait+0xac>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801461e:	b2db      	uxtb	r3, r3
 8014620:	2b02      	cmp	r3, #2
 8014622:	d002      	beq.n	801462a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014624:	2300      	movs	r3, #0
 8014626:	617b      	str	r3, [r7, #20]
 8014628:	e008      	b.n	801463c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801462a:	4b0a      	ldr	r3, [pc, #40]	; (8014654 <xTaskNotifyWait+0xac>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014630:	68ba      	ldr	r2, [r7, #8]
 8014632:	43d2      	mvns	r2, r2
 8014634:	400a      	ands	r2, r1
 8014636:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014638:	2301      	movs	r3, #1
 801463a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801463c:	4b05      	ldr	r3, [pc, #20]	; (8014654 <xTaskNotifyWait+0xac>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	2200      	movs	r2, #0
 8014642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014646:	f000 fb4f 	bl	8014ce8 <vPortExitCritical>

		return xReturn;
 801464a:	697b      	ldr	r3, [r7, #20]
	}
 801464c:	4618      	mov	r0, r3
 801464e:	3718      	adds	r7, #24
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}
 8014654:	20002864 	.word	0x20002864
 8014658:	e000ed04 	.word	0xe000ed04

0801465c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801465c:	b580      	push	{r7, lr}
 801465e:	b08a      	sub	sp, #40	; 0x28
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	603b      	str	r3, [r7, #0]
 8014668:	4613      	mov	r3, r2
 801466a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801466c:	2301      	movs	r3, #1
 801466e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d109      	bne.n	801468a <xTaskGenericNotify+0x2e>
 8014676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801467a:	f383 8811 	msr	BASEPRI, r3
 801467e:	f3bf 8f6f 	isb	sy
 8014682:	f3bf 8f4f 	dsb	sy
 8014686:	61bb      	str	r3, [r7, #24]
 8014688:	e7fe      	b.n	8014688 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801468e:	f000 fafd 	bl	8014c8c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d003      	beq.n	80146a0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014698:	6a3b      	ldr	r3, [r7, #32]
 801469a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80146a0:	6a3b      	ldr	r3, [r7, #32]
 80146a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80146a6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80146a8:	6a3b      	ldr	r3, [r7, #32]
 80146aa:	2202      	movs	r2, #2
 80146ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80146b0:	79fb      	ldrb	r3, [r7, #7]
 80146b2:	2b04      	cmp	r3, #4
 80146b4:	d827      	bhi.n	8014706 <xTaskGenericNotify+0xaa>
 80146b6:	a201      	add	r2, pc, #4	; (adr r2, 80146bc <xTaskGenericNotify+0x60>)
 80146b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146bc:	08014725 	.word	0x08014725
 80146c0:	080146d1 	.word	0x080146d1
 80146c4:	080146df 	.word	0x080146df
 80146c8:	080146eb 	.word	0x080146eb
 80146cc:	080146f3 	.word	0x080146f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80146d0:	6a3b      	ldr	r3, [r7, #32]
 80146d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	431a      	orrs	r2, r3
 80146d8:	6a3b      	ldr	r3, [r7, #32]
 80146da:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146dc:	e025      	b.n	801472a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80146de:	6a3b      	ldr	r3, [r7, #32]
 80146e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146e2:	1c5a      	adds	r2, r3, #1
 80146e4:	6a3b      	ldr	r3, [r7, #32]
 80146e6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146e8:	e01f      	b.n	801472a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80146ea:	6a3b      	ldr	r3, [r7, #32]
 80146ec:	68ba      	ldr	r2, [r7, #8]
 80146ee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80146f0:	e01b      	b.n	801472a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80146f2:	7ffb      	ldrb	r3, [r7, #31]
 80146f4:	2b02      	cmp	r3, #2
 80146f6:	d003      	beq.n	8014700 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80146f8:	6a3b      	ldr	r3, [r7, #32]
 80146fa:	68ba      	ldr	r2, [r7, #8]
 80146fc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80146fe:	e014      	b.n	801472a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8014700:	2300      	movs	r3, #0
 8014702:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014704:	e011      	b.n	801472a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014706:	6a3b      	ldr	r3, [r7, #32]
 8014708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801470e:	d00b      	beq.n	8014728 <xTaskGenericNotify+0xcc>
 8014710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014714:	f383 8811 	msr	BASEPRI, r3
 8014718:	f3bf 8f6f 	isb	sy
 801471c:	f3bf 8f4f 	dsb	sy
 8014720:	617b      	str	r3, [r7, #20]
 8014722:	e7fe      	b.n	8014722 <xTaskGenericNotify+0xc6>
					break;
 8014724:	bf00      	nop
 8014726:	e000      	b.n	801472a <xTaskGenericNotify+0xce>

					break;
 8014728:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801472a:	7ffb      	ldrb	r3, [r7, #31]
 801472c:	2b01      	cmp	r3, #1
 801472e:	d138      	bne.n	80147a2 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014730:	6a3b      	ldr	r3, [r7, #32]
 8014732:	3304      	adds	r3, #4
 8014734:	4618      	mov	r0, r3
 8014736:	f7fe fb36 	bl	8012da6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801473a:	6a3b      	ldr	r3, [r7, #32]
 801473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801473e:	2201      	movs	r2, #1
 8014740:	409a      	lsls	r2, r3
 8014742:	4b1b      	ldr	r3, [pc, #108]	; (80147b0 <xTaskGenericNotify+0x154>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	4313      	orrs	r3, r2
 8014748:	4a19      	ldr	r2, [pc, #100]	; (80147b0 <xTaskGenericNotify+0x154>)
 801474a:	6013      	str	r3, [r2, #0]
 801474c:	6a3b      	ldr	r3, [r7, #32]
 801474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014750:	4613      	mov	r3, r2
 8014752:	009b      	lsls	r3, r3, #2
 8014754:	4413      	add	r3, r2
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4a16      	ldr	r2, [pc, #88]	; (80147b4 <xTaskGenericNotify+0x158>)
 801475a:	441a      	add	r2, r3
 801475c:	6a3b      	ldr	r3, [r7, #32]
 801475e:	3304      	adds	r3, #4
 8014760:	4619      	mov	r1, r3
 8014762:	4610      	mov	r0, r2
 8014764:	f7fe fac2 	bl	8012cec <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014768:	6a3b      	ldr	r3, [r7, #32]
 801476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801476c:	2b00      	cmp	r3, #0
 801476e:	d009      	beq.n	8014784 <xTaskGenericNotify+0x128>
 8014770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014774:	f383 8811 	msr	BASEPRI, r3
 8014778:	f3bf 8f6f 	isb	sy
 801477c:	f3bf 8f4f 	dsb	sy
 8014780:	613b      	str	r3, [r7, #16]
 8014782:	e7fe      	b.n	8014782 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014784:	6a3b      	ldr	r3, [r7, #32]
 8014786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014788:	4b0b      	ldr	r3, [pc, #44]	; (80147b8 <xTaskGenericNotify+0x15c>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801478e:	429a      	cmp	r2, r3
 8014790:	d907      	bls.n	80147a2 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014792:	4b0a      	ldr	r3, [pc, #40]	; (80147bc <xTaskGenericNotify+0x160>)
 8014794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014798:	601a      	str	r2, [r3, #0]
 801479a:	f3bf 8f4f 	dsb	sy
 801479e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80147a2:	f000 faa1 	bl	8014ce8 <vPortExitCritical>

		return xReturn;
 80147a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3728      	adds	r7, #40	; 0x28
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	2000296c 	.word	0x2000296c
 80147b4:	20002868 	.word	0x20002868
 80147b8:	20002864 	.word	0x20002864
 80147bc:	e000ed04 	.word	0xe000ed04

080147c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b08e      	sub	sp, #56	; 0x38
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	60b9      	str	r1, [r7, #8]
 80147ca:	603b      	str	r3, [r7, #0]
 80147cc:	4613      	mov	r3, r2
 80147ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80147d0:	2301      	movs	r3, #1
 80147d2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d109      	bne.n	80147ee <xTaskGenericNotifyFromISR+0x2e>
 80147da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147de:	f383 8811 	msr	BASEPRI, r3
 80147e2:	f3bf 8f6f 	isb	sy
 80147e6:	f3bf 8f4f 	dsb	sy
 80147ea:	627b      	str	r3, [r7, #36]	; 0x24
 80147ec:	e7fe      	b.n	80147ec <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80147ee:	f000 fb29 	bl	8014e44 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80147f6:	f3ef 8211 	mrs	r2, BASEPRI
 80147fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fe:	f383 8811 	msr	BASEPRI, r3
 8014802:	f3bf 8f6f 	isb	sy
 8014806:	f3bf 8f4f 	dsb	sy
 801480a:	623a      	str	r2, [r7, #32]
 801480c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801480e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014810:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d003      	beq.n	8014820 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801481a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801482c:	2202      	movs	r2, #2
 801482e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014832:	79fb      	ldrb	r3, [r7, #7]
 8014834:	2b04      	cmp	r3, #4
 8014836:	d829      	bhi.n	801488c <xTaskGenericNotifyFromISR+0xcc>
 8014838:	a201      	add	r2, pc, #4	; (adr r2, 8014840 <xTaskGenericNotifyFromISR+0x80>)
 801483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801483e:	bf00      	nop
 8014840:	080148ab 	.word	0x080148ab
 8014844:	08014855 	.word	0x08014855
 8014848:	08014863 	.word	0x08014863
 801484c:	0801486f 	.word	0x0801486f
 8014850:	08014877 	.word	0x08014877
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	431a      	orrs	r2, r3
 801485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801485e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014860:	e026      	b.n	80148b0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014866:	1c5a      	adds	r2, r3, #1
 8014868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801486c:	e020      	b.n	80148b0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014870:	68ba      	ldr	r2, [r7, #8]
 8014872:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014874:	e01c      	b.n	80148b0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014876:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801487a:	2b02      	cmp	r3, #2
 801487c:	d003      	beq.n	8014886 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014880:	68ba      	ldr	r2, [r7, #8]
 8014882:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014884:	e014      	b.n	80148b0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8014886:	2300      	movs	r3, #0
 8014888:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801488a:	e011      	b.n	80148b0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014894:	d00b      	beq.n	80148ae <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8014896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801489a:	f383 8811 	msr	BASEPRI, r3
 801489e:	f3bf 8f6f 	isb	sy
 80148a2:	f3bf 8f4f 	dsb	sy
 80148a6:	61bb      	str	r3, [r7, #24]
 80148a8:	e7fe      	b.n	80148a8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80148aa:	bf00      	nop
 80148ac:	e000      	b.n	80148b0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80148ae:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80148b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d144      	bne.n	8014942 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80148b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d009      	beq.n	80148d4 <xTaskGenericNotifyFromISR+0x114>
 80148c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c4:	f383 8811 	msr	BASEPRI, r3
 80148c8:	f3bf 8f6f 	isb	sy
 80148cc:	f3bf 8f4f 	dsb	sy
 80148d0:	617b      	str	r3, [r7, #20]
 80148d2:	e7fe      	b.n	80148d2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148d4:	4b20      	ldr	r3, [pc, #128]	; (8014958 <xTaskGenericNotifyFromISR+0x198>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d11c      	bne.n	8014916 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148de:	3304      	adds	r3, #4
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7fe fa60 	bl	8012da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ea:	2201      	movs	r2, #1
 80148ec:	409a      	lsls	r2, r3
 80148ee:	4b1b      	ldr	r3, [pc, #108]	; (801495c <xTaskGenericNotifyFromISR+0x19c>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	4313      	orrs	r3, r2
 80148f4:	4a19      	ldr	r2, [pc, #100]	; (801495c <xTaskGenericNotifyFromISR+0x19c>)
 80148f6:	6013      	str	r3, [r2, #0]
 80148f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148fc:	4613      	mov	r3, r2
 80148fe:	009b      	lsls	r3, r3, #2
 8014900:	4413      	add	r3, r2
 8014902:	009b      	lsls	r3, r3, #2
 8014904:	4a16      	ldr	r2, [pc, #88]	; (8014960 <xTaskGenericNotifyFromISR+0x1a0>)
 8014906:	441a      	add	r2, r3
 8014908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490a:	3304      	adds	r3, #4
 801490c:	4619      	mov	r1, r3
 801490e:	4610      	mov	r0, r2
 8014910:	f7fe f9ec 	bl	8012cec <vListInsertEnd>
 8014914:	e005      	b.n	8014922 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014918:	3318      	adds	r3, #24
 801491a:	4619      	mov	r1, r3
 801491c:	4811      	ldr	r0, [pc, #68]	; (8014964 <xTaskGenericNotifyFromISR+0x1a4>)
 801491e:	f7fe f9e5 	bl	8012cec <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014926:	4b10      	ldr	r3, [pc, #64]	; (8014968 <xTaskGenericNotifyFromISR+0x1a8>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801492c:	429a      	cmp	r2, r3
 801492e:	d908      	bls.n	8014942 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014932:	2b00      	cmp	r3, #0
 8014934:	d002      	beq.n	801493c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014938:	2201      	movs	r2, #1
 801493a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801493c:	4b0b      	ldr	r3, [pc, #44]	; (801496c <xTaskGenericNotifyFromISR+0x1ac>)
 801493e:	2201      	movs	r2, #1
 8014940:	601a      	str	r2, [r3, #0]
 8014942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014944:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801494e:	4618      	mov	r0, r3
 8014950:	3738      	adds	r7, #56	; 0x38
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	2000298c 	.word	0x2000298c
 801495c:	2000296c 	.word	0x2000296c
 8014960:	20002868 	.word	0x20002868
 8014964:	20002924 	.word	0x20002924
 8014968:	20002864 	.word	0x20002864
 801496c:	20002978 	.word	0x20002978

08014970 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b084      	sub	sp, #16
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801497a:	4b29      	ldr	r3, [pc, #164]	; (8014a20 <prvAddCurrentTaskToDelayedList+0xb0>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014980:	4b28      	ldr	r3, [pc, #160]	; (8014a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	3304      	adds	r3, #4
 8014986:	4618      	mov	r0, r3
 8014988:	f7fe fa0d 	bl	8012da6 <uxListRemove>
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d10b      	bne.n	80149aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014992:	4b24      	ldr	r3, [pc, #144]	; (8014a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014998:	2201      	movs	r2, #1
 801499a:	fa02 f303 	lsl.w	r3, r2, r3
 801499e:	43da      	mvns	r2, r3
 80149a0:	4b21      	ldr	r3, [pc, #132]	; (8014a28 <prvAddCurrentTaskToDelayedList+0xb8>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	4013      	ands	r3, r2
 80149a6:	4a20      	ldr	r2, [pc, #128]	; (8014a28 <prvAddCurrentTaskToDelayedList+0xb8>)
 80149a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b0:	d10a      	bne.n	80149c8 <prvAddCurrentTaskToDelayedList+0x58>
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d007      	beq.n	80149c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149b8:	4b1a      	ldr	r3, [pc, #104]	; (8014a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	3304      	adds	r3, #4
 80149be:	4619      	mov	r1, r3
 80149c0:	481a      	ldr	r0, [pc, #104]	; (8014a2c <prvAddCurrentTaskToDelayedList+0xbc>)
 80149c2:	f7fe f993 	bl	8012cec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80149c6:	e026      	b.n	8014a16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80149c8:	68fa      	ldr	r2, [r7, #12]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	4413      	add	r3, r2
 80149ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80149d0:	4b14      	ldr	r3, [pc, #80]	; (8014a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	68ba      	ldr	r2, [r7, #8]
 80149d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80149d8:	68ba      	ldr	r2, [r7, #8]
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d209      	bcs.n	80149f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149e0:	4b13      	ldr	r3, [pc, #76]	; (8014a30 <prvAddCurrentTaskToDelayedList+0xc0>)
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	4b0f      	ldr	r3, [pc, #60]	; (8014a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	3304      	adds	r3, #4
 80149ea:	4619      	mov	r1, r3
 80149ec:	4610      	mov	r0, r2
 80149ee:	f7fe f9a1 	bl	8012d34 <vListInsert>
}
 80149f2:	e010      	b.n	8014a16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149f4:	4b0f      	ldr	r3, [pc, #60]	; (8014a34 <prvAddCurrentTaskToDelayedList+0xc4>)
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	4b0a      	ldr	r3, [pc, #40]	; (8014a24 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	3304      	adds	r3, #4
 80149fe:	4619      	mov	r1, r3
 8014a00:	4610      	mov	r0, r2
 8014a02:	f7fe f997 	bl	8012d34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014a06:	4b0c      	ldr	r3, [pc, #48]	; (8014a38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	68ba      	ldr	r2, [r7, #8]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d202      	bcs.n	8014a16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014a10:	4a09      	ldr	r2, [pc, #36]	; (8014a38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	6013      	str	r3, [r2, #0]
}
 8014a16:	bf00      	nop
 8014a18:	3710      	adds	r7, #16
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
 8014a1e:	bf00      	nop
 8014a20:	20002968 	.word	0x20002968
 8014a24:	20002864 	.word	0x20002864
 8014a28:	2000296c 	.word	0x2000296c
 8014a2c:	20002950 	.word	0x20002950
 8014a30:	20002920 	.word	0x20002920
 8014a34:	2000291c 	.word	0x2000291c
 8014a38:	20002984 	.word	0x20002984

08014a3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a3c:	b480      	push	{r7}
 8014a3e:	b085      	sub	sp, #20
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	3b04      	subs	r3, #4
 8014a4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	3b04      	subs	r3, #4
 8014a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	f023 0201 	bic.w	r2, r3, #1
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	3b04      	subs	r3, #4
 8014a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014a6c:	4a0c      	ldr	r2, [pc, #48]	; (8014aa0 <pxPortInitialiseStack+0x64>)
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	3b14      	subs	r3, #20
 8014a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	3b04      	subs	r3, #4
 8014a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	f06f 0202 	mvn.w	r2, #2
 8014a8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	3b20      	subs	r3, #32
 8014a90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014a92:	68fb      	ldr	r3, [r7, #12]
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3714      	adds	r7, #20
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9e:	4770      	bx	lr
 8014aa0:	08014aa5 	.word	0x08014aa5

08014aa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b085      	sub	sp, #20
 8014aa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014aae:	4b11      	ldr	r3, [pc, #68]	; (8014af4 <prvTaskExitError+0x50>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ab6:	d009      	beq.n	8014acc <prvTaskExitError+0x28>
	__asm volatile
 8014ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014abc:	f383 8811 	msr	BASEPRI, r3
 8014ac0:	f3bf 8f6f 	isb	sy
 8014ac4:	f3bf 8f4f 	dsb	sy
 8014ac8:	60fb      	str	r3, [r7, #12]
 8014aca:	e7fe      	b.n	8014aca <prvTaskExitError+0x26>
 8014acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad0:	f383 8811 	msr	BASEPRI, r3
 8014ad4:	f3bf 8f6f 	isb	sy
 8014ad8:	f3bf 8f4f 	dsb	sy
 8014adc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014ade:	bf00      	nop
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d0fc      	beq.n	8014ae0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ae6:	bf00      	nop
 8014ae8:	3714      	adds	r7, #20
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	200021a4 	.word	0x200021a4
	...

08014b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b00:	4b07      	ldr	r3, [pc, #28]	; (8014b20 <pxCurrentTCBConst2>)
 8014b02:	6819      	ldr	r1, [r3, #0]
 8014b04:	6808      	ldr	r0, [r1, #0]
 8014b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b0a:	f380 8809 	msr	PSP, r0
 8014b0e:	f3bf 8f6f 	isb	sy
 8014b12:	f04f 0000 	mov.w	r0, #0
 8014b16:	f380 8811 	msr	BASEPRI, r0
 8014b1a:	4770      	bx	lr
 8014b1c:	f3af 8000 	nop.w

08014b20 <pxCurrentTCBConst2>:
 8014b20:	20002864 	.word	0x20002864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b24:	bf00      	nop
 8014b26:	bf00      	nop

08014b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b28:	4808      	ldr	r0, [pc, #32]	; (8014b4c <prvPortStartFirstTask+0x24>)
 8014b2a:	6800      	ldr	r0, [r0, #0]
 8014b2c:	6800      	ldr	r0, [r0, #0]
 8014b2e:	f380 8808 	msr	MSP, r0
 8014b32:	f04f 0000 	mov.w	r0, #0
 8014b36:	f380 8814 	msr	CONTROL, r0
 8014b3a:	b662      	cpsie	i
 8014b3c:	b661      	cpsie	f
 8014b3e:	f3bf 8f4f 	dsb	sy
 8014b42:	f3bf 8f6f 	isb	sy
 8014b46:	df00      	svc	0
 8014b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014b4a:	bf00      	nop
 8014b4c:	e000ed08 	.word	0xe000ed08

08014b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b086      	sub	sp, #24
 8014b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014b56:	4b44      	ldr	r3, [pc, #272]	; (8014c68 <xPortStartScheduler+0x118>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	4a44      	ldr	r2, [pc, #272]	; (8014c6c <xPortStartScheduler+0x11c>)
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	d109      	bne.n	8014b74 <xPortStartScheduler+0x24>
 8014b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b64:	f383 8811 	msr	BASEPRI, r3
 8014b68:	f3bf 8f6f 	isb	sy
 8014b6c:	f3bf 8f4f 	dsb	sy
 8014b70:	613b      	str	r3, [r7, #16]
 8014b72:	e7fe      	b.n	8014b72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014b74:	4b3c      	ldr	r3, [pc, #240]	; (8014c68 <xPortStartScheduler+0x118>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	4a3d      	ldr	r2, [pc, #244]	; (8014c70 <xPortStartScheduler+0x120>)
 8014b7a:	4293      	cmp	r3, r2
 8014b7c:	d109      	bne.n	8014b92 <xPortStartScheduler+0x42>
 8014b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b82:	f383 8811 	msr	BASEPRI, r3
 8014b86:	f3bf 8f6f 	isb	sy
 8014b8a:	f3bf 8f4f 	dsb	sy
 8014b8e:	60fb      	str	r3, [r7, #12]
 8014b90:	e7fe      	b.n	8014b90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014b92:	4b38      	ldr	r3, [pc, #224]	; (8014c74 <xPortStartScheduler+0x124>)
 8014b94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	781b      	ldrb	r3, [r3, #0]
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	22ff      	movs	r2, #255	; 0xff
 8014ba2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	781b      	ldrb	r3, [r3, #0]
 8014ba8:	b2db      	uxtb	r3, r3
 8014baa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014bac:	78fb      	ldrb	r3, [r7, #3]
 8014bae:	b2db      	uxtb	r3, r3
 8014bb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014bb4:	b2da      	uxtb	r2, r3
 8014bb6:	4b30      	ldr	r3, [pc, #192]	; (8014c78 <xPortStartScheduler+0x128>)
 8014bb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014bba:	4b30      	ldr	r3, [pc, #192]	; (8014c7c <xPortStartScheduler+0x12c>)
 8014bbc:	2207      	movs	r2, #7
 8014bbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014bc0:	e009      	b.n	8014bd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014bc2:	4b2e      	ldr	r3, [pc, #184]	; (8014c7c <xPortStartScheduler+0x12c>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	3b01      	subs	r3, #1
 8014bc8:	4a2c      	ldr	r2, [pc, #176]	; (8014c7c <xPortStartScheduler+0x12c>)
 8014bca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014bcc:	78fb      	ldrb	r3, [r7, #3]
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	005b      	lsls	r3, r3, #1
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014bd6:	78fb      	ldrb	r3, [r7, #3]
 8014bd8:	b2db      	uxtb	r3, r3
 8014bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bde:	2b80      	cmp	r3, #128	; 0x80
 8014be0:	d0ef      	beq.n	8014bc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014be2:	4b26      	ldr	r3, [pc, #152]	; (8014c7c <xPortStartScheduler+0x12c>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f1c3 0307 	rsb	r3, r3, #7
 8014bea:	2b04      	cmp	r3, #4
 8014bec:	d009      	beq.n	8014c02 <xPortStartScheduler+0xb2>
 8014bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf2:	f383 8811 	msr	BASEPRI, r3
 8014bf6:	f3bf 8f6f 	isb	sy
 8014bfa:	f3bf 8f4f 	dsb	sy
 8014bfe:	60bb      	str	r3, [r7, #8]
 8014c00:	e7fe      	b.n	8014c00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c02:	4b1e      	ldr	r3, [pc, #120]	; (8014c7c <xPortStartScheduler+0x12c>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	021b      	lsls	r3, r3, #8
 8014c08:	4a1c      	ldr	r2, [pc, #112]	; (8014c7c <xPortStartScheduler+0x12c>)
 8014c0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c0c:	4b1b      	ldr	r3, [pc, #108]	; (8014c7c <xPortStartScheduler+0x12c>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014c14:	4a19      	ldr	r2, [pc, #100]	; (8014c7c <xPortStartScheduler+0x12c>)
 8014c16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	b2da      	uxtb	r2, r3
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c20:	4b17      	ldr	r3, [pc, #92]	; (8014c80 <xPortStartScheduler+0x130>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	4a16      	ldr	r2, [pc, #88]	; (8014c80 <xPortStartScheduler+0x130>)
 8014c26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014c2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c2c:	4b14      	ldr	r3, [pc, #80]	; (8014c80 <xPortStartScheduler+0x130>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	4a13      	ldr	r2, [pc, #76]	; (8014c80 <xPortStartScheduler+0x130>)
 8014c32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014c36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014c38:	f000 f8d6 	bl	8014de8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014c3c:	4b11      	ldr	r3, [pc, #68]	; (8014c84 <xPortStartScheduler+0x134>)
 8014c3e:	2200      	movs	r2, #0
 8014c40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014c42:	f000 f8f5 	bl	8014e30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c46:	4b10      	ldr	r3, [pc, #64]	; (8014c88 <xPortStartScheduler+0x138>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	4a0f      	ldr	r2, [pc, #60]	; (8014c88 <xPortStartScheduler+0x138>)
 8014c4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014c50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c52:	f7ff ff69 	bl	8014b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014c56:	f7ff f9d1 	bl	8013ffc <vTaskSwitchContext>
	prvTaskExitError();
 8014c5a:	f7ff ff23 	bl	8014aa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c5e:	2300      	movs	r3, #0
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3718      	adds	r7, #24
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	e000ed00 	.word	0xe000ed00
 8014c6c:	410fc271 	.word	0x410fc271
 8014c70:	410fc270 	.word	0x410fc270
 8014c74:	e000e400 	.word	0xe000e400
 8014c78:	20002990 	.word	0x20002990
 8014c7c:	20002994 	.word	0x20002994
 8014c80:	e000ed20 	.word	0xe000ed20
 8014c84:	200021a4 	.word	0x200021a4
 8014c88:	e000ef34 	.word	0xe000ef34

08014c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014c8c:	b480      	push	{r7}
 8014c8e:	b083      	sub	sp, #12
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c96:	f383 8811 	msr	BASEPRI, r3
 8014c9a:	f3bf 8f6f 	isb	sy
 8014c9e:	f3bf 8f4f 	dsb	sy
 8014ca2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014ca4:	4b0e      	ldr	r3, [pc, #56]	; (8014ce0 <vPortEnterCritical+0x54>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	3301      	adds	r3, #1
 8014caa:	4a0d      	ldr	r2, [pc, #52]	; (8014ce0 <vPortEnterCritical+0x54>)
 8014cac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014cae:	4b0c      	ldr	r3, [pc, #48]	; (8014ce0 <vPortEnterCritical+0x54>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d10e      	bne.n	8014cd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014cb6:	4b0b      	ldr	r3, [pc, #44]	; (8014ce4 <vPortEnterCritical+0x58>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d009      	beq.n	8014cd4 <vPortEnterCritical+0x48>
 8014cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc4:	f383 8811 	msr	BASEPRI, r3
 8014cc8:	f3bf 8f6f 	isb	sy
 8014ccc:	f3bf 8f4f 	dsb	sy
 8014cd0:	603b      	str	r3, [r7, #0]
 8014cd2:	e7fe      	b.n	8014cd2 <vPortEnterCritical+0x46>
	}
}
 8014cd4:	bf00      	nop
 8014cd6:	370c      	adds	r7, #12
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cde:	4770      	bx	lr
 8014ce0:	200021a4 	.word	0x200021a4
 8014ce4:	e000ed04 	.word	0xe000ed04

08014ce8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b083      	sub	sp, #12
 8014cec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014cee:	4b11      	ldr	r3, [pc, #68]	; (8014d34 <vPortExitCritical+0x4c>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d109      	bne.n	8014d0a <vPortExitCritical+0x22>
 8014cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cfa:	f383 8811 	msr	BASEPRI, r3
 8014cfe:	f3bf 8f6f 	isb	sy
 8014d02:	f3bf 8f4f 	dsb	sy
 8014d06:	607b      	str	r3, [r7, #4]
 8014d08:	e7fe      	b.n	8014d08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014d0a:	4b0a      	ldr	r3, [pc, #40]	; (8014d34 <vPortExitCritical+0x4c>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	3b01      	subs	r3, #1
 8014d10:	4a08      	ldr	r2, [pc, #32]	; (8014d34 <vPortExitCritical+0x4c>)
 8014d12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014d14:	4b07      	ldr	r3, [pc, #28]	; (8014d34 <vPortExitCritical+0x4c>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d104      	bne.n	8014d26 <vPortExitCritical+0x3e>
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d26:	bf00      	nop
 8014d28:	370c      	adds	r7, #12
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d30:	4770      	bx	lr
 8014d32:	bf00      	nop
 8014d34:	200021a4 	.word	0x200021a4
	...

08014d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d40:	f3ef 8009 	mrs	r0, PSP
 8014d44:	f3bf 8f6f 	isb	sy
 8014d48:	4b15      	ldr	r3, [pc, #84]	; (8014da0 <pxCurrentTCBConst>)
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	f01e 0f10 	tst.w	lr, #16
 8014d50:	bf08      	it	eq
 8014d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5a:	6010      	str	r0, [r2, #0]
 8014d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014d64:	f380 8811 	msr	BASEPRI, r0
 8014d68:	f3bf 8f4f 	dsb	sy
 8014d6c:	f3bf 8f6f 	isb	sy
 8014d70:	f7ff f944 	bl	8013ffc <vTaskSwitchContext>
 8014d74:	f04f 0000 	mov.w	r0, #0
 8014d78:	f380 8811 	msr	BASEPRI, r0
 8014d7c:	bc09      	pop	{r0, r3}
 8014d7e:	6819      	ldr	r1, [r3, #0]
 8014d80:	6808      	ldr	r0, [r1, #0]
 8014d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d86:	f01e 0f10 	tst.w	lr, #16
 8014d8a:	bf08      	it	eq
 8014d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014d90:	f380 8809 	msr	PSP, r0
 8014d94:	f3bf 8f6f 	isb	sy
 8014d98:	4770      	bx	lr
 8014d9a:	bf00      	nop
 8014d9c:	f3af 8000 	nop.w

08014da0 <pxCurrentTCBConst>:
 8014da0:	20002864 	.word	0x20002864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014da4:	bf00      	nop
 8014da6:	bf00      	nop

08014da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
	__asm volatile
 8014dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db2:	f383 8811 	msr	BASEPRI, r3
 8014db6:	f3bf 8f6f 	isb	sy
 8014dba:	f3bf 8f4f 	dsb	sy
 8014dbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014dc0:	f7ff f864 	bl	8013e8c <xTaskIncrementTick>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d003      	beq.n	8014dd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014dca:	4b06      	ldr	r3, [pc, #24]	; (8014de4 <SysTick_Handler+0x3c>)
 8014dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dd0:	601a      	str	r2, [r3, #0]
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ddc:	bf00      	nop
 8014dde:	3708      	adds	r7, #8
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}
 8014de4:	e000ed04 	.word	0xe000ed04

08014de8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014de8:	b480      	push	{r7}
 8014dea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014dec:	4b0b      	ldr	r3, [pc, #44]	; (8014e1c <vPortSetupTimerInterrupt+0x34>)
 8014dee:	2200      	movs	r2, #0
 8014df0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014df2:	4b0b      	ldr	r3, [pc, #44]	; (8014e20 <vPortSetupTimerInterrupt+0x38>)
 8014df4:	2200      	movs	r2, #0
 8014df6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014df8:	4b0a      	ldr	r3, [pc, #40]	; (8014e24 <vPortSetupTimerInterrupt+0x3c>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	4a0a      	ldr	r2, [pc, #40]	; (8014e28 <vPortSetupTimerInterrupt+0x40>)
 8014dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8014e02:	099b      	lsrs	r3, r3, #6
 8014e04:	4a09      	ldr	r2, [pc, #36]	; (8014e2c <vPortSetupTimerInterrupt+0x44>)
 8014e06:	3b01      	subs	r3, #1
 8014e08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e0a:	4b04      	ldr	r3, [pc, #16]	; (8014e1c <vPortSetupTimerInterrupt+0x34>)
 8014e0c:	2207      	movs	r2, #7
 8014e0e:	601a      	str	r2, [r3, #0]
}
 8014e10:	bf00      	nop
 8014e12:	46bd      	mov	sp, r7
 8014e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	e000e010 	.word	0xe000e010
 8014e20:	e000e018 	.word	0xe000e018
 8014e24:	20002088 	.word	0x20002088
 8014e28:	10624dd3 	.word	0x10624dd3
 8014e2c:	e000e014 	.word	0xe000e014

08014e30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014e30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014e40 <vPortEnableVFP+0x10>
 8014e34:	6801      	ldr	r1, [r0, #0]
 8014e36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014e3a:	6001      	str	r1, [r0, #0]
 8014e3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014e3e:	bf00      	nop
 8014e40:	e000ed88 	.word	0xe000ed88

08014e44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014e44:	b480      	push	{r7}
 8014e46:	b085      	sub	sp, #20
 8014e48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014e4a:	f3ef 8305 	mrs	r3, IPSR
 8014e4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2b0f      	cmp	r3, #15
 8014e54:	d913      	bls.n	8014e7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e56:	4a16      	ldr	r2, [pc, #88]	; (8014eb0 <vPortValidateInterruptPriority+0x6c>)
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	4413      	add	r3, r2
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e60:	4b14      	ldr	r3, [pc, #80]	; (8014eb4 <vPortValidateInterruptPriority+0x70>)
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	7afa      	ldrb	r2, [r7, #11]
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d209      	bcs.n	8014e7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e6e:	f383 8811 	msr	BASEPRI, r3
 8014e72:	f3bf 8f6f 	isb	sy
 8014e76:	f3bf 8f4f 	dsb	sy
 8014e7a:	607b      	str	r3, [r7, #4]
 8014e7c:	e7fe      	b.n	8014e7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014e7e:	4b0e      	ldr	r3, [pc, #56]	; (8014eb8 <vPortValidateInterruptPriority+0x74>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014e86:	4b0d      	ldr	r3, [pc, #52]	; (8014ebc <vPortValidateInterruptPriority+0x78>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d909      	bls.n	8014ea2 <vPortValidateInterruptPriority+0x5e>
 8014e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e92:	f383 8811 	msr	BASEPRI, r3
 8014e96:	f3bf 8f6f 	isb	sy
 8014e9a:	f3bf 8f4f 	dsb	sy
 8014e9e:	603b      	str	r3, [r7, #0]
 8014ea0:	e7fe      	b.n	8014ea0 <vPortValidateInterruptPriority+0x5c>
	}
 8014ea2:	bf00      	nop
 8014ea4:	3714      	adds	r7, #20
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr
 8014eae:	bf00      	nop
 8014eb0:	e000e3f0 	.word	0xe000e3f0
 8014eb4:	20002990 	.word	0x20002990
 8014eb8:	e000ed0c 	.word	0xe000ed0c
 8014ebc:	20002994 	.word	0x20002994

08014ec0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b08a      	sub	sp, #40	; 0x28
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014ecc:	f7fe ff34 	bl	8013d38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014ed0:	4b57      	ldr	r3, [pc, #348]	; (8015030 <pvPortMalloc+0x170>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d101      	bne.n	8014edc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014ed8:	f000 f90c 	bl	80150f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014edc:	4b55      	ldr	r3, [pc, #340]	; (8015034 <pvPortMalloc+0x174>)
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	4013      	ands	r3, r2
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	f040 808c 	bne.w	8015002 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d01c      	beq.n	8014f2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014ef0:	2208      	movs	r2, #8
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f003 0307 	and.w	r3, r3, #7
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d013      	beq.n	8014f2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f023 0307 	bic.w	r3, r3, #7
 8014f08:	3308      	adds	r3, #8
 8014f0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f003 0307 	and.w	r3, r3, #7
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d009      	beq.n	8014f2a <pvPortMalloc+0x6a>
 8014f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f1a:	f383 8811 	msr	BASEPRI, r3
 8014f1e:	f3bf 8f6f 	isb	sy
 8014f22:	f3bf 8f4f 	dsb	sy
 8014f26:	617b      	str	r3, [r7, #20]
 8014f28:	e7fe      	b.n	8014f28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d068      	beq.n	8015002 <pvPortMalloc+0x142>
 8014f30:	4b41      	ldr	r3, [pc, #260]	; (8015038 <pvPortMalloc+0x178>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d863      	bhi.n	8015002 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014f3a:	4b40      	ldr	r3, [pc, #256]	; (801503c <pvPortMalloc+0x17c>)
 8014f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014f3e:	4b3f      	ldr	r3, [pc, #252]	; (801503c <pvPortMalloc+0x17c>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f44:	e004      	b.n	8014f50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f52:	685b      	ldr	r3, [r3, #4]
 8014f54:	687a      	ldr	r2, [r7, #4]
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d903      	bls.n	8014f62 <pvPortMalloc+0xa2>
 8014f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d1f1      	bne.n	8014f46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014f62:	4b33      	ldr	r3, [pc, #204]	; (8015030 <pvPortMalloc+0x170>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d04a      	beq.n	8015002 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014f6c:	6a3b      	ldr	r3, [r7, #32]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2208      	movs	r2, #8
 8014f72:	4413      	add	r3, r2
 8014f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f78:	681a      	ldr	r2, [r3, #0]
 8014f7a:	6a3b      	ldr	r3, [r7, #32]
 8014f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f80:	685a      	ldr	r2, [r3, #4]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	1ad2      	subs	r2, r2, r3
 8014f86:	2308      	movs	r3, #8
 8014f88:	005b      	lsls	r3, r3, #1
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d91e      	bls.n	8014fcc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	4413      	add	r3, r2
 8014f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	f003 0307 	and.w	r3, r3, #7
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d009      	beq.n	8014fb4 <pvPortMalloc+0xf4>
 8014fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fa4:	f383 8811 	msr	BASEPRI, r3
 8014fa8:	f3bf 8f6f 	isb	sy
 8014fac:	f3bf 8f4f 	dsb	sy
 8014fb0:	613b      	str	r3, [r7, #16]
 8014fb2:	e7fe      	b.n	8014fb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb6:	685a      	ldr	r2, [r3, #4]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	1ad2      	subs	r2, r2, r3
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014fc6:	69b8      	ldr	r0, [r7, #24]
 8014fc8:	f000 f8f6 	bl	80151b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014fcc:	4b1a      	ldr	r3, [pc, #104]	; (8015038 <pvPortMalloc+0x178>)
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	1ad3      	subs	r3, r2, r3
 8014fd6:	4a18      	ldr	r2, [pc, #96]	; (8015038 <pvPortMalloc+0x178>)
 8014fd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014fda:	4b17      	ldr	r3, [pc, #92]	; (8015038 <pvPortMalloc+0x178>)
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	4b18      	ldr	r3, [pc, #96]	; (8015040 <pvPortMalloc+0x180>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d203      	bcs.n	8014fee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014fe6:	4b14      	ldr	r3, [pc, #80]	; (8015038 <pvPortMalloc+0x178>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4a15      	ldr	r2, [pc, #84]	; (8015040 <pvPortMalloc+0x180>)
 8014fec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff0:	685a      	ldr	r2, [r3, #4]
 8014ff2:	4b10      	ldr	r3, [pc, #64]	; (8015034 <pvPortMalloc+0x174>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	431a      	orrs	r2, r3
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffe:	2200      	movs	r2, #0
 8015000:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015002:	f7fe fea7 	bl	8013d54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015006:	69fb      	ldr	r3, [r7, #28]
 8015008:	f003 0307 	and.w	r3, r3, #7
 801500c:	2b00      	cmp	r3, #0
 801500e:	d009      	beq.n	8015024 <pvPortMalloc+0x164>
 8015010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015014:	f383 8811 	msr	BASEPRI, r3
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	f3bf 8f4f 	dsb	sy
 8015020:	60fb      	str	r3, [r7, #12]
 8015022:	e7fe      	b.n	8015022 <pvPortMalloc+0x162>
	return pvReturn;
 8015024:	69fb      	ldr	r3, [r7, #28]
}
 8015026:	4618      	mov	r0, r3
 8015028:	3728      	adds	r7, #40	; 0x28
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	200065a0 	.word	0x200065a0
 8015034:	200065ac 	.word	0x200065ac
 8015038:	200065a4 	.word	0x200065a4
 801503c:	20006598 	.word	0x20006598
 8015040:	200065a8 	.word	0x200065a8

08015044 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b086      	sub	sp, #24
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d046      	beq.n	80150e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015056:	2308      	movs	r3, #8
 8015058:	425b      	negs	r3, r3
 801505a:	697a      	ldr	r2, [r7, #20]
 801505c:	4413      	add	r3, r2
 801505e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	685a      	ldr	r2, [r3, #4]
 8015068:	4b20      	ldr	r3, [pc, #128]	; (80150ec <vPortFree+0xa8>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	4013      	ands	r3, r2
 801506e:	2b00      	cmp	r3, #0
 8015070:	d109      	bne.n	8015086 <vPortFree+0x42>
 8015072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015076:	f383 8811 	msr	BASEPRI, r3
 801507a:	f3bf 8f6f 	isb	sy
 801507e:	f3bf 8f4f 	dsb	sy
 8015082:	60fb      	str	r3, [r7, #12]
 8015084:	e7fe      	b.n	8015084 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d009      	beq.n	80150a2 <vPortFree+0x5e>
 801508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015092:	f383 8811 	msr	BASEPRI, r3
 8015096:	f3bf 8f6f 	isb	sy
 801509a:	f3bf 8f4f 	dsb	sy
 801509e:	60bb      	str	r3, [r7, #8]
 80150a0:	e7fe      	b.n	80150a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	685a      	ldr	r2, [r3, #4]
 80150a6:	4b11      	ldr	r3, [pc, #68]	; (80150ec <vPortFree+0xa8>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4013      	ands	r3, r2
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d019      	beq.n	80150e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d115      	bne.n	80150e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	685a      	ldr	r2, [r3, #4]
 80150bc:	4b0b      	ldr	r3, [pc, #44]	; (80150ec <vPortFree+0xa8>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	43db      	mvns	r3, r3
 80150c2:	401a      	ands	r2, r3
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80150c8:	f7fe fe36 	bl	8013d38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	685a      	ldr	r2, [r3, #4]
 80150d0:	4b07      	ldr	r3, [pc, #28]	; (80150f0 <vPortFree+0xac>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4413      	add	r3, r2
 80150d6:	4a06      	ldr	r2, [pc, #24]	; (80150f0 <vPortFree+0xac>)
 80150d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80150da:	6938      	ldr	r0, [r7, #16]
 80150dc:	f000 f86c 	bl	80151b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80150e0:	f7fe fe38 	bl	8013d54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80150e4:	bf00      	nop
 80150e6:	3718      	adds	r7, #24
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	200065ac 	.word	0x200065ac
 80150f0:	200065a4 	.word	0x200065a4

080150f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80150f4:	b480      	push	{r7}
 80150f6:	b085      	sub	sp, #20
 80150f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80150fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80150fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015100:	4b27      	ldr	r3, [pc, #156]	; (80151a0 <prvHeapInit+0xac>)
 8015102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	f003 0307 	and.w	r3, r3, #7
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00c      	beq.n	8015128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	3307      	adds	r3, #7
 8015112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	f023 0307 	bic.w	r3, r3, #7
 801511a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801511c:	68ba      	ldr	r2, [r7, #8]
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	1ad3      	subs	r3, r2, r3
 8015122:	4a1f      	ldr	r2, [pc, #124]	; (80151a0 <prvHeapInit+0xac>)
 8015124:	4413      	add	r3, r2
 8015126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801512c:	4a1d      	ldr	r2, [pc, #116]	; (80151a4 <prvHeapInit+0xb0>)
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015132:	4b1c      	ldr	r3, [pc, #112]	; (80151a4 <prvHeapInit+0xb0>)
 8015134:	2200      	movs	r2, #0
 8015136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	68ba      	ldr	r2, [r7, #8]
 801513c:	4413      	add	r3, r2
 801513e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015140:	2208      	movs	r2, #8
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	1a9b      	subs	r3, r3, r2
 8015146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f023 0307 	bic.w	r3, r3, #7
 801514e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	4a15      	ldr	r2, [pc, #84]	; (80151a8 <prvHeapInit+0xb4>)
 8015154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015156:	4b14      	ldr	r3, [pc, #80]	; (80151a8 <prvHeapInit+0xb4>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	2200      	movs	r2, #0
 801515c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801515e:	4b12      	ldr	r3, [pc, #72]	; (80151a8 <prvHeapInit+0xb4>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	2200      	movs	r2, #0
 8015164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	68fa      	ldr	r2, [r7, #12]
 801516e:	1ad2      	subs	r2, r2, r3
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015174:	4b0c      	ldr	r3, [pc, #48]	; (80151a8 <prvHeapInit+0xb4>)
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	4a0a      	ldr	r2, [pc, #40]	; (80151ac <prvHeapInit+0xb8>)
 8015182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	4a09      	ldr	r2, [pc, #36]	; (80151b0 <prvHeapInit+0xbc>)
 801518a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801518c:	4b09      	ldr	r3, [pc, #36]	; (80151b4 <prvHeapInit+0xc0>)
 801518e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015192:	601a      	str	r2, [r3, #0]
}
 8015194:	bf00      	nop
 8015196:	3714      	adds	r7, #20
 8015198:	46bd      	mov	sp, r7
 801519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519e:	4770      	bx	lr
 80151a0:	20002998 	.word	0x20002998
 80151a4:	20006598 	.word	0x20006598
 80151a8:	200065a0 	.word	0x200065a0
 80151ac:	200065a8 	.word	0x200065a8
 80151b0:	200065a4 	.word	0x200065a4
 80151b4:	200065ac 	.word	0x200065ac

080151b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80151b8:	b480      	push	{r7}
 80151ba:	b085      	sub	sp, #20
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80151c0:	4b28      	ldr	r3, [pc, #160]	; (8015264 <prvInsertBlockIntoFreeList+0xac>)
 80151c2:	60fb      	str	r3, [r7, #12]
 80151c4:	e002      	b.n	80151cc <prvInsertBlockIntoFreeList+0x14>
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	60fb      	str	r3, [r7, #12]
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d8f7      	bhi.n	80151c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	68ba      	ldr	r2, [r7, #8]
 80151e0:	4413      	add	r3, r2
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d108      	bne.n	80151fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	685a      	ldr	r2, [r3, #4]
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	441a      	add	r2, r3
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	68ba      	ldr	r2, [r7, #8]
 8015204:	441a      	add	r2, r3
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	429a      	cmp	r2, r3
 801520c:	d118      	bne.n	8015240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	4b15      	ldr	r3, [pc, #84]	; (8015268 <prvInsertBlockIntoFreeList+0xb0>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	429a      	cmp	r2, r3
 8015218:	d00d      	beq.n	8015236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	685a      	ldr	r2, [r3, #4]
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	685b      	ldr	r3, [r3, #4]
 8015224:	441a      	add	r2, r3
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	601a      	str	r2, [r3, #0]
 8015234:	e008      	b.n	8015248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015236:	4b0c      	ldr	r3, [pc, #48]	; (8015268 <prvInsertBlockIntoFreeList+0xb0>)
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	601a      	str	r2, [r3, #0]
 801523e:	e003      	b.n	8015248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	681a      	ldr	r2, [r3, #0]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015248:	68fa      	ldr	r2, [r7, #12]
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	429a      	cmp	r2, r3
 801524e:	d002      	beq.n	8015256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015256:	bf00      	nop
 8015258:	3714      	adds	r7, #20
 801525a:	46bd      	mov	sp, r7
 801525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015260:	4770      	bx	lr
 8015262:	bf00      	nop
 8015264:	20006598 	.word	0x20006598
 8015268:	200065a0 	.word	0x200065a0

0801526c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015270:	2200      	movs	r2, #0
 8015272:	4912      	ldr	r1, [pc, #72]	; (80152bc <MX_USB_DEVICE_Init+0x50>)
 8015274:	4812      	ldr	r0, [pc, #72]	; (80152c0 <MX_USB_DEVICE_Init+0x54>)
 8015276:	f7fc f89d 	bl	80113b4 <USBD_Init>
 801527a:	4603      	mov	r3, r0
 801527c:	2b00      	cmp	r3, #0
 801527e:	d001      	beq.n	8015284 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015280:	f7f0 fa60 	bl	8005744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015284:	490f      	ldr	r1, [pc, #60]	; (80152c4 <MX_USB_DEVICE_Init+0x58>)
 8015286:	480e      	ldr	r0, [pc, #56]	; (80152c0 <MX_USB_DEVICE_Init+0x54>)
 8015288:	f7fc f8ca 	bl	8011420 <USBD_RegisterClass>
 801528c:	4603      	mov	r3, r0
 801528e:	2b00      	cmp	r3, #0
 8015290:	d001      	beq.n	8015296 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015292:	f7f0 fa57 	bl	8005744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015296:	490c      	ldr	r1, [pc, #48]	; (80152c8 <MX_USB_DEVICE_Init+0x5c>)
 8015298:	4809      	ldr	r0, [pc, #36]	; (80152c0 <MX_USB_DEVICE_Init+0x54>)
 801529a:	f7fb ffef 	bl	801127c <USBD_CDC_RegisterInterface>
 801529e:	4603      	mov	r3, r0
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d001      	beq.n	80152a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80152a4:	f7f0 fa4e 	bl	8005744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80152a8:	4805      	ldr	r0, [pc, #20]	; (80152c0 <MX_USB_DEVICE_Init+0x54>)
 80152aa:	f7fc f8da 	bl	8011462 <USBD_Start>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d001      	beq.n	80152b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80152b4:	f7f0 fa46 	bl	8005744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80152b8:	bf00      	nop
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	200021bc 	.word	0x200021bc
 80152c0:	2000ee54 	.word	0x2000ee54
 80152c4:	200020a0 	.word	0x200020a0
 80152c8:	200021a8 	.word	0x200021a8

080152cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80152d0:	2200      	movs	r2, #0
 80152d2:	4905      	ldr	r1, [pc, #20]	; (80152e8 <CDC_Init_FS+0x1c>)
 80152d4:	4805      	ldr	r0, [pc, #20]	; (80152ec <CDC_Init_FS+0x20>)
 80152d6:	f7fb ffe6 	bl	80112a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80152da:	4905      	ldr	r1, [pc, #20]	; (80152f0 <CDC_Init_FS+0x24>)
 80152dc:	4803      	ldr	r0, [pc, #12]	; (80152ec <CDC_Init_FS+0x20>)
 80152de:	f7fb fffb 	bl	80112d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80152e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	bd80      	pop	{r7, pc}
 80152e8:	2000f324 	.word	0x2000f324
 80152ec:	2000ee54 	.word	0x2000ee54
 80152f0:	2000f124 	.word	0x2000f124

080152f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80152f4:	b480      	push	{r7}
 80152f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80152f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	46bd      	mov	sp, r7
 80152fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015302:	4770      	bx	lr

08015304 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015304:	b480      	push	{r7}
 8015306:	b083      	sub	sp, #12
 8015308:	af00      	add	r7, sp, #0
 801530a:	4603      	mov	r3, r0
 801530c:	6039      	str	r1, [r7, #0]
 801530e:	71fb      	strb	r3, [r7, #7]
 8015310:	4613      	mov	r3, r2
 8015312:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015314:	79fb      	ldrb	r3, [r7, #7]
 8015316:	2b23      	cmp	r3, #35	; 0x23
 8015318:	f200 808c 	bhi.w	8015434 <CDC_Control_FS+0x130>
 801531c:	a201      	add	r2, pc, #4	; (adr r2, 8015324 <CDC_Control_FS+0x20>)
 801531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015322:	bf00      	nop
 8015324:	08015435 	.word	0x08015435
 8015328:	08015435 	.word	0x08015435
 801532c:	08015435 	.word	0x08015435
 8015330:	08015435 	.word	0x08015435
 8015334:	08015435 	.word	0x08015435
 8015338:	08015435 	.word	0x08015435
 801533c:	08015435 	.word	0x08015435
 8015340:	08015435 	.word	0x08015435
 8015344:	08015435 	.word	0x08015435
 8015348:	08015435 	.word	0x08015435
 801534c:	08015435 	.word	0x08015435
 8015350:	08015435 	.word	0x08015435
 8015354:	08015435 	.word	0x08015435
 8015358:	08015435 	.word	0x08015435
 801535c:	08015435 	.word	0x08015435
 8015360:	08015435 	.word	0x08015435
 8015364:	08015435 	.word	0x08015435
 8015368:	08015435 	.word	0x08015435
 801536c:	08015435 	.word	0x08015435
 8015370:	08015435 	.word	0x08015435
 8015374:	08015435 	.word	0x08015435
 8015378:	08015435 	.word	0x08015435
 801537c:	08015435 	.word	0x08015435
 8015380:	08015435 	.word	0x08015435
 8015384:	08015435 	.word	0x08015435
 8015388:	08015435 	.word	0x08015435
 801538c:	08015435 	.word	0x08015435
 8015390:	08015435 	.word	0x08015435
 8015394:	08015435 	.word	0x08015435
 8015398:	08015435 	.word	0x08015435
 801539c:	08015435 	.word	0x08015435
 80153a0:	08015435 	.word	0x08015435
 80153a4:	080153b5 	.word	0x080153b5
 80153a8:	080153ef 	.word	0x080153ef
 80153ac:	08015435 	.word	0x08015435
 80153b0:	08015435 	.word	0x08015435
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	781a      	ldrb	r2, [r3, #0]
 80153b8:	4b22      	ldr	r3, [pc, #136]	; (8015444 <CDC_Control_FS+0x140>)
 80153ba:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	785a      	ldrb	r2, [r3, #1]
 80153c0:	4b20      	ldr	r3, [pc, #128]	; (8015444 <CDC_Control_FS+0x140>)
 80153c2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	789a      	ldrb	r2, [r3, #2]
 80153c8:	4b1e      	ldr	r3, [pc, #120]	; (8015444 <CDC_Control_FS+0x140>)
 80153ca:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	78da      	ldrb	r2, [r3, #3]
 80153d0:	4b1c      	ldr	r3, [pc, #112]	; (8015444 <CDC_Control_FS+0x140>)
 80153d2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	791a      	ldrb	r2, [r3, #4]
 80153d8:	4b1a      	ldr	r3, [pc, #104]	; (8015444 <CDC_Control_FS+0x140>)
 80153da:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	795a      	ldrb	r2, [r3, #5]
 80153e0:	4b18      	ldr	r3, [pc, #96]	; (8015444 <CDC_Control_FS+0x140>)
 80153e2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	799a      	ldrb	r2, [r3, #6]
 80153e8:	4b16      	ldr	r3, [pc, #88]	; (8015444 <CDC_Control_FS+0x140>)
 80153ea:	719a      	strb	r2, [r3, #6]
    	break;
 80153ec:	e023      	b.n	8015436 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80153ee:	4b15      	ldr	r3, [pc, #84]	; (8015444 <CDC_Control_FS+0x140>)
 80153f0:	781a      	ldrb	r2, [r3, #0]
 80153f2:	683b      	ldr	r3, [r7, #0]
 80153f4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	3301      	adds	r3, #1
 80153fa:	4a12      	ldr	r2, [pc, #72]	; (8015444 <CDC_Control_FS+0x140>)
 80153fc:	7852      	ldrb	r2, [r2, #1]
 80153fe:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	3302      	adds	r3, #2
 8015404:	4a0f      	ldr	r2, [pc, #60]	; (8015444 <CDC_Control_FS+0x140>)
 8015406:	7892      	ldrb	r2, [r2, #2]
 8015408:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	3303      	adds	r3, #3
 801540e:	4a0d      	ldr	r2, [pc, #52]	; (8015444 <CDC_Control_FS+0x140>)
 8015410:	78d2      	ldrb	r2, [r2, #3]
 8015412:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	3304      	adds	r3, #4
 8015418:	4a0a      	ldr	r2, [pc, #40]	; (8015444 <CDC_Control_FS+0x140>)
 801541a:	7912      	ldrb	r2, [r2, #4]
 801541c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	3305      	adds	r3, #5
 8015422:	4a08      	ldr	r2, [pc, #32]	; (8015444 <CDC_Control_FS+0x140>)
 8015424:	7952      	ldrb	r2, [r2, #5]
 8015426:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	3306      	adds	r3, #6
 801542c:	4a05      	ldr	r2, [pc, #20]	; (8015444 <CDC_Control_FS+0x140>)
 801542e:	7992      	ldrb	r2, [r2, #6]
 8015430:	701a      	strb	r2, [r3, #0]
    break;
 8015432:	e000      	b.n	8015436 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015434:	bf00      	nop
  }

  return (USBD_OK);
 8015436:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015438:	4618      	mov	r0, r3
 801543a:	370c      	adds	r7, #12
 801543c:	46bd      	mov	sp, r7
 801543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015442:	4770      	bx	lr
 8015444:	2000f524 	.word	0x2000f524

08015448 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	b29b      	uxth	r3, r3
 8015458:	461a      	mov	r2, r3
 801545a:	6879      	ldr	r1, [r7, #4]
 801545c:	4807      	ldr	r0, [pc, #28]	; (801547c <CDC_Receive_FS+0x34>)
 801545e:	f7f0 fa03 	bl	8005868 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015462:	6879      	ldr	r1, [r7, #4]
 8015464:	4806      	ldr	r0, [pc, #24]	; (8015480 <CDC_Receive_FS+0x38>)
 8015466:	f7fb ff37 	bl	80112d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801546a:	4805      	ldr	r0, [pc, #20]	; (8015480 <CDC_Receive_FS+0x38>)
 801546c:	f7fb ff78 	bl	8011360 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015470:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015472:	4618      	mov	r0, r3
 8015474:	3708      	adds	r7, #8
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	20000064 	.word	0x20000064
 8015480:	2000ee54 	.word	0x2000ee54

08015484 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b084      	sub	sp, #16
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	460b      	mov	r3, r1
 801548e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015490:	2300      	movs	r3, #0
 8015492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015494:	4b0d      	ldr	r3, [pc, #52]	; (80154cc <CDC_Transmit_FS+0x48>)
 8015496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801549a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d001      	beq.n	80154aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80154a6:	2301      	movs	r3, #1
 80154a8:	e00b      	b.n	80154c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80154aa:	887b      	ldrh	r3, [r7, #2]
 80154ac:	461a      	mov	r2, r3
 80154ae:	6879      	ldr	r1, [r7, #4]
 80154b0:	4806      	ldr	r0, [pc, #24]	; (80154cc <CDC_Transmit_FS+0x48>)
 80154b2:	f7fb fef8 	bl	80112a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80154b6:	4805      	ldr	r0, [pc, #20]	; (80154cc <CDC_Transmit_FS+0x48>)
 80154b8:	f7fb ff22 	bl	8011300 <USBD_CDC_TransmitPacket>
 80154bc:	4603      	mov	r3, r0
 80154be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80154c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3710      	adds	r7, #16
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	2000ee54 	.word	0x2000ee54

080154d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80154d0:	b480      	push	{r7}
 80154d2:	b087      	sub	sp, #28
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	4613      	mov	r3, r2
 80154dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80154de:	2300      	movs	r3, #0
 80154e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80154e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	371c      	adds	r7, #28
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
	...

080154f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154f4:	b480      	push	{r7}
 80154f6:	b083      	sub	sp, #12
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	4603      	mov	r3, r0
 80154fc:	6039      	str	r1, [r7, #0]
 80154fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	2212      	movs	r2, #18
 8015504:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015506:	4b03      	ldr	r3, [pc, #12]	; (8015514 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015508:	4618      	mov	r0, r3
 801550a:	370c      	adds	r7, #12
 801550c:	46bd      	mov	sp, r7
 801550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015512:	4770      	bx	lr
 8015514:	200021d8 	.word	0x200021d8

08015518 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015518:	b480      	push	{r7}
 801551a:	b083      	sub	sp, #12
 801551c:	af00      	add	r7, sp, #0
 801551e:	4603      	mov	r3, r0
 8015520:	6039      	str	r1, [r7, #0]
 8015522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	2204      	movs	r2, #4
 8015528:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801552a:	4b03      	ldr	r3, [pc, #12]	; (8015538 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801552c:	4618      	mov	r0, r3
 801552e:	370c      	adds	r7, #12
 8015530:	46bd      	mov	sp, r7
 8015532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015536:	4770      	bx	lr
 8015538:	200021ec 	.word	0x200021ec

0801553c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	4603      	mov	r3, r0
 8015544:	6039      	str	r1, [r7, #0]
 8015546:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015548:	79fb      	ldrb	r3, [r7, #7]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d105      	bne.n	801555a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801554e:	683a      	ldr	r2, [r7, #0]
 8015550:	4907      	ldr	r1, [pc, #28]	; (8015570 <USBD_FS_ProductStrDescriptor+0x34>)
 8015552:	4808      	ldr	r0, [pc, #32]	; (8015574 <USBD_FS_ProductStrDescriptor+0x38>)
 8015554:	f7fc ff53 	bl	80123fe <USBD_GetString>
 8015558:	e004      	b.n	8015564 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801555a:	683a      	ldr	r2, [r7, #0]
 801555c:	4904      	ldr	r1, [pc, #16]	; (8015570 <USBD_FS_ProductStrDescriptor+0x34>)
 801555e:	4805      	ldr	r0, [pc, #20]	; (8015574 <USBD_FS_ProductStrDescriptor+0x38>)
 8015560:	f7fc ff4d 	bl	80123fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015564:	4b02      	ldr	r3, [pc, #8]	; (8015570 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015566:	4618      	mov	r0, r3
 8015568:	3708      	adds	r7, #8
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}
 801556e:	bf00      	nop
 8015570:	2000f52c 	.word	0x2000f52c
 8015574:	0801b4dc 	.word	0x0801b4dc

08015578 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	4603      	mov	r3, r0
 8015580:	6039      	str	r1, [r7, #0]
 8015582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015584:	683a      	ldr	r2, [r7, #0]
 8015586:	4904      	ldr	r1, [pc, #16]	; (8015598 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015588:	4804      	ldr	r0, [pc, #16]	; (801559c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801558a:	f7fc ff38 	bl	80123fe <USBD_GetString>
  return USBD_StrDesc;
 801558e:	4b02      	ldr	r3, [pc, #8]	; (8015598 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015590:	4618      	mov	r0, r3
 8015592:	3708      	adds	r7, #8
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	2000f52c 	.word	0x2000f52c
 801559c:	0801b4f4 	.word	0x0801b4f4

080155a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b082      	sub	sp, #8
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	4603      	mov	r3, r0
 80155a8:	6039      	str	r1, [r7, #0]
 80155aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	221a      	movs	r2, #26
 80155b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80155b2:	f000 f843 	bl	801563c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80155b6:	4b02      	ldr	r3, [pc, #8]	; (80155c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3708      	adds	r7, #8
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	200021f0 	.word	0x200021f0

080155c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b082      	sub	sp, #8
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	4603      	mov	r3, r0
 80155cc:	6039      	str	r1, [r7, #0]
 80155ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80155d0:	79fb      	ldrb	r3, [r7, #7]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d105      	bne.n	80155e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80155d6:	683a      	ldr	r2, [r7, #0]
 80155d8:	4907      	ldr	r1, [pc, #28]	; (80155f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80155da:	4808      	ldr	r0, [pc, #32]	; (80155fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80155dc:	f7fc ff0f 	bl	80123fe <USBD_GetString>
 80155e0:	e004      	b.n	80155ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80155e2:	683a      	ldr	r2, [r7, #0]
 80155e4:	4904      	ldr	r1, [pc, #16]	; (80155f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80155e6:	4805      	ldr	r0, [pc, #20]	; (80155fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80155e8:	f7fc ff09 	bl	80123fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80155ec:	4b02      	ldr	r3, [pc, #8]	; (80155f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3708      	adds	r7, #8
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	2000f52c 	.word	0x2000f52c
 80155fc:	0801b508 	.word	0x0801b508

08015600 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
 8015606:	4603      	mov	r3, r0
 8015608:	6039      	str	r1, [r7, #0]
 801560a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801560c:	79fb      	ldrb	r3, [r7, #7]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d105      	bne.n	801561e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015612:	683a      	ldr	r2, [r7, #0]
 8015614:	4907      	ldr	r1, [pc, #28]	; (8015634 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015616:	4808      	ldr	r0, [pc, #32]	; (8015638 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015618:	f7fc fef1 	bl	80123fe <USBD_GetString>
 801561c:	e004      	b.n	8015628 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801561e:	683a      	ldr	r2, [r7, #0]
 8015620:	4904      	ldr	r1, [pc, #16]	; (8015634 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015622:	4805      	ldr	r0, [pc, #20]	; (8015638 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015624:	f7fc feeb 	bl	80123fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015628:	4b02      	ldr	r3, [pc, #8]	; (8015634 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801562a:	4618      	mov	r0, r3
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	2000f52c 	.word	0x2000f52c
 8015638:	0801b514 	.word	0x0801b514

0801563c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015642:	4b0f      	ldr	r3, [pc, #60]	; (8015680 <Get_SerialNum+0x44>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015648:	4b0e      	ldr	r3, [pc, #56]	; (8015684 <Get_SerialNum+0x48>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801564e:	4b0e      	ldr	r3, [pc, #56]	; (8015688 <Get_SerialNum+0x4c>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015654:	68fa      	ldr	r2, [r7, #12]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	4413      	add	r3, r2
 801565a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d009      	beq.n	8015676 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015662:	2208      	movs	r2, #8
 8015664:	4909      	ldr	r1, [pc, #36]	; (801568c <Get_SerialNum+0x50>)
 8015666:	68f8      	ldr	r0, [r7, #12]
 8015668:	f000 f814 	bl	8015694 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801566c:	2204      	movs	r2, #4
 801566e:	4908      	ldr	r1, [pc, #32]	; (8015690 <Get_SerialNum+0x54>)
 8015670:	68b8      	ldr	r0, [r7, #8]
 8015672:	f000 f80f 	bl	8015694 <IntToUnicode>
  }
}
 8015676:	bf00      	nop
 8015678:	3710      	adds	r7, #16
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}
 801567e:	bf00      	nop
 8015680:	1fff7a10 	.word	0x1fff7a10
 8015684:	1fff7a14 	.word	0x1fff7a14
 8015688:	1fff7a18 	.word	0x1fff7a18
 801568c:	200021f2 	.word	0x200021f2
 8015690:	20002202 	.word	0x20002202

08015694 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015694:	b480      	push	{r7}
 8015696:	b087      	sub	sp, #28
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	60b9      	str	r1, [r7, #8]
 801569e:	4613      	mov	r3, r2
 80156a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80156a2:	2300      	movs	r3, #0
 80156a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80156a6:	2300      	movs	r3, #0
 80156a8:	75fb      	strb	r3, [r7, #23]
 80156aa:	e027      	b.n	80156fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	0f1b      	lsrs	r3, r3, #28
 80156b0:	2b09      	cmp	r3, #9
 80156b2:	d80b      	bhi.n	80156cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	0f1b      	lsrs	r3, r3, #28
 80156b8:	b2da      	uxtb	r2, r3
 80156ba:	7dfb      	ldrb	r3, [r7, #23]
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	4619      	mov	r1, r3
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	440b      	add	r3, r1
 80156c4:	3230      	adds	r2, #48	; 0x30
 80156c6:	b2d2      	uxtb	r2, r2
 80156c8:	701a      	strb	r2, [r3, #0]
 80156ca:	e00a      	b.n	80156e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	0f1b      	lsrs	r3, r3, #28
 80156d0:	b2da      	uxtb	r2, r3
 80156d2:	7dfb      	ldrb	r3, [r7, #23]
 80156d4:	005b      	lsls	r3, r3, #1
 80156d6:	4619      	mov	r1, r3
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	440b      	add	r3, r1
 80156dc:	3237      	adds	r2, #55	; 0x37
 80156de:	b2d2      	uxtb	r2, r2
 80156e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	011b      	lsls	r3, r3, #4
 80156e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80156e8:	7dfb      	ldrb	r3, [r7, #23]
 80156ea:	005b      	lsls	r3, r3, #1
 80156ec:	3301      	adds	r3, #1
 80156ee:	68ba      	ldr	r2, [r7, #8]
 80156f0:	4413      	add	r3, r2
 80156f2:	2200      	movs	r2, #0
 80156f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80156f6:	7dfb      	ldrb	r3, [r7, #23]
 80156f8:	3301      	adds	r3, #1
 80156fa:	75fb      	strb	r3, [r7, #23]
 80156fc:	7dfa      	ldrb	r2, [r7, #23]
 80156fe:	79fb      	ldrb	r3, [r7, #7]
 8015700:	429a      	cmp	r2, r3
 8015702:	d3d3      	bcc.n	80156ac <IntToUnicode+0x18>
  }
}
 8015704:	bf00      	nop
 8015706:	371c      	adds	r7, #28
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr

08015710 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b08a      	sub	sp, #40	; 0x28
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015718:	f107 0314 	add.w	r3, r7, #20
 801571c:	2200      	movs	r2, #0
 801571e:	601a      	str	r2, [r3, #0]
 8015720:	605a      	str	r2, [r3, #4]
 8015722:	609a      	str	r2, [r3, #8]
 8015724:	60da      	str	r2, [r3, #12]
 8015726:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015730:	d13a      	bne.n	80157a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015732:	2300      	movs	r3, #0
 8015734:	613b      	str	r3, [r7, #16]
 8015736:	4b1e      	ldr	r3, [pc, #120]	; (80157b0 <HAL_PCD_MspInit+0xa0>)
 8015738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801573a:	4a1d      	ldr	r2, [pc, #116]	; (80157b0 <HAL_PCD_MspInit+0xa0>)
 801573c:	f043 0301 	orr.w	r3, r3, #1
 8015740:	6313      	str	r3, [r2, #48]	; 0x30
 8015742:	4b1b      	ldr	r3, [pc, #108]	; (80157b0 <HAL_PCD_MspInit+0xa0>)
 8015744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015746:	f003 0301 	and.w	r3, r3, #1
 801574a:	613b      	str	r3, [r7, #16]
 801574c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801574e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015754:	2302      	movs	r3, #2
 8015756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015758:	2300      	movs	r3, #0
 801575a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801575c:	2303      	movs	r3, #3
 801575e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015760:	230a      	movs	r3, #10
 8015762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015764:	f107 0314 	add.w	r3, r7, #20
 8015768:	4619      	mov	r1, r3
 801576a:	4812      	ldr	r0, [pc, #72]	; (80157b4 <HAL_PCD_MspInit+0xa4>)
 801576c:	f7f6 fbd4 	bl	800bf18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015770:	4b0f      	ldr	r3, [pc, #60]	; (80157b0 <HAL_PCD_MspInit+0xa0>)
 8015772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015774:	4a0e      	ldr	r2, [pc, #56]	; (80157b0 <HAL_PCD_MspInit+0xa0>)
 8015776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801577a:	6353      	str	r3, [r2, #52]	; 0x34
 801577c:	2300      	movs	r3, #0
 801577e:	60fb      	str	r3, [r7, #12]
 8015780:	4b0b      	ldr	r3, [pc, #44]	; (80157b0 <HAL_PCD_MspInit+0xa0>)
 8015782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015784:	4a0a      	ldr	r2, [pc, #40]	; (80157b0 <HAL_PCD_MspInit+0xa0>)
 8015786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801578a:	6453      	str	r3, [r2, #68]	; 0x44
 801578c:	4b08      	ldr	r3, [pc, #32]	; (80157b0 <HAL_PCD_MspInit+0xa0>)
 801578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015794:	60fb      	str	r3, [r7, #12]
 8015796:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015798:	2200      	movs	r2, #0
 801579a:	2105      	movs	r1, #5
 801579c:	2043      	movs	r0, #67	; 0x43
 801579e:	f7f5 fff3 	bl	800b788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80157a2:	2043      	movs	r0, #67	; 0x43
 80157a4:	f7f6 f80c 	bl	800b7c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80157a8:	bf00      	nop
 80157aa:	3728      	adds	r7, #40	; 0x28
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	40023800 	.word	0x40023800
 80157b4:	40020000 	.word	0x40020000

080157b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80157cc:	4619      	mov	r1, r3
 80157ce:	4610      	mov	r0, r2
 80157d0:	f7fb fe92 	bl	80114f8 <USBD_LL_SetupStage>
}
 80157d4:	bf00      	nop
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}

080157dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	460b      	mov	r3, r1
 80157e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80157ee:	78fa      	ldrb	r2, [r7, #3]
 80157f0:	6879      	ldr	r1, [r7, #4]
 80157f2:	4613      	mov	r3, r2
 80157f4:	00db      	lsls	r3, r3, #3
 80157f6:	1a9b      	subs	r3, r3, r2
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	440b      	add	r3, r1
 80157fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015800:	681a      	ldr	r2, [r3, #0]
 8015802:	78fb      	ldrb	r3, [r7, #3]
 8015804:	4619      	mov	r1, r3
 8015806:	f7fb feca 	bl	801159e <USBD_LL_DataOutStage>
}
 801580a:	bf00      	nop
 801580c:	3708      	adds	r7, #8
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}

08015812 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015812:	b580      	push	{r7, lr}
 8015814:	b082      	sub	sp, #8
 8015816:	af00      	add	r7, sp, #0
 8015818:	6078      	str	r0, [r7, #4]
 801581a:	460b      	mov	r3, r1
 801581c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015824:	78fa      	ldrb	r2, [r7, #3]
 8015826:	6879      	ldr	r1, [r7, #4]
 8015828:	4613      	mov	r3, r2
 801582a:	00db      	lsls	r3, r3, #3
 801582c:	1a9b      	subs	r3, r3, r2
 801582e:	009b      	lsls	r3, r3, #2
 8015830:	440b      	add	r3, r1
 8015832:	3348      	adds	r3, #72	; 0x48
 8015834:	681a      	ldr	r2, [r3, #0]
 8015836:	78fb      	ldrb	r3, [r7, #3]
 8015838:	4619      	mov	r1, r3
 801583a:	f7fb ff13 	bl	8011664 <USBD_LL_DataInStage>
}
 801583e:	bf00      	nop
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}

08015846 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015846:	b580      	push	{r7, lr}
 8015848:	b082      	sub	sp, #8
 801584a:	af00      	add	r7, sp, #0
 801584c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015854:	4618      	mov	r0, r3
 8015856:	f7fc f817 	bl	8011888 <USBD_LL_SOF>
}
 801585a:	bf00      	nop
 801585c:	3708      	adds	r7, #8
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}

08015862 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015862:	b580      	push	{r7, lr}
 8015864:	b084      	sub	sp, #16
 8015866:	af00      	add	r7, sp, #0
 8015868:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801586a:	2301      	movs	r3, #1
 801586c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	68db      	ldr	r3, [r3, #12]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d102      	bne.n	801587c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015876:	2300      	movs	r3, #0
 8015878:	73fb      	strb	r3, [r7, #15]
 801587a:	e008      	b.n	801588e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	2b02      	cmp	r3, #2
 8015882:	d102      	bne.n	801588a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015884:	2301      	movs	r3, #1
 8015886:	73fb      	strb	r3, [r7, #15]
 8015888:	e001      	b.n	801588e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801588a:	f7ef ff5b 	bl	8005744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015894:	7bfa      	ldrb	r2, [r7, #15]
 8015896:	4611      	mov	r1, r2
 8015898:	4618      	mov	r0, r3
 801589a:	f7fb ffba 	bl	8011812 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7fb ff73 	bl	8011790 <USBD_LL_Reset>
}
 80158aa:	bf00      	nop
 80158ac:	3710      	adds	r7, #16
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bd80      	pop	{r7, pc}
	...

080158b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158c2:	4618      	mov	r0, r3
 80158c4:	f7fb ffb5 	bl	8011832 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	6812      	ldr	r2, [r2, #0]
 80158d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80158da:	f043 0301 	orr.w	r3, r3, #1
 80158de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	6a1b      	ldr	r3, [r3, #32]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d005      	beq.n	80158f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80158e8:	4b04      	ldr	r3, [pc, #16]	; (80158fc <HAL_PCD_SuspendCallback+0x48>)
 80158ea:	691b      	ldr	r3, [r3, #16]
 80158ec:	4a03      	ldr	r2, [pc, #12]	; (80158fc <HAL_PCD_SuspendCallback+0x48>)
 80158ee:	f043 0306 	orr.w	r3, r3, #6
 80158f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80158f4:	bf00      	nop
 80158f6:	3708      	adds	r7, #8
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}
 80158fc:	e000ed00 	.word	0xe000ed00

08015900 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801590e:	4618      	mov	r0, r3
 8015910:	f7fb ffa4 	bl	801185c <USBD_LL_Resume>
}
 8015914:	bf00      	nop
 8015916:	3708      	adds	r7, #8
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}

0801591c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	460b      	mov	r3, r1
 8015926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801592e:	78fa      	ldrb	r2, [r7, #3]
 8015930:	4611      	mov	r1, r2
 8015932:	4618      	mov	r0, r3
 8015934:	f7fb ffcf 	bl	80118d6 <USBD_LL_IsoOUTIncomplete>
}
 8015938:	bf00      	nop
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	460b      	mov	r3, r1
 801594a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015952:	78fa      	ldrb	r2, [r7, #3]
 8015954:	4611      	mov	r1, r2
 8015956:	4618      	mov	r0, r3
 8015958:	f7fb ffb0 	bl	80118bc <USBD_LL_IsoINIncomplete>
}
 801595c:	bf00      	nop
 801595e:	3708      	adds	r7, #8
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015972:	4618      	mov	r0, r3
 8015974:	f7fb ffbc 	bl	80118f0 <USBD_LL_DevConnected>
}
 8015978:	bf00      	nop
 801597a:	3708      	adds	r7, #8
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}

08015980 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801598e:	4618      	mov	r0, r3
 8015990:	f7fb ffb9 	bl	8011906 <USBD_LL_DevDisconnected>
}
 8015994:	bf00      	nop
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d13c      	bne.n	8015a26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80159ac:	4a20      	ldr	r2, [pc, #128]	; (8015a30 <USBD_LL_Init+0x94>)
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	4a1e      	ldr	r2, [pc, #120]	; (8015a30 <USBD_LL_Init+0x94>)
 80159b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80159bc:	4b1c      	ldr	r3, [pc, #112]	; (8015a30 <USBD_LL_Init+0x94>)
 80159be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80159c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80159c4:	4b1a      	ldr	r3, [pc, #104]	; (8015a30 <USBD_LL_Init+0x94>)
 80159c6:	2204      	movs	r2, #4
 80159c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80159ca:	4b19      	ldr	r3, [pc, #100]	; (8015a30 <USBD_LL_Init+0x94>)
 80159cc:	2202      	movs	r2, #2
 80159ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80159d0:	4b17      	ldr	r3, [pc, #92]	; (8015a30 <USBD_LL_Init+0x94>)
 80159d2:	2200      	movs	r2, #0
 80159d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80159d6:	4b16      	ldr	r3, [pc, #88]	; (8015a30 <USBD_LL_Init+0x94>)
 80159d8:	2202      	movs	r2, #2
 80159da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80159dc:	4b14      	ldr	r3, [pc, #80]	; (8015a30 <USBD_LL_Init+0x94>)
 80159de:	2200      	movs	r2, #0
 80159e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80159e2:	4b13      	ldr	r3, [pc, #76]	; (8015a30 <USBD_LL_Init+0x94>)
 80159e4:	2200      	movs	r2, #0
 80159e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80159e8:	4b11      	ldr	r3, [pc, #68]	; (8015a30 <USBD_LL_Init+0x94>)
 80159ea:	2200      	movs	r2, #0
 80159ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80159ee:	4b10      	ldr	r3, [pc, #64]	; (8015a30 <USBD_LL_Init+0x94>)
 80159f0:	2200      	movs	r2, #0
 80159f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80159f4:	4b0e      	ldr	r3, [pc, #56]	; (8015a30 <USBD_LL_Init+0x94>)
 80159f6:	2200      	movs	r2, #0
 80159f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80159fa:	480d      	ldr	r0, [pc, #52]	; (8015a30 <USBD_LL_Init+0x94>)
 80159fc:	f7f6 fc96 	bl	800c32c <HAL_PCD_Init>
 8015a00:	4603      	mov	r3, r0
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d001      	beq.n	8015a0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015a06:	f7ef fe9d 	bl	8005744 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015a0a:	2180      	movs	r1, #128	; 0x80
 8015a0c:	4808      	ldr	r0, [pc, #32]	; (8015a30 <USBD_LL_Init+0x94>)
 8015a0e:	f7f7 fdf4 	bl	800d5fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015a12:	2240      	movs	r2, #64	; 0x40
 8015a14:	2100      	movs	r1, #0
 8015a16:	4806      	ldr	r0, [pc, #24]	; (8015a30 <USBD_LL_Init+0x94>)
 8015a18:	f7f7 fda8 	bl	800d56c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015a1c:	2280      	movs	r2, #128	; 0x80
 8015a1e:	2101      	movs	r1, #1
 8015a20:	4803      	ldr	r0, [pc, #12]	; (8015a30 <USBD_LL_Init+0x94>)
 8015a22:	f7f7 fda3 	bl	800d56c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015a26:	2300      	movs	r3, #0
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3708      	adds	r7, #8
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	2000f72c 	.word	0x2000f72c

08015a34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b084      	sub	sp, #16
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a40:	2300      	movs	r3, #0
 8015a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7f6 fd8b 	bl	800c566 <HAL_PCD_Start>
 8015a50:	4603      	mov	r3, r0
 8015a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a54:	7bfb      	ldrb	r3, [r7, #15]
 8015a56:	4618      	mov	r0, r3
 8015a58:	f000 f92a 	bl	8015cb0 <USBD_Get_USB_Status>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	3710      	adds	r7, #16
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}

08015a6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015a6a:	b580      	push	{r7, lr}
 8015a6c:	b084      	sub	sp, #16
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
 8015a72:	4608      	mov	r0, r1
 8015a74:	4611      	mov	r1, r2
 8015a76:	461a      	mov	r2, r3
 8015a78:	4603      	mov	r3, r0
 8015a7a:	70fb      	strb	r3, [r7, #3]
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	70bb      	strb	r3, [r7, #2]
 8015a80:	4613      	mov	r3, r2
 8015a82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a84:	2300      	movs	r3, #0
 8015a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a88:	2300      	movs	r3, #0
 8015a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015a92:	78bb      	ldrb	r3, [r7, #2]
 8015a94:	883a      	ldrh	r2, [r7, #0]
 8015a96:	78f9      	ldrb	r1, [r7, #3]
 8015a98:	f7f7 f96f 	bl	800cd7a <HAL_PCD_EP_Open>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015aa0:	7bfb      	ldrb	r3, [r7, #15]
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f000 f904 	bl	8015cb0 <USBD_Get_USB_Status>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3710      	adds	r7, #16
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}

08015ab6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ab6:	b580      	push	{r7, lr}
 8015ab8:	b084      	sub	sp, #16
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	6078      	str	r0, [r7, #4]
 8015abe:	460b      	mov	r3, r1
 8015ac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ad0:	78fa      	ldrb	r2, [r7, #3]
 8015ad2:	4611      	mov	r1, r2
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7f7 f9b8 	bl	800ce4a <HAL_PCD_EP_Close>
 8015ada:	4603      	mov	r3, r0
 8015adc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ade:	7bfb      	ldrb	r3, [r7, #15]
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f000 f8e5 	bl	8015cb0 <USBD_Get_USB_Status>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3710      	adds	r7, #16
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b084      	sub	sp, #16
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	460b      	mov	r3, r1
 8015afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b00:	2300      	movs	r3, #0
 8015b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b04:	2300      	movs	r3, #0
 8015b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b0e:	78fa      	ldrb	r2, [r7, #3]
 8015b10:	4611      	mov	r1, r2
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7f7 fa90 	bl	800d038 <HAL_PCD_EP_SetStall>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b1c:	7bfb      	ldrb	r3, [r7, #15]
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f000 f8c6 	bl	8015cb0 <USBD_Get_USB_Status>
 8015b24:	4603      	mov	r3, r0
 8015b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3710      	adds	r7, #16
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}

08015b32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b32:	b580      	push	{r7, lr}
 8015b34:	b084      	sub	sp, #16
 8015b36:	af00      	add	r7, sp, #0
 8015b38:	6078      	str	r0, [r7, #4]
 8015b3a:	460b      	mov	r3, r1
 8015b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b42:	2300      	movs	r3, #0
 8015b44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b4c:	78fa      	ldrb	r2, [r7, #3]
 8015b4e:	4611      	mov	r1, r2
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7f7 fad5 	bl	800d100 <HAL_PCD_EP_ClrStall>
 8015b56:	4603      	mov	r3, r0
 8015b58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b5a:	7bfb      	ldrb	r3, [r7, #15]
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f000 f8a7 	bl	8015cb0 <USBD_Get_USB_Status>
 8015b62:	4603      	mov	r3, r0
 8015b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3710      	adds	r7, #16
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}

08015b70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b70:	b480      	push	{r7}
 8015b72:	b085      	sub	sp, #20
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	460b      	mov	r3, r1
 8015b7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	da0b      	bge.n	8015ba4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015b8c:	78fb      	ldrb	r3, [r7, #3]
 8015b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b92:	68f9      	ldr	r1, [r7, #12]
 8015b94:	4613      	mov	r3, r2
 8015b96:	00db      	lsls	r3, r3, #3
 8015b98:	1a9b      	subs	r3, r3, r2
 8015b9a:	009b      	lsls	r3, r3, #2
 8015b9c:	440b      	add	r3, r1
 8015b9e:	333e      	adds	r3, #62	; 0x3e
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	e00b      	b.n	8015bbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015ba4:	78fb      	ldrb	r3, [r7, #3]
 8015ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015baa:	68f9      	ldr	r1, [r7, #12]
 8015bac:	4613      	mov	r3, r2
 8015bae:	00db      	lsls	r3, r3, #3
 8015bb0:	1a9b      	subs	r3, r3, r2
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	440b      	add	r3, r1
 8015bb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015bba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3714      	adds	r7, #20
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b084      	sub	sp, #16
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	460b      	mov	r3, r1
 8015bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015be2:	78fa      	ldrb	r2, [r7, #3]
 8015be4:	4611      	mov	r1, r2
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7f7 f8a2 	bl	800cd30 <HAL_PCD_SetAddress>
 8015bec:	4603      	mov	r3, r0
 8015bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bf0:	7bfb      	ldrb	r3, [r7, #15]
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f000 f85c 	bl	8015cb0 <USBD_Get_USB_Status>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}

08015c06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c06:	b580      	push	{r7, lr}
 8015c08:	b086      	sub	sp, #24
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	60f8      	str	r0, [r7, #12]
 8015c0e:	607a      	str	r2, [r7, #4]
 8015c10:	603b      	str	r3, [r7, #0]
 8015c12:	460b      	mov	r3, r1
 8015c14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c16:	2300      	movs	r3, #0
 8015c18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c24:	7af9      	ldrb	r1, [r7, #11]
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	687a      	ldr	r2, [r7, #4]
 8015c2a:	f7f7 f9bb 	bl	800cfa4 <HAL_PCD_EP_Transmit>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c32:	7dfb      	ldrb	r3, [r7, #23]
 8015c34:	4618      	mov	r0, r3
 8015c36:	f000 f83b 	bl	8015cb0 <USBD_Get_USB_Status>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015c3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	3718      	adds	r7, #24
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b086      	sub	sp, #24
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	60f8      	str	r0, [r7, #12]
 8015c50:	607a      	str	r2, [r7, #4]
 8015c52:	603b      	str	r3, [r7, #0]
 8015c54:	460b      	mov	r3, r1
 8015c56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c66:	7af9      	ldrb	r1, [r7, #11]
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	687a      	ldr	r2, [r7, #4]
 8015c6c:	f7f7 f937 	bl	800cede <HAL_PCD_EP_Receive>
 8015c70:	4603      	mov	r3, r0
 8015c72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c74:	7dfb      	ldrb	r3, [r7, #23]
 8015c76:	4618      	mov	r0, r3
 8015c78:	f000 f81a 	bl	8015cb0 <USBD_Get_USB_Status>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015c80:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3718      	adds	r7, #24
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}

08015c8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c8a:	b580      	push	{r7, lr}
 8015c8c:	b082      	sub	sp, #8
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	6078      	str	r0, [r7, #4]
 8015c92:	460b      	mov	r3, r1
 8015c94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c9c:	78fa      	ldrb	r2, [r7, #3]
 8015c9e:	4611      	mov	r1, r2
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f7f7 f967 	bl	800cf74 <HAL_PCD_EP_GetRxCount>
 8015ca6:	4603      	mov	r3, r0
}
 8015ca8:	4618      	mov	r0, r3
 8015caa:	3708      	adds	r7, #8
 8015cac:	46bd      	mov	sp, r7
 8015cae:	bd80      	pop	{r7, pc}

08015cb0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015cbe:	79fb      	ldrb	r3, [r7, #7]
 8015cc0:	2b03      	cmp	r3, #3
 8015cc2:	d817      	bhi.n	8015cf4 <USBD_Get_USB_Status+0x44>
 8015cc4:	a201      	add	r2, pc, #4	; (adr r2, 8015ccc <USBD_Get_USB_Status+0x1c>)
 8015cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cca:	bf00      	nop
 8015ccc:	08015cdd 	.word	0x08015cdd
 8015cd0:	08015ce3 	.word	0x08015ce3
 8015cd4:	08015ce9 	.word	0x08015ce9
 8015cd8:	08015cef 	.word	0x08015cef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015cdc:	2300      	movs	r3, #0
 8015cde:	73fb      	strb	r3, [r7, #15]
    break;
 8015ce0:	e00b      	b.n	8015cfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ce2:	2303      	movs	r3, #3
 8015ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8015ce6:	e008      	b.n	8015cfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015ce8:	2301      	movs	r3, #1
 8015cea:	73fb      	strb	r3, [r7, #15]
    break;
 8015cec:	e005      	b.n	8015cfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015cee:	2303      	movs	r3, #3
 8015cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8015cf2:	e002      	b.n	8015cfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015cf4:	2303      	movs	r3, #3
 8015cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8015cf8:	bf00      	nop
  }
  return usb_status;
 8015cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3714      	adds	r7, #20
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr

08015d08 <__errno>:
 8015d08:	4b01      	ldr	r3, [pc, #4]	; (8015d10 <__errno+0x8>)
 8015d0a:	6818      	ldr	r0, [r3, #0]
 8015d0c:	4770      	bx	lr
 8015d0e:	bf00      	nop
 8015d10:	2000220c 	.word	0x2000220c

08015d14 <__libc_init_array>:
 8015d14:	b570      	push	{r4, r5, r6, lr}
 8015d16:	4e0d      	ldr	r6, [pc, #52]	; (8015d4c <__libc_init_array+0x38>)
 8015d18:	4c0d      	ldr	r4, [pc, #52]	; (8015d50 <__libc_init_array+0x3c>)
 8015d1a:	1ba4      	subs	r4, r4, r6
 8015d1c:	10a4      	asrs	r4, r4, #2
 8015d1e:	2500      	movs	r5, #0
 8015d20:	42a5      	cmp	r5, r4
 8015d22:	d109      	bne.n	8015d38 <__libc_init_array+0x24>
 8015d24:	4e0b      	ldr	r6, [pc, #44]	; (8015d54 <__libc_init_array+0x40>)
 8015d26:	4c0c      	ldr	r4, [pc, #48]	; (8015d58 <__libc_init_array+0x44>)
 8015d28:	f005 fa8c 	bl	801b244 <_init>
 8015d2c:	1ba4      	subs	r4, r4, r6
 8015d2e:	10a4      	asrs	r4, r4, #2
 8015d30:	2500      	movs	r5, #0
 8015d32:	42a5      	cmp	r5, r4
 8015d34:	d105      	bne.n	8015d42 <__libc_init_array+0x2e>
 8015d36:	bd70      	pop	{r4, r5, r6, pc}
 8015d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015d3c:	4798      	blx	r3
 8015d3e:	3501      	adds	r5, #1
 8015d40:	e7ee      	b.n	8015d20 <__libc_init_array+0xc>
 8015d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015d46:	4798      	blx	r3
 8015d48:	3501      	adds	r5, #1
 8015d4a:	e7f2      	b.n	8015d32 <__libc_init_array+0x1e>
 8015d4c:	0801ba28 	.word	0x0801ba28
 8015d50:	0801ba28 	.word	0x0801ba28
 8015d54:	0801ba28 	.word	0x0801ba28
 8015d58:	0801ba2c 	.word	0x0801ba2c

08015d5c <malloc>:
 8015d5c:	4b02      	ldr	r3, [pc, #8]	; (8015d68 <malloc+0xc>)
 8015d5e:	4601      	mov	r1, r0
 8015d60:	6818      	ldr	r0, [r3, #0]
 8015d62:	f000 b885 	b.w	8015e70 <_malloc_r>
 8015d66:	bf00      	nop
 8015d68:	2000220c 	.word	0x2000220c

08015d6c <free>:
 8015d6c:	4b02      	ldr	r3, [pc, #8]	; (8015d78 <free+0xc>)
 8015d6e:	4601      	mov	r1, r0
 8015d70:	6818      	ldr	r0, [r3, #0]
 8015d72:	f000 b82f 	b.w	8015dd4 <_free_r>
 8015d76:	bf00      	nop
 8015d78:	2000220c 	.word	0x2000220c

08015d7c <memcpy>:
 8015d7c:	b510      	push	{r4, lr}
 8015d7e:	1e43      	subs	r3, r0, #1
 8015d80:	440a      	add	r2, r1
 8015d82:	4291      	cmp	r1, r2
 8015d84:	d100      	bne.n	8015d88 <memcpy+0xc>
 8015d86:	bd10      	pop	{r4, pc}
 8015d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d90:	e7f7      	b.n	8015d82 <memcpy+0x6>

08015d92 <memmove>:
 8015d92:	4288      	cmp	r0, r1
 8015d94:	b510      	push	{r4, lr}
 8015d96:	eb01 0302 	add.w	r3, r1, r2
 8015d9a:	d807      	bhi.n	8015dac <memmove+0x1a>
 8015d9c:	1e42      	subs	r2, r0, #1
 8015d9e:	4299      	cmp	r1, r3
 8015da0:	d00a      	beq.n	8015db8 <memmove+0x26>
 8015da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015da6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015daa:	e7f8      	b.n	8015d9e <memmove+0xc>
 8015dac:	4283      	cmp	r3, r0
 8015dae:	d9f5      	bls.n	8015d9c <memmove+0xa>
 8015db0:	1881      	adds	r1, r0, r2
 8015db2:	1ad2      	subs	r2, r2, r3
 8015db4:	42d3      	cmn	r3, r2
 8015db6:	d100      	bne.n	8015dba <memmove+0x28>
 8015db8:	bd10      	pop	{r4, pc}
 8015dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015dbe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015dc2:	e7f7      	b.n	8015db4 <memmove+0x22>

08015dc4 <memset>:
 8015dc4:	4402      	add	r2, r0
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	4293      	cmp	r3, r2
 8015dca:	d100      	bne.n	8015dce <memset+0xa>
 8015dcc:	4770      	bx	lr
 8015dce:	f803 1b01 	strb.w	r1, [r3], #1
 8015dd2:	e7f9      	b.n	8015dc8 <memset+0x4>

08015dd4 <_free_r>:
 8015dd4:	b538      	push	{r3, r4, r5, lr}
 8015dd6:	4605      	mov	r5, r0
 8015dd8:	2900      	cmp	r1, #0
 8015dda:	d045      	beq.n	8015e68 <_free_r+0x94>
 8015ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015de0:	1f0c      	subs	r4, r1, #4
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	bfb8      	it	lt
 8015de6:	18e4      	addlt	r4, r4, r3
 8015de8:	f002 ff86 	bl	8018cf8 <__malloc_lock>
 8015dec:	4a1f      	ldr	r2, [pc, #124]	; (8015e6c <_free_r+0x98>)
 8015dee:	6813      	ldr	r3, [r2, #0]
 8015df0:	4610      	mov	r0, r2
 8015df2:	b933      	cbnz	r3, 8015e02 <_free_r+0x2e>
 8015df4:	6063      	str	r3, [r4, #4]
 8015df6:	6014      	str	r4, [r2, #0]
 8015df8:	4628      	mov	r0, r5
 8015dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015dfe:	f002 bf7c 	b.w	8018cfa <__malloc_unlock>
 8015e02:	42a3      	cmp	r3, r4
 8015e04:	d90c      	bls.n	8015e20 <_free_r+0x4c>
 8015e06:	6821      	ldr	r1, [r4, #0]
 8015e08:	1862      	adds	r2, r4, r1
 8015e0a:	4293      	cmp	r3, r2
 8015e0c:	bf04      	itt	eq
 8015e0e:	681a      	ldreq	r2, [r3, #0]
 8015e10:	685b      	ldreq	r3, [r3, #4]
 8015e12:	6063      	str	r3, [r4, #4]
 8015e14:	bf04      	itt	eq
 8015e16:	1852      	addeq	r2, r2, r1
 8015e18:	6022      	streq	r2, [r4, #0]
 8015e1a:	6004      	str	r4, [r0, #0]
 8015e1c:	e7ec      	b.n	8015df8 <_free_r+0x24>
 8015e1e:	4613      	mov	r3, r2
 8015e20:	685a      	ldr	r2, [r3, #4]
 8015e22:	b10a      	cbz	r2, 8015e28 <_free_r+0x54>
 8015e24:	42a2      	cmp	r2, r4
 8015e26:	d9fa      	bls.n	8015e1e <_free_r+0x4a>
 8015e28:	6819      	ldr	r1, [r3, #0]
 8015e2a:	1858      	adds	r0, r3, r1
 8015e2c:	42a0      	cmp	r0, r4
 8015e2e:	d10b      	bne.n	8015e48 <_free_r+0x74>
 8015e30:	6820      	ldr	r0, [r4, #0]
 8015e32:	4401      	add	r1, r0
 8015e34:	1858      	adds	r0, r3, r1
 8015e36:	4282      	cmp	r2, r0
 8015e38:	6019      	str	r1, [r3, #0]
 8015e3a:	d1dd      	bne.n	8015df8 <_free_r+0x24>
 8015e3c:	6810      	ldr	r0, [r2, #0]
 8015e3e:	6852      	ldr	r2, [r2, #4]
 8015e40:	605a      	str	r2, [r3, #4]
 8015e42:	4401      	add	r1, r0
 8015e44:	6019      	str	r1, [r3, #0]
 8015e46:	e7d7      	b.n	8015df8 <_free_r+0x24>
 8015e48:	d902      	bls.n	8015e50 <_free_r+0x7c>
 8015e4a:	230c      	movs	r3, #12
 8015e4c:	602b      	str	r3, [r5, #0]
 8015e4e:	e7d3      	b.n	8015df8 <_free_r+0x24>
 8015e50:	6820      	ldr	r0, [r4, #0]
 8015e52:	1821      	adds	r1, r4, r0
 8015e54:	428a      	cmp	r2, r1
 8015e56:	bf04      	itt	eq
 8015e58:	6811      	ldreq	r1, [r2, #0]
 8015e5a:	6852      	ldreq	r2, [r2, #4]
 8015e5c:	6062      	str	r2, [r4, #4]
 8015e5e:	bf04      	itt	eq
 8015e60:	1809      	addeq	r1, r1, r0
 8015e62:	6021      	streq	r1, [r4, #0]
 8015e64:	605c      	str	r4, [r3, #4]
 8015e66:	e7c7      	b.n	8015df8 <_free_r+0x24>
 8015e68:	bd38      	pop	{r3, r4, r5, pc}
 8015e6a:	bf00      	nop
 8015e6c:	200065b0 	.word	0x200065b0

08015e70 <_malloc_r>:
 8015e70:	b570      	push	{r4, r5, r6, lr}
 8015e72:	1ccd      	adds	r5, r1, #3
 8015e74:	f025 0503 	bic.w	r5, r5, #3
 8015e78:	3508      	adds	r5, #8
 8015e7a:	2d0c      	cmp	r5, #12
 8015e7c:	bf38      	it	cc
 8015e7e:	250c      	movcc	r5, #12
 8015e80:	2d00      	cmp	r5, #0
 8015e82:	4606      	mov	r6, r0
 8015e84:	db01      	blt.n	8015e8a <_malloc_r+0x1a>
 8015e86:	42a9      	cmp	r1, r5
 8015e88:	d903      	bls.n	8015e92 <_malloc_r+0x22>
 8015e8a:	230c      	movs	r3, #12
 8015e8c:	6033      	str	r3, [r6, #0]
 8015e8e:	2000      	movs	r0, #0
 8015e90:	bd70      	pop	{r4, r5, r6, pc}
 8015e92:	f002 ff31 	bl	8018cf8 <__malloc_lock>
 8015e96:	4a21      	ldr	r2, [pc, #132]	; (8015f1c <_malloc_r+0xac>)
 8015e98:	6814      	ldr	r4, [r2, #0]
 8015e9a:	4621      	mov	r1, r4
 8015e9c:	b991      	cbnz	r1, 8015ec4 <_malloc_r+0x54>
 8015e9e:	4c20      	ldr	r4, [pc, #128]	; (8015f20 <_malloc_r+0xb0>)
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	b91b      	cbnz	r3, 8015eac <_malloc_r+0x3c>
 8015ea4:	4630      	mov	r0, r6
 8015ea6:	f000 fe7b 	bl	8016ba0 <_sbrk_r>
 8015eaa:	6020      	str	r0, [r4, #0]
 8015eac:	4629      	mov	r1, r5
 8015eae:	4630      	mov	r0, r6
 8015eb0:	f000 fe76 	bl	8016ba0 <_sbrk_r>
 8015eb4:	1c43      	adds	r3, r0, #1
 8015eb6:	d124      	bne.n	8015f02 <_malloc_r+0x92>
 8015eb8:	230c      	movs	r3, #12
 8015eba:	6033      	str	r3, [r6, #0]
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	f002 ff1c 	bl	8018cfa <__malloc_unlock>
 8015ec2:	e7e4      	b.n	8015e8e <_malloc_r+0x1e>
 8015ec4:	680b      	ldr	r3, [r1, #0]
 8015ec6:	1b5b      	subs	r3, r3, r5
 8015ec8:	d418      	bmi.n	8015efc <_malloc_r+0x8c>
 8015eca:	2b0b      	cmp	r3, #11
 8015ecc:	d90f      	bls.n	8015eee <_malloc_r+0x7e>
 8015ece:	600b      	str	r3, [r1, #0]
 8015ed0:	50cd      	str	r5, [r1, r3]
 8015ed2:	18cc      	adds	r4, r1, r3
 8015ed4:	4630      	mov	r0, r6
 8015ed6:	f002 ff10 	bl	8018cfa <__malloc_unlock>
 8015eda:	f104 000b 	add.w	r0, r4, #11
 8015ede:	1d23      	adds	r3, r4, #4
 8015ee0:	f020 0007 	bic.w	r0, r0, #7
 8015ee4:	1ac3      	subs	r3, r0, r3
 8015ee6:	d0d3      	beq.n	8015e90 <_malloc_r+0x20>
 8015ee8:	425a      	negs	r2, r3
 8015eea:	50e2      	str	r2, [r4, r3]
 8015eec:	e7d0      	b.n	8015e90 <_malloc_r+0x20>
 8015eee:	428c      	cmp	r4, r1
 8015ef0:	684b      	ldr	r3, [r1, #4]
 8015ef2:	bf16      	itet	ne
 8015ef4:	6063      	strne	r3, [r4, #4]
 8015ef6:	6013      	streq	r3, [r2, #0]
 8015ef8:	460c      	movne	r4, r1
 8015efa:	e7eb      	b.n	8015ed4 <_malloc_r+0x64>
 8015efc:	460c      	mov	r4, r1
 8015efe:	6849      	ldr	r1, [r1, #4]
 8015f00:	e7cc      	b.n	8015e9c <_malloc_r+0x2c>
 8015f02:	1cc4      	adds	r4, r0, #3
 8015f04:	f024 0403 	bic.w	r4, r4, #3
 8015f08:	42a0      	cmp	r0, r4
 8015f0a:	d005      	beq.n	8015f18 <_malloc_r+0xa8>
 8015f0c:	1a21      	subs	r1, r4, r0
 8015f0e:	4630      	mov	r0, r6
 8015f10:	f000 fe46 	bl	8016ba0 <_sbrk_r>
 8015f14:	3001      	adds	r0, #1
 8015f16:	d0cf      	beq.n	8015eb8 <_malloc_r+0x48>
 8015f18:	6025      	str	r5, [r4, #0]
 8015f1a:	e7db      	b.n	8015ed4 <_malloc_r+0x64>
 8015f1c:	200065b0 	.word	0x200065b0
 8015f20:	200065b4 	.word	0x200065b4

08015f24 <__cvt>:
 8015f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f28:	ec55 4b10 	vmov	r4, r5, d0
 8015f2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015f2e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015f32:	2d00      	cmp	r5, #0
 8015f34:	460e      	mov	r6, r1
 8015f36:	4691      	mov	r9, r2
 8015f38:	4619      	mov	r1, r3
 8015f3a:	bfb8      	it	lt
 8015f3c:	4622      	movlt	r2, r4
 8015f3e:	462b      	mov	r3, r5
 8015f40:	f027 0720 	bic.w	r7, r7, #32
 8015f44:	bfbb      	ittet	lt
 8015f46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015f4a:	461d      	movlt	r5, r3
 8015f4c:	2300      	movge	r3, #0
 8015f4e:	232d      	movlt	r3, #45	; 0x2d
 8015f50:	bfb8      	it	lt
 8015f52:	4614      	movlt	r4, r2
 8015f54:	2f46      	cmp	r7, #70	; 0x46
 8015f56:	700b      	strb	r3, [r1, #0]
 8015f58:	d004      	beq.n	8015f64 <__cvt+0x40>
 8015f5a:	2f45      	cmp	r7, #69	; 0x45
 8015f5c:	d100      	bne.n	8015f60 <__cvt+0x3c>
 8015f5e:	3601      	adds	r6, #1
 8015f60:	2102      	movs	r1, #2
 8015f62:	e000      	b.n	8015f66 <__cvt+0x42>
 8015f64:	2103      	movs	r1, #3
 8015f66:	ab03      	add	r3, sp, #12
 8015f68:	9301      	str	r3, [sp, #4]
 8015f6a:	ab02      	add	r3, sp, #8
 8015f6c:	9300      	str	r3, [sp, #0]
 8015f6e:	4632      	mov	r2, r6
 8015f70:	4653      	mov	r3, sl
 8015f72:	ec45 4b10 	vmov	d0, r4, r5
 8015f76:	f001 fdbb 	bl	8017af0 <_dtoa_r>
 8015f7a:	2f47      	cmp	r7, #71	; 0x47
 8015f7c:	4680      	mov	r8, r0
 8015f7e:	d102      	bne.n	8015f86 <__cvt+0x62>
 8015f80:	f019 0f01 	tst.w	r9, #1
 8015f84:	d026      	beq.n	8015fd4 <__cvt+0xb0>
 8015f86:	2f46      	cmp	r7, #70	; 0x46
 8015f88:	eb08 0906 	add.w	r9, r8, r6
 8015f8c:	d111      	bne.n	8015fb2 <__cvt+0x8e>
 8015f8e:	f898 3000 	ldrb.w	r3, [r8]
 8015f92:	2b30      	cmp	r3, #48	; 0x30
 8015f94:	d10a      	bne.n	8015fac <__cvt+0x88>
 8015f96:	2200      	movs	r2, #0
 8015f98:	2300      	movs	r3, #0
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	4629      	mov	r1, r5
 8015f9e:	f7ea fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8015fa2:	b918      	cbnz	r0, 8015fac <__cvt+0x88>
 8015fa4:	f1c6 0601 	rsb	r6, r6, #1
 8015fa8:	f8ca 6000 	str.w	r6, [sl]
 8015fac:	f8da 3000 	ldr.w	r3, [sl]
 8015fb0:	4499      	add	r9, r3
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	4629      	mov	r1, r5
 8015fba:	f7ea fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8015fbe:	b938      	cbnz	r0, 8015fd0 <__cvt+0xac>
 8015fc0:	2230      	movs	r2, #48	; 0x30
 8015fc2:	9b03      	ldr	r3, [sp, #12]
 8015fc4:	454b      	cmp	r3, r9
 8015fc6:	d205      	bcs.n	8015fd4 <__cvt+0xb0>
 8015fc8:	1c59      	adds	r1, r3, #1
 8015fca:	9103      	str	r1, [sp, #12]
 8015fcc:	701a      	strb	r2, [r3, #0]
 8015fce:	e7f8      	b.n	8015fc2 <__cvt+0x9e>
 8015fd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8015fd4:	9b03      	ldr	r3, [sp, #12]
 8015fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fd8:	eba3 0308 	sub.w	r3, r3, r8
 8015fdc:	4640      	mov	r0, r8
 8015fde:	6013      	str	r3, [r2, #0]
 8015fe0:	b004      	add	sp, #16
 8015fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015fe6 <__exponent>:
 8015fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015fe8:	2900      	cmp	r1, #0
 8015fea:	4604      	mov	r4, r0
 8015fec:	bfba      	itte	lt
 8015fee:	4249      	neglt	r1, r1
 8015ff0:	232d      	movlt	r3, #45	; 0x2d
 8015ff2:	232b      	movge	r3, #43	; 0x2b
 8015ff4:	2909      	cmp	r1, #9
 8015ff6:	f804 2b02 	strb.w	r2, [r4], #2
 8015ffa:	7043      	strb	r3, [r0, #1]
 8015ffc:	dd20      	ble.n	8016040 <__exponent+0x5a>
 8015ffe:	f10d 0307 	add.w	r3, sp, #7
 8016002:	461f      	mov	r7, r3
 8016004:	260a      	movs	r6, #10
 8016006:	fb91 f5f6 	sdiv	r5, r1, r6
 801600a:	fb06 1115 	mls	r1, r6, r5, r1
 801600e:	3130      	adds	r1, #48	; 0x30
 8016010:	2d09      	cmp	r5, #9
 8016012:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016016:	f103 32ff 	add.w	r2, r3, #4294967295
 801601a:	4629      	mov	r1, r5
 801601c:	dc09      	bgt.n	8016032 <__exponent+0x4c>
 801601e:	3130      	adds	r1, #48	; 0x30
 8016020:	3b02      	subs	r3, #2
 8016022:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016026:	42bb      	cmp	r3, r7
 8016028:	4622      	mov	r2, r4
 801602a:	d304      	bcc.n	8016036 <__exponent+0x50>
 801602c:	1a10      	subs	r0, r2, r0
 801602e:	b003      	add	sp, #12
 8016030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016032:	4613      	mov	r3, r2
 8016034:	e7e7      	b.n	8016006 <__exponent+0x20>
 8016036:	f813 2b01 	ldrb.w	r2, [r3], #1
 801603a:	f804 2b01 	strb.w	r2, [r4], #1
 801603e:	e7f2      	b.n	8016026 <__exponent+0x40>
 8016040:	2330      	movs	r3, #48	; 0x30
 8016042:	4419      	add	r1, r3
 8016044:	7083      	strb	r3, [r0, #2]
 8016046:	1d02      	adds	r2, r0, #4
 8016048:	70c1      	strb	r1, [r0, #3]
 801604a:	e7ef      	b.n	801602c <__exponent+0x46>

0801604c <_printf_float>:
 801604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016050:	b08d      	sub	sp, #52	; 0x34
 8016052:	460c      	mov	r4, r1
 8016054:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8016058:	4616      	mov	r6, r2
 801605a:	461f      	mov	r7, r3
 801605c:	4605      	mov	r5, r0
 801605e:	f002 fe2b 	bl	8018cb8 <_localeconv_r>
 8016062:	6803      	ldr	r3, [r0, #0]
 8016064:	9304      	str	r3, [sp, #16]
 8016066:	4618      	mov	r0, r3
 8016068:	f7ea f8b2 	bl	80001d0 <strlen>
 801606c:	2300      	movs	r3, #0
 801606e:	930a      	str	r3, [sp, #40]	; 0x28
 8016070:	f8d8 3000 	ldr.w	r3, [r8]
 8016074:	9005      	str	r0, [sp, #20]
 8016076:	3307      	adds	r3, #7
 8016078:	f023 0307 	bic.w	r3, r3, #7
 801607c:	f103 0208 	add.w	r2, r3, #8
 8016080:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016084:	f8d4 b000 	ldr.w	fp, [r4]
 8016088:	f8c8 2000 	str.w	r2, [r8]
 801608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016090:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016094:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016098:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801609c:	9307      	str	r3, [sp, #28]
 801609e:	f8cd 8018 	str.w	r8, [sp, #24]
 80160a2:	f04f 32ff 	mov.w	r2, #4294967295
 80160a6:	4ba7      	ldr	r3, [pc, #668]	; (8016344 <_printf_float+0x2f8>)
 80160a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80160ac:	f7ea fd3e 	bl	8000b2c <__aeabi_dcmpun>
 80160b0:	bb70      	cbnz	r0, 8016110 <_printf_float+0xc4>
 80160b2:	f04f 32ff 	mov.w	r2, #4294967295
 80160b6:	4ba3      	ldr	r3, [pc, #652]	; (8016344 <_printf_float+0x2f8>)
 80160b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80160bc:	f7ea fd18 	bl	8000af0 <__aeabi_dcmple>
 80160c0:	bb30      	cbnz	r0, 8016110 <_printf_float+0xc4>
 80160c2:	2200      	movs	r2, #0
 80160c4:	2300      	movs	r3, #0
 80160c6:	4640      	mov	r0, r8
 80160c8:	4649      	mov	r1, r9
 80160ca:	f7ea fd07 	bl	8000adc <__aeabi_dcmplt>
 80160ce:	b110      	cbz	r0, 80160d6 <_printf_float+0x8a>
 80160d0:	232d      	movs	r3, #45	; 0x2d
 80160d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160d6:	4a9c      	ldr	r2, [pc, #624]	; (8016348 <_printf_float+0x2fc>)
 80160d8:	4b9c      	ldr	r3, [pc, #624]	; (801634c <_printf_float+0x300>)
 80160da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80160de:	bf8c      	ite	hi
 80160e0:	4690      	movhi	r8, r2
 80160e2:	4698      	movls	r8, r3
 80160e4:	2303      	movs	r3, #3
 80160e6:	f02b 0204 	bic.w	r2, fp, #4
 80160ea:	6123      	str	r3, [r4, #16]
 80160ec:	6022      	str	r2, [r4, #0]
 80160ee:	f04f 0900 	mov.w	r9, #0
 80160f2:	9700      	str	r7, [sp, #0]
 80160f4:	4633      	mov	r3, r6
 80160f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80160f8:	4621      	mov	r1, r4
 80160fa:	4628      	mov	r0, r5
 80160fc:	f000 f9e6 	bl	80164cc <_printf_common>
 8016100:	3001      	adds	r0, #1
 8016102:	f040 808d 	bne.w	8016220 <_printf_float+0x1d4>
 8016106:	f04f 30ff 	mov.w	r0, #4294967295
 801610a:	b00d      	add	sp, #52	; 0x34
 801610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016110:	4642      	mov	r2, r8
 8016112:	464b      	mov	r3, r9
 8016114:	4640      	mov	r0, r8
 8016116:	4649      	mov	r1, r9
 8016118:	f7ea fd08 	bl	8000b2c <__aeabi_dcmpun>
 801611c:	b110      	cbz	r0, 8016124 <_printf_float+0xd8>
 801611e:	4a8c      	ldr	r2, [pc, #560]	; (8016350 <_printf_float+0x304>)
 8016120:	4b8c      	ldr	r3, [pc, #560]	; (8016354 <_printf_float+0x308>)
 8016122:	e7da      	b.n	80160da <_printf_float+0x8e>
 8016124:	6861      	ldr	r1, [r4, #4]
 8016126:	1c4b      	adds	r3, r1, #1
 8016128:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801612c:	a80a      	add	r0, sp, #40	; 0x28
 801612e:	d13e      	bne.n	80161ae <_printf_float+0x162>
 8016130:	2306      	movs	r3, #6
 8016132:	6063      	str	r3, [r4, #4]
 8016134:	2300      	movs	r3, #0
 8016136:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801613a:	ab09      	add	r3, sp, #36	; 0x24
 801613c:	9300      	str	r3, [sp, #0]
 801613e:	ec49 8b10 	vmov	d0, r8, r9
 8016142:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016146:	6022      	str	r2, [r4, #0]
 8016148:	f8cd a004 	str.w	sl, [sp, #4]
 801614c:	6861      	ldr	r1, [r4, #4]
 801614e:	4628      	mov	r0, r5
 8016150:	f7ff fee8 	bl	8015f24 <__cvt>
 8016154:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8016158:	2b47      	cmp	r3, #71	; 0x47
 801615a:	4680      	mov	r8, r0
 801615c:	d109      	bne.n	8016172 <_printf_float+0x126>
 801615e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016160:	1cd8      	adds	r0, r3, #3
 8016162:	db02      	blt.n	801616a <_printf_float+0x11e>
 8016164:	6862      	ldr	r2, [r4, #4]
 8016166:	4293      	cmp	r3, r2
 8016168:	dd47      	ble.n	80161fa <_printf_float+0x1ae>
 801616a:	f1aa 0a02 	sub.w	sl, sl, #2
 801616e:	fa5f fa8a 	uxtb.w	sl, sl
 8016172:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016176:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016178:	d824      	bhi.n	80161c4 <_printf_float+0x178>
 801617a:	3901      	subs	r1, #1
 801617c:	4652      	mov	r2, sl
 801617e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016182:	9109      	str	r1, [sp, #36]	; 0x24
 8016184:	f7ff ff2f 	bl	8015fe6 <__exponent>
 8016188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801618a:	1813      	adds	r3, r2, r0
 801618c:	2a01      	cmp	r2, #1
 801618e:	4681      	mov	r9, r0
 8016190:	6123      	str	r3, [r4, #16]
 8016192:	dc02      	bgt.n	801619a <_printf_float+0x14e>
 8016194:	6822      	ldr	r2, [r4, #0]
 8016196:	07d1      	lsls	r1, r2, #31
 8016198:	d501      	bpl.n	801619e <_printf_float+0x152>
 801619a:	3301      	adds	r3, #1
 801619c:	6123      	str	r3, [r4, #16]
 801619e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d0a5      	beq.n	80160f2 <_printf_float+0xa6>
 80161a6:	232d      	movs	r3, #45	; 0x2d
 80161a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161ac:	e7a1      	b.n	80160f2 <_printf_float+0xa6>
 80161ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80161b2:	f000 8177 	beq.w	80164a4 <_printf_float+0x458>
 80161b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80161ba:	d1bb      	bne.n	8016134 <_printf_float+0xe8>
 80161bc:	2900      	cmp	r1, #0
 80161be:	d1b9      	bne.n	8016134 <_printf_float+0xe8>
 80161c0:	2301      	movs	r3, #1
 80161c2:	e7b6      	b.n	8016132 <_printf_float+0xe6>
 80161c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80161c8:	d119      	bne.n	80161fe <_printf_float+0x1b2>
 80161ca:	2900      	cmp	r1, #0
 80161cc:	6863      	ldr	r3, [r4, #4]
 80161ce:	dd0c      	ble.n	80161ea <_printf_float+0x19e>
 80161d0:	6121      	str	r1, [r4, #16]
 80161d2:	b913      	cbnz	r3, 80161da <_printf_float+0x18e>
 80161d4:	6822      	ldr	r2, [r4, #0]
 80161d6:	07d2      	lsls	r2, r2, #31
 80161d8:	d502      	bpl.n	80161e0 <_printf_float+0x194>
 80161da:	3301      	adds	r3, #1
 80161dc:	440b      	add	r3, r1
 80161de:	6123      	str	r3, [r4, #16]
 80161e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80161e4:	f04f 0900 	mov.w	r9, #0
 80161e8:	e7d9      	b.n	801619e <_printf_float+0x152>
 80161ea:	b913      	cbnz	r3, 80161f2 <_printf_float+0x1a6>
 80161ec:	6822      	ldr	r2, [r4, #0]
 80161ee:	07d0      	lsls	r0, r2, #31
 80161f0:	d501      	bpl.n	80161f6 <_printf_float+0x1aa>
 80161f2:	3302      	adds	r3, #2
 80161f4:	e7f3      	b.n	80161de <_printf_float+0x192>
 80161f6:	2301      	movs	r3, #1
 80161f8:	e7f1      	b.n	80161de <_printf_float+0x192>
 80161fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80161fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016202:	4293      	cmp	r3, r2
 8016204:	db05      	blt.n	8016212 <_printf_float+0x1c6>
 8016206:	6822      	ldr	r2, [r4, #0]
 8016208:	6123      	str	r3, [r4, #16]
 801620a:	07d1      	lsls	r1, r2, #31
 801620c:	d5e8      	bpl.n	80161e0 <_printf_float+0x194>
 801620e:	3301      	adds	r3, #1
 8016210:	e7e5      	b.n	80161de <_printf_float+0x192>
 8016212:	2b00      	cmp	r3, #0
 8016214:	bfd4      	ite	le
 8016216:	f1c3 0302 	rsble	r3, r3, #2
 801621a:	2301      	movgt	r3, #1
 801621c:	4413      	add	r3, r2
 801621e:	e7de      	b.n	80161de <_printf_float+0x192>
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	055a      	lsls	r2, r3, #21
 8016224:	d407      	bmi.n	8016236 <_printf_float+0x1ea>
 8016226:	6923      	ldr	r3, [r4, #16]
 8016228:	4642      	mov	r2, r8
 801622a:	4631      	mov	r1, r6
 801622c:	4628      	mov	r0, r5
 801622e:	47b8      	blx	r7
 8016230:	3001      	adds	r0, #1
 8016232:	d12b      	bne.n	801628c <_printf_float+0x240>
 8016234:	e767      	b.n	8016106 <_printf_float+0xba>
 8016236:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801623a:	f240 80dc 	bls.w	80163f6 <_printf_float+0x3aa>
 801623e:	2200      	movs	r2, #0
 8016240:	2300      	movs	r3, #0
 8016242:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016246:	f7ea fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801624a:	2800      	cmp	r0, #0
 801624c:	d033      	beq.n	80162b6 <_printf_float+0x26a>
 801624e:	2301      	movs	r3, #1
 8016250:	4a41      	ldr	r2, [pc, #260]	; (8016358 <_printf_float+0x30c>)
 8016252:	4631      	mov	r1, r6
 8016254:	4628      	mov	r0, r5
 8016256:	47b8      	blx	r7
 8016258:	3001      	adds	r0, #1
 801625a:	f43f af54 	beq.w	8016106 <_printf_float+0xba>
 801625e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016262:	429a      	cmp	r2, r3
 8016264:	db02      	blt.n	801626c <_printf_float+0x220>
 8016266:	6823      	ldr	r3, [r4, #0]
 8016268:	07d8      	lsls	r0, r3, #31
 801626a:	d50f      	bpl.n	801628c <_printf_float+0x240>
 801626c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016270:	4631      	mov	r1, r6
 8016272:	4628      	mov	r0, r5
 8016274:	47b8      	blx	r7
 8016276:	3001      	adds	r0, #1
 8016278:	f43f af45 	beq.w	8016106 <_printf_float+0xba>
 801627c:	f04f 0800 	mov.w	r8, #0
 8016280:	f104 091a 	add.w	r9, r4, #26
 8016284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016286:	3b01      	subs	r3, #1
 8016288:	4543      	cmp	r3, r8
 801628a:	dc09      	bgt.n	80162a0 <_printf_float+0x254>
 801628c:	6823      	ldr	r3, [r4, #0]
 801628e:	079b      	lsls	r3, r3, #30
 8016290:	f100 8103 	bmi.w	801649a <_printf_float+0x44e>
 8016294:	68e0      	ldr	r0, [r4, #12]
 8016296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016298:	4298      	cmp	r0, r3
 801629a:	bfb8      	it	lt
 801629c:	4618      	movlt	r0, r3
 801629e:	e734      	b.n	801610a <_printf_float+0xbe>
 80162a0:	2301      	movs	r3, #1
 80162a2:	464a      	mov	r2, r9
 80162a4:	4631      	mov	r1, r6
 80162a6:	4628      	mov	r0, r5
 80162a8:	47b8      	blx	r7
 80162aa:	3001      	adds	r0, #1
 80162ac:	f43f af2b 	beq.w	8016106 <_printf_float+0xba>
 80162b0:	f108 0801 	add.w	r8, r8, #1
 80162b4:	e7e6      	b.n	8016284 <_printf_float+0x238>
 80162b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	dc2b      	bgt.n	8016314 <_printf_float+0x2c8>
 80162bc:	2301      	movs	r3, #1
 80162be:	4a26      	ldr	r2, [pc, #152]	; (8016358 <_printf_float+0x30c>)
 80162c0:	4631      	mov	r1, r6
 80162c2:	4628      	mov	r0, r5
 80162c4:	47b8      	blx	r7
 80162c6:	3001      	adds	r0, #1
 80162c8:	f43f af1d 	beq.w	8016106 <_printf_float+0xba>
 80162cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162ce:	b923      	cbnz	r3, 80162da <_printf_float+0x28e>
 80162d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162d2:	b913      	cbnz	r3, 80162da <_printf_float+0x28e>
 80162d4:	6823      	ldr	r3, [r4, #0]
 80162d6:	07d9      	lsls	r1, r3, #31
 80162d8:	d5d8      	bpl.n	801628c <_printf_float+0x240>
 80162da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162de:	4631      	mov	r1, r6
 80162e0:	4628      	mov	r0, r5
 80162e2:	47b8      	blx	r7
 80162e4:	3001      	adds	r0, #1
 80162e6:	f43f af0e 	beq.w	8016106 <_printf_float+0xba>
 80162ea:	f04f 0900 	mov.w	r9, #0
 80162ee:	f104 0a1a 	add.w	sl, r4, #26
 80162f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162f4:	425b      	negs	r3, r3
 80162f6:	454b      	cmp	r3, r9
 80162f8:	dc01      	bgt.n	80162fe <_printf_float+0x2b2>
 80162fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162fc:	e794      	b.n	8016228 <_printf_float+0x1dc>
 80162fe:	2301      	movs	r3, #1
 8016300:	4652      	mov	r2, sl
 8016302:	4631      	mov	r1, r6
 8016304:	4628      	mov	r0, r5
 8016306:	47b8      	blx	r7
 8016308:	3001      	adds	r0, #1
 801630a:	f43f aefc 	beq.w	8016106 <_printf_float+0xba>
 801630e:	f109 0901 	add.w	r9, r9, #1
 8016312:	e7ee      	b.n	80162f2 <_printf_float+0x2a6>
 8016314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016318:	429a      	cmp	r2, r3
 801631a:	bfa8      	it	ge
 801631c:	461a      	movge	r2, r3
 801631e:	2a00      	cmp	r2, #0
 8016320:	4691      	mov	r9, r2
 8016322:	dd07      	ble.n	8016334 <_printf_float+0x2e8>
 8016324:	4613      	mov	r3, r2
 8016326:	4631      	mov	r1, r6
 8016328:	4642      	mov	r2, r8
 801632a:	4628      	mov	r0, r5
 801632c:	47b8      	blx	r7
 801632e:	3001      	adds	r0, #1
 8016330:	f43f aee9 	beq.w	8016106 <_printf_float+0xba>
 8016334:	f104 031a 	add.w	r3, r4, #26
 8016338:	f04f 0b00 	mov.w	fp, #0
 801633c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016340:	9306      	str	r3, [sp, #24]
 8016342:	e015      	b.n	8016370 <_printf_float+0x324>
 8016344:	7fefffff 	.word	0x7fefffff
 8016348:	0801b54c 	.word	0x0801b54c
 801634c:	0801b548 	.word	0x0801b548
 8016350:	0801b554 	.word	0x0801b554
 8016354:	0801b550 	.word	0x0801b550
 8016358:	0801b558 	.word	0x0801b558
 801635c:	2301      	movs	r3, #1
 801635e:	9a06      	ldr	r2, [sp, #24]
 8016360:	4631      	mov	r1, r6
 8016362:	4628      	mov	r0, r5
 8016364:	47b8      	blx	r7
 8016366:	3001      	adds	r0, #1
 8016368:	f43f aecd 	beq.w	8016106 <_printf_float+0xba>
 801636c:	f10b 0b01 	add.w	fp, fp, #1
 8016370:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016374:	ebaa 0309 	sub.w	r3, sl, r9
 8016378:	455b      	cmp	r3, fp
 801637a:	dcef      	bgt.n	801635c <_printf_float+0x310>
 801637c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016380:	429a      	cmp	r2, r3
 8016382:	44d0      	add	r8, sl
 8016384:	db15      	blt.n	80163b2 <_printf_float+0x366>
 8016386:	6823      	ldr	r3, [r4, #0]
 8016388:	07da      	lsls	r2, r3, #31
 801638a:	d412      	bmi.n	80163b2 <_printf_float+0x366>
 801638c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801638e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016390:	eba3 020a 	sub.w	r2, r3, sl
 8016394:	eba3 0a01 	sub.w	sl, r3, r1
 8016398:	4592      	cmp	sl, r2
 801639a:	bfa8      	it	ge
 801639c:	4692      	movge	sl, r2
 801639e:	f1ba 0f00 	cmp.w	sl, #0
 80163a2:	dc0e      	bgt.n	80163c2 <_printf_float+0x376>
 80163a4:	f04f 0800 	mov.w	r8, #0
 80163a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80163ac:	f104 091a 	add.w	r9, r4, #26
 80163b0:	e019      	b.n	80163e6 <_printf_float+0x39a>
 80163b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163b6:	4631      	mov	r1, r6
 80163b8:	4628      	mov	r0, r5
 80163ba:	47b8      	blx	r7
 80163bc:	3001      	adds	r0, #1
 80163be:	d1e5      	bne.n	801638c <_printf_float+0x340>
 80163c0:	e6a1      	b.n	8016106 <_printf_float+0xba>
 80163c2:	4653      	mov	r3, sl
 80163c4:	4642      	mov	r2, r8
 80163c6:	4631      	mov	r1, r6
 80163c8:	4628      	mov	r0, r5
 80163ca:	47b8      	blx	r7
 80163cc:	3001      	adds	r0, #1
 80163ce:	d1e9      	bne.n	80163a4 <_printf_float+0x358>
 80163d0:	e699      	b.n	8016106 <_printf_float+0xba>
 80163d2:	2301      	movs	r3, #1
 80163d4:	464a      	mov	r2, r9
 80163d6:	4631      	mov	r1, r6
 80163d8:	4628      	mov	r0, r5
 80163da:	47b8      	blx	r7
 80163dc:	3001      	adds	r0, #1
 80163de:	f43f ae92 	beq.w	8016106 <_printf_float+0xba>
 80163e2:	f108 0801 	add.w	r8, r8, #1
 80163e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163ea:	1a9b      	subs	r3, r3, r2
 80163ec:	eba3 030a 	sub.w	r3, r3, sl
 80163f0:	4543      	cmp	r3, r8
 80163f2:	dcee      	bgt.n	80163d2 <_printf_float+0x386>
 80163f4:	e74a      	b.n	801628c <_printf_float+0x240>
 80163f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163f8:	2a01      	cmp	r2, #1
 80163fa:	dc01      	bgt.n	8016400 <_printf_float+0x3b4>
 80163fc:	07db      	lsls	r3, r3, #31
 80163fe:	d53a      	bpl.n	8016476 <_printf_float+0x42a>
 8016400:	2301      	movs	r3, #1
 8016402:	4642      	mov	r2, r8
 8016404:	4631      	mov	r1, r6
 8016406:	4628      	mov	r0, r5
 8016408:	47b8      	blx	r7
 801640a:	3001      	adds	r0, #1
 801640c:	f43f ae7b 	beq.w	8016106 <_printf_float+0xba>
 8016410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016414:	4631      	mov	r1, r6
 8016416:	4628      	mov	r0, r5
 8016418:	47b8      	blx	r7
 801641a:	3001      	adds	r0, #1
 801641c:	f108 0801 	add.w	r8, r8, #1
 8016420:	f43f ae71 	beq.w	8016106 <_printf_float+0xba>
 8016424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016426:	2200      	movs	r2, #0
 8016428:	f103 3aff 	add.w	sl, r3, #4294967295
 801642c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016430:	2300      	movs	r3, #0
 8016432:	f7ea fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 8016436:	b9c8      	cbnz	r0, 801646c <_printf_float+0x420>
 8016438:	4653      	mov	r3, sl
 801643a:	4642      	mov	r2, r8
 801643c:	4631      	mov	r1, r6
 801643e:	4628      	mov	r0, r5
 8016440:	47b8      	blx	r7
 8016442:	3001      	adds	r0, #1
 8016444:	d10e      	bne.n	8016464 <_printf_float+0x418>
 8016446:	e65e      	b.n	8016106 <_printf_float+0xba>
 8016448:	2301      	movs	r3, #1
 801644a:	4652      	mov	r2, sl
 801644c:	4631      	mov	r1, r6
 801644e:	4628      	mov	r0, r5
 8016450:	47b8      	blx	r7
 8016452:	3001      	adds	r0, #1
 8016454:	f43f ae57 	beq.w	8016106 <_printf_float+0xba>
 8016458:	f108 0801 	add.w	r8, r8, #1
 801645c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801645e:	3b01      	subs	r3, #1
 8016460:	4543      	cmp	r3, r8
 8016462:	dcf1      	bgt.n	8016448 <_printf_float+0x3fc>
 8016464:	464b      	mov	r3, r9
 8016466:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801646a:	e6de      	b.n	801622a <_printf_float+0x1de>
 801646c:	f04f 0800 	mov.w	r8, #0
 8016470:	f104 0a1a 	add.w	sl, r4, #26
 8016474:	e7f2      	b.n	801645c <_printf_float+0x410>
 8016476:	2301      	movs	r3, #1
 8016478:	e7df      	b.n	801643a <_printf_float+0x3ee>
 801647a:	2301      	movs	r3, #1
 801647c:	464a      	mov	r2, r9
 801647e:	4631      	mov	r1, r6
 8016480:	4628      	mov	r0, r5
 8016482:	47b8      	blx	r7
 8016484:	3001      	adds	r0, #1
 8016486:	f43f ae3e 	beq.w	8016106 <_printf_float+0xba>
 801648a:	f108 0801 	add.w	r8, r8, #1
 801648e:	68e3      	ldr	r3, [r4, #12]
 8016490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016492:	1a9b      	subs	r3, r3, r2
 8016494:	4543      	cmp	r3, r8
 8016496:	dcf0      	bgt.n	801647a <_printf_float+0x42e>
 8016498:	e6fc      	b.n	8016294 <_printf_float+0x248>
 801649a:	f04f 0800 	mov.w	r8, #0
 801649e:	f104 0919 	add.w	r9, r4, #25
 80164a2:	e7f4      	b.n	801648e <_printf_float+0x442>
 80164a4:	2900      	cmp	r1, #0
 80164a6:	f43f ae8b 	beq.w	80161c0 <_printf_float+0x174>
 80164aa:	2300      	movs	r3, #0
 80164ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80164b0:	ab09      	add	r3, sp, #36	; 0x24
 80164b2:	9300      	str	r3, [sp, #0]
 80164b4:	ec49 8b10 	vmov	d0, r8, r9
 80164b8:	6022      	str	r2, [r4, #0]
 80164ba:	f8cd a004 	str.w	sl, [sp, #4]
 80164be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80164c2:	4628      	mov	r0, r5
 80164c4:	f7ff fd2e 	bl	8015f24 <__cvt>
 80164c8:	4680      	mov	r8, r0
 80164ca:	e648      	b.n	801615e <_printf_float+0x112>

080164cc <_printf_common>:
 80164cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164d0:	4691      	mov	r9, r2
 80164d2:	461f      	mov	r7, r3
 80164d4:	688a      	ldr	r2, [r1, #8]
 80164d6:	690b      	ldr	r3, [r1, #16]
 80164d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80164dc:	4293      	cmp	r3, r2
 80164de:	bfb8      	it	lt
 80164e0:	4613      	movlt	r3, r2
 80164e2:	f8c9 3000 	str.w	r3, [r9]
 80164e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80164ea:	4606      	mov	r6, r0
 80164ec:	460c      	mov	r4, r1
 80164ee:	b112      	cbz	r2, 80164f6 <_printf_common+0x2a>
 80164f0:	3301      	adds	r3, #1
 80164f2:	f8c9 3000 	str.w	r3, [r9]
 80164f6:	6823      	ldr	r3, [r4, #0]
 80164f8:	0699      	lsls	r1, r3, #26
 80164fa:	bf42      	ittt	mi
 80164fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016500:	3302      	addmi	r3, #2
 8016502:	f8c9 3000 	strmi.w	r3, [r9]
 8016506:	6825      	ldr	r5, [r4, #0]
 8016508:	f015 0506 	ands.w	r5, r5, #6
 801650c:	d107      	bne.n	801651e <_printf_common+0x52>
 801650e:	f104 0a19 	add.w	sl, r4, #25
 8016512:	68e3      	ldr	r3, [r4, #12]
 8016514:	f8d9 2000 	ldr.w	r2, [r9]
 8016518:	1a9b      	subs	r3, r3, r2
 801651a:	42ab      	cmp	r3, r5
 801651c:	dc28      	bgt.n	8016570 <_printf_common+0xa4>
 801651e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016522:	6822      	ldr	r2, [r4, #0]
 8016524:	3300      	adds	r3, #0
 8016526:	bf18      	it	ne
 8016528:	2301      	movne	r3, #1
 801652a:	0692      	lsls	r2, r2, #26
 801652c:	d42d      	bmi.n	801658a <_printf_common+0xbe>
 801652e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016532:	4639      	mov	r1, r7
 8016534:	4630      	mov	r0, r6
 8016536:	47c0      	blx	r8
 8016538:	3001      	adds	r0, #1
 801653a:	d020      	beq.n	801657e <_printf_common+0xb2>
 801653c:	6823      	ldr	r3, [r4, #0]
 801653e:	68e5      	ldr	r5, [r4, #12]
 8016540:	f8d9 2000 	ldr.w	r2, [r9]
 8016544:	f003 0306 	and.w	r3, r3, #6
 8016548:	2b04      	cmp	r3, #4
 801654a:	bf08      	it	eq
 801654c:	1aad      	subeq	r5, r5, r2
 801654e:	68a3      	ldr	r3, [r4, #8]
 8016550:	6922      	ldr	r2, [r4, #16]
 8016552:	bf0c      	ite	eq
 8016554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016558:	2500      	movne	r5, #0
 801655a:	4293      	cmp	r3, r2
 801655c:	bfc4      	itt	gt
 801655e:	1a9b      	subgt	r3, r3, r2
 8016560:	18ed      	addgt	r5, r5, r3
 8016562:	f04f 0900 	mov.w	r9, #0
 8016566:	341a      	adds	r4, #26
 8016568:	454d      	cmp	r5, r9
 801656a:	d11a      	bne.n	80165a2 <_printf_common+0xd6>
 801656c:	2000      	movs	r0, #0
 801656e:	e008      	b.n	8016582 <_printf_common+0xb6>
 8016570:	2301      	movs	r3, #1
 8016572:	4652      	mov	r2, sl
 8016574:	4639      	mov	r1, r7
 8016576:	4630      	mov	r0, r6
 8016578:	47c0      	blx	r8
 801657a:	3001      	adds	r0, #1
 801657c:	d103      	bne.n	8016586 <_printf_common+0xba>
 801657e:	f04f 30ff 	mov.w	r0, #4294967295
 8016582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016586:	3501      	adds	r5, #1
 8016588:	e7c3      	b.n	8016512 <_printf_common+0x46>
 801658a:	18e1      	adds	r1, r4, r3
 801658c:	1c5a      	adds	r2, r3, #1
 801658e:	2030      	movs	r0, #48	; 0x30
 8016590:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016594:	4422      	add	r2, r4
 8016596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801659a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801659e:	3302      	adds	r3, #2
 80165a0:	e7c5      	b.n	801652e <_printf_common+0x62>
 80165a2:	2301      	movs	r3, #1
 80165a4:	4622      	mov	r2, r4
 80165a6:	4639      	mov	r1, r7
 80165a8:	4630      	mov	r0, r6
 80165aa:	47c0      	blx	r8
 80165ac:	3001      	adds	r0, #1
 80165ae:	d0e6      	beq.n	801657e <_printf_common+0xb2>
 80165b0:	f109 0901 	add.w	r9, r9, #1
 80165b4:	e7d8      	b.n	8016568 <_printf_common+0x9c>
	...

080165b8 <_printf_i>:
 80165b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80165c0:	460c      	mov	r4, r1
 80165c2:	7e09      	ldrb	r1, [r1, #24]
 80165c4:	b085      	sub	sp, #20
 80165c6:	296e      	cmp	r1, #110	; 0x6e
 80165c8:	4617      	mov	r7, r2
 80165ca:	4606      	mov	r6, r0
 80165cc:	4698      	mov	r8, r3
 80165ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80165d0:	f000 80b3 	beq.w	801673a <_printf_i+0x182>
 80165d4:	d822      	bhi.n	801661c <_printf_i+0x64>
 80165d6:	2963      	cmp	r1, #99	; 0x63
 80165d8:	d036      	beq.n	8016648 <_printf_i+0x90>
 80165da:	d80a      	bhi.n	80165f2 <_printf_i+0x3a>
 80165dc:	2900      	cmp	r1, #0
 80165de:	f000 80b9 	beq.w	8016754 <_printf_i+0x19c>
 80165e2:	2958      	cmp	r1, #88	; 0x58
 80165e4:	f000 8083 	beq.w	80166ee <_printf_i+0x136>
 80165e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80165f0:	e032      	b.n	8016658 <_printf_i+0xa0>
 80165f2:	2964      	cmp	r1, #100	; 0x64
 80165f4:	d001      	beq.n	80165fa <_printf_i+0x42>
 80165f6:	2969      	cmp	r1, #105	; 0x69
 80165f8:	d1f6      	bne.n	80165e8 <_printf_i+0x30>
 80165fa:	6820      	ldr	r0, [r4, #0]
 80165fc:	6813      	ldr	r3, [r2, #0]
 80165fe:	0605      	lsls	r5, r0, #24
 8016600:	f103 0104 	add.w	r1, r3, #4
 8016604:	d52a      	bpl.n	801665c <_printf_i+0xa4>
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	6011      	str	r1, [r2, #0]
 801660a:	2b00      	cmp	r3, #0
 801660c:	da03      	bge.n	8016616 <_printf_i+0x5e>
 801660e:	222d      	movs	r2, #45	; 0x2d
 8016610:	425b      	negs	r3, r3
 8016612:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016616:	486f      	ldr	r0, [pc, #444]	; (80167d4 <_printf_i+0x21c>)
 8016618:	220a      	movs	r2, #10
 801661a:	e039      	b.n	8016690 <_printf_i+0xd8>
 801661c:	2973      	cmp	r1, #115	; 0x73
 801661e:	f000 809d 	beq.w	801675c <_printf_i+0x1a4>
 8016622:	d808      	bhi.n	8016636 <_printf_i+0x7e>
 8016624:	296f      	cmp	r1, #111	; 0x6f
 8016626:	d020      	beq.n	801666a <_printf_i+0xb2>
 8016628:	2970      	cmp	r1, #112	; 0x70
 801662a:	d1dd      	bne.n	80165e8 <_printf_i+0x30>
 801662c:	6823      	ldr	r3, [r4, #0]
 801662e:	f043 0320 	orr.w	r3, r3, #32
 8016632:	6023      	str	r3, [r4, #0]
 8016634:	e003      	b.n	801663e <_printf_i+0x86>
 8016636:	2975      	cmp	r1, #117	; 0x75
 8016638:	d017      	beq.n	801666a <_printf_i+0xb2>
 801663a:	2978      	cmp	r1, #120	; 0x78
 801663c:	d1d4      	bne.n	80165e8 <_printf_i+0x30>
 801663e:	2378      	movs	r3, #120	; 0x78
 8016640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016644:	4864      	ldr	r0, [pc, #400]	; (80167d8 <_printf_i+0x220>)
 8016646:	e055      	b.n	80166f4 <_printf_i+0x13c>
 8016648:	6813      	ldr	r3, [r2, #0]
 801664a:	1d19      	adds	r1, r3, #4
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	6011      	str	r1, [r2, #0]
 8016650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016658:	2301      	movs	r3, #1
 801665a:	e08c      	b.n	8016776 <_printf_i+0x1be>
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	6011      	str	r1, [r2, #0]
 8016660:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016664:	bf18      	it	ne
 8016666:	b21b      	sxthne	r3, r3
 8016668:	e7cf      	b.n	801660a <_printf_i+0x52>
 801666a:	6813      	ldr	r3, [r2, #0]
 801666c:	6825      	ldr	r5, [r4, #0]
 801666e:	1d18      	adds	r0, r3, #4
 8016670:	6010      	str	r0, [r2, #0]
 8016672:	0628      	lsls	r0, r5, #24
 8016674:	d501      	bpl.n	801667a <_printf_i+0xc2>
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	e002      	b.n	8016680 <_printf_i+0xc8>
 801667a:	0668      	lsls	r0, r5, #25
 801667c:	d5fb      	bpl.n	8016676 <_printf_i+0xbe>
 801667e:	881b      	ldrh	r3, [r3, #0]
 8016680:	4854      	ldr	r0, [pc, #336]	; (80167d4 <_printf_i+0x21c>)
 8016682:	296f      	cmp	r1, #111	; 0x6f
 8016684:	bf14      	ite	ne
 8016686:	220a      	movne	r2, #10
 8016688:	2208      	moveq	r2, #8
 801668a:	2100      	movs	r1, #0
 801668c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016690:	6865      	ldr	r5, [r4, #4]
 8016692:	60a5      	str	r5, [r4, #8]
 8016694:	2d00      	cmp	r5, #0
 8016696:	f2c0 8095 	blt.w	80167c4 <_printf_i+0x20c>
 801669a:	6821      	ldr	r1, [r4, #0]
 801669c:	f021 0104 	bic.w	r1, r1, #4
 80166a0:	6021      	str	r1, [r4, #0]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d13d      	bne.n	8016722 <_printf_i+0x16a>
 80166a6:	2d00      	cmp	r5, #0
 80166a8:	f040 808e 	bne.w	80167c8 <_printf_i+0x210>
 80166ac:	4665      	mov	r5, ip
 80166ae:	2a08      	cmp	r2, #8
 80166b0:	d10b      	bne.n	80166ca <_printf_i+0x112>
 80166b2:	6823      	ldr	r3, [r4, #0]
 80166b4:	07db      	lsls	r3, r3, #31
 80166b6:	d508      	bpl.n	80166ca <_printf_i+0x112>
 80166b8:	6923      	ldr	r3, [r4, #16]
 80166ba:	6862      	ldr	r2, [r4, #4]
 80166bc:	429a      	cmp	r2, r3
 80166be:	bfde      	ittt	le
 80166c0:	2330      	movle	r3, #48	; 0x30
 80166c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80166c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80166ca:	ebac 0305 	sub.w	r3, ip, r5
 80166ce:	6123      	str	r3, [r4, #16]
 80166d0:	f8cd 8000 	str.w	r8, [sp]
 80166d4:	463b      	mov	r3, r7
 80166d6:	aa03      	add	r2, sp, #12
 80166d8:	4621      	mov	r1, r4
 80166da:	4630      	mov	r0, r6
 80166dc:	f7ff fef6 	bl	80164cc <_printf_common>
 80166e0:	3001      	adds	r0, #1
 80166e2:	d14d      	bne.n	8016780 <_printf_i+0x1c8>
 80166e4:	f04f 30ff 	mov.w	r0, #4294967295
 80166e8:	b005      	add	sp, #20
 80166ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166ee:	4839      	ldr	r0, [pc, #228]	; (80167d4 <_printf_i+0x21c>)
 80166f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80166f4:	6813      	ldr	r3, [r2, #0]
 80166f6:	6821      	ldr	r1, [r4, #0]
 80166f8:	1d1d      	adds	r5, r3, #4
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	6015      	str	r5, [r2, #0]
 80166fe:	060a      	lsls	r2, r1, #24
 8016700:	d50b      	bpl.n	801671a <_printf_i+0x162>
 8016702:	07ca      	lsls	r2, r1, #31
 8016704:	bf44      	itt	mi
 8016706:	f041 0120 	orrmi.w	r1, r1, #32
 801670a:	6021      	strmi	r1, [r4, #0]
 801670c:	b91b      	cbnz	r3, 8016716 <_printf_i+0x15e>
 801670e:	6822      	ldr	r2, [r4, #0]
 8016710:	f022 0220 	bic.w	r2, r2, #32
 8016714:	6022      	str	r2, [r4, #0]
 8016716:	2210      	movs	r2, #16
 8016718:	e7b7      	b.n	801668a <_printf_i+0xd2>
 801671a:	064d      	lsls	r5, r1, #25
 801671c:	bf48      	it	mi
 801671e:	b29b      	uxthmi	r3, r3
 8016720:	e7ef      	b.n	8016702 <_printf_i+0x14a>
 8016722:	4665      	mov	r5, ip
 8016724:	fbb3 f1f2 	udiv	r1, r3, r2
 8016728:	fb02 3311 	mls	r3, r2, r1, r3
 801672c:	5cc3      	ldrb	r3, [r0, r3]
 801672e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016732:	460b      	mov	r3, r1
 8016734:	2900      	cmp	r1, #0
 8016736:	d1f5      	bne.n	8016724 <_printf_i+0x16c>
 8016738:	e7b9      	b.n	80166ae <_printf_i+0xf6>
 801673a:	6813      	ldr	r3, [r2, #0]
 801673c:	6825      	ldr	r5, [r4, #0]
 801673e:	6961      	ldr	r1, [r4, #20]
 8016740:	1d18      	adds	r0, r3, #4
 8016742:	6010      	str	r0, [r2, #0]
 8016744:	0628      	lsls	r0, r5, #24
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	d501      	bpl.n	801674e <_printf_i+0x196>
 801674a:	6019      	str	r1, [r3, #0]
 801674c:	e002      	b.n	8016754 <_printf_i+0x19c>
 801674e:	066a      	lsls	r2, r5, #25
 8016750:	d5fb      	bpl.n	801674a <_printf_i+0x192>
 8016752:	8019      	strh	r1, [r3, #0]
 8016754:	2300      	movs	r3, #0
 8016756:	6123      	str	r3, [r4, #16]
 8016758:	4665      	mov	r5, ip
 801675a:	e7b9      	b.n	80166d0 <_printf_i+0x118>
 801675c:	6813      	ldr	r3, [r2, #0]
 801675e:	1d19      	adds	r1, r3, #4
 8016760:	6011      	str	r1, [r2, #0]
 8016762:	681d      	ldr	r5, [r3, #0]
 8016764:	6862      	ldr	r2, [r4, #4]
 8016766:	2100      	movs	r1, #0
 8016768:	4628      	mov	r0, r5
 801676a:	f7e9 fd39 	bl	80001e0 <memchr>
 801676e:	b108      	cbz	r0, 8016774 <_printf_i+0x1bc>
 8016770:	1b40      	subs	r0, r0, r5
 8016772:	6060      	str	r0, [r4, #4]
 8016774:	6863      	ldr	r3, [r4, #4]
 8016776:	6123      	str	r3, [r4, #16]
 8016778:	2300      	movs	r3, #0
 801677a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801677e:	e7a7      	b.n	80166d0 <_printf_i+0x118>
 8016780:	6923      	ldr	r3, [r4, #16]
 8016782:	462a      	mov	r2, r5
 8016784:	4639      	mov	r1, r7
 8016786:	4630      	mov	r0, r6
 8016788:	47c0      	blx	r8
 801678a:	3001      	adds	r0, #1
 801678c:	d0aa      	beq.n	80166e4 <_printf_i+0x12c>
 801678e:	6823      	ldr	r3, [r4, #0]
 8016790:	079b      	lsls	r3, r3, #30
 8016792:	d413      	bmi.n	80167bc <_printf_i+0x204>
 8016794:	68e0      	ldr	r0, [r4, #12]
 8016796:	9b03      	ldr	r3, [sp, #12]
 8016798:	4298      	cmp	r0, r3
 801679a:	bfb8      	it	lt
 801679c:	4618      	movlt	r0, r3
 801679e:	e7a3      	b.n	80166e8 <_printf_i+0x130>
 80167a0:	2301      	movs	r3, #1
 80167a2:	464a      	mov	r2, r9
 80167a4:	4639      	mov	r1, r7
 80167a6:	4630      	mov	r0, r6
 80167a8:	47c0      	blx	r8
 80167aa:	3001      	adds	r0, #1
 80167ac:	d09a      	beq.n	80166e4 <_printf_i+0x12c>
 80167ae:	3501      	adds	r5, #1
 80167b0:	68e3      	ldr	r3, [r4, #12]
 80167b2:	9a03      	ldr	r2, [sp, #12]
 80167b4:	1a9b      	subs	r3, r3, r2
 80167b6:	42ab      	cmp	r3, r5
 80167b8:	dcf2      	bgt.n	80167a0 <_printf_i+0x1e8>
 80167ba:	e7eb      	b.n	8016794 <_printf_i+0x1dc>
 80167bc:	2500      	movs	r5, #0
 80167be:	f104 0919 	add.w	r9, r4, #25
 80167c2:	e7f5      	b.n	80167b0 <_printf_i+0x1f8>
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d1ac      	bne.n	8016722 <_printf_i+0x16a>
 80167c8:	7803      	ldrb	r3, [r0, #0]
 80167ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167d2:	e76c      	b.n	80166ae <_printf_i+0xf6>
 80167d4:	0801b55a 	.word	0x0801b55a
 80167d8:	0801b56b 	.word	0x0801b56b

080167dc <_scanf_float>:
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	469a      	mov	sl, r3
 80167e2:	688b      	ldr	r3, [r1, #8]
 80167e4:	4616      	mov	r6, r2
 80167e6:	1e5a      	subs	r2, r3, #1
 80167e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80167ec:	b087      	sub	sp, #28
 80167ee:	bf83      	ittte	hi
 80167f0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80167f4:	189b      	addhi	r3, r3, r2
 80167f6:	9301      	strhi	r3, [sp, #4]
 80167f8:	2300      	movls	r3, #0
 80167fa:	bf86      	itte	hi
 80167fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016800:	608b      	strhi	r3, [r1, #8]
 8016802:	9301      	strls	r3, [sp, #4]
 8016804:	680b      	ldr	r3, [r1, #0]
 8016806:	4688      	mov	r8, r1
 8016808:	f04f 0b00 	mov.w	fp, #0
 801680c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016810:	f848 3b1c 	str.w	r3, [r8], #28
 8016814:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016818:	4607      	mov	r7, r0
 801681a:	460c      	mov	r4, r1
 801681c:	4645      	mov	r5, r8
 801681e:	465a      	mov	r2, fp
 8016820:	46d9      	mov	r9, fp
 8016822:	f8cd b008 	str.w	fp, [sp, #8]
 8016826:	68a1      	ldr	r1, [r4, #8]
 8016828:	b181      	cbz	r1, 801684c <_scanf_float+0x70>
 801682a:	6833      	ldr	r3, [r6, #0]
 801682c:	781b      	ldrb	r3, [r3, #0]
 801682e:	2b49      	cmp	r3, #73	; 0x49
 8016830:	d071      	beq.n	8016916 <_scanf_float+0x13a>
 8016832:	d84d      	bhi.n	80168d0 <_scanf_float+0xf4>
 8016834:	2b39      	cmp	r3, #57	; 0x39
 8016836:	d840      	bhi.n	80168ba <_scanf_float+0xde>
 8016838:	2b31      	cmp	r3, #49	; 0x31
 801683a:	f080 8088 	bcs.w	801694e <_scanf_float+0x172>
 801683e:	2b2d      	cmp	r3, #45	; 0x2d
 8016840:	f000 8090 	beq.w	8016964 <_scanf_float+0x188>
 8016844:	d815      	bhi.n	8016872 <_scanf_float+0x96>
 8016846:	2b2b      	cmp	r3, #43	; 0x2b
 8016848:	f000 808c 	beq.w	8016964 <_scanf_float+0x188>
 801684c:	f1b9 0f00 	cmp.w	r9, #0
 8016850:	d003      	beq.n	801685a <_scanf_float+0x7e>
 8016852:	6823      	ldr	r3, [r4, #0]
 8016854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016858:	6023      	str	r3, [r4, #0]
 801685a:	3a01      	subs	r2, #1
 801685c:	2a01      	cmp	r2, #1
 801685e:	f200 80ea 	bhi.w	8016a36 <_scanf_float+0x25a>
 8016862:	4545      	cmp	r5, r8
 8016864:	f200 80dc 	bhi.w	8016a20 <_scanf_float+0x244>
 8016868:	2601      	movs	r6, #1
 801686a:	4630      	mov	r0, r6
 801686c:	b007      	add	sp, #28
 801686e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016872:	2b2e      	cmp	r3, #46	; 0x2e
 8016874:	f000 809f 	beq.w	80169b6 <_scanf_float+0x1da>
 8016878:	2b30      	cmp	r3, #48	; 0x30
 801687a:	d1e7      	bne.n	801684c <_scanf_float+0x70>
 801687c:	6820      	ldr	r0, [r4, #0]
 801687e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016882:	d064      	beq.n	801694e <_scanf_float+0x172>
 8016884:	9b01      	ldr	r3, [sp, #4]
 8016886:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801688a:	6020      	str	r0, [r4, #0]
 801688c:	f109 0901 	add.w	r9, r9, #1
 8016890:	b11b      	cbz	r3, 801689a <_scanf_float+0xbe>
 8016892:	3b01      	subs	r3, #1
 8016894:	3101      	adds	r1, #1
 8016896:	9301      	str	r3, [sp, #4]
 8016898:	60a1      	str	r1, [r4, #8]
 801689a:	68a3      	ldr	r3, [r4, #8]
 801689c:	3b01      	subs	r3, #1
 801689e:	60a3      	str	r3, [r4, #8]
 80168a0:	6923      	ldr	r3, [r4, #16]
 80168a2:	3301      	adds	r3, #1
 80168a4:	6123      	str	r3, [r4, #16]
 80168a6:	6873      	ldr	r3, [r6, #4]
 80168a8:	3b01      	subs	r3, #1
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	6073      	str	r3, [r6, #4]
 80168ae:	f340 80ac 	ble.w	8016a0a <_scanf_float+0x22e>
 80168b2:	6833      	ldr	r3, [r6, #0]
 80168b4:	3301      	adds	r3, #1
 80168b6:	6033      	str	r3, [r6, #0]
 80168b8:	e7b5      	b.n	8016826 <_scanf_float+0x4a>
 80168ba:	2b45      	cmp	r3, #69	; 0x45
 80168bc:	f000 8085 	beq.w	80169ca <_scanf_float+0x1ee>
 80168c0:	2b46      	cmp	r3, #70	; 0x46
 80168c2:	d06a      	beq.n	801699a <_scanf_float+0x1be>
 80168c4:	2b41      	cmp	r3, #65	; 0x41
 80168c6:	d1c1      	bne.n	801684c <_scanf_float+0x70>
 80168c8:	2a01      	cmp	r2, #1
 80168ca:	d1bf      	bne.n	801684c <_scanf_float+0x70>
 80168cc:	2202      	movs	r2, #2
 80168ce:	e046      	b.n	801695e <_scanf_float+0x182>
 80168d0:	2b65      	cmp	r3, #101	; 0x65
 80168d2:	d07a      	beq.n	80169ca <_scanf_float+0x1ee>
 80168d4:	d818      	bhi.n	8016908 <_scanf_float+0x12c>
 80168d6:	2b54      	cmp	r3, #84	; 0x54
 80168d8:	d066      	beq.n	80169a8 <_scanf_float+0x1cc>
 80168da:	d811      	bhi.n	8016900 <_scanf_float+0x124>
 80168dc:	2b4e      	cmp	r3, #78	; 0x4e
 80168de:	d1b5      	bne.n	801684c <_scanf_float+0x70>
 80168e0:	2a00      	cmp	r2, #0
 80168e2:	d146      	bne.n	8016972 <_scanf_float+0x196>
 80168e4:	f1b9 0f00 	cmp.w	r9, #0
 80168e8:	d145      	bne.n	8016976 <_scanf_float+0x19a>
 80168ea:	6821      	ldr	r1, [r4, #0]
 80168ec:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80168f0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80168f4:	d13f      	bne.n	8016976 <_scanf_float+0x19a>
 80168f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80168fa:	6021      	str	r1, [r4, #0]
 80168fc:	2201      	movs	r2, #1
 80168fe:	e02e      	b.n	801695e <_scanf_float+0x182>
 8016900:	2b59      	cmp	r3, #89	; 0x59
 8016902:	d01e      	beq.n	8016942 <_scanf_float+0x166>
 8016904:	2b61      	cmp	r3, #97	; 0x61
 8016906:	e7de      	b.n	80168c6 <_scanf_float+0xea>
 8016908:	2b6e      	cmp	r3, #110	; 0x6e
 801690a:	d0e9      	beq.n	80168e0 <_scanf_float+0x104>
 801690c:	d815      	bhi.n	801693a <_scanf_float+0x15e>
 801690e:	2b66      	cmp	r3, #102	; 0x66
 8016910:	d043      	beq.n	801699a <_scanf_float+0x1be>
 8016912:	2b69      	cmp	r3, #105	; 0x69
 8016914:	d19a      	bne.n	801684c <_scanf_float+0x70>
 8016916:	f1bb 0f00 	cmp.w	fp, #0
 801691a:	d138      	bne.n	801698e <_scanf_float+0x1b2>
 801691c:	f1b9 0f00 	cmp.w	r9, #0
 8016920:	d197      	bne.n	8016852 <_scanf_float+0x76>
 8016922:	6821      	ldr	r1, [r4, #0]
 8016924:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016928:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801692c:	d195      	bne.n	801685a <_scanf_float+0x7e>
 801692e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016932:	6021      	str	r1, [r4, #0]
 8016934:	f04f 0b01 	mov.w	fp, #1
 8016938:	e011      	b.n	801695e <_scanf_float+0x182>
 801693a:	2b74      	cmp	r3, #116	; 0x74
 801693c:	d034      	beq.n	80169a8 <_scanf_float+0x1cc>
 801693e:	2b79      	cmp	r3, #121	; 0x79
 8016940:	d184      	bne.n	801684c <_scanf_float+0x70>
 8016942:	f1bb 0f07 	cmp.w	fp, #7
 8016946:	d181      	bne.n	801684c <_scanf_float+0x70>
 8016948:	f04f 0b08 	mov.w	fp, #8
 801694c:	e007      	b.n	801695e <_scanf_float+0x182>
 801694e:	eb12 0f0b 	cmn.w	r2, fp
 8016952:	f47f af7b 	bne.w	801684c <_scanf_float+0x70>
 8016956:	6821      	ldr	r1, [r4, #0]
 8016958:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801695c:	6021      	str	r1, [r4, #0]
 801695e:	702b      	strb	r3, [r5, #0]
 8016960:	3501      	adds	r5, #1
 8016962:	e79a      	b.n	801689a <_scanf_float+0xbe>
 8016964:	6821      	ldr	r1, [r4, #0]
 8016966:	0608      	lsls	r0, r1, #24
 8016968:	f57f af70 	bpl.w	801684c <_scanf_float+0x70>
 801696c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016970:	e7f4      	b.n	801695c <_scanf_float+0x180>
 8016972:	2a02      	cmp	r2, #2
 8016974:	d047      	beq.n	8016a06 <_scanf_float+0x22a>
 8016976:	f1bb 0f01 	cmp.w	fp, #1
 801697a:	d003      	beq.n	8016984 <_scanf_float+0x1a8>
 801697c:	f1bb 0f04 	cmp.w	fp, #4
 8016980:	f47f af64 	bne.w	801684c <_scanf_float+0x70>
 8016984:	f10b 0b01 	add.w	fp, fp, #1
 8016988:	fa5f fb8b 	uxtb.w	fp, fp
 801698c:	e7e7      	b.n	801695e <_scanf_float+0x182>
 801698e:	f1bb 0f03 	cmp.w	fp, #3
 8016992:	d0f7      	beq.n	8016984 <_scanf_float+0x1a8>
 8016994:	f1bb 0f05 	cmp.w	fp, #5
 8016998:	e7f2      	b.n	8016980 <_scanf_float+0x1a4>
 801699a:	f1bb 0f02 	cmp.w	fp, #2
 801699e:	f47f af55 	bne.w	801684c <_scanf_float+0x70>
 80169a2:	f04f 0b03 	mov.w	fp, #3
 80169a6:	e7da      	b.n	801695e <_scanf_float+0x182>
 80169a8:	f1bb 0f06 	cmp.w	fp, #6
 80169ac:	f47f af4e 	bne.w	801684c <_scanf_float+0x70>
 80169b0:	f04f 0b07 	mov.w	fp, #7
 80169b4:	e7d3      	b.n	801695e <_scanf_float+0x182>
 80169b6:	6821      	ldr	r1, [r4, #0]
 80169b8:	0588      	lsls	r0, r1, #22
 80169ba:	f57f af47 	bpl.w	801684c <_scanf_float+0x70>
 80169be:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80169c2:	6021      	str	r1, [r4, #0]
 80169c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80169c8:	e7c9      	b.n	801695e <_scanf_float+0x182>
 80169ca:	6821      	ldr	r1, [r4, #0]
 80169cc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80169d0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80169d4:	d006      	beq.n	80169e4 <_scanf_float+0x208>
 80169d6:	0548      	lsls	r0, r1, #21
 80169d8:	f57f af38 	bpl.w	801684c <_scanf_float+0x70>
 80169dc:	f1b9 0f00 	cmp.w	r9, #0
 80169e0:	f43f af3b 	beq.w	801685a <_scanf_float+0x7e>
 80169e4:	0588      	lsls	r0, r1, #22
 80169e6:	bf58      	it	pl
 80169e8:	9802      	ldrpl	r0, [sp, #8]
 80169ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80169ee:	bf58      	it	pl
 80169f0:	eba9 0000 	subpl.w	r0, r9, r0
 80169f4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80169f8:	bf58      	it	pl
 80169fa:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80169fe:	6021      	str	r1, [r4, #0]
 8016a00:	f04f 0900 	mov.w	r9, #0
 8016a04:	e7ab      	b.n	801695e <_scanf_float+0x182>
 8016a06:	2203      	movs	r2, #3
 8016a08:	e7a9      	b.n	801695e <_scanf_float+0x182>
 8016a0a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016a0e:	9205      	str	r2, [sp, #20]
 8016a10:	4631      	mov	r1, r6
 8016a12:	4638      	mov	r0, r7
 8016a14:	4798      	blx	r3
 8016a16:	9a05      	ldr	r2, [sp, #20]
 8016a18:	2800      	cmp	r0, #0
 8016a1a:	f43f af04 	beq.w	8016826 <_scanf_float+0x4a>
 8016a1e:	e715      	b.n	801684c <_scanf_float+0x70>
 8016a20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016a28:	4632      	mov	r2, r6
 8016a2a:	4638      	mov	r0, r7
 8016a2c:	4798      	blx	r3
 8016a2e:	6923      	ldr	r3, [r4, #16]
 8016a30:	3b01      	subs	r3, #1
 8016a32:	6123      	str	r3, [r4, #16]
 8016a34:	e715      	b.n	8016862 <_scanf_float+0x86>
 8016a36:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016a3a:	2b06      	cmp	r3, #6
 8016a3c:	d80a      	bhi.n	8016a54 <_scanf_float+0x278>
 8016a3e:	f1bb 0f02 	cmp.w	fp, #2
 8016a42:	d968      	bls.n	8016b16 <_scanf_float+0x33a>
 8016a44:	f1ab 0b03 	sub.w	fp, fp, #3
 8016a48:	fa5f fb8b 	uxtb.w	fp, fp
 8016a4c:	eba5 0b0b 	sub.w	fp, r5, fp
 8016a50:	455d      	cmp	r5, fp
 8016a52:	d14b      	bne.n	8016aec <_scanf_float+0x310>
 8016a54:	6823      	ldr	r3, [r4, #0]
 8016a56:	05da      	lsls	r2, r3, #23
 8016a58:	d51f      	bpl.n	8016a9a <_scanf_float+0x2be>
 8016a5a:	055b      	lsls	r3, r3, #21
 8016a5c:	d468      	bmi.n	8016b30 <_scanf_float+0x354>
 8016a5e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016a62:	6923      	ldr	r3, [r4, #16]
 8016a64:	2965      	cmp	r1, #101	; 0x65
 8016a66:	f103 33ff 	add.w	r3, r3, #4294967295
 8016a6a:	f105 3bff 	add.w	fp, r5, #4294967295
 8016a6e:	6123      	str	r3, [r4, #16]
 8016a70:	d00d      	beq.n	8016a8e <_scanf_float+0x2b2>
 8016a72:	2945      	cmp	r1, #69	; 0x45
 8016a74:	d00b      	beq.n	8016a8e <_scanf_float+0x2b2>
 8016a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a7a:	4632      	mov	r2, r6
 8016a7c:	4638      	mov	r0, r7
 8016a7e:	4798      	blx	r3
 8016a80:	6923      	ldr	r3, [r4, #16]
 8016a82:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016a86:	3b01      	subs	r3, #1
 8016a88:	f1a5 0b02 	sub.w	fp, r5, #2
 8016a8c:	6123      	str	r3, [r4, #16]
 8016a8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a92:	4632      	mov	r2, r6
 8016a94:	4638      	mov	r0, r7
 8016a96:	4798      	blx	r3
 8016a98:	465d      	mov	r5, fp
 8016a9a:	6826      	ldr	r6, [r4, #0]
 8016a9c:	f016 0610 	ands.w	r6, r6, #16
 8016aa0:	d17a      	bne.n	8016b98 <_scanf_float+0x3bc>
 8016aa2:	702e      	strb	r6, [r5, #0]
 8016aa4:	6823      	ldr	r3, [r4, #0]
 8016aa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016aae:	d142      	bne.n	8016b36 <_scanf_float+0x35a>
 8016ab0:	9b02      	ldr	r3, [sp, #8]
 8016ab2:	eba9 0303 	sub.w	r3, r9, r3
 8016ab6:	425a      	negs	r2, r3
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d149      	bne.n	8016b50 <_scanf_float+0x374>
 8016abc:	2200      	movs	r2, #0
 8016abe:	4641      	mov	r1, r8
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	f000 fee9 	bl	8017898 <_strtod_r>
 8016ac6:	6825      	ldr	r5, [r4, #0]
 8016ac8:	f8da 3000 	ldr.w	r3, [sl]
 8016acc:	f015 0f02 	tst.w	r5, #2
 8016ad0:	f103 0204 	add.w	r2, r3, #4
 8016ad4:	ec59 8b10 	vmov	r8, r9, d0
 8016ad8:	f8ca 2000 	str.w	r2, [sl]
 8016adc:	d043      	beq.n	8016b66 <_scanf_float+0x38a>
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	e9c3 8900 	strd	r8, r9, [r3]
 8016ae4:	68e3      	ldr	r3, [r4, #12]
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	60e3      	str	r3, [r4, #12]
 8016aea:	e6be      	b.n	801686a <_scanf_float+0x8e>
 8016aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016af0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016af4:	4632      	mov	r2, r6
 8016af6:	4638      	mov	r0, r7
 8016af8:	4798      	blx	r3
 8016afa:	6923      	ldr	r3, [r4, #16]
 8016afc:	3b01      	subs	r3, #1
 8016afe:	6123      	str	r3, [r4, #16]
 8016b00:	e7a6      	b.n	8016a50 <_scanf_float+0x274>
 8016b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b06:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b0a:	4632      	mov	r2, r6
 8016b0c:	4638      	mov	r0, r7
 8016b0e:	4798      	blx	r3
 8016b10:	6923      	ldr	r3, [r4, #16]
 8016b12:	3b01      	subs	r3, #1
 8016b14:	6123      	str	r3, [r4, #16]
 8016b16:	4545      	cmp	r5, r8
 8016b18:	d8f3      	bhi.n	8016b02 <_scanf_float+0x326>
 8016b1a:	e6a5      	b.n	8016868 <_scanf_float+0x8c>
 8016b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b24:	4632      	mov	r2, r6
 8016b26:	4638      	mov	r0, r7
 8016b28:	4798      	blx	r3
 8016b2a:	6923      	ldr	r3, [r4, #16]
 8016b2c:	3b01      	subs	r3, #1
 8016b2e:	6123      	str	r3, [r4, #16]
 8016b30:	4545      	cmp	r5, r8
 8016b32:	d8f3      	bhi.n	8016b1c <_scanf_float+0x340>
 8016b34:	e698      	b.n	8016868 <_scanf_float+0x8c>
 8016b36:	9b03      	ldr	r3, [sp, #12]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d0bf      	beq.n	8016abc <_scanf_float+0x2e0>
 8016b3c:	9904      	ldr	r1, [sp, #16]
 8016b3e:	230a      	movs	r3, #10
 8016b40:	4632      	mov	r2, r6
 8016b42:	3101      	adds	r1, #1
 8016b44:	4638      	mov	r0, r7
 8016b46:	f000 ff33 	bl	80179b0 <_strtol_r>
 8016b4a:	9b03      	ldr	r3, [sp, #12]
 8016b4c:	9d04      	ldr	r5, [sp, #16]
 8016b4e:	1ac2      	subs	r2, r0, r3
 8016b50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016b54:	429d      	cmp	r5, r3
 8016b56:	bf28      	it	cs
 8016b58:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016b5c:	490f      	ldr	r1, [pc, #60]	; (8016b9c <_scanf_float+0x3c0>)
 8016b5e:	4628      	mov	r0, r5
 8016b60:	f000 f868 	bl	8016c34 <siprintf>
 8016b64:	e7aa      	b.n	8016abc <_scanf_float+0x2e0>
 8016b66:	f015 0504 	ands.w	r5, r5, #4
 8016b6a:	d1b8      	bne.n	8016ade <_scanf_float+0x302>
 8016b6c:	681f      	ldr	r7, [r3, #0]
 8016b6e:	ee10 2a10 	vmov	r2, s0
 8016b72:	464b      	mov	r3, r9
 8016b74:	ee10 0a10 	vmov	r0, s0
 8016b78:	4649      	mov	r1, r9
 8016b7a:	f7e9 ffd7 	bl	8000b2c <__aeabi_dcmpun>
 8016b7e:	b128      	cbz	r0, 8016b8c <_scanf_float+0x3b0>
 8016b80:	4628      	mov	r0, r5
 8016b82:	f000 f81d 	bl	8016bc0 <nanf>
 8016b86:	ed87 0a00 	vstr	s0, [r7]
 8016b8a:	e7ab      	b.n	8016ae4 <_scanf_float+0x308>
 8016b8c:	4640      	mov	r0, r8
 8016b8e:	4649      	mov	r1, r9
 8016b90:	f7ea f82a 	bl	8000be8 <__aeabi_d2f>
 8016b94:	6038      	str	r0, [r7, #0]
 8016b96:	e7a5      	b.n	8016ae4 <_scanf_float+0x308>
 8016b98:	2600      	movs	r6, #0
 8016b9a:	e666      	b.n	801686a <_scanf_float+0x8e>
 8016b9c:	0801b57c 	.word	0x0801b57c

08016ba0 <_sbrk_r>:
 8016ba0:	b538      	push	{r3, r4, r5, lr}
 8016ba2:	4c06      	ldr	r4, [pc, #24]	; (8016bbc <_sbrk_r+0x1c>)
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	4608      	mov	r0, r1
 8016baa:	6023      	str	r3, [r4, #0]
 8016bac:	f7f4 fad0 	bl	800b150 <_sbrk>
 8016bb0:	1c43      	adds	r3, r0, #1
 8016bb2:	d102      	bne.n	8016bba <_sbrk_r+0x1a>
 8016bb4:	6823      	ldr	r3, [r4, #0]
 8016bb6:	b103      	cbz	r3, 8016bba <_sbrk_r+0x1a>
 8016bb8:	602b      	str	r3, [r5, #0]
 8016bba:	bd38      	pop	{r3, r4, r5, pc}
 8016bbc:	2000fb34 	.word	0x2000fb34

08016bc0 <nanf>:
 8016bc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016bc8 <nanf+0x8>
 8016bc4:	4770      	bx	lr
 8016bc6:	bf00      	nop
 8016bc8:	7fc00000 	.word	0x7fc00000

08016bcc <sniprintf>:
 8016bcc:	b40c      	push	{r2, r3}
 8016bce:	b530      	push	{r4, r5, lr}
 8016bd0:	4b17      	ldr	r3, [pc, #92]	; (8016c30 <sniprintf+0x64>)
 8016bd2:	1e0c      	subs	r4, r1, #0
 8016bd4:	b09d      	sub	sp, #116	; 0x74
 8016bd6:	681d      	ldr	r5, [r3, #0]
 8016bd8:	da08      	bge.n	8016bec <sniprintf+0x20>
 8016bda:	238b      	movs	r3, #139	; 0x8b
 8016bdc:	602b      	str	r3, [r5, #0]
 8016bde:	f04f 30ff 	mov.w	r0, #4294967295
 8016be2:	b01d      	add	sp, #116	; 0x74
 8016be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016be8:	b002      	add	sp, #8
 8016bea:	4770      	bx	lr
 8016bec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016bf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016bf4:	bf14      	ite	ne
 8016bf6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016bfa:	4623      	moveq	r3, r4
 8016bfc:	9304      	str	r3, [sp, #16]
 8016bfe:	9307      	str	r3, [sp, #28]
 8016c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c04:	9002      	str	r0, [sp, #8]
 8016c06:	9006      	str	r0, [sp, #24]
 8016c08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016c0e:	ab21      	add	r3, sp, #132	; 0x84
 8016c10:	a902      	add	r1, sp, #8
 8016c12:	4628      	mov	r0, r5
 8016c14:	9301      	str	r3, [sp, #4]
 8016c16:	f002 fcd9 	bl	80195cc <_svfiprintf_r>
 8016c1a:	1c43      	adds	r3, r0, #1
 8016c1c:	bfbc      	itt	lt
 8016c1e:	238b      	movlt	r3, #139	; 0x8b
 8016c20:	602b      	strlt	r3, [r5, #0]
 8016c22:	2c00      	cmp	r4, #0
 8016c24:	d0dd      	beq.n	8016be2 <sniprintf+0x16>
 8016c26:	9b02      	ldr	r3, [sp, #8]
 8016c28:	2200      	movs	r2, #0
 8016c2a:	701a      	strb	r2, [r3, #0]
 8016c2c:	e7d9      	b.n	8016be2 <sniprintf+0x16>
 8016c2e:	bf00      	nop
 8016c30:	2000220c 	.word	0x2000220c

08016c34 <siprintf>:
 8016c34:	b40e      	push	{r1, r2, r3}
 8016c36:	b500      	push	{lr}
 8016c38:	b09c      	sub	sp, #112	; 0x70
 8016c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8016c3c:	9002      	str	r0, [sp, #8]
 8016c3e:	9006      	str	r0, [sp, #24]
 8016c40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c44:	4809      	ldr	r0, [pc, #36]	; (8016c6c <siprintf+0x38>)
 8016c46:	9107      	str	r1, [sp, #28]
 8016c48:	9104      	str	r1, [sp, #16]
 8016c4a:	4909      	ldr	r1, [pc, #36]	; (8016c70 <siprintf+0x3c>)
 8016c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c50:	9105      	str	r1, [sp, #20]
 8016c52:	6800      	ldr	r0, [r0, #0]
 8016c54:	9301      	str	r3, [sp, #4]
 8016c56:	a902      	add	r1, sp, #8
 8016c58:	f002 fcb8 	bl	80195cc <_svfiprintf_r>
 8016c5c:	9b02      	ldr	r3, [sp, #8]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	701a      	strb	r2, [r3, #0]
 8016c62:	b01c      	add	sp, #112	; 0x70
 8016c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c68:	b003      	add	sp, #12
 8016c6a:	4770      	bx	lr
 8016c6c:	2000220c 	.word	0x2000220c
 8016c70:	ffff0208 	.word	0xffff0208

08016c74 <sulp>:
 8016c74:	b570      	push	{r4, r5, r6, lr}
 8016c76:	4604      	mov	r4, r0
 8016c78:	460d      	mov	r5, r1
 8016c7a:	ec45 4b10 	vmov	d0, r4, r5
 8016c7e:	4616      	mov	r6, r2
 8016c80:	f002 fb08 	bl	8019294 <__ulp>
 8016c84:	ec51 0b10 	vmov	r0, r1, d0
 8016c88:	b17e      	cbz	r6, 8016caa <sulp+0x36>
 8016c8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016c8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	dd09      	ble.n	8016caa <sulp+0x36>
 8016c96:	051b      	lsls	r3, r3, #20
 8016c98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c9c:	2400      	movs	r4, #0
 8016c9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016ca2:	4622      	mov	r2, r4
 8016ca4:	462b      	mov	r3, r5
 8016ca6:	f7e9 fca7 	bl	80005f8 <__aeabi_dmul>
 8016caa:	bd70      	pop	{r4, r5, r6, pc}
 8016cac:	0000      	movs	r0, r0
	...

08016cb0 <_strtod_l>:
 8016cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb4:	461f      	mov	r7, r3
 8016cb6:	b0a1      	sub	sp, #132	; 0x84
 8016cb8:	2300      	movs	r3, #0
 8016cba:	4681      	mov	r9, r0
 8016cbc:	4638      	mov	r0, r7
 8016cbe:	460e      	mov	r6, r1
 8016cc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016cc2:	931c      	str	r3, [sp, #112]	; 0x70
 8016cc4:	f001 fff5 	bl	8018cb2 <__localeconv_l>
 8016cc8:	4680      	mov	r8, r0
 8016cca:	6800      	ldr	r0, [r0, #0]
 8016ccc:	f7e9 fa80 	bl	80001d0 <strlen>
 8016cd0:	f04f 0a00 	mov.w	sl, #0
 8016cd4:	4604      	mov	r4, r0
 8016cd6:	f04f 0b00 	mov.w	fp, #0
 8016cda:	961b      	str	r6, [sp, #108]	; 0x6c
 8016cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cde:	781a      	ldrb	r2, [r3, #0]
 8016ce0:	2a0d      	cmp	r2, #13
 8016ce2:	d832      	bhi.n	8016d4a <_strtod_l+0x9a>
 8016ce4:	2a09      	cmp	r2, #9
 8016ce6:	d236      	bcs.n	8016d56 <_strtod_l+0xa6>
 8016ce8:	2a00      	cmp	r2, #0
 8016cea:	d03e      	beq.n	8016d6a <_strtod_l+0xba>
 8016cec:	2300      	movs	r3, #0
 8016cee:	930d      	str	r3, [sp, #52]	; 0x34
 8016cf0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016cf2:	782b      	ldrb	r3, [r5, #0]
 8016cf4:	2b30      	cmp	r3, #48	; 0x30
 8016cf6:	f040 80ac 	bne.w	8016e52 <_strtod_l+0x1a2>
 8016cfa:	786b      	ldrb	r3, [r5, #1]
 8016cfc:	2b58      	cmp	r3, #88	; 0x58
 8016cfe:	d001      	beq.n	8016d04 <_strtod_l+0x54>
 8016d00:	2b78      	cmp	r3, #120	; 0x78
 8016d02:	d167      	bne.n	8016dd4 <_strtod_l+0x124>
 8016d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d06:	9301      	str	r3, [sp, #4]
 8016d08:	ab1c      	add	r3, sp, #112	; 0x70
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	9702      	str	r7, [sp, #8]
 8016d0e:	ab1d      	add	r3, sp, #116	; 0x74
 8016d10:	4a88      	ldr	r2, [pc, #544]	; (8016f34 <_strtod_l+0x284>)
 8016d12:	a91b      	add	r1, sp, #108	; 0x6c
 8016d14:	4648      	mov	r0, r9
 8016d16:	f001 fcf2 	bl	80186fe <__gethex>
 8016d1a:	f010 0407 	ands.w	r4, r0, #7
 8016d1e:	4606      	mov	r6, r0
 8016d20:	d005      	beq.n	8016d2e <_strtod_l+0x7e>
 8016d22:	2c06      	cmp	r4, #6
 8016d24:	d12b      	bne.n	8016d7e <_strtod_l+0xce>
 8016d26:	3501      	adds	r5, #1
 8016d28:	2300      	movs	r3, #0
 8016d2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8016d2c:	930d      	str	r3, [sp, #52]	; 0x34
 8016d2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	f040 859a 	bne.w	801786a <_strtod_l+0xbba>
 8016d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d38:	b1e3      	cbz	r3, 8016d74 <_strtod_l+0xc4>
 8016d3a:	4652      	mov	r2, sl
 8016d3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016d40:	ec43 2b10 	vmov	d0, r2, r3
 8016d44:	b021      	add	sp, #132	; 0x84
 8016d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d4a:	2a2b      	cmp	r2, #43	; 0x2b
 8016d4c:	d015      	beq.n	8016d7a <_strtod_l+0xca>
 8016d4e:	2a2d      	cmp	r2, #45	; 0x2d
 8016d50:	d004      	beq.n	8016d5c <_strtod_l+0xac>
 8016d52:	2a20      	cmp	r2, #32
 8016d54:	d1ca      	bne.n	8016cec <_strtod_l+0x3c>
 8016d56:	3301      	adds	r3, #1
 8016d58:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d5a:	e7bf      	b.n	8016cdc <_strtod_l+0x2c>
 8016d5c:	2201      	movs	r2, #1
 8016d5e:	920d      	str	r2, [sp, #52]	; 0x34
 8016d60:	1c5a      	adds	r2, r3, #1
 8016d62:	921b      	str	r2, [sp, #108]	; 0x6c
 8016d64:	785b      	ldrb	r3, [r3, #1]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d1c2      	bne.n	8016cf0 <_strtod_l+0x40>
 8016d6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	f040 8579 	bne.w	8017866 <_strtod_l+0xbb6>
 8016d74:	4652      	mov	r2, sl
 8016d76:	465b      	mov	r3, fp
 8016d78:	e7e2      	b.n	8016d40 <_strtod_l+0x90>
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	e7ef      	b.n	8016d5e <_strtod_l+0xae>
 8016d7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d80:	b13a      	cbz	r2, 8016d92 <_strtod_l+0xe2>
 8016d82:	2135      	movs	r1, #53	; 0x35
 8016d84:	a81e      	add	r0, sp, #120	; 0x78
 8016d86:	f002 fb7d 	bl	8019484 <__copybits>
 8016d8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d8c:	4648      	mov	r0, r9
 8016d8e:	f001 ffe9 	bl	8018d64 <_Bfree>
 8016d92:	3c01      	subs	r4, #1
 8016d94:	2c04      	cmp	r4, #4
 8016d96:	d806      	bhi.n	8016da6 <_strtod_l+0xf6>
 8016d98:	e8df f004 	tbb	[pc, r4]
 8016d9c:	1714030a 	.word	0x1714030a
 8016da0:	0a          	.byte	0x0a
 8016da1:	00          	.byte	0x00
 8016da2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016da6:	0730      	lsls	r0, r6, #28
 8016da8:	d5c1      	bpl.n	8016d2e <_strtod_l+0x7e>
 8016daa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016dae:	e7be      	b.n	8016d2e <_strtod_l+0x7e>
 8016db0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016db4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016db6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016dba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016dbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016dc2:	e7f0      	b.n	8016da6 <_strtod_l+0xf6>
 8016dc4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016f38 <_strtod_l+0x288>
 8016dc8:	e7ed      	b.n	8016da6 <_strtod_l+0xf6>
 8016dca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016dce:	f04f 3aff 	mov.w	sl, #4294967295
 8016dd2:	e7e8      	b.n	8016da6 <_strtod_l+0xf6>
 8016dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dd6:	1c5a      	adds	r2, r3, #1
 8016dd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8016dda:	785b      	ldrb	r3, [r3, #1]
 8016ddc:	2b30      	cmp	r3, #48	; 0x30
 8016dde:	d0f9      	beq.n	8016dd4 <_strtod_l+0x124>
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d0a4      	beq.n	8016d2e <_strtod_l+0x7e>
 8016de4:	2301      	movs	r3, #1
 8016de6:	2500      	movs	r5, #0
 8016de8:	9306      	str	r3, [sp, #24]
 8016dea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dec:	9308      	str	r3, [sp, #32]
 8016dee:	9507      	str	r5, [sp, #28]
 8016df0:	9505      	str	r5, [sp, #20]
 8016df2:	220a      	movs	r2, #10
 8016df4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016df6:	7807      	ldrb	r7, [r0, #0]
 8016df8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016dfc:	b2d9      	uxtb	r1, r3
 8016dfe:	2909      	cmp	r1, #9
 8016e00:	d929      	bls.n	8016e56 <_strtod_l+0x1a6>
 8016e02:	4622      	mov	r2, r4
 8016e04:	f8d8 1000 	ldr.w	r1, [r8]
 8016e08:	f002 fcd8 	bl	80197bc <strncmp>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	d031      	beq.n	8016e74 <_strtod_l+0x1c4>
 8016e10:	2000      	movs	r0, #0
 8016e12:	9c05      	ldr	r4, [sp, #20]
 8016e14:	9004      	str	r0, [sp, #16]
 8016e16:	463b      	mov	r3, r7
 8016e18:	4602      	mov	r2, r0
 8016e1a:	2b65      	cmp	r3, #101	; 0x65
 8016e1c:	d001      	beq.n	8016e22 <_strtod_l+0x172>
 8016e1e:	2b45      	cmp	r3, #69	; 0x45
 8016e20:	d114      	bne.n	8016e4c <_strtod_l+0x19c>
 8016e22:	b924      	cbnz	r4, 8016e2e <_strtod_l+0x17e>
 8016e24:	b910      	cbnz	r0, 8016e2c <_strtod_l+0x17c>
 8016e26:	9b06      	ldr	r3, [sp, #24]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d09e      	beq.n	8016d6a <_strtod_l+0xba>
 8016e2c:	2400      	movs	r4, #0
 8016e2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016e30:	1c73      	adds	r3, r6, #1
 8016e32:	931b      	str	r3, [sp, #108]	; 0x6c
 8016e34:	7873      	ldrb	r3, [r6, #1]
 8016e36:	2b2b      	cmp	r3, #43	; 0x2b
 8016e38:	d078      	beq.n	8016f2c <_strtod_l+0x27c>
 8016e3a:	2b2d      	cmp	r3, #45	; 0x2d
 8016e3c:	d070      	beq.n	8016f20 <_strtod_l+0x270>
 8016e3e:	f04f 0c00 	mov.w	ip, #0
 8016e42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016e46:	2f09      	cmp	r7, #9
 8016e48:	d97c      	bls.n	8016f44 <_strtod_l+0x294>
 8016e4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016e4c:	f04f 0e00 	mov.w	lr, #0
 8016e50:	e09a      	b.n	8016f88 <_strtod_l+0x2d8>
 8016e52:	2300      	movs	r3, #0
 8016e54:	e7c7      	b.n	8016de6 <_strtod_l+0x136>
 8016e56:	9905      	ldr	r1, [sp, #20]
 8016e58:	2908      	cmp	r1, #8
 8016e5a:	bfdd      	ittte	le
 8016e5c:	9907      	ldrle	r1, [sp, #28]
 8016e5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e62:	9307      	strle	r3, [sp, #28]
 8016e64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016e68:	9b05      	ldr	r3, [sp, #20]
 8016e6a:	3001      	adds	r0, #1
 8016e6c:	3301      	adds	r3, #1
 8016e6e:	9305      	str	r3, [sp, #20]
 8016e70:	901b      	str	r0, [sp, #108]	; 0x6c
 8016e72:	e7bf      	b.n	8016df4 <_strtod_l+0x144>
 8016e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e76:	191a      	adds	r2, r3, r4
 8016e78:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e7a:	9a05      	ldr	r2, [sp, #20]
 8016e7c:	5d1b      	ldrb	r3, [r3, r4]
 8016e7e:	2a00      	cmp	r2, #0
 8016e80:	d037      	beq.n	8016ef2 <_strtod_l+0x242>
 8016e82:	9c05      	ldr	r4, [sp, #20]
 8016e84:	4602      	mov	r2, r0
 8016e86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016e8a:	2909      	cmp	r1, #9
 8016e8c:	d913      	bls.n	8016eb6 <_strtod_l+0x206>
 8016e8e:	2101      	movs	r1, #1
 8016e90:	9104      	str	r1, [sp, #16]
 8016e92:	e7c2      	b.n	8016e1a <_strtod_l+0x16a>
 8016e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e96:	1c5a      	adds	r2, r3, #1
 8016e98:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e9a:	785b      	ldrb	r3, [r3, #1]
 8016e9c:	3001      	adds	r0, #1
 8016e9e:	2b30      	cmp	r3, #48	; 0x30
 8016ea0:	d0f8      	beq.n	8016e94 <_strtod_l+0x1e4>
 8016ea2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016ea6:	2a08      	cmp	r2, #8
 8016ea8:	f200 84e4 	bhi.w	8017874 <_strtod_l+0xbc4>
 8016eac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016eae:	9208      	str	r2, [sp, #32]
 8016eb0:	4602      	mov	r2, r0
 8016eb2:	2000      	movs	r0, #0
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016eba:	f100 0101 	add.w	r1, r0, #1
 8016ebe:	d012      	beq.n	8016ee6 <_strtod_l+0x236>
 8016ec0:	440a      	add	r2, r1
 8016ec2:	eb00 0c04 	add.w	ip, r0, r4
 8016ec6:	4621      	mov	r1, r4
 8016ec8:	270a      	movs	r7, #10
 8016eca:	458c      	cmp	ip, r1
 8016ecc:	d113      	bne.n	8016ef6 <_strtod_l+0x246>
 8016ece:	1821      	adds	r1, r4, r0
 8016ed0:	2908      	cmp	r1, #8
 8016ed2:	f104 0401 	add.w	r4, r4, #1
 8016ed6:	4404      	add	r4, r0
 8016ed8:	dc19      	bgt.n	8016f0e <_strtod_l+0x25e>
 8016eda:	9b07      	ldr	r3, [sp, #28]
 8016edc:	210a      	movs	r1, #10
 8016ede:	fb01 e303 	mla	r3, r1, r3, lr
 8016ee2:	9307      	str	r3, [sp, #28]
 8016ee4:	2100      	movs	r1, #0
 8016ee6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ee8:	1c58      	adds	r0, r3, #1
 8016eea:	901b      	str	r0, [sp, #108]	; 0x6c
 8016eec:	785b      	ldrb	r3, [r3, #1]
 8016eee:	4608      	mov	r0, r1
 8016ef0:	e7c9      	b.n	8016e86 <_strtod_l+0x1d6>
 8016ef2:	9805      	ldr	r0, [sp, #20]
 8016ef4:	e7d3      	b.n	8016e9e <_strtod_l+0x1ee>
 8016ef6:	2908      	cmp	r1, #8
 8016ef8:	f101 0101 	add.w	r1, r1, #1
 8016efc:	dc03      	bgt.n	8016f06 <_strtod_l+0x256>
 8016efe:	9b07      	ldr	r3, [sp, #28]
 8016f00:	437b      	muls	r3, r7
 8016f02:	9307      	str	r3, [sp, #28]
 8016f04:	e7e1      	b.n	8016eca <_strtod_l+0x21a>
 8016f06:	2910      	cmp	r1, #16
 8016f08:	bfd8      	it	le
 8016f0a:	437d      	mulle	r5, r7
 8016f0c:	e7dd      	b.n	8016eca <_strtod_l+0x21a>
 8016f0e:	2c10      	cmp	r4, #16
 8016f10:	bfdc      	itt	le
 8016f12:	210a      	movle	r1, #10
 8016f14:	fb01 e505 	mlale	r5, r1, r5, lr
 8016f18:	e7e4      	b.n	8016ee4 <_strtod_l+0x234>
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	9304      	str	r3, [sp, #16]
 8016f1e:	e781      	b.n	8016e24 <_strtod_l+0x174>
 8016f20:	f04f 0c01 	mov.w	ip, #1
 8016f24:	1cb3      	adds	r3, r6, #2
 8016f26:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f28:	78b3      	ldrb	r3, [r6, #2]
 8016f2a:	e78a      	b.n	8016e42 <_strtod_l+0x192>
 8016f2c:	f04f 0c00 	mov.w	ip, #0
 8016f30:	e7f8      	b.n	8016f24 <_strtod_l+0x274>
 8016f32:	bf00      	nop
 8016f34:	0801b584 	.word	0x0801b584
 8016f38:	7ff00000 	.word	0x7ff00000
 8016f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f3e:	1c5f      	adds	r7, r3, #1
 8016f40:	971b      	str	r7, [sp, #108]	; 0x6c
 8016f42:	785b      	ldrb	r3, [r3, #1]
 8016f44:	2b30      	cmp	r3, #48	; 0x30
 8016f46:	d0f9      	beq.n	8016f3c <_strtod_l+0x28c>
 8016f48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016f4c:	2f08      	cmp	r7, #8
 8016f4e:	f63f af7d 	bhi.w	8016e4c <_strtod_l+0x19c>
 8016f52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f58:	930a      	str	r3, [sp, #40]	; 0x28
 8016f5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f5c:	1c5f      	adds	r7, r3, #1
 8016f5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016f60:	785b      	ldrb	r3, [r3, #1]
 8016f62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016f66:	f1b8 0f09 	cmp.w	r8, #9
 8016f6a:	d937      	bls.n	8016fdc <_strtod_l+0x32c>
 8016f6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016f6e:	1a7f      	subs	r7, r7, r1
 8016f70:	2f08      	cmp	r7, #8
 8016f72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016f76:	dc37      	bgt.n	8016fe8 <_strtod_l+0x338>
 8016f78:	45be      	cmp	lr, r7
 8016f7a:	bfa8      	it	ge
 8016f7c:	46be      	movge	lr, r7
 8016f7e:	f1bc 0f00 	cmp.w	ip, #0
 8016f82:	d001      	beq.n	8016f88 <_strtod_l+0x2d8>
 8016f84:	f1ce 0e00 	rsb	lr, lr, #0
 8016f88:	2c00      	cmp	r4, #0
 8016f8a:	d151      	bne.n	8017030 <_strtod_l+0x380>
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	f47f aece 	bne.w	8016d2e <_strtod_l+0x7e>
 8016f92:	9a06      	ldr	r2, [sp, #24]
 8016f94:	2a00      	cmp	r2, #0
 8016f96:	f47f aeca 	bne.w	8016d2e <_strtod_l+0x7e>
 8016f9a:	9a04      	ldr	r2, [sp, #16]
 8016f9c:	2a00      	cmp	r2, #0
 8016f9e:	f47f aee4 	bne.w	8016d6a <_strtod_l+0xba>
 8016fa2:	2b4e      	cmp	r3, #78	; 0x4e
 8016fa4:	d027      	beq.n	8016ff6 <_strtod_l+0x346>
 8016fa6:	dc21      	bgt.n	8016fec <_strtod_l+0x33c>
 8016fa8:	2b49      	cmp	r3, #73	; 0x49
 8016faa:	f47f aede 	bne.w	8016d6a <_strtod_l+0xba>
 8016fae:	49a0      	ldr	r1, [pc, #640]	; (8017230 <_strtod_l+0x580>)
 8016fb0:	a81b      	add	r0, sp, #108	; 0x6c
 8016fb2:	f001 fdd7 	bl	8018b64 <__match>
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	f43f aed7 	beq.w	8016d6a <_strtod_l+0xba>
 8016fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fbe:	499d      	ldr	r1, [pc, #628]	; (8017234 <_strtod_l+0x584>)
 8016fc0:	3b01      	subs	r3, #1
 8016fc2:	a81b      	add	r0, sp, #108	; 0x6c
 8016fc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8016fc6:	f001 fdcd 	bl	8018b64 <__match>
 8016fca:	b910      	cbnz	r0, 8016fd2 <_strtod_l+0x322>
 8016fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fce:	3301      	adds	r3, #1
 8016fd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016fd2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017248 <_strtod_l+0x598>
 8016fd6:	f04f 0a00 	mov.w	sl, #0
 8016fda:	e6a8      	b.n	8016d2e <_strtod_l+0x7e>
 8016fdc:	210a      	movs	r1, #10
 8016fde:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016fe2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016fe6:	e7b8      	b.n	8016f5a <_strtod_l+0x2aa>
 8016fe8:	46be      	mov	lr, r7
 8016fea:	e7c8      	b.n	8016f7e <_strtod_l+0x2ce>
 8016fec:	2b69      	cmp	r3, #105	; 0x69
 8016fee:	d0de      	beq.n	8016fae <_strtod_l+0x2fe>
 8016ff0:	2b6e      	cmp	r3, #110	; 0x6e
 8016ff2:	f47f aeba 	bne.w	8016d6a <_strtod_l+0xba>
 8016ff6:	4990      	ldr	r1, [pc, #576]	; (8017238 <_strtod_l+0x588>)
 8016ff8:	a81b      	add	r0, sp, #108	; 0x6c
 8016ffa:	f001 fdb3 	bl	8018b64 <__match>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	f43f aeb3 	beq.w	8016d6a <_strtod_l+0xba>
 8017004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017006:	781b      	ldrb	r3, [r3, #0]
 8017008:	2b28      	cmp	r3, #40	; 0x28
 801700a:	d10e      	bne.n	801702a <_strtod_l+0x37a>
 801700c:	aa1e      	add	r2, sp, #120	; 0x78
 801700e:	498b      	ldr	r1, [pc, #556]	; (801723c <_strtod_l+0x58c>)
 8017010:	a81b      	add	r0, sp, #108	; 0x6c
 8017012:	f001 fdbb 	bl	8018b8c <__hexnan>
 8017016:	2805      	cmp	r0, #5
 8017018:	d107      	bne.n	801702a <_strtod_l+0x37a>
 801701a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801701c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017020:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017024:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017028:	e681      	b.n	8016d2e <_strtod_l+0x7e>
 801702a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017250 <_strtod_l+0x5a0>
 801702e:	e7d2      	b.n	8016fd6 <_strtod_l+0x326>
 8017030:	ebae 0302 	sub.w	r3, lr, r2
 8017034:	9306      	str	r3, [sp, #24]
 8017036:	9b05      	ldr	r3, [sp, #20]
 8017038:	9807      	ldr	r0, [sp, #28]
 801703a:	2b00      	cmp	r3, #0
 801703c:	bf08      	it	eq
 801703e:	4623      	moveq	r3, r4
 8017040:	2c10      	cmp	r4, #16
 8017042:	9305      	str	r3, [sp, #20]
 8017044:	46a0      	mov	r8, r4
 8017046:	bfa8      	it	ge
 8017048:	f04f 0810 	movge.w	r8, #16
 801704c:	f7e9 fa5a 	bl	8000504 <__aeabi_ui2d>
 8017050:	2c09      	cmp	r4, #9
 8017052:	4682      	mov	sl, r0
 8017054:	468b      	mov	fp, r1
 8017056:	dc13      	bgt.n	8017080 <_strtod_l+0x3d0>
 8017058:	9b06      	ldr	r3, [sp, #24]
 801705a:	2b00      	cmp	r3, #0
 801705c:	f43f ae67 	beq.w	8016d2e <_strtod_l+0x7e>
 8017060:	9b06      	ldr	r3, [sp, #24]
 8017062:	dd7a      	ble.n	801715a <_strtod_l+0x4aa>
 8017064:	2b16      	cmp	r3, #22
 8017066:	dc61      	bgt.n	801712c <_strtod_l+0x47c>
 8017068:	4a75      	ldr	r2, [pc, #468]	; (8017240 <_strtod_l+0x590>)
 801706a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801706e:	e9de 0100 	ldrd	r0, r1, [lr]
 8017072:	4652      	mov	r2, sl
 8017074:	465b      	mov	r3, fp
 8017076:	f7e9 fabf 	bl	80005f8 <__aeabi_dmul>
 801707a:	4682      	mov	sl, r0
 801707c:	468b      	mov	fp, r1
 801707e:	e656      	b.n	8016d2e <_strtod_l+0x7e>
 8017080:	4b6f      	ldr	r3, [pc, #444]	; (8017240 <_strtod_l+0x590>)
 8017082:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017086:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801708a:	f7e9 fab5 	bl	80005f8 <__aeabi_dmul>
 801708e:	4606      	mov	r6, r0
 8017090:	4628      	mov	r0, r5
 8017092:	460f      	mov	r7, r1
 8017094:	f7e9 fa36 	bl	8000504 <__aeabi_ui2d>
 8017098:	4602      	mov	r2, r0
 801709a:	460b      	mov	r3, r1
 801709c:	4630      	mov	r0, r6
 801709e:	4639      	mov	r1, r7
 80170a0:	f7e9 f8f4 	bl	800028c <__adddf3>
 80170a4:	2c0f      	cmp	r4, #15
 80170a6:	4682      	mov	sl, r0
 80170a8:	468b      	mov	fp, r1
 80170aa:	ddd5      	ble.n	8017058 <_strtod_l+0x3a8>
 80170ac:	9b06      	ldr	r3, [sp, #24]
 80170ae:	eba4 0808 	sub.w	r8, r4, r8
 80170b2:	4498      	add	r8, r3
 80170b4:	f1b8 0f00 	cmp.w	r8, #0
 80170b8:	f340 8096 	ble.w	80171e8 <_strtod_l+0x538>
 80170bc:	f018 030f 	ands.w	r3, r8, #15
 80170c0:	d00a      	beq.n	80170d8 <_strtod_l+0x428>
 80170c2:	495f      	ldr	r1, [pc, #380]	; (8017240 <_strtod_l+0x590>)
 80170c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80170c8:	4652      	mov	r2, sl
 80170ca:	465b      	mov	r3, fp
 80170cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170d0:	f7e9 fa92 	bl	80005f8 <__aeabi_dmul>
 80170d4:	4682      	mov	sl, r0
 80170d6:	468b      	mov	fp, r1
 80170d8:	f038 080f 	bics.w	r8, r8, #15
 80170dc:	d073      	beq.n	80171c6 <_strtod_l+0x516>
 80170de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80170e2:	dd47      	ble.n	8017174 <_strtod_l+0x4c4>
 80170e4:	2400      	movs	r4, #0
 80170e6:	46a0      	mov	r8, r4
 80170e8:	9407      	str	r4, [sp, #28]
 80170ea:	9405      	str	r4, [sp, #20]
 80170ec:	2322      	movs	r3, #34	; 0x22
 80170ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017248 <_strtod_l+0x598>
 80170f2:	f8c9 3000 	str.w	r3, [r9]
 80170f6:	f04f 0a00 	mov.w	sl, #0
 80170fa:	9b07      	ldr	r3, [sp, #28]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	f43f ae16 	beq.w	8016d2e <_strtod_l+0x7e>
 8017102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017104:	4648      	mov	r0, r9
 8017106:	f001 fe2d 	bl	8018d64 <_Bfree>
 801710a:	9905      	ldr	r1, [sp, #20]
 801710c:	4648      	mov	r0, r9
 801710e:	f001 fe29 	bl	8018d64 <_Bfree>
 8017112:	4641      	mov	r1, r8
 8017114:	4648      	mov	r0, r9
 8017116:	f001 fe25 	bl	8018d64 <_Bfree>
 801711a:	9907      	ldr	r1, [sp, #28]
 801711c:	4648      	mov	r0, r9
 801711e:	f001 fe21 	bl	8018d64 <_Bfree>
 8017122:	4621      	mov	r1, r4
 8017124:	4648      	mov	r0, r9
 8017126:	f001 fe1d 	bl	8018d64 <_Bfree>
 801712a:	e600      	b.n	8016d2e <_strtod_l+0x7e>
 801712c:	9a06      	ldr	r2, [sp, #24]
 801712e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8017132:	4293      	cmp	r3, r2
 8017134:	dbba      	blt.n	80170ac <_strtod_l+0x3fc>
 8017136:	4d42      	ldr	r5, [pc, #264]	; (8017240 <_strtod_l+0x590>)
 8017138:	f1c4 040f 	rsb	r4, r4, #15
 801713c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017140:	4652      	mov	r2, sl
 8017142:	465b      	mov	r3, fp
 8017144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017148:	f7e9 fa56 	bl	80005f8 <__aeabi_dmul>
 801714c:	9b06      	ldr	r3, [sp, #24]
 801714e:	1b1c      	subs	r4, r3, r4
 8017150:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8017154:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017158:	e78d      	b.n	8017076 <_strtod_l+0x3c6>
 801715a:	f113 0f16 	cmn.w	r3, #22
 801715e:	dba5      	blt.n	80170ac <_strtod_l+0x3fc>
 8017160:	4a37      	ldr	r2, [pc, #220]	; (8017240 <_strtod_l+0x590>)
 8017162:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8017166:	e9d2 2300 	ldrd	r2, r3, [r2]
 801716a:	4650      	mov	r0, sl
 801716c:	4659      	mov	r1, fp
 801716e:	f7e9 fb6d 	bl	800084c <__aeabi_ddiv>
 8017172:	e782      	b.n	801707a <_strtod_l+0x3ca>
 8017174:	2300      	movs	r3, #0
 8017176:	4e33      	ldr	r6, [pc, #204]	; (8017244 <_strtod_l+0x594>)
 8017178:	ea4f 1828 	mov.w	r8, r8, asr #4
 801717c:	4650      	mov	r0, sl
 801717e:	4659      	mov	r1, fp
 8017180:	461d      	mov	r5, r3
 8017182:	f1b8 0f01 	cmp.w	r8, #1
 8017186:	dc21      	bgt.n	80171cc <_strtod_l+0x51c>
 8017188:	b10b      	cbz	r3, 801718e <_strtod_l+0x4de>
 801718a:	4682      	mov	sl, r0
 801718c:	468b      	mov	fp, r1
 801718e:	4b2d      	ldr	r3, [pc, #180]	; (8017244 <_strtod_l+0x594>)
 8017190:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017194:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017198:	4652      	mov	r2, sl
 801719a:	465b      	mov	r3, fp
 801719c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80171a0:	f7e9 fa2a 	bl	80005f8 <__aeabi_dmul>
 80171a4:	4b28      	ldr	r3, [pc, #160]	; (8017248 <_strtod_l+0x598>)
 80171a6:	460a      	mov	r2, r1
 80171a8:	400b      	ands	r3, r1
 80171aa:	4928      	ldr	r1, [pc, #160]	; (801724c <_strtod_l+0x59c>)
 80171ac:	428b      	cmp	r3, r1
 80171ae:	4682      	mov	sl, r0
 80171b0:	d898      	bhi.n	80170e4 <_strtod_l+0x434>
 80171b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80171b6:	428b      	cmp	r3, r1
 80171b8:	bf86      	itte	hi
 80171ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017254 <_strtod_l+0x5a4>
 80171be:	f04f 3aff 	movhi.w	sl, #4294967295
 80171c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80171c6:	2300      	movs	r3, #0
 80171c8:	9304      	str	r3, [sp, #16]
 80171ca:	e077      	b.n	80172bc <_strtod_l+0x60c>
 80171cc:	f018 0f01 	tst.w	r8, #1
 80171d0:	d006      	beq.n	80171e0 <_strtod_l+0x530>
 80171d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80171d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171da:	f7e9 fa0d 	bl	80005f8 <__aeabi_dmul>
 80171de:	2301      	movs	r3, #1
 80171e0:	3501      	adds	r5, #1
 80171e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80171e6:	e7cc      	b.n	8017182 <_strtod_l+0x4d2>
 80171e8:	d0ed      	beq.n	80171c6 <_strtod_l+0x516>
 80171ea:	f1c8 0800 	rsb	r8, r8, #0
 80171ee:	f018 020f 	ands.w	r2, r8, #15
 80171f2:	d00a      	beq.n	801720a <_strtod_l+0x55a>
 80171f4:	4b12      	ldr	r3, [pc, #72]	; (8017240 <_strtod_l+0x590>)
 80171f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171fa:	4650      	mov	r0, sl
 80171fc:	4659      	mov	r1, fp
 80171fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017202:	f7e9 fb23 	bl	800084c <__aeabi_ddiv>
 8017206:	4682      	mov	sl, r0
 8017208:	468b      	mov	fp, r1
 801720a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801720e:	d0da      	beq.n	80171c6 <_strtod_l+0x516>
 8017210:	f1b8 0f1f 	cmp.w	r8, #31
 8017214:	dd20      	ble.n	8017258 <_strtod_l+0x5a8>
 8017216:	2400      	movs	r4, #0
 8017218:	46a0      	mov	r8, r4
 801721a:	9407      	str	r4, [sp, #28]
 801721c:	9405      	str	r4, [sp, #20]
 801721e:	2322      	movs	r3, #34	; 0x22
 8017220:	f04f 0a00 	mov.w	sl, #0
 8017224:	f04f 0b00 	mov.w	fp, #0
 8017228:	f8c9 3000 	str.w	r3, [r9]
 801722c:	e765      	b.n	80170fa <_strtod_l+0x44a>
 801722e:	bf00      	nop
 8017230:	0801b54d 	.word	0x0801b54d
 8017234:	0801b5db 	.word	0x0801b5db
 8017238:	0801b555 	.word	0x0801b555
 801723c:	0801b598 	.word	0x0801b598
 8017240:	0801b618 	.word	0x0801b618
 8017244:	0801b5f0 	.word	0x0801b5f0
 8017248:	7ff00000 	.word	0x7ff00000
 801724c:	7ca00000 	.word	0x7ca00000
 8017250:	fff80000 	.word	0xfff80000
 8017254:	7fefffff 	.word	0x7fefffff
 8017258:	f018 0310 	ands.w	r3, r8, #16
 801725c:	bf18      	it	ne
 801725e:	236a      	movne	r3, #106	; 0x6a
 8017260:	4da0      	ldr	r5, [pc, #640]	; (80174e4 <_strtod_l+0x834>)
 8017262:	9304      	str	r3, [sp, #16]
 8017264:	4650      	mov	r0, sl
 8017266:	4659      	mov	r1, fp
 8017268:	2300      	movs	r3, #0
 801726a:	f1b8 0f00 	cmp.w	r8, #0
 801726e:	f300 810a 	bgt.w	8017486 <_strtod_l+0x7d6>
 8017272:	b10b      	cbz	r3, 8017278 <_strtod_l+0x5c8>
 8017274:	4682      	mov	sl, r0
 8017276:	468b      	mov	fp, r1
 8017278:	9b04      	ldr	r3, [sp, #16]
 801727a:	b1bb      	cbz	r3, 80172ac <_strtod_l+0x5fc>
 801727c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017280:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017284:	2b00      	cmp	r3, #0
 8017286:	4659      	mov	r1, fp
 8017288:	dd10      	ble.n	80172ac <_strtod_l+0x5fc>
 801728a:	2b1f      	cmp	r3, #31
 801728c:	f340 8107 	ble.w	801749e <_strtod_l+0x7ee>
 8017290:	2b34      	cmp	r3, #52	; 0x34
 8017292:	bfde      	ittt	le
 8017294:	3b20      	suble	r3, #32
 8017296:	f04f 32ff 	movle.w	r2, #4294967295
 801729a:	fa02 f303 	lslle.w	r3, r2, r3
 801729e:	f04f 0a00 	mov.w	sl, #0
 80172a2:	bfcc      	ite	gt
 80172a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80172a8:	ea03 0b01 	andle.w	fp, r3, r1
 80172ac:	2200      	movs	r2, #0
 80172ae:	2300      	movs	r3, #0
 80172b0:	4650      	mov	r0, sl
 80172b2:	4659      	mov	r1, fp
 80172b4:	f7e9 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80172b8:	2800      	cmp	r0, #0
 80172ba:	d1ac      	bne.n	8017216 <_strtod_l+0x566>
 80172bc:	9b07      	ldr	r3, [sp, #28]
 80172be:	9300      	str	r3, [sp, #0]
 80172c0:	9a05      	ldr	r2, [sp, #20]
 80172c2:	9908      	ldr	r1, [sp, #32]
 80172c4:	4623      	mov	r3, r4
 80172c6:	4648      	mov	r0, r9
 80172c8:	f001 fd9e 	bl	8018e08 <__s2b>
 80172cc:	9007      	str	r0, [sp, #28]
 80172ce:	2800      	cmp	r0, #0
 80172d0:	f43f af08 	beq.w	80170e4 <_strtod_l+0x434>
 80172d4:	9a06      	ldr	r2, [sp, #24]
 80172d6:	9b06      	ldr	r3, [sp, #24]
 80172d8:	2a00      	cmp	r2, #0
 80172da:	f1c3 0300 	rsb	r3, r3, #0
 80172de:	bfa8      	it	ge
 80172e0:	2300      	movge	r3, #0
 80172e2:	930e      	str	r3, [sp, #56]	; 0x38
 80172e4:	2400      	movs	r4, #0
 80172e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80172ea:	9316      	str	r3, [sp, #88]	; 0x58
 80172ec:	46a0      	mov	r8, r4
 80172ee:	9b07      	ldr	r3, [sp, #28]
 80172f0:	4648      	mov	r0, r9
 80172f2:	6859      	ldr	r1, [r3, #4]
 80172f4:	f001 fd02 	bl	8018cfc <_Balloc>
 80172f8:	9005      	str	r0, [sp, #20]
 80172fa:	2800      	cmp	r0, #0
 80172fc:	f43f aef6 	beq.w	80170ec <_strtod_l+0x43c>
 8017300:	9b07      	ldr	r3, [sp, #28]
 8017302:	691a      	ldr	r2, [r3, #16]
 8017304:	3202      	adds	r2, #2
 8017306:	f103 010c 	add.w	r1, r3, #12
 801730a:	0092      	lsls	r2, r2, #2
 801730c:	300c      	adds	r0, #12
 801730e:	f7fe fd35 	bl	8015d7c <memcpy>
 8017312:	aa1e      	add	r2, sp, #120	; 0x78
 8017314:	a91d      	add	r1, sp, #116	; 0x74
 8017316:	ec4b ab10 	vmov	d0, sl, fp
 801731a:	4648      	mov	r0, r9
 801731c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017320:	f002 f82e 	bl	8019380 <__d2b>
 8017324:	901c      	str	r0, [sp, #112]	; 0x70
 8017326:	2800      	cmp	r0, #0
 8017328:	f43f aee0 	beq.w	80170ec <_strtod_l+0x43c>
 801732c:	2101      	movs	r1, #1
 801732e:	4648      	mov	r0, r9
 8017330:	f001 fdf6 	bl	8018f20 <__i2b>
 8017334:	4680      	mov	r8, r0
 8017336:	2800      	cmp	r0, #0
 8017338:	f43f aed8 	beq.w	80170ec <_strtod_l+0x43c>
 801733c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801733e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017340:	2e00      	cmp	r6, #0
 8017342:	bfab      	itete	ge
 8017344:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017346:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017348:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801734a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801734c:	bfac      	ite	ge
 801734e:	18f7      	addge	r7, r6, r3
 8017350:	1b9d      	sublt	r5, r3, r6
 8017352:	9b04      	ldr	r3, [sp, #16]
 8017354:	1af6      	subs	r6, r6, r3
 8017356:	4416      	add	r6, r2
 8017358:	4b63      	ldr	r3, [pc, #396]	; (80174e8 <_strtod_l+0x838>)
 801735a:	3e01      	subs	r6, #1
 801735c:	429e      	cmp	r6, r3
 801735e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017362:	f280 80af 	bge.w	80174c4 <_strtod_l+0x814>
 8017366:	1b9b      	subs	r3, r3, r6
 8017368:	2b1f      	cmp	r3, #31
 801736a:	eba2 0203 	sub.w	r2, r2, r3
 801736e:	f04f 0101 	mov.w	r1, #1
 8017372:	f300 809b 	bgt.w	80174ac <_strtod_l+0x7fc>
 8017376:	fa01 f303 	lsl.w	r3, r1, r3
 801737a:	930f      	str	r3, [sp, #60]	; 0x3c
 801737c:	2300      	movs	r3, #0
 801737e:	930a      	str	r3, [sp, #40]	; 0x28
 8017380:	18be      	adds	r6, r7, r2
 8017382:	9b04      	ldr	r3, [sp, #16]
 8017384:	42b7      	cmp	r7, r6
 8017386:	4415      	add	r5, r2
 8017388:	441d      	add	r5, r3
 801738a:	463b      	mov	r3, r7
 801738c:	bfa8      	it	ge
 801738e:	4633      	movge	r3, r6
 8017390:	42ab      	cmp	r3, r5
 8017392:	bfa8      	it	ge
 8017394:	462b      	movge	r3, r5
 8017396:	2b00      	cmp	r3, #0
 8017398:	bfc2      	ittt	gt
 801739a:	1af6      	subgt	r6, r6, r3
 801739c:	1aed      	subgt	r5, r5, r3
 801739e:	1aff      	subgt	r7, r7, r3
 80173a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173a2:	b1bb      	cbz	r3, 80173d4 <_strtod_l+0x724>
 80173a4:	4641      	mov	r1, r8
 80173a6:	461a      	mov	r2, r3
 80173a8:	4648      	mov	r0, r9
 80173aa:	f001 fe59 	bl	8019060 <__pow5mult>
 80173ae:	4680      	mov	r8, r0
 80173b0:	2800      	cmp	r0, #0
 80173b2:	f43f ae9b 	beq.w	80170ec <_strtod_l+0x43c>
 80173b6:	4601      	mov	r1, r0
 80173b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80173ba:	4648      	mov	r0, r9
 80173bc:	f001 fdb9 	bl	8018f32 <__multiply>
 80173c0:	900c      	str	r0, [sp, #48]	; 0x30
 80173c2:	2800      	cmp	r0, #0
 80173c4:	f43f ae92 	beq.w	80170ec <_strtod_l+0x43c>
 80173c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80173ca:	4648      	mov	r0, r9
 80173cc:	f001 fcca 	bl	8018d64 <_Bfree>
 80173d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173d2:	931c      	str	r3, [sp, #112]	; 0x70
 80173d4:	2e00      	cmp	r6, #0
 80173d6:	dc7a      	bgt.n	80174ce <_strtod_l+0x81e>
 80173d8:	9b06      	ldr	r3, [sp, #24]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	dd08      	ble.n	80173f0 <_strtod_l+0x740>
 80173de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80173e0:	9905      	ldr	r1, [sp, #20]
 80173e2:	4648      	mov	r0, r9
 80173e4:	f001 fe3c 	bl	8019060 <__pow5mult>
 80173e8:	9005      	str	r0, [sp, #20]
 80173ea:	2800      	cmp	r0, #0
 80173ec:	f43f ae7e 	beq.w	80170ec <_strtod_l+0x43c>
 80173f0:	2d00      	cmp	r5, #0
 80173f2:	dd08      	ble.n	8017406 <_strtod_l+0x756>
 80173f4:	462a      	mov	r2, r5
 80173f6:	9905      	ldr	r1, [sp, #20]
 80173f8:	4648      	mov	r0, r9
 80173fa:	f001 fe7f 	bl	80190fc <__lshift>
 80173fe:	9005      	str	r0, [sp, #20]
 8017400:	2800      	cmp	r0, #0
 8017402:	f43f ae73 	beq.w	80170ec <_strtod_l+0x43c>
 8017406:	2f00      	cmp	r7, #0
 8017408:	dd08      	ble.n	801741c <_strtod_l+0x76c>
 801740a:	4641      	mov	r1, r8
 801740c:	463a      	mov	r2, r7
 801740e:	4648      	mov	r0, r9
 8017410:	f001 fe74 	bl	80190fc <__lshift>
 8017414:	4680      	mov	r8, r0
 8017416:	2800      	cmp	r0, #0
 8017418:	f43f ae68 	beq.w	80170ec <_strtod_l+0x43c>
 801741c:	9a05      	ldr	r2, [sp, #20]
 801741e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017420:	4648      	mov	r0, r9
 8017422:	f001 fed9 	bl	80191d8 <__mdiff>
 8017426:	4604      	mov	r4, r0
 8017428:	2800      	cmp	r0, #0
 801742a:	f43f ae5f 	beq.w	80170ec <_strtod_l+0x43c>
 801742e:	68c3      	ldr	r3, [r0, #12]
 8017430:	930c      	str	r3, [sp, #48]	; 0x30
 8017432:	2300      	movs	r3, #0
 8017434:	60c3      	str	r3, [r0, #12]
 8017436:	4641      	mov	r1, r8
 8017438:	f001 feb4 	bl	80191a4 <__mcmp>
 801743c:	2800      	cmp	r0, #0
 801743e:	da55      	bge.n	80174ec <_strtod_l+0x83c>
 8017440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017442:	b9e3      	cbnz	r3, 801747e <_strtod_l+0x7ce>
 8017444:	f1ba 0f00 	cmp.w	sl, #0
 8017448:	d119      	bne.n	801747e <_strtod_l+0x7ce>
 801744a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801744e:	b9b3      	cbnz	r3, 801747e <_strtod_l+0x7ce>
 8017450:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017454:	0d1b      	lsrs	r3, r3, #20
 8017456:	051b      	lsls	r3, r3, #20
 8017458:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801745c:	d90f      	bls.n	801747e <_strtod_l+0x7ce>
 801745e:	6963      	ldr	r3, [r4, #20]
 8017460:	b913      	cbnz	r3, 8017468 <_strtod_l+0x7b8>
 8017462:	6923      	ldr	r3, [r4, #16]
 8017464:	2b01      	cmp	r3, #1
 8017466:	dd0a      	ble.n	801747e <_strtod_l+0x7ce>
 8017468:	4621      	mov	r1, r4
 801746a:	2201      	movs	r2, #1
 801746c:	4648      	mov	r0, r9
 801746e:	f001 fe45 	bl	80190fc <__lshift>
 8017472:	4641      	mov	r1, r8
 8017474:	4604      	mov	r4, r0
 8017476:	f001 fe95 	bl	80191a4 <__mcmp>
 801747a:	2800      	cmp	r0, #0
 801747c:	dc67      	bgt.n	801754e <_strtod_l+0x89e>
 801747e:	9b04      	ldr	r3, [sp, #16]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d171      	bne.n	8017568 <_strtod_l+0x8b8>
 8017484:	e63d      	b.n	8017102 <_strtod_l+0x452>
 8017486:	f018 0f01 	tst.w	r8, #1
 801748a:	d004      	beq.n	8017496 <_strtod_l+0x7e6>
 801748c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017490:	f7e9 f8b2 	bl	80005f8 <__aeabi_dmul>
 8017494:	2301      	movs	r3, #1
 8017496:	ea4f 0868 	mov.w	r8, r8, asr #1
 801749a:	3508      	adds	r5, #8
 801749c:	e6e5      	b.n	801726a <_strtod_l+0x5ba>
 801749e:	f04f 32ff 	mov.w	r2, #4294967295
 80174a2:	fa02 f303 	lsl.w	r3, r2, r3
 80174a6:	ea03 0a0a 	and.w	sl, r3, sl
 80174aa:	e6ff      	b.n	80172ac <_strtod_l+0x5fc>
 80174ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80174b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80174b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80174b8:	36e2      	adds	r6, #226	; 0xe2
 80174ba:	fa01 f306 	lsl.w	r3, r1, r6
 80174be:	930a      	str	r3, [sp, #40]	; 0x28
 80174c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80174c2:	e75d      	b.n	8017380 <_strtod_l+0x6d0>
 80174c4:	2300      	movs	r3, #0
 80174c6:	930a      	str	r3, [sp, #40]	; 0x28
 80174c8:	2301      	movs	r3, #1
 80174ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80174cc:	e758      	b.n	8017380 <_strtod_l+0x6d0>
 80174ce:	4632      	mov	r2, r6
 80174d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80174d2:	4648      	mov	r0, r9
 80174d4:	f001 fe12 	bl	80190fc <__lshift>
 80174d8:	901c      	str	r0, [sp, #112]	; 0x70
 80174da:	2800      	cmp	r0, #0
 80174dc:	f47f af7c 	bne.w	80173d8 <_strtod_l+0x728>
 80174e0:	e604      	b.n	80170ec <_strtod_l+0x43c>
 80174e2:	bf00      	nop
 80174e4:	0801b5b0 	.word	0x0801b5b0
 80174e8:	fffffc02 	.word	0xfffffc02
 80174ec:	465d      	mov	r5, fp
 80174ee:	f040 8086 	bne.w	80175fe <_strtod_l+0x94e>
 80174f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80174f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174f8:	b32a      	cbz	r2, 8017546 <_strtod_l+0x896>
 80174fa:	4aaf      	ldr	r2, [pc, #700]	; (80177b8 <_strtod_l+0xb08>)
 80174fc:	4293      	cmp	r3, r2
 80174fe:	d153      	bne.n	80175a8 <_strtod_l+0x8f8>
 8017500:	9b04      	ldr	r3, [sp, #16]
 8017502:	4650      	mov	r0, sl
 8017504:	b1d3      	cbz	r3, 801753c <_strtod_l+0x88c>
 8017506:	4aad      	ldr	r2, [pc, #692]	; (80177bc <_strtod_l+0xb0c>)
 8017508:	402a      	ands	r2, r5
 801750a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801750e:	f04f 31ff 	mov.w	r1, #4294967295
 8017512:	d816      	bhi.n	8017542 <_strtod_l+0x892>
 8017514:	0d12      	lsrs	r2, r2, #20
 8017516:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801751a:	fa01 f303 	lsl.w	r3, r1, r3
 801751e:	4298      	cmp	r0, r3
 8017520:	d142      	bne.n	80175a8 <_strtod_l+0x8f8>
 8017522:	4ba7      	ldr	r3, [pc, #668]	; (80177c0 <_strtod_l+0xb10>)
 8017524:	429d      	cmp	r5, r3
 8017526:	d102      	bne.n	801752e <_strtod_l+0x87e>
 8017528:	3001      	adds	r0, #1
 801752a:	f43f addf 	beq.w	80170ec <_strtod_l+0x43c>
 801752e:	4ba3      	ldr	r3, [pc, #652]	; (80177bc <_strtod_l+0xb0c>)
 8017530:	402b      	ands	r3, r5
 8017532:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017536:	f04f 0a00 	mov.w	sl, #0
 801753a:	e7a0      	b.n	801747e <_strtod_l+0x7ce>
 801753c:	f04f 33ff 	mov.w	r3, #4294967295
 8017540:	e7ed      	b.n	801751e <_strtod_l+0x86e>
 8017542:	460b      	mov	r3, r1
 8017544:	e7eb      	b.n	801751e <_strtod_l+0x86e>
 8017546:	bb7b      	cbnz	r3, 80175a8 <_strtod_l+0x8f8>
 8017548:	f1ba 0f00 	cmp.w	sl, #0
 801754c:	d12c      	bne.n	80175a8 <_strtod_l+0x8f8>
 801754e:	9904      	ldr	r1, [sp, #16]
 8017550:	4a9a      	ldr	r2, [pc, #616]	; (80177bc <_strtod_l+0xb0c>)
 8017552:	465b      	mov	r3, fp
 8017554:	b1f1      	cbz	r1, 8017594 <_strtod_l+0x8e4>
 8017556:	ea02 010b 	and.w	r1, r2, fp
 801755a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801755e:	dc19      	bgt.n	8017594 <_strtod_l+0x8e4>
 8017560:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017564:	f77f ae5b 	ble.w	801721e <_strtod_l+0x56e>
 8017568:	4a96      	ldr	r2, [pc, #600]	; (80177c4 <_strtod_l+0xb14>)
 801756a:	2300      	movs	r3, #0
 801756c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017570:	4650      	mov	r0, sl
 8017572:	4659      	mov	r1, fp
 8017574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017578:	f7e9 f83e 	bl	80005f8 <__aeabi_dmul>
 801757c:	4682      	mov	sl, r0
 801757e:	468b      	mov	fp, r1
 8017580:	2900      	cmp	r1, #0
 8017582:	f47f adbe 	bne.w	8017102 <_strtod_l+0x452>
 8017586:	2800      	cmp	r0, #0
 8017588:	f47f adbb 	bne.w	8017102 <_strtod_l+0x452>
 801758c:	2322      	movs	r3, #34	; 0x22
 801758e:	f8c9 3000 	str.w	r3, [r9]
 8017592:	e5b6      	b.n	8017102 <_strtod_l+0x452>
 8017594:	4013      	ands	r3, r2
 8017596:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801759a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801759e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80175a2:	f04f 3aff 	mov.w	sl, #4294967295
 80175a6:	e76a      	b.n	801747e <_strtod_l+0x7ce>
 80175a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175aa:	b193      	cbz	r3, 80175d2 <_strtod_l+0x922>
 80175ac:	422b      	tst	r3, r5
 80175ae:	f43f af66 	beq.w	801747e <_strtod_l+0x7ce>
 80175b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175b4:	9a04      	ldr	r2, [sp, #16]
 80175b6:	4650      	mov	r0, sl
 80175b8:	4659      	mov	r1, fp
 80175ba:	b173      	cbz	r3, 80175da <_strtod_l+0x92a>
 80175bc:	f7ff fb5a 	bl	8016c74 <sulp>
 80175c0:	4602      	mov	r2, r0
 80175c2:	460b      	mov	r3, r1
 80175c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80175c8:	f7e8 fe60 	bl	800028c <__adddf3>
 80175cc:	4682      	mov	sl, r0
 80175ce:	468b      	mov	fp, r1
 80175d0:	e755      	b.n	801747e <_strtod_l+0x7ce>
 80175d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175d4:	ea13 0f0a 	tst.w	r3, sl
 80175d8:	e7e9      	b.n	80175ae <_strtod_l+0x8fe>
 80175da:	f7ff fb4b 	bl	8016c74 <sulp>
 80175de:	4602      	mov	r2, r0
 80175e0:	460b      	mov	r3, r1
 80175e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80175e6:	f7e8 fe4f 	bl	8000288 <__aeabi_dsub>
 80175ea:	2200      	movs	r2, #0
 80175ec:	2300      	movs	r3, #0
 80175ee:	4682      	mov	sl, r0
 80175f0:	468b      	mov	fp, r1
 80175f2:	f7e9 fa69 	bl	8000ac8 <__aeabi_dcmpeq>
 80175f6:	2800      	cmp	r0, #0
 80175f8:	f47f ae11 	bne.w	801721e <_strtod_l+0x56e>
 80175fc:	e73f      	b.n	801747e <_strtod_l+0x7ce>
 80175fe:	4641      	mov	r1, r8
 8017600:	4620      	mov	r0, r4
 8017602:	f001 ff0c 	bl	801941e <__ratio>
 8017606:	ec57 6b10 	vmov	r6, r7, d0
 801760a:	2200      	movs	r2, #0
 801760c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017610:	ee10 0a10 	vmov	r0, s0
 8017614:	4639      	mov	r1, r7
 8017616:	f7e9 fa6b 	bl	8000af0 <__aeabi_dcmple>
 801761a:	2800      	cmp	r0, #0
 801761c:	d077      	beq.n	801770e <_strtod_l+0xa5e>
 801761e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017620:	2b00      	cmp	r3, #0
 8017622:	d04a      	beq.n	80176ba <_strtod_l+0xa0a>
 8017624:	4b68      	ldr	r3, [pc, #416]	; (80177c8 <_strtod_l+0xb18>)
 8017626:	2200      	movs	r2, #0
 8017628:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801762c:	4f66      	ldr	r7, [pc, #408]	; (80177c8 <_strtod_l+0xb18>)
 801762e:	2600      	movs	r6, #0
 8017630:	4b62      	ldr	r3, [pc, #392]	; (80177bc <_strtod_l+0xb0c>)
 8017632:	402b      	ands	r3, r5
 8017634:	930f      	str	r3, [sp, #60]	; 0x3c
 8017636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017638:	4b64      	ldr	r3, [pc, #400]	; (80177cc <_strtod_l+0xb1c>)
 801763a:	429a      	cmp	r2, r3
 801763c:	f040 80ce 	bne.w	80177dc <_strtod_l+0xb2c>
 8017640:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017644:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017648:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801764c:	ec4b ab10 	vmov	d0, sl, fp
 8017650:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017654:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017658:	f001 fe1c 	bl	8019294 <__ulp>
 801765c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017660:	ec53 2b10 	vmov	r2, r3, d0
 8017664:	f7e8 ffc8 	bl	80005f8 <__aeabi_dmul>
 8017668:	4652      	mov	r2, sl
 801766a:	465b      	mov	r3, fp
 801766c:	f7e8 fe0e 	bl	800028c <__adddf3>
 8017670:	460b      	mov	r3, r1
 8017672:	4952      	ldr	r1, [pc, #328]	; (80177bc <_strtod_l+0xb0c>)
 8017674:	4a56      	ldr	r2, [pc, #344]	; (80177d0 <_strtod_l+0xb20>)
 8017676:	4019      	ands	r1, r3
 8017678:	4291      	cmp	r1, r2
 801767a:	4682      	mov	sl, r0
 801767c:	d95b      	bls.n	8017736 <_strtod_l+0xa86>
 801767e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017680:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017684:	4293      	cmp	r3, r2
 8017686:	d103      	bne.n	8017690 <_strtod_l+0x9e0>
 8017688:	9b08      	ldr	r3, [sp, #32]
 801768a:	3301      	adds	r3, #1
 801768c:	f43f ad2e 	beq.w	80170ec <_strtod_l+0x43c>
 8017690:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80177c0 <_strtod_l+0xb10>
 8017694:	f04f 3aff 	mov.w	sl, #4294967295
 8017698:	991c      	ldr	r1, [sp, #112]	; 0x70
 801769a:	4648      	mov	r0, r9
 801769c:	f001 fb62 	bl	8018d64 <_Bfree>
 80176a0:	9905      	ldr	r1, [sp, #20]
 80176a2:	4648      	mov	r0, r9
 80176a4:	f001 fb5e 	bl	8018d64 <_Bfree>
 80176a8:	4641      	mov	r1, r8
 80176aa:	4648      	mov	r0, r9
 80176ac:	f001 fb5a 	bl	8018d64 <_Bfree>
 80176b0:	4621      	mov	r1, r4
 80176b2:	4648      	mov	r0, r9
 80176b4:	f001 fb56 	bl	8018d64 <_Bfree>
 80176b8:	e619      	b.n	80172ee <_strtod_l+0x63e>
 80176ba:	f1ba 0f00 	cmp.w	sl, #0
 80176be:	d11a      	bne.n	80176f6 <_strtod_l+0xa46>
 80176c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176c4:	b9eb      	cbnz	r3, 8017702 <_strtod_l+0xa52>
 80176c6:	2200      	movs	r2, #0
 80176c8:	4b3f      	ldr	r3, [pc, #252]	; (80177c8 <_strtod_l+0xb18>)
 80176ca:	4630      	mov	r0, r6
 80176cc:	4639      	mov	r1, r7
 80176ce:	f7e9 fa05 	bl	8000adc <__aeabi_dcmplt>
 80176d2:	b9c8      	cbnz	r0, 8017708 <_strtod_l+0xa58>
 80176d4:	4630      	mov	r0, r6
 80176d6:	4639      	mov	r1, r7
 80176d8:	2200      	movs	r2, #0
 80176da:	4b3e      	ldr	r3, [pc, #248]	; (80177d4 <_strtod_l+0xb24>)
 80176dc:	f7e8 ff8c 	bl	80005f8 <__aeabi_dmul>
 80176e0:	4606      	mov	r6, r0
 80176e2:	460f      	mov	r7, r1
 80176e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80176e8:	9618      	str	r6, [sp, #96]	; 0x60
 80176ea:	9319      	str	r3, [sp, #100]	; 0x64
 80176ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80176f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80176f4:	e79c      	b.n	8017630 <_strtod_l+0x980>
 80176f6:	f1ba 0f01 	cmp.w	sl, #1
 80176fa:	d102      	bne.n	8017702 <_strtod_l+0xa52>
 80176fc:	2d00      	cmp	r5, #0
 80176fe:	f43f ad8e 	beq.w	801721e <_strtod_l+0x56e>
 8017702:	2200      	movs	r2, #0
 8017704:	4b34      	ldr	r3, [pc, #208]	; (80177d8 <_strtod_l+0xb28>)
 8017706:	e78f      	b.n	8017628 <_strtod_l+0x978>
 8017708:	2600      	movs	r6, #0
 801770a:	4f32      	ldr	r7, [pc, #200]	; (80177d4 <_strtod_l+0xb24>)
 801770c:	e7ea      	b.n	80176e4 <_strtod_l+0xa34>
 801770e:	4b31      	ldr	r3, [pc, #196]	; (80177d4 <_strtod_l+0xb24>)
 8017710:	4630      	mov	r0, r6
 8017712:	4639      	mov	r1, r7
 8017714:	2200      	movs	r2, #0
 8017716:	f7e8 ff6f 	bl	80005f8 <__aeabi_dmul>
 801771a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801771c:	4606      	mov	r6, r0
 801771e:	460f      	mov	r7, r1
 8017720:	b933      	cbnz	r3, 8017730 <_strtod_l+0xa80>
 8017722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017726:	9010      	str	r0, [sp, #64]	; 0x40
 8017728:	9311      	str	r3, [sp, #68]	; 0x44
 801772a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801772e:	e7df      	b.n	80176f0 <_strtod_l+0xa40>
 8017730:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017734:	e7f9      	b.n	801772a <_strtod_l+0xa7a>
 8017736:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801773a:	9b04      	ldr	r3, [sp, #16]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d1ab      	bne.n	8017698 <_strtod_l+0x9e8>
 8017740:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017744:	0d1b      	lsrs	r3, r3, #20
 8017746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017748:	051b      	lsls	r3, r3, #20
 801774a:	429a      	cmp	r2, r3
 801774c:	465d      	mov	r5, fp
 801774e:	d1a3      	bne.n	8017698 <_strtod_l+0x9e8>
 8017750:	4639      	mov	r1, r7
 8017752:	4630      	mov	r0, r6
 8017754:	f7e9 fa00 	bl	8000b58 <__aeabi_d2iz>
 8017758:	f7e8 fee4 	bl	8000524 <__aeabi_i2d>
 801775c:	460b      	mov	r3, r1
 801775e:	4602      	mov	r2, r0
 8017760:	4639      	mov	r1, r7
 8017762:	4630      	mov	r0, r6
 8017764:	f7e8 fd90 	bl	8000288 <__aeabi_dsub>
 8017768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801776a:	4606      	mov	r6, r0
 801776c:	460f      	mov	r7, r1
 801776e:	b933      	cbnz	r3, 801777e <_strtod_l+0xace>
 8017770:	f1ba 0f00 	cmp.w	sl, #0
 8017774:	d103      	bne.n	801777e <_strtod_l+0xace>
 8017776:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801777a:	2d00      	cmp	r5, #0
 801777c:	d06d      	beq.n	801785a <_strtod_l+0xbaa>
 801777e:	a30a      	add	r3, pc, #40	; (adr r3, 80177a8 <_strtod_l+0xaf8>)
 8017780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017784:	4630      	mov	r0, r6
 8017786:	4639      	mov	r1, r7
 8017788:	f7e9 f9a8 	bl	8000adc <__aeabi_dcmplt>
 801778c:	2800      	cmp	r0, #0
 801778e:	f47f acb8 	bne.w	8017102 <_strtod_l+0x452>
 8017792:	a307      	add	r3, pc, #28	; (adr r3, 80177b0 <_strtod_l+0xb00>)
 8017794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017798:	4630      	mov	r0, r6
 801779a:	4639      	mov	r1, r7
 801779c:	f7e9 f9bc 	bl	8000b18 <__aeabi_dcmpgt>
 80177a0:	2800      	cmp	r0, #0
 80177a2:	f43f af79 	beq.w	8017698 <_strtod_l+0x9e8>
 80177a6:	e4ac      	b.n	8017102 <_strtod_l+0x452>
 80177a8:	94a03595 	.word	0x94a03595
 80177ac:	3fdfffff 	.word	0x3fdfffff
 80177b0:	35afe535 	.word	0x35afe535
 80177b4:	3fe00000 	.word	0x3fe00000
 80177b8:	000fffff 	.word	0x000fffff
 80177bc:	7ff00000 	.word	0x7ff00000
 80177c0:	7fefffff 	.word	0x7fefffff
 80177c4:	39500000 	.word	0x39500000
 80177c8:	3ff00000 	.word	0x3ff00000
 80177cc:	7fe00000 	.word	0x7fe00000
 80177d0:	7c9fffff 	.word	0x7c9fffff
 80177d4:	3fe00000 	.word	0x3fe00000
 80177d8:	bff00000 	.word	0xbff00000
 80177dc:	9b04      	ldr	r3, [sp, #16]
 80177de:	b333      	cbz	r3, 801782e <_strtod_l+0xb7e>
 80177e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80177e6:	d822      	bhi.n	801782e <_strtod_l+0xb7e>
 80177e8:	a327      	add	r3, pc, #156	; (adr r3, 8017888 <_strtod_l+0xbd8>)
 80177ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ee:	4630      	mov	r0, r6
 80177f0:	4639      	mov	r1, r7
 80177f2:	f7e9 f97d 	bl	8000af0 <__aeabi_dcmple>
 80177f6:	b1a0      	cbz	r0, 8017822 <_strtod_l+0xb72>
 80177f8:	4639      	mov	r1, r7
 80177fa:	4630      	mov	r0, r6
 80177fc:	f7e9 f9d4 	bl	8000ba8 <__aeabi_d2uiz>
 8017800:	2800      	cmp	r0, #0
 8017802:	bf08      	it	eq
 8017804:	2001      	moveq	r0, #1
 8017806:	f7e8 fe7d 	bl	8000504 <__aeabi_ui2d>
 801780a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801780c:	4606      	mov	r6, r0
 801780e:	460f      	mov	r7, r1
 8017810:	bb03      	cbnz	r3, 8017854 <_strtod_l+0xba4>
 8017812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017816:	9012      	str	r0, [sp, #72]	; 0x48
 8017818:	9313      	str	r3, [sp, #76]	; 0x4c
 801781a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801781e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017826:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801782a:	1a9b      	subs	r3, r3, r2
 801782c:	930b      	str	r3, [sp, #44]	; 0x2c
 801782e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017832:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017836:	f001 fd2d 	bl	8019294 <__ulp>
 801783a:	4650      	mov	r0, sl
 801783c:	ec53 2b10 	vmov	r2, r3, d0
 8017840:	4659      	mov	r1, fp
 8017842:	f7e8 fed9 	bl	80005f8 <__aeabi_dmul>
 8017846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801784a:	f7e8 fd1f 	bl	800028c <__adddf3>
 801784e:	4682      	mov	sl, r0
 8017850:	468b      	mov	fp, r1
 8017852:	e772      	b.n	801773a <_strtod_l+0xa8a>
 8017854:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017858:	e7df      	b.n	801781a <_strtod_l+0xb6a>
 801785a:	a30d      	add	r3, pc, #52	; (adr r3, 8017890 <_strtod_l+0xbe0>)
 801785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017860:	f7e9 f93c 	bl	8000adc <__aeabi_dcmplt>
 8017864:	e79c      	b.n	80177a0 <_strtod_l+0xaf0>
 8017866:	2300      	movs	r3, #0
 8017868:	930d      	str	r3, [sp, #52]	; 0x34
 801786a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801786c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801786e:	6013      	str	r3, [r2, #0]
 8017870:	f7ff ba61 	b.w	8016d36 <_strtod_l+0x86>
 8017874:	2b65      	cmp	r3, #101	; 0x65
 8017876:	f04f 0200 	mov.w	r2, #0
 801787a:	f43f ab4e 	beq.w	8016f1a <_strtod_l+0x26a>
 801787e:	2101      	movs	r1, #1
 8017880:	4614      	mov	r4, r2
 8017882:	9104      	str	r1, [sp, #16]
 8017884:	f7ff bacb 	b.w	8016e1e <_strtod_l+0x16e>
 8017888:	ffc00000 	.word	0xffc00000
 801788c:	41dfffff 	.word	0x41dfffff
 8017890:	94a03595 	.word	0x94a03595
 8017894:	3fcfffff 	.word	0x3fcfffff

08017898 <_strtod_r>:
 8017898:	4b05      	ldr	r3, [pc, #20]	; (80178b0 <_strtod_r+0x18>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	b410      	push	{r4}
 801789e:	6a1b      	ldr	r3, [r3, #32]
 80178a0:	4c04      	ldr	r4, [pc, #16]	; (80178b4 <_strtod_r+0x1c>)
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	bf08      	it	eq
 80178a6:	4623      	moveq	r3, r4
 80178a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178ac:	f7ff ba00 	b.w	8016cb0 <_strtod_l>
 80178b0:	2000220c 	.word	0x2000220c
 80178b4:	20002270 	.word	0x20002270

080178b8 <_strtol_l.isra.0>:
 80178b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178bc:	4680      	mov	r8, r0
 80178be:	4689      	mov	r9, r1
 80178c0:	4692      	mov	sl, r2
 80178c2:	461e      	mov	r6, r3
 80178c4:	460f      	mov	r7, r1
 80178c6:	463d      	mov	r5, r7
 80178c8:	9808      	ldr	r0, [sp, #32]
 80178ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80178ce:	f001 f9ed 	bl	8018cac <__locale_ctype_ptr_l>
 80178d2:	4420      	add	r0, r4
 80178d4:	7843      	ldrb	r3, [r0, #1]
 80178d6:	f013 0308 	ands.w	r3, r3, #8
 80178da:	d132      	bne.n	8017942 <_strtol_l.isra.0+0x8a>
 80178dc:	2c2d      	cmp	r4, #45	; 0x2d
 80178de:	d132      	bne.n	8017946 <_strtol_l.isra.0+0x8e>
 80178e0:	787c      	ldrb	r4, [r7, #1]
 80178e2:	1cbd      	adds	r5, r7, #2
 80178e4:	2201      	movs	r2, #1
 80178e6:	2e00      	cmp	r6, #0
 80178e8:	d05d      	beq.n	80179a6 <_strtol_l.isra.0+0xee>
 80178ea:	2e10      	cmp	r6, #16
 80178ec:	d109      	bne.n	8017902 <_strtol_l.isra.0+0x4a>
 80178ee:	2c30      	cmp	r4, #48	; 0x30
 80178f0:	d107      	bne.n	8017902 <_strtol_l.isra.0+0x4a>
 80178f2:	782b      	ldrb	r3, [r5, #0]
 80178f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80178f8:	2b58      	cmp	r3, #88	; 0x58
 80178fa:	d14f      	bne.n	801799c <_strtol_l.isra.0+0xe4>
 80178fc:	786c      	ldrb	r4, [r5, #1]
 80178fe:	2610      	movs	r6, #16
 8017900:	3502      	adds	r5, #2
 8017902:	2a00      	cmp	r2, #0
 8017904:	bf14      	ite	ne
 8017906:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801790a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801790e:	2700      	movs	r7, #0
 8017910:	fbb1 fcf6 	udiv	ip, r1, r6
 8017914:	4638      	mov	r0, r7
 8017916:	fb06 1e1c 	mls	lr, r6, ip, r1
 801791a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801791e:	2b09      	cmp	r3, #9
 8017920:	d817      	bhi.n	8017952 <_strtol_l.isra.0+0x9a>
 8017922:	461c      	mov	r4, r3
 8017924:	42a6      	cmp	r6, r4
 8017926:	dd23      	ble.n	8017970 <_strtol_l.isra.0+0xb8>
 8017928:	1c7b      	adds	r3, r7, #1
 801792a:	d007      	beq.n	801793c <_strtol_l.isra.0+0x84>
 801792c:	4584      	cmp	ip, r0
 801792e:	d31c      	bcc.n	801796a <_strtol_l.isra.0+0xb2>
 8017930:	d101      	bne.n	8017936 <_strtol_l.isra.0+0x7e>
 8017932:	45a6      	cmp	lr, r4
 8017934:	db19      	blt.n	801796a <_strtol_l.isra.0+0xb2>
 8017936:	fb00 4006 	mla	r0, r0, r6, r4
 801793a:	2701      	movs	r7, #1
 801793c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017940:	e7eb      	b.n	801791a <_strtol_l.isra.0+0x62>
 8017942:	462f      	mov	r7, r5
 8017944:	e7bf      	b.n	80178c6 <_strtol_l.isra.0+0xe>
 8017946:	2c2b      	cmp	r4, #43	; 0x2b
 8017948:	bf04      	itt	eq
 801794a:	1cbd      	addeq	r5, r7, #2
 801794c:	787c      	ldrbeq	r4, [r7, #1]
 801794e:	461a      	mov	r2, r3
 8017950:	e7c9      	b.n	80178e6 <_strtol_l.isra.0+0x2e>
 8017952:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017956:	2b19      	cmp	r3, #25
 8017958:	d801      	bhi.n	801795e <_strtol_l.isra.0+0xa6>
 801795a:	3c37      	subs	r4, #55	; 0x37
 801795c:	e7e2      	b.n	8017924 <_strtol_l.isra.0+0x6c>
 801795e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017962:	2b19      	cmp	r3, #25
 8017964:	d804      	bhi.n	8017970 <_strtol_l.isra.0+0xb8>
 8017966:	3c57      	subs	r4, #87	; 0x57
 8017968:	e7dc      	b.n	8017924 <_strtol_l.isra.0+0x6c>
 801796a:	f04f 37ff 	mov.w	r7, #4294967295
 801796e:	e7e5      	b.n	801793c <_strtol_l.isra.0+0x84>
 8017970:	1c7b      	adds	r3, r7, #1
 8017972:	d108      	bne.n	8017986 <_strtol_l.isra.0+0xce>
 8017974:	2322      	movs	r3, #34	; 0x22
 8017976:	f8c8 3000 	str.w	r3, [r8]
 801797a:	4608      	mov	r0, r1
 801797c:	f1ba 0f00 	cmp.w	sl, #0
 8017980:	d107      	bne.n	8017992 <_strtol_l.isra.0+0xda>
 8017982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017986:	b102      	cbz	r2, 801798a <_strtol_l.isra.0+0xd2>
 8017988:	4240      	negs	r0, r0
 801798a:	f1ba 0f00 	cmp.w	sl, #0
 801798e:	d0f8      	beq.n	8017982 <_strtol_l.isra.0+0xca>
 8017990:	b10f      	cbz	r7, 8017996 <_strtol_l.isra.0+0xde>
 8017992:	f105 39ff 	add.w	r9, r5, #4294967295
 8017996:	f8ca 9000 	str.w	r9, [sl]
 801799a:	e7f2      	b.n	8017982 <_strtol_l.isra.0+0xca>
 801799c:	2430      	movs	r4, #48	; 0x30
 801799e:	2e00      	cmp	r6, #0
 80179a0:	d1af      	bne.n	8017902 <_strtol_l.isra.0+0x4a>
 80179a2:	2608      	movs	r6, #8
 80179a4:	e7ad      	b.n	8017902 <_strtol_l.isra.0+0x4a>
 80179a6:	2c30      	cmp	r4, #48	; 0x30
 80179a8:	d0a3      	beq.n	80178f2 <_strtol_l.isra.0+0x3a>
 80179aa:	260a      	movs	r6, #10
 80179ac:	e7a9      	b.n	8017902 <_strtol_l.isra.0+0x4a>
	...

080179b0 <_strtol_r>:
 80179b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179b2:	4c06      	ldr	r4, [pc, #24]	; (80179cc <_strtol_r+0x1c>)
 80179b4:	4d06      	ldr	r5, [pc, #24]	; (80179d0 <_strtol_r+0x20>)
 80179b6:	6824      	ldr	r4, [r4, #0]
 80179b8:	6a24      	ldr	r4, [r4, #32]
 80179ba:	2c00      	cmp	r4, #0
 80179bc:	bf08      	it	eq
 80179be:	462c      	moveq	r4, r5
 80179c0:	9400      	str	r4, [sp, #0]
 80179c2:	f7ff ff79 	bl	80178b8 <_strtol_l.isra.0>
 80179c6:	b003      	add	sp, #12
 80179c8:	bd30      	pop	{r4, r5, pc}
 80179ca:	bf00      	nop
 80179cc:	2000220c 	.word	0x2000220c
 80179d0:	20002270 	.word	0x20002270

080179d4 <quorem>:
 80179d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d8:	6903      	ldr	r3, [r0, #16]
 80179da:	690c      	ldr	r4, [r1, #16]
 80179dc:	42a3      	cmp	r3, r4
 80179de:	4680      	mov	r8, r0
 80179e0:	f2c0 8082 	blt.w	8017ae8 <quorem+0x114>
 80179e4:	3c01      	subs	r4, #1
 80179e6:	f101 0714 	add.w	r7, r1, #20
 80179ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80179ee:	f100 0614 	add.w	r6, r0, #20
 80179f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80179f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80179fa:	eb06 030c 	add.w	r3, r6, ip
 80179fe:	3501      	adds	r5, #1
 8017a00:	eb07 090c 	add.w	r9, r7, ip
 8017a04:	9301      	str	r3, [sp, #4]
 8017a06:	fbb0 f5f5 	udiv	r5, r0, r5
 8017a0a:	b395      	cbz	r5, 8017a72 <quorem+0x9e>
 8017a0c:	f04f 0a00 	mov.w	sl, #0
 8017a10:	4638      	mov	r0, r7
 8017a12:	46b6      	mov	lr, r6
 8017a14:	46d3      	mov	fp, sl
 8017a16:	f850 2b04 	ldr.w	r2, [r0], #4
 8017a1a:	b293      	uxth	r3, r2
 8017a1c:	fb05 a303 	mla	r3, r5, r3, sl
 8017a20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017a24:	b29b      	uxth	r3, r3
 8017a26:	ebab 0303 	sub.w	r3, fp, r3
 8017a2a:	0c12      	lsrs	r2, r2, #16
 8017a2c:	f8de b000 	ldr.w	fp, [lr]
 8017a30:	fb05 a202 	mla	r2, r5, r2, sl
 8017a34:	fa13 f38b 	uxtah	r3, r3, fp
 8017a38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017a3c:	fa1f fb82 	uxth.w	fp, r2
 8017a40:	f8de 2000 	ldr.w	r2, [lr]
 8017a44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017a48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a4c:	b29b      	uxth	r3, r3
 8017a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a52:	4581      	cmp	r9, r0
 8017a54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017a58:	f84e 3b04 	str.w	r3, [lr], #4
 8017a5c:	d2db      	bcs.n	8017a16 <quorem+0x42>
 8017a5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017a62:	b933      	cbnz	r3, 8017a72 <quorem+0x9e>
 8017a64:	9b01      	ldr	r3, [sp, #4]
 8017a66:	3b04      	subs	r3, #4
 8017a68:	429e      	cmp	r6, r3
 8017a6a:	461a      	mov	r2, r3
 8017a6c:	d330      	bcc.n	8017ad0 <quorem+0xfc>
 8017a6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017a72:	4640      	mov	r0, r8
 8017a74:	f001 fb96 	bl	80191a4 <__mcmp>
 8017a78:	2800      	cmp	r0, #0
 8017a7a:	db25      	blt.n	8017ac8 <quorem+0xf4>
 8017a7c:	3501      	adds	r5, #1
 8017a7e:	4630      	mov	r0, r6
 8017a80:	f04f 0c00 	mov.w	ip, #0
 8017a84:	f857 2b04 	ldr.w	r2, [r7], #4
 8017a88:	f8d0 e000 	ldr.w	lr, [r0]
 8017a8c:	b293      	uxth	r3, r2
 8017a8e:	ebac 0303 	sub.w	r3, ip, r3
 8017a92:	0c12      	lsrs	r2, r2, #16
 8017a94:	fa13 f38e 	uxtah	r3, r3, lr
 8017a98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017aa6:	45b9      	cmp	r9, r7
 8017aa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017aac:	f840 3b04 	str.w	r3, [r0], #4
 8017ab0:	d2e8      	bcs.n	8017a84 <quorem+0xb0>
 8017ab2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017ab6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017aba:	b92a      	cbnz	r2, 8017ac8 <quorem+0xf4>
 8017abc:	3b04      	subs	r3, #4
 8017abe:	429e      	cmp	r6, r3
 8017ac0:	461a      	mov	r2, r3
 8017ac2:	d30b      	bcc.n	8017adc <quorem+0x108>
 8017ac4:	f8c8 4010 	str.w	r4, [r8, #16]
 8017ac8:	4628      	mov	r0, r5
 8017aca:	b003      	add	sp, #12
 8017acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad0:	6812      	ldr	r2, [r2, #0]
 8017ad2:	3b04      	subs	r3, #4
 8017ad4:	2a00      	cmp	r2, #0
 8017ad6:	d1ca      	bne.n	8017a6e <quorem+0x9a>
 8017ad8:	3c01      	subs	r4, #1
 8017ada:	e7c5      	b.n	8017a68 <quorem+0x94>
 8017adc:	6812      	ldr	r2, [r2, #0]
 8017ade:	3b04      	subs	r3, #4
 8017ae0:	2a00      	cmp	r2, #0
 8017ae2:	d1ef      	bne.n	8017ac4 <quorem+0xf0>
 8017ae4:	3c01      	subs	r4, #1
 8017ae6:	e7ea      	b.n	8017abe <quorem+0xea>
 8017ae8:	2000      	movs	r0, #0
 8017aea:	e7ee      	b.n	8017aca <quorem+0xf6>
 8017aec:	0000      	movs	r0, r0
	...

08017af0 <_dtoa_r>:
 8017af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af4:	ec57 6b10 	vmov	r6, r7, d0
 8017af8:	b097      	sub	sp, #92	; 0x5c
 8017afa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017afc:	9106      	str	r1, [sp, #24]
 8017afe:	4604      	mov	r4, r0
 8017b00:	920b      	str	r2, [sp, #44]	; 0x2c
 8017b02:	9312      	str	r3, [sp, #72]	; 0x48
 8017b04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017b08:	e9cd 6700 	strd	r6, r7, [sp]
 8017b0c:	b93d      	cbnz	r5, 8017b1e <_dtoa_r+0x2e>
 8017b0e:	2010      	movs	r0, #16
 8017b10:	f7fe f924 	bl	8015d5c <malloc>
 8017b14:	6260      	str	r0, [r4, #36]	; 0x24
 8017b16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017b1a:	6005      	str	r5, [r0, #0]
 8017b1c:	60c5      	str	r5, [r0, #12]
 8017b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b20:	6819      	ldr	r1, [r3, #0]
 8017b22:	b151      	cbz	r1, 8017b3a <_dtoa_r+0x4a>
 8017b24:	685a      	ldr	r2, [r3, #4]
 8017b26:	604a      	str	r2, [r1, #4]
 8017b28:	2301      	movs	r3, #1
 8017b2a:	4093      	lsls	r3, r2
 8017b2c:	608b      	str	r3, [r1, #8]
 8017b2e:	4620      	mov	r0, r4
 8017b30:	f001 f918 	bl	8018d64 <_Bfree>
 8017b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b36:	2200      	movs	r2, #0
 8017b38:	601a      	str	r2, [r3, #0]
 8017b3a:	1e3b      	subs	r3, r7, #0
 8017b3c:	bfbb      	ittet	lt
 8017b3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017b42:	9301      	strlt	r3, [sp, #4]
 8017b44:	2300      	movge	r3, #0
 8017b46:	2201      	movlt	r2, #1
 8017b48:	bfac      	ite	ge
 8017b4a:	f8c8 3000 	strge.w	r3, [r8]
 8017b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8017b52:	4baf      	ldr	r3, [pc, #700]	; (8017e10 <_dtoa_r+0x320>)
 8017b54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017b58:	ea33 0308 	bics.w	r3, r3, r8
 8017b5c:	d114      	bne.n	8017b88 <_dtoa_r+0x98>
 8017b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b60:	f242 730f 	movw	r3, #9999	; 0x270f
 8017b64:	6013      	str	r3, [r2, #0]
 8017b66:	9b00      	ldr	r3, [sp, #0]
 8017b68:	b923      	cbnz	r3, 8017b74 <_dtoa_r+0x84>
 8017b6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017b6e:	2800      	cmp	r0, #0
 8017b70:	f000 8542 	beq.w	80185f8 <_dtoa_r+0xb08>
 8017b74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017e24 <_dtoa_r+0x334>
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f000 8544 	beq.w	8018608 <_dtoa_r+0xb18>
 8017b80:	f10b 0303 	add.w	r3, fp, #3
 8017b84:	f000 bd3e 	b.w	8018604 <_dtoa_r+0xb14>
 8017b88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	2300      	movs	r3, #0
 8017b90:	4630      	mov	r0, r6
 8017b92:	4639      	mov	r1, r7
 8017b94:	f7e8 ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b98:	4681      	mov	r9, r0
 8017b9a:	b168      	cbz	r0, 8017bb8 <_dtoa_r+0xc8>
 8017b9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b9e:	2301      	movs	r3, #1
 8017ba0:	6013      	str	r3, [r2, #0]
 8017ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	f000 8524 	beq.w	80185f2 <_dtoa_r+0xb02>
 8017baa:	4b9a      	ldr	r3, [pc, #616]	; (8017e14 <_dtoa_r+0x324>)
 8017bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017bae:	f103 3bff 	add.w	fp, r3, #4294967295
 8017bb2:	6013      	str	r3, [r2, #0]
 8017bb4:	f000 bd28 	b.w	8018608 <_dtoa_r+0xb18>
 8017bb8:	aa14      	add	r2, sp, #80	; 0x50
 8017bba:	a915      	add	r1, sp, #84	; 0x54
 8017bbc:	ec47 6b10 	vmov	d0, r6, r7
 8017bc0:	4620      	mov	r0, r4
 8017bc2:	f001 fbdd 	bl	8019380 <__d2b>
 8017bc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017bca:	9004      	str	r0, [sp, #16]
 8017bcc:	2d00      	cmp	r5, #0
 8017bce:	d07c      	beq.n	8017cca <_dtoa_r+0x1da>
 8017bd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017bd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017bd8:	46b2      	mov	sl, r6
 8017bda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017bde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017be2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017be6:	2200      	movs	r2, #0
 8017be8:	4b8b      	ldr	r3, [pc, #556]	; (8017e18 <_dtoa_r+0x328>)
 8017bea:	4650      	mov	r0, sl
 8017bec:	4659      	mov	r1, fp
 8017bee:	f7e8 fb4b 	bl	8000288 <__aeabi_dsub>
 8017bf2:	a381      	add	r3, pc, #516	; (adr r3, 8017df8 <_dtoa_r+0x308>)
 8017bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bf8:	f7e8 fcfe 	bl	80005f8 <__aeabi_dmul>
 8017bfc:	a380      	add	r3, pc, #512	; (adr r3, 8017e00 <_dtoa_r+0x310>)
 8017bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c02:	f7e8 fb43 	bl	800028c <__adddf3>
 8017c06:	4606      	mov	r6, r0
 8017c08:	4628      	mov	r0, r5
 8017c0a:	460f      	mov	r7, r1
 8017c0c:	f7e8 fc8a 	bl	8000524 <__aeabi_i2d>
 8017c10:	a37d      	add	r3, pc, #500	; (adr r3, 8017e08 <_dtoa_r+0x318>)
 8017c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c16:	f7e8 fcef 	bl	80005f8 <__aeabi_dmul>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	4630      	mov	r0, r6
 8017c20:	4639      	mov	r1, r7
 8017c22:	f7e8 fb33 	bl	800028c <__adddf3>
 8017c26:	4606      	mov	r6, r0
 8017c28:	460f      	mov	r7, r1
 8017c2a:	f7e8 ff95 	bl	8000b58 <__aeabi_d2iz>
 8017c2e:	2200      	movs	r2, #0
 8017c30:	4682      	mov	sl, r0
 8017c32:	2300      	movs	r3, #0
 8017c34:	4630      	mov	r0, r6
 8017c36:	4639      	mov	r1, r7
 8017c38:	f7e8 ff50 	bl	8000adc <__aeabi_dcmplt>
 8017c3c:	b148      	cbz	r0, 8017c52 <_dtoa_r+0x162>
 8017c3e:	4650      	mov	r0, sl
 8017c40:	f7e8 fc70 	bl	8000524 <__aeabi_i2d>
 8017c44:	4632      	mov	r2, r6
 8017c46:	463b      	mov	r3, r7
 8017c48:	f7e8 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017c4c:	b908      	cbnz	r0, 8017c52 <_dtoa_r+0x162>
 8017c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c52:	f1ba 0f16 	cmp.w	sl, #22
 8017c56:	d859      	bhi.n	8017d0c <_dtoa_r+0x21c>
 8017c58:	4970      	ldr	r1, [pc, #448]	; (8017e1c <_dtoa_r+0x32c>)
 8017c5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c66:	f7e8 ff57 	bl	8000b18 <__aeabi_dcmpgt>
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	d050      	beq.n	8017d10 <_dtoa_r+0x220>
 8017c6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c72:	2300      	movs	r3, #0
 8017c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c78:	1b5d      	subs	r5, r3, r5
 8017c7a:	f1b5 0801 	subs.w	r8, r5, #1
 8017c7e:	bf49      	itett	mi
 8017c80:	f1c5 0301 	rsbmi	r3, r5, #1
 8017c84:	2300      	movpl	r3, #0
 8017c86:	9305      	strmi	r3, [sp, #20]
 8017c88:	f04f 0800 	movmi.w	r8, #0
 8017c8c:	bf58      	it	pl
 8017c8e:	9305      	strpl	r3, [sp, #20]
 8017c90:	f1ba 0f00 	cmp.w	sl, #0
 8017c94:	db3e      	blt.n	8017d14 <_dtoa_r+0x224>
 8017c96:	2300      	movs	r3, #0
 8017c98:	44d0      	add	r8, sl
 8017c9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017c9e:	9307      	str	r3, [sp, #28]
 8017ca0:	9b06      	ldr	r3, [sp, #24]
 8017ca2:	2b09      	cmp	r3, #9
 8017ca4:	f200 8090 	bhi.w	8017dc8 <_dtoa_r+0x2d8>
 8017ca8:	2b05      	cmp	r3, #5
 8017caa:	bfc4      	itt	gt
 8017cac:	3b04      	subgt	r3, #4
 8017cae:	9306      	strgt	r3, [sp, #24]
 8017cb0:	9b06      	ldr	r3, [sp, #24]
 8017cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8017cb6:	bfcc      	ite	gt
 8017cb8:	2500      	movgt	r5, #0
 8017cba:	2501      	movle	r5, #1
 8017cbc:	2b03      	cmp	r3, #3
 8017cbe:	f200 808f 	bhi.w	8017de0 <_dtoa_r+0x2f0>
 8017cc2:	e8df f003 	tbb	[pc, r3]
 8017cc6:	7f7d      	.short	0x7f7d
 8017cc8:	7131      	.short	0x7131
 8017cca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017cce:	441d      	add	r5, r3
 8017cd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017cd4:	2820      	cmp	r0, #32
 8017cd6:	dd13      	ble.n	8017d00 <_dtoa_r+0x210>
 8017cd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017cdc:	9b00      	ldr	r3, [sp, #0]
 8017cde:	fa08 f800 	lsl.w	r8, r8, r0
 8017ce2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017ce6:	fa23 f000 	lsr.w	r0, r3, r0
 8017cea:	ea48 0000 	orr.w	r0, r8, r0
 8017cee:	f7e8 fc09 	bl	8000504 <__aeabi_ui2d>
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	4682      	mov	sl, r0
 8017cf6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017cfa:	3d01      	subs	r5, #1
 8017cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8017cfe:	e772      	b.n	8017be6 <_dtoa_r+0xf6>
 8017d00:	9b00      	ldr	r3, [sp, #0]
 8017d02:	f1c0 0020 	rsb	r0, r0, #32
 8017d06:	fa03 f000 	lsl.w	r0, r3, r0
 8017d0a:	e7f0      	b.n	8017cee <_dtoa_r+0x1fe>
 8017d0c:	2301      	movs	r3, #1
 8017d0e:	e7b1      	b.n	8017c74 <_dtoa_r+0x184>
 8017d10:	900f      	str	r0, [sp, #60]	; 0x3c
 8017d12:	e7b0      	b.n	8017c76 <_dtoa_r+0x186>
 8017d14:	9b05      	ldr	r3, [sp, #20]
 8017d16:	eba3 030a 	sub.w	r3, r3, sl
 8017d1a:	9305      	str	r3, [sp, #20]
 8017d1c:	f1ca 0300 	rsb	r3, sl, #0
 8017d20:	9307      	str	r3, [sp, #28]
 8017d22:	2300      	movs	r3, #0
 8017d24:	930e      	str	r3, [sp, #56]	; 0x38
 8017d26:	e7bb      	b.n	8017ca0 <_dtoa_r+0x1b0>
 8017d28:	2301      	movs	r3, #1
 8017d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8017d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	dd59      	ble.n	8017de6 <_dtoa_r+0x2f6>
 8017d32:	9302      	str	r3, [sp, #8]
 8017d34:	4699      	mov	r9, r3
 8017d36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017d38:	2200      	movs	r2, #0
 8017d3a:	6072      	str	r2, [r6, #4]
 8017d3c:	2204      	movs	r2, #4
 8017d3e:	f102 0014 	add.w	r0, r2, #20
 8017d42:	4298      	cmp	r0, r3
 8017d44:	6871      	ldr	r1, [r6, #4]
 8017d46:	d953      	bls.n	8017df0 <_dtoa_r+0x300>
 8017d48:	4620      	mov	r0, r4
 8017d4a:	f000 ffd7 	bl	8018cfc <_Balloc>
 8017d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d50:	6030      	str	r0, [r6, #0]
 8017d52:	f1b9 0f0e 	cmp.w	r9, #14
 8017d56:	f8d3 b000 	ldr.w	fp, [r3]
 8017d5a:	f200 80e6 	bhi.w	8017f2a <_dtoa_r+0x43a>
 8017d5e:	2d00      	cmp	r5, #0
 8017d60:	f000 80e3 	beq.w	8017f2a <_dtoa_r+0x43a>
 8017d64:	ed9d 7b00 	vldr	d7, [sp]
 8017d68:	f1ba 0f00 	cmp.w	sl, #0
 8017d6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017d70:	dd74      	ble.n	8017e5c <_dtoa_r+0x36c>
 8017d72:	4a2a      	ldr	r2, [pc, #168]	; (8017e1c <_dtoa_r+0x32c>)
 8017d74:	f00a 030f 	and.w	r3, sl, #15
 8017d78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017d7c:	ed93 7b00 	vldr	d7, [r3]
 8017d80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017d84:	06f0      	lsls	r0, r6, #27
 8017d86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017d8a:	d565      	bpl.n	8017e58 <_dtoa_r+0x368>
 8017d8c:	4b24      	ldr	r3, [pc, #144]	; (8017e20 <_dtoa_r+0x330>)
 8017d8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017d92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017d96:	f7e8 fd59 	bl	800084c <__aeabi_ddiv>
 8017d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8017d9e:	f006 060f 	and.w	r6, r6, #15
 8017da2:	2503      	movs	r5, #3
 8017da4:	4f1e      	ldr	r7, [pc, #120]	; (8017e20 <_dtoa_r+0x330>)
 8017da6:	e04c      	b.n	8017e42 <_dtoa_r+0x352>
 8017da8:	2301      	movs	r3, #1
 8017daa:	930a      	str	r3, [sp, #40]	; 0x28
 8017dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dae:	4453      	add	r3, sl
 8017db0:	f103 0901 	add.w	r9, r3, #1
 8017db4:	9302      	str	r3, [sp, #8]
 8017db6:	464b      	mov	r3, r9
 8017db8:	2b01      	cmp	r3, #1
 8017dba:	bfb8      	it	lt
 8017dbc:	2301      	movlt	r3, #1
 8017dbe:	e7ba      	b.n	8017d36 <_dtoa_r+0x246>
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	e7b2      	b.n	8017d2a <_dtoa_r+0x23a>
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	e7f0      	b.n	8017daa <_dtoa_r+0x2ba>
 8017dc8:	2501      	movs	r5, #1
 8017dca:	2300      	movs	r3, #0
 8017dcc:	9306      	str	r3, [sp, #24]
 8017dce:	950a      	str	r5, [sp, #40]	; 0x28
 8017dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8017dd4:	9302      	str	r3, [sp, #8]
 8017dd6:	4699      	mov	r9, r3
 8017dd8:	2200      	movs	r2, #0
 8017dda:	2312      	movs	r3, #18
 8017ddc:	920b      	str	r2, [sp, #44]	; 0x2c
 8017dde:	e7aa      	b.n	8017d36 <_dtoa_r+0x246>
 8017de0:	2301      	movs	r3, #1
 8017de2:	930a      	str	r3, [sp, #40]	; 0x28
 8017de4:	e7f4      	b.n	8017dd0 <_dtoa_r+0x2e0>
 8017de6:	2301      	movs	r3, #1
 8017de8:	9302      	str	r3, [sp, #8]
 8017dea:	4699      	mov	r9, r3
 8017dec:	461a      	mov	r2, r3
 8017dee:	e7f5      	b.n	8017ddc <_dtoa_r+0x2ec>
 8017df0:	3101      	adds	r1, #1
 8017df2:	6071      	str	r1, [r6, #4]
 8017df4:	0052      	lsls	r2, r2, #1
 8017df6:	e7a2      	b.n	8017d3e <_dtoa_r+0x24e>
 8017df8:	636f4361 	.word	0x636f4361
 8017dfc:	3fd287a7 	.word	0x3fd287a7
 8017e00:	8b60c8b3 	.word	0x8b60c8b3
 8017e04:	3fc68a28 	.word	0x3fc68a28
 8017e08:	509f79fb 	.word	0x509f79fb
 8017e0c:	3fd34413 	.word	0x3fd34413
 8017e10:	7ff00000 	.word	0x7ff00000
 8017e14:	0801b559 	.word	0x0801b559
 8017e18:	3ff80000 	.word	0x3ff80000
 8017e1c:	0801b618 	.word	0x0801b618
 8017e20:	0801b5f0 	.word	0x0801b5f0
 8017e24:	0801b5e1 	.word	0x0801b5e1
 8017e28:	07f1      	lsls	r1, r6, #31
 8017e2a:	d508      	bpl.n	8017e3e <_dtoa_r+0x34e>
 8017e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017e34:	f7e8 fbe0 	bl	80005f8 <__aeabi_dmul>
 8017e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017e3c:	3501      	adds	r5, #1
 8017e3e:	1076      	asrs	r6, r6, #1
 8017e40:	3708      	adds	r7, #8
 8017e42:	2e00      	cmp	r6, #0
 8017e44:	d1f0      	bne.n	8017e28 <_dtoa_r+0x338>
 8017e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e4e:	f7e8 fcfd 	bl	800084c <__aeabi_ddiv>
 8017e52:	e9cd 0100 	strd	r0, r1, [sp]
 8017e56:	e01a      	b.n	8017e8e <_dtoa_r+0x39e>
 8017e58:	2502      	movs	r5, #2
 8017e5a:	e7a3      	b.n	8017da4 <_dtoa_r+0x2b4>
 8017e5c:	f000 80a0 	beq.w	8017fa0 <_dtoa_r+0x4b0>
 8017e60:	f1ca 0600 	rsb	r6, sl, #0
 8017e64:	4b9f      	ldr	r3, [pc, #636]	; (80180e4 <_dtoa_r+0x5f4>)
 8017e66:	4fa0      	ldr	r7, [pc, #640]	; (80180e8 <_dtoa_r+0x5f8>)
 8017e68:	f006 020f 	and.w	r2, r6, #15
 8017e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017e78:	f7e8 fbbe 	bl	80005f8 <__aeabi_dmul>
 8017e7c:	e9cd 0100 	strd	r0, r1, [sp]
 8017e80:	1136      	asrs	r6, r6, #4
 8017e82:	2300      	movs	r3, #0
 8017e84:	2502      	movs	r5, #2
 8017e86:	2e00      	cmp	r6, #0
 8017e88:	d17f      	bne.n	8017f8a <_dtoa_r+0x49a>
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d1e1      	bne.n	8017e52 <_dtoa_r+0x362>
 8017e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	f000 8087 	beq.w	8017fa4 <_dtoa_r+0x4b4>
 8017e96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	4b93      	ldr	r3, [pc, #588]	; (80180ec <_dtoa_r+0x5fc>)
 8017e9e:	4630      	mov	r0, r6
 8017ea0:	4639      	mov	r1, r7
 8017ea2:	f7e8 fe1b 	bl	8000adc <__aeabi_dcmplt>
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	d07c      	beq.n	8017fa4 <_dtoa_r+0x4b4>
 8017eaa:	f1b9 0f00 	cmp.w	r9, #0
 8017eae:	d079      	beq.n	8017fa4 <_dtoa_r+0x4b4>
 8017eb0:	9b02      	ldr	r3, [sp, #8]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	dd35      	ble.n	8017f22 <_dtoa_r+0x432>
 8017eb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017eba:	9308      	str	r3, [sp, #32]
 8017ebc:	4639      	mov	r1, r7
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	4b8b      	ldr	r3, [pc, #556]	; (80180f0 <_dtoa_r+0x600>)
 8017ec2:	4630      	mov	r0, r6
 8017ec4:	f7e8 fb98 	bl	80005f8 <__aeabi_dmul>
 8017ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8017ecc:	9f02      	ldr	r7, [sp, #8]
 8017ece:	3501      	adds	r5, #1
 8017ed0:	4628      	mov	r0, r5
 8017ed2:	f7e8 fb27 	bl	8000524 <__aeabi_i2d>
 8017ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017eda:	f7e8 fb8d 	bl	80005f8 <__aeabi_dmul>
 8017ede:	2200      	movs	r2, #0
 8017ee0:	4b84      	ldr	r3, [pc, #528]	; (80180f4 <_dtoa_r+0x604>)
 8017ee2:	f7e8 f9d3 	bl	800028c <__adddf3>
 8017ee6:	4605      	mov	r5, r0
 8017ee8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017eec:	2f00      	cmp	r7, #0
 8017eee:	d15d      	bne.n	8017fac <_dtoa_r+0x4bc>
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	4b81      	ldr	r3, [pc, #516]	; (80180f8 <_dtoa_r+0x608>)
 8017ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ef8:	f7e8 f9c6 	bl	8000288 <__aeabi_dsub>
 8017efc:	462a      	mov	r2, r5
 8017efe:	4633      	mov	r3, r6
 8017f00:	e9cd 0100 	strd	r0, r1, [sp]
 8017f04:	f7e8 fe08 	bl	8000b18 <__aeabi_dcmpgt>
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	f040 8288 	bne.w	801841e <_dtoa_r+0x92e>
 8017f0e:	462a      	mov	r2, r5
 8017f10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f18:	f7e8 fde0 	bl	8000adc <__aeabi_dcmplt>
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	f040 827c 	bne.w	801841a <_dtoa_r+0x92a>
 8017f22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017f26:	e9cd 2300 	strd	r2, r3, [sp]
 8017f2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	f2c0 8150 	blt.w	80181d2 <_dtoa_r+0x6e2>
 8017f32:	f1ba 0f0e 	cmp.w	sl, #14
 8017f36:	f300 814c 	bgt.w	80181d2 <_dtoa_r+0x6e2>
 8017f3a:	4b6a      	ldr	r3, [pc, #424]	; (80180e4 <_dtoa_r+0x5f4>)
 8017f3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017f40:	ed93 7b00 	vldr	d7, [r3]
 8017f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017f4c:	f280 80d8 	bge.w	8018100 <_dtoa_r+0x610>
 8017f50:	f1b9 0f00 	cmp.w	r9, #0
 8017f54:	f300 80d4 	bgt.w	8018100 <_dtoa_r+0x610>
 8017f58:	f040 825e 	bne.w	8018418 <_dtoa_r+0x928>
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	4b66      	ldr	r3, [pc, #408]	; (80180f8 <_dtoa_r+0x608>)
 8017f60:	ec51 0b17 	vmov	r0, r1, d7
 8017f64:	f7e8 fb48 	bl	80005f8 <__aeabi_dmul>
 8017f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017f6c:	f7e8 fdca 	bl	8000b04 <__aeabi_dcmpge>
 8017f70:	464f      	mov	r7, r9
 8017f72:	464e      	mov	r6, r9
 8017f74:	2800      	cmp	r0, #0
 8017f76:	f040 8234 	bne.w	80183e2 <_dtoa_r+0x8f2>
 8017f7a:	2331      	movs	r3, #49	; 0x31
 8017f7c:	f10b 0501 	add.w	r5, fp, #1
 8017f80:	f88b 3000 	strb.w	r3, [fp]
 8017f84:	f10a 0a01 	add.w	sl, sl, #1
 8017f88:	e22f      	b.n	80183ea <_dtoa_r+0x8fa>
 8017f8a:	07f2      	lsls	r2, r6, #31
 8017f8c:	d505      	bpl.n	8017f9a <_dtoa_r+0x4aa>
 8017f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f92:	f7e8 fb31 	bl	80005f8 <__aeabi_dmul>
 8017f96:	3501      	adds	r5, #1
 8017f98:	2301      	movs	r3, #1
 8017f9a:	1076      	asrs	r6, r6, #1
 8017f9c:	3708      	adds	r7, #8
 8017f9e:	e772      	b.n	8017e86 <_dtoa_r+0x396>
 8017fa0:	2502      	movs	r5, #2
 8017fa2:	e774      	b.n	8017e8e <_dtoa_r+0x39e>
 8017fa4:	f8cd a020 	str.w	sl, [sp, #32]
 8017fa8:	464f      	mov	r7, r9
 8017faa:	e791      	b.n	8017ed0 <_dtoa_r+0x3e0>
 8017fac:	4b4d      	ldr	r3, [pc, #308]	; (80180e4 <_dtoa_r+0x5f4>)
 8017fae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017fb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d047      	beq.n	801804c <_dtoa_r+0x55c>
 8017fbc:	4602      	mov	r2, r0
 8017fbe:	460b      	mov	r3, r1
 8017fc0:	2000      	movs	r0, #0
 8017fc2:	494e      	ldr	r1, [pc, #312]	; (80180fc <_dtoa_r+0x60c>)
 8017fc4:	f7e8 fc42 	bl	800084c <__aeabi_ddiv>
 8017fc8:	462a      	mov	r2, r5
 8017fca:	4633      	mov	r3, r6
 8017fcc:	f7e8 f95c 	bl	8000288 <__aeabi_dsub>
 8017fd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017fd4:	465d      	mov	r5, fp
 8017fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017fda:	f7e8 fdbd 	bl	8000b58 <__aeabi_d2iz>
 8017fde:	4606      	mov	r6, r0
 8017fe0:	f7e8 faa0 	bl	8000524 <__aeabi_i2d>
 8017fe4:	4602      	mov	r2, r0
 8017fe6:	460b      	mov	r3, r1
 8017fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017fec:	f7e8 f94c 	bl	8000288 <__aeabi_dsub>
 8017ff0:	3630      	adds	r6, #48	; 0x30
 8017ff2:	f805 6b01 	strb.w	r6, [r5], #1
 8017ff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017ffa:	e9cd 0100 	strd	r0, r1, [sp]
 8017ffe:	f7e8 fd6d 	bl	8000adc <__aeabi_dcmplt>
 8018002:	2800      	cmp	r0, #0
 8018004:	d163      	bne.n	80180ce <_dtoa_r+0x5de>
 8018006:	e9dd 2300 	ldrd	r2, r3, [sp]
 801800a:	2000      	movs	r0, #0
 801800c:	4937      	ldr	r1, [pc, #220]	; (80180ec <_dtoa_r+0x5fc>)
 801800e:	f7e8 f93b 	bl	8000288 <__aeabi_dsub>
 8018012:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018016:	f7e8 fd61 	bl	8000adc <__aeabi_dcmplt>
 801801a:	2800      	cmp	r0, #0
 801801c:	f040 80b7 	bne.w	801818e <_dtoa_r+0x69e>
 8018020:	eba5 030b 	sub.w	r3, r5, fp
 8018024:	429f      	cmp	r7, r3
 8018026:	f77f af7c 	ble.w	8017f22 <_dtoa_r+0x432>
 801802a:	2200      	movs	r2, #0
 801802c:	4b30      	ldr	r3, [pc, #192]	; (80180f0 <_dtoa_r+0x600>)
 801802e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018032:	f7e8 fae1 	bl	80005f8 <__aeabi_dmul>
 8018036:	2200      	movs	r2, #0
 8018038:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801803c:	4b2c      	ldr	r3, [pc, #176]	; (80180f0 <_dtoa_r+0x600>)
 801803e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018042:	f7e8 fad9 	bl	80005f8 <__aeabi_dmul>
 8018046:	e9cd 0100 	strd	r0, r1, [sp]
 801804a:	e7c4      	b.n	8017fd6 <_dtoa_r+0x4e6>
 801804c:	462a      	mov	r2, r5
 801804e:	4633      	mov	r3, r6
 8018050:	f7e8 fad2 	bl	80005f8 <__aeabi_dmul>
 8018054:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018058:	eb0b 0507 	add.w	r5, fp, r7
 801805c:	465e      	mov	r6, fp
 801805e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018062:	f7e8 fd79 	bl	8000b58 <__aeabi_d2iz>
 8018066:	4607      	mov	r7, r0
 8018068:	f7e8 fa5c 	bl	8000524 <__aeabi_i2d>
 801806c:	3730      	adds	r7, #48	; 0x30
 801806e:	4602      	mov	r2, r0
 8018070:	460b      	mov	r3, r1
 8018072:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018076:	f7e8 f907 	bl	8000288 <__aeabi_dsub>
 801807a:	f806 7b01 	strb.w	r7, [r6], #1
 801807e:	42ae      	cmp	r6, r5
 8018080:	e9cd 0100 	strd	r0, r1, [sp]
 8018084:	f04f 0200 	mov.w	r2, #0
 8018088:	d126      	bne.n	80180d8 <_dtoa_r+0x5e8>
 801808a:	4b1c      	ldr	r3, [pc, #112]	; (80180fc <_dtoa_r+0x60c>)
 801808c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018090:	f7e8 f8fc 	bl	800028c <__adddf3>
 8018094:	4602      	mov	r2, r0
 8018096:	460b      	mov	r3, r1
 8018098:	e9dd 0100 	ldrd	r0, r1, [sp]
 801809c:	f7e8 fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 80180a0:	2800      	cmp	r0, #0
 80180a2:	d174      	bne.n	801818e <_dtoa_r+0x69e>
 80180a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80180a8:	2000      	movs	r0, #0
 80180aa:	4914      	ldr	r1, [pc, #80]	; (80180fc <_dtoa_r+0x60c>)
 80180ac:	f7e8 f8ec 	bl	8000288 <__aeabi_dsub>
 80180b0:	4602      	mov	r2, r0
 80180b2:	460b      	mov	r3, r1
 80180b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180b8:	f7e8 fd10 	bl	8000adc <__aeabi_dcmplt>
 80180bc:	2800      	cmp	r0, #0
 80180be:	f43f af30 	beq.w	8017f22 <_dtoa_r+0x432>
 80180c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80180c6:	2b30      	cmp	r3, #48	; 0x30
 80180c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80180cc:	d002      	beq.n	80180d4 <_dtoa_r+0x5e4>
 80180ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80180d2:	e04a      	b.n	801816a <_dtoa_r+0x67a>
 80180d4:	4615      	mov	r5, r2
 80180d6:	e7f4      	b.n	80180c2 <_dtoa_r+0x5d2>
 80180d8:	4b05      	ldr	r3, [pc, #20]	; (80180f0 <_dtoa_r+0x600>)
 80180da:	f7e8 fa8d 	bl	80005f8 <__aeabi_dmul>
 80180de:	e9cd 0100 	strd	r0, r1, [sp]
 80180e2:	e7bc      	b.n	801805e <_dtoa_r+0x56e>
 80180e4:	0801b618 	.word	0x0801b618
 80180e8:	0801b5f0 	.word	0x0801b5f0
 80180ec:	3ff00000 	.word	0x3ff00000
 80180f0:	40240000 	.word	0x40240000
 80180f4:	401c0000 	.word	0x401c0000
 80180f8:	40140000 	.word	0x40140000
 80180fc:	3fe00000 	.word	0x3fe00000
 8018100:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018104:	465d      	mov	r5, fp
 8018106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801810a:	4630      	mov	r0, r6
 801810c:	4639      	mov	r1, r7
 801810e:	f7e8 fb9d 	bl	800084c <__aeabi_ddiv>
 8018112:	f7e8 fd21 	bl	8000b58 <__aeabi_d2iz>
 8018116:	4680      	mov	r8, r0
 8018118:	f7e8 fa04 	bl	8000524 <__aeabi_i2d>
 801811c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018120:	f7e8 fa6a 	bl	80005f8 <__aeabi_dmul>
 8018124:	4602      	mov	r2, r0
 8018126:	460b      	mov	r3, r1
 8018128:	4630      	mov	r0, r6
 801812a:	4639      	mov	r1, r7
 801812c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018130:	f7e8 f8aa 	bl	8000288 <__aeabi_dsub>
 8018134:	f805 6b01 	strb.w	r6, [r5], #1
 8018138:	eba5 060b 	sub.w	r6, r5, fp
 801813c:	45b1      	cmp	r9, r6
 801813e:	4602      	mov	r2, r0
 8018140:	460b      	mov	r3, r1
 8018142:	d139      	bne.n	80181b8 <_dtoa_r+0x6c8>
 8018144:	f7e8 f8a2 	bl	800028c <__adddf3>
 8018148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801814c:	4606      	mov	r6, r0
 801814e:	460f      	mov	r7, r1
 8018150:	f7e8 fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8018154:	b9c8      	cbnz	r0, 801818a <_dtoa_r+0x69a>
 8018156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801815a:	4630      	mov	r0, r6
 801815c:	4639      	mov	r1, r7
 801815e:	f7e8 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8018162:	b110      	cbz	r0, 801816a <_dtoa_r+0x67a>
 8018164:	f018 0f01 	tst.w	r8, #1
 8018168:	d10f      	bne.n	801818a <_dtoa_r+0x69a>
 801816a:	9904      	ldr	r1, [sp, #16]
 801816c:	4620      	mov	r0, r4
 801816e:	f000 fdf9 	bl	8018d64 <_Bfree>
 8018172:	2300      	movs	r3, #0
 8018174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018176:	702b      	strb	r3, [r5, #0]
 8018178:	f10a 0301 	add.w	r3, sl, #1
 801817c:	6013      	str	r3, [r2, #0]
 801817e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018180:	2b00      	cmp	r3, #0
 8018182:	f000 8241 	beq.w	8018608 <_dtoa_r+0xb18>
 8018186:	601d      	str	r5, [r3, #0]
 8018188:	e23e      	b.n	8018608 <_dtoa_r+0xb18>
 801818a:	f8cd a020 	str.w	sl, [sp, #32]
 801818e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018192:	2a39      	cmp	r2, #57	; 0x39
 8018194:	f105 33ff 	add.w	r3, r5, #4294967295
 8018198:	d108      	bne.n	80181ac <_dtoa_r+0x6bc>
 801819a:	459b      	cmp	fp, r3
 801819c:	d10a      	bne.n	80181b4 <_dtoa_r+0x6c4>
 801819e:	9b08      	ldr	r3, [sp, #32]
 80181a0:	3301      	adds	r3, #1
 80181a2:	9308      	str	r3, [sp, #32]
 80181a4:	2330      	movs	r3, #48	; 0x30
 80181a6:	f88b 3000 	strb.w	r3, [fp]
 80181aa:	465b      	mov	r3, fp
 80181ac:	781a      	ldrb	r2, [r3, #0]
 80181ae:	3201      	adds	r2, #1
 80181b0:	701a      	strb	r2, [r3, #0]
 80181b2:	e78c      	b.n	80180ce <_dtoa_r+0x5de>
 80181b4:	461d      	mov	r5, r3
 80181b6:	e7ea      	b.n	801818e <_dtoa_r+0x69e>
 80181b8:	2200      	movs	r2, #0
 80181ba:	4b9b      	ldr	r3, [pc, #620]	; (8018428 <_dtoa_r+0x938>)
 80181bc:	f7e8 fa1c 	bl	80005f8 <__aeabi_dmul>
 80181c0:	2200      	movs	r2, #0
 80181c2:	2300      	movs	r3, #0
 80181c4:	4606      	mov	r6, r0
 80181c6:	460f      	mov	r7, r1
 80181c8:	f7e8 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80181cc:	2800      	cmp	r0, #0
 80181ce:	d09a      	beq.n	8018106 <_dtoa_r+0x616>
 80181d0:	e7cb      	b.n	801816a <_dtoa_r+0x67a>
 80181d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80181d4:	2a00      	cmp	r2, #0
 80181d6:	f000 808b 	beq.w	80182f0 <_dtoa_r+0x800>
 80181da:	9a06      	ldr	r2, [sp, #24]
 80181dc:	2a01      	cmp	r2, #1
 80181de:	dc6e      	bgt.n	80182be <_dtoa_r+0x7ce>
 80181e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80181e2:	2a00      	cmp	r2, #0
 80181e4:	d067      	beq.n	80182b6 <_dtoa_r+0x7c6>
 80181e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80181ea:	9f07      	ldr	r7, [sp, #28]
 80181ec:	9d05      	ldr	r5, [sp, #20]
 80181ee:	9a05      	ldr	r2, [sp, #20]
 80181f0:	2101      	movs	r1, #1
 80181f2:	441a      	add	r2, r3
 80181f4:	4620      	mov	r0, r4
 80181f6:	9205      	str	r2, [sp, #20]
 80181f8:	4498      	add	r8, r3
 80181fa:	f000 fe91 	bl	8018f20 <__i2b>
 80181fe:	4606      	mov	r6, r0
 8018200:	2d00      	cmp	r5, #0
 8018202:	dd0c      	ble.n	801821e <_dtoa_r+0x72e>
 8018204:	f1b8 0f00 	cmp.w	r8, #0
 8018208:	dd09      	ble.n	801821e <_dtoa_r+0x72e>
 801820a:	4545      	cmp	r5, r8
 801820c:	9a05      	ldr	r2, [sp, #20]
 801820e:	462b      	mov	r3, r5
 8018210:	bfa8      	it	ge
 8018212:	4643      	movge	r3, r8
 8018214:	1ad2      	subs	r2, r2, r3
 8018216:	9205      	str	r2, [sp, #20]
 8018218:	1aed      	subs	r5, r5, r3
 801821a:	eba8 0803 	sub.w	r8, r8, r3
 801821e:	9b07      	ldr	r3, [sp, #28]
 8018220:	b1eb      	cbz	r3, 801825e <_dtoa_r+0x76e>
 8018222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018224:	2b00      	cmp	r3, #0
 8018226:	d067      	beq.n	80182f8 <_dtoa_r+0x808>
 8018228:	b18f      	cbz	r7, 801824e <_dtoa_r+0x75e>
 801822a:	4631      	mov	r1, r6
 801822c:	463a      	mov	r2, r7
 801822e:	4620      	mov	r0, r4
 8018230:	f000 ff16 	bl	8019060 <__pow5mult>
 8018234:	9a04      	ldr	r2, [sp, #16]
 8018236:	4601      	mov	r1, r0
 8018238:	4606      	mov	r6, r0
 801823a:	4620      	mov	r0, r4
 801823c:	f000 fe79 	bl	8018f32 <__multiply>
 8018240:	9904      	ldr	r1, [sp, #16]
 8018242:	9008      	str	r0, [sp, #32]
 8018244:	4620      	mov	r0, r4
 8018246:	f000 fd8d 	bl	8018d64 <_Bfree>
 801824a:	9b08      	ldr	r3, [sp, #32]
 801824c:	9304      	str	r3, [sp, #16]
 801824e:	9b07      	ldr	r3, [sp, #28]
 8018250:	1bda      	subs	r2, r3, r7
 8018252:	d004      	beq.n	801825e <_dtoa_r+0x76e>
 8018254:	9904      	ldr	r1, [sp, #16]
 8018256:	4620      	mov	r0, r4
 8018258:	f000 ff02 	bl	8019060 <__pow5mult>
 801825c:	9004      	str	r0, [sp, #16]
 801825e:	2101      	movs	r1, #1
 8018260:	4620      	mov	r0, r4
 8018262:	f000 fe5d 	bl	8018f20 <__i2b>
 8018266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018268:	4607      	mov	r7, r0
 801826a:	2b00      	cmp	r3, #0
 801826c:	f000 81d0 	beq.w	8018610 <_dtoa_r+0xb20>
 8018270:	461a      	mov	r2, r3
 8018272:	4601      	mov	r1, r0
 8018274:	4620      	mov	r0, r4
 8018276:	f000 fef3 	bl	8019060 <__pow5mult>
 801827a:	9b06      	ldr	r3, [sp, #24]
 801827c:	2b01      	cmp	r3, #1
 801827e:	4607      	mov	r7, r0
 8018280:	dc40      	bgt.n	8018304 <_dtoa_r+0x814>
 8018282:	9b00      	ldr	r3, [sp, #0]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d139      	bne.n	80182fc <_dtoa_r+0x80c>
 8018288:	9b01      	ldr	r3, [sp, #4]
 801828a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801828e:	2b00      	cmp	r3, #0
 8018290:	d136      	bne.n	8018300 <_dtoa_r+0x810>
 8018292:	9b01      	ldr	r3, [sp, #4]
 8018294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018298:	0d1b      	lsrs	r3, r3, #20
 801829a:	051b      	lsls	r3, r3, #20
 801829c:	b12b      	cbz	r3, 80182aa <_dtoa_r+0x7ba>
 801829e:	9b05      	ldr	r3, [sp, #20]
 80182a0:	3301      	adds	r3, #1
 80182a2:	9305      	str	r3, [sp, #20]
 80182a4:	f108 0801 	add.w	r8, r8, #1
 80182a8:	2301      	movs	r3, #1
 80182aa:	9307      	str	r3, [sp, #28]
 80182ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d12a      	bne.n	8018308 <_dtoa_r+0x818>
 80182b2:	2001      	movs	r0, #1
 80182b4:	e030      	b.n	8018318 <_dtoa_r+0x828>
 80182b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80182b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80182bc:	e795      	b.n	80181ea <_dtoa_r+0x6fa>
 80182be:	9b07      	ldr	r3, [sp, #28]
 80182c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80182c4:	42bb      	cmp	r3, r7
 80182c6:	bfbf      	itttt	lt
 80182c8:	9b07      	ldrlt	r3, [sp, #28]
 80182ca:	9707      	strlt	r7, [sp, #28]
 80182cc:	1afa      	sublt	r2, r7, r3
 80182ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80182d0:	bfbb      	ittet	lt
 80182d2:	189b      	addlt	r3, r3, r2
 80182d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80182d6:	1bdf      	subge	r7, r3, r7
 80182d8:	2700      	movlt	r7, #0
 80182da:	f1b9 0f00 	cmp.w	r9, #0
 80182de:	bfb5      	itete	lt
 80182e0:	9b05      	ldrlt	r3, [sp, #20]
 80182e2:	9d05      	ldrge	r5, [sp, #20]
 80182e4:	eba3 0509 	sublt.w	r5, r3, r9
 80182e8:	464b      	movge	r3, r9
 80182ea:	bfb8      	it	lt
 80182ec:	2300      	movlt	r3, #0
 80182ee:	e77e      	b.n	80181ee <_dtoa_r+0x6fe>
 80182f0:	9f07      	ldr	r7, [sp, #28]
 80182f2:	9d05      	ldr	r5, [sp, #20]
 80182f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80182f6:	e783      	b.n	8018200 <_dtoa_r+0x710>
 80182f8:	9a07      	ldr	r2, [sp, #28]
 80182fa:	e7ab      	b.n	8018254 <_dtoa_r+0x764>
 80182fc:	2300      	movs	r3, #0
 80182fe:	e7d4      	b.n	80182aa <_dtoa_r+0x7ba>
 8018300:	9b00      	ldr	r3, [sp, #0]
 8018302:	e7d2      	b.n	80182aa <_dtoa_r+0x7ba>
 8018304:	2300      	movs	r3, #0
 8018306:	9307      	str	r3, [sp, #28]
 8018308:	693b      	ldr	r3, [r7, #16]
 801830a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801830e:	6918      	ldr	r0, [r3, #16]
 8018310:	f000 fdb8 	bl	8018e84 <__hi0bits>
 8018314:	f1c0 0020 	rsb	r0, r0, #32
 8018318:	4440      	add	r0, r8
 801831a:	f010 001f 	ands.w	r0, r0, #31
 801831e:	d047      	beq.n	80183b0 <_dtoa_r+0x8c0>
 8018320:	f1c0 0320 	rsb	r3, r0, #32
 8018324:	2b04      	cmp	r3, #4
 8018326:	dd3b      	ble.n	80183a0 <_dtoa_r+0x8b0>
 8018328:	9b05      	ldr	r3, [sp, #20]
 801832a:	f1c0 001c 	rsb	r0, r0, #28
 801832e:	4403      	add	r3, r0
 8018330:	9305      	str	r3, [sp, #20]
 8018332:	4405      	add	r5, r0
 8018334:	4480      	add	r8, r0
 8018336:	9b05      	ldr	r3, [sp, #20]
 8018338:	2b00      	cmp	r3, #0
 801833a:	dd05      	ble.n	8018348 <_dtoa_r+0x858>
 801833c:	461a      	mov	r2, r3
 801833e:	9904      	ldr	r1, [sp, #16]
 8018340:	4620      	mov	r0, r4
 8018342:	f000 fedb 	bl	80190fc <__lshift>
 8018346:	9004      	str	r0, [sp, #16]
 8018348:	f1b8 0f00 	cmp.w	r8, #0
 801834c:	dd05      	ble.n	801835a <_dtoa_r+0x86a>
 801834e:	4639      	mov	r1, r7
 8018350:	4642      	mov	r2, r8
 8018352:	4620      	mov	r0, r4
 8018354:	f000 fed2 	bl	80190fc <__lshift>
 8018358:	4607      	mov	r7, r0
 801835a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801835c:	b353      	cbz	r3, 80183b4 <_dtoa_r+0x8c4>
 801835e:	4639      	mov	r1, r7
 8018360:	9804      	ldr	r0, [sp, #16]
 8018362:	f000 ff1f 	bl	80191a4 <__mcmp>
 8018366:	2800      	cmp	r0, #0
 8018368:	da24      	bge.n	80183b4 <_dtoa_r+0x8c4>
 801836a:	2300      	movs	r3, #0
 801836c:	220a      	movs	r2, #10
 801836e:	9904      	ldr	r1, [sp, #16]
 8018370:	4620      	mov	r0, r4
 8018372:	f000 fd0e 	bl	8018d92 <__multadd>
 8018376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018378:	9004      	str	r0, [sp, #16]
 801837a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801837e:	2b00      	cmp	r3, #0
 8018380:	f000 814d 	beq.w	801861e <_dtoa_r+0xb2e>
 8018384:	2300      	movs	r3, #0
 8018386:	4631      	mov	r1, r6
 8018388:	220a      	movs	r2, #10
 801838a:	4620      	mov	r0, r4
 801838c:	f000 fd01 	bl	8018d92 <__multadd>
 8018390:	9b02      	ldr	r3, [sp, #8]
 8018392:	2b00      	cmp	r3, #0
 8018394:	4606      	mov	r6, r0
 8018396:	dc4f      	bgt.n	8018438 <_dtoa_r+0x948>
 8018398:	9b06      	ldr	r3, [sp, #24]
 801839a:	2b02      	cmp	r3, #2
 801839c:	dd4c      	ble.n	8018438 <_dtoa_r+0x948>
 801839e:	e011      	b.n	80183c4 <_dtoa_r+0x8d4>
 80183a0:	d0c9      	beq.n	8018336 <_dtoa_r+0x846>
 80183a2:	9a05      	ldr	r2, [sp, #20]
 80183a4:	331c      	adds	r3, #28
 80183a6:	441a      	add	r2, r3
 80183a8:	9205      	str	r2, [sp, #20]
 80183aa:	441d      	add	r5, r3
 80183ac:	4498      	add	r8, r3
 80183ae:	e7c2      	b.n	8018336 <_dtoa_r+0x846>
 80183b0:	4603      	mov	r3, r0
 80183b2:	e7f6      	b.n	80183a2 <_dtoa_r+0x8b2>
 80183b4:	f1b9 0f00 	cmp.w	r9, #0
 80183b8:	dc38      	bgt.n	801842c <_dtoa_r+0x93c>
 80183ba:	9b06      	ldr	r3, [sp, #24]
 80183bc:	2b02      	cmp	r3, #2
 80183be:	dd35      	ble.n	801842c <_dtoa_r+0x93c>
 80183c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80183c4:	9b02      	ldr	r3, [sp, #8]
 80183c6:	b963      	cbnz	r3, 80183e2 <_dtoa_r+0x8f2>
 80183c8:	4639      	mov	r1, r7
 80183ca:	2205      	movs	r2, #5
 80183cc:	4620      	mov	r0, r4
 80183ce:	f000 fce0 	bl	8018d92 <__multadd>
 80183d2:	4601      	mov	r1, r0
 80183d4:	4607      	mov	r7, r0
 80183d6:	9804      	ldr	r0, [sp, #16]
 80183d8:	f000 fee4 	bl	80191a4 <__mcmp>
 80183dc:	2800      	cmp	r0, #0
 80183de:	f73f adcc 	bgt.w	8017f7a <_dtoa_r+0x48a>
 80183e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183e4:	465d      	mov	r5, fp
 80183e6:	ea6f 0a03 	mvn.w	sl, r3
 80183ea:	f04f 0900 	mov.w	r9, #0
 80183ee:	4639      	mov	r1, r7
 80183f0:	4620      	mov	r0, r4
 80183f2:	f000 fcb7 	bl	8018d64 <_Bfree>
 80183f6:	2e00      	cmp	r6, #0
 80183f8:	f43f aeb7 	beq.w	801816a <_dtoa_r+0x67a>
 80183fc:	f1b9 0f00 	cmp.w	r9, #0
 8018400:	d005      	beq.n	801840e <_dtoa_r+0x91e>
 8018402:	45b1      	cmp	r9, r6
 8018404:	d003      	beq.n	801840e <_dtoa_r+0x91e>
 8018406:	4649      	mov	r1, r9
 8018408:	4620      	mov	r0, r4
 801840a:	f000 fcab 	bl	8018d64 <_Bfree>
 801840e:	4631      	mov	r1, r6
 8018410:	4620      	mov	r0, r4
 8018412:	f000 fca7 	bl	8018d64 <_Bfree>
 8018416:	e6a8      	b.n	801816a <_dtoa_r+0x67a>
 8018418:	2700      	movs	r7, #0
 801841a:	463e      	mov	r6, r7
 801841c:	e7e1      	b.n	80183e2 <_dtoa_r+0x8f2>
 801841e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018422:	463e      	mov	r6, r7
 8018424:	e5a9      	b.n	8017f7a <_dtoa_r+0x48a>
 8018426:	bf00      	nop
 8018428:	40240000 	.word	0x40240000
 801842c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801842e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018432:	2b00      	cmp	r3, #0
 8018434:	f000 80fa 	beq.w	801862c <_dtoa_r+0xb3c>
 8018438:	2d00      	cmp	r5, #0
 801843a:	dd05      	ble.n	8018448 <_dtoa_r+0x958>
 801843c:	4631      	mov	r1, r6
 801843e:	462a      	mov	r2, r5
 8018440:	4620      	mov	r0, r4
 8018442:	f000 fe5b 	bl	80190fc <__lshift>
 8018446:	4606      	mov	r6, r0
 8018448:	9b07      	ldr	r3, [sp, #28]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d04c      	beq.n	80184e8 <_dtoa_r+0x9f8>
 801844e:	6871      	ldr	r1, [r6, #4]
 8018450:	4620      	mov	r0, r4
 8018452:	f000 fc53 	bl	8018cfc <_Balloc>
 8018456:	6932      	ldr	r2, [r6, #16]
 8018458:	3202      	adds	r2, #2
 801845a:	4605      	mov	r5, r0
 801845c:	0092      	lsls	r2, r2, #2
 801845e:	f106 010c 	add.w	r1, r6, #12
 8018462:	300c      	adds	r0, #12
 8018464:	f7fd fc8a 	bl	8015d7c <memcpy>
 8018468:	2201      	movs	r2, #1
 801846a:	4629      	mov	r1, r5
 801846c:	4620      	mov	r0, r4
 801846e:	f000 fe45 	bl	80190fc <__lshift>
 8018472:	9b00      	ldr	r3, [sp, #0]
 8018474:	f8cd b014 	str.w	fp, [sp, #20]
 8018478:	f003 0301 	and.w	r3, r3, #1
 801847c:	46b1      	mov	r9, r6
 801847e:	9307      	str	r3, [sp, #28]
 8018480:	4606      	mov	r6, r0
 8018482:	4639      	mov	r1, r7
 8018484:	9804      	ldr	r0, [sp, #16]
 8018486:	f7ff faa5 	bl	80179d4 <quorem>
 801848a:	4649      	mov	r1, r9
 801848c:	4605      	mov	r5, r0
 801848e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018492:	9804      	ldr	r0, [sp, #16]
 8018494:	f000 fe86 	bl	80191a4 <__mcmp>
 8018498:	4632      	mov	r2, r6
 801849a:	9000      	str	r0, [sp, #0]
 801849c:	4639      	mov	r1, r7
 801849e:	4620      	mov	r0, r4
 80184a0:	f000 fe9a 	bl	80191d8 <__mdiff>
 80184a4:	68c3      	ldr	r3, [r0, #12]
 80184a6:	4602      	mov	r2, r0
 80184a8:	bb03      	cbnz	r3, 80184ec <_dtoa_r+0x9fc>
 80184aa:	4601      	mov	r1, r0
 80184ac:	9008      	str	r0, [sp, #32]
 80184ae:	9804      	ldr	r0, [sp, #16]
 80184b0:	f000 fe78 	bl	80191a4 <__mcmp>
 80184b4:	9a08      	ldr	r2, [sp, #32]
 80184b6:	4603      	mov	r3, r0
 80184b8:	4611      	mov	r1, r2
 80184ba:	4620      	mov	r0, r4
 80184bc:	9308      	str	r3, [sp, #32]
 80184be:	f000 fc51 	bl	8018d64 <_Bfree>
 80184c2:	9b08      	ldr	r3, [sp, #32]
 80184c4:	b9a3      	cbnz	r3, 80184f0 <_dtoa_r+0xa00>
 80184c6:	9a06      	ldr	r2, [sp, #24]
 80184c8:	b992      	cbnz	r2, 80184f0 <_dtoa_r+0xa00>
 80184ca:	9a07      	ldr	r2, [sp, #28]
 80184cc:	b982      	cbnz	r2, 80184f0 <_dtoa_r+0xa00>
 80184ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80184d2:	d029      	beq.n	8018528 <_dtoa_r+0xa38>
 80184d4:	9b00      	ldr	r3, [sp, #0]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	dd01      	ble.n	80184de <_dtoa_r+0x9ee>
 80184da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80184de:	9b05      	ldr	r3, [sp, #20]
 80184e0:	1c5d      	adds	r5, r3, #1
 80184e2:	f883 8000 	strb.w	r8, [r3]
 80184e6:	e782      	b.n	80183ee <_dtoa_r+0x8fe>
 80184e8:	4630      	mov	r0, r6
 80184ea:	e7c2      	b.n	8018472 <_dtoa_r+0x982>
 80184ec:	2301      	movs	r3, #1
 80184ee:	e7e3      	b.n	80184b8 <_dtoa_r+0x9c8>
 80184f0:	9a00      	ldr	r2, [sp, #0]
 80184f2:	2a00      	cmp	r2, #0
 80184f4:	db04      	blt.n	8018500 <_dtoa_r+0xa10>
 80184f6:	d125      	bne.n	8018544 <_dtoa_r+0xa54>
 80184f8:	9a06      	ldr	r2, [sp, #24]
 80184fa:	bb1a      	cbnz	r2, 8018544 <_dtoa_r+0xa54>
 80184fc:	9a07      	ldr	r2, [sp, #28]
 80184fe:	bb0a      	cbnz	r2, 8018544 <_dtoa_r+0xa54>
 8018500:	2b00      	cmp	r3, #0
 8018502:	ddec      	ble.n	80184de <_dtoa_r+0x9ee>
 8018504:	2201      	movs	r2, #1
 8018506:	9904      	ldr	r1, [sp, #16]
 8018508:	4620      	mov	r0, r4
 801850a:	f000 fdf7 	bl	80190fc <__lshift>
 801850e:	4639      	mov	r1, r7
 8018510:	9004      	str	r0, [sp, #16]
 8018512:	f000 fe47 	bl	80191a4 <__mcmp>
 8018516:	2800      	cmp	r0, #0
 8018518:	dc03      	bgt.n	8018522 <_dtoa_r+0xa32>
 801851a:	d1e0      	bne.n	80184de <_dtoa_r+0x9ee>
 801851c:	f018 0f01 	tst.w	r8, #1
 8018520:	d0dd      	beq.n	80184de <_dtoa_r+0x9ee>
 8018522:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018526:	d1d8      	bne.n	80184da <_dtoa_r+0x9ea>
 8018528:	9b05      	ldr	r3, [sp, #20]
 801852a:	9a05      	ldr	r2, [sp, #20]
 801852c:	1c5d      	adds	r5, r3, #1
 801852e:	2339      	movs	r3, #57	; 0x39
 8018530:	7013      	strb	r3, [r2, #0]
 8018532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018536:	2b39      	cmp	r3, #57	; 0x39
 8018538:	f105 32ff 	add.w	r2, r5, #4294967295
 801853c:	d04f      	beq.n	80185de <_dtoa_r+0xaee>
 801853e:	3301      	adds	r3, #1
 8018540:	7013      	strb	r3, [r2, #0]
 8018542:	e754      	b.n	80183ee <_dtoa_r+0x8fe>
 8018544:	9a05      	ldr	r2, [sp, #20]
 8018546:	2b00      	cmp	r3, #0
 8018548:	f102 0501 	add.w	r5, r2, #1
 801854c:	dd06      	ble.n	801855c <_dtoa_r+0xa6c>
 801854e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018552:	d0e9      	beq.n	8018528 <_dtoa_r+0xa38>
 8018554:	f108 0801 	add.w	r8, r8, #1
 8018558:	9b05      	ldr	r3, [sp, #20]
 801855a:	e7c2      	b.n	80184e2 <_dtoa_r+0x9f2>
 801855c:	9a02      	ldr	r2, [sp, #8]
 801855e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018562:	eba5 030b 	sub.w	r3, r5, fp
 8018566:	4293      	cmp	r3, r2
 8018568:	d021      	beq.n	80185ae <_dtoa_r+0xabe>
 801856a:	2300      	movs	r3, #0
 801856c:	220a      	movs	r2, #10
 801856e:	9904      	ldr	r1, [sp, #16]
 8018570:	4620      	mov	r0, r4
 8018572:	f000 fc0e 	bl	8018d92 <__multadd>
 8018576:	45b1      	cmp	r9, r6
 8018578:	9004      	str	r0, [sp, #16]
 801857a:	f04f 0300 	mov.w	r3, #0
 801857e:	f04f 020a 	mov.w	r2, #10
 8018582:	4649      	mov	r1, r9
 8018584:	4620      	mov	r0, r4
 8018586:	d105      	bne.n	8018594 <_dtoa_r+0xaa4>
 8018588:	f000 fc03 	bl	8018d92 <__multadd>
 801858c:	4681      	mov	r9, r0
 801858e:	4606      	mov	r6, r0
 8018590:	9505      	str	r5, [sp, #20]
 8018592:	e776      	b.n	8018482 <_dtoa_r+0x992>
 8018594:	f000 fbfd 	bl	8018d92 <__multadd>
 8018598:	4631      	mov	r1, r6
 801859a:	4681      	mov	r9, r0
 801859c:	2300      	movs	r3, #0
 801859e:	220a      	movs	r2, #10
 80185a0:	4620      	mov	r0, r4
 80185a2:	f000 fbf6 	bl	8018d92 <__multadd>
 80185a6:	4606      	mov	r6, r0
 80185a8:	e7f2      	b.n	8018590 <_dtoa_r+0xaa0>
 80185aa:	f04f 0900 	mov.w	r9, #0
 80185ae:	2201      	movs	r2, #1
 80185b0:	9904      	ldr	r1, [sp, #16]
 80185b2:	4620      	mov	r0, r4
 80185b4:	f000 fda2 	bl	80190fc <__lshift>
 80185b8:	4639      	mov	r1, r7
 80185ba:	9004      	str	r0, [sp, #16]
 80185bc:	f000 fdf2 	bl	80191a4 <__mcmp>
 80185c0:	2800      	cmp	r0, #0
 80185c2:	dcb6      	bgt.n	8018532 <_dtoa_r+0xa42>
 80185c4:	d102      	bne.n	80185cc <_dtoa_r+0xadc>
 80185c6:	f018 0f01 	tst.w	r8, #1
 80185ca:	d1b2      	bne.n	8018532 <_dtoa_r+0xa42>
 80185cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80185d0:	2b30      	cmp	r3, #48	; 0x30
 80185d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80185d6:	f47f af0a 	bne.w	80183ee <_dtoa_r+0x8fe>
 80185da:	4615      	mov	r5, r2
 80185dc:	e7f6      	b.n	80185cc <_dtoa_r+0xadc>
 80185de:	4593      	cmp	fp, r2
 80185e0:	d105      	bne.n	80185ee <_dtoa_r+0xafe>
 80185e2:	2331      	movs	r3, #49	; 0x31
 80185e4:	f10a 0a01 	add.w	sl, sl, #1
 80185e8:	f88b 3000 	strb.w	r3, [fp]
 80185ec:	e6ff      	b.n	80183ee <_dtoa_r+0x8fe>
 80185ee:	4615      	mov	r5, r2
 80185f0:	e79f      	b.n	8018532 <_dtoa_r+0xa42>
 80185f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018658 <_dtoa_r+0xb68>
 80185f6:	e007      	b.n	8018608 <_dtoa_r+0xb18>
 80185f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 801865c <_dtoa_r+0xb6c>
 80185fe:	b11b      	cbz	r3, 8018608 <_dtoa_r+0xb18>
 8018600:	f10b 0308 	add.w	r3, fp, #8
 8018604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018606:	6013      	str	r3, [r2, #0]
 8018608:	4658      	mov	r0, fp
 801860a:	b017      	add	sp, #92	; 0x5c
 801860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018610:	9b06      	ldr	r3, [sp, #24]
 8018612:	2b01      	cmp	r3, #1
 8018614:	f77f ae35 	ble.w	8018282 <_dtoa_r+0x792>
 8018618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801861a:	9307      	str	r3, [sp, #28]
 801861c:	e649      	b.n	80182b2 <_dtoa_r+0x7c2>
 801861e:	9b02      	ldr	r3, [sp, #8]
 8018620:	2b00      	cmp	r3, #0
 8018622:	dc03      	bgt.n	801862c <_dtoa_r+0xb3c>
 8018624:	9b06      	ldr	r3, [sp, #24]
 8018626:	2b02      	cmp	r3, #2
 8018628:	f73f aecc 	bgt.w	80183c4 <_dtoa_r+0x8d4>
 801862c:	465d      	mov	r5, fp
 801862e:	4639      	mov	r1, r7
 8018630:	9804      	ldr	r0, [sp, #16]
 8018632:	f7ff f9cf 	bl	80179d4 <quorem>
 8018636:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801863a:	f805 8b01 	strb.w	r8, [r5], #1
 801863e:	9a02      	ldr	r2, [sp, #8]
 8018640:	eba5 030b 	sub.w	r3, r5, fp
 8018644:	429a      	cmp	r2, r3
 8018646:	ddb0      	ble.n	80185aa <_dtoa_r+0xaba>
 8018648:	2300      	movs	r3, #0
 801864a:	220a      	movs	r2, #10
 801864c:	9904      	ldr	r1, [sp, #16]
 801864e:	4620      	mov	r0, r4
 8018650:	f000 fb9f 	bl	8018d92 <__multadd>
 8018654:	9004      	str	r0, [sp, #16]
 8018656:	e7ea      	b.n	801862e <_dtoa_r+0xb3e>
 8018658:	0801b558 	.word	0x0801b558
 801865c:	0801b5d8 	.word	0x0801b5d8

08018660 <rshift>:
 8018660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018662:	6906      	ldr	r6, [r0, #16]
 8018664:	114b      	asrs	r3, r1, #5
 8018666:	429e      	cmp	r6, r3
 8018668:	f100 0414 	add.w	r4, r0, #20
 801866c:	dd30      	ble.n	80186d0 <rshift+0x70>
 801866e:	f011 011f 	ands.w	r1, r1, #31
 8018672:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018676:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801867a:	d108      	bne.n	801868e <rshift+0x2e>
 801867c:	4621      	mov	r1, r4
 801867e:	42b2      	cmp	r2, r6
 8018680:	460b      	mov	r3, r1
 8018682:	d211      	bcs.n	80186a8 <rshift+0x48>
 8018684:	f852 3b04 	ldr.w	r3, [r2], #4
 8018688:	f841 3b04 	str.w	r3, [r1], #4
 801868c:	e7f7      	b.n	801867e <rshift+0x1e>
 801868e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018692:	f1c1 0c20 	rsb	ip, r1, #32
 8018696:	40cd      	lsrs	r5, r1
 8018698:	3204      	adds	r2, #4
 801869a:	4623      	mov	r3, r4
 801869c:	42b2      	cmp	r2, r6
 801869e:	4617      	mov	r7, r2
 80186a0:	d30c      	bcc.n	80186bc <rshift+0x5c>
 80186a2:	601d      	str	r5, [r3, #0]
 80186a4:	b105      	cbz	r5, 80186a8 <rshift+0x48>
 80186a6:	3304      	adds	r3, #4
 80186a8:	1b1a      	subs	r2, r3, r4
 80186aa:	42a3      	cmp	r3, r4
 80186ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80186b0:	bf08      	it	eq
 80186b2:	2300      	moveq	r3, #0
 80186b4:	6102      	str	r2, [r0, #16]
 80186b6:	bf08      	it	eq
 80186b8:	6143      	streq	r3, [r0, #20]
 80186ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186bc:	683f      	ldr	r7, [r7, #0]
 80186be:	fa07 f70c 	lsl.w	r7, r7, ip
 80186c2:	433d      	orrs	r5, r7
 80186c4:	f843 5b04 	str.w	r5, [r3], #4
 80186c8:	f852 5b04 	ldr.w	r5, [r2], #4
 80186cc:	40cd      	lsrs	r5, r1
 80186ce:	e7e5      	b.n	801869c <rshift+0x3c>
 80186d0:	4623      	mov	r3, r4
 80186d2:	e7e9      	b.n	80186a8 <rshift+0x48>

080186d4 <__hexdig_fun>:
 80186d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80186d8:	2b09      	cmp	r3, #9
 80186da:	d802      	bhi.n	80186e2 <__hexdig_fun+0xe>
 80186dc:	3820      	subs	r0, #32
 80186de:	b2c0      	uxtb	r0, r0
 80186e0:	4770      	bx	lr
 80186e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80186e6:	2b05      	cmp	r3, #5
 80186e8:	d801      	bhi.n	80186ee <__hexdig_fun+0x1a>
 80186ea:	3847      	subs	r0, #71	; 0x47
 80186ec:	e7f7      	b.n	80186de <__hexdig_fun+0xa>
 80186ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80186f2:	2b05      	cmp	r3, #5
 80186f4:	d801      	bhi.n	80186fa <__hexdig_fun+0x26>
 80186f6:	3827      	subs	r0, #39	; 0x27
 80186f8:	e7f1      	b.n	80186de <__hexdig_fun+0xa>
 80186fa:	2000      	movs	r0, #0
 80186fc:	4770      	bx	lr

080186fe <__gethex>:
 80186fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018702:	b08b      	sub	sp, #44	; 0x2c
 8018704:	468a      	mov	sl, r1
 8018706:	9002      	str	r0, [sp, #8]
 8018708:	9816      	ldr	r0, [sp, #88]	; 0x58
 801870a:	9306      	str	r3, [sp, #24]
 801870c:	4690      	mov	r8, r2
 801870e:	f000 fad0 	bl	8018cb2 <__localeconv_l>
 8018712:	6803      	ldr	r3, [r0, #0]
 8018714:	9303      	str	r3, [sp, #12]
 8018716:	4618      	mov	r0, r3
 8018718:	f7e7 fd5a 	bl	80001d0 <strlen>
 801871c:	9b03      	ldr	r3, [sp, #12]
 801871e:	9001      	str	r0, [sp, #4]
 8018720:	4403      	add	r3, r0
 8018722:	f04f 0b00 	mov.w	fp, #0
 8018726:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801872a:	9307      	str	r3, [sp, #28]
 801872c:	f8da 3000 	ldr.w	r3, [sl]
 8018730:	3302      	adds	r3, #2
 8018732:	461f      	mov	r7, r3
 8018734:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018738:	2830      	cmp	r0, #48	; 0x30
 801873a:	d06c      	beq.n	8018816 <__gethex+0x118>
 801873c:	f7ff ffca 	bl	80186d4 <__hexdig_fun>
 8018740:	4604      	mov	r4, r0
 8018742:	2800      	cmp	r0, #0
 8018744:	d16a      	bne.n	801881c <__gethex+0x11e>
 8018746:	9a01      	ldr	r2, [sp, #4]
 8018748:	9903      	ldr	r1, [sp, #12]
 801874a:	4638      	mov	r0, r7
 801874c:	f001 f836 	bl	80197bc <strncmp>
 8018750:	2800      	cmp	r0, #0
 8018752:	d166      	bne.n	8018822 <__gethex+0x124>
 8018754:	9b01      	ldr	r3, [sp, #4]
 8018756:	5cf8      	ldrb	r0, [r7, r3]
 8018758:	18fe      	adds	r6, r7, r3
 801875a:	f7ff ffbb 	bl	80186d4 <__hexdig_fun>
 801875e:	2800      	cmp	r0, #0
 8018760:	d062      	beq.n	8018828 <__gethex+0x12a>
 8018762:	4633      	mov	r3, r6
 8018764:	7818      	ldrb	r0, [r3, #0]
 8018766:	2830      	cmp	r0, #48	; 0x30
 8018768:	461f      	mov	r7, r3
 801876a:	f103 0301 	add.w	r3, r3, #1
 801876e:	d0f9      	beq.n	8018764 <__gethex+0x66>
 8018770:	f7ff ffb0 	bl	80186d4 <__hexdig_fun>
 8018774:	fab0 f580 	clz	r5, r0
 8018778:	096d      	lsrs	r5, r5, #5
 801877a:	4634      	mov	r4, r6
 801877c:	f04f 0b01 	mov.w	fp, #1
 8018780:	463a      	mov	r2, r7
 8018782:	4616      	mov	r6, r2
 8018784:	3201      	adds	r2, #1
 8018786:	7830      	ldrb	r0, [r6, #0]
 8018788:	f7ff ffa4 	bl	80186d4 <__hexdig_fun>
 801878c:	2800      	cmp	r0, #0
 801878e:	d1f8      	bne.n	8018782 <__gethex+0x84>
 8018790:	9a01      	ldr	r2, [sp, #4]
 8018792:	9903      	ldr	r1, [sp, #12]
 8018794:	4630      	mov	r0, r6
 8018796:	f001 f811 	bl	80197bc <strncmp>
 801879a:	b950      	cbnz	r0, 80187b2 <__gethex+0xb4>
 801879c:	b954      	cbnz	r4, 80187b4 <__gethex+0xb6>
 801879e:	9b01      	ldr	r3, [sp, #4]
 80187a0:	18f4      	adds	r4, r6, r3
 80187a2:	4622      	mov	r2, r4
 80187a4:	4616      	mov	r6, r2
 80187a6:	3201      	adds	r2, #1
 80187a8:	7830      	ldrb	r0, [r6, #0]
 80187aa:	f7ff ff93 	bl	80186d4 <__hexdig_fun>
 80187ae:	2800      	cmp	r0, #0
 80187b0:	d1f8      	bne.n	80187a4 <__gethex+0xa6>
 80187b2:	b10c      	cbz	r4, 80187b8 <__gethex+0xba>
 80187b4:	1ba4      	subs	r4, r4, r6
 80187b6:	00a4      	lsls	r4, r4, #2
 80187b8:	7833      	ldrb	r3, [r6, #0]
 80187ba:	2b50      	cmp	r3, #80	; 0x50
 80187bc:	d001      	beq.n	80187c2 <__gethex+0xc4>
 80187be:	2b70      	cmp	r3, #112	; 0x70
 80187c0:	d140      	bne.n	8018844 <__gethex+0x146>
 80187c2:	7873      	ldrb	r3, [r6, #1]
 80187c4:	2b2b      	cmp	r3, #43	; 0x2b
 80187c6:	d031      	beq.n	801882c <__gethex+0x12e>
 80187c8:	2b2d      	cmp	r3, #45	; 0x2d
 80187ca:	d033      	beq.n	8018834 <__gethex+0x136>
 80187cc:	1c71      	adds	r1, r6, #1
 80187ce:	f04f 0900 	mov.w	r9, #0
 80187d2:	7808      	ldrb	r0, [r1, #0]
 80187d4:	f7ff ff7e 	bl	80186d4 <__hexdig_fun>
 80187d8:	1e43      	subs	r3, r0, #1
 80187da:	b2db      	uxtb	r3, r3
 80187dc:	2b18      	cmp	r3, #24
 80187de:	d831      	bhi.n	8018844 <__gethex+0x146>
 80187e0:	f1a0 0210 	sub.w	r2, r0, #16
 80187e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80187e8:	f7ff ff74 	bl	80186d4 <__hexdig_fun>
 80187ec:	1e43      	subs	r3, r0, #1
 80187ee:	b2db      	uxtb	r3, r3
 80187f0:	2b18      	cmp	r3, #24
 80187f2:	d922      	bls.n	801883a <__gethex+0x13c>
 80187f4:	f1b9 0f00 	cmp.w	r9, #0
 80187f8:	d000      	beq.n	80187fc <__gethex+0xfe>
 80187fa:	4252      	negs	r2, r2
 80187fc:	4414      	add	r4, r2
 80187fe:	f8ca 1000 	str.w	r1, [sl]
 8018802:	b30d      	cbz	r5, 8018848 <__gethex+0x14a>
 8018804:	f1bb 0f00 	cmp.w	fp, #0
 8018808:	bf0c      	ite	eq
 801880a:	2706      	moveq	r7, #6
 801880c:	2700      	movne	r7, #0
 801880e:	4638      	mov	r0, r7
 8018810:	b00b      	add	sp, #44	; 0x2c
 8018812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018816:	f10b 0b01 	add.w	fp, fp, #1
 801881a:	e78a      	b.n	8018732 <__gethex+0x34>
 801881c:	2500      	movs	r5, #0
 801881e:	462c      	mov	r4, r5
 8018820:	e7ae      	b.n	8018780 <__gethex+0x82>
 8018822:	463e      	mov	r6, r7
 8018824:	2501      	movs	r5, #1
 8018826:	e7c7      	b.n	80187b8 <__gethex+0xba>
 8018828:	4604      	mov	r4, r0
 801882a:	e7fb      	b.n	8018824 <__gethex+0x126>
 801882c:	f04f 0900 	mov.w	r9, #0
 8018830:	1cb1      	adds	r1, r6, #2
 8018832:	e7ce      	b.n	80187d2 <__gethex+0xd4>
 8018834:	f04f 0901 	mov.w	r9, #1
 8018838:	e7fa      	b.n	8018830 <__gethex+0x132>
 801883a:	230a      	movs	r3, #10
 801883c:	fb03 0202 	mla	r2, r3, r2, r0
 8018840:	3a10      	subs	r2, #16
 8018842:	e7cf      	b.n	80187e4 <__gethex+0xe6>
 8018844:	4631      	mov	r1, r6
 8018846:	e7da      	b.n	80187fe <__gethex+0x100>
 8018848:	1bf3      	subs	r3, r6, r7
 801884a:	3b01      	subs	r3, #1
 801884c:	4629      	mov	r1, r5
 801884e:	2b07      	cmp	r3, #7
 8018850:	dc49      	bgt.n	80188e6 <__gethex+0x1e8>
 8018852:	9802      	ldr	r0, [sp, #8]
 8018854:	f000 fa52 	bl	8018cfc <_Balloc>
 8018858:	9b01      	ldr	r3, [sp, #4]
 801885a:	f100 0914 	add.w	r9, r0, #20
 801885e:	f04f 0b00 	mov.w	fp, #0
 8018862:	f1c3 0301 	rsb	r3, r3, #1
 8018866:	4605      	mov	r5, r0
 8018868:	f8cd 9010 	str.w	r9, [sp, #16]
 801886c:	46da      	mov	sl, fp
 801886e:	9308      	str	r3, [sp, #32]
 8018870:	42b7      	cmp	r7, r6
 8018872:	d33b      	bcc.n	80188ec <__gethex+0x1ee>
 8018874:	9804      	ldr	r0, [sp, #16]
 8018876:	f840 ab04 	str.w	sl, [r0], #4
 801887a:	eba0 0009 	sub.w	r0, r0, r9
 801887e:	1080      	asrs	r0, r0, #2
 8018880:	6128      	str	r0, [r5, #16]
 8018882:	0147      	lsls	r7, r0, #5
 8018884:	4650      	mov	r0, sl
 8018886:	f000 fafd 	bl	8018e84 <__hi0bits>
 801888a:	f8d8 6000 	ldr.w	r6, [r8]
 801888e:	1a3f      	subs	r7, r7, r0
 8018890:	42b7      	cmp	r7, r6
 8018892:	dd64      	ble.n	801895e <__gethex+0x260>
 8018894:	1bbf      	subs	r7, r7, r6
 8018896:	4639      	mov	r1, r7
 8018898:	4628      	mov	r0, r5
 801889a:	f000 fe0d 	bl	80194b8 <__any_on>
 801889e:	4682      	mov	sl, r0
 80188a0:	b178      	cbz	r0, 80188c2 <__gethex+0x1c4>
 80188a2:	1e7b      	subs	r3, r7, #1
 80188a4:	1159      	asrs	r1, r3, #5
 80188a6:	f003 021f 	and.w	r2, r3, #31
 80188aa:	f04f 0a01 	mov.w	sl, #1
 80188ae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80188b2:	fa0a f202 	lsl.w	r2, sl, r2
 80188b6:	420a      	tst	r2, r1
 80188b8:	d003      	beq.n	80188c2 <__gethex+0x1c4>
 80188ba:	4553      	cmp	r3, sl
 80188bc:	dc46      	bgt.n	801894c <__gethex+0x24e>
 80188be:	f04f 0a02 	mov.w	sl, #2
 80188c2:	4639      	mov	r1, r7
 80188c4:	4628      	mov	r0, r5
 80188c6:	f7ff fecb 	bl	8018660 <rshift>
 80188ca:	443c      	add	r4, r7
 80188cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80188d0:	42a3      	cmp	r3, r4
 80188d2:	da52      	bge.n	801897a <__gethex+0x27c>
 80188d4:	4629      	mov	r1, r5
 80188d6:	9802      	ldr	r0, [sp, #8]
 80188d8:	f000 fa44 	bl	8018d64 <_Bfree>
 80188dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80188de:	2300      	movs	r3, #0
 80188e0:	6013      	str	r3, [r2, #0]
 80188e2:	27a3      	movs	r7, #163	; 0xa3
 80188e4:	e793      	b.n	801880e <__gethex+0x110>
 80188e6:	3101      	adds	r1, #1
 80188e8:	105b      	asrs	r3, r3, #1
 80188ea:	e7b0      	b.n	801884e <__gethex+0x150>
 80188ec:	1e73      	subs	r3, r6, #1
 80188ee:	9305      	str	r3, [sp, #20]
 80188f0:	9a07      	ldr	r2, [sp, #28]
 80188f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80188f6:	4293      	cmp	r3, r2
 80188f8:	d018      	beq.n	801892c <__gethex+0x22e>
 80188fa:	f1bb 0f20 	cmp.w	fp, #32
 80188fe:	d107      	bne.n	8018910 <__gethex+0x212>
 8018900:	9b04      	ldr	r3, [sp, #16]
 8018902:	f8c3 a000 	str.w	sl, [r3]
 8018906:	3304      	adds	r3, #4
 8018908:	f04f 0a00 	mov.w	sl, #0
 801890c:	9304      	str	r3, [sp, #16]
 801890e:	46d3      	mov	fp, sl
 8018910:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018914:	f7ff fede 	bl	80186d4 <__hexdig_fun>
 8018918:	f000 000f 	and.w	r0, r0, #15
 801891c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018920:	ea4a 0a00 	orr.w	sl, sl, r0
 8018924:	f10b 0b04 	add.w	fp, fp, #4
 8018928:	9b05      	ldr	r3, [sp, #20]
 801892a:	e00d      	b.n	8018948 <__gethex+0x24a>
 801892c:	9b05      	ldr	r3, [sp, #20]
 801892e:	9a08      	ldr	r2, [sp, #32]
 8018930:	4413      	add	r3, r2
 8018932:	42bb      	cmp	r3, r7
 8018934:	d3e1      	bcc.n	80188fa <__gethex+0x1fc>
 8018936:	4618      	mov	r0, r3
 8018938:	9a01      	ldr	r2, [sp, #4]
 801893a:	9903      	ldr	r1, [sp, #12]
 801893c:	9309      	str	r3, [sp, #36]	; 0x24
 801893e:	f000 ff3d 	bl	80197bc <strncmp>
 8018942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018944:	2800      	cmp	r0, #0
 8018946:	d1d8      	bne.n	80188fa <__gethex+0x1fc>
 8018948:	461e      	mov	r6, r3
 801894a:	e791      	b.n	8018870 <__gethex+0x172>
 801894c:	1eb9      	subs	r1, r7, #2
 801894e:	4628      	mov	r0, r5
 8018950:	f000 fdb2 	bl	80194b8 <__any_on>
 8018954:	2800      	cmp	r0, #0
 8018956:	d0b2      	beq.n	80188be <__gethex+0x1c0>
 8018958:	f04f 0a03 	mov.w	sl, #3
 801895c:	e7b1      	b.n	80188c2 <__gethex+0x1c4>
 801895e:	da09      	bge.n	8018974 <__gethex+0x276>
 8018960:	1bf7      	subs	r7, r6, r7
 8018962:	4629      	mov	r1, r5
 8018964:	463a      	mov	r2, r7
 8018966:	9802      	ldr	r0, [sp, #8]
 8018968:	f000 fbc8 	bl	80190fc <__lshift>
 801896c:	1be4      	subs	r4, r4, r7
 801896e:	4605      	mov	r5, r0
 8018970:	f100 0914 	add.w	r9, r0, #20
 8018974:	f04f 0a00 	mov.w	sl, #0
 8018978:	e7a8      	b.n	80188cc <__gethex+0x1ce>
 801897a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801897e:	42a0      	cmp	r0, r4
 8018980:	dd6a      	ble.n	8018a58 <__gethex+0x35a>
 8018982:	1b04      	subs	r4, r0, r4
 8018984:	42a6      	cmp	r6, r4
 8018986:	dc2e      	bgt.n	80189e6 <__gethex+0x2e8>
 8018988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801898c:	2b02      	cmp	r3, #2
 801898e:	d022      	beq.n	80189d6 <__gethex+0x2d8>
 8018990:	2b03      	cmp	r3, #3
 8018992:	d024      	beq.n	80189de <__gethex+0x2e0>
 8018994:	2b01      	cmp	r3, #1
 8018996:	d115      	bne.n	80189c4 <__gethex+0x2c6>
 8018998:	42a6      	cmp	r6, r4
 801899a:	d113      	bne.n	80189c4 <__gethex+0x2c6>
 801899c:	2e01      	cmp	r6, #1
 801899e:	dc0b      	bgt.n	80189b8 <__gethex+0x2ba>
 80189a0:	9a06      	ldr	r2, [sp, #24]
 80189a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80189a6:	6013      	str	r3, [r2, #0]
 80189a8:	2301      	movs	r3, #1
 80189aa:	612b      	str	r3, [r5, #16]
 80189ac:	f8c9 3000 	str.w	r3, [r9]
 80189b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80189b2:	2762      	movs	r7, #98	; 0x62
 80189b4:	601d      	str	r5, [r3, #0]
 80189b6:	e72a      	b.n	801880e <__gethex+0x110>
 80189b8:	1e71      	subs	r1, r6, #1
 80189ba:	4628      	mov	r0, r5
 80189bc:	f000 fd7c 	bl	80194b8 <__any_on>
 80189c0:	2800      	cmp	r0, #0
 80189c2:	d1ed      	bne.n	80189a0 <__gethex+0x2a2>
 80189c4:	4629      	mov	r1, r5
 80189c6:	9802      	ldr	r0, [sp, #8]
 80189c8:	f000 f9cc 	bl	8018d64 <_Bfree>
 80189cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189ce:	2300      	movs	r3, #0
 80189d0:	6013      	str	r3, [r2, #0]
 80189d2:	2750      	movs	r7, #80	; 0x50
 80189d4:	e71b      	b.n	801880e <__gethex+0x110>
 80189d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d0e1      	beq.n	80189a0 <__gethex+0x2a2>
 80189dc:	e7f2      	b.n	80189c4 <__gethex+0x2c6>
 80189de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d1dd      	bne.n	80189a0 <__gethex+0x2a2>
 80189e4:	e7ee      	b.n	80189c4 <__gethex+0x2c6>
 80189e6:	1e67      	subs	r7, r4, #1
 80189e8:	f1ba 0f00 	cmp.w	sl, #0
 80189ec:	d131      	bne.n	8018a52 <__gethex+0x354>
 80189ee:	b127      	cbz	r7, 80189fa <__gethex+0x2fc>
 80189f0:	4639      	mov	r1, r7
 80189f2:	4628      	mov	r0, r5
 80189f4:	f000 fd60 	bl	80194b8 <__any_on>
 80189f8:	4682      	mov	sl, r0
 80189fa:	117a      	asrs	r2, r7, #5
 80189fc:	2301      	movs	r3, #1
 80189fe:	f007 071f 	and.w	r7, r7, #31
 8018a02:	fa03 f707 	lsl.w	r7, r3, r7
 8018a06:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018a0a:	4621      	mov	r1, r4
 8018a0c:	421f      	tst	r7, r3
 8018a0e:	4628      	mov	r0, r5
 8018a10:	bf18      	it	ne
 8018a12:	f04a 0a02 	orrne.w	sl, sl, #2
 8018a16:	1b36      	subs	r6, r6, r4
 8018a18:	f7ff fe22 	bl	8018660 <rshift>
 8018a1c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018a20:	2702      	movs	r7, #2
 8018a22:	f1ba 0f00 	cmp.w	sl, #0
 8018a26:	d048      	beq.n	8018aba <__gethex+0x3bc>
 8018a28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a2c:	2b02      	cmp	r3, #2
 8018a2e:	d015      	beq.n	8018a5c <__gethex+0x35e>
 8018a30:	2b03      	cmp	r3, #3
 8018a32:	d017      	beq.n	8018a64 <__gethex+0x366>
 8018a34:	2b01      	cmp	r3, #1
 8018a36:	d109      	bne.n	8018a4c <__gethex+0x34e>
 8018a38:	f01a 0f02 	tst.w	sl, #2
 8018a3c:	d006      	beq.n	8018a4c <__gethex+0x34e>
 8018a3e:	f8d9 3000 	ldr.w	r3, [r9]
 8018a42:	ea4a 0a03 	orr.w	sl, sl, r3
 8018a46:	f01a 0f01 	tst.w	sl, #1
 8018a4a:	d10e      	bne.n	8018a6a <__gethex+0x36c>
 8018a4c:	f047 0710 	orr.w	r7, r7, #16
 8018a50:	e033      	b.n	8018aba <__gethex+0x3bc>
 8018a52:	f04f 0a01 	mov.w	sl, #1
 8018a56:	e7d0      	b.n	80189fa <__gethex+0x2fc>
 8018a58:	2701      	movs	r7, #1
 8018a5a:	e7e2      	b.n	8018a22 <__gethex+0x324>
 8018a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a5e:	f1c3 0301 	rsb	r3, r3, #1
 8018a62:	9315      	str	r3, [sp, #84]	; 0x54
 8018a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d0f0      	beq.n	8018a4c <__gethex+0x34e>
 8018a6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018a6e:	f105 0314 	add.w	r3, r5, #20
 8018a72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018a76:	eb03 010a 	add.w	r1, r3, sl
 8018a7a:	f04f 0c00 	mov.w	ip, #0
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018a88:	d01c      	beq.n	8018ac4 <__gethex+0x3c6>
 8018a8a:	3201      	adds	r2, #1
 8018a8c:	6002      	str	r2, [r0, #0]
 8018a8e:	2f02      	cmp	r7, #2
 8018a90:	f105 0314 	add.w	r3, r5, #20
 8018a94:	d138      	bne.n	8018b08 <__gethex+0x40a>
 8018a96:	f8d8 2000 	ldr.w	r2, [r8]
 8018a9a:	3a01      	subs	r2, #1
 8018a9c:	42b2      	cmp	r2, r6
 8018a9e:	d10a      	bne.n	8018ab6 <__gethex+0x3b8>
 8018aa0:	1171      	asrs	r1, r6, #5
 8018aa2:	2201      	movs	r2, #1
 8018aa4:	f006 061f 	and.w	r6, r6, #31
 8018aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018aac:	fa02 f606 	lsl.w	r6, r2, r6
 8018ab0:	421e      	tst	r6, r3
 8018ab2:	bf18      	it	ne
 8018ab4:	4617      	movne	r7, r2
 8018ab6:	f047 0720 	orr.w	r7, r7, #32
 8018aba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018abc:	601d      	str	r5, [r3, #0]
 8018abe:	9b06      	ldr	r3, [sp, #24]
 8018ac0:	601c      	str	r4, [r3, #0]
 8018ac2:	e6a4      	b.n	801880e <__gethex+0x110>
 8018ac4:	4299      	cmp	r1, r3
 8018ac6:	f843 cc04 	str.w	ip, [r3, #-4]
 8018aca:	d8d8      	bhi.n	8018a7e <__gethex+0x380>
 8018acc:	68ab      	ldr	r3, [r5, #8]
 8018ace:	4599      	cmp	r9, r3
 8018ad0:	db12      	blt.n	8018af8 <__gethex+0x3fa>
 8018ad2:	6869      	ldr	r1, [r5, #4]
 8018ad4:	9802      	ldr	r0, [sp, #8]
 8018ad6:	3101      	adds	r1, #1
 8018ad8:	f000 f910 	bl	8018cfc <_Balloc>
 8018adc:	692a      	ldr	r2, [r5, #16]
 8018ade:	3202      	adds	r2, #2
 8018ae0:	f105 010c 	add.w	r1, r5, #12
 8018ae4:	4683      	mov	fp, r0
 8018ae6:	0092      	lsls	r2, r2, #2
 8018ae8:	300c      	adds	r0, #12
 8018aea:	f7fd f947 	bl	8015d7c <memcpy>
 8018aee:	4629      	mov	r1, r5
 8018af0:	9802      	ldr	r0, [sp, #8]
 8018af2:	f000 f937 	bl	8018d64 <_Bfree>
 8018af6:	465d      	mov	r5, fp
 8018af8:	692b      	ldr	r3, [r5, #16]
 8018afa:	1c5a      	adds	r2, r3, #1
 8018afc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018b00:	612a      	str	r2, [r5, #16]
 8018b02:	2201      	movs	r2, #1
 8018b04:	615a      	str	r2, [r3, #20]
 8018b06:	e7c2      	b.n	8018a8e <__gethex+0x390>
 8018b08:	692a      	ldr	r2, [r5, #16]
 8018b0a:	454a      	cmp	r2, r9
 8018b0c:	dd0b      	ble.n	8018b26 <__gethex+0x428>
 8018b0e:	2101      	movs	r1, #1
 8018b10:	4628      	mov	r0, r5
 8018b12:	f7ff fda5 	bl	8018660 <rshift>
 8018b16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b1a:	3401      	adds	r4, #1
 8018b1c:	42a3      	cmp	r3, r4
 8018b1e:	f6ff aed9 	blt.w	80188d4 <__gethex+0x1d6>
 8018b22:	2701      	movs	r7, #1
 8018b24:	e7c7      	b.n	8018ab6 <__gethex+0x3b8>
 8018b26:	f016 061f 	ands.w	r6, r6, #31
 8018b2a:	d0fa      	beq.n	8018b22 <__gethex+0x424>
 8018b2c:	449a      	add	sl, r3
 8018b2e:	f1c6 0620 	rsb	r6, r6, #32
 8018b32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018b36:	f000 f9a5 	bl	8018e84 <__hi0bits>
 8018b3a:	42b0      	cmp	r0, r6
 8018b3c:	dbe7      	blt.n	8018b0e <__gethex+0x410>
 8018b3e:	e7f0      	b.n	8018b22 <__gethex+0x424>

08018b40 <L_shift>:
 8018b40:	f1c2 0208 	rsb	r2, r2, #8
 8018b44:	0092      	lsls	r2, r2, #2
 8018b46:	b570      	push	{r4, r5, r6, lr}
 8018b48:	f1c2 0620 	rsb	r6, r2, #32
 8018b4c:	6843      	ldr	r3, [r0, #4]
 8018b4e:	6804      	ldr	r4, [r0, #0]
 8018b50:	fa03 f506 	lsl.w	r5, r3, r6
 8018b54:	432c      	orrs	r4, r5
 8018b56:	40d3      	lsrs	r3, r2
 8018b58:	6004      	str	r4, [r0, #0]
 8018b5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8018b5e:	4288      	cmp	r0, r1
 8018b60:	d3f4      	bcc.n	8018b4c <L_shift+0xc>
 8018b62:	bd70      	pop	{r4, r5, r6, pc}

08018b64 <__match>:
 8018b64:	b530      	push	{r4, r5, lr}
 8018b66:	6803      	ldr	r3, [r0, #0]
 8018b68:	3301      	adds	r3, #1
 8018b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b6e:	b914      	cbnz	r4, 8018b76 <__match+0x12>
 8018b70:	6003      	str	r3, [r0, #0]
 8018b72:	2001      	movs	r0, #1
 8018b74:	bd30      	pop	{r4, r5, pc}
 8018b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018b7e:	2d19      	cmp	r5, #25
 8018b80:	bf98      	it	ls
 8018b82:	3220      	addls	r2, #32
 8018b84:	42a2      	cmp	r2, r4
 8018b86:	d0f0      	beq.n	8018b6a <__match+0x6>
 8018b88:	2000      	movs	r0, #0
 8018b8a:	e7f3      	b.n	8018b74 <__match+0x10>

08018b8c <__hexnan>:
 8018b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b90:	680b      	ldr	r3, [r1, #0]
 8018b92:	6801      	ldr	r1, [r0, #0]
 8018b94:	115f      	asrs	r7, r3, #5
 8018b96:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018b9a:	f013 031f 	ands.w	r3, r3, #31
 8018b9e:	b087      	sub	sp, #28
 8018ba0:	bf18      	it	ne
 8018ba2:	3704      	addne	r7, #4
 8018ba4:	2500      	movs	r5, #0
 8018ba6:	1f3e      	subs	r6, r7, #4
 8018ba8:	4682      	mov	sl, r0
 8018baa:	4690      	mov	r8, r2
 8018bac:	9301      	str	r3, [sp, #4]
 8018bae:	f847 5c04 	str.w	r5, [r7, #-4]
 8018bb2:	46b1      	mov	r9, r6
 8018bb4:	4634      	mov	r4, r6
 8018bb6:	9502      	str	r5, [sp, #8]
 8018bb8:	46ab      	mov	fp, r5
 8018bba:	784a      	ldrb	r2, [r1, #1]
 8018bbc:	1c4b      	adds	r3, r1, #1
 8018bbe:	9303      	str	r3, [sp, #12]
 8018bc0:	b342      	cbz	r2, 8018c14 <__hexnan+0x88>
 8018bc2:	4610      	mov	r0, r2
 8018bc4:	9105      	str	r1, [sp, #20]
 8018bc6:	9204      	str	r2, [sp, #16]
 8018bc8:	f7ff fd84 	bl	80186d4 <__hexdig_fun>
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	d143      	bne.n	8018c58 <__hexnan+0xcc>
 8018bd0:	9a04      	ldr	r2, [sp, #16]
 8018bd2:	9905      	ldr	r1, [sp, #20]
 8018bd4:	2a20      	cmp	r2, #32
 8018bd6:	d818      	bhi.n	8018c0a <__hexnan+0x7e>
 8018bd8:	9b02      	ldr	r3, [sp, #8]
 8018bda:	459b      	cmp	fp, r3
 8018bdc:	dd13      	ble.n	8018c06 <__hexnan+0x7a>
 8018bde:	454c      	cmp	r4, r9
 8018be0:	d206      	bcs.n	8018bf0 <__hexnan+0x64>
 8018be2:	2d07      	cmp	r5, #7
 8018be4:	dc04      	bgt.n	8018bf0 <__hexnan+0x64>
 8018be6:	462a      	mov	r2, r5
 8018be8:	4649      	mov	r1, r9
 8018bea:	4620      	mov	r0, r4
 8018bec:	f7ff ffa8 	bl	8018b40 <L_shift>
 8018bf0:	4544      	cmp	r4, r8
 8018bf2:	d944      	bls.n	8018c7e <__hexnan+0xf2>
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	f1a4 0904 	sub.w	r9, r4, #4
 8018bfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8018bfe:	f8cd b008 	str.w	fp, [sp, #8]
 8018c02:	464c      	mov	r4, r9
 8018c04:	461d      	mov	r5, r3
 8018c06:	9903      	ldr	r1, [sp, #12]
 8018c08:	e7d7      	b.n	8018bba <__hexnan+0x2e>
 8018c0a:	2a29      	cmp	r2, #41	; 0x29
 8018c0c:	d14a      	bne.n	8018ca4 <__hexnan+0x118>
 8018c0e:	3102      	adds	r1, #2
 8018c10:	f8ca 1000 	str.w	r1, [sl]
 8018c14:	f1bb 0f00 	cmp.w	fp, #0
 8018c18:	d044      	beq.n	8018ca4 <__hexnan+0x118>
 8018c1a:	454c      	cmp	r4, r9
 8018c1c:	d206      	bcs.n	8018c2c <__hexnan+0xa0>
 8018c1e:	2d07      	cmp	r5, #7
 8018c20:	dc04      	bgt.n	8018c2c <__hexnan+0xa0>
 8018c22:	462a      	mov	r2, r5
 8018c24:	4649      	mov	r1, r9
 8018c26:	4620      	mov	r0, r4
 8018c28:	f7ff ff8a 	bl	8018b40 <L_shift>
 8018c2c:	4544      	cmp	r4, r8
 8018c2e:	d928      	bls.n	8018c82 <__hexnan+0xf6>
 8018c30:	4643      	mov	r3, r8
 8018c32:	f854 2b04 	ldr.w	r2, [r4], #4
 8018c36:	f843 2b04 	str.w	r2, [r3], #4
 8018c3a:	42a6      	cmp	r6, r4
 8018c3c:	d2f9      	bcs.n	8018c32 <__hexnan+0xa6>
 8018c3e:	2200      	movs	r2, #0
 8018c40:	f843 2b04 	str.w	r2, [r3], #4
 8018c44:	429e      	cmp	r6, r3
 8018c46:	d2fb      	bcs.n	8018c40 <__hexnan+0xb4>
 8018c48:	6833      	ldr	r3, [r6, #0]
 8018c4a:	b91b      	cbnz	r3, 8018c54 <__hexnan+0xc8>
 8018c4c:	4546      	cmp	r6, r8
 8018c4e:	d127      	bne.n	8018ca0 <__hexnan+0x114>
 8018c50:	2301      	movs	r3, #1
 8018c52:	6033      	str	r3, [r6, #0]
 8018c54:	2005      	movs	r0, #5
 8018c56:	e026      	b.n	8018ca6 <__hexnan+0x11a>
 8018c58:	3501      	adds	r5, #1
 8018c5a:	2d08      	cmp	r5, #8
 8018c5c:	f10b 0b01 	add.w	fp, fp, #1
 8018c60:	dd06      	ble.n	8018c70 <__hexnan+0xe4>
 8018c62:	4544      	cmp	r4, r8
 8018c64:	d9cf      	bls.n	8018c06 <__hexnan+0x7a>
 8018c66:	2300      	movs	r3, #0
 8018c68:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c6c:	2501      	movs	r5, #1
 8018c6e:	3c04      	subs	r4, #4
 8018c70:	6822      	ldr	r2, [r4, #0]
 8018c72:	f000 000f 	and.w	r0, r0, #15
 8018c76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018c7a:	6020      	str	r0, [r4, #0]
 8018c7c:	e7c3      	b.n	8018c06 <__hexnan+0x7a>
 8018c7e:	2508      	movs	r5, #8
 8018c80:	e7c1      	b.n	8018c06 <__hexnan+0x7a>
 8018c82:	9b01      	ldr	r3, [sp, #4]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d0df      	beq.n	8018c48 <__hexnan+0xbc>
 8018c88:	f04f 32ff 	mov.w	r2, #4294967295
 8018c8c:	f1c3 0320 	rsb	r3, r3, #32
 8018c90:	fa22 f303 	lsr.w	r3, r2, r3
 8018c94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018c98:	401a      	ands	r2, r3
 8018c9a:	f847 2c04 	str.w	r2, [r7, #-4]
 8018c9e:	e7d3      	b.n	8018c48 <__hexnan+0xbc>
 8018ca0:	3e04      	subs	r6, #4
 8018ca2:	e7d1      	b.n	8018c48 <__hexnan+0xbc>
 8018ca4:	2004      	movs	r0, #4
 8018ca6:	b007      	add	sp, #28
 8018ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018cac <__locale_ctype_ptr_l>:
 8018cac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018cb0:	4770      	bx	lr

08018cb2 <__localeconv_l>:
 8018cb2:	30f0      	adds	r0, #240	; 0xf0
 8018cb4:	4770      	bx	lr
	...

08018cb8 <_localeconv_r>:
 8018cb8:	4b04      	ldr	r3, [pc, #16]	; (8018ccc <_localeconv_r+0x14>)
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	6a18      	ldr	r0, [r3, #32]
 8018cbe:	4b04      	ldr	r3, [pc, #16]	; (8018cd0 <_localeconv_r+0x18>)
 8018cc0:	2800      	cmp	r0, #0
 8018cc2:	bf08      	it	eq
 8018cc4:	4618      	moveq	r0, r3
 8018cc6:	30f0      	adds	r0, #240	; 0xf0
 8018cc8:	4770      	bx	lr
 8018cca:	bf00      	nop
 8018ccc:	2000220c 	.word	0x2000220c
 8018cd0:	20002270 	.word	0x20002270

08018cd4 <__ascii_mbtowc>:
 8018cd4:	b082      	sub	sp, #8
 8018cd6:	b901      	cbnz	r1, 8018cda <__ascii_mbtowc+0x6>
 8018cd8:	a901      	add	r1, sp, #4
 8018cda:	b142      	cbz	r2, 8018cee <__ascii_mbtowc+0x1a>
 8018cdc:	b14b      	cbz	r3, 8018cf2 <__ascii_mbtowc+0x1e>
 8018cde:	7813      	ldrb	r3, [r2, #0]
 8018ce0:	600b      	str	r3, [r1, #0]
 8018ce2:	7812      	ldrb	r2, [r2, #0]
 8018ce4:	1c10      	adds	r0, r2, #0
 8018ce6:	bf18      	it	ne
 8018ce8:	2001      	movne	r0, #1
 8018cea:	b002      	add	sp, #8
 8018cec:	4770      	bx	lr
 8018cee:	4610      	mov	r0, r2
 8018cf0:	e7fb      	b.n	8018cea <__ascii_mbtowc+0x16>
 8018cf2:	f06f 0001 	mvn.w	r0, #1
 8018cf6:	e7f8      	b.n	8018cea <__ascii_mbtowc+0x16>

08018cf8 <__malloc_lock>:
 8018cf8:	4770      	bx	lr

08018cfa <__malloc_unlock>:
 8018cfa:	4770      	bx	lr

08018cfc <_Balloc>:
 8018cfc:	b570      	push	{r4, r5, r6, lr}
 8018cfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018d00:	4604      	mov	r4, r0
 8018d02:	460e      	mov	r6, r1
 8018d04:	b93d      	cbnz	r5, 8018d16 <_Balloc+0x1a>
 8018d06:	2010      	movs	r0, #16
 8018d08:	f7fd f828 	bl	8015d5c <malloc>
 8018d0c:	6260      	str	r0, [r4, #36]	; 0x24
 8018d0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018d12:	6005      	str	r5, [r0, #0]
 8018d14:	60c5      	str	r5, [r0, #12]
 8018d16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018d18:	68eb      	ldr	r3, [r5, #12]
 8018d1a:	b183      	cbz	r3, 8018d3e <_Balloc+0x42>
 8018d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d1e:	68db      	ldr	r3, [r3, #12]
 8018d20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018d24:	b9b8      	cbnz	r0, 8018d56 <_Balloc+0x5a>
 8018d26:	2101      	movs	r1, #1
 8018d28:	fa01 f506 	lsl.w	r5, r1, r6
 8018d2c:	1d6a      	adds	r2, r5, #5
 8018d2e:	0092      	lsls	r2, r2, #2
 8018d30:	4620      	mov	r0, r4
 8018d32:	f000 fbe2 	bl	80194fa <_calloc_r>
 8018d36:	b160      	cbz	r0, 8018d52 <_Balloc+0x56>
 8018d38:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018d3c:	e00e      	b.n	8018d5c <_Balloc+0x60>
 8018d3e:	2221      	movs	r2, #33	; 0x21
 8018d40:	2104      	movs	r1, #4
 8018d42:	4620      	mov	r0, r4
 8018d44:	f000 fbd9 	bl	80194fa <_calloc_r>
 8018d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d4a:	60e8      	str	r0, [r5, #12]
 8018d4c:	68db      	ldr	r3, [r3, #12]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d1e4      	bne.n	8018d1c <_Balloc+0x20>
 8018d52:	2000      	movs	r0, #0
 8018d54:	bd70      	pop	{r4, r5, r6, pc}
 8018d56:	6802      	ldr	r2, [r0, #0]
 8018d58:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018d62:	e7f7      	b.n	8018d54 <_Balloc+0x58>

08018d64 <_Bfree>:
 8018d64:	b570      	push	{r4, r5, r6, lr}
 8018d66:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018d68:	4606      	mov	r6, r0
 8018d6a:	460d      	mov	r5, r1
 8018d6c:	b93c      	cbnz	r4, 8018d7e <_Bfree+0x1a>
 8018d6e:	2010      	movs	r0, #16
 8018d70:	f7fc fff4 	bl	8015d5c <malloc>
 8018d74:	6270      	str	r0, [r6, #36]	; 0x24
 8018d76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018d7a:	6004      	str	r4, [r0, #0]
 8018d7c:	60c4      	str	r4, [r0, #12]
 8018d7e:	b13d      	cbz	r5, 8018d90 <_Bfree+0x2c>
 8018d80:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018d82:	686a      	ldr	r2, [r5, #4]
 8018d84:	68db      	ldr	r3, [r3, #12]
 8018d86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018d8a:	6029      	str	r1, [r5, #0]
 8018d8c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018d90:	bd70      	pop	{r4, r5, r6, pc}

08018d92 <__multadd>:
 8018d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d96:	690d      	ldr	r5, [r1, #16]
 8018d98:	461f      	mov	r7, r3
 8018d9a:	4606      	mov	r6, r0
 8018d9c:	460c      	mov	r4, r1
 8018d9e:	f101 0c14 	add.w	ip, r1, #20
 8018da2:	2300      	movs	r3, #0
 8018da4:	f8dc 0000 	ldr.w	r0, [ip]
 8018da8:	b281      	uxth	r1, r0
 8018daa:	fb02 7101 	mla	r1, r2, r1, r7
 8018dae:	0c0f      	lsrs	r7, r1, #16
 8018db0:	0c00      	lsrs	r0, r0, #16
 8018db2:	fb02 7000 	mla	r0, r2, r0, r7
 8018db6:	b289      	uxth	r1, r1
 8018db8:	3301      	adds	r3, #1
 8018dba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018dbe:	429d      	cmp	r5, r3
 8018dc0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018dc4:	f84c 1b04 	str.w	r1, [ip], #4
 8018dc8:	dcec      	bgt.n	8018da4 <__multadd+0x12>
 8018dca:	b1d7      	cbz	r7, 8018e02 <__multadd+0x70>
 8018dcc:	68a3      	ldr	r3, [r4, #8]
 8018dce:	42ab      	cmp	r3, r5
 8018dd0:	dc12      	bgt.n	8018df8 <__multadd+0x66>
 8018dd2:	6861      	ldr	r1, [r4, #4]
 8018dd4:	4630      	mov	r0, r6
 8018dd6:	3101      	adds	r1, #1
 8018dd8:	f7ff ff90 	bl	8018cfc <_Balloc>
 8018ddc:	6922      	ldr	r2, [r4, #16]
 8018dde:	3202      	adds	r2, #2
 8018de0:	f104 010c 	add.w	r1, r4, #12
 8018de4:	4680      	mov	r8, r0
 8018de6:	0092      	lsls	r2, r2, #2
 8018de8:	300c      	adds	r0, #12
 8018dea:	f7fc ffc7 	bl	8015d7c <memcpy>
 8018dee:	4621      	mov	r1, r4
 8018df0:	4630      	mov	r0, r6
 8018df2:	f7ff ffb7 	bl	8018d64 <_Bfree>
 8018df6:	4644      	mov	r4, r8
 8018df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018dfc:	3501      	adds	r5, #1
 8018dfe:	615f      	str	r7, [r3, #20]
 8018e00:	6125      	str	r5, [r4, #16]
 8018e02:	4620      	mov	r0, r4
 8018e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018e08 <__s2b>:
 8018e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e0c:	460c      	mov	r4, r1
 8018e0e:	4615      	mov	r5, r2
 8018e10:	461f      	mov	r7, r3
 8018e12:	2209      	movs	r2, #9
 8018e14:	3308      	adds	r3, #8
 8018e16:	4606      	mov	r6, r0
 8018e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8018e1c:	2100      	movs	r1, #0
 8018e1e:	2201      	movs	r2, #1
 8018e20:	429a      	cmp	r2, r3
 8018e22:	db20      	blt.n	8018e66 <__s2b+0x5e>
 8018e24:	4630      	mov	r0, r6
 8018e26:	f7ff ff69 	bl	8018cfc <_Balloc>
 8018e2a:	9b08      	ldr	r3, [sp, #32]
 8018e2c:	6143      	str	r3, [r0, #20]
 8018e2e:	2d09      	cmp	r5, #9
 8018e30:	f04f 0301 	mov.w	r3, #1
 8018e34:	6103      	str	r3, [r0, #16]
 8018e36:	dd19      	ble.n	8018e6c <__s2b+0x64>
 8018e38:	f104 0809 	add.w	r8, r4, #9
 8018e3c:	46c1      	mov	r9, r8
 8018e3e:	442c      	add	r4, r5
 8018e40:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018e44:	4601      	mov	r1, r0
 8018e46:	3b30      	subs	r3, #48	; 0x30
 8018e48:	220a      	movs	r2, #10
 8018e4a:	4630      	mov	r0, r6
 8018e4c:	f7ff ffa1 	bl	8018d92 <__multadd>
 8018e50:	45a1      	cmp	r9, r4
 8018e52:	d1f5      	bne.n	8018e40 <__s2b+0x38>
 8018e54:	eb08 0405 	add.w	r4, r8, r5
 8018e58:	3c08      	subs	r4, #8
 8018e5a:	1b2d      	subs	r5, r5, r4
 8018e5c:	1963      	adds	r3, r4, r5
 8018e5e:	42bb      	cmp	r3, r7
 8018e60:	db07      	blt.n	8018e72 <__s2b+0x6a>
 8018e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e66:	0052      	lsls	r2, r2, #1
 8018e68:	3101      	adds	r1, #1
 8018e6a:	e7d9      	b.n	8018e20 <__s2b+0x18>
 8018e6c:	340a      	adds	r4, #10
 8018e6e:	2509      	movs	r5, #9
 8018e70:	e7f3      	b.n	8018e5a <__s2b+0x52>
 8018e72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018e76:	4601      	mov	r1, r0
 8018e78:	3b30      	subs	r3, #48	; 0x30
 8018e7a:	220a      	movs	r2, #10
 8018e7c:	4630      	mov	r0, r6
 8018e7e:	f7ff ff88 	bl	8018d92 <__multadd>
 8018e82:	e7eb      	b.n	8018e5c <__s2b+0x54>

08018e84 <__hi0bits>:
 8018e84:	0c02      	lsrs	r2, r0, #16
 8018e86:	0412      	lsls	r2, r2, #16
 8018e88:	4603      	mov	r3, r0
 8018e8a:	b9b2      	cbnz	r2, 8018eba <__hi0bits+0x36>
 8018e8c:	0403      	lsls	r3, r0, #16
 8018e8e:	2010      	movs	r0, #16
 8018e90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018e94:	bf04      	itt	eq
 8018e96:	021b      	lsleq	r3, r3, #8
 8018e98:	3008      	addeq	r0, #8
 8018e9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018e9e:	bf04      	itt	eq
 8018ea0:	011b      	lsleq	r3, r3, #4
 8018ea2:	3004      	addeq	r0, #4
 8018ea4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018ea8:	bf04      	itt	eq
 8018eaa:	009b      	lsleq	r3, r3, #2
 8018eac:	3002      	addeq	r0, #2
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	db06      	blt.n	8018ec0 <__hi0bits+0x3c>
 8018eb2:	005b      	lsls	r3, r3, #1
 8018eb4:	d503      	bpl.n	8018ebe <__hi0bits+0x3a>
 8018eb6:	3001      	adds	r0, #1
 8018eb8:	4770      	bx	lr
 8018eba:	2000      	movs	r0, #0
 8018ebc:	e7e8      	b.n	8018e90 <__hi0bits+0xc>
 8018ebe:	2020      	movs	r0, #32
 8018ec0:	4770      	bx	lr

08018ec2 <__lo0bits>:
 8018ec2:	6803      	ldr	r3, [r0, #0]
 8018ec4:	f013 0207 	ands.w	r2, r3, #7
 8018ec8:	4601      	mov	r1, r0
 8018eca:	d00b      	beq.n	8018ee4 <__lo0bits+0x22>
 8018ecc:	07da      	lsls	r2, r3, #31
 8018ece:	d423      	bmi.n	8018f18 <__lo0bits+0x56>
 8018ed0:	0798      	lsls	r0, r3, #30
 8018ed2:	bf49      	itett	mi
 8018ed4:	085b      	lsrmi	r3, r3, #1
 8018ed6:	089b      	lsrpl	r3, r3, #2
 8018ed8:	2001      	movmi	r0, #1
 8018eda:	600b      	strmi	r3, [r1, #0]
 8018edc:	bf5c      	itt	pl
 8018ede:	600b      	strpl	r3, [r1, #0]
 8018ee0:	2002      	movpl	r0, #2
 8018ee2:	4770      	bx	lr
 8018ee4:	b298      	uxth	r0, r3
 8018ee6:	b9a8      	cbnz	r0, 8018f14 <__lo0bits+0x52>
 8018ee8:	0c1b      	lsrs	r3, r3, #16
 8018eea:	2010      	movs	r0, #16
 8018eec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018ef0:	bf04      	itt	eq
 8018ef2:	0a1b      	lsreq	r3, r3, #8
 8018ef4:	3008      	addeq	r0, #8
 8018ef6:	071a      	lsls	r2, r3, #28
 8018ef8:	bf04      	itt	eq
 8018efa:	091b      	lsreq	r3, r3, #4
 8018efc:	3004      	addeq	r0, #4
 8018efe:	079a      	lsls	r2, r3, #30
 8018f00:	bf04      	itt	eq
 8018f02:	089b      	lsreq	r3, r3, #2
 8018f04:	3002      	addeq	r0, #2
 8018f06:	07da      	lsls	r2, r3, #31
 8018f08:	d402      	bmi.n	8018f10 <__lo0bits+0x4e>
 8018f0a:	085b      	lsrs	r3, r3, #1
 8018f0c:	d006      	beq.n	8018f1c <__lo0bits+0x5a>
 8018f0e:	3001      	adds	r0, #1
 8018f10:	600b      	str	r3, [r1, #0]
 8018f12:	4770      	bx	lr
 8018f14:	4610      	mov	r0, r2
 8018f16:	e7e9      	b.n	8018eec <__lo0bits+0x2a>
 8018f18:	2000      	movs	r0, #0
 8018f1a:	4770      	bx	lr
 8018f1c:	2020      	movs	r0, #32
 8018f1e:	4770      	bx	lr

08018f20 <__i2b>:
 8018f20:	b510      	push	{r4, lr}
 8018f22:	460c      	mov	r4, r1
 8018f24:	2101      	movs	r1, #1
 8018f26:	f7ff fee9 	bl	8018cfc <_Balloc>
 8018f2a:	2201      	movs	r2, #1
 8018f2c:	6144      	str	r4, [r0, #20]
 8018f2e:	6102      	str	r2, [r0, #16]
 8018f30:	bd10      	pop	{r4, pc}

08018f32 <__multiply>:
 8018f32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f36:	4614      	mov	r4, r2
 8018f38:	690a      	ldr	r2, [r1, #16]
 8018f3a:	6923      	ldr	r3, [r4, #16]
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	bfb8      	it	lt
 8018f40:	460b      	movlt	r3, r1
 8018f42:	4688      	mov	r8, r1
 8018f44:	bfbc      	itt	lt
 8018f46:	46a0      	movlt	r8, r4
 8018f48:	461c      	movlt	r4, r3
 8018f4a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018f4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018f56:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018f5a:	eb07 0609 	add.w	r6, r7, r9
 8018f5e:	42b3      	cmp	r3, r6
 8018f60:	bfb8      	it	lt
 8018f62:	3101      	addlt	r1, #1
 8018f64:	f7ff feca 	bl	8018cfc <_Balloc>
 8018f68:	f100 0514 	add.w	r5, r0, #20
 8018f6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018f70:	462b      	mov	r3, r5
 8018f72:	2200      	movs	r2, #0
 8018f74:	4573      	cmp	r3, lr
 8018f76:	d316      	bcc.n	8018fa6 <__multiply+0x74>
 8018f78:	f104 0214 	add.w	r2, r4, #20
 8018f7c:	f108 0114 	add.w	r1, r8, #20
 8018f80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018f84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018f88:	9300      	str	r3, [sp, #0]
 8018f8a:	9b00      	ldr	r3, [sp, #0]
 8018f8c:	9201      	str	r2, [sp, #4]
 8018f8e:	4293      	cmp	r3, r2
 8018f90:	d80c      	bhi.n	8018fac <__multiply+0x7a>
 8018f92:	2e00      	cmp	r6, #0
 8018f94:	dd03      	ble.n	8018f9e <__multiply+0x6c>
 8018f96:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d05d      	beq.n	801905a <__multiply+0x128>
 8018f9e:	6106      	str	r6, [r0, #16]
 8018fa0:	b003      	add	sp, #12
 8018fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fa6:	f843 2b04 	str.w	r2, [r3], #4
 8018faa:	e7e3      	b.n	8018f74 <__multiply+0x42>
 8018fac:	f8b2 b000 	ldrh.w	fp, [r2]
 8018fb0:	f1bb 0f00 	cmp.w	fp, #0
 8018fb4:	d023      	beq.n	8018ffe <__multiply+0xcc>
 8018fb6:	4689      	mov	r9, r1
 8018fb8:	46ac      	mov	ip, r5
 8018fba:	f04f 0800 	mov.w	r8, #0
 8018fbe:	f859 4b04 	ldr.w	r4, [r9], #4
 8018fc2:	f8dc a000 	ldr.w	sl, [ip]
 8018fc6:	b2a3      	uxth	r3, r4
 8018fc8:	fa1f fa8a 	uxth.w	sl, sl
 8018fcc:	fb0b a303 	mla	r3, fp, r3, sl
 8018fd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018fd4:	f8dc 4000 	ldr.w	r4, [ip]
 8018fd8:	4443      	add	r3, r8
 8018fda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018fde:	fb0b 840a 	mla	r4, fp, sl, r8
 8018fe2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018fe6:	46e2      	mov	sl, ip
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018fee:	454f      	cmp	r7, r9
 8018ff0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018ff4:	f84a 3b04 	str.w	r3, [sl], #4
 8018ff8:	d82b      	bhi.n	8019052 <__multiply+0x120>
 8018ffa:	f8cc 8004 	str.w	r8, [ip, #4]
 8018ffe:	9b01      	ldr	r3, [sp, #4]
 8019000:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8019004:	3204      	adds	r2, #4
 8019006:	f1ba 0f00 	cmp.w	sl, #0
 801900a:	d020      	beq.n	801904e <__multiply+0x11c>
 801900c:	682b      	ldr	r3, [r5, #0]
 801900e:	4689      	mov	r9, r1
 8019010:	46a8      	mov	r8, r5
 8019012:	f04f 0b00 	mov.w	fp, #0
 8019016:	f8b9 c000 	ldrh.w	ip, [r9]
 801901a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801901e:	fb0a 440c 	mla	r4, sl, ip, r4
 8019022:	445c      	add	r4, fp
 8019024:	46c4      	mov	ip, r8
 8019026:	b29b      	uxth	r3, r3
 8019028:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801902c:	f84c 3b04 	str.w	r3, [ip], #4
 8019030:	f859 3b04 	ldr.w	r3, [r9], #4
 8019034:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8019038:	0c1b      	lsrs	r3, r3, #16
 801903a:	fb0a b303 	mla	r3, sl, r3, fp
 801903e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019042:	454f      	cmp	r7, r9
 8019044:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8019048:	d805      	bhi.n	8019056 <__multiply+0x124>
 801904a:	f8c8 3004 	str.w	r3, [r8, #4]
 801904e:	3504      	adds	r5, #4
 8019050:	e79b      	b.n	8018f8a <__multiply+0x58>
 8019052:	46d4      	mov	ip, sl
 8019054:	e7b3      	b.n	8018fbe <__multiply+0x8c>
 8019056:	46e0      	mov	r8, ip
 8019058:	e7dd      	b.n	8019016 <__multiply+0xe4>
 801905a:	3e01      	subs	r6, #1
 801905c:	e799      	b.n	8018f92 <__multiply+0x60>
	...

08019060 <__pow5mult>:
 8019060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019064:	4615      	mov	r5, r2
 8019066:	f012 0203 	ands.w	r2, r2, #3
 801906a:	4606      	mov	r6, r0
 801906c:	460f      	mov	r7, r1
 801906e:	d007      	beq.n	8019080 <__pow5mult+0x20>
 8019070:	3a01      	subs	r2, #1
 8019072:	4c21      	ldr	r4, [pc, #132]	; (80190f8 <__pow5mult+0x98>)
 8019074:	2300      	movs	r3, #0
 8019076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801907a:	f7ff fe8a 	bl	8018d92 <__multadd>
 801907e:	4607      	mov	r7, r0
 8019080:	10ad      	asrs	r5, r5, #2
 8019082:	d035      	beq.n	80190f0 <__pow5mult+0x90>
 8019084:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019086:	b93c      	cbnz	r4, 8019098 <__pow5mult+0x38>
 8019088:	2010      	movs	r0, #16
 801908a:	f7fc fe67 	bl	8015d5c <malloc>
 801908e:	6270      	str	r0, [r6, #36]	; 0x24
 8019090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019094:	6004      	str	r4, [r0, #0]
 8019096:	60c4      	str	r4, [r0, #12]
 8019098:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801909c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80190a0:	b94c      	cbnz	r4, 80190b6 <__pow5mult+0x56>
 80190a2:	f240 2171 	movw	r1, #625	; 0x271
 80190a6:	4630      	mov	r0, r6
 80190a8:	f7ff ff3a 	bl	8018f20 <__i2b>
 80190ac:	2300      	movs	r3, #0
 80190ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80190b2:	4604      	mov	r4, r0
 80190b4:	6003      	str	r3, [r0, #0]
 80190b6:	f04f 0800 	mov.w	r8, #0
 80190ba:	07eb      	lsls	r3, r5, #31
 80190bc:	d50a      	bpl.n	80190d4 <__pow5mult+0x74>
 80190be:	4639      	mov	r1, r7
 80190c0:	4622      	mov	r2, r4
 80190c2:	4630      	mov	r0, r6
 80190c4:	f7ff ff35 	bl	8018f32 <__multiply>
 80190c8:	4639      	mov	r1, r7
 80190ca:	4681      	mov	r9, r0
 80190cc:	4630      	mov	r0, r6
 80190ce:	f7ff fe49 	bl	8018d64 <_Bfree>
 80190d2:	464f      	mov	r7, r9
 80190d4:	106d      	asrs	r5, r5, #1
 80190d6:	d00b      	beq.n	80190f0 <__pow5mult+0x90>
 80190d8:	6820      	ldr	r0, [r4, #0]
 80190da:	b938      	cbnz	r0, 80190ec <__pow5mult+0x8c>
 80190dc:	4622      	mov	r2, r4
 80190de:	4621      	mov	r1, r4
 80190e0:	4630      	mov	r0, r6
 80190e2:	f7ff ff26 	bl	8018f32 <__multiply>
 80190e6:	6020      	str	r0, [r4, #0]
 80190e8:	f8c0 8000 	str.w	r8, [r0]
 80190ec:	4604      	mov	r4, r0
 80190ee:	e7e4      	b.n	80190ba <__pow5mult+0x5a>
 80190f0:	4638      	mov	r0, r7
 80190f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190f6:	bf00      	nop
 80190f8:	0801b6e0 	.word	0x0801b6e0

080190fc <__lshift>:
 80190fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019100:	460c      	mov	r4, r1
 8019102:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019106:	6923      	ldr	r3, [r4, #16]
 8019108:	6849      	ldr	r1, [r1, #4]
 801910a:	eb0a 0903 	add.w	r9, sl, r3
 801910e:	68a3      	ldr	r3, [r4, #8]
 8019110:	4607      	mov	r7, r0
 8019112:	4616      	mov	r6, r2
 8019114:	f109 0501 	add.w	r5, r9, #1
 8019118:	42ab      	cmp	r3, r5
 801911a:	db32      	blt.n	8019182 <__lshift+0x86>
 801911c:	4638      	mov	r0, r7
 801911e:	f7ff fded 	bl	8018cfc <_Balloc>
 8019122:	2300      	movs	r3, #0
 8019124:	4680      	mov	r8, r0
 8019126:	f100 0114 	add.w	r1, r0, #20
 801912a:	461a      	mov	r2, r3
 801912c:	4553      	cmp	r3, sl
 801912e:	db2b      	blt.n	8019188 <__lshift+0x8c>
 8019130:	6920      	ldr	r0, [r4, #16]
 8019132:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019136:	f104 0314 	add.w	r3, r4, #20
 801913a:	f016 021f 	ands.w	r2, r6, #31
 801913e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019142:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019146:	d025      	beq.n	8019194 <__lshift+0x98>
 8019148:	f1c2 0e20 	rsb	lr, r2, #32
 801914c:	2000      	movs	r0, #0
 801914e:	681e      	ldr	r6, [r3, #0]
 8019150:	468a      	mov	sl, r1
 8019152:	4096      	lsls	r6, r2
 8019154:	4330      	orrs	r0, r6
 8019156:	f84a 0b04 	str.w	r0, [sl], #4
 801915a:	f853 0b04 	ldr.w	r0, [r3], #4
 801915e:	459c      	cmp	ip, r3
 8019160:	fa20 f00e 	lsr.w	r0, r0, lr
 8019164:	d814      	bhi.n	8019190 <__lshift+0x94>
 8019166:	6048      	str	r0, [r1, #4]
 8019168:	b108      	cbz	r0, 801916e <__lshift+0x72>
 801916a:	f109 0502 	add.w	r5, r9, #2
 801916e:	3d01      	subs	r5, #1
 8019170:	4638      	mov	r0, r7
 8019172:	f8c8 5010 	str.w	r5, [r8, #16]
 8019176:	4621      	mov	r1, r4
 8019178:	f7ff fdf4 	bl	8018d64 <_Bfree>
 801917c:	4640      	mov	r0, r8
 801917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019182:	3101      	adds	r1, #1
 8019184:	005b      	lsls	r3, r3, #1
 8019186:	e7c7      	b.n	8019118 <__lshift+0x1c>
 8019188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801918c:	3301      	adds	r3, #1
 801918e:	e7cd      	b.n	801912c <__lshift+0x30>
 8019190:	4651      	mov	r1, sl
 8019192:	e7dc      	b.n	801914e <__lshift+0x52>
 8019194:	3904      	subs	r1, #4
 8019196:	f853 2b04 	ldr.w	r2, [r3], #4
 801919a:	f841 2f04 	str.w	r2, [r1, #4]!
 801919e:	459c      	cmp	ip, r3
 80191a0:	d8f9      	bhi.n	8019196 <__lshift+0x9a>
 80191a2:	e7e4      	b.n	801916e <__lshift+0x72>

080191a4 <__mcmp>:
 80191a4:	6903      	ldr	r3, [r0, #16]
 80191a6:	690a      	ldr	r2, [r1, #16]
 80191a8:	1a9b      	subs	r3, r3, r2
 80191aa:	b530      	push	{r4, r5, lr}
 80191ac:	d10c      	bne.n	80191c8 <__mcmp+0x24>
 80191ae:	0092      	lsls	r2, r2, #2
 80191b0:	3014      	adds	r0, #20
 80191b2:	3114      	adds	r1, #20
 80191b4:	1884      	adds	r4, r0, r2
 80191b6:	4411      	add	r1, r2
 80191b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80191bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80191c0:	4295      	cmp	r5, r2
 80191c2:	d003      	beq.n	80191cc <__mcmp+0x28>
 80191c4:	d305      	bcc.n	80191d2 <__mcmp+0x2e>
 80191c6:	2301      	movs	r3, #1
 80191c8:	4618      	mov	r0, r3
 80191ca:	bd30      	pop	{r4, r5, pc}
 80191cc:	42a0      	cmp	r0, r4
 80191ce:	d3f3      	bcc.n	80191b8 <__mcmp+0x14>
 80191d0:	e7fa      	b.n	80191c8 <__mcmp+0x24>
 80191d2:	f04f 33ff 	mov.w	r3, #4294967295
 80191d6:	e7f7      	b.n	80191c8 <__mcmp+0x24>

080191d8 <__mdiff>:
 80191d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191dc:	460d      	mov	r5, r1
 80191de:	4607      	mov	r7, r0
 80191e0:	4611      	mov	r1, r2
 80191e2:	4628      	mov	r0, r5
 80191e4:	4614      	mov	r4, r2
 80191e6:	f7ff ffdd 	bl	80191a4 <__mcmp>
 80191ea:	1e06      	subs	r6, r0, #0
 80191ec:	d108      	bne.n	8019200 <__mdiff+0x28>
 80191ee:	4631      	mov	r1, r6
 80191f0:	4638      	mov	r0, r7
 80191f2:	f7ff fd83 	bl	8018cfc <_Balloc>
 80191f6:	2301      	movs	r3, #1
 80191f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80191fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019200:	bfa4      	itt	ge
 8019202:	4623      	movge	r3, r4
 8019204:	462c      	movge	r4, r5
 8019206:	4638      	mov	r0, r7
 8019208:	6861      	ldr	r1, [r4, #4]
 801920a:	bfa6      	itte	ge
 801920c:	461d      	movge	r5, r3
 801920e:	2600      	movge	r6, #0
 8019210:	2601      	movlt	r6, #1
 8019212:	f7ff fd73 	bl	8018cfc <_Balloc>
 8019216:	692b      	ldr	r3, [r5, #16]
 8019218:	60c6      	str	r6, [r0, #12]
 801921a:	6926      	ldr	r6, [r4, #16]
 801921c:	f105 0914 	add.w	r9, r5, #20
 8019220:	f104 0214 	add.w	r2, r4, #20
 8019224:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019228:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801922c:	f100 0514 	add.w	r5, r0, #20
 8019230:	f04f 0e00 	mov.w	lr, #0
 8019234:	f852 ab04 	ldr.w	sl, [r2], #4
 8019238:	f859 4b04 	ldr.w	r4, [r9], #4
 801923c:	fa1e f18a 	uxtah	r1, lr, sl
 8019240:	b2a3      	uxth	r3, r4
 8019242:	1ac9      	subs	r1, r1, r3
 8019244:	0c23      	lsrs	r3, r4, #16
 8019246:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801924a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801924e:	b289      	uxth	r1, r1
 8019250:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8019254:	45c8      	cmp	r8, r9
 8019256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801925a:	4694      	mov	ip, r2
 801925c:	f845 3b04 	str.w	r3, [r5], #4
 8019260:	d8e8      	bhi.n	8019234 <__mdiff+0x5c>
 8019262:	45bc      	cmp	ip, r7
 8019264:	d304      	bcc.n	8019270 <__mdiff+0x98>
 8019266:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801926a:	b183      	cbz	r3, 801928e <__mdiff+0xb6>
 801926c:	6106      	str	r6, [r0, #16]
 801926e:	e7c5      	b.n	80191fc <__mdiff+0x24>
 8019270:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019274:	fa1e f381 	uxtah	r3, lr, r1
 8019278:	141a      	asrs	r2, r3, #16
 801927a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801927e:	b29b      	uxth	r3, r3
 8019280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019284:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019288:	f845 3b04 	str.w	r3, [r5], #4
 801928c:	e7e9      	b.n	8019262 <__mdiff+0x8a>
 801928e:	3e01      	subs	r6, #1
 8019290:	e7e9      	b.n	8019266 <__mdiff+0x8e>
	...

08019294 <__ulp>:
 8019294:	4b12      	ldr	r3, [pc, #72]	; (80192e0 <__ulp+0x4c>)
 8019296:	ee10 2a90 	vmov	r2, s1
 801929a:	401a      	ands	r2, r3
 801929c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	dd04      	ble.n	80192ae <__ulp+0x1a>
 80192a4:	2000      	movs	r0, #0
 80192a6:	4619      	mov	r1, r3
 80192a8:	ec41 0b10 	vmov	d0, r0, r1
 80192ac:	4770      	bx	lr
 80192ae:	425b      	negs	r3, r3
 80192b0:	151b      	asrs	r3, r3, #20
 80192b2:	2b13      	cmp	r3, #19
 80192b4:	f04f 0000 	mov.w	r0, #0
 80192b8:	f04f 0100 	mov.w	r1, #0
 80192bc:	dc04      	bgt.n	80192c8 <__ulp+0x34>
 80192be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80192c2:	fa42 f103 	asr.w	r1, r2, r3
 80192c6:	e7ef      	b.n	80192a8 <__ulp+0x14>
 80192c8:	3b14      	subs	r3, #20
 80192ca:	2b1e      	cmp	r3, #30
 80192cc:	f04f 0201 	mov.w	r2, #1
 80192d0:	bfda      	itte	le
 80192d2:	f1c3 031f 	rsble	r3, r3, #31
 80192d6:	fa02 f303 	lslle.w	r3, r2, r3
 80192da:	4613      	movgt	r3, r2
 80192dc:	4618      	mov	r0, r3
 80192de:	e7e3      	b.n	80192a8 <__ulp+0x14>
 80192e0:	7ff00000 	.word	0x7ff00000

080192e4 <__b2d>:
 80192e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192e6:	6905      	ldr	r5, [r0, #16]
 80192e8:	f100 0714 	add.w	r7, r0, #20
 80192ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80192f0:	1f2e      	subs	r6, r5, #4
 80192f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80192f6:	4620      	mov	r0, r4
 80192f8:	f7ff fdc4 	bl	8018e84 <__hi0bits>
 80192fc:	f1c0 0320 	rsb	r3, r0, #32
 8019300:	280a      	cmp	r0, #10
 8019302:	600b      	str	r3, [r1, #0]
 8019304:	f8df c074 	ldr.w	ip, [pc, #116]	; 801937c <__b2d+0x98>
 8019308:	dc14      	bgt.n	8019334 <__b2d+0x50>
 801930a:	f1c0 0e0b 	rsb	lr, r0, #11
 801930e:	fa24 f10e 	lsr.w	r1, r4, lr
 8019312:	42b7      	cmp	r7, r6
 8019314:	ea41 030c 	orr.w	r3, r1, ip
 8019318:	bf34      	ite	cc
 801931a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801931e:	2100      	movcs	r1, #0
 8019320:	3015      	adds	r0, #21
 8019322:	fa04 f000 	lsl.w	r0, r4, r0
 8019326:	fa21 f10e 	lsr.w	r1, r1, lr
 801932a:	ea40 0201 	orr.w	r2, r0, r1
 801932e:	ec43 2b10 	vmov	d0, r2, r3
 8019332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019334:	42b7      	cmp	r7, r6
 8019336:	bf3a      	itte	cc
 8019338:	f1a5 0608 	subcc.w	r6, r5, #8
 801933c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019340:	2100      	movcs	r1, #0
 8019342:	380b      	subs	r0, #11
 8019344:	d015      	beq.n	8019372 <__b2d+0x8e>
 8019346:	4084      	lsls	r4, r0
 8019348:	f1c0 0520 	rsb	r5, r0, #32
 801934c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019350:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019354:	42be      	cmp	r6, r7
 8019356:	fa21 fc05 	lsr.w	ip, r1, r5
 801935a:	ea44 030c 	orr.w	r3, r4, ip
 801935e:	bf8c      	ite	hi
 8019360:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019364:	2400      	movls	r4, #0
 8019366:	fa01 f000 	lsl.w	r0, r1, r0
 801936a:	40ec      	lsrs	r4, r5
 801936c:	ea40 0204 	orr.w	r2, r0, r4
 8019370:	e7dd      	b.n	801932e <__b2d+0x4a>
 8019372:	ea44 030c 	orr.w	r3, r4, ip
 8019376:	460a      	mov	r2, r1
 8019378:	e7d9      	b.n	801932e <__b2d+0x4a>
 801937a:	bf00      	nop
 801937c:	3ff00000 	.word	0x3ff00000

08019380 <__d2b>:
 8019380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019384:	460e      	mov	r6, r1
 8019386:	2101      	movs	r1, #1
 8019388:	ec59 8b10 	vmov	r8, r9, d0
 801938c:	4615      	mov	r5, r2
 801938e:	f7ff fcb5 	bl	8018cfc <_Balloc>
 8019392:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019396:	4607      	mov	r7, r0
 8019398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801939c:	bb34      	cbnz	r4, 80193ec <__d2b+0x6c>
 801939e:	9301      	str	r3, [sp, #4]
 80193a0:	f1b8 0300 	subs.w	r3, r8, #0
 80193a4:	d027      	beq.n	80193f6 <__d2b+0x76>
 80193a6:	a802      	add	r0, sp, #8
 80193a8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80193ac:	f7ff fd89 	bl	8018ec2 <__lo0bits>
 80193b0:	9900      	ldr	r1, [sp, #0]
 80193b2:	b1f0      	cbz	r0, 80193f2 <__d2b+0x72>
 80193b4:	9a01      	ldr	r2, [sp, #4]
 80193b6:	f1c0 0320 	rsb	r3, r0, #32
 80193ba:	fa02 f303 	lsl.w	r3, r2, r3
 80193be:	430b      	orrs	r3, r1
 80193c0:	40c2      	lsrs	r2, r0
 80193c2:	617b      	str	r3, [r7, #20]
 80193c4:	9201      	str	r2, [sp, #4]
 80193c6:	9b01      	ldr	r3, [sp, #4]
 80193c8:	61bb      	str	r3, [r7, #24]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	bf14      	ite	ne
 80193ce:	2102      	movne	r1, #2
 80193d0:	2101      	moveq	r1, #1
 80193d2:	6139      	str	r1, [r7, #16]
 80193d4:	b1c4      	cbz	r4, 8019408 <__d2b+0x88>
 80193d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80193da:	4404      	add	r4, r0
 80193dc:	6034      	str	r4, [r6, #0]
 80193de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80193e2:	6028      	str	r0, [r5, #0]
 80193e4:	4638      	mov	r0, r7
 80193e6:	b003      	add	sp, #12
 80193e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80193f0:	e7d5      	b.n	801939e <__d2b+0x1e>
 80193f2:	6179      	str	r1, [r7, #20]
 80193f4:	e7e7      	b.n	80193c6 <__d2b+0x46>
 80193f6:	a801      	add	r0, sp, #4
 80193f8:	f7ff fd63 	bl	8018ec2 <__lo0bits>
 80193fc:	9b01      	ldr	r3, [sp, #4]
 80193fe:	617b      	str	r3, [r7, #20]
 8019400:	2101      	movs	r1, #1
 8019402:	6139      	str	r1, [r7, #16]
 8019404:	3020      	adds	r0, #32
 8019406:	e7e5      	b.n	80193d4 <__d2b+0x54>
 8019408:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801940c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019410:	6030      	str	r0, [r6, #0]
 8019412:	6918      	ldr	r0, [r3, #16]
 8019414:	f7ff fd36 	bl	8018e84 <__hi0bits>
 8019418:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801941c:	e7e1      	b.n	80193e2 <__d2b+0x62>

0801941e <__ratio>:
 801941e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019422:	4688      	mov	r8, r1
 8019424:	4669      	mov	r1, sp
 8019426:	4681      	mov	r9, r0
 8019428:	f7ff ff5c 	bl	80192e4 <__b2d>
 801942c:	a901      	add	r1, sp, #4
 801942e:	4640      	mov	r0, r8
 8019430:	ec57 6b10 	vmov	r6, r7, d0
 8019434:	f7ff ff56 	bl	80192e4 <__b2d>
 8019438:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801943c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019440:	eba3 0c02 	sub.w	ip, r3, r2
 8019444:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019448:	1a9b      	subs	r3, r3, r2
 801944a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801944e:	ec5b ab10 	vmov	sl, fp, d0
 8019452:	2b00      	cmp	r3, #0
 8019454:	bfce      	itee	gt
 8019456:	463a      	movgt	r2, r7
 8019458:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801945c:	465a      	movle	r2, fp
 801945e:	4659      	mov	r1, fp
 8019460:	463d      	mov	r5, r7
 8019462:	bfd4      	ite	le
 8019464:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019468:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801946c:	4630      	mov	r0, r6
 801946e:	ee10 2a10 	vmov	r2, s0
 8019472:	460b      	mov	r3, r1
 8019474:	4629      	mov	r1, r5
 8019476:	f7e7 f9e9 	bl	800084c <__aeabi_ddiv>
 801947a:	ec41 0b10 	vmov	d0, r0, r1
 801947e:	b003      	add	sp, #12
 8019480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019484 <__copybits>:
 8019484:	3901      	subs	r1, #1
 8019486:	b510      	push	{r4, lr}
 8019488:	1149      	asrs	r1, r1, #5
 801948a:	6914      	ldr	r4, [r2, #16]
 801948c:	3101      	adds	r1, #1
 801948e:	f102 0314 	add.w	r3, r2, #20
 8019492:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019496:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801949a:	42a3      	cmp	r3, r4
 801949c:	4602      	mov	r2, r0
 801949e:	d303      	bcc.n	80194a8 <__copybits+0x24>
 80194a0:	2300      	movs	r3, #0
 80194a2:	428a      	cmp	r2, r1
 80194a4:	d305      	bcc.n	80194b2 <__copybits+0x2e>
 80194a6:	bd10      	pop	{r4, pc}
 80194a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ac:	f840 2b04 	str.w	r2, [r0], #4
 80194b0:	e7f3      	b.n	801949a <__copybits+0x16>
 80194b2:	f842 3b04 	str.w	r3, [r2], #4
 80194b6:	e7f4      	b.n	80194a2 <__copybits+0x1e>

080194b8 <__any_on>:
 80194b8:	f100 0214 	add.w	r2, r0, #20
 80194bc:	6900      	ldr	r0, [r0, #16]
 80194be:	114b      	asrs	r3, r1, #5
 80194c0:	4298      	cmp	r0, r3
 80194c2:	b510      	push	{r4, lr}
 80194c4:	db11      	blt.n	80194ea <__any_on+0x32>
 80194c6:	dd0a      	ble.n	80194de <__any_on+0x26>
 80194c8:	f011 011f 	ands.w	r1, r1, #31
 80194cc:	d007      	beq.n	80194de <__any_on+0x26>
 80194ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80194d2:	fa24 f001 	lsr.w	r0, r4, r1
 80194d6:	fa00 f101 	lsl.w	r1, r0, r1
 80194da:	428c      	cmp	r4, r1
 80194dc:	d10b      	bne.n	80194f6 <__any_on+0x3e>
 80194de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80194e2:	4293      	cmp	r3, r2
 80194e4:	d803      	bhi.n	80194ee <__any_on+0x36>
 80194e6:	2000      	movs	r0, #0
 80194e8:	bd10      	pop	{r4, pc}
 80194ea:	4603      	mov	r3, r0
 80194ec:	e7f7      	b.n	80194de <__any_on+0x26>
 80194ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80194f2:	2900      	cmp	r1, #0
 80194f4:	d0f5      	beq.n	80194e2 <__any_on+0x2a>
 80194f6:	2001      	movs	r0, #1
 80194f8:	e7f6      	b.n	80194e8 <__any_on+0x30>

080194fa <_calloc_r>:
 80194fa:	b538      	push	{r3, r4, r5, lr}
 80194fc:	fb02 f401 	mul.w	r4, r2, r1
 8019500:	4621      	mov	r1, r4
 8019502:	f7fc fcb5 	bl	8015e70 <_malloc_r>
 8019506:	4605      	mov	r5, r0
 8019508:	b118      	cbz	r0, 8019512 <_calloc_r+0x18>
 801950a:	4622      	mov	r2, r4
 801950c:	2100      	movs	r1, #0
 801950e:	f7fc fc59 	bl	8015dc4 <memset>
 8019512:	4628      	mov	r0, r5
 8019514:	bd38      	pop	{r3, r4, r5, pc}

08019516 <__ssputs_r>:
 8019516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801951a:	688e      	ldr	r6, [r1, #8]
 801951c:	429e      	cmp	r6, r3
 801951e:	4682      	mov	sl, r0
 8019520:	460c      	mov	r4, r1
 8019522:	4690      	mov	r8, r2
 8019524:	4699      	mov	r9, r3
 8019526:	d837      	bhi.n	8019598 <__ssputs_r+0x82>
 8019528:	898a      	ldrh	r2, [r1, #12]
 801952a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801952e:	d031      	beq.n	8019594 <__ssputs_r+0x7e>
 8019530:	6825      	ldr	r5, [r4, #0]
 8019532:	6909      	ldr	r1, [r1, #16]
 8019534:	1a6f      	subs	r7, r5, r1
 8019536:	6965      	ldr	r5, [r4, #20]
 8019538:	2302      	movs	r3, #2
 801953a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801953e:	fb95 f5f3 	sdiv	r5, r5, r3
 8019542:	f109 0301 	add.w	r3, r9, #1
 8019546:	443b      	add	r3, r7
 8019548:	429d      	cmp	r5, r3
 801954a:	bf38      	it	cc
 801954c:	461d      	movcc	r5, r3
 801954e:	0553      	lsls	r3, r2, #21
 8019550:	d530      	bpl.n	80195b4 <__ssputs_r+0x9e>
 8019552:	4629      	mov	r1, r5
 8019554:	f7fc fc8c 	bl	8015e70 <_malloc_r>
 8019558:	4606      	mov	r6, r0
 801955a:	b950      	cbnz	r0, 8019572 <__ssputs_r+0x5c>
 801955c:	230c      	movs	r3, #12
 801955e:	f8ca 3000 	str.w	r3, [sl]
 8019562:	89a3      	ldrh	r3, [r4, #12]
 8019564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019568:	81a3      	strh	r3, [r4, #12]
 801956a:	f04f 30ff 	mov.w	r0, #4294967295
 801956e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019572:	463a      	mov	r2, r7
 8019574:	6921      	ldr	r1, [r4, #16]
 8019576:	f7fc fc01 	bl	8015d7c <memcpy>
 801957a:	89a3      	ldrh	r3, [r4, #12]
 801957c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019584:	81a3      	strh	r3, [r4, #12]
 8019586:	6126      	str	r6, [r4, #16]
 8019588:	6165      	str	r5, [r4, #20]
 801958a:	443e      	add	r6, r7
 801958c:	1bed      	subs	r5, r5, r7
 801958e:	6026      	str	r6, [r4, #0]
 8019590:	60a5      	str	r5, [r4, #8]
 8019592:	464e      	mov	r6, r9
 8019594:	454e      	cmp	r6, r9
 8019596:	d900      	bls.n	801959a <__ssputs_r+0x84>
 8019598:	464e      	mov	r6, r9
 801959a:	4632      	mov	r2, r6
 801959c:	4641      	mov	r1, r8
 801959e:	6820      	ldr	r0, [r4, #0]
 80195a0:	f7fc fbf7 	bl	8015d92 <memmove>
 80195a4:	68a3      	ldr	r3, [r4, #8]
 80195a6:	1b9b      	subs	r3, r3, r6
 80195a8:	60a3      	str	r3, [r4, #8]
 80195aa:	6823      	ldr	r3, [r4, #0]
 80195ac:	441e      	add	r6, r3
 80195ae:	6026      	str	r6, [r4, #0]
 80195b0:	2000      	movs	r0, #0
 80195b2:	e7dc      	b.n	801956e <__ssputs_r+0x58>
 80195b4:	462a      	mov	r2, r5
 80195b6:	f000 f920 	bl	80197fa <_realloc_r>
 80195ba:	4606      	mov	r6, r0
 80195bc:	2800      	cmp	r0, #0
 80195be:	d1e2      	bne.n	8019586 <__ssputs_r+0x70>
 80195c0:	6921      	ldr	r1, [r4, #16]
 80195c2:	4650      	mov	r0, sl
 80195c4:	f7fc fc06 	bl	8015dd4 <_free_r>
 80195c8:	e7c8      	b.n	801955c <__ssputs_r+0x46>
	...

080195cc <_svfiprintf_r>:
 80195cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195d0:	461d      	mov	r5, r3
 80195d2:	898b      	ldrh	r3, [r1, #12]
 80195d4:	061f      	lsls	r7, r3, #24
 80195d6:	b09d      	sub	sp, #116	; 0x74
 80195d8:	4680      	mov	r8, r0
 80195da:	460c      	mov	r4, r1
 80195dc:	4616      	mov	r6, r2
 80195de:	d50f      	bpl.n	8019600 <_svfiprintf_r+0x34>
 80195e0:	690b      	ldr	r3, [r1, #16]
 80195e2:	b96b      	cbnz	r3, 8019600 <_svfiprintf_r+0x34>
 80195e4:	2140      	movs	r1, #64	; 0x40
 80195e6:	f7fc fc43 	bl	8015e70 <_malloc_r>
 80195ea:	6020      	str	r0, [r4, #0]
 80195ec:	6120      	str	r0, [r4, #16]
 80195ee:	b928      	cbnz	r0, 80195fc <_svfiprintf_r+0x30>
 80195f0:	230c      	movs	r3, #12
 80195f2:	f8c8 3000 	str.w	r3, [r8]
 80195f6:	f04f 30ff 	mov.w	r0, #4294967295
 80195fa:	e0c8      	b.n	801978e <_svfiprintf_r+0x1c2>
 80195fc:	2340      	movs	r3, #64	; 0x40
 80195fe:	6163      	str	r3, [r4, #20]
 8019600:	2300      	movs	r3, #0
 8019602:	9309      	str	r3, [sp, #36]	; 0x24
 8019604:	2320      	movs	r3, #32
 8019606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801960a:	2330      	movs	r3, #48	; 0x30
 801960c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019610:	9503      	str	r5, [sp, #12]
 8019612:	f04f 0b01 	mov.w	fp, #1
 8019616:	4637      	mov	r7, r6
 8019618:	463d      	mov	r5, r7
 801961a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801961e:	b10b      	cbz	r3, 8019624 <_svfiprintf_r+0x58>
 8019620:	2b25      	cmp	r3, #37	; 0x25
 8019622:	d13e      	bne.n	80196a2 <_svfiprintf_r+0xd6>
 8019624:	ebb7 0a06 	subs.w	sl, r7, r6
 8019628:	d00b      	beq.n	8019642 <_svfiprintf_r+0x76>
 801962a:	4653      	mov	r3, sl
 801962c:	4632      	mov	r2, r6
 801962e:	4621      	mov	r1, r4
 8019630:	4640      	mov	r0, r8
 8019632:	f7ff ff70 	bl	8019516 <__ssputs_r>
 8019636:	3001      	adds	r0, #1
 8019638:	f000 80a4 	beq.w	8019784 <_svfiprintf_r+0x1b8>
 801963c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801963e:	4453      	add	r3, sl
 8019640:	9309      	str	r3, [sp, #36]	; 0x24
 8019642:	783b      	ldrb	r3, [r7, #0]
 8019644:	2b00      	cmp	r3, #0
 8019646:	f000 809d 	beq.w	8019784 <_svfiprintf_r+0x1b8>
 801964a:	2300      	movs	r3, #0
 801964c:	f04f 32ff 	mov.w	r2, #4294967295
 8019650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019654:	9304      	str	r3, [sp, #16]
 8019656:	9307      	str	r3, [sp, #28]
 8019658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801965c:	931a      	str	r3, [sp, #104]	; 0x68
 801965e:	462f      	mov	r7, r5
 8019660:	2205      	movs	r2, #5
 8019662:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019666:	4850      	ldr	r0, [pc, #320]	; (80197a8 <_svfiprintf_r+0x1dc>)
 8019668:	f7e6 fdba 	bl	80001e0 <memchr>
 801966c:	9b04      	ldr	r3, [sp, #16]
 801966e:	b9d0      	cbnz	r0, 80196a6 <_svfiprintf_r+0xda>
 8019670:	06d9      	lsls	r1, r3, #27
 8019672:	bf44      	itt	mi
 8019674:	2220      	movmi	r2, #32
 8019676:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801967a:	071a      	lsls	r2, r3, #28
 801967c:	bf44      	itt	mi
 801967e:	222b      	movmi	r2, #43	; 0x2b
 8019680:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019684:	782a      	ldrb	r2, [r5, #0]
 8019686:	2a2a      	cmp	r2, #42	; 0x2a
 8019688:	d015      	beq.n	80196b6 <_svfiprintf_r+0xea>
 801968a:	9a07      	ldr	r2, [sp, #28]
 801968c:	462f      	mov	r7, r5
 801968e:	2000      	movs	r0, #0
 8019690:	250a      	movs	r5, #10
 8019692:	4639      	mov	r1, r7
 8019694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019698:	3b30      	subs	r3, #48	; 0x30
 801969a:	2b09      	cmp	r3, #9
 801969c:	d94d      	bls.n	801973a <_svfiprintf_r+0x16e>
 801969e:	b1b8      	cbz	r0, 80196d0 <_svfiprintf_r+0x104>
 80196a0:	e00f      	b.n	80196c2 <_svfiprintf_r+0xf6>
 80196a2:	462f      	mov	r7, r5
 80196a4:	e7b8      	b.n	8019618 <_svfiprintf_r+0x4c>
 80196a6:	4a40      	ldr	r2, [pc, #256]	; (80197a8 <_svfiprintf_r+0x1dc>)
 80196a8:	1a80      	subs	r0, r0, r2
 80196aa:	fa0b f000 	lsl.w	r0, fp, r0
 80196ae:	4318      	orrs	r0, r3
 80196b0:	9004      	str	r0, [sp, #16]
 80196b2:	463d      	mov	r5, r7
 80196b4:	e7d3      	b.n	801965e <_svfiprintf_r+0x92>
 80196b6:	9a03      	ldr	r2, [sp, #12]
 80196b8:	1d11      	adds	r1, r2, #4
 80196ba:	6812      	ldr	r2, [r2, #0]
 80196bc:	9103      	str	r1, [sp, #12]
 80196be:	2a00      	cmp	r2, #0
 80196c0:	db01      	blt.n	80196c6 <_svfiprintf_r+0xfa>
 80196c2:	9207      	str	r2, [sp, #28]
 80196c4:	e004      	b.n	80196d0 <_svfiprintf_r+0x104>
 80196c6:	4252      	negs	r2, r2
 80196c8:	f043 0302 	orr.w	r3, r3, #2
 80196cc:	9207      	str	r2, [sp, #28]
 80196ce:	9304      	str	r3, [sp, #16]
 80196d0:	783b      	ldrb	r3, [r7, #0]
 80196d2:	2b2e      	cmp	r3, #46	; 0x2e
 80196d4:	d10c      	bne.n	80196f0 <_svfiprintf_r+0x124>
 80196d6:	787b      	ldrb	r3, [r7, #1]
 80196d8:	2b2a      	cmp	r3, #42	; 0x2a
 80196da:	d133      	bne.n	8019744 <_svfiprintf_r+0x178>
 80196dc:	9b03      	ldr	r3, [sp, #12]
 80196de:	1d1a      	adds	r2, r3, #4
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	9203      	str	r2, [sp, #12]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	bfb8      	it	lt
 80196e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80196ec:	3702      	adds	r7, #2
 80196ee:	9305      	str	r3, [sp, #20]
 80196f0:	4d2e      	ldr	r5, [pc, #184]	; (80197ac <_svfiprintf_r+0x1e0>)
 80196f2:	7839      	ldrb	r1, [r7, #0]
 80196f4:	2203      	movs	r2, #3
 80196f6:	4628      	mov	r0, r5
 80196f8:	f7e6 fd72 	bl	80001e0 <memchr>
 80196fc:	b138      	cbz	r0, 801970e <_svfiprintf_r+0x142>
 80196fe:	2340      	movs	r3, #64	; 0x40
 8019700:	1b40      	subs	r0, r0, r5
 8019702:	fa03 f000 	lsl.w	r0, r3, r0
 8019706:	9b04      	ldr	r3, [sp, #16]
 8019708:	4303      	orrs	r3, r0
 801970a:	3701      	adds	r7, #1
 801970c:	9304      	str	r3, [sp, #16]
 801970e:	7839      	ldrb	r1, [r7, #0]
 8019710:	4827      	ldr	r0, [pc, #156]	; (80197b0 <_svfiprintf_r+0x1e4>)
 8019712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019716:	2206      	movs	r2, #6
 8019718:	1c7e      	adds	r6, r7, #1
 801971a:	f7e6 fd61 	bl	80001e0 <memchr>
 801971e:	2800      	cmp	r0, #0
 8019720:	d038      	beq.n	8019794 <_svfiprintf_r+0x1c8>
 8019722:	4b24      	ldr	r3, [pc, #144]	; (80197b4 <_svfiprintf_r+0x1e8>)
 8019724:	bb13      	cbnz	r3, 801976c <_svfiprintf_r+0x1a0>
 8019726:	9b03      	ldr	r3, [sp, #12]
 8019728:	3307      	adds	r3, #7
 801972a:	f023 0307 	bic.w	r3, r3, #7
 801972e:	3308      	adds	r3, #8
 8019730:	9303      	str	r3, [sp, #12]
 8019732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019734:	444b      	add	r3, r9
 8019736:	9309      	str	r3, [sp, #36]	; 0x24
 8019738:	e76d      	b.n	8019616 <_svfiprintf_r+0x4a>
 801973a:	fb05 3202 	mla	r2, r5, r2, r3
 801973e:	2001      	movs	r0, #1
 8019740:	460f      	mov	r7, r1
 8019742:	e7a6      	b.n	8019692 <_svfiprintf_r+0xc6>
 8019744:	2300      	movs	r3, #0
 8019746:	3701      	adds	r7, #1
 8019748:	9305      	str	r3, [sp, #20]
 801974a:	4619      	mov	r1, r3
 801974c:	250a      	movs	r5, #10
 801974e:	4638      	mov	r0, r7
 8019750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019754:	3a30      	subs	r2, #48	; 0x30
 8019756:	2a09      	cmp	r2, #9
 8019758:	d903      	bls.n	8019762 <_svfiprintf_r+0x196>
 801975a:	2b00      	cmp	r3, #0
 801975c:	d0c8      	beq.n	80196f0 <_svfiprintf_r+0x124>
 801975e:	9105      	str	r1, [sp, #20]
 8019760:	e7c6      	b.n	80196f0 <_svfiprintf_r+0x124>
 8019762:	fb05 2101 	mla	r1, r5, r1, r2
 8019766:	2301      	movs	r3, #1
 8019768:	4607      	mov	r7, r0
 801976a:	e7f0      	b.n	801974e <_svfiprintf_r+0x182>
 801976c:	ab03      	add	r3, sp, #12
 801976e:	9300      	str	r3, [sp, #0]
 8019770:	4622      	mov	r2, r4
 8019772:	4b11      	ldr	r3, [pc, #68]	; (80197b8 <_svfiprintf_r+0x1ec>)
 8019774:	a904      	add	r1, sp, #16
 8019776:	4640      	mov	r0, r8
 8019778:	f7fc fc68 	bl	801604c <_printf_float>
 801977c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019780:	4681      	mov	r9, r0
 8019782:	d1d6      	bne.n	8019732 <_svfiprintf_r+0x166>
 8019784:	89a3      	ldrh	r3, [r4, #12]
 8019786:	065b      	lsls	r3, r3, #25
 8019788:	f53f af35 	bmi.w	80195f6 <_svfiprintf_r+0x2a>
 801978c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801978e:	b01d      	add	sp, #116	; 0x74
 8019790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019794:	ab03      	add	r3, sp, #12
 8019796:	9300      	str	r3, [sp, #0]
 8019798:	4622      	mov	r2, r4
 801979a:	4b07      	ldr	r3, [pc, #28]	; (80197b8 <_svfiprintf_r+0x1ec>)
 801979c:	a904      	add	r1, sp, #16
 801979e:	4640      	mov	r0, r8
 80197a0:	f7fc ff0a 	bl	80165b8 <_printf_i>
 80197a4:	e7ea      	b.n	801977c <_svfiprintf_r+0x1b0>
 80197a6:	bf00      	nop
 80197a8:	0801b6ec 	.word	0x0801b6ec
 80197ac:	0801b6f2 	.word	0x0801b6f2
 80197b0:	0801b6f6 	.word	0x0801b6f6
 80197b4:	0801604d 	.word	0x0801604d
 80197b8:	08019517 	.word	0x08019517

080197bc <strncmp>:
 80197bc:	b510      	push	{r4, lr}
 80197be:	b16a      	cbz	r2, 80197dc <strncmp+0x20>
 80197c0:	3901      	subs	r1, #1
 80197c2:	1884      	adds	r4, r0, r2
 80197c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80197c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80197cc:	4293      	cmp	r3, r2
 80197ce:	d103      	bne.n	80197d8 <strncmp+0x1c>
 80197d0:	42a0      	cmp	r0, r4
 80197d2:	d001      	beq.n	80197d8 <strncmp+0x1c>
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d1f5      	bne.n	80197c4 <strncmp+0x8>
 80197d8:	1a98      	subs	r0, r3, r2
 80197da:	bd10      	pop	{r4, pc}
 80197dc:	4610      	mov	r0, r2
 80197de:	e7fc      	b.n	80197da <strncmp+0x1e>

080197e0 <__ascii_wctomb>:
 80197e0:	b149      	cbz	r1, 80197f6 <__ascii_wctomb+0x16>
 80197e2:	2aff      	cmp	r2, #255	; 0xff
 80197e4:	bf85      	ittet	hi
 80197e6:	238a      	movhi	r3, #138	; 0x8a
 80197e8:	6003      	strhi	r3, [r0, #0]
 80197ea:	700a      	strbls	r2, [r1, #0]
 80197ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80197f0:	bf98      	it	ls
 80197f2:	2001      	movls	r0, #1
 80197f4:	4770      	bx	lr
 80197f6:	4608      	mov	r0, r1
 80197f8:	4770      	bx	lr

080197fa <_realloc_r>:
 80197fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197fc:	4607      	mov	r7, r0
 80197fe:	4614      	mov	r4, r2
 8019800:	460e      	mov	r6, r1
 8019802:	b921      	cbnz	r1, 801980e <_realloc_r+0x14>
 8019804:	4611      	mov	r1, r2
 8019806:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801980a:	f7fc bb31 	b.w	8015e70 <_malloc_r>
 801980e:	b922      	cbnz	r2, 801981a <_realloc_r+0x20>
 8019810:	f7fc fae0 	bl	8015dd4 <_free_r>
 8019814:	4625      	mov	r5, r4
 8019816:	4628      	mov	r0, r5
 8019818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801981a:	f000 f814 	bl	8019846 <_malloc_usable_size_r>
 801981e:	42a0      	cmp	r0, r4
 8019820:	d20f      	bcs.n	8019842 <_realloc_r+0x48>
 8019822:	4621      	mov	r1, r4
 8019824:	4638      	mov	r0, r7
 8019826:	f7fc fb23 	bl	8015e70 <_malloc_r>
 801982a:	4605      	mov	r5, r0
 801982c:	2800      	cmp	r0, #0
 801982e:	d0f2      	beq.n	8019816 <_realloc_r+0x1c>
 8019830:	4631      	mov	r1, r6
 8019832:	4622      	mov	r2, r4
 8019834:	f7fc faa2 	bl	8015d7c <memcpy>
 8019838:	4631      	mov	r1, r6
 801983a:	4638      	mov	r0, r7
 801983c:	f7fc faca 	bl	8015dd4 <_free_r>
 8019840:	e7e9      	b.n	8019816 <_realloc_r+0x1c>
 8019842:	4635      	mov	r5, r6
 8019844:	e7e7      	b.n	8019816 <_realloc_r+0x1c>

08019846 <_malloc_usable_size_r>:
 8019846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801984a:	1f18      	subs	r0, r3, #4
 801984c:	2b00      	cmp	r3, #0
 801984e:	bfbc      	itt	lt
 8019850:	580b      	ldrlt	r3, [r1, r0]
 8019852:	18c0      	addlt	r0, r0, r3
 8019854:	4770      	bx	lr
	...

08019858 <ceil>:
 8019858:	ec51 0b10 	vmov	r0, r1, d0
 801985c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019860:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019864:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019868:	2e13      	cmp	r6, #19
 801986a:	460c      	mov	r4, r1
 801986c:	ee10 5a10 	vmov	r5, s0
 8019870:	4680      	mov	r8, r0
 8019872:	dc30      	bgt.n	80198d6 <ceil+0x7e>
 8019874:	2e00      	cmp	r6, #0
 8019876:	da12      	bge.n	801989e <ceil+0x46>
 8019878:	a333      	add	r3, pc, #204	; (adr r3, 8019948 <ceil+0xf0>)
 801987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801987e:	f7e6 fd05 	bl	800028c <__adddf3>
 8019882:	2200      	movs	r2, #0
 8019884:	2300      	movs	r3, #0
 8019886:	f7e7 f947 	bl	8000b18 <__aeabi_dcmpgt>
 801988a:	b128      	cbz	r0, 8019898 <ceil+0x40>
 801988c:	2c00      	cmp	r4, #0
 801988e:	db55      	blt.n	801993c <ceil+0xe4>
 8019890:	432c      	orrs	r4, r5
 8019892:	d057      	beq.n	8019944 <ceil+0xec>
 8019894:	4c2e      	ldr	r4, [pc, #184]	; (8019950 <ceil+0xf8>)
 8019896:	2500      	movs	r5, #0
 8019898:	4621      	mov	r1, r4
 801989a:	4628      	mov	r0, r5
 801989c:	e025      	b.n	80198ea <ceil+0x92>
 801989e:	4f2d      	ldr	r7, [pc, #180]	; (8019954 <ceil+0xfc>)
 80198a0:	4137      	asrs	r7, r6
 80198a2:	ea01 0307 	and.w	r3, r1, r7
 80198a6:	4303      	orrs	r3, r0
 80198a8:	d01f      	beq.n	80198ea <ceil+0x92>
 80198aa:	a327      	add	r3, pc, #156	; (adr r3, 8019948 <ceil+0xf0>)
 80198ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b0:	f7e6 fcec 	bl	800028c <__adddf3>
 80198b4:	2200      	movs	r2, #0
 80198b6:	2300      	movs	r3, #0
 80198b8:	f7e7 f92e 	bl	8000b18 <__aeabi_dcmpgt>
 80198bc:	2800      	cmp	r0, #0
 80198be:	d0eb      	beq.n	8019898 <ceil+0x40>
 80198c0:	2c00      	cmp	r4, #0
 80198c2:	bfc2      	ittt	gt
 80198c4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80198c8:	fa43 f606 	asrgt.w	r6, r3, r6
 80198cc:	19a4      	addgt	r4, r4, r6
 80198ce:	ea24 0407 	bic.w	r4, r4, r7
 80198d2:	2500      	movs	r5, #0
 80198d4:	e7e0      	b.n	8019898 <ceil+0x40>
 80198d6:	2e33      	cmp	r6, #51	; 0x33
 80198d8:	dd0b      	ble.n	80198f2 <ceil+0x9a>
 80198da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80198de:	d104      	bne.n	80198ea <ceil+0x92>
 80198e0:	ee10 2a10 	vmov	r2, s0
 80198e4:	460b      	mov	r3, r1
 80198e6:	f7e6 fcd1 	bl	800028c <__adddf3>
 80198ea:	ec41 0b10 	vmov	d0, r0, r1
 80198ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80198f6:	f04f 33ff 	mov.w	r3, #4294967295
 80198fa:	fa23 f707 	lsr.w	r7, r3, r7
 80198fe:	4207      	tst	r7, r0
 8019900:	d0f3      	beq.n	80198ea <ceil+0x92>
 8019902:	a311      	add	r3, pc, #68	; (adr r3, 8019948 <ceil+0xf0>)
 8019904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019908:	f7e6 fcc0 	bl	800028c <__adddf3>
 801990c:	2200      	movs	r2, #0
 801990e:	2300      	movs	r3, #0
 8019910:	f7e7 f902 	bl	8000b18 <__aeabi_dcmpgt>
 8019914:	2800      	cmp	r0, #0
 8019916:	d0bf      	beq.n	8019898 <ceil+0x40>
 8019918:	2c00      	cmp	r4, #0
 801991a:	dd02      	ble.n	8019922 <ceil+0xca>
 801991c:	2e14      	cmp	r6, #20
 801991e:	d103      	bne.n	8019928 <ceil+0xd0>
 8019920:	3401      	adds	r4, #1
 8019922:	ea25 0507 	bic.w	r5, r5, r7
 8019926:	e7b7      	b.n	8019898 <ceil+0x40>
 8019928:	2301      	movs	r3, #1
 801992a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801992e:	fa03 f606 	lsl.w	r6, r3, r6
 8019932:	4435      	add	r5, r6
 8019934:	4545      	cmp	r5, r8
 8019936:	bf38      	it	cc
 8019938:	18e4      	addcc	r4, r4, r3
 801993a:	e7f2      	b.n	8019922 <ceil+0xca>
 801993c:	2500      	movs	r5, #0
 801993e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019942:	e7a9      	b.n	8019898 <ceil+0x40>
 8019944:	4625      	mov	r5, r4
 8019946:	e7a7      	b.n	8019898 <ceil+0x40>
 8019948:	8800759c 	.word	0x8800759c
 801994c:	7e37e43c 	.word	0x7e37e43c
 8019950:	3ff00000 	.word	0x3ff00000
 8019954:	000fffff 	.word	0x000fffff

08019958 <cos>:
 8019958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801995a:	ec51 0b10 	vmov	r0, r1, d0
 801995e:	4a1e      	ldr	r2, [pc, #120]	; (80199d8 <cos+0x80>)
 8019960:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019964:	4293      	cmp	r3, r2
 8019966:	dc06      	bgt.n	8019976 <cos+0x1e>
 8019968:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80199d0 <cos+0x78>
 801996c:	f000 fcec 	bl	801a348 <__kernel_cos>
 8019970:	ec51 0b10 	vmov	r0, r1, d0
 8019974:	e007      	b.n	8019986 <cos+0x2e>
 8019976:	4a19      	ldr	r2, [pc, #100]	; (80199dc <cos+0x84>)
 8019978:	4293      	cmp	r3, r2
 801997a:	dd09      	ble.n	8019990 <cos+0x38>
 801997c:	ee10 2a10 	vmov	r2, s0
 8019980:	460b      	mov	r3, r1
 8019982:	f7e6 fc81 	bl	8000288 <__aeabi_dsub>
 8019986:	ec41 0b10 	vmov	d0, r0, r1
 801998a:	b005      	add	sp, #20
 801998c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019990:	4668      	mov	r0, sp
 8019992:	f000 fa35 	bl	8019e00 <__ieee754_rem_pio2>
 8019996:	f000 0003 	and.w	r0, r0, #3
 801999a:	2801      	cmp	r0, #1
 801999c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199a0:	ed9d 0b00 	vldr	d0, [sp]
 80199a4:	d007      	beq.n	80199b6 <cos+0x5e>
 80199a6:	2802      	cmp	r0, #2
 80199a8:	d00e      	beq.n	80199c8 <cos+0x70>
 80199aa:	2800      	cmp	r0, #0
 80199ac:	d0de      	beq.n	801996c <cos+0x14>
 80199ae:	2001      	movs	r0, #1
 80199b0:	f001 f8d2 	bl	801ab58 <__kernel_sin>
 80199b4:	e7dc      	b.n	8019970 <cos+0x18>
 80199b6:	f001 f8cf 	bl	801ab58 <__kernel_sin>
 80199ba:	ec53 2b10 	vmov	r2, r3, d0
 80199be:	ee10 0a10 	vmov	r0, s0
 80199c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80199c6:	e7de      	b.n	8019986 <cos+0x2e>
 80199c8:	f000 fcbe 	bl	801a348 <__kernel_cos>
 80199cc:	e7f5      	b.n	80199ba <cos+0x62>
 80199ce:	bf00      	nop
	...
 80199d8:	3fe921fb 	.word	0x3fe921fb
 80199dc:	7fefffff 	.word	0x7fefffff

080199e0 <round>:
 80199e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199e2:	ec57 6b10 	vmov	r6, r7, d0
 80199e6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80199ea:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80199ee:	2c13      	cmp	r4, #19
 80199f0:	463b      	mov	r3, r7
 80199f2:	463d      	mov	r5, r7
 80199f4:	dc17      	bgt.n	8019a26 <round+0x46>
 80199f6:	2c00      	cmp	r4, #0
 80199f8:	da09      	bge.n	8019a0e <round+0x2e>
 80199fa:	3401      	adds	r4, #1
 80199fc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019a00:	d103      	bne.n	8019a0a <round+0x2a>
 8019a02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019a06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019a0a:	2100      	movs	r1, #0
 8019a0c:	e02c      	b.n	8019a68 <round+0x88>
 8019a0e:	4a18      	ldr	r2, [pc, #96]	; (8019a70 <round+0x90>)
 8019a10:	4122      	asrs	r2, r4
 8019a12:	4217      	tst	r7, r2
 8019a14:	d100      	bne.n	8019a18 <round+0x38>
 8019a16:	b19e      	cbz	r6, 8019a40 <round+0x60>
 8019a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019a1c:	4123      	asrs	r3, r4
 8019a1e:	442b      	add	r3, r5
 8019a20:	ea23 0302 	bic.w	r3, r3, r2
 8019a24:	e7f1      	b.n	8019a0a <round+0x2a>
 8019a26:	2c33      	cmp	r4, #51	; 0x33
 8019a28:	dd0d      	ble.n	8019a46 <round+0x66>
 8019a2a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019a2e:	d107      	bne.n	8019a40 <round+0x60>
 8019a30:	4630      	mov	r0, r6
 8019a32:	4639      	mov	r1, r7
 8019a34:	ee10 2a10 	vmov	r2, s0
 8019a38:	f7e6 fc28 	bl	800028c <__adddf3>
 8019a3c:	4606      	mov	r6, r0
 8019a3e:	460f      	mov	r7, r1
 8019a40:	ec47 6b10 	vmov	d0, r6, r7
 8019a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a46:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8019a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a4e:	40d0      	lsrs	r0, r2
 8019a50:	4206      	tst	r6, r0
 8019a52:	d0f5      	beq.n	8019a40 <round+0x60>
 8019a54:	2201      	movs	r2, #1
 8019a56:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019a5a:	fa02 f404 	lsl.w	r4, r2, r4
 8019a5e:	1931      	adds	r1, r6, r4
 8019a60:	bf28      	it	cs
 8019a62:	189b      	addcs	r3, r3, r2
 8019a64:	ea21 0100 	bic.w	r1, r1, r0
 8019a68:	461f      	mov	r7, r3
 8019a6a:	460e      	mov	r6, r1
 8019a6c:	e7e8      	b.n	8019a40 <round+0x60>
 8019a6e:	bf00      	nop
 8019a70:	000fffff 	.word	0x000fffff
 8019a74:	00000000 	.word	0x00000000

08019a78 <sin>:
 8019a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a7a:	ec51 0b10 	vmov	r0, r1, d0
 8019a7e:	4a20      	ldr	r2, [pc, #128]	; (8019b00 <sin+0x88>)
 8019a80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019a84:	4293      	cmp	r3, r2
 8019a86:	dc07      	bgt.n	8019a98 <sin+0x20>
 8019a88:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019af8 <sin+0x80>
 8019a8c:	2000      	movs	r0, #0
 8019a8e:	f001 f863 	bl	801ab58 <__kernel_sin>
 8019a92:	ec51 0b10 	vmov	r0, r1, d0
 8019a96:	e007      	b.n	8019aa8 <sin+0x30>
 8019a98:	4a1a      	ldr	r2, [pc, #104]	; (8019b04 <sin+0x8c>)
 8019a9a:	4293      	cmp	r3, r2
 8019a9c:	dd09      	ble.n	8019ab2 <sin+0x3a>
 8019a9e:	ee10 2a10 	vmov	r2, s0
 8019aa2:	460b      	mov	r3, r1
 8019aa4:	f7e6 fbf0 	bl	8000288 <__aeabi_dsub>
 8019aa8:	ec41 0b10 	vmov	d0, r0, r1
 8019aac:	b005      	add	sp, #20
 8019aae:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ab2:	4668      	mov	r0, sp
 8019ab4:	f000 f9a4 	bl	8019e00 <__ieee754_rem_pio2>
 8019ab8:	f000 0003 	and.w	r0, r0, #3
 8019abc:	2801      	cmp	r0, #1
 8019abe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ac2:	ed9d 0b00 	vldr	d0, [sp]
 8019ac6:	d004      	beq.n	8019ad2 <sin+0x5a>
 8019ac8:	2802      	cmp	r0, #2
 8019aca:	d005      	beq.n	8019ad8 <sin+0x60>
 8019acc:	b970      	cbnz	r0, 8019aec <sin+0x74>
 8019ace:	2001      	movs	r0, #1
 8019ad0:	e7dd      	b.n	8019a8e <sin+0x16>
 8019ad2:	f000 fc39 	bl	801a348 <__kernel_cos>
 8019ad6:	e7dc      	b.n	8019a92 <sin+0x1a>
 8019ad8:	2001      	movs	r0, #1
 8019ada:	f001 f83d 	bl	801ab58 <__kernel_sin>
 8019ade:	ec53 2b10 	vmov	r2, r3, d0
 8019ae2:	ee10 0a10 	vmov	r0, s0
 8019ae6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019aea:	e7dd      	b.n	8019aa8 <sin+0x30>
 8019aec:	f000 fc2c 	bl	801a348 <__kernel_cos>
 8019af0:	e7f5      	b.n	8019ade <sin+0x66>
 8019af2:	bf00      	nop
 8019af4:	f3af 8000 	nop.w
	...
 8019b00:	3fe921fb 	.word	0x3fe921fb
 8019b04:	7fefffff 	.word	0x7fefffff

08019b08 <ceilf>:
 8019b08:	ee10 3a10 	vmov	r3, s0
 8019b0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019b10:	0dca      	lsrs	r2, r1, #23
 8019b12:	3a7f      	subs	r2, #127	; 0x7f
 8019b14:	2a16      	cmp	r2, #22
 8019b16:	dc2a      	bgt.n	8019b6e <ceilf+0x66>
 8019b18:	2a00      	cmp	r2, #0
 8019b1a:	da11      	bge.n	8019b40 <ceilf+0x38>
 8019b1c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019b80 <ceilf+0x78>
 8019b20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019b24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b2c:	dd05      	ble.n	8019b3a <ceilf+0x32>
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	db23      	blt.n	8019b7a <ceilf+0x72>
 8019b32:	2900      	cmp	r1, #0
 8019b34:	bf18      	it	ne
 8019b36:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019b3a:	ee00 3a10 	vmov	s0, r3
 8019b3e:	4770      	bx	lr
 8019b40:	4910      	ldr	r1, [pc, #64]	; (8019b84 <ceilf+0x7c>)
 8019b42:	4111      	asrs	r1, r2
 8019b44:	420b      	tst	r3, r1
 8019b46:	d0fa      	beq.n	8019b3e <ceilf+0x36>
 8019b48:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019b80 <ceilf+0x78>
 8019b4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019b50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b58:	ddef      	ble.n	8019b3a <ceilf+0x32>
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	bfc2      	ittt	gt
 8019b5e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019b62:	fa40 f202 	asrgt.w	r2, r0, r2
 8019b66:	189b      	addgt	r3, r3, r2
 8019b68:	ea23 0301 	bic.w	r3, r3, r1
 8019b6c:	e7e5      	b.n	8019b3a <ceilf+0x32>
 8019b6e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019b72:	d3e4      	bcc.n	8019b3e <ceilf+0x36>
 8019b74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019b78:	4770      	bx	lr
 8019b7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019b7e:	e7dc      	b.n	8019b3a <ceilf+0x32>
 8019b80:	7149f2ca 	.word	0x7149f2ca
 8019b84:	007fffff 	.word	0x007fffff

08019b88 <atan2>:
 8019b88:	f000 b85a 	b.w	8019c40 <__ieee754_atan2>

08019b8c <sqrt>:
 8019b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b90:	ed2d 8b02 	vpush	{d8}
 8019b94:	b08b      	sub	sp, #44	; 0x2c
 8019b96:	ec55 4b10 	vmov	r4, r5, d0
 8019b9a:	f000 fb23 	bl	801a1e4 <__ieee754_sqrt>
 8019b9e:	4b26      	ldr	r3, [pc, #152]	; (8019c38 <sqrt+0xac>)
 8019ba0:	eeb0 8a40 	vmov.f32	s16, s0
 8019ba4:	eef0 8a60 	vmov.f32	s17, s1
 8019ba8:	f993 6000 	ldrsb.w	r6, [r3]
 8019bac:	1c73      	adds	r3, r6, #1
 8019bae:	d02a      	beq.n	8019c06 <sqrt+0x7a>
 8019bb0:	4622      	mov	r2, r4
 8019bb2:	462b      	mov	r3, r5
 8019bb4:	4620      	mov	r0, r4
 8019bb6:	4629      	mov	r1, r5
 8019bb8:	f7e6 ffb8 	bl	8000b2c <__aeabi_dcmpun>
 8019bbc:	4607      	mov	r7, r0
 8019bbe:	bb10      	cbnz	r0, 8019c06 <sqrt+0x7a>
 8019bc0:	f04f 0800 	mov.w	r8, #0
 8019bc4:	f04f 0900 	mov.w	r9, #0
 8019bc8:	4642      	mov	r2, r8
 8019bca:	464b      	mov	r3, r9
 8019bcc:	4620      	mov	r0, r4
 8019bce:	4629      	mov	r1, r5
 8019bd0:	f7e6 ff84 	bl	8000adc <__aeabi_dcmplt>
 8019bd4:	b1b8      	cbz	r0, 8019c06 <sqrt+0x7a>
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	9300      	str	r3, [sp, #0]
 8019bda:	4b18      	ldr	r3, [pc, #96]	; (8019c3c <sqrt+0xb0>)
 8019bdc:	9301      	str	r3, [sp, #4]
 8019bde:	9708      	str	r7, [sp, #32]
 8019be0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019be4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019be8:	b9b6      	cbnz	r6, 8019c18 <sqrt+0x8c>
 8019bea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8019bee:	4668      	mov	r0, sp
 8019bf0:	f001 fa9e 	bl	801b130 <matherr>
 8019bf4:	b1d0      	cbz	r0, 8019c2c <sqrt+0xa0>
 8019bf6:	9b08      	ldr	r3, [sp, #32]
 8019bf8:	b11b      	cbz	r3, 8019c02 <sqrt+0x76>
 8019bfa:	f7fc f885 	bl	8015d08 <__errno>
 8019bfe:	9b08      	ldr	r3, [sp, #32]
 8019c00:	6003      	str	r3, [r0, #0]
 8019c02:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019c06:	eeb0 0a48 	vmov.f32	s0, s16
 8019c0a:	eef0 0a68 	vmov.f32	s1, s17
 8019c0e:	b00b      	add	sp, #44	; 0x2c
 8019c10:	ecbd 8b02 	vpop	{d8}
 8019c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c18:	4642      	mov	r2, r8
 8019c1a:	464b      	mov	r3, r9
 8019c1c:	4640      	mov	r0, r8
 8019c1e:	4649      	mov	r1, r9
 8019c20:	f7e6 fe14 	bl	800084c <__aeabi_ddiv>
 8019c24:	2e02      	cmp	r6, #2
 8019c26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019c2a:	d1e0      	bne.n	8019bee <sqrt+0x62>
 8019c2c:	f7fc f86c 	bl	8015d08 <__errno>
 8019c30:	2321      	movs	r3, #33	; 0x21
 8019c32:	6003      	str	r3, [r0, #0]
 8019c34:	e7df      	b.n	8019bf6 <sqrt+0x6a>
 8019c36:	bf00      	nop
 8019c38:	200023dc 	.word	0x200023dc
 8019c3c:	0801b7fe 	.word	0x0801b7fe

08019c40 <__ieee754_atan2>:
 8019c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c44:	ec57 6b11 	vmov	r6, r7, d1
 8019c48:	4273      	negs	r3, r6
 8019c4a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019c4e:	4333      	orrs	r3, r6
 8019c50:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019df8 <__ieee754_atan2+0x1b8>
 8019c54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019c58:	4573      	cmp	r3, lr
 8019c5a:	ec51 0b10 	vmov	r0, r1, d0
 8019c5e:	ee11 8a10 	vmov	r8, s2
 8019c62:	d80a      	bhi.n	8019c7a <__ieee754_atan2+0x3a>
 8019c64:	4244      	negs	r4, r0
 8019c66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019c6a:	4304      	orrs	r4, r0
 8019c6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019c70:	4574      	cmp	r4, lr
 8019c72:	468c      	mov	ip, r1
 8019c74:	ee10 9a10 	vmov	r9, s0
 8019c78:	d907      	bls.n	8019c8a <__ieee754_atan2+0x4a>
 8019c7a:	4632      	mov	r2, r6
 8019c7c:	463b      	mov	r3, r7
 8019c7e:	f7e6 fb05 	bl	800028c <__adddf3>
 8019c82:	ec41 0b10 	vmov	d0, r0, r1
 8019c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019c8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019c92:	4334      	orrs	r4, r6
 8019c94:	d103      	bne.n	8019c9e <__ieee754_atan2+0x5e>
 8019c96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c9a:	f001 b819 	b.w	801acd0 <atan>
 8019c9e:	17bc      	asrs	r4, r7, #30
 8019ca0:	f004 0402 	and.w	r4, r4, #2
 8019ca4:	ea53 0909 	orrs.w	r9, r3, r9
 8019ca8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019cac:	d107      	bne.n	8019cbe <__ieee754_atan2+0x7e>
 8019cae:	2c02      	cmp	r4, #2
 8019cb0:	d073      	beq.n	8019d9a <__ieee754_atan2+0x15a>
 8019cb2:	2c03      	cmp	r4, #3
 8019cb4:	d1e5      	bne.n	8019c82 <__ieee754_atan2+0x42>
 8019cb6:	a13e      	add	r1, pc, #248	; (adr r1, 8019db0 <__ieee754_atan2+0x170>)
 8019cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cbc:	e7e1      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019cbe:	ea52 0808 	orrs.w	r8, r2, r8
 8019cc2:	d106      	bne.n	8019cd2 <__ieee754_atan2+0x92>
 8019cc4:	f1bc 0f00 	cmp.w	ip, #0
 8019cc8:	da6b      	bge.n	8019da2 <__ieee754_atan2+0x162>
 8019cca:	a13b      	add	r1, pc, #236	; (adr r1, 8019db8 <__ieee754_atan2+0x178>)
 8019ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cd0:	e7d7      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019cd2:	4572      	cmp	r2, lr
 8019cd4:	d120      	bne.n	8019d18 <__ieee754_atan2+0xd8>
 8019cd6:	4293      	cmp	r3, r2
 8019cd8:	d111      	bne.n	8019cfe <__ieee754_atan2+0xbe>
 8019cda:	2c02      	cmp	r4, #2
 8019cdc:	d007      	beq.n	8019cee <__ieee754_atan2+0xae>
 8019cde:	2c03      	cmp	r4, #3
 8019ce0:	d009      	beq.n	8019cf6 <__ieee754_atan2+0xb6>
 8019ce2:	2c01      	cmp	r4, #1
 8019ce4:	d155      	bne.n	8019d92 <__ieee754_atan2+0x152>
 8019ce6:	a136      	add	r1, pc, #216	; (adr r1, 8019dc0 <__ieee754_atan2+0x180>)
 8019ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cec:	e7c9      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019cee:	a136      	add	r1, pc, #216	; (adr r1, 8019dc8 <__ieee754_atan2+0x188>)
 8019cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cf4:	e7c5      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019cf6:	a136      	add	r1, pc, #216	; (adr r1, 8019dd0 <__ieee754_atan2+0x190>)
 8019cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cfc:	e7c1      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019cfe:	2c02      	cmp	r4, #2
 8019d00:	d04b      	beq.n	8019d9a <__ieee754_atan2+0x15a>
 8019d02:	2c03      	cmp	r4, #3
 8019d04:	d0d7      	beq.n	8019cb6 <__ieee754_atan2+0x76>
 8019d06:	2c01      	cmp	r4, #1
 8019d08:	f04f 0000 	mov.w	r0, #0
 8019d0c:	d102      	bne.n	8019d14 <__ieee754_atan2+0xd4>
 8019d0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019d12:	e7b6      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019d14:	2100      	movs	r1, #0
 8019d16:	e7b4      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019d18:	4573      	cmp	r3, lr
 8019d1a:	d0d3      	beq.n	8019cc4 <__ieee754_atan2+0x84>
 8019d1c:	1a9b      	subs	r3, r3, r2
 8019d1e:	151b      	asrs	r3, r3, #20
 8019d20:	2b3c      	cmp	r3, #60	; 0x3c
 8019d22:	dc1e      	bgt.n	8019d62 <__ieee754_atan2+0x122>
 8019d24:	2f00      	cmp	r7, #0
 8019d26:	da01      	bge.n	8019d2c <__ieee754_atan2+0xec>
 8019d28:	333c      	adds	r3, #60	; 0x3c
 8019d2a:	db1e      	blt.n	8019d6a <__ieee754_atan2+0x12a>
 8019d2c:	4632      	mov	r2, r6
 8019d2e:	463b      	mov	r3, r7
 8019d30:	f7e6 fd8c 	bl	800084c <__aeabi_ddiv>
 8019d34:	ec41 0b10 	vmov	d0, r0, r1
 8019d38:	f001 f96a 	bl	801b010 <fabs>
 8019d3c:	f000 ffc8 	bl	801acd0 <atan>
 8019d40:	ec51 0b10 	vmov	r0, r1, d0
 8019d44:	2c01      	cmp	r4, #1
 8019d46:	d013      	beq.n	8019d70 <__ieee754_atan2+0x130>
 8019d48:	2c02      	cmp	r4, #2
 8019d4a:	d015      	beq.n	8019d78 <__ieee754_atan2+0x138>
 8019d4c:	2c00      	cmp	r4, #0
 8019d4e:	d098      	beq.n	8019c82 <__ieee754_atan2+0x42>
 8019d50:	a321      	add	r3, pc, #132	; (adr r3, 8019dd8 <__ieee754_atan2+0x198>)
 8019d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d56:	f7e6 fa97 	bl	8000288 <__aeabi_dsub>
 8019d5a:	a321      	add	r3, pc, #132	; (adr r3, 8019de0 <__ieee754_atan2+0x1a0>)
 8019d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d60:	e014      	b.n	8019d8c <__ieee754_atan2+0x14c>
 8019d62:	a121      	add	r1, pc, #132	; (adr r1, 8019de8 <__ieee754_atan2+0x1a8>)
 8019d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d68:	e7ec      	b.n	8019d44 <__ieee754_atan2+0x104>
 8019d6a:	2000      	movs	r0, #0
 8019d6c:	2100      	movs	r1, #0
 8019d6e:	e7e9      	b.n	8019d44 <__ieee754_atan2+0x104>
 8019d70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019d74:	4619      	mov	r1, r3
 8019d76:	e784      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019d78:	a317      	add	r3, pc, #92	; (adr r3, 8019dd8 <__ieee754_atan2+0x198>)
 8019d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d7e:	f7e6 fa83 	bl	8000288 <__aeabi_dsub>
 8019d82:	4602      	mov	r2, r0
 8019d84:	460b      	mov	r3, r1
 8019d86:	a116      	add	r1, pc, #88	; (adr r1, 8019de0 <__ieee754_atan2+0x1a0>)
 8019d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d8c:	f7e6 fa7c 	bl	8000288 <__aeabi_dsub>
 8019d90:	e777      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019d92:	a117      	add	r1, pc, #92	; (adr r1, 8019df0 <__ieee754_atan2+0x1b0>)
 8019d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d98:	e773      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019d9a:	a111      	add	r1, pc, #68	; (adr r1, 8019de0 <__ieee754_atan2+0x1a0>)
 8019d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019da0:	e76f      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019da2:	a111      	add	r1, pc, #68	; (adr r1, 8019de8 <__ieee754_atan2+0x1a8>)
 8019da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019da8:	e76b      	b.n	8019c82 <__ieee754_atan2+0x42>
 8019daa:	bf00      	nop
 8019dac:	f3af 8000 	nop.w
 8019db0:	54442d18 	.word	0x54442d18
 8019db4:	c00921fb 	.word	0xc00921fb
 8019db8:	54442d18 	.word	0x54442d18
 8019dbc:	bff921fb 	.word	0xbff921fb
 8019dc0:	54442d18 	.word	0x54442d18
 8019dc4:	bfe921fb 	.word	0xbfe921fb
 8019dc8:	7f3321d2 	.word	0x7f3321d2
 8019dcc:	4002d97c 	.word	0x4002d97c
 8019dd0:	7f3321d2 	.word	0x7f3321d2
 8019dd4:	c002d97c 	.word	0xc002d97c
 8019dd8:	33145c07 	.word	0x33145c07
 8019ddc:	3ca1a626 	.word	0x3ca1a626
 8019de0:	54442d18 	.word	0x54442d18
 8019de4:	400921fb 	.word	0x400921fb
 8019de8:	54442d18 	.word	0x54442d18
 8019dec:	3ff921fb 	.word	0x3ff921fb
 8019df0:	54442d18 	.word	0x54442d18
 8019df4:	3fe921fb 	.word	0x3fe921fb
 8019df8:	7ff00000 	.word	0x7ff00000
 8019dfc:	00000000 	.word	0x00000000

08019e00 <__ieee754_rem_pio2>:
 8019e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e04:	ec57 6b10 	vmov	r6, r7, d0
 8019e08:	4bc3      	ldr	r3, [pc, #780]	; (801a118 <__ieee754_rem_pio2+0x318>)
 8019e0a:	b08d      	sub	sp, #52	; 0x34
 8019e0c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019e10:	4598      	cmp	r8, r3
 8019e12:	4604      	mov	r4, r0
 8019e14:	9704      	str	r7, [sp, #16]
 8019e16:	dc07      	bgt.n	8019e28 <__ieee754_rem_pio2+0x28>
 8019e18:	2200      	movs	r2, #0
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	ed84 0b00 	vstr	d0, [r4]
 8019e20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019e24:	2500      	movs	r5, #0
 8019e26:	e027      	b.n	8019e78 <__ieee754_rem_pio2+0x78>
 8019e28:	4bbc      	ldr	r3, [pc, #752]	; (801a11c <__ieee754_rem_pio2+0x31c>)
 8019e2a:	4598      	cmp	r8, r3
 8019e2c:	dc75      	bgt.n	8019f1a <__ieee754_rem_pio2+0x11a>
 8019e2e:	9b04      	ldr	r3, [sp, #16]
 8019e30:	4dbb      	ldr	r5, [pc, #748]	; (801a120 <__ieee754_rem_pio2+0x320>)
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	ee10 0a10 	vmov	r0, s0
 8019e38:	a3a9      	add	r3, pc, #676	; (adr r3, 801a0e0 <__ieee754_rem_pio2+0x2e0>)
 8019e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e3e:	4639      	mov	r1, r7
 8019e40:	dd36      	ble.n	8019eb0 <__ieee754_rem_pio2+0xb0>
 8019e42:	f7e6 fa21 	bl	8000288 <__aeabi_dsub>
 8019e46:	45a8      	cmp	r8, r5
 8019e48:	4606      	mov	r6, r0
 8019e4a:	460f      	mov	r7, r1
 8019e4c:	d018      	beq.n	8019e80 <__ieee754_rem_pio2+0x80>
 8019e4e:	a3a6      	add	r3, pc, #664	; (adr r3, 801a0e8 <__ieee754_rem_pio2+0x2e8>)
 8019e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e54:	f7e6 fa18 	bl	8000288 <__aeabi_dsub>
 8019e58:	4602      	mov	r2, r0
 8019e5a:	460b      	mov	r3, r1
 8019e5c:	e9c4 2300 	strd	r2, r3, [r4]
 8019e60:	4630      	mov	r0, r6
 8019e62:	4639      	mov	r1, r7
 8019e64:	f7e6 fa10 	bl	8000288 <__aeabi_dsub>
 8019e68:	a39f      	add	r3, pc, #636	; (adr r3, 801a0e8 <__ieee754_rem_pio2+0x2e8>)
 8019e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e6e:	f7e6 fa0b 	bl	8000288 <__aeabi_dsub>
 8019e72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019e76:	2501      	movs	r5, #1
 8019e78:	4628      	mov	r0, r5
 8019e7a:	b00d      	add	sp, #52	; 0x34
 8019e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e80:	a39b      	add	r3, pc, #620	; (adr r3, 801a0f0 <__ieee754_rem_pio2+0x2f0>)
 8019e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e86:	f7e6 f9ff 	bl	8000288 <__aeabi_dsub>
 8019e8a:	a39b      	add	r3, pc, #620	; (adr r3, 801a0f8 <__ieee754_rem_pio2+0x2f8>)
 8019e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e90:	4606      	mov	r6, r0
 8019e92:	460f      	mov	r7, r1
 8019e94:	f7e6 f9f8 	bl	8000288 <__aeabi_dsub>
 8019e98:	4602      	mov	r2, r0
 8019e9a:	460b      	mov	r3, r1
 8019e9c:	e9c4 2300 	strd	r2, r3, [r4]
 8019ea0:	4630      	mov	r0, r6
 8019ea2:	4639      	mov	r1, r7
 8019ea4:	f7e6 f9f0 	bl	8000288 <__aeabi_dsub>
 8019ea8:	a393      	add	r3, pc, #588	; (adr r3, 801a0f8 <__ieee754_rem_pio2+0x2f8>)
 8019eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eae:	e7de      	b.n	8019e6e <__ieee754_rem_pio2+0x6e>
 8019eb0:	f7e6 f9ec 	bl	800028c <__adddf3>
 8019eb4:	45a8      	cmp	r8, r5
 8019eb6:	4606      	mov	r6, r0
 8019eb8:	460f      	mov	r7, r1
 8019eba:	d016      	beq.n	8019eea <__ieee754_rem_pio2+0xea>
 8019ebc:	a38a      	add	r3, pc, #552	; (adr r3, 801a0e8 <__ieee754_rem_pio2+0x2e8>)
 8019ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec2:	f7e6 f9e3 	bl	800028c <__adddf3>
 8019ec6:	4602      	mov	r2, r0
 8019ec8:	460b      	mov	r3, r1
 8019eca:	e9c4 2300 	strd	r2, r3, [r4]
 8019ece:	4630      	mov	r0, r6
 8019ed0:	4639      	mov	r1, r7
 8019ed2:	f7e6 f9d9 	bl	8000288 <__aeabi_dsub>
 8019ed6:	a384      	add	r3, pc, #528	; (adr r3, 801a0e8 <__ieee754_rem_pio2+0x2e8>)
 8019ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019edc:	f7e6 f9d6 	bl	800028c <__adddf3>
 8019ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8019ee4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019ee8:	e7c6      	b.n	8019e78 <__ieee754_rem_pio2+0x78>
 8019eea:	a381      	add	r3, pc, #516	; (adr r3, 801a0f0 <__ieee754_rem_pio2+0x2f0>)
 8019eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ef0:	f7e6 f9cc 	bl	800028c <__adddf3>
 8019ef4:	a380      	add	r3, pc, #512	; (adr r3, 801a0f8 <__ieee754_rem_pio2+0x2f8>)
 8019ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019efa:	4606      	mov	r6, r0
 8019efc:	460f      	mov	r7, r1
 8019efe:	f7e6 f9c5 	bl	800028c <__adddf3>
 8019f02:	4602      	mov	r2, r0
 8019f04:	460b      	mov	r3, r1
 8019f06:	e9c4 2300 	strd	r2, r3, [r4]
 8019f0a:	4630      	mov	r0, r6
 8019f0c:	4639      	mov	r1, r7
 8019f0e:	f7e6 f9bb 	bl	8000288 <__aeabi_dsub>
 8019f12:	a379      	add	r3, pc, #484	; (adr r3, 801a0f8 <__ieee754_rem_pio2+0x2f8>)
 8019f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f18:	e7e0      	b.n	8019edc <__ieee754_rem_pio2+0xdc>
 8019f1a:	4b82      	ldr	r3, [pc, #520]	; (801a124 <__ieee754_rem_pio2+0x324>)
 8019f1c:	4598      	cmp	r8, r3
 8019f1e:	f300 80d0 	bgt.w	801a0c2 <__ieee754_rem_pio2+0x2c2>
 8019f22:	f001 f875 	bl	801b010 <fabs>
 8019f26:	ec57 6b10 	vmov	r6, r7, d0
 8019f2a:	ee10 0a10 	vmov	r0, s0
 8019f2e:	a374      	add	r3, pc, #464	; (adr r3, 801a100 <__ieee754_rem_pio2+0x300>)
 8019f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f34:	4639      	mov	r1, r7
 8019f36:	f7e6 fb5f 	bl	80005f8 <__aeabi_dmul>
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	4b7a      	ldr	r3, [pc, #488]	; (801a128 <__ieee754_rem_pio2+0x328>)
 8019f3e:	f7e6 f9a5 	bl	800028c <__adddf3>
 8019f42:	f7e6 fe09 	bl	8000b58 <__aeabi_d2iz>
 8019f46:	4605      	mov	r5, r0
 8019f48:	f7e6 faec 	bl	8000524 <__aeabi_i2d>
 8019f4c:	a364      	add	r3, pc, #400	; (adr r3, 801a0e0 <__ieee754_rem_pio2+0x2e0>)
 8019f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019f56:	f7e6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8019f5a:	4602      	mov	r2, r0
 8019f5c:	460b      	mov	r3, r1
 8019f5e:	4630      	mov	r0, r6
 8019f60:	4639      	mov	r1, r7
 8019f62:	f7e6 f991 	bl	8000288 <__aeabi_dsub>
 8019f66:	a360      	add	r3, pc, #384	; (adr r3, 801a0e8 <__ieee754_rem_pio2+0x2e8>)
 8019f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f6c:	4682      	mov	sl, r0
 8019f6e:	468b      	mov	fp, r1
 8019f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019f74:	f7e6 fb40 	bl	80005f8 <__aeabi_dmul>
 8019f78:	2d1f      	cmp	r5, #31
 8019f7a:	4606      	mov	r6, r0
 8019f7c:	460f      	mov	r7, r1
 8019f7e:	dc0c      	bgt.n	8019f9a <__ieee754_rem_pio2+0x19a>
 8019f80:	1e6a      	subs	r2, r5, #1
 8019f82:	4b6a      	ldr	r3, [pc, #424]	; (801a12c <__ieee754_rem_pio2+0x32c>)
 8019f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f88:	4543      	cmp	r3, r8
 8019f8a:	d006      	beq.n	8019f9a <__ieee754_rem_pio2+0x19a>
 8019f8c:	4632      	mov	r2, r6
 8019f8e:	463b      	mov	r3, r7
 8019f90:	4650      	mov	r0, sl
 8019f92:	4659      	mov	r1, fp
 8019f94:	f7e6 f978 	bl	8000288 <__aeabi_dsub>
 8019f98:	e00e      	b.n	8019fb8 <__ieee754_rem_pio2+0x1b8>
 8019f9a:	4632      	mov	r2, r6
 8019f9c:	463b      	mov	r3, r7
 8019f9e:	4650      	mov	r0, sl
 8019fa0:	4659      	mov	r1, fp
 8019fa2:	f7e6 f971 	bl	8000288 <__aeabi_dsub>
 8019fa6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019faa:	9305      	str	r3, [sp, #20]
 8019fac:	9a05      	ldr	r2, [sp, #20]
 8019fae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019fb2:	1ad3      	subs	r3, r2, r3
 8019fb4:	2b10      	cmp	r3, #16
 8019fb6:	dc02      	bgt.n	8019fbe <__ieee754_rem_pio2+0x1be>
 8019fb8:	e9c4 0100 	strd	r0, r1, [r4]
 8019fbc:	e039      	b.n	801a032 <__ieee754_rem_pio2+0x232>
 8019fbe:	a34c      	add	r3, pc, #304	; (adr r3, 801a0f0 <__ieee754_rem_pio2+0x2f0>)
 8019fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019fc8:	f7e6 fb16 	bl	80005f8 <__aeabi_dmul>
 8019fcc:	4606      	mov	r6, r0
 8019fce:	460f      	mov	r7, r1
 8019fd0:	4602      	mov	r2, r0
 8019fd2:	460b      	mov	r3, r1
 8019fd4:	4650      	mov	r0, sl
 8019fd6:	4659      	mov	r1, fp
 8019fd8:	f7e6 f956 	bl	8000288 <__aeabi_dsub>
 8019fdc:	4602      	mov	r2, r0
 8019fde:	460b      	mov	r3, r1
 8019fe0:	4680      	mov	r8, r0
 8019fe2:	4689      	mov	r9, r1
 8019fe4:	4650      	mov	r0, sl
 8019fe6:	4659      	mov	r1, fp
 8019fe8:	f7e6 f94e 	bl	8000288 <__aeabi_dsub>
 8019fec:	4632      	mov	r2, r6
 8019fee:	463b      	mov	r3, r7
 8019ff0:	f7e6 f94a 	bl	8000288 <__aeabi_dsub>
 8019ff4:	a340      	add	r3, pc, #256	; (adr r3, 801a0f8 <__ieee754_rem_pio2+0x2f8>)
 8019ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ffa:	4606      	mov	r6, r0
 8019ffc:	460f      	mov	r7, r1
 8019ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a002:	f7e6 faf9 	bl	80005f8 <__aeabi_dmul>
 801a006:	4632      	mov	r2, r6
 801a008:	463b      	mov	r3, r7
 801a00a:	f7e6 f93d 	bl	8000288 <__aeabi_dsub>
 801a00e:	4602      	mov	r2, r0
 801a010:	460b      	mov	r3, r1
 801a012:	4606      	mov	r6, r0
 801a014:	460f      	mov	r7, r1
 801a016:	4640      	mov	r0, r8
 801a018:	4649      	mov	r1, r9
 801a01a:	f7e6 f935 	bl	8000288 <__aeabi_dsub>
 801a01e:	9a05      	ldr	r2, [sp, #20]
 801a020:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a024:	1ad3      	subs	r3, r2, r3
 801a026:	2b31      	cmp	r3, #49	; 0x31
 801a028:	dc20      	bgt.n	801a06c <__ieee754_rem_pio2+0x26c>
 801a02a:	e9c4 0100 	strd	r0, r1, [r4]
 801a02e:	46c2      	mov	sl, r8
 801a030:	46cb      	mov	fp, r9
 801a032:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a036:	4650      	mov	r0, sl
 801a038:	4642      	mov	r2, r8
 801a03a:	464b      	mov	r3, r9
 801a03c:	4659      	mov	r1, fp
 801a03e:	f7e6 f923 	bl	8000288 <__aeabi_dsub>
 801a042:	463b      	mov	r3, r7
 801a044:	4632      	mov	r2, r6
 801a046:	f7e6 f91f 	bl	8000288 <__aeabi_dsub>
 801a04a:	9b04      	ldr	r3, [sp, #16]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a052:	f6bf af11 	bge.w	8019e78 <__ieee754_rem_pio2+0x78>
 801a056:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a05a:	6063      	str	r3, [r4, #4]
 801a05c:	f8c4 8000 	str.w	r8, [r4]
 801a060:	60a0      	str	r0, [r4, #8]
 801a062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a066:	60e3      	str	r3, [r4, #12]
 801a068:	426d      	negs	r5, r5
 801a06a:	e705      	b.n	8019e78 <__ieee754_rem_pio2+0x78>
 801a06c:	a326      	add	r3, pc, #152	; (adr r3, 801a108 <__ieee754_rem_pio2+0x308>)
 801a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a076:	f7e6 fabf 	bl	80005f8 <__aeabi_dmul>
 801a07a:	4606      	mov	r6, r0
 801a07c:	460f      	mov	r7, r1
 801a07e:	4602      	mov	r2, r0
 801a080:	460b      	mov	r3, r1
 801a082:	4640      	mov	r0, r8
 801a084:	4649      	mov	r1, r9
 801a086:	f7e6 f8ff 	bl	8000288 <__aeabi_dsub>
 801a08a:	4602      	mov	r2, r0
 801a08c:	460b      	mov	r3, r1
 801a08e:	4682      	mov	sl, r0
 801a090:	468b      	mov	fp, r1
 801a092:	4640      	mov	r0, r8
 801a094:	4649      	mov	r1, r9
 801a096:	f7e6 f8f7 	bl	8000288 <__aeabi_dsub>
 801a09a:	4632      	mov	r2, r6
 801a09c:	463b      	mov	r3, r7
 801a09e:	f7e6 f8f3 	bl	8000288 <__aeabi_dsub>
 801a0a2:	a31b      	add	r3, pc, #108	; (adr r3, 801a110 <__ieee754_rem_pio2+0x310>)
 801a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0a8:	4606      	mov	r6, r0
 801a0aa:	460f      	mov	r7, r1
 801a0ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a0b0:	f7e6 faa2 	bl	80005f8 <__aeabi_dmul>
 801a0b4:	4632      	mov	r2, r6
 801a0b6:	463b      	mov	r3, r7
 801a0b8:	f7e6 f8e6 	bl	8000288 <__aeabi_dsub>
 801a0bc:	4606      	mov	r6, r0
 801a0be:	460f      	mov	r7, r1
 801a0c0:	e764      	b.n	8019f8c <__ieee754_rem_pio2+0x18c>
 801a0c2:	4b1b      	ldr	r3, [pc, #108]	; (801a130 <__ieee754_rem_pio2+0x330>)
 801a0c4:	4598      	cmp	r8, r3
 801a0c6:	dd35      	ble.n	801a134 <__ieee754_rem_pio2+0x334>
 801a0c8:	ee10 2a10 	vmov	r2, s0
 801a0cc:	463b      	mov	r3, r7
 801a0ce:	4630      	mov	r0, r6
 801a0d0:	4639      	mov	r1, r7
 801a0d2:	f7e6 f8d9 	bl	8000288 <__aeabi_dsub>
 801a0d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a0da:	e9c4 0100 	strd	r0, r1, [r4]
 801a0de:	e6a1      	b.n	8019e24 <__ieee754_rem_pio2+0x24>
 801a0e0:	54400000 	.word	0x54400000
 801a0e4:	3ff921fb 	.word	0x3ff921fb
 801a0e8:	1a626331 	.word	0x1a626331
 801a0ec:	3dd0b461 	.word	0x3dd0b461
 801a0f0:	1a600000 	.word	0x1a600000
 801a0f4:	3dd0b461 	.word	0x3dd0b461
 801a0f8:	2e037073 	.word	0x2e037073
 801a0fc:	3ba3198a 	.word	0x3ba3198a
 801a100:	6dc9c883 	.word	0x6dc9c883
 801a104:	3fe45f30 	.word	0x3fe45f30
 801a108:	2e000000 	.word	0x2e000000
 801a10c:	3ba3198a 	.word	0x3ba3198a
 801a110:	252049c1 	.word	0x252049c1
 801a114:	397b839a 	.word	0x397b839a
 801a118:	3fe921fb 	.word	0x3fe921fb
 801a11c:	4002d97b 	.word	0x4002d97b
 801a120:	3ff921fb 	.word	0x3ff921fb
 801a124:	413921fb 	.word	0x413921fb
 801a128:	3fe00000 	.word	0x3fe00000
 801a12c:	0801b804 	.word	0x0801b804
 801a130:	7fefffff 	.word	0x7fefffff
 801a134:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a138:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a13c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a140:	4630      	mov	r0, r6
 801a142:	460f      	mov	r7, r1
 801a144:	f7e6 fd08 	bl	8000b58 <__aeabi_d2iz>
 801a148:	f7e6 f9ec 	bl	8000524 <__aeabi_i2d>
 801a14c:	4602      	mov	r2, r0
 801a14e:	460b      	mov	r3, r1
 801a150:	4630      	mov	r0, r6
 801a152:	4639      	mov	r1, r7
 801a154:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a158:	f7e6 f896 	bl	8000288 <__aeabi_dsub>
 801a15c:	2200      	movs	r2, #0
 801a15e:	4b1f      	ldr	r3, [pc, #124]	; (801a1dc <__ieee754_rem_pio2+0x3dc>)
 801a160:	f7e6 fa4a 	bl	80005f8 <__aeabi_dmul>
 801a164:	460f      	mov	r7, r1
 801a166:	4606      	mov	r6, r0
 801a168:	f7e6 fcf6 	bl	8000b58 <__aeabi_d2iz>
 801a16c:	f7e6 f9da 	bl	8000524 <__aeabi_i2d>
 801a170:	4602      	mov	r2, r0
 801a172:	460b      	mov	r3, r1
 801a174:	4630      	mov	r0, r6
 801a176:	4639      	mov	r1, r7
 801a178:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a17c:	f7e6 f884 	bl	8000288 <__aeabi_dsub>
 801a180:	2200      	movs	r2, #0
 801a182:	4b16      	ldr	r3, [pc, #88]	; (801a1dc <__ieee754_rem_pio2+0x3dc>)
 801a184:	f7e6 fa38 	bl	80005f8 <__aeabi_dmul>
 801a188:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a18c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a190:	f04f 0803 	mov.w	r8, #3
 801a194:	2600      	movs	r6, #0
 801a196:	2700      	movs	r7, #0
 801a198:	4632      	mov	r2, r6
 801a19a:	463b      	mov	r3, r7
 801a19c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a1a0:	f108 3aff 	add.w	sl, r8, #4294967295
 801a1a4:	f7e6 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 801a1a8:	b9b0      	cbnz	r0, 801a1d8 <__ieee754_rem_pio2+0x3d8>
 801a1aa:	4b0d      	ldr	r3, [pc, #52]	; (801a1e0 <__ieee754_rem_pio2+0x3e0>)
 801a1ac:	9301      	str	r3, [sp, #4]
 801a1ae:	2302      	movs	r3, #2
 801a1b0:	9300      	str	r3, [sp, #0]
 801a1b2:	462a      	mov	r2, r5
 801a1b4:	4643      	mov	r3, r8
 801a1b6:	4621      	mov	r1, r4
 801a1b8:	a806      	add	r0, sp, #24
 801a1ba:	f000 f98d 	bl	801a4d8 <__kernel_rem_pio2>
 801a1be:	9b04      	ldr	r3, [sp, #16]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	4605      	mov	r5, r0
 801a1c4:	f6bf ae58 	bge.w	8019e78 <__ieee754_rem_pio2+0x78>
 801a1c8:	6863      	ldr	r3, [r4, #4]
 801a1ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a1ce:	6063      	str	r3, [r4, #4]
 801a1d0:	68e3      	ldr	r3, [r4, #12]
 801a1d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a1d6:	e746      	b.n	801a066 <__ieee754_rem_pio2+0x266>
 801a1d8:	46d0      	mov	r8, sl
 801a1da:	e7dd      	b.n	801a198 <__ieee754_rem_pio2+0x398>
 801a1dc:	41700000 	.word	0x41700000
 801a1e0:	0801b884 	.word	0x0801b884

0801a1e4 <__ieee754_sqrt>:
 801a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e8:	4955      	ldr	r1, [pc, #340]	; (801a340 <__ieee754_sqrt+0x15c>)
 801a1ea:	ec55 4b10 	vmov	r4, r5, d0
 801a1ee:	43a9      	bics	r1, r5
 801a1f0:	462b      	mov	r3, r5
 801a1f2:	462a      	mov	r2, r5
 801a1f4:	d112      	bne.n	801a21c <__ieee754_sqrt+0x38>
 801a1f6:	ee10 2a10 	vmov	r2, s0
 801a1fa:	ee10 0a10 	vmov	r0, s0
 801a1fe:	4629      	mov	r1, r5
 801a200:	f7e6 f9fa 	bl	80005f8 <__aeabi_dmul>
 801a204:	4602      	mov	r2, r0
 801a206:	460b      	mov	r3, r1
 801a208:	4620      	mov	r0, r4
 801a20a:	4629      	mov	r1, r5
 801a20c:	f7e6 f83e 	bl	800028c <__adddf3>
 801a210:	4604      	mov	r4, r0
 801a212:	460d      	mov	r5, r1
 801a214:	ec45 4b10 	vmov	d0, r4, r5
 801a218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a21c:	2d00      	cmp	r5, #0
 801a21e:	ee10 0a10 	vmov	r0, s0
 801a222:	4621      	mov	r1, r4
 801a224:	dc0f      	bgt.n	801a246 <__ieee754_sqrt+0x62>
 801a226:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a22a:	4330      	orrs	r0, r6
 801a22c:	d0f2      	beq.n	801a214 <__ieee754_sqrt+0x30>
 801a22e:	b155      	cbz	r5, 801a246 <__ieee754_sqrt+0x62>
 801a230:	ee10 2a10 	vmov	r2, s0
 801a234:	4620      	mov	r0, r4
 801a236:	4629      	mov	r1, r5
 801a238:	f7e6 f826 	bl	8000288 <__aeabi_dsub>
 801a23c:	4602      	mov	r2, r0
 801a23e:	460b      	mov	r3, r1
 801a240:	f7e6 fb04 	bl	800084c <__aeabi_ddiv>
 801a244:	e7e4      	b.n	801a210 <__ieee754_sqrt+0x2c>
 801a246:	151b      	asrs	r3, r3, #20
 801a248:	d073      	beq.n	801a332 <__ieee754_sqrt+0x14e>
 801a24a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a24e:	07dd      	lsls	r5, r3, #31
 801a250:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a254:	bf48      	it	mi
 801a256:	0fc8      	lsrmi	r0, r1, #31
 801a258:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a25c:	bf44      	itt	mi
 801a25e:	0049      	lslmi	r1, r1, #1
 801a260:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a264:	2500      	movs	r5, #0
 801a266:	1058      	asrs	r0, r3, #1
 801a268:	0fcb      	lsrs	r3, r1, #31
 801a26a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a26e:	0049      	lsls	r1, r1, #1
 801a270:	2316      	movs	r3, #22
 801a272:	462c      	mov	r4, r5
 801a274:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a278:	19a7      	adds	r7, r4, r6
 801a27a:	4297      	cmp	r7, r2
 801a27c:	bfde      	ittt	le
 801a27e:	19bc      	addle	r4, r7, r6
 801a280:	1bd2      	suble	r2, r2, r7
 801a282:	19ad      	addle	r5, r5, r6
 801a284:	0fcf      	lsrs	r7, r1, #31
 801a286:	3b01      	subs	r3, #1
 801a288:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a28c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a290:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a294:	d1f0      	bne.n	801a278 <__ieee754_sqrt+0x94>
 801a296:	f04f 0c20 	mov.w	ip, #32
 801a29a:	469e      	mov	lr, r3
 801a29c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a2a0:	42a2      	cmp	r2, r4
 801a2a2:	eb06 070e 	add.w	r7, r6, lr
 801a2a6:	dc02      	bgt.n	801a2ae <__ieee754_sqrt+0xca>
 801a2a8:	d112      	bne.n	801a2d0 <__ieee754_sqrt+0xec>
 801a2aa:	428f      	cmp	r7, r1
 801a2ac:	d810      	bhi.n	801a2d0 <__ieee754_sqrt+0xec>
 801a2ae:	2f00      	cmp	r7, #0
 801a2b0:	eb07 0e06 	add.w	lr, r7, r6
 801a2b4:	da42      	bge.n	801a33c <__ieee754_sqrt+0x158>
 801a2b6:	f1be 0f00 	cmp.w	lr, #0
 801a2ba:	db3f      	blt.n	801a33c <__ieee754_sqrt+0x158>
 801a2bc:	f104 0801 	add.w	r8, r4, #1
 801a2c0:	1b12      	subs	r2, r2, r4
 801a2c2:	428f      	cmp	r7, r1
 801a2c4:	bf88      	it	hi
 801a2c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a2ca:	1bc9      	subs	r1, r1, r7
 801a2cc:	4433      	add	r3, r6
 801a2ce:	4644      	mov	r4, r8
 801a2d0:	0052      	lsls	r2, r2, #1
 801a2d2:	f1bc 0c01 	subs.w	ip, ip, #1
 801a2d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a2da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a2de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a2e2:	d1dd      	bne.n	801a2a0 <__ieee754_sqrt+0xbc>
 801a2e4:	430a      	orrs	r2, r1
 801a2e6:	d006      	beq.n	801a2f6 <__ieee754_sqrt+0x112>
 801a2e8:	1c5c      	adds	r4, r3, #1
 801a2ea:	bf13      	iteet	ne
 801a2ec:	3301      	addne	r3, #1
 801a2ee:	3501      	addeq	r5, #1
 801a2f0:	4663      	moveq	r3, ip
 801a2f2:	f023 0301 	bicne.w	r3, r3, #1
 801a2f6:	106a      	asrs	r2, r5, #1
 801a2f8:	085b      	lsrs	r3, r3, #1
 801a2fa:	07e9      	lsls	r1, r5, #31
 801a2fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a300:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a304:	bf48      	it	mi
 801a306:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a30a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a30e:	461c      	mov	r4, r3
 801a310:	e780      	b.n	801a214 <__ieee754_sqrt+0x30>
 801a312:	0aca      	lsrs	r2, r1, #11
 801a314:	3815      	subs	r0, #21
 801a316:	0549      	lsls	r1, r1, #21
 801a318:	2a00      	cmp	r2, #0
 801a31a:	d0fa      	beq.n	801a312 <__ieee754_sqrt+0x12e>
 801a31c:	02d6      	lsls	r6, r2, #11
 801a31e:	d50a      	bpl.n	801a336 <__ieee754_sqrt+0x152>
 801a320:	f1c3 0420 	rsb	r4, r3, #32
 801a324:	fa21 f404 	lsr.w	r4, r1, r4
 801a328:	1e5d      	subs	r5, r3, #1
 801a32a:	4099      	lsls	r1, r3
 801a32c:	4322      	orrs	r2, r4
 801a32e:	1b43      	subs	r3, r0, r5
 801a330:	e78b      	b.n	801a24a <__ieee754_sqrt+0x66>
 801a332:	4618      	mov	r0, r3
 801a334:	e7f0      	b.n	801a318 <__ieee754_sqrt+0x134>
 801a336:	0052      	lsls	r2, r2, #1
 801a338:	3301      	adds	r3, #1
 801a33a:	e7ef      	b.n	801a31c <__ieee754_sqrt+0x138>
 801a33c:	46a0      	mov	r8, r4
 801a33e:	e7bf      	b.n	801a2c0 <__ieee754_sqrt+0xdc>
 801a340:	7ff00000 	.word	0x7ff00000
 801a344:	00000000 	.word	0x00000000

0801a348 <__kernel_cos>:
 801a348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a34c:	ec59 8b10 	vmov	r8, r9, d0
 801a350:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a354:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a358:	ed2d 8b02 	vpush	{d8}
 801a35c:	eeb0 8a41 	vmov.f32	s16, s2
 801a360:	eef0 8a61 	vmov.f32	s17, s3
 801a364:	da07      	bge.n	801a376 <__kernel_cos+0x2e>
 801a366:	ee10 0a10 	vmov	r0, s0
 801a36a:	4649      	mov	r1, r9
 801a36c:	f7e6 fbf4 	bl	8000b58 <__aeabi_d2iz>
 801a370:	2800      	cmp	r0, #0
 801a372:	f000 8089 	beq.w	801a488 <__kernel_cos+0x140>
 801a376:	4642      	mov	r2, r8
 801a378:	464b      	mov	r3, r9
 801a37a:	4640      	mov	r0, r8
 801a37c:	4649      	mov	r1, r9
 801a37e:	f7e6 f93b 	bl	80005f8 <__aeabi_dmul>
 801a382:	2200      	movs	r2, #0
 801a384:	4b4e      	ldr	r3, [pc, #312]	; (801a4c0 <__kernel_cos+0x178>)
 801a386:	4604      	mov	r4, r0
 801a388:	460d      	mov	r5, r1
 801a38a:	f7e6 f935 	bl	80005f8 <__aeabi_dmul>
 801a38e:	a340      	add	r3, pc, #256	; (adr r3, 801a490 <__kernel_cos+0x148>)
 801a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a394:	4682      	mov	sl, r0
 801a396:	468b      	mov	fp, r1
 801a398:	4620      	mov	r0, r4
 801a39a:	4629      	mov	r1, r5
 801a39c:	f7e6 f92c 	bl	80005f8 <__aeabi_dmul>
 801a3a0:	a33d      	add	r3, pc, #244	; (adr r3, 801a498 <__kernel_cos+0x150>)
 801a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a6:	f7e5 ff71 	bl	800028c <__adddf3>
 801a3aa:	4622      	mov	r2, r4
 801a3ac:	462b      	mov	r3, r5
 801a3ae:	f7e6 f923 	bl	80005f8 <__aeabi_dmul>
 801a3b2:	a33b      	add	r3, pc, #236	; (adr r3, 801a4a0 <__kernel_cos+0x158>)
 801a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3b8:	f7e5 ff66 	bl	8000288 <__aeabi_dsub>
 801a3bc:	4622      	mov	r2, r4
 801a3be:	462b      	mov	r3, r5
 801a3c0:	f7e6 f91a 	bl	80005f8 <__aeabi_dmul>
 801a3c4:	a338      	add	r3, pc, #224	; (adr r3, 801a4a8 <__kernel_cos+0x160>)
 801a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ca:	f7e5 ff5f 	bl	800028c <__adddf3>
 801a3ce:	4622      	mov	r2, r4
 801a3d0:	462b      	mov	r3, r5
 801a3d2:	f7e6 f911 	bl	80005f8 <__aeabi_dmul>
 801a3d6:	a336      	add	r3, pc, #216	; (adr r3, 801a4b0 <__kernel_cos+0x168>)
 801a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3dc:	f7e5 ff54 	bl	8000288 <__aeabi_dsub>
 801a3e0:	4622      	mov	r2, r4
 801a3e2:	462b      	mov	r3, r5
 801a3e4:	f7e6 f908 	bl	80005f8 <__aeabi_dmul>
 801a3e8:	a333      	add	r3, pc, #204	; (adr r3, 801a4b8 <__kernel_cos+0x170>)
 801a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ee:	f7e5 ff4d 	bl	800028c <__adddf3>
 801a3f2:	4622      	mov	r2, r4
 801a3f4:	462b      	mov	r3, r5
 801a3f6:	f7e6 f8ff 	bl	80005f8 <__aeabi_dmul>
 801a3fa:	4622      	mov	r2, r4
 801a3fc:	462b      	mov	r3, r5
 801a3fe:	f7e6 f8fb 	bl	80005f8 <__aeabi_dmul>
 801a402:	ec53 2b18 	vmov	r2, r3, d8
 801a406:	4604      	mov	r4, r0
 801a408:	460d      	mov	r5, r1
 801a40a:	4640      	mov	r0, r8
 801a40c:	4649      	mov	r1, r9
 801a40e:	f7e6 f8f3 	bl	80005f8 <__aeabi_dmul>
 801a412:	460b      	mov	r3, r1
 801a414:	4602      	mov	r2, r0
 801a416:	4629      	mov	r1, r5
 801a418:	4620      	mov	r0, r4
 801a41a:	f7e5 ff35 	bl	8000288 <__aeabi_dsub>
 801a41e:	4b29      	ldr	r3, [pc, #164]	; (801a4c4 <__kernel_cos+0x17c>)
 801a420:	429e      	cmp	r6, r3
 801a422:	4680      	mov	r8, r0
 801a424:	4689      	mov	r9, r1
 801a426:	dc11      	bgt.n	801a44c <__kernel_cos+0x104>
 801a428:	4602      	mov	r2, r0
 801a42a:	460b      	mov	r3, r1
 801a42c:	4650      	mov	r0, sl
 801a42e:	4659      	mov	r1, fp
 801a430:	f7e5 ff2a 	bl	8000288 <__aeabi_dsub>
 801a434:	460b      	mov	r3, r1
 801a436:	4924      	ldr	r1, [pc, #144]	; (801a4c8 <__kernel_cos+0x180>)
 801a438:	4602      	mov	r2, r0
 801a43a:	2000      	movs	r0, #0
 801a43c:	f7e5 ff24 	bl	8000288 <__aeabi_dsub>
 801a440:	ecbd 8b02 	vpop	{d8}
 801a444:	ec41 0b10 	vmov	d0, r0, r1
 801a448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a44c:	4b1f      	ldr	r3, [pc, #124]	; (801a4cc <__kernel_cos+0x184>)
 801a44e:	491e      	ldr	r1, [pc, #120]	; (801a4c8 <__kernel_cos+0x180>)
 801a450:	429e      	cmp	r6, r3
 801a452:	bfcc      	ite	gt
 801a454:	4d1e      	ldrgt	r5, [pc, #120]	; (801a4d0 <__kernel_cos+0x188>)
 801a456:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a45a:	2400      	movs	r4, #0
 801a45c:	4622      	mov	r2, r4
 801a45e:	462b      	mov	r3, r5
 801a460:	2000      	movs	r0, #0
 801a462:	f7e5 ff11 	bl	8000288 <__aeabi_dsub>
 801a466:	4622      	mov	r2, r4
 801a468:	4606      	mov	r6, r0
 801a46a:	460f      	mov	r7, r1
 801a46c:	462b      	mov	r3, r5
 801a46e:	4650      	mov	r0, sl
 801a470:	4659      	mov	r1, fp
 801a472:	f7e5 ff09 	bl	8000288 <__aeabi_dsub>
 801a476:	4642      	mov	r2, r8
 801a478:	464b      	mov	r3, r9
 801a47a:	f7e5 ff05 	bl	8000288 <__aeabi_dsub>
 801a47e:	4602      	mov	r2, r0
 801a480:	460b      	mov	r3, r1
 801a482:	4630      	mov	r0, r6
 801a484:	4639      	mov	r1, r7
 801a486:	e7d9      	b.n	801a43c <__kernel_cos+0xf4>
 801a488:	2000      	movs	r0, #0
 801a48a:	490f      	ldr	r1, [pc, #60]	; (801a4c8 <__kernel_cos+0x180>)
 801a48c:	e7d8      	b.n	801a440 <__kernel_cos+0xf8>
 801a48e:	bf00      	nop
 801a490:	be8838d4 	.word	0xbe8838d4
 801a494:	bda8fae9 	.word	0xbda8fae9
 801a498:	bdb4b1c4 	.word	0xbdb4b1c4
 801a49c:	3e21ee9e 	.word	0x3e21ee9e
 801a4a0:	809c52ad 	.word	0x809c52ad
 801a4a4:	3e927e4f 	.word	0x3e927e4f
 801a4a8:	19cb1590 	.word	0x19cb1590
 801a4ac:	3efa01a0 	.word	0x3efa01a0
 801a4b0:	16c15177 	.word	0x16c15177
 801a4b4:	3f56c16c 	.word	0x3f56c16c
 801a4b8:	5555554c 	.word	0x5555554c
 801a4bc:	3fa55555 	.word	0x3fa55555
 801a4c0:	3fe00000 	.word	0x3fe00000
 801a4c4:	3fd33332 	.word	0x3fd33332
 801a4c8:	3ff00000 	.word	0x3ff00000
 801a4cc:	3fe90000 	.word	0x3fe90000
 801a4d0:	3fd20000 	.word	0x3fd20000
 801a4d4:	00000000 	.word	0x00000000

0801a4d8 <__kernel_rem_pio2>:
 801a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4dc:	ed2d 8b02 	vpush	{d8}
 801a4e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a4e4:	1ed4      	subs	r4, r2, #3
 801a4e6:	9308      	str	r3, [sp, #32]
 801a4e8:	9101      	str	r1, [sp, #4]
 801a4ea:	4bc5      	ldr	r3, [pc, #788]	; (801a800 <__kernel_rem_pio2+0x328>)
 801a4ec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a4ee:	9009      	str	r0, [sp, #36]	; 0x24
 801a4f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a4f4:	9304      	str	r3, [sp, #16]
 801a4f6:	9b08      	ldr	r3, [sp, #32]
 801a4f8:	3b01      	subs	r3, #1
 801a4fa:	9307      	str	r3, [sp, #28]
 801a4fc:	2318      	movs	r3, #24
 801a4fe:	fb94 f4f3 	sdiv	r4, r4, r3
 801a502:	f06f 0317 	mvn.w	r3, #23
 801a506:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a50a:	fb04 3303 	mla	r3, r4, r3, r3
 801a50e:	eb03 0a02 	add.w	sl, r3, r2
 801a512:	9b04      	ldr	r3, [sp, #16]
 801a514:	9a07      	ldr	r2, [sp, #28]
 801a516:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a7f0 <__kernel_rem_pio2+0x318>
 801a51a:	eb03 0802 	add.w	r8, r3, r2
 801a51e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a520:	1aa7      	subs	r7, r4, r2
 801a522:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a526:	ae22      	add	r6, sp, #136	; 0x88
 801a528:	2500      	movs	r5, #0
 801a52a:	4545      	cmp	r5, r8
 801a52c:	dd13      	ble.n	801a556 <__kernel_rem_pio2+0x7e>
 801a52e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a7f0 <__kernel_rem_pio2+0x318>
 801a532:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a536:	2600      	movs	r6, #0
 801a538:	9b04      	ldr	r3, [sp, #16]
 801a53a:	429e      	cmp	r6, r3
 801a53c:	dc32      	bgt.n	801a5a4 <__kernel_rem_pio2+0xcc>
 801a53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a540:	9302      	str	r3, [sp, #8]
 801a542:	9b08      	ldr	r3, [sp, #32]
 801a544:	199d      	adds	r5, r3, r6
 801a546:	ab22      	add	r3, sp, #136	; 0x88
 801a548:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a54c:	9306      	str	r3, [sp, #24]
 801a54e:	ec59 8b18 	vmov	r8, r9, d8
 801a552:	2700      	movs	r7, #0
 801a554:	e01f      	b.n	801a596 <__kernel_rem_pio2+0xbe>
 801a556:	42ef      	cmn	r7, r5
 801a558:	d407      	bmi.n	801a56a <__kernel_rem_pio2+0x92>
 801a55a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a55e:	f7e5 ffe1 	bl	8000524 <__aeabi_i2d>
 801a562:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a566:	3501      	adds	r5, #1
 801a568:	e7df      	b.n	801a52a <__kernel_rem_pio2+0x52>
 801a56a:	ec51 0b18 	vmov	r0, r1, d8
 801a56e:	e7f8      	b.n	801a562 <__kernel_rem_pio2+0x8a>
 801a570:	9906      	ldr	r1, [sp, #24]
 801a572:	9d02      	ldr	r5, [sp, #8]
 801a574:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a578:	9106      	str	r1, [sp, #24]
 801a57a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a57e:	9502      	str	r5, [sp, #8]
 801a580:	f7e6 f83a 	bl	80005f8 <__aeabi_dmul>
 801a584:	4602      	mov	r2, r0
 801a586:	460b      	mov	r3, r1
 801a588:	4640      	mov	r0, r8
 801a58a:	4649      	mov	r1, r9
 801a58c:	f7e5 fe7e 	bl	800028c <__adddf3>
 801a590:	3701      	adds	r7, #1
 801a592:	4680      	mov	r8, r0
 801a594:	4689      	mov	r9, r1
 801a596:	9b07      	ldr	r3, [sp, #28]
 801a598:	429f      	cmp	r7, r3
 801a59a:	dde9      	ble.n	801a570 <__kernel_rem_pio2+0x98>
 801a59c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a5a0:	3601      	adds	r6, #1
 801a5a2:	e7c9      	b.n	801a538 <__kernel_rem_pio2+0x60>
 801a5a4:	9b04      	ldr	r3, [sp, #16]
 801a5a6:	aa0e      	add	r2, sp, #56	; 0x38
 801a5a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a5ac:	930c      	str	r3, [sp, #48]	; 0x30
 801a5ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a5b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a5b4:	9c04      	ldr	r4, [sp, #16]
 801a5b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a5b8:	ab9a      	add	r3, sp, #616	; 0x268
 801a5ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a5be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a5c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a5c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a5ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a5ce:	ab9a      	add	r3, sp, #616	; 0x268
 801a5d0:	445b      	add	r3, fp
 801a5d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a5d6:	2500      	movs	r5, #0
 801a5d8:	1b63      	subs	r3, r4, r5
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	dc78      	bgt.n	801a6d0 <__kernel_rem_pio2+0x1f8>
 801a5de:	4650      	mov	r0, sl
 801a5e0:	ec49 8b10 	vmov	d0, r8, r9
 801a5e4:	f000 fda8 	bl	801b138 <scalbn>
 801a5e8:	ec57 6b10 	vmov	r6, r7, d0
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a5f2:	ee10 0a10 	vmov	r0, s0
 801a5f6:	4639      	mov	r1, r7
 801a5f8:	f7e5 fffe 	bl	80005f8 <__aeabi_dmul>
 801a5fc:	ec41 0b10 	vmov	d0, r0, r1
 801a600:	f000 fd12 	bl	801b028 <floor>
 801a604:	2200      	movs	r2, #0
 801a606:	ec51 0b10 	vmov	r0, r1, d0
 801a60a:	4b7e      	ldr	r3, [pc, #504]	; (801a804 <__kernel_rem_pio2+0x32c>)
 801a60c:	f7e5 fff4 	bl	80005f8 <__aeabi_dmul>
 801a610:	4602      	mov	r2, r0
 801a612:	460b      	mov	r3, r1
 801a614:	4630      	mov	r0, r6
 801a616:	4639      	mov	r1, r7
 801a618:	f7e5 fe36 	bl	8000288 <__aeabi_dsub>
 801a61c:	460f      	mov	r7, r1
 801a61e:	4606      	mov	r6, r0
 801a620:	f7e6 fa9a 	bl	8000b58 <__aeabi_d2iz>
 801a624:	9006      	str	r0, [sp, #24]
 801a626:	f7e5 ff7d 	bl	8000524 <__aeabi_i2d>
 801a62a:	4602      	mov	r2, r0
 801a62c:	460b      	mov	r3, r1
 801a62e:	4630      	mov	r0, r6
 801a630:	4639      	mov	r1, r7
 801a632:	f7e5 fe29 	bl	8000288 <__aeabi_dsub>
 801a636:	f1ba 0f00 	cmp.w	sl, #0
 801a63a:	4606      	mov	r6, r0
 801a63c:	460f      	mov	r7, r1
 801a63e:	dd6c      	ble.n	801a71a <__kernel_rem_pio2+0x242>
 801a640:	1e62      	subs	r2, r4, #1
 801a642:	ab0e      	add	r3, sp, #56	; 0x38
 801a644:	f1ca 0118 	rsb	r1, sl, #24
 801a648:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a64c:	9d06      	ldr	r5, [sp, #24]
 801a64e:	fa40 f301 	asr.w	r3, r0, r1
 801a652:	441d      	add	r5, r3
 801a654:	408b      	lsls	r3, r1
 801a656:	1ac0      	subs	r0, r0, r3
 801a658:	ab0e      	add	r3, sp, #56	; 0x38
 801a65a:	9506      	str	r5, [sp, #24]
 801a65c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a660:	f1ca 0317 	rsb	r3, sl, #23
 801a664:	fa40 f303 	asr.w	r3, r0, r3
 801a668:	9302      	str	r3, [sp, #8]
 801a66a:	9b02      	ldr	r3, [sp, #8]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	dd62      	ble.n	801a736 <__kernel_rem_pio2+0x25e>
 801a670:	9b06      	ldr	r3, [sp, #24]
 801a672:	2200      	movs	r2, #0
 801a674:	3301      	adds	r3, #1
 801a676:	9306      	str	r3, [sp, #24]
 801a678:	4615      	mov	r5, r2
 801a67a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a67e:	4294      	cmp	r4, r2
 801a680:	f300 8095 	bgt.w	801a7ae <__kernel_rem_pio2+0x2d6>
 801a684:	f1ba 0f00 	cmp.w	sl, #0
 801a688:	dd07      	ble.n	801a69a <__kernel_rem_pio2+0x1c2>
 801a68a:	f1ba 0f01 	cmp.w	sl, #1
 801a68e:	f000 80a2 	beq.w	801a7d6 <__kernel_rem_pio2+0x2fe>
 801a692:	f1ba 0f02 	cmp.w	sl, #2
 801a696:	f000 80c1 	beq.w	801a81c <__kernel_rem_pio2+0x344>
 801a69a:	9b02      	ldr	r3, [sp, #8]
 801a69c:	2b02      	cmp	r3, #2
 801a69e:	d14a      	bne.n	801a736 <__kernel_rem_pio2+0x25e>
 801a6a0:	4632      	mov	r2, r6
 801a6a2:	463b      	mov	r3, r7
 801a6a4:	2000      	movs	r0, #0
 801a6a6:	4958      	ldr	r1, [pc, #352]	; (801a808 <__kernel_rem_pio2+0x330>)
 801a6a8:	f7e5 fdee 	bl	8000288 <__aeabi_dsub>
 801a6ac:	4606      	mov	r6, r0
 801a6ae:	460f      	mov	r7, r1
 801a6b0:	2d00      	cmp	r5, #0
 801a6b2:	d040      	beq.n	801a736 <__kernel_rem_pio2+0x25e>
 801a6b4:	4650      	mov	r0, sl
 801a6b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a7f8 <__kernel_rem_pio2+0x320>
 801a6ba:	f000 fd3d 	bl	801b138 <scalbn>
 801a6be:	4630      	mov	r0, r6
 801a6c0:	4639      	mov	r1, r7
 801a6c2:	ec53 2b10 	vmov	r2, r3, d0
 801a6c6:	f7e5 fddf 	bl	8000288 <__aeabi_dsub>
 801a6ca:	4606      	mov	r6, r0
 801a6cc:	460f      	mov	r7, r1
 801a6ce:	e032      	b.n	801a736 <__kernel_rem_pio2+0x25e>
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	4b4e      	ldr	r3, [pc, #312]	; (801a80c <__kernel_rem_pio2+0x334>)
 801a6d4:	4640      	mov	r0, r8
 801a6d6:	4649      	mov	r1, r9
 801a6d8:	f7e5 ff8e 	bl	80005f8 <__aeabi_dmul>
 801a6dc:	f7e6 fa3c 	bl	8000b58 <__aeabi_d2iz>
 801a6e0:	f7e5 ff20 	bl	8000524 <__aeabi_i2d>
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	4b4a      	ldr	r3, [pc, #296]	; (801a810 <__kernel_rem_pio2+0x338>)
 801a6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a6ec:	f7e5 ff84 	bl	80005f8 <__aeabi_dmul>
 801a6f0:	4602      	mov	r2, r0
 801a6f2:	460b      	mov	r3, r1
 801a6f4:	4640      	mov	r0, r8
 801a6f6:	4649      	mov	r1, r9
 801a6f8:	f7e5 fdc6 	bl	8000288 <__aeabi_dsub>
 801a6fc:	f7e6 fa2c 	bl	8000b58 <__aeabi_d2iz>
 801a700:	ab0e      	add	r3, sp, #56	; 0x38
 801a702:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a706:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a70e:	f7e5 fdbd 	bl	800028c <__adddf3>
 801a712:	3501      	adds	r5, #1
 801a714:	4680      	mov	r8, r0
 801a716:	4689      	mov	r9, r1
 801a718:	e75e      	b.n	801a5d8 <__kernel_rem_pio2+0x100>
 801a71a:	d105      	bne.n	801a728 <__kernel_rem_pio2+0x250>
 801a71c:	1e63      	subs	r3, r4, #1
 801a71e:	aa0e      	add	r2, sp, #56	; 0x38
 801a720:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a724:	15c3      	asrs	r3, r0, #23
 801a726:	e79f      	b.n	801a668 <__kernel_rem_pio2+0x190>
 801a728:	2200      	movs	r2, #0
 801a72a:	4b3a      	ldr	r3, [pc, #232]	; (801a814 <__kernel_rem_pio2+0x33c>)
 801a72c:	f7e6 f9ea 	bl	8000b04 <__aeabi_dcmpge>
 801a730:	2800      	cmp	r0, #0
 801a732:	d139      	bne.n	801a7a8 <__kernel_rem_pio2+0x2d0>
 801a734:	9002      	str	r0, [sp, #8]
 801a736:	2200      	movs	r2, #0
 801a738:	2300      	movs	r3, #0
 801a73a:	4630      	mov	r0, r6
 801a73c:	4639      	mov	r1, r7
 801a73e:	f7e6 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 801a742:	2800      	cmp	r0, #0
 801a744:	f000 80c7 	beq.w	801a8d6 <__kernel_rem_pio2+0x3fe>
 801a748:	1e65      	subs	r5, r4, #1
 801a74a:	462b      	mov	r3, r5
 801a74c:	2200      	movs	r2, #0
 801a74e:	9904      	ldr	r1, [sp, #16]
 801a750:	428b      	cmp	r3, r1
 801a752:	da6a      	bge.n	801a82a <__kernel_rem_pio2+0x352>
 801a754:	2a00      	cmp	r2, #0
 801a756:	f000 8088 	beq.w	801a86a <__kernel_rem_pio2+0x392>
 801a75a:	ab0e      	add	r3, sp, #56	; 0x38
 801a75c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a760:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a764:	2b00      	cmp	r3, #0
 801a766:	f000 80b4 	beq.w	801a8d2 <__kernel_rem_pio2+0x3fa>
 801a76a:	4650      	mov	r0, sl
 801a76c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a7f8 <__kernel_rem_pio2+0x320>
 801a770:	f000 fce2 	bl	801b138 <scalbn>
 801a774:	00ec      	lsls	r4, r5, #3
 801a776:	ab72      	add	r3, sp, #456	; 0x1c8
 801a778:	191e      	adds	r6, r3, r4
 801a77a:	ec59 8b10 	vmov	r8, r9, d0
 801a77e:	f106 0a08 	add.w	sl, r6, #8
 801a782:	462f      	mov	r7, r5
 801a784:	2f00      	cmp	r7, #0
 801a786:	f280 80df 	bge.w	801a948 <__kernel_rem_pio2+0x470>
 801a78a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a7f0 <__kernel_rem_pio2+0x318>
 801a78e:	f04f 0a00 	mov.w	sl, #0
 801a792:	eba5 030a 	sub.w	r3, r5, sl
 801a796:	2b00      	cmp	r3, #0
 801a798:	f2c0 810a 	blt.w	801a9b0 <__kernel_rem_pio2+0x4d8>
 801a79c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a818 <__kernel_rem_pio2+0x340>
 801a7a0:	ec59 8b18 	vmov	r8, r9, d8
 801a7a4:	2700      	movs	r7, #0
 801a7a6:	e0f5      	b.n	801a994 <__kernel_rem_pio2+0x4bc>
 801a7a8:	2302      	movs	r3, #2
 801a7aa:	9302      	str	r3, [sp, #8]
 801a7ac:	e760      	b.n	801a670 <__kernel_rem_pio2+0x198>
 801a7ae:	ab0e      	add	r3, sp, #56	; 0x38
 801a7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a7b4:	b94d      	cbnz	r5, 801a7ca <__kernel_rem_pio2+0x2f2>
 801a7b6:	b12b      	cbz	r3, 801a7c4 <__kernel_rem_pio2+0x2ec>
 801a7b8:	a80e      	add	r0, sp, #56	; 0x38
 801a7ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a7be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a7c2:	2301      	movs	r3, #1
 801a7c4:	3201      	adds	r2, #1
 801a7c6:	461d      	mov	r5, r3
 801a7c8:	e759      	b.n	801a67e <__kernel_rem_pio2+0x1a6>
 801a7ca:	a80e      	add	r0, sp, #56	; 0x38
 801a7cc:	1acb      	subs	r3, r1, r3
 801a7ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a7d2:	462b      	mov	r3, r5
 801a7d4:	e7f6      	b.n	801a7c4 <__kernel_rem_pio2+0x2ec>
 801a7d6:	1e62      	subs	r2, r4, #1
 801a7d8:	ab0e      	add	r3, sp, #56	; 0x38
 801a7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a7de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a7e2:	a90e      	add	r1, sp, #56	; 0x38
 801a7e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a7e8:	e757      	b.n	801a69a <__kernel_rem_pio2+0x1c2>
 801a7ea:	bf00      	nop
 801a7ec:	f3af 8000 	nop.w
	...
 801a7fc:	3ff00000 	.word	0x3ff00000
 801a800:	0801b9d0 	.word	0x0801b9d0
 801a804:	40200000 	.word	0x40200000
 801a808:	3ff00000 	.word	0x3ff00000
 801a80c:	3e700000 	.word	0x3e700000
 801a810:	41700000 	.word	0x41700000
 801a814:	3fe00000 	.word	0x3fe00000
 801a818:	0801b990 	.word	0x0801b990
 801a81c:	1e62      	subs	r2, r4, #1
 801a81e:	ab0e      	add	r3, sp, #56	; 0x38
 801a820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a824:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a828:	e7db      	b.n	801a7e2 <__kernel_rem_pio2+0x30a>
 801a82a:	a90e      	add	r1, sp, #56	; 0x38
 801a82c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a830:	3b01      	subs	r3, #1
 801a832:	430a      	orrs	r2, r1
 801a834:	e78b      	b.n	801a74e <__kernel_rem_pio2+0x276>
 801a836:	3301      	adds	r3, #1
 801a838:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a83c:	2900      	cmp	r1, #0
 801a83e:	d0fa      	beq.n	801a836 <__kernel_rem_pio2+0x35e>
 801a840:	9a08      	ldr	r2, [sp, #32]
 801a842:	4422      	add	r2, r4
 801a844:	00d2      	lsls	r2, r2, #3
 801a846:	a922      	add	r1, sp, #136	; 0x88
 801a848:	18e3      	adds	r3, r4, r3
 801a84a:	9206      	str	r2, [sp, #24]
 801a84c:	440a      	add	r2, r1
 801a84e:	9302      	str	r3, [sp, #8]
 801a850:	f10b 0108 	add.w	r1, fp, #8
 801a854:	f102 0308 	add.w	r3, r2, #8
 801a858:	1c66      	adds	r6, r4, #1
 801a85a:	910a      	str	r1, [sp, #40]	; 0x28
 801a85c:	2500      	movs	r5, #0
 801a85e:	930d      	str	r3, [sp, #52]	; 0x34
 801a860:	9b02      	ldr	r3, [sp, #8]
 801a862:	42b3      	cmp	r3, r6
 801a864:	da04      	bge.n	801a870 <__kernel_rem_pio2+0x398>
 801a866:	461c      	mov	r4, r3
 801a868:	e6a6      	b.n	801a5b8 <__kernel_rem_pio2+0xe0>
 801a86a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a86c:	2301      	movs	r3, #1
 801a86e:	e7e3      	b.n	801a838 <__kernel_rem_pio2+0x360>
 801a870:	9b06      	ldr	r3, [sp, #24]
 801a872:	18ef      	adds	r7, r5, r3
 801a874:	ab22      	add	r3, sp, #136	; 0x88
 801a876:	441f      	add	r7, r3
 801a878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a87a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a87e:	f7e5 fe51 	bl	8000524 <__aeabi_i2d>
 801a882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a884:	461c      	mov	r4, r3
 801a886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a888:	e9c7 0100 	strd	r0, r1, [r7]
 801a88c:	eb03 0b05 	add.w	fp, r3, r5
 801a890:	2700      	movs	r7, #0
 801a892:	f04f 0800 	mov.w	r8, #0
 801a896:	f04f 0900 	mov.w	r9, #0
 801a89a:	9b07      	ldr	r3, [sp, #28]
 801a89c:	429f      	cmp	r7, r3
 801a89e:	dd08      	ble.n	801a8b2 <__kernel_rem_pio2+0x3da>
 801a8a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8a2:	aa72      	add	r2, sp, #456	; 0x1c8
 801a8a4:	18eb      	adds	r3, r5, r3
 801a8a6:	4413      	add	r3, r2
 801a8a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a8ac:	3601      	adds	r6, #1
 801a8ae:	3508      	adds	r5, #8
 801a8b0:	e7d6      	b.n	801a860 <__kernel_rem_pio2+0x388>
 801a8b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a8b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a8ba:	f7e5 fe9d 	bl	80005f8 <__aeabi_dmul>
 801a8be:	4602      	mov	r2, r0
 801a8c0:	460b      	mov	r3, r1
 801a8c2:	4640      	mov	r0, r8
 801a8c4:	4649      	mov	r1, r9
 801a8c6:	f7e5 fce1 	bl	800028c <__adddf3>
 801a8ca:	3701      	adds	r7, #1
 801a8cc:	4680      	mov	r8, r0
 801a8ce:	4689      	mov	r9, r1
 801a8d0:	e7e3      	b.n	801a89a <__kernel_rem_pio2+0x3c2>
 801a8d2:	3d01      	subs	r5, #1
 801a8d4:	e741      	b.n	801a75a <__kernel_rem_pio2+0x282>
 801a8d6:	f1ca 0000 	rsb	r0, sl, #0
 801a8da:	ec47 6b10 	vmov	d0, r6, r7
 801a8de:	f000 fc2b 	bl	801b138 <scalbn>
 801a8e2:	ec57 6b10 	vmov	r6, r7, d0
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	4b99      	ldr	r3, [pc, #612]	; (801ab50 <__kernel_rem_pio2+0x678>)
 801a8ea:	ee10 0a10 	vmov	r0, s0
 801a8ee:	4639      	mov	r1, r7
 801a8f0:	f7e6 f908 	bl	8000b04 <__aeabi_dcmpge>
 801a8f4:	b1f8      	cbz	r0, 801a936 <__kernel_rem_pio2+0x45e>
 801a8f6:	2200      	movs	r2, #0
 801a8f8:	4b96      	ldr	r3, [pc, #600]	; (801ab54 <__kernel_rem_pio2+0x67c>)
 801a8fa:	4630      	mov	r0, r6
 801a8fc:	4639      	mov	r1, r7
 801a8fe:	f7e5 fe7b 	bl	80005f8 <__aeabi_dmul>
 801a902:	f7e6 f929 	bl	8000b58 <__aeabi_d2iz>
 801a906:	4680      	mov	r8, r0
 801a908:	f7e5 fe0c 	bl	8000524 <__aeabi_i2d>
 801a90c:	2200      	movs	r2, #0
 801a90e:	4b90      	ldr	r3, [pc, #576]	; (801ab50 <__kernel_rem_pio2+0x678>)
 801a910:	f7e5 fe72 	bl	80005f8 <__aeabi_dmul>
 801a914:	460b      	mov	r3, r1
 801a916:	4602      	mov	r2, r0
 801a918:	4639      	mov	r1, r7
 801a91a:	4630      	mov	r0, r6
 801a91c:	f7e5 fcb4 	bl	8000288 <__aeabi_dsub>
 801a920:	f7e6 f91a 	bl	8000b58 <__aeabi_d2iz>
 801a924:	1c65      	adds	r5, r4, #1
 801a926:	ab0e      	add	r3, sp, #56	; 0x38
 801a928:	f10a 0a18 	add.w	sl, sl, #24
 801a92c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a930:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a934:	e719      	b.n	801a76a <__kernel_rem_pio2+0x292>
 801a936:	4630      	mov	r0, r6
 801a938:	4639      	mov	r1, r7
 801a93a:	f7e6 f90d 	bl	8000b58 <__aeabi_d2iz>
 801a93e:	ab0e      	add	r3, sp, #56	; 0x38
 801a940:	4625      	mov	r5, r4
 801a942:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a946:	e710      	b.n	801a76a <__kernel_rem_pio2+0x292>
 801a948:	ab0e      	add	r3, sp, #56	; 0x38
 801a94a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a94e:	f7e5 fde9 	bl	8000524 <__aeabi_i2d>
 801a952:	4642      	mov	r2, r8
 801a954:	464b      	mov	r3, r9
 801a956:	f7e5 fe4f 	bl	80005f8 <__aeabi_dmul>
 801a95a:	2200      	movs	r2, #0
 801a95c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a960:	4b7c      	ldr	r3, [pc, #496]	; (801ab54 <__kernel_rem_pio2+0x67c>)
 801a962:	4640      	mov	r0, r8
 801a964:	4649      	mov	r1, r9
 801a966:	f7e5 fe47 	bl	80005f8 <__aeabi_dmul>
 801a96a:	3f01      	subs	r7, #1
 801a96c:	4680      	mov	r8, r0
 801a96e:	4689      	mov	r9, r1
 801a970:	e708      	b.n	801a784 <__kernel_rem_pio2+0x2ac>
 801a972:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a97a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a97e:	f7e5 fe3b 	bl	80005f8 <__aeabi_dmul>
 801a982:	4602      	mov	r2, r0
 801a984:	460b      	mov	r3, r1
 801a986:	4640      	mov	r0, r8
 801a988:	4649      	mov	r1, r9
 801a98a:	f7e5 fc7f 	bl	800028c <__adddf3>
 801a98e:	3701      	adds	r7, #1
 801a990:	4680      	mov	r8, r0
 801a992:	4689      	mov	r9, r1
 801a994:	9b04      	ldr	r3, [sp, #16]
 801a996:	429f      	cmp	r7, r3
 801a998:	dc01      	bgt.n	801a99e <__kernel_rem_pio2+0x4c6>
 801a99a:	45ba      	cmp	sl, r7
 801a99c:	dae9      	bge.n	801a972 <__kernel_rem_pio2+0x49a>
 801a99e:	ab4a      	add	r3, sp, #296	; 0x128
 801a9a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a9a4:	e9c3 8900 	strd	r8, r9, [r3]
 801a9a8:	f10a 0a01 	add.w	sl, sl, #1
 801a9ac:	3e08      	subs	r6, #8
 801a9ae:	e6f0      	b.n	801a792 <__kernel_rem_pio2+0x2ba>
 801a9b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a9b2:	2b03      	cmp	r3, #3
 801a9b4:	d85b      	bhi.n	801aa6e <__kernel_rem_pio2+0x596>
 801a9b6:	e8df f003 	tbb	[pc, r3]
 801a9ba:	264a      	.short	0x264a
 801a9bc:	0226      	.short	0x0226
 801a9be:	ab9a      	add	r3, sp, #616	; 0x268
 801a9c0:	441c      	add	r4, r3
 801a9c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a9c6:	46a2      	mov	sl, r4
 801a9c8:	46ab      	mov	fp, r5
 801a9ca:	f1bb 0f00 	cmp.w	fp, #0
 801a9ce:	dc6c      	bgt.n	801aaaa <__kernel_rem_pio2+0x5d2>
 801a9d0:	46a2      	mov	sl, r4
 801a9d2:	46ab      	mov	fp, r5
 801a9d4:	f1bb 0f01 	cmp.w	fp, #1
 801a9d8:	f300 8086 	bgt.w	801aae8 <__kernel_rem_pio2+0x610>
 801a9dc:	2000      	movs	r0, #0
 801a9de:	2100      	movs	r1, #0
 801a9e0:	2d01      	cmp	r5, #1
 801a9e2:	f300 80a0 	bgt.w	801ab26 <__kernel_rem_pio2+0x64e>
 801a9e6:	9b02      	ldr	r3, [sp, #8]
 801a9e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a9ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	f040 809e 	bne.w	801ab32 <__kernel_rem_pio2+0x65a>
 801a9f6:	9b01      	ldr	r3, [sp, #4]
 801a9f8:	e9c3 7800 	strd	r7, r8, [r3]
 801a9fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801aa00:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801aa04:	e033      	b.n	801aa6e <__kernel_rem_pio2+0x596>
 801aa06:	3408      	adds	r4, #8
 801aa08:	ab4a      	add	r3, sp, #296	; 0x128
 801aa0a:	441c      	add	r4, r3
 801aa0c:	462e      	mov	r6, r5
 801aa0e:	2000      	movs	r0, #0
 801aa10:	2100      	movs	r1, #0
 801aa12:	2e00      	cmp	r6, #0
 801aa14:	da3a      	bge.n	801aa8c <__kernel_rem_pio2+0x5b4>
 801aa16:	9b02      	ldr	r3, [sp, #8]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d03d      	beq.n	801aa98 <__kernel_rem_pio2+0x5c0>
 801aa1c:	4602      	mov	r2, r0
 801aa1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa22:	9c01      	ldr	r4, [sp, #4]
 801aa24:	e9c4 2300 	strd	r2, r3, [r4]
 801aa28:	4602      	mov	r2, r0
 801aa2a:	460b      	mov	r3, r1
 801aa2c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801aa30:	f7e5 fc2a 	bl	8000288 <__aeabi_dsub>
 801aa34:	ae4c      	add	r6, sp, #304	; 0x130
 801aa36:	2401      	movs	r4, #1
 801aa38:	42a5      	cmp	r5, r4
 801aa3a:	da30      	bge.n	801aa9e <__kernel_rem_pio2+0x5c6>
 801aa3c:	9b02      	ldr	r3, [sp, #8]
 801aa3e:	b113      	cbz	r3, 801aa46 <__kernel_rem_pio2+0x56e>
 801aa40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa44:	4619      	mov	r1, r3
 801aa46:	9b01      	ldr	r3, [sp, #4]
 801aa48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801aa4c:	e00f      	b.n	801aa6e <__kernel_rem_pio2+0x596>
 801aa4e:	ab9a      	add	r3, sp, #616	; 0x268
 801aa50:	441c      	add	r4, r3
 801aa52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801aa56:	2000      	movs	r0, #0
 801aa58:	2100      	movs	r1, #0
 801aa5a:	2d00      	cmp	r5, #0
 801aa5c:	da10      	bge.n	801aa80 <__kernel_rem_pio2+0x5a8>
 801aa5e:	9b02      	ldr	r3, [sp, #8]
 801aa60:	b113      	cbz	r3, 801aa68 <__kernel_rem_pio2+0x590>
 801aa62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa66:	4619      	mov	r1, r3
 801aa68:	9b01      	ldr	r3, [sp, #4]
 801aa6a:	e9c3 0100 	strd	r0, r1, [r3]
 801aa6e:	9b06      	ldr	r3, [sp, #24]
 801aa70:	f003 0007 	and.w	r0, r3, #7
 801aa74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801aa78:	ecbd 8b02 	vpop	{d8}
 801aa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa80:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801aa84:	f7e5 fc02 	bl	800028c <__adddf3>
 801aa88:	3d01      	subs	r5, #1
 801aa8a:	e7e6      	b.n	801aa5a <__kernel_rem_pio2+0x582>
 801aa8c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801aa90:	f7e5 fbfc 	bl	800028c <__adddf3>
 801aa94:	3e01      	subs	r6, #1
 801aa96:	e7bc      	b.n	801aa12 <__kernel_rem_pio2+0x53a>
 801aa98:	4602      	mov	r2, r0
 801aa9a:	460b      	mov	r3, r1
 801aa9c:	e7c1      	b.n	801aa22 <__kernel_rem_pio2+0x54a>
 801aa9e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801aaa2:	f7e5 fbf3 	bl	800028c <__adddf3>
 801aaa6:	3401      	adds	r4, #1
 801aaa8:	e7c6      	b.n	801aa38 <__kernel_rem_pio2+0x560>
 801aaaa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801aaae:	ed3a 7b02 	vldmdb	sl!, {d7}
 801aab2:	4640      	mov	r0, r8
 801aab4:	ec53 2b17 	vmov	r2, r3, d7
 801aab8:	4649      	mov	r1, r9
 801aaba:	ed8d 7b04 	vstr	d7, [sp, #16]
 801aabe:	f7e5 fbe5 	bl	800028c <__adddf3>
 801aac2:	4602      	mov	r2, r0
 801aac4:	460b      	mov	r3, r1
 801aac6:	4606      	mov	r6, r0
 801aac8:	460f      	mov	r7, r1
 801aaca:	4640      	mov	r0, r8
 801aacc:	4649      	mov	r1, r9
 801aace:	f7e5 fbdb 	bl	8000288 <__aeabi_dsub>
 801aad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aad6:	f7e5 fbd9 	bl	800028c <__adddf3>
 801aada:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aade:	e9ca 0100 	strd	r0, r1, [sl]
 801aae2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801aae6:	e770      	b.n	801a9ca <__kernel_rem_pio2+0x4f2>
 801aae8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801aaec:	ed3a 7b02 	vldmdb	sl!, {d7}
 801aaf0:	4630      	mov	r0, r6
 801aaf2:	ec53 2b17 	vmov	r2, r3, d7
 801aaf6:	4639      	mov	r1, r7
 801aaf8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801aafc:	f7e5 fbc6 	bl	800028c <__adddf3>
 801ab00:	4602      	mov	r2, r0
 801ab02:	460b      	mov	r3, r1
 801ab04:	4680      	mov	r8, r0
 801ab06:	4689      	mov	r9, r1
 801ab08:	4630      	mov	r0, r6
 801ab0a:	4639      	mov	r1, r7
 801ab0c:	f7e5 fbbc 	bl	8000288 <__aeabi_dsub>
 801ab10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab14:	f7e5 fbba 	bl	800028c <__adddf3>
 801ab18:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ab1c:	e9ca 0100 	strd	r0, r1, [sl]
 801ab20:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801ab24:	e756      	b.n	801a9d4 <__kernel_rem_pio2+0x4fc>
 801ab26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ab2a:	f7e5 fbaf 	bl	800028c <__adddf3>
 801ab2e:	3d01      	subs	r5, #1
 801ab30:	e756      	b.n	801a9e0 <__kernel_rem_pio2+0x508>
 801ab32:	9b01      	ldr	r3, [sp, #4]
 801ab34:	9a01      	ldr	r2, [sp, #4]
 801ab36:	601f      	str	r7, [r3, #0]
 801ab38:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801ab3c:	605c      	str	r4, [r3, #4]
 801ab3e:	609d      	str	r5, [r3, #8]
 801ab40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801ab44:	60d3      	str	r3, [r2, #12]
 801ab46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ab4a:	6110      	str	r0, [r2, #16]
 801ab4c:	6153      	str	r3, [r2, #20]
 801ab4e:	e78e      	b.n	801aa6e <__kernel_rem_pio2+0x596>
 801ab50:	41700000 	.word	0x41700000
 801ab54:	3e700000 	.word	0x3e700000

0801ab58 <__kernel_sin>:
 801ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab5c:	ec55 4b10 	vmov	r4, r5, d0
 801ab60:	b085      	sub	sp, #20
 801ab62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ab66:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ab6a:	ed8d 1b00 	vstr	d1, [sp]
 801ab6e:	9002      	str	r0, [sp, #8]
 801ab70:	da06      	bge.n	801ab80 <__kernel_sin+0x28>
 801ab72:	ee10 0a10 	vmov	r0, s0
 801ab76:	4629      	mov	r1, r5
 801ab78:	f7e5 ffee 	bl	8000b58 <__aeabi_d2iz>
 801ab7c:	2800      	cmp	r0, #0
 801ab7e:	d051      	beq.n	801ac24 <__kernel_sin+0xcc>
 801ab80:	4622      	mov	r2, r4
 801ab82:	462b      	mov	r3, r5
 801ab84:	4620      	mov	r0, r4
 801ab86:	4629      	mov	r1, r5
 801ab88:	f7e5 fd36 	bl	80005f8 <__aeabi_dmul>
 801ab8c:	4682      	mov	sl, r0
 801ab8e:	468b      	mov	fp, r1
 801ab90:	4602      	mov	r2, r0
 801ab92:	460b      	mov	r3, r1
 801ab94:	4620      	mov	r0, r4
 801ab96:	4629      	mov	r1, r5
 801ab98:	f7e5 fd2e 	bl	80005f8 <__aeabi_dmul>
 801ab9c:	a341      	add	r3, pc, #260	; (adr r3, 801aca4 <__kernel_sin+0x14c>)
 801ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba2:	4680      	mov	r8, r0
 801aba4:	4689      	mov	r9, r1
 801aba6:	4650      	mov	r0, sl
 801aba8:	4659      	mov	r1, fp
 801abaa:	f7e5 fd25 	bl	80005f8 <__aeabi_dmul>
 801abae:	a33f      	add	r3, pc, #252	; (adr r3, 801acac <__kernel_sin+0x154>)
 801abb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb4:	f7e5 fb68 	bl	8000288 <__aeabi_dsub>
 801abb8:	4652      	mov	r2, sl
 801abba:	465b      	mov	r3, fp
 801abbc:	f7e5 fd1c 	bl	80005f8 <__aeabi_dmul>
 801abc0:	a33c      	add	r3, pc, #240	; (adr r3, 801acb4 <__kernel_sin+0x15c>)
 801abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abc6:	f7e5 fb61 	bl	800028c <__adddf3>
 801abca:	4652      	mov	r2, sl
 801abcc:	465b      	mov	r3, fp
 801abce:	f7e5 fd13 	bl	80005f8 <__aeabi_dmul>
 801abd2:	a33a      	add	r3, pc, #232	; (adr r3, 801acbc <__kernel_sin+0x164>)
 801abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd8:	f7e5 fb56 	bl	8000288 <__aeabi_dsub>
 801abdc:	4652      	mov	r2, sl
 801abde:	465b      	mov	r3, fp
 801abe0:	f7e5 fd0a 	bl	80005f8 <__aeabi_dmul>
 801abe4:	a337      	add	r3, pc, #220	; (adr r3, 801acc4 <__kernel_sin+0x16c>)
 801abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abea:	f7e5 fb4f 	bl	800028c <__adddf3>
 801abee:	9b02      	ldr	r3, [sp, #8]
 801abf0:	4606      	mov	r6, r0
 801abf2:	460f      	mov	r7, r1
 801abf4:	b9db      	cbnz	r3, 801ac2e <__kernel_sin+0xd6>
 801abf6:	4602      	mov	r2, r0
 801abf8:	460b      	mov	r3, r1
 801abfa:	4650      	mov	r0, sl
 801abfc:	4659      	mov	r1, fp
 801abfe:	f7e5 fcfb 	bl	80005f8 <__aeabi_dmul>
 801ac02:	a325      	add	r3, pc, #148	; (adr r3, 801ac98 <__kernel_sin+0x140>)
 801ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac08:	f7e5 fb3e 	bl	8000288 <__aeabi_dsub>
 801ac0c:	4642      	mov	r2, r8
 801ac0e:	464b      	mov	r3, r9
 801ac10:	f7e5 fcf2 	bl	80005f8 <__aeabi_dmul>
 801ac14:	4602      	mov	r2, r0
 801ac16:	460b      	mov	r3, r1
 801ac18:	4620      	mov	r0, r4
 801ac1a:	4629      	mov	r1, r5
 801ac1c:	f7e5 fb36 	bl	800028c <__adddf3>
 801ac20:	4604      	mov	r4, r0
 801ac22:	460d      	mov	r5, r1
 801ac24:	ec45 4b10 	vmov	d0, r4, r5
 801ac28:	b005      	add	sp, #20
 801ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac2e:	2200      	movs	r2, #0
 801ac30:	4b1b      	ldr	r3, [pc, #108]	; (801aca0 <__kernel_sin+0x148>)
 801ac32:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ac36:	f7e5 fcdf 	bl	80005f8 <__aeabi_dmul>
 801ac3a:	4632      	mov	r2, r6
 801ac3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ac40:	463b      	mov	r3, r7
 801ac42:	4640      	mov	r0, r8
 801ac44:	4649      	mov	r1, r9
 801ac46:	f7e5 fcd7 	bl	80005f8 <__aeabi_dmul>
 801ac4a:	4602      	mov	r2, r0
 801ac4c:	460b      	mov	r3, r1
 801ac4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ac52:	f7e5 fb19 	bl	8000288 <__aeabi_dsub>
 801ac56:	4652      	mov	r2, sl
 801ac58:	465b      	mov	r3, fp
 801ac5a:	f7e5 fccd 	bl	80005f8 <__aeabi_dmul>
 801ac5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ac62:	f7e5 fb11 	bl	8000288 <__aeabi_dsub>
 801ac66:	a30c      	add	r3, pc, #48	; (adr r3, 801ac98 <__kernel_sin+0x140>)
 801ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac6c:	4606      	mov	r6, r0
 801ac6e:	460f      	mov	r7, r1
 801ac70:	4640      	mov	r0, r8
 801ac72:	4649      	mov	r1, r9
 801ac74:	f7e5 fcc0 	bl	80005f8 <__aeabi_dmul>
 801ac78:	4602      	mov	r2, r0
 801ac7a:	460b      	mov	r3, r1
 801ac7c:	4630      	mov	r0, r6
 801ac7e:	4639      	mov	r1, r7
 801ac80:	f7e5 fb04 	bl	800028c <__adddf3>
 801ac84:	4602      	mov	r2, r0
 801ac86:	460b      	mov	r3, r1
 801ac88:	4620      	mov	r0, r4
 801ac8a:	4629      	mov	r1, r5
 801ac8c:	f7e5 fafc 	bl	8000288 <__aeabi_dsub>
 801ac90:	e7c6      	b.n	801ac20 <__kernel_sin+0xc8>
 801ac92:	bf00      	nop
 801ac94:	f3af 8000 	nop.w
 801ac98:	55555549 	.word	0x55555549
 801ac9c:	3fc55555 	.word	0x3fc55555
 801aca0:	3fe00000 	.word	0x3fe00000
 801aca4:	5acfd57c 	.word	0x5acfd57c
 801aca8:	3de5d93a 	.word	0x3de5d93a
 801acac:	8a2b9ceb 	.word	0x8a2b9ceb
 801acb0:	3e5ae5e6 	.word	0x3e5ae5e6
 801acb4:	57b1fe7d 	.word	0x57b1fe7d
 801acb8:	3ec71de3 	.word	0x3ec71de3
 801acbc:	19c161d5 	.word	0x19c161d5
 801acc0:	3f2a01a0 	.word	0x3f2a01a0
 801acc4:	1110f8a6 	.word	0x1110f8a6
 801acc8:	3f811111 	.word	0x3f811111
 801accc:	00000000 	.word	0x00000000

0801acd0 <atan>:
 801acd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acd4:	ec55 4b10 	vmov	r4, r5, d0
 801acd8:	4bc3      	ldr	r3, [pc, #780]	; (801afe8 <atan+0x318>)
 801acda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801acde:	429e      	cmp	r6, r3
 801ace0:	46ab      	mov	fp, r5
 801ace2:	dd18      	ble.n	801ad16 <atan+0x46>
 801ace4:	4bc1      	ldr	r3, [pc, #772]	; (801afec <atan+0x31c>)
 801ace6:	429e      	cmp	r6, r3
 801ace8:	dc01      	bgt.n	801acee <atan+0x1e>
 801acea:	d109      	bne.n	801ad00 <atan+0x30>
 801acec:	b144      	cbz	r4, 801ad00 <atan+0x30>
 801acee:	4622      	mov	r2, r4
 801acf0:	462b      	mov	r3, r5
 801acf2:	4620      	mov	r0, r4
 801acf4:	4629      	mov	r1, r5
 801acf6:	f7e5 fac9 	bl	800028c <__adddf3>
 801acfa:	4604      	mov	r4, r0
 801acfc:	460d      	mov	r5, r1
 801acfe:	e006      	b.n	801ad0e <atan+0x3e>
 801ad00:	f1bb 0f00 	cmp.w	fp, #0
 801ad04:	f340 8131 	ble.w	801af6a <atan+0x29a>
 801ad08:	a59b      	add	r5, pc, #620	; (adr r5, 801af78 <atan+0x2a8>)
 801ad0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ad0e:	ec45 4b10 	vmov	d0, r4, r5
 801ad12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad16:	4bb6      	ldr	r3, [pc, #728]	; (801aff0 <atan+0x320>)
 801ad18:	429e      	cmp	r6, r3
 801ad1a:	dc14      	bgt.n	801ad46 <atan+0x76>
 801ad1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ad20:	429e      	cmp	r6, r3
 801ad22:	dc0d      	bgt.n	801ad40 <atan+0x70>
 801ad24:	a396      	add	r3, pc, #600	; (adr r3, 801af80 <atan+0x2b0>)
 801ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad2a:	ee10 0a10 	vmov	r0, s0
 801ad2e:	4629      	mov	r1, r5
 801ad30:	f7e5 faac 	bl	800028c <__adddf3>
 801ad34:	2200      	movs	r2, #0
 801ad36:	4baf      	ldr	r3, [pc, #700]	; (801aff4 <atan+0x324>)
 801ad38:	f7e5 feee 	bl	8000b18 <__aeabi_dcmpgt>
 801ad3c:	2800      	cmp	r0, #0
 801ad3e:	d1e6      	bne.n	801ad0e <atan+0x3e>
 801ad40:	f04f 3aff 	mov.w	sl, #4294967295
 801ad44:	e02b      	b.n	801ad9e <atan+0xce>
 801ad46:	f000 f963 	bl	801b010 <fabs>
 801ad4a:	4bab      	ldr	r3, [pc, #684]	; (801aff8 <atan+0x328>)
 801ad4c:	429e      	cmp	r6, r3
 801ad4e:	ec55 4b10 	vmov	r4, r5, d0
 801ad52:	f300 80bf 	bgt.w	801aed4 <atan+0x204>
 801ad56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ad5a:	429e      	cmp	r6, r3
 801ad5c:	f300 80a0 	bgt.w	801aea0 <atan+0x1d0>
 801ad60:	ee10 2a10 	vmov	r2, s0
 801ad64:	ee10 0a10 	vmov	r0, s0
 801ad68:	462b      	mov	r3, r5
 801ad6a:	4629      	mov	r1, r5
 801ad6c:	f7e5 fa8e 	bl	800028c <__adddf3>
 801ad70:	2200      	movs	r2, #0
 801ad72:	4ba0      	ldr	r3, [pc, #640]	; (801aff4 <atan+0x324>)
 801ad74:	f7e5 fa88 	bl	8000288 <__aeabi_dsub>
 801ad78:	2200      	movs	r2, #0
 801ad7a:	4606      	mov	r6, r0
 801ad7c:	460f      	mov	r7, r1
 801ad7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ad82:	4620      	mov	r0, r4
 801ad84:	4629      	mov	r1, r5
 801ad86:	f7e5 fa81 	bl	800028c <__adddf3>
 801ad8a:	4602      	mov	r2, r0
 801ad8c:	460b      	mov	r3, r1
 801ad8e:	4630      	mov	r0, r6
 801ad90:	4639      	mov	r1, r7
 801ad92:	f7e5 fd5b 	bl	800084c <__aeabi_ddiv>
 801ad96:	f04f 0a00 	mov.w	sl, #0
 801ad9a:	4604      	mov	r4, r0
 801ad9c:	460d      	mov	r5, r1
 801ad9e:	4622      	mov	r2, r4
 801ada0:	462b      	mov	r3, r5
 801ada2:	4620      	mov	r0, r4
 801ada4:	4629      	mov	r1, r5
 801ada6:	f7e5 fc27 	bl	80005f8 <__aeabi_dmul>
 801adaa:	4602      	mov	r2, r0
 801adac:	460b      	mov	r3, r1
 801adae:	4680      	mov	r8, r0
 801adb0:	4689      	mov	r9, r1
 801adb2:	f7e5 fc21 	bl	80005f8 <__aeabi_dmul>
 801adb6:	a374      	add	r3, pc, #464	; (adr r3, 801af88 <atan+0x2b8>)
 801adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adbc:	4606      	mov	r6, r0
 801adbe:	460f      	mov	r7, r1
 801adc0:	f7e5 fc1a 	bl	80005f8 <__aeabi_dmul>
 801adc4:	a372      	add	r3, pc, #456	; (adr r3, 801af90 <atan+0x2c0>)
 801adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adca:	f7e5 fa5f 	bl	800028c <__adddf3>
 801adce:	4632      	mov	r2, r6
 801add0:	463b      	mov	r3, r7
 801add2:	f7e5 fc11 	bl	80005f8 <__aeabi_dmul>
 801add6:	a370      	add	r3, pc, #448	; (adr r3, 801af98 <atan+0x2c8>)
 801add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801addc:	f7e5 fa56 	bl	800028c <__adddf3>
 801ade0:	4632      	mov	r2, r6
 801ade2:	463b      	mov	r3, r7
 801ade4:	f7e5 fc08 	bl	80005f8 <__aeabi_dmul>
 801ade8:	a36d      	add	r3, pc, #436	; (adr r3, 801afa0 <atan+0x2d0>)
 801adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adee:	f7e5 fa4d 	bl	800028c <__adddf3>
 801adf2:	4632      	mov	r2, r6
 801adf4:	463b      	mov	r3, r7
 801adf6:	f7e5 fbff 	bl	80005f8 <__aeabi_dmul>
 801adfa:	a36b      	add	r3, pc, #428	; (adr r3, 801afa8 <atan+0x2d8>)
 801adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae00:	f7e5 fa44 	bl	800028c <__adddf3>
 801ae04:	4632      	mov	r2, r6
 801ae06:	463b      	mov	r3, r7
 801ae08:	f7e5 fbf6 	bl	80005f8 <__aeabi_dmul>
 801ae0c:	a368      	add	r3, pc, #416	; (adr r3, 801afb0 <atan+0x2e0>)
 801ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae12:	f7e5 fa3b 	bl	800028c <__adddf3>
 801ae16:	4642      	mov	r2, r8
 801ae18:	464b      	mov	r3, r9
 801ae1a:	f7e5 fbed 	bl	80005f8 <__aeabi_dmul>
 801ae1e:	a366      	add	r3, pc, #408	; (adr r3, 801afb8 <atan+0x2e8>)
 801ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae24:	4680      	mov	r8, r0
 801ae26:	4689      	mov	r9, r1
 801ae28:	4630      	mov	r0, r6
 801ae2a:	4639      	mov	r1, r7
 801ae2c:	f7e5 fbe4 	bl	80005f8 <__aeabi_dmul>
 801ae30:	a363      	add	r3, pc, #396	; (adr r3, 801afc0 <atan+0x2f0>)
 801ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae36:	f7e5 fa27 	bl	8000288 <__aeabi_dsub>
 801ae3a:	4632      	mov	r2, r6
 801ae3c:	463b      	mov	r3, r7
 801ae3e:	f7e5 fbdb 	bl	80005f8 <__aeabi_dmul>
 801ae42:	a361      	add	r3, pc, #388	; (adr r3, 801afc8 <atan+0x2f8>)
 801ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae48:	f7e5 fa1e 	bl	8000288 <__aeabi_dsub>
 801ae4c:	4632      	mov	r2, r6
 801ae4e:	463b      	mov	r3, r7
 801ae50:	f7e5 fbd2 	bl	80005f8 <__aeabi_dmul>
 801ae54:	a35e      	add	r3, pc, #376	; (adr r3, 801afd0 <atan+0x300>)
 801ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae5a:	f7e5 fa15 	bl	8000288 <__aeabi_dsub>
 801ae5e:	4632      	mov	r2, r6
 801ae60:	463b      	mov	r3, r7
 801ae62:	f7e5 fbc9 	bl	80005f8 <__aeabi_dmul>
 801ae66:	a35c      	add	r3, pc, #368	; (adr r3, 801afd8 <atan+0x308>)
 801ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae6c:	f7e5 fa0c 	bl	8000288 <__aeabi_dsub>
 801ae70:	4632      	mov	r2, r6
 801ae72:	463b      	mov	r3, r7
 801ae74:	f7e5 fbc0 	bl	80005f8 <__aeabi_dmul>
 801ae78:	4602      	mov	r2, r0
 801ae7a:	460b      	mov	r3, r1
 801ae7c:	4640      	mov	r0, r8
 801ae7e:	4649      	mov	r1, r9
 801ae80:	f7e5 fa04 	bl	800028c <__adddf3>
 801ae84:	4622      	mov	r2, r4
 801ae86:	462b      	mov	r3, r5
 801ae88:	f7e5 fbb6 	bl	80005f8 <__aeabi_dmul>
 801ae8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801ae90:	4602      	mov	r2, r0
 801ae92:	460b      	mov	r3, r1
 801ae94:	d14b      	bne.n	801af2e <atan+0x25e>
 801ae96:	4620      	mov	r0, r4
 801ae98:	4629      	mov	r1, r5
 801ae9a:	f7e5 f9f5 	bl	8000288 <__aeabi_dsub>
 801ae9e:	e72c      	b.n	801acfa <atan+0x2a>
 801aea0:	ee10 0a10 	vmov	r0, s0
 801aea4:	2200      	movs	r2, #0
 801aea6:	4b53      	ldr	r3, [pc, #332]	; (801aff4 <atan+0x324>)
 801aea8:	4629      	mov	r1, r5
 801aeaa:	f7e5 f9ed 	bl	8000288 <__aeabi_dsub>
 801aeae:	2200      	movs	r2, #0
 801aeb0:	4606      	mov	r6, r0
 801aeb2:	460f      	mov	r7, r1
 801aeb4:	4b4f      	ldr	r3, [pc, #316]	; (801aff4 <atan+0x324>)
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	4629      	mov	r1, r5
 801aeba:	f7e5 f9e7 	bl	800028c <__adddf3>
 801aebe:	4602      	mov	r2, r0
 801aec0:	460b      	mov	r3, r1
 801aec2:	4630      	mov	r0, r6
 801aec4:	4639      	mov	r1, r7
 801aec6:	f7e5 fcc1 	bl	800084c <__aeabi_ddiv>
 801aeca:	f04f 0a01 	mov.w	sl, #1
 801aece:	4604      	mov	r4, r0
 801aed0:	460d      	mov	r5, r1
 801aed2:	e764      	b.n	801ad9e <atan+0xce>
 801aed4:	4b49      	ldr	r3, [pc, #292]	; (801affc <atan+0x32c>)
 801aed6:	429e      	cmp	r6, r3
 801aed8:	dc1d      	bgt.n	801af16 <atan+0x246>
 801aeda:	ee10 0a10 	vmov	r0, s0
 801aede:	2200      	movs	r2, #0
 801aee0:	4b47      	ldr	r3, [pc, #284]	; (801b000 <atan+0x330>)
 801aee2:	4629      	mov	r1, r5
 801aee4:	f7e5 f9d0 	bl	8000288 <__aeabi_dsub>
 801aee8:	2200      	movs	r2, #0
 801aeea:	4606      	mov	r6, r0
 801aeec:	460f      	mov	r7, r1
 801aeee:	4b44      	ldr	r3, [pc, #272]	; (801b000 <atan+0x330>)
 801aef0:	4620      	mov	r0, r4
 801aef2:	4629      	mov	r1, r5
 801aef4:	f7e5 fb80 	bl	80005f8 <__aeabi_dmul>
 801aef8:	2200      	movs	r2, #0
 801aefa:	4b3e      	ldr	r3, [pc, #248]	; (801aff4 <atan+0x324>)
 801aefc:	f7e5 f9c6 	bl	800028c <__adddf3>
 801af00:	4602      	mov	r2, r0
 801af02:	460b      	mov	r3, r1
 801af04:	4630      	mov	r0, r6
 801af06:	4639      	mov	r1, r7
 801af08:	f7e5 fca0 	bl	800084c <__aeabi_ddiv>
 801af0c:	f04f 0a02 	mov.w	sl, #2
 801af10:	4604      	mov	r4, r0
 801af12:	460d      	mov	r5, r1
 801af14:	e743      	b.n	801ad9e <atan+0xce>
 801af16:	462b      	mov	r3, r5
 801af18:	ee10 2a10 	vmov	r2, s0
 801af1c:	2000      	movs	r0, #0
 801af1e:	4939      	ldr	r1, [pc, #228]	; (801b004 <atan+0x334>)
 801af20:	f7e5 fc94 	bl	800084c <__aeabi_ddiv>
 801af24:	f04f 0a03 	mov.w	sl, #3
 801af28:	4604      	mov	r4, r0
 801af2a:	460d      	mov	r5, r1
 801af2c:	e737      	b.n	801ad9e <atan+0xce>
 801af2e:	4b36      	ldr	r3, [pc, #216]	; (801b008 <atan+0x338>)
 801af30:	4e36      	ldr	r6, [pc, #216]	; (801b00c <atan+0x33c>)
 801af32:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801af36:	4456      	add	r6, sl
 801af38:	449a      	add	sl, r3
 801af3a:	e9da 2300 	ldrd	r2, r3, [sl]
 801af3e:	f7e5 f9a3 	bl	8000288 <__aeabi_dsub>
 801af42:	4622      	mov	r2, r4
 801af44:	462b      	mov	r3, r5
 801af46:	f7e5 f99f 	bl	8000288 <__aeabi_dsub>
 801af4a:	4602      	mov	r2, r0
 801af4c:	460b      	mov	r3, r1
 801af4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801af52:	f7e5 f999 	bl	8000288 <__aeabi_dsub>
 801af56:	f1bb 0f00 	cmp.w	fp, #0
 801af5a:	4604      	mov	r4, r0
 801af5c:	460d      	mov	r5, r1
 801af5e:	f6bf aed6 	bge.w	801ad0e <atan+0x3e>
 801af62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af66:	461d      	mov	r5, r3
 801af68:	e6d1      	b.n	801ad0e <atan+0x3e>
 801af6a:	a51d      	add	r5, pc, #116	; (adr r5, 801afe0 <atan+0x310>)
 801af6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801af70:	e6cd      	b.n	801ad0e <atan+0x3e>
 801af72:	bf00      	nop
 801af74:	f3af 8000 	nop.w
 801af78:	54442d18 	.word	0x54442d18
 801af7c:	3ff921fb 	.word	0x3ff921fb
 801af80:	8800759c 	.word	0x8800759c
 801af84:	7e37e43c 	.word	0x7e37e43c
 801af88:	e322da11 	.word	0xe322da11
 801af8c:	3f90ad3a 	.word	0x3f90ad3a
 801af90:	24760deb 	.word	0x24760deb
 801af94:	3fa97b4b 	.word	0x3fa97b4b
 801af98:	a0d03d51 	.word	0xa0d03d51
 801af9c:	3fb10d66 	.word	0x3fb10d66
 801afa0:	c54c206e 	.word	0xc54c206e
 801afa4:	3fb745cd 	.word	0x3fb745cd
 801afa8:	920083ff 	.word	0x920083ff
 801afac:	3fc24924 	.word	0x3fc24924
 801afb0:	5555550d 	.word	0x5555550d
 801afb4:	3fd55555 	.word	0x3fd55555
 801afb8:	2c6a6c2f 	.word	0x2c6a6c2f
 801afbc:	bfa2b444 	.word	0xbfa2b444
 801afc0:	52defd9a 	.word	0x52defd9a
 801afc4:	3fadde2d 	.word	0x3fadde2d
 801afc8:	af749a6d 	.word	0xaf749a6d
 801afcc:	3fb3b0f2 	.word	0x3fb3b0f2
 801afd0:	fe231671 	.word	0xfe231671
 801afd4:	3fbc71c6 	.word	0x3fbc71c6
 801afd8:	9998ebc4 	.word	0x9998ebc4
 801afdc:	3fc99999 	.word	0x3fc99999
 801afe0:	54442d18 	.word	0x54442d18
 801afe4:	bff921fb 	.word	0xbff921fb
 801afe8:	440fffff 	.word	0x440fffff
 801afec:	7ff00000 	.word	0x7ff00000
 801aff0:	3fdbffff 	.word	0x3fdbffff
 801aff4:	3ff00000 	.word	0x3ff00000
 801aff8:	3ff2ffff 	.word	0x3ff2ffff
 801affc:	40037fff 	.word	0x40037fff
 801b000:	3ff80000 	.word	0x3ff80000
 801b004:	bff00000 	.word	0xbff00000
 801b008:	0801ba00 	.word	0x0801ba00
 801b00c:	0801b9e0 	.word	0x0801b9e0

0801b010 <fabs>:
 801b010:	ec51 0b10 	vmov	r0, r1, d0
 801b014:	ee10 2a10 	vmov	r2, s0
 801b018:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b01c:	ec43 2b10 	vmov	d0, r2, r3
 801b020:	4770      	bx	lr
 801b022:	0000      	movs	r0, r0
 801b024:	0000      	movs	r0, r0
	...

0801b028 <floor>:
 801b028:	ec51 0b10 	vmov	r0, r1, d0
 801b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b030:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b034:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b038:	2e13      	cmp	r6, #19
 801b03a:	460c      	mov	r4, r1
 801b03c:	ee10 5a10 	vmov	r5, s0
 801b040:	4680      	mov	r8, r0
 801b042:	dc34      	bgt.n	801b0ae <floor+0x86>
 801b044:	2e00      	cmp	r6, #0
 801b046:	da16      	bge.n	801b076 <floor+0x4e>
 801b048:	a335      	add	r3, pc, #212	; (adr r3, 801b120 <floor+0xf8>)
 801b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b04e:	f7e5 f91d 	bl	800028c <__adddf3>
 801b052:	2200      	movs	r2, #0
 801b054:	2300      	movs	r3, #0
 801b056:	f7e5 fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 801b05a:	b148      	cbz	r0, 801b070 <floor+0x48>
 801b05c:	2c00      	cmp	r4, #0
 801b05e:	da59      	bge.n	801b114 <floor+0xec>
 801b060:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b064:	4a30      	ldr	r2, [pc, #192]	; (801b128 <floor+0x100>)
 801b066:	432b      	orrs	r3, r5
 801b068:	2500      	movs	r5, #0
 801b06a:	42ab      	cmp	r3, r5
 801b06c:	bf18      	it	ne
 801b06e:	4614      	movne	r4, r2
 801b070:	4621      	mov	r1, r4
 801b072:	4628      	mov	r0, r5
 801b074:	e025      	b.n	801b0c2 <floor+0x9a>
 801b076:	4f2d      	ldr	r7, [pc, #180]	; (801b12c <floor+0x104>)
 801b078:	4137      	asrs	r7, r6
 801b07a:	ea01 0307 	and.w	r3, r1, r7
 801b07e:	4303      	orrs	r3, r0
 801b080:	d01f      	beq.n	801b0c2 <floor+0x9a>
 801b082:	a327      	add	r3, pc, #156	; (adr r3, 801b120 <floor+0xf8>)
 801b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b088:	f7e5 f900 	bl	800028c <__adddf3>
 801b08c:	2200      	movs	r2, #0
 801b08e:	2300      	movs	r3, #0
 801b090:	f7e5 fd42 	bl	8000b18 <__aeabi_dcmpgt>
 801b094:	2800      	cmp	r0, #0
 801b096:	d0eb      	beq.n	801b070 <floor+0x48>
 801b098:	2c00      	cmp	r4, #0
 801b09a:	bfbe      	ittt	lt
 801b09c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b0a0:	fa43 f606 	asrlt.w	r6, r3, r6
 801b0a4:	19a4      	addlt	r4, r4, r6
 801b0a6:	ea24 0407 	bic.w	r4, r4, r7
 801b0aa:	2500      	movs	r5, #0
 801b0ac:	e7e0      	b.n	801b070 <floor+0x48>
 801b0ae:	2e33      	cmp	r6, #51	; 0x33
 801b0b0:	dd0b      	ble.n	801b0ca <floor+0xa2>
 801b0b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b0b6:	d104      	bne.n	801b0c2 <floor+0x9a>
 801b0b8:	ee10 2a10 	vmov	r2, s0
 801b0bc:	460b      	mov	r3, r1
 801b0be:	f7e5 f8e5 	bl	800028c <__adddf3>
 801b0c2:	ec41 0b10 	vmov	d0, r0, r1
 801b0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b0ce:	f04f 33ff 	mov.w	r3, #4294967295
 801b0d2:	fa23 f707 	lsr.w	r7, r3, r7
 801b0d6:	4207      	tst	r7, r0
 801b0d8:	d0f3      	beq.n	801b0c2 <floor+0x9a>
 801b0da:	a311      	add	r3, pc, #68	; (adr r3, 801b120 <floor+0xf8>)
 801b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e0:	f7e5 f8d4 	bl	800028c <__adddf3>
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	f7e5 fd16 	bl	8000b18 <__aeabi_dcmpgt>
 801b0ec:	2800      	cmp	r0, #0
 801b0ee:	d0bf      	beq.n	801b070 <floor+0x48>
 801b0f0:	2c00      	cmp	r4, #0
 801b0f2:	da02      	bge.n	801b0fa <floor+0xd2>
 801b0f4:	2e14      	cmp	r6, #20
 801b0f6:	d103      	bne.n	801b100 <floor+0xd8>
 801b0f8:	3401      	adds	r4, #1
 801b0fa:	ea25 0507 	bic.w	r5, r5, r7
 801b0fe:	e7b7      	b.n	801b070 <floor+0x48>
 801b100:	2301      	movs	r3, #1
 801b102:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b106:	fa03 f606 	lsl.w	r6, r3, r6
 801b10a:	4435      	add	r5, r6
 801b10c:	4545      	cmp	r5, r8
 801b10e:	bf38      	it	cc
 801b110:	18e4      	addcc	r4, r4, r3
 801b112:	e7f2      	b.n	801b0fa <floor+0xd2>
 801b114:	2500      	movs	r5, #0
 801b116:	462c      	mov	r4, r5
 801b118:	e7aa      	b.n	801b070 <floor+0x48>
 801b11a:	bf00      	nop
 801b11c:	f3af 8000 	nop.w
 801b120:	8800759c 	.word	0x8800759c
 801b124:	7e37e43c 	.word	0x7e37e43c
 801b128:	bff00000 	.word	0xbff00000
 801b12c:	000fffff 	.word	0x000fffff

0801b130 <matherr>:
 801b130:	2000      	movs	r0, #0
 801b132:	4770      	bx	lr
 801b134:	0000      	movs	r0, r0
	...

0801b138 <scalbn>:
 801b138:	b570      	push	{r4, r5, r6, lr}
 801b13a:	ec55 4b10 	vmov	r4, r5, d0
 801b13e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b142:	4606      	mov	r6, r0
 801b144:	462b      	mov	r3, r5
 801b146:	b9aa      	cbnz	r2, 801b174 <scalbn+0x3c>
 801b148:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b14c:	4323      	orrs	r3, r4
 801b14e:	d03b      	beq.n	801b1c8 <scalbn+0x90>
 801b150:	4b31      	ldr	r3, [pc, #196]	; (801b218 <scalbn+0xe0>)
 801b152:	4629      	mov	r1, r5
 801b154:	2200      	movs	r2, #0
 801b156:	ee10 0a10 	vmov	r0, s0
 801b15a:	f7e5 fa4d 	bl	80005f8 <__aeabi_dmul>
 801b15e:	4b2f      	ldr	r3, [pc, #188]	; (801b21c <scalbn+0xe4>)
 801b160:	429e      	cmp	r6, r3
 801b162:	4604      	mov	r4, r0
 801b164:	460d      	mov	r5, r1
 801b166:	da12      	bge.n	801b18e <scalbn+0x56>
 801b168:	a327      	add	r3, pc, #156	; (adr r3, 801b208 <scalbn+0xd0>)
 801b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b16e:	f7e5 fa43 	bl	80005f8 <__aeabi_dmul>
 801b172:	e009      	b.n	801b188 <scalbn+0x50>
 801b174:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b178:	428a      	cmp	r2, r1
 801b17a:	d10c      	bne.n	801b196 <scalbn+0x5e>
 801b17c:	ee10 2a10 	vmov	r2, s0
 801b180:	4620      	mov	r0, r4
 801b182:	4629      	mov	r1, r5
 801b184:	f7e5 f882 	bl	800028c <__adddf3>
 801b188:	4604      	mov	r4, r0
 801b18a:	460d      	mov	r5, r1
 801b18c:	e01c      	b.n	801b1c8 <scalbn+0x90>
 801b18e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b192:	460b      	mov	r3, r1
 801b194:	3a36      	subs	r2, #54	; 0x36
 801b196:	4432      	add	r2, r6
 801b198:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b19c:	428a      	cmp	r2, r1
 801b19e:	dd0b      	ble.n	801b1b8 <scalbn+0x80>
 801b1a0:	ec45 4b11 	vmov	d1, r4, r5
 801b1a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b210 <scalbn+0xd8>
 801b1a8:	f000 f83c 	bl	801b224 <copysign>
 801b1ac:	a318      	add	r3, pc, #96	; (adr r3, 801b210 <scalbn+0xd8>)
 801b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b2:	ec51 0b10 	vmov	r0, r1, d0
 801b1b6:	e7da      	b.n	801b16e <scalbn+0x36>
 801b1b8:	2a00      	cmp	r2, #0
 801b1ba:	dd08      	ble.n	801b1ce <scalbn+0x96>
 801b1bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b1c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b1c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b1c8:	ec45 4b10 	vmov	d0, r4, r5
 801b1cc:	bd70      	pop	{r4, r5, r6, pc}
 801b1ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b1d2:	da0d      	bge.n	801b1f0 <scalbn+0xb8>
 801b1d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b1d8:	429e      	cmp	r6, r3
 801b1da:	ec45 4b11 	vmov	d1, r4, r5
 801b1de:	dce1      	bgt.n	801b1a4 <scalbn+0x6c>
 801b1e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b208 <scalbn+0xd0>
 801b1e4:	f000 f81e 	bl	801b224 <copysign>
 801b1e8:	a307      	add	r3, pc, #28	; (adr r3, 801b208 <scalbn+0xd0>)
 801b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ee:	e7e0      	b.n	801b1b2 <scalbn+0x7a>
 801b1f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b1f4:	3236      	adds	r2, #54	; 0x36
 801b1f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b1fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b1fe:	4620      	mov	r0, r4
 801b200:	4629      	mov	r1, r5
 801b202:	2200      	movs	r2, #0
 801b204:	4b06      	ldr	r3, [pc, #24]	; (801b220 <scalbn+0xe8>)
 801b206:	e7b2      	b.n	801b16e <scalbn+0x36>
 801b208:	c2f8f359 	.word	0xc2f8f359
 801b20c:	01a56e1f 	.word	0x01a56e1f
 801b210:	8800759c 	.word	0x8800759c
 801b214:	7e37e43c 	.word	0x7e37e43c
 801b218:	43500000 	.word	0x43500000
 801b21c:	ffff3cb0 	.word	0xffff3cb0
 801b220:	3c900000 	.word	0x3c900000

0801b224 <copysign>:
 801b224:	ec51 0b10 	vmov	r0, r1, d0
 801b228:	ee11 0a90 	vmov	r0, s3
 801b22c:	ee10 2a10 	vmov	r2, s0
 801b230:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b234:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b238:	ea41 0300 	orr.w	r3, r1, r0
 801b23c:	ec43 2b10 	vmov	d0, r2, r3
 801b240:	4770      	bx	lr
	...

0801b244 <_init>:
 801b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b246:	bf00      	nop
 801b248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b24a:	bc08      	pop	{r3}
 801b24c:	469e      	mov	lr, r3
 801b24e:	4770      	bx	lr

0801b250 <_fini>:
 801b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b252:	bf00      	nop
 801b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b256:	bc08      	pop	{r3}
 801b258:	469e      	mov	lr, r3
 801b25a:	4770      	bx	lr
