
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c39c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  0801c530  0801c530  0002c530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf20  0801cf20  000343e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801cf20  0801cf20  0002cf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf28  0801cf28  000343e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf28  0801cf28  0002cf28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cf2c  0801cf2c  0002cf2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000043e8  20000000  0801cf30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7ac  200043e8  08021318  000343e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  20011b94  08021318  00041b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035dfc  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000715c  00000000  00000000  0006a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  00071370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c80  00000000  00000000  00073200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aefe  00000000  00000000  00074e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029323  00000000  00000000  0009fd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2a8  00000000  00000000  000c90a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a8349  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096c0  00000000  00000000  001a839c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200043e8 	.word	0x200043e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c514 	.word	0x0801c514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200043ec 	.word	0x200043ec
 80001cc:	0801c514 	.word	0x0801c514

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;
uint8_t step_status;
Robot_CommandTypedef pnp_move_option;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8001016:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8212 	beq.w	8001448 <packetRead+0x458>
 8001024:	f001 b843 	b.w	80020ae <packetRead+0x10be>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
        	uint16_t timeout_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	857b      	strh	r3, [r7, #42]	; 0x2a
        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 800103e:	7cbb      	ldrb	r3, [r7, #18]
 8001040:	2b05      	cmp	r3, #5
 8001042:	f200 81f0 	bhi.w	8001426 <packetRead+0x436>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <packetRead+0x5c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001065 	.word	0x08001065
 8001050:	0800117d 	.word	0x0800117d
 8001054:	08001427 	.word	0x08001427
 8001058:	080012c9 	.word	0x080012c9
 800105c:	080012c9 	.word	0x080012c9
 8001060:	080010ff 	.word	0x080010ff
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <packetRead+0x2b0>)
 800107e:	701a      	strb	r2, [r3, #0]
//					if(Gcode_Mode == GCODE_LINEAR){
//						bezier_wc = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
//					}
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_i2d>
 800108e:	a382      	add	r3, pc, #520	; (adr r3, 8001298 <packetRead+0x2a8>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fab0 	bl	80005f8 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4981      	ldr	r1, [pc, #516]	; (80012a4 <packetRead+0x2b4>)
 800109e:	e9c1 2300 	strd	r2, r3, [r1]
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	3304      	adds	r3, #4
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa37 	bl	8000524 <__aeabi_i2d>
 80010b6:	a378      	add	r3, pc, #480	; (adr r3, 8001298 <packetRead+0x2a8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4978      	ldr	r1, [pc, #480]	; (80012a8 <packetRead+0x2b8>)
 80010c6:	e9c1 2300 	strd	r2, r3, [r1]
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	3304      	adds	r3, #4
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a74      	ldr	r2, [pc, #464]	; (80012ac <packetRead+0x2bc>)
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	3304      	adds	r3, #4
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <packetRead+0x2c0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <packetRead+0x2c4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <packetRead+0x2c8>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 80010f6:	4b71      	ldr	r3, [pc, #452]	; (80012bc <packetRead+0x2cc>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010fc:	e193      	b.n	8001426 <packetRead+0x436>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	3301      	adds	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	4a6a      	ldr	r2, [pc, #424]	; (80012b4 <packetRead+0x2c4>)
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	496b      	ldr	r1, [pc, #428]	; (80012c0 <packetRead+0x2d0>)
 8001114:	4603      	mov	r3, r0
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4403      	add	r3, r0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001122:	3304      	adds	r3, #4
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <packetRead+0x2c4>)
 800112e:	8812      	ldrh	r2, [r2, #0]
 8001130:	4610      	mov	r0, r2
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4962      	ldr	r1, [pc, #392]	; (80012c0 <packetRead+0x2d0>)
 8001136:	4603      	mov	r3, r0
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4403      	add	r3, r0
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	3304      	adds	r3, #4
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <packetRead+0x2c4>)
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	4610      	mov	r0, r2
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4959      	ldr	r1, [pc, #356]	; (80012c0 <packetRead+0x2d0>)
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4403      	add	r3, r0
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3308      	adds	r3, #8
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	3304      	adds	r3, #4
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
					current_clutch_index++;
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <packetRead+0x2c4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <packetRead+0x2c4>)
 8001178:	801a      	strh	r2, [r3, #0]
				}
				break;
 800117a:	e154      	b.n	8001426 <packetRead+0x436>
//				case BEZIER_TYPE:
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <packetRead+0x2c0>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <packetRead+0x2d4>)
 8001184:	460b      	mov	r3, r1
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a5b      	subs	r3, r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	331a      	adds	r3, #26
 8001190:	7cba      	ldrb	r2, [r7, #18]
 8001192:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4a42      	ldr	r2, [pc, #264]	; (80012b0 <packetRead+0x2c0>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	4611      	mov	r1, r2
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <packetRead+0x2d4>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	331b      	adds	r3, #27
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
//					if(move_type == BEZIER_TYPE){
//						Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
//					}
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <packetRead+0x2c0>)
 80011cc:	8812      	ldrh	r2, [r2, #0]
 80011ce:	4610      	mov	r0, r2
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	493c      	ldr	r1, [pc, #240]	; (80012c4 <packetRead+0x2d4>)
 80011d4:	4603      	mov	r3, r0
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a1b      	subs	r3, r3, r0
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	3304      	adds	r3, #4
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <packetRead+0x2c0>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4933      	ldr	r1, [pc, #204]	; (80012c4 <packetRead+0x2d4>)
 80011f6:	4603      	mov	r3, r0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	1a1b      	subs	r3, r3, r0
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	3304      	adds	r3, #4
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	3304      	adds	r3, #4
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <packetRead+0x2b0>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <packetRead+0x248>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <packetRead+0x2c0>)
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	4610      	mov	r0, r2
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4928      	ldr	r1, [pc, #160]	; (80012c4 <packetRead+0x2d4>)
 8001222:	4603      	mov	r3, r0
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a1b      	subs	r3, r3, r0
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3308      	adds	r3, #8
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001232:	3304      	adds	r3, #4
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001236:	e025      	b.n	8001284 <packetRead+0x294>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <packetRead+0x2b0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d121      	bne.n	8001284 <packetRead+0x294>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <packetRead+0x2c4>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <packetRead+0x2c0>)
 8001246:	8812      	ldrh	r2, [r2, #0]
 8001248:	4611      	mov	r1, r2
 800124a:	3b01      	subs	r3, #1
 800124c:	b298      	uxth	r0, r3
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <packetRead+0x2d4>)
 8001250:	460b      	mov	r3, r1
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3318      	adds	r3, #24
 800125c:	4602      	mov	r2, r0
 800125e:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <packetRead+0x2c0>)
 8001268:	8812      	ldrh	r2, [r2, #0]
 800126a:	4610      	mov	r0, r2
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4915      	ldr	r1, [pc, #84]	; (80012c4 <packetRead+0x2d4>)
 8001270:	4603      	mov	r3, r0
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a1b      	subs	r3, r3, r0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3314      	adds	r3, #20
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	3304      	adds	r3, #4
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					point_counter++;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <packetRead+0x2c0>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <packetRead+0x2c0>)
 800128e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001290:	e0c9      	b.n	8001426 <packetRead+0x436>
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	a0000000 	.word	0xa0000000
 800129c:	3eb0c6f7 	.word	0x3eb0c6f7
 80012a0:	200085d0 	.word	0x200085d0
 80012a4:	20008f40 	.word	0x20008f40
 80012a8:	200085c8 	.word	0x200085c8
 80012ac:	20008fb0 	.word	0x20008fb0
 80012b0:	20004404 	.word	0x20004404
 80012b4:	20004406 	.word	0x20004406
 80012b8:	2000fd3a 	.word	0x2000fd3a
 80012bc:	20008f88 	.word	0x20008f88
 80012c0:	200085e0 	.word	0x200085e0
 80012c4:	20008fc8 	.word	0x20008fc8
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <packetRead+0x50c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4a8c      	ldr	r2, [pc, #560]	; (8001500 <packetRead+0x510>)
 80012d0:	460b      	mov	r3, r1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	331a      	adds	r3, #26
 80012dc:	7cba      	ldrb	r2, [r7, #18]
 80012de:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4a82      	ldr	r2, [pc, #520]	; (80014fc <packetRead+0x50c>)
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	b2d8      	uxtb	r0, r3
 80012fe:	4a80      	ldr	r2, [pc, #512]	; (8001500 <packetRead+0x510>)
 8001300:	460b      	mov	r3, r1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a5b      	subs	r3, r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	331b      	adds	r3, #27
 800130c:	4602      	mov	r2, r0
 800130e:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	4a79      	ldr	r2, [pc, #484]	; (80014fc <packetRead+0x50c>)
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	4610      	mov	r0, r2
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4978      	ldr	r1, [pc, #480]	; (8001500 <packetRead+0x510>)
 8001320:	4603      	mov	r3, r0
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a1b      	subs	r3, r3, r0
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	3304      	adds	r3, #4
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	4a70      	ldr	r2, [pc, #448]	; (80014fc <packetRead+0x50c>)
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	4610      	mov	r0, r2
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	496f      	ldr	r1, [pc, #444]	; (8001500 <packetRead+0x510>)
 8001342:	4603      	mov	r3, r0
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	1a1b      	subs	r3, r3, r0
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3304      	adds	r3, #4
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	3304      	adds	r3, #4
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(Gcode_Mode == GCODE_LINEAR){
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <packetRead+0x514>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <packetRead+0x394>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <packetRead+0x50c>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	4610      	mov	r0, r2
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4964      	ldr	r1, [pc, #400]	; (8001500 <packetRead+0x510>)
 800136e:	4603      	mov	r3, r0
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a1b      	subs	r3, r3, r0
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3308      	adds	r3, #8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	3304      	adds	r3, #4
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001382:	e025      	b.n	80013d0 <packetRead+0x3e0>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <packetRead+0x514>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b09      	cmp	r3, #9
 800138a:	d121      	bne.n	80013d0 <packetRead+0x3e0>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <packetRead+0x518>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <packetRead+0x50c>)
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	4611      	mov	r1, r2
 8001396:	3b01      	subs	r3, #1
 8001398:	b298      	uxth	r0, r3
 800139a:	4a59      	ldr	r2, [pc, #356]	; (8001500 <packetRead+0x510>)
 800139c:	460b      	mov	r3, r1
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	1a5b      	subs	r3, r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3318      	adds	r3, #24
 80013a8:	4602      	mov	r2, r0
 80013aa:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a52      	ldr	r2, [pc, #328]	; (80014fc <packetRead+0x50c>)
 80013b4:	8812      	ldrh	r2, [r2, #0]
 80013b6:	4610      	mov	r0, r2
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4951      	ldr	r1, [pc, #324]	; (8001500 <packetRead+0x510>)
 80013bc:	4603      	mov	r3, r0
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a1b      	subs	r3, r3, r0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3314      	adds	r3, #20
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	3304      	adds	r3, #4
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a49      	ldr	r2, [pc, #292]	; (80014fc <packetRead+0x50c>)
 80013d8:	8812      	ldrh	r2, [r2, #0]
 80013da:	4610      	mov	r0, r2
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4948      	ldr	r1, [pc, #288]	; (8001500 <packetRead+0x510>)
 80013e0:	4603      	mov	r3, r0
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a1b      	subs	r3, r3, r0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	330c      	adds	r3, #12
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	3304      	adds	r3, #4
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <packetRead+0x50c>)
 80013fc:	8812      	ldrh	r2, [r2, #0]
 80013fe:	4610      	mov	r0, r2
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	493f      	ldr	r1, [pc, #252]	; (8001500 <packetRead+0x510>)
 8001404:	4603      	mov	r3, r0
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a1b      	subs	r3, r3, r0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3310      	adds	r3, #16
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	3304      	adds	r3, #4
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <packetRead+0x50c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <packetRead+0x50c>)
 8001422:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001424:	bf00      	nop
				}
				if(timeout_value++ == 0xffff) break;
 8001426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	857a      	strh	r2, [r7, #42]	; 0x2a
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	4293      	cmp	r3, r2
 8001432:	d005      	beq.n	8001440 <packetRead+0x450>
        	}while(temp_pointer < length);
 8001434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	f6ff adf9 	blt.w	8001030 <packetRead+0x40>
 800143e:	e000      	b.n	8001442 <packetRead+0x452>
				if(timeout_value++ == 0xffff) break;
 8001440:	bf00      	nop
        	return CMD_GCODE;
 8001442:	231b      	movs	r3, #27
 8001444:	f000 be34 	b.w	80020b0 <packetRead+0x10c0>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            switch(command_id)
 8001450:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001454:	2b1a      	cmp	r3, #26
 8001456:	f200 8628 	bhi.w	80020aa <packetRead+0x10ba>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <packetRead+0x470>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	080014cd 	.word	0x080014cd
 8001464:	080014e5 	.word	0x080014e5
 8001468:	08001511 	.word	0x08001511
 800146c:	080015d9 	.word	0x080015d9
 8001470:	0800182d 	.word	0x0800182d
 8001474:	080015d9 	.word	0x080015d9
 8001478:	08001a9d 	.word	0x08001a9d
 800147c:	08001aa1 	.word	0x08001aa1
 8001480:	080020ab 	.word	0x080020ab
 8001484:	08001ac1 	.word	0x08001ac1
 8001488:	08001adf 	.word	0x08001adf
 800148c:	08001b41 	.word	0x08001b41
 8001490:	08001c0f 	.word	0x08001c0f
 8001494:	08002059 	.word	0x08002059
 8001498:	08001fdd 	.word	0x08001fdd
 800149c:	08001fed 	.word	0x08001fed
 80014a0:	080020ab 	.word	0x080020ab
 80014a4:	080020ab 	.word	0x080020ab
 80014a8:	08001f19 	.word	0x08001f19
 80014ac:	08001ffd 	.word	0x08001ffd
 80014b0:	08001fcd 	.word	0x08001fcd
 80014b4:	08001bad 	.word	0x08001bad
 80014b8:	08001bd7 	.word	0x08001bd7
 80014bc:	080020ab 	.word	0x080020ab
 80014c0:	080020ab 	.word	0x080020ab
 80014c4:	08001c49 	.word	0x08001c49
 80014c8:	08001d39 	.word	0x08001d39
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f000 bde6 	b.w	80020b0 <packetRead+0x10c0>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 bdda 	b.w	80020b0 <packetRead+0x10c0>
 80014fc:	20004404 	.word	0x20004404
 8001500:	20008fc8 	.word	0x20008fc8
 8001504:	200085d0 	.word	0x200085d0
 8001508:	20004406 	.word	0x20004406
 800150c:	358637bd 	.word	0x358637bd
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d15d      	bne.n	80015d2 <packetRead+0x5e2>
						temp_pointer = -2;
 8001516:	f06f 0301 	mvn.w	r3, #1
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	3304      	adds	r3, #4
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800150c <packetRead+0x51c>
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155c:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800150c <packetRead+0x51c>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	ee17 0a90 	vmov	r0, s15
 8001568:	f7fe ffee 	bl	8000548 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <packetRead+0x830>)
 800157e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <packetRead+0x834>)
 800158a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <packetRead+0x838>)
 8001596:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f000 bd6f 	b.w	80020b0 <packetRead+0x10c0>
                        return CMD_ERROR;
 80015d2:	2317      	movs	r3, #23
 80015d4:	f000 bd6c 	b.w	80020b0 <packetRead+0x10c0>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b1d      	cmp	r3, #29
 80015dc:	f040 8109 	bne.w	80017f2 <packetRead+0x802>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80015e0:	f06f 0301 	mvn.w	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	3304      	adds	r3, #4
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff95 	bl	8000524 <__aeabi_i2d>
 80015fa:	a387      	add	r3, pc, #540	; (adr r3, 8001818 <packetRead+0x828>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fffa 	bl	80005f8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	3304      	adds	r3, #4
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff81 	bl	8000524 <__aeabi_i2d>
 8001622:	a37d      	add	r3, pc, #500	; (adr r3, 8001818 <packetRead+0x828>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ffe6 	bl	80005f8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	3304      	adds	r3, #4
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff6d 	bl	8000524 <__aeabi_i2d>
 800164a:	a373      	add	r3, pc, #460	; (adr r3, 8001818 <packetRead+0x828>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ffd2 	bl	80005f8 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	3304      	adds	r3, #4
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff59 	bl	8000524 <__aeabi_i2d>
 8001672:	a369      	add	r3, pc, #420	; (adr r3, 8001818 <packetRead+0x828>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001688:	3304      	adds	r3, #4
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_i2d>
 800169a:	a35f      	add	r3, pc, #380	; (adr r3, 8001818 <packetRead+0x828>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ffaa 	bl	80005f8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	3304      	adds	r3, #4
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80016be:	7cfb      	ldrb	r3, [r7, #19]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d117      	bne.n	80016f4 <packetRead+0x704>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	3301      	adds	r3, #1
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	a34e      	add	r3, pc, #312	; (adr r3, 8001818 <packetRead+0x828>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff88 	bl	80005f8 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80016f2:	e053      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80016f4:	7cfb      	ldrb	r3, [r7, #19]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d117      	bne.n	800172a <packetRead+0x73a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	3301      	adds	r3, #1
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff08 	bl	8000524 <__aeabi_i2d>
 8001714:	a340      	add	r3, pc, #256	; (adr r3, 8001818 <packetRead+0x828>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff6d 	bl	80005f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001728:	e038      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800172a:	7cfb      	ldrb	r3, [r7, #19]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d117      	bne.n	8001760 <packetRead+0x770>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2203      	movs	r2, #3
 8001734:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	3301      	adds	r3, #1
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_i2d>
 800174a:	a333      	add	r3, pc, #204	; (adr r3, 8001818 <packetRead+0x828>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff52 	bl	80005f8 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800175e:	e01d      	b.n	800179c <packetRead+0x7ac>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001760:	7cfb      	ldrb	r3, [r7, #19]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d117      	bne.n	8001796 <packetRead+0x7a6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	3301      	adds	r3, #1
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	a325      	add	r3, pc, #148	; (adr r3, 8001818 <packetRead+0x828>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff37 	bl	80005f8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001794:	e002      	b.n	800179c <packetRead+0x7ac>
						}else{
							return CMD_ERROR;
 8001796:	2317      	movs	r3, #23
 8001798:	f000 bc8a 	b.w	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	3304      	adds	r3, #4
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	3301      	adds	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80017c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d106      	bne.n	80017d6 <packetRead+0x7e6>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	735a      	strb	r2, [r3, #13]
 80017d4:	e010      	b.n	80017f8 <packetRead+0x808>
						}else if(command_id == CMD_MOVE_JOINT){
 80017d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d106      	bne.n	80017ec <packetRead+0x7fc>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	735a      	strb	r2, [r3, #13]
 80017ea:	e005      	b.n	80017f8 <packetRead+0x808>
						}else{
							return CMD_ERROR;
 80017ec:	2317      	movs	r3, #23
 80017ee:	f000 bc5f 	b.w	80020b0 <packetRead+0x10c0>
						}

					}else{
						return CMD_ERROR;
 80017f2:	2317      	movs	r3, #23
 80017f4:	f000 bc5c 	b.w	80020b0 <packetRead+0x10c0>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
					return command_id;
 800180a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800180e:	f000 bc4f 	b.w	80020b0 <packetRead+0x10c0>
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	a0000000 	.word	0xa0000000
 800181c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001820:	406f4000 	.word	0x406f4000
 8001824:	c0690000 	.word	0xc0690000
 8001828:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b22      	cmp	r3, #34	; 0x22
 8001830:	f040 8132 	bne.w	8001a98 <packetRead+0xaa8>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3304      	adds	r3, #4
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe6b 	bl	8000524 <__aeabi_i2d>
 800184e:	f20f 43c8 	addw	r3, pc, #1224	; 0x4c8
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fecf 	bl	80005f8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	3304      	adds	r3, #4
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe56 	bl	8000524 <__aeabi_i2d>
 8001878:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe feba 	bl	80005f8 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	6839      	ldr	r1, [r7, #0]
 800188a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	3304      	adds	r3, #4
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe41 	bl	8000524 <__aeabi_i2d>
 80018a2:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fea5 	bl	80005f8 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	3304      	adds	r3, #4
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe2c 	bl	8000524 <__aeabi_i2d>
 80018cc:	f20f 4348 	addw	r3, pc, #1096	; 0x448
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fe90 	bl	80005f8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	3304      	adds	r3, #4
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe17 	bl	8000524 <__aeabi_i2d>
 80018f6:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe7b 	bl	80005f8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190e:	3304      	adds	r3, #4
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe02 	bl	8000524 <__aeabi_i2d>
 8001920:	a3fd      	add	r3, pc, #1012	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe fe67 	bl	80005f8 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	3304      	adds	r3, #4
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 8001944:	7d7b      	ldrb	r3, [r7, #21]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d103      	bne.n	8001952 <packetRead+0x962>
                			duty_cmd->arc_dir = 1;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2201      	movs	r2, #1
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	e009      	b.n	8001966 <packetRead+0x976>
                		}else if(arc_type == ARC_CW_TYPE){
 8001952:	7d7b      	ldrb	r3, [r7, #21]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d104      	bne.n	8001962 <packetRead+0x972>
                			duty_cmd->arc_dir = -1;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	e001      	b.n	8001966 <packetRead+0x976>
                		}else{
                			return CMD_ERROR;
 8001962:	2317      	movs	r3, #23
 8001964:	e3a4      	b.n	80020b0 <packetRead+0x10c0>
                		}
                		mode_init = message[temp_pointer+=1];
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	3301      	adds	r3, #1
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4413      	add	r3, r2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001976:	7d3b      	ldrb	r3, [r7, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d117      	bne.n	80019ac <packetRead+0x9bc>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	3301      	adds	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4413      	add	r3, r2
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdc7 	bl	8000524 <__aeabi_i2d>
 8001996:	a3e0      	add	r3, pc, #896	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe fe2c 	bl	80005f8 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80019aa:	e052      	b.n	8001a52 <packetRead+0xa62>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80019ac:	7d3b      	ldrb	r3, [r7, #20]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d117      	bne.n	80019e2 <packetRead+0x9f2>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	3301      	adds	r3, #1
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdac 	bl	8000524 <__aeabi_i2d>
 80019cc:	a3d2      	add	r3, pc, #840	; (adr r3, 8001d18 <packetRead+0xd28>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fe11 	bl	80005f8 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80019e0:	e037      	b.n	8001a52 <packetRead+0xa62>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80019e2:	7d3b      	ldrb	r3, [r7, #20]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d117      	bne.n	8001a18 <packetRead+0xa28>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2203      	movs	r2, #3
 80019ec:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f0:	3301      	adds	r3, #1
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd91 	bl	8000524 <__aeabi_i2d>
 8001a02:	a3c5      	add	r3, pc, #788	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a16:	e01c      	b.n	8001a52 <packetRead+0xa62>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001a18:	7d3b      	ldrb	r3, [r7, #20]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d117      	bne.n	8001a4e <packetRead+0xa5e>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2202      	movs	r2, #2
 8001a22:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	3301      	adds	r3, #1
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd76 	bl	8000524 <__aeabi_i2d>
 8001a38:	a3b7      	add	r3, pc, #732	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fddb 	bl	80005f8 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001a4c:	e001      	b.n	8001a52 <packetRead+0xa62>
						}else{
							return CMD_ERROR;
 8001a4e:	2317      	movs	r3, #23
 8001a50:	e32e      	b.n	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	3304      	adds	r3, #4
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	3301      	adds	r3, #1
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2202      	movs	r2, #2
 8001a86:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001a94:	2304      	movs	r3, #4
 8001a96:	e30b      	b.n	80020b0 <packetRead+0x10c0>
                		return CMD_ERROR;
 8001a98:	2317      	movs	r3, #23
 8001a9a:	e309      	b.n	80020b0 <packetRead+0x10c0>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001a9c:	2306      	movs	r3, #6
 8001a9e:	e307      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d10a      	bne.n	8001abc <packetRead+0xacc>
						temp_pointer = 2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	e2f9      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001abc:	2317      	movs	r3, #23
 8001abe:	e2f7      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d109      	bne.n	8001ada <packetRead+0xaea>
						temp_pointer = 2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	4b93      	ldr	r3, [pc, #588]	; (8001d20 <packetRead+0xd30>)
 8001ad4:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 8001ad6:	2309      	movs	r3, #9
 8001ad8:	e2ea      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001ada:	2317      	movs	r3, #23
 8001adc:	e2e8      	b.n	80020b0 <packetRead+0x10c0>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d12b      	bne.n	8001b3c <packetRead+0xb4c>
						temp_pointer = 2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 8001ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b25a      	sxtb	r2, r3
 8001af8:	4b8a      	ldr	r3, [pc, #552]	; (8001d24 <packetRead+0xd34>)
 8001afa:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b25a      	sxtb	r2, r3
 8001b0c:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <packetRead+0xd34>)
 8001b0e:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <packetRead+0xd34>)
 8001b22:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <packetRead+0xd34>)
 8001b36:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	e2b9      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001b3c:	2317      	movs	r3, #23
 8001b3e:	e2b7      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d130      	bne.n	8001ba8 <packetRead+0xbb8>
						uint8_t method;
						temp_pointer = 2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001b54:	7dbb      	ldrb	r3, [r7, #22]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d103      	bne.n	8001b62 <packetRead+0xb72>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	705a      	strb	r2, [r3, #1]
 8001b60:	e01d      	b.n	8001b9e <packetRead+0xbae>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001b62:	7dbb      	ldrb	r3, [r7, #22]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d103      	bne.n	8001b70 <packetRead+0xb80>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	705a      	strb	r2, [r3, #1]
 8001b6e:	e016      	b.n	8001b9e <packetRead+0xbae>
						} else if (SCARA_METHOD_GCODE == method) {
 8001b70:	7dbb      	ldrb	r3, [r7, #22]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <packetRead+0xb8e>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	705a      	strb	r2, [r3, #1]
 8001b7c:	e00f      	b.n	8001b9e <packetRead+0xbae>
						}else if(SCARA_METHOD_TEST == method){
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d103      	bne.n	8001b8c <packetRead+0xb9c>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2203      	movs	r2, #3
 8001b88:	705a      	strb	r2, [r3, #1]
 8001b8a:	e008      	b.n	8001b9e <packetRead+0xbae>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001b8c:	7dbb      	ldrb	r3, [r7, #22]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d103      	bne.n	8001b9a <packetRead+0xbaa>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2204      	movs	r2, #4
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e001      	b.n	8001b9e <packetRead+0xbae>
						}else {
							return CMD_ERROR;
 8001b9a:	2317      	movs	r3, #23
 8001b9c:	e288      	b.n	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->change_method = TRUE;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001ba4:	230b      	movs	r3, #11
 8001ba6:	e283      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001ba8:	2317      	movs	r3, #23
 8001baa:	e281      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d10f      	bne.n	8001bd2 <packetRead+0xbe2>
						int temp_pointer = 2;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001bce:	2315      	movs	r3, #21
 8001bd0:	e26e      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001bd2:	2317      	movs	r3, #23
 8001bd4:	e26c      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d116      	bne.n	8001c0a <packetRead+0xc1a>
						int temp_pointer = 2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	dd02      	ble.n	8001bf6 <packetRead+0xc06>
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	2b0e      	cmp	r3, #14
 8001bf4:	dd01      	ble.n	8001bfa <packetRead+0xc0a>
							return CMD_ERROR;
 8001bf6:	2317      	movs	r3, #23
 8001bf8:	e25a      	b.n	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->key_speed = speed;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001c00:	4a49      	ldr	r2, [pc, #292]	; (8001d28 <packetRead+0xd38>)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001c06:	2316      	movs	r3, #22
 8001c08:	e252      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001c0a:	2317      	movs	r3, #23
 8001c0c:	e250      	b.n	80020b0 <packetRead+0x10c0>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d117      	bne.n	8001c44 <packetRead+0xc54>
						int temp_pointer = 2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d901      	bls.n	8001c2c <packetRead+0xc3c>
							return CMD_ERROR;
 8001c28:	2317      	movs	r3, #23
 8001c2a:	e241      	b.n	80020b0 <packetRead+0x10c0>
						}
						duty_cmd->test_key = test_key;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	7dfa      	ldrb	r2, [r7, #23]
 8001c30:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2203      	movs	r2, #3
 8001c38:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001c40:	230c      	movs	r3, #12
 8001c42:	e235      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001c44:	2317      	movs	r3, #23
 8001c46:	e233      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b0f      	cmp	r3, #15
 8001c4c:	d160      	bne.n	8001d10 <packetRead+0xd20>
						temp_pointer = -2;
 8001c4e:	f06f 0301 	mvn.w	r3, #1
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	3304      	adds	r3, #4
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc5e 	bl	8000524 <__aeabi_i2d>
 8001c68:	a32b      	add	r3, pc, #172	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7e:	3304      	adds	r3, #4
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc4a 	bl	8000524 <__aeabi_i2d>
 8001c90:	a321      	add	r3, pc, #132	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fcaf 	bl	80005f8 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc36 	bl	8000524 <__aeabi_i2d>
 8001cb8:	a317      	add	r3, pc, #92	; (adr r3, 8001d18 <packetRead+0xd28>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fc9b 	bl	80005f8 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	3304      	adds	r3, #4
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.packet_time_stamp = GET_MICROS;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <packetRead+0xd3c>)
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <packetRead+0xd40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4912      	ldr	r1, [pc, #72]	; (8001d34 <packetRead+0xd44>)
 8001cea:	fba1 1303 	umull	r1, r3, r1, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	6839      	ldr	r1, [r7, #0]
 8001cfc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001d0c:	2319      	movs	r3, #25
 8001d0e:	e1cf      	b.n	80020b0 <packetRead+0x10c0>
						return CMD_ERROR;
 8001d10:	2317      	movs	r3, #23
 8001d12:	e1cd      	b.n	80020b0 <packetRead+0x10c0>
 8001d14:	f3af 8000 	nop.w
 8001d18:	a0000000 	.word	0xa0000000
 8001d1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d20:	2000fd38 	.word	0x2000fd38
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000060 	.word	0x20000060
 8001d2c:	e0001000 	.word	0xe0001000
 8001d30:	2000408c 	.word	0x2000408c
 8001d34:	431bde83 	.word	0x431bde83
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 47) { // 11 int32_t number + 1 byte move type + 2 define byte
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b2f      	cmp	r3, #47	; 0x2f
 8001d3c:	f040 80ea 	bne.w	8001f14 <packetRead+0xf24>
						temp_pointer = -2;
 8001d40:	f06f 0301 	mvn.w	r3, #1
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	3304      	adds	r3, #4
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbe5 	bl	8000524 <__aeabi_i2d>
 8001d5a:	a3ad      	add	r3, pc, #692	; (adr r3, 8002010 <packetRead+0x1020>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc4a 	bl	80005f8 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	49ab      	ldr	r1, [pc, #684]	; (8002018 <packetRead+0x1028>)
 8001d6a:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	3304      	adds	r3, #4
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbd1 	bl	8000524 <__aeabi_i2d>
 8001d82:	a3a3      	add	r3, pc, #652	; (adr r3, 8002010 <packetRead+0x1020>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fc36 	bl	80005f8 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	49a2      	ldr	r1, [pc, #648]	; (800201c <packetRead+0x102c>)
 8001d92:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	3304      	adds	r3, #4
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbbd 	bl	8000524 <__aeabi_i2d>
 8001daa:	a399      	add	r3, pc, #612	; (adr r3, 8002010 <packetRead+0x1020>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fc22 	bl	80005f8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4999      	ldr	r1, [pc, #612]	; (8002020 <packetRead+0x1030>)
 8001dba:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fba9 	bl	8000524 <__aeabi_i2d>
 8001dd2:	a38f      	add	r3, pc, #572	; (adr r3, 8002010 <packetRead+0x1020>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fc0e 	bl	80005f8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4990      	ldr	r1, [pc, #576]	; (8002024 <packetRead+0x1034>)
 8001de2:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	3304      	adds	r3, #4
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb95 	bl	8000524 <__aeabi_i2d>
 8001dfa:	a385      	add	r3, pc, #532	; (adr r3, 8002010 <packetRead+0x1020>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fbfa 	bl	80005f8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4987      	ldr	r1, [pc, #540]	; (8002028 <packetRead+0x1038>)
 8001e0a:	e9c1 2300 	strd	r2, r3, [r1]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	3304      	adds	r3, #4
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb81 	bl	8000524 <__aeabi_i2d>
 8001e22:	a37b      	add	r3, pc, #492	; (adr r3, 8002010 <packetRead+0x1020>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fbe6 	bl	80005f8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	497e      	ldr	r1, [pc, #504]	; (800202c <packetRead+0x103c>)
 8001e32:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	3304      	adds	r3, #4
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb6d 	bl	8000524 <__aeabi_i2d>
 8001e4a:	a371      	add	r3, pc, #452	; (adr r3, 8002010 <packetRead+0x1020>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fbd2 	bl	80005f8 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4975      	ldr	r1, [pc, #468]	; (8002030 <packetRead+0x1040>)
 8001e5a:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	3304      	adds	r3, #4
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb59 	bl	8000524 <__aeabi_i2d>
 8001e72:	a367      	add	r3, pc, #412	; (adr r3, 8002010 <packetRead+0x1020>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbbe 	bl	80005f8 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	496c      	ldr	r1, [pc, #432]	; (8002034 <packetRead+0x1044>)
 8001e82:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	3304      	adds	r3, #4
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	a35d      	add	r3, pc, #372	; (adr r3, 8002010 <packetRead+0x1020>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fbaa 	bl	80005f8 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4963      	ldr	r1, [pc, #396]	; (8002038 <packetRead+0x1048>)
 8001eaa:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb31 	bl	8000524 <__aeabi_i2d>
 8001ec2:	a353      	add	r3, pc, #332	; (adr r3, 8002010 <packetRead+0x1020>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe fb96 	bl	80005f8 <__aeabi_dmul>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	495a      	ldr	r1, [pc, #360]	; (800203c <packetRead+0x104c>)
 8001ed2:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	3304      	adds	r3, #4
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fb1d 	bl	8000524 <__aeabi_i2d>
 8001eea:	a349      	add	r3, pc, #292	; (adr r3, 8002010 <packetRead+0x1020>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fb82 	bl	80005f8 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4951      	ldr	r1, [pc, #324]	; (8002040 <packetRead+0x1050>)
 8001efa:	e9c1 2300 	strd	r2, r3, [r1]
						pnp_move_option 		 = message[temp_pointer+=4];
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	3304      	adds	r3, #4
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <packetRead+0x1054>)
 8001f0e:	701a      	strb	r2, [r3, #0]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001f10:	231a      	movs	r3, #26
 8001f12:	e0cd      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001f14:	2317      	movs	r3, #23
 8001f16:	e0cb      	b.n	80020b0 <packetRead+0x10c0>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d154      	bne.n	8001fc8 <packetRead+0xfd8>
						temp_pointer = -2;
 8001f1e:	f06f 0301 	mvn.w	r3, #1
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	3304      	adds	r3, #4
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe faf6 	bl	8000524 <__aeabi_i2d>
 8001f38:	a335      	add	r3, pc, #212	; (adr r3, 8002010 <packetRead+0x1020>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fb5b 	bl	80005f8 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4940      	ldr	r1, [pc, #256]	; (8002048 <packetRead+0x1058>)
 8001f48:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	3304      	adds	r3, #4
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fae2 	bl	8000524 <__aeabi_i2d>
 8001f60:	a32b      	add	r3, pc, #172	; (adr r3, 8002010 <packetRead+0x1020>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fb47 	bl	80005f8 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4937      	ldr	r1, [pc, #220]	; (800204c <packetRead+0x105c>)
 8001f70:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	3304      	adds	r3, #4
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe face 	bl	8000524 <__aeabi_i2d>
 8001f88:	a321      	add	r3, pc, #132	; (adr r3, 8002010 <packetRead+0x1020>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fb33 	bl	80005f8 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	492e      	ldr	r1, [pc, #184]	; (8002050 <packetRead+0x1060>)
 8001f98:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe faba 	bl	8000524 <__aeabi_i2d>
 8001fb0:	a317      	add	r3, pc, #92	; (adr r3, 8002010 <packetRead+0x1020>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe fb1f 	bl	80005f8 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4925      	ldr	r1, [pc, #148]	; (8002054 <packetRead+0x1064>)
 8001fc0:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 8001fc4:	2312      	movs	r3, #18
 8001fc6:	e073      	b.n	80020b0 <packetRead+0x10c0>
					}else{
						return CMD_ERROR;
 8001fc8:	2317      	movs	r3, #23
 8001fca:	e071      	b.n	80020b0 <packetRead+0x10c0>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001fd8:	2314      	movs	r3, #20
 8001fda:	e069      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001fe8:	230e      	movs	r3, #14
 8001fea:	e061      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	e059      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2202      	movs	r2, #2
 8002000:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8002008:	2313      	movs	r3, #19
 800200a:	e051      	b.n	80020b0 <packetRead+0x10c0>
 800200c:	f3af 8000 	nop.w
 8002010:	a0000000 	.word	0xa0000000
 8002014:	3eb0c6f7 	.word	0x3eb0c6f7
 8002018:	20000058 	.word	0x20000058
 800201c:	20000008 	.word	0x20000008
 8002020:	20000010 	.word	0x20000010
 8002024:	20000018 	.word	0x20000018
 8002028:	20000020 	.word	0x20000020
 800202c:	20000028 	.word	0x20000028
 8002030:	20000030 	.word	0x20000030
 8002034:	20000038 	.word	0x20000038
 8002038:	20000040 	.word	0x20000040
 800203c:	20000048 	.word	0x20000048
 8002040:	20000050 	.word	0x20000050
 8002044:	20000064 	.word	0x20000064
 8002048:	20008fa8 	.word	0x20008fa8
 800204c:	2000fd50 	.word	0x2000fd50
 8002050:	2000fd40 	.word	0x2000fd40
 8002054:	20008fa0 	.word	0x20008fa0
				}
				break;
				case CMD_STEP_ON_OFF:
				{
					if(length == 3){ //1 byte status + 2 define byte
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d121      	bne.n	80020a2 <packetRead+0x10b2>
						temp_pointer = 2;
 800205e:	2302      	movs	r3, #2
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
						if(message[temp_pointer] == 1){
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d109      	bne.n	8002082 <packetRead+0x1092>
							step_status = 1;
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <packetRead+0x10c8>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207a:	4810      	ldr	r0, [pc, #64]	; (80020bc <packetRead+0x10cc>)
 800207c:	f00a fae0 	bl	800c640 <HAL_GPIO_WritePin>
 8002080:	e011      	b.n	80020a6 <packetRead+0x10b6>
						}else if(message[temp_pointer] == 0){
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <packetRead+0x10b6>
							step_status = 0;
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <packetRead+0x10c8>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209a:	4808      	ldr	r0, [pc, #32]	; (80020bc <packetRead+0x10cc>)
 800209c:	f00a fad0 	bl	800c640 <HAL_GPIO_WritePin>
 80020a0:	e001      	b.n	80020a6 <packetRead+0x10b6>
						}
					}else{
						return CMD_ERROR;
 80020a2:	2317      	movs	r3, #23
 80020a4:	e004      	b.n	80020b0 <packetRead+0x10c0>
					}
					return CMD_STEP_ON_OFF;
 80020a6:	230d      	movs	r3, #13
 80020a8:	e002      	b.n	80020b0 <packetRead+0x10c0>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 80020aa:	2317      	movs	r3, #23
 80020ac:	e000      	b.n	80020b0 <packetRead+0x10c0>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 80020ae:	2318      	movs	r3, #24
        }
    }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3730      	adds	r7, #48	; 0x30
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000fd28 	.word	0x2000fd28
 80020bc:	40020000 	.word	0x40020000

080020c0 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 80020c0:	b082      	sub	sp, #8
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b0e2      	sub	sp, #392	; 0x188
 80020c6:	af2e      	add	r7, sp, #184	; 0xb8
 80020c8:	4601      	mov	r1, r0
 80020ca:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80020ce:	e880 000c 	stmia.w	r0, {r2, r3}
 80020d2:	460b      	mov	r3, r1
 80020d4:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2b1b      	cmp	r3, #27
 80020da:	f200 81ca 	bhi.w	8002472 <commandReply+0x3b2>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <commandReply+0x24>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	08002155 	.word	0x08002155
 80020e8:	08002155 	.word	0x08002155
 80020ec:	08002155 	.word	0x08002155
 80020f0:	08002155 	.word	0x08002155
 80020f4:	08002155 	.word	0x08002155
 80020f8:	08002155 	.word	0x08002155
 80020fc:	08002155 	.word	0x08002155
 8002100:	0800215d 	.word	0x0800215d
 8002104:	080021d7 	.word	0x080021d7
 8002108:	0800220b 	.word	0x0800220b
 800210c:	08002319 	.word	0x08002319
 8002110:	08002343 	.word	0x08002343
 8002114:	08002155 	.word	0x08002155
 8002118:	08002417 	.word	0x08002417
 800211c:	080023a5 	.word	0x080023a5
 8002120:	080023a5 	.word	0x080023a5
 8002124:	080023a5 	.word	0x080023a5
 8002128:	080023a5 	.word	0x080023a5
 800212c:	08002383 	.word	0x08002383
 8002130:	080023a5 	.word	0x080023a5
 8002134:	080023a5 	.word	0x080023a5
 8002138:	080023ad 	.word	0x080023ad
 800213c:	080023b5 	.word	0x080023b5
 8002140:	080023f5 	.word	0x080023f5
 8002144:	08002473 	.word	0x08002473
 8002148:	08002155 	.word	0x08002155
 800214c:	0800233b 	.word	0x0800233b
 8002150:	0800234b 	.word	0x0800234b
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002154:	2309      	movs	r3, #9
 8002156:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800215a:	e19a      	b.n	8002492 <commandReply+0x3d2>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 800215c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002160:	2b01      	cmp	r3, #1
 8002162:	d110      	bne.n	8002186 <commandReply+0xc6>
				scaraSetOutput(1);
 8002164:	2001      	movs	r0, #1
 8002166:	f008 fbe7 	bl	800a938 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 800216a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002176:	6011      	str	r1, [r2, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800217e:	4413      	add	r3, r2
 8002180:	220d      	movs	r2, #13
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e023      	b.n	80021ce <commandReply+0x10e>
			} else if (0 == duty_cmd.arc_dir) {
 8002186:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800218a:	2b00      	cmp	r3, #0
 800218c:	d110      	bne.n	80021b0 <commandReply+0xf0>
				scaraSetOutput(0);
 800218e:	2000      	movs	r0, #0
 8002190:	f008 fbd2 	bl	800a938 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8002194:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021a0:	6011      	str	r1, [r2, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021a8:	4413      	add	r3, r2
 80021aa:	220e      	movs	r2, #14
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e00e      	b.n	80021ce <commandReply+0x10e>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 80021b0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021c4:	4413      	add	r3, r2
 80021c6:	2211      	movs	r2, #17
 80021c8:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80021ca:	2307      	movs	r3, #7
 80021cc:	e163      	b.n	8002496 <commandReply+0x3d6>
			}
			ret = RPD_OK;
 80021ce:	2308      	movs	r3, #8
 80021d0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80021d4:	e15d      	b.n	8002492 <commandReply+0x3d2>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80021d6:	f008 fc01 	bl	800a9dc <scaraGetMode>
 80021da:	4603      	mov	r3, r0
 80021dc:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 80021e0:	f008 fc14 	bl	800aa0c <scaraGetDutyState>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021ea:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d107      	bne.n	8002202 <commandReply+0x142>
 80021f2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <commandReply+0x142>
				ret = RPD_IDLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8002200:	e147      	b.n	8002492 <commandReply+0x3d2>
				ret = RPD_BUSY;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002208:	e143      	b.n	8002492 <commandReply+0x3d2>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == READ_CONTINUOUS_ENABLE){
 800220a:	4ba6      	ldr	r3, [pc, #664]	; (80024a4 <commandReply+0x3e4>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d113      	bne.n	800223a <commandReply+0x17a>
				detail[(*detail_length)++] = POSREAD_CONTINUOUS_ENABLE;
 8002212:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	1c59      	adds	r1, r3, #1
 800221a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800221e:	6011      	str	r1, [r2, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002226:	4413      	add	r3, r2
 8002228:	2212      	movs	r2, #18
 800222a:	701a      	strb	r2, [r3, #0]
//				lowlayer_readTruePosition(&position);
//				kinematicForward(&position);
//				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
//					scaraUpdatePosition(&position);
//				}
				ret = RPD_OK;
 800222c:	2308      	movs	r3, #8
 800222e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				continuous_update = 1;
 8002232:	4b9d      	ldr	r3, [pc, #628]	; (80024a8 <commandReply+0x3e8>)
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
			}
//			*detail_length = scaraPosition_packaging(detail, position);
//			ret =  RPD_POSITION;
//			ret =  RPD_OK;
		}
		break;
 8002238:	e12b      	b.n	8002492 <commandReply+0x3d2>
			}else if(position_type == READ_CONTINUOUS_DISABLE){
 800223a:	4b9a      	ldr	r3, [pc, #616]	; (80024a4 <commandReply+0x3e4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d113      	bne.n	800226a <commandReply+0x1aa>
				detail[(*detail_length)++] = POSREAD_CONTINUOUS_DISABLE;
 8002242:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1c59      	adds	r1, r3, #1
 800224a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800224e:	6011      	str	r1, [r2, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002256:	4413      	add	r3, r2
 8002258:	2213      	movs	r2, #19
 800225a:	701a      	strb	r2, [r3, #0]
				continuous_update = 0;
 800225c:	4b92      	ldr	r3, [pc, #584]	; (80024a8 <commandReply+0x3e8>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
				ret = RPD_OK;
 8002262:	2308      	movs	r3, #8
 8002264:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002268:	e113      	b.n	8002492 <commandReply+0x3d2>
			}else if(position_type == POSITION_UPDATE){
 800226a:	4b8e      	ldr	r3, [pc, #568]	; (80024a4 <commandReply+0x3e4>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d11f      	bne.n	80022b2 <commandReply+0x1f2>
				detail[(*detail_length)++] = UPDATE_REAL_POS;
 8002272:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c59      	adds	r1, r3, #1
 800227a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800227e:	6011      	str	r1, [r2, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002286:	4413      	add	r3, r2
 8002288:	2214      	movs	r2, #20
 800228a:	701a      	strb	r2, [r3, #0]
				lowlayer_readTruePosition(&position);
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f004 f87d 	bl	8006390 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	4618      	mov	r0, r3
 800229c:	f003 f93c 	bl	8005518 <kinematicForward>
				scaraUpdatePosition(&position);
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	4618      	mov	r0, r3
 80022a6:	f008 fb89 	bl	800a9bc <scaraUpdatePosition>
				ret = RPD_OK;
 80022aa:	2308      	movs	r3, #8
 80022ac:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022b0:	e0ef      	b.n	8002492 <commandReply+0x3d2>
			}else if(position_type == READ_REAL_DATA){
 80022b2:	4b7c      	ldr	r3, [pc, #496]	; (80024a4 <commandReply+0x3e4>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d11f      	bne.n	80022fa <commandReply+0x23a>
				lowlayer_readTruePosition(&position);
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 f866 	bl	8006390 <lowlayer_readTruePosition>
				kinematicForward(&position);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f925 	bl	8005518 <kinematicForward>
				*detail_length = scaraPosition_packaging(detail, position);
 80022ce:	4668      	mov	r0, sp
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	22b8      	movs	r2, #184	; 0xb8
 80022d6:	4619      	mov	r1, r3
 80022d8:	f013 ffd2 	bl	8016280 <memcpy>
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	cb0c      	ldmia	r3, {r2, r3}
 80022e2:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 80022e6:	f008 fbc3 	bl	800aa70 <scaraPosition_packaging>
 80022ea:	4602      	mov	r2, r0
 80022ec:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022f0:	601a      	str	r2, [r3, #0]
				ret =  RPD_POSITION;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022f8:	e0cb      	b.n	8002492 <commandReply+0x3d2>
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 80022fa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1c59      	adds	r1, r3, #1
 8002302:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800230e:	4413      	add	r3, r2
 8002310:	2215      	movs	r2, #21
 8002312:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8002314:	2307      	movs	r3, #7
 8002316:	e0be      	b.n	8002496 <commandReply+0x3d6>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 8002318:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1c59      	adds	r1, r3, #1
 8002320:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002324:	6011      	str	r1, [r2, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800232c:	4413      	add	r3, r2
 800232e:	2216      	movs	r2, #22
 8002330:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002332:	2308      	movs	r3, #8
 8002334:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002338:	e0ab      	b.n	8002492 <commandReply+0x3d2>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 800233a:	2308      	movs	r3, #8
 800233c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002340:	e0a7      	b.n	8002492 <commandReply+0x3d2>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8002342:	2309      	movs	r3, #9
 8002344:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002348:	e0a3      	b.n	8002492 <commandReply+0x3d2>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <commandReply+0x3ec>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	4b57      	ldr	r3, [pc, #348]	; (80024b0 <commandReply+0x3f0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d110      	bne.n	800237a <commandReply+0x2ba>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8002358:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002364:	6011      	str	r1, [r2, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800236c:	4413      	add	r3, r2
 800236e:	2223      	movs	r2, #35	; 0x23
 8002370:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002372:	2308      	movs	r3, #8
 8002374:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8002378:	e08b      	b.n	8002492 <commandReply+0x3d2>
			ret = RPD_TRANSFER;
 800237a:	230a      	movs	r3, #10
 800237c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002380:	e087      	b.n	8002492 <commandReply+0x3d2>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8002382:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1c59      	adds	r1, r3, #1
 800238a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800238e:	6011      	str	r1, [r2, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002396:	4413      	add	r3, r2
 8002398:	2224      	movs	r2, #36	; 0x24
 800239a:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 800239c:	2308      	movs	r3, #8
 800239e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 80023a2:	e076      	b.n	8002492 <commandReply+0x3d2>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 80023a4:	2309      	movs	r3, #9
 80023a6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80023aa:	e072      	b.n	8002492 <commandReply+0x3d2>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80023ac:	2309      	movs	r3, #9
 80023ae:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80023b2:	e06e      	b.n	8002492 <commandReply+0x3d2>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 80023b4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80023c0:	6011      	str	r1, [r2, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023c8:	4413      	add	r3, r2
 80023ca:	221b      	movs	r2, #27
 80023cc:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 80023ce:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80023d2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1c59      	adds	r1, r3, #1
 80023da:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80023de:	6011      	str	r1, [r2, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80023e6:	4413      	add	r3, r2
 80023e8:	b2c2      	uxtb	r2, r0
 80023ea:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 80023ec:	2308      	movs	r3, #8
 80023ee:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 80023f2:	e04e      	b.n	8002492 <commandReply+0x3d2>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 80023f4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1c59      	adds	r1, r3, #1
 80023fc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002400:	6011      	str	r1, [r2, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002408:	4413      	add	r3, r2
 800240a:	221a      	movs	r2, #26
 800240c:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800240e:	2307      	movs	r3, #7
 8002410:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 8002414:	e03d      	b.n	8002492 <commandReply+0x3d2>
	case CMD_STEP_ON_OFF:{
		if(step_status == 1){
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <commandReply+0x3f4>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d110      	bne.n	8002440 <commandReply+0x380>
			detail[(*detail_length)++] = STEP_ON;
 800241e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c59      	adds	r1, r3, #1
 8002426:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800242a:	6011      	str	r1, [r2, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002432:	4413      	add	r3, r2
 8002434:	220f      	movs	r2, #15
 8002436:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002438:	2308      	movs	r3, #8
 800243a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			ret = RPD_OK;
		}else{
			ret = RPD_ERROR;
		}
	}
	break;
 800243e:	e028      	b.n	8002492 <commandReply+0x3d2>
		}else if(step_status == 0){
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <commandReply+0x3f4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d110      	bne.n	800246a <commandReply+0x3aa>
			detail[(*detail_length)++] = STEP_OFF;
 8002448:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1c59      	adds	r1, r3, #1
 8002450:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002454:	6011      	str	r1, [r2, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800245c:	4413      	add	r3, r2
 800245e:	2210      	movs	r2, #16
 8002460:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8002462:	2308      	movs	r3, #8
 8002464:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002468:	e013      	b.n	8002492 <commandReply+0x3d2>
			ret = RPD_ERROR;
 800246a:	2307      	movs	r3, #7
 800246c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8002470:	e00f      	b.n	8002492 <commandReply+0x3d2>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8002472:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	1c59      	adds	r1, r3, #1
 800247a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800247e:	6011      	str	r1, [r2, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002486:	4413      	add	r3, r2
 8002488:	221c      	movs	r2, #28
 800248a:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800248c:	2307      	movs	r3, #7
 800248e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 8002492:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8002496:	4618      	mov	r0, r3
 8002498:	37d0      	adds	r7, #208	; 0xd0
 800249a:	46bd      	mov	sp, r7
 800249c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024a0:	b002      	add	sp, #8
 80024a2:	4770      	bx	lr
 80024a4:	2000fd38 	.word	0x2000fd38
 80024a8:	20004408 	.word	0x20004408
 80024ac:	20004404 	.word	0x20004404
 80024b0:	20008fb0 	.word	0x20008fb0
 80024b4:	2000fd28 	.word	0x2000fd28

080024b8 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	617a      	str	r2, [r7, #20]
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	4413      	add	r3, r2
 80024d8:	2228      	movs	r2, #40	; 0x28
 80024da:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	617a      	str	r2, [r7, #20]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	4413      	add	r3, r2
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	617a      	str	r2, [r7, #20]
 80024f2:	461a      	mov	r2, r3
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	4413      	add	r3, r2
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	617a      	str	r2, [r7, #20]
 8002502:	461a      	mov	r2, r3
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	4413      	add	r3, r2
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	617a      	str	r2, [r7, #20]
 8002512:	461a      	mov	r2, r3
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	4413      	add	r3, r2
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00c      	beq.n	800253e <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	6a3a      	ldr	r2, [r7, #32]
 8002528:	4413      	add	r3, r2
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f013 fea6 	bl	8016280 <memcpy>
		out_length += detail_length;
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e007      	b.n	800254e <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	617a      	str	r2, [r7, #20]
 8002544:	461a      	mov	r2, r3
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	4413      	add	r3, r2
 800254a:	222a      	movs	r2, #42	; 0x2a
 800254c:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	617a      	str	r2, [r7, #20]
 8002554:	461a      	mov	r2, r3
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	4413      	add	r3, r2
 800255a:	227d      	movs	r2, #125	; 0x7d
 800255c:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	617a      	str	r2, [r7, #20]
 8002564:	461a      	mov	r2, r3
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	4413      	add	r3, r2
 800256a:	2229      	movs	r2, #41	; 0x29
 800256c:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	3301      	adds	r3, #1
 8002576:	3a02      	subs	r2, #2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]
	return out_length;
 800257c:	697b      	ldr	r3, [r7, #20]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b096      	sub	sp, #88	; 0x58
 800258c:	af02      	add	r7, sp, #8
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8002594:	887a      	ldrh	r2, [r7, #2]
 8002596:	f107 0008 	add.w	r0, r7, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	4a17      	ldr	r2, [pc, #92]	; (8002600 <LOG_REPORT+0x78>)
 80025a2:	213f      	movs	r1, #63	; 0x3f
 80025a4:	f014 fdd6 	bl	8017154 <sniprintf>
 80025a8:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80025aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d101      	bne.n	80025b6 <LOG_REPORT+0x2e>
		return FALSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e01f      	b.n	80025f6 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025bc:	4619      	mov	r1, r3
 80025be:	4811      	ldr	r0, [pc, #68]	; (8002604 <LOG_REPORT+0x7c>)
 80025c0:	f003 fc06 	bl	8005dd0 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80025c4:	4810      	ldr	r0, [pc, #64]	; (8002608 <LOG_REPORT+0x80>)
 80025c6:	f009 fdb1 	bl	800c12c <HAL_DMA_GetState>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d101      	bne.n	80025d4 <LOG_REPORT+0x4c>
		return TRUE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e010      	b.n	80025f6 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80025d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <LOG_REPORT+0x84>)
 80025da:	480a      	ldr	r0, [pc, #40]	; (8002604 <LOG_REPORT+0x7c>)
 80025dc:	f003 fc20 	bl	8005e20 <ringBuff_PopArray>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80025e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025ea:	461a      	mov	r2, r3
 80025ec:	4907      	ldr	r1, [pc, #28]	; (800260c <LOG_REPORT+0x84>)
 80025ee:	4808      	ldr	r0, [pc, #32]	; (8002610 <LOG_REPORT+0x88>)
 80025f0:	f00c fb38 	bl	800ec64 <HAL_UART_Transmit_DMA>
	return TRUE;
 80025f4:	2301      	movs	r3, #1
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3750      	adds	r7, #80	; 0x50
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	0801c530 	.word	0x0801c530
 8002604:	20002074 	.word	0x20002074
 8002608:	20010e40 	.word	0x20010e40
 800260c:	2000fd70 	.word	0x2000fd70
 8002610:	20010e00 	.word	0x20010e00

08002614 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 3;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3b03      	subs	r3, #3
 8002624:	617b      	str	r3, [r7, #20]
	uint16_t packet_length = *(uint16_t*)(&message_buff[1]);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800262c:	827b      	strh	r3, [r7, #18]
	//check packet length
	if(packet_length == data_length && backup_available == 0){
 800262e:	8a7b      	ldrh	r3, [r7, #18]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	429a      	cmp	r2, r3
 8002634:	d119      	bne.n	800266a <unPackPayload+0x56>
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <unPackPayload+0xd8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d115      	bne.n	800266a <unPackPayload+0x56>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b03      	cmp	r3, #3
 8002642:	dc02      	bgt.n	800264a <unPackPayload+0x36>
			return -1;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	e04c      	b.n	80026e4 <unPackPayload+0xd0>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b28      	cmp	r3, #40	; 0x28
 8002650:	d002      	beq.n	8002658 <unPackPayload+0x44>
			return -1;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	e045      	b.n	80026e4 <unPackPayload+0xd0>
		}
		memcpy(data_packet, &message_buff[3], data_length - RECEIVE_END_LENGTH);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1cd9      	adds	r1, r3, #3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3b02      	subs	r3, #2
 8002660:	461a      	mov	r2, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f013 fe0c 	bl	8016280 <memcpy>
 8002668:	e03a      	b.n	80026e0 <unPackPayload+0xcc>
	}else if(packet_length != data_length && backup_available == 0){
 800266a:	8a7b      	ldrh	r3, [r7, #18]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	429a      	cmp	r2, r3
 8002670:	d01b      	beq.n	80026aa <unPackPayload+0x96>
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <unPackPayload+0xd8>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d117      	bne.n	80026aa <unPackPayload+0x96>
		// check start char
		if(message_buff[0] != START_CHAR){
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b28      	cmp	r3, #40	; 0x28
 8002680:	d002      	beq.n	8002688 <unPackPayload+0x74>
			return -1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	e02d      	b.n	80026e4 <unPackPayload+0xd0>
		}
		backup_available = 1;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <unPackPayload+0xd8>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
		memcpy(data_packet, &message_buff[3], data_length);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3303      	adds	r3, #3
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f013 fdf2 	bl	8016280 <memcpy>
		backup_length = data_length;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <unPackPayload+0xdc>)
 80026a2:	801a      	strh	r2, [r3, #0]
		return - 1;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	e01c      	b.n	80026e4 <unPackPayload+0xd0>
	}else if(backup_available == 1){
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <unPackPayload+0xd8>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d113      	bne.n	80026da <unPackPayload+0xc6>
		backup_available = 0;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <unPackPayload+0xd8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <unPackPayload+0xdc>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f013 fdda 	bl	8016280 <memcpy>
		data_length = backup_length + in_length;
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <unPackPayload+0xdc>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4413      	add	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e002      	b.n	80026e0 <unPackPayload+0xcc>
	}else{
		return - 1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e001      	b.n	80026e4 <unPackPayload+0xd0>
	}


	return data_length - RECEIVE_END_LENGTH;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3b02      	subs	r3, #2
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000fe70 	.word	0x2000fe70
 80026f0:	2000fe72 	.word	0x2000fe72

080026f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_DMA_Init+0x3c>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <MX_DMA_Init+0x3c>)
 8002704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_DMA_Init+0x3c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2105      	movs	r1, #5
 800271a:	200f      	movs	r0, #15
 800271c:	f009 fa2a 	bl	800bb74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002720:	200f      	movs	r0, #15
 8002722:	f009 fa43 	bl	800bbac <HAL_NVIC_EnableIRQ>

}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800

08002734 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <vApplicationGetIdleTaskMemory+0x2c>)
 8002744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <vApplicationGetIdleTaskMemory+0x30>)
 800274a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002752:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	2000440c 	.word	0x2000440c
 8002764:	20004460 	.word	0x20004460

08002768 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	b094      	sub	sp, #80	; 0x50
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 800276e:	2300      	movs	r3, #0
 8002770:	64bb      	str	r3, [r7, #72]	; 0x48
 8002772:	2300      	movs	r3, #0
 8002774:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8002776:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800277a:	4618      	mov	r0, r3
 800277c:	f010 fa7e 	bl	8012c7c <osMutexCreate>
 8002780:	4603      	mov	r3, r0
 8002782:	4a1d      	ldr	r2, [pc, #116]	; (80027f8 <MX_FREERTOS_Init+0x90>)
 8002784:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8002786:	2301      	movs	r3, #1
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
 800278a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800278e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002790:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002794:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8002796:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f010 fb85 	bl	8012eac <osMailCreate>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4a15      	ldr	r2, [pc, #84]	; (80027fc <MX_FREERTOS_Init+0x94>)
 80027a6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <MX_FREERTOS_Init+0x98>)
 80027aa:	f107 041c 	add.w	r4, r7, #28
 80027ae:	461d      	mov	r5, r3
 80027b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f010 f96d 	bl	8012aa2 <osThreadCreate>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <MX_FREERTOS_Init+0x9c>)
 80027cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_FREERTOS_Init+0xa0>)
 80027d0:	463c      	mov	r4, r7
 80027d2:	461d      	mov	r5, r3
 80027d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 80027e0:	463b      	mov	r3, r7
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f010 f95c 	bl	8012aa2 <osThreadCreate>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <MX_FREERTOS_Init+0xa4>)
 80027ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80027f0:	bf00      	nop
 80027f2:	3750      	adds	r7, #80	; 0x50
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bdb0      	pop	{r4, r5, r7, pc}
 80027f8:	2000fe78 	.word	0x2000fe78
 80027fc:	2000fe7c 	.word	0x2000fe7c
 8002800:	0801c56c 	.word	0x0801c56c
 8002804:	2000fe74 	.word	0x2000fe74
 8002808:	0801c588 	.word	0x0801c588
 800280c:	2000fe80 	.word	0x2000fe80

08002810 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002814:	f5ad 5d92 	sub.w	sp, sp, #4672	; 0x1240
 8002818:	b081      	sub	sp, #4
 800281a:	af6c      	add	r7, sp, #432	; 0x1b0
 800281c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002820:	3b14      	subs	r3, #20
 8002822:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002824:	f012 ffa2 	bl	801576c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002828:	2201      	movs	r2, #1
 800282a:	2110      	movs	r1, #16
 800282c:	48c4      	ldr	r0, [pc, #784]	; (8002b40 <StartDefaultTask+0x330>)
 800282e:	f009 ff07 	bl	800c640 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002832:	2300      	movs	r3, #0
 8002834:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002838:	f102 020f 	add.w	r2, r2, #15
 800283c:	7013      	strb	r3, [r2, #0]


  // Report buffer;
  uint8_t				update_pos_cycle = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002844:	f102 020e 	add.w	r2, r2, #14
 8002848:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002850:	f102 020e 	add.w	r2, r2, #14
 8002854:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800285c:	f102 020d 	add.w	r2, r2, #13
 8002860:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 800286e:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002878:	f102 021c 	add.w	r2, r2, #28
 800287c:	6013      	str	r3, [r2, #0]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 800287e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002882:	3b08      	subs	r3, #8
 8002884:	4aaf      	ldr	r2, [pc, #700]	; (8002b44 <StartDefaultTask+0x334>)
 8002886:	4618      	mov	r0, r3
 8002888:	4611      	mov	r1, r2
 800288a:	2390      	movs	r3, #144	; 0x90
 800288c:	461a      	mov	r2, r3
 800288e:	f013 fcf7 	bl	8016280 <memcpy>
  		{257.2121f, -76.9947f, 0.0f} ,
  		{258.221f, -47.1851f, 0.0f} ,
		{260.695f, -17.075f, 0.0f} ,
		{260.4f, 13.66f, 0.0f}
  };
  const double placement_spacing = -34.0f;
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	4bac      	ldr	r3, [pc, #688]	; (8002b48 <StartDefaultTask+0x338>)
 8002898:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 800289c:	f101 0110 	add.w	r1, r1, #16
 80028a0:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t Slot_Placement[NUM_OF_OBJECT] = {
 80028a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028a8:	3b10      	subs	r3, #16
 80028aa:	4aa8      	ldr	r2, [pc, #672]	; (8002b4c <StartDefaultTask+0x33c>)
 80028ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028b0:	6018      	str	r0, [r3, #0]
 80028b2:	3304      	adds	r3, #4
 80028b4:	8019      	strh	r1, [r3, #0]
		  0, 0, 0, 0, 0, 0
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80028b6:	21ee      	movs	r1, #238	; 0xee
 80028b8:	48a5      	ldr	r0, [pc, #660]	; (8002b50 <StartDefaultTask+0x340>)
 80028ba:	f7ff fe65 	bl	8002588 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80028be:	f008 f899 	bl	800a9f4 <scaraGetMethod>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80028c8:	f102 0207 	add.w	r2, r2, #7
 80028cc:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 80028ce:	f008 f885 	bl	800a9dc <scaraGetMode>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80028d8:	f102 0206 	add.w	r2, r2, #6
 80028dc:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 80028de:	f008 f895 	bl	800aa0c <scaraGetDutyState>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80028e8:	f102 0205 	add.w	r2, r2, #5
 80028ec:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 80028ee:	f004 fa6b 	bl	8006dc8 <scaraStartup>
  osDelay(10);
 80028f2:	200a      	movs	r0, #10
 80028f4:	f010 f921 	bl	8012b3a <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.4345;
 80028f8:	4996      	ldr	r1, [pc, #600]	; (8002b54 <StartDefaultTask+0x344>)
 80028fa:	a389      	add	r3, pc, #548	; (adr r3, 8002b20 <StartDefaultTask+0x310>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 1.7213f;
 8002904:	4993      	ldr	r1, [pc, #588]	; (8002b54 <StartDefaultTask+0x344>)
 8002906:	a388      	add	r3, pc, #544	; (adr r3, 8002b28 <StartDefaultTask+0x318>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 9.826;
 8002910:	4990      	ldr	r1, [pc, #576]	; (8002b54 <StartDefaultTask+0x344>)
 8002912:	a387      	add	r3, pc, #540	; (adr r3, 8002b30 <StartDefaultTask+0x320>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 0.28676;
 800291c:	498d      	ldr	r1, [pc, #564]	; (8002b54 <StartDefaultTask+0x344>)
 800291e:	a386      	add	r3, pc, #536	; (adr r3, 8002b38 <StartDefaultTask+0x328>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 8002928:	498a      	ldr	r1, [pc, #552]	; (8002b54 <StartDefaultTask+0x344>)
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 8002936:	4887      	ldr	r0, [pc, #540]	; (8002b54 <StartDefaultTask+0x344>)
 8002938:	f002 fdee 	bl	8005518 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800293c:	4886      	ldr	r0, [pc, #536]	; (8002b58 <StartDefaultTask+0x348>)
 800293e:	f00b fd60 	bl	800e402 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	3b08      	subs	r3, #8
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f010 f948 	bl	8012be4 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002954:	2300      	movs	r3, #0
 8002956:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800295a:	f102 020c 	add.w	r2, r2, #12
 800295e:	6013      	str	r3, [r2, #0]
//	  respond_packed_lenght = 0;
//	  infor_lenght			= 0;
	  infor_packed_lenght	= 0;
 8002960:	2300      	movs	r3, #0
 8002962:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002966:	f102 0208 	add.w	r2, r2, #8
 800296a:	6013      	str	r3, [r2, #0]
	  //task_usb_lenght		= 0;
	  //usb_lenght			= 0;
	  total_respond_length  = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002972:	f102 0208 	add.w	r2, r2, #8
 8002976:	6013      	str	r3, [r2, #0]
//	  detail_ptr 			= 0;
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002978:	4a78      	ldr	r2, [pc, #480]	; (8002b5c <StartDefaultTask+0x34c>)
 800297a:	4b79      	ldr	r3, [pc, #484]	; (8002b60 <StartDefaultTask+0x350>)
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	23c0      	movs	r3, #192	; 0xc0
 8002982:	461a      	mov	r2, r3
 8002984:	f013 fc7c 	bl	8016280 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002988:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <StartDefaultTask+0x350>)
 800298a:	4b72      	ldr	r3, [pc, #456]	; (8002b54 <StartDefaultTask+0x344>)
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	23c0      	movs	r3, #192	; 0xc0
 8002992:	461a      	mov	r2, r3
 8002994:	f013 fc74 	bl	8016280 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002998:	4b72      	ldr	r3, [pc, #456]	; (8002b64 <StartDefaultTask+0x354>)
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029a0:	f103 0304 	add.w	r3, r3, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f010 fb2c 	bl	8013004 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80029ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029b0:	f103 0304 	add.w	r3, r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d125      	bne.n	8002a06 <StartDefaultTask+0x1f6>
		   dataMail = ret_mail.value.p;
 80029ba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029be:	f103 0308 	add.w	r3, r3, #8
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80029c8:	f102 0204 	add.w	r2, r2, #4
 80029cc:	6013      	str	r3, [r2, #0]
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80029ce:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80029d2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80029d6:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80029da:	f101 0104 	add.w	r1, r1, #4
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f013 fc4d 	bl	8016280 <memcpy>
		   isNewDuty = TRUE;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80029ec:	f102 020f 	add.w	r2, r2, #15
 80029f0:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <StartDefaultTask+0x354>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80029fa:	f102 0204 	add.w	r2, r2, #4
 80029fe:	6811      	ldr	r1, [r2, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f010 fb73 	bl	80130ec <osMailFree>
	  }
	  if(isNewDuty) {
 8002a06:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002a0a:	f103 030f 	add.w	r3, r3, #15
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 84cf 	beq.w	80033b4 <StartDefaultTask+0xba4>
		  if (duty_cmd.change_method == TRUE) {
 8002a16:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 8165 	bne.w	8002cec <StartDefaultTask+0x4dc>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002a22:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d138      	bne.n	8002a9e <StartDefaultTask+0x28e>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002a32:	f102 0207 	add.w	r2, r2, #7
 8002a36:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002a3e:	f102 0205 	add.w	r2, r2, #5
 8002a42:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 8002a44:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002a48:	221d      	movs	r2, #29
 8002a4a:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a4c:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002a56:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002a5a:	f103 0308 	add.w	r3, r3, #8
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	2008      	movs	r0, #8
 8002a6c:	f7ff fd24 	bl	80024b8 <commandRespond1>
 8002a70:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a74:	f103 030c 	add.w	r3, r3, #12
 8002a78:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002a7a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002a7e:	f103 0308 	add.w	r3, r3, #8
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a88:	f103 030c 	add.w	r3, r3, #12
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002a94:	f102 0208 	add.w	r2, r2, #8
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	f000 bc85 	b.w	80033a8 <StartDefaultTask+0xb98>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002a9e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002aa2:	785b      	ldrb	r3, [r3, #1]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d15f      	bne.n	8002b68 <StartDefaultTask+0x358>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002aae:	f102 0207 	add.w	r2, r2, #7
 8002ab2:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002aba:	f102 0205 	add.w	r2, r2, #5
 8002abe:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 8002ac0:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002ac4:	221e      	movs	r2, #30
 8002ac6:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ac8:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002acc:	6899      	ldr	r1, [r3, #8]
 8002ace:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002ad2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002ad6:	f103 0308 	add.w	r3, r3, #8
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	2008      	movs	r0, #8
 8002ae8:	f7ff fce6 	bl	80024b8 <commandRespond1>
 8002aec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002af0:	f103 030c 	add.w	r3, r3, #12
 8002af4:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002af6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002afa:	f103 0308 	add.w	r3, r3, #8
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002b04:	f103 030c 	add.w	r3, r3, #12
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002b10:	f102 0208 	add.w	r2, r2, #8
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	f000 bc47 	b.w	80033a8 <StartDefaultTask+0xb98>
 8002b1a:	bf00      	nop
 8002b1c:	f3af 8000 	nop.w
 8002b20:	45a1cac1 	.word	0x45a1cac1
 8002b24:	bff6f3b6 	.word	0xbff6f3b6
 8002b28:	e0000000 	.word	0xe0000000
 8002b2c:	3ffb8a71 	.word	0x3ffb8a71
 8002b30:	78d4fdf4 	.word	0x78d4fdf4
 8002b34:	4023a6e9 	.word	0x4023a6e9
 8002b38:	9d7342ee 	.word	0x9d7342ee
 8002b3c:	3fd25a46 	.word	0x3fd25a46
 8002b40:	40020400 	.word	0x40020400
 8002b44:	0801c688 	.word	0x0801c688
 8002b48:	c0410000 	.word	0xc0410000
 8002b4c:	0801c718 	.word	0x0801c718
 8002b50:	0801c5a4 	.word	0x0801c5a4
 8002b54:	20010c80 	.word	0x20010c80
 8002b58:	20010dc0 	.word	0x20010dc0
 8002b5c:	20010980 	.word	0x20010980
 8002b60:	20010b00 	.word	0x20010b00
 8002b64:	2000fe7c 	.word	0x2000fe7c
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 8002b68:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d137      	bne.n	8002be2 <StartDefaultTask+0x3d2>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002b78:	f102 0205 	add.w	r2, r2, #5
 8002b7c:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002b84:	f102 0207 	add.w	r2, r2, #7
 8002b88:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 8002b8a:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002b8e:	221f      	movs	r2, #31
 8002b90:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b92:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002b96:	6899      	ldr	r1, [r3, #8]
 8002b98:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002b9c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002ba0:	f103 0308 	add.w	r3, r3, #8
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2301      	movs	r3, #1
 8002bb0:	2008      	movs	r0, #8
 8002bb2:	f7ff fc81 	bl	80024b8 <commandRespond1>
 8002bb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002bba:	f103 030c 	add.w	r3, r3, #12
 8002bbe:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002bc0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002bc4:	f103 0308 	add.w	r3, r3, #8
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002bce:	f103 030c 	add.w	r3, r3, #12
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002bda:	f102 0208 	add.w	r2, r2, #8
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e3e2      	b.n	80033a8 <StartDefaultTask+0xb98>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002be2:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002be6:	785b      	ldrb	r3, [r3, #1]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d141      	bne.n	8002c70 <StartDefaultTask+0x460>
				  test_value[0] = 0;
 8002bec:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002bf4:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002bfc:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8002c00:	2200      	movs	r2, #0
 8002c02:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002c04:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8002c08:	2200      	movs	r2, #0
 8002c0a:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002c12:	f102 0207 	add.w	r2, r2, #7
 8002c16:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 8002c18:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c20:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002c24:	6899      	ldr	r1, [r3, #8]
 8002c26:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002c2a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002c2e:	f103 0308 	add.w	r3, r3, #8
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	2008      	movs	r0, #8
 8002c40:	f7ff fc3a 	bl	80024b8 <commandRespond1>
 8002c44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002c48:	f103 030c 	add.w	r3, r3, #12
 8002c4c:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002c4e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002c52:	f103 0308 	add.w	r3, r3, #8
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002c5c:	f103 030c 	add.w	r3, r3, #12
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002c68:	f102 0208 	add.w	r2, r2, #8
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e39b      	b.n	80033a8 <StartDefaultTask+0xb98>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002c70:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	f040 8396 	bne.w	80033a8 <StartDefaultTask+0xb98>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002c82:	f102 0207 	add.w	r2, r2, #7
 8002c86:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002c8e:	f102 0205 	add.w	r2, r2, #5
 8002c92:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002c94:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002c98:	2221      	movs	r2, #33	; 0x21
 8002c9a:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c9c:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002ca6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002caa:	f103 0308 	add.w	r3, r3, #8
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2301      	movs	r3, #1
 8002cba:	2008      	movs	r0, #8
 8002cbc:	f7ff fbfc 	bl	80024b8 <commandRespond1>
 8002cc0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002cc4:	f103 030c 	add.w	r3, r3, #12
 8002cc8:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002cca:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002cce:	f103 0308 	add.w	r3, r3, #8
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002cd8:	f103 030c 	add.w	r3, r3, #12
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002ce4:	f102 0208 	add.w	r2, r2, #8
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e35d      	b.n	80033a8 <StartDefaultTask+0xb98>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002cec:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002cf6:	f102 0207 	add.w	r2, r2, #7
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f040 8324 	bne.w	800334a <StartDefaultTask+0xb3a>
				  	  switch( duty_cmd.robot_method) {
 8002d02:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002d06:	785b      	ldrb	r3, [r3, #1]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	f200 8318 	bhi.w	800333e <StartDefaultTask+0xb2e>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <StartDefaultTask+0x504>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d29 	.word	0x08002d29
 8002d18:	08002daf 	.word	0x08002daf
 8002d1c:	080031b1 	.word	0x080031b1
 8002d20:	0800303f 	.word	0x0800303f
 8002d24:	08003267 	.word	0x08003267
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002d28:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002d2c:	f103 0303 	add.w	r3, r3, #3
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d116      	bne.n	8002d64 <StartDefaultTask+0x554>
				  			  current_key = duty_cmd.keyboard;
 8002d36:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d40:	f102 0202 	add.w	r2, r2, #2
 8002d44:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002d46:	2301      	movs	r3, #1
 8002d48:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d4c:	f102 0203 	add.w	r2, r2, #3
 8002d50:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002d52:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002d5c:	f102 021c 	add.w	r2, r2, #28
 8002d60:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002d62:	e31e      	b.n	80033a2 <StartDefaultTask+0xb92>
				  		  } else if (current_key == duty_cmd.keyboard
 8002d64:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002d68:	78db      	ldrb	r3, [r3, #3]
 8002d6a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002d6e:	f102 0202 	add.w	r2, r2, #2
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	f040 8314 	bne.w	80033a2 <StartDefaultTask+0xb92>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002d7a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002d7e:	f103 0303 	add.w	r3, r3, #3
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	f040 830c 	bne.w	80033a2 <StartDefaultTask+0xb92>
									  && current_key_speed == duty_cmd.key_speed) {
 8002d8a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002d94:	f102 021c 	add.w	r2, r2, #28
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	f040 8301 	bne.w	80033a2 <StartDefaultTask+0xb92>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002da0:	2301      	movs	r3, #1
 8002da2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002da6:	f102 0203 	add.w	r2, r2, #3
 8002daa:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002dac:	e2f9      	b.n	80033a2 <StartDefaultTask+0xb92>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002dae:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002db2:	789b      	ldrb	r3, [r3, #2]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	f000 80b6 	beq.w	8002f26 <StartDefaultTask+0x716>
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	f300 8138 	bgt.w	8003030 <StartDefaultTask+0x820>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <StartDefaultTask+0x5ba>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d037      	beq.n	8002e38 <StartDefaultTask+0x628>
 8002dc8:	e132      	b.n	8003030 <StartDefaultTask+0x820>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002dd0:	f102 0206 	add.w	r2, r2, #6
 8002dd4:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002dd6:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002dda:	2225      	movs	r2, #37	; 0x25
 8002ddc:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002dde:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002de2:	6899      	ldr	r1, [r3, #8]
 8002de4:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002de8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002dec:	f103 0308 	add.w	r3, r3, #8
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	2008      	movs	r0, #8
 8002dfe:	f7ff fb5b 	bl	80024b8 <commandRespond1>
 8002e02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e06:	f103 030c 	add.w	r3, r3, #12
 8002e0a:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8002e0c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002e10:	f103 0308 	add.w	r3, r3, #8
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e1a:	f103 030c 	add.w	r3, r3, #12
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002e26:	f102 0208 	add.w	r2, r2, #8
 8002e2a:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002e2c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002e30:	48cf      	ldr	r0, [pc, #828]	; (8003170 <StartDefaultTask+0x960>)
 8002e32:	f7ff fba9 	bl	8002588 <LOG_REPORT>
							  }
							  break;
 8002e36:	e101      	b.n	800303c <StartDefaultTask+0x82c>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002e38:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002e3c:	f103 0306 	add.w	r3, r3, #6
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d13e      	bne.n	8002ec4 <StartDefaultTask+0x6b4>
 8002e46:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002e4a:	f103 0305 	add.w	r3, r3, #5
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d137      	bne.n	8002ec4 <StartDefaultTask+0x6b4>
									  current_mode = SCARA_MODE_SCAN;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002e5a:	f102 0206 	add.w	r2, r2, #6
 8002e5e:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002e66:	f102 0204 	add.w	r2, r2, #4
 8002e6a:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002e6c:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002e70:	2226      	movs	r2, #38	; 0x26
 8002e72:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e74:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002e78:	6899      	ldr	r1, [r3, #8]
 8002e7a:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002e7e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002e82:	f103 0308 	add.w	r3, r3, #8
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2301      	movs	r3, #1
 8002e92:	2008      	movs	r0, #8
 8002e94:	f7ff fb10 	bl	80024b8 <commandRespond1>
 8002e98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e9c:	f103 030c 	add.w	r3, r3, #12
 8002ea0:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002ea2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002ea6:	f103 0308 	add.w	r3, r3, #8
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002eb0:	f103 030c 	add.w	r3, r3, #12
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002ebc:	f102 0208 	add.w	r2, r2, #8
 8002ec0:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002ec2:	e0bb      	b.n	800303c <StartDefaultTask+0x82c>
									detail_array[0] = BUSY;
 8002ec4:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002ec8:	2227      	movs	r2, #39	; 0x27
 8002eca:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ecc:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002ed0:	6899      	ldr	r1, [r3, #8]
 8002ed2:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002ed6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002eda:	f103 0308 	add.w	r3, r3, #8
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2301      	movs	r3, #1
 8002eea:	2007      	movs	r0, #7
 8002eec:	f7ff fae4 	bl	80024b8 <commandRespond1>
 8002ef0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002ef4:	f103 030c 	add.w	r3, r3, #12
 8002ef8:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002efa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002efe:	f103 0308 	add.w	r3, r3, #8
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002f08:	f103 030c 	add.w	r3, r3, #12
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002f14:	f102 0208 	add.w	r2, r2, #8
 8002f18:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002f1a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002f1e:	4895      	ldr	r0, [pc, #596]	; (8003174 <StartDefaultTask+0x964>)
 8002f20:	f7ff fb32 	bl	8002588 <LOG_REPORT>
							  break;
 8002f24:	e08a      	b.n	800303c <StartDefaultTask+0x82c>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002f26:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002f2a:	f103 0306 	add.w	r3, r3, #6
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d14b      	bne.n	8002fcc <StartDefaultTask+0x7bc>
 8002f34:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002f38:	f103 0305 	add.w	r3, r3, #5
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d144      	bne.n	8002fcc <StartDefaultTask+0x7bc>
									  scaraSetScanFlag();
 8002f42:	f007 fced 	bl	800a920 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002f46:	f007 fd6d 	bl	800aa24 <scaraIsScanLimit>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00c      	beq.n	8002f6a <StartDefaultTask+0x75a>
										  current_mode	 = SCARA_MODE_DUTY;
 8002f50:	2302      	movs	r3, #2
 8002f52:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002f56:	f102 0206 	add.w	r2, r2, #6
 8002f5a:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002f62:	f102 0205 	add.w	r2, r2, #5
 8002f66:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002f68:	e061      	b.n	800302e <StartDefaultTask+0x81e>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002f6a:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002f6e:	2228      	movs	r2, #40	; 0x28
 8002f70:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002f72:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002f7c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002f80:	f103 0308 	add.w	r3, r3, #8
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4413      	add	r3, r2
 8002f88:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2301      	movs	r3, #1
 8002f90:	2007      	movs	r0, #7
 8002f92:	f7ff fa91 	bl	80024b8 <commandRespond1>
 8002f96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002f9a:	f103 030c 	add.w	r3, r3, #12
 8002f9e:	6018      	str	r0, [r3, #0]
										total_respond_length += respond_lenght;
 8002fa0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002fa4:	f103 0308 	add.w	r3, r3, #8
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002fae:	f103 030c 	add.w	r3, r3, #12
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002fba:	f102 0208 	add.w	r2, r2, #8
 8002fbe:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002fc0:	f240 118f 	movw	r1, #399	; 0x18f
 8002fc4:	486c      	ldr	r0, [pc, #432]	; (8003178 <StartDefaultTask+0x968>)
 8002fc6:	f7ff fadf 	bl	8002588 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002fca:	e030      	b.n	800302e <StartDefaultTask+0x81e>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002fcc:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8002fd0:	2227      	movs	r2, #39	; 0x27
 8002fd2:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002fd4:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8002fd8:	6899      	ldr	r1, [r3, #8]
 8002fda:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8002fde:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002fe2:	f103 0308 	add.w	r3, r3, #8
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	2007      	movs	r0, #7
 8002ff4:	f7ff fa60 	bl	80024b8 <commandRespond1>
 8002ff8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002ffc:	f103 030c 	add.w	r3, r3, #12
 8003000:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8003002:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003006:	f103 0308 	add.w	r3, r3, #8
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003010:	f103 030c 	add.w	r3, r3, #12
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4413      	add	r3, r2
 8003018:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800301c:	f102 0208 	add.w	r2, r2, #8
 8003020:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8003022:	f240 1195 	movw	r1, #405	; 0x195
 8003026:	4855      	ldr	r0, [pc, #340]	; (800317c <StartDefaultTask+0x96c>)
 8003028:	f7ff faae 	bl	8002588 <LOG_REPORT>
								  }
							  }
							  break;
 800302c:	e006      	b.n	800303c <StartDefaultTask+0x82c>
 800302e:	e005      	b.n	800303c <StartDefaultTask+0x82c>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8003030:	f240 119b 	movw	r1, #411	; 0x19b
 8003034:	4852      	ldr	r0, [pc, #328]	; (8003180 <StartDefaultTask+0x970>)
 8003036:	f7ff faa7 	bl	8002588 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 800303a:	e1b5      	b.n	80033a8 <StartDefaultTask+0xb98>
 800303c:	e1b4      	b.n	80033a8 <StartDefaultTask+0xb98>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 800303e:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8003046:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 800304a:	2200      	movs	r2, #0
 800304c:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 800304e:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8003052:	2200      	movs	r2, #0
 8003054:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8003056:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 800305a:	2200      	movs	r2, #0
 800305c:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 800305e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003062:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003066:	2b07      	cmp	r3, #7
 8003068:	f200 80a0 	bhi.w	80031ac <StartDefaultTask+0x99c>
 800306c:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <StartDefaultTask+0x864>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	08003095 	.word	0x08003095
 8003078:	080030b1 	.word	0x080030b1
 800307c:	080030d5 	.word	0x080030d5
 8003080:	080030f1 	.word	0x080030f1
 8003084:	08003115 	.word	0x08003115
 8003088:	08003131 	.word	0x08003131
 800308c:	08003155 	.word	0x08003155
 8003090:	08003189 	.word	0x08003189
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8003094:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003098:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b38      	ldr	r3, [pc, #224]	; (8003184 <StartDefaultTask+0x974>)
 80030a4:	f993 1000 	ldrsb.w	r1, [r3]
 80030a8:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 80030ac:	5499      	strb	r1, [r3, r2]
						  break;
 80030ae:	e07e      	b.n	80031ae <StartDefaultTask+0x99e>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 80030b0:	4b34      	ldr	r3, [pc, #208]	; (8003184 <StartDefaultTask+0x974>)
 80030b2:	f993 3000 	ldrsb.w	r3, [r3]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	425b      	negs	r3, r3
 80030ba:	b2d9      	uxtb	r1, r3
 80030bc:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80030c0:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	b249      	sxtb	r1, r1
 80030cc:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 80030d0:	5499      	strb	r1, [r3, r2]
						  break;
 80030d2:	e06c      	b.n	80031ae <StartDefaultTask+0x99e>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 80030d4:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80030d8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b28      	ldr	r3, [pc, #160]	; (8003184 <StartDefaultTask+0x974>)
 80030e4:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80030e8:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 80030ec:	5499      	strb	r1, [r3, r2]
						  break;
 80030ee:	e05e      	b.n	80031ae <StartDefaultTask+0x99e>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <StartDefaultTask+0x974>)
 80030f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	425b      	negs	r3, r3
 80030fa:	b2d9      	uxtb	r1, r3
 80030fc:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003100:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	b249      	sxtb	r1, r1
 800310c:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8003110:	5499      	strb	r1, [r3, r2]
						  break;
 8003112:	e04c      	b.n	80031ae <StartDefaultTask+0x99e>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8003114:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003118:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <StartDefaultTask+0x974>)
 8003124:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003128:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 800312c:	5499      	strb	r1, [r3, r2]
						  break;
 800312e:	e03e      	b.n	80031ae <StartDefaultTask+0x99e>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <StartDefaultTask+0x974>)
 8003132:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	425b      	negs	r3, r3
 800313a:	b2d9      	uxtb	r1, r3
 800313c:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003140:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	b249      	sxtb	r1, r1
 800314c:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8003150:	5499      	strb	r1, [r3, r2]
						  break;
 8003152:	e02c      	b.n	80031ae <StartDefaultTask+0x99e>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8003154:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003158:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <StartDefaultTask+0x974>)
 8003164:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003168:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 800316c:	5499      	strb	r1, [r3, r2]
						  break;
 800316e:	e01e      	b.n	80031ae <StartDefaultTask+0x99e>
 8003170:	0801c5c4 	.word	0x0801c5c4
 8003174:	0801c5d4 	.word	0x0801c5d4
 8003178:	0801c5e4 	.word	0x0801c5e4
 800317c:	0801c5f8 	.word	0x0801c5f8
 8003180:	0801c608 	.word	0x0801c608
 8003184:	20000000 	.word	0x20000000
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8003188:	4bc8      	ldr	r3, [pc, #800]	; (80034ac <StartDefaultTask+0xc9c>)
 800318a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	425b      	negs	r3, r3
 8003192:	b2d9      	uxtb	r1, r3
 8003194:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003198:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	b249      	sxtb	r1, r1
 80031a4:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 80031a8:	5499      	strb	r1, [r3, r2]
						  break;						  
 80031aa:	e000      	b.n	80031ae <StartDefaultTask+0x99e>
						  default:
							  break;
 80031ac:	bf00      	nop
						  }
					  }
					  break;
 80031ae:	e0fb      	b.n	80033a8 <StartDefaultTask+0xb98>
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 80031b0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80031b4:	f103 0305 	add.w	r3, r3, #5
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d120      	bne.n	8003200 <StartDefaultTask+0x9f0>
 80031be:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b14      	cmp	r3, #20
 80031c6:	d11b      	bne.n	8003200 <StartDefaultTask+0x9f0>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 80031c8:	4bb9      	ldr	r3, [pc, #740]	; (80034b0 <StartDefaultTask+0xca0>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d106      	bne.n	80031de <StartDefaultTask+0x9ce>
				  				run_point = 1;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80031d6:	f102 021c 	add.w	r2, r2, #28
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	e009      	b.n	80031f2 <StartDefaultTask+0x9e2>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80031de:	4bb4      	ldr	r3, [pc, #720]	; (80034b0 <StartDefaultTask+0xca0>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	d105      	bne.n	80031f2 <StartDefaultTask+0x9e2>
				  				run_point = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80031ec:	f102 021c 	add.w	r2, r2, #28
 80031f0:	6013      	str	r3, [r2, #0]
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80031f2:	2304      	movs	r3, #4
 80031f4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80031f8:	f102 0205 	add.w	r2, r2, #5
 80031fc:	7013      	strb	r3, [r2, #0]
 80031fe:	e031      	b.n	8003264 <StartDefaultTask+0xa54>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8003200:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003204:	f103 0305 	add.w	r3, r3, #5
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d111      	bne.n	8003232 <StartDefaultTask+0xa22>
 800320e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b13      	cmp	r3, #19
 8003216:	d10c      	bne.n	8003232 <StartDefaultTask+0xa22>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8003218:	48a6      	ldr	r0, [pc, #664]	; (80034b4 <StartDefaultTask+0xca4>)
 800321a:	f003 f8b9 	bl	8006390 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 800321e:	48a5      	ldr	r0, [pc, #660]	; (80034b4 <StartDefaultTask+0xca4>)
 8003220:	f002 f97a 	bl	8005518 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8003224:	2301      	movs	r3, #1
 8003226:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800322a:	f102 0205 	add.w	r2, r2, #5
 800322e:	7013      	strb	r3, [r2, #0]
 8003230:	e018      	b.n	8003264 <StartDefaultTask+0xa54>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8003232:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b0e      	cmp	r3, #14
 800323a:	d106      	bne.n	800324a <StartDefaultTask+0xa3a>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 800323c:	2300      	movs	r3, #0
 800323e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003242:	f102 0205 	add.w	r2, r2, #5
 8003246:	7013      	strb	r3, [r2, #0]
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8003248:	e0ad      	b.n	80033a6 <StartDefaultTask+0xb96>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 800324a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b0f      	cmp	r3, #15
 8003252:	f040 80a8 	bne.w	80033a6 <StartDefaultTask+0xb96>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8003256:	2301      	movs	r3, #1
 8003258:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800325c:	f102 0205 	add.w	r2, r2, #5
 8003260:	7013      	strb	r3, [r2, #0]
				  	  break;
 8003262:	e0a0      	b.n	80033a6 <StartDefaultTask+0xb96>
 8003264:	e09f      	b.n	80033a6 <StartDefaultTask+0xb96>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003266:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800326a:	f103 030d 	add.w	r3, r3, #13
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003274:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	18d0      	adds	r0, r2, r3
 800327e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003282:	3328      	adds	r3, #40	; 0x28
 8003284:	22c0      	movs	r2, #192	; 0xc0
 8003286:	4619      	mov	r1, r3
 8003288:	f012 fffa 	bl	8016280 <memcpy>
				  		  //Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
				  		  Object[object_head_pointer].timer_value = duty_cmd.target_point.packet_time_stamp;
 800328c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003290:	f103 030d 	add.w	r3, r3, #13
 8003294:	7819      	ldrb	r1, [r3, #0]
 8003296:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800329a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800329e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80032a2:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80032a6:	fb06 f101 	mul.w	r1, r6, r1
 80032aa:	4401      	add	r1, r0
 80032ac:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80032b0:	e9c1 2300 	strd	r2, r3, [r1]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 80032b4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80032b8:	f103 030d 	add.w	r3, r3, #13
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	425a      	negs	r2, r3
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	f002 0207 	and.w	r2, r2, #7
 80032ca:	bf58      	it	pl
 80032cc:	4253      	negpl	r3, r2
 80032ce:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80032d2:	f102 020d 	add.w	r2, r2, #13
 80032d6:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 80032d8:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 80032dc:	2222      	movs	r2, #34	; 0x22
 80032de:	701a      	strb	r2, [r3, #0]
				  		  detail_array[1] = duty_cmd.target_point.object_type;
 80032e0:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80032e4:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
 80032e8:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 80032ec:	705a      	strb	r2, [r3, #1]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 2, &respond[total_respond_length]);
 80032ee:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80032f2:	6899      	ldr	r1, [r3, #8]
 80032f4:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 80032f8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80032fc:	f103 0308 	add.w	r3, r3, #8
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4413      	add	r3, r2
 8003304:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2302      	movs	r3, #2
 800330c:	2008      	movs	r0, #8
 800330e:	f7ff f8d3 	bl	80024b8 <commandRespond1>
 8003312:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003316:	f103 030c 	add.w	r3, r3, #12
 800331a:	6018      	str	r0, [r3, #0]
						  total_respond_length += respond_lenght;
 800331c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003320:	f103 0308 	add.w	r3, r3, #8
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800332a:	f103 030c 	add.w	r3, r3, #12
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4413      	add	r3, r2
 8003332:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003336:	f102 0208 	add.w	r2, r2, #8
 800333a:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 800333c:	e034      	b.n	80033a8 <StartDefaultTask+0xb98>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 800333e:	f240 11e7 	movw	r1, #487	; 0x1e7
 8003342:	485d      	ldr	r0, [pc, #372]	; (80034b8 <StartDefaultTask+0xca8>)
 8003344:	f7ff f920 	bl	8002588 <LOG_REPORT>
 8003348:	e02e      	b.n	80033a8 <StartDefaultTask+0xb98>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 800334a:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 800334e:	2229      	movs	r2, #41	; 0x29
 8003350:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003352:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 800335c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003360:	f103 0308 	add.w	r3, r3, #8
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2301      	movs	r3, #1
 8003370:	2007      	movs	r0, #7
 8003372:	f7ff f8a1 	bl	80024b8 <commandRespond1>
 8003376:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800337a:	f103 030c 	add.w	r3, r3, #12
 800337e:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8003380:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003384:	f103 0308 	add.w	r3, r3, #8
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800338e:	f103 030c 	add.w	r3, r3, #12
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4413      	add	r3, r2
 8003396:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800339a:	f102 0208 	add.w	r2, r2, #8
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e002      	b.n	80033a8 <StartDefaultTask+0xb98>
				  	  break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <StartDefaultTask+0xb98>
				  	  break;
 80033a6:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80033ae:	f102 020f 	add.w	r2, r2, #15
 80033b2:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80033b4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80033b8:	f103 0307 	add.w	r3, r3, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	f201 8237 	bhi.w	8004832 <StartDefaultTask+0x2022>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <StartDefaultTask+0xbbc>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033e1 	.word	0x080033e1
 80033d0:	08003633 	.word	0x08003633
 80033d4:	08003ba3 	.word	0x08003ba3
 80033d8:	08003f69 	.word	0x08003f69
 80033dc:	08003fb5 	.word	0x08003fb5
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 80033e0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80033e4:	f103 0303 	add.w	r3, r3, #3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	f201 821e 	bhi.w	800482c <StartDefaultTask+0x201c>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <StartDefaultTask+0xbe8>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800362d 	.word	0x0800362d
 80033fc:	08003409 	.word	0x08003409
 8003400:	080034c1 	.word	0x080034c1
 8003404:	080035e9 	.word	0x080035e9
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8003408:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <StartDefaultTask+0xcac>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003410:	f103 0302 	add.w	r3, r3, #2
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f007 fc19 	bl	800ac50 <scaraKeyInit1>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d13b      	bne.n	800349c <StartDefaultTask+0xc8c>
				  run_time = 0;
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003430:	f101 0110 	add.w	r1, r1, #16
 8003434:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8003438:	2302      	movs	r3, #2
 800343a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800343e:	f102 0203 	add.w	r2, r2, #3
 8003442:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 8003444:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003448:	222a      	movs	r2, #42	; 0x2a
 800344a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800344c:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003456:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800345a:	f103 0308 	add.w	r3, r3, #8
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4413      	add	r3, r2
 8003462:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2301      	movs	r3, #1
 800346a:	2003      	movs	r0, #3
 800346c:	f7ff f824 	bl	80024b8 <commandRespond1>
 8003470:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003474:	f103 030c 	add.w	r3, r3, #12
 8003478:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 800347a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800347e:	f103 0308 	add.w	r3, r3, #8
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003488:	f103 030c 	add.w	r3, r3, #12
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003494:	f102 0208 	add.w	r2, r2, #8
 8003498:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 800349a:	e0c8      	b.n	800362e <StartDefaultTask+0xe1e>
				  current_key_state = SCARA_KEY_STATE_READY;
 800349c:	2300      	movs	r3, #0
 800349e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80034a2:	f102 0203 	add.w	r2, r2, #3
 80034a6:	7013      	strb	r3, [r2, #0]
		  break;
 80034a8:	e0c1      	b.n	800362e <StartDefaultTask+0xe1e>
 80034aa:	bf00      	nop
 80034ac:	20000000 	.word	0x20000000
 80034b0:	200085d0 	.word	0x200085d0
 80034b4:	20010b00 	.word	0x20010b00
 80034b8:	0801c61c 	.word	0x0801c61c
 80034bc:	20000060 	.word	0x20000060
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80034c0:	a3b7      	add	r3, pc, #732	; (adr r3, 80037a0 <StartDefaultTask+0xf90>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80034ca:	f101 0110 	add.w	r1, r1, #16
 80034ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034d2:	f7fc fedb 	bl	800028c <__adddf3>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80034de:	f101 0110 	add.w	r1, r1, #16
 80034e2:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80034e6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80034ea:	f103 0310 	add.w	r3, r3, #16
 80034ee:	ed93 0b00 	vldr	d0, [r3]
 80034f2:	f007 faa3 	bl	800aa3c <scaraIsFinish>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d006      	beq.n	800350a <StartDefaultTask+0xcfa>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 80034fc:	2303      	movs	r3, #3
 80034fe:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003502:	f102 0203 	add.w	r2, r2, #3
 8003506:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8003508:	e091      	b.n	800362e <StartDefaultTask+0xe1e>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 800350a:	4ea1      	ldr	r6, [pc, #644]	; (8003790 <StartDefaultTask+0xf80>)
 800350c:	4668      	mov	r0, sp
 800350e:	f106 0308 	add.w	r3, r6, #8
 8003512:	22b8      	movs	r2, #184	; 0xb8
 8003514:	4619      	mov	r1, r3
 8003516:	f012 feb3 	bl	8016280 <memcpy>
 800351a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800351e:	489d      	ldr	r0, [pc, #628]	; (8003794 <StartDefaultTask+0xf84>)
 8003520:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003524:	f101 0110 	add.w	r1, r1, #16
 8003528:	ed91 0b00 	vldr	d0, [r1]
 800352c:	f006 fc30 	bl	8009d90 <scaraFlowDuty>
 8003530:	4603      	mov	r3, r0
 8003532:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003536:	f102 0211 	add.w	r2, r2, #17
 800353a:	7013      	strb	r3, [r2, #0]
				  if ( SCARA_STATUS_OK == status) {
 800353c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003540:	f103 0311 	add.w	r3, r3, #17
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d113      	bne.n	8003572 <StartDefaultTask+0xd62>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800354a:	4e91      	ldr	r6, [pc, #580]	; (8003790 <StartDefaultTask+0xf80>)
 800354c:	4a91      	ldr	r2, [pc, #580]	; (8003794 <StartDefaultTask+0xf84>)
 800354e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003550:	4611      	mov	r1, r2
 8003552:	22c0      	movs	r2, #192	; 0xc0
 8003554:	4618      	mov	r0, r3
 8003556:	f012 fe93 	bl	8016280 <memcpy>
 800355a:	4668      	mov	r0, sp
 800355c:	f106 0310 	add.w	r3, r6, #16
 8003560:	22b0      	movs	r2, #176	; 0xb0
 8003562:	4619      	mov	r1, r3
 8003564:	f012 fe8c 	bl	8016280 <memcpy>
 8003568:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800356c:	f003 f8a0 	bl	80066b0 <lowlayer_computeAndWritePulse>
		  break;
 8003570:	e05d      	b.n	800362e <StartDefaultTask+0xe1e>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8003572:	2303      	movs	r3, #3
 8003574:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003578:	f102 0203 	add.w	r2, r2, #3
 800357c:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 800357e:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003582:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003586:	f102 0211 	add.w	r2, r2, #17
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800358e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003598:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800359c:	f103 0308 	add.w	r3, r3, #8
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2301      	movs	r3, #1
 80035ac:	2006      	movs	r0, #6
 80035ae:	f7fe ff83 	bl	80024b8 <commandRespond1>
 80035b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80035b6:	f103 030c 	add.w	r3, r3, #12
 80035ba:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80035bc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80035c0:	f103 0308 	add.w	r3, r3, #8
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80035ca:	f103 030c 	add.w	r3, r3, #12
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80035d6:	f102 0208 	add.w	r2, r2, #8
 80035da:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 80035dc:	f240 211b 	movw	r1, #539	; 0x21b
 80035e0:	486d      	ldr	r0, [pc, #436]	; (8003798 <StartDefaultTask+0xf88>)
 80035e2:	f7fe ffd1 	bl	8002588 <LOG_REPORT>
		  break;
 80035e6:	e022      	b.n	800362e <StartDefaultTask+0xe1e>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 80035e8:	486a      	ldr	r0, [pc, #424]	; (8003794 <StartDefaultTask+0xf84>)
 80035ea:	f002 fed1 	bl	8006390 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 80035ee:	4869      	ldr	r0, [pc, #420]	; (8003794 <StartDefaultTask+0xf84>)
 80035f0:	f001 ff92 	bl	8005518 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80035fa:	f102 0203 	add.w	r2, r2, #3
 80035fe:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 8003600:	4964      	ldr	r1, [pc, #400]	; (8003794 <StartDefaultTask+0xf84>)
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 800360e:	4961      	ldr	r1, [pc, #388]	; (8003794 <StartDefaultTask+0xf84>)
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 800361c:	495d      	ldr	r1, [pc, #372]	; (8003794 <StartDefaultTask+0xf84>)
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 800362a:	e000      	b.n	800362e <StartDefaultTask+0xe1e>
		  break;
 800362c:	bf00      	nop
		  }
	  }
	  break;
 800362e:	f001 b8fd 	b.w	800482c <StartDefaultTask+0x201c>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8003632:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003636:	f103 0306 	add.w	r3, r3, #6
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b02      	cmp	r3, #2
 800363e:	f000 8093 	beq.w	8003768 <StartDefaultTask+0xf58>
 8003642:	2b02      	cmp	r3, #2
 8003644:	f300 82a5 	bgt.w	8003b92 <StartDefaultTask+0x1382>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <StartDefaultTask+0xe42>
 800364c:	2b01      	cmp	r3, #1
 800364e:	d00d      	beq.n	800366c <StartDefaultTask+0xe5c>
 8003650:	e29f      	b.n	8003b92 <StartDefaultTask+0x1382>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8003652:	2302      	movs	r3, #2
 8003654:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003658:	f102 0206 	add.w	r2, r2, #6
 800365c:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800365e:	2300      	movs	r3, #0
 8003660:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003664:	f102 0205 	add.w	r2, r2, #5
 8003668:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 800366a:	e298      	b.n	8003b9e <StartDefaultTask+0x138e>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800366c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003670:	f103 0304 	add.w	r3, r3, #4
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d86c      	bhi.n	8003754 <StartDefaultTask+0xf44>
 800367a:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <StartDefaultTask+0xe70>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	08003691 	.word	0x08003691
 8003684:	080036a3 	.word	0x080036a3
 8003688:	080036bb 	.word	0x080036bb
 800368c:	080036d5 	.word	0x080036d5
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8003690:	f002 fc78 	bl	8005f84 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8003694:	2301      	movs	r3, #1
 8003696:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800369a:	f102 0204 	add.w	r2, r2, #4
 800369e:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 80036a0:	e061      	b.n	8003766 <StartDefaultTask+0xf56>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80036a2:	f002 fca1 	bl	8005fe8 <lowlayer_scanFlow>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d059      	beq.n	8003760 <StartDefaultTask+0xf50>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80036ac:	2302      	movs	r3, #2
 80036ae:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80036b2:	f102 0204 	add.w	r2, r2, #4
 80036b6:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 80036b8:	e052      	b.n	8003760 <StartDefaultTask+0xf50>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80036ba:	4836      	ldr	r0, [pc, #216]	; (8003794 <StartDefaultTask+0xf84>)
 80036bc:	f002 fdec 	bl	8006298 <lowlayer_goToSoftLimit>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d04e      	beq.n	8003764 <StartDefaultTask+0xf54>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80036c6:	2303      	movs	r3, #3
 80036c8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80036cc:	f102 0204 	add.w	r2, r2, #4
 80036d0:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 80036d2:	e047      	b.n	8003764 <StartDefaultTask+0xf54>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 80036d4:	482f      	ldr	r0, [pc, #188]	; (8003794 <StartDefaultTask+0xf84>)
 80036d6:	f002 fe5b 	bl	8006390 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80036da:	482e      	ldr	r0, [pc, #184]	; (8003794 <StartDefaultTask+0xf84>)
 80036dc:	f001 ff1c 	bl	8005518 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 80036e0:	2302      	movs	r3, #2
 80036e2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80036e6:	f102 0206 	add.w	r2, r2, #6
 80036ea:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80036f2:	f102 0205 	add.w	r2, r2, #5
 80036f6:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 80036f8:	f007 f912 	bl	800a920 <scaraSetScanFlag>

						detail_array[0] = NONE;
 80036fc:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003700:	222a      	movs	r2, #42	; 0x2a
 8003702:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003704:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003708:	6899      	ldr	r1, [r3, #8]
 800370a:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 800370e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003712:	f103 0308 	add.w	r3, r3, #8
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4413      	add	r3, r2
 800371a:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2301      	movs	r3, #1
 8003722:	2005      	movs	r0, #5
 8003724:	f7fe fec8 	bl	80024b8 <commandRespond1>
 8003728:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800372c:	f103 030c 	add.w	r3, r3, #12
 8003730:	6018      	str	r0, [r3, #0]
						total_respond_length += respond_lenght;
 8003732:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003736:	f103 0308 	add.w	r3, r3, #8
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003740:	f103 030c 	add.w	r3, r3, #12
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800374c:	f102 0208 	add.w	r2, r2, #8
 8003750:	6013      	str	r3, [r2, #0]
					  }
					  break;
 8003752:	e008      	b.n	8003766 <StartDefaultTask+0xf56>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003754:	f240 215f 	movw	r1, #607	; 0x25f
 8003758:	4810      	ldr	r0, [pc, #64]	; (800379c <StartDefaultTask+0xf8c>)
 800375a:	f7fe ff15 	bl	8002588 <LOG_REPORT>
						  while(1);
 800375e:	e7fe      	b.n	800375e <StartDefaultTask+0xf4e>
					  break;
 8003760:	bf00      	nop
 8003762:	e21c      	b.n	8003b9e <StartDefaultTask+0x138e>
					  break;
 8003764:	bf00      	nop
					  }
				  }

			  }
			  break;
 8003766:	e21a      	b.n	8003b9e <StartDefaultTask+0x138e>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8003768:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800376c:	f103 0305 	add.w	r3, r3, #5
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b03      	cmp	r3, #3
 8003774:	f200 8205 	bhi.w	8003b82 <StartDefaultTask+0x1372>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <StartDefaultTask+0xf70>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	08003b8f 	.word	0x08003b8f
 8003784:	080037a9 	.word	0x080037a9
 8003788:	080039c1 	.word	0x080039c1
 800378c:	08003ae9 	.word	0x08003ae9
 8003790:	20010b00 	.word	0x20010b00
 8003794:	20010c80 	.word	0x20010c80
 8003798:	0801c634 	.word	0x0801c634
 800379c:	0801c640 	.word	0x0801c640
 80037a0:	40000000 	.word	0x40000000
 80037a4:	3f847ae1 	.word	0x3f847ae1

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80037a8:	f507 6666 	add.w	r6, r7, #3680	; 0xe60
 80037ac:	4668      	mov	r0, sp
 80037ae:	f106 0310 	add.w	r3, r6, #16
 80037b2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80037b6:	4619      	mov	r1, r3
 80037b8:	f012 fd62 	bl	8016280 <memcpy>
 80037bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80037c0:	f003 fb0e 	bl	8006de0 <scaraInitDuty>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037ca:	f102 0213 	add.w	r2, r2, #19
 80037ce:	7013      	strb	r3, [r2, #0]
						  if ( SCARA_STATUS_OK == status1) {
 80037d0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037d4:	f103 0313 	add.w	r3, r3, #19
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 80b5 	bne.w	800394a <StartDefaultTask+0x113a>
							  status2 = scaraTestDuty();
 80037e0:	f007 f822 	bl	800a828 <scaraTestDuty>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037ea:	f102 0212 	add.w	r2, r2, #18
 80037ee:	7013      	strb	r3, [r2, #0]
							  if (SCARA_STATUS_OK == status2) {
 80037f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037f4:	f103 0312 	add.w	r3, r3, #18
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d16a      	bne.n	80038d4 <StartDefaultTask+0x10c4>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80037fe:	2302      	movs	r3, #2
 8003800:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003804:	f102 0205 	add.w	r2, r2, #5
 8003808:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003816:	f101 0110 	add.w	r1, r1, #16
 800381a:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 800381e:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003822:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003826:	f102 0213 	add.w	r2, r2, #19
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800382e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003838:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800383c:	f103 0308 	add.w	r3, r3, #8
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4413      	add	r3, r2
 8003844:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2301      	movs	r3, #1
 800384c:	2008      	movs	r0, #8
 800384e:	f7fe fe33 	bl	80024b8 <commandRespond1>
 8003852:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003856:	f103 030c 	add.w	r3, r3, #12
 800385a:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 800385c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003860:	f103 0308 	add.w	r3, r3, #8
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800386a:	f103 030c 	add.w	r3, r3, #12
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4413      	add	r3, r2
 8003872:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003876:	f102 0208 	add.w	r2, r2, #8
 800387a:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 800387c:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003880:	222a      	movs	r2, #42	; 0x2a
 8003882:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003884:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 800388e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003892:	f103 0308 	add.w	r3, r3, #8
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4413      	add	r3, r2
 800389a:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2301      	movs	r3, #1
 80038a2:	2003      	movs	r0, #3
 80038a4:	f7fe fe08 	bl	80024b8 <commandRespond1>
 80038a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80038ac:	f103 030c 	add.w	r3, r3, #12
 80038b0:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 80038b2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80038b6:	f103 0308 	add.w	r3, r3, #8
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80038c0:	f103 030c 	add.w	r3, r3, #12
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80038cc:	f102 0208 	add.w	r2, r2, #8
 80038d0:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 80038d2:	e15d      	b.n	8003b90 <StartDefaultTask+0x1380>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80038da:	f102 0205 	add.w	r2, r2, #5
 80038de:	7013      	strb	r3, [r2, #0]
								  LOG_REPORT("TEST FAIL", __LINE__);
 80038e0:	f240 2187 	movw	r1, #647	; 0x287
 80038e4:	48bc      	ldr	r0, [pc, #752]	; (8003bd8 <StartDefaultTask+0x13c8>)
 80038e6:	f7fe fe4f 	bl	8002588 <LOG_REPORT>
								detail_array[0] = status2;
 80038ea:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 80038ee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80038f2:	f102 0212 	add.w	r2, r2, #18
 80038f6:	7812      	ldrb	r2, [r2, #0]
 80038f8:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80038fa:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80038fe:	6899      	ldr	r1, [r3, #8]
 8003900:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003904:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003908:	f103 0308 	add.w	r3, r3, #8
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4413      	add	r3, r2
 8003910:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2301      	movs	r3, #1
 8003918:	2007      	movs	r0, #7
 800391a:	f7fe fdcd 	bl	80024b8 <commandRespond1>
 800391e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003922:	f103 030c 	add.w	r3, r3, #12
 8003926:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8003928:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800392c:	f103 0308 	add.w	r3, r3, #8
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003936:	f103 030c 	add.w	r3, r3, #12
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4413      	add	r3, r2
 800393e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003942:	f102 0208 	add.w	r2, r2, #8
 8003946:	6013      	str	r3, [r2, #0]
				  break;
 8003948:	e122      	b.n	8003b90 <StartDefaultTask+0x1380>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 800394a:	2300      	movs	r3, #0
 800394c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003950:	f102 0205 	add.w	r2, r2, #5
 8003954:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 8003956:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 800395a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800395e:	f102 0213 	add.w	r2, r2, #19
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003966:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003970:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003974:	f103 0308 	add.w	r3, r3, #8
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4413      	add	r3, r2
 800397c:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2301      	movs	r3, #1
 8003984:	2007      	movs	r0, #7
 8003986:	f7fe fd97 	bl	80024b8 <commandRespond1>
 800398a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800398e:	f103 030c 	add.w	r3, r3, #12
 8003992:	6018      	str	r0, [r3, #0]
							total_respond_length += respond_lenght;
 8003994:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003998:	f103 0308 	add.w	r3, r3, #8
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80039a2:	f103 030c 	add.w	r3, r3, #12
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4413      	add	r3, r2
 80039aa:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80039ae:	f102 0208 	add.w	r2, r2, #8
 80039b2:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 80039b4:	f240 2192 	movw	r1, #658	; 0x292
 80039b8:	4888      	ldr	r0, [pc, #544]	; (8003bdc <StartDefaultTask+0x13cc>)
 80039ba:	f7fe fde5 	bl	8002588 <LOG_REPORT>
				  break;
 80039be:	e0e7      	b.n	8003b90 <StartDefaultTask+0x1380>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80039c0:	a383      	add	r3, pc, #524	; (adr r3, 8003bd0 <StartDefaultTask+0x13c0>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80039ca:	f101 0110 	add.w	r1, r1, #16
 80039ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039d2:	f7fc fc5b 	bl	800028c <__adddf3>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80039de:	f101 0110 	add.w	r1, r1, #16
 80039e2:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80039e6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80039ea:	f103 0310 	add.w	r3, r3, #16
 80039ee:	ed93 0b00 	vldr	d0, [r3]
 80039f2:	f007 f823 	bl	800aa3c <scaraIsFinish>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d006      	beq.n	8003a0a <StartDefaultTask+0x11fa>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80039fc:	2303      	movs	r3, #3
 80039fe:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003a02:	f102 0205 	add.w	r2, r2, #5
 8003a06:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8003a08:	e0c2      	b.n	8003b90 <StartDefaultTask+0x1380>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003a0a:	4e75      	ldr	r6, [pc, #468]	; (8003be0 <StartDefaultTask+0x13d0>)
 8003a0c:	4668      	mov	r0, sp
 8003a0e:	f106 0308 	add.w	r3, r6, #8
 8003a12:	22b8      	movs	r2, #184	; 0xb8
 8003a14:	4619      	mov	r1, r3
 8003a16:	f012 fc33 	bl	8016280 <memcpy>
 8003a1a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003a1e:	4871      	ldr	r0, [pc, #452]	; (8003be4 <StartDefaultTask+0x13d4>)
 8003a20:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003a24:	f101 0110 	add.w	r1, r1, #16
 8003a28:	ed91 0b00 	vldr	d0, [r1]
 8003a2c:	f006 f9b0 	bl	8009d90 <scaraFlowDuty>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a36:	f102 0214 	add.w	r2, r2, #20
 8003a3a:	7013      	strb	r3, [r2, #0]
							  if ( SCARA_STATUS_OK == status) {
 8003a3c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003a40:	f103 0314 	add.w	r3, r3, #20
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d113      	bne.n	8003a72 <StartDefaultTask+0x1262>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003a4a:	4e65      	ldr	r6, [pc, #404]	; (8003be0 <StartDefaultTask+0x13d0>)
 8003a4c:	4a65      	ldr	r2, [pc, #404]	; (8003be4 <StartDefaultTask+0x13d4>)
 8003a4e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003a50:	4611      	mov	r1, r2
 8003a52:	22c0      	movs	r2, #192	; 0xc0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f012 fc13 	bl	8016280 <memcpy>
 8003a5a:	4668      	mov	r0, sp
 8003a5c:	f106 0310 	add.w	r3, r6, #16
 8003a60:	22b0      	movs	r2, #176	; 0xb0
 8003a62:	4619      	mov	r1, r3
 8003a64:	f012 fc0c 	bl	8016280 <memcpy>
 8003a68:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003a6c:	f002 fe20 	bl	80066b0 <lowlayer_computeAndWritePulse>
				  break;
 8003a70:	e08e      	b.n	8003b90 <StartDefaultTask+0x1380>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003a72:	2303      	movs	r3, #3
 8003a74:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003a78:	f102 0205 	add.w	r2, r2, #5
 8003a7c:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 8003a7e:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003a82:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a86:	f102 0214 	add.w	r2, r2, #20
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a8e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003a98:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003a9c:	f103 0308 	add.w	r3, r3, #8
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	2006      	movs	r0, #6
 8003aae:	f7fe fd03 	bl	80024b8 <commandRespond1>
 8003ab2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003ab6:	f103 030c 	add.w	r3, r3, #12
 8003aba:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8003abc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003ac0:	f103 0308 	add.w	r3, r3, #8
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003aca:	f103 030c 	add.w	r3, r3, #12
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003ad6:	f102 0208 	add.w	r2, r2, #8
 8003ada:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 8003adc:	f240 21aa 	movw	r1, #682	; 0x2aa
 8003ae0:	4841      	ldr	r0, [pc, #260]	; (8003be8 <StartDefaultTask+0x13d8>)
 8003ae2:	f7fe fd51 	bl	8002588 <LOG_REPORT>
				  break;
 8003ae6:	e053      	b.n	8003b90 <StartDefaultTask+0x1380>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8003ae8:	483e      	ldr	r0, [pc, #248]	; (8003be4 <StartDefaultTask+0x13d4>)
 8003aea:	f002 fc51 	bl	8006390 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003aee:	483d      	ldr	r0, [pc, #244]	; (8003be4 <StartDefaultTask+0x13d4>)
 8003af0:	f001 fd12 	bl	8005518 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003afa:	f102 0205 	add.w	r2, r2, #5
 8003afe:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 8003b00:	4938      	ldr	r1, [pc, #224]	; (8003be4 <StartDefaultTask+0x13d4>)
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 8003b0e:	4935      	ldr	r1, [pc, #212]	; (8003be4 <StartDefaultTask+0x13d4>)
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 8003b1c:	4931      	ldr	r1, [pc, #196]	; (8003be4 <StartDefaultTask+0x13d4>)
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 8003b2a:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003b2e:	222a      	movs	r2, #42	; 0x2a
 8003b30:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003b32:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003b36:	6899      	ldr	r1, [r3, #8]
 8003b38:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003b3c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003b40:	f103 0308 	add.w	r3, r3, #8
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4413      	add	r3, r2
 8003b48:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2301      	movs	r3, #1
 8003b50:	2005      	movs	r0, #5
 8003b52:	f7fe fcb1 	bl	80024b8 <commandRespond1>
 8003b56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003b5a:	f103 030c 	add.w	r3, r3, #12
 8003b5e:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8003b60:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003b64:	f103 0308 	add.w	r3, r3, #8
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003b6e:	f103 030c 	add.w	r3, r3, #12
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003b7a:	f102 0208 	add.w	r2, r2, #8
 8003b7e:	6013      	str	r3, [r2, #0]
					  }
				  break;
 8003b80:	e006      	b.n	8003b90 <StartDefaultTask+0x1380>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003b82:	f240 21c2 	movw	r1, #706	; 0x2c2
 8003b86:	4819      	ldr	r0, [pc, #100]	; (8003bec <StartDefaultTask+0x13dc>)
 8003b88:	f7fe fcfe 	bl	8002588 <LOG_REPORT>
						  while(1);
 8003b8c:	e7fe      	b.n	8003b8c <StartDefaultTask+0x137c>
				  break;
 8003b8e:	bf00      	nop
					  }
				  }

			  }
			  break;
 8003b90:	e005      	b.n	8003b9e <StartDefaultTask+0x138e>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003b92:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8003b96:	4816      	ldr	r0, [pc, #88]	; (8003bf0 <StartDefaultTask+0x13e0>)
 8003b98:	f7fe fcf6 	bl	8002588 <LOG_REPORT>
				  while(1);
 8003b9c:	e7fe      	b.n	8003b9c <StartDefaultTask+0x138c>
			  }
		  }
	  }
	  break;
 8003b9e:	f000 be48 	b.w	8004832 <StartDefaultTask+0x2022>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003ba2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003ba6:	f103 0305 	add.w	r3, r3, #5
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	f200 81d8 	bhi.w	8003f62 <StartDefaultTask+0x1752>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <StartDefaultTask+0x13a8>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003f63 	.word	0x08003f63
 8003bbc:	08003f63 	.word	0x08003f63
 8003bc0:	08003d8b 	.word	0x08003d8b
 8003bc4:	08003f63 	.word	0x08003f63
 8003bc8:	08003bf5 	.word	0x08003bf5
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	40000000 	.word	0x40000000
 8003bd4:	3f847ae1 	.word	0x3f847ae1
 8003bd8:	0801c650 	.word	0x0801c650
 8003bdc:	0801c65c 	.word	0x0801c65c
 8003be0:	20010b00 	.word	0x20010b00
 8003be4:	20010c80 	.word	0x20010c80
 8003be8:	0801c668 	.word	0x0801c668
 8003bec:	0801c640 	.word	0x0801c640
 8003bf0:	0801c674 	.word	0x0801c674
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, run_point);
 8003bf4:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003bf8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003bfc:	f102 021c 	add.w	r2, r2, #28
 8003c00:	6811      	ldr	r1, [r2, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 f86c 	bl	8004ce0 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 8003c08:	f507 6666 	add.w	r6, r7, #3680	; 0xe60
 8003c0c:	4668      	mov	r0, sp
 8003c0e:	f106 0310 	add.w	r3, r6, #16
 8003c12:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003c16:	4619      	mov	r1, r3
 8003c18:	f012 fb32 	bl	8016280 <memcpy>
 8003c1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003c20:	f003 f8de 	bl	8006de0 <scaraInitDuty>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003c2a:	f102 0216 	add.w	r2, r2, #22
 8003c2e:	7013      	strb	r3, [r2, #0]
			  if(status == SCARA_STATUS_OK){
 8003c30:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003c34:	f103 0316 	add.w	r3, r3, #22
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d16f      	bne.n	8003d1e <StartDefaultTask+0x150e>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR || duty_cmd.trajec_type == DUTY_TRAJECTORY_BEZIER_CURVE){
 8003c3e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003c42:	7c1b      	ldrb	r3, [r3, #16]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d004      	beq.n	8003c52 <StartDefaultTask+0x1442>
 8003c48:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003c4c:	7c1b      	ldrb	r3, [r3, #16]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d10a      	bne.n	8003c68 <StartDefaultTask+0x1458>
					  run_time = 0;
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003c5e:	f101 0110 	add.w	r1, r1, #16
 8003c62:	e9c1 2300 	strd	r2, r3, [r1]
 8003c66:	e00d      	b.n	8003c84 <StartDefaultTask+0x1474>
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 8003c68:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003c6c:	7c1b      	ldrb	r3, [r3, #16]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d108      	bne.n	8003c84 <StartDefaultTask+0x1474>
					  run_time = last_T;
 8003c72:	4bc9      	ldr	r3, [pc, #804]	; (8003f98 <StartDefaultTask+0x1788>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003c7c:	f101 0110 	add.w	r1, r1, #16
 8003c80:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003c84:	2302      	movs	r3, #2
 8003c86:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003c8a:	f102 0205 	add.w	r2, r2, #5
 8003c8e:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)((run_point+1) * 100.0f / total_num_of_point );
 8003c90:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003c94:	f103 031c 	add.w	r3, r3, #28
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	ee07 3a90 	vmov	s15, r3
 8003ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca4:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8003f9c <StartDefaultTask+0x178c>
 8003ca8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003cac:	4bbc      	ldr	r3, [pc, #752]	; (8003fa0 <StartDefaultTask+0x1790>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	ee07 3a90 	vmov	s15, r3
 8003cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc0:	edc7 7a01 	vstr	s15, [r7, #4]
 8003cc4:	793b      	ldrb	r3, [r7, #4]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003ccc:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003cce:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003cd2:	6899      	ldr	r1, [r3, #8]
 8003cd4:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003cd8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003cdc:	f103 0308 	add.w	r3, r3, #8
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	2301      	movs	r3, #1
 8003cec:	200b      	movs	r0, #11
 8003cee:	f7fe fbe3 	bl	80024b8 <commandRespond1>
 8003cf2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003cf6:	f103 030c 	add.w	r3, r3, #12
 8003cfa:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003cfc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003d00:	f103 0308 	add.w	r3, r3, #8
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d0a:	f103 030c 	add.w	r3, r3, #12
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003d16:	f102 0208 	add.w	r2, r2, #8
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	e035      	b.n	8003d8a <StartDefaultTask+0x157a>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003d24:	f102 0205 	add.w	r2, r2, #5
 8003d28:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 8003d2a:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003d2e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003d32:	f102 0216 	add.w	r2, r2, #22
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003d3a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003d3e:	6899      	ldr	r1, [r3, #8]
 8003d40:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003d44:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003d48:	f103 0308 	add.w	r3, r3, #8
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2301      	movs	r3, #1
 8003d58:	2007      	movs	r0, #7
 8003d5a:	f7fe fbad 	bl	80024b8 <commandRespond1>
 8003d5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d62:	f103 030c 	add.w	r3, r3, #12
 8003d66:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003d68:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003d6c:	f103 0308 	add.w	r3, r3, #8
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003d76:	f103 030c 	add.w	r3, r3, #12
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003d82:	f102 0208 	add.w	r2, r2, #8
 8003d86:	6013      	str	r3, [r2, #0]
				  break;
 8003d88:	e0ec      	b.n	8003f64 <StartDefaultTask+0x1754>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003d8a:	a381      	add	r3, pc, #516	; (adr r3, 8003f90 <StartDefaultTask+0x1780>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003d94:	f101 0110 	add.w	r1, r1, #16
 8003d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d9c:	f7fc fa76 	bl	800028c <__adddf3>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003da8:	f101 0110 	add.w	r1, r1, #16
 8003dac:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003db0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003db4:	f103 0310 	add.w	r3, r3, #16
 8003db8:	ed93 0b00 	vldr	d0, [r3]
 8003dbc:	f006 fe3e 	bl	800aa3c <scaraIsFinish>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d063      	beq.n	8003e8e <StartDefaultTask+0x167e>
				if(run_point >= total_num_of_point-1){
 8003dc6:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <StartDefaultTask+0x1790>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003dd0:	f102 021c 	add.w	r2, r2, #28
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	db0c      	blt.n	8003df4 <StartDefaultTask+0x15e4>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003de0:	f102 0205 	add.w	r2, r2, #5
 8003de4:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003de6:	486f      	ldr	r0, [pc, #444]	; (8003fa4 <StartDefaultTask+0x1794>)
 8003de8:	f002 fad2 	bl	8006390 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003dec:	486d      	ldr	r0, [pc, #436]	; (8003fa4 <StartDefaultTask+0x1794>)
 8003dee:	f001 fb93 	bl	8005518 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003df2:	e0b7      	b.n	8003f64 <StartDefaultTask+0x1754>
					if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8003df4:	4b6c      	ldr	r3, [pc, #432]	; (8003fa8 <StartDefaultTask+0x1798>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b09      	cmp	r3, #9
 8003dfa:	d11a      	bne.n	8003e32 <StartDefaultTask+0x1622>
						accumulate_update(Gcode_Cor[run_point++]);
 8003dfc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003e00:	f103 031c 	add.w	r3, r3, #28
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	1c53      	adds	r3, r2, #1
 8003e08:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8003e0c:	f101 011c 	add.w	r1, r1, #28
 8003e10:	600b      	str	r3, [r1, #0]
 8003e12:	4966      	ldr	r1, [pc, #408]	; (8003fac <StartDefaultTask+0x179c>)
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	466e      	mov	r6, sp
 8003e20:	f103 0210 	add.w	r2, r3, #16
 8003e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e26:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e2c:	f001 fa84 	bl	8005338 <accumulate_update>
 8003e30:	e00a      	b.n	8003e48 <StartDefaultTask+0x1638>
						run_point++;
 8003e32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003e36:	f103 031c 	add.w	r3, r3, #28
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003e42:	f102 021c 	add.w	r2, r2, #28
 8003e46:	6013      	str	r3, [r2, #0]
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003e48:	2304      	movs	r3, #4
 8003e4a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003e4e:	f102 0205 	add.w	r2, r2, #5
 8003e52:	7013      	strb	r3, [r2, #0]
					positionNext.x = duty_cmd.target_point.x;
 8003e54:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003e58:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003e5c:	4951      	ldr	r1, [pc, #324]	; (8003fa4 <StartDefaultTask+0x1794>)
 8003e5e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					positionNext.y = duty_cmd.target_point.y;
 8003e62:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003e66:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003e6a:	494e      	ldr	r1, [pc, #312]	; (8003fa4 <StartDefaultTask+0x1794>)
 8003e6c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					positionNext.z = duty_cmd.target_point.z;
 8003e70:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003e74:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003e78:	494a      	ldr	r1, [pc, #296]	; (8003fa4 <StartDefaultTask+0x1794>)
 8003e7a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
					positionNext.roll = duty_cmd.target_point.roll;
 8003e7e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003e82:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003e86:	4947      	ldr	r1, [pc, #284]	; (8003fa4 <StartDefaultTask+0x1794>)
 8003e88:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		  break;
 8003e8c:	e06a      	b.n	8003f64 <StartDefaultTask+0x1754>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003e8e:	4e48      	ldr	r6, [pc, #288]	; (8003fb0 <StartDefaultTask+0x17a0>)
 8003e90:	4668      	mov	r0, sp
 8003e92:	f106 0308 	add.w	r3, r6, #8
 8003e96:	22b8      	movs	r2, #184	; 0xb8
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f012 f9f1 	bl	8016280 <memcpy>
 8003e9e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003ea2:	4840      	ldr	r0, [pc, #256]	; (8003fa4 <StartDefaultTask+0x1794>)
 8003ea4:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8003ea8:	f101 0110 	add.w	r1, r1, #16
 8003eac:	ed91 0b00 	vldr	d0, [r1]
 8003eb0:	f005 ff6e 	bl	8009d90 <scaraFlowDuty>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003eba:	f102 0215 	add.w	r2, r2, #21
 8003ebe:	7013      	strb	r3, [r2, #0]
				if ( SCARA_STATUS_OK == status) {
 8003ec0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003ec4:	f103 0315 	add.w	r3, r3, #21
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d113      	bne.n	8003ef6 <StartDefaultTask+0x16e6>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003ece:	4e38      	ldr	r6, [pc, #224]	; (8003fb0 <StartDefaultTask+0x17a0>)
 8003ed0:	4a34      	ldr	r2, [pc, #208]	; (8003fa4 <StartDefaultTask+0x1794>)
 8003ed2:	ab2c      	add	r3, sp, #176	; 0xb0
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	22c0      	movs	r2, #192	; 0xc0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f012 f9d1 	bl	8016280 <memcpy>
 8003ede:	4668      	mov	r0, sp
 8003ee0:	f106 0310 	add.w	r3, r6, #16
 8003ee4:	22b0      	movs	r2, #176	; 0xb0
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f012 f9ca 	bl	8016280 <memcpy>
 8003eec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ef0:	f002 fbde 	bl	80066b0 <lowlayer_computeAndWritePulse>
		  break;
 8003ef4:	e036      	b.n	8003f64 <StartDefaultTask+0x1754>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003efc:	f102 0205 	add.w	r2, r2, #5
 8003f00:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003f02:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 8003f06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003f0a:	f102 0215 	add.w	r2, r2, #21
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003f12:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8003f1c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003f20:	f103 0308 	add.w	r3, r3, #8
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4413      	add	r3, r2
 8003f28:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	2007      	movs	r0, #7
 8003f32:	f7fe fac1 	bl	80024b8 <commandRespond1>
 8003f36:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003f3a:	f103 030c 	add.w	r3, r3, #12
 8003f3e:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 8003f40:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003f44:	f103 0308 	add.w	r3, r3, #8
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003f4e:	f103 030c 	add.w	r3, r3, #12
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4413      	add	r3, r2
 8003f56:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8003f5a:	f102 0208 	add.w	r2, r2, #8
 8003f5e:	6013      	str	r3, [r2, #0]
		  break;
 8003f60:	e000      	b.n	8003f64 <StartDefaultTask+0x1754>

		  }
		  break;
		  
		  default:
			  break;
 8003f62:	bf00      	nop
		  }
	  }

	  break;
 8003f64:	f000 bc65 	b.w	8004832 <StartDefaultTask+0x2022>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003f68:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8003f6c:	f993 0000 	ldrsb.w	r0, [r3]
 8003f70:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8003f74:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003f78:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8003f7c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003f80:	f607 635c 	addw	r3, r7, #3676	; 0xe5c
 8003f84:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003f88:	f002 fd3a 	bl	8006a00 <lowlayer_writePulse>
	  }
	  break;
 8003f8c:	f000 bc51 	b.w	8004832 <StartDefaultTask+0x2022>
 8003f90:	40000000 	.word	0x40000000
 8003f94:	3f847ae1 	.word	0x3f847ae1
 8003f98:	2000fd48 	.word	0x2000fd48
 8003f9c:	42c80000 	.word	0x42c80000
 8003fa0:	20008fb0 	.word	0x20008fb0
 8003fa4:	20010c80 	.word	0x20010c80
 8003fa8:	200085d0 	.word	0x200085d0
 8003fac:	20008fc8 	.word	0x20008fc8
 8003fb0:	20010b00 	.word	0x20010b00


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003fb4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003fb8:	f103 0305 	add.w	r3, r3, #5
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	f200 8435 	bhi.w	8004830 <StartDefaultTask+0x2020>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <StartDefaultTask+0x17bc>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08004685 	.word	0x08004685
 8003fd4:	08004821 	.word	0x08004821
 8003fd8:	0800402d 	.word	0x0800402d
		  case SCARA_DUTY_STATE_INIT:{
			  HAL_TIM_Base_Start(&htim2);
 8003fdc:	4894      	ldr	r0, [pc, #592]	; (8004230 <StartDefaultTask+0x1a20>)
 8003fde:	f00a f9ec 	bl	800e3ba <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003fe8:	f102 020e 	add.w	r2, r2, #14
 8003fec:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003ff4:	f102 020d 	add.w	r2, r2, #13
 8003ff8:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004000:	f102 020f 	add.w	r2, r2, #15
 8004004:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8004006:	2304      	movs	r3, #4
 8004008:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800400c:	f102 0205 	add.w	r2, r2, #5
 8004010:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8004012:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8004016:	2204      	movs	r2, #4
 8004018:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 800401a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800401e:	2200      	movs	r2, #0
 8004020:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8004022:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8004026:	2200      	movs	r2, #0
 8004028:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 800402a:	e3fe      	b.n	800482a <StartDefaultTask+0x201a>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 800402c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004030:	f103 030e 	add.w	r3, r3, #14
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800403a:	f103 030d 	add.w	r3, r3, #13
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	f000 83ef 	beq.w	8004824 <StartDefaultTask+0x2014>
				  switch(operation_state){
 8004046:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800404a:	f103 030f 	add.w	r3, r3, #15
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b07      	cmp	r3, #7
 8004052:	f200 8200 	bhi.w	8004456 <StartDefaultTask+0x1c46>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <StartDefaultTask+0x184c>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	0800407d 	.word	0x0800407d
 8004060:	080041ab 	.word	0x080041ab
 8004064:	080041df 	.word	0x080041df
 8004068:	080041f5 	.word	0x080041f5
 800406c:	0800425d 	.word	0x0800425d
 8004070:	080043d9 	.word	0x080043d9
 8004074:	0800440d 	.word	0x0800440d
 8004078:	08004423 	.word	0x08004423
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = 1e-6*((uint64_t)(GET_MICROS - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME;
 800407c:	4b6d      	ldr	r3, [pc, #436]	; (8004234 <StartDefaultTask+0x1a24>)
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <StartDefaultTask+0x1a28>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	496d      	ldr	r1, [pc, #436]	; (800423c <StartDefaultTask+0x1a2c>)
 8004086:	fba1 1303 	umull	r1, r3, r1, r3
 800408a:	0c9b      	lsrs	r3, r3, #18
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	4618      	mov	r0, r3
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800409a:	f103 030e 	add.w	r3, r3, #14
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80040a4:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80040a8:	fb06 f303 	mul.w	r3, r6, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	1a84      	subs	r4, r0, r2
 80040b8:	eb61 0503 	sbc.w	r5, r1, r3
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	f7fc fa64 	bl	800058c <__aeabi_ul2d>
 80040c4:	a358      	add	r3, pc, #352	; (adr r3, 8004228 <StartDefaultTask+0x1a18>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f7fc fa95 	bl	80005f8 <__aeabi_dmul>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	4b5a      	ldr	r3, [pc, #360]	; (8004240 <StartDefaultTask+0x1a30>)
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f7fc f8d6 	bl	800028c <__adddf3>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	4b56      	ldr	r3, [pc, #344]	; (8004244 <StartDefaultTask+0x1a34>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f7fc f8cd 	bl	800028c <__adddf3>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4b53      	ldr	r3, [pc, #332]	; (8004248 <StartDefaultTask+0x1a38>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc f8c4 	bl	800028c <__adddf3>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800410c:	f101 0118 	add.w	r1, r1, #24
 8004110:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8004114:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004118:	f103 030e 	add.w	r3, r3, #14
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8004122:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3350      	adds	r3, #80	; 0x50
 800412e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004132:	4b46      	ldr	r3, [pc, #280]	; (800424c <StartDefaultTask+0x1a3c>)
 8004134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004138:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800413c:	f103 0318 	add.w	r3, r3, #24
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f7fc fa58 	bl	80005f8 <__aeabi_dmul>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8004150:	f101 010e 	add.w	r1, r1, #14
 8004154:	780e      	ldrb	r6, [r1, #0]
 8004156:	4640      	mov	r0, r8
 8004158:	4649      	mov	r1, r9
 800415a:	f7fc f895 	bl	8000288 <__aeabi_dsub>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004166:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800416a:	fb01 f106 	mul.w	r1, r1, r6
 800416e:	4401      	add	r1, r0
 8004170:	3150      	adds	r1, #80	; 0x50
 8004172:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8004176:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800417a:	f103 030e 	add.w	r3, r3, #14
 800417e:	7819      	ldrb	r1, [r3, #0]
 8004180:	4b33      	ldr	r3, [pc, #204]	; (8004250 <StartDefaultTask+0x1a40>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800418a:	f44f 76c4 	mov.w	r6, #392	; 0x188
 800418e:	fb06 f101 	mul.w	r1, r6, r1
 8004192:	4401      	add	r1, r0
 8004194:	3158      	adds	r1, #88	; 0x58
 8004196:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 800419a:	4b29      	ldr	r3, [pc, #164]	; (8004240 <StartDefaultTask+0x1a30>)
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80041a4:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80041a8:	e155      	b.n	8004456 <StartDefaultTask+0x1c46>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 80041aa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80041ae:	f103 030e 	add.w	r3, r3, #14
 80041b2:	7819      	ldrb	r1, [r3, #0]
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <StartDefaultTask+0x1a44>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80041be:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80041c2:	fb06 f101 	mul.w	r1, r6, r1
 80041c6:	4401      	add	r1, r0
 80041c8:	3158      	adds	r1, #88	; 0x58
 80041ca:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 80041ce:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <StartDefaultTask+0x1a34>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80041d8:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 80041dc:	e13b      	b.n	8004456 <StartDefaultTask+0x1c46>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <StartDefaultTask+0x1a38>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80041e8:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 80041ec:	2001      	movs	r0, #1
 80041ee:	f006 fba3 	bl	800a938 <scaraSetOutput>
					  }
					  break;
 80041f2:	e130      	b.n	8004456 <StartDefaultTask+0x1c46>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80041f4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80041f8:	f103 030e 	add.w	r3, r3, #14
 80041fc:	7819      	ldrb	r1, [r3, #0]
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <StartDefaultTask+0x1a40>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004208:	f44f 76c4 	mov.w	r6, #392	; 0x188
 800420c:	fb06 f101 	mul.w	r1, r6, r1
 8004210:	4401      	add	r1, r0
 8004212:	3158      	adds	r1, #88	; 0x58
 8004214:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <StartDefaultTask+0x1a48>)
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8004222:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8004226:	e116      	b.n	8004456 <StartDefaultTask+0x1c46>
 8004228:	a0b5ed8d 	.word	0xa0b5ed8d
 800422c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004230:	20010d80 	.word	0x20010d80
 8004234:	e0001000 	.word	0xe0001000
 8004238:	2000408c 	.word	0x2000408c
 800423c:	431bde83 	.word	0x431bde83
 8004240:	20000028 	.word	0x20000028
 8004244:	20000010 	.word	0x20000010
 8004248:	20000030 	.word	0x20000030
 800424c:	20000058 	.word	0x20000058
 8004250:	20000040 	.word	0x20000040
 8004254:	20000048 	.word	0x20000048
 8004258:	20000018 	.word	0x20000018
					  case SCARA_MOVE_TO_SLOT :{
						  ObjectType current_type = Object[object_tail_pointer].object_position.object_type;
 800425c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004260:	f103 030e 	add.w	r3, r3, #14
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800426a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	33b8      	adds	r3, #184	; 0xb8
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800427c:	f102 0203 	add.w	r2, r2, #3
 8004280:	7013      	strb	r3, [r2, #0]
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[current_type].posx + Slot_Placement[current_type]*placement_spacing;
 8004282:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004286:	f103 0303 	add.w	r3, r3, #3
 800428a:	7819      	ldrb	r1, [r3, #0]
 800428c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004290:	3a08      	subs	r2, #8
 8004292:	460b      	mov	r3, r1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	440b      	add	r3, r1
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80042a4:	f103 0303 	add.w	r3, r3, #3
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ae:	3b10      	subs	r3, #16
 80042b0:	5c9b      	ldrb	r3, [r3, r2]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f936 	bl	8000524 <__aeabi_i2d>
 80042b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80042bc:	f103 0310 	add.w	r3, r3, #16
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f7fc f998 	bl	80005f8 <__aeabi_dmul>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80042d0:	f101 010e 	add.w	r1, r1, #14
 80042d4:	780e      	ldrb	r6, [r1, #0]
 80042d6:	4640      	mov	r0, r8
 80042d8:	4649      	mov	r1, r9
 80042da:	f7fb ffd7 	bl	800028c <__adddf3>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80042e6:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80042ea:	fb01 f106 	mul.w	r1, r1, r6
 80042ee:	4401      	add	r1, r0
 80042f0:	3148      	adds	r1, #72	; 0x48
 80042f2:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[current_type].posy;
 80042f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80042fa:	f103 0303 	add.w	r3, r3, #3
 80042fe:	7819      	ldrb	r1, [r3, #0]
 8004300:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004304:	f103 030e 	add.w	r3, r3, #14
 8004308:	781e      	ldrb	r6, [r3, #0]
 800430a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800430e:	3a08      	subs	r2, #8
 8004310:	460b      	mov	r3, r1
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	440b      	add	r3, r1
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	3308      	adds	r3, #8
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004324:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004328:	fb01 f106 	mul.w	r1, r1, r6
 800432c:	4401      	add	r1, r0
 800432e:	3150      	adds	r1, #80	; 0x50
 8004330:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[current_type].roll;
 8004334:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004338:	f103 0303 	add.w	r3, r3, #3
 800433c:	7819      	ldrb	r1, [r3, #0]
 800433e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004342:	f103 030e 	add.w	r3, r3, #14
 8004346:	781e      	ldrb	r6, [r3, #0]
 8004348:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800434c:	3a08      	subs	r2, #8
 800434e:	460b      	mov	r3, r1
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	440b      	add	r3, r1
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	3310      	adds	r3, #16
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004362:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004366:	fb01 f106 	mul.w	r1, r1, r6
 800436a:	4401      	add	r1, r0
 800436c:	3160      	adds	r1, #96	; 0x60
 800436e:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8004372:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004376:	f103 030e 	add.w	r3, r3, #14
 800437a:	7819      	ldrb	r1, [r3, #0]
 800437c:	4bb9      	ldr	r3, [pc, #740]	; (8004664 <StartDefaultTask+0x1e54>)
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004386:	f44f 76c4 	mov.w	r6, #392	; 0x188
 800438a:	fb06 f101 	mul.w	r1, r6, r1
 800438e:	4401      	add	r1, r0
 8004390:	3158      	adds	r1, #88	; 0x58
 8004392:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8004396:	4bb4      	ldr	r3, [pc, #720]	; (8004668 <StartDefaultTask+0x1e58>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80043a0:	e9c1 2300 	strd	r2, r3, [r1]
						  Slot_Placement[current_type] = (Slot_Placement[current_type] + 1)%2;
 80043a4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80043a8:	f103 0303 	add.w	r3, r3, #3
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043b2:	3b10      	subs	r3, #16
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	3301      	adds	r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	bfb8      	it	lt
 80043c0:	425b      	neglt	r3, r3
 80043c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80043c6:	f102 0203 	add.w	r2, r2, #3
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	b2d9      	uxtb	r1, r3
 80043ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043d2:	3b10      	subs	r3, #16
 80043d4:	5499      	strb	r1, [r3, r2]
					  }
					  break;
 80043d6:	e03e      	b.n	8004456 <StartDefaultTask+0x1c46>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 80043d8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80043dc:	f103 030e 	add.w	r3, r3, #14
 80043e0:	7819      	ldrb	r1, [r3, #0]
 80043e2:	4ba2      	ldr	r3, [pc, #648]	; (800466c <StartDefaultTask+0x1e5c>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80043ec:	f44f 76c4 	mov.w	r6, #392	; 0x188
 80043f0:	fb06 f101 	mul.w	r1, r6, r1
 80043f4:	4401      	add	r1, r0
 80043f6:	3158      	adds	r1, #88	; 0x58
 80043f8:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 80043fc:	4b9c      	ldr	r3, [pc, #624]	; (8004670 <StartDefaultTask+0x1e60>)
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8004406:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 800440a:	e024      	b.n	8004456 <StartDefaultTask+0x1c46>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 800440c:	4b99      	ldr	r3, [pc, #612]	; (8004674 <StartDefaultTask+0x1e64>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8004416:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 800441a:	2000      	movs	r0, #0
 800441c:	f006 fa8c 	bl	800a938 <scaraSetOutput>
					  }
					  break;
 8004420:	e019      	b.n	8004456 <StartDefaultTask+0x1c46>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8004422:	4b95      	ldr	r3, [pc, #596]	; (8004678 <StartDefaultTask+0x1e68>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 800442c:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8004430:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004434:	f103 030e 	add.w	r3, r3, #14
 8004438:	7819      	ldrb	r1, [r3, #0]
 800443a:	4b8a      	ldr	r3, [pc, #552]	; (8004664 <StartDefaultTask+0x1e54>)
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004444:	f44f 76c4 	mov.w	r6, #392	; 0x188
 8004448:	fb06 f101 	mul.w	r1, r6, r1
 800444c:	4401      	add	r1, r0
 800444e:	3158      	adds	r1, #88	; 0x58
 8004450:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8004454:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8004456:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800445a:	f103 030e 	add.w	r3, r3, #14
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8004464:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	18d1      	adds	r1, r2, r3
 800446e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8004472:	3328      	adds	r3, #40	; 0x28
 8004474:	22c0      	movs	r2, #192	; 0xc0
 8004476:	4618      	mov	r0, r3
 8004478:	f011 ff02 	bl	8016280 <memcpy>
				  duty_cmd.time_total = state_time;
 800447c:	f507 6166 	add.w	r1, r7, #3680	; 0xe60
 8004480:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 800448c:	f507 6166 	add.w	r1, r7, #3680	; 0xe60
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 800449c:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80044a0:	2200      	movs	r2, #0
 80044a2:	731a      	strb	r2, [r3, #12]
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 80044a4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80044a8:	f103 030f 	add.w	r3, r3, #15
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d006      	beq.n	80044c0 <StartDefaultTask+0x1cb0>
 80044b2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80044b6:	f103 030f 	add.w	r3, r3, #15
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b06      	cmp	r3, #6
 80044be:	d106      	bne.n	80044ce <StartDefaultTask+0x1cbe>
					  status1 = SCARA_STATUS_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80044c6:	f102 021b 	add.w	r2, r2, #27
 80044ca:	7013      	strb	r3, [r2, #0]
 80044cc:	e065      	b.n	800459a <StartDefaultTask+0x1d8a>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 80044ce:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80044d2:	f103 030f 	add.w	r3, r3, #15
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d014      	beq.n	8004506 <StartDefaultTask+0x1cf6>
 80044dc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80044e0:	f103 030f 	add.w	r3, r3, #15
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b05      	cmp	r3, #5
 80044e8:	d00d      	beq.n	8004506 <StartDefaultTask+0x1cf6>
 80044ea:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80044ee:	f103 030f 	add.w	r3, r3, #15
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d006      	beq.n	8004506 <StartDefaultTask+0x1cf6>
 80044f8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80044fc:	f103 030f 	add.w	r3, r3, #15
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b07      	cmp	r3, #7
 8004504:	d110      	bne.n	8004528 <StartDefaultTask+0x1d18>
						  duty_cmd.path_type = DUTY_PATH_LINE;
 8004506:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800450a:	2200      	movs	r2, #0
 800450c:	739a      	strb	r2, [r3, #14]
						  duty_cmd.space_type = DUTY_SPACE_TASK;
 800450e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8004512:	2200      	movs	r2, #0
 8004514:	735a      	strb	r2, [r3, #13]
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004516:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800451a:	2202      	movs	r2, #2
 800451c:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 800451e:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8004522:	2203      	movs	r2, #3
 8004524:	745a      	strb	r2, [r3, #17]
 8004526:	e024      	b.n	8004572 <StartDefaultTask+0x1d62>
					  }else{
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8004528:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800452c:	2201      	movs	r2, #1
 800452e:	745a      	strb	r2, [r3, #17]
						  if(pnp_move_option == CMD_MOVE_LINE){
 8004530:	4b52      	ldr	r3, [pc, #328]	; (800467c <StartDefaultTask+0x1e6c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d10c      	bne.n	8004552 <StartDefaultTask+0x1d42>
							  duty_cmd.path_type = DUTY_PATH_LINE;
 8004538:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800453c:	2200      	movs	r2, #0
 800453e:	739a      	strb	r2, [r3, #14]
							  duty_cmd.space_type = DUTY_SPACE_TASK;
 8004540:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8004544:	2200      	movs	r2, #0
 8004546:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 8004548:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800454c:	2201      	movs	r2, #1
 800454e:	741a      	strb	r2, [r3, #16]
 8004550:	e00f      	b.n	8004572 <StartDefaultTask+0x1d62>
						  }else if(pnp_move_option == CMD_MOVE_JOINT){
 8004552:	4b4a      	ldr	r3, [pc, #296]	; (800467c <StartDefaultTask+0x1e6c>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b05      	cmp	r3, #5
 8004558:	d10b      	bne.n	8004572 <StartDefaultTask+0x1d62>
							  duty_cmd.joint_type = DUTY_JOINT_4DOF;
 800455a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800455e:	2201      	movs	r2, #1
 8004560:	73da      	strb	r2, [r3, #15]
							  duty_cmd.space_type = DUTY_SPACE_JOINT;
 8004562:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8004566:	2201      	movs	r2, #1
 8004568:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800456a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800456e:	2200      	movs	r2, #0
 8004570:	741a      	strb	r2, [r3, #16]
						  }

					  }
					  status1 = scaraInitDuty(duty_cmd);
 8004572:	f507 6666 	add.w	r6, r7, #3680	; 0xe60
 8004576:	4668      	mov	r0, sp
 8004578:	f106 0310 	add.w	r3, r6, #16
 800457c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004580:	4619      	mov	r1, r3
 8004582:	f011 fe7d 	bl	8016280 <memcpy>
 8004586:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800458a:	f002 fc29 	bl	8006de0 <scaraInitDuty>
 800458e:	4603      	mov	r3, r0
 8004590:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004594:	f102 021b 	add.w	r2, r2, #27
 8004598:	7013      	strb	r3, [r2, #0]
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800459a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800459e:	f103 031b 	add.w	r3, r3, #27
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d110      	bne.n	80045ca <StartDefaultTask+0x1dba>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 80045a8:	2302      	movs	r3, #2
 80045aa:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80045ae:	f102 0205 	add.w	r2, r2, #5
 80045b2:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80045c0:	f101 0110 	add.w	r1, r1, #16
 80045c4:	e9c1 2300 	strd	r2, r3, [r1]
 80045c8:	e05c      	b.n	8004684 <StartDefaultTask+0x1e74>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80045ca:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80045ce:	f103 030e 	add.w	r3, r3, #14
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	425a      	negs	r2, r3
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	f002 0207 	and.w	r2, r2, #7
 80045e0:	bf58      	it	pl
 80045e2:	4253      	negpl	r3, r2
 80045e4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80045e8:	f102 020e 	add.w	r2, r2, #14
 80045ec:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80045f4:	f102 020f 	add.w	r2, r2, #15
 80045f8:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 80045fa:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 80045fe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004602:	f102 021b 	add.w	r2, r2, #27
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800460a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800460e:	6899      	ldr	r1, [r3, #8]
 8004610:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 8004614:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004618:	f103 0308 	add.w	r3, r3, #8
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4413      	add	r3, r2
 8004620:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2301      	movs	r3, #1
 8004628:	2007      	movs	r0, #7
 800462a:	f7fd ff45 	bl	80024b8 <commandRespond1>
 800462e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004632:	f103 030c 	add.w	r3, r3, #12
 8004636:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8004638:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800463c:	f103 0308 	add.w	r3, r3, #8
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004646:	f103 030c 	add.w	r3, r3, #12
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4413      	add	r3, r2
 800464e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004652:	f102 0208 	add.w	r2, r2, #8
 8004656:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 8004658:	f240 3199 	movw	r1, #921	; 0x399
 800465c:	4808      	ldr	r0, [pc, #32]	; (8004680 <StartDefaultTask+0x1e70>)
 800465e:	f7fd ff93 	bl	8002588 <LOG_REPORT>
					break;
 8004662:	e0e2      	b.n	800482a <StartDefaultTask+0x201a>
 8004664:	20000040 	.word	0x20000040
 8004668:	20000028 	.word	0x20000028
 800466c:	20000050 	.word	0x20000050
 8004670:	20000008 	.word	0x20000008
 8004674:	20000038 	.word	0x20000038
 8004678:	20000020 	.word	0x20000020
 800467c:	20000064 	.word	0x20000064
 8004680:	0801c65c 	.word	0x0801c65c


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8004684:	a3b5      	add	r3, pc, #724	; (adr r3, 800495c <StartDefaultTask+0x214c>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 800468e:	f101 0110 	add.w	r1, r1, #16
 8004692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004696:	f7fb fdf9 	bl	800028c <__adddf3>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80046a2:	f101 0110 	add.w	r1, r1, #16
 80046a6:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80046aa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80046ae:	f103 0310 	add.w	r3, r3, #16
 80046b2:	ed93 0b00 	vldr	d0, [r3]
 80046b6:	f006 f9c1 	bl	800aa3c <scaraIsFinish>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d037      	beq.n	8004730 <StartDefaultTask+0x1f20>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80046c0:	2304      	movs	r3, #4
 80046c2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80046c6:	f102 0205 	add.w	r2, r2, #5
 80046ca:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 80046cc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80046d0:	f103 030f 	add.w	r3, r3, #15
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b07      	cmp	r3, #7
 80046d8:	d118      	bne.n	800470c <StartDefaultTask+0x1efc>
					operation_state = SCARA_MOVE_TO_TARGET;
 80046da:	2300      	movs	r3, #0
 80046dc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80046e0:	f102 020f 	add.w	r2, r2, #15
 80046e4:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 80046e6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80046ea:	f103 030e 	add.w	r3, r3, #14
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	425a      	negs	r2, r3
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	f002 0207 	and.w	r2, r2, #7
 80046fc:	bf58      	it	pl
 80046fe:	4253      	negpl	r3, r2
 8004700:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004704:	f102 020e 	add.w	r2, r2, #14
 8004708:	7013      	strb	r3, [r2, #0]
 800470a:	e00a      	b.n	8004722 <StartDefaultTask+0x1f12>
				}else{
					operation_state += 1; //next state
 800470c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004710:	f103 030f 	add.w	r3, r3, #15
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800471c:	f102 020f 	add.w	r2, r2, #15
 8004720:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 8004722:	488b      	ldr	r0, [pc, #556]	; (8004950 <StartDefaultTask+0x2140>)
 8004724:	f001 fe34 	bl	8006390 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 8004728:	4889      	ldr	r0, [pc, #548]	; (8004950 <StartDefaultTask+0x2140>)
 800472a:	f000 fef5 	bl	8005518 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 800472e:	e07b      	b.n	8004828 <StartDefaultTask+0x2018>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8004730:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004734:	f103 030f 	add.w	r3, r3, #15
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d074      	beq.n	8004828 <StartDefaultTask+0x2018>
 800473e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004742:	f103 030f 	add.w	r3, r3, #15
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b06      	cmp	r3, #6
 800474a:	d06d      	beq.n	8004828 <StartDefaultTask+0x2018>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800474c:	4e81      	ldr	r6, [pc, #516]	; (8004954 <StartDefaultTask+0x2144>)
 800474e:	4668      	mov	r0, sp
 8004750:	f106 0308 	add.w	r3, r6, #8
 8004754:	22b8      	movs	r2, #184	; 0xb8
 8004756:	4619      	mov	r1, r3
 8004758:	f011 fd92 	bl	8016280 <memcpy>
 800475c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8004760:	487b      	ldr	r0, [pc, #492]	; (8004950 <StartDefaultTask+0x2140>)
 8004762:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8004766:	f101 0110 	add.w	r1, r1, #16
 800476a:	ed91 0b00 	vldr	d0, [r1]
 800476e:	f005 fb0f 	bl	8009d90 <scaraFlowDuty>
 8004772:	4603      	mov	r3, r0
 8004774:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004778:	f102 0217 	add.w	r2, r2, #23
 800477c:	7013      	strb	r3, [r2, #0]
				if ( SCARA_STATUS_OK == status) {
 800477e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004782:	f103 0317 	add.w	r3, r3, #23
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d113      	bne.n	80047b4 <StartDefaultTask+0x1fa4>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800478c:	4e71      	ldr	r6, [pc, #452]	; (8004954 <StartDefaultTask+0x2144>)
 800478e:	4a70      	ldr	r2, [pc, #448]	; (8004950 <StartDefaultTask+0x2140>)
 8004790:	ab2c      	add	r3, sp, #176	; 0xb0
 8004792:	4611      	mov	r1, r2
 8004794:	22c0      	movs	r2, #192	; 0xc0
 8004796:	4618      	mov	r0, r3
 8004798:	f011 fd72 	bl	8016280 <memcpy>
 800479c:	4668      	mov	r0, sp
 800479e:	f106 0310 	add.w	r3, r6, #16
 80047a2:	22b0      	movs	r2, #176	; 0xb0
 80047a4:	4619      	mov	r1, r3
 80047a6:	f011 fd6b 	bl	8016280 <memcpy>
 80047aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80047ae:	f001 ff7f 	bl	80066b0 <lowlayer_computeAndWritePulse>
		  break;
 80047b2:	e039      	b.n	8004828 <StartDefaultTask+0x2018>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80047b4:	2303      	movs	r3, #3
 80047b6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80047ba:	f102 0205 	add.w	r2, r2, #5
 80047be:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 80047c0:	f607 53bc 	addw	r3, r7, #3516	; 0xdbc
 80047c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80047c8:	f102 0217 	add.w	r2, r2, #23
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80047d0:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80047d4:	6899      	ldr	r1, [r3, #8]
 80047d6:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 80047da:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80047de:	f103 0308 	add.w	r3, r3, #8
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4413      	add	r3, r2
 80047e6:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2301      	movs	r3, #1
 80047ee:	2007      	movs	r0, #7
 80047f0:	f7fd fe62 	bl	80024b8 <commandRespond1>
 80047f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80047f8:	f103 030c 	add.w	r3, r3, #12
 80047fc:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 80047fe:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004802:	f103 0308 	add.w	r3, r3, #8
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800480c:	f103 030c 	add.w	r3, r3, #12
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4413      	add	r3, r2
 8004814:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8004818:	f102 0208 	add.w	r2, r2, #8
 800481c:	6013      	str	r3, [r2, #0]
		  break;
 800481e:	e003      	b.n	8004828 <StartDefaultTask+0x2018>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8004820:	bf00      	nop
 8004822:	e005      	b.n	8004830 <StartDefaultTask+0x2020>
				  break;
 8004824:	bf00      	nop
 8004826:	e003      	b.n	8004830 <StartDefaultTask+0x2020>
		  break;
 8004828:	bf00      	nop
		  }
	  }
	  break;
 800482a:	e001      	b.n	8004830 <StartDefaultTask+0x2020>
	  break;
 800482c:	bf00      	nop
 800482e:	e000      	b.n	8004832 <StartDefaultTask+0x2022>
	  break;
 8004830:	bf00      	nop
	  default:
	  {

	  }
	  }
	  if(continuous_update == 1 && update_pos_cycle++ >= 10){
 8004832:	4b49      	ldr	r3, [pc, #292]	; (8004958 <StartDefaultTask+0x2148>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d15a      	bne.n	80048f0 <StartDefaultTask+0x20e0>
 800483a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800483e:	f103 030e 	add.w	r3, r3, #14
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 800484a:	f101 010e 	add.w	r1, r1, #14
 800484e:	700a      	strb	r2, [r1, #0]
 8004850:	2b09      	cmp	r3, #9
 8004852:	d94d      	bls.n	80048f0 <StartDefaultTask+0x20e0>
		  update_pos_cycle = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800485a:	f102 020e 	add.w	r2, r2, #14
 800485e:	7013      	strb	r3, [r2, #0]
		  lowlayer_readTruePosition(&update_position);
 8004860:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8004864:	4618      	mov	r0, r3
 8004866:	f001 fd93 	bl	8006390 <lowlayer_readTruePosition>
		  kinematicForward(&update_position);
 800486a:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fe52 	bl	8005518 <kinematicForward>
		  respond_lenght = scaraPosition_packaging(detail_array, update_position);
 8004874:	f607 46f8 	addw	r6, r7, #3320	; 0xcf8
 8004878:	f607 58bc 	addw	r8, r7, #3516	; 0xdbc
 800487c:	4668      	mov	r0, sp
 800487e:	f106 0308 	add.w	r3, r6, #8
 8004882:	22b8      	movs	r2, #184	; 0xb8
 8004884:	4619      	mov	r1, r3
 8004886:	f011 fcfb 	bl	8016280 <memcpy>
 800488a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800488e:	4640      	mov	r0, r8
 8004890:	f006 f8ee 	bl	800aa70 <scaraPosition_packaging>
 8004894:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004898:	f103 030c 	add.w	r3, r3, #12
 800489c:	6018      	str	r0, [r3, #0]
		  respond_lenght = commandRespond1(RPD_POSITION, CMD_READ_POSITION, detail_array, respond_lenght, &respond[total_respond_length]);
 800489e:	f607 620c 	addw	r2, r7, #3596	; 0xe0c
 80048a2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80048a6:	f103 0308 	add.w	r3, r3, #8
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4413      	add	r3, r2
 80048ae:	f607 52bc 	addw	r2, r7, #3516	; 0xdbc
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80048b8:	f103 030c 	add.w	r3, r3, #12
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2109      	movs	r1, #9
 80048c0:	2002      	movs	r0, #2
 80048c2:	f7fd fdf9 	bl	80024b8 <commandRespond1>
 80048c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80048ca:	f103 030c 	add.w	r3, r3, #12
 80048ce:	6018      	str	r0, [r3, #0]
		  total_respond_length += respond_lenght;
 80048d0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80048d4:	f103 0308 	add.w	r3, r3, #8
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80048de:	f103 030c 	add.w	r3, r3, #12
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80048ea:	f102 0208 	add.w	r2, r2, #8
 80048ee:	6013      	str	r3, [r2, #0]
	  }
	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 80048f0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80048f4:	f103 0308 	add.w	r3, r3, #8
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	dd0b      	ble.n	8004916 <StartDefaultTask+0x2106>
		CDC_Transmit_FS(respond, total_respond_length);
 80048fe:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004902:	f103 0308 	add.w	r3, r3, #8
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b29a      	uxth	r2, r3
 800490a:	f607 630c 	addw	r3, r7, #3596	; 0xe0c
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f011 f837 	bl	8015984 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8004916:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800491a:	f103 0307 	add.w	r3, r3, #7
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f006 f83b 	bl	800a99c <scaraSetMethod>
	  scaraSetMode(current_mode);
 8004926:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800492a:	f103 0306 	add.w	r3, r3, #6
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f006 f823 	bl	800a97c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8004936:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800493a:	f103 0305 	add.w	r3, r3, #5
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f006 f80b 	bl	800a95c <scaraSetDutyState>

    osDelay(1);
 8004946:	2001      	movs	r0, #1
 8004948:	f00e f8f7 	bl	8012b3a <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 800494c:	f7fd bff9 	b.w	8002942 <StartDefaultTask+0x132>
 8004950:	20010c80 	.word	0x20010c80
 8004954:	20010b00 	.word	0x20010b00
 8004958:	20004408 	.word	0x20004408
 800495c:	40000000 	.word	0x40000000
 8004960:	3f847ae1 	.word	0x3f847ae1

08004964 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8004964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004966:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 800496a:	af70      	add	r7, sp, #448	; 0x1c0
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8004970:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004974:	2201      	movs	r2, #1
 8004976:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004978:	4964      	ldr	r1, [pc, #400]	; (8004b0c <Start_USB_RX_Task+0x1a8>)
 800497a:	4865      	ldr	r0, [pc, #404]	; (8004b10 <Start_USB_RX_Task+0x1ac>)
 800497c:	f001 fa71 	bl	8005e62 <ringBuff_DistanceOf>
 8004980:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8004984:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d0f4      	beq.n	8004978 <Start_USB_RX_Task+0x14>
 800498e:	466b      	mov	r3, sp
 8004990:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8004992:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004996:	1c5c      	adds	r4, r3, #1
 8004998:	1e63      	subs	r3, r4, #1
 800499a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800499e:	4623      	mov	r3, r4
 80049a0:	4618      	mov	r0, r3
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	00cb      	lsls	r3, r1, #3
 80049b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80049b4:	00c2      	lsls	r2, r0, #3
 80049b6:	4623      	mov	r3, r4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	00cb      	lsls	r3, r1, #3
 80049c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80049cc:	00c2      	lsls	r2, r0, #3
 80049ce:	4623      	mov	r3, r4
 80049d0:	3307      	adds	r3, #7
 80049d2:	08db      	lsrs	r3, r3, #3
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	ebad 0d03 	sub.w	sp, sp, r3
 80049da:	ab70      	add	r3, sp, #448	; 0x1c0
 80049dc:	3300      	adds	r3, #0
 80049de:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 80049e2:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80049e6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80049ea:	3301      	adds	r3, #1
 80049ec:	461a      	mov	r2, r3
 80049ee:	4848      	ldr	r0, [pc, #288]	; (8004b10 <Start_USB_RX_Task+0x1ac>)
 80049f0:	f001 fa16 	bl	8005e20 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 80049f4:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 80049f8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80049fc:	3301      	adds	r3, #1
 80049fe:	f107 020c 	add.w	r2, r7, #12
 8004a02:	4619      	mov	r1, r3
 8004a04:	f7fd fe06 	bl	8002614 <unPackPayload>
 8004a08:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8004a0c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d077      	beq.n	8004b06 <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8004a16:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004a1a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8004a1e:	f107 000c 	add.w	r0, r7, #12
 8004a22:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8004a26:	f7fc fae3 	bl	8000ff0 <packetRead>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8004a30:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004a34:	2287      	movs	r2, #135	; 0x87
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f011 fc49 	bl	80162d0 <memset>
				  detail_length = 0;
 8004a3e:	f107 0308 	add.w	r3, r7, #8
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8004a46:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8004a4a:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8004a4e:	f107 0308 	add.w	r3, r7, #8
 8004a52:	936f      	str	r3, [sp, #444]	; 0x1bc
 8004a54:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004a58:	936e      	str	r3, [sp, #440]	; 0x1b8
 8004a5a:	4668      	mov	r0, sp
 8004a5c:	f104 0308 	add.w	r3, r4, #8
 8004a60:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8004a64:	4619      	mov	r1, r3
 8004a66:	f011 fc0b 	bl	8016280 <memcpy>
 8004a6a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7fd fb26 	bl	80020c0 <commandReply>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8004a7a:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	d123      	bne.n	8004aca <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8004a88:	e008      	b.n	8004a9c <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <Start_USB_RX_Task+0x1b0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a92:	4618      	mov	r0, r3
 8004a94:	f00e fa62 	bl	8012f5c <osMailAlloc>
 8004a98:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8004a9c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f2      	beq.n	8004a8a <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8004aa4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004aa8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004aac:	4619      	mov	r1, r3
 8004aae:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8004ab2:	f011 fbe5 	bl	8016280 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <Start_USB_RX_Task+0x1b0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f00e fa62 	bl	8012f88 <osMailPut>
 8004ac4:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8004ac8:	e01d      	b.n	8004b06 <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8004aca:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8004ace:	2b0a      	cmp	r3, #10
 8004ad0:	d019      	beq.n	8004b06 <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8004ad2:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 8004ad6:	f107 0308 	add.w	r3, r7, #8
 8004ada:	681c      	ldr	r4, [r3, #0]
 8004adc:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004ae0:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8004ae4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4623      	mov	r3, r4
 8004aec:	f7fd fce4 	bl	80024b8 <commandRespond1>
 8004af0:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 8004af4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f010 ff3f 	bl	8015984 <CDC_Transmit_FS>
 8004b06:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004b08:	e736      	b.n	8004978 <Start_USB_RX_Task+0x14>
 8004b0a:	bf00      	nop
 8004b0c:	0801c720 	.word	0x0801c720
 8004b10:	20000068 	.word	0x20000068
 8004b14:	2000fe7c 	.word	0x2000fe7c

08004b18 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b292      	uxth	r2, r2
 8004b28:	801a      	strh	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	611a      	str	r2, [r3, #16]
 8004b64:	615a      	str	r2, [r3, #20]
 8004b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8004b68:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b6a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004b6e:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b72:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <MX_FSMC_Init+0xbc>)
 8004b74:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004b76:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8004b7c:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b7e:	2202      	movs	r2, #2
 8004b80:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8004b82:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b84:	2208      	movs	r2, #8
 8004b86:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004b88:	4b1f      	ldr	r3, [pc, #124]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004b94:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004ba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004bae:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004bb4:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004bcc:	230f      	movs	r3, #15
 8004bce:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004bd0:	230f      	movs	r3, #15
 8004bd2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8004bd4:	23ff      	movs	r3, #255	; 0xff
 8004bd6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8004bd8:	230f      	movs	r3, #15
 8004bda:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004bdc:	2310      	movs	r3, #16
 8004bde:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004be0:	2311      	movs	r3, #17
 8004be2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	2200      	movs	r2, #0
 8004bec:	4619      	mov	r1, r3
 8004bee:	4806      	ldr	r0, [pc, #24]	; (8004c08 <MX_FSMC_Init+0xb8>)
 8004bf0:	f007 fd40 	bl	800c674 <HAL_NOR_Init>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004bfa:	f001 f857 	bl	8005cac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004bfe:	bf00      	nop
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	2000fe88 	.word	0x2000fe88
 8004c0c:	a0000104 	.word	0xa0000104

08004c10 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <HAL_FSMC_MspInit+0xa8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d140      	bne.n	8004cae <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004c2c:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <HAL_FSMC_MspInit+0xa8>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <HAL_FSMC_MspInit+0xac>)
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <HAL_FSMC_MspInit+0xac>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6393      	str	r3, [r2, #56]	; 0x38
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_FSMC_MspInit+0xac>)
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004c4e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004c52:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c54:	2302      	movs	r3, #2
 8004c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004c60:	230c      	movs	r3, #12
 8004c62:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c64:	1d3b      	adds	r3, r7, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4815      	ldr	r0, [pc, #84]	; (8004cc0 <HAL_FSMC_MspInit+0xb0>)
 8004c6a:	f007 fb4d 	bl	800c308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004c6e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8004c72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c74:	2302      	movs	r3, #2
 8004c76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004c80:	230c      	movs	r3, #12
 8004c82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	480e      	ldr	r0, [pc, #56]	; (8004cc4 <HAL_FSMC_MspInit+0xb4>)
 8004c8a:	f007 fb3d 	bl	800c308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c92:	2302      	movs	r3, #2
 8004c94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4808      	ldr	r0, [pc, #32]	; (8004cc8 <HAL_FSMC_MspInit+0xb8>)
 8004ca8:	f007 fb2e 	bl	800c308 <HAL_GPIO_Init>
 8004cac:	e000      	b.n	8004cb0 <HAL_FSMC_MspInit+0xa0>
    return;
 8004cae:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20004860 	.word	0x20004860
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40020c00 	.word	0x40020c00
 8004cc8:	40020400 	.word	0x40020400

08004ccc <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8004cd4:	f7ff ff9c 	bl	8004c10 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;
extern SCARA_Gcode_Cor_TypeDef			Gcode_Cor[1000];
void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, int32_t run_point)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
//		bezier_y_coeffs[1] = ((double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y)*2.0*bezier_wc;
//		bezier_y_coeffs[2] = duty_cmd->target_point.y;
//	}else{
//
//	}
	duty_cmd->target_point.x = (double)Gcode_Cor[run_point].X * COR_INVERSE_SCALE + offset_x;
 8004cea:	499d      	ldr	r1, [pc, #628]	; (8004f60 <update_gcode_point+0x280>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fb fc12 	bl	8000524 <__aeabi_i2d>
 8004d00:	a395      	add	r3, pc, #596	; (adr r3, 8004f58 <update_gcode_point+0x278>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fc77 	bl	80005f8 <__aeabi_dmul>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	4b94      	ldr	r3, [pc, #592]	; (8004f64 <update_gcode_point+0x284>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fab8 	bl	800028c <__adddf3>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	duty_cmd->target_point.y = (double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y;
 8004d26:	498e      	ldr	r1, [pc, #568]	; (8004f60 <update_gcode_point+0x280>)
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	3304      	adds	r3, #4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fb fbf3 	bl	8000524 <__aeabi_i2d>
 8004d3e:	a386      	add	r3, pc, #536	; (adr r3, 8004f58 <update_gcode_point+0x278>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f7fb fc58 	bl	80005f8 <__aeabi_dmul>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <update_gcode_point+0x288>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fa99 	bl	800028c <__adddf3>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 8004d64:	497e      	ldr	r1, [pc, #504]	; (8004f60 <update_gcode_point+0x280>)
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	331b      	adds	r3, #27
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	d10d      	bne.n	8004d96 <update_gcode_point+0xb6>
	  duty_cmd->target_point.z = up_z_height + offset_z;
 8004d7a:	4b7c      	ldr	r3, [pc, #496]	; (8004f6c <update_gcode_point+0x28c>)
 8004d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d80:	4b7b      	ldr	r3, [pc, #492]	; (8004f70 <update_gcode_point+0x290>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f7fb fa81 	bl	800028c <__adddf3>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004d94:	e00c      	b.n	8004db0 <update_gcode_point+0xd0>
	}else{
	  duty_cmd->target_point.z = down_z_height + offset_z;
 8004d96:	4b77      	ldr	r3, [pc, #476]	; (8004f74 <update_gcode_point+0x294>)
 8004d98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d9c:	4b74      	ldr	r3, [pc, #464]	; (8004f70 <update_gcode_point+0x290>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f7fb fa73 	bl	800028c <__adddf3>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	}
	duty_cmd->target_point.roll = roll_angle;
 8004db0:	4b71      	ldr	r3, [pc, #452]	; (8004f78 <update_gcode_point+0x298>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	duty_cmd->space_type = DUTY_SPACE_TASK;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	735a      	strb	r2, [r3, #13]
	duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	731a      	strb	r2, [r3, #12]
	if(Gcode_Cor[run_point].configure.type_define[0] == LINEAR_TYPE){
 8004dc8:	4965      	ldr	r1, [pc, #404]	; (8004f60 <update_gcode_point+0x280>)
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	331a      	adds	r3, #26
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d103      	bne.n	8004de6 <update_gcode_point+0x106>
	  duty_cmd->path_type = DUTY_PATH_LINE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	739a      	strb	r2, [r3, #14]
 8004de4:	e07b      	b.n	8004ede <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_AW_TYPE){
 8004de6:	495e      	ldr	r1, [pc, #376]	; (8004f60 <update_gcode_point+0x280>)
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	331a      	adds	r3, #26
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d132      	bne.n	8004e62 <update_gcode_point+0x182>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004dfc:	4958      	ldr	r1, [pc, #352]	; (8004f60 <update_gcode_point+0x280>)
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fb fb88 	bl	8000524 <__aeabi_i2d>
 8004e14:	a350      	add	r3, pc, #320	; (adr r3, 8004f58 <update_gcode_point+0x278>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fbed 	bl	80005f8 <__aeabi_dmul>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * COR_INVERSE_SCALE;
 8004e28:	494d      	ldr	r1, [pc, #308]	; (8004f60 <update_gcode_point+0x280>)
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3310      	adds	r3, #16
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb fb72 	bl	8000524 <__aeabi_i2d>
 8004e40:	a345      	add	r3, pc, #276	; (adr r3, 8004f58 <update_gcode_point+0x278>)
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f7fb fbd7 	bl	80005f8 <__aeabi_dmul>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = 1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	615a      	str	r2, [r3, #20]
 8004e60:	e03d      	b.n	8004ede <update_gcode_point+0x1fe>
	}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_CW_TYPE){
 8004e62:	493f      	ldr	r1, [pc, #252]	; (8004f60 <update_gcode_point+0x280>)
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	331a      	adds	r3, #26
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d132      	bne.n	8004ede <update_gcode_point+0x1fe>
	  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004e78:	4939      	ldr	r1, [pc, #228]	; (8004f60 <update_gcode_point+0x280>)
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	330c      	adds	r3, #12
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb fb4a 	bl	8000524 <__aeabi_i2d>
 8004e90:	a331      	add	r3, pc, #196	; (adr r3, 8004f58 <update_gcode_point+0x278>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f7fb fbaf 	bl	80005f8 <__aeabi_dmul>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * COR_INVERSE_SCALE;
 8004ea4:	492e      	ldr	r1, [pc, #184]	; (8004f60 <update_gcode_point+0x280>)
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3310      	adds	r3, #16
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb fb34 	bl	8000524 <__aeabi_i2d>
 8004ebc:	a326      	add	r3, pc, #152	; (adr r3, 8004f58 <update_gcode_point+0x278>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb fb99 	bl	80005f8 <__aeabi_dmul>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
	  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	739a      	strb	r2, [r3, #14]
	  duty_cmd->arc_dir = -1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8004edc:	615a      	str	r2, [r3, #20]
	}

	if(Gcode_Mode == GCODE_LINEAR){
 8004ede:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <update_gcode_point+0x29c>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d14e      	bne.n	8004f84 <update_gcode_point+0x2a4>
		duty_cmd->v_factor = (double)Gcode_Cor[run_point].F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8004ee6:	491e      	ldr	r1, [pc, #120]	; (8004f60 <update_gcode_point+0x280>)
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fb fb13 	bl	8000524 <__aeabi_i2d>
 8004efe:	a316      	add	r3, pc, #88	; (adr r3, 8004f58 <update_gcode_point+0x278>)
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f7fb fb78 	bl	80005f8 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <update_gcode_point+0x2a0>)
 8004f16:	f7fb fc99 	bl	800084c <__aeabi_ddiv>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
		if(run_point == 1){
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10d      	bne.n	8004f46 <update_gcode_point+0x266>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	745a      	strb	r2, [r3, #17]
			duty_cmd->time_total = 0;
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9c1 2308 	strd	r2, r3, [r1, #32]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
		}
	}

}
 8004f44:	e0b6      	b.n	80050b4 <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	745a      	strb	r2, [r3, #17]
}
 8004f52:	e0af      	b.n	80050b4 <update_gcode_point+0x3d4>
 8004f54:	f3af 8000 	nop.w
 8004f58:	a0000000 	.word	0xa0000000
 8004f5c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004f60:	20008fc8 	.word	0x20008fc8
 8004f64:	20008fa8 	.word	0x20008fa8
 8004f68:	2000fd50 	.word	0x2000fd50
 8004f6c:	200085c8 	.word	0x200085c8
 8004f70:	2000fd40 	.word	0x2000fd40
 8004f74:	20008f40 	.word	0x20008f40
 8004f78:	20008fa0 	.word	0x20008fa0
 8004f7c:	200085d0 	.word	0x200085d0
 8004f80:	40877000 	.word	0x40877000
	}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8004f84:	4b50      	ldr	r3, [pc, #320]	; (80050c8 <update_gcode_point+0x3e8>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b09      	cmp	r3, #9
 8004f8a:	f040 8093 	bne.w	80050b4 <update_gcode_point+0x3d4>
		if(Gcode_Cor[run_point].configure.type_define[1] == pre_height){
 8004f8e:	494f      	ldr	r1, [pc, #316]	; (80050cc <update_gcode_point+0x3ec>)
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	331b      	adds	r3, #27
 8004f9e:	781a      	ldrb	r2, [r3, #0]
 8004fa0:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <update_gcode_point+0x3f0>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d14c      	bne.n	8005042 <update_gcode_point+0x362>
			if(Gcode_Cor[run_point].configure.clutch_index != pre_clutch_index){
 8004fa8:	4948      	ldr	r1, [pc, #288]	; (80050cc <update_gcode_point+0x3ec>)
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3318      	adds	r3, #24
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4b45      	ldr	r3, [pc, #276]	; (80050d4 <update_gcode_point+0x3f4>)
 8004fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d01f      	beq.n	8005006 <update_gcode_point+0x326>
				LSPB_calculation(gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index]);
 8004fc6:	4941      	ldr	r1, [pc, #260]	; (80050cc <update_gcode_point+0x3ec>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3318      	adds	r3, #24
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4a3f      	ldr	r2, [pc, #252]	; (80050d8 <update_gcode_point+0x3f8>)
 8004fdc:	460b      	mov	r3, r1
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	440b      	add	r3, r1
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fea:	f000 f87d 	bl	80050e8 <LSPB_calculation>
				pre_clutch_index = Gcode_Cor[run_point].configure.clutch_index;
 8004fee:	4937      	ldr	r1, [pc, #220]	; (80050cc <update_gcode_point+0x3ec>)
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3318      	adds	r3, #24
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b21a      	sxth	r2, r3
 8005002:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <update_gcode_point+0x3f4>)
 8005004:	801a      	strh	r2, [r3, #0]
			duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2203      	movs	r2, #3
 800500a:	741a      	strb	r2, [r3, #16]
			duty_cmd->time_total = (double)(Gcode_Cor[run_point].T*COR_INVERSE_SCALE);
 800500c:	492f      	ldr	r1, [pc, #188]	; (80050cc <update_gcode_point+0x3ec>)
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	3314      	adds	r3, #20
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005026:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80050dc <update_gcode_point+0x3fc>
 800502a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800502e:	ee17 0a90 	vmov	r0, s15
 8005032:	f7fb fa89 	bl	8000548 <__aeabi_f2d>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8005040:	e038      	b.n	80050b4 <update_gcode_point+0x3d4>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	741a      	strb	r2, [r3, #16]
			duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	745a      	strb	r2, [r3, #17]
			duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
 800504e:	491f      	ldr	r1, [pc, #124]	; (80050cc <update_gcode_point+0x3ec>)
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	3318      	adds	r3, #24
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	4619      	mov	r1, r3
 8005062:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <update_gcode_point+0x3f8>)
 8005064:	460b      	mov	r3, r1
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	440b      	add	r3, r1
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	3308      	adds	r3, #8
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fb fa56 	bl	8000524 <__aeabi_i2d>
 8005078:	a311      	add	r3, pc, #68	; (adr r3, 80050c0 <update_gcode_point+0x3e0>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb fabb 	bl	80005f8 <__aeabi_dmul>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <update_gcode_point+0x400>)
 8005090:	f7fb fbdc 	bl	800084c <__aeabi_ddiv>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			pre_height = Gcode_Cor[run_point].configure.type_define[1];
 800509e:	490b      	ldr	r1, [pc, #44]	; (80050cc <update_gcode_point+0x3ec>)
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	331b      	adds	r3, #27
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <update_gcode_point+0x3f0>)
 80050b2:	701a      	strb	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	f3af 8000 	nop.w
 80050c0:	a0000000 	.word	0xa0000000
 80050c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80050c8:	200085d0 	.word	0x200085d0
 80050cc:	20008fc8 	.word	0x20008fc8
 80050d0:	20008f88 	.word	0x20008f88
 80050d4:	2000fd3a 	.word	0x2000fd3a
 80050d8:	200085e0 	.word	0x200085e0
 80050dc:	358637bd 	.word	0x358637bd
 80050e0:	40877000 	.word	0x40877000
 80050e4:	00000000 	.word	0x00000000

080050e8 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 80050e8:	b5b0      	push	{r4, r5, r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*COR_INVERSE_SCALE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fb fa0e 	bl	8000524 <__aeabi_i2d>
 8005108:	a388      	add	r3, pc, #544	; (adr r3, 800532c <LSPB_calculation+0x244>)
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f7fb fa73 	bl	80005f8 <__aeabi_dmul>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*COR_INVERSE_SCALE;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4618      	mov	r0, r3
 800511e:	f7fb fa01 	bl	8000524 <__aeabi_i2d>
 8005122:	a382      	add	r3, pc, #520	; (adr r3, 800532c <LSPB_calculation+0x244>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb fa66 	bl	80005f8 <__aeabi_dmul>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 8005134:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8005138:	4b71      	ldr	r3, [pc, #452]	; (8005300 <LSPB_calculation+0x218>)
 800513a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800513e:	f7fb fa5b 	bl	80005f8 <__aeabi_dmul>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4610      	mov	r0, r2
 8005148:	4619      	mov	r1, r3
 800514a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800514e:	f7fb fb7d 	bl	800084c <__aeabi_ddiv>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	496b      	ldr	r1, [pc, #428]	; (8005304 <LSPB_calculation+0x21c>)
 8005158:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 800515c:	4b69      	ldr	r3, [pc, #420]	; (8005304 <LSPB_calculation+0x21c>)
 800515e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005162:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005166:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800516a:	f7fb fb6f 	bl	800084c <__aeabi_ddiv>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4620      	mov	r0, r4
 8005174:	4629      	mov	r1, r5
 8005176:	f7fb f887 	bl	8000288 <__aeabi_dsub>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4962      	ldr	r1, [pc, #392]	; (8005308 <LSPB_calculation+0x220>)
 8005180:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 8005184:	4b5f      	ldr	r3, [pc, #380]	; (8005304 <LSPB_calculation+0x21c>)
 8005186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <LSPB_calculation+0x220>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb f87a 	bl	8000288 <__aeabi_dsub>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	495c      	ldr	r1, [pc, #368]	; (800530c <LSPB_calculation+0x224>)
 800519a:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 800519e:	4b5a      	ldr	r3, [pc, #360]	; (8005308 <LSPB_calculation+0x220>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051a8:	f7fb fb50 	bl	800084c <__aeabi_ddiv>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	4b55      	ldr	r3, [pc, #340]	; (8005310 <LSPB_calculation+0x228>)
 80051ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80051be:	f7fb fa1b 	bl	80005f8 <__aeabi_dmul>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4953      	ldr	r1, [pc, #332]	; (8005314 <LSPB_calculation+0x22c>)
 80051c8:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 80051cc:	4952      	ldr	r1, [pc, #328]	; (8005318 <LSPB_calculation+0x230>)
 80051ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051d2:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 80051d6:	4b4c      	ldr	r3, [pc, #304]	; (8005308 <LSPB_calculation+0x220>)
 80051d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	4b4e      	ldr	r3, [pc, #312]	; (800531c <LSPB_calculation+0x234>)
 80051e2:	f7fb fa09 	bl	80005f8 <__aeabi_dmul>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4610      	mov	r0, r2
 80051ec:	4619      	mov	r1, r3
 80051ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051f2:	f7fb fa01 	bl	80005f8 <__aeabi_dmul>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4947      	ldr	r1, [pc, #284]	; (8005318 <LSPB_calculation+0x230>)
 80051fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	4b45      	ldr	r3, [pc, #276]	; (800531c <LSPB_calculation+0x234>)
 8005206:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800520a:	f7fb f9f5 	bl	80005f8 <__aeabi_dmul>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4943      	ldr	r1, [pc, #268]	; (8005320 <LSPB_calculation+0x238>)
 8005214:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 8005218:	4b3c      	ldr	r3, [pc, #240]	; (800530c <LSPB_calculation+0x224>)
 800521a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800521e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005222:	f7fb f9e9 	bl	80005f8 <__aeabi_dmul>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005232:	f7fb f82b 	bl	800028c <__adddf3>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4939      	ldr	r1, [pc, #228]	; (8005320 <LSPB_calculation+0x238>)
 800523c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8005240:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	f7fb f820 	bl	800028c <__adddf3>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	f7fb f816 	bl	800028c <__adddf3>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	4b28      	ldr	r3, [pc, #160]	; (800530c <LSPB_calculation+0x224>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f7fb f9c3 	bl	80005f8 <__aeabi_dmul>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fb f807 	bl	800028c <__adddf3>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4614      	mov	r4, r2
 8005284:	461d      	mov	r5, r3
 8005286:	4b1f      	ldr	r3, [pc, #124]	; (8005304 <LSPB_calculation+0x21c>)
 8005288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800528c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005290:	f7fb f9b2 	bl	80005f8 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f7fa fff4 	bl	8000288 <__aeabi_dsub>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <LSPB_calculation+0x21c>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f7fb f9a3 	bl	80005f8 <__aeabi_dmul>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052c2:	f7fb fac3 	bl	800084c <__aeabi_ddiv>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80052ce:	f7fa ffdb 	bl	8000288 <__aeabi_dsub>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4912      	ldr	r1, [pc, #72]	; (8005320 <LSPB_calculation+0x238>)
 80052d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 80052dc:	4911      	ldr	r1, [pc, #68]	; (8005324 <LSPB_calculation+0x23c>)
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 80052ea:	490f      	ldr	r1, [pc, #60]	; (8005328 <LSPB_calculation+0x240>)
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80052f8:	bf00      	nop
 80052fa:	3728      	adds	r7, #40	; 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005300:	3ff33333 	.word	0x3ff33333
 8005304:	20008fb8 	.word	0x20008fb8
 8005308:	20008f48 	.word	0x20008f48
 800530c:	20008f68 	.word	0x20008f68
 8005310:	3fe00000 	.word	0x3fe00000
 8005314:	2000fd30 	.word	0x2000fd30
 8005318:	20008f90 	.word	0x20008f90
 800531c:	bfe00000 	.word	0xbfe00000
 8005320:	20008f50 	.word	0x20008f50
 8005324:	200085d8 	.word	0x200085d8
 8005328:	2000fd48 	.word	0x2000fd48
 800532c:	a0000000 	.word	0xa0000000
 8005330:	3eb0c6f7 	.word	0x3eb0c6f7
 8005334:	00000000 	.word	0x00000000

08005338 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8005338:	b084      	sub	sp, #16
 800533a:	b580      	push	{r7, lr}
 800533c:	af00      	add	r7, sp, #0
 800533e:	f107 0c08 	add.w	ip, r7, #8
 8005342:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*COR_INVERSE_SCALE);
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fb f8eb 	bl	8000524 <__aeabi_i2d>
 800534e:	a312      	add	r3, pc, #72	; (adr r3, 8005398 <accumulate_update+0x60>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fb f950 	bl	80005f8 <__aeabi_dmul>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	ec43 2b17 	vmov	d7, r2, r3
 8005360:	eeb0 0a47 	vmov.f32	s0, s14
 8005364:	eef0 0a67 	vmov.f32	s1, s15
 8005368:	480d      	ldr	r0, [pc, #52]	; (80053a0 <accumulate_update+0x68>)
 800536a:	f003 fe79 	bl	8009060 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*COR_INVERSE_SCALE;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fb f8d7 	bl	8000524 <__aeabi_i2d>
 8005376:	a308      	add	r3, pc, #32	; (adr r3, 8005398 <accumulate_update+0x60>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fb f93c 	bl	80005f8 <__aeabi_dmul>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4907      	ldr	r1, [pc, #28]	; (80053a4 <accumulate_update+0x6c>)
 8005386:	e9c1 2300 	strd	r2, r3, [r1]
}
 800538a:	bf00      	nop
 800538c:	46bd      	mov	sp, r7
 800538e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005392:	b004      	add	sp, #16
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	a0000000 	.word	0xa0000000
 800539c:	3eb0c6f7 	.word	0x3eb0c6f7
 80053a0:	200085d8 	.word	0x200085d8
 80053a4:	2000fd48 	.word	0x2000fd48

080053a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ae:	f107 0314 	add.w	r3, r7, #20
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	609a      	str	r2, [r3, #8]
 80053ba:	60da      	str	r2, [r3, #12]
 80053bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	4b51      	ldr	r3, [pc, #324]	; (8005508 <MX_GPIO_Init+0x160>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	4a50      	ldr	r2, [pc, #320]	; (8005508 <MX_GPIO_Init+0x160>)
 80053c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053cc:	6313      	str	r3, [r2, #48]	; 0x30
 80053ce:	4b4e      	ldr	r3, [pc, #312]	; (8005508 <MX_GPIO_Init+0x160>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	4b4a      	ldr	r3, [pc, #296]	; (8005508 <MX_GPIO_Init+0x160>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	4a49      	ldr	r2, [pc, #292]	; (8005508 <MX_GPIO_Init+0x160>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <MX_GPIO_Init+0x160>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	4b43      	ldr	r3, [pc, #268]	; (8005508 <MX_GPIO_Init+0x160>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4a42      	ldr	r2, [pc, #264]	; (8005508 <MX_GPIO_Init+0x160>)
 8005400:	f043 0310 	orr.w	r3, r3, #16
 8005404:	6313      	str	r3, [r2, #48]	; 0x30
 8005406:	4b40      	ldr	r3, [pc, #256]	; (8005508 <MX_GPIO_Init+0x160>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]
 8005416:	4b3c      	ldr	r3, [pc, #240]	; (8005508 <MX_GPIO_Init+0x160>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4a3b      	ldr	r2, [pc, #236]	; (8005508 <MX_GPIO_Init+0x160>)
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	6313      	str	r3, [r2, #48]	; 0x30
 8005422:	4b39      	ldr	r3, [pc, #228]	; (8005508 <MX_GPIO_Init+0x160>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	607b      	str	r3, [r7, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4b35      	ldr	r3, [pc, #212]	; (8005508 <MX_GPIO_Init+0x160>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	4a34      	ldr	r2, [pc, #208]	; (8005508 <MX_GPIO_Init+0x160>)
 8005438:	f043 0308 	orr.w	r3, r3, #8
 800543c:	6313      	str	r3, [r2, #48]	; 0x30
 800543e:	4b32      	ldr	r3, [pc, #200]	; (8005508 <MX_GPIO_Init+0x160>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 800544a:	2200      	movs	r2, #0
 800544c:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8005450:	482e      	ldr	r0, [pc, #184]	; (800550c <MX_GPIO_Init+0x164>)
 8005452:	f007 f8f5 	bl	800c640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8005456:	2200      	movs	r2, #0
 8005458:	f641 0148 	movw	r1, #6216	; 0x1848
 800545c:	482c      	ldr	r0, [pc, #176]	; (8005510 <MX_GPIO_Init+0x168>)
 800545e:	f007 f8ef 	bl	800c640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8005462:	2200      	movs	r2, #0
 8005464:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005468:	482a      	ldr	r0, [pc, #168]	; (8005514 <MX_GPIO_Init+0x16c>)
 800546a:	f007 f8e9 	bl	800c640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 800546e:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8005472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005474:	2301      	movs	r3, #1
 8005476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547c:	2300      	movs	r3, #0
 800547e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005480:	f107 0314 	add.w	r3, r7, #20
 8005484:	4619      	mov	r1, r3
 8005486:	4821      	ldr	r0, [pc, #132]	; (800550c <MX_GPIO_Init+0x164>)
 8005488:	f006 ff3e 	bl	800c308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 800548c:	f640 0348 	movw	r3, #2120	; 0x848
 8005490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005492:	2301      	movs	r3, #1
 8005494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549a:	2300      	movs	r3, #0
 800549c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800549e:	f107 0314 	add.w	r3, r7, #20
 80054a2:	4619      	mov	r1, r3
 80054a4:	481a      	ldr	r0, [pc, #104]	; (8005510 <MX_GPIO_Init+0x168>)
 80054a6:	f006 ff2f 	bl	800c308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 80054aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054b0:	2301      	movs	r3, #1
 80054b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054b8:	2303      	movs	r3, #3
 80054ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	4619      	mov	r1, r3
 80054c2:	4813      	ldr	r0, [pc, #76]	; (8005510 <MX_GPIO_Init+0x168>)
 80054c4:	f006 ff20 	bl	800c308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 80054c8:	f242 0304 	movw	r3, #8196	; 0x2004
 80054cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054d2:	2301      	movs	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054d6:	f107 0314 	add.w	r3, r7, #20
 80054da:	4619      	mov	r1, r3
 80054dc:	480c      	ldr	r0, [pc, #48]	; (8005510 <MX_GPIO_Init+0x168>)
 80054de:	f006 ff13 	bl	800c308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 80054e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80054e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054e8:	2301      	movs	r3, #1
 80054ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f0:	2300      	movs	r3, #0
 80054f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	4619      	mov	r1, r3
 80054fa:	4806      	ldr	r0, [pc, #24]	; (8005514 <MX_GPIO_Init+0x16c>)
 80054fc:	f006 ff04 	bl	800c308 <HAL_GPIO_Init>

}
 8005500:	bf00      	nop
 8005502:	3728      	adds	r7, #40	; 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40023800 	.word	0x40023800
 800550c:	40020400 	.word	0x40020400
 8005510:	40020c00 	.word	0x40020c00
 8005514:	40020000 	.word	0x40020000

08005518 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8005518:	b5b0      	push	{r4, r5, r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005526:	eeb0 0a47 	vmov.f32	s0, s14
 800552a:	eef0 0a67 	vmov.f32	s1, s15
 800552e:	f015 fb87 	bl	801ac40 <cos>
 8005532:	ec51 0b10 	vmov	r0, r1, d0
 8005536:	a382      	add	r3, pc, #520	; (adr r3, 8005740 <kinematicForward+0x228>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f7fb f85c 	bl	80005f8 <__aeabi_dmul>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4614      	mov	r4, r2
 8005546:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005554:	f7fa fe9a 	bl	800028c <__adddf3>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	ec43 2b17 	vmov	d7, r2, r3
 8005560:	eeb0 0a47 	vmov.f32	s0, s14
 8005564:	eef0 0a67 	vmov.f32	s1, s15
 8005568:	f015 fb6a 	bl	801ac40 <cos>
 800556c:	ec51 0b10 	vmov	r0, r1, d0
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	4b78      	ldr	r3, [pc, #480]	; (8005758 <kinematicForward+0x240>)
 8005576:	f7fb f83f 	bl	80005f8 <__aeabi_dmul>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4620      	mov	r0, r4
 8005580:	4629      	mov	r1, r5
 8005582:	f7fa fe83 	bl	800028c <__adddf3>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4614      	mov	r4, r2
 800558c:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800559a:	f7fa fe77 	bl	800028c <__adddf3>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80055ac:	f7fa fe6c 	bl	8000288 <__aeabi_dsub>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	ec43 2b17 	vmov	d7, r2, r3
 80055b8:	eeb0 0a47 	vmov.f32	s0, s14
 80055bc:	eef0 0a67 	vmov.f32	s1, s15
 80055c0:	f015 fb3e 	bl	801ac40 <cos>
 80055c4:	ec51 0b10 	vmov	r0, r1, d0
 80055c8:	a35b      	add	r3, pc, #364	; (adr r3, 8005738 <kinematicForward+0x220>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fb f813 	bl	80005f8 <__aeabi_dmul>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fa fe57 	bl	800028c <__adddf3>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80055ec:	eeb0 0a47 	vmov.f32	s0, s14
 80055f0:	eef0 0a67 	vmov.f32	s1, s15
 80055f4:	f015 fbbc 	bl	801ad70 <sin>
 80055f8:	ec51 0b10 	vmov	r0, r1, d0
 80055fc:	a350      	add	r3, pc, #320	; (adr r3, 8005740 <kinematicForward+0x228>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fa fff9 	bl	80005f8 <__aeabi_dmul>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4614      	mov	r4, r2
 800560c:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800561a:	f7fa fe37 	bl	800028c <__adddf3>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	ec43 2b17 	vmov	d7, r2, r3
 8005626:	eeb0 0a47 	vmov.f32	s0, s14
 800562a:	eef0 0a67 	vmov.f32	s1, s15
 800562e:	f015 fb9f 	bl	801ad70 <sin>
 8005632:	ec51 0b10 	vmov	r0, r1, d0
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	4b47      	ldr	r3, [pc, #284]	; (8005758 <kinematicForward+0x240>)
 800563c:	f7fa ffdc 	bl	80005f8 <__aeabi_dmul>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4620      	mov	r0, r4
 8005646:	4629      	mov	r1, r5
 8005648:	f7fa fe20 	bl	800028c <__adddf3>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4614      	mov	r4, r2
 8005652:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005660:	f7fa fe14 	bl	800028c <__adddf3>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4610      	mov	r0, r2
 800566a:	4619      	mov	r1, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005672:	f7fa fe09 	bl	8000288 <__aeabi_dsub>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	ec43 2b17 	vmov	d7, r2, r3
 800567e:	eeb0 0a47 	vmov.f32	s0, s14
 8005682:	eef0 0a67 	vmov.f32	s1, s15
 8005686:	f015 fb73 	bl	801ad70 <sin>
 800568a:	ec51 0b10 	vmov	r0, r1, d0
 800568e:	a32a      	add	r3, pc, #168	; (adr r3, 8005738 <kinematicForward+0x220>)
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f7fa ffb0 	bl	80005f8 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fa fdf4 	bl	800028c <__adddf3>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80056b2:	a125      	add	r1, pc, #148	; (adr r1, 8005748 <kinematicForward+0x230>)
 80056b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056b8:	f7fa fde6 	bl	8000288 <__aeabi_dsub>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	a322      	add	r3, pc, #136	; (adr r3, 8005750 <kinematicForward+0x238>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f7fa fddd 	bl	8000288 <__aeabi_dsub>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80056e2:	f7fa fdd3 	bl	800028c <__adddf3>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80056f4:	f7fa fdc8 	bl	8000288 <__aeabi_dsub>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005706:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800571a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005724:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 8005728:	2301      	movs	r3, #1
}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bdb0      	pop	{r4, r5, r7, pc}
 8005732:	bf00      	nop
 8005734:	f3af 8000 	nop.w
 8005738:	80000000 	.word	0x80000000
 800573c:	40402e14 	.word	0x40402e14
 8005740:	00000000 	.word	0x00000000
 8005744:	4068a000 	.word	0x4068a000
 8005748:	00000000 	.word	0x00000000
 800574c:	406a6000 	.word	0x406a6000
 8005750:	e0000000 	.word	0xe0000000
 8005754:	40536b22 	.word	0x40536b22
 8005758:	40640000 	.word	0x40640000
 800575c:	00000000 	.word	0x00000000

08005760 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005760:	b082      	sub	sp, #8
 8005762:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005766:	b0a0      	sub	sp, #128	; 0x80
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8005770:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800577a:	a1f0      	add	r1, pc, #960	; (adr r1, 8005b3c <kinematicInverse+0x3dc>)
 800577c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005780:	f7fa fd82 	bl	8000288 <__aeabi_dsub>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8005798:	eeb0 0a47 	vmov.f32	s0, s14
 800579c:	eef0 0a67 	vmov.f32	s1, s15
 80057a0:	f015 fa4e 	bl	801ac40 <cos>
 80057a4:	ec51 0b10 	vmov	r0, r1, d0
 80057a8:	a3e6      	add	r3, pc, #920	; (adr r3, 8005b44 <kinematicInverse+0x3e4>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa ff23 	bl	80005f8 <__aeabi_dmul>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4650      	mov	r0, sl
 80057b8:	4659      	mov	r1, fp
 80057ba:	f7fa fd65 	bl	8000288 <__aeabi_dsub>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80057d2:	eeb0 0a47 	vmov.f32	s0, s14
 80057d6:	eef0 0a67 	vmov.f32	s1, s15
 80057da:	f015 fac9 	bl	801ad70 <sin>
 80057de:	ec51 0b10 	vmov	r0, r1, d0
 80057e2:	a3d8      	add	r3, pc, #864	; (adr r3, 8005b44 <kinematicInverse+0x3e4>)
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f7fa ff06 	bl	80005f8 <__aeabi_dmul>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4650      	mov	r0, sl
 80057f2:	4659      	mov	r1, fp
 80057f4:	f7fa fd48 	bl	8000288 <__aeabi_dsub>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8005800:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005804:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005808:	f7fa fef6 	bl	80005f8 <__aeabi_dmul>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4692      	mov	sl, r2
 8005812:	469b      	mov	fp, r3
 8005814:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005818:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800581c:	f7fa feec 	bl	80005f8 <__aeabi_dmul>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4650      	mov	r0, sl
 8005826:	4659      	mov	r1, fp
 8005828:	f7fa fd30 	bl	800028c <__adddf3>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
 8005834:	a3c5      	add	r3, pc, #788	; (adr r3, 8005b4c <kinematicInverse+0x3ec>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fd25 	bl	8000288 <__aeabi_dsub>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4610      	mov	r0, r2
 8005844:	4619      	mov	r1, r3
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	4bb9      	ldr	r3, [pc, #740]	; (8005b30 <kinematicInverse+0x3d0>)
 800584c:	f7fa fd1c 	bl	8000288 <__aeabi_dsub>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4610      	mov	r0, r2
 8005856:	4619      	mov	r1, r3
 8005858:	a3b1      	add	r3, pc, #708	; (adr r3, 8005b20 <kinematicInverse+0x3c0>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f7fa fff5 	bl	800084c <__aeabi_ddiv>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800586a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800586e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005872:	f7fa fec1 	bl	80005f8 <__aeabi_dmul>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	f04f 0000 	mov.w	r0, #0
 800587e:	49ad      	ldr	r1, [pc, #692]	; (8005b34 <kinematicInverse+0x3d4>)
 8005880:	f7fa fd02 	bl	8000288 <__aeabi_dsub>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005898:	f7fb f920 	bl	8000adc <__aeabi_dcmplt>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <kinematicInverse+0x146>
		return FALSE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e134      	b.n	8005b10 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80058a6:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80058aa:	f015 faf9 	bl	801aea0 <sqrt>
 80058ae:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80058b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80058be:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80058c2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80058c6:	f015 fae9 	bl	801ae9c <atan2>
 80058ca:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80058ce:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80058d2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80058d6:	f015 fae1 	bl	801ae9c <atan2>
 80058da:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80058de:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80058e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80058e6:	f7fa fccf 	bl	8000288 <__aeabi_dsub>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4614      	mov	r4, r2
 80058f0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80058f4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80058f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058fc:	f7fa fcc4 	bl	8000288 <__aeabi_dsub>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4690      	mov	r8, r2
 8005906:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800590a:	4642      	mov	r2, r8
 800590c:	464b      	mov	r3, r9
 800590e:	4620      	mov	r0, r4
 8005910:	4629      	mov	r1, r5
 8005912:	f7fb f8ed 	bl	8000af0 <__aeabi_dcmple>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 800591c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005920:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8005924:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005928:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800592c:	e007      	b.n	800593e <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 800592e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005932:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8005936:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800593a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	4b7d      	ldr	r3, [pc, #500]	; (8005b38 <kinematicInverse+0x3d8>)
 8005944:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005948:	f7fa fe56 	bl	80005f8 <__aeabi_dmul>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4610      	mov	r0, r2
 8005952:	4619      	mov	r1, r3
 8005954:	a374      	add	r3, pc, #464	; (adr r3, 8005b28 <kinematicInverse+0x3c8>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f7fa fc97 	bl	800028c <__adddf3>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4610      	mov	r0, r2
 8005964:	4619      	mov	r1, r3
 8005966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800596a:	f7fa fe45 	bl	80005f8 <__aeabi_dmul>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4614      	mov	r4, r2
 8005974:	461d      	mov	r5, r3
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	4b6f      	ldr	r3, [pc, #444]	; (8005b38 <kinematicInverse+0x3d8>)
 800597c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005980:	f7fa fe3a 	bl	80005f8 <__aeabi_dmul>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4610      	mov	r0, r2
 800598a:	4619      	mov	r1, r3
 800598c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005990:	f7fa fe32 	bl	80005f8 <__aeabi_dmul>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4620      	mov	r0, r4
 800599a:	4629      	mov	r1, r5
 800599c:	f7fa fc74 	bl	8000288 <__aeabi_dsub>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4614      	mov	r4, r2
 80059a6:	461d      	mov	r5, r3
 80059a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80059ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059b0:	f7fa fe22 	bl	80005f8 <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4690      	mov	r8, r2
 80059ba:	4699      	mov	r9, r3
 80059bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059c4:	f7fa fe18 	bl	80005f8 <__aeabi_dmul>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4640      	mov	r0, r8
 80059ce:	4649      	mov	r1, r9
 80059d0:	f7fa fc5c 	bl	800028c <__adddf3>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fa ff36 	bl	800084c <__aeabi_ddiv>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	4b52      	ldr	r3, [pc, #328]	; (8005b38 <kinematicInverse+0x3d8>)
 80059ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059f2:	f7fa fe01 	bl	80005f8 <__aeabi_dmul>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4610      	mov	r0, r2
 80059fc:	4619      	mov	r1, r3
 80059fe:	a34a      	add	r3, pc, #296	; (adr r3, 8005b28 <kinematicInverse+0x3c8>)
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fc42 	bl	800028c <__adddf3>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a14:	f7fa fdf0 	bl	80005f8 <__aeabi_dmul>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	461d      	mov	r5, r3
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	4b44      	ldr	r3, [pc, #272]	; (8005b38 <kinematicInverse+0x3d8>)
 8005a26:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005a2a:	f7fa fde5 	bl	80005f8 <__aeabi_dmul>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4610      	mov	r0, r2
 8005a34:	4619      	mov	r1, r3
 8005a36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a3a:	f7fa fddd 	bl	80005f8 <__aeabi_dmul>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4620      	mov	r0, r4
 8005a44:	4629      	mov	r1, r5
 8005a46:	f7fa fc21 	bl	800028c <__adddf3>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4614      	mov	r4, r2
 8005a50:	461d      	mov	r5, r3
 8005a52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a56:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a5a:	f7fa fdcd 	bl	80005f8 <__aeabi_dmul>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4690      	mov	r8, r2
 8005a64:	4699      	mov	r9, r3
 8005a66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a6e:	f7fa fdc3 	bl	80005f8 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4640      	mov	r0, r8
 8005a78:	4649      	mov	r1, r9
 8005a7a:	f7fa fc07 	bl	800028c <__adddf3>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4620      	mov	r0, r4
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7fa fee1 	bl	800084c <__aeabi_ddiv>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 8005a92:	ed97 1b06 	vldr	d1, [r7, #24]
 8005a96:	ed97 0b08 	vldr	d0, [r7, #32]
 8005a9a:	f015 f9ff 	bl	801ae9c <atan2>
 8005a9e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8005aa2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005aa6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005aaa:	f7fa fbef 	bl	800028c <__adddf3>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005abc:	f7fa fbe4 	bl	8000288 <__aeabi_dsub>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8005ac8:	ed97 3b02 	vldr	d3, [r7, #8]
 8005acc:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8005ad0:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8005ad4:	ed97 0b04 	vldr	d0, [r7, #16]
 8005ad8:	f004 fe1e 	bl	800a718 <scaraCheckWorkSpace4>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e014      	b.n	8005b10 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005aec:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005af6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005b00:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b0a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 8005b0e:	2301      	movs	r3, #1
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3780      	adds	r7, #128	; 0x80
 8005b14:	46bd      	mov	sp, r7
 8005b16:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b1a:	b002      	add	sp, #8
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	00000000 	.word	0x00000000
 8005b24:	40eec800 	.word	0x40eec800
 8005b28:	00000000 	.word	0x00000000
 8005b2c:	4068a000 	.word	0x4068a000
 8005b30:	40d90000 	.word	0x40d90000
 8005b34:	3ff00000 	.word	0x3ff00000
 8005b38:	40640000 	.word	0x40640000
 8005b3c:	80000000 	.word	0x80000000
 8005b40:	4060aa6e 	.word	0x4060aa6e
 8005b44:	80000000 	.word	0x80000000
 8005b48:	40402e14 	.word	0x40402e14
 8005b4c:	00000000 	.word	0x00000000
 8005b50:	40e2f320 	.word	0x40e2f320

08005b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b58:	f005 feee 	bl	800b938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b5c:	f000 f82a 	bl	8005bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b60:	f7ff fc22 	bl	80053a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005b64:	f7fc fdc6 	bl	80026f4 <MX_DMA_Init>
  MX_UART4_Init();
 8005b68:	f005 fde8 	bl	800b73c <MX_UART4_Init>
  MX_FSMC_Init();
 8005b6c:	f7fe fff0 	bl	8004b50 <MX_FSMC_Init>
  MX_TIM7_Init();
 8005b70:	f005 fd72 	bl	800b658 <MX_TIM7_Init>
  MX_TIM2_Init();
 8005b74:	f005 fd22 	bl	800b5bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)){
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <main+0x58>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10b      	bne.n	8005b9c <main+0x48>
  		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <main+0x58>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <main+0x58>)
 8005b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b8e:	60d3      	str	r3, [r2, #12]
  		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <main+0x5c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a06      	ldr	r2, [pc, #24]	; (8005bb0 <main+0x5c>)
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	6013      	str	r3, [r2, #0]
  	}
  	DWT->CYCCNT = 0;
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <main+0x5c>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005ba2:	f7fc fde1 	bl	8002768 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8005ba6:	f00c ff75 	bl	8012a94 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8005baa:	e7fe      	b.n	8005baa <main+0x56>
 8005bac:	e000edf0 	.word	0xe000edf0
 8005bb0:	e0001000 	.word	0xe0001000

08005bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b094      	sub	sp, #80	; 0x50
 8005bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bba:	f107 0320 	add.w	r3, r7, #32
 8005bbe:	2230      	movs	r2, #48	; 0x30
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f010 fb84 	bl	80162d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005bc8:	f107 030c 	add.w	r3, r7, #12
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
 8005bd4:	60da      	str	r2, [r3, #12]
 8005bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <SystemClock_Config+0xcc>)
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <SystemClock_Config+0xcc>)
 8005be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be6:	6413      	str	r3, [r2, #64]	; 0x40
 8005be8:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <SystemClock_Config+0xcc>)
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	4b22      	ldr	r3, [pc, #136]	; (8005c84 <SystemClock_Config+0xd0>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a21      	ldr	r2, [pc, #132]	; (8005c84 <SystemClock_Config+0xd0>)
 8005bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <SystemClock_Config+0xd0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c10:	2301      	movs	r3, #1
 8005c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005c24:	2308      	movs	r3, #8
 8005c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005c28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005c2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005c32:	2307      	movs	r3, #7
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c36:	f107 0320 	add.w	r3, r7, #32
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f007 fef4 	bl	800da28 <HAL_RCC_OscConfig>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005c46:	f000 f831 	bl	8005cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c4a:	230f      	movs	r3, #15
 8005c4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005c56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005c62:	f107 030c 	add.w	r3, r7, #12
 8005c66:	2105      	movs	r1, #5
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f008 f94d 	bl	800df08 <HAL_RCC_ClockConfig>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005c74:	f000 f81a 	bl	8005cac <Error_Handler>
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3750      	adds	r7, #80	; 0x50
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	40007000 	.word	0x40007000

08005c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005c9a:	f005 fe6f 	bl	800b97c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40001000 	.word	0x40001000

08005cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ccc:	3308      	adds	r3, #8
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <ringBuff_PushChar+0x1e>
		return FALSE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e02e      	b.n	8005d36 <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	78f9      	ldrb	r1, [r7, #3]
 8005ce4:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	425a      	negs	r2, r3
 8005cf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cf6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005cfa:	bf58      	it	pl
 8005cfc:	4253      	negpl	r3, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005d04:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d14:	3304      	adds	r3, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d105      	bne.n	8005d28 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d22:	3308      	adds	r3, #8
 8005d24:	2201      	movs	r2, #1
 8005d26:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d2e:	3309      	adds	r3, #9
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005d34:	2301      	movs	r3, #1
	}
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d52:	3309      	adds	r3, #9
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <ringBuff_PopChar+0x1c>
		return FALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e032      	b.n	8005dc4 <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d64:	3304      	adds	r3, #4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	5cd2      	ldrb	r2, [r2, r3]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d76:	3304      	adds	r3, #4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	4259      	negs	r1, r3
 8005d7e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005d82:	f3c1 030c 	ubfx	r3, r1, #0, #13
 8005d86:	bf58      	it	pl
 8005d88:	425a      	negpl	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d90:	3304      	adds	r3, #4
 8005d92:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005da2:	3304      	adds	r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d105      	bne.n	8005db6 <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005db0:	3309      	adds	r3, #9
 8005db2:	2201      	movs	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005dc2:	2301      	movs	r3, #1
	}
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005ddc:	2300      	movs	r3, #0
 8005dde:	82fb      	strh	r3, [r7, #22]
 8005de0:	e011      	b.n	8005e06 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005de2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	4413      	add	r3, r2
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	4619      	mov	r1, r3
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff ff63 	bl	8005cba <ringBuff_PushChar>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8005dfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3301      	adds	r3, #1
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	82fb      	strh	r3, [r7, #22]
 8005e06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	dce8      	bgt.n	8005de2 <ringBuff_PushArray+0x12>
 8005e10:	e000      	b.n	8005e14 <ringBuff_PushArray+0x44>
			break;
 8005e12:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005e14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e00c      	b.n	8005e4c <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	4413      	add	r3, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff ff81 	bl	8005d42 <ringBuff_PopChar>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	dbee      	blt.n	8005e32 <ringBuff_PopArray+0x12>
 8005e54:	e000      	b.n	8005e58 <ringBuff_PopArray+0x38>
			break;
 8005e56:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8005e58:	697b      	ldr	r3, [r7, #20]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b088      	sub	sp, #32
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e72:	3304      	adds	r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f7fa f9a0 	bl	80001d0 <strlen>
 8005e90:	4603      	mov	r3, r0
 8005e92:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d066      	beq.n	8005f70 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	e030      	b.n	8005f0a <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	781a      	ldrb	r2, [r3, #0]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	440b      	add	r3, r1
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d103      	bne.n	8005ec4 <ringBuff_DistanceOf+0x62>
	                sync_state++;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e00c      	b.n	8005ede <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d102      	bne.n	8005eda <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e001      	b.n	8005ede <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d101      	bne.n	8005eea <ringBuff_DistanceOf+0x88>
	                return distance;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	e048      	b.n	8005f7c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	3301      	adds	r3, #1
 8005eee:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	425a      	negs	r2, r3
 8005efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f00:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005f04:	bf58      	it	pl
 8005f06:	4253      	negpl	r3, r2
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	dbca      	blt.n	8005ea8 <ringBuff_DistanceOf+0x46>
 8005f12:	e031      	b.n	8005f78 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	781a      	ldrb	r2, [r3, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	440b      	add	r3, r1
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d103      	bne.n	8005f30 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e00c      	b.n	8005f4a <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d102      	bne.n	8005f46 <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e001      	b.n	8005f4a <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d101      	bne.n	8005f56 <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	e012      	b.n	8005f7c <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	425a      	negs	r2, r3
 8005f62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f66:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005f6a:	bf58      	it	pl
 8005f6c:	4253      	negpl	r3, r2
 8005f6e:	61fb      	str	r3, [r7, #28]
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d1cd      	bne.n	8005f14 <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005f88:	f000 fdfe 	bl	8006b88 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <lowlayer_scanReset+0x4c>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005f92:	4b0f      	ldr	r3, [pc, #60]	; (8005fd0 <lowlayer_scanReset+0x4c>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <lowlayer_scanReset+0x4c>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <lowlayer_scanReset+0x4c>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <lowlayer_scanReset+0x50>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <lowlayer_scanReset+0x50>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <lowlayer_scanReset+0x50>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <lowlayer_scanReset+0x54>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <lowlayer_scanReset+0x58>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2108      	movs	r1, #8
 8005fc6:	4806      	ldr	r0, [pc, #24]	; (8005fe0 <lowlayer_scanReset+0x5c>)
 8005fc8:	f006 fb3a 	bl	800c640 <HAL_GPIO_WritePin>
}
 8005fcc:	bf00      	nop
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	2000fed8 	.word	0x2000fed8
 8005fd4:	2000feec 	.word	0x2000feec
 8005fd8:	2000fee8 	.word	0x2000fee8
 8005fdc:	2000ff08 	.word	0x2000ff08
 8005fe0:	40020c00 	.word	0x40020c00
 8005fe4:	00000000 	.word	0x00000000

08005fe8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005fee:	2300      	movs	r3, #0
 8005ff0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005ff2:	f000 fe87 	bl	8006d04 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005ff6:	4b96      	ldr	r3, [pc, #600]	; (8006250 <lowlayer_scanFlow+0x268>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d837      	bhi.n	800606e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8005ffe:	4b94      	ldr	r3, [pc, #592]	; (8006250 <lowlayer_scanFlow+0x268>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	f1c3 0303 	rsb	r3, r3, #3
 8006006:	4a93      	ldr	r2, [pc, #588]	; (8006254 <lowlayer_scanFlow+0x26c>)
 8006008:	5cd3      	ldrb	r3, [r2, r3]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d121      	bne.n	8006052 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 800600e:	4b90      	ldr	r3, [pc, #576]	; (8006250 <lowlayer_scanFlow+0x268>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f1c3 0203 	rsb	r2, r3, #3
 8006016:	4b8e      	ldr	r3, [pc, #568]	; (8006250 <lowlayer_scanFlow+0x268>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f1c3 0303 	rsb	r3, r3, #3
 800601e:	498e      	ldr	r1, [pc, #568]	; (8006258 <lowlayer_scanFlow+0x270>)
 8006020:	568a      	ldrsb	r2, [r1, r2]
 8006022:	f107 0108 	add.w	r1, r7, #8
 8006026:	440b      	add	r3, r1
 8006028:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 800602c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	425b      	negs	r3, r3
 8006034:	b2db      	uxtb	r3, r3
 8006036:	b258      	sxtb	r0, r3
 8006038:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800603c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	425b      	negs	r3, r3
 8006044:	b2db      	uxtb	r3, r3
 8006046:	b25a      	sxtb	r2, r3
 8006048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604c:	f000 fcd8 	bl	8006a00 <lowlayer_writePulse>
 8006050:	e00b      	b.n	800606a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8006052:	4b7f      	ldr	r3, [pc, #508]	; (8006250 <lowlayer_scanFlow+0x268>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	3301      	adds	r3, #1
 8006058:	b2da      	uxtb	r2, r3
 800605a:	4b7d      	ldr	r3, [pc, #500]	; (8006250 <lowlayer_scanFlow+0x268>)
 800605c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 800605e:	2300      	movs	r3, #0
 8006060:	2200      	movs	r2, #0
 8006062:	2100      	movs	r1, #0
 8006064:	2000      	movs	r0, #0
 8006066:	f000 fccb 	bl	8006a00 <lowlayer_writePulse>
		}

		return FALSE;
 800606a:	2300      	movs	r3, #0
 800606c:	e0d2      	b.n	8006214 <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 800606e:	2201      	movs	r2, #1
 8006070:	2108      	movs	r1, #8
 8006072:	487a      	ldr	r0, [pc, #488]	; (800625c <lowlayer_scanFlow+0x274>)
 8006074:	f006 fae4 	bl	800c640 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8006078:	f000 fe28 	bl	8006ccc <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 800607c:	2300      	movs	r3, #0
 800607e:	2200      	movs	r2, #0
 8006080:	2100      	movs	r1, #0
 8006082:	2000      	movs	r0, #0
 8006084:	f000 fcbc 	bl	8006a00 <lowlayer_writePulse>
		scan_flag = 1;
 8006088:	4b75      	ldr	r3, [pc, #468]	; (8006260 <lowlayer_scanFlow+0x278>)
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 800608e:	4b75      	ldr	r3, [pc, #468]	; (8006264 <lowlayer_scanFlow+0x27c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a75      	ldr	r2, [pc, #468]	; (8006268 <lowlayer_scanFlow+0x280>)
 8006094:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8006096:	4b73      	ldr	r3, [pc, #460]	; (8006264 <lowlayer_scanFlow+0x27c>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	4a73      	ldr	r2, [pc, #460]	; (8006268 <lowlayer_scanFlow+0x280>)
 800609c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 800609e:	4b71      	ldr	r3, [pc, #452]	; (8006264 <lowlayer_scanFlow+0x27c>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4a71      	ldr	r2, [pc, #452]	; (8006268 <lowlayer_scanFlow+0x280>)
 80060a4:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 80060a6:	4b71      	ldr	r3, [pc, #452]	; (800626c <lowlayer_scanFlow+0x284>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	4a71      	ldr	r2, [pc, #452]	; (8006270 <lowlayer_scanFlow+0x288>)
 80060ac:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 80060ae:	4b6e      	ldr	r3, [pc, #440]	; (8006268 <lowlayer_scanFlow+0x280>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4619      	mov	r1, r3
 80060b6:	486f      	ldr	r0, [pc, #444]	; (8006274 <lowlayer_scanFlow+0x28c>)
 80060b8:	f7fc fa66 	bl	8002588 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 80060bc:	4b6a      	ldr	r3, [pc, #424]	; (8006268 <lowlayer_scanFlow+0x280>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	4619      	mov	r1, r3
 80060c4:	486c      	ldr	r0, [pc, #432]	; (8006278 <lowlayer_scanFlow+0x290>)
 80060c6:	f7fc fa5f 	bl	8002588 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 80060ca:	4b67      	ldr	r3, [pc, #412]	; (8006268 <lowlayer_scanFlow+0x280>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4619      	mov	r1, r3
 80060d2:	486a      	ldr	r0, [pc, #424]	; (800627c <lowlayer_scanFlow+0x294>)
 80060d4:	f7fc fa58 	bl	8002588 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 80060d8:	4b65      	ldr	r3, [pc, #404]	; (8006270 <lowlayer_scanFlow+0x288>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	4619      	mov	r1, r3
 80060e0:	4867      	ldr	r0, [pc, #412]	; (8006280 <lowlayer_scanFlow+0x298>)
 80060e2:	f7fc fa51 	bl	8002588 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 80060e6:	4b60      	ldr	r3, [pc, #384]	; (8006268 <lowlayer_scanFlow+0x280>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060f2:	ee17 0a90 	vmov	r0, s15
 80060f6:	f7fa fa27 	bl	8000548 <__aeabi_f2d>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	f7fa f8c5 	bl	800028c <__adddf3>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	a345      	add	r3, pc, #276	; (adr r3, 8006220 <lowlayer_scanFlow+0x238>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f7fa fa72 	bl	80005f8 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4610      	mov	r0, r2
 800611a:	4619      	mov	r1, r3
 800611c:	a342      	add	r3, pc, #264	; (adr r3, 8006228 <lowlayer_scanFlow+0x240>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa fb93 	bl	800084c <__aeabi_ddiv>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	a141      	add	r1, pc, #260	; (adr r1, 8006230 <lowlayer_scanFlow+0x248>)
 800612c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006130:	f7fa f8aa 	bl	8000288 <__aeabi_dsub>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8006138:	4952      	ldr	r1, [pc, #328]	; (8006284 <lowlayer_scanFlow+0x29c>)
 800613a:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 800613e:	4b4a      	ldr	r3, [pc, #296]	; (8006268 <lowlayer_scanFlow+0x280>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800614a:	ee17 0a90 	vmov	r0, s15
 800614e:	f7fa f9fb 	bl	8000548 <__aeabi_f2d>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	f7fa f899 	bl	800028c <__adddf3>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4610      	mov	r0, r2
 8006160:	4619      	mov	r1, r3
 8006162:	a32f      	add	r3, pc, #188	; (adr r3, 8006220 <lowlayer_scanFlow+0x238>)
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	f7fa fa46 	bl	80005f8 <__aeabi_dmul>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4610      	mov	r0, r2
 8006172:	4619      	mov	r1, r3
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	4b43      	ldr	r3, [pc, #268]	; (8006288 <lowlayer_scanFlow+0x2a0>)
 800617a:	f7fa fb67 	bl	800084c <__aeabi_ddiv>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	a12d      	add	r1, pc, #180	; (adr r1, 8006238 <lowlayer_scanFlow+0x250>)
 8006184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006188:	f7fa f87e 	bl	8000288 <__aeabi_dsub>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8006190:	493c      	ldr	r1, [pc, #240]	; (8006284 <lowlayer_scanFlow+0x29c>)
 8006192:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8006196:	4b34      	ldr	r3, [pc, #208]	; (8006268 <lowlayer_scanFlow+0x280>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061a2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800628c <lowlayer_scanFlow+0x2a4>
 80061a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061aa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006290 <lowlayer_scanFlow+0x2a8>
 80061ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061b2:	ee17 0a90 	vmov	r0, s15
 80061b6:	f7fa f9c7 	bl	8000548 <__aeabi_f2d>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 80061be:	4931      	ldr	r1, [pc, #196]	; (8006284 <lowlayer_scanFlow+0x29c>)
 80061c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 80061c4:	4b2a      	ldr	r3, [pc, #168]	; (8006270 <lowlayer_scanFlow+0x288>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fa f9ab 	bl	8000524 <__aeabi_i2d>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	f7fa f85b 	bl	800028c <__adddf3>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	a310      	add	r3, pc, #64	; (adr r3, 8006220 <lowlayer_scanFlow+0x238>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa fa08 	bl	80005f8 <__aeabi_dmul>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4610      	mov	r0, r2
 80061ee:	4619      	mov	r1, r3
 80061f0:	a313      	add	r3, pc, #76	; (adr r3, 8006240 <lowlayer_scanFlow+0x258>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7fa fb29 	bl	800084c <__aeabi_ddiv>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	a112      	add	r1, pc, #72	; (adr r1, 8006248 <lowlayer_scanFlow+0x260>)
 8006200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006204:	f7fa f840 	bl	8000288 <__aeabi_dsub>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 800620c:	491d      	ldr	r1, [pc, #116]	; (8006284 <lowlayer_scanFlow+0x29c>)
 800620e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 8006212:	2301      	movs	r3, #1
	}
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	f3af 8000 	nop.w
 8006220:	60000000 	.word	0x60000000
 8006224:	400921fb 	.word	0x400921fb
 8006228:	00000000 	.word	0x00000000
 800622c:	40f38800 	.word	0x40f38800
 8006230:	40000000 	.word	0x40000000
 8006234:	bff9f17a 	.word	0xbff9f17a
 8006238:	80000000 	.word	0x80000000
 800623c:	40039716 	.word	0x40039716
 8006240:	a0000000 	.word	0xa0000000
 8006244:	40d3bca1 	.word	0x40d3bca1
 8006248:	a0000000 	.word	0xa0000000
 800624c:	4008330d 	.word	0x4008330d
 8006250:	2000ff08 	.word	0x2000ff08
 8006254:	2000fef8 	.word	0x2000fef8
 8006258:	0801c7fc 	.word	0x0801c7fc
 800625c:	40020c00 	.word	0x40020c00
 8006260:	2000fee8 	.word	0x2000fee8
 8006264:	2000fefc 	.word	0x2000fefc
 8006268:	2000ff30 	.word	0x2000ff30
 800626c:	2000fed8 	.word	0x2000fed8
 8006270:	2000ff0c 	.word	0x2000ff0c
 8006274:	0801c724 	.word	0x0801c724
 8006278:	0801c738 	.word	0x0801c738
 800627c:	0801c74c 	.word	0x0801c74c
 8006280:	0801c760 	.word	0x0801c760
 8006284:	2000ff10 	.word	0x2000ff10
 8006288:	40ff4000 	.word	0x40ff4000
 800628c:	4426aaab 	.word	0x4426aaab
 8006290:	400f1aa0 	.word	0x400f1aa0
 8006294:	00000000 	.word	0x00000000

08006298 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 80062a0:	2300      	movs	r3, #0
 80062a2:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f94d 	bl	8006548 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80062b4:	a330      	add	r3, pc, #192	; (adr r3, 8006378 <lowlayer_goToSoftLimit+0xe0>)
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f7fa fc0f 	bl	8000adc <__aeabi_dcmplt>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 80062c4:	2303      	movs	r3, #3
 80062c6:	723b      	strb	r3, [r7, #8]
		check++;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	3301      	adds	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80062d4:	a32a      	add	r3, pc, #168	; (adr r3, 8006380 <lowlayer_goToSoftLimit+0xe8>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7fa fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 80062e4:	2305      	movs	r3, #5
 80062e6:	727b      	strb	r3, [r7, #9]
		check++;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	3301      	adds	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	f7fa fbee 	bl	8000adc <__aeabi_dcmplt>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8006306:	2305      	movs	r3, #5
 8006308:	72bb      	strb	r3, [r7, #10]
		check++;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	3301      	adds	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8006316:	a31c      	add	r3, pc, #112	; (adr r3, 8006388 <lowlayer_goToSoftLimit+0xf0>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f7fa fbfc 	bl	8000b18 <__aeabi_dcmpgt>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d004      	beq.n	8006330 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8006326:	230a      	movs	r3, #10
 8006328:	72fb      	strb	r3, [r7, #11]
		check++;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	3301      	adds	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d013      	beq.n	800635e <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8006336:	f997 0008 	ldrsb.w	r0, [r7, #8]
 800633a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	425b      	negs	r3, r3
 8006342:	b2db      	uxtb	r3, r3
 8006344:	b259      	sxtb	r1, r3
 8006346:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800634a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	425b      	negs	r3, r3
 8006352:	b2db      	uxtb	r3, r3
 8006354:	b25b      	sxtb	r3, r3
 8006356:	f000 fb53 	bl	8006a00 <lowlayer_writePulse>
		return FALSE;
 800635a:	2300      	movs	r3, #0
 800635c:	e006      	b.n	800636c <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 800635e:	2300      	movs	r3, #0
 8006360:	2200      	movs	r2, #0
 8006362:	2100      	movs	r1, #0
 8006364:	2000      	movs	r0, #0
 8006366:	f000 fb4b 	bl	8006a00 <lowlayer_writePulse>
		return TRUE;
 800636a:	2301      	movs	r3, #1
	}
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	f3af 8000 	nop.w
 8006378:	daaaaaab 	.word	0xdaaaaaab
 800637c:	bff7bc89 	.word	0xbff7bc89
 8006380:	88000000 	.word	0x88000000
 8006384:	4002d97c 	.word	0x4002d97c
 8006388:	daaaaaab 	.word	0xdaaaaaab
 800638c:	4007bc89 	.word	0x4007bc89

08006390 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8006398:	f000 fc7c 	bl	8006c94 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 800639c:	4b62      	ldr	r3, [pc, #392]	; (8006528 <lowlayer_readTruePosition+0x198>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	4b62      	ldr	r3, [pc, #392]	; (800652c <lowlayer_readTruePosition+0x19c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ae:	ee17 0a90 	vmov	r0, s15
 80063b2:	f7fa f8c9 	bl	8000548 <__aeabi_f2d>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	f7f9 ff67 	bl	800028c <__adddf3>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	a34c      	add	r3, pc, #304	; (adr r3, 80064f8 <lowlayer_readTruePosition+0x168>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7fa f914 	bl	80005f8 <__aeabi_dmul>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4610      	mov	r0, r2
 80063d6:	4619      	mov	r1, r3
 80063d8:	a349      	add	r3, pc, #292	; (adr r3, 8006500 <lowlayer_readTruePosition+0x170>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f7fa fa35 	bl	800084c <__aeabi_ddiv>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	a347      	add	r3, pc, #284	; (adr r3, 8006508 <lowlayer_readTruePosition+0x178>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7f9 ff4a 	bl	8000288 <__aeabi_dsub>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 80063fe:	4b4a      	ldr	r3, [pc, #296]	; (8006528 <lowlayer_readTruePosition+0x198>)
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	4b4a      	ldr	r3, [pc, #296]	; (800652c <lowlayer_readTruePosition+0x19c>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	ee07 3a90 	vmov	s15, r3
 800640c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006410:	ee17 0a90 	vmov	r0, s15
 8006414:	f7fa f898 	bl	8000548 <__aeabi_f2d>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	f7f9 ff36 	bl	800028c <__adddf3>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4610      	mov	r0, r2
 8006426:	4619      	mov	r1, r3
 8006428:	a333      	add	r3, pc, #204	; (adr r3, 80064f8 <lowlayer_readTruePosition+0x168>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f7fa f8e3 	bl	80005f8 <__aeabi_dmul>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4610      	mov	r0, r2
 8006438:	4619      	mov	r1, r3
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	4b3c      	ldr	r3, [pc, #240]	; (8006530 <lowlayer_readTruePosition+0x1a0>)
 8006440:	f7fa fa04 	bl	800084c <__aeabi_ddiv>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4610      	mov	r0, r2
 800644a:	4619      	mov	r1, r3
 800644c:	a330      	add	r3, pc, #192	; (adr r3, 8006510 <lowlayer_readTruePosition+0x180>)
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	f7f9 ff1b 	bl	800028c <__adddf3>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8006460:	4b31      	ldr	r3, [pc, #196]	; (8006528 <lowlayer_readTruePosition+0x198>)
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	4b31      	ldr	r3, [pc, #196]	; (800652c <lowlayer_readTruePosition+0x19c>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006472:	eeb1 7a67 	vneg.f32	s14, s15
 8006476:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006534 <lowlayer_readTruePosition+0x1a4>
 800647a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800647e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006538 <lowlayer_readTruePosition+0x1a8>
 8006482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006486:	ee17 0a90 	vmov	r0, s15
 800648a:	f7fa f85d 	bl	8000548 <__aeabi_f2d>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8006498:	4b28      	ldr	r3, [pc, #160]	; (800653c <lowlayer_readTruePosition+0x1ac>)
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	4b28      	ldr	r3, [pc, #160]	; (8006540 <lowlayer_readTruePosition+0x1b0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fa f83e 	bl	8000524 <__aeabi_i2d>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	f7f9 feee 	bl	800028c <__adddf3>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	a30f      	add	r3, pc, #60	; (adr r3, 80064f8 <lowlayer_readTruePosition+0x168>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f7fa f89b 	bl	80005f8 <__aeabi_dmul>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	a313      	add	r3, pc, #76	; (adr r3, 8006518 <lowlayer_readTruePosition+0x188>)
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f7fa f9bc 	bl	800084c <__aeabi_ddiv>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4610      	mov	r0, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	a310      	add	r3, pc, #64	; (adr r3, 8006520 <lowlayer_readTruePosition+0x190>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7f9 fed3 	bl	800028c <__adddf3>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	60000000 	.word	0x60000000
 80064fc:	400921fb 	.word	0x400921fb
 8006500:	00000000 	.word	0x00000000
 8006504:	40f38800 	.word	0x40f38800
 8006508:	40000000 	.word	0x40000000
 800650c:	3ff9f17a 	.word	0x3ff9f17a
 8006510:	80000000 	.word	0x80000000
 8006514:	40039716 	.word	0x40039716
 8006518:	a0000000 	.word	0xa0000000
 800651c:	40d3bca1 	.word	0x40d3bca1
 8006520:	a0000000 	.word	0xa0000000
 8006524:	4008330d 	.word	0x4008330d
 8006528:	2000feec 	.word	0x2000feec
 800652c:	2000ff30 	.word	0x2000ff30
 8006530:	40ff4000 	.word	0x40ff4000
 8006534:	4426aaab 	.word	0x4426aaab
 8006538:	400f1aa0 	.word	0x400f1aa0
 800653c:	2000fed8 	.word	0x2000fed8
 8006540:	2000ff0c 	.word	0x2000ff0c
 8006544:	00000000 	.word	0x00000000

08006548 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8006548:	b5b0      	push	{r4, r5, r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8006550:	4b53      	ldr	r3, [pc, #332]	; (80066a0 <lowlayer_readSetPosition+0x158>)
 8006552:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006556:	4b53      	ldr	r3, [pc, #332]	; (80066a4 <lowlayer_readSetPosition+0x15c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7f9 ffe2 	bl	8000524 <__aeabi_i2d>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	f7f9 fe92 	bl	800028c <__adddf3>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4610      	mov	r0, r2
 800656e:	4619      	mov	r1, r3
 8006570:	a345      	add	r3, pc, #276	; (adr r3, 8006688 <lowlayer_readSetPosition+0x140>)
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f7fa f83f 	bl	80005f8 <__aeabi_dmul>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4610      	mov	r0, r2
 8006580:	4619      	mov	r1, r3
 8006582:	a343      	add	r3, pc, #268	; (adr r3, 8006690 <lowlayer_readSetPosition+0x148>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7fa f960 	bl	800084c <__aeabi_ddiv>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7f9 fe7a 	bl	800028c <__adddf3>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 80065a2:	4b3f      	ldr	r3, [pc, #252]	; (80066a0 <lowlayer_readSetPosition+0x158>)
 80065a4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80065a8:	4b3e      	ldr	r3, [pc, #248]	; (80066a4 <lowlayer_readSetPosition+0x15c>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7f9 ffb9 	bl	8000524 <__aeabi_i2d>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	f7f9 fe69 	bl	800028c <__adddf3>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	a331      	add	r3, pc, #196	; (adr r3, 8006688 <lowlayer_readSetPosition+0x140>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7fa f816 	bl	80005f8 <__aeabi_dmul>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4610      	mov	r0, r2
 80065d2:	4619      	mov	r1, r3
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	4b33      	ldr	r3, [pc, #204]	; (80066a8 <lowlayer_readSetPosition+0x160>)
 80065da:	f7fa f937 	bl	800084c <__aeabi_ddiv>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4620      	mov	r0, r4
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7f9 fe51 	bl	800028c <__adddf3>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80065f4:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <lowlayer_readSetPosition+0x158>)
 80065f6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80065fa:	4b2a      	ldr	r3, [pc, #168]	; (80066a4 <lowlayer_readSetPosition+0x15c>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006606:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80066ac <lowlayer_readSetPosition+0x164>
 800660a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800660e:	ee16 0a90 	vmov	r0, s13
 8006612:	f7f9 ff99 	bl	8000548 <__aeabi_f2d>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4620      	mov	r0, r4
 800661c:	4629      	mov	r1, r5
 800661e:	f7f9 fe35 	bl	800028c <__adddf3>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800662c:	4b1c      	ldr	r3, [pc, #112]	; (80066a0 <lowlayer_readSetPosition+0x158>)
 800662e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <lowlayer_readSetPosition+0x15c>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4618      	mov	r0, r3
 8006638:	f7f9 ff74 	bl	8000524 <__aeabi_i2d>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	f7f9 fe24 	bl	800028c <__adddf3>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4610      	mov	r0, r2
 800664a:	4619      	mov	r1, r3
 800664c:	a30e      	add	r3, pc, #56	; (adr r3, 8006688 <lowlayer_readSetPosition+0x140>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7f9 ffd1 	bl	80005f8 <__aeabi_dmul>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	a30e      	add	r3, pc, #56	; (adr r3, 8006698 <lowlayer_readSetPosition+0x150>)
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f7fa f8f2 	bl	800084c <__aeabi_ddiv>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7f9 fe0c 	bl	800028c <__adddf3>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 800667e:	bf00      	nop
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bdb0      	pop	{r4, r5, r7, pc}
 8006686:	bf00      	nop
 8006688:	60000000 	.word	0x60000000
 800668c:	400921fb 	.word	0x400921fb
 8006690:	00000000 	.word	0x00000000
 8006694:	40d38800 	.word	0x40d38800
 8006698:	a0000000 	.word	0xa0000000
 800669c:	40d3bca1 	.word	0x40d3bca1
 80066a0:	2000ff10 	.word	0x2000ff10
 80066a4:	2000fed8 	.word	0x2000fed8
 80066a8:	40df4000 	.word	0x40df4000
 80066ac:	42c80000 	.word	0x42c80000

080066b0 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 80066b0:	b084      	sub	sp, #16
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b092      	sub	sp, #72	; 0x48
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80066bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80066c0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80066c4:	a3c6      	add	r3, pc, #792	; (adr r3, 80069e0 <lowlayer_computeAndWritePulse+0x330>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f7f9 fddf 	bl	800028c <__adddf3>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	a3c4      	add	r3, pc, #784	; (adr r3, 80069e8 <lowlayer_computeAndWritePulse+0x338>)
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f7f9 ff8c 	bl	80005f8 <__aeabi_dmul>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4610      	mov	r0, r2
 80066e6:	4619      	mov	r1, r3
 80066e8:	a3b7      	add	r3, pc, #732	; (adr r3, 80069c8 <lowlayer_computeAndWritePulse+0x318>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f7fa f8ad 	bl	800084c <__aeabi_ddiv>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	ec43 2b17 	vmov	d7, r2, r3
 80066fa:	eeb0 0a47 	vmov.f32	s0, s14
 80066fe:	eef0 0a67 	vmov.f32	s1, s15
 8006702:	f014 faed 	bl	801ace0 <round>
 8006706:	ec53 2b10 	vmov	r2, r3, d0
 800670a:	4610      	mov	r0, r2
 800670c:	4619      	mov	r1, r3
 800670e:	f7fa fa4b 	bl	8000ba8 <__aeabi_d2uiz>
 8006712:	4603      	mov	r3, r0
 8006714:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8006716:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800671a:	a3b5      	add	r3, pc, #724	; (adr r3, 80069f0 <lowlayer_computeAndWritePulse+0x340>)
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f7f9 fdb4 	bl	800028c <__adddf3>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4610      	mov	r0, r2
 800672a:	4619      	mov	r1, r3
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	4bb1      	ldr	r3, [pc, #708]	; (80069f8 <lowlayer_computeAndWritePulse+0x348>)
 8006732:	f7f9 ff61 	bl	80005f8 <__aeabi_dmul>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	a3a2      	add	r3, pc, #648	; (adr r3, 80069c8 <lowlayer_computeAndWritePulse+0x318>)
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f7fa f882 	bl	800084c <__aeabi_ddiv>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	ec43 2b17 	vmov	d7, r2, r3
 8006750:	eeb0 0a47 	vmov.f32	s0, s14
 8006754:	eef0 0a67 	vmov.f32	s1, s15
 8006758:	f014 fac2 	bl	801ace0 <round>
 800675c:	ec53 2b10 	vmov	r2, r3, d0
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	f7fa fa20 	bl	8000ba8 <__aeabi_d2uiz>
 8006768:	4603      	mov	r3, r0
 800676a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800676c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	4ba1      	ldr	r3, [pc, #644]	; (80069fc <lowlayer_computeAndWritePulse+0x34c>)
 8006776:	f7f9 ff3f 	bl	80005f8 <__aeabi_dmul>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	ec43 2b17 	vmov	d7, r2, r3
 8006782:	eeb0 0a47 	vmov.f32	s0, s14
 8006786:	eef0 0a67 	vmov.f32	s1, s15
 800678a:	f014 faa9 	bl	801ace0 <round>
 800678e:	ec53 2b10 	vmov	r2, r3, d0
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	f7fa fa07 	bl	8000ba8 <__aeabi_d2uiz>
 800679a:	4603      	mov	r3, r0
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800679e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80067a2:	a38b      	add	r3, pc, #556	; (adr r3, 80069d0 <lowlayer_computeAndWritePulse+0x320>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 fd70 	bl	800028c <__adddf3>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4610      	mov	r0, r2
 80067b2:	4619      	mov	r1, r3
 80067b4:	a388      	add	r3, pc, #544	; (adr r3, 80069d8 <lowlayer_computeAndWritePulse+0x328>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	f7f9 ff1d 	bl	80005f8 <__aeabi_dmul>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4610      	mov	r0, r2
 80067c4:	4619      	mov	r1, r3
 80067c6:	a380      	add	r3, pc, #512	; (adr r3, 80069c8 <lowlayer_computeAndWritePulse+0x318>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f7fa f83e 	bl	800084c <__aeabi_ddiv>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	ec43 2b17 	vmov	d7, r2, r3
 80067d8:	eeb0 0a47 	vmov.f32	s0, s14
 80067dc:	eef0 0a67 	vmov.f32	s1, s15
 80067e0:	f014 fa7e 	bl	801ace0 <round>
 80067e4:	ec53 2b10 	vmov	r2, r3, d0
 80067e8:	4610      	mov	r0, r2
 80067ea:	4619      	mov	r1, r3
 80067ec:	f7fa f9dc 	bl	8000ba8 <__aeabi_d2uiz>
 80067f0:	4603      	mov	r3, r0
 80067f2:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80067f4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80067f8:	a379      	add	r3, pc, #484	; (adr r3, 80069e0 <lowlayer_computeAndWritePulse+0x330>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7f9 fd45 	bl	800028c <__adddf3>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4610      	mov	r0, r2
 8006808:	4619      	mov	r1, r3
 800680a:	a377      	add	r3, pc, #476	; (adr r3, 80069e8 <lowlayer_computeAndWritePulse+0x338>)
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f7f9 fef2 	bl	80005f8 <__aeabi_dmul>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4610      	mov	r0, r2
 800681a:	4619      	mov	r1, r3
 800681c:	a36a      	add	r3, pc, #424	; (adr r3, 80069c8 <lowlayer_computeAndWritePulse+0x318>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7fa f813 	bl	800084c <__aeabi_ddiv>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	ec43 2b17 	vmov	d7, r2, r3
 800682e:	eeb0 0a47 	vmov.f32	s0, s14
 8006832:	eef0 0a67 	vmov.f32	s1, s15
 8006836:	f014 fa53 	bl	801ace0 <round>
 800683a:	ec53 2b10 	vmov	r2, r3, d0
 800683e:	4610      	mov	r0, r2
 8006840:	4619      	mov	r1, r3
 8006842:	f7fa f9b1 	bl	8000ba8 <__aeabi_d2uiz>
 8006846:	4603      	mov	r3, r0
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800684a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800684e:	a368      	add	r3, pc, #416	; (adr r3, 80069f0 <lowlayer_computeAndWritePulse+0x340>)
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f7f9 fd1a 	bl	800028c <__adddf3>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4610      	mov	r0, r2
 800685e:	4619      	mov	r1, r3
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	4b64      	ldr	r3, [pc, #400]	; (80069f8 <lowlayer_computeAndWritePulse+0x348>)
 8006866:	f7f9 fec7 	bl	80005f8 <__aeabi_dmul>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4610      	mov	r0, r2
 8006870:	4619      	mov	r1, r3
 8006872:	a355      	add	r3, pc, #340	; (adr r3, 80069c8 <lowlayer_computeAndWritePulse+0x318>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 ffe8 	bl	800084c <__aeabi_ddiv>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	ec43 2b17 	vmov	d7, r2, r3
 8006884:	eeb0 0a47 	vmov.f32	s0, s14
 8006888:	eef0 0a67 	vmov.f32	s1, s15
 800688c:	f014 fa28 	bl	801ace0 <round>
 8006890:	ec53 2b10 	vmov	r2, r3, d0
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	f7fa f986 	bl	8000ba8 <__aeabi_d2uiz>
 800689c:	4603      	mov	r3, r0
 800689e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80068a0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	4b54      	ldr	r3, [pc, #336]	; (80069fc <lowlayer_computeAndWritePulse+0x34c>)
 80068aa:	f7f9 fea5 	bl	80005f8 <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	ec43 2b17 	vmov	d7, r2, r3
 80068b6:	eeb0 0a47 	vmov.f32	s0, s14
 80068ba:	eef0 0a67 	vmov.f32	s1, s15
 80068be:	f014 fa0f 	bl	801ace0 <round>
 80068c2:	ec53 2b10 	vmov	r2, r3, d0
 80068c6:	4610      	mov	r0, r2
 80068c8:	4619      	mov	r1, r3
 80068ca:	f7fa f96d 	bl	8000ba8 <__aeabi_d2uiz>
 80068ce:	4603      	mov	r3, r0
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80068d2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80068d6:	a33e      	add	r3, pc, #248	; (adr r3, 80069d0 <lowlayer_computeAndWritePulse+0x320>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fcd6 	bl	800028c <__adddf3>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4610      	mov	r0, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	a33b      	add	r3, pc, #236	; (adr r3, 80069d8 <lowlayer_computeAndWritePulse+0x328>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fe83 	bl	80005f8 <__aeabi_dmul>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	a333      	add	r3, pc, #204	; (adr r3, 80069c8 <lowlayer_computeAndWritePulse+0x318>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f7f9 ffa4 	bl	800084c <__aeabi_ddiv>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	ec43 2b17 	vmov	d7, r2, r3
 800690c:	eeb0 0a47 	vmov.f32	s0, s14
 8006910:	eef0 0a67 	vmov.f32	s1, s15
 8006914:	f014 f9e4 	bl	801ace0 <round>
 8006918:	ec53 2b10 	vmov	r2, r3, d0
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	f7fa f942 	bl	8000ba8 <__aeabi_d2uiz>
 8006924:	4603      	mov	r3, r0
 8006926:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8006928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	461a      	mov	r2, r3
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8006938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	461a      	mov	r2, r3
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8006948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	461a      	mov	r2, r3
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8006958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	461a      	mov	r2, r3
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	2b00      	cmp	r3, #0
 800696c:	bfb8      	it	lt
 800696e:	425b      	neglt	r3, r3
 8006970:	2b7f      	cmp	r3, #127	; 0x7f
 8006972:	dc11      	bgt.n	8006998 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	bfb8      	it	lt
 800697a:	425b      	neglt	r3, r3
 800697c:	2b7f      	cmp	r3, #127	; 0x7f
 800697e:	dc0b      	bgt.n	8006998 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	bfb8      	it	lt
 8006986:	425b      	neglt	r3, r3
 8006988:	2b7f      	cmp	r3, #127	; 0x7f
 800698a:	dc05      	bgt.n	8006998 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	bfb8      	it	lt
 8006992:	425b      	neglt	r3, r3
 8006994:	2b7f      	cmp	r3, #127	; 0x7f
 8006996:	dd01      	ble.n	800699c <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	e00c      	b.n	80069b6 <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800699c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80069a0:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80069a4:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80069a8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80069ac:	f000 f828 	bl	8006a00 <lowlayer_writePulse>
 80069b0:	4603      	mov	r3, r0
 80069b2:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80069b4:	79fb      	ldrb	r3, [r7, #7]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3748      	adds	r7, #72	; 0x48
 80069ba:	46bd      	mov	sp, r7
 80069bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069c0:	b004      	add	sp, #16
 80069c2:	4770      	bx	lr
 80069c4:	f3af 8000 	nop.w
 80069c8:	60000000 	.word	0x60000000
 80069cc:	401921fb 	.word	0x401921fb
 80069d0:	daaaaaab 	.word	0xdaaaaaab
 80069d4:	4007bc89 	.word	0x4007bc89
 80069d8:	a0000000 	.word	0xa0000000
 80069dc:	40d3bca1 	.word	0x40d3bca1
 80069e0:	daaaaaab 	.word	0xdaaaaaab
 80069e4:	3ff7bc89 	.word	0x3ff7bc89
 80069e8:	00000000 	.word	0x00000000
 80069ec:	40d38800 	.word	0x40d38800
 80069f0:	88000000 	.word	0x88000000
 80069f4:	4002d97c 	.word	0x4002d97c
 80069f8:	40df4000 	.word	0x40df4000
 80069fc:	40590000 	.word	0x40590000

08006a00 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4604      	mov	r4, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4623      	mov	r3, r4
 8006a10:	71fb      	strb	r3, [r7, #7]
 8006a12:	4603      	mov	r3, r0
 8006a14:	71bb      	strb	r3, [r7, #6]
 8006a16:	460b      	mov	r3, r1
 8006a18:	717b      	strb	r3, [r7, #5]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da06      	bge.n	8006a34 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	425b      	negs	r3, r3
 8006a2a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	425b      	negs	r3, r3
 8006a30:	75fb      	strb	r3, [r7, #23]
 8006a32:	e006      	b.n	8006a42 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a3e:	b25b      	sxtb	r3, r3
 8006a40:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8006a42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da06      	bge.n	8006a58 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8006a4a:	79bb      	ldrb	r3, [r7, #6]
 8006a4c:	425b      	negs	r3, r3
 8006a4e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8006a50:	79bb      	ldrb	r3, [r7, #6]
 8006a52:	425b      	negs	r3, r3
 8006a54:	75bb      	strb	r3, [r7, #22]
 8006a56:	e006      	b.n	8006a66 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8006a58:	79bb      	ldrb	r3, [r7, #6]
 8006a5a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8006a5c:	79bb      	ldrb	r3, [r7, #6]
 8006a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a62:	b25b      	sxtb	r3, r3
 8006a64:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8006a66:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	da0b      	bge.n	8006a86 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8006a6e:	797b      	ldrb	r3, [r7, #5]
 8006a70:	425b      	negs	r3, r3
 8006a72:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8006a74:	797b      	ldrb	r3, [r7, #5]
 8006a76:	425b      	negs	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a80:	b25b      	sxtb	r3, r3
 8006a82:	757b      	strb	r3, [r7, #21]
 8006a84:	e003      	b.n	8006a8e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8006a86:	797b      	ldrb	r3, [r7, #5]
 8006a88:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8006a8a:	797b      	ldrb	r3, [r7, #5]
 8006a8c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8006a8e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da06      	bge.n	8006aa4 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8006a96:	793b      	ldrb	r3, [r7, #4]
 8006a98:	425b      	negs	r3, r3
 8006a9a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8006a9c:	793b      	ldrb	r3, [r7, #4]
 8006a9e:	425b      	negs	r3, r3
 8006aa0:	753b      	strb	r3, [r7, #20]
 8006aa2:	e006      	b.n	8006ab2 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8006aa4:	793b      	ldrb	r3, [r7, #4]
 8006aa6:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8006aa8:	793b      	ldrb	r3, [r7, #4]
 8006aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aae:	b25b      	sxtb	r3, r3
 8006ab0:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8006ab2:	7cfb      	ldrb	r3, [r7, #19]
 8006ab4:	2b4b      	cmp	r3, #75	; 0x4b
 8006ab6:	d808      	bhi.n	8006aca <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8006ab8:	7cbb      	ldrb	r3, [r7, #18]
 8006aba:	2b78      	cmp	r3, #120	; 0x78
 8006abc:	d805      	bhi.n	8006aca <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8006abe:	7c7b      	ldrb	r3, [r7, #17]
 8006ac0:	2b7d      	cmp	r3, #125	; 0x7d
 8006ac2:	d802      	bhi.n	8006aca <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8006ac4:	7c3b      	ldrb	r3, [r7, #16]
 8006ac6:	2b65      	cmp	r3, #101	; 0x65
 8006ac8:	d901      	bls.n	8006ace <lowlayer_writePulse+0xce>
		return FALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e04b      	b.n	8006b66 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ad4:	4826      	ldr	r0, [pc, #152]	; (8006b70 <lowlayer_writePulse+0x170>)
 8006ad6:	f005 fdb3 	bl	800c640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8006ada:	2200      	movs	r2, #0
 8006adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ae0:	4824      	ldr	r0, [pc, #144]	; (8006b74 <lowlayer_writePulse+0x174>)
 8006ae2:	f005 fdad 	bl	800c640 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8006aee:	f7fe f813 	bl	8004b18 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8006af2:	7dbb      	ldrb	r3, [r7, #22]
 8006af4:	4619      	mov	r1, r3
 8006af6:	4820      	ldr	r0, [pc, #128]	; (8006b78 <lowlayer_writePulse+0x178>)
 8006af8:	f7fe f80e 	bl	8004b18 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8006afc:	7d7b      	ldrb	r3, [r7, #21]
 8006afe:	4619      	mov	r1, r3
 8006b00:	481e      	ldr	r0, [pc, #120]	; (8006b7c <lowlayer_writePulse+0x17c>)
 8006b02:	f7fe f809 	bl	8004b18 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006b06:	7d3b      	ldrb	r3, [r7, #20]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	481d      	ldr	r0, [pc, #116]	; (8006b80 <lowlayer_writePulse+0x180>)
 8006b0c:	f7fe f804 	bl	8004b18 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006b10:	2364      	movs	r3, #100	; 0x64
 8006b12:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006b14:	bf00      	nop
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	1e5a      	subs	r2, r3, #1
 8006b1a:	73fa      	strb	r2, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1fa      	bne.n	8006b16 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8006b20:	2201      	movs	r2, #1
 8006b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b26:	4813      	ldr	r0, [pc, #76]	; (8006b74 <lowlayer_writePulse+0x174>)
 8006b28:	f005 fd8a 	bl	800c640 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8006b2c:	4b15      	ldr	r3, [pc, #84]	; (8006b84 <lowlayer_writePulse+0x184>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b34:	4413      	add	r3, r2
 8006b36:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <lowlayer_writePulse+0x184>)
 8006b38:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <lowlayer_writePulse+0x184>)
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006b42:	4413      	add	r3, r2
 8006b44:	4a0f      	ldr	r2, [pc, #60]	; (8006b84 <lowlayer_writePulse+0x184>)
 8006b46:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8006b48:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <lowlayer_writePulse+0x184>)
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006b50:	4413      	add	r3, r2
 8006b52:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <lowlayer_writePulse+0x184>)
 8006b54:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8006b56:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <lowlayer_writePulse+0x184>)
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006b5e:	4413      	add	r3, r2
 8006b60:	4a08      	ldr	r2, [pc, #32]	; (8006b84 <lowlayer_writePulse+0x184>)
 8006b62:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8006b64:	2301      	movs	r3, #1
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd90      	pop	{r4, r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40020000 	.word	0x40020000
 8006b74:	40020c00 	.word	0x40020c00
 8006b78:	60000002 	.word	0x60000002
 8006b7c:	60000004 	.word	0x60000004
 8006b80:	60000006 	.word	0x60000006
 8006b84:	2000fed8 	.word	0x2000fed8

08006b88 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8006b8e:	2364      	movs	r3, #100	; 0x64
 8006b90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8006b92:	2201      	movs	r2, #1
 8006b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b98:	4809      	ldr	r0, [pc, #36]	; (8006bc0 <lowlayer_resetEncoder+0x38>)
 8006b9a:	f005 fd51 	bl	800c640 <HAL_GPIO_WritePin>
	while (delay--);
 8006b9e:	bf00      	nop
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	1e5a      	subs	r2, r3, #1
 8006ba4:	71fa      	strb	r2, [r7, #7]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1fa      	bne.n	8006ba0 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8006baa:	2200      	movs	r2, #0
 8006bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006bb0:	4803      	ldr	r0, [pc, #12]	; (8006bc0 <lowlayer_resetEncoder+0x38>)
 8006bb2:	f005 fd45 	bl	800c640 <HAL_GPIO_WritePin>
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40020c00 	.word	0x40020c00

08006bc4 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8006bca:	4805      	ldr	r0, [pc, #20]	; (8006be0 <lowlayer_readLimitSwitch+0x1c>)
 8006bcc:	f7fd ffb3 	bl	8004b36 <FSMC_Read>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	b2db      	uxtb	r3, r3
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	60000020 	.word	0x60000020

08006be4 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d81c      	bhi.n	8006c2e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006bfa:	3310      	adds	r3, #16
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fd ff99 	bl	8004b36 <FSMC_Read>
 8006c04:	4603      	mov	r3, r0
 8006c06:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006c0e:	3310      	adds	r3, #16
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	3302      	adds	r3, #2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fd ff8e 	bl	8004b36 <FSMC_Read>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006c1e:	893b      	ldrh	r3, [r7, #8]
 8006c20:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	041a      	lsls	r2, r3, #16
 8006c26:	897b      	ldrh	r3, [r7, #10]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e001      	b.n	8006c32 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d81c      	bhi.n	8006c86 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006c52:	3318      	adds	r3, #24
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fd ff6d 	bl	8004b36 <FSMC_Read>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006c66:	3318      	adds	r3, #24
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	3302      	adds	r3, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fd ff62 	bl	8004b36 <FSMC_Read>
 8006c72:	4603      	mov	r3, r0
 8006c74:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006c76:	893b      	ldrh	r3, [r7, #8]
 8006c78:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	041a      	lsls	r2, r3, #16
 8006c7e:	897b      	ldrh	r3, [r7, #10]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e001      	b.n	8006c8a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	71fb      	strb	r3, [r7, #7]
 8006c9e:	e00b      	b.n	8006cb8 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8006ca0:	79fc      	ldrb	r4, [r7, #7]
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff ff9d 	bl	8006be4 <lowlayer_readEncoder>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4a06      	ldr	r2, [pc, #24]	; (8006cc8 <lowlayer_updateEncoder+0x34>)
 8006cae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	71fb      	strb	r3, [r7, #7]
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d9f0      	bls.n	8006ca0 <lowlayer_updateEncoder+0xc>
	}
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd90      	pop	{r4, r7, pc}
 8006cc8:	2000feec 	.word	0x2000feec

08006ccc <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	71fb      	strb	r3, [r7, #7]
 8006cd6:	e00b      	b.n	8006cf0 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8006cd8:	79fc      	ldrb	r4, [r7, #7]
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff ffad 	bl	8006c3c <lowlayer_readCapture>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4a06      	ldr	r2, [pc, #24]	; (8006d00 <lowlayer_updateCapture+0x34>)
 8006ce6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	3301      	adds	r3, #1
 8006cee:	71fb      	strb	r3, [r7, #7]
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d9f0      	bls.n	8006cd8 <lowlayer_updateCapture+0xc>
	}
}
 8006cf6:	bf00      	nop
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd90      	pop	{r4, r7, pc}
 8006d00:	2000fefc 	.word	0x2000fefc

08006d04 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8006d0a:	f7ff ff5b 	bl	8006bc4 <lowlayer_readLimitSwitch>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006d12:	2300      	movs	r3, #0
 8006d14:	71fb      	strb	r3, [r7, #7]
 8006d16:	e00d      	b.n	8006d34 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006d18:	79ba      	ldrb	r2, [r7, #6]
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	fa42 f303 	asr.w	r3, r2, r3
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	f002 0201 	and.w	r2, r2, #1
 8006d28:	b2d1      	uxtb	r1, r2
 8006d2a:	4a06      	ldr	r2, [pc, #24]	; (8006d44 <lowlayer_updateLimit+0x40>)
 8006d2c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	3301      	adds	r3, #1
 8006d32:	71fb      	strb	r3, [r7, #7]
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d9ee      	bls.n	8006d18 <lowlayer_updateLimit+0x14>
	}
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	2000fef8 	.word	0x2000fef8

08006d48 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d006      	beq.n	8006d66 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d5e:	4807      	ldr	r0, [pc, #28]	; (8006d7c <lowlayer_setOutput+0x34>)
 8006d60:	f005 fc6e 	bl	800c640 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8006d64:	e005      	b.n	8006d72 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8006d66:	2200      	movs	r2, #0
 8006d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d6c:	4803      	ldr	r0, [pc, #12]	; (8006d7c <lowlayer_setOutput+0x34>)
 8006d6e:	f005 fc67 	bl	800c640 <HAL_GPIO_WritePin>
}
 8006d72:	bf00      	nop
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40020400 	.word	0x40020400

08006d80 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006d84:	2201      	movs	r2, #1
 8006d86:	2140      	movs	r1, #64	; 0x40
 8006d88:	4802      	ldr	r0, [pc, #8]	; (8006d94 <lowlayer_CPLD_Init+0x14>)
 8006d8a:	f005 fc59 	bl	800c640 <HAL_GPIO_WritePin>
}
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	40020c00 	.word	0x40020c00

08006d98 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006da2:	4808      	ldr	r0, [pc, #32]	; (8006dc4 <lowlayer_stepMotorInit+0x2c>)
 8006da4:	f005 fc4c 	bl	800c640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006da8:	2201      	movs	r2, #1
 8006daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dae:	4805      	ldr	r0, [pc, #20]	; (8006dc4 <lowlayer_stepMotorInit+0x2c>)
 8006db0:	f005 fc46 	bl	800c640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8006db4:	2201      	movs	r2, #1
 8006db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dba:	4802      	ldr	r0, [pc, #8]	; (8006dc4 <lowlayer_stepMotorInit+0x2c>)
 8006dbc:	f005 fc40 	bl	800c640 <HAL_GPIO_WritePin>
}
 8006dc0:	bf00      	nop
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	40020000 	.word	0x40020000

08006dc8 <scaraStartup>:
//SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];

Trajectory_TargetTypeDef	joint_taget[4] = {  TRAJECTORY_J0, TRAJECTORY_J1,
												TRAJECTORY_J2, TRAJECTORY_J3};

void				scaraStartup(void) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8006dcc:	f7ff ffd8 	bl	8006d80 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006dd0:	f7ff ffe2 	bl	8006d98 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8006dd4:	f7ff fed8 	bl	8006b88 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006dd8:	bf00      	nop
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	0000      	movs	r0, r0
	...

08006de0 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006de0:	b084      	sub	sp, #16
 8006de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de4:	ed2d 8b02 	vpush	{d8}
 8006de8:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8006dec:	af90      	add	r7, sp, #576	; 0x240
 8006dee:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8006df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006df6:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 8359 	bne.w	80074b2 <scaraInitDuty+0x6d2>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006e00:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006e04:	a3bd      	add	r3, pc, #756	; (adr r3, 80070fc <scaraInitDuty+0x31c>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f7f9 fbf5 	bl	80005f8 <__aeabi_dmul>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	4bb1      	ldr	r3, [pc, #708]	; (80070e0 <scaraInitDuty+0x300>)
 8006e1c:	f7f9 fd16 	bl	800084c <__aeabi_ddiv>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006e28:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d134      	bne.n	8006e9a <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006e30:	4bac      	ldr	r3, [pc, #688]	; (80070e4 <scaraInitDuty+0x304>)
 8006e32:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006e36:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006e3a:	f7f9 fa27 	bl	800028c <__adddf3>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	f107 0108 	add.w	r1, r7, #8
 8006e46:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006e4a:	4ba6      	ldr	r3, [pc, #664]	; (80070e4 <scaraInitDuty+0x304>)
 8006e4c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006e50:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006e54:	f7f9 fa1a 	bl	800028c <__adddf3>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	f107 0108 	add.w	r1, r7, #8
 8006e60:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006e64:	4b9f      	ldr	r3, [pc, #636]	; (80070e4 <scaraInitDuty+0x304>)
 8006e66:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006e6a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006e6e:	f7f9 fa0d 	bl	800028c <__adddf3>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	f107 0108 	add.w	r1, r7, #8
 8006e7a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006e7e:	4b99      	ldr	r3, [pc, #612]	; (80070e4 <scaraInitDuty+0x304>)
 8006e80:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006e84:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006e88:	f7f9 fa00 	bl	800028c <__adddf3>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	f107 0108 	add.w	r1, r7, #8
 8006e94:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006e98:	e01f      	b.n	8006eda <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006e9a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d118      	bne.n	8006ed4 <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 8006ea2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006ea6:	f107 0108 	add.w	r1, r7, #8
 8006eaa:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8006eae:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006eb2:	f107 0108 	add.w	r1, r7, #8
 8006eb6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8006eba:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006ebe:	f107 0108 	add.w	r1, r7, #8
 8006ec2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8006ec6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006eca:	f107 0108 	add.w	r1, r7, #8
 8006ece:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006ed2:	e002      	b.n	8006eda <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006ed4:	230c      	movs	r3, #12
 8006ed6:	f000 be95 	b.w	8007c04 <scaraInitDuty+0xe24>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006ee2:	4b80      	ldr	r3, [pc, #512]	; (80070e4 <scaraInitDuty+0x304>)
 8006ee4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006ee8:	f7f9 f9ce 	bl	8000288 <__aeabi_dsub>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		dir_angle = 1;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006f06:	f7f9 fde9 	bl	8000adc <__aeabi_dcmplt>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <scaraInitDuty+0x136>
			dir_angle = -1;
 8006f10:	23ff      	movs	r3, #255	; 0xff
 8006f12:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006f16:	4b74      	ldr	r3, [pc, #464]	; (80070e8 <scaraInitDuty+0x308>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8006f1c:	4b71      	ldr	r3, [pc, #452]	; (80070e4 <scaraInitDuty+0x304>)
 8006f1e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006f22:	4971      	ldr	r1, [pc, #452]	; (80070e8 <scaraInitDuty+0x308>)
 8006f24:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8006f28:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8006f2c:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d120      	bne.n	8006f76 <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8006f34:	4b6c      	ldr	r3, [pc, #432]	; (80070e8 <scaraInitDuty+0x308>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8006f3a:	4c6a      	ldr	r4, [pc, #424]	; (80070e4 <scaraInitDuty+0x304>)
 8006f3c:	f107 0208 	add.w	r2, r7, #8
 8006f40:	ab2e      	add	r3, sp, #184	; 0xb8
 8006f42:	4611      	mov	r1, r2
 8006f44:	22c0      	movs	r2, #192	; 0xc0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f00f f99a 	bl	8016280 <memcpy>
 8006f4c:	4668      	mov	r0, sp
 8006f4e:	f104 0308 	add.w	r3, r4, #8
 8006f52:	22b8      	movs	r2, #184	; 0xb8
 8006f54:	4619      	mov	r1, r3
 8006f56:	f00f f993 	bl	8016280 <memcpy>
 8006f5a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006f5e:	4863      	ldr	r0, [pc, #396]	; (80070ec <scaraInitDuty+0x30c>)
 8006f60:	f000 fe64 	bl	8007c2c <scaraInitLine>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8006f6a:	4b5f      	ldr	r3, [pc, #380]	; (80070e8 <scaraInitDuty+0x308>)
 8006f6c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006f70:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006f74:	e053      	b.n	800701e <scaraInitDuty+0x23e>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006f76:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d14c      	bne.n	8007018 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8006f7e:	4b59      	ldr	r3, [pc, #356]	; (80070e4 <scaraInitDuty+0x304>)
 8006f80:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006f84:	f107 0108 	add.w	r1, r7, #8
 8006f88:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8006f8c:	4b55      	ldr	r3, [pc, #340]	; (80070e4 <scaraInitDuty+0x304>)
 8006f8e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006f92:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8006f96:	f7f9 f979 	bl	800028c <__adddf3>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006fa2:	4b50      	ldr	r3, [pc, #320]	; (80070e4 <scaraInitDuty+0x304>)
 8006fa4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006fa8:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006fac:	f7f9 f96e 	bl	800028c <__adddf3>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8006fb8:	4b4a      	ldr	r3, [pc, #296]	; (80070e4 <scaraInitDuty+0x304>)
 8006fba:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006fbe:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8006fc2:	4b49      	ldr	r3, [pc, #292]	; (80070e8 <scaraInitDuty+0x308>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8006fc8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006fcc:	4c45      	ldr	r4, [pc, #276]	; (80070e4 <scaraInitDuty+0x304>)
 8006fce:	938e      	str	r3, [sp, #568]	; 0x238
 8006fd0:	a85e      	add	r0, sp, #376	; 0x178
 8006fd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006fd6:	22c0      	movs	r2, #192	; 0xc0
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f00f f951 	bl	8016280 <memcpy>
 8006fde:	f107 0208 	add.w	r2, r7, #8
 8006fe2:	ab2e      	add	r3, sp, #184	; 0xb8
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	22c0      	movs	r2, #192	; 0xc0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f00f f949 	bl	8016280 <memcpy>
 8006fee:	4668      	mov	r0, sp
 8006ff0:	f104 0308 	add.w	r3, r4, #8
 8006ff4:	22b8      	movs	r2, #184	; 0xb8
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f00f f942 	bl	8016280 <memcpy>
 8006ffc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007000:	483b      	ldr	r0, [pc, #236]	; (80070f0 <scaraInitDuty+0x310>)
 8007002:	f000 fec9 	bl	8007d98 <scaraInitCircle>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 800700c:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <scaraInitDuty+0x308>)
 800700e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8007012:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8007016:	e002      	b.n	800701e <scaraInitDuty+0x23e>
//		}else if(DUTY_PATH_BEZIER_CURVE == command.path_type){
//			myDUTY.task.path.path_type = DUTY_PATH_BEZIER_CURVE;
//			myDUTY.task.path.line.z0 = command.target_point.z;
//		}
		}else {
			return SCARA_STATUS_ERROR_TASK;
 8007018:	2303      	movs	r3, #3
 800701a:	f000 bdf3 	b.w	8007c04 <scaraInitDuty+0xe24>
		}

		if ( SCARA_STATUS_OK != status) {
 800701e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <scaraInitDuty+0x24e>
			return status;
 8007026:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800702a:	f000 bdeb 	b.w	8007c04 <scaraInitDuty+0xe24>
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 800702e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007032:	2b00      	cmp	r3, #0
 8007034:	f040 80bb 	bne.w	80071ae <scaraInitDuty+0x3ce>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007038:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800703c:	2b01      	cmp	r3, #1
 800703e:	d161      	bne.n	8007104 <scaraInitDuty+0x324>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007040:	4b29      	ldr	r3, [pc, #164]	; (80070e8 <scaraInitDuty+0x308>)
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8007048:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800704c:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8007050:	eeb0 2a46 	vmov.f32	s4, s12
 8007054:	eef0 2a66 	vmov.f32	s5, s13
 8007058:	eeb0 1a47 	vmov.f32	s2, s14
 800705c:	eef0 1a67 	vmov.f32	s3, s15
 8007060:	2201      	movs	r2, #1
 8007062:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8007066:	2104      	movs	r1, #4
 8007068:	4822      	ldr	r0, [pc, #136]	; (80070f4 <scaraInitDuty+0x314>)
 800706a:	f001 f891 	bl	8008190 <scaraInitLSPB1>
 800706e:	4603      	mov	r3, r0
 8007070:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007074:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <scaraInitDuty+0x308>)
 8007076:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800707a:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 800707e:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <scaraInitDuty+0x308>)
 8007080:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8007084:	4918      	ldr	r1, [pc, #96]	; (80070e8 <scaraInitDuty+0x308>)
 8007086:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800708a:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800708e:	4b16      	ldr	r3, [pc, #88]	; (80070e8 <scaraInitDuty+0x308>)
 8007090:	2202      	movs	r2, #2
 8007092:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007096:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800709a:	4618      	mov	r0, r3
 800709c:	f7f9 fa42 	bl	8000524 <__aeabi_i2d>
 80070a0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80070a4:	f7f9 faa8 	bl	80005f8 <__aeabi_dmul>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	ec43 2b16 	vmov	d6, r2, r3
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <scaraInitDuty+0x308>)
 80070b2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80070b6:	ed93 7b00 	vldr	d7, [r3]
 80070ba:	eeb0 1a47 	vmov.f32	s2, s14
 80070be:	eef0 1a67 	vmov.f32	s3, s15
 80070c2:	2203      	movs	r2, #3
 80070c4:	eeb0 0a46 	vmov.f32	s0, s12
 80070c8:	eef0 0a66 	vmov.f32	s1, s13
 80070cc:	2105      	movs	r1, #5
 80070ce:	480a      	ldr	r0, [pc, #40]	; (80070f8 <scaraInitDuty+0x318>)
 80070d0:	f001 f810 	bl	80080f4 <scaraInitLinear>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80070da:	e1db      	b.n	8007494 <scaraInitDuty+0x6b4>
 80070dc:	f3af 8000 	nop.w
 80070e0:	40668000 	.word	0x40668000
 80070e4:	20010b00 	.word	0x20010b00
 80070e8:	2000ff40 	.word	0x2000ff40
 80070ec:	2000ff50 	.word	0x2000ff50
 80070f0:	2000ffc0 	.word	0x2000ffc0
 80070f4:	20010058 	.word	0x20010058
 80070f8:	20010328 	.word	0x20010328
 80070fc:	60000000 	.word	0x60000000
 8007100:	400921fb 	.word	0x400921fb
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007104:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d14d      	bne.n	80071a8 <scaraInitDuty+0x3c8>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 800710c:	4bb9      	ldr	r3, [pc, #740]	; (80073f4 <scaraInitDuty+0x614>)
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8007114:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007118:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800711c:	eeb0 2a46 	vmov.f32	s4, s12
 8007120:	eef0 2a66 	vmov.f32	s5, s13
 8007124:	eeb0 1a47 	vmov.f32	s2, s14
 8007128:	eef0 1a67 	vmov.f32	s3, s15
 800712c:	2200      	movs	r2, #0
 800712e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8007132:	2104      	movs	r1, #4
 8007134:	48b0      	ldr	r0, [pc, #704]	; (80073f8 <scaraInitDuty+0x618>)
 8007136:	f001 f82b 	bl	8008190 <scaraInitLSPB1>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007140:	4aac      	ldr	r2, [pc, #688]	; (80073f4 <scaraInitDuty+0x614>)
 8007142:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8007146:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 800714a:	4baa      	ldr	r3, [pc, #680]	; (80073f4 <scaraInitDuty+0x614>)
 800714c:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8007150:	49a8      	ldr	r1, [pc, #672]	; (80073f4 <scaraInitDuty+0x614>)
 8007152:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007156:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800715a:	4ba6      	ldr	r3, [pc, #664]	; (80073f4 <scaraInitDuty+0x614>)
 800715c:	2202      	movs	r2, #2
 800715e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007162:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007166:	4618      	mov	r0, r3
 8007168:	f7f9 f9dc 	bl	8000524 <__aeabi_i2d>
 800716c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007170:	f7f9 fa42 	bl	80005f8 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	ec43 2b16 	vmov	d6, r2, r3
 800717c:	4b9d      	ldr	r3, [pc, #628]	; (80073f4 <scaraInitDuty+0x614>)
 800717e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007182:	ed93 7b00 	vldr	d7, [r3]
 8007186:	eeb0 1a47 	vmov.f32	s2, s14
 800718a:	eef0 1a67 	vmov.f32	s3, s15
 800718e:	2203      	movs	r2, #3
 8007190:	eeb0 0a46 	vmov.f32	s0, s12
 8007194:	eef0 0a66 	vmov.f32	s1, s13
 8007198:	2105      	movs	r1, #5
 800719a:	4898      	ldr	r0, [pc, #608]	; (80073fc <scaraInitDuty+0x61c>)
 800719c:	f000 ffaa 	bl	80080f4 <scaraInitLinear>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80071a6:	e175      	b.n	8007494 <scaraInitDuty+0x6b4>

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 80071a8:	2308      	movs	r3, #8
 80071aa:	f000 bd2b 	b.w	8007c04 <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 80071ae:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	f040 80a7 	bne.w	8007306 <scaraInitDuty+0x526>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80071b8:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d14d      	bne.n	800725c <scaraInitDuty+0x47c>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80071c0:	4b8c      	ldr	r3, [pc, #560]	; (80073f4 <scaraInitDuty+0x614>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80071c8:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80071cc:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 80071d0:	eeb0 2a46 	vmov.f32	s4, s12
 80071d4:	eef0 2a66 	vmov.f32	s5, s13
 80071d8:	eeb0 1a47 	vmov.f32	s2, s14
 80071dc:	eef0 1a67 	vmov.f32	s3, s15
 80071e0:	2201      	movs	r2, #1
 80071e2:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80071e6:	2104      	movs	r1, #4
 80071e8:	4885      	ldr	r0, [pc, #532]	; (8007400 <scaraInitDuty+0x620>)
 80071ea:	f001 fa95 	bl	8008718 <scaraInitScurve1>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80071f4:	4a7f      	ldr	r2, [pc, #508]	; (80073f4 <scaraInitDuty+0x614>)
 80071f6:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80071fa:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 80071fe:	4b7d      	ldr	r3, [pc, #500]	; (80073f4 <scaraInitDuty+0x614>)
 8007200:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8007204:	497b      	ldr	r1, [pc, #492]	; (80073f4 <scaraInitDuty+0x614>)
 8007206:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800720a:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800720e:	4b79      	ldr	r3, [pc, #484]	; (80073f4 <scaraInitDuty+0x614>)
 8007210:	2202      	movs	r2, #2
 8007212:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007216:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800721a:	4618      	mov	r0, r3
 800721c:	f7f9 f982 	bl	8000524 <__aeabi_i2d>
 8007220:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007224:	f7f9 f9e8 	bl	80005f8 <__aeabi_dmul>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	ec43 2b16 	vmov	d6, r2, r3
 8007230:	4b70      	ldr	r3, [pc, #448]	; (80073f4 <scaraInitDuty+0x614>)
 8007232:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007236:	ed93 7b00 	vldr	d7, [r3]
 800723a:	eeb0 1a47 	vmov.f32	s2, s14
 800723e:	eef0 1a67 	vmov.f32	s3, s15
 8007242:	2203      	movs	r2, #3
 8007244:	eeb0 0a46 	vmov.f32	s0, s12
 8007248:	eef0 0a66 	vmov.f32	s1, s13
 800724c:	2105      	movs	r1, #5
 800724e:	486b      	ldr	r0, [pc, #428]	; (80073fc <scaraInitDuty+0x61c>)
 8007250:	f000 ff50 	bl	80080f4 <scaraInitLinear>
 8007254:	4603      	mov	r3, r0
 8007256:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 800725a:	e11b      	b.n	8007494 <scaraInitDuty+0x6b4>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800725c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d14d      	bne.n	8007300 <scaraInitDuty+0x520>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007264:	4b63      	ldr	r3, [pc, #396]	; (80073f4 <scaraInitDuty+0x614>)
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800726c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007270:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8007274:	eeb0 2a46 	vmov.f32	s4, s12
 8007278:	eef0 2a66 	vmov.f32	s5, s13
 800727c:	eeb0 1a47 	vmov.f32	s2, s14
 8007280:	eef0 1a67 	vmov.f32	s3, s15
 8007284:	2200      	movs	r2, #0
 8007286:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 800728a:	2104      	movs	r1, #4
 800728c:	485c      	ldr	r0, [pc, #368]	; (8007400 <scaraInitDuty+0x620>)
 800728e:	f001 fa43 	bl	8008718 <scaraInitScurve1>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007298:	4a56      	ldr	r2, [pc, #344]	; (80073f4 <scaraInitDuty+0x614>)
 800729a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800729e:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 80072a2:	4b54      	ldr	r3, [pc, #336]	; (80073f4 <scaraInitDuty+0x614>)
 80072a4:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 80072a8:	4952      	ldr	r1, [pc, #328]	; (80073f4 <scaraInitDuty+0x614>)
 80072aa:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80072ae:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80072b2:	4b50      	ldr	r3, [pc, #320]	; (80073f4 <scaraInitDuty+0x614>)
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80072ba:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f9 f930 	bl	8000524 <__aeabi_i2d>
 80072c4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80072c8:	f7f9 f996 	bl	80005f8 <__aeabi_dmul>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	ec43 2b16 	vmov	d6, r2, r3
 80072d4:	4b47      	ldr	r3, [pc, #284]	; (80073f4 <scaraInitDuty+0x614>)
 80072d6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80072da:	ed93 7b00 	vldr	d7, [r3]
 80072de:	eeb0 1a47 	vmov.f32	s2, s14
 80072e2:	eef0 1a67 	vmov.f32	s3, s15
 80072e6:	2203      	movs	r2, #3
 80072e8:	eeb0 0a46 	vmov.f32	s0, s12
 80072ec:	eef0 0a66 	vmov.f32	s1, s13
 80072f0:	2105      	movs	r1, #5
 80072f2:	4842      	ldr	r0, [pc, #264]	; (80073fc <scaraInitDuty+0x61c>)
 80072f4:	f000 fefe 	bl	80080f4 <scaraInitLinear>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80072fe:	e0c9      	b.n	8007494 <scaraInitDuty+0x6b4>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007300:	2308      	movs	r3, #8
 8007302:	f000 bc7f 	b.w	8007c04 <scaraInitDuty+0xe24>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8007306:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800730a:	2b02      	cmp	r3, #2
 800730c:	d17c      	bne.n	8007408 <scaraInitDuty+0x628>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 800730e:	4a39      	ldr	r2, [pc, #228]	; (80073f4 <scaraInitDuty+0x614>)
 8007310:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8007314:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007318:	4b36      	ldr	r3, [pc, #216]	; (80073f4 <scaraInitDuty+0x614>)
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007320:	4b34      	ldr	r3, [pc, #208]	; (80073f4 <scaraInitDuty+0x614>)
 8007322:	2202      	movs	r2, #2
 8007324:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8007328:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800732c:	2b03      	cmp	r3, #3
 800732e:	d118      	bne.n	8007362 <scaraInitDuty+0x582>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8007330:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007334:	603b      	str	r3, [r7, #0]
 8007336:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800733a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8007344:	eeb0 1a47 	vmov.f32	s2, s14
 8007348:	eef0 1a67 	vmov.f32	s3, s15
 800734c:	2203      	movs	r2, #3
 800734e:	ed97 0b00 	vldr	d0, [r7]
 8007352:	2104      	movs	r1, #4
 8007354:	482b      	ldr	r0, [pc, #172]	; (8007404 <scaraInitDuty+0x624>)
 8007356:	f000 fecd 	bl	80080f4 <scaraInitLinear>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8007360:	e01d      	b.n	800739e <scaraInitDuty+0x5be>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8007362:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007366:	2b02      	cmp	r3, #2
 8007368:	d116      	bne.n	8007398 <scaraInitDuty+0x5b8>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 800736a:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 800736e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007372:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8007376:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800737a:	eeb0 1a47 	vmov.f32	s2, s14
 800737e:	eef0 1a67 	vmov.f32	s3, s15
 8007382:	2202      	movs	r2, #2
 8007384:	ec46 5b10 	vmov	d0, r5, r6
 8007388:	2104      	movs	r1, #4
 800738a:	481e      	ldr	r0, [pc, #120]	; (8007404 <scaraInitDuty+0x624>)
 800738c:	f000 feb2 	bl	80080f4 <scaraInitLinear>
 8007390:	4603      	mov	r3, r0
 8007392:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8007396:	e002      	b.n	800739e <scaraInitDuty+0x5be>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007398:	2308      	movs	r3, #8
 800739a:	f000 bc33 	b.w	8007c04 <scaraInitDuty+0xe24>
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 800739e:	4b15      	ldr	r3, [pc, #84]	; (80073f4 <scaraInitDuty+0x614>)
 80073a0:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 80073a4:	4913      	ldr	r1, [pc, #76]	; (80073f4 <scaraInitDuty+0x614>)
 80073a6:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80073aa:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80073ae:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7f9 f8b6 	bl	8000524 <__aeabi_i2d>
 80073b8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	ec43 2b16 	vmov	d6, r2, r3
 80073c8:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <scaraInitDuty+0x614>)
 80073ca:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80073ce:	ed93 7b00 	vldr	d7, [r3]
 80073d2:	eeb0 1a47 	vmov.f32	s2, s14
 80073d6:	eef0 1a67 	vmov.f32	s3, s15
 80073da:	2203      	movs	r2, #3
 80073dc:	eeb0 0a46 	vmov.f32	s0, s12
 80073e0:	eef0 0a66 	vmov.f32	s1, s13
 80073e4:	2105      	movs	r1, #5
 80073e6:	4805      	ldr	r0, [pc, #20]	; (80073fc <scaraInitDuty+0x61c>)
 80073e8:	f000 fe84 	bl	80080f4 <scaraInitLinear>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80073f2:	e04f      	b.n	8007494 <scaraInitDuty+0x6b4>
 80073f4:	2000ff40 	.word	0x2000ff40
 80073f8:	20010058 	.word	0x20010058
 80073fc:	20010328 	.word	0x20010328
 8007400:	200100d8 	.word	0x200100d8
 8007404:	200101a8 	.word	0x200101a8
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 8007408:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800740c:	2b03      	cmp	r3, #3
 800740e:	d13f      	bne.n	8007490 <scaraInitDuty+0x6b0>
			status1 = SCARA_STATUS_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007416:	4a96      	ldr	r2, [pc, #600]	; (8007670 <scaraInitDuty+0x890>)
 8007418:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800741c:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8007420:	4b93      	ldr	r3, [pc, #588]	; (8007670 <scaraInitDuty+0x890>)
 8007422:	2203      	movs	r2, #3
 8007424:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007428:	4b91      	ldr	r3, [pc, #580]	; (8007670 <scaraInitDuty+0x890>)
 800742a:	2202      	movs	r2, #2
 800742c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8007430:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8007434:	498e      	ldr	r1, [pc, #568]	; (8007670 <scaraInitDuty+0x890>)
 8007436:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800743a:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 800743e:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007442:	4618      	mov	r0, r3
 8007444:	f7f9 f86e 	bl	8000524 <__aeabi_i2d>
 8007448:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800744c:	f7f9 f8d4 	bl	80005f8 <__aeabi_dmul>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	ec43 2b18 	vmov	d8, r2, r3
 8007458:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 800745c:	4b85      	ldr	r3, [pc, #532]	; (8007674 <scaraInitDuty+0x894>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f7f8 ff11 	bl	8000288 <__aeabi_dsub>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	ec43 2b17 	vmov	d7, r2, r3
 800746e:	eeb0 1a47 	vmov.f32	s2, s14
 8007472:	eef0 1a67 	vmov.f32	s3, s15
 8007476:	2203      	movs	r2, #3
 8007478:	eeb0 0a48 	vmov.f32	s0, s16
 800747c:	eef0 0a68 	vmov.f32	s1, s17
 8007480:	2105      	movs	r1, #5
 8007482:	487d      	ldr	r0, [pc, #500]	; (8007678 <scaraInitDuty+0x898>)
 8007484:	f000 fe36 	bl	80080f4 <scaraInitLinear>
 8007488:	4603      	mov	r3, r0
 800748a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 800748e:	e001      	b.n	8007494 <scaraInitDuty+0x6b4>
//			myDUTY.time_total = command.time_total;
//			status1 = SCARA_STATUS_OK;
//			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
//		}
		else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007490:	2305      	movs	r3, #5
 8007492:	e3b7      	b.n	8007c04 <scaraInitDuty+0xe24>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8007494:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <scaraInitDuty+0x6c2>
			return status1;
 800749c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80074a0:	e3b0      	b.n	8007c04 <scaraInitDuty+0xe24>
		}
		if ( SCARA_STATUS_OK != status2) {
 80074a2:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 837e 	beq.w	8007ba8 <scaraInitDuty+0xdc8>
			return status2;
 80074ac:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80074b0:	e3a8      	b.n	8007c04 <scaraInitDuty+0xe24>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80074b2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	f040 8374 	bne.w	8007ba4 <scaraInitDuty+0xdc4>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80074bc:	4b6c      	ldr	r3, [pc, #432]	; (8007670 <scaraInitDuty+0x890>)
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80074c2:	4b6e      	ldr	r3, [pc, #440]	; (800767c <scaraInitDuty+0x89c>)
 80074c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80074c8:	4969      	ldr	r1, [pc, #420]	; (8007670 <scaraInitDuty+0x890>)
 80074ca:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 80074ce:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80074d2:	4b6a      	ldr	r3, [pc, #424]	; (800767c <scaraInitDuty+0x89c>)
 80074d4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80074d8:	4965      	ldr	r1, [pc, #404]	; (8007670 <scaraInitDuty+0x890>)
 80074da:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 80074de:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 80074e2:	4b66      	ldr	r3, [pc, #408]	; (800767c <scaraInitDuty+0x89c>)
 80074e4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80074e8:	4961      	ldr	r1, [pc, #388]	; (8007670 <scaraInitDuty+0x890>)
 80074ea:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 80074ee:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80074f2:	4b62      	ldr	r3, [pc, #392]	; (800767c <scaraInitDuty+0x89c>)
 80074f4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80074f8:	495d      	ldr	r1, [pc, #372]	; (8007670 <scaraInitDuty+0x890>)
 80074fa:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 80074fe:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8007502:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8007506:	a358      	add	r3, pc, #352	; (adr r3, 8007668 <scaraInitDuty+0x888>)
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f7f9 f874 	bl	80005f8 <__aeabi_dmul>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4610      	mov	r0, r2
 8007516:	4619      	mov	r1, r3
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	4b58      	ldr	r3, [pc, #352]	; (8007680 <scaraInitDuty+0x8a0>)
 800751e:	f7f9 f995 	bl	800084c <__aeabi_ddiv>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800752a:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800752e:	2b01      	cmp	r3, #1
 8007530:	d12c      	bne.n	800758c <scaraInitDuty+0x7ac>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8007532:	4b52      	ldr	r3, [pc, #328]	; (800767c <scaraInitDuty+0x89c>)
 8007534:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007538:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800753c:	f7f8 fea6 	bl	800028c <__adddf3>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8007548:	4b4c      	ldr	r3, [pc, #304]	; (800767c <scaraInitDuty+0x89c>)
 800754a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800754e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007552:	f7f8 fe9b 	bl	800028c <__adddf3>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 800755e:	4b47      	ldr	r3, [pc, #284]	; (800767c <scaraInitDuty+0x89c>)
 8007560:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8007564:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007568:	f7f8 fe90 	bl	800028c <__adddf3>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8007574:	4b41      	ldr	r3, [pc, #260]	; (800767c <scaraInitDuty+0x89c>)
 8007576:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800757a:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800757e:	f7f8 fe85 	bl	800028c <__adddf3>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 800758a:	e016      	b.n	80075ba <scaraInitDuty+0x7da>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800758c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8007590:	2b00      	cmp	r3, #0
 8007592:	d110      	bne.n	80075b6 <scaraInitDuty+0x7d6>
			target_point.x 		= command.target_point.x;
 8007594:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8007598:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 800759c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80075a0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 80075a4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80075a8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 80075ac:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80075b0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 80075b4:	e001      	b.n	80075ba <scaraInitDuty+0x7da>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80075b6:	230c      	movs	r3, #12
 80075b8:	e324      	b.n	8007c04 <scaraInitDuty+0xe24>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 80075ba:	4c30      	ldr	r4, [pc, #192]	; (800767c <scaraInitDuty+0x89c>)
 80075bc:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 80075c0:	4668      	mov	r0, sp
 80075c2:	f104 0308 	add.w	r3, r4, #8
 80075c6:	22b8      	movs	r2, #184	; 0xb8
 80075c8:	4619      	mov	r1, r3
 80075ca:	f00e fe59 	bl	8016280 <memcpy>
 80075ce:	e894 000c 	ldmia.w	r4, {r2, r3}
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7fe f8c4 	bl	8005760 <kinematicInverse>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <scaraInitDuty+0x802>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80075de:	2307      	movs	r3, #7
 80075e0:	e310      	b.n	8007c04 <scaraInitDuty+0xe24>
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80075e2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80075e6:	4b25      	ldr	r3, [pc, #148]	; (800767c <scaraInitDuty+0x89c>)
 80075e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80075ec:	f7f8 fe4c 	bl	8000288 <__aeabi_dsub>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80075fc:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8007600:	4b1e      	ldr	r3, [pc, #120]	; (800767c <scaraInitDuty+0x89c>)
 8007602:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007606:	f7f8 fe3f 	bl	8000288 <__aeabi_dsub>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	f107 0108 	add.w	r1, r7, #8
 8007612:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 8007616:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800761a:	4b18      	ldr	r3, [pc, #96]	; (800767c <scaraInitDuty+0x89c>)
 800761c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007620:	f7f8 fe32 	bl	8000288 <__aeabi_dsub>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8007630:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8007634:	4b11      	ldr	r3, [pc, #68]	; (800767c <scaraInitDuty+0x89c>)
 8007636:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800763a:	f7f8 fe25 	bl	8000288 <__aeabi_dsub>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	f107 0108 	add.w	r1, r7, #8
 8007646:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800764a:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 8156 	bne.w	8007900 <scaraInitDuty+0xb20>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007654:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d171      	bne.n	8007740 <scaraInitDuty+0x960>
				for ( uint8_t i = 0; i < 4; i++) {
 800765c:	2300      	movs	r3, #0
 800765e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007662:	e061      	b.n	8007728 <scaraInitDuty+0x948>
 8007664:	f3af 8000 	nop.w
 8007668:	60000000 	.word	0x60000000
 800766c:	400921fb 	.word	0x400921fb
 8007670:	2000ff40 	.word	0x2000ff40
 8007674:	2000fd48 	.word	0x2000fd48
 8007678:	20010328 	.word	0x20010328
 800767c:	20010b00 	.word	0x20010b00
 8007680:	40668000 	.word	0x40668000
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007684:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007688:	49d3      	ldr	r1, [pc, #844]	; (80079d8 <scaraInitDuty+0xbf8>)
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	01db      	lsls	r3, r3, #7
 8007692:	440b      	add	r3, r1
 8007694:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007698:	2200      	movs	r2, #0
 800769a:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800769c:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80076a0:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80076a4:	4ccc      	ldr	r4, [pc, #816]	; (80079d8 <scaraInitDuty+0xbf8>)
 80076a6:	4613      	mov	r3, r2
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	4413      	add	r3, r2
 80076ac:	01db      	lsls	r3, r3, #7
 80076ae:	4423      	add	r3, r4
 80076b0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80076b4:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80076b8:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80076bc:	4613      	mov	r3, r2
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	4413      	add	r3, r2
 80076c2:	01db      	lsls	r3, r3, #7
 80076c4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80076c8:	4ac3      	ldr	r2, [pc, #780]	; (80079d8 <scaraInitDuty+0xbf8>)
 80076ca:	1898      	adds	r0, r3, r2
 80076cc:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80076d0:	4ac2      	ldr	r2, [pc, #776]	; (80079dc <scaraInitDuty+0xbfc>)
 80076d2:	5cd1      	ldrb	r1, [r2, r3]
 80076d4:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80076d8:	f107 0208 	add.w	r2, r7, #8
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	4413      	add	r3, r2
 80076e0:	ed93 7b00 	vldr	d7, [r3]
 80076e4:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80076e8:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 80076ec:	eeb0 2a45 	vmov.f32	s4, s10
 80076f0:	eef0 2a65 	vmov.f32	s5, s11
 80076f4:	eeb0 1a46 	vmov.f32	s2, s12
 80076f8:	eef0 1a66 	vmov.f32	s3, s13
 80076fc:	2201      	movs	r2, #1
 80076fe:	eeb0 0a47 	vmov.f32	s0, s14
 8007702:	eef0 0a67 	vmov.f32	s1, s15
 8007706:	f000 fd43 	bl	8008190 <scaraInitLSPB1>
 800770a:	4603      	mov	r3, r0
 800770c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 8007710:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <scaraInitDuty+0x93e>
						return status1;
 8007718:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800771c:	e272      	b.n	8007c04 <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 800771e:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007722:	3301      	adds	r3, #1
 8007724:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007728:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800772c:	2b03      	cmp	r3, #3
 800772e:	d9a9      	bls.n	8007684 <scaraInitDuty+0x8a4>
					}
				}
				myDUTY.time_total = command.time_total;
 8007730:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8007734:	49a8      	ldr	r1, [pc, #672]	; (80079d8 <scaraInitDuty+0xbf8>)
 8007736:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800773a:	e9c1 2300 	strd	r2, r3, [r1]
 800773e:	e233      	b.n	8007ba8 <scaraInitDuty+0xdc8>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007740:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 80d9 	bne.w	80078fc <scaraInitDuty+0xb1c>
				for ( uint8_t i = 0; i < 4; i++) {
 800774a:	2300      	movs	r3, #0
 800774c:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007750:	e03c      	b.n	80077cc <scaraInitDuty+0x9ec>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007752:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 8007756:	49a0      	ldr	r1, [pc, #640]	; (80079d8 <scaraInitDuty+0xbf8>)
 8007758:	4613      	mov	r3, r2
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	4413      	add	r3, r2
 800775e:	01db      	lsls	r3, r3, #7
 8007760:	440b      	add	r3, r1
 8007762:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800776a:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 800776e:	4613      	mov	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4413      	add	r3, r2
 8007774:	01db      	lsls	r3, r3, #7
 8007776:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800777a:	4a97      	ldr	r2, [pc, #604]	; (80079d8 <scaraInitDuty+0xbf8>)
 800777c:	1898      	adds	r0, r3, r2
 800777e:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007782:	4a96      	ldr	r2, [pc, #600]	; (80079dc <scaraInitDuty+0xbfc>)
 8007784:	5cd1      	ldrb	r1, [r2, r3]
 8007786:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800778a:	f107 0208 	add.w	r2, r7, #8
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	4413      	add	r3, r2
 8007792:	ed93 7b00 	vldr	d7, [r3]
 8007796:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800779a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800779e:	eeb0 2a45 	vmov.f32	s4, s10
 80077a2:	eef0 2a65 	vmov.f32	s5, s11
 80077a6:	eeb0 1a46 	vmov.f32	s2, s12
 80077aa:	eef0 1a66 	vmov.f32	s3, s13
 80077ae:	2200      	movs	r2, #0
 80077b0:	eeb0 0a47 	vmov.f32	s0, s14
 80077b4:	eef0 0a67 	vmov.f32	s1, s15
 80077b8:	f001 ff02 	bl	80095c0 <scaraInitLSPB>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80077c2:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80077c6:	3301      	adds	r3, #1
 80077c8:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80077cc:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d9be      	bls.n	8007752 <scaraInitDuty+0x972>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 80077d4:	4b80      	ldr	r3, [pc, #512]	; (80079d8 <scaraInitDuty+0xbf8>)
 80077d6:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 80077da:	f04f 0200 	mov.w	r2, #0
 80077de:	f04f 0300 	mov.w	r3, #0
 80077e2:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80077e6:	2300      	movs	r3, #0
 80077e8:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 80077ec:	e02b      	b.n	8007846 <scaraInitDuty+0xa66>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80077ee:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80077f2:	4979      	ldr	r1, [pc, #484]	; (80079d8 <scaraInitDuty+0xbf8>)
 80077f4:	4613      	mov	r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	01db      	lsls	r3, r3, #7
 80077fc:	440b      	add	r3, r1
 80077fe:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007806:	4b74      	ldr	r3, [pc, #464]	; (80079d8 <scaraInitDuty+0xbf8>)
 8007808:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f7f9 f982 	bl	8000b18 <__aeabi_dcmpgt>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d010      	beq.n	800783c <scaraInitDuty+0xa5c>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800781a:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 800781e:	496e      	ldr	r1, [pc, #440]	; (80079d8 <scaraInitDuty+0xbf8>)
 8007820:	4613      	mov	r3, r2
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	4413      	add	r3, r2
 8007826:	01db      	lsls	r3, r3, #7
 8007828:	440b      	add	r3, r1
 800782a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	4969      	ldr	r1, [pc, #420]	; (80079d8 <scaraInitDuty+0xbf8>)
 8007834:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007838:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 800783c:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007840:	3301      	adds	r3, #1
 8007842:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007846:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800784a:	2b03      	cmp	r3, #3
 800784c:	d9cf      	bls.n	80077ee <scaraInitDuty+0xa0e>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 800784e:	2300      	movs	r3, #0
 8007850:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 8007854:	e04d      	b.n	80078f2 <scaraInitDuty+0xb12>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007856:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 800785a:	495f      	ldr	r1, [pc, #380]	; (80079d8 <scaraInitDuty+0xbf8>)
 800785c:	4613      	mov	r3, r2
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	4413      	add	r3, r2
 8007862:	01db      	lsls	r3, r3, #7
 8007864:	440b      	add	r3, r1
 8007866:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 800786e:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007872:	4b59      	ldr	r3, [pc, #356]	; (80079d8 <scaraInitDuty+0xbf8>)
 8007874:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800787c:	4c56      	ldr	r4, [pc, #344]	; (80079d8 <scaraInitDuty+0xbf8>)
 800787e:	4613      	mov	r3, r2
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	4413      	add	r3, r2
 8007884:	01db      	lsls	r3, r3, #7
 8007886:	4423      	add	r3, r4
 8007888:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800788c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007890:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 8007894:	4613      	mov	r3, r2
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	4413      	add	r3, r2
 800789a:	01db      	lsls	r3, r3, #7
 800789c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80078a0:	4a4d      	ldr	r2, [pc, #308]	; (80079d8 <scaraInitDuty+0xbf8>)
 80078a2:	1898      	adds	r0, r3, r2
 80078a4:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80078a8:	4a4c      	ldr	r2, [pc, #304]	; (80079dc <scaraInitDuty+0xbfc>)
 80078aa:	5cd1      	ldrb	r1, [r2, r3]
 80078ac:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80078b0:	f107 0208 	add.w	r2, r7, #8
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	4413      	add	r3, r2
 80078b8:	ed93 7b00 	vldr	d7, [r3]
 80078bc:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80078c0:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80078c4:	eeb0 2a45 	vmov.f32	s4, s10
 80078c8:	eef0 2a65 	vmov.f32	s5, s11
 80078cc:	eeb0 1a46 	vmov.f32	s2, s12
 80078d0:	eef0 1a66 	vmov.f32	s3, s13
 80078d4:	2201      	movs	r2, #1
 80078d6:	eeb0 0a47 	vmov.f32	s0, s14
 80078da:	eef0 0a67 	vmov.f32	s1, s15
 80078de:	f001 fe6f 	bl	80095c0 <scaraInitLSPB>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80078e8:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80078ec:	3301      	adds	r3, #1
 80078ee:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 80078f2:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d9ad      	bls.n	8007856 <scaraInitDuty+0xa76>
 80078fa:	e155      	b.n	8007ba8 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80078fc:	2308      	movs	r3, #8
 80078fe:	e181      	b.n	8007c04 <scaraInitDuty+0xe24>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8007900:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007904:	2b01      	cmp	r3, #1
 8007906:	f040 814b 	bne.w	8007ba0 <scaraInitDuty+0xdc0>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800790a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800790e:	2b01      	cmp	r3, #1
 8007910:	d166      	bne.n	80079e0 <scaraInitDuty+0xc00>
				for ( uint8_t i = 0; i < 4; i++) {
 8007912:	2300      	movs	r3, #0
 8007914:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007918:	e051      	b.n	80079be <scaraInitDuty+0xbde>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800791a:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 800791e:	492e      	ldr	r1, [pc, #184]	; (80079d8 <scaraInitDuty+0xbf8>)
 8007920:	4613      	mov	r3, r2
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	4413      	add	r3, r2
 8007926:	01db      	lsls	r3, r3, #7
 8007928:	440b      	add	r3, r1
 800792a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800792e:	2201      	movs	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8007932:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007936:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 800793a:	4c27      	ldr	r4, [pc, #156]	; (80079d8 <scaraInitDuty+0xbf8>)
 800793c:	4613      	mov	r3, r2
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	4413      	add	r3, r2
 8007942:	01db      	lsls	r3, r3, #7
 8007944:	4423      	add	r3, r4
 8007946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794a:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800794e:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8007952:	4613      	mov	r3, r2
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	4413      	add	r3, r2
 8007958:	01db      	lsls	r3, r3, #7
 800795a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800795e:	4a1e      	ldr	r2, [pc, #120]	; (80079d8 <scaraInitDuty+0xbf8>)
 8007960:	1898      	adds	r0, r3, r2
 8007962:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007966:	4a1d      	ldr	r2, [pc, #116]	; (80079dc <scaraInitDuty+0xbfc>)
 8007968:	5cd1      	ldrb	r1, [r2, r3]
 800796a:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800796e:	f107 0208 	add.w	r2, r7, #8
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4413      	add	r3, r2
 8007976:	ed93 7b00 	vldr	d7, [r3]
 800797a:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800797e:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 8007982:	eeb0 2a45 	vmov.f32	s4, s10
 8007986:	eef0 2a65 	vmov.f32	s5, s11
 800798a:	eeb0 1a46 	vmov.f32	s2, s12
 800798e:	eef0 1a66 	vmov.f32	s3, s13
 8007992:	2201      	movs	r2, #1
 8007994:	eeb0 0a47 	vmov.f32	s0, s14
 8007998:	eef0 0a67 	vmov.f32	s1, s15
 800799c:	f000 febc 	bl	8008718 <scaraInitScurve1>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 80079a6:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <scaraInitDuty+0xbd4>
						return status1;
 80079ae:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80079b2:	e127      	b.n	8007c04 <scaraInitDuty+0xe24>
				for ( uint8_t i = 0; i < 4; i++) {
 80079b4:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80079b8:	3301      	adds	r3, #1
 80079ba:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 80079be:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d9a9      	bls.n	800791a <scaraInitDuty+0xb3a>
					}
				}
				myDUTY.time_total = command.time_total;
 80079c6:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80079ca:	4903      	ldr	r1, [pc, #12]	; (80079d8 <scaraInitDuty+0xbf8>)
 80079cc:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80079d0:	e9c1 2300 	strd	r2, r3, [r1]
 80079d4:	e0e8      	b.n	8007ba8 <scaraInitDuty+0xdc8>
 80079d6:	bf00      	nop
 80079d8:	2000ff40 	.word	0x2000ff40
 80079dc:	20004088 	.word	0x20004088
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80079e0:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f040 80d9 	bne.w	8007b9c <scaraInitDuty+0xdbc>
				for ( uint8_t i = 0; i < 4; i++) {
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 80079f0:	e03c      	b.n	8007a6c <scaraInitDuty+0xc8c>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80079f2:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 80079f6:	4988      	ldr	r1, [pc, #544]	; (8007c18 <scaraInitDuty+0xe38>)
 80079f8:	4613      	mov	r3, r2
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4413      	add	r3, r2
 80079fe:	01db      	lsls	r3, r3, #7
 8007a00:	440b      	add	r3, r1
 8007a02:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007a06:	2201      	movs	r2, #1
 8007a08:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007a0a:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007a0e:	4613      	mov	r3, r2
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	4413      	add	r3, r2
 8007a14:	01db      	lsls	r3, r3, #7
 8007a16:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007a1a:	4a7f      	ldr	r2, [pc, #508]	; (8007c18 <scaraInitDuty+0xe38>)
 8007a1c:	1898      	adds	r0, r3, r2
 8007a1e:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a22:	4a7e      	ldr	r2, [pc, #504]	; (8007c1c <scaraInitDuty+0xe3c>)
 8007a24:	5cd1      	ldrb	r1, [r2, r3]
 8007a26:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a2a:	f107 0208 	add.w	r2, r7, #8
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	4413      	add	r3, r2
 8007a32:	ed93 7b00 	vldr	d7, [r3]
 8007a36:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007a3a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007a3e:	eeb0 2a45 	vmov.f32	s4, s10
 8007a42:	eef0 2a65 	vmov.f32	s5, s11
 8007a46:	eeb0 1a46 	vmov.f32	s2, s12
 8007a4a:	eef0 1a66 	vmov.f32	s3, s13
 8007a4e:	2200      	movs	r2, #0
 8007a50:	eeb0 0a47 	vmov.f32	s0, s14
 8007a54:	eef0 0a67 	vmov.f32	s1, s15
 8007a58:	f002 f984 	bl	8009d64 <scaraInitScurve>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007a62:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a66:	3301      	adds	r3, #1
 8007a68:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 8007a6c:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d9be      	bls.n	80079f2 <scaraInitDuty+0xc12>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007a74:	4b68      	ldr	r3, [pc, #416]	; (8007c18 <scaraInitDuty+0xe38>)
 8007a76:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007a8c:	e02b      	b.n	8007ae6 <scaraInitDuty+0xd06>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8007a8e:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007a92:	4961      	ldr	r1, [pc, #388]	; (8007c18 <scaraInitDuty+0xe38>)
 8007a94:	4613      	mov	r3, r2
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	4413      	add	r3, r2
 8007a9a:	01db      	lsls	r3, r3, #7
 8007a9c:	440b      	add	r3, r1
 8007a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007aa6:	4b5c      	ldr	r3, [pc, #368]	; (8007c18 <scaraInitDuty+0xe38>)
 8007aa8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f7f9 f832 	bl	8000b18 <__aeabi_dcmpgt>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d010      	beq.n	8007adc <scaraInitDuty+0xcfc>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8007aba:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007abe:	4956      	ldr	r1, [pc, #344]	; (8007c18 <scaraInitDuty+0xe38>)
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	01db      	lsls	r3, r3, #7
 8007ac8:	440b      	add	r3, r1
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	4951      	ldr	r1, [pc, #324]	; (8007c18 <scaraInitDuty+0xe38>)
 8007ad4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007ad8:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007adc:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007ae6:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d9cf      	bls.n	8007a8e <scaraInitDuty+0xcae>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007af4:	e04d      	b.n	8007b92 <scaraInitDuty+0xdb2>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007af6:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007afa:	4947      	ldr	r1, [pc, #284]	; (8007c18 <scaraInitDuty+0xe38>)
 8007afc:	4613      	mov	r3, r2
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	4413      	add	r3, r2
 8007b02:	01db      	lsls	r3, r3, #7
 8007b04:	440b      	add	r3, r1
 8007b06:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8007b0e:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007b12:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <scaraInitDuty+0xe38>)
 8007b14:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b1c:	4c3e      	ldr	r4, [pc, #248]	; (8007c18 <scaraInitDuty+0xe38>)
 8007b1e:	4613      	mov	r3, r2
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	4413      	add	r3, r2
 8007b24:	01db      	lsls	r3, r3, #7
 8007b26:	4423      	add	r3, r4
 8007b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2c:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007b30:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007b34:	4613      	mov	r3, r2
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	4413      	add	r3, r2
 8007b3a:	01db      	lsls	r3, r3, #7
 8007b3c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007b40:	4a35      	ldr	r2, [pc, #212]	; (8007c18 <scaraInitDuty+0xe38>)
 8007b42:	1898      	adds	r0, r3, r2
 8007b44:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007b48:	4a34      	ldr	r2, [pc, #208]	; (8007c1c <scaraInitDuty+0xe3c>)
 8007b4a:	5cd1      	ldrb	r1, [r2, r3]
 8007b4c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007b50:	f107 0208 	add.w	r2, r7, #8
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	4413      	add	r3, r2
 8007b58:	ed93 7b00 	vldr	d7, [r3]
 8007b5c:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007b60:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007b64:	eeb0 2a45 	vmov.f32	s4, s10
 8007b68:	eef0 2a65 	vmov.f32	s5, s11
 8007b6c:	eeb0 1a46 	vmov.f32	s2, s12
 8007b70:	eef0 1a66 	vmov.f32	s3, s13
 8007b74:	2201      	movs	r2, #1
 8007b76:	eeb0 0a47 	vmov.f32	s0, s14
 8007b7a:	eef0 0a67 	vmov.f32	s1, s15
 8007b7e:	f002 f8f1 	bl	8009d64 <scaraInitScurve>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007b88:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007b92:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d9ad      	bls.n	8007af6 <scaraInitDuty+0xd16>
 8007b9a:	e005      	b.n	8007ba8 <scaraInitDuty+0xdc8>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	e031      	b.n	8007c04 <scaraInitDuty+0xe24>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8007ba0:	2305      	movs	r3, #5
 8007ba2:	e02f      	b.n	8007c04 <scaraInitDuty+0xe24>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e02d      	b.n	8007c04 <scaraInitDuty+0xe24>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8007ba8:	491d      	ldr	r1, [pc, #116]	; (8007c20 <scaraInitDuty+0xe40>)
 8007baa:	f04f 0200 	mov.w	r2, #0
 8007bae:	f04f 0300 	mov.w	r3, #0
 8007bb2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8007bb6:	4b18      	ldr	r3, [pc, #96]	; (8007c18 <scaraInitDuty+0xe38>)
 8007bb8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	4917      	ldr	r1, [pc, #92]	; (8007c20 <scaraInitDuty+0xe40>)
 8007bc2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 8007bc6:	4917      	ldr	r1, [pc, #92]	; (8007c24 <scaraInitDuty+0xe44>)
 8007bc8:	f04f 0200 	mov.w	r2, #0
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8007bd4:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <scaraInitDuty+0xe38>)
 8007bd6:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	4911      	ldr	r1, [pc, #68]	; (8007c24 <scaraInitDuty+0xe44>)
 8007be0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 8007be4:	4910      	ldr	r1, [pc, #64]	; (8007c28 <scaraInitDuty+0xe48>)
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8007bf2:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <scaraInitDuty+0xe38>)
 8007bf4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	490a      	ldr	r1, [pc, #40]	; (8007c28 <scaraInitDuty+0xe48>)
 8007bfe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	ecbd 8b02 	vpop	{d8}
 8007c10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007c14:	b004      	add	sp, #16
 8007c16:	4770      	bx	lr
 8007c18:	2000ff40 	.word	0x2000ff40
 8007c1c:	20004088 	.word	0x20004088
 8007c20:	20010b00 	.word	0x20010b00
 8007c24:	20010c80 	.word	0x20010c80
 8007c28:	20010bc0 	.word	0x20010bc0

08007c2c <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	b5b0      	push	{r4, r5, r7, lr}
 8007c30:	b0b0      	sub	sp, #192	; 0xc0
 8007c32:	af2e      	add	r7, sp, #184	; 0xb8
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	f107 0118 	add.w	r1, r7, #24
 8007c3a:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8007c3e:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8007c42:	4668      	mov	r0, sp
 8007c44:	f107 0320 	add.w	r3, r7, #32
 8007c48:	22b8      	movs	r2, #184	; 0xb8
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	f00e fb18 	bl	8016280 <memcpy>
 8007c50:	f107 0318 	add.w	r3, r7, #24
 8007c54:	cb0c      	ldmia	r3, {r2, r3}
 8007c56:	4620      	mov	r0, r4
 8007c58:	f7fd fd82 	bl	8005760 <kinematicInverse>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007c62:	2307      	movs	r3, #7
 8007c64:	e08e      	b.n	8007d84 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 8007c66:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 8007c70:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 8007c7a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007c84:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 8007c8e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007c98:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 8007ca2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8007ca6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007caa:	f7f8 faed 	bl	8000288 <__aeabi_dsub>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007cb8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007cbc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007cc0:	f7f8 fae2 	bl	8000288 <__aeabi_dsub>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8007cce:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007cd2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007cd6:	f7f8 fad7 	bl	8000288 <__aeabi_dsub>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007cf0:	f7f8 fc82 	bl	80005f8 <__aeabi_dmul>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007d08:	f7f8 fc76 	bl	80005f8 <__aeabi_dmul>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4620      	mov	r0, r4
 8007d12:	4629      	mov	r1, r5
 8007d14:	f7f8 faba 	bl	800028c <__adddf3>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007d2c:	f7f8 fc64 	bl	80005f8 <__aeabi_dmul>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007d34:	4620      	mov	r0, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7f8 faa8 	bl	800028c <__adddf3>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	ec43 2b17 	vmov	d7, r2, r3
 8007d44:	eeb0 0a47 	vmov.f32	s0, s14
 8007d48:	eef0 0a67 	vmov.f32	s1, s15
 8007d4c:	f013 f8a8 	bl	801aea0 <sqrt>
 8007d50:	eeb0 7a40 	vmov.f32	s14, s0
 8007d54:	eef0 7a60 	vmov.f32	s15, s1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007d8e:	b002      	add	sp, #8
 8007d90:	4770      	bx	lr
 8007d92:	0000      	movs	r0, r0
 8007d94:	0000      	movs	r0, r0
	...

08007d98 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007d98:	b082      	sub	sp, #8
 8007d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9e:	b0c5      	sub	sp, #276	; 0x114
 8007da0:	af2e      	add	r7, sp, #184	; 0xb8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007da8:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8007dac:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8007db0:	4668      	mov	r0, sp
 8007db2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007db6:	22b8      	movs	r2, #184	; 0xb8
 8007db8:	4619      	mov	r1, r3
 8007dba:	f00e fa61 	bl	8016280 <memcpy>
 8007dbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007dc2:	cb0c      	ldmia	r3, {r2, r3}
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7fd fccb 	bl	8005760 <kinematicInverse>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007dd0:	2307      	movs	r3, #7
 8007dd2:	e17b      	b.n	80080cc <scaraInitCircle+0x334>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 8007dd4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d006      	beq.n	8007dea <scaraInitCircle+0x52>
 8007ddc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d001      	beq.n	8007dea <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8007de6:	2306      	movs	r3, #6
 8007de8:	e170      	b.n	80080cc <scaraInitCircle+0x334>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 8007dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dee:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007df2:	f7f8 fa49 	bl	8000288 <__aeabi_dsub>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 8007dfe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007e02:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007e06:	f7f8 fa3f 	bl	8000288 <__aeabi_dsub>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007e12:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007e16:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007e1a:	f7f8 fa35 	bl	8000288 <__aeabi_dsub>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007e26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007e2a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007e2e:	f7f8 fa2b 	bl	8000288 <__aeabi_dsub>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007e3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e42:	f7f8 fbd9 	bl	80005f8 <__aeabi_dmul>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4692      	mov	sl, r2
 8007e4c:	469b      	mov	fp, r3
 8007e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e56:	f7f8 fbcf 	bl	80005f8 <__aeabi_dmul>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	f7f8 fa13 	bl	800028c <__adddf3>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	ec43 2b17 	vmov	d7, r2, r3
 8007e6e:	eeb0 0a47 	vmov.f32	s0, s14
 8007e72:	eef0 0a67 	vmov.f32	s1, s15
 8007e76:	f013 f813 	bl	801aea0 <sqrt>
 8007e7a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007e7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e82:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007e86:	f7f8 fbb7 	bl	80005f8 <__aeabi_dmul>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4692      	mov	sl, r2
 8007e90:	469b      	mov	fp, r3
 8007e92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e96:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e9a:	f7f8 fbad 	bl	80005f8 <__aeabi_dmul>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	f7f8 f9f1 	bl	800028c <__adddf3>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	ec43 2b17 	vmov	d7, r2, r3
 8007eb2:	eeb0 0a47 	vmov.f32	s0, s14
 8007eb6:	eef0 0a67 	vmov.f32	s1, s15
 8007eba:	f012 fff1 	bl	801aea0 <sqrt>
 8007ebe:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ec6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007eca:	f7f8 f9dd 	bl	8000288 <__aeabi_dsub>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4690      	mov	r8, r2
 8007ed4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	4b84      	ldr	r3, [pc, #528]	; (80080f0 <scaraInitCircle+0x358>)
 8007ede:	4640      	mov	r0, r8
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	f7f8 fe19 	bl	8000b18 <__aeabi_dcmpgt>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007eec:	2306      	movs	r3, #6
 8007eee:	e0ed      	b.n	80080cc <scaraInitCircle+0x334>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007ef0:	a37b      	add	r3, pc, #492	; (adr r3, 80080e0 <scaraInitCircle+0x348>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007efa:	f7f8 fdef 	bl	8000adc <__aeabi_dcmplt>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d109      	bne.n	8007f18 <scaraInitCircle+0x180>
 8007f04:	a376      	add	r3, pc, #472	; (adr r3, 80080e0 <scaraInitCircle+0x348>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f0e:	f7f8 fde5 	bl	8000adc <__aeabi_dcmplt>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007f18:	2306      	movs	r3, #6
 8007f1a:	e0d7      	b.n	80080cc <scaraInitCircle+0x334>
	}

	angle_start = atan2(y_start, x_start);
 8007f1c:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007f20:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007f24:	f012 ffba 	bl	801ae9c <atan2>
 8007f28:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007f2c:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007f30:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007f34:	f012 ffb2 	bl	801ae9c <atan2>
 8007f38:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f44:	f7f8 f9a0 	bl	8000288 <__aeabi_dsub>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f5c:	f7f8 fdbe 	bl	8000adc <__aeabi_dcmplt>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d015      	beq.n	8007f92 <scaraInitCircle+0x1fa>
 8007f66:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	dd11      	ble.n	8007f92 <scaraInitCircle+0x1fa>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f78:	607b      	str	r3, [r7, #4]
 8007f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7e:	a15a      	add	r1, pc, #360	; (adr r1, 80080e8 <scaraInitCircle+0x350>)
 8007f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f84:	f7f8 f980 	bl	8000288 <__aeabi_dsub>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007f90:	e01d      	b.n	8007fce <scaraInitCircle+0x236>
	}else if(delta_angle > 0 && dir < 0){
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	f04f 0300 	mov.w	r3, #0
 8007f9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f9e:	f7f8 fdbb 	bl	8000b18 <__aeabi_dcmpgt>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d012      	beq.n	8007fce <scaraInitCircle+0x236>
 8007fa8:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da0e      	bge.n	8007fce <scaraInitCircle+0x236>
		delta_angle = 2*PI - fabs(delta_angle);
 8007fb0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8007fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007fb8:	4622      	mov	r2, r4
 8007fba:	462b      	mov	r3, r5
 8007fbc:	a14a      	add	r1, pc, #296	; (adr r1, 80080e8 <scaraInitCircle+0x350>)
 8007fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc2:	f7f8 f961 	bl	8000288 <__aeabi_dsub>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8007fce:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8007fd2:	f7f8 faa7 	bl	8000524 <__aeabi_i2d>
 8007fd6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fda:	f7f8 fb0d 	bl	80005f8 <__aeabi_dmul>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	f7f8 fd75 	bl	8000adc <__aeabi_dcmplt>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d005      	beq.n	8008004 <scaraInitCircle+0x26c>
		delta_angle = fabs(delta_angle);
 8007ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8007ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ffe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008002:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8008004:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008008:	b25a      	sxtb	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008014:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8008018:	68f9      	ldr	r1, [r7, #12]
 800801a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800801e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008028:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 800802c:	68f9      	ldr	r1, [r7, #12]
 800802e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008032:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8008036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800803a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800803e:	f7f8 fadb 	bl	80005f8 <__aeabi_dmul>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 800804c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8008050:	68f9      	ldr	r1, [r7, #12]
 8008052:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 8008056:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8008060:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8008064:	68f9      	ldr	r1, [r7, #12]
 8008066:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 800806a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 8008074:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8008078:	68f9      	ldr	r1, [r7, #12]
 800807a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 800807e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8008088:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800808c:	68f9      	ldr	r1, [r7, #12]
 800808e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 8008092:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 800809c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80080a0:	68f9      	ldr	r1, [r7, #12]
 80080a2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080ac:	68f9      	ldr	r1, [r7, #12]
 80080ae:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80080b8:	68f9      	ldr	r1, [r7, #12]
 80080ba:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80080c4:	68f9      	ldr	r1, [r7, #12]
 80080c6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	375c      	adds	r7, #92	; 0x5c
 80080d0:	46bd      	mov	sp, r7
 80080d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d6:	b002      	add	sp, #8
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	f3af 8000 	nop.w
 80080e0:	9999999a 	.word	0x9999999a
 80080e4:	3fb99999 	.word	0x3fb99999
 80080e8:	60000000 	.word	0x60000000
 80080ec:	401921fb 	.word	0x401921fb
 80080f0:	3ff00000 	.word	0x3ff00000

080080f4 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6178      	str	r0, [r7, #20]
 80080fc:	460b      	mov	r3, r1
 80080fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8008102:	ed87 1b00 	vstr	d1, [r7]
 8008106:	74fb      	strb	r3, [r7, #19]
 8008108:	4613      	mov	r3, r2
 800810a:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 800810c:	7cfb      	ldrb	r3, [r7, #19]
 800810e:	2b04      	cmp	r3, #4
 8008110:	d004      	beq.n	800811c <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8008112:	7cfb      	ldrb	r3, [r7, #19]
 8008114:	2b05      	cmp	r3, #5
 8008116:	d001      	beq.n	800811c <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008118:	2306      	movs	r3, #6
 800811a:	e032      	b.n	8008182 <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 800811c:	7cbb      	ldrb	r3, [r7, #18]
 800811e:	2b03      	cmp	r3, #3
 8008120:	d110      	bne.n	8008144 <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 8008122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800812a:	f7f8 fb8f 	bl	800084c <__aeabi_ddiv>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	6979      	ldr	r1, [r7, #20]
 8008134:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 8008138:	6979      	ldr	r1, [r7, #20]
 800813a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800813e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8008142:	e01d      	b.n	8008180 <scaraInitLinear+0x8c>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8008144:	7cbb      	ldrb	r3, [r7, #18]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d118      	bne.n	800817c <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	4b0f      	ldr	r3, [pc, #60]	; (800818c <scaraInitLinear+0x98>)
 8008150:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008154:	f7f8 fa50 	bl	80005f8 <__aeabi_dmul>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	6979      	ldr	r1, [r7, #20]
 800815e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800816c:	f7f8 fb6e 	bl	800084c <__aeabi_ddiv>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	6979      	ldr	r1, [r7, #20]
 8008176:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800817a:	e001      	b.n	8008180 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 800817c:	2306      	movs	r3, #6
 800817e:	e000      	b.n	8008182 <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40877000 	.word	0x40877000

08008190 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8008190:	b5b0      	push	{r4, r5, r7, lr}
 8008192:	b096      	sub	sp, #88	; 0x58
 8008194:	af00      	add	r7, sp, #0
 8008196:	61f8      	str	r0, [r7, #28]
 8008198:	460b      	mov	r3, r1
 800819a:	ed87 0b04 	vstr	d0, [r7, #16]
 800819e:	ed87 1b02 	vstr	d1, [r7, #8]
 80081a2:	ed87 2b00 	vstr	d2, [r7]
 80081a6:	76fb      	strb	r3, [r7, #27]
 80081a8:	4613      	mov	r3, r2
 80081aa:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081b8:	f7f8 fc90 	bl	8000adc <__aeabi_dcmplt>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <scaraInitLSPB1+0x46>
		total_s = -total_s;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	613b      	str	r3, [r7, #16]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80081cc:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	22ff      	movs	r2, #255	; 0xff
 80081d2:	701a      	strb	r2, [r3, #0]
 80081d4:	e002      	b.n	80081dc <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	2201      	movs	r2, #1
 80081da:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 80081dc:	7efb      	ldrb	r3, [r7, #27]
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d12c      	bne.n	800823c <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80081e2:	7ebb      	ldrb	r3, [r7, #26]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d10f      	bne.n	8008208 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	4b98      	ldr	r3, [pc, #608]	; (8008450 <scaraInitLSPB1+0x2c0>)
 80081ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081f2:	f7f8 fa01 	bl	80005f8 <__aeabi_dmul>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80081fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008202:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008206:	e073      	b.n	80082f0 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008208:	7ebb      	ldrb	r3, [r7, #26]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d170      	bne.n	80082f0 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 800820e:	f04f 0200 	mov.w	r2, #0
 8008212:	4b90      	ldr	r3, [pc, #576]	; (8008454 <scaraInitLSPB1+0x2c4>)
 8008214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008218:	f7f8 f9ee 	bl	80005f8 <__aeabi_dmul>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	4b89      	ldr	r3, [pc, #548]	; (8008450 <scaraInitLSPB1+0x2c0>)
 800822a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800822e:	f7f8 f9e3 	bl	80005f8 <__aeabi_dmul>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800823a:	e059      	b.n	80082f0 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 800823c:	7efb      	ldrb	r3, [r7, #27]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d112      	bne.n	8008268 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008242:	7ebb      	ldrb	r3, [r7, #26]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d153      	bne.n	80082f0 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8008248:	a373      	add	r3, pc, #460	; (adr r3, 8008418 <scaraInitLSPB1+0x288>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008252:	f7f8 f9d1 	bl	80005f8 <__aeabi_dmul>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800825e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008262:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008266:	e043      	b.n	80082f0 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 8008268:	7efb      	ldrb	r3, [r7, #27]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d112      	bne.n	8008294 <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800826e:	7ebb      	ldrb	r3, [r7, #26]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d13d      	bne.n	80082f0 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8008274:	a368      	add	r3, pc, #416	; (adr r3, 8008418 <scaraInitLSPB1+0x288>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800827e:	f7f8 f9bb 	bl	80005f8 <__aeabi_dmul>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800828a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008292:	e02d      	b.n	80082f0 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 8008294:	7efb      	ldrb	r3, [r7, #27]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d112      	bne.n	80082c0 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800829a:	7ebb      	ldrb	r3, [r7, #26]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d127      	bne.n	80082f0 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80082a0:	a35f      	add	r3, pc, #380	; (adr r3, 8008420 <scaraInitLSPB1+0x290>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082aa:	f7f8 f9a5 	bl	80005f8 <__aeabi_dmul>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80082b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80082be:	e017      	b.n	80082f0 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 80082c0:	7efb      	ldrb	r3, [r7, #27]
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d112      	bne.n	80082ec <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80082c6:	7ebb      	ldrb	r3, [r7, #26]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d111      	bne.n	80082f0 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 80082cc:	a356      	add	r3, pc, #344	; (adr r3, 8008428 <scaraInitLSPB1+0x298>)
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082d6:	f7f8 f98f 	bl	80005f8 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80082e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80082ea:	e001      	b.n	80082f0 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80082ec:	2306      	movs	r3, #6
 80082ee:	e201      	b.n	80086f4 <scaraInitLSPB1+0x564>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 80082f0:	7ebb      	ldrb	r3, [r7, #26]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	f040 80f2 	bne.w	80084dc <scaraInitLSPB1+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 80082f8:	a34d      	add	r3, pc, #308	; (adr r3, 8008430 <scaraInitLSPB1+0x2a0>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008302:	f7f8 fbeb 	bl	8000adc <__aeabi_dcmplt>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01d      	beq.n	8008348 <scaraInitLSPB1+0x1b8>
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	4b51      	ldr	r3, [pc, #324]	; (8008458 <scaraInitLSPB1+0x2c8>)
 8008312:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008316:	f7f8 fbff 	bl	8000b18 <__aeabi_dcmpgt>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d013      	beq.n	8008348 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	4b4d      	ldr	r3, [pc, #308]	; (800845c <scaraInitLSPB1+0x2cc>)
 8008326:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800832a:	f7f8 f965 	bl	80005f8 <__aeabi_dmul>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4610      	mov	r0, r2
 8008334:	4619      	mov	r1, r3
 8008336:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800833a:	f7f8 fa87 	bl	800084c <__aeabi_ddiv>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008346:	e0a4      	b.n	8008492 <scaraInitLSPB1+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8008348:	a339      	add	r3, pc, #228	; (adr r3, 8008430 <scaraInitLSPB1+0x2a0>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008352:	f7f8 fbc3 	bl	8000adc <__aeabi_dcmplt>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01d      	beq.n	8008398 <scaraInitLSPB1+0x208>
 800835c:	a336      	add	r3, pc, #216	; (adr r3, 8008438 <scaraInitLSPB1+0x2a8>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008366:	f7f8 fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d013      	beq.n	8008398 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	4b39      	ldr	r3, [pc, #228]	; (800845c <scaraInitLSPB1+0x2cc>)
 8008376:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800837a:	f7f8 f93d 	bl	80005f8 <__aeabi_dmul>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4610      	mov	r0, r2
 8008384:	4619      	mov	r1, r3
 8008386:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800838a:	f7f8 fa5f 	bl	800084c <__aeabi_ddiv>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8008396:	e07c      	b.n	8008492 <scaraInitLSPB1+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 8008398:	a325      	add	r3, pc, #148	; (adr r3, 8008430 <scaraInitLSPB1+0x2a0>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083a2:	f7f8 fb9b 	bl	8000adc <__aeabi_dcmplt>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <scaraInitLSPB1+0x234>
 80083ac:	a320      	add	r3, pc, #128	; (adr r3, 8008430 <scaraInitLSPB1+0x2a0>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80083b6:	f7f8 fb91 	bl	8000adc <__aeabi_dcmplt>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 80083c0:	2309      	movs	r3, #9
 80083c2:	e197      	b.n	80086f4 <scaraInitLSPB1+0x564>
		}
		else{
			if(tf < 0.001){
 80083c4:	a31e      	add	r3, pc, #120	; (adr r3, 8008440 <scaraInitLSPB1+0x2b0>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80083ce:	f7f8 fb85 	bl	8000adc <__aeabi_dcmplt>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 80083d8:	2309      	movs	r3, #9
 80083da:	e18b      	b.n	80086f4 <scaraInitLSPB1+0x564>
			}else{
				v_lim = total_s/tf;
 80083dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80083e4:	f7f8 fa32 	bl	800084c <__aeabi_ddiv>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 80083f0:	a315      	add	r3, pc, #84	; (adr r3, 8008448 <scaraInitLSPB1+0x2b8>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80083fa:	f7f8 f8fd 	bl	80005f8 <__aeabi_dmul>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008406:	f7f8 fb69 	bl	8000adc <__aeabi_dcmplt>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d027      	beq.n	8008460 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008410:	230a      	movs	r3, #10
 8008412:	e16f      	b.n	80086f4 <scaraInitLSPB1+0x564>
 8008414:	f3af 8000 	nop.w
 8008418:	14000000 	.word	0x14000000
 800841c:	4000f6f0 	.word	0x4000f6f0
 8008420:	00000000 	.word	0x00000000
 8008424:	405c2000 	.word	0x405c2000
 8008428:	6b259425 	.word	0x6b259425
 800842c:	40069b91 	.word	0x40069b91
 8008430:	9999999a 	.word	0x9999999a
 8008434:	3fb99999 	.word	0x3fb99999
 8008438:	33333333 	.word	0x33333333
 800843c:	3fc33333 	.word	0x3fc33333
 8008440:	d2f1a9fc 	.word	0xd2f1a9fc
 8008444:	3f50624d 	.word	0x3f50624d
 8008448:	9999999a 	.word	0x9999999a
 800844c:	3ff19999 	.word	0x3ff19999
 8008450:	40877000 	.word	0x40877000
 8008454:	407f4000 	.word	0x407f4000
 8008458:	40080000 	.word	0x40080000
 800845c:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008460:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	f7f7 ff10 	bl	800028c <__adddf3>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008474:	f7f8 fb50 	bl	8000b18 <__aeabi_dcmpgt>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <scaraInitLSPB1+0x302>
				v_design = 2*v_lim;
 800847e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	f7f7 ff01 	bl	800028c <__adddf3>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8008492:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008496:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800849a:	f7f8 f9d7 	bl	800084c <__aeabi_ddiv>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80084a6:	f7f7 feef 	bl	8000288 <__aeabi_dsub>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 80084b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084ba:	f7f8 f9c7 	bl	800084c <__aeabi_ddiv>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 80084c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80084ce:	f7f7 fedb 	bl	8000288 <__aeabi_dsub>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80084da:	e0a9      	b.n	8008630 <scaraInitLSPB1+0x4a0>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80084dc:	7ebb      	ldrb	r3, [r7, #26]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f040 80a6 	bne.w	8008630 <scaraInitLSPB1+0x4a0>
		//check qva condition
		if(total_s*a_design > v_design*v_design){ //condition for ta smaller than td
 80084e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084ec:	f7f8 f884 	bl	80005f8 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	461d      	mov	r5, r3
 80084f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008500:	f7f8 f87a 	bl	80005f8 <__aeabi_dmul>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f7f8 fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d058      	beq.n	80085c8 <scaraInitLSPB1+0x438>
			if(total_s/v_design < 0.3){ //td too small
 8008516:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800851a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800851e:	f7f8 f995 	bl	800084c <__aeabi_ddiv>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4610      	mov	r0, r2
 8008528:	4619      	mov	r1, r3
 800852a:	a375      	add	r3, pc, #468	; (adr r3, 8008700 <scaraInitLSPB1+0x570>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f7f8 fad4 	bl	8000adc <__aeabi_dcmplt>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <scaraInitLSPB1+0x3c0>
				//recalculate v_design
				v_design = total_s/0.3;
 800853a:	a371      	add	r3, pc, #452	; (adr r3, 8008700 <scaraInitLSPB1+0x570>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008544:	f7f8 f982 	bl	800084c <__aeabi_ddiv>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008554:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008558:	f7f8 f978 	bl	800084c <__aeabi_ddiv>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4610      	mov	r0, r2
 8008562:	4619      	mov	r1, r3
 8008564:	a368      	add	r3, pc, #416	; (adr r3, 8008708 <scaraInitLSPB1+0x578>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f8 fab7 	bl	8000adc <__aeabi_dcmplt>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <scaraInitLSPB1+0x3fa>
				//recalculate a_design
				a_design = v_design/0.1;
 8008574:	a364      	add	r3, pc, #400	; (adr r3, 8008708 <scaraInitLSPB1+0x578>)
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800857e:	f7f8 f965 	bl	800084c <__aeabi_ddiv>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 800858a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800858e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008592:	f7f8 f95b 	bl	800084c <__aeabi_ddiv>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 800859e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085a6:	f7f8 f951 	bl	800084c <__aeabi_ddiv>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 80085b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085ba:	f7f7 fe67 	bl	800028c <__adddf3>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80085c6:	e033      	b.n	8008630 <scaraInitLSPB1+0x4a0>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 80085c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	f7f7 fe5c 	bl	800028c <__adddf3>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4610      	mov	r0, r2
 80085da:	4619      	mov	r1, r3
 80085dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085e0:	f7f8 f934 	bl	800084c <__aeabi_ddiv>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80085f8:	f7f8 f928 	bl	800084c <__aeabi_ddiv>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800860c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008610:	f7f8 f91c 	bl	800084c <__aeabi_ddiv>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 800861c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008620:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008624:	f7f8 f912 	bl	800084c <__aeabi_ddiv>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8008630:	a337      	add	r3, pc, #220	; (adr r3, 8008710 <scaraInitLSPB1+0x580>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800863a:	f7f8 f907 	bl	800084c <__aeabi_ddiv>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4610      	mov	r0, r2
 8008644:	4619      	mov	r1, r3
 8008646:	f7f8 facf 	bl	8000be8 <__aeabi_d2f>
 800864a:	4603      	mov	r3, r0
 800864c:	ee00 3a10 	vmov	s0, r3
 8008650:	f012 fbe2 	bl	801ae18 <ceilf>
 8008654:	eef0 7a40 	vmov.f32	s15, s0
 8008658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800865c:	ee17 3a90 	vmov	r3, s15
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8008662:	69f9      	ldr	r1, [r7, #28]
 8008664:	f04f 0200 	mov.w	r2, #0
 8008668:	f04f 0300 	mov.w	r3, #0
 800866c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 8008670:	69f9      	ldr	r1, [r7, #28]
 8008672:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008676:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 800867a:	69f9      	ldr	r1, [r7, #28]
 800867c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008680:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8008684:	69f9      	ldr	r1, [r7, #28]
 8008686:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800868a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 800868e:	69f9      	ldr	r1, [r7, #28]
 8008690:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008694:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8008698:	69f9      	ldr	r1, [r7, #28]
 800869a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800869e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 80086a2:	69f9      	ldr	r1, [r7, #28]
 80086a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80086a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 80086ac:	69f9      	ldr	r1, [r7, #28]
 80086ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80086b2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 80086b6:	69f9      	ldr	r1, [r7, #28]
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 80086c4:	69f9      	ldr	r1, [r7, #28]
 80086c6:	f04f 0200 	mov.w	r2, #0
 80086ca:	f04f 0300 	mov.w	r3, #0
 80086ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d6:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80086e4:	f7f7 fdd0 	bl	8000288 <__aeabi_dsub>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	69f9      	ldr	r1, [r7, #28]
 80086ee:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3758      	adds	r7, #88	; 0x58
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bdb0      	pop	{r4, r5, r7, pc}
 80086fc:	f3af 8000 	nop.w
 8008700:	33333333 	.word	0x33333333
 8008704:	3fd33333 	.word	0x3fd33333
 8008708:	9999999a 	.word	0x9999999a
 800870c:	3fb99999 	.word	0x3fb99999
 8008710:	40000000 	.word	0x40000000
 8008714:	3f847ae1 	.word	0x3f847ae1

08008718 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 8008718:	b5b0      	push	{r4, r5, r7, lr}
 800871a:	b094      	sub	sp, #80	; 0x50
 800871c:	af00      	add	r7, sp, #0
 800871e:	61f8      	str	r0, [r7, #28]
 8008720:	460b      	mov	r3, r1
 8008722:	ed87 0b04 	vstr	d0, [r7, #16]
 8008726:	ed87 1b02 	vstr	d1, [r7, #8]
 800872a:	ed87 2b00 	vstr	d2, [r7]
 800872e:	76fb      	strb	r3, [r7, #27]
 8008730:	4613      	mov	r3, r2
 8008732:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008740:	f7f8 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <scaraInitScurve1+0x46>
		total_s = -total_s;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	613b      	str	r3, [r7, #16]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008754:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	22ff      	movs	r2, #255	; 0xff
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	e002      	b.n	8008764 <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	2201      	movs	r2, #1
 8008762:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8008764:	7efb      	ldrb	r3, [r7, #27]
 8008766:	2b04      	cmp	r3, #4
 8008768:	d12c      	bne.n	80087c4 <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800876a:	7ebb      	ldrb	r3, [r7, #26]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d10f      	bne.n	8008790 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	4b90      	ldr	r3, [pc, #576]	; (80089b8 <scaraInitScurve1+0x2a0>)
 8008776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800877a:	f7f7 ff3d 	bl	80005f8 <__aeabi_dmul>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800878a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800878e:	e073      	b.n	8008878 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008790:	7ebb      	ldrb	r3, [r7, #26]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d170      	bne.n	8008878 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8008796:	f04f 0200 	mov.w	r2, #0
 800879a:	4b88      	ldr	r3, [pc, #544]	; (80089bc <scaraInitScurve1+0x2a4>)
 800879c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087a0:	f7f7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	4b81      	ldr	r3, [pc, #516]	; (80089b8 <scaraInitScurve1+0x2a0>)
 80087b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087b6:	f7f7 ff1f 	bl	80005f8 <__aeabi_dmul>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80087c2:	e059      	b.n	8008878 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 80087c4:	7efb      	ldrb	r3, [r7, #27]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d112      	bne.n	80087f0 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80087ca:	7ebb      	ldrb	r3, [r7, #26]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d153      	bne.n	8008878 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80087d0:	a36d      	add	r3, pc, #436	; (adr r3, 8008988 <scaraInitScurve1+0x270>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087da:	f7f7 ff0d 	bl	80005f8 <__aeabi_dmul>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80087e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80087ee:	e043      	b.n	8008878 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 80087f0:	7efb      	ldrb	r3, [r7, #27]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d112      	bne.n	800881c <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80087f6:	7ebb      	ldrb	r3, [r7, #26]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d13d      	bne.n	8008878 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80087fc:	a362      	add	r3, pc, #392	; (adr r3, 8008988 <scaraInitScurve1+0x270>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008806:	f7f7 fef7 	bl	80005f8 <__aeabi_dmul>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 8008812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008816:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800881a:	e02d      	b.n	8008878 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 800881c:	7efb      	ldrb	r3, [r7, #27]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d112      	bne.n	8008848 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008822:	7ebb      	ldrb	r3, [r7, #26]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d127      	bne.n	8008878 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8008828:	a359      	add	r3, pc, #356	; (adr r3, 8008990 <scaraInitScurve1+0x278>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008832:	f7f7 fee1 	bl	80005f8 <__aeabi_dmul>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800883e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008842:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008846:	e017      	b.n	8008878 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 8008848:	7efb      	ldrb	r3, [r7, #27]
 800884a:	2b03      	cmp	r3, #3
 800884c:	d112      	bne.n	8008874 <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800884e:	7ebb      	ldrb	r3, [r7, #26]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d111      	bne.n	8008878 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8008854:	a350      	add	r3, pc, #320	; (adr r3, 8008998 <scaraInitScurve1+0x280>)
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800885e:	f7f7 fecb 	bl	80005f8 <__aeabi_dmul>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800886a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008872:	e001      	b.n	8008878 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008874:	2306      	movs	r3, #6
 8008876:	e24c      	b.n	8008d12 <scaraInitScurve1+0x5fa>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008878:	7ebb      	ldrb	r3, [r7, #26]
 800887a:	2b01      	cmp	r3, #1
 800887c:	f040 80fc 	bne.w	8008a78 <scaraInitScurve1+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008880:	a347      	add	r3, pc, #284	; (adr r3, 80089a0 <scaraInitScurve1+0x288>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800888a:	f7f8 f927 	bl	8000adc <__aeabi_dcmplt>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d01d      	beq.n	80088d0 <scaraInitScurve1+0x1b8>
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	4b49      	ldr	r3, [pc, #292]	; (80089c0 <scaraInitScurve1+0x2a8>)
 800889a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800889e:	f7f8 f93b 	bl	8000b18 <__aeabi_dcmpgt>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d013      	beq.n	80088d0 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	4b45      	ldr	r3, [pc, #276]	; (80089c4 <scaraInitScurve1+0x2ac>)
 80088ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088b2:	f7f7 fea1 	bl	80005f8 <__aeabi_dmul>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088c2:	f7f7 ffc3 	bl	800084c <__aeabi_ddiv>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80088ce:	e094      	b.n	80089fa <scaraInitScurve1+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80088d0:	a333      	add	r3, pc, #204	; (adr r3, 80089a0 <scaraInitScurve1+0x288>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088da:	f7f8 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01d      	beq.n	8008920 <scaraInitScurve1+0x208>
 80088e4:	a330      	add	r3, pc, #192	; (adr r3, 80089a8 <scaraInitScurve1+0x290>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80088ee:	f7f8 f913 	bl	8000b18 <__aeabi_dcmpgt>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d013      	beq.n	8008920 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	4b31      	ldr	r3, [pc, #196]	; (80089c4 <scaraInitScurve1+0x2ac>)
 80088fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008902:	f7f7 fe79 	bl	80005f8 <__aeabi_dmul>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4610      	mov	r0, r2
 800890c:	4619      	mov	r1, r3
 800890e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008912:	f7f7 ff9b 	bl	800084c <__aeabi_ddiv>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800891e:	e06c      	b.n	80089fa <scaraInitScurve1+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 8008920:	a31f      	add	r3, pc, #124	; (adr r3, 80089a0 <scaraInitScurve1+0x288>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800892a:	f7f8 f8d7 	bl	8000adc <__aeabi_dcmplt>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <scaraInitScurve1+0x234>
 8008934:	a31a      	add	r3, pc, #104	; (adr r3, 80089a0 <scaraInitScurve1+0x288>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800893e:	f7f8 f8cd 	bl	8000adc <__aeabi_dcmplt>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008948:	2309      	movs	r3, #9
 800894a:	e1e2      	b.n	8008d12 <scaraInitScurve1+0x5fa>
		}else{
			v_lim = total_s/tf;
 800894c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008950:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008954:	f7f7 ff7a 	bl	800084c <__aeabi_ddiv>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 8008960:	a313      	add	r3, pc, #76	; (adr r3, 80089b0 <scaraInitScurve1+0x298>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800896a:	f7f7 fe45 	bl	80005f8 <__aeabi_dmul>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008976:	f7f8 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d023      	beq.n	80089c8 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008980:	230a      	movs	r3, #10
 8008982:	e1c6      	b.n	8008d12 <scaraInitScurve1+0x5fa>
 8008984:	f3af 8000 	nop.w
 8008988:	14000000 	.word	0x14000000
 800898c:	4000f6f0 	.word	0x4000f6f0
 8008990:	00000000 	.word	0x00000000
 8008994:	405c2000 	.word	0x405c2000
 8008998:	6b259425 	.word	0x6b259425
 800899c:	40069b91 	.word	0x40069b91
 80089a0:	9999999a 	.word	0x9999999a
 80089a4:	3fb99999 	.word	0x3fb99999
 80089a8:	33333333 	.word	0x33333333
 80089ac:	3fc33333 	.word	0x3fc33333
 80089b0:	9999999a 	.word	0x9999999a
 80089b4:	3ff19999 	.word	0x3ff19999
 80089b8:	40877000 	.word	0x40877000
 80089bc:	407f4000 	.word	0x407f4000
 80089c0:	401e0000 	.word	0x401e0000
 80089c4:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80089c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	f7f7 fc5c 	bl	800028c <__adddf3>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089dc:	f7f8 f89c 	bl	8000b18 <__aeabi_dcmpgt>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <scaraInitScurve1+0x2e2>
				v_design = 2*v_lim;
 80089e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	f7f7 fc4d 	bl	800028c <__adddf3>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 80089fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	f7f7 fc43 	bl	800028c <__adddf3>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a12:	f7f7 fdf1 	bl	80005f8 <__aeabi_dmul>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	461d      	mov	r5, r3
 8008a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a26:	f7f7 fde7 	bl	80005f8 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4610      	mov	r0, r2
 8008a30:	4619      	mov	r1, r3
 8008a32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a36:	f7f7 fc27 	bl	8000288 <__aeabi_dsub>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4620      	mov	r0, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	f7f7 ff03 	bl	800084c <__aeabi_ddiv>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 8008a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a56:	f7f7 fef9 	bl	800084c <__aeabi_ddiv>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 8008a62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a6a:	f7f7 fc0d 	bl	8000288 <__aeabi_dsub>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008a76:	e0be      	b.n	8008bf6 <scaraInitScurve1+0x4de>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008a78:	7ebb      	ldrb	r3, [r7, #26]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f040 80bb 	bne.w	8008bf6 <scaraInitScurve1+0x4de>
		//check qva condition
		if(total_s*a_design > 2*v_design*v_design){ //condition for ta smaller than tc
 8008a80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a88:	f7f7 fdb6 	bl	80005f8 <__aeabi_dmul>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4614      	mov	r4, r2
 8008a92:	461d      	mov	r5, r3
 8008a94:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	f7f7 fbf6 	bl	800028c <__adddf3>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008aac:	f7f7 fda4 	bl	80005f8 <__aeabi_dmul>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f7f8 f82e 	bl	8000b18 <__aeabi_dcmpgt>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d05e      	beq.n	8008b80 <scaraInitScurve1+0x468>
			if(total_s/v_design < 0.3){ //tc too small
 8008ac2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ac6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008aca:	f7f7 febf 	bl	800084c <__aeabi_ddiv>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	a395      	add	r3, pc, #596	; (adr r3, 8008d2c <scaraInitScurve1+0x614>)
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f7f7 fffe 	bl	8000adc <__aeabi_dcmplt>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <scaraInitScurve1+0x3e4>
				//recalculate v_design
				v_design = total_s/0.3;
 8008ae6:	a391      	add	r3, pc, #580	; (adr r3, 8008d2c <scaraInitScurve1+0x614>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008af0:	f7f7 feac 	bl	800084c <__aeabi_ddiv>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b00:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b04:	f7f7 fea2 	bl	800084c <__aeabi_ddiv>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4619      	mov	r1, r3
 8008b10:	a388      	add	r3, pc, #544	; (adr r3, 8008d34 <scaraInitScurve1+0x61c>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f7f7 ffe1 	bl	8000adc <__aeabi_dcmplt>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <scaraInitScurve1+0x41e>
				//recalculate a_design
				a_design = v_design/0.1;
 8008b20:	a384      	add	r3, pc, #528	; (adr r3, 8008d34 <scaraInitScurve1+0x61c>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b2a:	f7f7 fe8f 	bl	800084c <__aeabi_ddiv>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 8008b36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b3e:	f7f7 fe85 	bl	800084c <__aeabi_ddiv>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8008b4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b52:	f7f7 fe7b 	bl	800084c <__aeabi_ddiv>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008b5e:	f7f7 fb95 	bl	800028c <__adddf3>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 8008b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008b72:	f7f7 fb8b 	bl	800028c <__adddf3>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008b7e:	e03a      	b.n	8008bf6 <scaraInitScurve1+0x4de>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008b80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	f7f7 fb80 	bl	800028c <__adddf3>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4610      	mov	r0, r2
 8008b92:	4619      	mov	r1, r3
 8008b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b98:	f7f7 fe58 	bl	800084c <__aeabi_ddiv>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	4b5d      	ldr	r3, [pc, #372]	; (8008d20 <scaraInitScurve1+0x608>)
 8008baa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bae:	f7f7 fe4d 	bl	800084c <__aeabi_ddiv>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 8008bba:	f04f 0200 	mov.w	r2, #0
 8008bbe:	4b59      	ldr	r3, [pc, #356]	; (8008d24 <scaraInitScurve1+0x60c>)
 8008bc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bc4:	f7f7 fd18 	bl	80005f8 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	f04f 0200 	mov.w	r2, #0
 8008bd4:	4b52      	ldr	r3, [pc, #328]	; (8008d20 <scaraInitScurve1+0x608>)
 8008bd6:	f7f7 fe39 	bl	800084c <__aeabi_ddiv>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 8008be2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008be6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008bea:	f7f7 fe2f 	bl	800084c <__aeabi_ddiv>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 8008bf6:	69f9      	ldr	r1, [r7, #28]
 8008bf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bfc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 8008c00:	69f9      	ldr	r1, [r7, #28]
 8008c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c06:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 8008c0a:	69f9      	ldr	r1, [r7, #28]
 8008c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c10:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 8008c14:	69f9      	ldr	r1, [r7, #28]
 8008c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c1a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 8008c1e:	69f9      	ldr	r1, [r7, #28]
 8008c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c24:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 8008c28:	69f9      	ldr	r1, [r7, #28]
 8008c2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 8008c32:	69f9      	ldr	r1, [r7, #28]
 8008c34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c38:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 8008c3c:	69f9      	ldr	r1, [r7, #28]
 8008c3e:	f04f 0200 	mov.w	r2, #0
 8008c42:	f04f 0300 	mov.w	r3, #0
 8008c46:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 8008c4a:	69f9      	ldr	r1, [r7, #28]
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	f04f 0300 	mov.w	r3, #0
 8008c54:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 8008c58:	69f9      	ldr	r1, [r7, #28]
 8008c5a:	f04f 0200 	mov.w	r2, #0
 8008c5e:	f04f 0300 	mov.w	r3, #0
 8008c62:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 8008c66:	f04f 0200 	mov.w	r2, #0
 8008c6a:	4b2f      	ldr	r3, [pc, #188]	; (8008d28 <scaraInitScurve1+0x610>)
 8008c6c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c70:	f7f7 fcc2 	bl	80005f8 <__aeabi_dmul>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c80:	f7f7 fcba 	bl	80005f8 <__aeabi_dmul>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008c8c:	f7f7 fdde 	bl	800084c <__aeabi_ddiv>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	69f9      	ldr	r1, [r7, #28]
 8008c96:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 8008c9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	f7f7 faf3 	bl	800028c <__adddf3>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4610      	mov	r0, r2
 8008cac:	4619      	mov	r1, r3
 8008cae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008cb2:	f7f7 fca1 	bl	80005f8 <__aeabi_dmul>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008cc2:	f7f7 fc99 	bl	80005f8 <__aeabi_dmul>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	69f9      	ldr	r1, [r7, #28]
 8008ccc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	4b14      	ldr	r3, [pc, #80]	; (8008d28 <scaraInitScurve1+0x610>)
 8008cd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008cda:	f7f7 fc8d 	bl	80005f8 <__aeabi_dmul>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	69f9      	ldr	r1, [r7, #28]
 8008ce4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 8008ce8:	f04f 0200 	mov.w	r2, #0
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <scaraInitScurve1+0x610>)
 8008cee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008cf2:	f7f7 fc81 	bl	80005f8 <__aeabi_dmul>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d02:	f7f7 fc79 	bl	80005f8 <__aeabi_dmul>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	69f9      	ldr	r1, [r7, #28]
 8008d0c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3750      	adds	r7, #80	; 0x50
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bdb0      	pop	{r4, r5, r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w
 8008d20:	40100000 	.word	0x40100000
 8008d24:	40080000 	.word	0x40080000
 8008d28:	40180000 	.word	0x40180000
 8008d2c:	33333333 	.word	0x33333333
 8008d30:	3fd33333 	.word	0x3fd33333
 8008d34:	9999999a 	.word	0x9999999a
 8008d38:	3fb99999 	.word	0x3fb99999

08008d3c <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008d3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008d40:	b08a      	sub	sp, #40	; 0x28
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008d50:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008d5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008d64:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008d68:	f04f 0200 	mov.w	r2, #0
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d74:	f7f7 fec6 	bl	8000b04 <__aeabi_dcmpge>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d05b      	beq.n	8008e36 <scaraFlowLSPB1+0xfa>
 8008d7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d86:	f7f7 feb3 	bl	8000af0 <__aeabi_dcmple>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d052      	beq.n	8008e36 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dac:	f7f7 fc24 	bl	80005f8 <__aeabi_dmul>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4620      	mov	r0, r4
 8008db6:	4629      	mov	r1, r5
 8008db8:	f7f7 fa68 	bl	800028c <__adddf3>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	68f9      	ldr	r1, [r7, #12]
 8008dc2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd6:	f7f7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4620      	mov	r0, r4
 8008de0:	4629      	mov	r1, r5
 8008de2:	f7f7 fa53 	bl	800028c <__adddf3>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4614      	mov	r4, r2
 8008dec:	461d      	mov	r5, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	4b98      	ldr	r3, [pc, #608]	; (800905c <scaraFlowLSPB1+0x320>)
 8008dfa:	f7f7 fbfd 	bl	80005f8 <__aeabi_dmul>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4610      	mov	r0, r2
 8008e04:	4619      	mov	r1, r3
 8008e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e0a:	f7f7 fbf5 	bl	80005f8 <__aeabi_dmul>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4610      	mov	r0, r2
 8008e14:	4619      	mov	r1, r3
 8008e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1a:	f7f7 fbed 	bl	80005f8 <__aeabi_dmul>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4620      	mov	r0, r4
 8008e24:	4629      	mov	r1, r5
 8008e26:	f7f7 fa31 	bl	800028c <__adddf3>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008e34:	e10b      	b.n	800904e <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8008e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e3e:	f7f7 fe4d 	bl	8000adc <__aeabi_dcmplt>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d054      	beq.n	8008ef2 <scaraFlowLSPB1+0x1b6>
 8008e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e50:	f7f7 fe4e 	bl	8000af0 <__aeabi_dcmple>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d04b      	beq.n	8008ef2 <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	f04f 0200 	mov.w	r2, #0
 8008e60:	f04f 0300 	mov.w	r3, #0
 8008e64:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008e6e:	68f9      	ldr	r1, [r7, #12]
 8008e70:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008e80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e84:	f7f7 fbb8 	bl	80005f8 <__aeabi_dmul>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	4b71      	ldr	r3, [pc, #452]	; (800905c <scaraFlowLSPB1+0x320>)
 8008e96:	f7f7 fbaf 	bl	80005f8 <__aeabi_dmul>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 f9f3 	bl	800028c <__adddf3>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4690      	mov	r8, r2
 8008eac:	4699      	mov	r9, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	4b68      	ldr	r3, [pc, #416]	; (800905c <scaraFlowLSPB1+0x320>)
 8008eba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ebe:	f7f7 fb9b 	bl	80005f8 <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eca:	f7f7 f9dd 	bl	8000288 <__aeabi_dsub>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	f7f7 fb8f 	bl	80005f8 <__aeabi_dmul>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4640      	mov	r0, r8
 8008ee0:	4649      	mov	r1, r9
 8008ee2:	f7f7 f9d3 	bl	800028c <__adddf3>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	68f9      	ldr	r1, [r7, #12]
 8008eec:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008ef0:	e0ad      	b.n	800904e <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td < time && time <= tf) {
 8008ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008efa:	f7f7 fdef 	bl	8000adc <__aeabi_dcmplt>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8090 	beq.w	8009026 <scaraFlowLSPB1+0x2ea>
 8008f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f0e:	f7f7 fdef 	bl	8000af0 <__aeabi_dcmple>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8086 	beq.w	8009026 <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008f20:	4614      	mov	r4, r2
 8008f22:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f40:	f7f7 f9a2 	bl	8000288 <__aeabi_dsub>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4640      	mov	r0, r8
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	f7f7 fb54 	bl	80005f8 <__aeabi_dmul>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4620      	mov	r0, r4
 8008f56:	4629      	mov	r1, r5
 8008f58:	f7f7 f998 	bl	800028c <__adddf3>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	68f9      	ldr	r1, [r7, #12]
 8008f62:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f7a:	f7f7 f985 	bl	8000288 <__aeabi_dsub>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 fb37 	bl	80005f8 <__aeabi_dmul>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 f979 	bl	8000288 <__aeabi_dsub>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008faa:	f7f7 f96d 	bl	8000288 <__aeabi_dsub>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4690      	mov	r8, r2
 8008fb4:	4699      	mov	r9, r3
 8008fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fbe:	f7f7 f963 	bl	8000288 <__aeabi_dsub>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4649      	mov	r1, r9
 8008fca:	f7f7 fb15 	bl	80005f8 <__aeabi_dmul>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4690      	mov	r8, r2
 8008fd4:	4699      	mov	r9, r3
 8008fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fde:	f7f7 f953 	bl	8000288 <__aeabi_dsub>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	4649      	mov	r1, r9
 8008fea:	f7f7 fb05 	bl	80005f8 <__aeabi_dmul>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4690      	mov	r8, r2
 8008ff4:	4699      	mov	r9, r3
 8008ff6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	f7f7 f945 	bl	800028c <__adddf3>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fc1f 	bl	800084c <__aeabi_ddiv>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4620      	mov	r0, r4
 8009014:	4629      	mov	r1, r5
 8009016:	f7f7 f937 	bl	8000288 <__aeabi_dsub>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800901e:	68f9      	ldr	r1, [r7, #12]
 8009020:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8009024:	e013      	b.n	800904e <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 8009026:	68f9      	ldr	r1, [r7, #12]
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 8009034:	68f9      	ldr	r1, [r7, #12]
 8009036:	f04f 0200 	mov.w	r2, #0
 800903a:	f04f 0300 	mov.w	r3, #0
 800903e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009048:	68f9      	ldr	r1, [r7, #12]
 800904a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3728      	adds	r7, #40	; 0x28
 8009054:	46bd      	mov	sp, r7
 8009056:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800905a:	bf00      	nop
 800905c:	3fe00000 	.word	0x3fe00000

08009060 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8009060:	b5b0      	push	{r4, r5, r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 800906c:	f04f 0200 	mov.w	r2, #0
 8009070:	f04f 0300 	mov.w	r3, #0
 8009074:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009078:	f7f7 fd44 	bl	8000b04 <__aeabi_dcmpge>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01e      	beq.n	80090c0 <scaraFlowGCODE+0x60>
 8009082:	4b5f      	ldr	r3, [pc, #380]	; (8009200 <scaraFlowGCODE+0x1a0>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800908c:	f7f7 fd30 	bl	8000af0 <__aeabi_dcmple>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d014      	beq.n	80090c0 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 8009096:	4b5b      	ldr	r3, [pc, #364]	; (8009204 <scaraFlowGCODE+0x1a4>)
 8009098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800909c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a0:	f7f7 faaa 	bl	80005f8 <__aeabi_dmul>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b0:	f7f7 faa2 	bl	80005f8 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	68f9      	ldr	r1, [r7, #12]
 80090ba:	e9c1 2300 	strd	r2, r3, [r1]
 80090be:	e09a      	b.n	80091f6 <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 80090c0:	4b4f      	ldr	r3, [pc, #316]	; (8009200 <scaraFlowGCODE+0x1a0>)
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ca:	f7f7 fd25 	bl	8000b18 <__aeabi_dcmpgt>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d01f      	beq.n	8009114 <scaraFlowGCODE+0xb4>
 80090d4:	4b4c      	ldr	r3, [pc, #304]	; (8009208 <scaraFlowGCODE+0x1a8>)
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090de:	f7f7 fd07 	bl	8000af0 <__aeabi_dcmple>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d015      	beq.n	8009114 <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 80090e8:	4b48      	ldr	r3, [pc, #288]	; (800920c <scaraFlowGCODE+0x1ac>)
 80090ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f2:	f7f7 fa81 	bl	80005f8 <__aeabi_dmul>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4610      	mov	r0, r2
 80090fc:	4619      	mov	r1, r3
 80090fe:	4b43      	ldr	r3, [pc, #268]	; (800920c <scaraFlowGCODE+0x1ac>)
 8009100:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009104:	f7f7 f8c2 	bl	800028c <__adddf3>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	68f9      	ldr	r1, [r7, #12]
 800910e:	e9c1 2300 	strd	r2, r3, [r1]
 8009112:	e070      	b.n	80091f6 <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 8009114:	4b3c      	ldr	r3, [pc, #240]	; (8009208 <scaraFlowGCODE+0x1a8>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800911e:	f7f7 fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d038      	beq.n	800919a <scaraFlowGCODE+0x13a>
 8009128:	4b39      	ldr	r3, [pc, #228]	; (8009210 <scaraFlowGCODE+0x1b0>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009132:	f7f7 fcdd 	bl	8000af0 <__aeabi_dcmple>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d02e      	beq.n	800919a <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 800913c:	4b35      	ldr	r3, [pc, #212]	; (8009214 <scaraFlowGCODE+0x1b4>)
 800913e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009146:	f7f7 fa57 	bl	80005f8 <__aeabi_dmul>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4610      	mov	r0, r2
 8009150:	4619      	mov	r1, r3
 8009152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009156:	f7f7 fa4f 	bl	80005f8 <__aeabi_dmul>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4614      	mov	r4, r2
 8009160:	461d      	mov	r5, r3
 8009162:	4b2c      	ldr	r3, [pc, #176]	; (8009214 <scaraFlowGCODE+0x1b4>)
 8009164:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800916c:	f7f7 fa44 	bl	80005f8 <__aeabi_dmul>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4620      	mov	r0, r4
 8009176:	4629      	mov	r1, r5
 8009178:	f7f7 f888 	bl	800028c <__adddf3>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4610      	mov	r0, r2
 8009182:	4619      	mov	r1, r3
 8009184:	4b23      	ldr	r3, [pc, #140]	; (8009214 <scaraFlowGCODE+0x1b4>)
 8009186:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800918a:	f7f7 f87f 	bl	800028c <__adddf3>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	68f9      	ldr	r1, [r7, #12]
 8009194:	e9c1 2300 	strd	r2, r3, [r1]
 8009198:	e02d      	b.n	80091f6 <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 800919a:	4b1e      	ldr	r3, [pc, #120]	; (8009214 <scaraFlowGCODE+0x1b4>)
 800919c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a4:	f7f7 fa28 	bl	80005f8 <__aeabi_dmul>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4610      	mov	r0, r2
 80091ae:	4619      	mov	r1, r3
 80091b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b4:	f7f7 fa20 	bl	80005f8 <__aeabi_dmul>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	461d      	mov	r5, r3
 80091c0:	4b14      	ldr	r3, [pc, #80]	; (8009214 <scaraFlowGCODE+0x1b4>)
 80091c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80091c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ca:	f7f7 fa15 	bl	80005f8 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4620      	mov	r0, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7f7 f859 	bl	800028c <__adddf3>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4610      	mov	r0, r2
 80091e0:	4619      	mov	r1, r3
 80091e2:	4b0c      	ldr	r3, [pc, #48]	; (8009214 <scaraFlowGCODE+0x1b4>)
 80091e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80091e8:	f7f7 f850 	bl	800028c <__adddf3>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	68f9      	ldr	r1, [r7, #12]
 80091f2:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009200:	20008f48 	.word	0x20008f48
 8009204:	2000fd30 	.word	0x2000fd30
 8009208:	20008f68 	.word	0x20008f68
 800920c:	20008f90 	.word	0x20008f90
 8009210:	20008fb8 	.word	0x20008fb8
 8009214:	20008f50 	.word	0x20008f50

08009218 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 8009218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800921c:	b08c      	sub	sp, #48	; 0x30
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800922c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009236:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009240:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800924a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	f04f 0300 	mov.w	r3, #0
 8009256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800925a:	f7f7 fc53 	bl	8000b04 <__aeabi_dcmpge>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d025      	beq.n	80092b0 <scaraFLowScurve1+0x98>
 8009264:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800926c:	f7f7 fc40 	bl	8000af0 <__aeabi_dcmple>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d01c      	beq.n	80092b0 <scaraFLowScurve1+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 8009276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800927a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800927e:	f7f7 f9bb 	bl	80005f8 <__aeabi_dmul>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928e:	f7f7 f9b3 	bl	80005f8 <__aeabi_dmul>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4610      	mov	r0, r2
 8009298:	4619      	mov	r1, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80092a0:	f7f7 f9aa 	bl	80005f8 <__aeabi_dmul>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	68f9      	ldr	r1, [r7, #12]
 80092aa:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80092ae:	e17c      	b.n	80095aa <scaraFLowScurve1+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 80092b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80092b8:	f7f7 fc10 	bl	8000adc <__aeabi_dcmplt>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d061      	beq.n	8009386 <scaraFLowScurve1+0x16e>
 80092c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	f7f6 ffdf 	bl	800028c <__adddf3>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092d6:	f7f7 fc0b 	bl	8000af0 <__aeabi_dcmple>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d052      	beq.n	8009386 <scaraFLowScurve1+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 80092e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092e8:	f7f7 f986 	bl	80005f8 <__aeabi_dmul>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4610      	mov	r0, r2
 80092f2:	4619      	mov	r1, r3
 80092f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092f8:	f7f7 f97e 	bl	80005f8 <__aeabi_dmul>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4690      	mov	r8, r2
 8009302:	4699      	mov	r9, r3
 8009304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800930c:	f7f7 f974 	bl	80005f8 <__aeabi_dmul>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4610      	mov	r0, r2
 8009316:	4619      	mov	r1, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800931e:	f7f7 f96b 	bl	80005f8 <__aeabi_dmul>
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	4640      	mov	r0, r8
 8009328:	4649      	mov	r1, r9
 800932a:	f7f6 ffad 	bl	8000288 <__aeabi_dsub>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4690      	mov	r8, r2
 8009334:	4699      	mov	r9, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800933c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009340:	f7f7 f95a 	bl	80005f8 <__aeabi_dmul>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4640      	mov	r0, r8
 800934a:	4649      	mov	r1, r9
 800934c:	f7f6 ff9e 	bl	800028c <__adddf3>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4610      	mov	r0, r2
 8009356:	4619      	mov	r1, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800935e:	f7f6 ff93 	bl	8000288 <__aeabi_dsub>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4614      	mov	r4, r2
 8009368:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009372:	4620      	mov	r0, r4
 8009374:	4629      	mov	r1, r5
 8009376:	f7f7 f93f 	bl	80005f8 <__aeabi_dmul>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009384:	e111      	b.n	80095aa <scaraFLowScurve1+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 8009386:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	f7f6 ff7d 	bl	800028c <__adddf3>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800939a:	f7f7 fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d022      	beq.n	80093ea <scaraFLowScurve1+0x1d2>
 80093a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093ac:	f7f6 ff6c 	bl	8000288 <__aeabi_dsub>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093b8:	f7f7 fb9a 	bl	8000af0 <__aeabi_dcmple>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d013      	beq.n	80093ea <scaraFLowScurve1+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 80093c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ca:	f7f6 ff5d 	bl	8000288 <__aeabi_dsub>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4610      	mov	r0, r2
 80093d4:	4619      	mov	r1, r3
 80093d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093da:	f7f7 f90d 	bl	80005f8 <__aeabi_dmul>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	68f9      	ldr	r1, [r7, #12]
 80093e4:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80093e8:	e0df      	b.n	80095aa <scaraFLowScurve1+0x392>
	} else if(td-ta < t && t <= td){
 80093ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80093f2:	f7f6 ff49 	bl	8000288 <__aeabi_dsub>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093fe:	f7f7 fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8081 	beq.w	800950c <scaraFLowScurve1+0x2f4>
 800940a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800940e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009412:	f7f7 fb6d 	bl	8000af0 <__aeabi_dcmple>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d077      	beq.n	800950c <scaraFLowScurve1+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8009422:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009426:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800942a:	f7f7 f8e5 	bl	80005f8 <__aeabi_dmul>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	f04f 0200 	mov.w	r2, #0
 800943a:	4b5f      	ldr	r3, [pc, #380]	; (80095b8 <scaraFLowScurve1+0x3a0>)
 800943c:	f7f7 fa06 	bl	800084c <__aeabi_ddiv>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f7f6 ff1e 	bl	8000288 <__aeabi_dsub>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4614      	mov	r4, r2
 8009452:	461d      	mov	r5, r3
 8009454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800945c:	f7f6 ff14 	bl	8000288 <__aeabi_dsub>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4610      	mov	r0, r2
 8009466:	4619      	mov	r1, r3
 8009468:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800946c:	f7f7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4620      	mov	r0, r4
 8009476:	4629      	mov	r1, r5
 8009478:	f7f6 ff06 	bl	8000288 <__aeabi_dsub>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4614      	mov	r4, r2
 8009482:	461d      	mov	r5, r3
 8009484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800948c:	f7f6 fefc 	bl	8000288 <__aeabi_dsub>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4690      	mov	r8, r2
 8009496:	4699      	mov	r9, r3
 8009498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800949c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094a0:	f7f6 fef2 	bl	8000288 <__aeabi_dsub>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f7 f8a4 	bl	80005f8 <__aeabi_dmul>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4690      	mov	r8, r2
 80094b6:	4699      	mov	r9, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80094be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c2:	f7f6 fee3 	bl	800028c <__adddf3>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4610      	mov	r0, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094d2:	f7f6 fed9 	bl	8000288 <__aeabi_dsub>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 f88b 	bl	80005f8 <__aeabi_dmul>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4610      	mov	r0, r2
 80094e8:	4619      	mov	r1, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80094f0:	f7f7 f882 	bl	80005f8 <__aeabi_dmul>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4620      	mov	r0, r4
 80094fa:	4629      	mov	r1, r5
 80094fc:	f7f6 fec4 	bl	8000288 <__aeabi_dsub>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	68f9      	ldr	r1, [r7, #12]
 8009506:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800950a:	e04e      	b.n	80095aa <scaraFLowScurve1+0x392>
	} else if(td < t && t <= tf){
 800950c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009510:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009514:	f7f7 fae2 	bl	8000adc <__aeabi_dcmplt>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d045      	beq.n	80095aa <scaraFLowScurve1+0x392>
 800951e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009526:	f7f7 fae3 	bl	8000af0 <__aeabi_dcmple>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d03c      	beq.n	80095aa <scaraFLowScurve1+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8009536:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800953a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800953e:	f7f6 fea3 	bl	8000288 <__aeabi_dsub>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4690      	mov	r8, r2
 8009548:	4699      	mov	r9, r3
 800954a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800954e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009552:	f7f6 fe99 	bl	8000288 <__aeabi_dsub>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4640      	mov	r0, r8
 800955c:	4649      	mov	r1, r9
 800955e:	f7f7 f84b 	bl	80005f8 <__aeabi_dmul>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4690      	mov	r8, r2
 8009568:	4699      	mov	r9, r3
 800956a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800956e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009572:	f7f6 fe89 	bl	8000288 <__aeabi_dsub>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4640      	mov	r0, r8
 800957c:	4649      	mov	r1, r9
 800957e:	f7f7 f83b 	bl	80005f8 <__aeabi_dmul>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4610      	mov	r0, r2
 8009588:	4619      	mov	r1, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4620      	mov	r0, r4
 800959a:	4629      	mov	r1, r5
 800959c:	f7f6 fe76 	bl	800028c <__adddf3>
 80095a0:	4602      	mov	r2, r0
 80095a2:	460b      	mov	r3, r1
 80095a4:	68f9      	ldr	r1, [r7, #12]
 80095a6:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3730      	adds	r7, #48	; 0x30
 80095b0:	46bd      	mov	sp, r7
 80095b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80095b6:	bf00      	nop
 80095b8:	40080000 	.word	0x40080000
 80095bc:	00000000 	.word	0x00000000

080095c0 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80095c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095c4:	b0ac      	sub	sp, #176	; 0xb0
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80095ca:	460b      	mov	r3, r1
 80095cc:	ed87 0b08 	vstr	d0, [r7, #32]
 80095d0:	ed87 1b06 	vstr	d1, [r7, #24]
 80095d4:	ed87 2b04 	vstr	d2, [r7, #16]
 80095d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095dc:	4613      	mov	r3, r2
 80095de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 80095e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	d118      	bne.n	800961c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 80095ea:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095f6:	f7f6 ffff 	bl	80005f8 <__aeabi_dmul>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8009602:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800961a:	e092      	b.n	8009742 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 800961c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009620:	2b05      	cmp	r3, #5
 8009622:	d118      	bne.n	8009656 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8009624:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009630:	f7f6 ffe2 	bl	80005f8 <__aeabi_dmul>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 800963c:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009648:	f7f6 ffd6 	bl	80005f8 <__aeabi_dmul>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009654:	e075      	b.n	8009742 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8009656:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800965a:	2b00      	cmp	r3, #0
 800965c:	d118      	bne.n	8009690 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 800965e:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800966a:	f7f6 ffc5 	bl	80005f8 <__aeabi_dmul>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8009676:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800968e:	e058      	b.n	8009742 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8009690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009694:	2b01      	cmp	r3, #1
 8009696:	d118      	bne.n	80096ca <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8009698:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096a4:	f7f6 ffa8 	bl	80005f8 <__aeabi_dmul>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 80096b0:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80096bc:	f7f6 ff9c 	bl	80005f8 <__aeabi_dmul>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80096c8:	e03b      	b.n	8009742 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80096ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d118      	bne.n	8009704 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80096d2:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096de:	f7f6 ff8b 	bl	80005f8 <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80096ea:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80096f6:	f7f6 ff7f 	bl	80005f8 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009702:	e01e      	b.n	8009742 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8009704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009708:	2b03      	cmp	r3, #3
 800970a:	d118      	bne.n	800973e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800970c:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009718:	f7f6 ff6e 	bl	80005f8 <__aeabi_dmul>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8009724:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009730:	f7f6 ff62 	bl	80005f8 <__aeabi_dmul>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800973c:	e001      	b.n	8009742 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800973e:	2306      	movs	r3, #6
 8009740:	e2ef      	b.n	8009d22 <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 8009742:	f04f 0200 	mov.w	r2, #0
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 800974e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009752:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 8009756:	f04f 0200 	mov.w	r2, #0
 800975a:	f04f 0300 	mov.w	r3, #0
 800975e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 800976e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009772:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009776:	f7f7 f9bb 	bl	8000af0 <__aeabi_dcmple>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8009780:	2301      	movs	r3, #1
 8009782:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009786:	e00c      	b.n	80097a2 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8009788:	23ff      	movs	r3, #255	; 0xff
 800978a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 800978e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800979a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800979e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80097a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	f040 809b 	bne.w	80098e2 <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80097ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80097b2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 80097b6:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80097c2:	f7f7 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d07e      	beq.n	80098ca <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 80097cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80097d0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80097d4:	f7f6 fd58 	bl	8000288 <__aeabi_dsub>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4610      	mov	r0, r2
 80097de:	4619      	mov	r1, r3
 80097e0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80097e4:	f7f7 f832 	bl	800084c <__aeabi_ddiv>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80097f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80097f4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80097f8:	f7f6 fd46 	bl	8000288 <__aeabi_dsub>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4610      	mov	r0, r2
 8009802:	4619      	mov	r1, r3
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	f7f6 fd40 	bl	800028c <__adddf3>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4610      	mov	r0, r2
 8009812:	4619      	mov	r1, r3
 8009814:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009818:	f7f7 f818 	bl	800084c <__aeabi_ddiv>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8009824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009828:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800982c:	f7f7 f956 	bl	8000adc <__aeabi_dcmplt>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8009836:	2309      	movs	r3, #9
 8009838:	e273      	b.n	8009d22 <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 800983a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800983e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009842:	f7f7 f955 	bl	8000af0 <__aeabi_dcmple>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <scaraInitLSPB+0x294>
					 v_design = v_upper;
 800984c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009850:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8009854:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009860:	f7f7 f95a 	bl	8000b18 <__aeabi_dcmpgt>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d018      	beq.n	800989c <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 800986a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800986e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009872:	f7f6 fd09 	bl	8000288 <__aeabi_dsub>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4610      	mov	r0, r2
 800987c:	4619      	mov	r1, r3
 800987e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009882:	f7f6 ffe3 	bl	800084c <__aeabi_ddiv>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800988e:	f7f6 fcfb 	bl	8000288 <__aeabi_dsub>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800989a:	e00b      	b.n	80098b4 <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80098a8:	f7f6 ffd0 	bl	800084c <__aeabi_ddiv>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 80098b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80098b8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80098bc:	f7f6 ffc6 	bl	800084c <__aeabi_ddiv>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80098c8:	e00b      	b.n	80098e2 <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 80098ca:	f04f 0200 	mov.w	r2, #0
 80098ce:	f04f 0300 	mov.w	r3, #0
 80098d2:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	f04f 0300 	mov.w	r3, #0
 80098de:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80098e2:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80098ee:	f7f7 f913 	bl	8000b18 <__aeabi_dcmpgt>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 8196 	beq.w	8009c26 <scaraInitLSPB+0x666>
 80098fa:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009906:	f7f7 f907 	bl	8000b18 <__aeabi_dcmpgt>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 818a 	beq.w	8009c26 <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009912:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009916:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800991a:	f7f6 fcb5 	bl	8000288 <__aeabi_dsub>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4614      	mov	r4, r2
 8009924:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009928:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 fe62 	bl	80005f8 <__aeabi_dmul>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800993c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009940:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009944:	f7f6 fe58 	bl	80005f8 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	e9c7 2300 	strd	r2, r3, [r7]
 8009950:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009954:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009958:	f7f6 fe4e 	bl	80005f8 <__aeabi_dmul>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	4614      	mov	r4, r2
 8009962:	461d      	mov	r5, r3
 8009964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009968:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800996c:	f7f6 fe44 	bl	80005f8 <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f6 fc88 	bl	800028c <__adddf3>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4610      	mov	r0, r2
 8009982:	4619      	mov	r1, r3
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800998c:	f7f6 ff5e 	bl	800084c <__aeabi_ddiv>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009998:	f7f6 fc76 	bl	8000288 <__aeabi_dsub>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099a4:	f7f7 f8a4 	bl	8000af0 <__aeabi_dcmple>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d075      	beq.n	8009a9a <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80099ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80099b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80099b6:	f7f6 fc67 	bl	8000288 <__aeabi_dsub>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4692      	mov	sl, r2
 80099c0:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80099c4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80099c8:	4650      	mov	r0, sl
 80099ca:	4659      	mov	r1, fp
 80099cc:	f7f6 fe14 	bl	80005f8 <__aeabi_dmul>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4614      	mov	r4, r2
 80099d6:	461d      	mov	r5, r3
 80099d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099dc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099e0:	f7f6 fe0a 	bl	80005f8 <__aeabi_dmul>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4690      	mov	r8, r2
 80099ea:	4699      	mov	r9, r3
 80099ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80099f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80099f4:	f7f6 fe00 	bl	80005f8 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fc44 	bl	800028c <__adddf3>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4610      	mov	r0, r2
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	f04f 0200 	mov.w	r2, #0
 8009a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a14:	f7f6 ff1a 	bl	800084c <__aeabi_ddiv>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	4629      	mov	r1, r5
 8009a20:	f7f6 fc34 	bl	800028c <__adddf3>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	ec43 2b17 	vmov	d7, r2, r3
 8009a2c:	eeb0 0a47 	vmov.f32	s0, s14
 8009a30:	eef0 0a67 	vmov.f32	s1, s15
 8009a34:	f011 fa34 	bl	801aea0 <sqrt>
 8009a38:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009a3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a44:	f7f6 fc20 	bl	8000288 <__aeabi_dsub>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4619      	mov	r1, r3
 8009a50:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a54:	f7f6 fefa 	bl	800084c <__aeabi_ddiv>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a68:	f7f6 fc0e 	bl	8000288 <__aeabi_dsub>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4610      	mov	r0, r2
 8009a72:	4619      	mov	r1, r3
 8009a74:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a78:	f7f6 fee8 	bl	800084c <__aeabi_ddiv>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 8009a84:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009a88:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009a8c:	f7f6 fbfe 	bl	800028c <__adddf3>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009a98:	e0e3      	b.n	8009c62 <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 8009a9a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009a9e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009aa6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009aaa:	f7f6 fbed 	bl	8000288 <__aeabi_dsub>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009aba:	f7f6 fec7 	bl	800084c <__aeabi_ddiv>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009ac6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009aca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ace:	f7f6 fbdb 	bl	8000288 <__aeabi_dsub>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	4619      	mov	r1, r3
 8009ada:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009ade:	f7f6 feb5 	bl	800084c <__aeabi_ddiv>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009aea:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009aee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009af2:	f7f6 fbc9 	bl	8000288 <__aeabi_dsub>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4690      	mov	r8, r2
 8009afc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8009b00:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b04:	4640      	mov	r0, r8
 8009b06:	4649      	mov	r1, r9
 8009b08:	f7f6 fea0 	bl	800084c <__aeabi_ddiv>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4614      	mov	r4, r2
 8009b12:	461d      	mov	r5, r3
 8009b14:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	f7f6 fbb6 	bl	800028c <__adddf3>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b28:	f7f6 fe90 	bl	800084c <__aeabi_ddiv>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4690      	mov	r8, r2
 8009b32:	4699      	mov	r9, r3
 8009b34:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b38:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009b3c:	f7f6 fe86 	bl	800084c <__aeabi_ddiv>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	f04f 0000 	mov.w	r0, #0
 8009b48:	497b      	ldr	r1, [pc, #492]	; (8009d38 <scaraInitLSPB+0x778>)
 8009b4a:	f7f6 fb9d 	bl	8000288 <__aeabi_dsub>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	4640      	mov	r0, r8
 8009b54:	4649      	mov	r1, r9
 8009b56:	f7f6 fd4f 	bl	80005f8 <__aeabi_dmul>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4690      	mov	r8, r2
 8009b60:	4699      	mov	r9, r3
 8009b62:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009b6a:	f7f6 fe6f 	bl	800084c <__aeabi_ddiv>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	4970      	ldr	r1, [pc, #448]	; (8009d38 <scaraInitLSPB+0x778>)
 8009b78:	f7f6 fb86 	bl	8000288 <__aeabi_dsub>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 fd38 	bl	80005f8 <__aeabi_dmul>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f7f6 fb7c 	bl	800028c <__adddf3>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4614      	mov	r4, r2
 8009b9a:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8009b9c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	f7f6 fb72 	bl	800028c <__adddf3>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009bb0:	f7f6 fe4c 	bl	800084c <__aeabi_ddiv>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4690      	mov	r8, r2
 8009bba:	4699      	mov	r9, r3
 8009bbc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009bc0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009bc4:	f7f6 fe42 	bl	800084c <__aeabi_ddiv>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	f04f 0000 	mov.w	r0, #0
 8009bd0:	4959      	ldr	r1, [pc, #356]	; (8009d38 <scaraInitLSPB+0x778>)
 8009bd2:	f7f6 fb59 	bl	8000288 <__aeabi_dsub>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	4640      	mov	r0, r8
 8009bdc:	4649      	mov	r1, r9
 8009bde:	f7f6 fd0b 	bl	80005f8 <__aeabi_dmul>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4690      	mov	r8, r2
 8009be8:	4699      	mov	r9, r3
 8009bea:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009bee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009bf2:	f7f6 fe2b 	bl	800084c <__aeabi_ddiv>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	f04f 0000 	mov.w	r0, #0
 8009bfe:	494e      	ldr	r1, [pc, #312]	; (8009d38 <scaraInitLSPB+0x778>)
 8009c00:	f7f6 fb42 	bl	8000288 <__aeabi_dsub>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 fcf4 	bl	80005f8 <__aeabi_dmul>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009c14:	4620      	mov	r0, r4
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7f6 fb38 	bl	800028c <__adddf3>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009c24:	e01d      	b.n	8009c62 <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 8009c26:	f04f 0200 	mov.w	r2, #0
 8009c2a:	f04f 0300 	mov.w	r3, #0
 8009c2e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c3a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009c3e:	f7f6 fe05 	bl	800084c <__aeabi_ddiv>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 8009c4a:	f04f 0200 	mov.w	r2, #0
 8009c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c52:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009c56:	f7f6 fdf9 	bl	800084c <__aeabi_ddiv>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8009c62:	a333      	add	r3, pc, #204	; (adr r3, 8009d30 <scaraInitLSPB+0x770>)
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009c6c:	f7f6 fdee 	bl	800084c <__aeabi_ddiv>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4610      	mov	r0, r2
 8009c76:	4619      	mov	r1, r3
 8009c78:	f7f6 ffb6 	bl	8000be8 <__aeabi_d2f>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	ee00 3a10 	vmov	s0, r3
 8009c82:	f011 f8c9 	bl	801ae18 <ceilf>
 8009c86:	eef0 7a40 	vmov.f32	s15, s0
 8009c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c8e:	ee17 3a90 	vmov	r3, s15
 8009c92:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8009c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c96:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009c9a:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8009c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009ca2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 8009ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ca8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009cac:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8009cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cb2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009cb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8009cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cbc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009cc0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8009cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cc6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009cca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8009cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cd0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009cd4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8009cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cda:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009cde:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8009ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ce4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009ce8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 8009cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009cf2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 8009cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009cfc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d04:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8009d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d08:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009d12:	f7f6 fab9 	bl	8000288 <__aeabi_dsub>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d1c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	37b0      	adds	r7, #176	; 0xb0
 8009d26:	46bd      	mov	sp, r7
 8009d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d2c:	f3af 8000 	nop.w
 8009d30:	40000000 	.word	0x40000000
 8009d34:	3f847ae1 	.word	0x3f847ae1
 8009d38:	3ff00000 	.word	0x3ff00000
 8009d3c:	00000000 	.word	0x00000000
 8009d40:	405c2000 	.word	0x405c2000
 8009d44:	14000000 	.word	0x14000000
 8009d48:	4000f6f0 	.word	0x4000f6f0
 8009d4c:	6b259425 	.word	0x6b259425
 8009d50:	40069b91 	.word	0x40069b91
 8009d54:	d2f1a9fc 	.word	0xd2f1a9fc
 8009d58:	3f50624d 	.word	0x3f50624d
 8009d5c:	9abcaf48 	.word	0x9abcaf48
 8009d60:	3e7ad7f2 	.word	0x3e7ad7f2

08009d64 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009d64:	b480      	push	{r7}
 8009d66:	b089      	sub	sp, #36	; 0x24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	61f8      	str	r0, [r7, #28]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	ed87 0b04 	vstr	d0, [r7, #16]
 8009d72:	ed87 1b02 	vstr	d1, [r7, #8]
 8009d76:	ed87 2b00 	vstr	d2, [r7]
 8009d7a:	76fb      	strb	r3, [r7, #27]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3724      	adds	r7, #36	; 0x24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
	...

08009d90 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009d90:	b082      	sub	sp, #8
 8009d92:	b5b0      	push	{r4, r5, r7, lr}
 8009d94:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009d98:	af2e      	add	r7, sp, #184	; 0xb8
 8009d9a:	f107 0108 	add.w	r1, r7, #8
 8009d9e:	ed81 0b00 	vstr	d0, [r1]
 8009da2:	1d39      	adds	r1, r7, #4
 8009da4:	6008      	str	r0, [r1, #0]
 8009da6:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8009daa:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8009dae:	f107 0118 	add.w	r1, r7, #24
 8009db2:	f107 0308 	add.w	r3, r7, #8
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8009dbe:	4b92      	ldr	r3, [pc, #584]	; (800a008 <scaraFlowDuty+0x278>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f040 81a1 	bne.w	800a10a <scaraFlowDuty+0x37a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009dc8:	4b8f      	ldr	r3, [pc, #572]	; (800a008 <scaraFlowDuty+0x278>)
 8009dca:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d12b      	bne.n	8009e2a <scaraFlowDuty+0x9a>

			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	ed93 0b00 	vldr	d0, [r3]
 8009dda:	488c      	ldr	r0, [pc, #560]	; (800a00c <scaraFlowDuty+0x27c>)
 8009ddc:	f7fe ffae 	bl	8008d3c <scaraFlowLSPB1>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009de6:	4b88      	ldr	r3, [pc, #544]	; (800a008 <scaraFlowDuty+0x278>)
 8009de8:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8009dec:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009df0:	4b85      	ldr	r3, [pc, #532]	; (800a008 <scaraFlowDuty+0x278>)
 8009df2:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8009df6:	f107 0110 	add.w	r1, r7, #16
 8009dfa:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009dfe:	4b82      	ldr	r3, [pc, #520]	; (800a008 <scaraFlowDuty+0x278>)
 8009e00:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009e04:	f107 0108 	add.w	r1, r7, #8
 8009e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0c:	f7f6 fbf4 	bl	80005f8 <__aeabi_dmul>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009e18:	4b7b      	ldr	r3, [pc, #492]	; (800a008 <scaraFlowDuty+0x278>)
 8009e1a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009e1e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009e28:	e099      	b.n	8009f5e <scaraFlowDuty+0x1ce>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009e2a:	4b77      	ldr	r3, [pc, #476]	; (800a008 <scaraFlowDuty+0x278>)
 8009e2c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d126      	bne.n	8009e82 <scaraFlowDuty+0xf2>

			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8009e34:	f107 0308 	add.w	r3, r7, #8
 8009e38:	ed93 0b00 	vldr	d0, [r3]
 8009e3c:	4874      	ldr	r0, [pc, #464]	; (800a010 <scaraFlowDuty+0x280>)
 8009e3e:	f7ff f9eb 	bl	8009218 <scaraFLowScurve1>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8009e48:	4b6f      	ldr	r3, [pc, #444]	; (800a008 <scaraFlowDuty+0x278>)
 8009e4a:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8009e4e:	f107 0110 	add.w	r1, r7, #16
 8009e52:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009e56:	4b6c      	ldr	r3, [pc, #432]	; (800a008 <scaraFlowDuty+0x278>)
 8009e58:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e64:	f7f6 fbc8 	bl	80005f8 <__aeabi_dmul>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009e70:	4b65      	ldr	r3, [pc, #404]	; (800a008 <scaraFlowDuty+0x278>)
 8009e72:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009e76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009e80:	e06d      	b.n	8009f5e <scaraFlowDuty+0x1ce>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8009e82:	4b61      	ldr	r3, [pc, #388]	; (800a008 <scaraFlowDuty+0x278>)
 8009e84:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d127      	bne.n	8009edc <scaraFlowDuty+0x14c>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8009e8c:	4b5e      	ldr	r3, [pc, #376]	; (800a008 <scaraFlowDuty+0x278>)
 8009e8e:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009e92:	f107 0308 	add.w	r3, r7, #8
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f7f6 fbad 	bl	80005f8 <__aeabi_dmul>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	f107 0110 	add.w	r1, r7, #16
 8009ea6:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009eaa:	4b57      	ldr	r3, [pc, #348]	; (800a008 <scaraFlowDuty+0x278>)
 8009eac:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009eb0:	f107 0108 	add.w	r1, r7, #8
 8009eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009ec4:	4b50      	ldr	r3, [pc, #320]	; (800a008 <scaraFlowDuty+0x278>)
 8009ec6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009eca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009eda:	e040      	b.n	8009f5e <scaraFlowDuty+0x1ce>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 8009edc:	4b4a      	ldr	r3, [pc, #296]	; (800a008 <scaraFlowDuty+0x278>)
 8009ede:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d139      	bne.n	8009f5a <scaraFlowDuty+0x1ca>
			scaraFlowGCODE(&s, time);
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	f107 0210 	add.w	r2, r7, #16
 8009eee:	ed93 0b00 	vldr	d0, [r3]
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7ff f8b4 	bl	8009060 <scaraFlowGCODE>
			s -= accumulate_s;
 8009ef8:	f107 0310 	add.w	r3, r7, #16
 8009efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f00:	4b44      	ldr	r3, [pc, #272]	; (800a014 <scaraFlowDuty+0x284>)
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	f7f6 f9bf 	bl	8000288 <__aeabi_dsub>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	f107 0110 	add.w	r1, r7, #16
 8009f12:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009f16:	4b3c      	ldr	r3, [pc, #240]	; (800a008 <scaraFlowDuty+0x278>)
 8009f18:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8009f1c:	4b3e      	ldr	r3, [pc, #248]	; (800a018 <scaraFlowDuty+0x288>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f107 0108 	add.w	r1, r7, #8
 8009f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f2a:	f7f6 f9ad 	bl	8000288 <__aeabi_dsub>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	4620      	mov	r0, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7f6 fb5f 	bl	80005f8 <__aeabi_dmul>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009f42:	4b31      	ldr	r3, [pc, #196]	; (800a008 <scaraFlowDuty+0x278>)
 8009f44:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009f48:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009f58:	e001      	b.n	8009f5e <scaraFlowDuty+0x1ce>
//			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
//			status1 = SCARA_STATUS_OK;
//			status2 = SCARA_STATUS_OK;
//		}
		else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009f5a:	2305      	movs	r3, #5
 8009f5c:	e2c1      	b.n	800a4e2 <scaraFlowDuty+0x752>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009f5e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <scaraFlowDuty+0x1dc>
			return status1;
 8009f66:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009f6a:	e2ba      	b.n	800a4e2 <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009f6c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <scaraFlowDuty+0x1ea>
			return status2;
 8009f74:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009f78:	e2b3      	b.n	800a4e2 <scaraFlowDuty+0x752>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009f7a:	4b23      	ldr	r3, [pc, #140]	; (800a008 <scaraFlowDuty+0x278>)
 8009f7c:	7a1b      	ldrb	r3, [r3, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d11d      	bne.n	8009fbe <scaraFlowDuty+0x22e>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8009f82:	f107 0310 	add.w	r3, r7, #16
 8009f86:	ed93 7b00 	vldr	d7, [r3]
 8009f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8009f8e:	eef0 0a67 	vmov.f32	s1, s15
 8009f92:	4822      	ldr	r0, [pc, #136]	; (800a01c <scaraFlowDuty+0x28c>)
 8009f94:	f000 fab0 	bl	800a4f8 <scaraFlowLine>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8009f9e:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <scaraFlowDuty+0x278>)
 8009fa0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009fa4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 8009fa8:	4b17      	ldr	r3, [pc, #92]	; (800a008 <scaraFlowDuty+0x278>)
 8009faa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009fae:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 8009fb2:	4b15      	ldr	r3, [pc, #84]	; (800a008 <scaraFlowDuty+0x278>)
 8009fb4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009fb8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009fbc:	e032      	b.n	800a024 <scaraFlowDuty+0x294>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8009fbe:	4b12      	ldr	r3, [pc, #72]	; (800a008 <scaraFlowDuty+0x278>)
 8009fc0:	7a1b      	ldrb	r3, [r3, #8]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d11d      	bne.n	800a002 <scaraFlowDuty+0x272>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8009fc6:	f107 0310 	add.w	r3, r7, #16
 8009fca:	ed93 7b00 	vldr	d7, [r3]
 8009fce:	eeb0 0a47 	vmov.f32	s0, s14
 8009fd2:	eef0 0a67 	vmov.f32	s1, s15
 8009fd6:	4812      	ldr	r0, [pc, #72]	; (800a020 <scaraFlowDuty+0x290>)
 8009fd8:	f000 fb16 	bl	800a608 <scaraFlowCircle>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8009fe2:	4b09      	ldr	r3, [pc, #36]	; (800a008 <scaraFlowDuty+0x278>)
 8009fe4:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8009fe8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 8009fec:	4b06      	ldr	r3, [pc, #24]	; (800a008 <scaraFlowDuty+0x278>)
 8009fee:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8009ff2:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 8009ff6:	4b04      	ldr	r3, [pc, #16]	; (800a008 <scaraFlowDuty+0x278>)
 8009ff8:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8009ffc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 800a000:	e010      	b.n	800a024 <scaraFlowDuty+0x294>
//			x = myDUTY.task.path.line.x_current;
//			y = myDUTY.task.path.line.y_current;
//			z = myDUTY.task.path.line.z0;
//		}
		else {
			return SCARA_STATUS_ERROR_TASK;
 800a002:	2303      	movs	r3, #3
 800a004:	e26d      	b.n	800a4e2 <scaraFlowDuty+0x752>
 800a006:	bf00      	nop
 800a008:	2000ff40 	.word	0x2000ff40
 800a00c:	20010058 	.word	0x20010058
 800a010:	200100d8 	.word	0x200100d8
 800a014:	200085d8 	.word	0x200085d8
 800a018:	2000fd48 	.word	0x2000fd48
 800a01c:	2000ff50 	.word	0x2000ff50
 800a020:	2000ffc0 	.word	0x2000ffc0
		}

		positionCompute.x 		= x;
 800a024:	f107 0118 	add.w	r1, r7, #24
 800a028:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a02c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 800a030:	f107 0118 	add.w	r1, r7, #24
 800a034:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800a038:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 800a03c:	f107 0118 	add.w	r1, r7, #24
 800a040:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800a044:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 800a048:	4bad      	ldr	r3, [pc, #692]	; (800a300 <scaraFlowDuty+0x570>)
 800a04a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800a04e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a052:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 800a056:	4618      	mov	r0, r3
 800a058:	f7f6 fa64 	bl	8000524 <__aeabi_i2d>
 800a05c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 f90e 	bl	800028c <__adddf3>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	f107 0118 	add.w	r1, r7, #24
 800a078:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 800a07c:	f107 0310 	add.w	r3, r7, #16
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f107 0118 	add.w	r1, r7, #24
 800a088:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 800a08c:	f107 0118 	add.w	r1, r7, #24
 800a090:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a094:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 800a098:	f107 0118 	add.w	r1, r7, #24
 800a09c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a0a0:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800a0a4:	f107 0118 	add.w	r1, r7, #24
 800a0a8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a0ac:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800a0b0:	4b93      	ldr	r3, [pc, #588]	; (800a300 <scaraFlowDuty+0x570>)
 800a0b2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f107 0118 	add.w	r1, r7, #24
 800a0be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a0c2:	f107 0118 	add.w	r1, r7, #24
 800a0c6:	f107 0308 	add.w	r3, r7, #8
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a0d2:	f107 0418 	add.w	r4, r7, #24
 800a0d6:	4668      	mov	r0, sp
 800a0d8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a0dc:	22b8      	movs	r2, #184	; 0xb8
 800a0de:	4619      	mov	r1, r3
 800a0e0:	f00c f8ce 	bl	8016280 <memcpy>
 800a0e4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a0e8:	cb0c      	ldmia	r3, {r2, r3}
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f7fb fb38 	bl	8005760 <kinematicInverse>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <scaraFlowDuty+0x36a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a0f6:	2307      	movs	r3, #7
 800a0f8:	e1f3      	b.n	800a4e2 <scaraFlowDuty+0x752>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a0fa:	f107 0118 	add.w	r1, r7, #24
 800a0fe:	1d3b      	adds	r3, r7, #4
 800a100:	22c0      	movs	r2, #192	; 0xc0
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	f00c f8bc 	bl	8016280 <memcpy>
 800a108:	e1ea      	b.n	800a4e0 <scaraFlowDuty+0x750>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a10a:	4b7d      	ldr	r3, [pc, #500]	; (800a300 <scaraFlowDuty+0x570>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	f040 81e4 	bne.w	800a4dc <scaraFlowDuty+0x74c>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a114:	4b7a      	ldr	r3, [pc, #488]	; (800a300 <scaraFlowDuty+0x570>)
 800a116:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d174      	bne.n	800a208 <scaraFlowDuty+0x478>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 800a11e:	f107 0308 	add.w	r3, r7, #8
 800a122:	ed93 0b00 	vldr	d0, [r3]
 800a126:	4877      	ldr	r0, [pc, #476]	; (800a304 <scaraFlowDuty+0x574>)
 800a128:	f7fe fe08 	bl	8008d3c <scaraFlowLSPB1>
 800a12c:	4603      	mov	r3, r0
 800a12e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 800a132:	f107 0308 	add.w	r3, r7, #8
 800a136:	ed93 0b00 	vldr	d0, [r3]
 800a13a:	4873      	ldr	r0, [pc, #460]	; (800a308 <scaraFlowDuty+0x578>)
 800a13c:	f7fe fdfe 	bl	8008d3c <scaraFlowLSPB1>
 800a140:	4603      	mov	r3, r0
 800a142:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 800a146:	f107 0308 	add.w	r3, r7, #8
 800a14a:	ed93 0b00 	vldr	d0, [r3]
 800a14e:	486f      	ldr	r0, [pc, #444]	; (800a30c <scaraFlowDuty+0x57c>)
 800a150:	f7fe fdf4 	bl	8008d3c <scaraFlowLSPB1>
 800a154:	4603      	mov	r3, r0
 800a156:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	ed93 0b00 	vldr	d0, [r3]
 800a162:	486b      	ldr	r0, [pc, #428]	; (800a310 <scaraFlowDuty+0x580>)
 800a164:	f7fe fdea 	bl	8008d3c <scaraFlowLSPB1>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a16e:	4b64      	ldr	r3, [pc, #400]	; (800a300 <scaraFlowDuty+0x570>)
 800a170:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a174:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a178:	4b61      	ldr	r3, [pc, #388]	; (800a300 <scaraFlowDuty+0x570>)
 800a17a:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 800a17e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a182:	4b5f      	ldr	r3, [pc, #380]	; (800a300 <scaraFlowDuty+0x570>)
 800a184:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 800a188:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a18c:	4b5c      	ldr	r3, [pc, #368]	; (800a300 <scaraFlowDuty+0x570>)
 800a18e:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 800a192:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a196:	4b5a      	ldr	r3, [pc, #360]	; (800a300 <scaraFlowDuty+0x570>)
 800a198:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a1a4:	4b56      	ldr	r3, [pc, #344]	; (800a300 <scaraFlowDuty+0x570>)
 800a1a6:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a1b2:	4b53      	ldr	r3, [pc, #332]	; (800a300 <scaraFlowDuty+0x570>)
 800a1b4:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a1c0:	4b4f      	ldr	r3, [pc, #316]	; (800a300 <scaraFlowDuty+0x570>)
 800a1c2:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a1ce:	4b4c      	ldr	r3, [pc, #304]	; (800a300 <scaraFlowDuty+0x570>)
 800a1d0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a1dc:	4b48      	ldr	r3, [pc, #288]	; (800a300 <scaraFlowDuty+0x570>)
 800a1de:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a1ea:	4b45      	ldr	r3, [pc, #276]	; (800a300 <scaraFlowDuty+0x570>)
 800a1ec:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a1f8:	4b41      	ldr	r3, [pc, #260]	; (800a300 <scaraFlowDuty+0x570>)
 800a1fa:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800a206:	e05f      	b.n	800a2c8 <scaraFlowDuty+0x538>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800a208:	4b3d      	ldr	r3, [pc, #244]	; (800a300 <scaraFlowDuty+0x570>)
 800a20a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d158      	bne.n	800a2c4 <scaraFlowDuty+0x534>
			status1 = scaraFLowScurve1(&(myDUTY.joint.trajectory[0].scurve), time);
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	ed93 0b00 	vldr	d0, [r3]
 800a21a:	483e      	ldr	r0, [pc, #248]	; (800a314 <scaraFlowDuty+0x584>)
 800a21c:	f7fe fffc 	bl	8009218 <scaraFLowScurve1>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve1(&(myDUTY.joint.trajectory[1].scurve), time);
 800a226:	f107 0308 	add.w	r3, r7, #8
 800a22a:	ed93 0b00 	vldr	d0, [r3]
 800a22e:	483a      	ldr	r0, [pc, #232]	; (800a318 <scaraFlowDuty+0x588>)
 800a230:	f7fe fff2 	bl	8009218 <scaraFLowScurve1>
 800a234:	4603      	mov	r3, r0
 800a236:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve1(&(myDUTY.joint.trajectory[2].scurve), time);
 800a23a:	f107 0308 	add.w	r3, r7, #8
 800a23e:	ed93 0b00 	vldr	d0, [r3]
 800a242:	4836      	ldr	r0, [pc, #216]	; (800a31c <scaraFlowDuty+0x58c>)
 800a244:	f7fe ffe8 	bl	8009218 <scaraFLowScurve1>
 800a248:	4603      	mov	r3, r0
 800a24a:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve1(&(myDUTY.joint.trajectory[3].scurve), time);
 800a24e:	f107 0308 	add.w	r3, r7, #8
 800a252:	ed93 0b00 	vldr	d0, [r3]
 800a256:	4832      	ldr	r0, [pc, #200]	; (800a320 <scaraFlowDuty+0x590>)
 800a258:	f7fe ffde 	bl	8009218 <scaraFLowScurve1>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 800a262:	4b27      	ldr	r3, [pc, #156]	; (800a300 <scaraFlowDuty+0x570>)
 800a264:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800a268:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 800a26c:	4b24      	ldr	r3, [pc, #144]	; (800a300 <scaraFlowDuty+0x570>)
 800a26e:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800a272:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800a276:	4b22      	ldr	r3, [pc, #136]	; (800a300 <scaraFlowDuty+0x570>)
 800a278:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 800a27c:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 800a280:	4b1f      	ldr	r3, [pc, #124]	; (800a300 <scaraFlowDuty+0x570>)
 800a282:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800a286:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 800a28a:	4b1d      	ldr	r3, [pc, #116]	; (800a300 <scaraFlowDuty+0x570>)
 800a28c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 800a298:	4b19      	ldr	r3, [pc, #100]	; (800a300 <scaraFlowDuty+0x570>)
 800a29a:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 800a2a6:	4b16      	ldr	r3, [pc, #88]	; (800a300 <scaraFlowDuty+0x570>)
 800a2a8:	f603 0368 	addw	r3, r3, #2152	; 0x868
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800a2b4:	4b12      	ldr	r3, [pc, #72]	; (800a300 <scaraFlowDuty+0x570>)
 800a2b6:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 800a2c2:	e001      	b.n	800a2c8 <scaraFlowDuty+0x538>
//			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
//			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
//			v3 = myDUTY.joint.trajectory[3].scurve.v_current;

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800a2c4:	2305      	movs	r3, #5
 800a2c6:	e10c      	b.n	800a4e2 <scaraFlowDuty+0x752>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800a2c8:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <scaraFlowDuty+0x546>
			return status1;
 800a2d0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800a2d4:	e105      	b.n	800a4e2 <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a2d6:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d002      	beq.n	800a2e4 <scaraFlowDuty+0x554>
			return status2;
 800a2de:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800a2e2:	e0fe      	b.n	800a4e2 <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status3) {
 800a2e4:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <scaraFlowDuty+0x562>
			return status3;
 800a2ec:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a2f0:	e0f7      	b.n	800a4e2 <scaraFlowDuty+0x752>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a2f2:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d014      	beq.n	800a324 <scaraFlowDuty+0x594>
			return status4;
 800a2fa:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a2fe:	e0f0      	b.n	800a4e2 <scaraFlowDuty+0x752>
 800a300:	2000ff40 	.word	0x2000ff40
 800a304:	20010360 	.word	0x20010360
 800a308:	200104e0 	.word	0x200104e0
 800a30c:	20010660 	.word	0x20010660
 800a310:	200107e0 	.word	0x200107e0
 800a314:	200103e0 	.word	0x200103e0
 800a318:	20010560 	.word	0x20010560
 800a31c:	200106e0 	.word	0x200106e0
 800a320:	20010860 	.word	0x20010860
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800a324:	4b73      	ldr	r3, [pc, #460]	; (800a4f4 <scaraFlowDuty+0x764>)
 800a326:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800a32a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a32e:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800a332:	4618      	mov	r0, r3
 800a334:	f7f6 f8f6 	bl	8000524 <__aeabi_i2d>
 800a338:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a33c:	f7f6 f95c 	bl	80005f8 <__aeabi_dmul>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f5 ffa0 	bl	800028c <__adddf3>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	f107 0118 	add.w	r1, r7, #24
 800a354:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 800a358:	4b66      	ldr	r3, [pc, #408]	; (800a4f4 <scaraFlowDuty+0x764>)
 800a35a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800a35e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a362:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800a366:	4618      	mov	r0, r3
 800a368:	f7f6 f8dc 	bl	8000524 <__aeabi_i2d>
 800a36c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a370:	f7f6 f942 	bl	80005f8 <__aeabi_dmul>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4620      	mov	r0, r4
 800a37a:	4629      	mov	r1, r5
 800a37c:	f7f5 ff86 	bl	800028c <__adddf3>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	f107 0118 	add.w	r1, r7, #24
 800a388:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800a38c:	4b59      	ldr	r3, [pc, #356]	; (800a4f4 <scaraFlowDuty+0x764>)
 800a38e:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a392:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a396:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7f6 f8c2 	bl	8000524 <__aeabi_i2d>
 800a3a0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a3a4:	f7f6 f928 	bl	80005f8 <__aeabi_dmul>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	f7f5 ff6c 	bl	800028c <__adddf3>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	f107 0118 	add.w	r1, r7, #24
 800a3bc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 800a3c0:	4b4c      	ldr	r3, [pc, #304]	; (800a4f4 <scaraFlowDuty+0x764>)
 800a3c2:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800a3c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a3ca:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f6 f8a8 	bl	8000524 <__aeabi_i2d>
 800a3d4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a3d8:	f7f6 f90e 	bl	80005f8 <__aeabi_dmul>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7f5 ff52 	bl	800028c <__adddf3>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	f107 0118 	add.w	r1, r7, #24
 800a3f0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a3f4:	f107 0118 	add.w	r1, r7, #24
 800a3f8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800a3fc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a400:	f107 0118 	add.w	r1, r7, #24
 800a404:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a408:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a40c:	f107 0118 	add.w	r1, r7, #24
 800a410:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a414:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a418:	f107 0118 	add.w	r1, r7, #24
 800a41c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a420:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a424:	f107 0118 	add.w	r1, r7, #24
 800a428:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a42c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 800a430:	f107 0118 	add.w	r1, r7, #24
 800a434:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a438:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 800a43c:	f107 0118 	add.w	r1, r7, #24
 800a440:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a444:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 800a448:	f107 0118 	add.w	r1, r7, #24
 800a44c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a450:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a454:	4b27      	ldr	r3, [pc, #156]	; (800a4f4 <scaraFlowDuty+0x764>)
 800a456:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	f107 0118 	add.w	r1, r7, #24
 800a462:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a466:	f107 0118 	add.w	r1, r7, #24
 800a46a:	f107 0308 	add.w	r3, r7, #8
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a476:	f107 0318 	add.w	r3, r7, #24
 800a47a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a47e:	f107 0318 	add.w	r3, r7, #24
 800a482:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a486:	f107 0318 	add.w	r3, r7, #24
 800a48a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a48e:	f107 0318 	add.w	r3, r7, #24
 800a492:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a496:	eeb0 3a44 	vmov.f32	s6, s8
 800a49a:	eef0 3a64 	vmov.f32	s7, s9
 800a49e:	eeb0 2a45 	vmov.f32	s4, s10
 800a4a2:	eef0 2a65 	vmov.f32	s5, s11
 800a4a6:	eeb0 1a46 	vmov.f32	s2, s12
 800a4aa:	eef0 1a66 	vmov.f32	s3, s13
 800a4ae:	eeb0 0a47 	vmov.f32	s0, s14
 800a4b2:	eef0 0a67 	vmov.f32	s1, s15
 800a4b6:	f000 f92f 	bl	800a718 <scaraCheckWorkSpace4>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <scaraFlowDuty+0x734>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4c0:	2307      	movs	r3, #7
 800a4c2:	e00e      	b.n	800a4e2 <scaraFlowDuty+0x752>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a4c4:	f107 0118 	add.w	r1, r7, #24
 800a4c8:	1d3b      	adds	r3, r7, #4
 800a4ca:	22c0      	movs	r2, #192	; 0xc0
 800a4cc:	6818      	ldr	r0, [r3, #0]
 800a4ce:	f00b fed7 	bl	8016280 <memcpy>
		}
		kinematicForward(pos_Next);
 800a4d2:	1d3b      	adds	r3, r7, #4
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	f7fb f81f 	bl	8005518 <kinematicForward>
 800a4da:	e001      	b.n	800a4e0 <scaraFlowDuty+0x750>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a4dc:	2302      	movs	r3, #2
 800a4de:	e000      	b.n	800a4e2 <scaraFlowDuty+0x752>
	}

	return SCARA_STATUS_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a4ee:	b002      	add	sp, #8
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	2000ff40 	.word	0x2000ff40

0800a4f8 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 800a4f8:	b5b0      	push	{r4, r5, r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a50a:	a33d      	add	r3, pc, #244	; (adr r3, 800a600 <scaraFlowLine+0x108>)
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	f7f6 fb02 	bl	8000b18 <__aeabi_dcmpgt>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d05a      	beq.n	800a5d0 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800a526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a52a:	f7f6 f865 	bl	80005f8 <__aeabi_dmul>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4610      	mov	r0, r2
 800a534:	4619      	mov	r1, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a53c:	f7f6 f986 	bl	800084c <__aeabi_ddiv>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	4620      	mov	r0, r4
 800a546:	4629      	mov	r1, r5
 800a548:	f7f5 fea0 	bl	800028c <__adddf3>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	68f9      	ldr	r1, [r7, #12]
 800a552:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a562:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a566:	f7f6 f847 	bl	80005f8 <__aeabi_dmul>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4610      	mov	r0, r2
 800a570:	4619      	mov	r1, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a578:	f7f6 f968 	bl	800084c <__aeabi_ddiv>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4620      	mov	r0, r4
 800a582:	4629      	mov	r1, r5
 800a584:	f7f5 fe82 	bl	800028c <__adddf3>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	68f9      	ldr	r1, [r7, #12]
 800a58e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5a2:	f7f6 f829 	bl	80005f8 <__aeabi_dmul>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a5b4:	f7f6 f94a 	bl	800084c <__aeabi_ddiv>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4620      	mov	r0, r4
 800a5be:	4629      	mov	r1, r5
 800a5c0:	f7f5 fe64 	bl	800028c <__adddf3>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	68f9      	ldr	r1, [r7, #12]
 800a5ca:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800a5ce:	e011      	b.n	800a5f4 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a5d6:	68f9      	ldr	r1, [r7, #12]
 800a5d8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a5e2:	68f9      	ldr	r1, [r7, #12]
 800a5e4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a5ee:	68f9      	ldr	r1, [r7, #12]
 800a5f0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a5fe:	bf00      	nop
 800a600:	47ae147b 	.word	0x47ae147b
 800a604:	3f847ae1 	.word	0x3f847ae1

0800a608 <scaraFlowCircle>:
	line->y_current = (a*bezier_y_coeffs[0] + b*bezier_y_coeffs[1] + c*bezier_y_coeffs[2])/(a + 2*bezier_wc*b+c);
	return SCARA_STATUS_OK;
}

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 800a608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a60c:	b086      	sub	sp, #24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a61c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a620:	f7f6 f914 	bl	800084c <__aeabi_ddiv>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f993 3000 	ldrsb.w	r3, [r3]
 800a644:	4618      	mov	r0, r3
 800a646:	f7f5 ff6d 	bl	8000524 <__aeabi_i2d>
 800a64a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	4650      	mov	r0, sl
 800a658:	4659      	mov	r1, fp
 800a65a:	f7f5 fe17 	bl	800028c <__adddf3>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	ec43 2b17 	vmov	d7, r2, r3
 800a666:	eeb0 0a47 	vmov.f32	s0, s14
 800a66a:	eef0 0a67 	vmov.f32	s1, s15
 800a66e:	f010 fae7 	bl	801ac40 <cos>
 800a672:	ec53 2b10 	vmov	r2, r3, d0
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f5 ffbd 	bl	80005f8 <__aeabi_dmul>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	4620      	mov	r0, r4
 800a684:	4629      	mov	r1, r5
 800a686:	f7f5 fe01 	bl	800028c <__adddf3>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	68f9      	ldr	r1, [r7, #12]
 800a690:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f993 3000 	ldrsb.w	r3, [r3]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7f5 ff39 	bl	8000524 <__aeabi_i2d>
 800a6b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a6b6:	f7f5 ff9f 	bl	80005f8 <__aeabi_dmul>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4650      	mov	r0, sl
 800a6c0:	4659      	mov	r1, fp
 800a6c2:	f7f5 fde3 	bl	800028c <__adddf3>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	ec43 2b17 	vmov	d7, r2, r3
 800a6ce:	eeb0 0a47 	vmov.f32	s0, s14
 800a6d2:	eef0 0a67 	vmov.f32	s1, s15
 800a6d6:	f010 fb4b 	bl	801ad70 <sin>
 800a6da:	ec53 2b10 	vmov	r2, r3, d0
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f5 ff89 	bl	80005f8 <__aeabi_dmul>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	f7f5 fdcd 	bl	800028c <__adddf3>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	68f9      	ldr	r1, [r7, #12]
 800a6f8:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800a702:	68f9      	ldr	r1, [r7, #12]
 800a704:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a714:	0000      	movs	r0, r0
	...

0800a718 <scaraCheckWorkSpace4>:

	 return SCARA_STATUS_OK;
}

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	ed87 0b06 	vstr	d0, [r7, #24]
 800a722:	ed87 1b04 	vstr	d1, [r7, #16]
 800a726:	ed87 2b02 	vstr	d2, [r7, #8]
 800a72a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a72e:	a335      	add	r3, pc, #212	; (adr r3, 800a804 <scaraCheckWorkSpace4+0xec>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a738:	f7f6 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d109      	bne.n	800a756 <scaraCheckWorkSpace4+0x3e>
 800a742:	a332      	add	r3, pc, #200	; (adr r3, 800a80c <scaraCheckWorkSpace4+0xf4>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a74c:	f7f6 f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a756:	2307      	movs	r3, #7
 800a758:	e043      	b.n	800a7e2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a75a:	a32e      	add	r3, pc, #184	; (adr r3, 800a814 <scaraCheckWorkSpace4+0xfc>)
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a764:	f7f6 f9ba 	bl	8000adc <__aeabi_dcmplt>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d109      	bne.n	800a782 <scaraCheckWorkSpace4+0x6a>
 800a76e:	a32b      	add	r3, pc, #172	; (adr r3, 800a81c <scaraCheckWorkSpace4+0x104>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a778:	f7f6 f9ce 	bl	8000b18 <__aeabi_dcmpgt>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a782:	2307      	movs	r3, #7
 800a784:	e02d      	b.n	800a7e2 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a786:	f04f 0200 	mov.w	r2, #0
 800a78a:	f04f 0300 	mov.w	r3, #0
 800a78e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a792:	f7f6 f9a3 	bl	8000adc <__aeabi_dcmplt>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d109      	bne.n	800a7b0 <scaraCheckWorkSpace4+0x98>
 800a79c:	f04f 0200 	mov.w	r2, #0
 800a7a0:	4b17      	ldr	r3, [pc, #92]	; (800a800 <scaraCheckWorkSpace4+0xe8>)
 800a7a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7a6:	f7f6 f9b7 	bl	8000b18 <__aeabi_dcmpgt>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a7b0:	2307      	movs	r3, #7
 800a7b2:	e016      	b.n	800a7e2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a7b4:	a30e      	add	r3, pc, #56	; (adr r3, 800a7f0 <scaraCheckWorkSpace4+0xd8>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a7be:	f7f6 f98d 	bl	8000adc <__aeabi_dcmplt>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d109      	bne.n	800a7dc <scaraCheckWorkSpace4+0xc4>
 800a7c8:	a30b      	add	r3, pc, #44	; (adr r3, 800a7f8 <scaraCheckWorkSpace4+0xe0>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a7d2:	f7f6 f9a1 	bl	8000b18 <__aeabi_dcmpgt>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a7dc:	2307      	movs	r3, #7
 800a7de:	e000      	b.n	800a7e2 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	f3af 8000 	nop.w
 800a7f0:	a7777778 	.word	0xa7777778
 800a7f4:	c0088956 	.word	0xc0088956
 800a7f8:	a7777778 	.word	0xa7777778
 800a7fc:	40088956 	.word	0x40088956
 800a800:	40590000 	.word	0x40590000
 800a804:	74444445 	.word	0x74444445
 800a808:	bff95623 	.word	0xbff95623
 800a80c:	74444445 	.word	0x74444445
 800a810:	3ff95623 	.word	0x3ff95623
 800a814:	54cccccd 	.word	0x54cccccd
 800a818:	c003a649 	.word	0xc003a649
 800a81c:	54cccccd 	.word	0x54cccccd
 800a820:	4003a649 	.word	0x4003a649
 800a824:	00000000 	.word	0x00000000

0800a828 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a828:	b5b0      	push	{r4, r5, r7, lr}
 800a82a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a82e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a830:	f04f 0200 	mov.w	r2, #0
 800a834:	f04f 0300 	mov.w	r3, #0
 800a838:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a83c:	463b      	mov	r3, r7
 800a83e:	4a36      	ldr	r2, [pc, #216]	; (800a918 <scaraTestDuty+0xf0>)
 800a840:	4618      	mov	r0, r3
 800a842:	4611      	mov	r1, r2
 800a844:	23c0      	movs	r3, #192	; 0xc0
 800a846:	461a      	mov	r2, r3
 800a848:	f00b fd1a 	bl	8016280 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a84c:	4b33      	ldr	r3, [pc, #204]	; (800a91c <scaraTestDuty+0xf4>)
 800a84e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a852:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a856:	a32e      	add	r3, pc, #184	; (adr r3, 800a910 <scaraTestDuty+0xe8>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f5 fff6 	bl	800084c <__aeabi_ddiv>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	ec43 2b17 	vmov	d7, r2, r3
 800a868:	eeb0 0a47 	vmov.f32	s0, s14
 800a86c:	eef0 0a67 	vmov.f32	s1, s15
 800a870:	f010 f962 	bl	801ab38 <ceil>
 800a874:	ec53 2b10 	vmov	r2, r3, d0
 800a878:	4610      	mov	r0, r2
 800a87a:	4619      	mov	r1, r3
 800a87c:	f7f6 f96c 	bl	8000b58 <__aeabi_d2iz>
 800a880:	4603      	mov	r3, r0
 800a882:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a886:	2301      	movs	r3, #1
 800a888:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a88c:	e032      	b.n	800a8f4 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a88e:	a320      	add	r3, pc, #128	; (adr r3, 800a910 <scaraTestDuty+0xe8>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a898:	f7f5 fcf8 	bl	800028c <__adddf3>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a8a4:	463c      	mov	r4, r7
 800a8a6:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a8aa:	4668      	mov	r0, sp
 800a8ac:	f104 0308 	add.w	r3, r4, #8
 800a8b0:	22b8      	movs	r2, #184	; 0xb8
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	f00b fce4 	bl	8016280 <memcpy>
 800a8b8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a8bc:	4628      	mov	r0, r5
 800a8be:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a8c2:	f7ff fa65 	bl	8009d90 <scaraFlowDuty>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a8cc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <scaraTestDuty+0xb2>
			return status;
 800a8d4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a8d8:	e013      	b.n	800a902 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a8da:	463a      	mov	r2, r7
 800a8dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	22c0      	movs	r2, #192	; 0xc0
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f00b fccb 	bl	8016280 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a8ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a8f4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a8f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	dbc6      	blt.n	800a88e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a908:	46bd      	mov	sp, r7
 800a90a:	bdb0      	pop	{r4, r5, r7, pc}
 800a90c:	f3af 8000 	nop.w
 800a910:	40000000 	.word	0x40000000
 800a914:	3f847ae1 	.word	0x3f847ae1
 800a918:	20010b00 	.word	0x20010b00
 800a91c:	2000ff40 	.word	0x2000ff40

0800a920 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a924:	4b03      	ldr	r3, [pc, #12]	; (800a934 <scaraSetScanFlag+0x14>)
 800a926:	2201      	movs	r2, #1
 800a928:	70da      	strb	r2, [r3, #3]
}
 800a92a:	bf00      	nop
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	20004080 	.word	0x20004080

0800a938 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a942:	4a05      	ldr	r2, [pc, #20]	; (800a958 <scaraSetOutput+0x20>)
 800a944:	79fb      	ldrb	r3, [r7, #7]
 800a946:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fc f9fc 	bl	8006d48 <lowlayer_setOutput>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	20004080 	.word	0x20004080

0800a95c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a966:	4a04      	ldr	r2, [pc, #16]	; (800a978 <scaraSetDutyState+0x1c>)
 800a968:	79fb      	ldrb	r3, [r7, #7]
 800a96a:	7093      	strb	r3, [r2, #2]
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	20004080 	.word	0x20004080

0800a97c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a986:	4a04      	ldr	r2, [pc, #16]	; (800a998 <scaraSetMode+0x1c>)
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	7053      	strb	r3, [r2, #1]
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	20004080 	.word	0x20004080

0800a99c <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a9a6:	4a04      	ldr	r2, [pc, #16]	; (800a9b8 <scaraSetMethod+0x1c>)
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	7013      	strb	r3, [r2, #0]
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	20004080 	.word	0x20004080

0800a9bc <scaraUpdatePosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
}

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a9c4:	22c0      	movs	r2, #192	; 0xc0
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	4803      	ldr	r0, [pc, #12]	; (800a9d8 <scaraUpdatePosition+0x1c>)
 800a9ca:	f00b fc59 	bl	8016280 <memcpy>
}
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	20010c80 	.word	0x20010c80

0800a9dc <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a9dc:	b480      	push	{r7}
 800a9de:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a9e0:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <scaraGetMode+0x14>)
 800a9e2:	785b      	ldrb	r3, [r3, #1]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	20004080 	.word	0x20004080

0800a9f4 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a9f8:	4b03      	ldr	r3, [pc, #12]	; (800aa08 <scaraGetMethod+0x14>)
 800a9fa:	781b      	ldrb	r3, [r3, #0]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	20004080 	.word	0x20004080

0800aa0c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800aa10:	4b03      	ldr	r3, [pc, #12]	; (800aa20 <scaraGetDutyState+0x14>)
 800aa12:	789b      	ldrb	r3, [r3, #2]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	20004080 	.word	0x20004080

0800aa24 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800aa28:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <scaraIsScanLimit+0x14>)
 800aa2a:	78db      	ldrb	r3, [r3, #3]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	20004080 	.word	0x20004080

0800aa3c <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total < run_time) {
 800aa46:	4b09      	ldr	r3, [pc, #36]	; (800aa6c <scaraIsFinish+0x30>)
 800aa48:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa54:	f7f6 f860 	bl	8000b18 <__aeabi_dcmpgt>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <scaraIsFinish+0x26>
		return TRUE;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e000      	b.n	800aa64 <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800aa62:	2300      	movs	r3, #0
	}
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	2000ff40 	.word	0x2000ff40

0800aa70 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800aa70:	b082      	sub	sp, #8
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	f107 0118 	add.w	r1, r7, #24
 800aa7e:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800aa82:	f06f 0303 	mvn.w	r3, #3
 800aa86:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800aa8c:	a35c      	add	r3, pc, #368	; (adr r3, 800ac00 <scaraPosition_packaging+0x190>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	f7f5 fdb1 	bl	80005f8 <__aeabi_dmul>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f7f6 f85b 	bl	8000b58 <__aeabi_d2iz>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	4413      	add	r3, r2
 800aaae:	4619      	mov	r1, r3
 800aab0:	f000 f8aa 	bl	800ac08 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aab4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aab8:	a351      	add	r3, pc, #324	; (adr r3, 800ac00 <scaraPosition_packaging+0x190>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fd9b 	bl	80005f8 <__aeabi_dmul>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	4610      	mov	r0, r2
 800aac8:	4619      	mov	r1, r3
 800aaca:	f7f6 f845 	bl	8000b58 <__aeabi_d2iz>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3304      	adds	r3, #4
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	4413      	add	r3, r2
 800aada:	4619      	mov	r1, r3
 800aadc:	f000 f894 	bl	800ac08 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aae0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800aae4:	a346      	add	r3, pc, #280	; (adr r3, 800ac00 <scaraPosition_packaging+0x190>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fd85 	bl	80005f8 <__aeabi_dmul>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f7f6 f82f 	bl	8000b58 <__aeabi_d2iz>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3304      	adds	r3, #4
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	4413      	add	r3, r2
 800ab06:	4619      	mov	r1, r3
 800ab08:	f000 f87e 	bl	800ac08 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ab0c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800ab10:	a33b      	add	r3, pc, #236	; (adr r3, 800ac00 <scaraPosition_packaging+0x190>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fd6f 	bl	80005f8 <__aeabi_dmul>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4610      	mov	r0, r2
 800ab20:	4619      	mov	r1, r3
 800ab22:	f7f6 f819 	bl	8000b58 <__aeabi_d2iz>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	4619      	mov	r1, r3
 800ab34:	f000 f868 	bl	800ac08 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ab38:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab3c:	a330      	add	r3, pc, #192	; (adr r3, 800ac00 <scaraPosition_packaging+0x190>)
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	f7f5 fd59 	bl	80005f8 <__aeabi_dmul>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	f7f6 f803 	bl	8000b58 <__aeabi_d2iz>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3304      	adds	r3, #4
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	4619      	mov	r1, r3
 800ab60:	f000 f852 	bl	800ac08 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ab64:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800ab68:	a325      	add	r3, pc, #148	; (adr r3, 800ac00 <scaraPosition_packaging+0x190>)
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	f7f5 fd43 	bl	80005f8 <__aeabi_dmul>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4610      	mov	r0, r2
 800ab78:	4619      	mov	r1, r3
 800ab7a:	f7f5 ffed 	bl	8000b58 <__aeabi_d2iz>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3304      	adds	r3, #4
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4413      	add	r3, r2
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f000 f83c 	bl	800ac08 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ab90:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ab94:	a31a      	add	r3, pc, #104	; (adr r3, 800ac00 <scaraPosition_packaging+0x190>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f7f5 fd2d 	bl	80005f8 <__aeabi_dmul>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	4610      	mov	r0, r2
 800aba4:	4619      	mov	r1, r3
 800aba6:	f7f5 ffd7 	bl	8000b58 <__aeabi_d2iz>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3304      	adds	r3, #4
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	4413      	add	r3, r2
 800abb6:	4619      	mov	r1, r3
 800abb8:	f000 f826 	bl	800ac08 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800abbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800abc0:	a30f      	add	r3, pc, #60	; (adr r3, 800ac00 <scaraPosition_packaging+0x190>)
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f7f5 fd17 	bl	80005f8 <__aeabi_dmul>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4610      	mov	r0, r2
 800abd0:	4619      	mov	r1, r3
 800abd2:	f7f5 ffc1 	bl	8000b58 <__aeabi_d2iz>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3304      	adds	r3, #4
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4413      	add	r3, r2
 800abe2:	4619      	mov	r1, r3
 800abe4:	f000 f810 	bl	800ac08 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3304      	adds	r3, #4
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abf6:	b002      	add	sp, #8
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	f3af 8000 	nop.w
 800ac00:	00000000 	.word	0x00000000
 800ac04:	412e8480 	.word	0x412e8480

0800ac08 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	121a      	asrs	r2, r3, #8
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	b2d2      	uxtb	r2, r2
 800ac24:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	141a      	asrs	r2, r3, #16
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	b2d2      	uxtb	r2, r2
 800ac30:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	161a      	asrs	r2, r3, #24
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	3303      	adds	r3, #3
 800ac3a:	b2d2      	uxtb	r2, r2
 800ac3c:	701a      	strb	r2, [r3, #0]
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	0000      	movs	r0, r0
 800ac4c:	0000      	movs	r0, r0
	...

0800ac50 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800ac50:	b590      	push	{r4, r7, lr}
 800ac52:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800ac56:	af6c      	add	r7, sp, #432	; 0x1b0
 800ac58:	4602      	mov	r2, r0
 800ac5a:	463b      	mov	r3, r7
 800ac5c:	6019      	str	r1, [r3, #0]
 800ac5e:	1dfb      	adds	r3, r7, #7
 800ac60:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800ac62:	f107 0308 	add.w	r3, r7, #8
 800ac66:	2201      	movs	r2, #1
 800ac68:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800ac6a:	f107 0308 	add.w	r3, r7, #8
 800ac6e:	2200      	movs	r2, #0
 800ac70:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	2201      	movs	r2, #1
 800ac78:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800ac7a:	f04f 0200 	mov.w	r2, #0
 800ac7e:	f04f 0300 	mov.w	r3, #0
 800ac82:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800ac86:	463b      	mov	r3, r7
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dd03      	ble.n	800ac96 <scaraKeyInit1+0x46>
 800ac8e:	463b      	mov	r3, r7
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b0e      	cmp	r3, #14
 800ac94:	dd01      	ble.n	800ac9a <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800ac96:	2306      	movs	r3, #6
 800ac98:	e2c0      	b.n	800b21c <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800ac9a:	1dfb      	adds	r3, r7, #7
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b07      	cmp	r3, #7
 800aca0:	f200 8298 	bhi.w	800b1d4 <scaraKeyInit1+0x584>
 800aca4:	a201      	add	r2, pc, #4	; (adr r2, 800acac <scaraKeyInit1+0x5c>)
 800aca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acaa:	bf00      	nop
 800acac:	0800accd 	.word	0x0800accd
 800acb0:	0800ad6f 	.word	0x0800ad6f
 800acb4:	0800ae15 	.word	0x0800ae15
 800acb8:	0800aeb3 	.word	0x0800aeb3
 800acbc:	0800af55 	.word	0x0800af55
 800acc0:	0800aff3 	.word	0x0800aff3
 800acc4:	0800b095 	.word	0x0800b095
 800acc8:	0800b133 	.word	0x0800b133
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800accc:	f107 0108 	add.w	r1, r7, #8
 800acd0:	f04f 0200 	mov.w	r2, #0
 800acd4:	f04f 0300 	mov.w	r3, #0
 800acd8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800acdc:	f107 0308 	add.w	r3, r7, #8
 800ace0:	2200      	movs	r2, #0
 800ace2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ace4:	f107 0308 	add.w	r3, r7, #8
 800ace8:	2200      	movs	r2, #0
 800acea:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800acec:	463b      	mov	r3, r7
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	4613      	mov	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7f5 fc14 	bl	8000524 <__aeabi_i2d>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ad08:	f107 0108 	add.w	r1, r7, #8
 800ad0c:	f04f 0200 	mov.w	r2, #0
 800ad10:	f04f 0300 	mov.w	r3, #0
 800ad14:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ad18:	f107 0108 	add.w	r1, r7, #8
 800ad1c:	f04f 0200 	mov.w	r2, #0
 800ad20:	f04f 0300 	mov.w	r3, #0
 800ad24:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	f04f 0200 	mov.w	r2, #0
 800ad30:	f04f 0300 	mov.w	r3, #0
 800ad34:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad38:	463b      	mov	r3, r7
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	f7f5 fbf2 	bl	8000524 <__aeabi_i2d>
 800ad40:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f7f5 fc56 	bl	80005f8 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4610      	mov	r0, r2
 800ad52:	4619      	mov	r1, r3
 800ad54:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800ad58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5c:	f7f5 fa96 	bl	800028c <__adddf3>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	f107 0108 	add.w	r1, r7, #8
 800ad68:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ad6c:	e232      	b.n	800b1d4 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800ad6e:	f107 0108 	add.w	r1, r7, #8
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad7e:	f107 0308 	add.w	r3, r7, #8
 800ad82:	2200      	movs	r2, #0
 800ad84:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad86:	f107 0308 	add.w	r3, r7, #8
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800ad8e:	463b      	mov	r3, r7
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4613      	mov	r3, r2
 800ad94:	079b      	lsls	r3, r3, #30
 800ad96:	1a9b      	subs	r3, r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	1a9b      	subs	r3, r3, r2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7f5 fbc1 	bl	8000524 <__aeabi_i2d>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	f107 0108 	add.w	r1, r7, #8
 800adaa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800adae:	f107 0108 	add.w	r1, r7, #8
 800adb2:	f04f 0200 	mov.w	r2, #0
 800adb6:	f04f 0300 	mov.w	r3, #0
 800adba:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800adbe:	f107 0108 	add.w	r1, r7, #8
 800adc2:	f04f 0200 	mov.w	r2, #0
 800adc6:	f04f 0300 	mov.w	r3, #0
 800adca:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800adce:	f107 0108 	add.w	r1, r7, #8
 800add2:	f04f 0200 	mov.w	r2, #0
 800add6:	f04f 0300 	mov.w	r3, #0
 800adda:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800adde:	463b      	mov	r3, r7
 800ade0:	6818      	ldr	r0, [r3, #0]
 800ade2:	f7f5 fb9f 	bl	8000524 <__aeabi_i2d>
 800ade6:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f7f5 fc03 	bl	80005f8 <__aeabi_dmul>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	4610      	mov	r0, r2
 800adf8:	4619      	mov	r1, r3
 800adfa:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	f7f5 fa43 	bl	800028c <__adddf3>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	f107 0108 	add.w	r1, r7, #8
 800ae0e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800ae12:	e1df      	b.n	800b1d4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800ae14:	f107 0108 	add.w	r1, r7, #8
 800ae18:	f04f 0200 	mov.w	r2, #0
 800ae1c:	f04f 0300 	mov.w	r3, #0
 800ae20:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae24:	f107 0308 	add.w	r3, r7, #8
 800ae28:	2200      	movs	r2, #0
 800ae2a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae2c:	f107 0308 	add.w	r3, r7, #8
 800ae30:	2200      	movs	r2, #0
 800ae32:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae34:	f107 0108 	add.w	r1, r7, #8
 800ae38:	f04f 0200 	mov.w	r2, #0
 800ae3c:	f04f 0300 	mov.w	r3, #0
 800ae40:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800ae44:	463b      	mov	r3, r7
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7f5 fb68 	bl	8000524 <__aeabi_i2d>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	f107 0108 	add.w	r1, r7, #8
 800ae5c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ae60:	f107 0108 	add.w	r1, r7, #8
 800ae64:	f04f 0200 	mov.w	r2, #0
 800ae68:	f04f 0300 	mov.w	r3, #0
 800ae6c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ae70:	f107 0108 	add.w	r1, r7, #8
 800ae74:	f04f 0200 	mov.w	r2, #0
 800ae78:	f04f 0300 	mov.w	r3, #0
 800ae7c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae80:	463b      	mov	r3, r7
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	f7f5 fb4e 	bl	8000524 <__aeabi_i2d>
 800ae88:	a3e7      	add	r3, pc, #924	; (adr r3, 800b228 <scaraKeyInit1+0x5d8>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4610      	mov	r0, r2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	a3e5      	add	r3, pc, #916	; (adr r3, 800b230 <scaraKeyInit1+0x5e0>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 f9f4 	bl	800028c <__adddf3>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	f107 0108 	add.w	r1, r7, #8
 800aeac:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aeb0:	e190      	b.n	800b1d4 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800aeb2:	f107 0108 	add.w	r1, r7, #8
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	f04f 0300 	mov.w	r3, #0
 800aebe:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aec2:	f107 0308 	add.w	r3, r7, #8
 800aec6:	2200      	movs	r2, #0
 800aec8:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	2200      	movs	r2, #0
 800aed0:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aed2:	f107 0108 	add.w	r1, r7, #8
 800aed6:	f04f 0200 	mov.w	r2, #0
 800aeda:	f04f 0300 	mov.w	r3, #0
 800aede:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800aee2:	463b      	mov	r3, r7
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4613      	mov	r3, r2
 800aee8:	079b      	lsls	r3, r3, #30
 800aeea:	1a9b      	subs	r3, r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	1a9b      	subs	r3, r3, r2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7f5 fb17 	bl	8000524 <__aeabi_i2d>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	f107 0108 	add.w	r1, r7, #8
 800aefe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800af02:	f107 0108 	add.w	r1, r7, #8
 800af06:	f04f 0200 	mov.w	r2, #0
 800af0a:	f04f 0300 	mov.w	r3, #0
 800af0e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800af12:	f107 0108 	add.w	r1, r7, #8
 800af16:	f04f 0200 	mov.w	r2, #0
 800af1a:	f04f 0300 	mov.w	r3, #0
 800af1e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800af22:	463b      	mov	r3, r7
 800af24:	6818      	ldr	r0, [r3, #0]
 800af26:	f7f5 fafd 	bl	8000524 <__aeabi_i2d>
 800af2a:	a3bf      	add	r3, pc, #764	; (adr r3, 800b228 <scaraKeyInit1+0x5d8>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	f7f5 fb62 	bl	80005f8 <__aeabi_dmul>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4610      	mov	r0, r2
 800af3a:	4619      	mov	r1, r3
 800af3c:	a3bc      	add	r3, pc, #752	; (adr r3, 800b230 <scaraKeyInit1+0x5e0>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7f5 f9a3 	bl	800028c <__adddf3>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	f107 0108 	add.w	r1, r7, #8
 800af4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800af52:	e13f      	b.n	800b1d4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800af54:	f107 0108 	add.w	r1, r7, #8
 800af58:	f04f 0200 	mov.w	r2, #0
 800af5c:	f04f 0300 	mov.w	r3, #0
 800af60:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800af64:	f107 0308 	add.w	r3, r7, #8
 800af68:	2200      	movs	r2, #0
 800af6a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800af6c:	f107 0308 	add.w	r3, r7, #8
 800af70:	2200      	movs	r2, #0
 800af72:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800af74:	f107 0108 	add.w	r1, r7, #8
 800af78:	f04f 0200 	mov.w	r2, #0
 800af7c:	f04f 0300 	mov.w	r3, #0
 800af80:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800af84:	f107 0108 	add.w	r1, r7, #8
 800af88:	f04f 0200 	mov.w	r2, #0
 800af8c:	f04f 0300 	mov.w	r3, #0
 800af90:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800af94:	463b      	mov	r3, r7
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	4613      	mov	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7f5 fac0 	bl	8000524 <__aeabi_i2d>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	f107 0108 	add.w	r1, r7, #8
 800afac:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800afb0:	f107 0108 	add.w	r1, r7, #8
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	f04f 0300 	mov.w	r3, #0
 800afbc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800afc0:	463b      	mov	r3, r7
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	f7f5 faae 	bl	8000524 <__aeabi_i2d>
 800afc8:	a397      	add	r3, pc, #604	; (adr r3, 800b228 <scaraKeyInit1+0x5d8>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 fb13 	bl	80005f8 <__aeabi_dmul>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4610      	mov	r0, r2
 800afd8:	4619      	mov	r1, r3
 800afda:	a395      	add	r3, pc, #596	; (adr r3, 800b230 <scaraKeyInit1+0x5e0>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f7f5 f954 	bl	800028c <__adddf3>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	f107 0108 	add.w	r1, r7, #8
 800afec:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800aff0:	e0f0      	b.n	800b1d4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800aff2:	f107 0108 	add.w	r1, r7, #8
 800aff6:	f04f 0200 	mov.w	r2, #0
 800affa:	f04f 0300 	mov.w	r3, #0
 800affe:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	2200      	movs	r2, #0
 800b008:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b00a:	f107 0308 	add.w	r3, r7, #8
 800b00e:	2200      	movs	r2, #0
 800b010:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b012:	f107 0108 	add.w	r1, r7, #8
 800b016:	f04f 0200 	mov.w	r2, #0
 800b01a:	f04f 0300 	mov.w	r3, #0
 800b01e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b022:	f107 0108 	add.w	r1, r7, #8
 800b026:	f04f 0200 	mov.w	r2, #0
 800b02a:	f04f 0300 	mov.w	r3, #0
 800b02e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800b032:	463b      	mov	r3, r7
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	4613      	mov	r3, r2
 800b038:	079b      	lsls	r3, r3, #30
 800b03a:	1a9b      	subs	r3, r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	1a9b      	subs	r3, r3, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f7f5 fa6f 	bl	8000524 <__aeabi_i2d>
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	f107 0108 	add.w	r1, r7, #8
 800b04e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b052:	f107 0108 	add.w	r1, r7, #8
 800b056:	f04f 0200 	mov.w	r2, #0
 800b05a:	f04f 0300 	mov.w	r3, #0
 800b05e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b062:	463b      	mov	r3, r7
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	f7f5 fa5d 	bl	8000524 <__aeabi_i2d>
 800b06a:	a36f      	add	r3, pc, #444	; (adr r3, 800b228 <scaraKeyInit1+0x5d8>)
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	f7f5 fac2 	bl	80005f8 <__aeabi_dmul>
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	4610      	mov	r0, r2
 800b07a:	4619      	mov	r1, r3
 800b07c:	a36c      	add	r3, pc, #432	; (adr r3, 800b230 <scaraKeyInit1+0x5e0>)
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	f7f5 f903 	bl	800028c <__adddf3>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	f107 0108 	add.w	r1, r7, #8
 800b08e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b092:	e09f      	b.n	800b1d4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800b094:	f107 0108 	add.w	r1, r7, #8
 800b098:	f04f 0200 	mov.w	r2, #0
 800b09c:	f04f 0300 	mov.w	r3, #0
 800b0a0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b0a4:	f107 0308 	add.w	r3, r7, #8
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b0ac:	f107 0308 	add.w	r3, r7, #8
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b0b4:	f107 0108 	add.w	r1, r7, #8
 800b0b8:	f04f 0200 	mov.w	r2, #0
 800b0bc:	f04f 0300 	mov.w	r3, #0
 800b0c0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b0c4:	f107 0108 	add.w	r1, r7, #8
 800b0c8:	f04f 0200 	mov.w	r2, #0
 800b0cc:	f04f 0300 	mov.w	r3, #0
 800b0d0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b0d4:	f107 0108 	add.w	r1, r7, #8
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	f04f 0300 	mov.w	r3, #0
 800b0e0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800b0e4:	463b      	mov	r3, r7
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7f5 fa18 	bl	8000524 <__aeabi_i2d>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	f107 0108 	add.w	r1, r7, #8
 800b0fc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b100:	463b      	mov	r3, r7
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	f7f5 fa0e 	bl	8000524 <__aeabi_i2d>
 800b108:	a347      	add	r3, pc, #284	; (adr r3, 800b228 <scaraKeyInit1+0x5d8>)
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f7f5 fa73 	bl	80005f8 <__aeabi_dmul>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	4610      	mov	r0, r2
 800b118:	4619      	mov	r1, r3
 800b11a:	a345      	add	r3, pc, #276	; (adr r3, 800b230 <scaraKeyInit1+0x5e0>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	f7f5 f8b4 	bl	800028c <__adddf3>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	f107 0108 	add.w	r1, r7, #8
 800b12c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b130:	e050      	b.n	800b1d4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800b132:	f107 0108 	add.w	r1, r7, #8
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b142:	f107 0308 	add.w	r3, r7, #8
 800b146:	2200      	movs	r2, #0
 800b148:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b14a:	f107 0308 	add.w	r3, r7, #8
 800b14e:	2200      	movs	r2, #0
 800b150:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b152:	f107 0108 	add.w	r1, r7, #8
 800b156:	f04f 0200 	mov.w	r2, #0
 800b15a:	f04f 0300 	mov.w	r3, #0
 800b15e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b162:	f107 0108 	add.w	r1, r7, #8
 800b166:	f04f 0200 	mov.w	r2, #0
 800b16a:	f04f 0300 	mov.w	r3, #0
 800b16e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b172:	f107 0108 	add.w	r1, r7, #8
 800b176:	f04f 0200 	mov.w	r2, #0
 800b17a:	f04f 0300 	mov.w	r3, #0
 800b17e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800b182:	463b      	mov	r3, r7
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	4613      	mov	r3, r2
 800b188:	079b      	lsls	r3, r3, #30
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	1a9b      	subs	r3, r3, r2
 800b190:	4618      	mov	r0, r3
 800b192:	f7f5 f9c7 	bl	8000524 <__aeabi_i2d>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	f107 0108 	add.w	r1, r7, #8
 800b19e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b1a2:	463b      	mov	r3, r7
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f7f5 f9bd 	bl	8000524 <__aeabi_i2d>
 800b1aa:	a31f      	add	r3, pc, #124	; (adr r3, 800b228 <scaraKeyInit1+0x5d8>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	f7f5 fa22 	bl	80005f8 <__aeabi_dmul>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	a31c      	add	r3, pc, #112	; (adr r3, 800b230 <scaraKeyInit1+0x5e0>)
 800b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c2:	f7f5 f863 	bl	800028c <__adddf3>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	f107 0108 	add.w	r1, r7, #8
 800b1ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b1d2:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800b1d4:	f107 0408 	add.w	r4, r7, #8
 800b1d8:	4668      	mov	r0, sp
 800b1da:	f104 0310 	add.w	r3, r4, #16
 800b1de:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	f00b f84c 	bl	8016280 <memcpy>
 800b1e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b1ec:	f7fb fdf8 	bl	8006de0 <scaraInitDuty>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800b1f6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10b      	bne.n	800b216 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800b1fe:	f7ff fb13 	bl	800a828 <scaraTestDuty>
 800b202:	4603      	mov	r3, r0
 800b204:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800b208:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <scaraKeyInit1+0x5cc>
			return status;
 800b210:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b214:	e002      	b.n	800b21c <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800b216:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b21a:	e7ff      	b.n	800b21c <scaraKeyInit1+0x5cc>
	}
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800b222:	46bd      	mov	sp, r7
 800b224:	bd90      	pop	{r4, r7, pc}
 800b226:	bf00      	nop
 800b228:	9999999a 	.word	0x9999999a
 800b22c:	3fa99999 	.word	0x3fa99999
 800b230:	9999999a 	.word	0x9999999a
 800b234:	3fe99999 	.word	0x3fe99999

0800b238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b23e:	2300      	movs	r3, #0
 800b240:	607b      	str	r3, [r7, #4]
 800b242:	4b12      	ldr	r3, [pc, #72]	; (800b28c <HAL_MspInit+0x54>)
 800b244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b246:	4a11      	ldr	r2, [pc, #68]	; (800b28c <HAL_MspInit+0x54>)
 800b248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b24c:	6453      	str	r3, [r2, #68]	; 0x44
 800b24e:	4b0f      	ldr	r3, [pc, #60]	; (800b28c <HAL_MspInit+0x54>)
 800b250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b256:	607b      	str	r3, [r7, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b25a:	2300      	movs	r3, #0
 800b25c:	603b      	str	r3, [r7, #0]
 800b25e:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <HAL_MspInit+0x54>)
 800b260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b262:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <HAL_MspInit+0x54>)
 800b264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b268:	6413      	str	r3, [r2, #64]	; 0x40
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <HAL_MspInit+0x54>)
 800b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b276:	2200      	movs	r2, #0
 800b278:	210f      	movs	r1, #15
 800b27a:	f06f 0001 	mvn.w	r0, #1
 800b27e:	f000 fc79 	bl	800bb74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b282:	bf00      	nop
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	40023800 	.word	0x40023800

0800b290 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08c      	sub	sp, #48	; 0x30
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	6879      	ldr	r1, [r7, #4]
 800b2a4:	2036      	movs	r0, #54	; 0x36
 800b2a6:	f000 fc65 	bl	800bb74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b2aa:	2036      	movs	r0, #54	; 0x36
 800b2ac:	f000 fc7e 	bl	800bbac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	4b1f      	ldr	r3, [pc, #124]	; (800b334 <HAL_InitTick+0xa4>)
 800b2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b8:	4a1e      	ldr	r2, [pc, #120]	; (800b334 <HAL_InitTick+0xa4>)
 800b2ba:	f043 0310 	orr.w	r3, r3, #16
 800b2be:	6413      	str	r3, [r2, #64]	; 0x40
 800b2c0:	4b1c      	ldr	r3, [pc, #112]	; (800b334 <HAL_InitTick+0xa4>)
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	f003 0310 	and.w	r3, r3, #16
 800b2c8:	60fb      	str	r3, [r7, #12]
 800b2ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b2cc:	f107 0210 	add.w	r2, r7, #16
 800b2d0:	f107 0314 	add.w	r3, r7, #20
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f003 f812 	bl	800e300 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b2dc:	f002 ffe8 	bl	800e2b0 <HAL_RCC_GetPCLK1Freq>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	4a13      	ldr	r2, [pc, #76]	; (800b338 <HAL_InitTick+0xa8>)
 800b2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ee:	0c9b      	lsrs	r3, r3, #18
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b2f4:	4b11      	ldr	r3, [pc, #68]	; (800b33c <HAL_InitTick+0xac>)
 800b2f6:	4a12      	ldr	r2, [pc, #72]	; (800b340 <HAL_InitTick+0xb0>)
 800b2f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b2fa:	4b10      	ldr	r3, [pc, #64]	; (800b33c <HAL_InitTick+0xac>)
 800b2fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b300:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b302:	4a0e      	ldr	r2, [pc, #56]	; (800b33c <HAL_InitTick+0xac>)
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b308:	4b0c      	ldr	r3, [pc, #48]	; (800b33c <HAL_InitTick+0xac>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b30e:	4b0b      	ldr	r3, [pc, #44]	; (800b33c <HAL_InitTick+0xac>)
 800b310:	2200      	movs	r2, #0
 800b312:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b314:	4809      	ldr	r0, [pc, #36]	; (800b33c <HAL_InitTick+0xac>)
 800b316:	f003 f825 	bl	800e364 <HAL_TIM_Base_Init>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d104      	bne.n	800b32a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b320:	4806      	ldr	r0, [pc, #24]	; (800b33c <HAL_InitTick+0xac>)
 800b322:	f003 f86e 	bl	800e402 <HAL_TIM_Base_Start_IT>
 800b326:	4603      	mov	r3, r0
 800b328:	e000      	b.n	800b32c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3730      	adds	r7, #48	; 0x30
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	40023800 	.word	0x40023800
 800b338:	431bde83 	.word	0x431bde83
 800b33c:	20010d40 	.word	0x20010d40
 800b340:	40001000 	.word	0x40001000

0800b344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b348:	bf00      	nop
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
	...

0800b354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b358:	2162      	movs	r1, #98	; 0x62
 800b35a:	4802      	ldr	r0, [pc, #8]	; (800b364 <HardFault_Handler+0x10>)
 800b35c:	f7f7 f914 	bl	8002588 <LOG_REPORT>
 800b360:	e7fa      	b.n	800b358 <HardFault_Handler+0x4>
 800b362:	bf00      	nop
 800b364:	0801c770 	.word	0x0801c770

0800b368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b36c:	2172      	movs	r1, #114	; 0x72
 800b36e:	4802      	ldr	r0, [pc, #8]	; (800b378 <MemManage_Handler+0x10>)
 800b370:	f7f7 f90a 	bl	8002588 <LOG_REPORT>
 800b374:	e7fa      	b.n	800b36c <MemManage_Handler+0x4>
 800b376:	bf00      	nop
 800b378:	0801c788 	.word	0x0801c788

0800b37c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b380:	2182      	movs	r1, #130	; 0x82
 800b382:	4802      	ldr	r0, [pc, #8]	; (800b38c <BusFault_Handler+0x10>)
 800b384:	f7f7 f900 	bl	8002588 <LOG_REPORT>
 800b388:	e7fa      	b.n	800b380 <BusFault_Handler+0x4>
 800b38a:	bf00      	nop
 800b38c:	0801c79c 	.word	0x0801c79c

0800b390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b394:	e7fe      	b.n	800b394 <UsageFault_Handler+0x4>

0800b396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b396:	b480      	push	{r7}
 800b398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b39a:	bf00      	nop
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b3a8:	4802      	ldr	r0, [pc, #8]	; (800b3b4 <DMA1_Stream4_IRQHandler+0x10>)
 800b3aa:	f000 fd35 	bl	800be18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b3ae:	bf00      	nop
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20010e40 	.word	0x20010e40

0800b3b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b3bc:	4802      	ldr	r0, [pc, #8]	; (800b3c8 <UART4_IRQHandler+0x10>)
 800b3be:	f003 fcbd 	bl	800ed3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b3c2:	bf00      	nop
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20010e00 	.word	0x20010e00

0800b3cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b3d0:	4802      	ldr	r0, [pc, #8]	; (800b3dc <TIM6_DAC_IRQHandler+0x10>)
 800b3d2:	f003 f83a 	bl	800e44a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b3d6:	bf00      	nop
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20010d40 	.word	0x20010d40

0800b3e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b3e4:	4b05      	ldr	r3, [pc, #20]	; (800b3fc <TIM7_IRQHandler+0x1c>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f007 fbba 	bl	8012b64 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b3f0:	4803      	ldr	r0, [pc, #12]	; (800b400 <TIM7_IRQHandler+0x20>)
 800b3f2:	f003 f82a 	bl	800e44a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b3f6:	bf00      	nop
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	2000fe74 	.word	0x2000fe74
 800b400:	20010dc0 	.word	0x20010dc0

0800b404 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b408:	4802      	ldr	r0, [pc, #8]	; (800b414 <OTG_FS_IRQHandler+0x10>)
 800b40a:	f001 fad9 	bl	800c9c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b40e:	bf00      	nop
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	2001177c 	.word	0x2001177c

0800b418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b418:	b480      	push	{r7}
 800b41a:	af00      	add	r7, sp, #0
	return 1;
 800b41c:	2301      	movs	r3, #1
}
 800b41e:	4618      	mov	r0, r3
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <_kill>:

int _kill(int pid, int sig)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b432:	f00a feeb 	bl	801620c <__errno>
 800b436:	4603      	mov	r3, r0
 800b438:	2216      	movs	r2, #22
 800b43a:	601a      	str	r2, [r3, #0]
	return -1;
 800b43c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <_exit>:

void _exit (int status)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b450:	f04f 31ff 	mov.w	r1, #4294967295
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff ffe7 	bl	800b428 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b45a:	e7fe      	b.n	800b45a <_exit+0x12>

0800b45c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b468:	2300      	movs	r3, #0
 800b46a:	617b      	str	r3, [r7, #20]
 800b46c:	e00a      	b.n	800b484 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b46e:	f3af 8000 	nop.w
 800b472:	4601      	mov	r1, r0
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	60ba      	str	r2, [r7, #8]
 800b47a:	b2ca      	uxtb	r2, r1
 800b47c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	3301      	adds	r3, #1
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	429a      	cmp	r2, r3
 800b48a:	dbf0      	blt.n	800b46e <_read+0x12>
	}

return len;
 800b48c:	687b      	ldr	r3, [r7, #4]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]
 800b4a6:	e009      	b.n	800b4bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	60ba      	str	r2, [r7, #8]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	617b      	str	r3, [r7, #20]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	dbf1      	blt.n	800b4a8 <_write+0x12>
	}
	return len;
 800b4c4:	687b      	ldr	r3, [r7, #4]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <_close>:

int _close(int file)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
	return -1;
 800b4d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b4f6:	605a      	str	r2, [r3, #4]
	return 0;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <_isatty>:

int _isatty(int file)
{
 800b506:	b480      	push	{r7}
 800b508:	b083      	sub	sp, #12
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
	return 1;
 800b50e:	2301      	movs	r3, #1
}
 800b510:	4618      	mov	r0, r3
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
	return 0;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
	...

0800b538 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b540:	4b11      	ldr	r3, [pc, #68]	; (800b588 <_sbrk+0x50>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <_sbrk+0x16>
		heap_end = &end;
 800b548:	4b0f      	ldr	r3, [pc, #60]	; (800b588 <_sbrk+0x50>)
 800b54a:	4a10      	ldr	r2, [pc, #64]	; (800b58c <_sbrk+0x54>)
 800b54c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b54e:	4b0e      	ldr	r3, [pc, #56]	; (800b588 <_sbrk+0x50>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b554:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <_sbrk+0x50>)
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4413      	add	r3, r2
 800b55c:	466a      	mov	r2, sp
 800b55e:	4293      	cmp	r3, r2
 800b560:	d907      	bls.n	800b572 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b562:	f00a fe53 	bl	801620c <__errno>
 800b566:	4603      	mov	r3, r0
 800b568:	220c      	movs	r2, #12
 800b56a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b56c:	f04f 33ff 	mov.w	r3, #4294967295
 800b570:	e006      	b.n	800b580 <_sbrk+0x48>
	}

	heap_end += incr;
 800b572:	4b05      	ldr	r3, [pc, #20]	; (800b588 <_sbrk+0x50>)
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4413      	add	r3, r2
 800b57a:	4a03      	ldr	r2, [pc, #12]	; (800b588 <_sbrk+0x50>)
 800b57c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b57e:	68fb      	ldr	r3, [r7, #12]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	20004864 	.word	0x20004864
 800b58c:	20011b98 	.word	0x20011b98

0800b590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b590:	b480      	push	{r7}
 800b592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b594:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <SystemInit+0x28>)
 800b596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b59a:	4a07      	ldr	r2, [pc, #28]	; (800b5b8 <SystemInit+0x28>)
 800b59c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b5a4:	4b04      	ldr	r3, [pc, #16]	; (800b5b8 <SystemInit+0x28>)
 800b5a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b5aa:	609a      	str	r2, [r3, #8]
#endif
}
 800b5ac:	bf00      	nop
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	e000ed00 	.word	0xe000ed00

0800b5bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b5c2:	f107 0308 	add.w	r3, r7, #8
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	605a      	str	r2, [r3, #4]
 800b5cc:	609a      	str	r2, [r3, #8]
 800b5ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5d0:	463b      	mov	r3, r7
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b5d8:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <MX_TIM2_Init+0x98>)
 800b5da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b5de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b5e0:	4b1c      	ldr	r3, [pc, #112]	; (800b654 <MX_TIM2_Init+0x98>)
 800b5e2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b5e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <MX_TIM2_Init+0x98>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b5ee:	4b19      	ldr	r3, [pc, #100]	; (800b654 <MX_TIM2_Init+0x98>)
 800b5f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b5f6:	4b17      	ldr	r3, [pc, #92]	; (800b654 <MX_TIM2_Init+0x98>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5fc:	4b15      	ldr	r3, [pc, #84]	; (800b654 <MX_TIM2_Init+0x98>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b602:	4814      	ldr	r0, [pc, #80]	; (800b654 <MX_TIM2_Init+0x98>)
 800b604:	f002 feae 	bl	800e364 <HAL_TIM_Base_Init>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b60e:	f7fa fb4d 	bl	8005cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b616:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b618:	f107 0308 	add.w	r3, r7, #8
 800b61c:	4619      	mov	r1, r3
 800b61e:	480d      	ldr	r0, [pc, #52]	; (800b654 <MX_TIM2_Init+0x98>)
 800b620:	f003 f81b 	bl	800e65a <HAL_TIM_ConfigClockSource>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b62a:	f7fa fb3f 	bl	8005cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b62e:	2300      	movs	r3, #0
 800b630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b632:	2300      	movs	r3, #0
 800b634:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b636:	463b      	mov	r3, r7
 800b638:	4619      	mov	r1, r3
 800b63a:	4806      	ldr	r0, [pc, #24]	; (800b654 <MX_TIM2_Init+0x98>)
 800b63c:	f003 fa34 	bl	800eaa8 <HAL_TIMEx_MasterConfigSynchronization>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b646:	f7fa fb31 	bl	8005cac <Error_Handler>
  }

}
 800b64a:	bf00      	nop
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20010d80 	.word	0x20010d80

0800b658 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b65e:	463b      	mov	r3, r7
 800b660:	2200      	movs	r2, #0
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b666:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <MX_TIM7_Init+0x64>)
 800b668:	4a15      	ldr	r2, [pc, #84]	; (800b6c0 <MX_TIM7_Init+0x68>)
 800b66a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b66c:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <MX_TIM7_Init+0x64>)
 800b66e:	2253      	movs	r2, #83	; 0x53
 800b670:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b672:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <MX_TIM7_Init+0x64>)
 800b674:	2200      	movs	r2, #0
 800b676:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b678:	4b10      	ldr	r3, [pc, #64]	; (800b6bc <MX_TIM7_Init+0x64>)
 800b67a:	f242 720f 	movw	r2, #9999	; 0x270f
 800b67e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b680:	4b0e      	ldr	r3, [pc, #56]	; (800b6bc <MX_TIM7_Init+0x64>)
 800b682:	2200      	movs	r2, #0
 800b684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b686:	480d      	ldr	r0, [pc, #52]	; (800b6bc <MX_TIM7_Init+0x64>)
 800b688:	f002 fe6c 	bl	800e364 <HAL_TIM_Base_Init>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b692:	f7fa fb0b 	bl	8005cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b696:	2300      	movs	r3, #0
 800b698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b69e:	463b      	mov	r3, r7
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4806      	ldr	r0, [pc, #24]	; (800b6bc <MX_TIM7_Init+0x64>)
 800b6a4:	f003 fa00 	bl	800eaa8 <HAL_TIMEx_MasterConfigSynchronization>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b6ae:	f7fa fafd 	bl	8005cac <Error_Handler>
  }

}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20010dc0 	.word	0x20010dc0
 800b6c0:	40001400 	.word	0x40001400

0800b6c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d4:	d10e      	bne.n	800b6f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
 800b6da:	4b16      	ldr	r3, [pc, #88]	; (800b734 <HAL_TIM_Base_MspInit+0x70>)
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6de:	4a15      	ldr	r2, [pc, #84]	; (800b734 <HAL_TIM_Base_MspInit+0x70>)
 800b6e0:	f043 0301 	orr.w	r3, r3, #1
 800b6e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b6e6:	4b13      	ldr	r3, [pc, #76]	; (800b734 <HAL_TIM_Base_MspInit+0x70>)
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	60fb      	str	r3, [r7, #12]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b6f2:	e01a      	b.n	800b72a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a0f      	ldr	r2, [pc, #60]	; (800b738 <HAL_TIM_Base_MspInit+0x74>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d115      	bne.n	800b72a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b6fe:	2300      	movs	r3, #0
 800b700:	60bb      	str	r3, [r7, #8]
 800b702:	4b0c      	ldr	r3, [pc, #48]	; (800b734 <HAL_TIM_Base_MspInit+0x70>)
 800b704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b706:	4a0b      	ldr	r2, [pc, #44]	; (800b734 <HAL_TIM_Base_MspInit+0x70>)
 800b708:	f043 0320 	orr.w	r3, r3, #32
 800b70c:	6413      	str	r3, [r2, #64]	; 0x40
 800b70e:	4b09      	ldr	r3, [pc, #36]	; (800b734 <HAL_TIM_Base_MspInit+0x70>)
 800b710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	60bb      	str	r3, [r7, #8]
 800b718:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b71a:	2200      	movs	r2, #0
 800b71c:	2105      	movs	r1, #5
 800b71e:	2037      	movs	r0, #55	; 0x37
 800b720:	f000 fa28 	bl	800bb74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b724:	2037      	movs	r0, #55	; 0x37
 800b726:	f000 fa41 	bl	800bbac <HAL_NVIC_EnableIRQ>
}
 800b72a:	bf00      	nop
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	40023800 	.word	0x40023800
 800b738:	40001400 	.word	0x40001400

0800b73c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b740:	4b11      	ldr	r3, [pc, #68]	; (800b788 <MX_UART4_Init+0x4c>)
 800b742:	4a12      	ldr	r2, [pc, #72]	; (800b78c <MX_UART4_Init+0x50>)
 800b744:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b746:	4b10      	ldr	r3, [pc, #64]	; (800b788 <MX_UART4_Init+0x4c>)
 800b748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b74c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b74e:	4b0e      	ldr	r3, [pc, #56]	; (800b788 <MX_UART4_Init+0x4c>)
 800b750:	2200      	movs	r2, #0
 800b752:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b754:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <MX_UART4_Init+0x4c>)
 800b756:	2200      	movs	r2, #0
 800b758:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b75a:	4b0b      	ldr	r3, [pc, #44]	; (800b788 <MX_UART4_Init+0x4c>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b760:	4b09      	ldr	r3, [pc, #36]	; (800b788 <MX_UART4_Init+0x4c>)
 800b762:	220c      	movs	r2, #12
 800b764:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b766:	4b08      	ldr	r3, [pc, #32]	; (800b788 <MX_UART4_Init+0x4c>)
 800b768:	2200      	movs	r2, #0
 800b76a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b76c:	4b06      	ldr	r3, [pc, #24]	; (800b788 <MX_UART4_Init+0x4c>)
 800b76e:	2200      	movs	r2, #0
 800b770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b772:	4805      	ldr	r0, [pc, #20]	; (800b788 <MX_UART4_Init+0x4c>)
 800b774:	f003 fa28 	bl	800ebc8 <HAL_UART_Init>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b77e:	f7fa fa95 	bl	8005cac <Error_Handler>
  }

}
 800b782:	bf00      	nop
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	20010e00 	.word	0x20010e00
 800b78c:	40004c00 	.word	0x40004c00

0800b790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08a      	sub	sp, #40	; 0x28
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b798:	f107 0314 	add.w	r3, r7, #20
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	605a      	str	r2, [r3, #4]
 800b7a2:	609a      	str	r2, [r3, #8]
 800b7a4:	60da      	str	r2, [r3, #12]
 800b7a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a34      	ldr	r2, [pc, #208]	; (800b880 <HAL_UART_MspInit+0xf0>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d161      	bne.n	800b876 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	613b      	str	r3, [r7, #16]
 800b7b6:	4b33      	ldr	r3, [pc, #204]	; (800b884 <HAL_UART_MspInit+0xf4>)
 800b7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ba:	4a32      	ldr	r2, [pc, #200]	; (800b884 <HAL_UART_MspInit+0xf4>)
 800b7bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7c0:	6413      	str	r3, [r2, #64]	; 0x40
 800b7c2:	4b30      	ldr	r3, [pc, #192]	; (800b884 <HAL_UART_MspInit+0xf4>)
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7ca:	613b      	str	r3, [r7, #16]
 800b7cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	4b2c      	ldr	r3, [pc, #176]	; (800b884 <HAL_UART_MspInit+0xf4>)
 800b7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d6:	4a2b      	ldr	r2, [pc, #172]	; (800b884 <HAL_UART_MspInit+0xf4>)
 800b7d8:	f043 0301 	orr.w	r3, r3, #1
 800b7dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b7de:	4b29      	ldr	r3, [pc, #164]	; (800b884 <HAL_UART_MspInit+0xf4>)
 800b7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e2:	f003 0301 	and.w	r3, r3, #1
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b7fa:	2308      	movs	r3, #8
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7fe:	f107 0314 	add.w	r3, r7, #20
 800b802:	4619      	mov	r1, r3
 800b804:	4820      	ldr	r0, [pc, #128]	; (800b888 <HAL_UART_MspInit+0xf8>)
 800b806:	f000 fd7f 	bl	800c308 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b80a:	4b20      	ldr	r3, [pc, #128]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b80c:	4a20      	ldr	r2, [pc, #128]	; (800b890 <HAL_UART_MspInit+0x100>)
 800b80e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b810:	4b1e      	ldr	r3, [pc, #120]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b816:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b818:	4b1c      	ldr	r3, [pc, #112]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b81a:	2240      	movs	r2, #64	; 0x40
 800b81c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b81e:	4b1b      	ldr	r3, [pc, #108]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b820:	2200      	movs	r2, #0
 800b822:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b824:	4b19      	ldr	r3, [pc, #100]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b82a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b82c:	4b17      	ldr	r3, [pc, #92]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b82e:	2200      	movs	r2, #0
 800b830:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b832:	4b16      	ldr	r3, [pc, #88]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b834:	2200      	movs	r2, #0
 800b836:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b838:	4b14      	ldr	r3, [pc, #80]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b83e:	4b13      	ldr	r3, [pc, #76]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b840:	2200      	movs	r2, #0
 800b842:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b844:	4b11      	ldr	r3, [pc, #68]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b846:	2200      	movs	r2, #0
 800b848:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b84a:	4810      	ldr	r0, [pc, #64]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b84c:	f000 f9bc 	bl	800bbc8 <HAL_DMA_Init>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b856:	f7fa fa29 	bl	8005cac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a0b      	ldr	r2, [pc, #44]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b85e:	631a      	str	r2, [r3, #48]	; 0x30
 800b860:	4a0a      	ldr	r2, [pc, #40]	; (800b88c <HAL_UART_MspInit+0xfc>)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b866:	2200      	movs	r2, #0
 800b868:	2105      	movs	r1, #5
 800b86a:	2034      	movs	r0, #52	; 0x34
 800b86c:	f000 f982 	bl	800bb74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b870:	2034      	movs	r0, #52	; 0x34
 800b872:	f000 f99b 	bl	800bbac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b876:	bf00      	nop
 800b878:	3728      	adds	r7, #40	; 0x28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	40004c00 	.word	0x40004c00
 800b884:	40023800 	.word	0x40023800
 800b888:	40020000 	.word	0x40020000
 800b88c:	20010e40 	.word	0x20010e40
 800b890:	40026070 	.word	0x40026070

0800b894 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <HAL_UART_TxCpltCallback+0x40>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d112      	bne.n	800b8cc <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b8a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8aa:	490b      	ldr	r1, [pc, #44]	; (800b8d8 <HAL_UART_TxCpltCallback+0x44>)
 800b8ac:	480b      	ldr	r0, [pc, #44]	; (800b8dc <HAL_UART_TxCpltCallback+0x48>)
 800b8ae:	f7fa fab7 	bl	8005e20 <ringBuff_PopArray>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b8b6:	89fb      	ldrh	r3, [r7, #14]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d006      	beq.n	800b8ca <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b8bc:	89fb      	ldrh	r3, [r7, #14]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	4905      	ldr	r1, [pc, #20]	; (800b8d8 <HAL_UART_TxCpltCallback+0x44>)
 800b8c2:	4807      	ldr	r0, [pc, #28]	; (800b8e0 <HAL_UART_TxCpltCallback+0x4c>)
 800b8c4:	f003 f9ce 	bl	800ec64 <HAL_UART_Transmit_DMA>
 800b8c8:	e000      	b.n	800b8cc <HAL_UART_TxCpltCallback+0x38>
			return;
 800b8ca:	bf00      	nop
	}
}
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	40004c00 	.word	0x40004c00
 800b8d8:	2000fd70 	.word	0x2000fd70
 800b8dc:	20002074 	.word	0x20002074
 800b8e0:	20010e00 	.word	0x20010e00

0800b8e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b8e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b91c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b8e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b8ea:	e003      	b.n	800b8f4 <LoopCopyDataInit>

0800b8ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b8ec:	4b0c      	ldr	r3, [pc, #48]	; (800b920 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b8ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b8f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b8f2:	3104      	adds	r1, #4

0800b8f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b8f4:	480b      	ldr	r0, [pc, #44]	; (800b924 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b8f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b8fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b8fc:	d3f6      	bcc.n	800b8ec <CopyDataInit>
  ldr  r2, =_sbss
 800b8fe:	4a0b      	ldr	r2, [pc, #44]	; (800b92c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b900:	e002      	b.n	800b908 <LoopFillZerobss>

0800b902 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b902:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b904:	f842 3b04 	str.w	r3, [r2], #4

0800b908 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b908:	4b09      	ldr	r3, [pc, #36]	; (800b930 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b90a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b90c:	d3f9      	bcc.n	800b902 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b90e:	f7ff fe3f 	bl	800b590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b912:	f00a fc81 	bl	8016218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b916:	f7fa f91d 	bl	8005b54 <main>
  bx  lr    
 800b91a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b91c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b920:	0801cf30 	.word	0x0801cf30
  ldr  r0, =_sdata
 800b924:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b928:	200043e8 	.word	0x200043e8
  ldr  r2, =_sbss
 800b92c:	200043e8 	.word	0x200043e8
  ldr  r3, = _ebss
 800b930:	20011b94 	.word	0x20011b94

0800b934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b934:	e7fe      	b.n	800b934 <ADC_IRQHandler>
	...

0800b938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b93c:	4b0e      	ldr	r3, [pc, #56]	; (800b978 <HAL_Init+0x40>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a0d      	ldr	r2, [pc, #52]	; (800b978 <HAL_Init+0x40>)
 800b942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b948:	4b0b      	ldr	r3, [pc, #44]	; (800b978 <HAL_Init+0x40>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a0a      	ldr	r2, [pc, #40]	; (800b978 <HAL_Init+0x40>)
 800b94e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b954:	4b08      	ldr	r3, [pc, #32]	; (800b978 <HAL_Init+0x40>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a07      	ldr	r2, [pc, #28]	; (800b978 <HAL_Init+0x40>)
 800b95a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b95e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b960:	2003      	movs	r0, #3
 800b962:	f000 f8fc 	bl	800bb5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b966:	2000      	movs	r0, #0
 800b968:	f7ff fc92 	bl	800b290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b96c:	f7ff fc64 	bl	800b238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	40023c00 	.word	0x40023c00

0800b97c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b980:	4b06      	ldr	r3, [pc, #24]	; (800b99c <HAL_IncTick+0x20>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	461a      	mov	r2, r3
 800b986:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <HAL_IncTick+0x24>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4413      	add	r3, r2
 800b98c:	4a04      	ldr	r2, [pc, #16]	; (800b9a0 <HAL_IncTick+0x24>)
 800b98e:	6013      	str	r3, [r2, #0]
}
 800b990:	bf00      	nop
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	20004094 	.word	0x20004094
 800b9a0:	20010ea0 	.word	0x20010ea0

0800b9a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	af00      	add	r7, sp, #0
  return uwTick;
 800b9a8:	4b03      	ldr	r3, [pc, #12]	; (800b9b8 <HAL_GetTick+0x14>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	20010ea0 	.word	0x20010ea0

0800b9bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b9c4:	f7ff ffee 	bl	800b9a4 <HAL_GetTick>
 800b9c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d4:	d005      	beq.n	800b9e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b9d6:	4b0a      	ldr	r3, [pc, #40]	; (800ba00 <HAL_Delay+0x44>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4413      	add	r3, r2
 800b9e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b9e2:	bf00      	nop
 800b9e4:	f7ff ffde 	bl	800b9a4 <HAL_GetTick>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d8f7      	bhi.n	800b9e4 <HAL_Delay+0x28>
  {
  }
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20004094 	.word	0x20004094

0800ba04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f003 0307 	and.w	r3, r3, #7
 800ba12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ba14:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <__NVIC_SetPriorityGrouping+0x44>)
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ba20:	4013      	ands	r3, r2
 800ba22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ba2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ba30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ba36:	4a04      	ldr	r2, [pc, #16]	; (800ba48 <__NVIC_SetPriorityGrouping+0x44>)
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	60d3      	str	r3, [r2, #12]
}
 800ba3c:	bf00      	nop
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	e000ed00 	.word	0xe000ed00

0800ba4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ba50:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <__NVIC_GetPriorityGrouping+0x18>)
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	0a1b      	lsrs	r3, r3, #8
 800ba56:	f003 0307 	and.w	r3, r3, #7
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	e000ed00 	.word	0xe000ed00

0800ba68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	db0b      	blt.n	800ba92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ba7a:	79fb      	ldrb	r3, [r7, #7]
 800ba7c:	f003 021f 	and.w	r2, r3, #31
 800ba80:	4907      	ldr	r1, [pc, #28]	; (800baa0 <__NVIC_EnableIRQ+0x38>)
 800ba82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba86:	095b      	lsrs	r3, r3, #5
 800ba88:	2001      	movs	r0, #1
 800ba8a:	fa00 f202 	lsl.w	r2, r0, r2
 800ba8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ba92:	bf00      	nop
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	e000e100 	.word	0xe000e100

0800baa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	db0a      	blt.n	800bace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	b2da      	uxtb	r2, r3
 800babc:	490c      	ldr	r1, [pc, #48]	; (800baf0 <__NVIC_SetPriority+0x4c>)
 800babe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bac2:	0112      	lsls	r2, r2, #4
 800bac4:	b2d2      	uxtb	r2, r2
 800bac6:	440b      	add	r3, r1
 800bac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bacc:	e00a      	b.n	800bae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	4908      	ldr	r1, [pc, #32]	; (800baf4 <__NVIC_SetPriority+0x50>)
 800bad4:	79fb      	ldrb	r3, [r7, #7]
 800bad6:	f003 030f 	and.w	r3, r3, #15
 800bada:	3b04      	subs	r3, #4
 800badc:	0112      	lsls	r2, r2, #4
 800bade:	b2d2      	uxtb	r2, r2
 800bae0:	440b      	add	r3, r1
 800bae2:	761a      	strb	r2, [r3, #24]
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	e000e100 	.word	0xe000e100
 800baf4:	e000ed00 	.word	0xe000ed00

0800baf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b089      	sub	sp, #36	; 0x24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	f1c3 0307 	rsb	r3, r3, #7
 800bb12:	2b04      	cmp	r3, #4
 800bb14:	bf28      	it	cs
 800bb16:	2304      	movcs	r3, #4
 800bb18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	2b06      	cmp	r3, #6
 800bb20:	d902      	bls.n	800bb28 <NVIC_EncodePriority+0x30>
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	3b03      	subs	r3, #3
 800bb26:	e000      	b.n	800bb2a <NVIC_EncodePriority+0x32>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	fa02 f303 	lsl.w	r3, r2, r3
 800bb36:	43da      	mvns	r2, r3
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	401a      	ands	r2, r3
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bb40:	f04f 31ff 	mov.w	r1, #4294967295
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	fa01 f303 	lsl.w	r3, r1, r3
 800bb4a:	43d9      	mvns	r1, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bb50:	4313      	orrs	r3, r2
         );
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3724      	adds	r7, #36	; 0x24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff ff4c 	bl	800ba04 <__NVIC_SetPriorityGrouping>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bb82:	2300      	movs	r3, #0
 800bb84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bb86:	f7ff ff61 	bl	800ba4c <__NVIC_GetPriorityGrouping>
 800bb8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	68b9      	ldr	r1, [r7, #8]
 800bb90:	6978      	ldr	r0, [r7, #20]
 800bb92:	f7ff ffb1 	bl	800baf8 <NVIC_EncodePriority>
 800bb96:	4602      	mov	r2, r0
 800bb98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff ff80 	bl	800baa4 <__NVIC_SetPriority>
}
 800bba4:	bf00      	nop
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bbb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff ff54 	bl	800ba68 <__NVIC_EnableIRQ>
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bbd4:	f7ff fee6 	bl	800b9a4 <HAL_GetTick>
 800bbd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e099      	b.n	800bd18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f022 0201 	bic.w	r2, r2, #1
 800bc02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc04:	e00f      	b.n	800bc26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bc06:	f7ff fecd 	bl	800b9a4 <HAL_GetTick>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	2b05      	cmp	r3, #5
 800bc12:	d908      	bls.n	800bc26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2220      	movs	r2, #32
 800bc18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2203      	movs	r2, #3
 800bc1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e078      	b.n	800bd18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1e8      	bne.n	800bc06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	4b38      	ldr	r3, [pc, #224]	; (800bd20 <HAL_DMA_Init+0x158>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bc52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bc5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bc6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b04      	cmp	r3, #4
 800bc7e:	d107      	bne.n	800bc90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	f023 0307 	bic.w	r3, r3, #7
 800bca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d117      	bne.n	800bcea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00e      	beq.n	800bcea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fa9f 	bl	800c210 <DMA_CheckFifoParam>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d008      	beq.n	800bcea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2240      	movs	r2, #64	; 0x40
 800bcdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bce6:	2301      	movs	r3, #1
 800bce8:	e016      	b.n	800bd18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fa56 	bl	800c1a4 <DMA_CalcBaseAndBitshift>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd00:	223f      	movs	r2, #63	; 0x3f
 800bd02:	409a      	lsls	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	f010803f 	.word	0xf010803f

0800bd24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d101      	bne.n	800bd4a <HAL_DMA_Start_IT+0x26>
 800bd46:	2302      	movs	r3, #2
 800bd48:	e040      	b.n	800bdcc <HAL_DMA_Start_IT+0xa8>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d12f      	bne.n	800bdbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2202      	movs	r2, #2
 800bd62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	68b9      	ldr	r1, [r7, #8]
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 f9e8 	bl	800c148 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd7c:	223f      	movs	r2, #63	; 0x3f
 800bd7e:	409a      	lsls	r2, r3
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0216 	orr.w	r2, r2, #22
 800bd92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d007      	beq.n	800bdac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f042 0208 	orr.w	r2, r2, #8
 800bdaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f042 0201 	orr.w	r2, r2, #1
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	e005      	b.n	800bdca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bdc6:	2302      	movs	r3, #2
 800bdc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bdca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d004      	beq.n	800bdf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2280      	movs	r2, #128	; 0x80
 800bdec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e00c      	b.n	800be0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2205      	movs	r2, #5
 800bdf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f022 0201 	bic.w	r2, r2, #1
 800be08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800be24:	4b92      	ldr	r3, [pc, #584]	; (800c070 <HAL_DMA_IRQHandler+0x258>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a92      	ldr	r2, [pc, #584]	; (800c074 <HAL_DMA_IRQHandler+0x25c>)
 800be2a:	fba2 2303 	umull	r2, r3, r2, r3
 800be2e:	0a9b      	lsrs	r3, r3, #10
 800be30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be42:	2208      	movs	r2, #8
 800be44:	409a      	lsls	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	4013      	ands	r3, r2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d01a      	beq.n	800be84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0304 	and.w	r3, r3, #4
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d013      	beq.n	800be84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f022 0204 	bic.w	r2, r2, #4
 800be6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be70:	2208      	movs	r2, #8
 800be72:	409a      	lsls	r2, r3
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7c:	f043 0201 	orr.w	r2, r3, #1
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be88:	2201      	movs	r2, #1
 800be8a:	409a      	lsls	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4013      	ands	r3, r2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d012      	beq.n	800beba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00b      	beq.n	800beba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bea6:	2201      	movs	r2, #1
 800bea8:	409a      	lsls	r2, r3
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb2:	f043 0202 	orr.w	r2, r3, #2
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bebe:	2204      	movs	r2, #4
 800bec0:	409a      	lsls	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	4013      	ands	r3, r2
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d012      	beq.n	800bef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0302 	and.w	r3, r3, #2
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00b      	beq.n	800bef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bedc:	2204      	movs	r2, #4
 800bede:	409a      	lsls	r2, r3
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee8:	f043 0204 	orr.w	r2, r3, #4
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bef4:	2210      	movs	r2, #16
 800bef6:	409a      	lsls	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4013      	ands	r3, r2
 800befc:	2b00      	cmp	r3, #0
 800befe:	d043      	beq.n	800bf88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 0308 	and.w	r3, r3, #8
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d03c      	beq.n	800bf88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf12:	2210      	movs	r2, #16
 800bf14:	409a      	lsls	r2, r3
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d018      	beq.n	800bf5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d108      	bne.n	800bf48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d024      	beq.n	800bf88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	4798      	blx	r3
 800bf46:	e01f      	b.n	800bf88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d01b      	beq.n	800bf88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	4798      	blx	r3
 800bf58:	e016      	b.n	800bf88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d107      	bne.n	800bf78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f022 0208 	bic.w	r2, r2, #8
 800bf76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d003      	beq.n	800bf88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	409a      	lsls	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4013      	ands	r3, r2
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 808e 	beq.w	800c0b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 0310 	and.w	r3, r3, #16
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 8086 	beq.w	800c0b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfae:	2220      	movs	r2, #32
 800bfb0:	409a      	lsls	r2, r3
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b05      	cmp	r3, #5
 800bfc0:	d136      	bne.n	800c030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f022 0216 	bic.w	r2, r2, #22
 800bfd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	695a      	ldr	r2, [r3, #20]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d103      	bne.n	800bff2 <HAL_DMA_IRQHandler+0x1da>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d007      	beq.n	800c002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f022 0208 	bic.w	r2, r2, #8
 800c000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c006:	223f      	movs	r2, #63	; 0x3f
 800c008:	409a      	lsls	r2, r3
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c022:	2b00      	cmp	r3, #0
 800c024:	d07d      	beq.n	800c122 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	4798      	blx	r3
        }
        return;
 800c02e:	e078      	b.n	800c122 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d01c      	beq.n	800c078 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d108      	bne.n	800c05e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c050:	2b00      	cmp	r3, #0
 800c052:	d030      	beq.n	800c0b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	4798      	blx	r3
 800c05c:	e02b      	b.n	800c0b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c062:	2b00      	cmp	r3, #0
 800c064:	d027      	beq.n	800c0b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	4798      	blx	r3
 800c06e:	e022      	b.n	800c0b6 <HAL_DMA_IRQHandler+0x29e>
 800c070:	2000408c 	.word	0x2000408c
 800c074:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10f      	bne.n	800c0a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f022 0210 	bic.w	r2, r2, #16
 800c094:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d032      	beq.n	800c124 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d022      	beq.n	800c110 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2205      	movs	r2, #5
 800c0ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f022 0201 	bic.w	r2, r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	60bb      	str	r3, [r7, #8]
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d307      	bcc.n	800c0fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f2      	bne.n	800c0e2 <HAL_DMA_IRQHandler+0x2ca>
 800c0fc:	e000      	b.n	800c100 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c0fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d005      	beq.n	800c124 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	4798      	blx	r3
 800c120:	e000      	b.n	800c124 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c122:	bf00      	nop
    }
  }
}
 800c124:	3718      	adds	r7, #24
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop

0800c12c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c13a:	b2db      	uxtb	r3, r3
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c164:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	2b40      	cmp	r3, #64	; 0x40
 800c174:	d108      	bne.n	800c188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c186:	e007      	b.n	800c198 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	60da      	str	r2, [r3, #12]
}
 800c198:	bf00      	nop
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	3b10      	subs	r3, #16
 800c1b4:	4a14      	ldr	r2, [pc, #80]	; (800c208 <DMA_CalcBaseAndBitshift+0x64>)
 800c1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ba:	091b      	lsrs	r3, r3, #4
 800c1bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c1be:	4a13      	ldr	r2, [pc, #76]	; (800c20c <DMA_CalcBaseAndBitshift+0x68>)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d909      	bls.n	800c1e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c1da:	f023 0303 	bic.w	r3, r3, #3
 800c1de:	1d1a      	adds	r2, r3, #4
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	659a      	str	r2, [r3, #88]	; 0x58
 800c1e4:	e007      	b.n	800c1f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c1ee:	f023 0303 	bic.w	r3, r3, #3
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	aaaaaaab 	.word	0xaaaaaaab
 800c20c:	0801c818 	.word	0x0801c818

0800c210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d11f      	bne.n	800c26a <DMA_CheckFifoParam+0x5a>
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	2b03      	cmp	r3, #3
 800c22e:	d856      	bhi.n	800c2de <DMA_CheckFifoParam+0xce>
 800c230:	a201      	add	r2, pc, #4	; (adr r2, 800c238 <DMA_CheckFifoParam+0x28>)
 800c232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c236:	bf00      	nop
 800c238:	0800c249 	.word	0x0800c249
 800c23c:	0800c25b 	.word	0x0800c25b
 800c240:	0800c249 	.word	0x0800c249
 800c244:	0800c2df 	.word	0x0800c2df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d046      	beq.n	800c2e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c258:	e043      	b.n	800c2e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c262:	d140      	bne.n	800c2e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c268:	e03d      	b.n	800c2e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c272:	d121      	bne.n	800c2b8 <DMA_CheckFifoParam+0xa8>
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2b03      	cmp	r3, #3
 800c278:	d837      	bhi.n	800c2ea <DMA_CheckFifoParam+0xda>
 800c27a:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <DMA_CheckFifoParam+0x70>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c291 	.word	0x0800c291
 800c284:	0800c297 	.word	0x0800c297
 800c288:	0800c291 	.word	0x0800c291
 800c28c:	0800c2a9 	.word	0x0800c2a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	73fb      	strb	r3, [r7, #15]
      break;
 800c294:	e030      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d025      	beq.n	800c2ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c2a6:	e022      	b.n	800c2ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c2b0:	d11f      	bne.n	800c2f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c2b6:	e01c      	b.n	800c2f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d903      	bls.n	800c2c6 <DMA_CheckFifoParam+0xb6>
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d003      	beq.n	800c2cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c2c4:	e018      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c2ca:	e015      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00e      	beq.n	800c2f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	73fb      	strb	r3, [r7, #15]
      break;
 800c2dc:	e00b      	b.n	800c2f6 <DMA_CheckFifoParam+0xe6>
      break;
 800c2de:	bf00      	nop
 800c2e0:	e00a      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800c2e2:	bf00      	nop
 800c2e4:	e008      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800c2e6:	bf00      	nop
 800c2e8:	e006      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800c2ea:	bf00      	nop
 800c2ec:	e004      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800c2ee:	bf00      	nop
 800c2f0:	e002      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
      break;   
 800c2f2:	bf00      	nop
 800c2f4:	e000      	b.n	800c2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800c2f6:	bf00      	nop
    }
  } 
  
  return status; 
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop

0800c308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c308:	b480      	push	{r7}
 800c30a:	b089      	sub	sp, #36	; 0x24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c312:	2300      	movs	r3, #0
 800c314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c316:	2300      	movs	r3, #0
 800c318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c31e:	2300      	movs	r3, #0
 800c320:	61fb      	str	r3, [r7, #28]
 800c322:	e16b      	b.n	800c5fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c324:	2201      	movs	r2, #1
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	fa02 f303 	lsl.w	r3, r2, r3
 800c32c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	4013      	ands	r3, r2
 800c336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	f040 815a 	bne.w	800c5f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d00b      	beq.n	800c362 <HAL_GPIO_Init+0x5a>
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d007      	beq.n	800c362 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c356:	2b11      	cmp	r3, #17
 800c358:	d003      	beq.n	800c362 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	2b12      	cmp	r3, #18
 800c360:	d130      	bne.n	800c3c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	2203      	movs	r2, #3
 800c36e:	fa02 f303 	lsl.w	r3, r2, r3
 800c372:	43db      	mvns	r3, r3
 800c374:	69ba      	ldr	r2, [r7, #24]
 800c376:	4013      	ands	r3, r2
 800c378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	fa02 f303 	lsl.w	r3, r2, r3
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	4313      	orrs	r3, r2
 800c38a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	69ba      	ldr	r2, [r7, #24]
 800c390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c398:	2201      	movs	r2, #1
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a0:	43db      	mvns	r3, r3
 800c3a2:	69ba      	ldr	r2, [r7, #24]
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	091b      	lsrs	r3, r3, #4
 800c3ae:	f003 0201 	and.w	r2, r3, #1
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b8:	69ba      	ldr	r2, [r7, #24]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	69ba      	ldr	r2, [r7, #24]
 800c3c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	2203      	movs	r2, #3
 800c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d4:	43db      	mvns	r3, r3
 800c3d6:	69ba      	ldr	r2, [r7, #24]
 800c3d8:	4013      	ands	r3, r2
 800c3da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	689a      	ldr	r2, [r3, #8]
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	69ba      	ldr	r2, [r7, #24]
 800c3f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d003      	beq.n	800c404 <HAL_GPIO_Init+0xfc>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	2b12      	cmp	r3, #18
 800c402:	d123      	bne.n	800c44c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	08da      	lsrs	r2, r3, #3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	3208      	adds	r2, #8
 800c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	f003 0307 	and.w	r3, r3, #7
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	220f      	movs	r2, #15
 800c41c:	fa02 f303 	lsl.w	r3, r2, r3
 800c420:	43db      	mvns	r3, r3
 800c422:	69ba      	ldr	r2, [r7, #24]
 800c424:	4013      	ands	r3, r2
 800c426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	691a      	ldr	r2, [r3, #16]
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	f003 0307 	and.w	r3, r3, #7
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	fa02 f303 	lsl.w	r3, r2, r3
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	08da      	lsrs	r2, r3, #3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3208      	adds	r2, #8
 800c446:	69b9      	ldr	r1, [r7, #24]
 800c448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	2203      	movs	r2, #3
 800c458:	fa02 f303 	lsl.w	r3, r2, r3
 800c45c:	43db      	mvns	r3, r3
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	4013      	ands	r3, r2
 800c462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	f003 0203 	and.w	r2, r3, #3
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	fa02 f303 	lsl.w	r3, r2, r3
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	4313      	orrs	r3, r2
 800c478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 80b4 	beq.w	800c5f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c48e:	2300      	movs	r3, #0
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	4b60      	ldr	r3, [pc, #384]	; (800c614 <HAL_GPIO_Init+0x30c>)
 800c494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c496:	4a5f      	ldr	r2, [pc, #380]	; (800c614 <HAL_GPIO_Init+0x30c>)
 800c498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c49c:	6453      	str	r3, [r2, #68]	; 0x44
 800c49e:	4b5d      	ldr	r3, [pc, #372]	; (800c614 <HAL_GPIO_Init+0x30c>)
 800c4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c4aa:	4a5b      	ldr	r2, [pc, #364]	; (800c618 <HAL_GPIO_Init+0x310>)
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	089b      	lsrs	r3, r3, #2
 800c4b0:	3302      	adds	r3, #2
 800c4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	f003 0303 	and.w	r3, r3, #3
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	220f      	movs	r2, #15
 800c4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c6:	43db      	mvns	r3, r3
 800c4c8:	69ba      	ldr	r2, [r7, #24]
 800c4ca:	4013      	ands	r3, r2
 800c4cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a52      	ldr	r2, [pc, #328]	; (800c61c <HAL_GPIO_Init+0x314>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d02b      	beq.n	800c52e <HAL_GPIO_Init+0x226>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a51      	ldr	r2, [pc, #324]	; (800c620 <HAL_GPIO_Init+0x318>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d025      	beq.n	800c52a <HAL_GPIO_Init+0x222>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a50      	ldr	r2, [pc, #320]	; (800c624 <HAL_GPIO_Init+0x31c>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d01f      	beq.n	800c526 <HAL_GPIO_Init+0x21e>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a4f      	ldr	r2, [pc, #316]	; (800c628 <HAL_GPIO_Init+0x320>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d019      	beq.n	800c522 <HAL_GPIO_Init+0x21a>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a4e      	ldr	r2, [pc, #312]	; (800c62c <HAL_GPIO_Init+0x324>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d013      	beq.n	800c51e <HAL_GPIO_Init+0x216>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a4d      	ldr	r2, [pc, #308]	; (800c630 <HAL_GPIO_Init+0x328>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d00d      	beq.n	800c51a <HAL_GPIO_Init+0x212>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a4c      	ldr	r2, [pc, #304]	; (800c634 <HAL_GPIO_Init+0x32c>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d007      	beq.n	800c516 <HAL_GPIO_Init+0x20e>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a4b      	ldr	r2, [pc, #300]	; (800c638 <HAL_GPIO_Init+0x330>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d101      	bne.n	800c512 <HAL_GPIO_Init+0x20a>
 800c50e:	2307      	movs	r3, #7
 800c510:	e00e      	b.n	800c530 <HAL_GPIO_Init+0x228>
 800c512:	2308      	movs	r3, #8
 800c514:	e00c      	b.n	800c530 <HAL_GPIO_Init+0x228>
 800c516:	2306      	movs	r3, #6
 800c518:	e00a      	b.n	800c530 <HAL_GPIO_Init+0x228>
 800c51a:	2305      	movs	r3, #5
 800c51c:	e008      	b.n	800c530 <HAL_GPIO_Init+0x228>
 800c51e:	2304      	movs	r3, #4
 800c520:	e006      	b.n	800c530 <HAL_GPIO_Init+0x228>
 800c522:	2303      	movs	r3, #3
 800c524:	e004      	b.n	800c530 <HAL_GPIO_Init+0x228>
 800c526:	2302      	movs	r3, #2
 800c528:	e002      	b.n	800c530 <HAL_GPIO_Init+0x228>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e000      	b.n	800c530 <HAL_GPIO_Init+0x228>
 800c52e:	2300      	movs	r3, #0
 800c530:	69fa      	ldr	r2, [r7, #28]
 800c532:	f002 0203 	and.w	r2, r2, #3
 800c536:	0092      	lsls	r2, r2, #2
 800c538:	4093      	lsls	r3, r2
 800c53a:	69ba      	ldr	r2, [r7, #24]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c540:	4935      	ldr	r1, [pc, #212]	; (800c618 <HAL_GPIO_Init+0x310>)
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	089b      	lsrs	r3, r3, #2
 800c546:	3302      	adds	r3, #2
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c54e:	4b3b      	ldr	r3, [pc, #236]	; (800c63c <HAL_GPIO_Init+0x334>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	43db      	mvns	r3, r3
 800c558:	69ba      	ldr	r2, [r7, #24]
 800c55a:	4013      	ands	r3, r2
 800c55c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	4313      	orrs	r3, r2
 800c570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c572:	4a32      	ldr	r2, [pc, #200]	; (800c63c <HAL_GPIO_Init+0x334>)
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c578:	4b30      	ldr	r3, [pc, #192]	; (800c63c <HAL_GPIO_Init+0x334>)
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	43db      	mvns	r3, r3
 800c582:	69ba      	ldr	r2, [r7, #24]
 800c584:	4013      	ands	r3, r2
 800c586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c590:	2b00      	cmp	r3, #0
 800c592:	d003      	beq.n	800c59c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	4313      	orrs	r3, r2
 800c59a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c59c:	4a27      	ldr	r2, [pc, #156]	; (800c63c <HAL_GPIO_Init+0x334>)
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c5a2:	4b26      	ldr	r3, [pc, #152]	; (800c63c <HAL_GPIO_Init+0x334>)
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	43db      	mvns	r3, r3
 800c5ac:	69ba      	ldr	r2, [r7, #24]
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d003      	beq.n	800c5c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c5be:	69ba      	ldr	r2, [r7, #24]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c5c6:	4a1d      	ldr	r2, [pc, #116]	; (800c63c <HAL_GPIO_Init+0x334>)
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c5cc:	4b1b      	ldr	r3, [pc, #108]	; (800c63c <HAL_GPIO_Init+0x334>)
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	43db      	mvns	r3, r3
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	4013      	ands	r3, r2
 800c5da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d003      	beq.n	800c5f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c5e8:	69ba      	ldr	r2, [r7, #24]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c5f0:	4a12      	ldr	r2, [pc, #72]	; (800c63c <HAL_GPIO_Init+0x334>)
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	2b0f      	cmp	r3, #15
 800c600:	f67f ae90 	bls.w	800c324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c604:	bf00      	nop
 800c606:	bf00      	nop
 800c608:	3724      	adds	r7, #36	; 0x24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	40023800 	.word	0x40023800
 800c618:	40013800 	.word	0x40013800
 800c61c:	40020000 	.word	0x40020000
 800c620:	40020400 	.word	0x40020400
 800c624:	40020800 	.word	0x40020800
 800c628:	40020c00 	.word	0x40020c00
 800c62c:	40021000 	.word	0x40021000
 800c630:	40021400 	.word	0x40021400
 800c634:	40021800 	.word	0x40021800
 800c638:	40021c00 	.word	0x40021c00
 800c63c:	40013c00 	.word	0x40013c00

0800c640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	807b      	strh	r3, [r7, #2]
 800c64c:	4613      	mov	r3, r2
 800c64e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c650:	787b      	ldrb	r3, [r7, #1]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c656:	887a      	ldrh	r2, [r7, #2]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c65c:	e003      	b.n	800c666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c65e:	887b      	ldrh	r3, [r7, #2]
 800c660:	041a      	lsls	r2, r3, #16
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	619a      	str	r2, [r3, #24]
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
	...

0800c674 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e043      	b.n	800c712 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7f8 fb14 	bl	8004ccc <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	3308      	adds	r3, #8
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	f003 f9b6 	bl	800fa20 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	68b9      	ldr	r1, [r7, #8]
 800c6c0:	f003 fa00 	bl	800fac4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6858      	ldr	r0, [r3, #4]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d0:	6879      	ldr	r1, [r7, #4]
 800c6d2:	f003 fa35 	bl	800fb40 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	6892      	ldr	r2, [r2, #8]
 800c6de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	6892      	ldr	r2, [r2, #8]
 800c6ea:	f041 0101 	orr.w	r1, r1, #1
 800c6ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d103      	bne.n	800c702 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c6fa:	4b08      	ldr	r3, [pc, #32]	; (800c71c <HAL_NOR_Init+0xa8>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	e002      	b.n	800c708 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c702:	4b06      	ldr	r3, [pc, #24]	; (800c71c <HAL_NOR_Init+0xa8>)
 800c704:	2201      	movs	r2, #1
 800c706:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20004868 	.word	0x20004868

0800c720 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c722:	b08f      	sub	sp, #60	; 0x3c
 800c724:	af0a      	add	r7, sp, #40	; 0x28
 800c726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d101      	bne.n	800c732 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e10f      	b.n	800c952 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b00      	cmp	r3, #0
 800c742:	d106      	bne.n	800c752 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f009 fa61 	bl	8015c14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2203      	movs	r2, #3
 800c756:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c762:	2b00      	cmp	r3, #0
 800c764:	d102      	bne.n	800c76c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4618      	mov	r0, r3
 800c772:	f003 fb3a 	bl	800fdea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	687e      	ldr	r6, [r7, #4]
 800c77e:	466d      	mov	r5, sp
 800c780:	f106 0410 	add.w	r4, r6, #16
 800c784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c78a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c78c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c790:	e885 0003 	stmia.w	r5, {r0, r1}
 800c794:	1d33      	adds	r3, r6, #4
 800c796:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c798:	6838      	ldr	r0, [r7, #0]
 800c79a:	f003 fa11 	bl	800fbc0 <USB_CoreInit>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d005      	beq.n	800c7b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e0d0      	b.n	800c952 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f003 fb28 	bl	800fe0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c7bc:	2300      	movs	r3, #0
 800c7be:	73fb      	strb	r3, [r7, #15]
 800c7c0:	e04a      	b.n	800c858 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c7c2:	7bfa      	ldrb	r2, [r7, #15]
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	1a9b      	subs	r3, r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	440b      	add	r3, r1
 800c7d0:	333d      	adds	r3, #61	; 0x3d
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c7d6:	7bfa      	ldrb	r2, [r7, #15]
 800c7d8:	6879      	ldr	r1, [r7, #4]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	440b      	add	r3, r1
 800c7e4:	333c      	adds	r3, #60	; 0x3c
 800c7e6:	7bfa      	ldrb	r2, [r7, #15]
 800c7e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c7ea:	7bfa      	ldrb	r2, [r7, #15]
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
 800c7ee:	b298      	uxth	r0, r3
 800c7f0:	6879      	ldr	r1, [r7, #4]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	1a9b      	subs	r3, r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	440b      	add	r3, r1
 800c7fc:	3342      	adds	r3, #66	; 0x42
 800c7fe:	4602      	mov	r2, r0
 800c800:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c802:	7bfa      	ldrb	r2, [r7, #15]
 800c804:	6879      	ldr	r1, [r7, #4]
 800c806:	4613      	mov	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	1a9b      	subs	r3, r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	440b      	add	r3, r1
 800c810:	333f      	adds	r3, #63	; 0x3f
 800c812:	2200      	movs	r2, #0
 800c814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c816:	7bfa      	ldrb	r2, [r7, #15]
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	4613      	mov	r3, r2
 800c81c:	00db      	lsls	r3, r3, #3
 800c81e:	1a9b      	subs	r3, r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	440b      	add	r3, r1
 800c824:	3344      	adds	r3, #68	; 0x44
 800c826:	2200      	movs	r2, #0
 800c828:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c82a:	7bfa      	ldrb	r2, [r7, #15]
 800c82c:	6879      	ldr	r1, [r7, #4]
 800c82e:	4613      	mov	r3, r2
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	1a9b      	subs	r3, r3, r2
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	440b      	add	r3, r1
 800c838:	3348      	adds	r3, #72	; 0x48
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c83e:	7bfa      	ldrb	r2, [r7, #15]
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	4613      	mov	r3, r2
 800c844:	00db      	lsls	r3, r3, #3
 800c846:	1a9b      	subs	r3, r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	440b      	add	r3, r1
 800c84c:	3350      	adds	r3, #80	; 0x50
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c852:	7bfb      	ldrb	r3, [r7, #15]
 800c854:	3301      	adds	r3, #1
 800c856:	73fb      	strb	r3, [r7, #15]
 800c858:	7bfa      	ldrb	r2, [r7, #15]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d3af      	bcc.n	800c7c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c862:	2300      	movs	r3, #0
 800c864:	73fb      	strb	r3, [r7, #15]
 800c866:	e044      	b.n	800c8f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c868:	7bfa      	ldrb	r2, [r7, #15]
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	4613      	mov	r3, r2
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	1a9b      	subs	r3, r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	440b      	add	r3, r1
 800c876:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c87a:	2200      	movs	r2, #0
 800c87c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c87e:	7bfa      	ldrb	r2, [r7, #15]
 800c880:	6879      	ldr	r1, [r7, #4]
 800c882:	4613      	mov	r3, r2
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	1a9b      	subs	r3, r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	440b      	add	r3, r1
 800c88c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c890:	7bfa      	ldrb	r2, [r7, #15]
 800c892:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c894:	7bfa      	ldrb	r2, [r7, #15]
 800c896:	6879      	ldr	r1, [r7, #4]
 800c898:	4613      	mov	r3, r2
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	1a9b      	subs	r3, r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	440b      	add	r3, r1
 800c8a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c8aa:	7bfa      	ldrb	r2, [r7, #15]
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	1a9b      	subs	r3, r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	440b      	add	r3, r1
 800c8b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c8bc:	2200      	movs	r2, #0
 800c8be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c8c0:	7bfa      	ldrb	r2, [r7, #15]
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	1a9b      	subs	r3, r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	440b      	add	r3, r1
 800c8ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c8d6:	7bfa      	ldrb	r2, [r7, #15]
 800c8d8:	6879      	ldr	r1, [r7, #4]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	1a9b      	subs	r3, r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	440b      	add	r3, r1
 800c8e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	73fb      	strb	r3, [r7, #15]
 800c8f2:	7bfa      	ldrb	r2, [r7, #15]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d3b5      	bcc.n	800c868 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	603b      	str	r3, [r7, #0]
 800c902:	687e      	ldr	r6, [r7, #4]
 800c904:	466d      	mov	r5, sp
 800c906:	f106 0410 	add.w	r4, r6, #16
 800c90a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c90c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c90e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c912:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c916:	e885 0003 	stmia.w	r5, {r0, r1}
 800c91a:	1d33      	adds	r3, r6, #4
 800c91c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c91e:	6838      	ldr	r0, [r7, #0]
 800c920:	f003 fa9e 	bl	800fe60 <USB_DevInit>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d005      	beq.n	800c936 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2202      	movs	r2, #2
 800c92e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	e00d      	b.n	800c952 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f004 fae6 	bl	8010f1c <USB_DevDisconnect>

  return HAL_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c95a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d101      	bne.n	800c976 <HAL_PCD_Start+0x1c>
 800c972:	2302      	movs	r3, #2
 800c974:	e020      	b.n	800c9b8 <HAL_PCD_Start+0x5e>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c982:	2b01      	cmp	r3, #1
 800c984:	d109      	bne.n	800c99a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d005      	beq.n	800c99a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c992:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f003 fa12 	bl	800fdc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f004 fa96 	bl	8010eda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c9c0:	b590      	push	{r4, r7, lr}
 800c9c2:	b08d      	sub	sp, #52	; 0x34
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ce:	6a3b      	ldr	r3, [r7, #32]
 800c9d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f004 fb54 	bl	8011084 <USB_GetMode>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f040 839d 	bne.w	800d11e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f004 fab8 	bl	8010f5e <USB_ReadInterrupts>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 8393 	beq.w	800d11c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f004 faaf 	bl	8010f5e <USB_ReadInterrupts>
 800ca00:	4603      	mov	r3, r0
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d107      	bne.n	800ca1a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	695a      	ldr	r2, [r3, #20]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f002 0202 	and.w	r2, r2, #2
 800ca18:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f004 fa9d 	bl	8010f5e <USB_ReadInterrupts>
 800ca24:	4603      	mov	r3, r0
 800ca26:	f003 0310 	and.w	r3, r3, #16
 800ca2a:	2b10      	cmp	r3, #16
 800ca2c:	d161      	bne.n	800caf2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	699a      	ldr	r2, [r3, #24]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f022 0210 	bic.w	r2, r2, #16
 800ca3c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	f003 020f 	and.w	r2, r3, #15
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	00db      	lsls	r3, r3, #3
 800ca4e:	1a9b      	subs	r3, r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	4413      	add	r3, r2
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	0c5b      	lsrs	r3, r3, #17
 800ca62:	f003 030f 	and.w	r3, r3, #15
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	d124      	bne.n	800cab4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ca6a:	69ba      	ldr	r2, [r7, #24]
 800ca6c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ca70:	4013      	ands	r3, r2
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d035      	beq.n	800cae2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	091b      	lsrs	r3, r3, #4
 800ca7e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ca80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	461a      	mov	r2, r3
 800ca88:	6a38      	ldr	r0, [r7, #32]
 800ca8a:	f004 f903 	bl	8010c94 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	68da      	ldr	r2, [r3, #12]
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	091b      	lsrs	r3, r3, #4
 800ca96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca9a:	441a      	add	r2, r3
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	699a      	ldr	r2, [r3, #24]
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	091b      	lsrs	r3, r3, #4
 800caa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800caac:	441a      	add	r2, r3
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	619a      	str	r2, [r3, #24]
 800cab2:	e016      	b.n	800cae2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	0c5b      	lsrs	r3, r3, #17
 800cab8:	f003 030f 	and.w	r3, r3, #15
 800cabc:	2b06      	cmp	r3, #6
 800cabe:	d110      	bne.n	800cae2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cac6:	2208      	movs	r2, #8
 800cac8:	4619      	mov	r1, r3
 800caca:	6a38      	ldr	r0, [r7, #32]
 800cacc:	f004 f8e2 	bl	8010c94 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	699a      	ldr	r2, [r3, #24]
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	091b      	lsrs	r3, r3, #4
 800cad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cadc:	441a      	add	r2, r3
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	699a      	ldr	r2, [r3, #24]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f042 0210 	orr.w	r2, r2, #16
 800caf0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f004 fa31 	bl	8010f5e <USB_ReadInterrupts>
 800cafc:	4603      	mov	r3, r0
 800cafe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cb02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cb06:	d16e      	bne.n	800cbe6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f004 fa37 	bl	8010f84 <USB_ReadDevAllOutEpInterrupt>
 800cb16:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800cb18:	e062      	b.n	800cbe0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d057      	beq.n	800cbd4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb2a:	b2d2      	uxtb	r2, r2
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f004 fa5c 	bl	8010fec <USB_ReadDevOutEPInterrupt>
 800cb34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00c      	beq.n	800cb5a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	2301      	movs	r3, #1
 800cb50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800cb52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fdb1 	bl	800d6bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	f003 0308 	and.w	r3, r3, #8
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00c      	beq.n	800cb7e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	015a      	lsls	r2, r3, #5
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb70:	461a      	mov	r2, r3
 800cb72:	2308      	movs	r3, #8
 800cb74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800cb76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 feab 	bl	800d8d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	f003 0310 	and.w	r3, r3, #16
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d008      	beq.n	800cb9a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb94:	461a      	mov	r2, r3
 800cb96:	2310      	movs	r3, #16
 800cb98:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	f003 0320 	and.w	r3, r3, #32
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d008      	beq.n	800cbb6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	2320      	movs	r3, #32
 800cbb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d009      	beq.n	800cbd4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	015a      	lsls	r2, r3, #5
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbcc:	461a      	mov	r2, r3
 800cbce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbd2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbdc:	085b      	lsrs	r3, r3, #1
 800cbde:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d199      	bne.n	800cb1a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f004 f9b7 	bl	8010f5e <USB_ReadInterrupts>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cbfa:	f040 80c0 	bne.w	800cd7e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f004 f9d8 	bl	8010fb8 <USB_ReadDevAllInEpInterrupt>
 800cc08:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800cc0e:	e0b2      	b.n	800cd76 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800cc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f000 80a7 	beq.w	800cd6a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc22:	b2d2      	uxtb	r2, r2
 800cc24:	4611      	mov	r1, r2
 800cc26:	4618      	mov	r0, r3
 800cc28:	f004 f9fe 	bl	8011028 <USB_ReadDevInEPInterrupt>
 800cc2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	f003 0301 	and.w	r3, r3, #1
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d057      	beq.n	800cce8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	f003 030f 	and.w	r3, r3, #15
 800cc3e:	2201      	movs	r2, #1
 800cc40:	fa02 f303 	lsl.w	r3, r2, r3
 800cc44:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	43db      	mvns	r3, r3
 800cc52:	69f9      	ldr	r1, [r7, #28]
 800cc54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc58:	4013      	ands	r3, r2
 800cc5a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc68:	461a      	mov	r2, r3
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d132      	bne.n	800ccdc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	1a9b      	subs	r3, r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	440b      	add	r3, r1
 800cc84:	3348      	adds	r3, #72	; 0x48
 800cc86:	6819      	ldr	r1, [r3, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	1a9b      	subs	r3, r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4403      	add	r3, r0
 800cc96:	3344      	adds	r3, #68	; 0x44
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4419      	add	r1, r3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca0:	4613      	mov	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	1a9b      	subs	r3, r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4403      	add	r3, r0
 800ccaa:	3348      	adds	r3, #72	; 0x48
 800ccac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d113      	bne.n	800ccdc <HAL_PCD_IRQHandler+0x31c>
 800ccb4:	6879      	ldr	r1, [r7, #4]
 800ccb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccb8:	4613      	mov	r3, r2
 800ccba:	00db      	lsls	r3, r3, #3
 800ccbc:	1a9b      	subs	r3, r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	440b      	add	r3, r1
 800ccc2:	3350      	adds	r3, #80	; 0x50
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d108      	bne.n	800ccdc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6818      	ldr	r0, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	2101      	movs	r1, #1
 800ccd8:	f004 fa06 	bl	80110e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f009 f817 	bl	8015d16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f003 0308 	and.w	r3, r3, #8
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d008      	beq.n	800cd04 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	015a      	lsls	r2, r3, #5
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfe:	461a      	mov	r2, r3
 800cd00:	2308      	movs	r3, #8
 800cd02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f003 0310 	and.w	r3, r3, #16
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d008      	beq.n	800cd20 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	015a      	lsls	r2, r3, #5
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	4413      	add	r3, r2
 800cd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	2310      	movs	r3, #16
 800cd1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d008      	beq.n	800cd3c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd36:	461a      	mov	r2, r3
 800cd38:	2340      	movs	r3, #64	; 0x40
 800cd3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	f003 0302 	and.w	r3, r3, #2
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d008      	beq.n	800cd58 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	015a      	lsls	r2, r3, #5
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd52:	461a      	mov	r2, r3
 800cd54:	2302      	movs	r3, #2
 800cd56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800cd62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fc1b 	bl	800d5a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd72:	085b      	lsrs	r3, r3, #1
 800cd74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800cd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f47f af49 	bne.w	800cc10 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f004 f8eb 	bl	8010f5e <USB_ReadInterrupts>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd92:	d122      	bne.n	800cdda <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	69fa      	ldr	r2, [r7, #28]
 800cd9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cda2:	f023 0301 	bic.w	r3, r3, #1
 800cda6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d108      	bne.n	800cdc4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cdba:	2100      	movs	r1, #0
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fe27 	bl	800da10 <HAL_PCDEx_LPM_Callback>
 800cdc2:	e002      	b.n	800cdca <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f009 f81d 	bl	8015e04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	695a      	ldr	r2, [r3, #20]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cdd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f004 f8bd 	bl	8010f5e <USB_ReadInterrupts>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdee:	d112      	bne.n	800ce16 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f003 0301 	and.w	r3, r3, #1
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d102      	bne.n	800ce06 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f008 ffd9 	bl	8015db8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	695a      	ldr	r2, [r3, #20]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ce14:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f004 f89f 	bl	8010f5e <USB_ReadInterrupts>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ce26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce2a:	f040 80c7 	bne.w	800cfbc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	69fa      	ldr	r2, [r7, #28]
 800ce38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce3c:	f023 0301 	bic.w	r3, r3, #1
 800ce40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2110      	movs	r1, #16
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f003 f96d 	bl	8010128 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce4e:	2300      	movs	r3, #0
 800ce50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce52:	e056      	b.n	800cf02 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ce54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce60:	461a      	mov	r2, r3
 800ce62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	015a      	lsls	r2, r3, #5
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	4413      	add	r3, r2
 800ce70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce78:	0151      	lsls	r1, r2, #5
 800ce7a:	69fa      	ldr	r2, [r7, #28]
 800ce7c:	440a      	add	r2, r1
 800ce7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce86:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	015a      	lsls	r2, r3, #5
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	4413      	add	r3, r2
 800ce90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce98:	0151      	lsls	r1, r2, #5
 800ce9a:	69fa      	ldr	r2, [r7, #28]
 800ce9c:	440a      	add	r2, r1
 800ce9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cea2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cea6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceaa:	015a      	lsls	r2, r3, #5
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	4413      	add	r3, r2
 800ceb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ceba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cecc:	0151      	lsls	r1, r2, #5
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	440a      	add	r2, r1
 800ced2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ced6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ceda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cede:	015a      	lsls	r2, r3, #5
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	4413      	add	r3, r2
 800cee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceec:	0151      	lsls	r1, r2, #5
 800ceee:	69fa      	ldr	r2, [r7, #28]
 800cef0:	440a      	add	r2, r1
 800cef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cefa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	3301      	adds	r3, #1
 800cf00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d3a3      	bcc.n	800ce54 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	69fa      	ldr	r2, [r7, #28]
 800cf16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cf1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d016      	beq.n	800cf56 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf32:	69fa      	ldr	r2, [r7, #28]
 800cf34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf38:	f043 030b 	orr.w	r3, r3, #11
 800cf3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf48:	69fa      	ldr	r2, [r7, #28]
 800cf4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf4e:	f043 030b 	orr.w	r3, r3, #11
 800cf52:	6453      	str	r3, [r2, #68]	; 0x44
 800cf54:	e015      	b.n	800cf82 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5c:	695b      	ldr	r3, [r3, #20]
 800cf5e:	69fa      	ldr	r2, [r7, #28]
 800cf60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf68:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cf6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	69fa      	ldr	r2, [r7, #28]
 800cf78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf7c:	f043 030b 	orr.w	r3, r3, #11
 800cf80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69fa      	ldr	r2, [r7, #28]
 800cf8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	691b      	ldr	r3, [r3, #16]
 800cf9e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	f004 f89e 	bl	80110e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	695a      	ldr	r2, [r3, #20]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cfba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f003 ffcc 	bl	8010f5e <USB_ReadInterrupts>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfd0:	d124      	bne.n	800d01c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f004 f862 	bl	80110a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f003 f902 	bl	80101ea <USB_GetDevSpeed>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	461a      	mov	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681c      	ldr	r4, [r3, #0]
 800cff2:	f001 f951 	bl	800e298 <HAL_RCC_GetHCLKFreq>
 800cff6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	461a      	mov	r2, r3
 800d000:	4620      	mov	r0, r4
 800d002:	f002 fe3f 	bl	800fc84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f008 fead 	bl	8015d66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	695a      	ldr	r2, [r3, #20]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d01a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4618      	mov	r0, r3
 800d022:	f003 ff9c 	bl	8010f5e <USB_ReadInterrupts>
 800d026:	4603      	mov	r3, r0
 800d028:	f003 0308 	and.w	r3, r3, #8
 800d02c:	2b08      	cmp	r3, #8
 800d02e:	d10a      	bne.n	800d046 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f008 fe8a 	bl	8015d4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	695a      	ldr	r2, [r3, #20]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f002 0208 	and.w	r2, r2, #8
 800d044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f003 ff87 	bl	8010f5e <USB_ReadInterrupts>
 800d050:	4603      	mov	r3, r0
 800d052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d05a:	d10f      	bne.n	800d07c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d05c:	2300      	movs	r3, #0
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	b2db      	uxtb	r3, r3
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f008 feec 	bl	8015e44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	695a      	ldr	r2, [r3, #20]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d07a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4618      	mov	r0, r3
 800d082:	f003 ff6c 	bl	8010f5e <USB_ReadInterrupts>
 800d086:	4603      	mov	r3, r0
 800d088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d08c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d090:	d10f      	bne.n	800d0b2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d092:	2300      	movs	r3, #0
 800d094:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f008 febf 	bl	8015e20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	695a      	ldr	r2, [r3, #20]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800d0b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f003 ff51 	bl	8010f5e <USB_ReadInterrupts>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0c6:	d10a      	bne.n	800d0de <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f008 fecd 	bl	8015e68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	695a      	ldr	r2, [r3, #20]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800d0dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f003 ff3b 	bl	8010f5e <USB_ReadInterrupts>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	f003 0304 	and.w	r3, r3, #4
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d115      	bne.n	800d11e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	f003 0304 	and.w	r3, r3, #4
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f008 febd 	bl	8015e84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6859      	ldr	r1, [r3, #4]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	69ba      	ldr	r2, [r7, #24]
 800d116:	430a      	orrs	r2, r1
 800d118:	605a      	str	r2, [r3, #4]
 800d11a:	e000      	b.n	800d11e <HAL_PCD_IRQHandler+0x75e>
      return;
 800d11c:	bf00      	nop
    }
  }
}
 800d11e:	3734      	adds	r7, #52	; 0x34
 800d120:	46bd      	mov	sp, r7
 800d122:	bd90      	pop	{r4, r7, pc}

0800d124 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d136:	2b01      	cmp	r3, #1
 800d138:	d101      	bne.n	800d13e <HAL_PCD_SetAddress+0x1a>
 800d13a:	2302      	movs	r3, #2
 800d13c:	e013      	b.n	800d166 <HAL_PCD_SetAddress+0x42>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2201      	movs	r2, #1
 800d142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	78fa      	ldrb	r2, [r7, #3]
 800d14a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	78fa      	ldrb	r2, [r7, #3]
 800d154:	4611      	mov	r1, r2
 800d156:	4618      	mov	r0, r3
 800d158:	f003 fe99 	bl	8010e8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	4608      	mov	r0, r1
 800d178:	4611      	mov	r1, r2
 800d17a:	461a      	mov	r2, r3
 800d17c:	4603      	mov	r3, r0
 800d17e:	70fb      	strb	r3, [r7, #3]
 800d180:	460b      	mov	r3, r1
 800d182:	803b      	strh	r3, [r7, #0]
 800d184:	4613      	mov	r3, r2
 800d186:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d18c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d190:	2b00      	cmp	r3, #0
 800d192:	da0f      	bge.n	800d1b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d194:	78fb      	ldrb	r3, [r7, #3]
 800d196:	f003 020f 	and.w	r2, r3, #15
 800d19a:	4613      	mov	r3, r2
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	1a9b      	subs	r3, r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	3338      	adds	r3, #56	; 0x38
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	705a      	strb	r2, [r3, #1]
 800d1b2:	e00f      	b.n	800d1d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d1b4:	78fb      	ldrb	r3, [r7, #3]
 800d1b6:	f003 020f 	and.w	r2, r3, #15
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	1a9b      	subs	r3, r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d1d4:	78fb      	ldrb	r3, [r7, #3]
 800d1d6:	f003 030f 	and.w	r3, r3, #15
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d1e0:	883a      	ldrh	r2, [r7, #0]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	78ba      	ldrb	r2, [r7, #2]
 800d1ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	785b      	ldrb	r3, [r3, #1]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d004      	beq.n	800d1fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d1fe:	78bb      	ldrb	r3, [r7, #2]
 800d200:	2b02      	cmp	r3, #2
 800d202:	d102      	bne.n	800d20a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2200      	movs	r2, #0
 800d208:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d210:	2b01      	cmp	r3, #1
 800d212:	d101      	bne.n	800d218 <HAL_PCD_EP_Open+0xaa>
 800d214:	2302      	movs	r3, #2
 800d216:	e00e      	b.n	800d236 <HAL_PCD_EP_Open+0xc8>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68f9      	ldr	r1, [r7, #12]
 800d226:	4618      	mov	r0, r3
 800d228:	f003 f804 	bl	8010234 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d234:	7afb      	ldrb	r3, [r7, #11]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b084      	sub	sp, #16
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	460b      	mov	r3, r1
 800d248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d24a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	da0f      	bge.n	800d272 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d252:	78fb      	ldrb	r3, [r7, #3]
 800d254:	f003 020f 	and.w	r2, r3, #15
 800d258:	4613      	mov	r3, r2
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	1a9b      	subs	r3, r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	3338      	adds	r3, #56	; 0x38
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	4413      	add	r3, r2
 800d266:	3304      	adds	r3, #4
 800d268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	705a      	strb	r2, [r3, #1]
 800d270:	e00f      	b.n	800d292 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d272:	78fb      	ldrb	r3, [r7, #3]
 800d274:	f003 020f 	and.w	r2, r3, #15
 800d278:	4613      	mov	r3, r2
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	1a9b      	subs	r3, r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	4413      	add	r3, r2
 800d288:	3304      	adds	r3, #4
 800d28a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2200      	movs	r2, #0
 800d290:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d292:	78fb      	ldrb	r3, [r7, #3]
 800d294:	f003 030f 	and.w	r3, r3, #15
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d101      	bne.n	800d2ac <HAL_PCD_EP_Close+0x6e>
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	e00e      	b.n	800d2ca <HAL_PCD_EP_Close+0x8c>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	68f9      	ldr	r1, [r7, #12]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f003 f842 	bl	8010344 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b086      	sub	sp, #24
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	60f8      	str	r0, [r7, #12]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
 800d2de:	460b      	mov	r3, r1
 800d2e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2e2:	7afb      	ldrb	r3, [r7, #11]
 800d2e4:	f003 020f 	and.w	r2, r3, #15
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	00db      	lsls	r3, r3, #3
 800d2ec:	1a9b      	subs	r3, r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	2200      	movs	r2, #0
 800d30c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2200      	movs	r2, #0
 800d312:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d314:	7afb      	ldrb	r3, [r7, #11]
 800d316:	f003 030f 	and.w	r3, r3, #15
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d102      	bne.n	800d32e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d32e:	7afb      	ldrb	r3, [r7, #11]
 800d330:	f003 030f 	and.w	r3, r3, #15
 800d334:	2b00      	cmp	r3, #0
 800d336:	d109      	bne.n	800d34c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6818      	ldr	r0, [r3, #0]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	b2db      	uxtb	r3, r3
 800d342:	461a      	mov	r2, r3
 800d344:	6979      	ldr	r1, [r7, #20]
 800d346:	f003 fb1d 	bl	8010984 <USB_EP0StartXfer>
 800d34a:	e008      	b.n	800d35e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6818      	ldr	r0, [r3, #0]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	b2db      	uxtb	r3, r3
 800d356:	461a      	mov	r2, r3
 800d358:	6979      	ldr	r1, [r7, #20]
 800d35a:	f003 f8cf 	bl	80104fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	460b      	mov	r3, r1
 800d372:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d374:	78fb      	ldrb	r3, [r7, #3]
 800d376:	f003 020f 	and.w	r2, r3, #15
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	4613      	mov	r3, r2
 800d37e:	00db      	lsls	r3, r3, #3
 800d380:	1a9b      	subs	r3, r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	440b      	add	r3, r1
 800d386:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d38a:	681b      	ldr	r3, [r3, #0]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	607a      	str	r2, [r7, #4]
 800d3a2:	603b      	str	r3, [r7, #0]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3a8:	7afb      	ldrb	r3, [r7, #11]
 800d3aa:	f003 020f 	and.w	r2, r3, #15
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	1a9b      	subs	r3, r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	3338      	adds	r3, #56	; 0x38
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	3304      	adds	r3, #4
 800d3be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	683a      	ldr	r2, [r7, #0]
 800d3ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d3d8:	7afb      	ldrb	r3, [r7, #11]
 800d3da:	f003 030f 	and.w	r3, r3, #15
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d102      	bne.n	800d3f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d3f2:	7afb      	ldrb	r3, [r7, #11]
 800d3f4:	f003 030f 	and.w	r3, r3, #15
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d109      	bne.n	800d410 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6818      	ldr	r0, [r3, #0]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	b2db      	uxtb	r3, r3
 800d406:	461a      	mov	r2, r3
 800d408:	6979      	ldr	r1, [r7, #20]
 800d40a:	f003 fabb 	bl	8010984 <USB_EP0StartXfer>
 800d40e:	e008      	b.n	800d422 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	461a      	mov	r2, r3
 800d41c:	6979      	ldr	r1, [r7, #20]
 800d41e:	f003 f86d 	bl	80104fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d438:	78fb      	ldrb	r3, [r7, #3]
 800d43a:	f003 020f 	and.w	r2, r3, #15
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	429a      	cmp	r2, r3
 800d444:	d901      	bls.n	800d44a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	e050      	b.n	800d4ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d44a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	da0f      	bge.n	800d472 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d452:	78fb      	ldrb	r3, [r7, #3]
 800d454:	f003 020f 	and.w	r2, r3, #15
 800d458:	4613      	mov	r3, r2
 800d45a:	00db      	lsls	r3, r3, #3
 800d45c:	1a9b      	subs	r3, r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	3338      	adds	r3, #56	; 0x38
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	4413      	add	r3, r2
 800d466:	3304      	adds	r3, #4
 800d468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2201      	movs	r2, #1
 800d46e:	705a      	strb	r2, [r3, #1]
 800d470:	e00d      	b.n	800d48e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d472:	78fa      	ldrb	r2, [r7, #3]
 800d474:	4613      	mov	r3, r2
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	1a9b      	subs	r3, r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	4413      	add	r3, r2
 800d484:	3304      	adds	r3, #4
 800d486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2201      	movs	r2, #1
 800d492:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d494:	78fb      	ldrb	r3, [r7, #3]
 800d496:	f003 030f 	and.w	r3, r3, #15
 800d49a:	b2da      	uxtb	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d101      	bne.n	800d4ae <HAL_PCD_EP_SetStall+0x82>
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	e01e      	b.n	800d4ec <HAL_PCD_EP_SetStall+0xc0>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	68f9      	ldr	r1, [r7, #12]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f003 fc12 	bl	8010ce6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d4c2:	78fb      	ldrb	r3, [r7, #3]
 800d4c4:	f003 030f 	and.w	r3, r3, #15
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6818      	ldr	r0, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	b2d9      	uxtb	r1, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d4dc:	461a      	mov	r2, r3
 800d4de:	f003 fe03 	bl	80110e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d500:	78fb      	ldrb	r3, [r7, #3]
 800d502:	f003 020f 	and.w	r2, r3, #15
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d901      	bls.n	800d512 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	e042      	b.n	800d598 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d516:	2b00      	cmp	r3, #0
 800d518:	da0f      	bge.n	800d53a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d51a:	78fb      	ldrb	r3, [r7, #3]
 800d51c:	f003 020f 	and.w	r2, r3, #15
 800d520:	4613      	mov	r3, r2
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	1a9b      	subs	r3, r3, r2
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	3338      	adds	r3, #56	; 0x38
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	4413      	add	r3, r2
 800d52e:	3304      	adds	r3, #4
 800d530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2201      	movs	r2, #1
 800d536:	705a      	strb	r2, [r3, #1]
 800d538:	e00f      	b.n	800d55a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d53a:	78fb      	ldrb	r3, [r7, #3]
 800d53c:	f003 020f 	and.w	r2, r3, #15
 800d540:	4613      	mov	r3, r2
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	1a9b      	subs	r3, r3, r2
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	4413      	add	r3, r2
 800d550:	3304      	adds	r3, #4
 800d552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d560:	78fb      	ldrb	r3, [r7, #3]
 800d562:	f003 030f 	and.w	r3, r3, #15
 800d566:	b2da      	uxtb	r2, r3
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d572:	2b01      	cmp	r3, #1
 800d574:	d101      	bne.n	800d57a <HAL_PCD_EP_ClrStall+0x86>
 800d576:	2302      	movs	r3, #2
 800d578:	e00e      	b.n	800d598 <HAL_PCD_EP_ClrStall+0xa4>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68f9      	ldr	r1, [r7, #12]
 800d588:	4618      	mov	r0, r3
 800d58a:	f003 fc1a 	bl	8010dc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b08a      	sub	sp, #40	; 0x28
 800d5a4:	af02      	add	r7, sp, #8
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	00db      	lsls	r3, r3, #3
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	3338      	adds	r3, #56	; 0x38
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	699a      	ldr	r2, [r3, #24]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d901      	bls.n	800d5d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e06c      	b.n	800d6b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	695a      	ldr	r2, [r3, #20]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	69fa      	ldr	r2, [r7, #28]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d902      	bls.n	800d5f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	3303      	adds	r3, #3
 800d5f8:	089b      	lsrs	r3, r3, #2
 800d5fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d5fc:	e02b      	b.n	800d656 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	695a      	ldr	r2, [r3, #20]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	699b      	ldr	r3, [r3, #24]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	69fa      	ldr	r2, [r7, #28]
 800d610:	429a      	cmp	r2, r3
 800d612:	d902      	bls.n	800d61a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	3303      	adds	r3, #3
 800d61e:	089b      	lsrs	r3, r3, #2
 800d620:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	68d9      	ldr	r1, [r3, #12]
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d632:	b2db      	uxtb	r3, r3
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	4603      	mov	r3, r0
 800d638:	6978      	ldr	r0, [r7, #20]
 800d63a:	f003 faf6 	bl	8010c2a <USB_WritePacket>

    ep->xfer_buff  += len;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	68da      	ldr	r2, [r3, #12]
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	441a      	add	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	699a      	ldr	r2, [r3, #24]
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	441a      	add	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	015a      	lsls	r2, r3, #5
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	4413      	add	r3, r2
 800d65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	b29b      	uxth	r3, r3
 800d666:	69ba      	ldr	r2, [r7, #24]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d809      	bhi.n	800d680 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	699a      	ldr	r2, [r3, #24]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d674:	429a      	cmp	r2, r3
 800d676:	d203      	bcs.n	800d680 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1be      	bne.n	800d5fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	695a      	ldr	r2, [r3, #20]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d811      	bhi.n	800d6b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	f003 030f 	and.w	r3, r3, #15
 800d692:	2201      	movs	r2, #1
 800d694:	fa02 f303 	lsl.w	r3, r2, r3
 800d698:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	43db      	mvns	r3, r3
 800d6a6:	6939      	ldr	r1, [r7, #16]
 800d6a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3720      	adds	r7, #32
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
	...

0800d6bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	333c      	adds	r3, #60	; 0x3c
 800d6d4:	3304      	adds	r3, #4
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	015a      	lsls	r2, r3, #5
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	f040 80a0 	bne.w	800d834 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f003 0308 	and.w	r3, r3, #8
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d015      	beq.n	800d72a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	4a72      	ldr	r2, [pc, #456]	; (800d8cc <PCD_EP_OutXfrComplete_int+0x210>)
 800d702:	4293      	cmp	r3, r2
 800d704:	f240 80dd 	bls.w	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f000 80d7 	beq.w	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	015a      	lsls	r2, r3, #5
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	4413      	add	r3, r2
 800d71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d720:	461a      	mov	r2, r3
 800d722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d726:	6093      	str	r3, [r2, #8]
 800d728:	e0cb      	b.n	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	f003 0320 	and.w	r3, r3, #32
 800d730:	2b00      	cmp	r3, #0
 800d732:	d009      	beq.n	800d748 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	015a      	lsls	r2, r3, #5
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	4413      	add	r3, r2
 800d73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d740:	461a      	mov	r2, r3
 800d742:	2320      	movs	r3, #32
 800d744:	6093      	str	r3, [r2, #8]
 800d746:	e0bc      	b.n	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f040 80b7 	bne.w	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4a5d      	ldr	r2, [pc, #372]	; (800d8cc <PCD_EP_OutXfrComplete_int+0x210>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d90f      	bls.n	800d77c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00a      	beq.n	800d77c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	015a      	lsls	r2, r3, #5
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	4413      	add	r3, r2
 800d76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d772:	461a      	mov	r2, r3
 800d774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d778:	6093      	str	r3, [r2, #8]
 800d77a:	e0a2      	b.n	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d77c:	6879      	ldr	r1, [r7, #4]
 800d77e:	683a      	ldr	r2, [r7, #0]
 800d780:	4613      	mov	r3, r2
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	1a9b      	subs	r3, r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	440b      	add	r3, r1
 800d78a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d78e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	0159      	lsls	r1, r3, #5
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	440b      	add	r3, r1
 800d798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d7a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	1a9b      	subs	r3, r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4403      	add	r3, r0
 800d7b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d7b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d7b8:	6879      	ldr	r1, [r7, #4]
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	1a9b      	subs	r3, r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	440b      	add	r3, r1
 800d7c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d7ca:	6819      	ldr	r1, [r3, #0]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	00db      	lsls	r3, r3, #3
 800d7d4:	1a9b      	subs	r3, r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4403      	add	r3, r0
 800d7da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4419      	add	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	683a      	ldr	r2, [r7, #0]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	00db      	lsls	r3, r3, #3
 800d7ea:	1a9b      	subs	r3, r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	4403      	add	r3, r0
 800d7f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d7f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d114      	bne.n	800d826 <PCD_EP_OutXfrComplete_int+0x16a>
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	4613      	mov	r3, r2
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	1a9b      	subs	r3, r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	440b      	add	r3, r1
 800d80a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d108      	bne.n	800d826 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6818      	ldr	r0, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d81e:	461a      	mov	r2, r3
 800d820:	2101      	movs	r1, #1
 800d822:	f003 fc61 	bl	80110e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f008 fa57 	bl	8015ce0 <HAL_PCD_DataOutStageCallback>
 800d832:	e046      	b.n	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4a26      	ldr	r2, [pc, #152]	; (800d8d0 <PCD_EP_OutXfrComplete_int+0x214>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d124      	bne.n	800d886 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00a      	beq.n	800d85c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	015a      	lsls	r2, r3, #5
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	4413      	add	r3, r2
 800d84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d852:	461a      	mov	r2, r3
 800d854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d858:	6093      	str	r3, [r2, #8]
 800d85a:	e032      	b.n	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	f003 0320 	and.w	r3, r3, #32
 800d862:	2b00      	cmp	r3, #0
 800d864:	d008      	beq.n	800d878 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	015a      	lsls	r2, r3, #5
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	4413      	add	r3, r2
 800d86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d872:	461a      	mov	r2, r3
 800d874:	2320      	movs	r3, #32
 800d876:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	4619      	mov	r1, r3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f008 fa2e 	bl	8015ce0 <HAL_PCD_DataOutStageCallback>
 800d884:	e01d      	b.n	800d8c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d114      	bne.n	800d8b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d88c:	6879      	ldr	r1, [r7, #4]
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	4613      	mov	r3, r2
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	1a9b      	subs	r3, r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	440b      	add	r3, r1
 800d89a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d108      	bne.n	800d8b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6818      	ldr	r0, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	f003 fc19 	bl	80110e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f008 fa0f 	bl	8015ce0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	4f54300a 	.word	0x4f54300a
 800d8d0:	4f54310a 	.word	0x4f54310a

0800d8d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	333c      	adds	r3, #60	; 0x3c
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	015a      	lsls	r2, r3, #5
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	4a15      	ldr	r2, [pc, #84]	; (800d95c <PCD_EP_OutSetupPacket_int+0x88>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d90e      	bls.n	800d928 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d910:	2b00      	cmp	r3, #0
 800d912:	d009      	beq.n	800d928 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	015a      	lsls	r2, r3, #5
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	4413      	add	r3, r2
 800d91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d920:	461a      	mov	r2, r3
 800d922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d926:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f008 f9c7 	bl	8015cbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	4a0a      	ldr	r2, [pc, #40]	; (800d95c <PCD_EP_OutSetupPacket_int+0x88>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d90c      	bls.n	800d950 <PCD_EP_OutSetupPacket_int+0x7c>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d108      	bne.n	800d950 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d948:	461a      	mov	r2, r3
 800d94a:	2101      	movs	r1, #1
 800d94c:	f003 fbcc 	bl	80110e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3718      	adds	r7, #24
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	4f54300a 	.word	0x4f54300a

0800d960 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	70fb      	strb	r3, [r7, #3]
 800d96c:	4613      	mov	r3, r2
 800d96e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d976:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d978:	78fb      	ldrb	r3, [r7, #3]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d107      	bne.n	800d98e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d97e:	883b      	ldrh	r3, [r7, #0]
 800d980:	0419      	lsls	r1, r3, #16
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68ba      	ldr	r2, [r7, #8]
 800d988:	430a      	orrs	r2, r1
 800d98a:	629a      	str	r2, [r3, #40]	; 0x28
 800d98c:	e028      	b.n	800d9e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d994:	0c1b      	lsrs	r3, r3, #16
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	4413      	add	r3, r2
 800d99a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d99c:	2300      	movs	r3, #0
 800d99e:	73fb      	strb	r3, [r7, #15]
 800d9a0:	e00d      	b.n	800d9be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	7bfb      	ldrb	r3, [r7, #15]
 800d9a8:	3340      	adds	r3, #64	; 0x40
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	0c1b      	lsrs	r3, r3, #16
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d9b8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	73fb      	strb	r3, [r7, #15]
 800d9be:	7bfa      	ldrb	r2, [r7, #15]
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d3ec      	bcc.n	800d9a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d9c8:	883b      	ldrh	r3, [r7, #0]
 800d9ca:	0418      	lsls	r0, r3, #16
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6819      	ldr	r1, [r3, #0]
 800d9d0:	78fb      	ldrb	r3, [r7, #3]
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	4302      	orrs	r2, r0
 800d9d8:	3340      	adds	r3, #64	; 0x40
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	440b      	add	r3, r1
 800d9de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3714      	adds	r7, #20
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d9ee:	b480      	push	{r7}
 800d9f0:	b083      	sub	sp, #12
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	887a      	ldrh	r2, [r7, #2]
 800da00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800da36:	2301      	movs	r3, #1
 800da38:	e25b      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f003 0301 	and.w	r3, r3, #1
 800da42:	2b00      	cmp	r3, #0
 800da44:	d075      	beq.n	800db32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800da46:	4ba3      	ldr	r3, [pc, #652]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	f003 030c 	and.w	r3, r3, #12
 800da4e:	2b04      	cmp	r3, #4
 800da50:	d00c      	beq.n	800da6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800da52:	4ba0      	ldr	r3, [pc, #640]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800da5a:	2b08      	cmp	r3, #8
 800da5c:	d112      	bne.n	800da84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800da5e:	4b9d      	ldr	r3, [pc, #628]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da6a:	d10b      	bne.n	800da84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da6c:	4b99      	ldr	r3, [pc, #612]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da74:	2b00      	cmp	r3, #0
 800da76:	d05b      	beq.n	800db30 <HAL_RCC_OscConfig+0x108>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d157      	bne.n	800db30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	e236      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da8c:	d106      	bne.n	800da9c <HAL_RCC_OscConfig+0x74>
 800da8e:	4b91      	ldr	r3, [pc, #580]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a90      	ldr	r2, [pc, #576]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800da94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da98:	6013      	str	r3, [r2, #0]
 800da9a:	e01d      	b.n	800dad8 <HAL_RCC_OscConfig+0xb0>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800daa4:	d10c      	bne.n	800dac0 <HAL_RCC_OscConfig+0x98>
 800daa6:	4b8b      	ldr	r3, [pc, #556]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a8a      	ldr	r2, [pc, #552]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800daac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dab0:	6013      	str	r3, [r2, #0]
 800dab2:	4b88      	ldr	r3, [pc, #544]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a87      	ldr	r2, [pc, #540]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dabc:	6013      	str	r3, [r2, #0]
 800dabe:	e00b      	b.n	800dad8 <HAL_RCC_OscConfig+0xb0>
 800dac0:	4b84      	ldr	r3, [pc, #528]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a83      	ldr	r2, [pc, #524]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	4b81      	ldr	r3, [pc, #516]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a80      	ldr	r2, [pc, #512]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d013      	beq.n	800db08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dae0:	f7fd ff60 	bl	800b9a4 <HAL_GetTick>
 800dae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dae6:	e008      	b.n	800dafa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dae8:	f7fd ff5c 	bl	800b9a4 <HAL_GetTick>
 800daec:	4602      	mov	r2, r0
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	2b64      	cmp	r3, #100	; 0x64
 800daf4:	d901      	bls.n	800dafa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800daf6:	2303      	movs	r3, #3
 800daf8:	e1fb      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dafa:	4b76      	ldr	r3, [pc, #472]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db02:	2b00      	cmp	r3, #0
 800db04:	d0f0      	beq.n	800dae8 <HAL_RCC_OscConfig+0xc0>
 800db06:	e014      	b.n	800db32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db08:	f7fd ff4c 	bl	800b9a4 <HAL_GetTick>
 800db0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db0e:	e008      	b.n	800db22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800db10:	f7fd ff48 	bl	800b9a4 <HAL_GetTick>
 800db14:	4602      	mov	r2, r0
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	2b64      	cmp	r3, #100	; 0x64
 800db1c:	d901      	bls.n	800db22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db1e:	2303      	movs	r3, #3
 800db20:	e1e7      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db22:	4b6c      	ldr	r3, [pc, #432]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1f0      	bne.n	800db10 <HAL_RCC_OscConfig+0xe8>
 800db2e:	e000      	b.n	800db32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f003 0302 	and.w	r3, r3, #2
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d063      	beq.n	800dc06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800db3e:	4b65      	ldr	r3, [pc, #404]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	f003 030c 	and.w	r3, r3, #12
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00b      	beq.n	800db62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800db4a:	4b62      	ldr	r3, [pc, #392]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800db52:	2b08      	cmp	r3, #8
 800db54:	d11c      	bne.n	800db90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800db56:	4b5f      	ldr	r3, [pc, #380]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d116      	bne.n	800db90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800db62:	4b5c      	ldr	r3, [pc, #368]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0302 	and.w	r3, r3, #2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d005      	beq.n	800db7a <HAL_RCC_OscConfig+0x152>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d001      	beq.n	800db7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800db76:	2301      	movs	r3, #1
 800db78:	e1bb      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db7a:	4b56      	ldr	r3, [pc, #344]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	691b      	ldr	r3, [r3, #16]
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	4952      	ldr	r1, [pc, #328]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800db8a:	4313      	orrs	r3, r2
 800db8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800db8e:	e03a      	b.n	800dc06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d020      	beq.n	800dbda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800db98:	4b4f      	ldr	r3, [pc, #316]	; (800dcd8 <HAL_RCC_OscConfig+0x2b0>)
 800db9a:	2201      	movs	r2, #1
 800db9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db9e:	f7fd ff01 	bl	800b9a4 <HAL_GetTick>
 800dba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dba4:	e008      	b.n	800dbb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dba6:	f7fd fefd 	bl	800b9a4 <HAL_GetTick>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d901      	bls.n	800dbb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	e19c      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbb8:	4b46      	ldr	r3, [pc, #280]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f003 0302 	and.w	r3, r3, #2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d0f0      	beq.n	800dba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbc4:	4b43      	ldr	r3, [pc, #268]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	00db      	lsls	r3, r3, #3
 800dbd2:	4940      	ldr	r1, [pc, #256]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	600b      	str	r3, [r1, #0]
 800dbd8:	e015      	b.n	800dc06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dbda:	4b3f      	ldr	r3, [pc, #252]	; (800dcd8 <HAL_RCC_OscConfig+0x2b0>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbe0:	f7fd fee0 	bl	800b9a4 <HAL_GetTick>
 800dbe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dbe6:	e008      	b.n	800dbfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dbe8:	f7fd fedc 	bl	800b9a4 <HAL_GetTick>
 800dbec:	4602      	mov	r2, r0
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	1ad3      	subs	r3, r2, r3
 800dbf2:	2b02      	cmp	r3, #2
 800dbf4:	d901      	bls.n	800dbfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	e17b      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dbfa:	4b36      	ldr	r3, [pc, #216]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f003 0302 	and.w	r3, r3, #2
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1f0      	bne.n	800dbe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 0308 	and.w	r3, r3, #8
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d030      	beq.n	800dc74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	695b      	ldr	r3, [r3, #20]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d016      	beq.n	800dc48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc1a:	4b30      	ldr	r3, [pc, #192]	; (800dcdc <HAL_RCC_OscConfig+0x2b4>)
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc20:	f7fd fec0 	bl	800b9a4 <HAL_GetTick>
 800dc24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc26:	e008      	b.n	800dc3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dc28:	f7fd febc 	bl	800b9a4 <HAL_GetTick>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d901      	bls.n	800dc3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dc36:	2303      	movs	r3, #3
 800dc38:	e15b      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc3a:	4b26      	ldr	r3, [pc, #152]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dc3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc3e:	f003 0302 	and.w	r3, r3, #2
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d0f0      	beq.n	800dc28 <HAL_RCC_OscConfig+0x200>
 800dc46:	e015      	b.n	800dc74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dc48:	4b24      	ldr	r3, [pc, #144]	; (800dcdc <HAL_RCC_OscConfig+0x2b4>)
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dc4e:	f7fd fea9 	bl	800b9a4 <HAL_GetTick>
 800dc52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dc54:	e008      	b.n	800dc68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dc56:	f7fd fea5 	bl	800b9a4 <HAL_GetTick>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	1ad3      	subs	r3, r2, r3
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	d901      	bls.n	800dc68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dc64:	2303      	movs	r3, #3
 800dc66:	e144      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dc68:	4b1a      	ldr	r3, [pc, #104]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dc6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc6c:	f003 0302 	and.w	r3, r3, #2
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1f0      	bne.n	800dc56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 0304 	and.w	r3, r3, #4
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	f000 80a0 	beq.w	800ddc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dc82:	2300      	movs	r3, #0
 800dc84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc86:	4b13      	ldr	r3, [pc, #76]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10f      	bne.n	800dcb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc92:	2300      	movs	r3, #0
 800dc94:	60bb      	str	r3, [r7, #8]
 800dc96:	4b0f      	ldr	r3, [pc, #60]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9a:	4a0e      	ldr	r2, [pc, #56]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dc9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dca0:	6413      	str	r3, [r2, #64]	; 0x40
 800dca2:	4b0c      	ldr	r3, [pc, #48]	; (800dcd4 <HAL_RCC_OscConfig+0x2ac>)
 800dca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcaa:	60bb      	str	r3, [r7, #8]
 800dcac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <HAL_RCC_OscConfig+0x2b8>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d121      	bne.n	800dd02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dcbe:	4b08      	ldr	r3, [pc, #32]	; (800dce0 <HAL_RCC_OscConfig+0x2b8>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a07      	ldr	r2, [pc, #28]	; (800dce0 <HAL_RCC_OscConfig+0x2b8>)
 800dcc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dcca:	f7fd fe6b 	bl	800b9a4 <HAL_GetTick>
 800dcce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcd0:	e011      	b.n	800dcf6 <HAL_RCC_OscConfig+0x2ce>
 800dcd2:	bf00      	nop
 800dcd4:	40023800 	.word	0x40023800
 800dcd8:	42470000 	.word	0x42470000
 800dcdc:	42470e80 	.word	0x42470e80
 800dce0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dce4:	f7fd fe5e 	bl	800b9a4 <HAL_GetTick>
 800dce8:	4602      	mov	r2, r0
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d901      	bls.n	800dcf6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	e0fd      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcf6:	4b81      	ldr	r3, [pc, #516]	; (800defc <HAL_RCC_OscConfig+0x4d4>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d0f0      	beq.n	800dce4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d106      	bne.n	800dd18 <HAL_RCC_OscConfig+0x2f0>
 800dd0a:	4b7d      	ldr	r3, [pc, #500]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd0e:	4a7c      	ldr	r2, [pc, #496]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd10:	f043 0301 	orr.w	r3, r3, #1
 800dd14:	6713      	str	r3, [r2, #112]	; 0x70
 800dd16:	e01c      	b.n	800dd52 <HAL_RCC_OscConfig+0x32a>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	2b05      	cmp	r3, #5
 800dd1e:	d10c      	bne.n	800dd3a <HAL_RCC_OscConfig+0x312>
 800dd20:	4b77      	ldr	r3, [pc, #476]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd24:	4a76      	ldr	r2, [pc, #472]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd26:	f043 0304 	orr.w	r3, r3, #4
 800dd2a:	6713      	str	r3, [r2, #112]	; 0x70
 800dd2c:	4b74      	ldr	r3, [pc, #464]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd30:	4a73      	ldr	r2, [pc, #460]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd32:	f043 0301 	orr.w	r3, r3, #1
 800dd36:	6713      	str	r3, [r2, #112]	; 0x70
 800dd38:	e00b      	b.n	800dd52 <HAL_RCC_OscConfig+0x32a>
 800dd3a:	4b71      	ldr	r3, [pc, #452]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3e:	4a70      	ldr	r2, [pc, #448]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd40:	f023 0301 	bic.w	r3, r3, #1
 800dd44:	6713      	str	r3, [r2, #112]	; 0x70
 800dd46:	4b6e      	ldr	r3, [pc, #440]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd4a:	4a6d      	ldr	r2, [pc, #436]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd4c:	f023 0304 	bic.w	r3, r3, #4
 800dd50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d015      	beq.n	800dd86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd5a:	f7fd fe23 	bl	800b9a4 <HAL_GetTick>
 800dd5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd60:	e00a      	b.n	800dd78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dd62:	f7fd fe1f 	bl	800b9a4 <HAL_GetTick>
 800dd66:	4602      	mov	r2, r0
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d901      	bls.n	800dd78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800dd74:	2303      	movs	r3, #3
 800dd76:	e0bc      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd78:	4b61      	ldr	r3, [pc, #388]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dd7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd7c:	f003 0302 	and.w	r3, r3, #2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d0ee      	beq.n	800dd62 <HAL_RCC_OscConfig+0x33a>
 800dd84:	e014      	b.n	800ddb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dd86:	f7fd fe0d 	bl	800b9a4 <HAL_GetTick>
 800dd8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dd8c:	e00a      	b.n	800dda4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dd8e:	f7fd fe09 	bl	800b9a4 <HAL_GetTick>
 800dd92:	4602      	mov	r2, r0
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d901      	bls.n	800dda4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800dda0:	2303      	movs	r3, #3
 800dda2:	e0a6      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dda4:	4b56      	ldr	r3, [pc, #344]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda8:	f003 0302 	and.w	r3, r3, #2
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1ee      	bne.n	800dd8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d105      	bne.n	800ddc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ddb6:	4b52      	ldr	r3, [pc, #328]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800ddb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddba:	4a51      	ldr	r2, [pc, #324]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800ddbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ddc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f000 8092 	beq.w	800def0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ddcc:	4b4c      	ldr	r3, [pc, #304]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	f003 030c 	and.w	r3, r3, #12
 800ddd4:	2b08      	cmp	r3, #8
 800ddd6:	d05c      	beq.n	800de92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	699b      	ldr	r3, [r3, #24]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d141      	bne.n	800de64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dde0:	4b48      	ldr	r3, [pc, #288]	; (800df04 <HAL_RCC_OscConfig+0x4dc>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dde6:	f7fd fddd 	bl	800b9a4 <HAL_GetTick>
 800ddea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ddec:	e008      	b.n	800de00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ddee:	f7fd fdd9 	bl	800b9a4 <HAL_GetTick>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d901      	bls.n	800de00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e078      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de00:	4b3f      	ldr	r3, [pc, #252]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1f0      	bne.n	800ddee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	69da      	ldr	r2, [r3, #28]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6a1b      	ldr	r3, [r3, #32]
 800de14:	431a      	orrs	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1a:	019b      	lsls	r3, r3, #6
 800de1c:	431a      	orrs	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de22:	085b      	lsrs	r3, r3, #1
 800de24:	3b01      	subs	r3, #1
 800de26:	041b      	lsls	r3, r3, #16
 800de28:	431a      	orrs	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2e:	061b      	lsls	r3, r3, #24
 800de30:	4933      	ldr	r1, [pc, #204]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800de32:	4313      	orrs	r3, r2
 800de34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800de36:	4b33      	ldr	r3, [pc, #204]	; (800df04 <HAL_RCC_OscConfig+0x4dc>)
 800de38:	2201      	movs	r2, #1
 800de3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de3c:	f7fd fdb2 	bl	800b9a4 <HAL_GetTick>
 800de40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de42:	e008      	b.n	800de56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de44:	f7fd fdae 	bl	800b9a4 <HAL_GetTick>
 800de48:	4602      	mov	r2, r0
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	1ad3      	subs	r3, r2, r3
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d901      	bls.n	800de56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	e04d      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de56:	4b2a      	ldr	r3, [pc, #168]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d0f0      	beq.n	800de44 <HAL_RCC_OscConfig+0x41c>
 800de62:	e045      	b.n	800def0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de64:	4b27      	ldr	r3, [pc, #156]	; (800df04 <HAL_RCC_OscConfig+0x4dc>)
 800de66:	2200      	movs	r2, #0
 800de68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de6a:	f7fd fd9b 	bl	800b9a4 <HAL_GetTick>
 800de6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de70:	e008      	b.n	800de84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de72:	f7fd fd97 	bl	800b9a4 <HAL_GetTick>
 800de76:	4602      	mov	r2, r0
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d901      	bls.n	800de84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800de80:	2303      	movs	r3, #3
 800de82:	e036      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de84:	4b1e      	ldr	r3, [pc, #120]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1f0      	bne.n	800de72 <HAL_RCC_OscConfig+0x44a>
 800de90:	e02e      	b.n	800def0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d101      	bne.n	800de9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e029      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800de9e:	4b18      	ldr	r3, [pc, #96]	; (800df00 <HAL_RCC_OscConfig+0x4d8>)
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	69db      	ldr	r3, [r3, #28]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d11c      	bne.n	800deec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800debc:	429a      	cmp	r2, r3
 800debe:	d115      	bne.n	800deec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dec6:	4013      	ands	r3, r2
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800decc:	4293      	cmp	r3, r2
 800dece:	d10d      	bne.n	800deec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800deda:	429a      	cmp	r2, r3
 800dedc:	d106      	bne.n	800deec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dee8:	429a      	cmp	r2, r3
 800deea:	d001      	beq.n	800def0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	40007000 	.word	0x40007000
 800df00:	40023800 	.word	0x40023800
 800df04:	42470060 	.word	0x42470060

0800df08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d101      	bne.n	800df1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	e0cc      	b.n	800e0b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800df1c:	4b68      	ldr	r3, [pc, #416]	; (800e0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f003 030f 	and.w	r3, r3, #15
 800df24:	683a      	ldr	r2, [r7, #0]
 800df26:	429a      	cmp	r2, r3
 800df28:	d90c      	bls.n	800df44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df2a:	4b65      	ldr	r3, [pc, #404]	; (800e0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800df2c:	683a      	ldr	r2, [r7, #0]
 800df2e:	b2d2      	uxtb	r2, r2
 800df30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df32:	4b63      	ldr	r3, [pc, #396]	; (800e0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f003 030f 	and.w	r3, r3, #15
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d001      	beq.n	800df44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800df40:	2301      	movs	r3, #1
 800df42:	e0b8      	b.n	800e0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f003 0302 	and.w	r3, r3, #2
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d020      	beq.n	800df92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f003 0304 	and.w	r3, r3, #4
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d005      	beq.n	800df68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800df5c:	4b59      	ldr	r3, [pc, #356]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	4a58      	ldr	r2, [pc, #352]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800df62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800df66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f003 0308 	and.w	r3, r3, #8
 800df70:	2b00      	cmp	r3, #0
 800df72:	d005      	beq.n	800df80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800df74:	4b53      	ldr	r3, [pc, #332]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	4a52      	ldr	r2, [pc, #328]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800df7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800df7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df80:	4b50      	ldr	r3, [pc, #320]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	494d      	ldr	r1, [pc, #308]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800df8e:	4313      	orrs	r3, r2
 800df90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f003 0301 	and.w	r3, r3, #1
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d044      	beq.n	800e028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d107      	bne.n	800dfb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dfa6:	4b47      	ldr	r3, [pc, #284]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d119      	bne.n	800dfe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e07f      	b.n	800e0b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d003      	beq.n	800dfc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dfc2:	2b03      	cmp	r3, #3
 800dfc4:	d107      	bne.n	800dfd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dfc6:	4b3f      	ldr	r3, [pc, #252]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d109      	bne.n	800dfe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e06f      	b.n	800e0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dfd6:	4b3b      	ldr	r3, [pc, #236]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f003 0302 	and.w	r3, r3, #2
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d101      	bne.n	800dfe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e067      	b.n	800e0b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dfe6:	4b37      	ldr	r3, [pc, #220]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	f023 0203 	bic.w	r2, r3, #3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	4934      	ldr	r1, [pc, #208]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800dff4:	4313      	orrs	r3, r2
 800dff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dff8:	f7fd fcd4 	bl	800b9a4 <HAL_GetTick>
 800dffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dffe:	e00a      	b.n	800e016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e000:	f7fd fcd0 	bl	800b9a4 <HAL_GetTick>
 800e004:	4602      	mov	r2, r0
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e00e:	4293      	cmp	r3, r2
 800e010:	d901      	bls.n	800e016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e012:	2303      	movs	r3, #3
 800e014:	e04f      	b.n	800e0b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e016:	4b2b      	ldr	r3, [pc, #172]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	f003 020c 	and.w	r2, r3, #12
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	429a      	cmp	r2, r3
 800e026:	d1eb      	bne.n	800e000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e028:	4b25      	ldr	r3, [pc, #148]	; (800e0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f003 030f 	and.w	r3, r3, #15
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	429a      	cmp	r2, r3
 800e034:	d20c      	bcs.n	800e050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e036:	4b22      	ldr	r3, [pc, #136]	; (800e0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800e038:	683a      	ldr	r2, [r7, #0]
 800e03a:	b2d2      	uxtb	r2, r2
 800e03c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e03e:	4b20      	ldr	r3, [pc, #128]	; (800e0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f003 030f 	and.w	r3, r3, #15
 800e046:	683a      	ldr	r2, [r7, #0]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d001      	beq.n	800e050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
 800e04e:	e032      	b.n	800e0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f003 0304 	and.w	r3, r3, #4
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d008      	beq.n	800e06e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e05c:	4b19      	ldr	r3, [pc, #100]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	4916      	ldr	r1, [pc, #88]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800e06a:	4313      	orrs	r3, r2
 800e06c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 0308 	and.w	r3, r3, #8
 800e076:	2b00      	cmp	r3, #0
 800e078:	d009      	beq.n	800e08e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e07a:	4b12      	ldr	r3, [pc, #72]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	490e      	ldr	r1, [pc, #56]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800e08a:	4313      	orrs	r3, r2
 800e08c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e08e:	f000 f821 	bl	800e0d4 <HAL_RCC_GetSysClockFreq>
 800e092:	4602      	mov	r2, r0
 800e094:	4b0b      	ldr	r3, [pc, #44]	; (800e0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	091b      	lsrs	r3, r3, #4
 800e09a:	f003 030f 	and.w	r3, r3, #15
 800e09e:	490a      	ldr	r1, [pc, #40]	; (800e0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800e0a0:	5ccb      	ldrb	r3, [r1, r3]
 800e0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e0a6:	4a09      	ldr	r2, [pc, #36]	; (800e0cc <HAL_RCC_ClockConfig+0x1c4>)
 800e0a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e0aa:	4b09      	ldr	r3, [pc, #36]	; (800e0d0 <HAL_RCC_ClockConfig+0x1c8>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fd f8ee 	bl	800b290 <HAL_InitTick>

  return HAL_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	40023c00 	.word	0x40023c00
 800e0c4:	40023800 	.word	0x40023800
 800e0c8:	0801c800 	.word	0x0801c800
 800e0cc:	2000408c 	.word	0x2000408c
 800e0d0:	20004090 	.word	0x20004090

0800e0d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e0d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e0d8:	b084      	sub	sp, #16
 800e0da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	607b      	str	r3, [r7, #4]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	60fb      	str	r3, [r7, #12]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e0ec:	4b67      	ldr	r3, [pc, #412]	; (800e28c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	f003 030c 	and.w	r3, r3, #12
 800e0f4:	2b08      	cmp	r3, #8
 800e0f6:	d00d      	beq.n	800e114 <HAL_RCC_GetSysClockFreq+0x40>
 800e0f8:	2b08      	cmp	r3, #8
 800e0fa:	f200 80bd 	bhi.w	800e278 <HAL_RCC_GetSysClockFreq+0x1a4>
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <HAL_RCC_GetSysClockFreq+0x34>
 800e102:	2b04      	cmp	r3, #4
 800e104:	d003      	beq.n	800e10e <HAL_RCC_GetSysClockFreq+0x3a>
 800e106:	e0b7      	b.n	800e278 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e108:	4b61      	ldr	r3, [pc, #388]	; (800e290 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e10a:	60bb      	str	r3, [r7, #8]
       break;
 800e10c:	e0b7      	b.n	800e27e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e10e:	4b61      	ldr	r3, [pc, #388]	; (800e294 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800e110:	60bb      	str	r3, [r7, #8]
      break;
 800e112:	e0b4      	b.n	800e27e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e114:	4b5d      	ldr	r3, [pc, #372]	; (800e28c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e11c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e11e:	4b5b      	ldr	r3, [pc, #364]	; (800e28c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e126:	2b00      	cmp	r3, #0
 800e128:	d04d      	beq.n	800e1c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e12a:	4b58      	ldr	r3, [pc, #352]	; (800e28c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	099b      	lsrs	r3, r3, #6
 800e130:	461a      	mov	r2, r3
 800e132:	f04f 0300 	mov.w	r3, #0
 800e136:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e13a:	f04f 0100 	mov.w	r1, #0
 800e13e:	ea02 0800 	and.w	r8, r2, r0
 800e142:	ea03 0901 	and.w	r9, r3, r1
 800e146:	4640      	mov	r0, r8
 800e148:	4649      	mov	r1, r9
 800e14a:	f04f 0200 	mov.w	r2, #0
 800e14e:	f04f 0300 	mov.w	r3, #0
 800e152:	014b      	lsls	r3, r1, #5
 800e154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e158:	0142      	lsls	r2, r0, #5
 800e15a:	4610      	mov	r0, r2
 800e15c:	4619      	mov	r1, r3
 800e15e:	ebb0 0008 	subs.w	r0, r0, r8
 800e162:	eb61 0109 	sbc.w	r1, r1, r9
 800e166:	f04f 0200 	mov.w	r2, #0
 800e16a:	f04f 0300 	mov.w	r3, #0
 800e16e:	018b      	lsls	r3, r1, #6
 800e170:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e174:	0182      	lsls	r2, r0, #6
 800e176:	1a12      	subs	r2, r2, r0
 800e178:	eb63 0301 	sbc.w	r3, r3, r1
 800e17c:	f04f 0000 	mov.w	r0, #0
 800e180:	f04f 0100 	mov.w	r1, #0
 800e184:	00d9      	lsls	r1, r3, #3
 800e186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e18a:	00d0      	lsls	r0, r2, #3
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	eb12 0208 	adds.w	r2, r2, r8
 800e194:	eb43 0309 	adc.w	r3, r3, r9
 800e198:	f04f 0000 	mov.w	r0, #0
 800e19c:	f04f 0100 	mov.w	r1, #0
 800e1a0:	0259      	lsls	r1, r3, #9
 800e1a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e1a6:	0250      	lsls	r0, r2, #9
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	f04f 0300 	mov.w	r3, #0
 800e1b8:	f7f2 fd66 	bl	8000c88 <__aeabi_uldivmod>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	460b      	mov	r3, r1
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	60fb      	str	r3, [r7, #12]
 800e1c4:	e04a      	b.n	800e25c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e1c6:	4b31      	ldr	r3, [pc, #196]	; (800e28c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	099b      	lsrs	r3, r3, #6
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	f04f 0300 	mov.w	r3, #0
 800e1d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e1d6:	f04f 0100 	mov.w	r1, #0
 800e1da:	ea02 0400 	and.w	r4, r2, r0
 800e1de:	ea03 0501 	and.w	r5, r3, r1
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	4629      	mov	r1, r5
 800e1e6:	f04f 0200 	mov.w	r2, #0
 800e1ea:	f04f 0300 	mov.w	r3, #0
 800e1ee:	014b      	lsls	r3, r1, #5
 800e1f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e1f4:	0142      	lsls	r2, r0, #5
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	1b00      	subs	r0, r0, r4
 800e1fc:	eb61 0105 	sbc.w	r1, r1, r5
 800e200:	f04f 0200 	mov.w	r2, #0
 800e204:	f04f 0300 	mov.w	r3, #0
 800e208:	018b      	lsls	r3, r1, #6
 800e20a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e20e:	0182      	lsls	r2, r0, #6
 800e210:	1a12      	subs	r2, r2, r0
 800e212:	eb63 0301 	sbc.w	r3, r3, r1
 800e216:	f04f 0000 	mov.w	r0, #0
 800e21a:	f04f 0100 	mov.w	r1, #0
 800e21e:	00d9      	lsls	r1, r3, #3
 800e220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e224:	00d0      	lsls	r0, r2, #3
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	1912      	adds	r2, r2, r4
 800e22c:	eb45 0303 	adc.w	r3, r5, r3
 800e230:	f04f 0000 	mov.w	r0, #0
 800e234:	f04f 0100 	mov.w	r1, #0
 800e238:	0299      	lsls	r1, r3, #10
 800e23a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e23e:	0290      	lsls	r0, r2, #10
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	4610      	mov	r0, r2
 800e246:	4619      	mov	r1, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	461a      	mov	r2, r3
 800e24c:	f04f 0300 	mov.w	r3, #0
 800e250:	f7f2 fd1a 	bl	8000c88 <__aeabi_uldivmod>
 800e254:	4602      	mov	r2, r0
 800e256:	460b      	mov	r3, r1
 800e258:	4613      	mov	r3, r2
 800e25a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e25c:	4b0b      	ldr	r3, [pc, #44]	; (800e28c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	0c1b      	lsrs	r3, r3, #16
 800e262:	f003 0303 	and.w	r3, r3, #3
 800e266:	3301      	adds	r3, #1
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	fbb2 f3f3 	udiv	r3, r2, r3
 800e274:	60bb      	str	r3, [r7, #8]
      break;
 800e276:	e002      	b.n	800e27e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e278:	4b05      	ldr	r3, [pc, #20]	; (800e290 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e27a:	60bb      	str	r3, [r7, #8]
      break;
 800e27c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e27e:	68bb      	ldr	r3, [r7, #8]
}
 800e280:	4618      	mov	r0, r3
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e28a:	bf00      	nop
 800e28c:	40023800 	.word	0x40023800
 800e290:	00f42400 	.word	0x00f42400
 800e294:	007a1200 	.word	0x007a1200

0800e298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e298:	b480      	push	{r7}
 800e29a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e29c:	4b03      	ldr	r3, [pc, #12]	; (800e2ac <HAL_RCC_GetHCLKFreq+0x14>)
 800e29e:	681b      	ldr	r3, [r3, #0]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	2000408c 	.word	0x2000408c

0800e2b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e2b4:	f7ff fff0 	bl	800e298 <HAL_RCC_GetHCLKFreq>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	4b05      	ldr	r3, [pc, #20]	; (800e2d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	0a9b      	lsrs	r3, r3, #10
 800e2c0:	f003 0307 	and.w	r3, r3, #7
 800e2c4:	4903      	ldr	r1, [pc, #12]	; (800e2d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e2c6:	5ccb      	ldrb	r3, [r1, r3]
 800e2c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	40023800 	.word	0x40023800
 800e2d4:	0801c810 	.word	0x0801c810

0800e2d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e2dc:	f7ff ffdc 	bl	800e298 <HAL_RCC_GetHCLKFreq>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	4b05      	ldr	r3, [pc, #20]	; (800e2f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	0b5b      	lsrs	r3, r3, #13
 800e2e8:	f003 0307 	and.w	r3, r3, #7
 800e2ec:	4903      	ldr	r1, [pc, #12]	; (800e2fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e2ee:	5ccb      	ldrb	r3, [r1, r3]
 800e2f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	40023800 	.word	0x40023800
 800e2fc:	0801c810 	.word	0x0801c810

0800e300 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	220f      	movs	r2, #15
 800e30e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e310:	4b12      	ldr	r3, [pc, #72]	; (800e35c <HAL_RCC_GetClockConfig+0x5c>)
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	f003 0203 	and.w	r2, r3, #3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e31c:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <HAL_RCC_GetClockConfig+0x5c>)
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e328:	4b0c      	ldr	r3, [pc, #48]	; (800e35c <HAL_RCC_GetClockConfig+0x5c>)
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e334:	4b09      	ldr	r3, [pc, #36]	; (800e35c <HAL_RCC_GetClockConfig+0x5c>)
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	08db      	lsrs	r3, r3, #3
 800e33a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e342:	4b07      	ldr	r3, [pc, #28]	; (800e360 <HAL_RCC_GetClockConfig+0x60>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f003 020f 	and.w	r2, r3, #15
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	601a      	str	r2, [r3, #0]
}
 800e34e:	bf00      	nop
 800e350:	370c      	adds	r7, #12
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	40023800 	.word	0x40023800
 800e360:	40023c00 	.word	0x40023c00

0800e364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d101      	bne.n	800e376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e372:	2301      	movs	r3, #1
 800e374:	e01d      	b.n	800e3b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d106      	bne.n	800e390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7fd f99a 	bl	800b6c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2202      	movs	r2, #2
 800e394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3304      	adds	r3, #4
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	f000 fa46 	bl	800e834 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3708      	adds	r7, #8
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e3ba:	b480      	push	{r7}
 800e3bc:	b085      	sub	sp, #20
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2202      	movs	r2, #2
 800e3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	f003 0307 	and.w	r3, r3, #7
 800e3d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b06      	cmp	r3, #6
 800e3da:	d007      	beq.n	800e3ec <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f042 0201 	orr.w	r2, r2, #1
 800e3ea:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3714      	adds	r7, #20
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e402:	b480      	push	{r7}
 800e404:	b085      	sub	sp, #20
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	68da      	ldr	r2, [r3, #12]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f042 0201 	orr.w	r2, r2, #1
 800e418:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	f003 0307 	and.w	r3, r3, #7
 800e424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b06      	cmp	r3, #6
 800e42a:	d007      	beq.n	800e43c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0201 	orr.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3714      	adds	r7, #20
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr

0800e44a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b082      	sub	sp, #8
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	691b      	ldr	r3, [r3, #16]
 800e458:	f003 0302 	and.w	r3, r3, #2
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d122      	bne.n	800e4a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	f003 0302 	and.w	r3, r3, #2
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d11b      	bne.n	800e4a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f06f 0202 	mvn.w	r2, #2
 800e476:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2201      	movs	r2, #1
 800e47c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	f003 0303 	and.w	r3, r3, #3
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f9b2 	bl	800e7f6 <HAL_TIM_IC_CaptureCallback>
 800e492:	e005      	b.n	800e4a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f9a4 	bl	800e7e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f9b5 	bl	800e80a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	f003 0304 	and.w	r3, r3, #4
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d122      	bne.n	800e4fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	f003 0304 	and.w	r3, r3, #4
 800e4be:	2b04      	cmp	r3, #4
 800e4c0:	d11b      	bne.n	800e4fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f06f 0204 	mvn.w	r2, #4
 800e4ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2202      	movs	r2, #2
 800e4d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	699b      	ldr	r3, [r3, #24]
 800e4d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d003      	beq.n	800e4e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 f988 	bl	800e7f6 <HAL_TIM_IC_CaptureCallback>
 800e4e6:	e005      	b.n	800e4f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f97a 	bl	800e7e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 f98b 	bl	800e80a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	f003 0308 	and.w	r3, r3, #8
 800e504:	2b08      	cmp	r3, #8
 800e506:	d122      	bne.n	800e54e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	f003 0308 	and.w	r3, r3, #8
 800e512:	2b08      	cmp	r3, #8
 800e514:	d11b      	bne.n	800e54e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f06f 0208 	mvn.w	r2, #8
 800e51e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2204      	movs	r2, #4
 800e524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	69db      	ldr	r3, [r3, #28]
 800e52c:	f003 0303 	and.w	r3, r3, #3
 800e530:	2b00      	cmp	r3, #0
 800e532:	d003      	beq.n	800e53c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 f95e 	bl	800e7f6 <HAL_TIM_IC_CaptureCallback>
 800e53a:	e005      	b.n	800e548 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f950 	bl	800e7e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 f961 	bl	800e80a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	f003 0310 	and.w	r3, r3, #16
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d122      	bne.n	800e5a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	f003 0310 	and.w	r3, r3, #16
 800e566:	2b10      	cmp	r3, #16
 800e568:	d11b      	bne.n	800e5a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f06f 0210 	mvn.w	r2, #16
 800e572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2208      	movs	r2, #8
 800e578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	69db      	ldr	r3, [r3, #28]
 800e580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e584:	2b00      	cmp	r3, #0
 800e586:	d003      	beq.n	800e590 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f934 	bl	800e7f6 <HAL_TIM_IC_CaptureCallback>
 800e58e:	e005      	b.n	800e59c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 f926 	bl	800e7e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 f937 	bl	800e80a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	691b      	ldr	r3, [r3, #16]
 800e5a8:	f003 0301 	and.w	r3, r3, #1
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d10e      	bne.n	800e5ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	f003 0301 	and.w	r3, r3, #1
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d107      	bne.n	800e5ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f06f 0201 	mvn.w	r2, #1
 800e5c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7f7 fb5d 	bl	8005c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5d8:	2b80      	cmp	r3, #128	; 0x80
 800e5da:	d10e      	bne.n	800e5fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5e6:	2b80      	cmp	r3, #128	; 0x80
 800e5e8:	d107      	bne.n	800e5fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fadd 	bl	800ebb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e604:	2b40      	cmp	r3, #64	; 0x40
 800e606:	d10e      	bne.n	800e626 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e612:	2b40      	cmp	r3, #64	; 0x40
 800e614:	d107      	bne.n	800e626 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f8fc 	bl	800e81e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	f003 0320 	and.w	r3, r3, #32
 800e630:	2b20      	cmp	r3, #32
 800e632:	d10e      	bne.n	800e652 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	f003 0320 	and.w	r3, r3, #32
 800e63e:	2b20      	cmp	r3, #32
 800e640:	d107      	bne.n	800e652 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f06f 0220 	mvn.w	r2, #32
 800e64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 faa7 	bl	800eba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e652:	bf00      	nop
 800e654:	3708      	adds	r7, #8
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b084      	sub	sp, #16
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d101      	bne.n	800e672 <HAL_TIM_ConfigClockSource+0x18>
 800e66e:	2302      	movs	r3, #2
 800e670:	e0b3      	b.n	800e7da <HAL_TIM_ConfigClockSource+0x180>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2201      	movs	r2, #1
 800e676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2202      	movs	r2, #2
 800e67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e690:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e698:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6aa:	d03e      	beq.n	800e72a <HAL_TIM_ConfigClockSource+0xd0>
 800e6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6b0:	f200 8087 	bhi.w	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
 800e6b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6b8:	f000 8085 	beq.w	800e7c6 <HAL_TIM_ConfigClockSource+0x16c>
 800e6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6c0:	d87f      	bhi.n	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
 800e6c2:	2b70      	cmp	r3, #112	; 0x70
 800e6c4:	d01a      	beq.n	800e6fc <HAL_TIM_ConfigClockSource+0xa2>
 800e6c6:	2b70      	cmp	r3, #112	; 0x70
 800e6c8:	d87b      	bhi.n	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
 800e6ca:	2b60      	cmp	r3, #96	; 0x60
 800e6cc:	d050      	beq.n	800e770 <HAL_TIM_ConfigClockSource+0x116>
 800e6ce:	2b60      	cmp	r3, #96	; 0x60
 800e6d0:	d877      	bhi.n	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
 800e6d2:	2b50      	cmp	r3, #80	; 0x50
 800e6d4:	d03c      	beq.n	800e750 <HAL_TIM_ConfigClockSource+0xf6>
 800e6d6:	2b50      	cmp	r3, #80	; 0x50
 800e6d8:	d873      	bhi.n	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
 800e6da:	2b40      	cmp	r3, #64	; 0x40
 800e6dc:	d058      	beq.n	800e790 <HAL_TIM_ConfigClockSource+0x136>
 800e6de:	2b40      	cmp	r3, #64	; 0x40
 800e6e0:	d86f      	bhi.n	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
 800e6e2:	2b30      	cmp	r3, #48	; 0x30
 800e6e4:	d064      	beq.n	800e7b0 <HAL_TIM_ConfigClockSource+0x156>
 800e6e6:	2b30      	cmp	r3, #48	; 0x30
 800e6e8:	d86b      	bhi.n	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
 800e6ea:	2b20      	cmp	r3, #32
 800e6ec:	d060      	beq.n	800e7b0 <HAL_TIM_ConfigClockSource+0x156>
 800e6ee:	2b20      	cmp	r3, #32
 800e6f0:	d867      	bhi.n	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d05c      	beq.n	800e7b0 <HAL_TIM_ConfigClockSource+0x156>
 800e6f6:	2b10      	cmp	r3, #16
 800e6f8:	d05a      	beq.n	800e7b0 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e6fa:	e062      	b.n	800e7c2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6818      	ldr	r0, [r3, #0]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	6899      	ldr	r1, [r3, #8]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	685a      	ldr	r2, [r3, #4]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	f000 f9ac 	bl	800ea68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e71e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	609a      	str	r2, [r3, #8]
      break;
 800e728:	e04e      	b.n	800e7c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6818      	ldr	r0, [r3, #0]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	6899      	ldr	r1, [r3, #8]
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	685a      	ldr	r2, [r3, #4]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	f000 f995 	bl	800ea68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	689a      	ldr	r2, [r3, #8]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e74c:	609a      	str	r2, [r3, #8]
      break;
 800e74e:	e03b      	b.n	800e7c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6818      	ldr	r0, [r3, #0]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	6859      	ldr	r1, [r3, #4]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	461a      	mov	r2, r3
 800e75e:	f000 f909 	bl	800e974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2150      	movs	r1, #80	; 0x50
 800e768:	4618      	mov	r0, r3
 800e76a:	f000 f962 	bl	800ea32 <TIM_ITRx_SetConfig>
      break;
 800e76e:	e02b      	b.n	800e7c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6818      	ldr	r0, [r3, #0]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	6859      	ldr	r1, [r3, #4]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	461a      	mov	r2, r3
 800e77e:	f000 f928 	bl	800e9d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2160      	movs	r1, #96	; 0x60
 800e788:	4618      	mov	r0, r3
 800e78a:	f000 f952 	bl	800ea32 <TIM_ITRx_SetConfig>
      break;
 800e78e:	e01b      	b.n	800e7c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6818      	ldr	r0, [r3, #0]
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	6859      	ldr	r1, [r3, #4]
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	461a      	mov	r2, r3
 800e79e:	f000 f8e9 	bl	800e974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2140      	movs	r1, #64	; 0x40
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f000 f942 	bl	800ea32 <TIM_ITRx_SetConfig>
      break;
 800e7ae:	e00b      	b.n	800e7c8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	f000 f939 	bl	800ea32 <TIM_ITRx_SetConfig>
      break;
 800e7c0:	e002      	b.n	800e7c8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e7c2:	bf00      	nop
 800e7c4:	e000      	b.n	800e7c8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e7c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7e2:	b480      	push	{r7}
 800e7e4:	b083      	sub	sp, #12
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e7ea:	bf00      	nop
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e7f6:	b480      	push	{r7}
 800e7f8:	b083      	sub	sp, #12
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7fe:	bf00      	nop
 800e800:	370c      	adds	r7, #12
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr

0800e80a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e80a:	b480      	push	{r7}
 800e80c:	b083      	sub	sp, #12
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e812:	bf00      	nop
 800e814:	370c      	adds	r7, #12
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr

0800e81e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e81e:	b480      	push	{r7}
 800e820:	b083      	sub	sp, #12
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e826:	bf00      	nop
 800e828:	370c      	adds	r7, #12
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
	...

0800e834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a40      	ldr	r2, [pc, #256]	; (800e948 <TIM_Base_SetConfig+0x114>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d013      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e852:	d00f      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a3d      	ldr	r2, [pc, #244]	; (800e94c <TIM_Base_SetConfig+0x118>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d00b      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a3c      	ldr	r2, [pc, #240]	; (800e950 <TIM_Base_SetConfig+0x11c>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d007      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a3b      	ldr	r2, [pc, #236]	; (800e954 <TIM_Base_SetConfig+0x120>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d003      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a3a      	ldr	r2, [pc, #232]	; (800e958 <TIM_Base_SetConfig+0x124>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d108      	bne.n	800e886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e87a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	4313      	orrs	r3, r2
 800e884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4a2f      	ldr	r2, [pc, #188]	; (800e948 <TIM_Base_SetConfig+0x114>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d02b      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e894:	d027      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4a2c      	ldr	r2, [pc, #176]	; (800e94c <TIM_Base_SetConfig+0x118>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d023      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a2b      	ldr	r2, [pc, #172]	; (800e950 <TIM_Base_SetConfig+0x11c>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d01f      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4a2a      	ldr	r2, [pc, #168]	; (800e954 <TIM_Base_SetConfig+0x120>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d01b      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4a29      	ldr	r2, [pc, #164]	; (800e958 <TIM_Base_SetConfig+0x124>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d017      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4a28      	ldr	r2, [pc, #160]	; (800e95c <TIM_Base_SetConfig+0x128>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d013      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4a27      	ldr	r2, [pc, #156]	; (800e960 <TIM_Base_SetConfig+0x12c>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d00f      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4a26      	ldr	r2, [pc, #152]	; (800e964 <TIM_Base_SetConfig+0x130>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d00b      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a25      	ldr	r2, [pc, #148]	; (800e968 <TIM_Base_SetConfig+0x134>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d007      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	4a24      	ldr	r2, [pc, #144]	; (800e96c <TIM_Base_SetConfig+0x138>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d003      	beq.n	800e8e6 <TIM_Base_SetConfig+0xb2>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4a23      	ldr	r2, [pc, #140]	; (800e970 <TIM_Base_SetConfig+0x13c>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d108      	bne.n	800e8f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	4313      	orrs	r3, r2
 800e904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	689a      	ldr	r2, [r3, #8]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a0a      	ldr	r2, [pc, #40]	; (800e948 <TIM_Base_SetConfig+0x114>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d003      	beq.n	800e92c <TIM_Base_SetConfig+0xf8>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a0c      	ldr	r2, [pc, #48]	; (800e958 <TIM_Base_SetConfig+0x124>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d103      	bne.n	800e934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	691a      	ldr	r2, [r3, #16]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	615a      	str	r2, [r3, #20]
}
 800e93a:	bf00      	nop
 800e93c:	3714      	adds	r7, #20
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	40010000 	.word	0x40010000
 800e94c:	40000400 	.word	0x40000400
 800e950:	40000800 	.word	0x40000800
 800e954:	40000c00 	.word	0x40000c00
 800e958:	40010400 	.word	0x40010400
 800e95c:	40014000 	.word	0x40014000
 800e960:	40014400 	.word	0x40014400
 800e964:	40014800 	.word	0x40014800
 800e968:	40001800 	.word	0x40001800
 800e96c:	40001c00 	.word	0x40001c00
 800e970:	40002000 	.word	0x40002000

0800e974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e974:	b480      	push	{r7}
 800e976:	b087      	sub	sp, #28
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6a1b      	ldr	r3, [r3, #32]
 800e984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	f023 0201 	bic.w	r2, r3, #1
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e99e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	011b      	lsls	r3, r3, #4
 800e9a4:	693a      	ldr	r2, [r7, #16]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	f023 030a 	bic.w	r3, r3, #10
 800e9b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e9b2:	697a      	ldr	r2, [r7, #20]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	693a      	ldr	r2, [r7, #16]
 800e9be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	621a      	str	r2, [r3, #32]
}
 800e9c6:	bf00      	nop
 800e9c8:	371c      	adds	r7, #28
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr

0800e9d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b087      	sub	sp, #28
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	60f8      	str	r0, [r7, #12]
 800e9da:	60b9      	str	r1, [r7, #8]
 800e9dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6a1b      	ldr	r3, [r3, #32]
 800e9e2:	f023 0210 	bic.w	r2, r3, #16
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6a1b      	ldr	r3, [r3, #32]
 800e9f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e9fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	031b      	lsls	r3, r3, #12
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ea0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	011b      	lsls	r3, r3, #4
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	697a      	ldr	r2, [r7, #20]
 800ea1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	693a      	ldr	r2, [r7, #16]
 800ea24:	621a      	str	r2, [r3, #32]
}
 800ea26:	bf00      	nop
 800ea28:	371c      	adds	r7, #28
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b085      	sub	sp, #20
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	f043 0307 	orr.w	r3, r3, #7
 800ea54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	609a      	str	r2, [r3, #8]
}
 800ea5c:	bf00      	nop
 800ea5e:	3714      	adds	r7, #20
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	021a      	lsls	r2, r3, #8
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	697a      	ldr	r2, [r7, #20]
 800ea9a:	609a      	str	r2, [r3, #8]
}
 800ea9c:	bf00      	nop
 800ea9e:	371c      	adds	r7, #28
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d101      	bne.n	800eac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eabc:	2302      	movs	r3, #2
 800eabe:	e05a      	b.n	800eb76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2202      	movs	r2, #2
 800eacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4a21      	ldr	r2, [pc, #132]	; (800eb84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d022      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb0c:	d01d      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4a1d      	ldr	r2, [pc, #116]	; (800eb88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d018      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4a1b      	ldr	r2, [pc, #108]	; (800eb8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d013      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4a1a      	ldr	r2, [pc, #104]	; (800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d00e      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a18      	ldr	r2, [pc, #96]	; (800eb94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d009      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4a17      	ldr	r2, [pc, #92]	; (800eb98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d004      	beq.n	800eb4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a15      	ldr	r2, [pc, #84]	; (800eb9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d10c      	bne.n	800eb64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68ba      	ldr	r2, [r7, #8]
 800eb62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	40010000 	.word	0x40010000
 800eb88:	40000400 	.word	0x40000400
 800eb8c:	40000800 	.word	0x40000800
 800eb90:	40000c00 	.word	0x40000c00
 800eb94:	40010400 	.word	0x40010400
 800eb98:	40014000 	.word	0x40014000
 800eb9c:	40001800 	.word	0x40001800

0800eba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eba8:	bf00      	nop
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ebbc:	bf00      	nop
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d101      	bne.n	800ebda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e03f      	b.n	800ec5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d106      	bne.n	800ebf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7fc fdce 	bl	800b790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2224      	movs	r2, #36	; 0x24
 800ebf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68da      	ldr	r2, [r3, #12]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ec0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 fb6b 	bl	800f2e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	691a      	ldr	r2, [r3, #16]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	695a      	ldr	r2, [r3, #20]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ec30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ec40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2220      	movs	r2, #32
 800ec4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2220      	movs	r2, #32
 800ec54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
	...

0800ec64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	4613      	mov	r3, r2
 800ec70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	2b20      	cmp	r3, #32
 800ec7c:	d153      	bne.n	800ed26 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d002      	beq.n	800ec8a <HAL_UART_Transmit_DMA+0x26>
 800ec84:	88fb      	ldrh	r3, [r7, #6]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e04c      	b.n	800ed28 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d101      	bne.n	800ec9c <HAL_UART_Transmit_DMA+0x38>
 800ec98:	2302      	movs	r3, #2
 800ec9a:	e045      	b.n	800ed28 <HAL_UART_Transmit_DMA+0xc4>
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	88fa      	ldrh	r2, [r7, #6]
 800ecae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	88fa      	ldrh	r2, [r7, #6]
 800ecb4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2221      	movs	r2, #33	; 0x21
 800ecc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc8:	4a19      	ldr	r2, [pc, #100]	; (800ed30 <HAL_UART_Transmit_DMA+0xcc>)
 800ecca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd0:	4a18      	ldr	r2, [pc, #96]	; (800ed34 <HAL_UART_Transmit_DMA+0xd0>)
 800ecd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd8:	4a17      	ldr	r2, [pc, #92]	; (800ed38 <HAL_UART_Transmit_DMA+0xd4>)
 800ecda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece0:	2200      	movs	r2, #0
 800ece2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ece4:	f107 0308 	add.w	r3, r7, #8
 800ece8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	6819      	ldr	r1, [r3, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	3304      	adds	r3, #4
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	88fb      	ldrh	r3, [r7, #6]
 800ecfc:	f7fd f812 	bl	800bd24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	695a      	ldr	r2, [r3, #20]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ed20:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	e000      	b.n	800ed28 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ed26:	2302      	movs	r3, #2
  }
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3718      	adds	r7, #24
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	0800ef79 	.word	0x0800ef79
 800ed34:	0800efcb 	.word	0x0800efcb
 800ed38:	0800efe7 	.word	0x0800efe7

0800ed3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b088      	sub	sp, #32
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	695b      	ldr	r3, [r3, #20]
 800ed5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ed60:	2300      	movs	r3, #0
 800ed62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	f003 030f 	and.w	r3, r3, #15
 800ed6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10d      	bne.n	800ed8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	f003 0320 	and.w	r3, r3, #32
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d008      	beq.n	800ed8e <HAL_UART_IRQHandler+0x52>
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	f003 0320 	and.w	r3, r3, #32
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d003      	beq.n	800ed8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 fa2d 	bl	800f1e6 <UART_Receive_IT>
      return;
 800ed8c:	e0d0      	b.n	800ef30 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f000 80b0 	beq.w	800eef6 <HAL_UART_IRQHandler+0x1ba>
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f003 0301 	and.w	r3, r3, #1
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d105      	bne.n	800edac <HAL_UART_IRQHandler+0x70>
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 80a5 	beq.w	800eef6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d00a      	beq.n	800edcc <HAL_UART_IRQHandler+0x90>
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d005      	beq.n	800edcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edc4:	f043 0201 	orr.w	r2, r3, #1
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	f003 0304 	and.w	r3, r3, #4
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00a      	beq.n	800edec <HAL_UART_IRQHandler+0xb0>
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f003 0301 	and.w	r3, r3, #1
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d005      	beq.n	800edec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ede4:	f043 0202 	orr.w	r2, r3, #2
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	f003 0302 	and.w	r3, r3, #2
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00a      	beq.n	800ee0c <HAL_UART_IRQHandler+0xd0>
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	f003 0301 	and.w	r3, r3, #1
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d005      	beq.n	800ee0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee04:	f043 0204 	orr.w	r2, r3, #4
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	f003 0308 	and.w	r3, r3, #8
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00f      	beq.n	800ee36 <HAL_UART_IRQHandler+0xfa>
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	f003 0320 	and.w	r3, r3, #32
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d104      	bne.n	800ee2a <HAL_UART_IRQHandler+0xee>
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d005      	beq.n	800ee36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee2e:	f043 0208 	orr.w	r2, r3, #8
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d077      	beq.n	800ef2e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	f003 0320 	and.w	r3, r3, #32
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d007      	beq.n	800ee58 <HAL_UART_IRQHandler+0x11c>
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	f003 0320 	and.w	r3, r3, #32
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d002      	beq.n	800ee58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 f9c7 	bl	800f1e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee62:	2b40      	cmp	r3, #64	; 0x40
 800ee64:	bf0c      	ite	eq
 800ee66:	2301      	moveq	r3, #1
 800ee68:	2300      	movne	r3, #0
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee72:	f003 0308 	and.w	r3, r3, #8
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d102      	bne.n	800ee80 <HAL_UART_IRQHandler+0x144>
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d031      	beq.n	800eee4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 f910 	bl	800f0a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	695b      	ldr	r3, [r3, #20]
 800ee8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee90:	2b40      	cmp	r3, #64	; 0x40
 800ee92:	d123      	bne.n	800eedc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	695a      	ldr	r2, [r3, #20]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eea2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d013      	beq.n	800eed4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeb0:	4a21      	ldr	r2, [pc, #132]	; (800ef38 <HAL_UART_IRQHandler+0x1fc>)
 800eeb2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fc ff8b 	bl	800bdd4 <HAL_DMA_Abort_IT>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d016      	beq.n	800eef2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eece:	4610      	mov	r0, r2
 800eed0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eed2:	e00e      	b.n	800eef2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 f845 	bl	800ef64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeda:	e00a      	b.n	800eef2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 f841 	bl	800ef64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eee2:	e006      	b.n	800eef2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 f83d 	bl	800ef64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800eef0:	e01d      	b.n	800ef2e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eef2:	bf00      	nop
    return;
 800eef4:	e01b      	b.n	800ef2e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d008      	beq.n	800ef12 <HAL_UART_IRQHandler+0x1d6>
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 f8fd 	bl	800f10a <UART_Transmit_IT>
    return;
 800ef10:	e00e      	b.n	800ef30 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d009      	beq.n	800ef30 <HAL_UART_IRQHandler+0x1f4>
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d004      	beq.n	800ef30 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f945 	bl	800f1b6 <UART_EndTransmit_IT>
    return;
 800ef2c:	e000      	b.n	800ef30 <HAL_UART_IRQHandler+0x1f4>
    return;
 800ef2e:	bf00      	nop
  }
}
 800ef30:	3720      	adds	r7, #32
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	0800f0e3 	.word	0x0800f0e3

0800ef3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ef44:	bf00      	nop
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ef58:	bf00      	nop
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef84:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d113      	bne.n	800efbc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	695a      	ldr	r2, [r3, #20]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800efa8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68da      	ldr	r2, [r3, #12]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800efb8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800efba:	e002      	b.n	800efc2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f7fc fc69 	bl	800b894 <HAL_UART_TxCpltCallback>
}
 800efc2:	bf00      	nop
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b084      	sub	sp, #16
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f7ff ffaf 	bl	800ef3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800efde:	bf00      	nop
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b084      	sub	sp, #16
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800efee:	2300      	movs	r3, #0
 800eff0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eff6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	695b      	ldr	r3, [r3, #20]
 800effe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f002:	2b80      	cmp	r3, #128	; 0x80
 800f004:	bf0c      	ite	eq
 800f006:	2301      	moveq	r3, #1
 800f008:	2300      	movne	r3, #0
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b21      	cmp	r3, #33	; 0x21
 800f018:	d108      	bne.n	800f02c <UART_DMAError+0x46>
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d005      	beq.n	800f02c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2200      	movs	r2, #0
 800f024:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f026:	68b8      	ldr	r0, [r7, #8]
 800f028:	f000 f827 	bl	800f07a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	695b      	ldr	r3, [r3, #20]
 800f032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f036:	2b40      	cmp	r3, #64	; 0x40
 800f038:	bf0c      	ite	eq
 800f03a:	2301      	moveq	r3, #1
 800f03c:	2300      	movne	r3, #0
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	2b22      	cmp	r3, #34	; 0x22
 800f04c:	d108      	bne.n	800f060 <UART_DMAError+0x7a>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d005      	beq.n	800f060 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	2200      	movs	r2, #0
 800f058:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f05a:	68b8      	ldr	r0, [r7, #8]
 800f05c:	f000 f823 	bl	800f0a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f064:	f043 0210 	orr.w	r2, r3, #16
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f06c:	68b8      	ldr	r0, [r7, #8]
 800f06e:	f7ff ff79 	bl	800ef64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f072:	bf00      	nop
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f07a:	b480      	push	{r7}
 800f07c:	b083      	sub	sp, #12
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	68da      	ldr	r2, [r3, #12]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f090:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2220      	movs	r2, #32
 800f096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800f09a:	bf00      	nop
 800f09c:	370c      	adds	r7, #12
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr

0800f0a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f0a6:	b480      	push	{r7}
 800f0a8:	b083      	sub	sp, #12
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68da      	ldr	r2, [r3, #12]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f0bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	695a      	ldr	r2, [r3, #20]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f022 0201 	bic.w	r2, r2, #1
 800f0cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2220      	movs	r2, #32
 800f0d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800f0d6:	bf00      	nop
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b084      	sub	sp, #16
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f0fc:	68f8      	ldr	r0, [r7, #12]
 800f0fe:	f7ff ff31 	bl	800ef64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f102:	bf00      	nop
 800f104:	3710      	adds	r7, #16
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f10a:	b480      	push	{r7}
 800f10c:	b085      	sub	sp, #20
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	2b21      	cmp	r3, #33	; 0x21
 800f11c:	d144      	bne.n	800f1a8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f126:	d11a      	bne.n	800f15e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6a1b      	ldr	r3, [r3, #32]
 800f12c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	461a      	mov	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f13c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d105      	bne.n	800f152 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	1c9a      	adds	r2, r3, #2
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	621a      	str	r2, [r3, #32]
 800f150:	e00e      	b.n	800f170 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	1c5a      	adds	r2, r3, #1
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	621a      	str	r2, [r3, #32]
 800f15c:	e008      	b.n	800f170 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	1c59      	adds	r1, r3, #1
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	6211      	str	r1, [r2, #32]
 800f168:	781a      	ldrb	r2, [r3, #0]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f174:	b29b      	uxth	r3, r3
 800f176:	3b01      	subs	r3, #1
 800f178:	b29b      	uxth	r3, r3
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	4619      	mov	r1, r3
 800f17e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f180:	2b00      	cmp	r3, #0
 800f182:	d10f      	bne.n	800f1a4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68da      	ldr	r2, [r3, #12]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f192:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	68da      	ldr	r2, [r3, #12]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	e000      	b.n	800f1aa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f1a8:	2302      	movs	r3, #2
  }
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b082      	sub	sp, #8
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68da      	ldr	r2, [r3, #12]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f1cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2220      	movs	r2, #32
 800f1d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7fc fb5c 	bl	800b894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3708      	adds	r7, #8
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}

0800f1e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f1e6:	b580      	push	{r7, lr}
 800f1e8:	b084      	sub	sp, #16
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	2b22      	cmp	r3, #34	; 0x22
 800f1f8:	d171      	bne.n	800f2de <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f202:	d123      	bne.n	800f24c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f208:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	691b      	ldr	r3, [r3, #16]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10e      	bne.n	800f230 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f21e:	b29a      	uxth	r2, r3
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f228:	1c9a      	adds	r2, r3, #2
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	629a      	str	r2, [r3, #40]	; 0x28
 800f22e:	e029      	b.n	800f284 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	b29b      	uxth	r3, r3
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f244:	1c5a      	adds	r2, r3, #1
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	629a      	str	r2, [r3, #40]	; 0x28
 800f24a:	e01b      	b.n	800f284 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	691b      	ldr	r3, [r3, #16]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10a      	bne.n	800f26a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	6858      	ldr	r0, [r3, #4]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25e:	1c59      	adds	r1, r3, #1
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	6291      	str	r1, [r2, #40]	; 0x28
 800f264:	b2c2      	uxtb	r2, r0
 800f266:	701a      	strb	r2, [r3, #0]
 800f268:	e00c      	b.n	800f284 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	b2da      	uxtb	r2, r3
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f276:	1c58      	adds	r0, r3, #1
 800f278:	6879      	ldr	r1, [r7, #4]
 800f27a:	6288      	str	r0, [r1, #40]	; 0x28
 800f27c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f280:	b2d2      	uxtb	r2, r2
 800f282:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f288:	b29b      	uxth	r3, r3
 800f28a:	3b01      	subs	r3, #1
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	4619      	mov	r1, r3
 800f292:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f294:	2b00      	cmp	r3, #0
 800f296:	d120      	bne.n	800f2da <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68da      	ldr	r2, [r3, #12]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f022 0220 	bic.w	r2, r2, #32
 800f2a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	68da      	ldr	r2, [r3, #12]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f2b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	695a      	ldr	r2, [r3, #20]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f022 0201 	bic.w	r2, r2, #1
 800f2c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2220      	movs	r2, #32
 800f2cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7ff fe3d 	bl	800ef50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	e002      	b.n	800f2e0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	e000      	b.n	800f2e0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f2de:	2302      	movs	r3, #2
  }
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3710      	adds	r7, #16
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ec:	b0bd      	sub	sp, #244	; 0xf4
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	691b      	ldr	r3, [r3, #16]
 800f2fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f304:	68d9      	ldr	r1, [r3, #12]
 800f306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	ea40 0301 	orr.w	r3, r0, r1
 800f310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f316:	689a      	ldr	r2, [r3, #8]
 800f318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f31c:	691b      	ldr	r3, [r3, #16]
 800f31e:	431a      	orrs	r2, r3
 800f320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f324:	695b      	ldr	r3, [r3, #20]
 800f326:	431a      	orrs	r2, r3
 800f328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f32c:	69db      	ldr	r3, [r3, #28]
 800f32e:	4313      	orrs	r3, r2
 800f330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800f334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f340:	f021 010c 	bic.w	r1, r1, #12
 800f344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f34e:	430b      	orrs	r3, r1
 800f350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f362:	6999      	ldr	r1, [r3, #24]
 800f364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	ea40 0301 	orr.w	r3, r0, r1
 800f36e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f37a:	f040 81a5 	bne.w	800f6c8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f382:	681a      	ldr	r2, [r3, #0]
 800f384:	4bcd      	ldr	r3, [pc, #820]	; (800f6bc <UART_SetConfig+0x3d4>)
 800f386:	429a      	cmp	r2, r3
 800f388:	d006      	beq.n	800f398 <UART_SetConfig+0xb0>
 800f38a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	4bcb      	ldr	r3, [pc, #812]	; (800f6c0 <UART_SetConfig+0x3d8>)
 800f392:	429a      	cmp	r2, r3
 800f394:	f040 80cb 	bne.w	800f52e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f398:	f7fe ff9e 	bl	800e2d8 <HAL_RCC_GetPCLK2Freq>
 800f39c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f3a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f3a4:	461c      	mov	r4, r3
 800f3a6:	f04f 0500 	mov.w	r5, #0
 800f3aa:	4622      	mov	r2, r4
 800f3ac:	462b      	mov	r3, r5
 800f3ae:	1891      	adds	r1, r2, r2
 800f3b0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800f3b4:	415b      	adcs	r3, r3
 800f3b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f3ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f3be:	1912      	adds	r2, r2, r4
 800f3c0:	eb45 0303 	adc.w	r3, r5, r3
 800f3c4:	f04f 0000 	mov.w	r0, #0
 800f3c8:	f04f 0100 	mov.w	r1, #0
 800f3cc:	00d9      	lsls	r1, r3, #3
 800f3ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f3d2:	00d0      	lsls	r0, r2, #3
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	1911      	adds	r1, r2, r4
 800f3da:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800f3de:	416b      	adcs	r3, r5
 800f3e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f04f 0300 	mov.w	r3, #0
 800f3f0:	1891      	adds	r1, r2, r2
 800f3f2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f3f6:	415b      	adcs	r3, r3
 800f3f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f3fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800f400:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800f404:	f7f1 fc40 	bl	8000c88 <__aeabi_uldivmod>
 800f408:	4602      	mov	r2, r0
 800f40a:	460b      	mov	r3, r1
 800f40c:	4bad      	ldr	r3, [pc, #692]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f40e:	fba3 2302 	umull	r2, r3, r3, r2
 800f412:	095b      	lsrs	r3, r3, #5
 800f414:	011e      	lsls	r6, r3, #4
 800f416:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f41a:	461c      	mov	r4, r3
 800f41c:	f04f 0500 	mov.w	r5, #0
 800f420:	4622      	mov	r2, r4
 800f422:	462b      	mov	r3, r5
 800f424:	1891      	adds	r1, r2, r2
 800f426:	67b9      	str	r1, [r7, #120]	; 0x78
 800f428:	415b      	adcs	r3, r3
 800f42a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f42c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f430:	1912      	adds	r2, r2, r4
 800f432:	eb45 0303 	adc.w	r3, r5, r3
 800f436:	f04f 0000 	mov.w	r0, #0
 800f43a:	f04f 0100 	mov.w	r1, #0
 800f43e:	00d9      	lsls	r1, r3, #3
 800f440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f444:	00d0      	lsls	r0, r2, #3
 800f446:	4602      	mov	r2, r0
 800f448:	460b      	mov	r3, r1
 800f44a:	1911      	adds	r1, r2, r4
 800f44c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800f450:	416b      	adcs	r3, r5
 800f452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	461a      	mov	r2, r3
 800f45e:	f04f 0300 	mov.w	r3, #0
 800f462:	1891      	adds	r1, r2, r2
 800f464:	6739      	str	r1, [r7, #112]	; 0x70
 800f466:	415b      	adcs	r3, r3
 800f468:	677b      	str	r3, [r7, #116]	; 0x74
 800f46a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800f46e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800f472:	f7f1 fc09 	bl	8000c88 <__aeabi_uldivmod>
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	4b92      	ldr	r3, [pc, #584]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f47c:	fba3 1302 	umull	r1, r3, r3, r2
 800f480:	095b      	lsrs	r3, r3, #5
 800f482:	2164      	movs	r1, #100	; 0x64
 800f484:	fb01 f303 	mul.w	r3, r1, r3
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	3332      	adds	r3, #50	; 0x32
 800f48e:	4a8d      	ldr	r2, [pc, #564]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f490:	fba2 2303 	umull	r2, r3, r2, r3
 800f494:	095b      	lsrs	r3, r3, #5
 800f496:	005b      	lsls	r3, r3, #1
 800f498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f49c:	441e      	add	r6, r3
 800f49e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f04f 0100 	mov.w	r1, #0
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	1894      	adds	r4, r2, r2
 800f4ae:	66bc      	str	r4, [r7, #104]	; 0x68
 800f4b0:	415b      	adcs	r3, r3
 800f4b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f4b8:	1812      	adds	r2, r2, r0
 800f4ba:	eb41 0303 	adc.w	r3, r1, r3
 800f4be:	f04f 0400 	mov.w	r4, #0
 800f4c2:	f04f 0500 	mov.w	r5, #0
 800f4c6:	00dd      	lsls	r5, r3, #3
 800f4c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f4cc:	00d4      	lsls	r4, r2, #3
 800f4ce:	4622      	mov	r2, r4
 800f4d0:	462b      	mov	r3, r5
 800f4d2:	1814      	adds	r4, r2, r0
 800f4d4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800f4d8:	414b      	adcs	r3, r1
 800f4da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	f04f 0300 	mov.w	r3, #0
 800f4ea:	1891      	adds	r1, r2, r2
 800f4ec:	6639      	str	r1, [r7, #96]	; 0x60
 800f4ee:	415b      	adcs	r3, r3
 800f4f0:	667b      	str	r3, [r7, #100]	; 0x64
 800f4f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800f4f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f4fa:	f7f1 fbc5 	bl	8000c88 <__aeabi_uldivmod>
 800f4fe:	4602      	mov	r2, r0
 800f500:	460b      	mov	r3, r1
 800f502:	4b70      	ldr	r3, [pc, #448]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f504:	fba3 1302 	umull	r1, r3, r3, r2
 800f508:	095b      	lsrs	r3, r3, #5
 800f50a:	2164      	movs	r1, #100	; 0x64
 800f50c:	fb01 f303 	mul.w	r3, r1, r3
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	00db      	lsls	r3, r3, #3
 800f514:	3332      	adds	r3, #50	; 0x32
 800f516:	4a6b      	ldr	r2, [pc, #428]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f518:	fba2 2303 	umull	r2, r3, r2, r3
 800f51c:	095b      	lsrs	r3, r3, #5
 800f51e:	f003 0207 	and.w	r2, r3, #7
 800f522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4432      	add	r2, r6
 800f52a:	609a      	str	r2, [r3, #8]
 800f52c:	e26d      	b.n	800fa0a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f52e:	f7fe febf 	bl	800e2b0 <HAL_RCC_GetPCLK1Freq>
 800f532:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f536:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f53a:	461c      	mov	r4, r3
 800f53c:	f04f 0500 	mov.w	r5, #0
 800f540:	4622      	mov	r2, r4
 800f542:	462b      	mov	r3, r5
 800f544:	1891      	adds	r1, r2, r2
 800f546:	65b9      	str	r1, [r7, #88]	; 0x58
 800f548:	415b      	adcs	r3, r3
 800f54a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f54c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f550:	1912      	adds	r2, r2, r4
 800f552:	eb45 0303 	adc.w	r3, r5, r3
 800f556:	f04f 0000 	mov.w	r0, #0
 800f55a:	f04f 0100 	mov.w	r1, #0
 800f55e:	00d9      	lsls	r1, r3, #3
 800f560:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f564:	00d0      	lsls	r0, r2, #3
 800f566:	4602      	mov	r2, r0
 800f568:	460b      	mov	r3, r1
 800f56a:	1911      	adds	r1, r2, r4
 800f56c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f570:	416b      	adcs	r3, r5
 800f572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	461a      	mov	r2, r3
 800f57e:	f04f 0300 	mov.w	r3, #0
 800f582:	1891      	adds	r1, r2, r2
 800f584:	6539      	str	r1, [r7, #80]	; 0x50
 800f586:	415b      	adcs	r3, r3
 800f588:	657b      	str	r3, [r7, #84]	; 0x54
 800f58a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f58e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800f592:	f7f1 fb79 	bl	8000c88 <__aeabi_uldivmod>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	4b4a      	ldr	r3, [pc, #296]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f59c:	fba3 2302 	umull	r2, r3, r3, r2
 800f5a0:	095b      	lsrs	r3, r3, #5
 800f5a2:	011e      	lsls	r6, r3, #4
 800f5a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5a8:	461c      	mov	r4, r3
 800f5aa:	f04f 0500 	mov.w	r5, #0
 800f5ae:	4622      	mov	r2, r4
 800f5b0:	462b      	mov	r3, r5
 800f5b2:	1891      	adds	r1, r2, r2
 800f5b4:	64b9      	str	r1, [r7, #72]	; 0x48
 800f5b6:	415b      	adcs	r3, r3
 800f5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f5be:	1912      	adds	r2, r2, r4
 800f5c0:	eb45 0303 	adc.w	r3, r5, r3
 800f5c4:	f04f 0000 	mov.w	r0, #0
 800f5c8:	f04f 0100 	mov.w	r1, #0
 800f5cc:	00d9      	lsls	r1, r3, #3
 800f5ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f5d2:	00d0      	lsls	r0, r2, #3
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	1911      	adds	r1, r2, r4
 800f5da:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f5de:	416b      	adcs	r3, r5
 800f5e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	f04f 0300 	mov.w	r3, #0
 800f5f0:	1891      	adds	r1, r2, r2
 800f5f2:	6439      	str	r1, [r7, #64]	; 0x40
 800f5f4:	415b      	adcs	r3, r3
 800f5f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f5f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f5fc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800f600:	f7f1 fb42 	bl	8000c88 <__aeabi_uldivmod>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	4b2e      	ldr	r3, [pc, #184]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f60a:	fba3 1302 	umull	r1, r3, r3, r2
 800f60e:	095b      	lsrs	r3, r3, #5
 800f610:	2164      	movs	r1, #100	; 0x64
 800f612:	fb01 f303 	mul.w	r3, r1, r3
 800f616:	1ad3      	subs	r3, r2, r3
 800f618:	00db      	lsls	r3, r3, #3
 800f61a:	3332      	adds	r3, #50	; 0x32
 800f61c:	4a29      	ldr	r2, [pc, #164]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f61e:	fba2 2303 	umull	r2, r3, r2, r3
 800f622:	095b      	lsrs	r3, r3, #5
 800f624:	005b      	lsls	r3, r3, #1
 800f626:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f62a:	441e      	add	r6, r3
 800f62c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f630:	4618      	mov	r0, r3
 800f632:	f04f 0100 	mov.w	r1, #0
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	1894      	adds	r4, r2, r2
 800f63c:	63bc      	str	r4, [r7, #56]	; 0x38
 800f63e:	415b      	adcs	r3, r3
 800f640:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f642:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f646:	1812      	adds	r2, r2, r0
 800f648:	eb41 0303 	adc.w	r3, r1, r3
 800f64c:	f04f 0400 	mov.w	r4, #0
 800f650:	f04f 0500 	mov.w	r5, #0
 800f654:	00dd      	lsls	r5, r3, #3
 800f656:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f65a:	00d4      	lsls	r4, r2, #3
 800f65c:	4622      	mov	r2, r4
 800f65e:	462b      	mov	r3, r5
 800f660:	1814      	adds	r4, r2, r0
 800f662:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f666:	414b      	adcs	r3, r1
 800f668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	461a      	mov	r2, r3
 800f674:	f04f 0300 	mov.w	r3, #0
 800f678:	1891      	adds	r1, r2, r2
 800f67a:	6339      	str	r1, [r7, #48]	; 0x30
 800f67c:	415b      	adcs	r3, r3
 800f67e:	637b      	str	r3, [r7, #52]	; 0x34
 800f680:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f684:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f688:	f7f1 fafe 	bl	8000c88 <__aeabi_uldivmod>
 800f68c:	4602      	mov	r2, r0
 800f68e:	460b      	mov	r3, r1
 800f690:	4b0c      	ldr	r3, [pc, #48]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f692:	fba3 1302 	umull	r1, r3, r3, r2
 800f696:	095b      	lsrs	r3, r3, #5
 800f698:	2164      	movs	r1, #100	; 0x64
 800f69a:	fb01 f303 	mul.w	r3, r1, r3
 800f69e:	1ad3      	subs	r3, r2, r3
 800f6a0:	00db      	lsls	r3, r3, #3
 800f6a2:	3332      	adds	r3, #50	; 0x32
 800f6a4:	4a07      	ldr	r2, [pc, #28]	; (800f6c4 <UART_SetConfig+0x3dc>)
 800f6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f6aa:	095b      	lsrs	r3, r3, #5
 800f6ac:	f003 0207 	and.w	r2, r3, #7
 800f6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4432      	add	r2, r6
 800f6b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f6ba:	e1a6      	b.n	800fa0a <UART_SetConfig+0x722>
 800f6bc:	40011000 	.word	0x40011000
 800f6c0:	40011400 	.word	0x40011400
 800f6c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	4bd1      	ldr	r3, [pc, #836]	; (800fa14 <UART_SetConfig+0x72c>)
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d006      	beq.n	800f6e2 <UART_SetConfig+0x3fa>
 800f6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	4bcf      	ldr	r3, [pc, #828]	; (800fa18 <UART_SetConfig+0x730>)
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	f040 80ca 	bne.w	800f876 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f6e2:	f7fe fdf9 	bl	800e2d8 <HAL_RCC_GetPCLK2Freq>
 800f6e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f6ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f6ee:	461c      	mov	r4, r3
 800f6f0:	f04f 0500 	mov.w	r5, #0
 800f6f4:	4622      	mov	r2, r4
 800f6f6:	462b      	mov	r3, r5
 800f6f8:	1891      	adds	r1, r2, r2
 800f6fa:	62b9      	str	r1, [r7, #40]	; 0x28
 800f6fc:	415b      	adcs	r3, r3
 800f6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f704:	1912      	adds	r2, r2, r4
 800f706:	eb45 0303 	adc.w	r3, r5, r3
 800f70a:	f04f 0000 	mov.w	r0, #0
 800f70e:	f04f 0100 	mov.w	r1, #0
 800f712:	00d9      	lsls	r1, r3, #3
 800f714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f718:	00d0      	lsls	r0, r2, #3
 800f71a:	4602      	mov	r2, r0
 800f71c:	460b      	mov	r3, r1
 800f71e:	eb12 0a04 	adds.w	sl, r2, r4
 800f722:	eb43 0b05 	adc.w	fp, r3, r5
 800f726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f04f 0100 	mov.w	r1, #0
 800f732:	f04f 0200 	mov.w	r2, #0
 800f736:	f04f 0300 	mov.w	r3, #0
 800f73a:	008b      	lsls	r3, r1, #2
 800f73c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f740:	0082      	lsls	r2, r0, #2
 800f742:	4650      	mov	r0, sl
 800f744:	4659      	mov	r1, fp
 800f746:	f7f1 fa9f 	bl	8000c88 <__aeabi_uldivmod>
 800f74a:	4602      	mov	r2, r0
 800f74c:	460b      	mov	r3, r1
 800f74e:	4bb3      	ldr	r3, [pc, #716]	; (800fa1c <UART_SetConfig+0x734>)
 800f750:	fba3 2302 	umull	r2, r3, r3, r2
 800f754:	095b      	lsrs	r3, r3, #5
 800f756:	011e      	lsls	r6, r3, #4
 800f758:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f75c:	4618      	mov	r0, r3
 800f75e:	f04f 0100 	mov.w	r1, #0
 800f762:	4602      	mov	r2, r0
 800f764:	460b      	mov	r3, r1
 800f766:	1894      	adds	r4, r2, r2
 800f768:	623c      	str	r4, [r7, #32]
 800f76a:	415b      	adcs	r3, r3
 800f76c:	627b      	str	r3, [r7, #36]	; 0x24
 800f76e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f772:	1812      	adds	r2, r2, r0
 800f774:	eb41 0303 	adc.w	r3, r1, r3
 800f778:	f04f 0400 	mov.w	r4, #0
 800f77c:	f04f 0500 	mov.w	r5, #0
 800f780:	00dd      	lsls	r5, r3, #3
 800f782:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f786:	00d4      	lsls	r4, r2, #3
 800f788:	4622      	mov	r2, r4
 800f78a:	462b      	mov	r3, r5
 800f78c:	1814      	adds	r4, r2, r0
 800f78e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f792:	414b      	adcs	r3, r1
 800f794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f04f 0100 	mov.w	r1, #0
 800f7a4:	f04f 0200 	mov.w	r2, #0
 800f7a8:	f04f 0300 	mov.w	r3, #0
 800f7ac:	008b      	lsls	r3, r1, #2
 800f7ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f7b2:	0082      	lsls	r2, r0, #2
 800f7b4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f7b8:	f7f1 fa66 	bl	8000c88 <__aeabi_uldivmod>
 800f7bc:	4602      	mov	r2, r0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	4b96      	ldr	r3, [pc, #600]	; (800fa1c <UART_SetConfig+0x734>)
 800f7c2:	fba3 1302 	umull	r1, r3, r3, r2
 800f7c6:	095b      	lsrs	r3, r3, #5
 800f7c8:	2164      	movs	r1, #100	; 0x64
 800f7ca:	fb01 f303 	mul.w	r3, r1, r3
 800f7ce:	1ad3      	subs	r3, r2, r3
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	3332      	adds	r3, #50	; 0x32
 800f7d4:	4a91      	ldr	r2, [pc, #580]	; (800fa1c <UART_SetConfig+0x734>)
 800f7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f7da:	095b      	lsrs	r3, r3, #5
 800f7dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7e0:	441e      	add	r6, r3
 800f7e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f04f 0100 	mov.w	r1, #0
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	1894      	adds	r4, r2, r2
 800f7f2:	61bc      	str	r4, [r7, #24]
 800f7f4:	415b      	adcs	r3, r3
 800f7f6:	61fb      	str	r3, [r7, #28]
 800f7f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f7fc:	1812      	adds	r2, r2, r0
 800f7fe:	eb41 0303 	adc.w	r3, r1, r3
 800f802:	f04f 0400 	mov.w	r4, #0
 800f806:	f04f 0500 	mov.w	r5, #0
 800f80a:	00dd      	lsls	r5, r3, #3
 800f80c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f810:	00d4      	lsls	r4, r2, #3
 800f812:	4622      	mov	r2, r4
 800f814:	462b      	mov	r3, r5
 800f816:	1814      	adds	r4, r2, r0
 800f818:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800f81c:	414b      	adcs	r3, r1
 800f81e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	4618      	mov	r0, r3
 800f82a:	f04f 0100 	mov.w	r1, #0
 800f82e:	f04f 0200 	mov.w	r2, #0
 800f832:	f04f 0300 	mov.w	r3, #0
 800f836:	008b      	lsls	r3, r1, #2
 800f838:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f83c:	0082      	lsls	r2, r0, #2
 800f83e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800f842:	f7f1 fa21 	bl	8000c88 <__aeabi_uldivmod>
 800f846:	4602      	mov	r2, r0
 800f848:	460b      	mov	r3, r1
 800f84a:	4b74      	ldr	r3, [pc, #464]	; (800fa1c <UART_SetConfig+0x734>)
 800f84c:	fba3 1302 	umull	r1, r3, r3, r2
 800f850:	095b      	lsrs	r3, r3, #5
 800f852:	2164      	movs	r1, #100	; 0x64
 800f854:	fb01 f303 	mul.w	r3, r1, r3
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	011b      	lsls	r3, r3, #4
 800f85c:	3332      	adds	r3, #50	; 0x32
 800f85e:	4a6f      	ldr	r2, [pc, #444]	; (800fa1c <UART_SetConfig+0x734>)
 800f860:	fba2 2303 	umull	r2, r3, r2, r3
 800f864:	095b      	lsrs	r3, r3, #5
 800f866:	f003 020f 	and.w	r2, r3, #15
 800f86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4432      	add	r2, r6
 800f872:	609a      	str	r2, [r3, #8]
 800f874:	e0c9      	b.n	800fa0a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f876:	f7fe fd1b 	bl	800e2b0 <HAL_RCC_GetPCLK1Freq>
 800f87a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f87e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f882:	461c      	mov	r4, r3
 800f884:	f04f 0500 	mov.w	r5, #0
 800f888:	4622      	mov	r2, r4
 800f88a:	462b      	mov	r3, r5
 800f88c:	1891      	adds	r1, r2, r2
 800f88e:	6139      	str	r1, [r7, #16]
 800f890:	415b      	adcs	r3, r3
 800f892:	617b      	str	r3, [r7, #20]
 800f894:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f898:	1912      	adds	r2, r2, r4
 800f89a:	eb45 0303 	adc.w	r3, r5, r3
 800f89e:	f04f 0000 	mov.w	r0, #0
 800f8a2:	f04f 0100 	mov.w	r1, #0
 800f8a6:	00d9      	lsls	r1, r3, #3
 800f8a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f8ac:	00d0      	lsls	r0, r2, #3
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	eb12 0804 	adds.w	r8, r2, r4
 800f8b6:	eb43 0905 	adc.w	r9, r3, r5
 800f8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f04f 0100 	mov.w	r1, #0
 800f8c6:	f04f 0200 	mov.w	r2, #0
 800f8ca:	f04f 0300 	mov.w	r3, #0
 800f8ce:	008b      	lsls	r3, r1, #2
 800f8d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f8d4:	0082      	lsls	r2, r0, #2
 800f8d6:	4640      	mov	r0, r8
 800f8d8:	4649      	mov	r1, r9
 800f8da:	f7f1 f9d5 	bl	8000c88 <__aeabi_uldivmod>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	4b4e      	ldr	r3, [pc, #312]	; (800fa1c <UART_SetConfig+0x734>)
 800f8e4:	fba3 2302 	umull	r2, r3, r3, r2
 800f8e8:	095b      	lsrs	r3, r3, #5
 800f8ea:	011e      	lsls	r6, r3, #4
 800f8ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f04f 0100 	mov.w	r1, #0
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	1894      	adds	r4, r2, r2
 800f8fc:	60bc      	str	r4, [r7, #8]
 800f8fe:	415b      	adcs	r3, r3
 800f900:	60fb      	str	r3, [r7, #12]
 800f902:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f906:	1812      	adds	r2, r2, r0
 800f908:	eb41 0303 	adc.w	r3, r1, r3
 800f90c:	f04f 0400 	mov.w	r4, #0
 800f910:	f04f 0500 	mov.w	r5, #0
 800f914:	00dd      	lsls	r5, r3, #3
 800f916:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f91a:	00d4      	lsls	r4, r2, #3
 800f91c:	4622      	mov	r2, r4
 800f91e:	462b      	mov	r3, r5
 800f920:	1814      	adds	r4, r2, r0
 800f922:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800f926:	414b      	adcs	r3, r1
 800f928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	4618      	mov	r0, r3
 800f934:	f04f 0100 	mov.w	r1, #0
 800f938:	f04f 0200 	mov.w	r2, #0
 800f93c:	f04f 0300 	mov.w	r3, #0
 800f940:	008b      	lsls	r3, r1, #2
 800f942:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f946:	0082      	lsls	r2, r0, #2
 800f948:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f94c:	f7f1 f99c 	bl	8000c88 <__aeabi_uldivmod>
 800f950:	4602      	mov	r2, r0
 800f952:	460b      	mov	r3, r1
 800f954:	4b31      	ldr	r3, [pc, #196]	; (800fa1c <UART_SetConfig+0x734>)
 800f956:	fba3 1302 	umull	r1, r3, r3, r2
 800f95a:	095b      	lsrs	r3, r3, #5
 800f95c:	2164      	movs	r1, #100	; 0x64
 800f95e:	fb01 f303 	mul.w	r3, r1, r3
 800f962:	1ad3      	subs	r3, r2, r3
 800f964:	011b      	lsls	r3, r3, #4
 800f966:	3332      	adds	r3, #50	; 0x32
 800f968:	4a2c      	ldr	r2, [pc, #176]	; (800fa1c <UART_SetConfig+0x734>)
 800f96a:	fba2 2303 	umull	r2, r3, r2, r3
 800f96e:	095b      	lsrs	r3, r3, #5
 800f970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f974:	441e      	add	r6, r3
 800f976:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f97a:	4618      	mov	r0, r3
 800f97c:	f04f 0100 	mov.w	r1, #0
 800f980:	4602      	mov	r2, r0
 800f982:	460b      	mov	r3, r1
 800f984:	1894      	adds	r4, r2, r2
 800f986:	603c      	str	r4, [r7, #0]
 800f988:	415b      	adcs	r3, r3
 800f98a:	607b      	str	r3, [r7, #4]
 800f98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f990:	1812      	adds	r2, r2, r0
 800f992:	eb41 0303 	adc.w	r3, r1, r3
 800f996:	f04f 0400 	mov.w	r4, #0
 800f99a:	f04f 0500 	mov.w	r5, #0
 800f99e:	00dd      	lsls	r5, r3, #3
 800f9a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f9a4:	00d4      	lsls	r4, r2, #3
 800f9a6:	4622      	mov	r2, r4
 800f9a8:	462b      	mov	r3, r5
 800f9aa:	1814      	adds	r4, r2, r0
 800f9ac:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800f9b0:	414b      	adcs	r3, r1
 800f9b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f04f 0100 	mov.w	r1, #0
 800f9c2:	f04f 0200 	mov.w	r2, #0
 800f9c6:	f04f 0300 	mov.w	r3, #0
 800f9ca:	008b      	lsls	r3, r1, #2
 800f9cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f9d0:	0082      	lsls	r2, r0, #2
 800f9d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800f9d6:	f7f1 f957 	bl	8000c88 <__aeabi_uldivmod>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	460b      	mov	r3, r1
 800f9de:	4b0f      	ldr	r3, [pc, #60]	; (800fa1c <UART_SetConfig+0x734>)
 800f9e0:	fba3 1302 	umull	r1, r3, r3, r2
 800f9e4:	095b      	lsrs	r3, r3, #5
 800f9e6:	2164      	movs	r1, #100	; 0x64
 800f9e8:	fb01 f303 	mul.w	r3, r1, r3
 800f9ec:	1ad3      	subs	r3, r2, r3
 800f9ee:	011b      	lsls	r3, r3, #4
 800f9f0:	3332      	adds	r3, #50	; 0x32
 800f9f2:	4a0a      	ldr	r2, [pc, #40]	; (800fa1c <UART_SetConfig+0x734>)
 800f9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f8:	095b      	lsrs	r3, r3, #5
 800f9fa:	f003 020f 	and.w	r2, r3, #15
 800f9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4432      	add	r2, r6
 800fa06:	609a      	str	r2, [r3, #8]
}
 800fa08:	e7ff      	b.n	800fa0a <UART_SetConfig+0x722>
 800fa0a:	bf00      	nop
 800fa0c:	37f4      	adds	r7, #244	; 0xf4
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa14:	40011000 	.word	0x40011000
 800fa18:	40011400 	.word	0x40011400
 800fa1c:	51eb851f 	.word	0x51eb851f

0800fa20 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa38:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	4b20      	ldr	r3, [pc, #128]	; (800fac0 <FSMC_NORSRAM_Init+0xa0>)
 800fa3e:	4013      	ands	r3, r2
 800fa40:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fa4a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800fa50:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800fa56:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800fa5c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800fa62:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800fa68:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800fa6e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800fa74:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800fa7a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800fa80:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800fa86:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800fa8c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	4313      	orrs	r3, r2
 800fa92:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	2b08      	cmp	r3, #8
 800fa9a:	d103      	bne.n	800faa4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faa2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	68f9      	ldr	r1, [r7, #12]
 800faac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800fab0:	2300      	movs	r3, #0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3714      	adds	r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop
 800fac0:	fff00080 	.word	0xfff00080

0800fac4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800fad0:	2300      	movs	r3, #0
 800fad2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	1c5a      	adds	r2, r3, #1
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fade:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800fae6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800faf2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800fafa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800fb02:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fb0c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	695b      	ldr	r3, [r3, #20]
 800fb12:	3b02      	subs	r3, #2
 800fb14:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800fb16:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	697a      	ldr	r2, [r7, #20]
 800fb20:	4313      	orrs	r3, r2
 800fb22:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	1c5a      	adds	r2, r3, #1
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	6979      	ldr	r1, [r7, #20]
 800fb2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800fb30:	2300      	movs	r3, #0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	371c      	adds	r7, #28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
	...

0800fb40 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b087      	sub	sp, #28
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	607a      	str	r2, [r7, #4]
 800fb4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fb58:	d122      	bne.n	800fba0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb62:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800fb64:	697a      	ldr	r2, [r7, #20]
 800fb66:	4b15      	ldr	r3, [pc, #84]	; (800fbbc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800fb68:	4013      	ands	r3, r2
 800fb6a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fb76:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800fb7e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800fb86:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fb8c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	6979      	ldr	r1, [r7, #20]
 800fb9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fb9e:	e005      	b.n	800fbac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800fba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800fbac:	2300      	movs	r3, #0
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	371c      	adds	r7, #28
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop
 800fbbc:	cff00000 	.word	0xcff00000

0800fbc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fbc0:	b084      	sub	sp, #16
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b084      	sub	sp, #16
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
 800fbca:	f107 001c 	add.w	r0, r7, #28
 800fbce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d122      	bne.n	800fc1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fbec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d105      	bne.n	800fc12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	68db      	ldr	r3, [r3, #12]
 800fc0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f001 fac6 	bl	80111a4 <USB_CoreReset>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	73fb      	strb	r3, [r7, #15]
 800fc1c:	e01a      	b.n	800fc54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f001 faba 	bl	80111a4 <USB_CoreReset>
 800fc30:	4603      	mov	r3, r0
 800fc32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d106      	bne.n	800fc48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	639a      	str	r2, [r3, #56]	; 0x38
 800fc46:	e005      	b.n	800fc54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d10b      	bne.n	800fc72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	689b      	ldr	r3, [r3, #8]
 800fc5e:	f043 0206 	orr.w	r2, r3, #6
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	f043 0220 	orr.w	r2, r3, #32
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc7e:	b004      	add	sp, #16
 800fc80:	4770      	bx	lr
	...

0800fc84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b087      	sub	sp, #28
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	4613      	mov	r3, r2
 800fc90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fc92:	79fb      	ldrb	r3, [r7, #7]
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	d165      	bne.n	800fd64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	4a41      	ldr	r2, [pc, #260]	; (800fda0 <USB_SetTurnaroundTime+0x11c>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d906      	bls.n	800fcae <USB_SetTurnaroundTime+0x2a>
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	4a40      	ldr	r2, [pc, #256]	; (800fda4 <USB_SetTurnaroundTime+0x120>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d202      	bcs.n	800fcae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fca8:	230f      	movs	r3, #15
 800fcaa:	617b      	str	r3, [r7, #20]
 800fcac:	e062      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	4a3c      	ldr	r2, [pc, #240]	; (800fda4 <USB_SetTurnaroundTime+0x120>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d306      	bcc.n	800fcc4 <USB_SetTurnaroundTime+0x40>
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	4a3b      	ldr	r2, [pc, #236]	; (800fda8 <USB_SetTurnaroundTime+0x124>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d202      	bcs.n	800fcc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fcbe:	230e      	movs	r3, #14
 800fcc0:	617b      	str	r3, [r7, #20]
 800fcc2:	e057      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	4a38      	ldr	r2, [pc, #224]	; (800fda8 <USB_SetTurnaroundTime+0x124>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d306      	bcc.n	800fcda <USB_SetTurnaroundTime+0x56>
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	4a37      	ldr	r2, [pc, #220]	; (800fdac <USB_SetTurnaroundTime+0x128>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d202      	bcs.n	800fcda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fcd4:	230d      	movs	r3, #13
 800fcd6:	617b      	str	r3, [r7, #20]
 800fcd8:	e04c      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	4a33      	ldr	r2, [pc, #204]	; (800fdac <USB_SetTurnaroundTime+0x128>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d306      	bcc.n	800fcf0 <USB_SetTurnaroundTime+0x6c>
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	4a32      	ldr	r2, [pc, #200]	; (800fdb0 <USB_SetTurnaroundTime+0x12c>)
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d802      	bhi.n	800fcf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fcea:	230c      	movs	r3, #12
 800fcec:	617b      	str	r3, [r7, #20]
 800fcee:	e041      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	4a2f      	ldr	r2, [pc, #188]	; (800fdb0 <USB_SetTurnaroundTime+0x12c>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d906      	bls.n	800fd06 <USB_SetTurnaroundTime+0x82>
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	4a2e      	ldr	r2, [pc, #184]	; (800fdb4 <USB_SetTurnaroundTime+0x130>)
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d802      	bhi.n	800fd06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fd00:	230b      	movs	r3, #11
 800fd02:	617b      	str	r3, [r7, #20]
 800fd04:	e036      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	4a2a      	ldr	r2, [pc, #168]	; (800fdb4 <USB_SetTurnaroundTime+0x130>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d906      	bls.n	800fd1c <USB_SetTurnaroundTime+0x98>
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	4a29      	ldr	r2, [pc, #164]	; (800fdb8 <USB_SetTurnaroundTime+0x134>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d802      	bhi.n	800fd1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fd16:	230a      	movs	r3, #10
 800fd18:	617b      	str	r3, [r7, #20]
 800fd1a:	e02b      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	4a26      	ldr	r2, [pc, #152]	; (800fdb8 <USB_SetTurnaroundTime+0x134>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d906      	bls.n	800fd32 <USB_SetTurnaroundTime+0xae>
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	4a25      	ldr	r2, [pc, #148]	; (800fdbc <USB_SetTurnaroundTime+0x138>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d202      	bcs.n	800fd32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fd2c:	2309      	movs	r3, #9
 800fd2e:	617b      	str	r3, [r7, #20]
 800fd30:	e020      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	4a21      	ldr	r2, [pc, #132]	; (800fdbc <USB_SetTurnaroundTime+0x138>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d306      	bcc.n	800fd48 <USB_SetTurnaroundTime+0xc4>
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	4a20      	ldr	r2, [pc, #128]	; (800fdc0 <USB_SetTurnaroundTime+0x13c>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d802      	bhi.n	800fd48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fd42:	2308      	movs	r3, #8
 800fd44:	617b      	str	r3, [r7, #20]
 800fd46:	e015      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	4a1d      	ldr	r2, [pc, #116]	; (800fdc0 <USB_SetTurnaroundTime+0x13c>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d906      	bls.n	800fd5e <USB_SetTurnaroundTime+0xda>
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	4a1c      	ldr	r2, [pc, #112]	; (800fdc4 <USB_SetTurnaroundTime+0x140>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d202      	bcs.n	800fd5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fd58:	2307      	movs	r3, #7
 800fd5a:	617b      	str	r3, [r7, #20]
 800fd5c:	e00a      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fd5e:	2306      	movs	r3, #6
 800fd60:	617b      	str	r3, [r7, #20]
 800fd62:	e007      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fd64:	79fb      	ldrb	r3, [r7, #7]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d102      	bne.n	800fd70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fd6a:	2309      	movs	r3, #9
 800fd6c:	617b      	str	r3, [r7, #20]
 800fd6e:	e001      	b.n	800fd74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fd70:	2309      	movs	r3, #9
 800fd72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	68da      	ldr	r2, [r3, #12]
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	029b      	lsls	r3, r3, #10
 800fd88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fd8c:	431a      	orrs	r2, r3
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	371c      	adds	r7, #28
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	00d8acbf 	.word	0x00d8acbf
 800fda4:	00e4e1c0 	.word	0x00e4e1c0
 800fda8:	00f42400 	.word	0x00f42400
 800fdac:	01067380 	.word	0x01067380
 800fdb0:	011a499f 	.word	0x011a499f
 800fdb4:	01312cff 	.word	0x01312cff
 800fdb8:	014ca43f 	.word	0x014ca43f
 800fdbc:	016e3600 	.word	0x016e3600
 800fdc0:	01a6ab1f 	.word	0x01a6ab1f
 800fdc4:	01e84800 	.word	0x01e84800

0800fdc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	689b      	ldr	r3, [r3, #8]
 800fdd4:	f043 0201 	orr.w	r2, r3, #1
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr

0800fdea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fdea:	b480      	push	{r7}
 800fdec:	b083      	sub	sp, #12
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	689b      	ldr	r3, [r3, #8]
 800fdf6:	f023 0201 	bic.w	r2, r3, #1
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	460b      	mov	r3, r1
 800fe16:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fe24:	78fb      	ldrb	r3, [r7, #3]
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d106      	bne.n	800fe38 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	60da      	str	r2, [r3, #12]
 800fe36:	e00b      	b.n	800fe50 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fe38:	78fb      	ldrb	r3, [r7, #3]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d106      	bne.n	800fe4c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	60da      	str	r2, [r3, #12]
 800fe4a:	e001      	b.n	800fe50 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e003      	b.n	800fe58 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fe50:	2032      	movs	r0, #50	; 0x32
 800fe52:	f7fb fdb3 	bl	800b9bc <HAL_Delay>

  return HAL_OK;
 800fe56:	2300      	movs	r3, #0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe60:	b084      	sub	sp, #16
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b086      	sub	sp, #24
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	613b      	str	r3, [r7, #16]
 800fe7e:	e009      	b.n	800fe94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fe80:	687a      	ldr	r2, [r7, #4]
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	3340      	adds	r3, #64	; 0x40
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	4413      	add	r3, r2
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	3301      	adds	r3, #1
 800fe92:	613b      	str	r3, [r7, #16]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	2b0e      	cmp	r3, #14
 800fe98:	d9f2      	bls.n	800fe80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fe9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d11c      	bne.n	800feda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800feae:	f043 0302 	orr.w	r3, r3, #2
 800feb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fec4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fed0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	639a      	str	r2, [r3, #56]	; 0x38
 800fed8:	e00b      	b.n	800fef2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fede:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fef8:	461a      	mov	r2, r3
 800fefa:	2300      	movs	r3, #0
 800fefc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff04:	4619      	mov	r1, r3
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	680b      	ldr	r3, [r1, #0]
 800ff10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d10c      	bne.n	800ff32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ff18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d104      	bne.n	800ff28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ff1e:	2100      	movs	r1, #0
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 f949 	bl	80101b8 <USB_SetDevSpeed>
 800ff26:	e008      	b.n	800ff3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff28:	2101      	movs	r1, #1
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f944 	bl	80101b8 <USB_SetDevSpeed>
 800ff30:	e003      	b.n	800ff3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ff32:	2103      	movs	r1, #3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 f93f 	bl	80101b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ff3a:	2110      	movs	r1, #16
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 f8f3 	bl	8010128 <USB_FlushTxFifo>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d001      	beq.n	800ff4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 f911 	bl	8010174 <USB_FlushRxFifo>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d001      	beq.n	800ff5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff62:	461a      	mov	r2, r3
 800ff64:	2300      	movs	r3, #0
 800ff66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff6e:	461a      	mov	r2, r3
 800ff70:	2300      	movs	r3, #0
 800ff72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff80:	2300      	movs	r3, #0
 800ff82:	613b      	str	r3, [r7, #16]
 800ff84:	e043      	b.n	801000e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	015a      	lsls	r2, r3, #5
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff9c:	d118      	bne.n	800ffd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d10a      	bne.n	800ffba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	015a      	lsls	r2, r3, #5
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	4413      	add	r3, r2
 800ffac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ffb6:	6013      	str	r3, [r2, #0]
 800ffb8:	e013      	b.n	800ffe2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	015a      	lsls	r2, r3, #5
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	4413      	add	r3, r2
 800ffc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ffcc:	6013      	str	r3, [r2, #0]
 800ffce:	e008      	b.n	800ffe2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	015a      	lsls	r2, r3, #5
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffdc:	461a      	mov	r2, r3
 800ffde:	2300      	movs	r3, #0
 800ffe0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	015a      	lsls	r2, r3, #5
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	4413      	add	r3, r2
 800ffea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffee:	461a      	mov	r2, r3
 800fff0:	2300      	movs	r3, #0
 800fff2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	015a      	lsls	r2, r3, #5
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	4413      	add	r3, r2
 800fffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010000:	461a      	mov	r2, r3
 8010002:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010006:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	3301      	adds	r3, #1
 801000c:	613b      	str	r3, [r7, #16]
 801000e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010010:	693a      	ldr	r2, [r7, #16]
 8010012:	429a      	cmp	r2, r3
 8010014:	d3b7      	bcc.n	800ff86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010016:	2300      	movs	r3, #0
 8010018:	613b      	str	r3, [r7, #16]
 801001a:	e043      	b.n	80100a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801002e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010032:	d118      	bne.n	8010066 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d10a      	bne.n	8010050 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	015a      	lsls	r2, r3, #5
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	4413      	add	r3, r2
 8010042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010046:	461a      	mov	r2, r3
 8010048:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801004c:	6013      	str	r3, [r2, #0]
 801004e:	e013      	b.n	8010078 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	015a      	lsls	r2, r3, #5
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	4413      	add	r3, r2
 8010058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801005c:	461a      	mov	r2, r3
 801005e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010062:	6013      	str	r3, [r2, #0]
 8010064:	e008      	b.n	8010078 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	015a      	lsls	r2, r3, #5
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	4413      	add	r3, r2
 801006e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010072:	461a      	mov	r2, r3
 8010074:	2300      	movs	r3, #0
 8010076:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	015a      	lsls	r2, r3, #5
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	4413      	add	r3, r2
 8010080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010084:	461a      	mov	r2, r3
 8010086:	2300      	movs	r3, #0
 8010088:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	015a      	lsls	r2, r3, #5
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	4413      	add	r3, r2
 8010092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010096:	461a      	mov	r2, r3
 8010098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801009c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	3301      	adds	r3, #1
 80100a2:	613b      	str	r3, [r7, #16]
 80100a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a6:	693a      	ldr	r2, [r7, #16]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d3b7      	bcc.n	801001c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	68fa      	ldr	r2, [r7, #12]
 80100b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80100cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80100ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d105      	bne.n	80100e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	699b      	ldr	r3, [r3, #24]
 80100d8:	f043 0210 	orr.w	r2, r3, #16
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	699a      	ldr	r2, [r3, #24]
 80100e4:	4b0f      	ldr	r3, [pc, #60]	; (8010124 <USB_DevInit+0x2c4>)
 80100e6:	4313      	orrs	r3, r2
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80100ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d005      	beq.n	80100fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	699b      	ldr	r3, [r3, #24]
 80100f6:	f043 0208 	orr.w	r2, r3, #8
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80100fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010100:	2b01      	cmp	r3, #1
 8010102:	d107      	bne.n	8010114 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801010c:	f043 0304 	orr.w	r3, r3, #4
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010114:	7dfb      	ldrb	r3, [r7, #23]
}
 8010116:	4618      	mov	r0, r3
 8010118:	3718      	adds	r7, #24
 801011a:	46bd      	mov	sp, r7
 801011c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010120:	b004      	add	sp, #16
 8010122:	4770      	bx	lr
 8010124:	803c3800 	.word	0x803c3800

08010128 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010128:	b480      	push	{r7}
 801012a:	b085      	sub	sp, #20
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010132:	2300      	movs	r3, #0
 8010134:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	019b      	lsls	r3, r3, #6
 801013a:	f043 0220 	orr.w	r2, r3, #32
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3301      	adds	r3, #1
 8010146:	60fb      	str	r3, [r7, #12]
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	4a09      	ldr	r2, [pc, #36]	; (8010170 <USB_FlushTxFifo+0x48>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d901      	bls.n	8010154 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010150:	2303      	movs	r3, #3
 8010152:	e006      	b.n	8010162 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	691b      	ldr	r3, [r3, #16]
 8010158:	f003 0320 	and.w	r3, r3, #32
 801015c:	2b20      	cmp	r3, #32
 801015e:	d0f0      	beq.n	8010142 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3714      	adds	r7, #20
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	00030d40 	.word	0x00030d40

08010174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010174:	b480      	push	{r7}
 8010176:	b085      	sub	sp, #20
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801017c:	2300      	movs	r3, #0
 801017e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2210      	movs	r2, #16
 8010184:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	3301      	adds	r3, #1
 801018a:	60fb      	str	r3, [r7, #12]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	4a09      	ldr	r2, [pc, #36]	; (80101b4 <USB_FlushRxFifo+0x40>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d901      	bls.n	8010198 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010194:	2303      	movs	r3, #3
 8010196:	e006      	b.n	80101a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	691b      	ldr	r3, [r3, #16]
 801019c:	f003 0310 	and.w	r3, r3, #16
 80101a0:	2b10      	cmp	r3, #16
 80101a2:	d0f0      	beq.n	8010186 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3714      	adds	r7, #20
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	00030d40 	.word	0x00030d40

080101b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b085      	sub	sp, #20
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	460b      	mov	r3, r1
 80101c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	78fb      	ldrb	r3, [r7, #3]
 80101d2:	68f9      	ldr	r1, [r7, #12]
 80101d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101d8:	4313      	orrs	r3, r2
 80101da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80101dc:	2300      	movs	r3, #0
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80101ea:	b480      	push	{r7}
 80101ec:	b087      	sub	sp, #28
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101fc:	689b      	ldr	r3, [r3, #8]
 80101fe:	f003 0306 	and.w	r3, r3, #6
 8010202:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d102      	bne.n	8010210 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801020a:	2300      	movs	r3, #0
 801020c:	75fb      	strb	r3, [r7, #23]
 801020e:	e00a      	b.n	8010226 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2b02      	cmp	r3, #2
 8010214:	d002      	beq.n	801021c <USB_GetDevSpeed+0x32>
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2b06      	cmp	r3, #6
 801021a:	d102      	bne.n	8010222 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801021c:	2302      	movs	r3, #2
 801021e:	75fb      	strb	r3, [r7, #23]
 8010220:	e001      	b.n	8010226 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010222:	230f      	movs	r3, #15
 8010224:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010226:	7dfb      	ldrb	r3, [r7, #23]
}
 8010228:	4618      	mov	r0, r3
 801022a:	371c      	adds	r7, #28
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr

08010234 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010234:	b480      	push	{r7}
 8010236:	b085      	sub	sp, #20
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	785b      	ldrb	r3, [r3, #1]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d13a      	bne.n	80102c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010256:	69da      	ldr	r2, [r3, #28]
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	f003 030f 	and.w	r3, r3, #15
 8010260:	2101      	movs	r1, #1
 8010262:	fa01 f303 	lsl.w	r3, r1, r3
 8010266:	b29b      	uxth	r3, r3
 8010268:	68f9      	ldr	r1, [r7, #12]
 801026a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801026e:	4313      	orrs	r3, r2
 8010270:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	015a      	lsls	r2, r3, #5
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	4413      	add	r3, r2
 801027a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010284:	2b00      	cmp	r3, #0
 8010286:	d155      	bne.n	8010334 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	015a      	lsls	r2, r3, #5
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4413      	add	r3, r2
 8010290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	78db      	ldrb	r3, [r3, #3]
 80102a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80102a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	059b      	lsls	r3, r3, #22
 80102aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80102ac:	4313      	orrs	r3, r2
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	0151      	lsls	r1, r2, #5
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	440a      	add	r2, r1
 80102b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102c2:	6013      	str	r3, [r2, #0]
 80102c4:	e036      	b.n	8010334 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102cc:	69da      	ldr	r2, [r3, #28]
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	f003 030f 	and.w	r3, r3, #15
 80102d6:	2101      	movs	r1, #1
 80102d8:	fa01 f303 	lsl.w	r3, r1, r3
 80102dc:	041b      	lsls	r3, r3, #16
 80102de:	68f9      	ldr	r1, [r7, #12]
 80102e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102e4:	4313      	orrs	r3, r2
 80102e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	015a      	lsls	r2, r3, #5
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4413      	add	r3, r2
 80102f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d11a      	bne.n	8010334 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	015a      	lsls	r2, r3, #5
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	4413      	add	r3, r2
 8010306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	78db      	ldrb	r3, [r3, #3]
 8010318:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801031a:	430b      	orrs	r3, r1
 801031c:	4313      	orrs	r3, r2
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	0151      	lsls	r1, r2, #5
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	440a      	add	r2, r1
 8010326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801032a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801032e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010332:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010334:	2300      	movs	r3, #0
}
 8010336:	4618      	mov	r0, r3
 8010338:	3714      	adds	r7, #20
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
	...

08010344 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010344:	b480      	push	{r7}
 8010346:	b085      	sub	sp, #20
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	785b      	ldrb	r3, [r3, #1]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d161      	bne.n	8010424 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	015a      	lsls	r2, r3, #5
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	4413      	add	r3, r2
 8010368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010376:	d11f      	bne.n	80103b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	015a      	lsls	r2, r3, #5
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	4413      	add	r3, r2
 8010380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	0151      	lsls	r1, r2, #5
 801038a:	68fa      	ldr	r2, [r7, #12]
 801038c:	440a      	add	r2, r1
 801038e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010392:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010396:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	015a      	lsls	r2, r3, #5
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	4413      	add	r3, r2
 80103a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	68ba      	ldr	r2, [r7, #8]
 80103a8:	0151      	lsls	r1, r2, #5
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	440a      	add	r2, r1
 80103ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80103b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	f003 030f 	and.w	r3, r3, #15
 80103c8:	2101      	movs	r1, #1
 80103ca:	fa01 f303 	lsl.w	r3, r1, r3
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	43db      	mvns	r3, r3
 80103d2:	68f9      	ldr	r1, [r7, #12]
 80103d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103d8:	4013      	ands	r3, r2
 80103da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103e2:	69da      	ldr	r2, [r3, #28]
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	f003 030f 	and.w	r3, r3, #15
 80103ec:	2101      	movs	r1, #1
 80103ee:	fa01 f303 	lsl.w	r3, r1, r3
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	43db      	mvns	r3, r3
 80103f6:	68f9      	ldr	r1, [r7, #12]
 80103f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103fc:	4013      	ands	r3, r2
 80103fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	015a      	lsls	r2, r3, #5
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	4413      	add	r3, r2
 8010408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	0159      	lsls	r1, r3, #5
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	440b      	add	r3, r1
 8010416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801041a:	4619      	mov	r1, r3
 801041c:	4b35      	ldr	r3, [pc, #212]	; (80104f4 <USB_DeactivateEndpoint+0x1b0>)
 801041e:	4013      	ands	r3, r2
 8010420:	600b      	str	r3, [r1, #0]
 8010422:	e060      	b.n	80104e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	015a      	lsls	r2, r3, #5
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	4413      	add	r3, r2
 801042c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801043a:	d11f      	bne.n	801047c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	015a      	lsls	r2, r3, #5
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	4413      	add	r3, r2
 8010444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	0151      	lsls	r1, r2, #5
 801044e:	68fa      	ldr	r2, [r7, #12]
 8010450:	440a      	add	r2, r1
 8010452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010456:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801045a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	015a      	lsls	r2, r3, #5
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	4413      	add	r3, r2
 8010464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68ba      	ldr	r2, [r7, #8]
 801046c:	0151      	lsls	r1, r2, #5
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	440a      	add	r2, r1
 8010472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801047a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	f003 030f 	and.w	r3, r3, #15
 801048c:	2101      	movs	r1, #1
 801048e:	fa01 f303 	lsl.w	r3, r1, r3
 8010492:	041b      	lsls	r3, r3, #16
 8010494:	43db      	mvns	r3, r3
 8010496:	68f9      	ldr	r1, [r7, #12]
 8010498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801049c:	4013      	ands	r3, r2
 801049e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104a6:	69da      	ldr	r2, [r3, #28]
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	f003 030f 	and.w	r3, r3, #15
 80104b0:	2101      	movs	r1, #1
 80104b2:	fa01 f303 	lsl.w	r3, r1, r3
 80104b6:	041b      	lsls	r3, r3, #16
 80104b8:	43db      	mvns	r3, r3
 80104ba:	68f9      	ldr	r1, [r7, #12]
 80104bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104c0:	4013      	ands	r3, r2
 80104c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	015a      	lsls	r2, r3, #5
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	4413      	add	r3, r2
 80104cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	0159      	lsls	r1, r3, #5
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	440b      	add	r3, r1
 80104da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104de:	4619      	mov	r1, r3
 80104e0:	4b05      	ldr	r3, [pc, #20]	; (80104f8 <USB_DeactivateEndpoint+0x1b4>)
 80104e2:	4013      	ands	r3, r2
 80104e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80104e6:	2300      	movs	r3, #0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3714      	adds	r7, #20
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr
 80104f4:	ec337800 	.word	0xec337800
 80104f8:	eff37800 	.word	0xeff37800

080104fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b08a      	sub	sp, #40	; 0x28
 8010500:	af02      	add	r7, sp, #8
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	4613      	mov	r3, r2
 8010508:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	785b      	ldrb	r3, [r3, #1]
 8010518:	2b01      	cmp	r3, #1
 801051a:	f040 815c 	bne.w	80107d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	695b      	ldr	r3, [r3, #20]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d132      	bne.n	801058c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	015a      	lsls	r2, r3, #5
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	4413      	add	r3, r2
 801052e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010532:	691b      	ldr	r3, [r3, #16]
 8010534:	69ba      	ldr	r2, [r7, #24]
 8010536:	0151      	lsls	r1, r2, #5
 8010538:	69fa      	ldr	r2, [r7, #28]
 801053a:	440a      	add	r2, r1
 801053c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010540:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010544:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010548:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801054a:	69bb      	ldr	r3, [r7, #24]
 801054c:	015a      	lsls	r2, r3, #5
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	4413      	add	r3, r2
 8010552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010556:	691b      	ldr	r3, [r3, #16]
 8010558:	69ba      	ldr	r2, [r7, #24]
 801055a:	0151      	lsls	r1, r2, #5
 801055c:	69fa      	ldr	r2, [r7, #28]
 801055e:	440a      	add	r2, r1
 8010560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010568:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	015a      	lsls	r2, r3, #5
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	4413      	add	r3, r2
 8010572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010576:	691b      	ldr	r3, [r3, #16]
 8010578:	69ba      	ldr	r2, [r7, #24]
 801057a:	0151      	lsls	r1, r2, #5
 801057c:	69fa      	ldr	r2, [r7, #28]
 801057e:	440a      	add	r2, r1
 8010580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010584:	0cdb      	lsrs	r3, r3, #19
 8010586:	04db      	lsls	r3, r3, #19
 8010588:	6113      	str	r3, [r2, #16]
 801058a:	e074      	b.n	8010676 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	015a      	lsls	r2, r3, #5
 8010590:	69fb      	ldr	r3, [r7, #28]
 8010592:	4413      	add	r3, r2
 8010594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010598:	691b      	ldr	r3, [r3, #16]
 801059a:	69ba      	ldr	r2, [r7, #24]
 801059c:	0151      	lsls	r1, r2, #5
 801059e:	69fa      	ldr	r2, [r7, #28]
 80105a0:	440a      	add	r2, r1
 80105a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105a6:	0cdb      	lsrs	r3, r3, #19
 80105a8:	04db      	lsls	r3, r3, #19
 80105aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	015a      	lsls	r2, r3, #5
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	4413      	add	r3, r2
 80105b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b8:	691b      	ldr	r3, [r3, #16]
 80105ba:	69ba      	ldr	r2, [r7, #24]
 80105bc:	0151      	lsls	r1, r2, #5
 80105be:	69fa      	ldr	r2, [r7, #28]
 80105c0:	440a      	add	r2, r1
 80105c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80105ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80105ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80105d0:	69bb      	ldr	r3, [r7, #24]
 80105d2:	015a      	lsls	r2, r3, #5
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	4413      	add	r3, r2
 80105d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105dc:	691a      	ldr	r2, [r3, #16]
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	6959      	ldr	r1, [r3, #20]
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	689b      	ldr	r3, [r3, #8]
 80105e6:	440b      	add	r3, r1
 80105e8:	1e59      	subs	r1, r3, #1
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80105f2:	04d9      	lsls	r1, r3, #19
 80105f4:	4b9d      	ldr	r3, [pc, #628]	; (801086c <USB_EPStartXfer+0x370>)
 80105f6:	400b      	ands	r3, r1
 80105f8:	69b9      	ldr	r1, [r7, #24]
 80105fa:	0148      	lsls	r0, r1, #5
 80105fc:	69f9      	ldr	r1, [r7, #28]
 80105fe:	4401      	add	r1, r0
 8010600:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010604:	4313      	orrs	r3, r2
 8010606:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	015a      	lsls	r2, r3, #5
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	4413      	add	r3, r2
 8010610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010614:	691a      	ldr	r2, [r3, #16]
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	695b      	ldr	r3, [r3, #20]
 801061a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801061e:	69b9      	ldr	r1, [r7, #24]
 8010620:	0148      	lsls	r0, r1, #5
 8010622:	69f9      	ldr	r1, [r7, #28]
 8010624:	4401      	add	r1, r0
 8010626:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801062a:	4313      	orrs	r3, r2
 801062c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	78db      	ldrb	r3, [r3, #3]
 8010632:	2b01      	cmp	r3, #1
 8010634:	d11f      	bne.n	8010676 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	015a      	lsls	r2, r3, #5
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	4413      	add	r3, r2
 801063e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010642:	691b      	ldr	r3, [r3, #16]
 8010644:	69ba      	ldr	r2, [r7, #24]
 8010646:	0151      	lsls	r1, r2, #5
 8010648:	69fa      	ldr	r2, [r7, #28]
 801064a:	440a      	add	r2, r1
 801064c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010650:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010654:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	015a      	lsls	r2, r3, #5
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	4413      	add	r3, r2
 801065e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010662:	691b      	ldr	r3, [r3, #16]
 8010664:	69ba      	ldr	r2, [r7, #24]
 8010666:	0151      	lsls	r1, r2, #5
 8010668:	69fa      	ldr	r2, [r7, #28]
 801066a:	440a      	add	r2, r1
 801066c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010674:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010676:	79fb      	ldrb	r3, [r7, #7]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d14b      	bne.n	8010714 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	691b      	ldr	r3, [r3, #16]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d009      	beq.n	8010698 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	015a      	lsls	r2, r3, #5
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	4413      	add	r3, r2
 801068c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010690:	461a      	mov	r2, r3
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	78db      	ldrb	r3, [r3, #3]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d128      	bne.n	80106f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d110      	bne.n	80106d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	015a      	lsls	r2, r3, #5
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	4413      	add	r3, r2
 80106b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	69ba      	ldr	r2, [r7, #24]
 80106c0:	0151      	lsls	r1, r2, #5
 80106c2:	69fa      	ldr	r2, [r7, #28]
 80106c4:	440a      	add	r2, r1
 80106c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80106ce:	6013      	str	r3, [r2, #0]
 80106d0:	e00f      	b.n	80106f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	015a      	lsls	r2, r3, #5
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	4413      	add	r3, r2
 80106da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	69ba      	ldr	r2, [r7, #24]
 80106e2:	0151      	lsls	r1, r2, #5
 80106e4:	69fa      	ldr	r2, [r7, #28]
 80106e6:	440a      	add	r2, r1
 80106e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	015a      	lsls	r2, r3, #5
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	4413      	add	r3, r2
 80106fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	69ba      	ldr	r2, [r7, #24]
 8010702:	0151      	lsls	r1, r2, #5
 8010704:	69fa      	ldr	r2, [r7, #28]
 8010706:	440a      	add	r2, r1
 8010708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801070c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010710:	6013      	str	r3, [r2, #0]
 8010712:	e12f      	b.n	8010974 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	015a      	lsls	r2, r3, #5
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	4413      	add	r3, r2
 801071c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	69ba      	ldr	r2, [r7, #24]
 8010724:	0151      	lsls	r1, r2, #5
 8010726:	69fa      	ldr	r2, [r7, #28]
 8010728:	440a      	add	r2, r1
 801072a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801072e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010732:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	78db      	ldrb	r3, [r3, #3]
 8010738:	2b01      	cmp	r3, #1
 801073a:	d015      	beq.n	8010768 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	695b      	ldr	r3, [r3, #20]
 8010740:	2b00      	cmp	r3, #0
 8010742:	f000 8117 	beq.w	8010974 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801074c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	f003 030f 	and.w	r3, r3, #15
 8010756:	2101      	movs	r1, #1
 8010758:	fa01 f303 	lsl.w	r3, r1, r3
 801075c:	69f9      	ldr	r1, [r7, #28]
 801075e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010762:	4313      	orrs	r3, r2
 8010764:	634b      	str	r3, [r1, #52]	; 0x34
 8010766:	e105      	b.n	8010974 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010774:	2b00      	cmp	r3, #0
 8010776:	d110      	bne.n	801079a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	015a      	lsls	r2, r3, #5
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	4413      	add	r3, r2
 8010780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	69ba      	ldr	r2, [r7, #24]
 8010788:	0151      	lsls	r1, r2, #5
 801078a:	69fa      	ldr	r2, [r7, #28]
 801078c:	440a      	add	r2, r1
 801078e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	e00f      	b.n	80107ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	015a      	lsls	r2, r3, #5
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	4413      	add	r3, r2
 80107a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	69ba      	ldr	r2, [r7, #24]
 80107aa:	0151      	lsls	r1, r2, #5
 80107ac:	69fa      	ldr	r2, [r7, #28]
 80107ae:	440a      	add	r2, r1
 80107b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	68d9      	ldr	r1, [r3, #12]
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	781a      	ldrb	r2, [r3, #0]
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	695b      	ldr	r3, [r3, #20]
 80107c6:	b298      	uxth	r0, r3
 80107c8:	79fb      	ldrb	r3, [r7, #7]
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	4603      	mov	r3, r0
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f000 fa2b 	bl	8010c2a <USB_WritePacket>
 80107d4:	e0ce      	b.n	8010974 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	015a      	lsls	r2, r3, #5
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	4413      	add	r3, r2
 80107de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107e2:	691b      	ldr	r3, [r3, #16]
 80107e4:	69ba      	ldr	r2, [r7, #24]
 80107e6:	0151      	lsls	r1, r2, #5
 80107e8:	69fa      	ldr	r2, [r7, #28]
 80107ea:	440a      	add	r2, r1
 80107ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107f0:	0cdb      	lsrs	r3, r3, #19
 80107f2:	04db      	lsls	r3, r3, #19
 80107f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	015a      	lsls	r2, r3, #5
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	4413      	add	r3, r2
 80107fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010802:	691b      	ldr	r3, [r3, #16]
 8010804:	69ba      	ldr	r2, [r7, #24]
 8010806:	0151      	lsls	r1, r2, #5
 8010808:	69fa      	ldr	r2, [r7, #28]
 801080a:	440a      	add	r2, r1
 801080c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010818:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	695b      	ldr	r3, [r3, #20]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d126      	bne.n	8010870 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	015a      	lsls	r2, r3, #5
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	4413      	add	r3, r2
 801082a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801082e:	691a      	ldr	r2, [r3, #16]
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	689b      	ldr	r3, [r3, #8]
 8010834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010838:	69b9      	ldr	r1, [r7, #24]
 801083a:	0148      	lsls	r0, r1, #5
 801083c:	69f9      	ldr	r1, [r7, #28]
 801083e:	4401      	add	r1, r0
 8010840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010844:	4313      	orrs	r3, r2
 8010846:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	015a      	lsls	r2, r3, #5
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	4413      	add	r3, r2
 8010850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010854:	691b      	ldr	r3, [r3, #16]
 8010856:	69ba      	ldr	r2, [r7, #24]
 8010858:	0151      	lsls	r1, r2, #5
 801085a:	69fa      	ldr	r2, [r7, #28]
 801085c:	440a      	add	r2, r1
 801085e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010866:	6113      	str	r3, [r2, #16]
 8010868:	e036      	b.n	80108d8 <USB_EPStartXfer+0x3dc>
 801086a:	bf00      	nop
 801086c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	695a      	ldr	r2, [r3, #20]
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	4413      	add	r3, r2
 801087a:	1e5a      	subs	r2, r3, #1
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	689b      	ldr	r3, [r3, #8]
 8010880:	fbb2 f3f3 	udiv	r3, r2, r3
 8010884:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	015a      	lsls	r2, r3, #5
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	4413      	add	r3, r2
 801088e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010892:	691a      	ldr	r2, [r3, #16]
 8010894:	8afb      	ldrh	r3, [r7, #22]
 8010896:	04d9      	lsls	r1, r3, #19
 8010898:	4b39      	ldr	r3, [pc, #228]	; (8010980 <USB_EPStartXfer+0x484>)
 801089a:	400b      	ands	r3, r1
 801089c:	69b9      	ldr	r1, [r7, #24]
 801089e:	0148      	lsls	r0, r1, #5
 80108a0:	69f9      	ldr	r1, [r7, #28]
 80108a2:	4401      	add	r1, r0
 80108a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80108a8:	4313      	orrs	r3, r2
 80108aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	015a      	lsls	r2, r3, #5
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	4413      	add	r3, r2
 80108b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108b8:	691a      	ldr	r2, [r3, #16]
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	689b      	ldr	r3, [r3, #8]
 80108be:	8af9      	ldrh	r1, [r7, #22]
 80108c0:	fb01 f303 	mul.w	r3, r1, r3
 80108c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108c8:	69b9      	ldr	r1, [r7, #24]
 80108ca:	0148      	lsls	r0, r1, #5
 80108cc:	69f9      	ldr	r1, [r7, #28]
 80108ce:	4401      	add	r1, r0
 80108d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80108d4:	4313      	orrs	r3, r2
 80108d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80108d8:	79fb      	ldrb	r3, [r7, #7]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d10d      	bne.n	80108fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	68db      	ldr	r3, [r3, #12]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d009      	beq.n	80108fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	68d9      	ldr	r1, [r3, #12]
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	015a      	lsls	r2, r3, #5
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	4413      	add	r3, r2
 80108f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108f6:	460a      	mov	r2, r1
 80108f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	78db      	ldrb	r3, [r3, #3]
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d128      	bne.n	8010954 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010908:	689b      	ldr	r3, [r3, #8]
 801090a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801090e:	2b00      	cmp	r3, #0
 8010910:	d110      	bne.n	8010934 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	015a      	lsls	r2, r3, #5
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	4413      	add	r3, r2
 801091a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	69ba      	ldr	r2, [r7, #24]
 8010922:	0151      	lsls	r1, r2, #5
 8010924:	69fa      	ldr	r2, [r7, #28]
 8010926:	440a      	add	r2, r1
 8010928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801092c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010930:	6013      	str	r3, [r2, #0]
 8010932:	e00f      	b.n	8010954 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	015a      	lsls	r2, r3, #5
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	4413      	add	r3, r2
 801093c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	69ba      	ldr	r2, [r7, #24]
 8010944:	0151      	lsls	r1, r2, #5
 8010946:	69fa      	ldr	r2, [r7, #28]
 8010948:	440a      	add	r2, r1
 801094a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801094e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010952:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	015a      	lsls	r2, r3, #5
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	4413      	add	r3, r2
 801095c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	69ba      	ldr	r2, [r7, #24]
 8010964:	0151      	lsls	r1, r2, #5
 8010966:	69fa      	ldr	r2, [r7, #28]
 8010968:	440a      	add	r2, r1
 801096a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801096e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010974:	2300      	movs	r3, #0
}
 8010976:	4618      	mov	r0, r3
 8010978:	3720      	adds	r7, #32
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	1ff80000 	.word	0x1ff80000

08010984 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010984:	b480      	push	{r7}
 8010986:	b087      	sub	sp, #28
 8010988:	af00      	add	r7, sp, #0
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	60b9      	str	r1, [r7, #8]
 801098e:	4613      	mov	r3, r2
 8010990:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	785b      	ldrb	r3, [r3, #1]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	f040 80cd 	bne.w	8010b40 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	695b      	ldr	r3, [r3, #20]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d132      	bne.n	8010a14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	015a      	lsls	r2, r3, #5
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	4413      	add	r3, r2
 80109b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	693a      	ldr	r2, [r7, #16]
 80109be:	0151      	lsls	r1, r2, #5
 80109c0:	697a      	ldr	r2, [r7, #20]
 80109c2:	440a      	add	r2, r1
 80109c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80109cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80109d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	015a      	lsls	r2, r3, #5
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	4413      	add	r3, r2
 80109da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109de:	691b      	ldr	r3, [r3, #16]
 80109e0:	693a      	ldr	r2, [r7, #16]
 80109e2:	0151      	lsls	r1, r2, #5
 80109e4:	697a      	ldr	r2, [r7, #20]
 80109e6:	440a      	add	r2, r1
 80109e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80109f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	015a      	lsls	r2, r3, #5
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	4413      	add	r3, r2
 80109fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109fe:	691b      	ldr	r3, [r3, #16]
 8010a00:	693a      	ldr	r2, [r7, #16]
 8010a02:	0151      	lsls	r1, r2, #5
 8010a04:	697a      	ldr	r2, [r7, #20]
 8010a06:	440a      	add	r2, r1
 8010a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a0c:	0cdb      	lsrs	r3, r3, #19
 8010a0e:	04db      	lsls	r3, r3, #19
 8010a10:	6113      	str	r3, [r2, #16]
 8010a12:	e04e      	b.n	8010ab2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	015a      	lsls	r2, r3, #5
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a20:	691b      	ldr	r3, [r3, #16]
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	0151      	lsls	r1, r2, #5
 8010a26:	697a      	ldr	r2, [r7, #20]
 8010a28:	440a      	add	r2, r1
 8010a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a2e:	0cdb      	lsrs	r3, r3, #19
 8010a30:	04db      	lsls	r3, r3, #19
 8010a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	015a      	lsls	r2, r3, #5
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a40:	691b      	ldr	r3, [r3, #16]
 8010a42:	693a      	ldr	r2, [r7, #16]
 8010a44:	0151      	lsls	r1, r2, #5
 8010a46:	697a      	ldr	r2, [r7, #20]
 8010a48:	440a      	add	r2, r1
 8010a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010a52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010a56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	695a      	ldr	r2, [r3, #20]
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d903      	bls.n	8010a6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	689a      	ldr	r2, [r3, #8]
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	015a      	lsls	r2, r3, #5
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	4413      	add	r3, r2
 8010a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a78:	691b      	ldr	r3, [r3, #16]
 8010a7a:	693a      	ldr	r2, [r7, #16]
 8010a7c:	0151      	lsls	r1, r2, #5
 8010a7e:	697a      	ldr	r2, [r7, #20]
 8010a80:	440a      	add	r2, r1
 8010a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	015a      	lsls	r2, r3, #5
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	4413      	add	r3, r2
 8010a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a98:	691a      	ldr	r2, [r3, #16]
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	695b      	ldr	r3, [r3, #20]
 8010a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010aa2:	6939      	ldr	r1, [r7, #16]
 8010aa4:	0148      	lsls	r0, r1, #5
 8010aa6:	6979      	ldr	r1, [r7, #20]
 8010aa8:	4401      	add	r1, r0
 8010aaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010ab2:	79fb      	ldrb	r3, [r7, #7]
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d11e      	bne.n	8010af6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	691b      	ldr	r3, [r3, #16]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d009      	beq.n	8010ad4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	015a      	lsls	r2, r3, #5
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	4413      	add	r3, r2
 8010ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010acc:	461a      	mov	r2, r3
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	015a      	lsls	r2, r3, #5
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	4413      	add	r3, r2
 8010adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	693a      	ldr	r2, [r7, #16]
 8010ae4:	0151      	lsls	r1, r2, #5
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	440a      	add	r2, r1
 8010aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010aee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010af2:	6013      	str	r3, [r2, #0]
 8010af4:	e092      	b.n	8010c1c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	015a      	lsls	r2, r3, #5
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	4413      	add	r3, r2
 8010afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	693a      	ldr	r2, [r7, #16]
 8010b06:	0151      	lsls	r1, r2, #5
 8010b08:	697a      	ldr	r2, [r7, #20]
 8010b0a:	440a      	add	r2, r1
 8010b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010b14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	695b      	ldr	r3, [r3, #20]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d07e      	beq.n	8010c1c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	f003 030f 	and.w	r3, r3, #15
 8010b2e:	2101      	movs	r1, #1
 8010b30:	fa01 f303 	lsl.w	r3, r1, r3
 8010b34:	6979      	ldr	r1, [r7, #20]
 8010b36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b3a:	4313      	orrs	r3, r2
 8010b3c:	634b      	str	r3, [r1, #52]	; 0x34
 8010b3e:	e06d      	b.n	8010c1c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	015a      	lsls	r2, r3, #5
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	4413      	add	r3, r2
 8010b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b4c:	691b      	ldr	r3, [r3, #16]
 8010b4e:	693a      	ldr	r2, [r7, #16]
 8010b50:	0151      	lsls	r1, r2, #5
 8010b52:	697a      	ldr	r2, [r7, #20]
 8010b54:	440a      	add	r2, r1
 8010b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b5a:	0cdb      	lsrs	r3, r3, #19
 8010b5c:	04db      	lsls	r3, r3, #19
 8010b5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	015a      	lsls	r2, r3, #5
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	4413      	add	r3, r2
 8010b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b6c:	691b      	ldr	r3, [r3, #16]
 8010b6e:	693a      	ldr	r2, [r7, #16]
 8010b70:	0151      	lsls	r1, r2, #5
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	440a      	add	r2, r1
 8010b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010b7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010b82:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	695b      	ldr	r3, [r3, #20]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d003      	beq.n	8010b94 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	689a      	ldr	r2, [r3, #8]
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	015a      	lsls	r2, r3, #5
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ba0:	691b      	ldr	r3, [r3, #16]
 8010ba2:	693a      	ldr	r2, [r7, #16]
 8010ba4:	0151      	lsls	r1, r2, #5
 8010ba6:	697a      	ldr	r2, [r7, #20]
 8010ba8:	440a      	add	r2, r1
 8010baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010bb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	015a      	lsls	r2, r3, #5
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	4413      	add	r3, r2
 8010bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bc0:	691a      	ldr	r2, [r3, #16]
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	689b      	ldr	r3, [r3, #8]
 8010bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010bca:	6939      	ldr	r1, [r7, #16]
 8010bcc:	0148      	lsls	r0, r1, #5
 8010bce:	6979      	ldr	r1, [r7, #20]
 8010bd0:	4401      	add	r1, r0
 8010bd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010bda:	79fb      	ldrb	r3, [r7, #7]
 8010bdc:	2b01      	cmp	r3, #1
 8010bde:	d10d      	bne.n	8010bfc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d009      	beq.n	8010bfc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	68d9      	ldr	r1, [r3, #12]
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	015a      	lsls	r2, r3, #5
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bf8:	460a      	mov	r2, r1
 8010bfa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	015a      	lsls	r2, r3, #5
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	4413      	add	r3, r2
 8010c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	693a      	ldr	r2, [r7, #16]
 8010c0c:	0151      	lsls	r1, r2, #5
 8010c0e:	697a      	ldr	r2, [r7, #20]
 8010c10:	440a      	add	r2, r1
 8010c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010c1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c1c:	2300      	movs	r3, #0
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	371c      	adds	r7, #28
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010c2a:	b480      	push	{r7}
 8010c2c:	b089      	sub	sp, #36	; 0x24
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	60f8      	str	r0, [r7, #12]
 8010c32:	60b9      	str	r1, [r7, #8]
 8010c34:	4611      	mov	r1, r2
 8010c36:	461a      	mov	r2, r3
 8010c38:	460b      	mov	r3, r1
 8010c3a:	71fb      	strb	r3, [r7, #7]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010c48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d11a      	bne.n	8010c86 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010c50:	88bb      	ldrh	r3, [r7, #4]
 8010c52:	3303      	adds	r3, #3
 8010c54:	089b      	lsrs	r3, r3, #2
 8010c56:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010c58:	2300      	movs	r3, #0
 8010c5a:	61bb      	str	r3, [r7, #24]
 8010c5c:	e00f      	b.n	8010c7e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010c5e:	79fb      	ldrb	r3, [r7, #7]
 8010c60:	031a      	lsls	r2, r3, #12
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	4413      	add	r3, r2
 8010c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010c72:	69fb      	ldr	r3, [r7, #28]
 8010c74:	3304      	adds	r3, #4
 8010c76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	61bb      	str	r3, [r7, #24]
 8010c7e:	69ba      	ldr	r2, [r7, #24]
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d3eb      	bcc.n	8010c5e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010c86:	2300      	movs	r3, #0
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3724      	adds	r7, #36	; 0x24
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr

08010c94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b089      	sub	sp, #36	; 0x24
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010caa:	88fb      	ldrh	r3, [r7, #6]
 8010cac:	3303      	adds	r3, #3
 8010cae:	089b      	lsrs	r3, r3, #2
 8010cb0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	61bb      	str	r3, [r7, #24]
 8010cb6:	e00b      	b.n	8010cd0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	3304      	adds	r3, #4
 8010cc8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	3301      	adds	r3, #1
 8010cce:	61bb      	str	r3, [r7, #24]
 8010cd0:	69ba      	ldr	r2, [r7, #24]
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d3ef      	bcc.n	8010cb8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010cd8:	69fb      	ldr	r3, [r7, #28]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3724      	adds	r7, #36	; 0x24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce4:	4770      	bx	lr

08010ce6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010ce6:	b480      	push	{r7}
 8010ce8:	b085      	sub	sp, #20
 8010cea:	af00      	add	r7, sp, #0
 8010cec:	6078      	str	r0, [r7, #4]
 8010cee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	785b      	ldrb	r3, [r3, #1]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d12c      	bne.n	8010d5c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	015a      	lsls	r2, r3, #5
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	4413      	add	r3, r2
 8010d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	db12      	blt.n	8010d3a <USB_EPSetStall+0x54>
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d00f      	beq.n	8010d3a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	015a      	lsls	r2, r3, #5
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	4413      	add	r3, r2
 8010d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	68ba      	ldr	r2, [r7, #8]
 8010d2a:	0151      	lsls	r1, r2, #5
 8010d2c:	68fa      	ldr	r2, [r7, #12]
 8010d2e:	440a      	add	r2, r1
 8010d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010d38:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	015a      	lsls	r2, r3, #5
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	4413      	add	r3, r2
 8010d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	68ba      	ldr	r2, [r7, #8]
 8010d4a:	0151      	lsls	r1, r2, #5
 8010d4c:	68fa      	ldr	r2, [r7, #12]
 8010d4e:	440a      	add	r2, r1
 8010d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010d58:	6013      	str	r3, [r2, #0]
 8010d5a:	e02b      	b.n	8010db4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	015a      	lsls	r2, r3, #5
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	4413      	add	r3, r2
 8010d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	db12      	blt.n	8010d94 <USB_EPSetStall+0xae>
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00f      	beq.n	8010d94 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	015a      	lsls	r2, r3, #5
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	68ba      	ldr	r2, [r7, #8]
 8010d84:	0151      	lsls	r1, r2, #5
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	440a      	add	r2, r1
 8010d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010d92:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	015a      	lsls	r2, r3, #5
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	4413      	add	r3, r2
 8010d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	0151      	lsls	r1, r2, #5
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	440a      	add	r2, r1
 8010daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010db2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010db4:	2300      	movs	r3, #0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3714      	adds	r7, #20
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr

08010dc2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010dc2:	b480      	push	{r7}
 8010dc4:	b085      	sub	sp, #20
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
 8010dca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	785b      	ldrb	r3, [r3, #1]
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d128      	bne.n	8010e30 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	015a      	lsls	r2, r3, #5
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	4413      	add	r3, r2
 8010de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	68ba      	ldr	r2, [r7, #8]
 8010dee:	0151      	lsls	r1, r2, #5
 8010df0:	68fa      	ldr	r2, [r7, #12]
 8010df2:	440a      	add	r2, r1
 8010df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010df8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010dfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	78db      	ldrb	r3, [r3, #3]
 8010e02:	2b03      	cmp	r3, #3
 8010e04:	d003      	beq.n	8010e0e <USB_EPClearStall+0x4c>
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	78db      	ldrb	r3, [r3, #3]
 8010e0a:	2b02      	cmp	r3, #2
 8010e0c:	d138      	bne.n	8010e80 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	015a      	lsls	r2, r3, #5
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	4413      	add	r3, r2
 8010e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	68ba      	ldr	r2, [r7, #8]
 8010e1e:	0151      	lsls	r1, r2, #5
 8010e20:	68fa      	ldr	r2, [r7, #12]
 8010e22:	440a      	add	r2, r1
 8010e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e2c:	6013      	str	r3, [r2, #0]
 8010e2e:	e027      	b.n	8010e80 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	015a      	lsls	r2, r3, #5
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	4413      	add	r3, r2
 8010e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	68ba      	ldr	r2, [r7, #8]
 8010e40:	0151      	lsls	r1, r2, #5
 8010e42:	68fa      	ldr	r2, [r7, #12]
 8010e44:	440a      	add	r2, r1
 8010e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	78db      	ldrb	r3, [r3, #3]
 8010e54:	2b03      	cmp	r3, #3
 8010e56:	d003      	beq.n	8010e60 <USB_EPClearStall+0x9e>
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	78db      	ldrb	r3, [r3, #3]
 8010e5c:	2b02      	cmp	r3, #2
 8010e5e:	d10f      	bne.n	8010e80 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	015a      	lsls	r2, r3, #5
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	4413      	add	r3, r2
 8010e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	68ba      	ldr	r2, [r7, #8]
 8010e70:	0151      	lsls	r1, r2, #5
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	440a      	add	r2, r1
 8010e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e7e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3714      	adds	r7, #20
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr

08010e8e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010e8e:	b480      	push	{r7}
 8010e90:	b085      	sub	sp, #20
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	460b      	mov	r3, r1
 8010e98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010eac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010eb0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	78fb      	ldrb	r3, [r7, #3]
 8010ebc:	011b      	lsls	r3, r3, #4
 8010ebe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010ec2:	68f9      	ldr	r1, [r7, #12]
 8010ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3714      	adds	r7, #20
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr

08010eda <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010eda:	b480      	push	{r7}
 8010edc:	b085      	sub	sp, #20
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	68fa      	ldr	r2, [r7, #12]
 8010ef0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ef4:	f023 0303 	bic.w	r3, r3, #3
 8010ef8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	68fa      	ldr	r2, [r7, #12]
 8010f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f08:	f023 0302 	bic.w	r3, r3, #2
 8010f0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f0e:	2300      	movs	r3, #0
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3714      	adds	r7, #20
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr

08010f1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	68fa      	ldr	r2, [r7, #12]
 8010f32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010f36:	f023 0303 	bic.w	r3, r3, #3
 8010f3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f4a:	f043 0302 	orr.w	r3, r3, #2
 8010f4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3714      	adds	r7, #20
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr

08010f5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010f5e:	b480      	push	{r7}
 8010f60:	b085      	sub	sp, #20
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	695b      	ldr	r3, [r3, #20]
 8010f6a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	699b      	ldr	r3, [r3, #24]
 8010f70:	68fa      	ldr	r2, [r7, #12]
 8010f72:	4013      	ands	r3, r2
 8010f74:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010f76:	68fb      	ldr	r3, [r7, #12]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3714      	adds	r7, #20
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr

08010f84 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b085      	sub	sp, #20
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f96:	699b      	ldr	r3, [r3, #24]
 8010f98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fa0:	69db      	ldr	r3, [r3, #28]
 8010fa2:	68ba      	ldr	r2, [r7, #8]
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	0c1b      	lsrs	r3, r3, #16
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3714      	adds	r7, #20
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fca:	699b      	ldr	r3, [r3, #24]
 8010fcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fd4:	69db      	ldr	r3, [r3, #28]
 8010fd6:	68ba      	ldr	r2, [r7, #8]
 8010fd8:	4013      	ands	r3, r2
 8010fda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	b29b      	uxth	r3, r3
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3714      	adds	r7, #20
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b085      	sub	sp, #20
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010ffc:	78fb      	ldrb	r3, [r7, #3]
 8010ffe:	015a      	lsls	r2, r3, #5
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	4413      	add	r3, r2
 8011004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011008:	689b      	ldr	r3, [r3, #8]
 801100a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011012:	695b      	ldr	r3, [r3, #20]
 8011014:	68ba      	ldr	r2, [r7, #8]
 8011016:	4013      	ands	r3, r2
 8011018:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801101a:	68bb      	ldr	r3, [r7, #8]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3714      	adds	r7, #20
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011028:	b480      	push	{r7}
 801102a:	b087      	sub	sp, #28
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801103e:	691b      	ldr	r3, [r3, #16]
 8011040:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801104a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801104c:	78fb      	ldrb	r3, [r7, #3]
 801104e:	f003 030f 	and.w	r3, r3, #15
 8011052:	68fa      	ldr	r2, [r7, #12]
 8011054:	fa22 f303 	lsr.w	r3, r2, r3
 8011058:	01db      	lsls	r3, r3, #7
 801105a:	b2db      	uxtb	r3, r3
 801105c:	693a      	ldr	r2, [r7, #16]
 801105e:	4313      	orrs	r3, r2
 8011060:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011062:	78fb      	ldrb	r3, [r7, #3]
 8011064:	015a      	lsls	r2, r3, #5
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	4413      	add	r3, r2
 801106a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	693a      	ldr	r2, [r7, #16]
 8011072:	4013      	ands	r3, r2
 8011074:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011076:	68bb      	ldr	r3, [r7, #8]
}
 8011078:	4618      	mov	r0, r3
 801107a:	371c      	adds	r7, #28
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	695b      	ldr	r3, [r3, #20]
 8011090:	f003 0301 	and.w	r3, r3, #1
}
 8011094:	4618      	mov	r0, r3
 8011096:	370c      	adds	r7, #12
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr

080110a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b085      	sub	sp, #20
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80110be:	f023 0307 	bic.w	r3, r3, #7
 80110c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80110d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80110d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80110d8:	2300      	movs	r3, #0
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3714      	adds	r7, #20
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr
	...

080110e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b087      	sub	sp, #28
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	460b      	mov	r3, r1
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	333c      	adds	r3, #60	; 0x3c
 80110fe:	3304      	adds	r3, #4
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	4a26      	ldr	r2, [pc, #152]	; (80111a0 <USB_EP0_OutStart+0xb8>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d90a      	bls.n	8011122 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801111c:	d101      	bne.n	8011122 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801111e:	2300      	movs	r3, #0
 8011120:	e037      	b.n	8011192 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011128:	461a      	mov	r2, r3
 801112a:	2300      	movs	r3, #0
 801112c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011134:	691b      	ldr	r3, [r3, #16]
 8011136:	697a      	ldr	r2, [r7, #20]
 8011138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801113c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011148:	691b      	ldr	r3, [r3, #16]
 801114a:	697a      	ldr	r2, [r7, #20]
 801114c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011150:	f043 0318 	orr.w	r3, r3, #24
 8011154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	697a      	ldr	r2, [r7, #20]
 8011160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011164:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011168:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801116a:	7afb      	ldrb	r3, [r7, #11]
 801116c:	2b01      	cmp	r3, #1
 801116e:	d10f      	bne.n	8011190 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011176:	461a      	mov	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	697a      	ldr	r2, [r7, #20]
 8011186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801118a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801118e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011190:	2300      	movs	r3, #0
}
 8011192:	4618      	mov	r0, r3
 8011194:	371c      	adds	r7, #28
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	4f54300a 	.word	0x4f54300a

080111a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b085      	sub	sp, #20
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80111ac:	2300      	movs	r3, #0
 80111ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	3301      	adds	r3, #1
 80111b4:	60fb      	str	r3, [r7, #12]
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	4a13      	ldr	r2, [pc, #76]	; (8011208 <USB_CoreReset+0x64>)
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d901      	bls.n	80111c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80111be:	2303      	movs	r3, #3
 80111c0:	e01b      	b.n	80111fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	691b      	ldr	r3, [r3, #16]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	daf2      	bge.n	80111b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80111ca:	2300      	movs	r3, #0
 80111cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	691b      	ldr	r3, [r3, #16]
 80111d2:	f043 0201 	orr.w	r2, r3, #1
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3301      	adds	r3, #1
 80111de:	60fb      	str	r3, [r7, #12]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	4a09      	ldr	r2, [pc, #36]	; (8011208 <USB_CoreReset+0x64>)
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d901      	bls.n	80111ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80111e8:	2303      	movs	r3, #3
 80111ea:	e006      	b.n	80111fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	691b      	ldr	r3, [r3, #16]
 80111f0:	f003 0301 	and.w	r3, r3, #1
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d0f0      	beq.n	80111da <USB_CoreReset+0x36>

  return HAL_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	00030d40 	.word	0x00030d40

0801120c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	460b      	mov	r3, r1
 8011216:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011218:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801121c:	f005 f820 	bl	8016260 <malloc>
 8011220:	4603      	mov	r3, r0
 8011222:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d105      	bne.n	8011236 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2200      	movs	r2, #0
 801122e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011232:	2302      	movs	r3, #2
 8011234:	e066      	b.n	8011304 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	68fa      	ldr	r2, [r7, #12]
 801123a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	7c1b      	ldrb	r3, [r3, #16]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d119      	bne.n	801127a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011246:	f44f 7300 	mov.w	r3, #512	; 0x200
 801124a:	2202      	movs	r2, #2
 801124c:	2181      	movs	r1, #129	; 0x81
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f004 fe8d 	bl	8015f6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2201      	movs	r2, #1
 8011258:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801125a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801125e:	2202      	movs	r2, #2
 8011260:	2101      	movs	r1, #1
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f004 fe83 	bl	8015f6e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2201      	movs	r2, #1
 801126c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2210      	movs	r2, #16
 8011274:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011278:	e016      	b.n	80112a8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801127a:	2340      	movs	r3, #64	; 0x40
 801127c:	2202      	movs	r2, #2
 801127e:	2181      	movs	r1, #129	; 0x81
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f004 fe74 	bl	8015f6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2201      	movs	r2, #1
 801128a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801128c:	2340      	movs	r3, #64	; 0x40
 801128e:	2202      	movs	r2, #2
 8011290:	2101      	movs	r1, #1
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f004 fe6b 	bl	8015f6e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2201      	movs	r2, #1
 801129c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2210      	movs	r2, #16
 80112a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80112a8:	2308      	movs	r3, #8
 80112aa:	2203      	movs	r2, #3
 80112ac:	2182      	movs	r1, #130	; 0x82
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f004 fe5d 	bl	8015f6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2200      	movs	r2, #0
 80112ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2200      	movs	r2, #0
 80112d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	7c1b      	ldrb	r3, [r3, #16]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d109      	bne.n	80112f2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80112e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112e8:	2101      	movs	r1, #1
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f004 ff2e 	bl	801614c <USBD_LL_PrepareReceive>
 80112f0:	e007      	b.n	8011302 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80112f8:	2340      	movs	r3, #64	; 0x40
 80112fa:	2101      	movs	r1, #1
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f004 ff25 	bl	801614c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011302:	2300      	movs	r3, #0
}
 8011304:	4618      	mov	r0, r3
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b084      	sub	sp, #16
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	460b      	mov	r3, r1
 8011316:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011318:	2300      	movs	r3, #0
 801131a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801131c:	2181      	movs	r1, #129	; 0x81
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f004 fe4b 	bl	8015fba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801132a:	2101      	movs	r1, #1
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f004 fe44 	bl	8015fba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801133a:	2182      	movs	r1, #130	; 0x82
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f004 fe3c 	bl	8015fba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2200      	movs	r2, #0
 801134e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011358:	2b00      	cmp	r3, #0
 801135a:	d00e      	beq.n	801137a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801136c:	4618      	mov	r0, r3
 801136e:	f004 ff7f 	bl	8016270 <free>
    pdev->pClassData = NULL;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 801137a:	7bfb      	ldrb	r3, [r7, #15]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b086      	sub	sp, #24
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011394:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011396:	2300      	movs	r3, #0
 8011398:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801139a:	2300      	movs	r3, #0
 801139c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801139e:	2300      	movs	r3, #0
 80113a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d03a      	beq.n	8011424 <USBD_CDC_Setup+0xa0>
 80113ae:	2b20      	cmp	r3, #32
 80113b0:	f040 8097 	bne.w	80114e2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	88db      	ldrh	r3, [r3, #6]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d029      	beq.n	8011410 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	b25b      	sxtb	r3, r3
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	da11      	bge.n	80113ea <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	683a      	ldr	r2, [r7, #0]
 80113d0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80113d2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80113d4:	683a      	ldr	r2, [r7, #0]
 80113d6:	88d2      	ldrh	r2, [r2, #6]
 80113d8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80113da:	6939      	ldr	r1, [r7, #16]
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	88db      	ldrh	r3, [r3, #6]
 80113e0:	461a      	mov	r2, r3
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f001 faac 	bl	8012940 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80113e8:	e082      	b.n	80114f0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	785a      	ldrb	r2, [r3, #1]
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	88db      	ldrh	r3, [r3, #6]
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011400:	6939      	ldr	r1, [r7, #16]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	88db      	ldrh	r3, [r3, #6]
 8011406:	461a      	mov	r2, r3
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f001 fac5 	bl	8012998 <USBD_CtlPrepareRx>
    break;
 801140e:	e06f      	b.n	80114f0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	7850      	ldrb	r0, [r2, #1]
 801141c:	2200      	movs	r2, #0
 801141e:	6839      	ldr	r1, [r7, #0]
 8011420:	4798      	blx	r3
    break;
 8011422:	e065      	b.n	80114f0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	785b      	ldrb	r3, [r3, #1]
 8011428:	2b0b      	cmp	r3, #11
 801142a:	d84f      	bhi.n	80114cc <USBD_CDC_Setup+0x148>
 801142c:	a201      	add	r2, pc, #4	; (adr r2, 8011434 <USBD_CDC_Setup+0xb0>)
 801142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011432:	bf00      	nop
 8011434:	08011465 	.word	0x08011465
 8011438:	080114db 	.word	0x080114db
 801143c:	080114cd 	.word	0x080114cd
 8011440:	080114cd 	.word	0x080114cd
 8011444:	080114cd 	.word	0x080114cd
 8011448:	080114cd 	.word	0x080114cd
 801144c:	080114cd 	.word	0x080114cd
 8011450:	080114cd 	.word	0x080114cd
 8011454:	080114cd 	.word	0x080114cd
 8011458:	080114cd 	.word	0x080114cd
 801145c:	0801148d 	.word	0x0801148d
 8011460:	080114b5 	.word	0x080114b5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801146a:	2b03      	cmp	r3, #3
 801146c:	d107      	bne.n	801147e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801146e:	f107 030c 	add.w	r3, r7, #12
 8011472:	2202      	movs	r2, #2
 8011474:	4619      	mov	r1, r3
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f001 fa62 	bl	8012940 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801147c:	e030      	b.n	80114e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801147e:	6839      	ldr	r1, [r7, #0]
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f001 f9ec 	bl	801285e <USBD_CtlError>
        ret = USBD_FAIL;
 8011486:	2303      	movs	r3, #3
 8011488:	75fb      	strb	r3, [r7, #23]
      break;
 801148a:	e029      	b.n	80114e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011492:	2b03      	cmp	r3, #3
 8011494:	d107      	bne.n	80114a6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011496:	f107 030f 	add.w	r3, r7, #15
 801149a:	2201      	movs	r2, #1
 801149c:	4619      	mov	r1, r3
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f001 fa4e 	bl	8012940 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80114a4:	e01c      	b.n	80114e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80114a6:	6839      	ldr	r1, [r7, #0]
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f001 f9d8 	bl	801285e <USBD_CtlError>
        ret = USBD_FAIL;
 80114ae:	2303      	movs	r3, #3
 80114b0:	75fb      	strb	r3, [r7, #23]
      break;
 80114b2:	e015      	b.n	80114e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114ba:	2b03      	cmp	r3, #3
 80114bc:	d00f      	beq.n	80114de <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80114be:	6839      	ldr	r1, [r7, #0]
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f001 f9cc 	bl	801285e <USBD_CtlError>
        ret = USBD_FAIL;
 80114c6:	2303      	movs	r3, #3
 80114c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80114ca:	e008      	b.n	80114de <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80114cc:	6839      	ldr	r1, [r7, #0]
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f001 f9c5 	bl	801285e <USBD_CtlError>
      ret = USBD_FAIL;
 80114d4:	2303      	movs	r3, #3
 80114d6:	75fb      	strb	r3, [r7, #23]
      break;
 80114d8:	e002      	b.n	80114e0 <USBD_CDC_Setup+0x15c>
      break;
 80114da:	bf00      	nop
 80114dc:	e008      	b.n	80114f0 <USBD_CDC_Setup+0x16c>
      break;
 80114de:	bf00      	nop
    }
    break;
 80114e0:	e006      	b.n	80114f0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80114e2:	6839      	ldr	r1, [r7, #0]
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f001 f9ba 	bl	801285e <USBD_CtlError>
    ret = USBD_FAIL;
 80114ea:	2303      	movs	r3, #3
 80114ec:	75fb      	strb	r3, [r7, #23]
    break;
 80114ee:	bf00      	nop
  }

  return (uint8_t)ret;
 80114f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3718      	adds	r7, #24
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop

080114fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b084      	sub	sp, #16
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	460b      	mov	r3, r1
 8011506:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801150e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011516:	2b00      	cmp	r3, #0
 8011518:	d101      	bne.n	801151e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801151a:	2303      	movs	r3, #3
 801151c:	e049      	b.n	80115b2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011524:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011526:	78fa      	ldrb	r2, [r7, #3]
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	4613      	mov	r3, r2
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	4413      	add	r3, r2
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	440b      	add	r3, r1
 8011534:	3318      	adds	r3, #24
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d029      	beq.n	8011590 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801153c:	78fa      	ldrb	r2, [r7, #3]
 801153e:	6879      	ldr	r1, [r7, #4]
 8011540:	4613      	mov	r3, r2
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	4413      	add	r3, r2
 8011546:	009b      	lsls	r3, r3, #2
 8011548:	440b      	add	r3, r1
 801154a:	3318      	adds	r3, #24
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	78f9      	ldrb	r1, [r7, #3]
 8011550:	68f8      	ldr	r0, [r7, #12]
 8011552:	460b      	mov	r3, r1
 8011554:	00db      	lsls	r3, r3, #3
 8011556:	1a5b      	subs	r3, r3, r1
 8011558:	009b      	lsls	r3, r3, #2
 801155a:	4403      	add	r3, r0
 801155c:	3344      	adds	r3, #68	; 0x44
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	fbb2 f1f3 	udiv	r1, r2, r3
 8011564:	fb03 f301 	mul.w	r3, r3, r1
 8011568:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801156a:	2b00      	cmp	r3, #0
 801156c:	d110      	bne.n	8011590 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801156e:	78fa      	ldrb	r2, [r7, #3]
 8011570:	6879      	ldr	r1, [r7, #4]
 8011572:	4613      	mov	r3, r2
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	4413      	add	r3, r2
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	440b      	add	r3, r1
 801157c:	3318      	adds	r3, #24
 801157e:	2200      	movs	r2, #0
 8011580:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011582:	78f9      	ldrb	r1, [r7, #3]
 8011584:	2300      	movs	r3, #0
 8011586:	2200      	movs	r2, #0
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f004 fdbe 	bl	801610a <USBD_LL_Transmit>
 801158e:	e00f      	b.n	80115b0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2200      	movs	r2, #0
 8011594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801159e:	691b      	ldr	r3, [r3, #16]
 80115a0:	68ba      	ldr	r2, [r7, #8]
 80115a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80115a6:	68ba      	ldr	r2, [r7, #8]
 80115a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80115ac:	78fa      	ldrb	r2, [r7, #3]
 80115ae:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80115b0:	2300      	movs	r3, #0
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b084      	sub	sp, #16
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
 80115c2:	460b      	mov	r3, r1
 80115c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80115d8:	2303      	movs	r3, #3
 80115da:	e015      	b.n	8011608 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80115dc:	78fb      	ldrb	r3, [r7, #3]
 80115de:	4619      	mov	r1, r3
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f004 fdd4 	bl	801618e <USBD_LL_GetRxDataSize>
 80115e6:	4602      	mov	r2, r0
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80115fc:	68fa      	ldr	r2, [r7, #12]
 80115fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011602:	4611      	mov	r1, r2
 8011604:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011606:	2300      	movs	r3, #0
}
 8011608:	4618      	mov	r0, r3
 801160a:	3710      	adds	r7, #16
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801161e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011626:	2b00      	cmp	r3, #0
 8011628:	d015      	beq.n	8011656 <USBD_CDC_EP0_RxReady+0x46>
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011630:	2bff      	cmp	r3, #255	; 0xff
 8011632:	d010      	beq.n	8011656 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	68fa      	ldr	r2, [r7, #12]
 801163e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011642:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011644:	68fa      	ldr	r2, [r7, #12]
 8011646:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801164a:	b292      	uxth	r2, r2
 801164c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	22ff      	movs	r2, #255	; 0xff
 8011652:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	3710      	adds	r7, #16
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2243      	movs	r2, #67	; 0x43
 801166c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801166e:	4b03      	ldr	r3, [pc, #12]	; (801167c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011670:	4618      	mov	r0, r3
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	20004120 	.word	0x20004120

08011680 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2243      	movs	r2, #67	; 0x43
 801168c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801168e:	4b03      	ldr	r3, [pc, #12]	; (801169c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011690:	4618      	mov	r0, r3
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr
 801169c:	200040dc 	.word	0x200040dc

080116a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80116a0:	b480      	push	{r7}
 80116a2:	b083      	sub	sp, #12
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2243      	movs	r2, #67	; 0x43
 80116ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80116ae:	4b03      	ldr	r3, [pc, #12]	; (80116bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	20004164 	.word	0x20004164

080116c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	220a      	movs	r2, #10
 80116cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80116ce:	4b03      	ldr	r3, [pc, #12]	; (80116dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	20004098 	.word	0x20004098

080116e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80116f0:	2303      	movs	r3, #3
 80116f2:	e004      	b.n	80116fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	683a      	ldr	r2, [r7, #0]
 80116f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80116fc:	2300      	movs	r3, #0
}
 80116fe:	4618      	mov	r0, r3
 8011700:	370c      	adds	r7, #12
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr

0801170a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801170a:	b480      	push	{r7}
 801170c:	b087      	sub	sp, #28
 801170e:	af00      	add	r7, sp, #0
 8011710:	60f8      	str	r0, [r7, #12]
 8011712:	60b9      	str	r1, [r7, #8]
 8011714:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801171c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	68ba      	ldr	r2, [r7, #8]
 8011722:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	371c      	adds	r7, #28
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801173c:	b480      	push	{r7}
 801173e:	b085      	sub	sp, #20
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801174c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	683a      	ldr	r2, [r7, #0]
 8011752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011756:	2300      	movs	r3, #0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011772:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011774:	2301      	movs	r3, #1
 8011776:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801177e:	2b00      	cmp	r3, #0
 8011780:	d101      	bne.n	8011786 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011782:	2303      	movs	r3, #3
 8011784:	e01a      	b.n	80117bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801178c:	2b00      	cmp	r3, #0
 801178e:	d114      	bne.n	80117ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	2201      	movs	r2, #1
 8011794:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80117ae:	2181      	movs	r1, #129	; 0x81
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f004 fcaa 	bl	801610a <USBD_LL_Transmit>

    ret = USBD_OK;
 80117b6:	2300      	movs	r3, #0
 80117b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80117ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d101      	bne.n	80117e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80117de:	2303      	movs	r3, #3
 80117e0:	e016      	b.n	8011810 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	7c1b      	ldrb	r3, [r3, #16]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d109      	bne.n	80117fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80117f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117f4:	2101      	movs	r1, #1
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f004 fca8 	bl	801614c <USBD_LL_PrepareReceive>
 80117fc:	e007      	b.n	801180e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011804:	2340      	movs	r3, #64	; 0x40
 8011806:	2101      	movs	r1, #1
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f004 fc9f 	bl	801614c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801180e:	2300      	movs	r3, #0
}
 8011810:	4618      	mov	r0, r3
 8011812:	3710      	adds	r7, #16
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b086      	sub	sp, #24
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	4613      	mov	r3, r2
 8011824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d101      	bne.n	8011830 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801182c:	2303      	movs	r3, #3
 801182e:	e025      	b.n	801187c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011836:	2b00      	cmp	r3, #0
 8011838:	d003      	beq.n	8011842 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2200      	movs	r2, #0
 801183e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011848:	2b00      	cmp	r3, #0
 801184a:	d003      	beq.n	8011854 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2200      	movs	r2, #0
 8011850:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d003      	beq.n	8011862 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	68ba      	ldr	r2, [r7, #8]
 801185e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2201      	movs	r2, #1
 8011866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	79fa      	ldrb	r2, [r7, #7]
 801186e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011870:	68f8      	ldr	r0, [r7, #12]
 8011872:	f004 fb15 	bl	8015ea0 <USBD_LL_Init>
 8011876:	4603      	mov	r3, r0
 8011878:	75fb      	strb	r3, [r7, #23]

  return ret;
 801187a:	7dfb      	ldrb	r3, [r7, #23]
}
 801187c:	4618      	mov	r0, r3
 801187e:	3718      	adds	r7, #24
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801188e:	2300      	movs	r3, #0
 8011890:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d101      	bne.n	801189c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011898:	2303      	movs	r3, #3
 801189a:	e010      	b.n	80118be <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	683a      	ldr	r2, [r7, #0]
 80118a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ac:	f107 020e 	add.w	r2, r7, #14
 80118b0:	4610      	mov	r0, r2
 80118b2:	4798      	blx	r3
 80118b4:	4602      	mov	r2, r0
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80118bc:	2300      	movs	r3, #0
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3710      	adds	r7, #16
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}

080118c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80118c6:	b580      	push	{r7, lr}
 80118c8:	b082      	sub	sp, #8
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f004 fb32 	bl	8015f38 <USBD_LL_Start>
 80118d4:	4603      	mov	r3, r0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80118de:	b480      	push	{r7}
 80118e0:	b083      	sub	sp, #12
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80118e6:	2300      	movs	r3, #0
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr

080118f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011900:	2303      	movs	r3, #3
 8011902:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801190a:	2b00      	cmp	r3, #0
 801190c:	d009      	beq.n	8011922 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	78fa      	ldrb	r2, [r7, #3]
 8011918:	4611      	mov	r1, r2
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	4798      	blx	r3
 801191e:	4603      	mov	r3, r0
 8011920:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011922:	7bfb      	ldrb	r3, [r7, #15]
}
 8011924:	4618      	mov	r0, r3
 8011926:	3710      	adds	r7, #16
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	460b      	mov	r3, r1
 8011936:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801193e:	2b00      	cmp	r3, #0
 8011940:	d007      	beq.n	8011952 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	78fa      	ldrb	r2, [r7, #3]
 801194c:	4611      	mov	r1, r2
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	4798      	blx	r3
  }

  return USBD_OK;
 8011952:	2300      	movs	r3, #0
}
 8011954:	4618      	mov	r0, r3
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801196c:	6839      	ldr	r1, [r7, #0]
 801196e:	4618      	mov	r0, r3
 8011970:	f000 ff3b 	bl	80127ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2201      	movs	r2, #1
 8011978:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011982:	461a      	mov	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011990:	f003 031f 	and.w	r3, r3, #31
 8011994:	2b02      	cmp	r3, #2
 8011996:	d01a      	beq.n	80119ce <USBD_LL_SetupStage+0x72>
 8011998:	2b02      	cmp	r3, #2
 801199a:	d822      	bhi.n	80119e2 <USBD_LL_SetupStage+0x86>
 801199c:	2b00      	cmp	r3, #0
 801199e:	d002      	beq.n	80119a6 <USBD_LL_SetupStage+0x4a>
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d00a      	beq.n	80119ba <USBD_LL_SetupStage+0x5e>
 80119a4:	e01d      	b.n	80119e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80119ac:	4619      	mov	r1, r3
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 fa18 	bl	8011de4 <USBD_StdDevReq>
 80119b4:	4603      	mov	r3, r0
 80119b6:	73fb      	strb	r3, [r7, #15]
      break;
 80119b8:	e020      	b.n	80119fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80119c0:	4619      	mov	r1, r3
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 fa7c 	bl	8011ec0 <USBD_StdItfReq>
 80119c8:	4603      	mov	r3, r0
 80119ca:	73fb      	strb	r3, [r7, #15]
      break;
 80119cc:	e016      	b.n	80119fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80119d4:	4619      	mov	r1, r3
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f000 faba 	bl	8011f50 <USBD_StdEPReq>
 80119dc:	4603      	mov	r3, r0
 80119de:	73fb      	strb	r3, [r7, #15]
      break;
 80119e0:	e00c      	b.n	80119fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80119e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	4619      	mov	r1, r3
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f004 fb01 	bl	8015ff8 <USBD_LL_StallEP>
 80119f6:	4603      	mov	r3, r0
 80119f8:	73fb      	strb	r3, [r7, #15]
      break;
 80119fa:	bf00      	nop
  }

  return ret;
 80119fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3710      	adds	r7, #16
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}

08011a06 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011a06:	b580      	push	{r7, lr}
 8011a08:	b086      	sub	sp, #24
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	60f8      	str	r0, [r7, #12]
 8011a0e:	460b      	mov	r3, r1
 8011a10:	607a      	str	r2, [r7, #4]
 8011a12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011a14:	7afb      	ldrb	r3, [r7, #11]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d137      	bne.n	8011a8a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011a20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011a28:	2b03      	cmp	r3, #3
 8011a2a:	d14a      	bne.n	8011ac2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	689a      	ldr	r2, [r3, #8]
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d913      	bls.n	8011a60 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	689a      	ldr	r2, [r3, #8]
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	1ad2      	subs	r2, r2, r3
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	68da      	ldr	r2, [r3, #12]
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	689b      	ldr	r3, [r3, #8]
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	bf28      	it	cs
 8011a52:	4613      	movcs	r3, r2
 8011a54:	461a      	mov	r2, r3
 8011a56:	6879      	ldr	r1, [r7, #4]
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f000 ffba 	bl	80129d2 <USBD_CtlContinueRx>
 8011a5e:	e030      	b.n	8011ac2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a66:	691b      	ldr	r3, [r3, #16]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d00a      	beq.n	8011a82 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011a72:	2b03      	cmp	r3, #3
 8011a74:	d105      	bne.n	8011a82 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a7c:	691b      	ldr	r3, [r3, #16]
 8011a7e:	68f8      	ldr	r0, [r7, #12]
 8011a80:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011a82:	68f8      	ldr	r0, [r7, #12]
 8011a84:	f000 ffb6 	bl	80129f4 <USBD_CtlSendStatus>
 8011a88:	e01b      	b.n	8011ac2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a90:	699b      	ldr	r3, [r3, #24]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d013      	beq.n	8011abe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011a9c:	2b03      	cmp	r3, #3
 8011a9e:	d10e      	bne.n	8011abe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aa6:	699b      	ldr	r3, [r3, #24]
 8011aa8:	7afa      	ldrb	r2, [r7, #11]
 8011aaa:	4611      	mov	r1, r2
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	4798      	blx	r3
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011ab4:	7dfb      	ldrb	r3, [r7, #23]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d003      	beq.n	8011ac2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011aba:	7dfb      	ldrb	r3, [r7, #23]
 8011abc:	e002      	b.n	8011ac4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	e000      	b.n	8011ac4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011ac2:	2300      	movs	r3, #0
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3718      	adds	r7, #24
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b086      	sub	sp, #24
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	460b      	mov	r3, r1
 8011ad6:	607a      	str	r2, [r7, #4]
 8011ad8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011ada:	7afb      	ldrb	r3, [r7, #11]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d16a      	bne.n	8011bb6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	3314      	adds	r3, #20
 8011ae4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011aec:	2b02      	cmp	r3, #2
 8011aee:	d155      	bne.n	8011b9c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	689a      	ldr	r2, [r3, #8]
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d914      	bls.n	8011b26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	689a      	ldr	r2, [r3, #8]
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	1ad2      	subs	r2, r2, r3
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	461a      	mov	r2, r3
 8011b10:	6879      	ldr	r1, [r7, #4]
 8011b12:	68f8      	ldr	r0, [r7, #12]
 8011b14:	f000 ff2f 	bl	8012976 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011b18:	2300      	movs	r3, #0
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	68f8      	ldr	r0, [r7, #12]
 8011b20:	f004 fb14 	bl	801614c <USBD_LL_PrepareReceive>
 8011b24:	e03a      	b.n	8011b9c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	68da      	ldr	r2, [r3, #12]
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d11c      	bne.n	8011b6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	685a      	ldr	r2, [r3, #4]
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d316      	bcc.n	8011b6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	685a      	ldr	r2, [r3, #4]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d20f      	bcs.n	8011b6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	2100      	movs	r1, #0
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	f000 ff10 	bl	8012976 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011b5e:	2300      	movs	r3, #0
 8011b60:	2200      	movs	r2, #0
 8011b62:	2100      	movs	r1, #0
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f004 faf1 	bl	801614c <USBD_LL_PrepareReceive>
 8011b6a:	e017      	b.n	8011b9c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d00a      	beq.n	8011b8e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011b7e:	2b03      	cmp	r3, #3
 8011b80:	d105      	bne.n	8011b8e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	68f8      	ldr	r0, [r7, #12]
 8011b8c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b8e:	2180      	movs	r1, #128	; 0x80
 8011b90:	68f8      	ldr	r0, [r7, #12]
 8011b92:	f004 fa31 	bl	8015ff8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011b96:	68f8      	ldr	r0, [r7, #12]
 8011b98:	f000 ff3f 	bl	8012a1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d123      	bne.n	8011bee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f7ff fe99 	bl	80118de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011bb4:	e01b      	b.n	8011bee <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bbc:	695b      	ldr	r3, [r3, #20]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d013      	beq.n	8011bea <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011bc8:	2b03      	cmp	r3, #3
 8011bca:	d10e      	bne.n	8011bea <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bd2:	695b      	ldr	r3, [r3, #20]
 8011bd4:	7afa      	ldrb	r2, [r7, #11]
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	4798      	blx	r3
 8011bdc:	4603      	mov	r3, r0
 8011bde:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011be0:	7dfb      	ldrb	r3, [r7, #23]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d003      	beq.n	8011bee <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011be6:	7dfb      	ldrb	r3, [r7, #23]
 8011be8:	e002      	b.n	8011bf0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011bea:	2303      	movs	r3, #3
 8011bec:	e000      	b.n	8011bf0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011bee:	2300      	movs	r3, #0
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3718      	adds	r7, #24
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2201      	movs	r2, #1
 8011c04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2200      	movs	r2, #0
 8011c14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d009      	beq.n	8011c3c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	6852      	ldr	r2, [r2, #4]
 8011c34:	b2d2      	uxtb	r2, r2
 8011c36:	4611      	mov	r1, r2
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011c3c:	2340      	movs	r3, #64	; 0x40
 8011c3e:	2200      	movs	r2, #0
 8011c40:	2100      	movs	r1, #0
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f004 f993 	bl	8015f6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2240      	movs	r2, #64	; 0x40
 8011c54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011c58:	2340      	movs	r3, #64	; 0x40
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	2180      	movs	r1, #128	; 0x80
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f004 f985 	bl	8015f6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2201      	movs	r2, #1
 8011c68:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2240      	movs	r2, #64	; 0x40
 8011c6e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011c70:	2300      	movs	r3, #0
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3708      	adds	r7, #8
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}

08011c7a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011c7a:	b480      	push	{r7}
 8011c7c:	b083      	sub	sp, #12
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
 8011c82:	460b      	mov	r3, r1
 8011c84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	78fa      	ldrb	r2, [r7, #3]
 8011c8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011c8c:	2300      	movs	r3, #0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	370c      	adds	r7, #12
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr

08011c9a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011c9a:	b480      	push	{r7}
 8011c9c:	b083      	sub	sp, #12
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2204      	movs	r2, #4
 8011cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	370c      	adds	r7, #12
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cd2:	2b04      	cmp	r3, #4
 8011cd4:	d105      	bne.n	8011ce2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011ce2:	2300      	movs	r3, #0
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cfe:	2b03      	cmp	r3, #3
 8011d00:	d10b      	bne.n	8011d1a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d08:	69db      	ldr	r3, [r3, #28]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d005      	beq.n	8011d1a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d14:	69db      	ldr	r3, [r3, #28]
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011d1a:	2300      	movs	r3, #0
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b083      	sub	sp, #12
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr

08011d3e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011d3e:	b480      	push	{r7}
 8011d40:	b083      	sub	sp, #12
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
 8011d46:	460b      	mov	r3, r1
 8011d48:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011d4a:	2300      	movs	r3, #0
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b083      	sub	sp, #12
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011d60:	2300      	movs	r3, #0
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	370c      	adds	r7, #12
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr

08011d6e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b082      	sub	sp, #8
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d009      	beq.n	8011d9c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	6852      	ldr	r2, [r2, #4]
 8011d94:	b2d2      	uxtb	r2, r2
 8011d96:	4611      	mov	r1, r2
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	4798      	blx	r3
  }

  return USBD_OK;
 8011d9c:	2300      	movs	r3, #0
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3708      	adds	r7, #8
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}

08011da6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011da6:	b480      	push	{r7}
 8011da8:	b087      	sub	sp, #28
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	3301      	adds	r3, #1
 8011dbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	781b      	ldrb	r3, [r3, #0]
 8011dc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011dc4:	8a3b      	ldrh	r3, [r7, #16]
 8011dc6:	021b      	lsls	r3, r3, #8
 8011dc8:	b21a      	sxth	r2, r3
 8011dca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011dce:	4313      	orrs	r3, r2
 8011dd0:	b21b      	sxth	r3, r3
 8011dd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	371c      	adds	r7, #28
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr
	...

08011de4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dee:	2300      	movs	r3, #0
 8011df0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011dfa:	2b40      	cmp	r3, #64	; 0x40
 8011dfc:	d005      	beq.n	8011e0a <USBD_StdDevReq+0x26>
 8011dfe:	2b40      	cmp	r3, #64	; 0x40
 8011e00:	d853      	bhi.n	8011eaa <USBD_StdDevReq+0xc6>
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d00b      	beq.n	8011e1e <USBD_StdDevReq+0x3a>
 8011e06:	2b20      	cmp	r3, #32
 8011e08:	d14f      	bne.n	8011eaa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	4798      	blx	r3
 8011e18:	4603      	mov	r3, r0
 8011e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8011e1c:	e04a      	b.n	8011eb4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	785b      	ldrb	r3, [r3, #1]
 8011e22:	2b09      	cmp	r3, #9
 8011e24:	d83b      	bhi.n	8011e9e <USBD_StdDevReq+0xba>
 8011e26:	a201      	add	r2, pc, #4	; (adr r2, 8011e2c <USBD_StdDevReq+0x48>)
 8011e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e2c:	08011e81 	.word	0x08011e81
 8011e30:	08011e95 	.word	0x08011e95
 8011e34:	08011e9f 	.word	0x08011e9f
 8011e38:	08011e8b 	.word	0x08011e8b
 8011e3c:	08011e9f 	.word	0x08011e9f
 8011e40:	08011e5f 	.word	0x08011e5f
 8011e44:	08011e55 	.word	0x08011e55
 8011e48:	08011e9f 	.word	0x08011e9f
 8011e4c:	08011e77 	.word	0x08011e77
 8011e50:	08011e69 	.word	0x08011e69
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011e54:	6839      	ldr	r1, [r7, #0]
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f000 f9d8 	bl	801220c <USBD_GetDescriptor>
      break;
 8011e5c:	e024      	b.n	8011ea8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011e5e:	6839      	ldr	r1, [r7, #0]
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f000 fb3d 	bl	80124e0 <USBD_SetAddress>
      break;
 8011e66:	e01f      	b.n	8011ea8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011e68:	6839      	ldr	r1, [r7, #0]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 fb7c 	bl	8012568 <USBD_SetConfig>
 8011e70:	4603      	mov	r3, r0
 8011e72:	73fb      	strb	r3, [r7, #15]
      break;
 8011e74:	e018      	b.n	8011ea8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011e76:	6839      	ldr	r1, [r7, #0]
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 fc19 	bl	80126b0 <USBD_GetConfig>
      break;
 8011e7e:	e013      	b.n	8011ea8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 fc49 	bl	801271a <USBD_GetStatus>
      break;
 8011e88:	e00e      	b.n	8011ea8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011e8a:	6839      	ldr	r1, [r7, #0]
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f000 fc77 	bl	8012780 <USBD_SetFeature>
      break;
 8011e92:	e009      	b.n	8011ea8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011e94:	6839      	ldr	r1, [r7, #0]
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 fc86 	bl	80127a8 <USBD_ClrFeature>
      break;
 8011e9c:	e004      	b.n	8011ea8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011e9e:	6839      	ldr	r1, [r7, #0]
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f000 fcdc 	bl	801285e <USBD_CtlError>
      break;
 8011ea6:	bf00      	nop
    }
    break;
 8011ea8:	e004      	b.n	8011eb4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011eaa:	6839      	ldr	r1, [r7, #0]
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 fcd6 	bl	801285e <USBD_CtlError>
    break;
 8011eb2:	bf00      	nop
  }

  return ret;
 8011eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop

08011ec0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ed6:	2b40      	cmp	r3, #64	; 0x40
 8011ed8:	d005      	beq.n	8011ee6 <USBD_StdItfReq+0x26>
 8011eda:	2b40      	cmp	r3, #64	; 0x40
 8011edc:	d82e      	bhi.n	8011f3c <USBD_StdItfReq+0x7c>
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d001      	beq.n	8011ee6 <USBD_StdItfReq+0x26>
 8011ee2:	2b20      	cmp	r3, #32
 8011ee4:	d12a      	bne.n	8011f3c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eec:	3b01      	subs	r3, #1
 8011eee:	2b02      	cmp	r3, #2
 8011ef0:	d81d      	bhi.n	8011f2e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	889b      	ldrh	r3, [r3, #4]
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d813      	bhi.n	8011f24 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	6839      	ldr	r1, [r7, #0]
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	4798      	blx	r3
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	88db      	ldrh	r3, [r3, #6]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d110      	bne.n	8011f38 <USBD_StdItfReq+0x78>
 8011f16:	7bfb      	ldrb	r3, [r7, #15]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d10d      	bne.n	8011f38 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f000 fd69 	bl	80129f4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011f22:	e009      	b.n	8011f38 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8011f24:	6839      	ldr	r1, [r7, #0]
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 fc99 	bl	801285e <USBD_CtlError>
      break;
 8011f2c:	e004      	b.n	8011f38 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8011f2e:	6839      	ldr	r1, [r7, #0]
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f000 fc94 	bl	801285e <USBD_CtlError>
      break;
 8011f36:	e000      	b.n	8011f3a <USBD_StdItfReq+0x7a>
      break;
 8011f38:	bf00      	nop
    }
    break;
 8011f3a:	e004      	b.n	8011f46 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 fc8d 	bl	801285e <USBD_CtlError>
    break;
 8011f44:	bf00      	nop
  }

  return ret;
 8011f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3710      	adds	r7, #16
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	889b      	ldrh	r3, [r3, #4]
 8011f62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011f6c:	2b40      	cmp	r3, #64	; 0x40
 8011f6e:	d007      	beq.n	8011f80 <USBD_StdEPReq+0x30>
 8011f70:	2b40      	cmp	r3, #64	; 0x40
 8011f72:	f200 8140 	bhi.w	80121f6 <USBD_StdEPReq+0x2a6>
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d00c      	beq.n	8011f94 <USBD_StdEPReq+0x44>
 8011f7a:	2b20      	cmp	r3, #32
 8011f7c:	f040 813b 	bne.w	80121f6 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f86:	689b      	ldr	r3, [r3, #8]
 8011f88:	6839      	ldr	r1, [r7, #0]
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	4798      	blx	r3
 8011f8e:	4603      	mov	r3, r0
 8011f90:	73fb      	strb	r3, [r7, #15]
    break;
 8011f92:	e135      	b.n	8012200 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	785b      	ldrb	r3, [r3, #1]
 8011f98:	2b03      	cmp	r3, #3
 8011f9a:	d007      	beq.n	8011fac <USBD_StdEPReq+0x5c>
 8011f9c:	2b03      	cmp	r3, #3
 8011f9e:	f300 8124 	bgt.w	80121ea <USBD_StdEPReq+0x29a>
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d07b      	beq.n	801209e <USBD_StdEPReq+0x14e>
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d03b      	beq.n	8012022 <USBD_StdEPReq+0xd2>
 8011faa:	e11e      	b.n	80121ea <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	d002      	beq.n	8011fbc <USBD_StdEPReq+0x6c>
 8011fb6:	2b03      	cmp	r3, #3
 8011fb8:	d016      	beq.n	8011fe8 <USBD_StdEPReq+0x98>
 8011fba:	e02c      	b.n	8012016 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fbc:	7bbb      	ldrb	r3, [r7, #14]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00d      	beq.n	8011fde <USBD_StdEPReq+0x8e>
 8011fc2:	7bbb      	ldrb	r3, [r7, #14]
 8011fc4:	2b80      	cmp	r3, #128	; 0x80
 8011fc6:	d00a      	beq.n	8011fde <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011fc8:	7bbb      	ldrb	r3, [r7, #14]
 8011fca:	4619      	mov	r1, r3
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f004 f813 	bl	8015ff8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011fd2:	2180      	movs	r1, #128	; 0x80
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f004 f80f 	bl	8015ff8 <USBD_LL_StallEP>
 8011fda:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011fdc:	e020      	b.n	8012020 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8011fde:	6839      	ldr	r1, [r7, #0]
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 fc3c 	bl	801285e <USBD_CtlError>
        break;
 8011fe6:	e01b      	b.n	8012020 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	885b      	ldrh	r3, [r3, #2]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d10e      	bne.n	801200e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ff0:	7bbb      	ldrb	r3, [r7, #14]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d00b      	beq.n	801200e <USBD_StdEPReq+0xbe>
 8011ff6:	7bbb      	ldrb	r3, [r7, #14]
 8011ff8:	2b80      	cmp	r3, #128	; 0x80
 8011ffa:	d008      	beq.n	801200e <USBD_StdEPReq+0xbe>
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	88db      	ldrh	r3, [r3, #6]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d104      	bne.n	801200e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8012004:	7bbb      	ldrb	r3, [r7, #14]
 8012006:	4619      	mov	r1, r3
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f003 fff5 	bl	8015ff8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 fcf0 	bl	80129f4 <USBD_CtlSendStatus>

        break;
 8012014:	e004      	b.n	8012020 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 fc20 	bl	801285e <USBD_CtlError>
        break;
 801201e:	bf00      	nop
      }
      break;
 8012020:	e0e8      	b.n	80121f4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012028:	2b02      	cmp	r3, #2
 801202a:	d002      	beq.n	8012032 <USBD_StdEPReq+0xe2>
 801202c:	2b03      	cmp	r3, #3
 801202e:	d016      	beq.n	801205e <USBD_StdEPReq+0x10e>
 8012030:	e02e      	b.n	8012090 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012032:	7bbb      	ldrb	r3, [r7, #14]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d00d      	beq.n	8012054 <USBD_StdEPReq+0x104>
 8012038:	7bbb      	ldrb	r3, [r7, #14]
 801203a:	2b80      	cmp	r3, #128	; 0x80
 801203c:	d00a      	beq.n	8012054 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 801203e:	7bbb      	ldrb	r3, [r7, #14]
 8012040:	4619      	mov	r1, r3
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f003 ffd8 	bl	8015ff8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012048:	2180      	movs	r1, #128	; 0x80
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f003 ffd4 	bl	8015ff8 <USBD_LL_StallEP>
 8012050:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012052:	e023      	b.n	801209c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8012054:	6839      	ldr	r1, [r7, #0]
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f000 fc01 	bl	801285e <USBD_CtlError>
        break;
 801205c:	e01e      	b.n	801209c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	885b      	ldrh	r3, [r3, #2]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d119      	bne.n	801209a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8012066:	7bbb      	ldrb	r3, [r7, #14]
 8012068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801206c:	2b00      	cmp	r3, #0
 801206e:	d004      	beq.n	801207a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012070:	7bbb      	ldrb	r3, [r7, #14]
 8012072:	4619      	mov	r1, r3
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f003 ffde 	bl	8016036 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 fcba 	bl	80129f4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012086:	689b      	ldr	r3, [r3, #8]
 8012088:	6839      	ldr	r1, [r7, #0]
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	4798      	blx	r3
        }
        break;
 801208e:	e004      	b.n	801209a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8012090:	6839      	ldr	r1, [r7, #0]
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f000 fbe3 	bl	801285e <USBD_CtlError>
        break;
 8012098:	e000      	b.n	801209c <USBD_StdEPReq+0x14c>
        break;
 801209a:	bf00      	nop
      }
      break;
 801209c:	e0aa      	b.n	80121f4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120a4:	2b02      	cmp	r3, #2
 80120a6:	d002      	beq.n	80120ae <USBD_StdEPReq+0x15e>
 80120a8:	2b03      	cmp	r3, #3
 80120aa:	d032      	beq.n	8012112 <USBD_StdEPReq+0x1c2>
 80120ac:	e097      	b.n	80121de <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80120ae:	7bbb      	ldrb	r3, [r7, #14]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d007      	beq.n	80120c4 <USBD_StdEPReq+0x174>
 80120b4:	7bbb      	ldrb	r3, [r7, #14]
 80120b6:	2b80      	cmp	r3, #128	; 0x80
 80120b8:	d004      	beq.n	80120c4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f000 fbce 	bl	801285e <USBD_CtlError>
          break;
 80120c2:	e091      	b.n	80121e8 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	da0b      	bge.n	80120e4 <USBD_StdEPReq+0x194>
 80120cc:	7bbb      	ldrb	r3, [r7, #14]
 80120ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80120d2:	4613      	mov	r3, r2
 80120d4:	009b      	lsls	r3, r3, #2
 80120d6:	4413      	add	r3, r2
 80120d8:	009b      	lsls	r3, r3, #2
 80120da:	3310      	adds	r3, #16
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	4413      	add	r3, r2
 80120e0:	3304      	adds	r3, #4
 80120e2:	e00b      	b.n	80120fc <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80120e4:	7bbb      	ldrb	r3, [r7, #14]
 80120e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120ea:	4613      	mov	r3, r2
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	4413      	add	r3, r2
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	4413      	add	r3, r2
 80120fa:	3304      	adds	r3, #4
 80120fc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	2200      	movs	r2, #0
 8012102:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	2202      	movs	r2, #2
 8012108:	4619      	mov	r1, r3
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 fc18 	bl	8012940 <USBD_CtlSendData>
        break;
 8012110:	e06a      	b.n	80121e8 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8012112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012116:	2b00      	cmp	r3, #0
 8012118:	da11      	bge.n	801213e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801211a:	7bbb      	ldrb	r3, [r7, #14]
 801211c:	f003 020f 	and.w	r2, r3, #15
 8012120:	6879      	ldr	r1, [r7, #4]
 8012122:	4613      	mov	r3, r2
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	4413      	add	r3, r2
 8012128:	009b      	lsls	r3, r3, #2
 801212a:	440b      	add	r3, r1
 801212c:	3324      	adds	r3, #36	; 0x24
 801212e:	881b      	ldrh	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d117      	bne.n	8012164 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8012134:	6839      	ldr	r1, [r7, #0]
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f000 fb91 	bl	801285e <USBD_CtlError>
            break;
 801213c:	e054      	b.n	80121e8 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801213e:	7bbb      	ldrb	r3, [r7, #14]
 8012140:	f003 020f 	and.w	r2, r3, #15
 8012144:	6879      	ldr	r1, [r7, #4]
 8012146:	4613      	mov	r3, r2
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	4413      	add	r3, r2
 801214c:	009b      	lsls	r3, r3, #2
 801214e:	440b      	add	r3, r1
 8012150:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012154:	881b      	ldrh	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d104      	bne.n	8012164 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 801215a:	6839      	ldr	r1, [r7, #0]
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f000 fb7e 	bl	801285e <USBD_CtlError>
            break;
 8012162:	e041      	b.n	80121e8 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012168:	2b00      	cmp	r3, #0
 801216a:	da0b      	bge.n	8012184 <USBD_StdEPReq+0x234>
 801216c:	7bbb      	ldrb	r3, [r7, #14]
 801216e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012172:	4613      	mov	r3, r2
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	4413      	add	r3, r2
 8012178:	009b      	lsls	r3, r3, #2
 801217a:	3310      	adds	r3, #16
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	4413      	add	r3, r2
 8012180:	3304      	adds	r3, #4
 8012182:	e00b      	b.n	801219c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012184:	7bbb      	ldrb	r3, [r7, #14]
 8012186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801218a:	4613      	mov	r3, r2
 801218c:	009b      	lsls	r3, r3, #2
 801218e:	4413      	add	r3, r2
 8012190:	009b      	lsls	r3, r3, #2
 8012192:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	4413      	add	r3, r2
 801219a:	3304      	adds	r3, #4
 801219c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801219e:	7bbb      	ldrb	r3, [r7, #14]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d002      	beq.n	80121aa <USBD_StdEPReq+0x25a>
 80121a4:	7bbb      	ldrb	r3, [r7, #14]
 80121a6:	2b80      	cmp	r3, #128	; 0x80
 80121a8:	d103      	bne.n	80121b2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	2200      	movs	r2, #0
 80121ae:	601a      	str	r2, [r3, #0]
 80121b0:	e00e      	b.n	80121d0 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80121b2:	7bbb      	ldrb	r3, [r7, #14]
 80121b4:	4619      	mov	r1, r3
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f003 ff5c 	bl	8016074 <USBD_LL_IsStallEP>
 80121bc:	4603      	mov	r3, r0
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d003      	beq.n	80121ca <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	2201      	movs	r2, #1
 80121c6:	601a      	str	r2, [r3, #0]
 80121c8:	e002      	b.n	80121d0 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	2200      	movs	r2, #0
 80121ce:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	2202      	movs	r2, #2
 80121d4:	4619      	mov	r1, r3
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 fbb2 	bl	8012940 <USBD_CtlSendData>
          break;
 80121dc:	e004      	b.n	80121e8 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80121de:	6839      	ldr	r1, [r7, #0]
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 fb3c 	bl	801285e <USBD_CtlError>
        break;
 80121e6:	bf00      	nop
      }
      break;
 80121e8:	e004      	b.n	80121f4 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80121ea:	6839      	ldr	r1, [r7, #0]
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f000 fb36 	bl	801285e <USBD_CtlError>
      break;
 80121f2:	bf00      	nop
    }
    break;
 80121f4:	e004      	b.n	8012200 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80121f6:	6839      	ldr	r1, [r7, #0]
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 fb30 	bl	801285e <USBD_CtlError>
    break;
 80121fe:	bf00      	nop
  }

  return ret;
 8012200:	7bfb      	ldrb	r3, [r7, #15]
}
 8012202:	4618      	mov	r0, r3
 8012204:	3710      	adds	r7, #16
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
	...

0801220c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012216:	2300      	movs	r3, #0
 8012218:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801221a:	2300      	movs	r3, #0
 801221c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801221e:	2300      	movs	r3, #0
 8012220:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	885b      	ldrh	r3, [r3, #2]
 8012226:	0a1b      	lsrs	r3, r3, #8
 8012228:	b29b      	uxth	r3, r3
 801222a:	3b01      	subs	r3, #1
 801222c:	2b06      	cmp	r3, #6
 801222e:	f200 8128 	bhi.w	8012482 <USBD_GetDescriptor+0x276>
 8012232:	a201      	add	r2, pc, #4	; (adr r2, 8012238 <USBD_GetDescriptor+0x2c>)
 8012234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012238:	08012255 	.word	0x08012255
 801223c:	0801226d 	.word	0x0801226d
 8012240:	080122ad 	.word	0x080122ad
 8012244:	08012483 	.word	0x08012483
 8012248:	08012483 	.word	0x08012483
 801224c:	08012423 	.word	0x08012423
 8012250:	0801244f 	.word	0x0801244f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	7c12      	ldrb	r2, [r2, #16]
 8012260:	f107 0108 	add.w	r1, r7, #8
 8012264:	4610      	mov	r0, r2
 8012266:	4798      	blx	r3
 8012268:	60f8      	str	r0, [r7, #12]
    break;
 801226a:	e112      	b.n	8012492 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	7c1b      	ldrb	r3, [r3, #16]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d10d      	bne.n	8012290 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801227c:	f107 0208 	add.w	r2, r7, #8
 8012280:	4610      	mov	r0, r2
 8012282:	4798      	blx	r3
 8012284:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3301      	adds	r3, #1
 801228a:	2202      	movs	r2, #2
 801228c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801228e:	e100      	b.n	8012492 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012298:	f107 0208 	add.w	r2, r7, #8
 801229c:	4610      	mov	r0, r2
 801229e:	4798      	blx	r3
 80122a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	3301      	adds	r3, #1
 80122a6:	2202      	movs	r2, #2
 80122a8:	701a      	strb	r2, [r3, #0]
    break;
 80122aa:	e0f2      	b.n	8012492 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	885b      	ldrh	r3, [r3, #2]
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	2b05      	cmp	r3, #5
 80122b4:	f200 80ac 	bhi.w	8012410 <USBD_GetDescriptor+0x204>
 80122b8:	a201      	add	r2, pc, #4	; (adr r2, 80122c0 <USBD_GetDescriptor+0xb4>)
 80122ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122be:	bf00      	nop
 80122c0:	080122d9 	.word	0x080122d9
 80122c4:	0801230d 	.word	0x0801230d
 80122c8:	08012341 	.word	0x08012341
 80122cc:	08012375 	.word	0x08012375
 80122d0:	080123a9 	.word	0x080123a9
 80122d4:	080123dd 	.word	0x080123dd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00b      	beq.n	80122fc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	687a      	ldr	r2, [r7, #4]
 80122ee:	7c12      	ldrb	r2, [r2, #16]
 80122f0:	f107 0108 	add.w	r1, r7, #8
 80122f4:	4610      	mov	r0, r2
 80122f6:	4798      	blx	r3
 80122f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122fa:	e091      	b.n	8012420 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80122fc:	6839      	ldr	r1, [r7, #0]
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 faad 	bl	801285e <USBD_CtlError>
        err++;
 8012304:	7afb      	ldrb	r3, [r7, #11]
 8012306:	3301      	adds	r3, #1
 8012308:	72fb      	strb	r3, [r7, #11]
      break;
 801230a:	e089      	b.n	8012420 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012312:	689b      	ldr	r3, [r3, #8]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d00b      	beq.n	8012330 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801231e:	689b      	ldr	r3, [r3, #8]
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	7c12      	ldrb	r2, [r2, #16]
 8012324:	f107 0108 	add.w	r1, r7, #8
 8012328:	4610      	mov	r0, r2
 801232a:	4798      	blx	r3
 801232c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801232e:	e077      	b.n	8012420 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012330:	6839      	ldr	r1, [r7, #0]
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 fa93 	bl	801285e <USBD_CtlError>
        err++;
 8012338:	7afb      	ldrb	r3, [r7, #11]
 801233a:	3301      	adds	r3, #1
 801233c:	72fb      	strb	r3, [r7, #11]
      break;
 801233e:	e06f      	b.n	8012420 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00b      	beq.n	8012364 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	7c12      	ldrb	r2, [r2, #16]
 8012358:	f107 0108 	add.w	r1, r7, #8
 801235c:	4610      	mov	r0, r2
 801235e:	4798      	blx	r3
 8012360:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012362:	e05d      	b.n	8012420 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012364:	6839      	ldr	r1, [r7, #0]
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 fa79 	bl	801285e <USBD_CtlError>
        err++;
 801236c:	7afb      	ldrb	r3, [r7, #11]
 801236e:	3301      	adds	r3, #1
 8012370:	72fb      	strb	r3, [r7, #11]
      break;
 8012372:	e055      	b.n	8012420 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801237a:	691b      	ldr	r3, [r3, #16]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d00b      	beq.n	8012398 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012386:	691b      	ldr	r3, [r3, #16]
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	7c12      	ldrb	r2, [r2, #16]
 801238c:	f107 0108 	add.w	r1, r7, #8
 8012390:	4610      	mov	r0, r2
 8012392:	4798      	blx	r3
 8012394:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012396:	e043      	b.n	8012420 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012398:	6839      	ldr	r1, [r7, #0]
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 fa5f 	bl	801285e <USBD_CtlError>
        err++;
 80123a0:	7afb      	ldrb	r3, [r7, #11]
 80123a2:	3301      	adds	r3, #1
 80123a4:	72fb      	strb	r3, [r7, #11]
      break;
 80123a6:	e03b      	b.n	8012420 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123ae:	695b      	ldr	r3, [r3, #20]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d00b      	beq.n	80123cc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123ba:	695b      	ldr	r3, [r3, #20]
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	7c12      	ldrb	r2, [r2, #16]
 80123c0:	f107 0108 	add.w	r1, r7, #8
 80123c4:	4610      	mov	r0, r2
 80123c6:	4798      	blx	r3
 80123c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123ca:	e029      	b.n	8012420 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80123cc:	6839      	ldr	r1, [r7, #0]
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 fa45 	bl	801285e <USBD_CtlError>
        err++;
 80123d4:	7afb      	ldrb	r3, [r7, #11]
 80123d6:	3301      	adds	r3, #1
 80123d8:	72fb      	strb	r3, [r7, #11]
      break;
 80123da:	e021      	b.n	8012420 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123e2:	699b      	ldr	r3, [r3, #24]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00b      	beq.n	8012400 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123ee:	699b      	ldr	r3, [r3, #24]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	7c12      	ldrb	r2, [r2, #16]
 80123f4:	f107 0108 	add.w	r1, r7, #8
 80123f8:	4610      	mov	r0, r2
 80123fa:	4798      	blx	r3
 80123fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123fe:	e00f      	b.n	8012420 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012400:	6839      	ldr	r1, [r7, #0]
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f000 fa2b 	bl	801285e <USBD_CtlError>
        err++;
 8012408:	7afb      	ldrb	r3, [r7, #11]
 801240a:	3301      	adds	r3, #1
 801240c:	72fb      	strb	r3, [r7, #11]
      break;
 801240e:	e007      	b.n	8012420 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012410:	6839      	ldr	r1, [r7, #0]
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f000 fa23 	bl	801285e <USBD_CtlError>
      err++;
 8012418:	7afb      	ldrb	r3, [r7, #11]
 801241a:	3301      	adds	r3, #1
 801241c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801241e:	bf00      	nop
    }
    break;
 8012420:	e037      	b.n	8012492 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	7c1b      	ldrb	r3, [r3, #16]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d109      	bne.n	801243e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012432:	f107 0208 	add.w	r2, r7, #8
 8012436:	4610      	mov	r0, r2
 8012438:	4798      	blx	r3
 801243a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801243c:	e029      	b.n	8012492 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801243e:	6839      	ldr	r1, [r7, #0]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f000 fa0c 	bl	801285e <USBD_CtlError>
      err++;
 8012446:	7afb      	ldrb	r3, [r7, #11]
 8012448:	3301      	adds	r3, #1
 801244a:	72fb      	strb	r3, [r7, #11]
    break;
 801244c:	e021      	b.n	8012492 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	7c1b      	ldrb	r3, [r3, #16]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d10d      	bne.n	8012472 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801245e:	f107 0208 	add.w	r2, r7, #8
 8012462:	4610      	mov	r0, r2
 8012464:	4798      	blx	r3
 8012466:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	3301      	adds	r3, #1
 801246c:	2207      	movs	r2, #7
 801246e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012470:	e00f      	b.n	8012492 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012472:	6839      	ldr	r1, [r7, #0]
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f000 f9f2 	bl	801285e <USBD_CtlError>
      err++;
 801247a:	7afb      	ldrb	r3, [r7, #11]
 801247c:	3301      	adds	r3, #1
 801247e:	72fb      	strb	r3, [r7, #11]
    break;
 8012480:	e007      	b.n	8012492 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8012482:	6839      	ldr	r1, [r7, #0]
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f000 f9ea 	bl	801285e <USBD_CtlError>
    err++;
 801248a:	7afb      	ldrb	r3, [r7, #11]
 801248c:	3301      	adds	r3, #1
 801248e:	72fb      	strb	r3, [r7, #11]
    break;
 8012490:	bf00      	nop
  }

  if (err != 0U)
 8012492:	7afb      	ldrb	r3, [r7, #11]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d11e      	bne.n	80124d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	88db      	ldrh	r3, [r3, #6]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d016      	beq.n	80124ce <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80124a0:	893b      	ldrh	r3, [r7, #8]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d00e      	beq.n	80124c4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	88da      	ldrh	r2, [r3, #6]
 80124aa:	893b      	ldrh	r3, [r7, #8]
 80124ac:	4293      	cmp	r3, r2
 80124ae:	bf28      	it	cs
 80124b0:	4613      	movcs	r3, r2
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80124b6:	893b      	ldrh	r3, [r7, #8]
 80124b8:	461a      	mov	r2, r3
 80124ba:	68f9      	ldr	r1, [r7, #12]
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f000 fa3f 	bl	8012940 <USBD_CtlSendData>
 80124c2:	e009      	b.n	80124d8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80124c4:	6839      	ldr	r1, [r7, #0]
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 f9c9 	bl	801285e <USBD_CtlError>
 80124cc:	e004      	b.n	80124d8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 fa90 	bl	80129f4 <USBD_CtlSendStatus>
 80124d4:	e000      	b.n	80124d8 <USBD_GetDescriptor+0x2cc>
    return;
 80124d6:	bf00      	nop
    }
  }
}
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop

080124e0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	889b      	ldrh	r3, [r3, #4]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d130      	bne.n	8012554 <USBD_SetAddress+0x74>
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	88db      	ldrh	r3, [r3, #6]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d12c      	bne.n	8012554 <USBD_SetAddress+0x74>
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	885b      	ldrh	r3, [r3, #2]
 80124fe:	2b7f      	cmp	r3, #127	; 0x7f
 8012500:	d828      	bhi.n	8012554 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	885b      	ldrh	r3, [r3, #2]
 8012506:	b2db      	uxtb	r3, r3
 8012508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801250c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012514:	2b03      	cmp	r3, #3
 8012516:	d104      	bne.n	8012522 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012518:	6839      	ldr	r1, [r7, #0]
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 f99f 	bl	801285e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012520:	e01d      	b.n	801255e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	7bfa      	ldrb	r2, [r7, #15]
 8012526:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801252a:	7bfb      	ldrb	r3, [r7, #15]
 801252c:	4619      	mov	r1, r3
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f003 fdcc 	bl	80160cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 fa5d 	bl	80129f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801253a:	7bfb      	ldrb	r3, [r7, #15]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d004      	beq.n	801254a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2202      	movs	r2, #2
 8012544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012548:	e009      	b.n	801255e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2201      	movs	r2, #1
 801254e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012552:	e004      	b.n	801255e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 f981 	bl	801285e <USBD_CtlError>
  }
}
 801255c:	bf00      	nop
 801255e:	bf00      	nop
 8012560:	3710      	adds	r7, #16
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
	...

08012568 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012572:	2300      	movs	r3, #0
 8012574:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	885b      	ldrh	r3, [r3, #2]
 801257a:	b2da      	uxtb	r2, r3
 801257c:	4b4b      	ldr	r3, [pc, #300]	; (80126ac <USBD_SetConfig+0x144>)
 801257e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012580:	4b4a      	ldr	r3, [pc, #296]	; (80126ac <USBD_SetConfig+0x144>)
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	2b01      	cmp	r3, #1
 8012586:	d905      	bls.n	8012594 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012588:	6839      	ldr	r1, [r7, #0]
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 f967 	bl	801285e <USBD_CtlError>
    return USBD_FAIL;
 8012590:	2303      	movs	r3, #3
 8012592:	e087      	b.n	80126a4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801259a:	2b02      	cmp	r3, #2
 801259c:	d002      	beq.n	80125a4 <USBD_SetConfig+0x3c>
 801259e:	2b03      	cmp	r3, #3
 80125a0:	d025      	beq.n	80125ee <USBD_SetConfig+0x86>
 80125a2:	e071      	b.n	8012688 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80125a4:	4b41      	ldr	r3, [pc, #260]	; (80126ac <USBD_SetConfig+0x144>)
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d01c      	beq.n	80125e6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80125ac:	4b3f      	ldr	r3, [pc, #252]	; (80126ac <USBD_SetConfig+0x144>)
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	461a      	mov	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80125b6:	4b3d      	ldr	r3, [pc, #244]	; (80126ac <USBD_SetConfig+0x144>)
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	4619      	mov	r1, r3
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f7ff f999 	bl	80118f4 <USBD_SetClassConfig>
 80125c2:	4603      	mov	r3, r0
 80125c4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80125c6:	7bfb      	ldrb	r3, [r7, #15]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d004      	beq.n	80125d6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80125cc:	6839      	ldr	r1, [r7, #0]
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f000 f945 	bl	801285e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80125d4:	e065      	b.n	80126a2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 fa0c 	bl	80129f4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2203      	movs	r2, #3
 80125e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80125e4:	e05d      	b.n	80126a2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f000 fa04 	bl	80129f4 <USBD_CtlSendStatus>
    break;
 80125ec:	e059      	b.n	80126a2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80125ee:	4b2f      	ldr	r3, [pc, #188]	; (80126ac <USBD_SetConfig+0x144>)
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d112      	bne.n	801261c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2202      	movs	r2, #2
 80125fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80125fe:	4b2b      	ldr	r3, [pc, #172]	; (80126ac <USBD_SetConfig+0x144>)
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	461a      	mov	r2, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012608:	4b28      	ldr	r3, [pc, #160]	; (80126ac <USBD_SetConfig+0x144>)
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	4619      	mov	r1, r3
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	f7ff f98c 	bl	801192c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f000 f9ed 	bl	80129f4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801261a:	e042      	b.n	80126a2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801261c:	4b23      	ldr	r3, [pc, #140]	; (80126ac <USBD_SetConfig+0x144>)
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	461a      	mov	r2, r3
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	429a      	cmp	r2, r3
 8012628:	d02a      	beq.n	8012680 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	b2db      	uxtb	r3, r3
 8012630:	4619      	mov	r1, r3
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f7ff f97a 	bl	801192c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012638:	4b1c      	ldr	r3, [pc, #112]	; (80126ac <USBD_SetConfig+0x144>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	461a      	mov	r2, r3
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012642:	4b1a      	ldr	r3, [pc, #104]	; (80126ac <USBD_SetConfig+0x144>)
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	4619      	mov	r1, r3
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ff f953 	bl	80118f4 <USBD_SetClassConfig>
 801264e:	4603      	mov	r3, r0
 8012650:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8012652:	7bfb      	ldrb	r3, [r7, #15]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d00f      	beq.n	8012678 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012658:	6839      	ldr	r1, [r7, #0]
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 f8ff 	bl	801285e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	b2db      	uxtb	r3, r3
 8012666:	4619      	mov	r1, r3
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f7ff f95f 	bl	801192c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2202      	movs	r2, #2
 8012672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012676:	e014      	b.n	80126a2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 f9bb 	bl	80129f4 <USBD_CtlSendStatus>
    break;
 801267e:	e010      	b.n	80126a2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 f9b7 	bl	80129f4 <USBD_CtlSendStatus>
    break;
 8012686:	e00c      	b.n	80126a2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012688:	6839      	ldr	r1, [r7, #0]
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f000 f8e7 	bl	801285e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012690:	4b06      	ldr	r3, [pc, #24]	; (80126ac <USBD_SetConfig+0x144>)
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	4619      	mov	r1, r3
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f7ff f948 	bl	801192c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801269c:	2303      	movs	r3, #3
 801269e:	73fb      	strb	r3, [r7, #15]
    break;
 80126a0:	bf00      	nop
  }

  return ret;
 80126a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3710      	adds	r7, #16
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	2000486c 	.word	0x2000486c

080126b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	88db      	ldrh	r3, [r3, #6]
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d004      	beq.n	80126cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80126c2:	6839      	ldr	r1, [r7, #0]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f000 f8ca 	bl	801285e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80126ca:	e022      	b.n	8012712 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126d2:	2b02      	cmp	r3, #2
 80126d4:	dc02      	bgt.n	80126dc <USBD_GetConfig+0x2c>
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	dc03      	bgt.n	80126e2 <USBD_GetConfig+0x32>
 80126da:	e015      	b.n	8012708 <USBD_GetConfig+0x58>
 80126dc:	2b03      	cmp	r3, #3
 80126de:	d00b      	beq.n	80126f8 <USBD_GetConfig+0x48>
 80126e0:	e012      	b.n	8012708 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2200      	movs	r2, #0
 80126e6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	3308      	adds	r3, #8
 80126ec:	2201      	movs	r2, #1
 80126ee:	4619      	mov	r1, r3
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 f925 	bl	8012940 <USBD_CtlSendData>
      break;
 80126f6:	e00c      	b.n	8012712 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	3304      	adds	r3, #4
 80126fc:	2201      	movs	r2, #1
 80126fe:	4619      	mov	r1, r3
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 f91d 	bl	8012940 <USBD_CtlSendData>
      break;
 8012706:	e004      	b.n	8012712 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8012708:	6839      	ldr	r1, [r7, #0]
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 f8a7 	bl	801285e <USBD_CtlError>
      break;
 8012710:	bf00      	nop
}
 8012712:	bf00      	nop
 8012714:	3708      	adds	r7, #8
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}

0801271a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801271a:	b580      	push	{r7, lr}
 801271c:	b082      	sub	sp, #8
 801271e:	af00      	add	r7, sp, #0
 8012720:	6078      	str	r0, [r7, #4]
 8012722:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801272a:	3b01      	subs	r3, #1
 801272c:	2b02      	cmp	r3, #2
 801272e:	d81e      	bhi.n	801276e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	88db      	ldrh	r3, [r3, #6]
 8012734:	2b02      	cmp	r3, #2
 8012736:	d004      	beq.n	8012742 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012738:	6839      	ldr	r1, [r7, #0]
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f88f 	bl	801285e <USBD_CtlError>
      break;
 8012740:	e01a      	b.n	8012778 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2201      	movs	r2, #1
 8012746:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801274e:	2b00      	cmp	r3, #0
 8012750:	d005      	beq.n	801275e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	f043 0202 	orr.w	r2, r3, #2
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	330c      	adds	r3, #12
 8012762:	2202      	movs	r2, #2
 8012764:	4619      	mov	r1, r3
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f000 f8ea 	bl	8012940 <USBD_CtlSendData>
    break;
 801276c:	e004      	b.n	8012778 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801276e:	6839      	ldr	r1, [r7, #0]
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f000 f874 	bl	801285e <USBD_CtlError>
    break;
 8012776:	bf00      	nop
  }
}
 8012778:	bf00      	nop
 801277a:	3708      	adds	r7, #8
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}

08012780 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	885b      	ldrh	r3, [r3, #2]
 801278e:	2b01      	cmp	r3, #1
 8012790:	d106      	bne.n	80127a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2201      	movs	r2, #1
 8012796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f000 f92a 	bl	80129f4 <USBD_CtlSendStatus>
  }
}
 80127a0:	bf00      	nop
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127b8:	3b01      	subs	r3, #1
 80127ba:	2b02      	cmp	r3, #2
 80127bc:	d80b      	bhi.n	80127d6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	885b      	ldrh	r3, [r3, #2]
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d10c      	bne.n	80127e0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2200      	movs	r2, #0
 80127ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 f910 	bl	80129f4 <USBD_CtlSendStatus>
      }
      break;
 80127d4:	e004      	b.n	80127e0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80127d6:	6839      	ldr	r1, [r7, #0]
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f000 f840 	bl	801285e <USBD_CtlError>
      break;
 80127de:	e000      	b.n	80127e2 <USBD_ClrFeature+0x3a>
      break;
 80127e0:	bf00      	nop
  }
}
 80127e2:	bf00      	nop
 80127e4:	3708      	adds	r7, #8
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80127ea:	b580      	push	{r7, lr}
 80127ec:	b084      	sub	sp, #16
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
 80127f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	781a      	ldrb	r2, [r3, #0]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	3301      	adds	r3, #1
 8012804:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	781a      	ldrb	r2, [r3, #0]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	3301      	adds	r3, #1
 8012812:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f7ff fac6 	bl	8011da6 <SWAPBYTE>
 801281a:	4603      	mov	r3, r0
 801281c:	461a      	mov	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	3301      	adds	r3, #1
 8012826:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	3301      	adds	r3, #1
 801282c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801282e:	68f8      	ldr	r0, [r7, #12]
 8012830:	f7ff fab9 	bl	8011da6 <SWAPBYTE>
 8012834:	4603      	mov	r3, r0
 8012836:	461a      	mov	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	3301      	adds	r3, #1
 8012840:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	3301      	adds	r3, #1
 8012846:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f7ff faac 	bl	8011da6 <SWAPBYTE>
 801284e:	4603      	mov	r3, r0
 8012850:	461a      	mov	r2, r3
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	80da      	strh	r2, [r3, #6]
}
 8012856:	bf00      	nop
 8012858:	3710      	adds	r7, #16
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801285e:	b580      	push	{r7, lr}
 8012860:	b082      	sub	sp, #8
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
 8012866:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012868:	2180      	movs	r1, #128	; 0x80
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f003 fbc4 	bl	8015ff8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012870:	2100      	movs	r1, #0
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f003 fbc0 	bl	8015ff8 <USBD_LL_StallEP>
}
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b086      	sub	sp, #24
 8012884:	af00      	add	r7, sp, #0
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801288c:	2300      	movs	r3, #0
 801288e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d036      	beq.n	8012904 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801289a:	6938      	ldr	r0, [r7, #16]
 801289c:	f000 f836 	bl	801290c <USBD_GetLen>
 80128a0:	4603      	mov	r3, r0
 80128a2:	3301      	adds	r3, #1
 80128a4:	b29b      	uxth	r3, r3
 80128a6:	005b      	lsls	r3, r3, #1
 80128a8:	b29a      	uxth	r2, r3
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80128ae:	7dfb      	ldrb	r3, [r7, #23]
 80128b0:	68ba      	ldr	r2, [r7, #8]
 80128b2:	4413      	add	r3, r2
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	7812      	ldrb	r2, [r2, #0]
 80128b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80128ba:	7dfb      	ldrb	r3, [r7, #23]
 80128bc:	3301      	adds	r3, #1
 80128be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80128c0:	7dfb      	ldrb	r3, [r7, #23]
 80128c2:	68ba      	ldr	r2, [r7, #8]
 80128c4:	4413      	add	r3, r2
 80128c6:	2203      	movs	r2, #3
 80128c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80128ca:	7dfb      	ldrb	r3, [r7, #23]
 80128cc:	3301      	adds	r3, #1
 80128ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80128d0:	e013      	b.n	80128fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80128d2:	7dfb      	ldrb	r3, [r7, #23]
 80128d4:	68ba      	ldr	r2, [r7, #8]
 80128d6:	4413      	add	r3, r2
 80128d8:	693a      	ldr	r2, [r7, #16]
 80128da:	7812      	ldrb	r2, [r2, #0]
 80128dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	3301      	adds	r3, #1
 80128e2:	613b      	str	r3, [r7, #16]
    idx++;
 80128e4:	7dfb      	ldrb	r3, [r7, #23]
 80128e6:	3301      	adds	r3, #1
 80128e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80128ea:	7dfb      	ldrb	r3, [r7, #23]
 80128ec:	68ba      	ldr	r2, [r7, #8]
 80128ee:	4413      	add	r3, r2
 80128f0:	2200      	movs	r2, #0
 80128f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80128f4:	7dfb      	ldrb	r3, [r7, #23]
 80128f6:	3301      	adds	r3, #1
 80128f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d1e7      	bne.n	80128d2 <USBD_GetString+0x52>
 8012902:	e000      	b.n	8012906 <USBD_GetString+0x86>
    return;
 8012904:	bf00      	nop
  }
}
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801290c:	b480      	push	{r7}
 801290e:	b085      	sub	sp, #20
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012914:	2300      	movs	r3, #0
 8012916:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801291c:	e005      	b.n	801292a <USBD_GetLen+0x1e>
  {
    len++;
 801291e:	7bfb      	ldrb	r3, [r7, #15]
 8012920:	3301      	adds	r3, #1
 8012922:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	3301      	adds	r3, #1
 8012928:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d1f5      	bne.n	801291e <USBD_GetLen+0x12>
  }

  return len;
 8012932:	7bfb      	ldrb	r3, [r7, #15]
}
 8012934:	4618      	mov	r0, r3
 8012936:	3714      	adds	r7, #20
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	60f8      	str	r0, [r7, #12]
 8012948:	60b9      	str	r1, [r7, #8]
 801294a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2202      	movs	r2, #2
 8012950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	68ba      	ldr	r2, [r7, #8]
 8012964:	2100      	movs	r1, #0
 8012966:	68f8      	ldr	r0, [r7, #12]
 8012968:	f003 fbcf 	bl	801610a <USBD_LL_Transmit>

  return USBD_OK;
 801296c:	2300      	movs	r3, #0
}
 801296e:	4618      	mov	r0, r3
 8012970:	3710      	adds	r7, #16
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}

08012976 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012976:	b580      	push	{r7, lr}
 8012978:	b084      	sub	sp, #16
 801297a:	af00      	add	r7, sp, #0
 801297c:	60f8      	str	r0, [r7, #12]
 801297e:	60b9      	str	r1, [r7, #8]
 8012980:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	68ba      	ldr	r2, [r7, #8]
 8012986:	2100      	movs	r1, #0
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	f003 fbbe 	bl	801610a <USBD_LL_Transmit>

  return USBD_OK;
 801298e:	2300      	movs	r3, #0
}
 8012990:	4618      	mov	r0, r3
 8012992:	3710      	adds	r7, #16
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2203      	movs	r2, #3
 80129a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	68ba      	ldr	r2, [r7, #8]
 80129c0:	2100      	movs	r1, #0
 80129c2:	68f8      	ldr	r0, [r7, #12]
 80129c4:	f003 fbc2 	bl	801614c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129c8:	2300      	movs	r3, #0
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3710      	adds	r7, #16
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b084      	sub	sp, #16
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	60f8      	str	r0, [r7, #12]
 80129da:	60b9      	str	r1, [r7, #8]
 80129dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	68ba      	ldr	r2, [r7, #8]
 80129e2:	2100      	movs	r1, #0
 80129e4:	68f8      	ldr	r0, [r7, #12]
 80129e6:	f003 fbb1 	bl	801614c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129ea:	2300      	movs	r3, #0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2204      	movs	r2, #4
 8012a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012a04:	2300      	movs	r3, #0
 8012a06:	2200      	movs	r2, #0
 8012a08:	2100      	movs	r1, #0
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f003 fb7d 	bl	801610a <USBD_LL_Transmit>

  return USBD_OK;
 8012a10:	2300      	movs	r3, #0
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3708      	adds	r7, #8
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b082      	sub	sp, #8
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2205      	movs	r2, #5
 8012a26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	2100      	movs	r1, #0
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f003 fb8b 	bl	801614c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3708      	adds	r7, #8
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b085      	sub	sp, #20
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a52:	2b84      	cmp	r3, #132	; 0x84
 8012a54:	d005      	beq.n	8012a62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012a56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	3303      	adds	r3, #3
 8012a60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012a62:	68fb      	ldr	r3, [r7, #12]
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3714      	adds	r7, #20
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr

08012a70 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b083      	sub	sp, #12
 8012a74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a76:	f3ef 8305 	mrs	r3, IPSR
 8012a7a:	607b      	str	r3, [r7, #4]
  return(result);
 8012a7c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	bf14      	ite	ne
 8012a82:	2301      	movne	r3, #1
 8012a84:	2300      	moveq	r3, #0
 8012a86:	b2db      	uxtb	r3, r3
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012a98:	f001 fb4c 	bl	8014134 <vTaskStartScheduler>
  
  return osOK;
 8012a9c:	2300      	movs	r3, #0
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	bd80      	pop	{r7, pc}

08012aa2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aa4:	b089      	sub	sp, #36	; 0x24
 8012aa6:	af04      	add	r7, sp, #16
 8012aa8:	6078      	str	r0, [r7, #4]
 8012aaa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	695b      	ldr	r3, [r3, #20]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d020      	beq.n	8012af6 <osThreadCreate+0x54>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	699b      	ldr	r3, [r3, #24]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d01c      	beq.n	8012af6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	685c      	ldr	r4, [r3, #4]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681d      	ldr	r5, [r3, #0]
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	691e      	ldr	r6, [r3, #16]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7ff ffb6 	bl	8012a40 <makeFreeRtosPriority>
 8012ad4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	695b      	ldr	r3, [r3, #20]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012ade:	9202      	str	r2, [sp, #8]
 8012ae0:	9301      	str	r3, [sp, #4]
 8012ae2:	9100      	str	r1, [sp, #0]
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	4632      	mov	r2, r6
 8012ae8:	4629      	mov	r1, r5
 8012aea:	4620      	mov	r0, r4
 8012aec:	f001 f95a 	bl	8013da4 <xTaskCreateStatic>
 8012af0:	4603      	mov	r3, r0
 8012af2:	60fb      	str	r3, [r7, #12]
 8012af4:	e01c      	b.n	8012b30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	685c      	ldr	r4, [r3, #4]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012b02:	b29e      	uxth	r6, r3
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7ff ff98 	bl	8012a40 <makeFreeRtosPriority>
 8012b10:	4602      	mov	r2, r0
 8012b12:	f107 030c 	add.w	r3, r7, #12
 8012b16:	9301      	str	r3, [sp, #4]
 8012b18:	9200      	str	r2, [sp, #0]
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	4632      	mov	r2, r6
 8012b1e:	4629      	mov	r1, r5
 8012b20:	4620      	mov	r0, r4
 8012b22:	f001 f99c 	bl	8013e5e <xTaskCreate>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d001      	beq.n	8012b30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	e000      	b.n	8012b32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012b30:	68fb      	ldr	r3, [r7, #12]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3714      	adds	r7, #20
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b084      	sub	sp, #16
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d001      	beq.n	8012b50 <osDelay+0x16>
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	e000      	b.n	8012b52 <osDelay+0x18>
 8012b50:	2301      	movs	r3, #1
 8012b52:	4618      	mov	r0, r3
 8012b54:	f001 faba 	bl	80140cc <vTaskDelay>
  
  return osOK;
 8012b58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3710      	adds	r7, #16
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
	...

08012b64 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b086      	sub	sp, #24
 8012b68:	af02      	add	r7, sp, #8
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8012b76:	f7ff ff7b 	bl	8012a70 <inHandlerMode>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d01c      	beq.n	8012bba <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8012b80:	6839      	ldr	r1, [r7, #0]
 8012b82:	f107 0208 	add.w	r2, r7, #8
 8012b86:	f107 030c 	add.w	r3, r7, #12
 8012b8a:	9300      	str	r3, [sp, #0]
 8012b8c:	4613      	mov	r3, r2
 8012b8e:	2201      	movs	r2, #1
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f002 f881 	bl	8014c98 <xTaskGenericNotifyFromISR>
 8012b96:	4603      	mov	r3, r0
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	d002      	beq.n	8012ba2 <osSignalSet+0x3e>
      return 0x80000000;
 8012b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ba0:	e019      	b.n	8012bd6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d015      	beq.n	8012bd4 <osSignalSet+0x70>
 8012ba8:	4b0d      	ldr	r3, [pc, #52]	; (8012be0 <osSignalSet+0x7c>)
 8012baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bae:	601a      	str	r2, [r3, #0]
 8012bb0:	f3bf 8f4f 	dsb	sy
 8012bb4:	f3bf 8f6f 	isb	sy
 8012bb8:	e00c      	b.n	8012bd4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012bba:	6839      	ldr	r1, [r7, #0]
 8012bbc:	f107 0308 	add.w	r3, r7, #8
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f001 ffb2 	bl	8014b2c <xTaskGenericNotify>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d002      	beq.n	8012bd4 <osSignalSet+0x70>
    return 0x80000000;
 8012bce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bd2:	e000      	b.n	8012bd6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012bd4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	e000ed04 	.word	0xe000ed04

08012be4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012be4:	b590      	push	{r4, r7, lr}
 8012be6:	b089      	sub	sp, #36	; 0x24
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	60f8      	str	r0, [r7, #12]
 8012bec:	60b9      	str	r1, [r7, #8]
 8012bee:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bfe:	d103      	bne.n	8012c08 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012c00:	f04f 33ff 	mov.w	r3, #4294967295
 8012c04:	61fb      	str	r3, [r7, #28]
 8012c06:	e009      	b.n	8012c1c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d006      	beq.n	8012c1c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d101      	bne.n	8012c1c <osSignalWait+0x38>
      ticks = 1;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012c1c:	f7ff ff28 	bl	8012a70 <inHandlerMode>
 8012c20:	4603      	mov	r3, r0
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d002      	beq.n	8012c2c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012c26:	2382      	movs	r3, #130	; 0x82
 8012c28:	613b      	str	r3, [r7, #16]
 8012c2a:	e01b      	b.n	8012c64 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012c2c:	68b9      	ldr	r1, [r7, #8]
 8012c2e:	f107 0310 	add.w	r3, r7, #16
 8012c32:	1d1a      	adds	r2, r3, #4
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	2000      	movs	r0, #0
 8012c38:	f001 ff1e 	bl	8014a78 <xTaskNotifyWait>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d008      	beq.n	8012c54 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d102      	bne.n	8012c4e <osSignalWait+0x6a>
 8012c48:	2300      	movs	r3, #0
 8012c4a:	613b      	str	r3, [r7, #16]
 8012c4c:	e00a      	b.n	8012c64 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8012c4e:	2340      	movs	r3, #64	; 0x40
 8012c50:	613b      	str	r3, [r7, #16]
 8012c52:	e007      	b.n	8012c64 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	da02      	bge.n	8012c60 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8012c5a:	2386      	movs	r3, #134	; 0x86
 8012c5c:	613b      	str	r3, [r7, #16]
 8012c5e:	e001      	b.n	8012c64 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8012c60:	2308      	movs	r3, #8
 8012c62:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	461c      	mov	r4, r3
 8012c68:	f107 0310 	add.w	r3, r7, #16
 8012c6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	3724      	adds	r7, #36	; 0x24
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd90      	pop	{r4, r7, pc}

08012c7c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d007      	beq.n	8012c9c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	4619      	mov	r1, r3
 8012c92:	2001      	movs	r0, #1
 8012c94:	f000 fc65 	bl	8013562 <xQueueCreateMutexStatic>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	e003      	b.n	8012ca4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012c9c:	2001      	movs	r0, #1
 8012c9e:	f000 fc48 	bl	8013532 <xQueueCreateMutex>
 8012ca2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3708      	adds	r7, #8
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b086      	sub	sp, #24
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	3303      	adds	r3, #3
 8012cba:	f023 0303 	bic.w	r3, r3, #3
 8012cbe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012cc0:	2014      	movs	r0, #20
 8012cc2:	f002 fb79 	bl	80153b8 <pvPortMalloc>
 8012cc6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d046      	beq.n	8012d5c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012cd6:	68fa      	ldr	r2, [r7, #12]
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f002 fb66 	bl	80153b8 <pvPortMalloc>
 8012cec:	4602      	mov	r2, r0
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d02b      	beq.n	8012d52 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	fb02 f303 	mul.w	r3, r2, r3
 8012d04:	4618      	mov	r0, r3
 8012d06:	f002 fb57 	bl	80153b8 <pvPortMalloc>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d011      	beq.n	8012d3c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012d18:	2300      	movs	r3, #0
 8012d1a:	613b      	str	r3, [r7, #16]
 8012d1c:	e008      	b.n	8012d30 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	685a      	ldr	r2, [r3, #4]
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	4413      	add	r3, r2
 8012d26:	2200      	movs	r2, #0
 8012d28:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	613b      	str	r3, [r7, #16]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	693a      	ldr	r2, [r7, #16]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d3f1      	bcc.n	8012d1e <osPoolCreate+0x72>
 8012d3a:	e00f      	b.n	8012d5c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	4618      	mov	r0, r3
 8012d42:	f002 fbfd 	bl	8015540 <vPortFree>
        vPortFree(thePool);
 8012d46:	6978      	ldr	r0, [r7, #20]
 8012d48:	f002 fbfa 	bl	8015540 <vPortFree>
        thePool = NULL;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	617b      	str	r3, [r7, #20]
 8012d50:	e004      	b.n	8012d5c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012d52:	6978      	ldr	r0, [r7, #20]
 8012d54:	f002 fbf4 	bl	8015540 <vPortFree>
      thePool = NULL;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012d5c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3718      	adds	r7, #24
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012d66:	b580      	push	{r7, lr}
 8012d68:	b08a      	sub	sp, #40	; 0x28
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012d72:	2300      	movs	r3, #0
 8012d74:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012d76:	f7ff fe7b 	bl	8012a70 <inHandlerMode>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d00e      	beq.n	8012d9e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012d80:	f3ef 8211 	mrs	r2, BASEPRI
 8012d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d88:	f383 8811 	msr	BASEPRI, r3
 8012d8c:	f3bf 8f6f 	isb	sy
 8012d90:	f3bf 8f4f 	dsb	sy
 8012d94:	617a      	str	r2, [r7, #20]
 8012d96:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012d98:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8012d9c:	e001      	b.n	8012da2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012d9e:	f002 f9e9 	bl	8015174 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012da2:	2300      	movs	r3, #0
 8012da4:	61fb      	str	r3, [r7, #28]
 8012da6:	e029      	b.n	8012dfc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	691a      	ldr	r2, [r3, #16]
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	4413      	add	r3, r2
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	6892      	ldr	r2, [r2, #8]
 8012db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012db8:	fb02 f201 	mul.w	r2, r2, r1
 8012dbc:	1a9b      	subs	r3, r3, r2
 8012dbe:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	685a      	ldr	r2, [r3, #4]
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	4413      	add	r3, r2
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d113      	bne.n	8012df6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	685a      	ldr	r2, [r3, #4]
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4619      	mov	r1, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	69ba      	ldr	r2, [r7, #24]
 8012de6:	fb02 f303 	mul.w	r3, r2, r3
 8012dea:	440b      	add	r3, r1
 8012dec:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	69ba      	ldr	r2, [r7, #24]
 8012df2:	611a      	str	r2, [r3, #16]
      break;
 8012df4:	e007      	b.n	8012e06 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012df6:	69fb      	ldr	r3, [r7, #28]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	61fb      	str	r3, [r7, #28]
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	689b      	ldr	r3, [r3, #8]
 8012e00:	69fa      	ldr	r2, [r7, #28]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d3d0      	bcc.n	8012da8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012e06:	f7ff fe33 	bl	8012a70 <inHandlerMode>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d005      	beq.n	8012e1c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e12:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012e1a:	e001      	b.n	8012e20 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012e1c:	f002 f9da 	bl	80151d4 <vPortExitCritical>
  }
  
  return p;
 8012e20:	6a3b      	ldr	r3, [r7, #32]
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3728      	adds	r7, #40	; 0x28
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}

08012e2a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012e2a:	b480      	push	{r7}
 8012e2c:	b085      	sub	sp, #20
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	6078      	str	r0, [r7, #4]
 8012e32:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d101      	bne.n	8012e3e <osPoolFree+0x14>
    return osErrorParameter;
 8012e3a:	2380      	movs	r3, #128	; 0x80
 8012e3c:	e030      	b.n	8012ea0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d101      	bne.n	8012e48 <osPoolFree+0x1e>
    return osErrorParameter;
 8012e44:	2380      	movs	r3, #128	; 0x80
 8012e46:	e02b      	b.n	8012ea0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	683a      	ldr	r2, [r7, #0]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d201      	bcs.n	8012e56 <osPoolFree+0x2c>
    return osErrorParameter;
 8012e52:	2380      	movs	r3, #128	; 0x80
 8012e54:	e024      	b.n	8012ea0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	6812      	ldr	r2, [r2, #0]
 8012e5c:	1a9b      	subs	r3, r3, r2
 8012e5e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	68da      	ldr	r2, [r3, #12]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e6a:	fb02 f201 	mul.w	r2, r2, r1
 8012e6e:	1a9b      	subs	r3, r3, r2
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d001      	beq.n	8012e78 <osPoolFree+0x4e>
    return osErrorParameter;
 8012e74:	2380      	movs	r3, #128	; 0x80
 8012e76:	e013      	b.n	8012ea0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	68fa      	ldr	r2, [r7, #12]
 8012e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e82:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	689b      	ldr	r3, [r3, #8]
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d301      	bcc.n	8012e92 <osPoolFree+0x68>
    return osErrorParameter;
 8012e8e:	2380      	movs	r3, #128	; 0x80
 8012e90:	e006      	b.n	8012ea0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	685a      	ldr	r2, [r3, #4]
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	4413      	add	r3, r2
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012e9e:	2300      	movs	r3, #0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3714      	adds	r7, #20
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr

08012eac <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012eac:	b590      	push	{r4, r7, lr}
 8012eae:	b087      	sub	sp, #28
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	60fb      	str	r3, [r7, #12]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	613b      	str	r3, [r7, #16]
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	689c      	ldr	r4, [r3, #8]
 8012eca:	200c      	movs	r0, #12
 8012ecc:	f002 fa74 	bl	80153b8 <pvPortMalloc>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	689b      	ldr	r3, [r3, #8]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d101      	bne.n	8012ee2 <osMailCreate+0x36>
    return NULL;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	e038      	b.n	8012f54 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	687a      	ldr	r2, [r7, #4]
 8012eea:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6818      	ldr	r0, [r3, #0]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	689b      	ldr	r3, [r3, #8]
 8012ef4:	681c      	ldr	r4, [r3, #0]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	2104      	movs	r1, #4
 8012efa:	f000 faa1 	bl	8013440 <xQueueGenericCreate>
 8012efe:	4603      	mov	r3, r0
 8012f00:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	689b      	ldr	r3, [r3, #8]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d107      	bne.n	8012f1e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	689b      	ldr	r3, [r3, #8]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	4618      	mov	r0, r3
 8012f16:	f002 fb13 	bl	8015540 <vPortFree>
    return NULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	e01a      	b.n	8012f54 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	681c      	ldr	r4, [r3, #0]
 8012f24:	f107 030c 	add.w	r3, r7, #12
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7ff febf 	bl	8012cac <osPoolCreate>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	689b      	ldr	r3, [r3, #8]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	689b      	ldr	r3, [r3, #8]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d107      	bne.n	8012f4e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	689b      	ldr	r3, [r3, #8]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f002 fafb 	bl	8015540 <vPortFree>
    return NULL;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	e002      	b.n	8012f54 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	689b      	ldr	r3, [r3, #8]
 8012f52:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	371c      	adds	r7, #28
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd90      	pop	{r4, r7, pc}

08012f5c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d101      	bne.n	8012f70 <osMailAlloc+0x14>
    return NULL;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	e006      	b.n	8012f7e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	689b      	ldr	r3, [r3, #8]
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7ff fef6 	bl	8012d66 <osPoolAlloc>
 8012f7a:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3710      	adds	r7, #16
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}
	...

08012f88 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d101      	bne.n	8012f9c <osMailPut+0x14>
    return osErrorParameter;
 8012f98:	2380      	movs	r3, #128	; 0x80
 8012f9a:	e02c      	b.n	8012ff6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012fa0:	f7ff fd66 	bl	8012a70 <inHandlerMode>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d018      	beq.n	8012fdc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6858      	ldr	r0, [r3, #4]
 8012fae:	f107 020c 	add.w	r2, r7, #12
 8012fb2:	4639      	mov	r1, r7
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	f000 fbed 	bl	8013794 <xQueueGenericSendFromISR>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d001      	beq.n	8012fc4 <osMailPut+0x3c>
      return osErrorOS;
 8012fc0:	23ff      	movs	r3, #255	; 0xff
 8012fc2:	e018      	b.n	8012ff6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d014      	beq.n	8012ff4 <osMailPut+0x6c>
 8012fca:	4b0d      	ldr	r3, [pc, #52]	; (8013000 <osMailPut+0x78>)
 8012fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fd0:	601a      	str	r2, [r3, #0]
 8012fd2:	f3bf 8f4f 	dsb	sy
 8012fd6:	f3bf 8f6f 	isb	sy
 8012fda:	e00b      	b.n	8012ff4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6858      	ldr	r0, [r3, #4]
 8012fe0:	4639      	mov	r1, r7
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	f000 fad7 	bl	8013598 <xQueueGenericSend>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d001      	beq.n	8012ff4 <osMailPut+0x6c>
      return osErrorOS;
 8012ff0:	23ff      	movs	r3, #255	; 0xff
 8012ff2:	e000      	b.n	8012ff6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	e000ed04 	.word	0xe000ed04

08013004 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8013004:	b590      	push	{r4, r7, lr}
 8013006:	b08b      	sub	sp, #44	; 0x2c
 8013008:	af00      	add	r7, sp, #0
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d10a      	bne.n	8013030 <osMailGet+0x2c>
    event.status = osErrorParameter;
 801301a:	2380      	movs	r3, #128	; 0x80
 801301c:	617b      	str	r3, [r7, #20]
    return event;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	461c      	mov	r4, r3
 8013022:	f107 0314 	add.w	r3, r7, #20
 8013026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801302a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801302e:	e056      	b.n	80130de <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013030:	2300      	movs	r3, #0
 8013032:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8013034:	2300      	movs	r3, #0
 8013036:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801303e:	d103      	bne.n	8013048 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8013040:	f04f 33ff 	mov.w	r3, #4294967295
 8013044:	627b      	str	r3, [r7, #36]	; 0x24
 8013046:	e009      	b.n	801305c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d006      	beq.n	801305c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8013052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013054:	2b00      	cmp	r3, #0
 8013056:	d101      	bne.n	801305c <osMailGet+0x58>
      ticks = 1;
 8013058:	2301      	movs	r3, #1
 801305a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801305c:	f7ff fd08 	bl	8012a70 <inHandlerMode>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	d01d      	beq.n	80130a2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	6858      	ldr	r0, [r3, #4]
 801306a:	f107 0220 	add.w	r2, r7, #32
 801306e:	f107 0314 	add.w	r3, r7, #20
 8013072:	3304      	adds	r3, #4
 8013074:	4619      	mov	r1, r3
 8013076:	f000 fd05 	bl	8013a84 <xQueueReceiveFromISR>
 801307a:	4603      	mov	r3, r0
 801307c:	2b01      	cmp	r3, #1
 801307e:	d102      	bne.n	8013086 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8013080:	2320      	movs	r3, #32
 8013082:	617b      	str	r3, [r7, #20]
 8013084:	e001      	b.n	801308a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8013086:	2300      	movs	r3, #0
 8013088:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801308a:	6a3b      	ldr	r3, [r7, #32]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d01e      	beq.n	80130ce <osMailGet+0xca>
 8013090:	4b15      	ldr	r3, [pc, #84]	; (80130e8 <osMailGet+0xe4>)
 8013092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013096:	601a      	str	r2, [r3, #0]
 8013098:	f3bf 8f4f 	dsb	sy
 801309c:	f3bf 8f6f 	isb	sy
 80130a0:	e015      	b.n	80130ce <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	6858      	ldr	r0, [r3, #4]
 80130a6:	f107 0314 	add.w	r3, r7, #20
 80130aa:	3304      	adds	r3, #4
 80130ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130ae:	4619      	mov	r1, r3
 80130b0:	f000 fc08 	bl	80138c4 <xQueueReceive>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d102      	bne.n	80130c0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80130ba:	2320      	movs	r3, #32
 80130bc:	617b      	str	r3, [r7, #20]
 80130be:	e006      	b.n	80130ce <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80130c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d101      	bne.n	80130ca <osMailGet+0xc6>
 80130c6:	2300      	movs	r3, #0
 80130c8:	e000      	b.n	80130cc <osMailGet+0xc8>
 80130ca:	2340      	movs	r3, #64	; 0x40
 80130cc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	461c      	mov	r4, r3
 80130d2:	f107 0314 	add.w	r3, r7, #20
 80130d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80130da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80130de:	68f8      	ldr	r0, [r7, #12]
 80130e0:	372c      	adds	r7, #44	; 0x2c
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd90      	pop	{r4, r7, pc}
 80130e6:	bf00      	nop
 80130e8:	e000ed04 	.word	0xe000ed04

080130ec <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d101      	bne.n	8013100 <osMailFree+0x14>
    return osErrorParameter;
 80130fc:	2380      	movs	r3, #128	; 0x80
 80130fe:	e006      	b.n	801310e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	689b      	ldr	r3, [r3, #8]
 8013104:	6839      	ldr	r1, [r7, #0]
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff fe8f 	bl	8012e2a <osPoolFree>
 801310c:	4603      	mov	r3, r0
}
 801310e:	4618      	mov	r0, r3
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013116:	b480      	push	{r7}
 8013118:	b083      	sub	sp, #12
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f103 0208 	add.w	r2, r3, #8
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f04f 32ff 	mov.w	r2, #4294967295
 801312e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f103 0208 	add.w	r2, r3, #8
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f103 0208 	add.w	r2, r3, #8
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2200      	movs	r2, #0
 8013148:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801314a:	bf00      	nop
 801314c:	370c      	adds	r7, #12
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr

08013156 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013156:	b480      	push	{r7}
 8013158:	b083      	sub	sp, #12
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2200      	movs	r2, #0
 8013162:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013164:	bf00      	nop
 8013166:	370c      	adds	r7, #12
 8013168:	46bd      	mov	sp, r7
 801316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316e:	4770      	bx	lr

08013170 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013170:	b480      	push	{r7}
 8013172:	b085      	sub	sp, #20
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	689a      	ldr	r2, [r3, #8]
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	689b      	ldr	r3, [r3, #8]
 8013192:	683a      	ldr	r2, [r7, #0]
 8013194:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	683a      	ldr	r2, [r7, #0]
 801319a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	1c5a      	adds	r2, r3, #1
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	601a      	str	r2, [r3, #0]
}
 80131ac:	bf00      	nop
 80131ae:	3714      	adds	r7, #20
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr

080131b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80131b8:	b480      	push	{r7}
 80131ba:	b085      	sub	sp, #20
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131ce:	d103      	bne.n	80131d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	60fb      	str	r3, [r7, #12]
 80131d6:	e00c      	b.n	80131f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	3308      	adds	r3, #8
 80131dc:	60fb      	str	r3, [r7, #12]
 80131de:	e002      	b.n	80131e6 <vListInsert+0x2e>
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	60fb      	str	r3, [r7, #12]
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	68ba      	ldr	r2, [r7, #8]
 80131ee:	429a      	cmp	r2, r3
 80131f0:	d2f6      	bcs.n	80131e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	685a      	ldr	r2, [r3, #4]
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	685b      	ldr	r3, [r3, #4]
 80131fe:	683a      	ldr	r2, [r7, #0]
 8013200:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	68fa      	ldr	r2, [r7, #12]
 8013206:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	683a      	ldr	r2, [r7, #0]
 801320c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	687a      	ldr	r2, [r7, #4]
 8013212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	1c5a      	adds	r2, r3, #1
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	601a      	str	r2, [r3, #0]
}
 801321e:	bf00      	nop
 8013220:	3714      	adds	r7, #20
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr

0801322a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801322a:	b480      	push	{r7}
 801322c:	b085      	sub	sp, #20
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	6892      	ldr	r2, [r2, #8]
 8013240:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	689b      	ldr	r3, [r3, #8]
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	6852      	ldr	r2, [r2, #4]
 801324a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	429a      	cmp	r2, r3
 8013254:	d103      	bne.n	801325e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	689a      	ldr	r2, [r3, #8]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2200      	movs	r2, #0
 8013262:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	1e5a      	subs	r2, r3, #1
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681b      	ldr	r3, [r3, #0]
}
 8013272:	4618      	mov	r0, r3
 8013274:	3714      	adds	r7, #20
 8013276:	46bd      	mov	sp, r7
 8013278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327c:	4770      	bx	lr
	...

08013280 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b084      	sub	sp, #16
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d10a      	bne.n	80132aa <xQueueGenericReset+0x2a>
	__asm volatile
 8013294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013298:	f383 8811 	msr	BASEPRI, r3
 801329c:	f3bf 8f6f 	isb	sy
 80132a0:	f3bf 8f4f 	dsb	sy
 80132a4:	60bb      	str	r3, [r7, #8]
}
 80132a6:	bf00      	nop
 80132a8:	e7fe      	b.n	80132a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80132aa:	f001 ff63 	bl	8015174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132b6:	68f9      	ldr	r1, [r7, #12]
 80132b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80132ba:	fb01 f303 	mul.w	r3, r1, r3
 80132be:	441a      	add	r2, r3
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	2200      	movs	r2, #0
 80132c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132da:	3b01      	subs	r3, #1
 80132dc:	68f9      	ldr	r1, [r7, #12]
 80132de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80132e0:	fb01 f303 	mul.w	r3, r1, r3
 80132e4:	441a      	add	r2, r3
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	22ff      	movs	r2, #255	; 0xff
 80132ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	22ff      	movs	r2, #255	; 0xff
 80132f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d114      	bne.n	801332a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	691b      	ldr	r3, [r3, #16]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d01a      	beq.n	801333e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	3310      	adds	r3, #16
 801330c:	4618      	mov	r0, r3
 801330e:	f001 f953 	bl	80145b8 <xTaskRemoveFromEventList>
 8013312:	4603      	mov	r3, r0
 8013314:	2b00      	cmp	r3, #0
 8013316:	d012      	beq.n	801333e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013318:	4b0c      	ldr	r3, [pc, #48]	; (801334c <xQueueGenericReset+0xcc>)
 801331a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801331e:	601a      	str	r2, [r3, #0]
 8013320:	f3bf 8f4f 	dsb	sy
 8013324:	f3bf 8f6f 	isb	sy
 8013328:	e009      	b.n	801333e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	3310      	adds	r3, #16
 801332e:	4618      	mov	r0, r3
 8013330:	f7ff fef1 	bl	8013116 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	3324      	adds	r3, #36	; 0x24
 8013338:	4618      	mov	r0, r3
 801333a:	f7ff feec 	bl	8013116 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801333e:	f001 ff49 	bl	80151d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013342:	2301      	movs	r3, #1
}
 8013344:	4618      	mov	r0, r3
 8013346:	3710      	adds	r7, #16
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	e000ed04 	.word	0xe000ed04

08013350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013350:	b580      	push	{r7, lr}
 8013352:	b08e      	sub	sp, #56	; 0x38
 8013354:	af02      	add	r7, sp, #8
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	607a      	str	r2, [r7, #4]
 801335c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d10a      	bne.n	801337a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013368:	f383 8811 	msr	BASEPRI, r3
 801336c:	f3bf 8f6f 	isb	sy
 8013370:	f3bf 8f4f 	dsb	sy
 8013374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013376:	bf00      	nop
 8013378:	e7fe      	b.n	8013378 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d10a      	bne.n	8013396 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013384:	f383 8811 	msr	BASEPRI, r3
 8013388:	f3bf 8f6f 	isb	sy
 801338c:	f3bf 8f4f 	dsb	sy
 8013390:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013392:	bf00      	nop
 8013394:	e7fe      	b.n	8013394 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d002      	beq.n	80133a2 <xQueueGenericCreateStatic+0x52>
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d001      	beq.n	80133a6 <xQueueGenericCreateStatic+0x56>
 80133a2:	2301      	movs	r3, #1
 80133a4:	e000      	b.n	80133a8 <xQueueGenericCreateStatic+0x58>
 80133a6:	2300      	movs	r3, #0
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d10a      	bne.n	80133c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80133ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b0:	f383 8811 	msr	BASEPRI, r3
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	623b      	str	r3, [r7, #32]
}
 80133be:	bf00      	nop
 80133c0:	e7fe      	b.n	80133c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d102      	bne.n	80133ce <xQueueGenericCreateStatic+0x7e>
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d101      	bne.n	80133d2 <xQueueGenericCreateStatic+0x82>
 80133ce:	2301      	movs	r3, #1
 80133d0:	e000      	b.n	80133d4 <xQueueGenericCreateStatic+0x84>
 80133d2:	2300      	movs	r3, #0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d10a      	bne.n	80133ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80133d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133dc:	f383 8811 	msr	BASEPRI, r3
 80133e0:	f3bf 8f6f 	isb	sy
 80133e4:	f3bf 8f4f 	dsb	sy
 80133e8:	61fb      	str	r3, [r7, #28]
}
 80133ea:	bf00      	nop
 80133ec:	e7fe      	b.n	80133ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80133ee:	2348      	movs	r3, #72	; 0x48
 80133f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	2b48      	cmp	r3, #72	; 0x48
 80133f6:	d00a      	beq.n	801340e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80133f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133fc:	f383 8811 	msr	BASEPRI, r3
 8013400:	f3bf 8f6f 	isb	sy
 8013404:	f3bf 8f4f 	dsb	sy
 8013408:	61bb      	str	r3, [r7, #24]
}
 801340a:	bf00      	nop
 801340c:	e7fe      	b.n	801340c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801340e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013416:	2b00      	cmp	r3, #0
 8013418:	d00d      	beq.n	8013436 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341c:	2201      	movs	r2, #1
 801341e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013428:	9300      	str	r3, [sp, #0]
 801342a:	4613      	mov	r3, r2
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	68b9      	ldr	r1, [r7, #8]
 8013430:	68f8      	ldr	r0, [r7, #12]
 8013432:	f000 f845 	bl	80134c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013438:	4618      	mov	r0, r3
 801343a:	3730      	adds	r7, #48	; 0x30
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013440:	b580      	push	{r7, lr}
 8013442:	b08a      	sub	sp, #40	; 0x28
 8013444:	af02      	add	r7, sp, #8
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	60b9      	str	r1, [r7, #8]
 801344a:	4613      	mov	r3, r2
 801344c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10a      	bne.n	801346a <xQueueGenericCreate+0x2a>
	__asm volatile
 8013454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013458:	f383 8811 	msr	BASEPRI, r3
 801345c:	f3bf 8f6f 	isb	sy
 8013460:	f3bf 8f4f 	dsb	sy
 8013464:	613b      	str	r3, [r7, #16]
}
 8013466:	bf00      	nop
 8013468:	e7fe      	b.n	8013468 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013470:	2300      	movs	r3, #0
 8013472:	61fb      	str	r3, [r7, #28]
 8013474:	e004      	b.n	8013480 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	68ba      	ldr	r2, [r7, #8]
 801347a:	fb02 f303 	mul.w	r3, r2, r3
 801347e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013480:	69fb      	ldr	r3, [r7, #28]
 8013482:	3348      	adds	r3, #72	; 0x48
 8013484:	4618      	mov	r0, r3
 8013486:	f001 ff97 	bl	80153b8 <pvPortMalloc>
 801348a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d011      	beq.n	80134b6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	3348      	adds	r3, #72	; 0x48
 801349a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801349c:	69bb      	ldr	r3, [r7, #24]
 801349e:	2200      	movs	r2, #0
 80134a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80134a4:	79fa      	ldrb	r2, [r7, #7]
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	4613      	mov	r3, r2
 80134ac:	697a      	ldr	r2, [r7, #20]
 80134ae:	68b9      	ldr	r1, [r7, #8]
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f000 f805 	bl	80134c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80134b6:	69bb      	ldr	r3, [r7, #24]
	}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3720      	adds	r7, #32
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	60b9      	str	r1, [r7, #8]
 80134ca:	607a      	str	r2, [r7, #4]
 80134cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d103      	bne.n	80134dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	69ba      	ldr	r2, [r7, #24]
 80134d8:	601a      	str	r2, [r3, #0]
 80134da:	e002      	b.n	80134e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	68fa      	ldr	r2, [r7, #12]
 80134e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	68ba      	ldr	r2, [r7, #8]
 80134ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80134ee:	2101      	movs	r1, #1
 80134f0:	69b8      	ldr	r0, [r7, #24]
 80134f2:	f7ff fec5 	bl	8013280 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80134f6:	bf00      	nop
 80134f8:	3710      	adds	r7, #16
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80134fe:	b580      	push	{r7, lr}
 8013500:	b082      	sub	sp, #8
 8013502:	af00      	add	r7, sp, #0
 8013504:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d00e      	beq.n	801352a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2200      	movs	r2, #0
 8013516:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2200      	movs	r2, #0
 801351c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801351e:	2300      	movs	r3, #0
 8013520:	2200      	movs	r2, #0
 8013522:	2100      	movs	r1, #0
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f000 f837 	bl	8013598 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801352a:	bf00      	nop
 801352c:	3708      	adds	r7, #8
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}

08013532 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013532:	b580      	push	{r7, lr}
 8013534:	b086      	sub	sp, #24
 8013536:	af00      	add	r7, sp, #0
 8013538:	4603      	mov	r3, r0
 801353a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801353c:	2301      	movs	r3, #1
 801353e:	617b      	str	r3, [r7, #20]
 8013540:	2300      	movs	r3, #0
 8013542:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013544:	79fb      	ldrb	r3, [r7, #7]
 8013546:	461a      	mov	r2, r3
 8013548:	6939      	ldr	r1, [r7, #16]
 801354a:	6978      	ldr	r0, [r7, #20]
 801354c:	f7ff ff78 	bl	8013440 <xQueueGenericCreate>
 8013550:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f7ff ffd3 	bl	80134fe <prvInitialiseMutex>

		return xNewQueue;
 8013558:	68fb      	ldr	r3, [r7, #12]
	}
 801355a:	4618      	mov	r0, r3
 801355c:	3718      	adds	r7, #24
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013562:	b580      	push	{r7, lr}
 8013564:	b088      	sub	sp, #32
 8013566:	af02      	add	r7, sp, #8
 8013568:	4603      	mov	r3, r0
 801356a:	6039      	str	r1, [r7, #0]
 801356c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801356e:	2301      	movs	r3, #1
 8013570:	617b      	str	r3, [r7, #20]
 8013572:	2300      	movs	r3, #0
 8013574:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013576:	79fb      	ldrb	r3, [r7, #7]
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	2200      	movs	r2, #0
 801357e:	6939      	ldr	r1, [r7, #16]
 8013580:	6978      	ldr	r0, [r7, #20]
 8013582:	f7ff fee5 	bl	8013350 <xQueueGenericCreateStatic>
 8013586:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013588:	68f8      	ldr	r0, [r7, #12]
 801358a:	f7ff ffb8 	bl	80134fe <prvInitialiseMutex>

		return xNewQueue;
 801358e:	68fb      	ldr	r3, [r7, #12]
	}
 8013590:	4618      	mov	r0, r3
 8013592:	3718      	adds	r7, #24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b08e      	sub	sp, #56	; 0x38
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	607a      	str	r2, [r7, #4]
 80135a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80135a6:	2300      	movs	r3, #0
 80135a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80135ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d10a      	bne.n	80135ca <xQueueGenericSend+0x32>
	__asm volatile
 80135b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b8:	f383 8811 	msr	BASEPRI, r3
 80135bc:	f3bf 8f6f 	isb	sy
 80135c0:	f3bf 8f4f 	dsb	sy
 80135c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80135c6:	bf00      	nop
 80135c8:	e7fe      	b.n	80135c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d103      	bne.n	80135d8 <xQueueGenericSend+0x40>
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d101      	bne.n	80135dc <xQueueGenericSend+0x44>
 80135d8:	2301      	movs	r3, #1
 80135da:	e000      	b.n	80135de <xQueueGenericSend+0x46>
 80135dc:	2300      	movs	r3, #0
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d10a      	bne.n	80135f8 <xQueueGenericSend+0x60>
	__asm volatile
 80135e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e6:	f383 8811 	msr	BASEPRI, r3
 80135ea:	f3bf 8f6f 	isb	sy
 80135ee:	f3bf 8f4f 	dsb	sy
 80135f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80135f4:	bf00      	nop
 80135f6:	e7fe      	b.n	80135f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	2b02      	cmp	r3, #2
 80135fc:	d103      	bne.n	8013606 <xQueueGenericSend+0x6e>
 80135fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013602:	2b01      	cmp	r3, #1
 8013604:	d101      	bne.n	801360a <xQueueGenericSend+0x72>
 8013606:	2301      	movs	r3, #1
 8013608:	e000      	b.n	801360c <xQueueGenericSend+0x74>
 801360a:	2300      	movs	r3, #0
 801360c:	2b00      	cmp	r3, #0
 801360e:	d10a      	bne.n	8013626 <xQueueGenericSend+0x8e>
	__asm volatile
 8013610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013614:	f383 8811 	msr	BASEPRI, r3
 8013618:	f3bf 8f6f 	isb	sy
 801361c:	f3bf 8f4f 	dsb	sy
 8013620:	623b      	str	r3, [r7, #32]
}
 8013622:	bf00      	nop
 8013624:	e7fe      	b.n	8013624 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013626:	f001 f983 	bl	8014930 <xTaskGetSchedulerState>
 801362a:	4603      	mov	r3, r0
 801362c:	2b00      	cmp	r3, #0
 801362e:	d102      	bne.n	8013636 <xQueueGenericSend+0x9e>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <xQueueGenericSend+0xa2>
 8013636:	2301      	movs	r3, #1
 8013638:	e000      	b.n	801363c <xQueueGenericSend+0xa4>
 801363a:	2300      	movs	r3, #0
 801363c:	2b00      	cmp	r3, #0
 801363e:	d10a      	bne.n	8013656 <xQueueGenericSend+0xbe>
	__asm volatile
 8013640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013644:	f383 8811 	msr	BASEPRI, r3
 8013648:	f3bf 8f6f 	isb	sy
 801364c:	f3bf 8f4f 	dsb	sy
 8013650:	61fb      	str	r3, [r7, #28]
}
 8013652:	bf00      	nop
 8013654:	e7fe      	b.n	8013654 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013656:	f001 fd8d 	bl	8015174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013662:	429a      	cmp	r2, r3
 8013664:	d302      	bcc.n	801366c <xQueueGenericSend+0xd4>
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	2b02      	cmp	r3, #2
 801366a:	d129      	bne.n	80136c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801366c:	683a      	ldr	r2, [r7, #0]
 801366e:	68b9      	ldr	r1, [r7, #8]
 8013670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013672:	f000 fa87 	bl	8013b84 <prvCopyDataToQueue>
 8013676:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801367c:	2b00      	cmp	r3, #0
 801367e:	d010      	beq.n	80136a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013682:	3324      	adds	r3, #36	; 0x24
 8013684:	4618      	mov	r0, r3
 8013686:	f000 ff97 	bl	80145b8 <xTaskRemoveFromEventList>
 801368a:	4603      	mov	r3, r0
 801368c:	2b00      	cmp	r3, #0
 801368e:	d013      	beq.n	80136b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013690:	4b3f      	ldr	r3, [pc, #252]	; (8013790 <xQueueGenericSend+0x1f8>)
 8013692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013696:	601a      	str	r2, [r3, #0]
 8013698:	f3bf 8f4f 	dsb	sy
 801369c:	f3bf 8f6f 	isb	sy
 80136a0:	e00a      	b.n	80136b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80136a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d007      	beq.n	80136b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80136a8:	4b39      	ldr	r3, [pc, #228]	; (8013790 <xQueueGenericSend+0x1f8>)
 80136aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136ae:	601a      	str	r2, [r3, #0]
 80136b0:	f3bf 8f4f 	dsb	sy
 80136b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80136b8:	f001 fd8c 	bl	80151d4 <vPortExitCritical>
				return pdPASS;
 80136bc:	2301      	movs	r3, #1
 80136be:	e063      	b.n	8013788 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d103      	bne.n	80136ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80136c6:	f001 fd85 	bl	80151d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80136ca:	2300      	movs	r3, #0
 80136cc:	e05c      	b.n	8013788 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d106      	bne.n	80136e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136d4:	f107 0314 	add.w	r3, r7, #20
 80136d8:	4618      	mov	r0, r3
 80136da:	f000 ffcf 	bl	801467c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136de:	2301      	movs	r3, #1
 80136e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136e2:	f001 fd77 	bl	80151d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136e6:	f000 fd85 	bl	80141f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136ea:	f001 fd43 	bl	8015174 <vPortEnterCritical>
 80136ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136f4:	b25b      	sxtb	r3, r3
 80136f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136fa:	d103      	bne.n	8013704 <xQueueGenericSend+0x16c>
 80136fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136fe:	2200      	movs	r2, #0
 8013700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801370a:	b25b      	sxtb	r3, r3
 801370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013710:	d103      	bne.n	801371a <xQueueGenericSend+0x182>
 8013712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013714:	2200      	movs	r2, #0
 8013716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801371a:	f001 fd5b 	bl	80151d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801371e:	1d3a      	adds	r2, r7, #4
 8013720:	f107 0314 	add.w	r3, r7, #20
 8013724:	4611      	mov	r1, r2
 8013726:	4618      	mov	r0, r3
 8013728:	f000 ffbe 	bl	80146a8 <xTaskCheckForTimeOut>
 801372c:	4603      	mov	r3, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d124      	bne.n	801377c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013734:	f000 fb1e 	bl	8013d74 <prvIsQueueFull>
 8013738:	4603      	mov	r3, r0
 801373a:	2b00      	cmp	r3, #0
 801373c:	d018      	beq.n	8013770 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013740:	3310      	adds	r3, #16
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	4611      	mov	r1, r2
 8013746:	4618      	mov	r0, r3
 8013748:	f000 ff12 	bl	8014570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801374c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801374e:	f000 faa9 	bl	8013ca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013752:	f000 fd5d 	bl	8014210 <xTaskResumeAll>
 8013756:	4603      	mov	r3, r0
 8013758:	2b00      	cmp	r3, #0
 801375a:	f47f af7c 	bne.w	8013656 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801375e:	4b0c      	ldr	r3, [pc, #48]	; (8013790 <xQueueGenericSend+0x1f8>)
 8013760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013764:	601a      	str	r2, [r3, #0]
 8013766:	f3bf 8f4f 	dsb	sy
 801376a:	f3bf 8f6f 	isb	sy
 801376e:	e772      	b.n	8013656 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013772:	f000 fa97 	bl	8013ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013776:	f000 fd4b 	bl	8014210 <xTaskResumeAll>
 801377a:	e76c      	b.n	8013656 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801377c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801377e:	f000 fa91 	bl	8013ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013782:	f000 fd45 	bl	8014210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013788:	4618      	mov	r0, r3
 801378a:	3738      	adds	r7, #56	; 0x38
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	e000ed04 	.word	0xe000ed04

08013794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b08e      	sub	sp, #56	; 0x38
 8013798:	af00      	add	r7, sp, #0
 801379a:	60f8      	str	r0, [r7, #12]
 801379c:	60b9      	str	r1, [r7, #8]
 801379e:	607a      	str	r2, [r7, #4]
 80137a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80137a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d10a      	bne.n	80137c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80137ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b0:	f383 8811 	msr	BASEPRI, r3
 80137b4:	f3bf 8f6f 	isb	sy
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80137be:	bf00      	nop
 80137c0:	e7fe      	b.n	80137c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d103      	bne.n	80137d0 <xQueueGenericSendFromISR+0x3c>
 80137c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d101      	bne.n	80137d4 <xQueueGenericSendFromISR+0x40>
 80137d0:	2301      	movs	r3, #1
 80137d2:	e000      	b.n	80137d6 <xQueueGenericSendFromISR+0x42>
 80137d4:	2300      	movs	r3, #0
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d10a      	bne.n	80137f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80137da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137de:	f383 8811 	msr	BASEPRI, r3
 80137e2:	f3bf 8f6f 	isb	sy
 80137e6:	f3bf 8f4f 	dsb	sy
 80137ea:	623b      	str	r3, [r7, #32]
}
 80137ec:	bf00      	nop
 80137ee:	e7fe      	b.n	80137ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b02      	cmp	r3, #2
 80137f4:	d103      	bne.n	80137fe <xQueueGenericSendFromISR+0x6a>
 80137f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d101      	bne.n	8013802 <xQueueGenericSendFromISR+0x6e>
 80137fe:	2301      	movs	r3, #1
 8013800:	e000      	b.n	8013804 <xQueueGenericSendFromISR+0x70>
 8013802:	2300      	movs	r3, #0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d10a      	bne.n	801381e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801380c:	f383 8811 	msr	BASEPRI, r3
 8013810:	f3bf 8f6f 	isb	sy
 8013814:	f3bf 8f4f 	dsb	sy
 8013818:	61fb      	str	r3, [r7, #28]
}
 801381a:	bf00      	nop
 801381c:	e7fe      	b.n	801381c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801381e:	f001 fd8b 	bl	8015338 <vPortValidateInterruptPriority>
	__asm volatile
 8013822:	f3ef 8211 	mrs	r2, BASEPRI
 8013826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382a:	f383 8811 	msr	BASEPRI, r3
 801382e:	f3bf 8f6f 	isb	sy
 8013832:	f3bf 8f4f 	dsb	sy
 8013836:	61ba      	str	r2, [r7, #24]
 8013838:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801383a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801383c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013846:	429a      	cmp	r2, r3
 8013848:	d302      	bcc.n	8013850 <xQueueGenericSendFromISR+0xbc>
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	2b02      	cmp	r3, #2
 801384e:	d12c      	bne.n	80138aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801385a:	683a      	ldr	r2, [r7, #0]
 801385c:	68b9      	ldr	r1, [r7, #8]
 801385e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013860:	f000 f990 	bl	8013b84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013864:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801386c:	d112      	bne.n	8013894 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013872:	2b00      	cmp	r3, #0
 8013874:	d016      	beq.n	80138a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	3324      	adds	r3, #36	; 0x24
 801387a:	4618      	mov	r0, r3
 801387c:	f000 fe9c 	bl	80145b8 <xTaskRemoveFromEventList>
 8013880:	4603      	mov	r3, r0
 8013882:	2b00      	cmp	r3, #0
 8013884:	d00e      	beq.n	80138a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d00b      	beq.n	80138a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2201      	movs	r2, #1
 8013890:	601a      	str	r2, [r3, #0]
 8013892:	e007      	b.n	80138a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013894:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013898:	3301      	adds	r3, #1
 801389a:	b2db      	uxtb	r3, r3
 801389c:	b25a      	sxtb	r2, r3
 801389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80138a4:	2301      	movs	r3, #1
 80138a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80138a8:	e001      	b.n	80138ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80138aa:	2300      	movs	r3, #0
 80138ac:	637b      	str	r3, [r7, #52]	; 0x34
 80138ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	f383 8811 	msr	BASEPRI, r3
}
 80138b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80138ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3738      	adds	r7, #56	; 0x38
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}

080138c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b08c      	sub	sp, #48	; 0x30
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80138d0:	2300      	movs	r3, #0
 80138d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80138d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d10a      	bne.n	80138f4 <xQueueReceive+0x30>
	__asm volatile
 80138de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e2:	f383 8811 	msr	BASEPRI, r3
 80138e6:	f3bf 8f6f 	isb	sy
 80138ea:	f3bf 8f4f 	dsb	sy
 80138ee:	623b      	str	r3, [r7, #32]
}
 80138f0:	bf00      	nop
 80138f2:	e7fe      	b.n	80138f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d103      	bne.n	8013902 <xQueueReceive+0x3e>
 80138fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d101      	bne.n	8013906 <xQueueReceive+0x42>
 8013902:	2301      	movs	r3, #1
 8013904:	e000      	b.n	8013908 <xQueueReceive+0x44>
 8013906:	2300      	movs	r3, #0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d10a      	bne.n	8013922 <xQueueReceive+0x5e>
	__asm volatile
 801390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013910:	f383 8811 	msr	BASEPRI, r3
 8013914:	f3bf 8f6f 	isb	sy
 8013918:	f3bf 8f4f 	dsb	sy
 801391c:	61fb      	str	r3, [r7, #28]
}
 801391e:	bf00      	nop
 8013920:	e7fe      	b.n	8013920 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013922:	f001 f805 	bl	8014930 <xTaskGetSchedulerState>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d102      	bne.n	8013932 <xQueueReceive+0x6e>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d101      	bne.n	8013936 <xQueueReceive+0x72>
 8013932:	2301      	movs	r3, #1
 8013934:	e000      	b.n	8013938 <xQueueReceive+0x74>
 8013936:	2300      	movs	r3, #0
 8013938:	2b00      	cmp	r3, #0
 801393a:	d10a      	bne.n	8013952 <xQueueReceive+0x8e>
	__asm volatile
 801393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013940:	f383 8811 	msr	BASEPRI, r3
 8013944:	f3bf 8f6f 	isb	sy
 8013948:	f3bf 8f4f 	dsb	sy
 801394c:	61bb      	str	r3, [r7, #24]
}
 801394e:	bf00      	nop
 8013950:	e7fe      	b.n	8013950 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013952:	f001 fc0f 	bl	8015174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801395a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801395e:	2b00      	cmp	r3, #0
 8013960:	d01f      	beq.n	80139a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013962:	68b9      	ldr	r1, [r7, #8]
 8013964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013966:	f000 f977 	bl	8013c58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396c:	1e5a      	subs	r2, r3, #1
 801396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013970:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013974:	691b      	ldr	r3, [r3, #16]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d00f      	beq.n	801399a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397c:	3310      	adds	r3, #16
 801397e:	4618      	mov	r0, r3
 8013980:	f000 fe1a 	bl	80145b8 <xTaskRemoveFromEventList>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d007      	beq.n	801399a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801398a:	4b3d      	ldr	r3, [pc, #244]	; (8013a80 <xQueueReceive+0x1bc>)
 801398c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013990:	601a      	str	r2, [r3, #0]
 8013992:	f3bf 8f4f 	dsb	sy
 8013996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801399a:	f001 fc1b 	bl	80151d4 <vPortExitCritical>
				return pdPASS;
 801399e:	2301      	movs	r3, #1
 80139a0:	e069      	b.n	8013a76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d103      	bne.n	80139b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80139a8:	f001 fc14 	bl	80151d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80139ac:	2300      	movs	r3, #0
 80139ae:	e062      	b.n	8013a76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d106      	bne.n	80139c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139b6:	f107 0310 	add.w	r3, r7, #16
 80139ba:	4618      	mov	r0, r3
 80139bc:	f000 fe5e 	bl	801467c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139c0:	2301      	movs	r3, #1
 80139c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139c4:	f001 fc06 	bl	80151d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139c8:	f000 fc14 	bl	80141f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139cc:	f001 fbd2 	bl	8015174 <vPortEnterCritical>
 80139d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139d6:	b25b      	sxtb	r3, r3
 80139d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139dc:	d103      	bne.n	80139e6 <xQueueReceive+0x122>
 80139de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e0:	2200      	movs	r2, #0
 80139e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80139e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80139ec:	b25b      	sxtb	r3, r3
 80139ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139f2:	d103      	bne.n	80139fc <xQueueReceive+0x138>
 80139f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f6:	2200      	movs	r2, #0
 80139f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80139fc:	f001 fbea 	bl	80151d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a00:	1d3a      	adds	r2, r7, #4
 8013a02:	f107 0310 	add.w	r3, r7, #16
 8013a06:	4611      	mov	r1, r2
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f000 fe4d 	bl	80146a8 <xTaskCheckForTimeOut>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d123      	bne.n	8013a5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a16:	f000 f997 	bl	8013d48 <prvIsQueueEmpty>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d017      	beq.n	8013a50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a22:	3324      	adds	r3, #36	; 0x24
 8013a24:	687a      	ldr	r2, [r7, #4]
 8013a26:	4611      	mov	r1, r2
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f000 fda1 	bl	8014570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a30:	f000 f938 	bl	8013ca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013a34:	f000 fbec 	bl	8014210 <xTaskResumeAll>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d189      	bne.n	8013952 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013a3e:	4b10      	ldr	r3, [pc, #64]	; (8013a80 <xQueueReceive+0x1bc>)
 8013a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a44:	601a      	str	r2, [r3, #0]
 8013a46:	f3bf 8f4f 	dsb	sy
 8013a4a:	f3bf 8f6f 	isb	sy
 8013a4e:	e780      	b.n	8013952 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a52:	f000 f927 	bl	8013ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a56:	f000 fbdb 	bl	8014210 <xTaskResumeAll>
 8013a5a:	e77a      	b.n	8013952 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a5e:	f000 f921 	bl	8013ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a62:	f000 fbd5 	bl	8014210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a68:	f000 f96e 	bl	8013d48 <prvIsQueueEmpty>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	f43f af6f 	beq.w	8013952 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013a74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3730      	adds	r7, #48	; 0x30
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	e000ed04 	.word	0xe000ed04

08013a84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b08e      	sub	sp, #56	; 0x38
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	60b9      	str	r1, [r7, #8]
 8013a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d10a      	bne.n	8013ab0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9e:	f383 8811 	msr	BASEPRI, r3
 8013aa2:	f3bf 8f6f 	isb	sy
 8013aa6:	f3bf 8f4f 	dsb	sy
 8013aaa:	623b      	str	r3, [r7, #32]
}
 8013aac:	bf00      	nop
 8013aae:	e7fe      	b.n	8013aae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d103      	bne.n	8013abe <xQueueReceiveFromISR+0x3a>
 8013ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d101      	bne.n	8013ac2 <xQueueReceiveFromISR+0x3e>
 8013abe:	2301      	movs	r3, #1
 8013ac0:	e000      	b.n	8013ac4 <xQueueReceiveFromISR+0x40>
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d10a      	bne.n	8013ade <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013acc:	f383 8811 	msr	BASEPRI, r3
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	61fb      	str	r3, [r7, #28]
}
 8013ada:	bf00      	nop
 8013adc:	e7fe      	b.n	8013adc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013ade:	f001 fc2b 	bl	8015338 <vPortValidateInterruptPriority>
	__asm volatile
 8013ae2:	f3ef 8211 	mrs	r2, BASEPRI
 8013ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aea:	f383 8811 	msr	BASEPRI, r3
 8013aee:	f3bf 8f6f 	isb	sy
 8013af2:	f3bf 8f4f 	dsb	sy
 8013af6:	61ba      	str	r2, [r7, #24]
 8013af8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013afa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d02f      	beq.n	8013b6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013b14:	68b9      	ldr	r1, [r7, #8]
 8013b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b18:	f000 f89e 	bl	8013c58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1e:	1e5a      	subs	r2, r3, #1
 8013b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b2c:	d112      	bne.n	8013b54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b30:	691b      	ldr	r3, [r3, #16]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d016      	beq.n	8013b64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b38:	3310      	adds	r3, #16
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f000 fd3c 	bl	80145b8 <xTaskRemoveFromEventList>
 8013b40:	4603      	mov	r3, r0
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d00e      	beq.n	8013b64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00b      	beq.n	8013b64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2201      	movs	r2, #1
 8013b50:	601a      	str	r2, [r3, #0]
 8013b52:	e007      	b.n	8013b64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b58:	3301      	adds	r3, #1
 8013b5a:	b2db      	uxtb	r3, r3
 8013b5c:	b25a      	sxtb	r2, r3
 8013b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013b64:	2301      	movs	r3, #1
 8013b66:	637b      	str	r3, [r7, #52]	; 0x34
 8013b68:	e001      	b.n	8013b6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8013b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	f383 8811 	msr	BASEPRI, r3
}
 8013b78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3738      	adds	r7, #56	; 0x38
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b086      	sub	sp, #24
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013b90:	2300      	movs	r3, #0
 8013b92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d10d      	bne.n	8013bbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d14d      	bne.n	8013c46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f000 fedc 	bl	801496c <xTaskPriorityDisinherit>
 8013bb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	609a      	str	r2, [r3, #8]
 8013bbc:	e043      	b.n	8013c46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d119      	bne.n	8013bf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	6858      	ldr	r0, [r3, #4]
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bcc:	461a      	mov	r2, r3
 8013bce:	68b9      	ldr	r1, [r7, #8]
 8013bd0:	f002 fb56 	bl	8016280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	685a      	ldr	r2, [r3, #4]
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bdc:	441a      	add	r2, r3
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	685a      	ldr	r2, [r3, #4]
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	689b      	ldr	r3, [r3, #8]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d32b      	bcc.n	8013c46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	605a      	str	r2, [r3, #4]
 8013bf6:	e026      	b.n	8013c46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	68d8      	ldr	r0, [r3, #12]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c00:	461a      	mov	r2, r3
 8013c02:	68b9      	ldr	r1, [r7, #8]
 8013c04:	f002 fb3c 	bl	8016280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	68da      	ldr	r2, [r3, #12]
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c10:	425b      	negs	r3, r3
 8013c12:	441a      	add	r2, r3
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	68da      	ldr	r2, [r3, #12]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d207      	bcs.n	8013c34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	689a      	ldr	r2, [r3, #8]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c2c:	425b      	negs	r3, r3
 8013c2e:	441a      	add	r2, r3
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2b02      	cmp	r3, #2
 8013c38:	d105      	bne.n	8013c46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d002      	beq.n	8013c46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	3b01      	subs	r3, #1
 8013c44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	1c5a      	adds	r2, r3, #1
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013c4e:	697b      	ldr	r3, [r7, #20]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3718      	adds	r7, #24
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d018      	beq.n	8013c9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	68da      	ldr	r2, [r3, #12]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c72:	441a      	add	r2, r3
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	68da      	ldr	r2, [r3, #12]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	689b      	ldr	r3, [r3, #8]
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d303      	bcc.n	8013c8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681a      	ldr	r2, [r3, #0]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	68d9      	ldr	r1, [r3, #12]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c94:	461a      	mov	r2, r3
 8013c96:	6838      	ldr	r0, [r7, #0]
 8013c98:	f002 faf2 	bl	8016280 <memcpy>
	}
}
 8013c9c:	bf00      	nop
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b084      	sub	sp, #16
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013cac:	f001 fa62 	bl	8015174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013cb8:	e011      	b.n	8013cde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d012      	beq.n	8013ce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	3324      	adds	r3, #36	; 0x24
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f000 fc76 	bl	80145b8 <xTaskRemoveFromEventList>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d001      	beq.n	8013cd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013cd2:	f000 fd4b 	bl	801476c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013cd6:	7bfb      	ldrb	r3, [r7, #15]
 8013cd8:	3b01      	subs	r3, #1
 8013cda:	b2db      	uxtb	r3, r3
 8013cdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	dce9      	bgt.n	8013cba <prvUnlockQueue+0x16>
 8013ce6:	e000      	b.n	8013cea <prvUnlockQueue+0x46>
					break;
 8013ce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	22ff      	movs	r2, #255	; 0xff
 8013cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013cf2:	f001 fa6f 	bl	80151d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013cf6:	f001 fa3d 	bl	8015174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d02:	e011      	b.n	8013d28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	691b      	ldr	r3, [r3, #16]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d012      	beq.n	8013d32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	3310      	adds	r3, #16
 8013d10:	4618      	mov	r0, r3
 8013d12:	f000 fc51 	bl	80145b8 <xTaskRemoveFromEventList>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d001      	beq.n	8013d20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013d1c:	f000 fd26 	bl	801476c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013d20:	7bbb      	ldrb	r3, [r7, #14]
 8013d22:	3b01      	subs	r3, #1
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	dce9      	bgt.n	8013d04 <prvUnlockQueue+0x60>
 8013d30:	e000      	b.n	8013d34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013d32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	22ff      	movs	r2, #255	; 0xff
 8013d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013d3c:	f001 fa4a 	bl	80151d4 <vPortExitCritical>
}
 8013d40:	bf00      	nop
 8013d42:	3710      	adds	r7, #16
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}

08013d48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b084      	sub	sp, #16
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d50:	f001 fa10 	bl	8015174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d102      	bne.n	8013d62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013d5c:	2301      	movs	r3, #1
 8013d5e:	60fb      	str	r3, [r7, #12]
 8013d60:	e001      	b.n	8013d66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013d62:	2300      	movs	r3, #0
 8013d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d66:	f001 fa35 	bl	80151d4 <vPortExitCritical>

	return xReturn;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3710      	adds	r7, #16
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b084      	sub	sp, #16
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d7c:	f001 f9fa 	bl	8015174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d102      	bne.n	8013d92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	60fb      	str	r3, [r7, #12]
 8013d90:	e001      	b.n	8013d96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013d92:	2300      	movs	r3, #0
 8013d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d96:	f001 fa1d 	bl	80151d4 <vPortExitCritical>

	return xReturn;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3710      	adds	r7, #16
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b08e      	sub	sp, #56	; 0x38
 8013da8:	af04      	add	r7, sp, #16
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	607a      	str	r2, [r7, #4]
 8013db0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d10a      	bne.n	8013dce <xTaskCreateStatic+0x2a>
	__asm volatile
 8013db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dbc:	f383 8811 	msr	BASEPRI, r3
 8013dc0:	f3bf 8f6f 	isb	sy
 8013dc4:	f3bf 8f4f 	dsb	sy
 8013dc8:	623b      	str	r3, [r7, #32]
}
 8013dca:	bf00      	nop
 8013dcc:	e7fe      	b.n	8013dcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d10a      	bne.n	8013dea <xTaskCreateStatic+0x46>
	__asm volatile
 8013dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd8:	f383 8811 	msr	BASEPRI, r3
 8013ddc:	f3bf 8f6f 	isb	sy
 8013de0:	f3bf 8f4f 	dsb	sy
 8013de4:	61fb      	str	r3, [r7, #28]
}
 8013de6:	bf00      	nop
 8013de8:	e7fe      	b.n	8013de8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013dea:	2354      	movs	r3, #84	; 0x54
 8013dec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	2b54      	cmp	r3, #84	; 0x54
 8013df2:	d00a      	beq.n	8013e0a <xTaskCreateStatic+0x66>
	__asm volatile
 8013df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df8:	f383 8811 	msr	BASEPRI, r3
 8013dfc:	f3bf 8f6f 	isb	sy
 8013e00:	f3bf 8f4f 	dsb	sy
 8013e04:	61bb      	str	r3, [r7, #24]
}
 8013e06:	bf00      	nop
 8013e08:	e7fe      	b.n	8013e08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013e0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d01e      	beq.n	8013e50 <xTaskCreateStatic+0xac>
 8013e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d01b      	beq.n	8013e50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e24:	2202      	movs	r2, #2
 8013e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	9303      	str	r3, [sp, #12]
 8013e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e30:	9302      	str	r3, [sp, #8]
 8013e32:	f107 0314 	add.w	r3, r7, #20
 8013e36:	9301      	str	r3, [sp, #4]
 8013e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3a:	9300      	str	r3, [sp, #0]
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	68b9      	ldr	r1, [r7, #8]
 8013e42:	68f8      	ldr	r0, [r7, #12]
 8013e44:	f000 f850 	bl	8013ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e4a:	f000 f8d5 	bl	8013ff8 <prvAddNewTaskToReadyList>
 8013e4e:	e001      	b.n	8013e54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013e50:	2300      	movs	r3, #0
 8013e52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013e54:	697b      	ldr	r3, [r7, #20]
	}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3728      	adds	r7, #40	; 0x28
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b08c      	sub	sp, #48	; 0x30
 8013e62:	af04      	add	r7, sp, #16
 8013e64:	60f8      	str	r0, [r7, #12]
 8013e66:	60b9      	str	r1, [r7, #8]
 8013e68:	603b      	str	r3, [r7, #0]
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013e6e:	88fb      	ldrh	r3, [r7, #6]
 8013e70:	009b      	lsls	r3, r3, #2
 8013e72:	4618      	mov	r0, r3
 8013e74:	f001 faa0 	bl	80153b8 <pvPortMalloc>
 8013e78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d00e      	beq.n	8013e9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013e80:	2054      	movs	r0, #84	; 0x54
 8013e82:	f001 fa99 	bl	80153b8 <pvPortMalloc>
 8013e86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d003      	beq.n	8013e96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013e8e:	69fb      	ldr	r3, [r7, #28]
 8013e90:	697a      	ldr	r2, [r7, #20]
 8013e92:	631a      	str	r2, [r3, #48]	; 0x30
 8013e94:	e005      	b.n	8013ea2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013e96:	6978      	ldr	r0, [r7, #20]
 8013e98:	f001 fb52 	bl	8015540 <vPortFree>
 8013e9c:	e001      	b.n	8013ea2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d017      	beq.n	8013ed8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013ea8:	69fb      	ldr	r3, [r7, #28]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013eb0:	88fa      	ldrh	r2, [r7, #6]
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	9303      	str	r3, [sp, #12]
 8013eb6:	69fb      	ldr	r3, [r7, #28]
 8013eb8:	9302      	str	r3, [sp, #8]
 8013eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ebc:	9301      	str	r3, [sp, #4]
 8013ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	68b9      	ldr	r1, [r7, #8]
 8013ec6:	68f8      	ldr	r0, [r7, #12]
 8013ec8:	f000 f80e 	bl	8013ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013ecc:	69f8      	ldr	r0, [r7, #28]
 8013ece:	f000 f893 	bl	8013ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	61bb      	str	r3, [r7, #24]
 8013ed6:	e002      	b.n	8013ede <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8013edc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013ede:	69bb      	ldr	r3, [r7, #24]
	}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3720      	adds	r7, #32
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}

08013ee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b088      	sub	sp, #32
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
 8013ef4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013f00:	3b01      	subs	r3, #1
 8013f02:	009b      	lsls	r3, r3, #2
 8013f04:	4413      	add	r3, r2
 8013f06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	f023 0307 	bic.w	r3, r3, #7
 8013f0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013f10:	69bb      	ldr	r3, [r7, #24]
 8013f12:	f003 0307 	and.w	r3, r3, #7
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d00a      	beq.n	8013f30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1e:	f383 8811 	msr	BASEPRI, r3
 8013f22:	f3bf 8f6f 	isb	sy
 8013f26:	f3bf 8f4f 	dsb	sy
 8013f2a:	617b      	str	r3, [r7, #20]
}
 8013f2c:	bf00      	nop
 8013f2e:	e7fe      	b.n	8013f2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d01f      	beq.n	8013f76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f36:	2300      	movs	r3, #0
 8013f38:	61fb      	str	r3, [r7, #28]
 8013f3a:	e012      	b.n	8013f62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	4413      	add	r3, r2
 8013f42:	7819      	ldrb	r1, [r3, #0]
 8013f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f46:	69fb      	ldr	r3, [r7, #28]
 8013f48:	4413      	add	r3, r2
 8013f4a:	3334      	adds	r3, #52	; 0x34
 8013f4c:	460a      	mov	r2, r1
 8013f4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013f50:	68ba      	ldr	r2, [r7, #8]
 8013f52:	69fb      	ldr	r3, [r7, #28]
 8013f54:	4413      	add	r3, r2
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d006      	beq.n	8013f6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f5c:	69fb      	ldr	r3, [r7, #28]
 8013f5e:	3301      	adds	r3, #1
 8013f60:	61fb      	str	r3, [r7, #28]
 8013f62:	69fb      	ldr	r3, [r7, #28]
 8013f64:	2b0f      	cmp	r3, #15
 8013f66:	d9e9      	bls.n	8013f3c <prvInitialiseNewTask+0x54>
 8013f68:	e000      	b.n	8013f6c <prvInitialiseNewTask+0x84>
			{
				break;
 8013f6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f74:	e003      	b.n	8013f7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f78:	2200      	movs	r2, #0
 8013f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f80:	2b06      	cmp	r3, #6
 8013f82:	d901      	bls.n	8013f88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013f84:	2306      	movs	r3, #6
 8013f86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f96:	2200      	movs	r2, #0
 8013f98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f9c:	3304      	adds	r3, #4
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7ff f8d9 	bl	8013156 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa6:	3318      	adds	r3, #24
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7ff f8d4 	bl	8013156 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb6:	f1c3 0207 	rsb	r2, r3, #7
 8013fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fcc:	2200      	movs	r2, #0
 8013fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013fd2:	683a      	ldr	r2, [r7, #0]
 8013fd4:	68f9      	ldr	r1, [r7, #12]
 8013fd6:	69b8      	ldr	r0, [r7, #24]
 8013fd8:	f000 ff9e 	bl	8014f18 <pxPortInitialiseStack>
 8013fdc:	4602      	mov	r2, r0
 8013fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d002      	beq.n	8013fee <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013fee:	bf00      	nop
 8013ff0:	3720      	adds	r7, #32
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
	...

08013ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014000:	f001 f8b8 	bl	8015174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014004:	4b2a      	ldr	r3, [pc, #168]	; (80140b0 <prvAddNewTaskToReadyList+0xb8>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	3301      	adds	r3, #1
 801400a:	4a29      	ldr	r2, [pc, #164]	; (80140b0 <prvAddNewTaskToReadyList+0xb8>)
 801400c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801400e:	4b29      	ldr	r3, [pc, #164]	; (80140b4 <prvAddNewTaskToReadyList+0xbc>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d109      	bne.n	801402a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014016:	4a27      	ldr	r2, [pc, #156]	; (80140b4 <prvAddNewTaskToReadyList+0xbc>)
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801401c:	4b24      	ldr	r3, [pc, #144]	; (80140b0 <prvAddNewTaskToReadyList+0xb8>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d110      	bne.n	8014046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014024:	f000 fbc6 	bl	80147b4 <prvInitialiseTaskLists>
 8014028:	e00d      	b.n	8014046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801402a:	4b23      	ldr	r3, [pc, #140]	; (80140b8 <prvAddNewTaskToReadyList+0xc0>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d109      	bne.n	8014046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014032:	4b20      	ldr	r3, [pc, #128]	; (80140b4 <prvAddNewTaskToReadyList+0xbc>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801403c:	429a      	cmp	r2, r3
 801403e:	d802      	bhi.n	8014046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014040:	4a1c      	ldr	r2, [pc, #112]	; (80140b4 <prvAddNewTaskToReadyList+0xbc>)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014046:	4b1d      	ldr	r3, [pc, #116]	; (80140bc <prvAddNewTaskToReadyList+0xc4>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	3301      	adds	r3, #1
 801404c:	4a1b      	ldr	r2, [pc, #108]	; (80140bc <prvAddNewTaskToReadyList+0xc4>)
 801404e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014054:	2201      	movs	r2, #1
 8014056:	409a      	lsls	r2, r3
 8014058:	4b19      	ldr	r3, [pc, #100]	; (80140c0 <prvAddNewTaskToReadyList+0xc8>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	4313      	orrs	r3, r2
 801405e:	4a18      	ldr	r2, [pc, #96]	; (80140c0 <prvAddNewTaskToReadyList+0xc8>)
 8014060:	6013      	str	r3, [r2, #0]
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014066:	4613      	mov	r3, r2
 8014068:	009b      	lsls	r3, r3, #2
 801406a:	4413      	add	r3, r2
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	4a15      	ldr	r2, [pc, #84]	; (80140c4 <prvAddNewTaskToReadyList+0xcc>)
 8014070:	441a      	add	r2, r3
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	3304      	adds	r3, #4
 8014076:	4619      	mov	r1, r3
 8014078:	4610      	mov	r0, r2
 801407a:	f7ff f879 	bl	8013170 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801407e:	f001 f8a9 	bl	80151d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014082:	4b0d      	ldr	r3, [pc, #52]	; (80140b8 <prvAddNewTaskToReadyList+0xc0>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d00e      	beq.n	80140a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801408a:	4b0a      	ldr	r3, [pc, #40]	; (80140b4 <prvAddNewTaskToReadyList+0xbc>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014094:	429a      	cmp	r2, r3
 8014096:	d207      	bcs.n	80140a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014098:	4b0b      	ldr	r3, [pc, #44]	; (80140c8 <prvAddNewTaskToReadyList+0xd0>)
 801409a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801409e:	601a      	str	r2, [r3, #0]
 80140a0:	f3bf 8f4f 	dsb	sy
 80140a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140a8:	bf00      	nop
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	20004970 	.word	0x20004970
 80140b4:	20004870 	.word	0x20004870
 80140b8:	2000497c 	.word	0x2000497c
 80140bc:	2000498c 	.word	0x2000498c
 80140c0:	20004978 	.word	0x20004978
 80140c4:	20004874 	.word	0x20004874
 80140c8:	e000ed04 	.word	0xe000ed04

080140cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80140d4:	2300      	movs	r3, #0
 80140d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d017      	beq.n	801410e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80140de:	4b13      	ldr	r3, [pc, #76]	; (801412c <vTaskDelay+0x60>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d00a      	beq.n	80140fc <vTaskDelay+0x30>
	__asm volatile
 80140e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ea:	f383 8811 	msr	BASEPRI, r3
 80140ee:	f3bf 8f6f 	isb	sy
 80140f2:	f3bf 8f4f 	dsb	sy
 80140f6:	60bb      	str	r3, [r7, #8]
}
 80140f8:	bf00      	nop
 80140fa:	e7fe      	b.n	80140fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80140fc:	f000 f87a 	bl	80141f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014100:	2100      	movs	r1, #0
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 fea2 	bl	8014e4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014108:	f000 f882 	bl	8014210 <xTaskResumeAll>
 801410c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d107      	bne.n	8014124 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014114:	4b06      	ldr	r3, [pc, #24]	; (8014130 <vTaskDelay+0x64>)
 8014116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801411a:	601a      	str	r2, [r3, #0]
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014124:	bf00      	nop
 8014126:	3710      	adds	r7, #16
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	20004998 	.word	0x20004998
 8014130:	e000ed04 	.word	0xe000ed04

08014134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b08a      	sub	sp, #40	; 0x28
 8014138:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801413a:	2300      	movs	r3, #0
 801413c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801413e:	2300      	movs	r3, #0
 8014140:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014142:	463a      	mov	r2, r7
 8014144:	1d39      	adds	r1, r7, #4
 8014146:	f107 0308 	add.w	r3, r7, #8
 801414a:	4618      	mov	r0, r3
 801414c:	f7ee faf2 	bl	8002734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014150:	6839      	ldr	r1, [r7, #0]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	68ba      	ldr	r2, [r7, #8]
 8014156:	9202      	str	r2, [sp, #8]
 8014158:	9301      	str	r3, [sp, #4]
 801415a:	2300      	movs	r3, #0
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	2300      	movs	r3, #0
 8014160:	460a      	mov	r2, r1
 8014162:	491e      	ldr	r1, [pc, #120]	; (80141dc <vTaskStartScheduler+0xa8>)
 8014164:	481e      	ldr	r0, [pc, #120]	; (80141e0 <vTaskStartScheduler+0xac>)
 8014166:	f7ff fe1d 	bl	8013da4 <xTaskCreateStatic>
 801416a:	4603      	mov	r3, r0
 801416c:	4a1d      	ldr	r2, [pc, #116]	; (80141e4 <vTaskStartScheduler+0xb0>)
 801416e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014170:	4b1c      	ldr	r3, [pc, #112]	; (80141e4 <vTaskStartScheduler+0xb0>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d002      	beq.n	801417e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014178:	2301      	movs	r3, #1
 801417a:	617b      	str	r3, [r7, #20]
 801417c:	e001      	b.n	8014182 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801417e:	2300      	movs	r3, #0
 8014180:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	2b01      	cmp	r3, #1
 8014186:	d116      	bne.n	80141b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8014188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418c:	f383 8811 	msr	BASEPRI, r3
 8014190:	f3bf 8f6f 	isb	sy
 8014194:	f3bf 8f4f 	dsb	sy
 8014198:	613b      	str	r3, [r7, #16]
}
 801419a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801419c:	4b12      	ldr	r3, [pc, #72]	; (80141e8 <vTaskStartScheduler+0xb4>)
 801419e:	f04f 32ff 	mov.w	r2, #4294967295
 80141a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80141a4:	4b11      	ldr	r3, [pc, #68]	; (80141ec <vTaskStartScheduler+0xb8>)
 80141a6:	2201      	movs	r2, #1
 80141a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80141aa:	4b11      	ldr	r3, [pc, #68]	; (80141f0 <vTaskStartScheduler+0xbc>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80141b0:	f000 ff3e 	bl	8015030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80141b4:	e00e      	b.n	80141d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141bc:	d10a      	bne.n	80141d4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80141be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c2:	f383 8811 	msr	BASEPRI, r3
 80141c6:	f3bf 8f6f 	isb	sy
 80141ca:	f3bf 8f4f 	dsb	sy
 80141ce:	60fb      	str	r3, [r7, #12]
}
 80141d0:	bf00      	nop
 80141d2:	e7fe      	b.n	80141d2 <vTaskStartScheduler+0x9e>
}
 80141d4:	bf00      	nop
 80141d6:	3718      	adds	r7, #24
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	0801c7ac 	.word	0x0801c7ac
 80141e0:	08014785 	.word	0x08014785
 80141e4:	20004994 	.word	0x20004994
 80141e8:	20004990 	.word	0x20004990
 80141ec:	2000497c 	.word	0x2000497c
 80141f0:	20004974 	.word	0x20004974

080141f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80141f4:	b480      	push	{r7}
 80141f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80141f8:	4b04      	ldr	r3, [pc, #16]	; (801420c <vTaskSuspendAll+0x18>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	3301      	adds	r3, #1
 80141fe:	4a03      	ldr	r2, [pc, #12]	; (801420c <vTaskSuspendAll+0x18>)
 8014200:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014202:	bf00      	nop
 8014204:	46bd      	mov	sp, r7
 8014206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420a:	4770      	bx	lr
 801420c:	20004998 	.word	0x20004998

08014210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b084      	sub	sp, #16
 8014214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014216:	2300      	movs	r3, #0
 8014218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801421a:	2300      	movs	r3, #0
 801421c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801421e:	4b41      	ldr	r3, [pc, #260]	; (8014324 <xTaskResumeAll+0x114>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d10a      	bne.n	801423c <xTaskResumeAll+0x2c>
	__asm volatile
 8014226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801422a:	f383 8811 	msr	BASEPRI, r3
 801422e:	f3bf 8f6f 	isb	sy
 8014232:	f3bf 8f4f 	dsb	sy
 8014236:	603b      	str	r3, [r7, #0]
}
 8014238:	bf00      	nop
 801423a:	e7fe      	b.n	801423a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801423c:	f000 ff9a 	bl	8015174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014240:	4b38      	ldr	r3, [pc, #224]	; (8014324 <xTaskResumeAll+0x114>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	3b01      	subs	r3, #1
 8014246:	4a37      	ldr	r2, [pc, #220]	; (8014324 <xTaskResumeAll+0x114>)
 8014248:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801424a:	4b36      	ldr	r3, [pc, #216]	; (8014324 <xTaskResumeAll+0x114>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d161      	bne.n	8014316 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014252:	4b35      	ldr	r3, [pc, #212]	; (8014328 <xTaskResumeAll+0x118>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d05d      	beq.n	8014316 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801425a:	e02e      	b.n	80142ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801425c:	4b33      	ldr	r3, [pc, #204]	; (801432c <xTaskResumeAll+0x11c>)
 801425e:	68db      	ldr	r3, [r3, #12]
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	3318      	adds	r3, #24
 8014268:	4618      	mov	r0, r3
 801426a:	f7fe ffde 	bl	801322a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	3304      	adds	r3, #4
 8014272:	4618      	mov	r0, r3
 8014274:	f7fe ffd9 	bl	801322a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427c:	2201      	movs	r2, #1
 801427e:	409a      	lsls	r2, r3
 8014280:	4b2b      	ldr	r3, [pc, #172]	; (8014330 <xTaskResumeAll+0x120>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	4313      	orrs	r3, r2
 8014286:	4a2a      	ldr	r2, [pc, #168]	; (8014330 <xTaskResumeAll+0x120>)
 8014288:	6013      	str	r3, [r2, #0]
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801428e:	4613      	mov	r3, r2
 8014290:	009b      	lsls	r3, r3, #2
 8014292:	4413      	add	r3, r2
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	4a27      	ldr	r2, [pc, #156]	; (8014334 <xTaskResumeAll+0x124>)
 8014298:	441a      	add	r2, r3
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	3304      	adds	r3, #4
 801429e:	4619      	mov	r1, r3
 80142a0:	4610      	mov	r0, r2
 80142a2:	f7fe ff65 	bl	8013170 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142aa:	4b23      	ldr	r3, [pc, #140]	; (8014338 <xTaskResumeAll+0x128>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d302      	bcc.n	80142ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80142b4:	4b21      	ldr	r3, [pc, #132]	; (801433c <xTaskResumeAll+0x12c>)
 80142b6:	2201      	movs	r2, #1
 80142b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80142ba:	4b1c      	ldr	r3, [pc, #112]	; (801432c <xTaskResumeAll+0x11c>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d1cc      	bne.n	801425c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d001      	beq.n	80142cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80142c8:	f000 fb12 	bl	80148f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80142cc:	4b1c      	ldr	r3, [pc, #112]	; (8014340 <xTaskResumeAll+0x130>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d010      	beq.n	80142fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80142d8:	f000 f836 	bl	8014348 <xTaskIncrementTick>
 80142dc:	4603      	mov	r3, r0
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d002      	beq.n	80142e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80142e2:	4b16      	ldr	r3, [pc, #88]	; (801433c <xTaskResumeAll+0x12c>)
 80142e4:	2201      	movs	r2, #1
 80142e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	3b01      	subs	r3, #1
 80142ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d1f1      	bne.n	80142d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80142f4:	4b12      	ldr	r3, [pc, #72]	; (8014340 <xTaskResumeAll+0x130>)
 80142f6:	2200      	movs	r2, #0
 80142f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80142fa:	4b10      	ldr	r3, [pc, #64]	; (801433c <xTaskResumeAll+0x12c>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d009      	beq.n	8014316 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014302:	2301      	movs	r3, #1
 8014304:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014306:	4b0f      	ldr	r3, [pc, #60]	; (8014344 <xTaskResumeAll+0x134>)
 8014308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801430c:	601a      	str	r2, [r3, #0]
 801430e:	f3bf 8f4f 	dsb	sy
 8014312:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014316:	f000 ff5d 	bl	80151d4 <vPortExitCritical>

	return xAlreadyYielded;
 801431a:	68bb      	ldr	r3, [r7, #8]
}
 801431c:	4618      	mov	r0, r3
 801431e:	3710      	adds	r7, #16
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	20004998 	.word	0x20004998
 8014328:	20004970 	.word	0x20004970
 801432c:	20004930 	.word	0x20004930
 8014330:	20004978 	.word	0x20004978
 8014334:	20004874 	.word	0x20004874
 8014338:	20004870 	.word	0x20004870
 801433c:	20004984 	.word	0x20004984
 8014340:	20004980 	.word	0x20004980
 8014344:	e000ed04 	.word	0xe000ed04

08014348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b086      	sub	sp, #24
 801434c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801434e:	2300      	movs	r3, #0
 8014350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014352:	4b4e      	ldr	r3, [pc, #312]	; (801448c <xTaskIncrementTick+0x144>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	f040 8088 	bne.w	801446c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801435c:	4b4c      	ldr	r3, [pc, #304]	; (8014490 <xTaskIncrementTick+0x148>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	3301      	adds	r3, #1
 8014362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014364:	4a4a      	ldr	r2, [pc, #296]	; (8014490 <xTaskIncrementTick+0x148>)
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d120      	bne.n	80143b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014370:	4b48      	ldr	r3, [pc, #288]	; (8014494 <xTaskIncrementTick+0x14c>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d00a      	beq.n	8014390 <xTaskIncrementTick+0x48>
	__asm volatile
 801437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801437e:	f383 8811 	msr	BASEPRI, r3
 8014382:	f3bf 8f6f 	isb	sy
 8014386:	f3bf 8f4f 	dsb	sy
 801438a:	603b      	str	r3, [r7, #0]
}
 801438c:	bf00      	nop
 801438e:	e7fe      	b.n	801438e <xTaskIncrementTick+0x46>
 8014390:	4b40      	ldr	r3, [pc, #256]	; (8014494 <xTaskIncrementTick+0x14c>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	60fb      	str	r3, [r7, #12]
 8014396:	4b40      	ldr	r3, [pc, #256]	; (8014498 <xTaskIncrementTick+0x150>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	4a3e      	ldr	r2, [pc, #248]	; (8014494 <xTaskIncrementTick+0x14c>)
 801439c:	6013      	str	r3, [r2, #0]
 801439e:	4a3e      	ldr	r2, [pc, #248]	; (8014498 <xTaskIncrementTick+0x150>)
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	6013      	str	r3, [r2, #0]
 80143a4:	4b3d      	ldr	r3, [pc, #244]	; (801449c <xTaskIncrementTick+0x154>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	3301      	adds	r3, #1
 80143aa:	4a3c      	ldr	r2, [pc, #240]	; (801449c <xTaskIncrementTick+0x154>)
 80143ac:	6013      	str	r3, [r2, #0]
 80143ae:	f000 fa9f 	bl	80148f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80143b2:	4b3b      	ldr	r3, [pc, #236]	; (80144a0 <xTaskIncrementTick+0x158>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	693a      	ldr	r2, [r7, #16]
 80143b8:	429a      	cmp	r2, r3
 80143ba:	d348      	bcc.n	801444e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143bc:	4b35      	ldr	r3, [pc, #212]	; (8014494 <xTaskIncrementTick+0x14c>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d104      	bne.n	80143d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143c6:	4b36      	ldr	r3, [pc, #216]	; (80144a0 <xTaskIncrementTick+0x158>)
 80143c8:	f04f 32ff 	mov.w	r2, #4294967295
 80143cc:	601a      	str	r2, [r3, #0]
					break;
 80143ce:	e03e      	b.n	801444e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143d0:	4b30      	ldr	r3, [pc, #192]	; (8014494 <xTaskIncrementTick+0x14c>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	68db      	ldr	r3, [r3, #12]
 80143d6:	68db      	ldr	r3, [r3, #12]
 80143d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80143e0:	693a      	ldr	r2, [r7, #16]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d203      	bcs.n	80143f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80143e8:	4a2d      	ldr	r2, [pc, #180]	; (80144a0 <xTaskIncrementTick+0x158>)
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80143ee:	e02e      	b.n	801444e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	3304      	adds	r3, #4
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7fe ff18 	bl	801322a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d004      	beq.n	801440c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	3318      	adds	r3, #24
 8014406:	4618      	mov	r0, r3
 8014408:	f7fe ff0f 	bl	801322a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014410:	2201      	movs	r2, #1
 8014412:	409a      	lsls	r2, r3
 8014414:	4b23      	ldr	r3, [pc, #140]	; (80144a4 <xTaskIncrementTick+0x15c>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	4313      	orrs	r3, r2
 801441a:	4a22      	ldr	r2, [pc, #136]	; (80144a4 <xTaskIncrementTick+0x15c>)
 801441c:	6013      	str	r3, [r2, #0]
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014422:	4613      	mov	r3, r2
 8014424:	009b      	lsls	r3, r3, #2
 8014426:	4413      	add	r3, r2
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	4a1f      	ldr	r2, [pc, #124]	; (80144a8 <xTaskIncrementTick+0x160>)
 801442c:	441a      	add	r2, r3
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	3304      	adds	r3, #4
 8014432:	4619      	mov	r1, r3
 8014434:	4610      	mov	r0, r2
 8014436:	f7fe fe9b 	bl	8013170 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801443e:	4b1b      	ldr	r3, [pc, #108]	; (80144ac <xTaskIncrementTick+0x164>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014444:	429a      	cmp	r2, r3
 8014446:	d3b9      	bcc.n	80143bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014448:	2301      	movs	r3, #1
 801444a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801444c:	e7b6      	b.n	80143bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801444e:	4b17      	ldr	r3, [pc, #92]	; (80144ac <xTaskIncrementTick+0x164>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014454:	4914      	ldr	r1, [pc, #80]	; (80144a8 <xTaskIncrementTick+0x160>)
 8014456:	4613      	mov	r3, r2
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	4413      	add	r3, r2
 801445c:	009b      	lsls	r3, r3, #2
 801445e:	440b      	add	r3, r1
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2b01      	cmp	r3, #1
 8014464:	d907      	bls.n	8014476 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8014466:	2301      	movs	r3, #1
 8014468:	617b      	str	r3, [r7, #20]
 801446a:	e004      	b.n	8014476 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801446c:	4b10      	ldr	r3, [pc, #64]	; (80144b0 <xTaskIncrementTick+0x168>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	3301      	adds	r3, #1
 8014472:	4a0f      	ldr	r2, [pc, #60]	; (80144b0 <xTaskIncrementTick+0x168>)
 8014474:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014476:	4b0f      	ldr	r3, [pc, #60]	; (80144b4 <xTaskIncrementTick+0x16c>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d001      	beq.n	8014482 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801447e:	2301      	movs	r3, #1
 8014480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014482:	697b      	ldr	r3, [r7, #20]
}
 8014484:	4618      	mov	r0, r3
 8014486:	3718      	adds	r7, #24
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	20004998 	.word	0x20004998
 8014490:	20004974 	.word	0x20004974
 8014494:	20004928 	.word	0x20004928
 8014498:	2000492c 	.word	0x2000492c
 801449c:	20004988 	.word	0x20004988
 80144a0:	20004990 	.word	0x20004990
 80144a4:	20004978 	.word	0x20004978
 80144a8:	20004874 	.word	0x20004874
 80144ac:	20004870 	.word	0x20004870
 80144b0:	20004980 	.word	0x20004980
 80144b4:	20004984 	.word	0x20004984

080144b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80144b8:	b480      	push	{r7}
 80144ba:	b087      	sub	sp, #28
 80144bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80144be:	4b27      	ldr	r3, [pc, #156]	; (801455c <vTaskSwitchContext+0xa4>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d003      	beq.n	80144ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80144c6:	4b26      	ldr	r3, [pc, #152]	; (8014560 <vTaskSwitchContext+0xa8>)
 80144c8:	2201      	movs	r2, #1
 80144ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80144cc:	e03f      	b.n	801454e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80144ce:	4b24      	ldr	r3, [pc, #144]	; (8014560 <vTaskSwitchContext+0xa8>)
 80144d0:	2200      	movs	r2, #0
 80144d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144d4:	4b23      	ldr	r3, [pc, #140]	; (8014564 <vTaskSwitchContext+0xac>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	fab3 f383 	clz	r3, r3
 80144e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80144e2:	7afb      	ldrb	r3, [r7, #11]
 80144e4:	f1c3 031f 	rsb	r3, r3, #31
 80144e8:	617b      	str	r3, [r7, #20]
 80144ea:	491f      	ldr	r1, [pc, #124]	; (8014568 <vTaskSwitchContext+0xb0>)
 80144ec:	697a      	ldr	r2, [r7, #20]
 80144ee:	4613      	mov	r3, r2
 80144f0:	009b      	lsls	r3, r3, #2
 80144f2:	4413      	add	r3, r2
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	440b      	add	r3, r1
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10a      	bne.n	8014514 <vTaskSwitchContext+0x5c>
	__asm volatile
 80144fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014502:	f383 8811 	msr	BASEPRI, r3
 8014506:	f3bf 8f6f 	isb	sy
 801450a:	f3bf 8f4f 	dsb	sy
 801450e:	607b      	str	r3, [r7, #4]
}
 8014510:	bf00      	nop
 8014512:	e7fe      	b.n	8014512 <vTaskSwitchContext+0x5a>
 8014514:	697a      	ldr	r2, [r7, #20]
 8014516:	4613      	mov	r3, r2
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	4413      	add	r3, r2
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	4a12      	ldr	r2, [pc, #72]	; (8014568 <vTaskSwitchContext+0xb0>)
 8014520:	4413      	add	r3, r2
 8014522:	613b      	str	r3, [r7, #16]
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	685a      	ldr	r2, [r3, #4]
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	605a      	str	r2, [r3, #4]
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	685a      	ldr	r2, [r3, #4]
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	3308      	adds	r3, #8
 8014536:	429a      	cmp	r2, r3
 8014538:	d104      	bne.n	8014544 <vTaskSwitchContext+0x8c>
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	685a      	ldr	r2, [r3, #4]
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	605a      	str	r2, [r3, #4]
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	4a08      	ldr	r2, [pc, #32]	; (801456c <vTaskSwitchContext+0xb4>)
 801454c:	6013      	str	r3, [r2, #0]
}
 801454e:	bf00      	nop
 8014550:	371c      	adds	r7, #28
 8014552:	46bd      	mov	sp, r7
 8014554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014558:	4770      	bx	lr
 801455a:	bf00      	nop
 801455c:	20004998 	.word	0x20004998
 8014560:	20004984 	.word	0x20004984
 8014564:	20004978 	.word	0x20004978
 8014568:	20004874 	.word	0x20004874
 801456c:	20004870 	.word	0x20004870

08014570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d10a      	bne.n	8014596 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014584:	f383 8811 	msr	BASEPRI, r3
 8014588:	f3bf 8f6f 	isb	sy
 801458c:	f3bf 8f4f 	dsb	sy
 8014590:	60fb      	str	r3, [r7, #12]
}
 8014592:	bf00      	nop
 8014594:	e7fe      	b.n	8014594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014596:	4b07      	ldr	r3, [pc, #28]	; (80145b4 <vTaskPlaceOnEventList+0x44>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	3318      	adds	r3, #24
 801459c:	4619      	mov	r1, r3
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f7fe fe0a 	bl	80131b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80145a4:	2101      	movs	r1, #1
 80145a6:	6838      	ldr	r0, [r7, #0]
 80145a8:	f000 fc50 	bl	8014e4c <prvAddCurrentTaskToDelayedList>
}
 80145ac:	bf00      	nop
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	20004870 	.word	0x20004870

080145b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b086      	sub	sp, #24
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	68db      	ldr	r3, [r3, #12]
 80145c4:	68db      	ldr	r3, [r3, #12]
 80145c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d10a      	bne.n	80145e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80145ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145d2:	f383 8811 	msr	BASEPRI, r3
 80145d6:	f3bf 8f6f 	isb	sy
 80145da:	f3bf 8f4f 	dsb	sy
 80145de:	60fb      	str	r3, [r7, #12]
}
 80145e0:	bf00      	nop
 80145e2:	e7fe      	b.n	80145e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	3318      	adds	r3, #24
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7fe fe1e 	bl	801322a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145ee:	4b1d      	ldr	r3, [pc, #116]	; (8014664 <xTaskRemoveFromEventList+0xac>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d11c      	bne.n	8014630 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	3304      	adds	r3, #4
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fe fe15 	bl	801322a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014604:	2201      	movs	r2, #1
 8014606:	409a      	lsls	r2, r3
 8014608:	4b17      	ldr	r3, [pc, #92]	; (8014668 <xTaskRemoveFromEventList+0xb0>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	4313      	orrs	r3, r2
 801460e:	4a16      	ldr	r2, [pc, #88]	; (8014668 <xTaskRemoveFromEventList+0xb0>)
 8014610:	6013      	str	r3, [r2, #0]
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014616:	4613      	mov	r3, r2
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	4413      	add	r3, r2
 801461c:	009b      	lsls	r3, r3, #2
 801461e:	4a13      	ldr	r2, [pc, #76]	; (801466c <xTaskRemoveFromEventList+0xb4>)
 8014620:	441a      	add	r2, r3
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	3304      	adds	r3, #4
 8014626:	4619      	mov	r1, r3
 8014628:	4610      	mov	r0, r2
 801462a:	f7fe fda1 	bl	8013170 <vListInsertEnd>
 801462e:	e005      	b.n	801463c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	3318      	adds	r3, #24
 8014634:	4619      	mov	r1, r3
 8014636:	480e      	ldr	r0, [pc, #56]	; (8014670 <xTaskRemoveFromEventList+0xb8>)
 8014638:	f7fe fd9a 	bl	8013170 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014640:	4b0c      	ldr	r3, [pc, #48]	; (8014674 <xTaskRemoveFromEventList+0xbc>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014646:	429a      	cmp	r2, r3
 8014648:	d905      	bls.n	8014656 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801464a:	2301      	movs	r3, #1
 801464c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801464e:	4b0a      	ldr	r3, [pc, #40]	; (8014678 <xTaskRemoveFromEventList+0xc0>)
 8014650:	2201      	movs	r2, #1
 8014652:	601a      	str	r2, [r3, #0]
 8014654:	e001      	b.n	801465a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8014656:	2300      	movs	r3, #0
 8014658:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801465a:	697b      	ldr	r3, [r7, #20]
}
 801465c:	4618      	mov	r0, r3
 801465e:	3718      	adds	r7, #24
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	20004998 	.word	0x20004998
 8014668:	20004978 	.word	0x20004978
 801466c:	20004874 	.word	0x20004874
 8014670:	20004930 	.word	0x20004930
 8014674:	20004870 	.word	0x20004870
 8014678:	20004984 	.word	0x20004984

0801467c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801467c:	b480      	push	{r7}
 801467e:	b083      	sub	sp, #12
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014684:	4b06      	ldr	r3, [pc, #24]	; (80146a0 <vTaskInternalSetTimeOutState+0x24>)
 8014686:	681a      	ldr	r2, [r3, #0]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801468c:	4b05      	ldr	r3, [pc, #20]	; (80146a4 <vTaskInternalSetTimeOutState+0x28>)
 801468e:	681a      	ldr	r2, [r3, #0]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	605a      	str	r2, [r3, #4]
}
 8014694:	bf00      	nop
 8014696:	370c      	adds	r7, #12
 8014698:	46bd      	mov	sp, r7
 801469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469e:	4770      	bx	lr
 80146a0:	20004988 	.word	0x20004988
 80146a4:	20004974 	.word	0x20004974

080146a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b088      	sub	sp, #32
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d10a      	bne.n	80146ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80146b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146bc:	f383 8811 	msr	BASEPRI, r3
 80146c0:	f3bf 8f6f 	isb	sy
 80146c4:	f3bf 8f4f 	dsb	sy
 80146c8:	613b      	str	r3, [r7, #16]
}
 80146ca:	bf00      	nop
 80146cc:	e7fe      	b.n	80146cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d10a      	bne.n	80146ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80146d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d8:	f383 8811 	msr	BASEPRI, r3
 80146dc:	f3bf 8f6f 	isb	sy
 80146e0:	f3bf 8f4f 	dsb	sy
 80146e4:	60fb      	str	r3, [r7, #12]
}
 80146e6:	bf00      	nop
 80146e8:	e7fe      	b.n	80146e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80146ea:	f000 fd43 	bl	8015174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80146ee:	4b1d      	ldr	r3, [pc, #116]	; (8014764 <xTaskCheckForTimeOut+0xbc>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	69ba      	ldr	r2, [r7, #24]
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014706:	d102      	bne.n	801470e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014708:	2300      	movs	r3, #0
 801470a:	61fb      	str	r3, [r7, #28]
 801470c:	e023      	b.n	8014756 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681a      	ldr	r2, [r3, #0]
 8014712:	4b15      	ldr	r3, [pc, #84]	; (8014768 <xTaskCheckForTimeOut+0xc0>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	429a      	cmp	r2, r3
 8014718:	d007      	beq.n	801472a <xTaskCheckForTimeOut+0x82>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	69ba      	ldr	r2, [r7, #24]
 8014720:	429a      	cmp	r2, r3
 8014722:	d302      	bcc.n	801472a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014724:	2301      	movs	r3, #1
 8014726:	61fb      	str	r3, [r7, #28]
 8014728:	e015      	b.n	8014756 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	697a      	ldr	r2, [r7, #20]
 8014730:	429a      	cmp	r2, r3
 8014732:	d20b      	bcs.n	801474c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	1ad2      	subs	r2, r2, r3
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f7ff ff9b 	bl	801467c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014746:	2300      	movs	r3, #0
 8014748:	61fb      	str	r3, [r7, #28]
 801474a:	e004      	b.n	8014756 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	2200      	movs	r2, #0
 8014750:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014752:	2301      	movs	r3, #1
 8014754:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014756:	f000 fd3d 	bl	80151d4 <vPortExitCritical>

	return xReturn;
 801475a:	69fb      	ldr	r3, [r7, #28]
}
 801475c:	4618      	mov	r0, r3
 801475e:	3720      	adds	r7, #32
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	20004974 	.word	0x20004974
 8014768:	20004988 	.word	0x20004988

0801476c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801476c:	b480      	push	{r7}
 801476e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014770:	4b03      	ldr	r3, [pc, #12]	; (8014780 <vTaskMissedYield+0x14>)
 8014772:	2201      	movs	r2, #1
 8014774:	601a      	str	r2, [r3, #0]
}
 8014776:	bf00      	nop
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	20004984 	.word	0x20004984

08014784 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801478c:	f000 f852 	bl	8014834 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014790:	4b06      	ldr	r3, [pc, #24]	; (80147ac <prvIdleTask+0x28>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	2b01      	cmp	r3, #1
 8014796:	d9f9      	bls.n	801478c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014798:	4b05      	ldr	r3, [pc, #20]	; (80147b0 <prvIdleTask+0x2c>)
 801479a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801479e:	601a      	str	r2, [r3, #0]
 80147a0:	f3bf 8f4f 	dsb	sy
 80147a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80147a8:	e7f0      	b.n	801478c <prvIdleTask+0x8>
 80147aa:	bf00      	nop
 80147ac:	20004874 	.word	0x20004874
 80147b0:	e000ed04 	.word	0xe000ed04

080147b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80147ba:	2300      	movs	r3, #0
 80147bc:	607b      	str	r3, [r7, #4]
 80147be:	e00c      	b.n	80147da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80147c0:	687a      	ldr	r2, [r7, #4]
 80147c2:	4613      	mov	r3, r2
 80147c4:	009b      	lsls	r3, r3, #2
 80147c6:	4413      	add	r3, r2
 80147c8:	009b      	lsls	r3, r3, #2
 80147ca:	4a12      	ldr	r2, [pc, #72]	; (8014814 <prvInitialiseTaskLists+0x60>)
 80147cc:	4413      	add	r3, r2
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fe fca1 	bl	8013116 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	3301      	adds	r3, #1
 80147d8:	607b      	str	r3, [r7, #4]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2b06      	cmp	r3, #6
 80147de:	d9ef      	bls.n	80147c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80147e0:	480d      	ldr	r0, [pc, #52]	; (8014818 <prvInitialiseTaskLists+0x64>)
 80147e2:	f7fe fc98 	bl	8013116 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80147e6:	480d      	ldr	r0, [pc, #52]	; (801481c <prvInitialiseTaskLists+0x68>)
 80147e8:	f7fe fc95 	bl	8013116 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80147ec:	480c      	ldr	r0, [pc, #48]	; (8014820 <prvInitialiseTaskLists+0x6c>)
 80147ee:	f7fe fc92 	bl	8013116 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80147f2:	480c      	ldr	r0, [pc, #48]	; (8014824 <prvInitialiseTaskLists+0x70>)
 80147f4:	f7fe fc8f 	bl	8013116 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80147f8:	480b      	ldr	r0, [pc, #44]	; (8014828 <prvInitialiseTaskLists+0x74>)
 80147fa:	f7fe fc8c 	bl	8013116 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80147fe:	4b0b      	ldr	r3, [pc, #44]	; (801482c <prvInitialiseTaskLists+0x78>)
 8014800:	4a05      	ldr	r2, [pc, #20]	; (8014818 <prvInitialiseTaskLists+0x64>)
 8014802:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014804:	4b0a      	ldr	r3, [pc, #40]	; (8014830 <prvInitialiseTaskLists+0x7c>)
 8014806:	4a05      	ldr	r2, [pc, #20]	; (801481c <prvInitialiseTaskLists+0x68>)
 8014808:	601a      	str	r2, [r3, #0]
}
 801480a:	bf00      	nop
 801480c:	3708      	adds	r7, #8
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
 8014812:	bf00      	nop
 8014814:	20004874 	.word	0x20004874
 8014818:	20004900 	.word	0x20004900
 801481c:	20004914 	.word	0x20004914
 8014820:	20004930 	.word	0x20004930
 8014824:	20004944 	.word	0x20004944
 8014828:	2000495c 	.word	0x2000495c
 801482c:	20004928 	.word	0x20004928
 8014830:	2000492c 	.word	0x2000492c

08014834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801483a:	e019      	b.n	8014870 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801483c:	f000 fc9a 	bl	8015174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014840:	4b10      	ldr	r3, [pc, #64]	; (8014884 <prvCheckTasksWaitingTermination+0x50>)
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	68db      	ldr	r3, [r3, #12]
 8014846:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	3304      	adds	r3, #4
 801484c:	4618      	mov	r0, r3
 801484e:	f7fe fcec 	bl	801322a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014852:	4b0d      	ldr	r3, [pc, #52]	; (8014888 <prvCheckTasksWaitingTermination+0x54>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	3b01      	subs	r3, #1
 8014858:	4a0b      	ldr	r2, [pc, #44]	; (8014888 <prvCheckTasksWaitingTermination+0x54>)
 801485a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801485c:	4b0b      	ldr	r3, [pc, #44]	; (801488c <prvCheckTasksWaitingTermination+0x58>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	3b01      	subs	r3, #1
 8014862:	4a0a      	ldr	r2, [pc, #40]	; (801488c <prvCheckTasksWaitingTermination+0x58>)
 8014864:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014866:	f000 fcb5 	bl	80151d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 f810 	bl	8014890 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014870:	4b06      	ldr	r3, [pc, #24]	; (801488c <prvCheckTasksWaitingTermination+0x58>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1e1      	bne.n	801483c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014878:	bf00      	nop
 801487a:	bf00      	nop
 801487c:	3708      	adds	r7, #8
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	20004944 	.word	0x20004944
 8014888:	20004970 	.word	0x20004970
 801488c:	20004958 	.word	0x20004958

08014890 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014890:	b580      	push	{r7, lr}
 8014892:	b084      	sub	sp, #16
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d108      	bne.n	80148b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a6:	4618      	mov	r0, r3
 80148a8:	f000 fe4a 	bl	8015540 <vPortFree>
				vPortFree( pxTCB );
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 fe47 	bl	8015540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80148b2:	e018      	b.n	80148e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d103      	bne.n	80148c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 fe3e 	bl	8015540 <vPortFree>
	}
 80148c4:	e00f      	b.n	80148e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80148cc:	2b02      	cmp	r3, #2
 80148ce:	d00a      	beq.n	80148e6 <prvDeleteTCB+0x56>
	__asm volatile
 80148d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148d4:	f383 8811 	msr	BASEPRI, r3
 80148d8:	f3bf 8f6f 	isb	sy
 80148dc:	f3bf 8f4f 	dsb	sy
 80148e0:	60fb      	str	r3, [r7, #12]
}
 80148e2:	bf00      	nop
 80148e4:	e7fe      	b.n	80148e4 <prvDeleteTCB+0x54>
	}
 80148e6:	bf00      	nop
 80148e8:	3710      	adds	r7, #16
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
	...

080148f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80148f0:	b480      	push	{r7}
 80148f2:	b083      	sub	sp, #12
 80148f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80148f6:	4b0c      	ldr	r3, [pc, #48]	; (8014928 <prvResetNextTaskUnblockTime+0x38>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d104      	bne.n	801490a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014900:	4b0a      	ldr	r3, [pc, #40]	; (801492c <prvResetNextTaskUnblockTime+0x3c>)
 8014902:	f04f 32ff 	mov.w	r2, #4294967295
 8014906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014908:	e008      	b.n	801491c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801490a:	4b07      	ldr	r3, [pc, #28]	; (8014928 <prvResetNextTaskUnblockTime+0x38>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	68db      	ldr	r3, [r3, #12]
 8014912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	4a04      	ldr	r2, [pc, #16]	; (801492c <prvResetNextTaskUnblockTime+0x3c>)
 801491a:	6013      	str	r3, [r2, #0]
}
 801491c:	bf00      	nop
 801491e:	370c      	adds	r7, #12
 8014920:	46bd      	mov	sp, r7
 8014922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014926:	4770      	bx	lr
 8014928:	20004928 	.word	0x20004928
 801492c:	20004990 	.word	0x20004990

08014930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014936:	4b0b      	ldr	r3, [pc, #44]	; (8014964 <xTaskGetSchedulerState+0x34>)
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d102      	bne.n	8014944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801493e:	2301      	movs	r3, #1
 8014940:	607b      	str	r3, [r7, #4]
 8014942:	e008      	b.n	8014956 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014944:	4b08      	ldr	r3, [pc, #32]	; (8014968 <xTaskGetSchedulerState+0x38>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d102      	bne.n	8014952 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801494c:	2302      	movs	r3, #2
 801494e:	607b      	str	r3, [r7, #4]
 8014950:	e001      	b.n	8014956 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014952:	2300      	movs	r3, #0
 8014954:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014956:	687b      	ldr	r3, [r7, #4]
	}
 8014958:	4618      	mov	r0, r3
 801495a:	370c      	adds	r7, #12
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr
 8014964:	2000497c 	.word	0x2000497c
 8014968:	20004998 	.word	0x20004998

0801496c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801496c:	b580      	push	{r7, lr}
 801496e:	b086      	sub	sp, #24
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014978:	2300      	movs	r3, #0
 801497a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d06e      	beq.n	8014a60 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014982:	4b3a      	ldr	r3, [pc, #232]	; (8014a6c <xTaskPriorityDisinherit+0x100>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	693a      	ldr	r2, [r7, #16]
 8014988:	429a      	cmp	r2, r3
 801498a:	d00a      	beq.n	80149a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014990:	f383 8811 	msr	BASEPRI, r3
 8014994:	f3bf 8f6f 	isb	sy
 8014998:	f3bf 8f4f 	dsb	sy
 801499c:	60fb      	str	r3, [r7, #12]
}
 801499e:	bf00      	nop
 80149a0:	e7fe      	b.n	80149a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d10a      	bne.n	80149c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80149aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ae:	f383 8811 	msr	BASEPRI, r3
 80149b2:	f3bf 8f6f 	isb	sy
 80149b6:	f3bf 8f4f 	dsb	sy
 80149ba:	60bb      	str	r3, [r7, #8]
}
 80149bc:	bf00      	nop
 80149be:	e7fe      	b.n	80149be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149c4:	1e5a      	subs	r2, r3, #1
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d044      	beq.n	8014a60 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d140      	bne.n	8014a60 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	3304      	adds	r3, #4
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7fe fc21 	bl	801322a <uxListRemove>
 80149e8:	4603      	mov	r3, r0
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d115      	bne.n	8014a1a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149f2:	491f      	ldr	r1, [pc, #124]	; (8014a70 <xTaskPriorityDisinherit+0x104>)
 80149f4:	4613      	mov	r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	4413      	add	r3, r2
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	440b      	add	r3, r1
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d10a      	bne.n	8014a1a <xTaskPriorityDisinherit+0xae>
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a08:	2201      	movs	r2, #1
 8014a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8014a0e:	43da      	mvns	r2, r3
 8014a10:	4b18      	ldr	r3, [pc, #96]	; (8014a74 <xTaskPriorityDisinherit+0x108>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4013      	ands	r3, r2
 8014a16:	4a17      	ldr	r2, [pc, #92]	; (8014a74 <xTaskPriorityDisinherit+0x108>)
 8014a18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a26:	f1c3 0207 	rsb	r2, r3, #7
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014a2e:	693b      	ldr	r3, [r7, #16]
 8014a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a32:	2201      	movs	r2, #1
 8014a34:	409a      	lsls	r2, r3
 8014a36:	4b0f      	ldr	r3, [pc, #60]	; (8014a74 <xTaskPriorityDisinherit+0x108>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	4313      	orrs	r3, r2
 8014a3c:	4a0d      	ldr	r2, [pc, #52]	; (8014a74 <xTaskPriorityDisinherit+0x108>)
 8014a3e:	6013      	str	r3, [r2, #0]
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a44:	4613      	mov	r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	4413      	add	r3, r2
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	4a08      	ldr	r2, [pc, #32]	; (8014a70 <xTaskPriorityDisinherit+0x104>)
 8014a4e:	441a      	add	r2, r3
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	3304      	adds	r3, #4
 8014a54:	4619      	mov	r1, r3
 8014a56:	4610      	mov	r0, r2
 8014a58:	f7fe fb8a 	bl	8013170 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014a60:	697b      	ldr	r3, [r7, #20]
	}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3718      	adds	r7, #24
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	20004870 	.word	0x20004870
 8014a70:	20004874 	.word	0x20004874
 8014a74:	20004978 	.word	0x20004978

08014a78 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b086      	sub	sp, #24
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	60f8      	str	r0, [r7, #12]
 8014a80:	60b9      	str	r1, [r7, #8]
 8014a82:	607a      	str	r2, [r7, #4]
 8014a84:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014a86:	f000 fb75 	bl	8015174 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014a8a:	4b26      	ldr	r3, [pc, #152]	; (8014b24 <xTaskNotifyWait+0xac>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014a92:	b2db      	uxtb	r3, r3
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	d01a      	beq.n	8014ace <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014a98:	4b22      	ldr	r3, [pc, #136]	; (8014b24 <xTaskNotifyWait+0xac>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014a9e:	68fa      	ldr	r2, [r7, #12]
 8014aa0:	43d2      	mvns	r2, r2
 8014aa2:	400a      	ands	r2, r1
 8014aa4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014aa6:	4b1f      	ldr	r3, [pc, #124]	; (8014b24 <xTaskNotifyWait+0xac>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	2201      	movs	r2, #1
 8014aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d00b      	beq.n	8014ace <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014ab6:	2101      	movs	r1, #1
 8014ab8:	6838      	ldr	r0, [r7, #0]
 8014aba:	f000 f9c7 	bl	8014e4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014abe:	4b1a      	ldr	r3, [pc, #104]	; (8014b28 <xTaskNotifyWait+0xb0>)
 8014ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ac4:	601a      	str	r2, [r3, #0]
 8014ac6:	f3bf 8f4f 	dsb	sy
 8014aca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014ace:	f000 fb81 	bl	80151d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014ad2:	f000 fb4f 	bl	8015174 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d004      	beq.n	8014ae6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014adc:	4b11      	ldr	r3, [pc, #68]	; (8014b24 <xTaskNotifyWait+0xac>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014ae6:	4b0f      	ldr	r3, [pc, #60]	; (8014b24 <xTaskNotifyWait+0xac>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014aee:	b2db      	uxtb	r3, r3
 8014af0:	2b02      	cmp	r3, #2
 8014af2:	d002      	beq.n	8014afa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014af4:	2300      	movs	r3, #0
 8014af6:	617b      	str	r3, [r7, #20]
 8014af8:	e008      	b.n	8014b0c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8014afa:	4b0a      	ldr	r3, [pc, #40]	; (8014b24 <xTaskNotifyWait+0xac>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014b00:	68ba      	ldr	r2, [r7, #8]
 8014b02:	43d2      	mvns	r2, r2
 8014b04:	400a      	ands	r2, r1
 8014b06:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014b08:	2301      	movs	r3, #1
 8014b0a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014b0c:	4b05      	ldr	r3, [pc, #20]	; (8014b24 <xTaskNotifyWait+0xac>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	2200      	movs	r2, #0
 8014b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014b16:	f000 fb5d 	bl	80151d4 <vPortExitCritical>

		return xReturn;
 8014b1a:	697b      	ldr	r3, [r7, #20]
	}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3718      	adds	r7, #24
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	20004870 	.word	0x20004870
 8014b28:	e000ed04 	.word	0xe000ed04

08014b2c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b08a      	sub	sp, #40	; 0x28
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	603b      	str	r3, [r7, #0]
 8014b38:	4613      	mov	r3, r2
 8014b3a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d10a      	bne.n	8014b5c <xTaskGenericNotify+0x30>
	__asm volatile
 8014b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4a:	f383 8811 	msr	BASEPRI, r3
 8014b4e:	f3bf 8f6f 	isb	sy
 8014b52:	f3bf 8f4f 	dsb	sy
 8014b56:	61bb      	str	r3, [r7, #24]
}
 8014b58:	bf00      	nop
 8014b5a:	e7fe      	b.n	8014b5a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014b60:	f000 fb08 	bl	8015174 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d003      	beq.n	8014b72 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014b6a:	6a3b      	ldr	r3, [r7, #32]
 8014b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014b72:	6a3b      	ldr	r3, [r7, #32]
 8014b74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014b78:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014b7a:	6a3b      	ldr	r3, [r7, #32]
 8014b7c:	2202      	movs	r2, #2
 8014b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014b82:	79fb      	ldrb	r3, [r7, #7]
 8014b84:	2b04      	cmp	r3, #4
 8014b86:	d828      	bhi.n	8014bda <xTaskGenericNotify+0xae>
 8014b88:	a201      	add	r2, pc, #4	; (adr r2, 8014b90 <xTaskGenericNotify+0x64>)
 8014b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b8e:	bf00      	nop
 8014b90:	08014bfb 	.word	0x08014bfb
 8014b94:	08014ba5 	.word	0x08014ba5
 8014b98:	08014bb3 	.word	0x08014bb3
 8014b9c:	08014bbf 	.word	0x08014bbf
 8014ba0:	08014bc7 	.word	0x08014bc7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014ba4:	6a3b      	ldr	r3, [r7, #32]
 8014ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	431a      	orrs	r2, r3
 8014bac:	6a3b      	ldr	r3, [r7, #32]
 8014bae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014bb0:	e026      	b.n	8014c00 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014bb2:	6a3b      	ldr	r3, [r7, #32]
 8014bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bb6:	1c5a      	adds	r2, r3, #1
 8014bb8:	6a3b      	ldr	r3, [r7, #32]
 8014bba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014bbc:	e020      	b.n	8014c00 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014bbe:	6a3b      	ldr	r3, [r7, #32]
 8014bc0:	68ba      	ldr	r2, [r7, #8]
 8014bc2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014bc4:	e01c      	b.n	8014c00 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014bc6:	7ffb      	ldrb	r3, [r7, #31]
 8014bc8:	2b02      	cmp	r3, #2
 8014bca:	d003      	beq.n	8014bd4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014bcc:	6a3b      	ldr	r3, [r7, #32]
 8014bce:	68ba      	ldr	r2, [r7, #8]
 8014bd0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014bd2:	e015      	b.n	8014c00 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014bd8:	e012      	b.n	8014c00 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014bda:	6a3b      	ldr	r3, [r7, #32]
 8014bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014be2:	d00c      	beq.n	8014bfe <xTaskGenericNotify+0xd2>
	__asm volatile
 8014be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be8:	f383 8811 	msr	BASEPRI, r3
 8014bec:	f3bf 8f6f 	isb	sy
 8014bf0:	f3bf 8f4f 	dsb	sy
 8014bf4:	617b      	str	r3, [r7, #20]
}
 8014bf6:	bf00      	nop
 8014bf8:	e7fe      	b.n	8014bf8 <xTaskGenericNotify+0xcc>
					break;
 8014bfa:	bf00      	nop
 8014bfc:	e000      	b.n	8014c00 <xTaskGenericNotify+0xd4>

					break;
 8014bfe:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014c00:	7ffb      	ldrb	r3, [r7, #31]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d139      	bne.n	8014c7a <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c06:	6a3b      	ldr	r3, [r7, #32]
 8014c08:	3304      	adds	r3, #4
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fe fb0d 	bl	801322a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014c10:	6a3b      	ldr	r3, [r7, #32]
 8014c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c14:	2201      	movs	r2, #1
 8014c16:	409a      	lsls	r2, r3
 8014c18:	4b1b      	ldr	r3, [pc, #108]	; (8014c88 <xTaskGenericNotify+0x15c>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	4313      	orrs	r3, r2
 8014c1e:	4a1a      	ldr	r2, [pc, #104]	; (8014c88 <xTaskGenericNotify+0x15c>)
 8014c20:	6013      	str	r3, [r2, #0]
 8014c22:	6a3b      	ldr	r3, [r7, #32]
 8014c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c26:	4613      	mov	r3, r2
 8014c28:	009b      	lsls	r3, r3, #2
 8014c2a:	4413      	add	r3, r2
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	4a17      	ldr	r2, [pc, #92]	; (8014c8c <xTaskGenericNotify+0x160>)
 8014c30:	441a      	add	r2, r3
 8014c32:	6a3b      	ldr	r3, [r7, #32]
 8014c34:	3304      	adds	r3, #4
 8014c36:	4619      	mov	r1, r3
 8014c38:	4610      	mov	r0, r2
 8014c3a:	f7fe fa99 	bl	8013170 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014c3e:	6a3b      	ldr	r3, [r7, #32]
 8014c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00a      	beq.n	8014c5c <xTaskGenericNotify+0x130>
	__asm volatile
 8014c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c4a:	f383 8811 	msr	BASEPRI, r3
 8014c4e:	f3bf 8f6f 	isb	sy
 8014c52:	f3bf 8f4f 	dsb	sy
 8014c56:	613b      	str	r3, [r7, #16]
}
 8014c58:	bf00      	nop
 8014c5a:	e7fe      	b.n	8014c5a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c5c:	6a3b      	ldr	r3, [r7, #32]
 8014c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c60:	4b0b      	ldr	r3, [pc, #44]	; (8014c90 <xTaskGenericNotify+0x164>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d907      	bls.n	8014c7a <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014c6a:	4b0a      	ldr	r3, [pc, #40]	; (8014c94 <xTaskGenericNotify+0x168>)
 8014c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c70:	601a      	str	r2, [r3, #0]
 8014c72:	f3bf 8f4f 	dsb	sy
 8014c76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014c7a:	f000 faab 	bl	80151d4 <vPortExitCritical>

		return xReturn;
 8014c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3728      	adds	r7, #40	; 0x28
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	20004978 	.word	0x20004978
 8014c8c:	20004874 	.word	0x20004874
 8014c90:	20004870 	.word	0x20004870
 8014c94:	e000ed04 	.word	0xe000ed04

08014c98 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b08e      	sub	sp, #56	; 0x38
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	60f8      	str	r0, [r7, #12]
 8014ca0:	60b9      	str	r1, [r7, #8]
 8014ca2:	603b      	str	r3, [r7, #0]
 8014ca4:	4613      	mov	r3, r2
 8014ca6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014ca8:	2301      	movs	r3, #1
 8014caa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d10a      	bne.n	8014cc8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8014cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cb6:	f383 8811 	msr	BASEPRI, r3
 8014cba:	f3bf 8f6f 	isb	sy
 8014cbe:	f3bf 8f4f 	dsb	sy
 8014cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014cc4:	bf00      	nop
 8014cc6:	e7fe      	b.n	8014cc6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014cc8:	f000 fb36 	bl	8015338 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014cd0:	f3ef 8211 	mrs	r2, BASEPRI
 8014cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cd8:	f383 8811 	msr	BASEPRI, r3
 8014cdc:	f3bf 8f6f 	isb	sy
 8014ce0:	f3bf 8f4f 	dsb	sy
 8014ce4:	623a      	str	r2, [r7, #32]
 8014ce6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014ce8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014cea:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d003      	beq.n	8014cfa <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d06:	2202      	movs	r2, #2
 8014d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014d0c:	79fb      	ldrb	r3, [r7, #7]
 8014d0e:	2b04      	cmp	r3, #4
 8014d10:	d828      	bhi.n	8014d64 <xTaskGenericNotifyFromISR+0xcc>
 8014d12:	a201      	add	r2, pc, #4	; (adr r2, 8014d18 <xTaskGenericNotifyFromISR+0x80>)
 8014d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d18:	08014d85 	.word	0x08014d85
 8014d1c:	08014d2d 	.word	0x08014d2d
 8014d20:	08014d3b 	.word	0x08014d3b
 8014d24:	08014d47 	.word	0x08014d47
 8014d28:	08014d4f 	.word	0x08014d4f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	431a      	orrs	r2, r3
 8014d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d36:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014d38:	e027      	b.n	8014d8a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d3e:	1c5a      	adds	r2, r3, #1
 8014d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d42:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014d44:	e021      	b.n	8014d8a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d48:	68ba      	ldr	r2, [r7, #8]
 8014d4a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014d4c:	e01d      	b.n	8014d8a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014d52:	2b02      	cmp	r3, #2
 8014d54:	d003      	beq.n	8014d5e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d58:	68ba      	ldr	r2, [r7, #8]
 8014d5a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014d5c:	e015      	b.n	8014d8a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014d62:	e012      	b.n	8014d8a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d6c:	d00c      	beq.n	8014d88 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	61bb      	str	r3, [r7, #24]
}
 8014d80:	bf00      	nop
 8014d82:	e7fe      	b.n	8014d82 <xTaskGenericNotifyFromISR+0xea>
					break;
 8014d84:	bf00      	nop
 8014d86:	e000      	b.n	8014d8a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014d88:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014d8e:	2b01      	cmp	r3, #1
 8014d90:	d145      	bne.n	8014e1e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d00a      	beq.n	8014db0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d9e:	f383 8811 	msr	BASEPRI, r3
 8014da2:	f3bf 8f6f 	isb	sy
 8014da6:	f3bf 8f4f 	dsb	sy
 8014daa:	617b      	str	r3, [r7, #20]
}
 8014dac:	bf00      	nop
 8014dae:	e7fe      	b.n	8014dae <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014db0:	4b20      	ldr	r3, [pc, #128]	; (8014e34 <xTaskGenericNotifyFromISR+0x19c>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d11c      	bne.n	8014df2 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dba:	3304      	adds	r3, #4
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7fe fa34 	bl	801322a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dc6:	2201      	movs	r2, #1
 8014dc8:	409a      	lsls	r2, r3
 8014dca:	4b1b      	ldr	r3, [pc, #108]	; (8014e38 <xTaskGenericNotifyFromISR+0x1a0>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	4313      	orrs	r3, r2
 8014dd0:	4a19      	ldr	r2, [pc, #100]	; (8014e38 <xTaskGenericNotifyFromISR+0x1a0>)
 8014dd2:	6013      	str	r3, [r2, #0]
 8014dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dd8:	4613      	mov	r3, r2
 8014dda:	009b      	lsls	r3, r3, #2
 8014ddc:	4413      	add	r3, r2
 8014dde:	009b      	lsls	r3, r3, #2
 8014de0:	4a16      	ldr	r2, [pc, #88]	; (8014e3c <xTaskGenericNotifyFromISR+0x1a4>)
 8014de2:	441a      	add	r2, r3
 8014de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de6:	3304      	adds	r3, #4
 8014de8:	4619      	mov	r1, r3
 8014dea:	4610      	mov	r0, r2
 8014dec:	f7fe f9c0 	bl	8013170 <vListInsertEnd>
 8014df0:	e005      	b.n	8014dfe <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df4:	3318      	adds	r3, #24
 8014df6:	4619      	mov	r1, r3
 8014df8:	4811      	ldr	r0, [pc, #68]	; (8014e40 <xTaskGenericNotifyFromISR+0x1a8>)
 8014dfa:	f7fe f9b9 	bl	8013170 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e02:	4b10      	ldr	r3, [pc, #64]	; (8014e44 <xTaskGenericNotifyFromISR+0x1ac>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d908      	bls.n	8014e1e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d002      	beq.n	8014e18 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e14:	2201      	movs	r2, #1
 8014e16:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014e18:	4b0b      	ldr	r3, [pc, #44]	; (8014e48 <xTaskGenericNotifyFromISR+0x1b0>)
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	601a      	str	r2, [r3, #0]
 8014e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	f383 8811 	msr	BASEPRI, r3
}
 8014e28:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3738      	adds	r7, #56	; 0x38
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	20004998 	.word	0x20004998
 8014e38:	20004978 	.word	0x20004978
 8014e3c:	20004874 	.word	0x20004874
 8014e40:	20004930 	.word	0x20004930
 8014e44:	20004870 	.word	0x20004870
 8014e48:	20004984 	.word	0x20004984

08014e4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b084      	sub	sp, #16
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
 8014e54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014e56:	4b29      	ldr	r3, [pc, #164]	; (8014efc <prvAddCurrentTaskToDelayedList+0xb0>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e5c:	4b28      	ldr	r3, [pc, #160]	; (8014f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	3304      	adds	r3, #4
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7fe f9e1 	bl	801322a <uxListRemove>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d10b      	bne.n	8014e86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014e6e:	4b24      	ldr	r3, [pc, #144]	; (8014f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e74:	2201      	movs	r2, #1
 8014e76:	fa02 f303 	lsl.w	r3, r2, r3
 8014e7a:	43da      	mvns	r2, r3
 8014e7c:	4b21      	ldr	r3, [pc, #132]	; (8014f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4013      	ands	r3, r2
 8014e82:	4a20      	ldr	r2, [pc, #128]	; (8014f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014e84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e8c:	d10a      	bne.n	8014ea4 <prvAddCurrentTaskToDelayedList+0x58>
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d007      	beq.n	8014ea4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e94:	4b1a      	ldr	r3, [pc, #104]	; (8014f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	3304      	adds	r3, #4
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	481a      	ldr	r0, [pc, #104]	; (8014f08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014e9e:	f7fe f967 	bl	8013170 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014ea2:	e026      	b.n	8014ef2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014ea4:	68fa      	ldr	r2, [r7, #12]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	4413      	add	r3, r2
 8014eaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014eac:	4b14      	ldr	r3, [pc, #80]	; (8014f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	68ba      	ldr	r2, [r7, #8]
 8014eb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014eb4:	68ba      	ldr	r2, [r7, #8]
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d209      	bcs.n	8014ed0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ebc:	4b13      	ldr	r3, [pc, #76]	; (8014f0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8014ebe:	681a      	ldr	r2, [r3, #0]
 8014ec0:	4b0f      	ldr	r3, [pc, #60]	; (8014f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	3304      	adds	r3, #4
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	4610      	mov	r0, r2
 8014eca:	f7fe f975 	bl	80131b8 <vListInsert>
}
 8014ece:	e010      	b.n	8014ef2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ed0:	4b0f      	ldr	r3, [pc, #60]	; (8014f10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014ed2:	681a      	ldr	r2, [r3, #0]
 8014ed4:	4b0a      	ldr	r3, [pc, #40]	; (8014f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	3304      	adds	r3, #4
 8014eda:	4619      	mov	r1, r3
 8014edc:	4610      	mov	r0, r2
 8014ede:	f7fe f96b 	bl	80131b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014ee2:	4b0c      	ldr	r3, [pc, #48]	; (8014f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	68ba      	ldr	r2, [r7, #8]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d202      	bcs.n	8014ef2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014eec:	4a09      	ldr	r2, [pc, #36]	; (8014f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	6013      	str	r3, [r2, #0]
}
 8014ef2:	bf00      	nop
 8014ef4:	3710      	adds	r7, #16
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}
 8014efa:	bf00      	nop
 8014efc:	20004974 	.word	0x20004974
 8014f00:	20004870 	.word	0x20004870
 8014f04:	20004978 	.word	0x20004978
 8014f08:	2000495c 	.word	0x2000495c
 8014f0c:	2000492c 	.word	0x2000492c
 8014f10:	20004928 	.word	0x20004928
 8014f14:	20004990 	.word	0x20004990

08014f18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b085      	sub	sp, #20
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	60f8      	str	r0, [r7, #12]
 8014f20:	60b9      	str	r1, [r7, #8]
 8014f22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	3b04      	subs	r3, #4
 8014f28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	3b04      	subs	r3, #4
 8014f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	f023 0201 	bic.w	r2, r3, #1
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	3b04      	subs	r3, #4
 8014f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014f48:	4a0c      	ldr	r2, [pc, #48]	; (8014f7c <pxPortInitialiseStack+0x64>)
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	3b14      	subs	r3, #20
 8014f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014f54:	687a      	ldr	r2, [r7, #4]
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	3b04      	subs	r3, #4
 8014f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f06f 0202 	mvn.w	r2, #2
 8014f66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	3b20      	subs	r3, #32
 8014f6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3714      	adds	r7, #20
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr
 8014f7c:	08014f81 	.word	0x08014f81

08014f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014f80:	b480      	push	{r7}
 8014f82:	b085      	sub	sp, #20
 8014f84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014f86:	2300      	movs	r3, #0
 8014f88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014f8a:	4b12      	ldr	r3, [pc, #72]	; (8014fd4 <prvTaskExitError+0x54>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f92:	d00a      	beq.n	8014faa <prvTaskExitError+0x2a>
	__asm volatile
 8014f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f98:	f383 8811 	msr	BASEPRI, r3
 8014f9c:	f3bf 8f6f 	isb	sy
 8014fa0:	f3bf 8f4f 	dsb	sy
 8014fa4:	60fb      	str	r3, [r7, #12]
}
 8014fa6:	bf00      	nop
 8014fa8:	e7fe      	b.n	8014fa8 <prvTaskExitError+0x28>
	__asm volatile
 8014faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fae:	f383 8811 	msr	BASEPRI, r3
 8014fb2:	f3bf 8f6f 	isb	sy
 8014fb6:	f3bf 8f4f 	dsb	sy
 8014fba:	60bb      	str	r3, [r7, #8]
}
 8014fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014fbe:	bf00      	nop
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d0fc      	beq.n	8014fc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014fc6:	bf00      	nop
 8014fc8:	bf00      	nop
 8014fca:	3714      	adds	r7, #20
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd2:	4770      	bx	lr
 8014fd4:	200041a8 	.word	0x200041a8
	...

08014fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014fe0:	4b07      	ldr	r3, [pc, #28]	; (8015000 <pxCurrentTCBConst2>)
 8014fe2:	6819      	ldr	r1, [r3, #0]
 8014fe4:	6808      	ldr	r0, [r1, #0]
 8014fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fea:	f380 8809 	msr	PSP, r0
 8014fee:	f3bf 8f6f 	isb	sy
 8014ff2:	f04f 0000 	mov.w	r0, #0
 8014ff6:	f380 8811 	msr	BASEPRI, r0
 8014ffa:	4770      	bx	lr
 8014ffc:	f3af 8000 	nop.w

08015000 <pxCurrentTCBConst2>:
 8015000:	20004870 	.word	0x20004870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015004:	bf00      	nop
 8015006:	bf00      	nop

08015008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015008:	4808      	ldr	r0, [pc, #32]	; (801502c <prvPortStartFirstTask+0x24>)
 801500a:	6800      	ldr	r0, [r0, #0]
 801500c:	6800      	ldr	r0, [r0, #0]
 801500e:	f380 8808 	msr	MSP, r0
 8015012:	f04f 0000 	mov.w	r0, #0
 8015016:	f380 8814 	msr	CONTROL, r0
 801501a:	b662      	cpsie	i
 801501c:	b661      	cpsie	f
 801501e:	f3bf 8f4f 	dsb	sy
 8015022:	f3bf 8f6f 	isb	sy
 8015026:	df00      	svc	0
 8015028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801502a:	bf00      	nop
 801502c:	e000ed08 	.word	0xe000ed08

08015030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b086      	sub	sp, #24
 8015034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015036:	4b46      	ldr	r3, [pc, #280]	; (8015150 <xPortStartScheduler+0x120>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4a46      	ldr	r2, [pc, #280]	; (8015154 <xPortStartScheduler+0x124>)
 801503c:	4293      	cmp	r3, r2
 801503e:	d10a      	bne.n	8015056 <xPortStartScheduler+0x26>
	__asm volatile
 8015040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015044:	f383 8811 	msr	BASEPRI, r3
 8015048:	f3bf 8f6f 	isb	sy
 801504c:	f3bf 8f4f 	dsb	sy
 8015050:	613b      	str	r3, [r7, #16]
}
 8015052:	bf00      	nop
 8015054:	e7fe      	b.n	8015054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015056:	4b3e      	ldr	r3, [pc, #248]	; (8015150 <xPortStartScheduler+0x120>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	4a3f      	ldr	r2, [pc, #252]	; (8015158 <xPortStartScheduler+0x128>)
 801505c:	4293      	cmp	r3, r2
 801505e:	d10a      	bne.n	8015076 <xPortStartScheduler+0x46>
	__asm volatile
 8015060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015064:	f383 8811 	msr	BASEPRI, r3
 8015068:	f3bf 8f6f 	isb	sy
 801506c:	f3bf 8f4f 	dsb	sy
 8015070:	60fb      	str	r3, [r7, #12]
}
 8015072:	bf00      	nop
 8015074:	e7fe      	b.n	8015074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015076:	4b39      	ldr	r3, [pc, #228]	; (801515c <xPortStartScheduler+0x12c>)
 8015078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801507a:	697b      	ldr	r3, [r7, #20]
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	b2db      	uxtb	r3, r3
 8015080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	22ff      	movs	r2, #255	; 0xff
 8015086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	781b      	ldrb	r3, [r3, #0]
 801508c:	b2db      	uxtb	r3, r3
 801508e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015090:	78fb      	ldrb	r3, [r7, #3]
 8015092:	b2db      	uxtb	r3, r3
 8015094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015098:	b2da      	uxtb	r2, r3
 801509a:	4b31      	ldr	r3, [pc, #196]	; (8015160 <xPortStartScheduler+0x130>)
 801509c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801509e:	4b31      	ldr	r3, [pc, #196]	; (8015164 <xPortStartScheduler+0x134>)
 80150a0:	2207      	movs	r2, #7
 80150a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80150a4:	e009      	b.n	80150ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80150a6:	4b2f      	ldr	r3, [pc, #188]	; (8015164 <xPortStartScheduler+0x134>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	3b01      	subs	r3, #1
 80150ac:	4a2d      	ldr	r2, [pc, #180]	; (8015164 <xPortStartScheduler+0x134>)
 80150ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80150b0:	78fb      	ldrb	r3, [r7, #3]
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	005b      	lsls	r3, r3, #1
 80150b6:	b2db      	uxtb	r3, r3
 80150b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80150ba:	78fb      	ldrb	r3, [r7, #3]
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150c2:	2b80      	cmp	r3, #128	; 0x80
 80150c4:	d0ef      	beq.n	80150a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80150c6:	4b27      	ldr	r3, [pc, #156]	; (8015164 <xPortStartScheduler+0x134>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	f1c3 0307 	rsb	r3, r3, #7
 80150ce:	2b04      	cmp	r3, #4
 80150d0:	d00a      	beq.n	80150e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80150d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d6:	f383 8811 	msr	BASEPRI, r3
 80150da:	f3bf 8f6f 	isb	sy
 80150de:	f3bf 8f4f 	dsb	sy
 80150e2:	60bb      	str	r3, [r7, #8]
}
 80150e4:	bf00      	nop
 80150e6:	e7fe      	b.n	80150e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80150e8:	4b1e      	ldr	r3, [pc, #120]	; (8015164 <xPortStartScheduler+0x134>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	021b      	lsls	r3, r3, #8
 80150ee:	4a1d      	ldr	r2, [pc, #116]	; (8015164 <xPortStartScheduler+0x134>)
 80150f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80150f2:	4b1c      	ldr	r3, [pc, #112]	; (8015164 <xPortStartScheduler+0x134>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80150fa:	4a1a      	ldr	r2, [pc, #104]	; (8015164 <xPortStartScheduler+0x134>)
 80150fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	b2da      	uxtb	r2, r3
 8015102:	697b      	ldr	r3, [r7, #20]
 8015104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015106:	4b18      	ldr	r3, [pc, #96]	; (8015168 <xPortStartScheduler+0x138>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	4a17      	ldr	r2, [pc, #92]	; (8015168 <xPortStartScheduler+0x138>)
 801510c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015112:	4b15      	ldr	r3, [pc, #84]	; (8015168 <xPortStartScheduler+0x138>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	4a14      	ldr	r2, [pc, #80]	; (8015168 <xPortStartScheduler+0x138>)
 8015118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801511c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801511e:	f000 f8dd 	bl	80152dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015122:	4b12      	ldr	r3, [pc, #72]	; (801516c <xPortStartScheduler+0x13c>)
 8015124:	2200      	movs	r2, #0
 8015126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015128:	f000 f8fc 	bl	8015324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801512c:	4b10      	ldr	r3, [pc, #64]	; (8015170 <xPortStartScheduler+0x140>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	4a0f      	ldr	r2, [pc, #60]	; (8015170 <xPortStartScheduler+0x140>)
 8015132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015138:	f7ff ff66 	bl	8015008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801513c:	f7ff f9bc 	bl	80144b8 <vTaskSwitchContext>
	prvTaskExitError();
 8015140:	f7ff ff1e 	bl	8014f80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015144:	2300      	movs	r3, #0
}
 8015146:	4618      	mov	r0, r3
 8015148:	3718      	adds	r7, #24
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}
 801514e:	bf00      	nop
 8015150:	e000ed00 	.word	0xe000ed00
 8015154:	410fc271 	.word	0x410fc271
 8015158:	410fc270 	.word	0x410fc270
 801515c:	e000e400 	.word	0xe000e400
 8015160:	2000499c 	.word	0x2000499c
 8015164:	200049a0 	.word	0x200049a0
 8015168:	e000ed20 	.word	0xe000ed20
 801516c:	200041a8 	.word	0x200041a8
 8015170:	e000ef34 	.word	0xe000ef34

08015174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015174:	b480      	push	{r7}
 8015176:	b083      	sub	sp, #12
 8015178:	af00      	add	r7, sp, #0
	__asm volatile
 801517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517e:	f383 8811 	msr	BASEPRI, r3
 8015182:	f3bf 8f6f 	isb	sy
 8015186:	f3bf 8f4f 	dsb	sy
 801518a:	607b      	str	r3, [r7, #4]
}
 801518c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801518e:	4b0f      	ldr	r3, [pc, #60]	; (80151cc <vPortEnterCritical+0x58>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	3301      	adds	r3, #1
 8015194:	4a0d      	ldr	r2, [pc, #52]	; (80151cc <vPortEnterCritical+0x58>)
 8015196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015198:	4b0c      	ldr	r3, [pc, #48]	; (80151cc <vPortEnterCritical+0x58>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	2b01      	cmp	r3, #1
 801519e:	d10f      	bne.n	80151c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80151a0:	4b0b      	ldr	r3, [pc, #44]	; (80151d0 <vPortEnterCritical+0x5c>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	b2db      	uxtb	r3, r3
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d00a      	beq.n	80151c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80151aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ae:	f383 8811 	msr	BASEPRI, r3
 80151b2:	f3bf 8f6f 	isb	sy
 80151b6:	f3bf 8f4f 	dsb	sy
 80151ba:	603b      	str	r3, [r7, #0]
}
 80151bc:	bf00      	nop
 80151be:	e7fe      	b.n	80151be <vPortEnterCritical+0x4a>
	}
}
 80151c0:	bf00      	nop
 80151c2:	370c      	adds	r7, #12
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr
 80151cc:	200041a8 	.word	0x200041a8
 80151d0:	e000ed04 	.word	0xe000ed04

080151d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80151d4:	b480      	push	{r7}
 80151d6:	b083      	sub	sp, #12
 80151d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80151da:	4b12      	ldr	r3, [pc, #72]	; (8015224 <vPortExitCritical+0x50>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d10a      	bne.n	80151f8 <vPortExitCritical+0x24>
	__asm volatile
 80151e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e6:	f383 8811 	msr	BASEPRI, r3
 80151ea:	f3bf 8f6f 	isb	sy
 80151ee:	f3bf 8f4f 	dsb	sy
 80151f2:	607b      	str	r3, [r7, #4]
}
 80151f4:	bf00      	nop
 80151f6:	e7fe      	b.n	80151f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80151f8:	4b0a      	ldr	r3, [pc, #40]	; (8015224 <vPortExitCritical+0x50>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	3b01      	subs	r3, #1
 80151fe:	4a09      	ldr	r2, [pc, #36]	; (8015224 <vPortExitCritical+0x50>)
 8015200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015202:	4b08      	ldr	r3, [pc, #32]	; (8015224 <vPortExitCritical+0x50>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d105      	bne.n	8015216 <vPortExitCritical+0x42>
 801520a:	2300      	movs	r3, #0
 801520c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	f383 8811 	msr	BASEPRI, r3
}
 8015214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015216:	bf00      	nop
 8015218:	370c      	adds	r7, #12
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop
 8015224:	200041a8 	.word	0x200041a8
	...

08015230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015230:	f3ef 8009 	mrs	r0, PSP
 8015234:	f3bf 8f6f 	isb	sy
 8015238:	4b15      	ldr	r3, [pc, #84]	; (8015290 <pxCurrentTCBConst>)
 801523a:	681a      	ldr	r2, [r3, #0]
 801523c:	f01e 0f10 	tst.w	lr, #16
 8015240:	bf08      	it	eq
 8015242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801524a:	6010      	str	r0, [r2, #0]
 801524c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015254:	f380 8811 	msr	BASEPRI, r0
 8015258:	f3bf 8f4f 	dsb	sy
 801525c:	f3bf 8f6f 	isb	sy
 8015260:	f7ff f92a 	bl	80144b8 <vTaskSwitchContext>
 8015264:	f04f 0000 	mov.w	r0, #0
 8015268:	f380 8811 	msr	BASEPRI, r0
 801526c:	bc09      	pop	{r0, r3}
 801526e:	6819      	ldr	r1, [r3, #0]
 8015270:	6808      	ldr	r0, [r1, #0]
 8015272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015276:	f01e 0f10 	tst.w	lr, #16
 801527a:	bf08      	it	eq
 801527c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015280:	f380 8809 	msr	PSP, r0
 8015284:	f3bf 8f6f 	isb	sy
 8015288:	4770      	bx	lr
 801528a:	bf00      	nop
 801528c:	f3af 8000 	nop.w

08015290 <pxCurrentTCBConst>:
 8015290:	20004870 	.word	0x20004870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015294:	bf00      	nop
 8015296:	bf00      	nop

08015298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b082      	sub	sp, #8
 801529c:	af00      	add	r7, sp, #0
	__asm volatile
 801529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a2:	f383 8811 	msr	BASEPRI, r3
 80152a6:	f3bf 8f6f 	isb	sy
 80152aa:	f3bf 8f4f 	dsb	sy
 80152ae:	607b      	str	r3, [r7, #4]
}
 80152b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80152b2:	f7ff f849 	bl	8014348 <xTaskIncrementTick>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d003      	beq.n	80152c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80152bc:	4b06      	ldr	r3, [pc, #24]	; (80152d8 <SysTick_Handler+0x40>)
 80152be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152c2:	601a      	str	r2, [r3, #0]
 80152c4:	2300      	movs	r3, #0
 80152c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	f383 8811 	msr	BASEPRI, r3
}
 80152ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80152d0:	bf00      	nop
 80152d2:	3708      	adds	r7, #8
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	e000ed04 	.word	0xe000ed04

080152dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80152dc:	b480      	push	{r7}
 80152de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80152e0:	4b0b      	ldr	r3, [pc, #44]	; (8015310 <vPortSetupTimerInterrupt+0x34>)
 80152e2:	2200      	movs	r2, #0
 80152e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80152e6:	4b0b      	ldr	r3, [pc, #44]	; (8015314 <vPortSetupTimerInterrupt+0x38>)
 80152e8:	2200      	movs	r2, #0
 80152ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80152ec:	4b0a      	ldr	r3, [pc, #40]	; (8015318 <vPortSetupTimerInterrupt+0x3c>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	4a0a      	ldr	r2, [pc, #40]	; (801531c <vPortSetupTimerInterrupt+0x40>)
 80152f2:	fba2 2303 	umull	r2, r3, r2, r3
 80152f6:	099b      	lsrs	r3, r3, #6
 80152f8:	4a09      	ldr	r2, [pc, #36]	; (8015320 <vPortSetupTimerInterrupt+0x44>)
 80152fa:	3b01      	subs	r3, #1
 80152fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80152fe:	4b04      	ldr	r3, [pc, #16]	; (8015310 <vPortSetupTimerInterrupt+0x34>)
 8015300:	2207      	movs	r2, #7
 8015302:	601a      	str	r2, [r3, #0]
}
 8015304:	bf00      	nop
 8015306:	46bd      	mov	sp, r7
 8015308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530c:	4770      	bx	lr
 801530e:	bf00      	nop
 8015310:	e000e010 	.word	0xe000e010
 8015314:	e000e018 	.word	0xe000e018
 8015318:	2000408c 	.word	0x2000408c
 801531c:	10624dd3 	.word	0x10624dd3
 8015320:	e000e014 	.word	0xe000e014

08015324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015334 <vPortEnableVFP+0x10>
 8015328:	6801      	ldr	r1, [r0, #0]
 801532a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801532e:	6001      	str	r1, [r0, #0]
 8015330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015332:	bf00      	nop
 8015334:	e000ed88 	.word	0xe000ed88

08015338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015338:	b480      	push	{r7}
 801533a:	b085      	sub	sp, #20
 801533c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801533e:	f3ef 8305 	mrs	r3, IPSR
 8015342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2b0f      	cmp	r3, #15
 8015348:	d914      	bls.n	8015374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801534a:	4a17      	ldr	r2, [pc, #92]	; (80153a8 <vPortValidateInterruptPriority+0x70>)
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	4413      	add	r3, r2
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015354:	4b15      	ldr	r3, [pc, #84]	; (80153ac <vPortValidateInterruptPriority+0x74>)
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	7afa      	ldrb	r2, [r7, #11]
 801535a:	429a      	cmp	r2, r3
 801535c:	d20a      	bcs.n	8015374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015362:	f383 8811 	msr	BASEPRI, r3
 8015366:	f3bf 8f6f 	isb	sy
 801536a:	f3bf 8f4f 	dsb	sy
 801536e:	607b      	str	r3, [r7, #4]
}
 8015370:	bf00      	nop
 8015372:	e7fe      	b.n	8015372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015374:	4b0e      	ldr	r3, [pc, #56]	; (80153b0 <vPortValidateInterruptPriority+0x78>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801537c:	4b0d      	ldr	r3, [pc, #52]	; (80153b4 <vPortValidateInterruptPriority+0x7c>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	429a      	cmp	r2, r3
 8015382:	d90a      	bls.n	801539a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015388:	f383 8811 	msr	BASEPRI, r3
 801538c:	f3bf 8f6f 	isb	sy
 8015390:	f3bf 8f4f 	dsb	sy
 8015394:	603b      	str	r3, [r7, #0]
}
 8015396:	bf00      	nop
 8015398:	e7fe      	b.n	8015398 <vPortValidateInterruptPriority+0x60>
	}
 801539a:	bf00      	nop
 801539c:	3714      	adds	r7, #20
 801539e:	46bd      	mov	sp, r7
 80153a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a4:	4770      	bx	lr
 80153a6:	bf00      	nop
 80153a8:	e000e3f0 	.word	0xe000e3f0
 80153ac:	2000499c 	.word	0x2000499c
 80153b0:	e000ed0c 	.word	0xe000ed0c
 80153b4:	200049a0 	.word	0x200049a0

080153b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b08a      	sub	sp, #40	; 0x28
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80153c0:	2300      	movs	r3, #0
 80153c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80153c4:	f7fe ff16 	bl	80141f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80153c8:	4b58      	ldr	r3, [pc, #352]	; (801552c <pvPortMalloc+0x174>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d101      	bne.n	80153d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80153d0:	f000 f910 	bl	80155f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80153d4:	4b56      	ldr	r3, [pc, #344]	; (8015530 <pvPortMalloc+0x178>)
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	4013      	ands	r3, r2
 80153dc:	2b00      	cmp	r3, #0
 80153de:	f040 808e 	bne.w	80154fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d01d      	beq.n	8015424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80153e8:	2208      	movs	r2, #8
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	4413      	add	r3, r2
 80153ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f003 0307 	and.w	r3, r3, #7
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d014      	beq.n	8015424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f023 0307 	bic.w	r3, r3, #7
 8015400:	3308      	adds	r3, #8
 8015402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f003 0307 	and.w	r3, r3, #7
 801540a:	2b00      	cmp	r3, #0
 801540c:	d00a      	beq.n	8015424 <pvPortMalloc+0x6c>
	__asm volatile
 801540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015412:	f383 8811 	msr	BASEPRI, r3
 8015416:	f3bf 8f6f 	isb	sy
 801541a:	f3bf 8f4f 	dsb	sy
 801541e:	617b      	str	r3, [r7, #20]
}
 8015420:	bf00      	nop
 8015422:	e7fe      	b.n	8015422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d069      	beq.n	80154fe <pvPortMalloc+0x146>
 801542a:	4b42      	ldr	r3, [pc, #264]	; (8015534 <pvPortMalloc+0x17c>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	429a      	cmp	r2, r3
 8015432:	d864      	bhi.n	80154fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015434:	4b40      	ldr	r3, [pc, #256]	; (8015538 <pvPortMalloc+0x180>)
 8015436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015438:	4b3f      	ldr	r3, [pc, #252]	; (8015538 <pvPortMalloc+0x180>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801543e:	e004      	b.n	801544a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	687a      	ldr	r2, [r7, #4]
 8015450:	429a      	cmp	r2, r3
 8015452:	d903      	bls.n	801545c <pvPortMalloc+0xa4>
 8015454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d1f1      	bne.n	8015440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801545c:	4b33      	ldr	r3, [pc, #204]	; (801552c <pvPortMalloc+0x174>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015462:	429a      	cmp	r2, r3
 8015464:	d04b      	beq.n	80154fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015466:	6a3b      	ldr	r3, [r7, #32]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	2208      	movs	r2, #8
 801546c:	4413      	add	r3, r2
 801546e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015472:	681a      	ldr	r2, [r3, #0]
 8015474:	6a3b      	ldr	r3, [r7, #32]
 8015476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547a:	685a      	ldr	r2, [r3, #4]
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	1ad2      	subs	r2, r2, r3
 8015480:	2308      	movs	r3, #8
 8015482:	005b      	lsls	r3, r3, #1
 8015484:	429a      	cmp	r2, r3
 8015486:	d91f      	bls.n	80154c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	4413      	add	r3, r2
 801548e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	f003 0307 	and.w	r3, r3, #7
 8015496:	2b00      	cmp	r3, #0
 8015498:	d00a      	beq.n	80154b0 <pvPortMalloc+0xf8>
	__asm volatile
 801549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801549e:	f383 8811 	msr	BASEPRI, r3
 80154a2:	f3bf 8f6f 	isb	sy
 80154a6:	f3bf 8f4f 	dsb	sy
 80154aa:	613b      	str	r3, [r7, #16]
}
 80154ac:	bf00      	nop
 80154ae:	e7fe      	b.n	80154ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80154b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b2:	685a      	ldr	r2, [r3, #4]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	1ad2      	subs	r2, r2, r3
 80154b8:	69bb      	ldr	r3, [r7, #24]
 80154ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80154bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80154c2:	69b8      	ldr	r0, [r7, #24]
 80154c4:	f000 f8f8 	bl	80156b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80154c8:	4b1a      	ldr	r3, [pc, #104]	; (8015534 <pvPortMalloc+0x17c>)
 80154ca:	681a      	ldr	r2, [r3, #0]
 80154cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	1ad3      	subs	r3, r2, r3
 80154d2:	4a18      	ldr	r2, [pc, #96]	; (8015534 <pvPortMalloc+0x17c>)
 80154d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80154d6:	4b17      	ldr	r3, [pc, #92]	; (8015534 <pvPortMalloc+0x17c>)
 80154d8:	681a      	ldr	r2, [r3, #0]
 80154da:	4b18      	ldr	r3, [pc, #96]	; (801553c <pvPortMalloc+0x184>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	429a      	cmp	r2, r3
 80154e0:	d203      	bcs.n	80154ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80154e2:	4b14      	ldr	r3, [pc, #80]	; (8015534 <pvPortMalloc+0x17c>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	4a15      	ldr	r2, [pc, #84]	; (801553c <pvPortMalloc+0x184>)
 80154e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80154ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ec:	685a      	ldr	r2, [r3, #4]
 80154ee:	4b10      	ldr	r3, [pc, #64]	; (8015530 <pvPortMalloc+0x178>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	431a      	orrs	r2, r3
 80154f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80154f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154fa:	2200      	movs	r2, #0
 80154fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80154fe:	f7fe fe87 	bl	8014210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	f003 0307 	and.w	r3, r3, #7
 8015508:	2b00      	cmp	r3, #0
 801550a:	d00a      	beq.n	8015522 <pvPortMalloc+0x16a>
	__asm volatile
 801550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015510:	f383 8811 	msr	BASEPRI, r3
 8015514:	f3bf 8f6f 	isb	sy
 8015518:	f3bf 8f4f 	dsb	sy
 801551c:	60fb      	str	r3, [r7, #12]
}
 801551e:	bf00      	nop
 8015520:	e7fe      	b.n	8015520 <pvPortMalloc+0x168>
	return pvReturn;
 8015522:	69fb      	ldr	r3, [r7, #28]
}
 8015524:	4618      	mov	r0, r3
 8015526:	3728      	adds	r7, #40	; 0x28
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}
 801552c:	200085ac 	.word	0x200085ac
 8015530:	200085b8 	.word	0x200085b8
 8015534:	200085b0 	.word	0x200085b0
 8015538:	200085a4 	.word	0x200085a4
 801553c:	200085b4 	.word	0x200085b4

08015540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b086      	sub	sp, #24
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d048      	beq.n	80155e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015552:	2308      	movs	r3, #8
 8015554:	425b      	negs	r3, r3
 8015556:	697a      	ldr	r2, [r7, #20]
 8015558:	4413      	add	r3, r2
 801555a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	685a      	ldr	r2, [r3, #4]
 8015564:	4b21      	ldr	r3, [pc, #132]	; (80155ec <vPortFree+0xac>)
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	4013      	ands	r3, r2
 801556a:	2b00      	cmp	r3, #0
 801556c:	d10a      	bne.n	8015584 <vPortFree+0x44>
	__asm volatile
 801556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015572:	f383 8811 	msr	BASEPRI, r3
 8015576:	f3bf 8f6f 	isb	sy
 801557a:	f3bf 8f4f 	dsb	sy
 801557e:	60fb      	str	r3, [r7, #12]
}
 8015580:	bf00      	nop
 8015582:	e7fe      	b.n	8015582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d00a      	beq.n	80155a2 <vPortFree+0x62>
	__asm volatile
 801558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015590:	f383 8811 	msr	BASEPRI, r3
 8015594:	f3bf 8f6f 	isb	sy
 8015598:	f3bf 8f4f 	dsb	sy
 801559c:	60bb      	str	r3, [r7, #8]
}
 801559e:	bf00      	nop
 80155a0:	e7fe      	b.n	80155a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	685a      	ldr	r2, [r3, #4]
 80155a6:	4b11      	ldr	r3, [pc, #68]	; (80155ec <vPortFree+0xac>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	4013      	ands	r3, r2
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d019      	beq.n	80155e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d115      	bne.n	80155e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	685a      	ldr	r2, [r3, #4]
 80155bc:	4b0b      	ldr	r3, [pc, #44]	; (80155ec <vPortFree+0xac>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	43db      	mvns	r3, r3
 80155c2:	401a      	ands	r2, r3
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80155c8:	f7fe fe14 	bl	80141f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	685a      	ldr	r2, [r3, #4]
 80155d0:	4b07      	ldr	r3, [pc, #28]	; (80155f0 <vPortFree+0xb0>)
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	4413      	add	r3, r2
 80155d6:	4a06      	ldr	r2, [pc, #24]	; (80155f0 <vPortFree+0xb0>)
 80155d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80155da:	6938      	ldr	r0, [r7, #16]
 80155dc:	f000 f86c 	bl	80156b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80155e0:	f7fe fe16 	bl	8014210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80155e4:	bf00      	nop
 80155e6:	3718      	adds	r7, #24
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}
 80155ec:	200085b8 	.word	0x200085b8
 80155f0:	200085b0 	.word	0x200085b0

080155f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80155f4:	b480      	push	{r7}
 80155f6:	b085      	sub	sp, #20
 80155f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80155fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80155fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015600:	4b27      	ldr	r3, [pc, #156]	; (80156a0 <prvHeapInit+0xac>)
 8015602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	f003 0307 	and.w	r3, r3, #7
 801560a:	2b00      	cmp	r3, #0
 801560c:	d00c      	beq.n	8015628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	3307      	adds	r3, #7
 8015612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	f023 0307 	bic.w	r3, r3, #7
 801561a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801561c:	68ba      	ldr	r2, [r7, #8]
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	1ad3      	subs	r3, r2, r3
 8015622:	4a1f      	ldr	r2, [pc, #124]	; (80156a0 <prvHeapInit+0xac>)
 8015624:	4413      	add	r3, r2
 8015626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801562c:	4a1d      	ldr	r2, [pc, #116]	; (80156a4 <prvHeapInit+0xb0>)
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015632:	4b1c      	ldr	r3, [pc, #112]	; (80156a4 <prvHeapInit+0xb0>)
 8015634:	2200      	movs	r2, #0
 8015636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	68ba      	ldr	r2, [r7, #8]
 801563c:	4413      	add	r3, r2
 801563e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015640:	2208      	movs	r2, #8
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	1a9b      	subs	r3, r3, r2
 8015646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f023 0307 	bic.w	r3, r3, #7
 801564e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	4a15      	ldr	r2, [pc, #84]	; (80156a8 <prvHeapInit+0xb4>)
 8015654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015656:	4b14      	ldr	r3, [pc, #80]	; (80156a8 <prvHeapInit+0xb4>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	2200      	movs	r2, #0
 801565c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801565e:	4b12      	ldr	r3, [pc, #72]	; (80156a8 <prvHeapInit+0xb4>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	2200      	movs	r2, #0
 8015664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	68fa      	ldr	r2, [r7, #12]
 801566e:	1ad2      	subs	r2, r2, r3
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015674:	4b0c      	ldr	r3, [pc, #48]	; (80156a8 <prvHeapInit+0xb4>)
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	4a0a      	ldr	r2, [pc, #40]	; (80156ac <prvHeapInit+0xb8>)
 8015682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	4a09      	ldr	r2, [pc, #36]	; (80156b0 <prvHeapInit+0xbc>)
 801568a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801568c:	4b09      	ldr	r3, [pc, #36]	; (80156b4 <prvHeapInit+0xc0>)
 801568e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015692:	601a      	str	r2, [r3, #0]
}
 8015694:	bf00      	nop
 8015696:	3714      	adds	r7, #20
 8015698:	46bd      	mov	sp, r7
 801569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569e:	4770      	bx	lr
 80156a0:	200049a4 	.word	0x200049a4
 80156a4:	200085a4 	.word	0x200085a4
 80156a8:	200085ac 	.word	0x200085ac
 80156ac:	200085b4 	.word	0x200085b4
 80156b0:	200085b0 	.word	0x200085b0
 80156b4:	200085b8 	.word	0x200085b8

080156b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80156b8:	b480      	push	{r7}
 80156ba:	b085      	sub	sp, #20
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80156c0:	4b28      	ldr	r3, [pc, #160]	; (8015764 <prvInsertBlockIntoFreeList+0xac>)
 80156c2:	60fb      	str	r3, [r7, #12]
 80156c4:	e002      	b.n	80156cc <prvInsertBlockIntoFreeList+0x14>
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	60fb      	str	r3, [r7, #12]
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	687a      	ldr	r2, [r7, #4]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d8f7      	bhi.n	80156c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	68ba      	ldr	r2, [r7, #8]
 80156e0:	4413      	add	r3, r2
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d108      	bne.n	80156fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	685a      	ldr	r2, [r3, #4]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	441a      	add	r2, r3
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	68ba      	ldr	r2, [r7, #8]
 8015704:	441a      	add	r2, r3
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	429a      	cmp	r2, r3
 801570c:	d118      	bne.n	8015740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	681a      	ldr	r2, [r3, #0]
 8015712:	4b15      	ldr	r3, [pc, #84]	; (8015768 <prvInsertBlockIntoFreeList+0xb0>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	429a      	cmp	r2, r3
 8015718:	d00d      	beq.n	8015736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	685a      	ldr	r2, [r3, #4]
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	441a      	add	r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	601a      	str	r2, [r3, #0]
 8015734:	e008      	b.n	8015748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015736:	4b0c      	ldr	r3, [pc, #48]	; (8015768 <prvInsertBlockIntoFreeList+0xb0>)
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	601a      	str	r2, [r3, #0]
 801573e:	e003      	b.n	8015748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015748:	68fa      	ldr	r2, [r7, #12]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	429a      	cmp	r2, r3
 801574e:	d002      	beq.n	8015756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	687a      	ldr	r2, [r7, #4]
 8015754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015756:	bf00      	nop
 8015758:	3714      	adds	r7, #20
 801575a:	46bd      	mov	sp, r7
 801575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015760:	4770      	bx	lr
 8015762:	bf00      	nop
 8015764:	200085a4 	.word	0x200085a4
 8015768:	200085ac 	.word	0x200085ac

0801576c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015770:	2200      	movs	r2, #0
 8015772:	4912      	ldr	r1, [pc, #72]	; (80157bc <MX_USB_DEVICE_Init+0x50>)
 8015774:	4812      	ldr	r0, [pc, #72]	; (80157c0 <MX_USB_DEVICE_Init+0x54>)
 8015776:	f7fc f84f 	bl	8011818 <USBD_Init>
 801577a:	4603      	mov	r3, r0
 801577c:	2b00      	cmp	r3, #0
 801577e:	d001      	beq.n	8015784 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015780:	f7f0 fa94 	bl	8005cac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015784:	490f      	ldr	r1, [pc, #60]	; (80157c4 <MX_USB_DEVICE_Init+0x58>)
 8015786:	480e      	ldr	r0, [pc, #56]	; (80157c0 <MX_USB_DEVICE_Init+0x54>)
 8015788:	f7fc f87c 	bl	8011884 <USBD_RegisterClass>
 801578c:	4603      	mov	r3, r0
 801578e:	2b00      	cmp	r3, #0
 8015790:	d001      	beq.n	8015796 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015792:	f7f0 fa8b 	bl	8005cac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015796:	490c      	ldr	r1, [pc, #48]	; (80157c8 <MX_USB_DEVICE_Init+0x5c>)
 8015798:	4809      	ldr	r0, [pc, #36]	; (80157c0 <MX_USB_DEVICE_Init+0x54>)
 801579a:	f7fb ffa1 	bl	80116e0 <USBD_CDC_RegisterInterface>
 801579e:	4603      	mov	r3, r0
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d001      	beq.n	80157a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80157a4:	f7f0 fa82 	bl	8005cac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80157a8:	4805      	ldr	r0, [pc, #20]	; (80157c0 <MX_USB_DEVICE_Init+0x54>)
 80157aa:	f7fc f88c 	bl	80118c6 <USBD_Start>
 80157ae:	4603      	mov	r3, r0
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d001      	beq.n	80157b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80157b4:	f7f0 fa7a 	bl	8005cac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80157b8:	bf00      	nop
 80157ba:	bd80      	pop	{r7, pc}
 80157bc:	200041c0 	.word	0x200041c0
 80157c0:	20010ea4 	.word	0x20010ea4
 80157c4:	200040a4 	.word	0x200040a4
 80157c8:	200041ac 	.word	0x200041ac

080157cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80157d0:	2200      	movs	r2, #0
 80157d2:	4905      	ldr	r1, [pc, #20]	; (80157e8 <CDC_Init_FS+0x1c>)
 80157d4:	4805      	ldr	r0, [pc, #20]	; (80157ec <CDC_Init_FS+0x20>)
 80157d6:	f7fb ff98 	bl	801170a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80157da:	4905      	ldr	r1, [pc, #20]	; (80157f0 <CDC_Init_FS+0x24>)
 80157dc:	4803      	ldr	r0, [pc, #12]	; (80157ec <CDC_Init_FS+0x20>)
 80157de:	f7fb ffad 	bl	801173c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80157e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	bd80      	pop	{r7, pc}
 80157e8:	20011374 	.word	0x20011374
 80157ec:	20010ea4 	.word	0x20010ea4
 80157f0:	20011174 	.word	0x20011174

080157f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80157f4:	b480      	push	{r7}
 80157f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80157f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015804:	b480      	push	{r7}
 8015806:	b083      	sub	sp, #12
 8015808:	af00      	add	r7, sp, #0
 801580a:	4603      	mov	r3, r0
 801580c:	6039      	str	r1, [r7, #0]
 801580e:	71fb      	strb	r3, [r7, #7]
 8015810:	4613      	mov	r3, r2
 8015812:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015814:	79fb      	ldrb	r3, [r7, #7]
 8015816:	2b23      	cmp	r3, #35	; 0x23
 8015818:	f200 808c 	bhi.w	8015934 <CDC_Control_FS+0x130>
 801581c:	a201      	add	r2, pc, #4	; (adr r2, 8015824 <CDC_Control_FS+0x20>)
 801581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015822:	bf00      	nop
 8015824:	08015935 	.word	0x08015935
 8015828:	08015935 	.word	0x08015935
 801582c:	08015935 	.word	0x08015935
 8015830:	08015935 	.word	0x08015935
 8015834:	08015935 	.word	0x08015935
 8015838:	08015935 	.word	0x08015935
 801583c:	08015935 	.word	0x08015935
 8015840:	08015935 	.word	0x08015935
 8015844:	08015935 	.word	0x08015935
 8015848:	08015935 	.word	0x08015935
 801584c:	08015935 	.word	0x08015935
 8015850:	08015935 	.word	0x08015935
 8015854:	08015935 	.word	0x08015935
 8015858:	08015935 	.word	0x08015935
 801585c:	08015935 	.word	0x08015935
 8015860:	08015935 	.word	0x08015935
 8015864:	08015935 	.word	0x08015935
 8015868:	08015935 	.word	0x08015935
 801586c:	08015935 	.word	0x08015935
 8015870:	08015935 	.word	0x08015935
 8015874:	08015935 	.word	0x08015935
 8015878:	08015935 	.word	0x08015935
 801587c:	08015935 	.word	0x08015935
 8015880:	08015935 	.word	0x08015935
 8015884:	08015935 	.word	0x08015935
 8015888:	08015935 	.word	0x08015935
 801588c:	08015935 	.word	0x08015935
 8015890:	08015935 	.word	0x08015935
 8015894:	08015935 	.word	0x08015935
 8015898:	08015935 	.word	0x08015935
 801589c:	08015935 	.word	0x08015935
 80158a0:	08015935 	.word	0x08015935
 80158a4:	080158b5 	.word	0x080158b5
 80158a8:	080158ef 	.word	0x080158ef
 80158ac:	08015935 	.word	0x08015935
 80158b0:	08015935 	.word	0x08015935
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	781a      	ldrb	r2, [r3, #0]
 80158b8:	4b22      	ldr	r3, [pc, #136]	; (8015944 <CDC_Control_FS+0x140>)
 80158ba:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	785a      	ldrb	r2, [r3, #1]
 80158c0:	4b20      	ldr	r3, [pc, #128]	; (8015944 <CDC_Control_FS+0x140>)
 80158c2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	789a      	ldrb	r2, [r3, #2]
 80158c8:	4b1e      	ldr	r3, [pc, #120]	; (8015944 <CDC_Control_FS+0x140>)
 80158ca:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	78da      	ldrb	r2, [r3, #3]
 80158d0:	4b1c      	ldr	r3, [pc, #112]	; (8015944 <CDC_Control_FS+0x140>)
 80158d2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	791a      	ldrb	r2, [r3, #4]
 80158d8:	4b1a      	ldr	r3, [pc, #104]	; (8015944 <CDC_Control_FS+0x140>)
 80158da:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	795a      	ldrb	r2, [r3, #5]
 80158e0:	4b18      	ldr	r3, [pc, #96]	; (8015944 <CDC_Control_FS+0x140>)
 80158e2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	799a      	ldrb	r2, [r3, #6]
 80158e8:	4b16      	ldr	r3, [pc, #88]	; (8015944 <CDC_Control_FS+0x140>)
 80158ea:	719a      	strb	r2, [r3, #6]
    	break;
 80158ec:	e023      	b.n	8015936 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80158ee:	4b15      	ldr	r3, [pc, #84]	; (8015944 <CDC_Control_FS+0x140>)
 80158f0:	781a      	ldrb	r2, [r3, #0]
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	3301      	adds	r3, #1
 80158fa:	4a12      	ldr	r2, [pc, #72]	; (8015944 <CDC_Control_FS+0x140>)
 80158fc:	7852      	ldrb	r2, [r2, #1]
 80158fe:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	3302      	adds	r3, #2
 8015904:	4a0f      	ldr	r2, [pc, #60]	; (8015944 <CDC_Control_FS+0x140>)
 8015906:	7892      	ldrb	r2, [r2, #2]
 8015908:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	3303      	adds	r3, #3
 801590e:	4a0d      	ldr	r2, [pc, #52]	; (8015944 <CDC_Control_FS+0x140>)
 8015910:	78d2      	ldrb	r2, [r2, #3]
 8015912:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	3304      	adds	r3, #4
 8015918:	4a0a      	ldr	r2, [pc, #40]	; (8015944 <CDC_Control_FS+0x140>)
 801591a:	7912      	ldrb	r2, [r2, #4]
 801591c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	3305      	adds	r3, #5
 8015922:	4a08      	ldr	r2, [pc, #32]	; (8015944 <CDC_Control_FS+0x140>)
 8015924:	7952      	ldrb	r2, [r2, #5]
 8015926:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	3306      	adds	r3, #6
 801592c:	4a05      	ldr	r2, [pc, #20]	; (8015944 <CDC_Control_FS+0x140>)
 801592e:	7992      	ldrb	r2, [r2, #6]
 8015930:	701a      	strb	r2, [r3, #0]
    break;
 8015932:	e000      	b.n	8015936 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015934:	bf00      	nop
  }

  return (USBD_OK);
 8015936:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015938:	4618      	mov	r0, r3
 801593a:	370c      	adds	r7, #12
 801593c:	46bd      	mov	sp, r7
 801593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015942:	4770      	bx	lr
 8015944:	20011574 	.word	0x20011574

08015948 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
 8015950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	b29b      	uxth	r3, r3
 8015958:	461a      	mov	r2, r3
 801595a:	6879      	ldr	r1, [r7, #4]
 801595c:	4807      	ldr	r0, [pc, #28]	; (801597c <CDC_Receive_FS+0x34>)
 801595e:	f7f0 fa37 	bl	8005dd0 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015962:	6879      	ldr	r1, [r7, #4]
 8015964:	4806      	ldr	r0, [pc, #24]	; (8015980 <CDC_Receive_FS+0x38>)
 8015966:	f7fb fee9 	bl	801173c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801596a:	4805      	ldr	r0, [pc, #20]	; (8015980 <CDC_Receive_FS+0x38>)
 801596c:	f7fb ff2a 	bl	80117c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015970:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015972:	4618      	mov	r0, r3
 8015974:	3708      	adds	r7, #8
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop
 801597c:	20000068 	.word	0x20000068
 8015980:	20010ea4 	.word	0x20010ea4

08015984 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b084      	sub	sp, #16
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	460b      	mov	r3, r1
 801598e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015990:	2300      	movs	r3, #0
 8015992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015994:	4b0d      	ldr	r3, [pc, #52]	; (80159cc <CDC_Transmit_FS+0x48>)
 8015996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801599a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801599c:	68bb      	ldr	r3, [r7, #8]
 801599e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d001      	beq.n	80159aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80159a6:	2301      	movs	r3, #1
 80159a8:	e00b      	b.n	80159c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80159aa:	887b      	ldrh	r3, [r7, #2]
 80159ac:	461a      	mov	r2, r3
 80159ae:	6879      	ldr	r1, [r7, #4]
 80159b0:	4806      	ldr	r0, [pc, #24]	; (80159cc <CDC_Transmit_FS+0x48>)
 80159b2:	f7fb feaa 	bl	801170a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80159b6:	4805      	ldr	r0, [pc, #20]	; (80159cc <CDC_Transmit_FS+0x48>)
 80159b8:	f7fb fed4 	bl	8011764 <USBD_CDC_TransmitPacket>
 80159bc:	4603      	mov	r3, r0
 80159be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80159c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
 80159ca:	bf00      	nop
 80159cc:	20010ea4 	.word	0x20010ea4

080159d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80159d0:	b480      	push	{r7}
 80159d2:	b087      	sub	sp, #28
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	60f8      	str	r0, [r7, #12]
 80159d8:	60b9      	str	r1, [r7, #8]
 80159da:	4613      	mov	r3, r2
 80159dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80159de:	2300      	movs	r3, #0
 80159e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80159e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	371c      	adds	r7, #28
 80159ea:	46bd      	mov	sp, r7
 80159ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f0:	4770      	bx	lr
	...

080159f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b083      	sub	sp, #12
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	4603      	mov	r3, r0
 80159fc:	6039      	str	r1, [r7, #0]
 80159fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	2212      	movs	r2, #18
 8015a04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015a06:	4b03      	ldr	r3, [pc, #12]	; (8015a14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	370c      	adds	r7, #12
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a12:	4770      	bx	lr
 8015a14:	200041dc 	.word	0x200041dc

08015a18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b083      	sub	sp, #12
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	4603      	mov	r3, r0
 8015a20:	6039      	str	r1, [r7, #0]
 8015a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	2204      	movs	r2, #4
 8015a28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015a2a:	4b03      	ldr	r3, [pc, #12]	; (8015a38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	370c      	adds	r7, #12
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr
 8015a38:	200041f0 	.word	0x200041f0

08015a3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	4603      	mov	r3, r0
 8015a44:	6039      	str	r1, [r7, #0]
 8015a46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a48:	79fb      	ldrb	r3, [r7, #7]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d105      	bne.n	8015a5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015a4e:	683a      	ldr	r2, [r7, #0]
 8015a50:	4907      	ldr	r1, [pc, #28]	; (8015a70 <USBD_FS_ProductStrDescriptor+0x34>)
 8015a52:	4808      	ldr	r0, [pc, #32]	; (8015a74 <USBD_FS_ProductStrDescriptor+0x38>)
 8015a54:	f7fc ff14 	bl	8012880 <USBD_GetString>
 8015a58:	e004      	b.n	8015a64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015a5a:	683a      	ldr	r2, [r7, #0]
 8015a5c:	4904      	ldr	r1, [pc, #16]	; (8015a70 <USBD_FS_ProductStrDescriptor+0x34>)
 8015a5e:	4805      	ldr	r0, [pc, #20]	; (8015a74 <USBD_FS_ProductStrDescriptor+0x38>)
 8015a60:	f7fc ff0e 	bl	8012880 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a64:	4b02      	ldr	r3, [pc, #8]	; (8015a70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3708      	adds	r7, #8
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
 8015a6e:	bf00      	nop
 8015a70:	2001157c 	.word	0x2001157c
 8015a74:	0801c7b4 	.word	0x0801c7b4

08015a78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	4603      	mov	r3, r0
 8015a80:	6039      	str	r1, [r7, #0]
 8015a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015a84:	683a      	ldr	r2, [r7, #0]
 8015a86:	4904      	ldr	r1, [pc, #16]	; (8015a98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015a88:	4804      	ldr	r0, [pc, #16]	; (8015a9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015a8a:	f7fc fef9 	bl	8012880 <USBD_GetString>
  return USBD_StrDesc;
 8015a8e:	4b02      	ldr	r3, [pc, #8]	; (8015a98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3708      	adds	r7, #8
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	2001157c 	.word	0x2001157c
 8015a9c:	0801c7cc 	.word	0x0801c7cc

08015aa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b082      	sub	sp, #8
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	6039      	str	r1, [r7, #0]
 8015aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	221a      	movs	r2, #26
 8015ab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015ab2:	f000 f843 	bl	8015b3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015ab6:	4b02      	ldr	r3, [pc, #8]	; (8015ac0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3708      	adds	r7, #8
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	200041f4 	.word	0x200041f4

08015ac4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	4603      	mov	r3, r0
 8015acc:	6039      	str	r1, [r7, #0]
 8015ace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015ad0:	79fb      	ldrb	r3, [r7, #7]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d105      	bne.n	8015ae2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ad6:	683a      	ldr	r2, [r7, #0]
 8015ad8:	4907      	ldr	r1, [pc, #28]	; (8015af8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015ada:	4808      	ldr	r0, [pc, #32]	; (8015afc <USBD_FS_ConfigStrDescriptor+0x38>)
 8015adc:	f7fc fed0 	bl	8012880 <USBD_GetString>
 8015ae0:	e004      	b.n	8015aec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	4904      	ldr	r1, [pc, #16]	; (8015af8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015ae6:	4805      	ldr	r0, [pc, #20]	; (8015afc <USBD_FS_ConfigStrDescriptor+0x38>)
 8015ae8:	f7fc feca 	bl	8012880 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015aec:	4b02      	ldr	r3, [pc, #8]	; (8015af8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3708      	adds	r7, #8
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
 8015af6:	bf00      	nop
 8015af8:	2001157c 	.word	0x2001157c
 8015afc:	0801c7e0 	.word	0x0801c7e0

08015b00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b082      	sub	sp, #8
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	4603      	mov	r3, r0
 8015b08:	6039      	str	r1, [r7, #0]
 8015b0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015b0c:	79fb      	ldrb	r3, [r7, #7]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d105      	bne.n	8015b1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015b12:	683a      	ldr	r2, [r7, #0]
 8015b14:	4907      	ldr	r1, [pc, #28]	; (8015b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015b16:	4808      	ldr	r0, [pc, #32]	; (8015b38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015b18:	f7fc feb2 	bl	8012880 <USBD_GetString>
 8015b1c:	e004      	b.n	8015b28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015b1e:	683a      	ldr	r2, [r7, #0]
 8015b20:	4904      	ldr	r1, [pc, #16]	; (8015b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015b22:	4805      	ldr	r0, [pc, #20]	; (8015b38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015b24:	f7fc feac 	bl	8012880 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b28:	4b02      	ldr	r3, [pc, #8]	; (8015b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}
 8015b32:	bf00      	nop
 8015b34:	2001157c 	.word	0x2001157c
 8015b38:	0801c7ec 	.word	0x0801c7ec

08015b3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015b42:	4b0f      	ldr	r3, [pc, #60]	; (8015b80 <Get_SerialNum+0x44>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015b48:	4b0e      	ldr	r3, [pc, #56]	; (8015b84 <Get_SerialNum+0x48>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015b4e:	4b0e      	ldr	r3, [pc, #56]	; (8015b88 <Get_SerialNum+0x4c>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015b54:	68fa      	ldr	r2, [r7, #12]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	4413      	add	r3, r2
 8015b5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d009      	beq.n	8015b76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015b62:	2208      	movs	r2, #8
 8015b64:	4909      	ldr	r1, [pc, #36]	; (8015b8c <Get_SerialNum+0x50>)
 8015b66:	68f8      	ldr	r0, [r7, #12]
 8015b68:	f000 f814 	bl	8015b94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015b6c:	2204      	movs	r2, #4
 8015b6e:	4908      	ldr	r1, [pc, #32]	; (8015b90 <Get_SerialNum+0x54>)
 8015b70:	68b8      	ldr	r0, [r7, #8]
 8015b72:	f000 f80f 	bl	8015b94 <IntToUnicode>
  }
}
 8015b76:	bf00      	nop
 8015b78:	3710      	adds	r7, #16
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}
 8015b7e:	bf00      	nop
 8015b80:	1fff7a10 	.word	0x1fff7a10
 8015b84:	1fff7a14 	.word	0x1fff7a14
 8015b88:	1fff7a18 	.word	0x1fff7a18
 8015b8c:	200041f6 	.word	0x200041f6
 8015b90:	20004206 	.word	0x20004206

08015b94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015b94:	b480      	push	{r7}
 8015b96:	b087      	sub	sp, #28
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	60f8      	str	r0, [r7, #12]
 8015b9c:	60b9      	str	r1, [r7, #8]
 8015b9e:	4613      	mov	r3, r2
 8015ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	75fb      	strb	r3, [r7, #23]
 8015baa:	e027      	b.n	8015bfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	0f1b      	lsrs	r3, r3, #28
 8015bb0:	2b09      	cmp	r3, #9
 8015bb2:	d80b      	bhi.n	8015bcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	0f1b      	lsrs	r3, r3, #28
 8015bb8:	b2da      	uxtb	r2, r3
 8015bba:	7dfb      	ldrb	r3, [r7, #23]
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	440b      	add	r3, r1
 8015bc4:	3230      	adds	r2, #48	; 0x30
 8015bc6:	b2d2      	uxtb	r2, r2
 8015bc8:	701a      	strb	r2, [r3, #0]
 8015bca:	e00a      	b.n	8015be2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	0f1b      	lsrs	r3, r3, #28
 8015bd0:	b2da      	uxtb	r2, r3
 8015bd2:	7dfb      	ldrb	r3, [r7, #23]
 8015bd4:	005b      	lsls	r3, r3, #1
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	440b      	add	r3, r1
 8015bdc:	3237      	adds	r2, #55	; 0x37
 8015bde:	b2d2      	uxtb	r2, r2
 8015be0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	011b      	lsls	r3, r3, #4
 8015be6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015be8:	7dfb      	ldrb	r3, [r7, #23]
 8015bea:	005b      	lsls	r3, r3, #1
 8015bec:	3301      	adds	r3, #1
 8015bee:	68ba      	ldr	r2, [r7, #8]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015bf6:	7dfb      	ldrb	r3, [r7, #23]
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	75fb      	strb	r3, [r7, #23]
 8015bfc:	7dfa      	ldrb	r2, [r7, #23]
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	429a      	cmp	r2, r3
 8015c02:	d3d3      	bcc.n	8015bac <IntToUnicode+0x18>
  }
}
 8015c04:	bf00      	nop
 8015c06:	bf00      	nop
 8015c08:	371c      	adds	r7, #28
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c10:	4770      	bx	lr
	...

08015c14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b08a      	sub	sp, #40	; 0x28
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c1c:	f107 0314 	add.w	r3, r7, #20
 8015c20:	2200      	movs	r2, #0
 8015c22:	601a      	str	r2, [r3, #0]
 8015c24:	605a      	str	r2, [r3, #4]
 8015c26:	609a      	str	r2, [r3, #8]
 8015c28:	60da      	str	r2, [r3, #12]
 8015c2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015c34:	d13a      	bne.n	8015cac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015c36:	2300      	movs	r3, #0
 8015c38:	613b      	str	r3, [r7, #16]
 8015c3a:	4b1e      	ldr	r3, [pc, #120]	; (8015cb4 <HAL_PCD_MspInit+0xa0>)
 8015c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c3e:	4a1d      	ldr	r2, [pc, #116]	; (8015cb4 <HAL_PCD_MspInit+0xa0>)
 8015c40:	f043 0301 	orr.w	r3, r3, #1
 8015c44:	6313      	str	r3, [r2, #48]	; 0x30
 8015c46:	4b1b      	ldr	r3, [pc, #108]	; (8015cb4 <HAL_PCD_MspInit+0xa0>)
 8015c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c4a:	f003 0301 	and.w	r3, r3, #1
 8015c4e:	613b      	str	r3, [r7, #16]
 8015c50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015c52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c58:	2302      	movs	r3, #2
 8015c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c60:	2303      	movs	r3, #3
 8015c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015c64:	230a      	movs	r3, #10
 8015c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015c68:	f107 0314 	add.w	r3, r7, #20
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	4812      	ldr	r0, [pc, #72]	; (8015cb8 <HAL_PCD_MspInit+0xa4>)
 8015c70:	f7f6 fb4a 	bl	800c308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015c74:	4b0f      	ldr	r3, [pc, #60]	; (8015cb4 <HAL_PCD_MspInit+0xa0>)
 8015c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c78:	4a0e      	ldr	r2, [pc, #56]	; (8015cb4 <HAL_PCD_MspInit+0xa0>)
 8015c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c7e:	6353      	str	r3, [r2, #52]	; 0x34
 8015c80:	2300      	movs	r3, #0
 8015c82:	60fb      	str	r3, [r7, #12]
 8015c84:	4b0b      	ldr	r3, [pc, #44]	; (8015cb4 <HAL_PCD_MspInit+0xa0>)
 8015c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c88:	4a0a      	ldr	r2, [pc, #40]	; (8015cb4 <HAL_PCD_MspInit+0xa0>)
 8015c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015c8e:	6453      	str	r3, [r2, #68]	; 0x44
 8015c90:	4b08      	ldr	r3, [pc, #32]	; (8015cb4 <HAL_PCD_MspInit+0xa0>)
 8015c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015c98:	60fb      	str	r3, [r7, #12]
 8015c9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	2105      	movs	r1, #5
 8015ca0:	2043      	movs	r0, #67	; 0x43
 8015ca2:	f7f5 ff67 	bl	800bb74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015ca6:	2043      	movs	r0, #67	; 0x43
 8015ca8:	f7f5 ff80 	bl	800bbac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015cac:	bf00      	nop
 8015cae:	3728      	adds	r7, #40	; 0x28
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}
 8015cb4:	40023800 	.word	0x40023800
 8015cb8:	40020000 	.word	0x40020000

08015cbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b082      	sub	sp, #8
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015cd0:	4619      	mov	r1, r3
 8015cd2:	4610      	mov	r0, r2
 8015cd4:	f7fb fe42 	bl	801195c <USBD_LL_SetupStage>
}
 8015cd8:	bf00      	nop
 8015cda:	3708      	adds	r7, #8
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}

08015ce0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
 8015ce8:	460b      	mov	r3, r1
 8015cea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015cf2:	78fa      	ldrb	r2, [r7, #3]
 8015cf4:	6879      	ldr	r1, [r7, #4]
 8015cf6:	4613      	mov	r3, r2
 8015cf8:	00db      	lsls	r3, r3, #3
 8015cfa:	1a9b      	subs	r3, r3, r2
 8015cfc:	009b      	lsls	r3, r3, #2
 8015cfe:	440b      	add	r3, r1
 8015d00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	78fb      	ldrb	r3, [r7, #3]
 8015d08:	4619      	mov	r1, r3
 8015d0a:	f7fb fe7c 	bl	8011a06 <USBD_LL_DataOutStage>
}
 8015d0e:	bf00      	nop
 8015d10:	3708      	adds	r7, #8
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bd80      	pop	{r7, pc}

08015d16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d16:	b580      	push	{r7, lr}
 8015d18:	b082      	sub	sp, #8
 8015d1a:	af00      	add	r7, sp, #0
 8015d1c:	6078      	str	r0, [r7, #4]
 8015d1e:	460b      	mov	r3, r1
 8015d20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015d28:	78fa      	ldrb	r2, [r7, #3]
 8015d2a:	6879      	ldr	r1, [r7, #4]
 8015d2c:	4613      	mov	r3, r2
 8015d2e:	00db      	lsls	r3, r3, #3
 8015d30:	1a9b      	subs	r3, r3, r2
 8015d32:	009b      	lsls	r3, r3, #2
 8015d34:	440b      	add	r3, r1
 8015d36:	3348      	adds	r3, #72	; 0x48
 8015d38:	681a      	ldr	r2, [r3, #0]
 8015d3a:	78fb      	ldrb	r3, [r7, #3]
 8015d3c:	4619      	mov	r1, r3
 8015d3e:	f7fb fec5 	bl	8011acc <USBD_LL_DataInStage>
}
 8015d42:	bf00      	nop
 8015d44:	3708      	adds	r7, #8
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}

08015d4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b082      	sub	sp, #8
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7fb ffc9 	bl	8011cf0 <USBD_LL_SOF>
}
 8015d5e:	bf00      	nop
 8015d60:	3708      	adds	r7, #8
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}

08015d66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d66:	b580      	push	{r7, lr}
 8015d68:	b084      	sub	sp, #16
 8015d6a:	af00      	add	r7, sp, #0
 8015d6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015d6e:	2301      	movs	r3, #1
 8015d70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	68db      	ldr	r3, [r3, #12]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d102      	bne.n	8015d80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	73fb      	strb	r3, [r7, #15]
 8015d7e:	e008      	b.n	8015d92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	2b02      	cmp	r3, #2
 8015d86:	d102      	bne.n	8015d8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015d88:	2301      	movs	r3, #1
 8015d8a:	73fb      	strb	r3, [r7, #15]
 8015d8c:	e001      	b.n	8015d92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015d8e:	f7ef ff8d 	bl	8005cac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d98:	7bfa      	ldrb	r2, [r7, #15]
 8015d9a:	4611      	mov	r1, r2
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f7fb ff6c 	bl	8011c7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7fb ff25 	bl	8011bf8 <USBD_LL_Reset>
}
 8015dae:	bf00      	nop
 8015db0:	3710      	adds	r7, #16
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}
	...

08015db8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7fb ff67 	bl	8011c9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	687a      	ldr	r2, [r7, #4]
 8015dd8:	6812      	ldr	r2, [r2, #0]
 8015dda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015dde:	f043 0301 	orr.w	r3, r3, #1
 8015de2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6a1b      	ldr	r3, [r3, #32]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d005      	beq.n	8015df8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015dec:	4b04      	ldr	r3, [pc, #16]	; (8015e00 <HAL_PCD_SuspendCallback+0x48>)
 8015dee:	691b      	ldr	r3, [r3, #16]
 8015df0:	4a03      	ldr	r2, [pc, #12]	; (8015e00 <HAL_PCD_SuspendCallback+0x48>)
 8015df2:	f043 0306 	orr.w	r3, r3, #6
 8015df6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015df8:	bf00      	nop
 8015dfa:	3708      	adds	r7, #8
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	e000ed00 	.word	0xe000ed00

08015e04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b082      	sub	sp, #8
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e12:	4618      	mov	r0, r3
 8015e14:	f7fb ff56 	bl	8011cc4 <USBD_LL_Resume>
}
 8015e18:	bf00      	nop
 8015e1a:	3708      	adds	r7, #8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	460b      	mov	r3, r1
 8015e2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e32:	78fa      	ldrb	r2, [r7, #3]
 8015e34:	4611      	mov	r1, r2
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7fb ff81 	bl	8011d3e <USBD_LL_IsoOUTIncomplete>
}
 8015e3c:	bf00      	nop
 8015e3e:	3708      	adds	r7, #8
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}

08015e44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	460b      	mov	r3, r1
 8015e4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e56:	78fa      	ldrb	r2, [r7, #3]
 8015e58:	4611      	mov	r1, r2
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7fb ff62 	bl	8011d24 <USBD_LL_IsoINIncomplete>
}
 8015e60:	bf00      	nop
 8015e62:	3708      	adds	r7, #8
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}

08015e68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7fb ff6e 	bl	8011d58 <USBD_LL_DevConnected>
}
 8015e7c:	bf00      	nop
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7fb ff6b 	bl	8011d6e <USBD_LL_DevDisconnected>
}
 8015e98:	bf00      	nop
 8015e9a:	3708      	adds	r7, #8
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}

08015ea0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b082      	sub	sp, #8
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d13c      	bne.n	8015f2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015eb0:	4a20      	ldr	r2, [pc, #128]	; (8015f34 <USBD_LL_Init+0x94>)
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	4a1e      	ldr	r2, [pc, #120]	; (8015f34 <USBD_LL_Init+0x94>)
 8015ebc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015ec0:	4b1c      	ldr	r3, [pc, #112]	; (8015f34 <USBD_LL_Init+0x94>)
 8015ec2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015ec6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015ec8:	4b1a      	ldr	r3, [pc, #104]	; (8015f34 <USBD_LL_Init+0x94>)
 8015eca:	2204      	movs	r2, #4
 8015ecc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015ece:	4b19      	ldr	r3, [pc, #100]	; (8015f34 <USBD_LL_Init+0x94>)
 8015ed0:	2202      	movs	r2, #2
 8015ed2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015ed4:	4b17      	ldr	r3, [pc, #92]	; (8015f34 <USBD_LL_Init+0x94>)
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015eda:	4b16      	ldr	r3, [pc, #88]	; (8015f34 <USBD_LL_Init+0x94>)
 8015edc:	2202      	movs	r2, #2
 8015ede:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015ee0:	4b14      	ldr	r3, [pc, #80]	; (8015f34 <USBD_LL_Init+0x94>)
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015ee6:	4b13      	ldr	r3, [pc, #76]	; (8015f34 <USBD_LL_Init+0x94>)
 8015ee8:	2200      	movs	r2, #0
 8015eea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015eec:	4b11      	ldr	r3, [pc, #68]	; (8015f34 <USBD_LL_Init+0x94>)
 8015eee:	2200      	movs	r2, #0
 8015ef0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015ef2:	4b10      	ldr	r3, [pc, #64]	; (8015f34 <USBD_LL_Init+0x94>)
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015ef8:	4b0e      	ldr	r3, [pc, #56]	; (8015f34 <USBD_LL_Init+0x94>)
 8015efa:	2200      	movs	r2, #0
 8015efc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015efe:	480d      	ldr	r0, [pc, #52]	; (8015f34 <USBD_LL_Init+0x94>)
 8015f00:	f7f6 fc0e 	bl	800c720 <HAL_PCD_Init>
 8015f04:	4603      	mov	r3, r0
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d001      	beq.n	8015f0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015f0a:	f7ef fecf 	bl	8005cac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015f0e:	2180      	movs	r1, #128	; 0x80
 8015f10:	4808      	ldr	r0, [pc, #32]	; (8015f34 <USBD_LL_Init+0x94>)
 8015f12:	f7f7 fd6c 	bl	800d9ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015f16:	2240      	movs	r2, #64	; 0x40
 8015f18:	2100      	movs	r1, #0
 8015f1a:	4806      	ldr	r0, [pc, #24]	; (8015f34 <USBD_LL_Init+0x94>)
 8015f1c:	f7f7 fd20 	bl	800d960 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015f20:	2280      	movs	r2, #128	; 0x80
 8015f22:	2101      	movs	r1, #1
 8015f24:	4803      	ldr	r0, [pc, #12]	; (8015f34 <USBD_LL_Init+0x94>)
 8015f26:	f7f7 fd1b 	bl	800d960 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015f2a:	2300      	movs	r3, #0
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3708      	adds	r7, #8
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}
 8015f34:	2001177c 	.word	0x2001177c

08015f38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b084      	sub	sp, #16
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f40:	2300      	movs	r3, #0
 8015f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f44:	2300      	movs	r3, #0
 8015f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7f6 fd03 	bl	800c95a <HAL_PCD_Start>
 8015f54:	4603      	mov	r3, r0
 8015f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f58:	7bfb      	ldrb	r3, [r7, #15]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f000 f92a 	bl	80161b4 <USBD_Get_USB_Status>
 8015f60:	4603      	mov	r3, r0
 8015f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3710      	adds	r7, #16
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}

08015f6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015f6e:	b580      	push	{r7, lr}
 8015f70:	b084      	sub	sp, #16
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
 8015f76:	4608      	mov	r0, r1
 8015f78:	4611      	mov	r1, r2
 8015f7a:	461a      	mov	r2, r3
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	70fb      	strb	r3, [r7, #3]
 8015f80:	460b      	mov	r3, r1
 8015f82:	70bb      	strb	r3, [r7, #2]
 8015f84:	4613      	mov	r3, r2
 8015f86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015f96:	78bb      	ldrb	r3, [r7, #2]
 8015f98:	883a      	ldrh	r2, [r7, #0]
 8015f9a:	78f9      	ldrb	r1, [r7, #3]
 8015f9c:	f7f7 f8e7 	bl	800d16e <HAL_PCD_EP_Open>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fa4:	7bfb      	ldrb	r3, [r7, #15]
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f000 f904 	bl	80161b4 <USBD_Get_USB_Status>
 8015fac:	4603      	mov	r3, r0
 8015fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3710      	adds	r7, #16
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}

08015fba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fba:	b580      	push	{r7, lr}
 8015fbc:	b084      	sub	sp, #16
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	6078      	str	r0, [r7, #4]
 8015fc2:	460b      	mov	r3, r1
 8015fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015fd4:	78fa      	ldrb	r2, [r7, #3]
 8015fd6:	4611      	mov	r1, r2
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7f7 f930 	bl	800d23e <HAL_PCD_EP_Close>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fe2:	7bfb      	ldrb	r3, [r7, #15]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f000 f8e5 	bl	80161b4 <USBD_Get_USB_Status>
 8015fea:	4603      	mov	r3, r0
 8015fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3710      	adds	r7, #16
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	460b      	mov	r3, r1
 8016002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016004:	2300      	movs	r3, #0
 8016006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016008:	2300      	movs	r3, #0
 801600a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016012:	78fa      	ldrb	r2, [r7, #3]
 8016014:	4611      	mov	r1, r2
 8016016:	4618      	mov	r0, r3
 8016018:	f7f7 fa08 	bl	800d42c <HAL_PCD_EP_SetStall>
 801601c:	4603      	mov	r3, r0
 801601e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016020:	7bfb      	ldrb	r3, [r7, #15]
 8016022:	4618      	mov	r0, r3
 8016024:	f000 f8c6 	bl	80161b4 <USBD_Get_USB_Status>
 8016028:	4603      	mov	r3, r0
 801602a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801602c:	7bbb      	ldrb	r3, [r7, #14]
}
 801602e:	4618      	mov	r0, r3
 8016030:	3710      	adds	r7, #16
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}

08016036 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016036:	b580      	push	{r7, lr}
 8016038:	b084      	sub	sp, #16
 801603a:	af00      	add	r7, sp, #0
 801603c:	6078      	str	r0, [r7, #4]
 801603e:	460b      	mov	r3, r1
 8016040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016042:	2300      	movs	r3, #0
 8016044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016046:	2300      	movs	r3, #0
 8016048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016050:	78fa      	ldrb	r2, [r7, #3]
 8016052:	4611      	mov	r1, r2
 8016054:	4618      	mov	r0, r3
 8016056:	f7f7 fa4d 	bl	800d4f4 <HAL_PCD_EP_ClrStall>
 801605a:	4603      	mov	r3, r0
 801605c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801605e:	7bfb      	ldrb	r3, [r7, #15]
 8016060:	4618      	mov	r0, r3
 8016062:	f000 f8a7 	bl	80161b4 <USBD_Get_USB_Status>
 8016066:	4603      	mov	r3, r0
 8016068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801606a:	7bbb      	ldrb	r3, [r7, #14]
}
 801606c:	4618      	mov	r0, r3
 801606e:	3710      	adds	r7, #16
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}

08016074 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016074:	b480      	push	{r7}
 8016076:	b085      	sub	sp, #20
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
 801607c:	460b      	mov	r3, r1
 801607e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016086:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801608c:	2b00      	cmp	r3, #0
 801608e:	da0b      	bge.n	80160a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016090:	78fb      	ldrb	r3, [r7, #3]
 8016092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016096:	68f9      	ldr	r1, [r7, #12]
 8016098:	4613      	mov	r3, r2
 801609a:	00db      	lsls	r3, r3, #3
 801609c:	1a9b      	subs	r3, r3, r2
 801609e:	009b      	lsls	r3, r3, #2
 80160a0:	440b      	add	r3, r1
 80160a2:	333e      	adds	r3, #62	; 0x3e
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	e00b      	b.n	80160c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80160a8:	78fb      	ldrb	r3, [r7, #3]
 80160aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80160ae:	68f9      	ldr	r1, [r7, #12]
 80160b0:	4613      	mov	r3, r2
 80160b2:	00db      	lsls	r3, r3, #3
 80160b4:	1a9b      	subs	r3, r3, r2
 80160b6:	009b      	lsls	r3, r3, #2
 80160b8:	440b      	add	r3, r1
 80160ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80160be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3714      	adds	r7, #20
 80160c4:	46bd      	mov	sp, r7
 80160c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ca:	4770      	bx	lr

080160cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	460b      	mov	r3, r1
 80160d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160d8:	2300      	movs	r3, #0
 80160da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160dc:	2300      	movs	r3, #0
 80160de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80160e6:	78fa      	ldrb	r2, [r7, #3]
 80160e8:	4611      	mov	r1, r2
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7f7 f81a 	bl	800d124 <HAL_PCD_SetAddress>
 80160f0:	4603      	mov	r3, r0
 80160f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160f4:	7bfb      	ldrb	r3, [r7, #15]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f000 f85c 	bl	80161b4 <USBD_Get_USB_Status>
 80160fc:	4603      	mov	r3, r0
 80160fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016100:	7bbb      	ldrb	r3, [r7, #14]
}
 8016102:	4618      	mov	r0, r3
 8016104:	3710      	adds	r7, #16
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801610a:	b580      	push	{r7, lr}
 801610c:	b086      	sub	sp, #24
 801610e:	af00      	add	r7, sp, #0
 8016110:	60f8      	str	r0, [r7, #12]
 8016112:	607a      	str	r2, [r7, #4]
 8016114:	603b      	str	r3, [r7, #0]
 8016116:	460b      	mov	r3, r1
 8016118:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801611a:	2300      	movs	r3, #0
 801611c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801611e:	2300      	movs	r3, #0
 8016120:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016128:	7af9      	ldrb	r1, [r7, #11]
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	687a      	ldr	r2, [r7, #4]
 801612e:	f7f7 f933 	bl	800d398 <HAL_PCD_EP_Transmit>
 8016132:	4603      	mov	r3, r0
 8016134:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016136:	7dfb      	ldrb	r3, [r7, #23]
 8016138:	4618      	mov	r0, r3
 801613a:	f000 f83b 	bl	80161b4 <USBD_Get_USB_Status>
 801613e:	4603      	mov	r3, r0
 8016140:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016142:	7dbb      	ldrb	r3, [r7, #22]
}
 8016144:	4618      	mov	r0, r3
 8016146:	3718      	adds	r7, #24
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b086      	sub	sp, #24
 8016150:	af00      	add	r7, sp, #0
 8016152:	60f8      	str	r0, [r7, #12]
 8016154:	607a      	str	r2, [r7, #4]
 8016156:	603b      	str	r3, [r7, #0]
 8016158:	460b      	mov	r3, r1
 801615a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801615c:	2300      	movs	r3, #0
 801615e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016160:	2300      	movs	r3, #0
 8016162:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801616a:	7af9      	ldrb	r1, [r7, #11]
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	f7f7 f8af 	bl	800d2d2 <HAL_PCD_EP_Receive>
 8016174:	4603      	mov	r3, r0
 8016176:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016178:	7dfb      	ldrb	r3, [r7, #23]
 801617a:	4618      	mov	r0, r3
 801617c:	f000 f81a 	bl	80161b4 <USBD_Get_USB_Status>
 8016180:	4603      	mov	r3, r0
 8016182:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016184:	7dbb      	ldrb	r3, [r7, #22]
}
 8016186:	4618      	mov	r0, r3
 8016188:	3718      	adds	r7, #24
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}

0801618e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801618e:	b580      	push	{r7, lr}
 8016190:	b082      	sub	sp, #8
 8016192:	af00      	add	r7, sp, #0
 8016194:	6078      	str	r0, [r7, #4]
 8016196:	460b      	mov	r3, r1
 8016198:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80161a0:	78fa      	ldrb	r2, [r7, #3]
 80161a2:	4611      	mov	r1, r2
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7f7 f8df 	bl	800d368 <HAL_PCD_EP_GetRxCount>
 80161aa:	4603      	mov	r3, r0
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3708      	adds	r7, #8
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}

080161b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80161b4:	b480      	push	{r7}
 80161b6:	b085      	sub	sp, #20
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	4603      	mov	r3, r0
 80161bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161be:	2300      	movs	r3, #0
 80161c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80161c2:	79fb      	ldrb	r3, [r7, #7]
 80161c4:	2b03      	cmp	r3, #3
 80161c6:	d817      	bhi.n	80161f8 <USBD_Get_USB_Status+0x44>
 80161c8:	a201      	add	r2, pc, #4	; (adr r2, 80161d0 <USBD_Get_USB_Status+0x1c>)
 80161ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161ce:	bf00      	nop
 80161d0:	080161e1 	.word	0x080161e1
 80161d4:	080161e7 	.word	0x080161e7
 80161d8:	080161ed 	.word	0x080161ed
 80161dc:	080161f3 	.word	0x080161f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80161e0:	2300      	movs	r3, #0
 80161e2:	73fb      	strb	r3, [r7, #15]
    break;
 80161e4:	e00b      	b.n	80161fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80161e6:	2303      	movs	r3, #3
 80161e8:	73fb      	strb	r3, [r7, #15]
    break;
 80161ea:	e008      	b.n	80161fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80161ec:	2301      	movs	r3, #1
 80161ee:	73fb      	strb	r3, [r7, #15]
    break;
 80161f0:	e005      	b.n	80161fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80161f2:	2303      	movs	r3, #3
 80161f4:	73fb      	strb	r3, [r7, #15]
    break;
 80161f6:	e002      	b.n	80161fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80161f8:	2303      	movs	r3, #3
 80161fa:	73fb      	strb	r3, [r7, #15]
    break;
 80161fc:	bf00      	nop
  }
  return usb_status;
 80161fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016200:	4618      	mov	r0, r3
 8016202:	3714      	adds	r7, #20
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <__errno>:
 801620c:	4b01      	ldr	r3, [pc, #4]	; (8016214 <__errno+0x8>)
 801620e:	6818      	ldr	r0, [r3, #0]
 8016210:	4770      	bx	lr
 8016212:	bf00      	nop
 8016214:	20004210 	.word	0x20004210

08016218 <__libc_init_array>:
 8016218:	b570      	push	{r4, r5, r6, lr}
 801621a:	4d0d      	ldr	r5, [pc, #52]	; (8016250 <__libc_init_array+0x38>)
 801621c:	4c0d      	ldr	r4, [pc, #52]	; (8016254 <__libc_init_array+0x3c>)
 801621e:	1b64      	subs	r4, r4, r5
 8016220:	10a4      	asrs	r4, r4, #2
 8016222:	2600      	movs	r6, #0
 8016224:	42a6      	cmp	r6, r4
 8016226:	d109      	bne.n	801623c <__libc_init_array+0x24>
 8016228:	4d0b      	ldr	r5, [pc, #44]	; (8016258 <__libc_init_array+0x40>)
 801622a:	4c0c      	ldr	r4, [pc, #48]	; (801625c <__libc_init_array+0x44>)
 801622c:	f006 f972 	bl	801c514 <_init>
 8016230:	1b64      	subs	r4, r4, r5
 8016232:	10a4      	asrs	r4, r4, #2
 8016234:	2600      	movs	r6, #0
 8016236:	42a6      	cmp	r6, r4
 8016238:	d105      	bne.n	8016246 <__libc_init_array+0x2e>
 801623a:	bd70      	pop	{r4, r5, r6, pc}
 801623c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016240:	4798      	blx	r3
 8016242:	3601      	adds	r6, #1
 8016244:	e7ee      	b.n	8016224 <__libc_init_array+0xc>
 8016246:	f855 3b04 	ldr.w	r3, [r5], #4
 801624a:	4798      	blx	r3
 801624c:	3601      	adds	r6, #1
 801624e:	e7f2      	b.n	8016236 <__libc_init_array+0x1e>
 8016250:	0801cf28 	.word	0x0801cf28
 8016254:	0801cf28 	.word	0x0801cf28
 8016258:	0801cf28 	.word	0x0801cf28
 801625c:	0801cf2c 	.word	0x0801cf2c

08016260 <malloc>:
 8016260:	4b02      	ldr	r3, [pc, #8]	; (801626c <malloc+0xc>)
 8016262:	4601      	mov	r1, r0
 8016264:	6818      	ldr	r0, [r3, #0]
 8016266:	f000 b88b 	b.w	8016380 <_malloc_r>
 801626a:	bf00      	nop
 801626c:	20004210 	.word	0x20004210

08016270 <free>:
 8016270:	4b02      	ldr	r3, [pc, #8]	; (801627c <free+0xc>)
 8016272:	4601      	mov	r1, r0
 8016274:	6818      	ldr	r0, [r3, #0]
 8016276:	f000 b833 	b.w	80162e0 <_free_r>
 801627a:	bf00      	nop
 801627c:	20004210 	.word	0x20004210

08016280 <memcpy>:
 8016280:	440a      	add	r2, r1
 8016282:	4291      	cmp	r1, r2
 8016284:	f100 33ff 	add.w	r3, r0, #4294967295
 8016288:	d100      	bne.n	801628c <memcpy+0xc>
 801628a:	4770      	bx	lr
 801628c:	b510      	push	{r4, lr}
 801628e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016296:	4291      	cmp	r1, r2
 8016298:	d1f9      	bne.n	801628e <memcpy+0xe>
 801629a:	bd10      	pop	{r4, pc}

0801629c <memmove>:
 801629c:	4288      	cmp	r0, r1
 801629e:	b510      	push	{r4, lr}
 80162a0:	eb01 0402 	add.w	r4, r1, r2
 80162a4:	d902      	bls.n	80162ac <memmove+0x10>
 80162a6:	4284      	cmp	r4, r0
 80162a8:	4623      	mov	r3, r4
 80162aa:	d807      	bhi.n	80162bc <memmove+0x20>
 80162ac:	1e43      	subs	r3, r0, #1
 80162ae:	42a1      	cmp	r1, r4
 80162b0:	d008      	beq.n	80162c4 <memmove+0x28>
 80162b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80162ba:	e7f8      	b.n	80162ae <memmove+0x12>
 80162bc:	4402      	add	r2, r0
 80162be:	4601      	mov	r1, r0
 80162c0:	428a      	cmp	r2, r1
 80162c2:	d100      	bne.n	80162c6 <memmove+0x2a>
 80162c4:	bd10      	pop	{r4, pc}
 80162c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80162ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80162ce:	e7f7      	b.n	80162c0 <memmove+0x24>

080162d0 <memset>:
 80162d0:	4402      	add	r2, r0
 80162d2:	4603      	mov	r3, r0
 80162d4:	4293      	cmp	r3, r2
 80162d6:	d100      	bne.n	80162da <memset+0xa>
 80162d8:	4770      	bx	lr
 80162da:	f803 1b01 	strb.w	r1, [r3], #1
 80162de:	e7f9      	b.n	80162d4 <memset+0x4>

080162e0 <_free_r>:
 80162e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162e2:	2900      	cmp	r1, #0
 80162e4:	d048      	beq.n	8016378 <_free_r+0x98>
 80162e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162ea:	9001      	str	r0, [sp, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	f1a1 0404 	sub.w	r4, r1, #4
 80162f2:	bfb8      	it	lt
 80162f4:	18e4      	addlt	r4, r4, r3
 80162f6:	f003 f835 	bl	8019364 <__malloc_lock>
 80162fa:	4a20      	ldr	r2, [pc, #128]	; (801637c <_free_r+0x9c>)
 80162fc:	9801      	ldr	r0, [sp, #4]
 80162fe:	6813      	ldr	r3, [r2, #0]
 8016300:	4615      	mov	r5, r2
 8016302:	b933      	cbnz	r3, 8016312 <_free_r+0x32>
 8016304:	6063      	str	r3, [r4, #4]
 8016306:	6014      	str	r4, [r2, #0]
 8016308:	b003      	add	sp, #12
 801630a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801630e:	f003 b82f 	b.w	8019370 <__malloc_unlock>
 8016312:	42a3      	cmp	r3, r4
 8016314:	d90b      	bls.n	801632e <_free_r+0x4e>
 8016316:	6821      	ldr	r1, [r4, #0]
 8016318:	1862      	adds	r2, r4, r1
 801631a:	4293      	cmp	r3, r2
 801631c:	bf04      	itt	eq
 801631e:	681a      	ldreq	r2, [r3, #0]
 8016320:	685b      	ldreq	r3, [r3, #4]
 8016322:	6063      	str	r3, [r4, #4]
 8016324:	bf04      	itt	eq
 8016326:	1852      	addeq	r2, r2, r1
 8016328:	6022      	streq	r2, [r4, #0]
 801632a:	602c      	str	r4, [r5, #0]
 801632c:	e7ec      	b.n	8016308 <_free_r+0x28>
 801632e:	461a      	mov	r2, r3
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	b10b      	cbz	r3, 8016338 <_free_r+0x58>
 8016334:	42a3      	cmp	r3, r4
 8016336:	d9fa      	bls.n	801632e <_free_r+0x4e>
 8016338:	6811      	ldr	r1, [r2, #0]
 801633a:	1855      	adds	r5, r2, r1
 801633c:	42a5      	cmp	r5, r4
 801633e:	d10b      	bne.n	8016358 <_free_r+0x78>
 8016340:	6824      	ldr	r4, [r4, #0]
 8016342:	4421      	add	r1, r4
 8016344:	1854      	adds	r4, r2, r1
 8016346:	42a3      	cmp	r3, r4
 8016348:	6011      	str	r1, [r2, #0]
 801634a:	d1dd      	bne.n	8016308 <_free_r+0x28>
 801634c:	681c      	ldr	r4, [r3, #0]
 801634e:	685b      	ldr	r3, [r3, #4]
 8016350:	6053      	str	r3, [r2, #4]
 8016352:	4421      	add	r1, r4
 8016354:	6011      	str	r1, [r2, #0]
 8016356:	e7d7      	b.n	8016308 <_free_r+0x28>
 8016358:	d902      	bls.n	8016360 <_free_r+0x80>
 801635a:	230c      	movs	r3, #12
 801635c:	6003      	str	r3, [r0, #0]
 801635e:	e7d3      	b.n	8016308 <_free_r+0x28>
 8016360:	6825      	ldr	r5, [r4, #0]
 8016362:	1961      	adds	r1, r4, r5
 8016364:	428b      	cmp	r3, r1
 8016366:	bf04      	itt	eq
 8016368:	6819      	ldreq	r1, [r3, #0]
 801636a:	685b      	ldreq	r3, [r3, #4]
 801636c:	6063      	str	r3, [r4, #4]
 801636e:	bf04      	itt	eq
 8016370:	1949      	addeq	r1, r1, r5
 8016372:	6021      	streq	r1, [r4, #0]
 8016374:	6054      	str	r4, [r2, #4]
 8016376:	e7c7      	b.n	8016308 <_free_r+0x28>
 8016378:	b003      	add	sp, #12
 801637a:	bd30      	pop	{r4, r5, pc}
 801637c:	200085bc 	.word	0x200085bc

08016380 <_malloc_r>:
 8016380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016382:	1ccd      	adds	r5, r1, #3
 8016384:	f025 0503 	bic.w	r5, r5, #3
 8016388:	3508      	adds	r5, #8
 801638a:	2d0c      	cmp	r5, #12
 801638c:	bf38      	it	cc
 801638e:	250c      	movcc	r5, #12
 8016390:	2d00      	cmp	r5, #0
 8016392:	4606      	mov	r6, r0
 8016394:	db01      	blt.n	801639a <_malloc_r+0x1a>
 8016396:	42a9      	cmp	r1, r5
 8016398:	d903      	bls.n	80163a2 <_malloc_r+0x22>
 801639a:	230c      	movs	r3, #12
 801639c:	6033      	str	r3, [r6, #0]
 801639e:	2000      	movs	r0, #0
 80163a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163a2:	f002 ffdf 	bl	8019364 <__malloc_lock>
 80163a6:	4921      	ldr	r1, [pc, #132]	; (801642c <_malloc_r+0xac>)
 80163a8:	680a      	ldr	r2, [r1, #0]
 80163aa:	4614      	mov	r4, r2
 80163ac:	b99c      	cbnz	r4, 80163d6 <_malloc_r+0x56>
 80163ae:	4f20      	ldr	r7, [pc, #128]	; (8016430 <_malloc_r+0xb0>)
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	b923      	cbnz	r3, 80163be <_malloc_r+0x3e>
 80163b4:	4621      	mov	r1, r4
 80163b6:	4630      	mov	r0, r6
 80163b8:	f000 feb6 	bl	8017128 <_sbrk_r>
 80163bc:	6038      	str	r0, [r7, #0]
 80163be:	4629      	mov	r1, r5
 80163c0:	4630      	mov	r0, r6
 80163c2:	f000 feb1 	bl	8017128 <_sbrk_r>
 80163c6:	1c43      	adds	r3, r0, #1
 80163c8:	d123      	bne.n	8016412 <_malloc_r+0x92>
 80163ca:	230c      	movs	r3, #12
 80163cc:	6033      	str	r3, [r6, #0]
 80163ce:	4630      	mov	r0, r6
 80163d0:	f002 ffce 	bl	8019370 <__malloc_unlock>
 80163d4:	e7e3      	b.n	801639e <_malloc_r+0x1e>
 80163d6:	6823      	ldr	r3, [r4, #0]
 80163d8:	1b5b      	subs	r3, r3, r5
 80163da:	d417      	bmi.n	801640c <_malloc_r+0x8c>
 80163dc:	2b0b      	cmp	r3, #11
 80163de:	d903      	bls.n	80163e8 <_malloc_r+0x68>
 80163e0:	6023      	str	r3, [r4, #0]
 80163e2:	441c      	add	r4, r3
 80163e4:	6025      	str	r5, [r4, #0]
 80163e6:	e004      	b.n	80163f2 <_malloc_r+0x72>
 80163e8:	6863      	ldr	r3, [r4, #4]
 80163ea:	42a2      	cmp	r2, r4
 80163ec:	bf0c      	ite	eq
 80163ee:	600b      	streq	r3, [r1, #0]
 80163f0:	6053      	strne	r3, [r2, #4]
 80163f2:	4630      	mov	r0, r6
 80163f4:	f002 ffbc 	bl	8019370 <__malloc_unlock>
 80163f8:	f104 000b 	add.w	r0, r4, #11
 80163fc:	1d23      	adds	r3, r4, #4
 80163fe:	f020 0007 	bic.w	r0, r0, #7
 8016402:	1ac2      	subs	r2, r0, r3
 8016404:	d0cc      	beq.n	80163a0 <_malloc_r+0x20>
 8016406:	1a1b      	subs	r3, r3, r0
 8016408:	50a3      	str	r3, [r4, r2]
 801640a:	e7c9      	b.n	80163a0 <_malloc_r+0x20>
 801640c:	4622      	mov	r2, r4
 801640e:	6864      	ldr	r4, [r4, #4]
 8016410:	e7cc      	b.n	80163ac <_malloc_r+0x2c>
 8016412:	1cc4      	adds	r4, r0, #3
 8016414:	f024 0403 	bic.w	r4, r4, #3
 8016418:	42a0      	cmp	r0, r4
 801641a:	d0e3      	beq.n	80163e4 <_malloc_r+0x64>
 801641c:	1a21      	subs	r1, r4, r0
 801641e:	4630      	mov	r0, r6
 8016420:	f000 fe82 	bl	8017128 <_sbrk_r>
 8016424:	3001      	adds	r0, #1
 8016426:	d1dd      	bne.n	80163e4 <_malloc_r+0x64>
 8016428:	e7cf      	b.n	80163ca <_malloc_r+0x4a>
 801642a:	bf00      	nop
 801642c:	200085bc 	.word	0x200085bc
 8016430:	200085c0 	.word	0x200085c0

08016434 <__cvt>:
 8016434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016438:	ec55 4b10 	vmov	r4, r5, d0
 801643c:	2d00      	cmp	r5, #0
 801643e:	460e      	mov	r6, r1
 8016440:	4619      	mov	r1, r3
 8016442:	462b      	mov	r3, r5
 8016444:	bfbb      	ittet	lt
 8016446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801644a:	461d      	movlt	r5, r3
 801644c:	2300      	movge	r3, #0
 801644e:	232d      	movlt	r3, #45	; 0x2d
 8016450:	700b      	strb	r3, [r1, #0]
 8016452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016458:	4691      	mov	r9, r2
 801645a:	f023 0820 	bic.w	r8, r3, #32
 801645e:	bfbc      	itt	lt
 8016460:	4622      	movlt	r2, r4
 8016462:	4614      	movlt	r4, r2
 8016464:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016468:	d005      	beq.n	8016476 <__cvt+0x42>
 801646a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801646e:	d100      	bne.n	8016472 <__cvt+0x3e>
 8016470:	3601      	adds	r6, #1
 8016472:	2102      	movs	r1, #2
 8016474:	e000      	b.n	8016478 <__cvt+0x44>
 8016476:	2103      	movs	r1, #3
 8016478:	ab03      	add	r3, sp, #12
 801647a:	9301      	str	r3, [sp, #4]
 801647c:	ab02      	add	r3, sp, #8
 801647e:	9300      	str	r3, [sp, #0]
 8016480:	ec45 4b10 	vmov	d0, r4, r5
 8016484:	4653      	mov	r3, sl
 8016486:	4632      	mov	r2, r6
 8016488:	f001 fdfa 	bl	8018080 <_dtoa_r>
 801648c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016490:	4607      	mov	r7, r0
 8016492:	d102      	bne.n	801649a <__cvt+0x66>
 8016494:	f019 0f01 	tst.w	r9, #1
 8016498:	d022      	beq.n	80164e0 <__cvt+0xac>
 801649a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801649e:	eb07 0906 	add.w	r9, r7, r6
 80164a2:	d110      	bne.n	80164c6 <__cvt+0x92>
 80164a4:	783b      	ldrb	r3, [r7, #0]
 80164a6:	2b30      	cmp	r3, #48	; 0x30
 80164a8:	d10a      	bne.n	80164c0 <__cvt+0x8c>
 80164aa:	2200      	movs	r2, #0
 80164ac:	2300      	movs	r3, #0
 80164ae:	4620      	mov	r0, r4
 80164b0:	4629      	mov	r1, r5
 80164b2:	f7ea fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80164b6:	b918      	cbnz	r0, 80164c0 <__cvt+0x8c>
 80164b8:	f1c6 0601 	rsb	r6, r6, #1
 80164bc:	f8ca 6000 	str.w	r6, [sl]
 80164c0:	f8da 3000 	ldr.w	r3, [sl]
 80164c4:	4499      	add	r9, r3
 80164c6:	2200      	movs	r2, #0
 80164c8:	2300      	movs	r3, #0
 80164ca:	4620      	mov	r0, r4
 80164cc:	4629      	mov	r1, r5
 80164ce:	f7ea fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80164d2:	b108      	cbz	r0, 80164d8 <__cvt+0xa4>
 80164d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80164d8:	2230      	movs	r2, #48	; 0x30
 80164da:	9b03      	ldr	r3, [sp, #12]
 80164dc:	454b      	cmp	r3, r9
 80164de:	d307      	bcc.n	80164f0 <__cvt+0xbc>
 80164e0:	9b03      	ldr	r3, [sp, #12]
 80164e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80164e4:	1bdb      	subs	r3, r3, r7
 80164e6:	4638      	mov	r0, r7
 80164e8:	6013      	str	r3, [r2, #0]
 80164ea:	b004      	add	sp, #16
 80164ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164f0:	1c59      	adds	r1, r3, #1
 80164f2:	9103      	str	r1, [sp, #12]
 80164f4:	701a      	strb	r2, [r3, #0]
 80164f6:	e7f0      	b.n	80164da <__cvt+0xa6>

080164f8 <__exponent>:
 80164f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164fa:	4603      	mov	r3, r0
 80164fc:	2900      	cmp	r1, #0
 80164fe:	bfb8      	it	lt
 8016500:	4249      	neglt	r1, r1
 8016502:	f803 2b02 	strb.w	r2, [r3], #2
 8016506:	bfb4      	ite	lt
 8016508:	222d      	movlt	r2, #45	; 0x2d
 801650a:	222b      	movge	r2, #43	; 0x2b
 801650c:	2909      	cmp	r1, #9
 801650e:	7042      	strb	r2, [r0, #1]
 8016510:	dd2a      	ble.n	8016568 <__exponent+0x70>
 8016512:	f10d 0407 	add.w	r4, sp, #7
 8016516:	46a4      	mov	ip, r4
 8016518:	270a      	movs	r7, #10
 801651a:	46a6      	mov	lr, r4
 801651c:	460a      	mov	r2, r1
 801651e:	fb91 f6f7 	sdiv	r6, r1, r7
 8016522:	fb07 1516 	mls	r5, r7, r6, r1
 8016526:	3530      	adds	r5, #48	; 0x30
 8016528:	2a63      	cmp	r2, #99	; 0x63
 801652a:	f104 34ff 	add.w	r4, r4, #4294967295
 801652e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016532:	4631      	mov	r1, r6
 8016534:	dcf1      	bgt.n	801651a <__exponent+0x22>
 8016536:	3130      	adds	r1, #48	; 0x30
 8016538:	f1ae 0502 	sub.w	r5, lr, #2
 801653c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016540:	1c44      	adds	r4, r0, #1
 8016542:	4629      	mov	r1, r5
 8016544:	4561      	cmp	r1, ip
 8016546:	d30a      	bcc.n	801655e <__exponent+0x66>
 8016548:	f10d 0209 	add.w	r2, sp, #9
 801654c:	eba2 020e 	sub.w	r2, r2, lr
 8016550:	4565      	cmp	r5, ip
 8016552:	bf88      	it	hi
 8016554:	2200      	movhi	r2, #0
 8016556:	4413      	add	r3, r2
 8016558:	1a18      	subs	r0, r3, r0
 801655a:	b003      	add	sp, #12
 801655c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801655e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016562:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016566:	e7ed      	b.n	8016544 <__exponent+0x4c>
 8016568:	2330      	movs	r3, #48	; 0x30
 801656a:	3130      	adds	r1, #48	; 0x30
 801656c:	7083      	strb	r3, [r0, #2]
 801656e:	70c1      	strb	r1, [r0, #3]
 8016570:	1d03      	adds	r3, r0, #4
 8016572:	e7f1      	b.n	8016558 <__exponent+0x60>

08016574 <_printf_float>:
 8016574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016578:	ed2d 8b02 	vpush	{d8}
 801657c:	b08d      	sub	sp, #52	; 0x34
 801657e:	460c      	mov	r4, r1
 8016580:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016584:	4616      	mov	r6, r2
 8016586:	461f      	mov	r7, r3
 8016588:	4605      	mov	r5, r0
 801658a:	f002 fed5 	bl	8019338 <_localeconv_r>
 801658e:	f8d0 a000 	ldr.w	sl, [r0]
 8016592:	4650      	mov	r0, sl
 8016594:	f7e9 fe1c 	bl	80001d0 <strlen>
 8016598:	2300      	movs	r3, #0
 801659a:	930a      	str	r3, [sp, #40]	; 0x28
 801659c:	6823      	ldr	r3, [r4, #0]
 801659e:	9305      	str	r3, [sp, #20]
 80165a0:	f8d8 3000 	ldr.w	r3, [r8]
 80165a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80165a8:	3307      	adds	r3, #7
 80165aa:	f023 0307 	bic.w	r3, r3, #7
 80165ae:	f103 0208 	add.w	r2, r3, #8
 80165b2:	f8c8 2000 	str.w	r2, [r8]
 80165b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80165be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80165c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80165c6:	9307      	str	r3, [sp, #28]
 80165c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80165cc:	ee08 0a10 	vmov	s16, r0
 80165d0:	4b9f      	ldr	r3, [pc, #636]	; (8016850 <_printf_float+0x2dc>)
 80165d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80165d6:	f04f 32ff 	mov.w	r2, #4294967295
 80165da:	f7ea faa7 	bl	8000b2c <__aeabi_dcmpun>
 80165de:	bb88      	cbnz	r0, 8016644 <_printf_float+0xd0>
 80165e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80165e4:	4b9a      	ldr	r3, [pc, #616]	; (8016850 <_printf_float+0x2dc>)
 80165e6:	f04f 32ff 	mov.w	r2, #4294967295
 80165ea:	f7ea fa81 	bl	8000af0 <__aeabi_dcmple>
 80165ee:	bb48      	cbnz	r0, 8016644 <_printf_float+0xd0>
 80165f0:	2200      	movs	r2, #0
 80165f2:	2300      	movs	r3, #0
 80165f4:	4640      	mov	r0, r8
 80165f6:	4649      	mov	r1, r9
 80165f8:	f7ea fa70 	bl	8000adc <__aeabi_dcmplt>
 80165fc:	b110      	cbz	r0, 8016604 <_printf_float+0x90>
 80165fe:	232d      	movs	r3, #45	; 0x2d
 8016600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016604:	4b93      	ldr	r3, [pc, #588]	; (8016854 <_printf_float+0x2e0>)
 8016606:	4894      	ldr	r0, [pc, #592]	; (8016858 <_printf_float+0x2e4>)
 8016608:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801660c:	bf94      	ite	ls
 801660e:	4698      	movls	r8, r3
 8016610:	4680      	movhi	r8, r0
 8016612:	2303      	movs	r3, #3
 8016614:	6123      	str	r3, [r4, #16]
 8016616:	9b05      	ldr	r3, [sp, #20]
 8016618:	f023 0204 	bic.w	r2, r3, #4
 801661c:	6022      	str	r2, [r4, #0]
 801661e:	f04f 0900 	mov.w	r9, #0
 8016622:	9700      	str	r7, [sp, #0]
 8016624:	4633      	mov	r3, r6
 8016626:	aa0b      	add	r2, sp, #44	; 0x2c
 8016628:	4621      	mov	r1, r4
 801662a:	4628      	mov	r0, r5
 801662c:	f000 f9d8 	bl	80169e0 <_printf_common>
 8016630:	3001      	adds	r0, #1
 8016632:	f040 8090 	bne.w	8016756 <_printf_float+0x1e2>
 8016636:	f04f 30ff 	mov.w	r0, #4294967295
 801663a:	b00d      	add	sp, #52	; 0x34
 801663c:	ecbd 8b02 	vpop	{d8}
 8016640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016644:	4642      	mov	r2, r8
 8016646:	464b      	mov	r3, r9
 8016648:	4640      	mov	r0, r8
 801664a:	4649      	mov	r1, r9
 801664c:	f7ea fa6e 	bl	8000b2c <__aeabi_dcmpun>
 8016650:	b140      	cbz	r0, 8016664 <_printf_float+0xf0>
 8016652:	464b      	mov	r3, r9
 8016654:	2b00      	cmp	r3, #0
 8016656:	bfbc      	itt	lt
 8016658:	232d      	movlt	r3, #45	; 0x2d
 801665a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801665e:	487f      	ldr	r0, [pc, #508]	; (801685c <_printf_float+0x2e8>)
 8016660:	4b7f      	ldr	r3, [pc, #508]	; (8016860 <_printf_float+0x2ec>)
 8016662:	e7d1      	b.n	8016608 <_printf_float+0x94>
 8016664:	6863      	ldr	r3, [r4, #4]
 8016666:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801666a:	9206      	str	r2, [sp, #24]
 801666c:	1c5a      	adds	r2, r3, #1
 801666e:	d13f      	bne.n	80166f0 <_printf_float+0x17c>
 8016670:	2306      	movs	r3, #6
 8016672:	6063      	str	r3, [r4, #4]
 8016674:	9b05      	ldr	r3, [sp, #20]
 8016676:	6861      	ldr	r1, [r4, #4]
 8016678:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801667c:	2300      	movs	r3, #0
 801667e:	9303      	str	r3, [sp, #12]
 8016680:	ab0a      	add	r3, sp, #40	; 0x28
 8016682:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016686:	ab09      	add	r3, sp, #36	; 0x24
 8016688:	ec49 8b10 	vmov	d0, r8, r9
 801668c:	9300      	str	r3, [sp, #0]
 801668e:	6022      	str	r2, [r4, #0]
 8016690:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016694:	4628      	mov	r0, r5
 8016696:	f7ff fecd 	bl	8016434 <__cvt>
 801669a:	9b06      	ldr	r3, [sp, #24]
 801669c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801669e:	2b47      	cmp	r3, #71	; 0x47
 80166a0:	4680      	mov	r8, r0
 80166a2:	d108      	bne.n	80166b6 <_printf_float+0x142>
 80166a4:	1cc8      	adds	r0, r1, #3
 80166a6:	db02      	blt.n	80166ae <_printf_float+0x13a>
 80166a8:	6863      	ldr	r3, [r4, #4]
 80166aa:	4299      	cmp	r1, r3
 80166ac:	dd41      	ble.n	8016732 <_printf_float+0x1be>
 80166ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80166b2:	fa5f fb8b 	uxtb.w	fp, fp
 80166b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80166ba:	d820      	bhi.n	80166fe <_printf_float+0x18a>
 80166bc:	3901      	subs	r1, #1
 80166be:	465a      	mov	r2, fp
 80166c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80166c4:	9109      	str	r1, [sp, #36]	; 0x24
 80166c6:	f7ff ff17 	bl	80164f8 <__exponent>
 80166ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80166cc:	1813      	adds	r3, r2, r0
 80166ce:	2a01      	cmp	r2, #1
 80166d0:	4681      	mov	r9, r0
 80166d2:	6123      	str	r3, [r4, #16]
 80166d4:	dc02      	bgt.n	80166dc <_printf_float+0x168>
 80166d6:	6822      	ldr	r2, [r4, #0]
 80166d8:	07d2      	lsls	r2, r2, #31
 80166da:	d501      	bpl.n	80166e0 <_printf_float+0x16c>
 80166dc:	3301      	adds	r3, #1
 80166de:	6123      	str	r3, [r4, #16]
 80166e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d09c      	beq.n	8016622 <_printf_float+0xae>
 80166e8:	232d      	movs	r3, #45	; 0x2d
 80166ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166ee:	e798      	b.n	8016622 <_printf_float+0xae>
 80166f0:	9a06      	ldr	r2, [sp, #24]
 80166f2:	2a47      	cmp	r2, #71	; 0x47
 80166f4:	d1be      	bne.n	8016674 <_printf_float+0x100>
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d1bc      	bne.n	8016674 <_printf_float+0x100>
 80166fa:	2301      	movs	r3, #1
 80166fc:	e7b9      	b.n	8016672 <_printf_float+0xfe>
 80166fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016702:	d118      	bne.n	8016736 <_printf_float+0x1c2>
 8016704:	2900      	cmp	r1, #0
 8016706:	6863      	ldr	r3, [r4, #4]
 8016708:	dd0b      	ble.n	8016722 <_printf_float+0x1ae>
 801670a:	6121      	str	r1, [r4, #16]
 801670c:	b913      	cbnz	r3, 8016714 <_printf_float+0x1a0>
 801670e:	6822      	ldr	r2, [r4, #0]
 8016710:	07d0      	lsls	r0, r2, #31
 8016712:	d502      	bpl.n	801671a <_printf_float+0x1a6>
 8016714:	3301      	adds	r3, #1
 8016716:	440b      	add	r3, r1
 8016718:	6123      	str	r3, [r4, #16]
 801671a:	65a1      	str	r1, [r4, #88]	; 0x58
 801671c:	f04f 0900 	mov.w	r9, #0
 8016720:	e7de      	b.n	80166e0 <_printf_float+0x16c>
 8016722:	b913      	cbnz	r3, 801672a <_printf_float+0x1b6>
 8016724:	6822      	ldr	r2, [r4, #0]
 8016726:	07d2      	lsls	r2, r2, #31
 8016728:	d501      	bpl.n	801672e <_printf_float+0x1ba>
 801672a:	3302      	adds	r3, #2
 801672c:	e7f4      	b.n	8016718 <_printf_float+0x1a4>
 801672e:	2301      	movs	r3, #1
 8016730:	e7f2      	b.n	8016718 <_printf_float+0x1a4>
 8016732:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016738:	4299      	cmp	r1, r3
 801673a:	db05      	blt.n	8016748 <_printf_float+0x1d4>
 801673c:	6823      	ldr	r3, [r4, #0]
 801673e:	6121      	str	r1, [r4, #16]
 8016740:	07d8      	lsls	r0, r3, #31
 8016742:	d5ea      	bpl.n	801671a <_printf_float+0x1a6>
 8016744:	1c4b      	adds	r3, r1, #1
 8016746:	e7e7      	b.n	8016718 <_printf_float+0x1a4>
 8016748:	2900      	cmp	r1, #0
 801674a:	bfd4      	ite	le
 801674c:	f1c1 0202 	rsble	r2, r1, #2
 8016750:	2201      	movgt	r2, #1
 8016752:	4413      	add	r3, r2
 8016754:	e7e0      	b.n	8016718 <_printf_float+0x1a4>
 8016756:	6823      	ldr	r3, [r4, #0]
 8016758:	055a      	lsls	r2, r3, #21
 801675a:	d407      	bmi.n	801676c <_printf_float+0x1f8>
 801675c:	6923      	ldr	r3, [r4, #16]
 801675e:	4642      	mov	r2, r8
 8016760:	4631      	mov	r1, r6
 8016762:	4628      	mov	r0, r5
 8016764:	47b8      	blx	r7
 8016766:	3001      	adds	r0, #1
 8016768:	d12c      	bne.n	80167c4 <_printf_float+0x250>
 801676a:	e764      	b.n	8016636 <_printf_float+0xc2>
 801676c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016770:	f240 80e0 	bls.w	8016934 <_printf_float+0x3c0>
 8016774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016778:	2200      	movs	r2, #0
 801677a:	2300      	movs	r3, #0
 801677c:	f7ea f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8016780:	2800      	cmp	r0, #0
 8016782:	d034      	beq.n	80167ee <_printf_float+0x27a>
 8016784:	4a37      	ldr	r2, [pc, #220]	; (8016864 <_printf_float+0x2f0>)
 8016786:	2301      	movs	r3, #1
 8016788:	4631      	mov	r1, r6
 801678a:	4628      	mov	r0, r5
 801678c:	47b8      	blx	r7
 801678e:	3001      	adds	r0, #1
 8016790:	f43f af51 	beq.w	8016636 <_printf_float+0xc2>
 8016794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016798:	429a      	cmp	r2, r3
 801679a:	db02      	blt.n	80167a2 <_printf_float+0x22e>
 801679c:	6823      	ldr	r3, [r4, #0]
 801679e:	07d8      	lsls	r0, r3, #31
 80167a0:	d510      	bpl.n	80167c4 <_printf_float+0x250>
 80167a2:	ee18 3a10 	vmov	r3, s16
 80167a6:	4652      	mov	r2, sl
 80167a8:	4631      	mov	r1, r6
 80167aa:	4628      	mov	r0, r5
 80167ac:	47b8      	blx	r7
 80167ae:	3001      	adds	r0, #1
 80167b0:	f43f af41 	beq.w	8016636 <_printf_float+0xc2>
 80167b4:	f04f 0800 	mov.w	r8, #0
 80167b8:	f104 091a 	add.w	r9, r4, #26
 80167bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167be:	3b01      	subs	r3, #1
 80167c0:	4543      	cmp	r3, r8
 80167c2:	dc09      	bgt.n	80167d8 <_printf_float+0x264>
 80167c4:	6823      	ldr	r3, [r4, #0]
 80167c6:	079b      	lsls	r3, r3, #30
 80167c8:	f100 8105 	bmi.w	80169d6 <_printf_float+0x462>
 80167cc:	68e0      	ldr	r0, [r4, #12]
 80167ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167d0:	4298      	cmp	r0, r3
 80167d2:	bfb8      	it	lt
 80167d4:	4618      	movlt	r0, r3
 80167d6:	e730      	b.n	801663a <_printf_float+0xc6>
 80167d8:	2301      	movs	r3, #1
 80167da:	464a      	mov	r2, r9
 80167dc:	4631      	mov	r1, r6
 80167de:	4628      	mov	r0, r5
 80167e0:	47b8      	blx	r7
 80167e2:	3001      	adds	r0, #1
 80167e4:	f43f af27 	beq.w	8016636 <_printf_float+0xc2>
 80167e8:	f108 0801 	add.w	r8, r8, #1
 80167ec:	e7e6      	b.n	80167bc <_printf_float+0x248>
 80167ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	dc39      	bgt.n	8016868 <_printf_float+0x2f4>
 80167f4:	4a1b      	ldr	r2, [pc, #108]	; (8016864 <_printf_float+0x2f0>)
 80167f6:	2301      	movs	r3, #1
 80167f8:	4631      	mov	r1, r6
 80167fa:	4628      	mov	r0, r5
 80167fc:	47b8      	blx	r7
 80167fe:	3001      	adds	r0, #1
 8016800:	f43f af19 	beq.w	8016636 <_printf_float+0xc2>
 8016804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016808:	4313      	orrs	r3, r2
 801680a:	d102      	bne.n	8016812 <_printf_float+0x29e>
 801680c:	6823      	ldr	r3, [r4, #0]
 801680e:	07d9      	lsls	r1, r3, #31
 8016810:	d5d8      	bpl.n	80167c4 <_printf_float+0x250>
 8016812:	ee18 3a10 	vmov	r3, s16
 8016816:	4652      	mov	r2, sl
 8016818:	4631      	mov	r1, r6
 801681a:	4628      	mov	r0, r5
 801681c:	47b8      	blx	r7
 801681e:	3001      	adds	r0, #1
 8016820:	f43f af09 	beq.w	8016636 <_printf_float+0xc2>
 8016824:	f04f 0900 	mov.w	r9, #0
 8016828:	f104 0a1a 	add.w	sl, r4, #26
 801682c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801682e:	425b      	negs	r3, r3
 8016830:	454b      	cmp	r3, r9
 8016832:	dc01      	bgt.n	8016838 <_printf_float+0x2c4>
 8016834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016836:	e792      	b.n	801675e <_printf_float+0x1ea>
 8016838:	2301      	movs	r3, #1
 801683a:	4652      	mov	r2, sl
 801683c:	4631      	mov	r1, r6
 801683e:	4628      	mov	r0, r5
 8016840:	47b8      	blx	r7
 8016842:	3001      	adds	r0, #1
 8016844:	f43f aef7 	beq.w	8016636 <_printf_float+0xc2>
 8016848:	f109 0901 	add.w	r9, r9, #1
 801684c:	e7ee      	b.n	801682c <_printf_float+0x2b8>
 801684e:	bf00      	nop
 8016850:	7fefffff 	.word	0x7fefffff
 8016854:	0801c824 	.word	0x0801c824
 8016858:	0801c828 	.word	0x0801c828
 801685c:	0801c830 	.word	0x0801c830
 8016860:	0801c82c 	.word	0x0801c82c
 8016864:	0801c834 	.word	0x0801c834
 8016868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801686a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801686c:	429a      	cmp	r2, r3
 801686e:	bfa8      	it	ge
 8016870:	461a      	movge	r2, r3
 8016872:	2a00      	cmp	r2, #0
 8016874:	4691      	mov	r9, r2
 8016876:	dc37      	bgt.n	80168e8 <_printf_float+0x374>
 8016878:	f04f 0b00 	mov.w	fp, #0
 801687c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016880:	f104 021a 	add.w	r2, r4, #26
 8016884:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016886:	9305      	str	r3, [sp, #20]
 8016888:	eba3 0309 	sub.w	r3, r3, r9
 801688c:	455b      	cmp	r3, fp
 801688e:	dc33      	bgt.n	80168f8 <_printf_float+0x384>
 8016890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016894:	429a      	cmp	r2, r3
 8016896:	db3b      	blt.n	8016910 <_printf_float+0x39c>
 8016898:	6823      	ldr	r3, [r4, #0]
 801689a:	07da      	lsls	r2, r3, #31
 801689c:	d438      	bmi.n	8016910 <_printf_float+0x39c>
 801689e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80168a0:	9b05      	ldr	r3, [sp, #20]
 80168a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168a4:	1ad3      	subs	r3, r2, r3
 80168a6:	eba2 0901 	sub.w	r9, r2, r1
 80168aa:	4599      	cmp	r9, r3
 80168ac:	bfa8      	it	ge
 80168ae:	4699      	movge	r9, r3
 80168b0:	f1b9 0f00 	cmp.w	r9, #0
 80168b4:	dc35      	bgt.n	8016922 <_printf_float+0x3ae>
 80168b6:	f04f 0800 	mov.w	r8, #0
 80168ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80168be:	f104 0a1a 	add.w	sl, r4, #26
 80168c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80168c6:	1a9b      	subs	r3, r3, r2
 80168c8:	eba3 0309 	sub.w	r3, r3, r9
 80168cc:	4543      	cmp	r3, r8
 80168ce:	f77f af79 	ble.w	80167c4 <_printf_float+0x250>
 80168d2:	2301      	movs	r3, #1
 80168d4:	4652      	mov	r2, sl
 80168d6:	4631      	mov	r1, r6
 80168d8:	4628      	mov	r0, r5
 80168da:	47b8      	blx	r7
 80168dc:	3001      	adds	r0, #1
 80168de:	f43f aeaa 	beq.w	8016636 <_printf_float+0xc2>
 80168e2:	f108 0801 	add.w	r8, r8, #1
 80168e6:	e7ec      	b.n	80168c2 <_printf_float+0x34e>
 80168e8:	4613      	mov	r3, r2
 80168ea:	4631      	mov	r1, r6
 80168ec:	4642      	mov	r2, r8
 80168ee:	4628      	mov	r0, r5
 80168f0:	47b8      	blx	r7
 80168f2:	3001      	adds	r0, #1
 80168f4:	d1c0      	bne.n	8016878 <_printf_float+0x304>
 80168f6:	e69e      	b.n	8016636 <_printf_float+0xc2>
 80168f8:	2301      	movs	r3, #1
 80168fa:	4631      	mov	r1, r6
 80168fc:	4628      	mov	r0, r5
 80168fe:	9205      	str	r2, [sp, #20]
 8016900:	47b8      	blx	r7
 8016902:	3001      	adds	r0, #1
 8016904:	f43f ae97 	beq.w	8016636 <_printf_float+0xc2>
 8016908:	9a05      	ldr	r2, [sp, #20]
 801690a:	f10b 0b01 	add.w	fp, fp, #1
 801690e:	e7b9      	b.n	8016884 <_printf_float+0x310>
 8016910:	ee18 3a10 	vmov	r3, s16
 8016914:	4652      	mov	r2, sl
 8016916:	4631      	mov	r1, r6
 8016918:	4628      	mov	r0, r5
 801691a:	47b8      	blx	r7
 801691c:	3001      	adds	r0, #1
 801691e:	d1be      	bne.n	801689e <_printf_float+0x32a>
 8016920:	e689      	b.n	8016636 <_printf_float+0xc2>
 8016922:	9a05      	ldr	r2, [sp, #20]
 8016924:	464b      	mov	r3, r9
 8016926:	4442      	add	r2, r8
 8016928:	4631      	mov	r1, r6
 801692a:	4628      	mov	r0, r5
 801692c:	47b8      	blx	r7
 801692e:	3001      	adds	r0, #1
 8016930:	d1c1      	bne.n	80168b6 <_printf_float+0x342>
 8016932:	e680      	b.n	8016636 <_printf_float+0xc2>
 8016934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016936:	2a01      	cmp	r2, #1
 8016938:	dc01      	bgt.n	801693e <_printf_float+0x3ca>
 801693a:	07db      	lsls	r3, r3, #31
 801693c:	d538      	bpl.n	80169b0 <_printf_float+0x43c>
 801693e:	2301      	movs	r3, #1
 8016940:	4642      	mov	r2, r8
 8016942:	4631      	mov	r1, r6
 8016944:	4628      	mov	r0, r5
 8016946:	47b8      	blx	r7
 8016948:	3001      	adds	r0, #1
 801694a:	f43f ae74 	beq.w	8016636 <_printf_float+0xc2>
 801694e:	ee18 3a10 	vmov	r3, s16
 8016952:	4652      	mov	r2, sl
 8016954:	4631      	mov	r1, r6
 8016956:	4628      	mov	r0, r5
 8016958:	47b8      	blx	r7
 801695a:	3001      	adds	r0, #1
 801695c:	f43f ae6b 	beq.w	8016636 <_printf_float+0xc2>
 8016960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016964:	2200      	movs	r2, #0
 8016966:	2300      	movs	r3, #0
 8016968:	f7ea f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 801696c:	b9d8      	cbnz	r0, 80169a6 <_printf_float+0x432>
 801696e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016970:	f108 0201 	add.w	r2, r8, #1
 8016974:	3b01      	subs	r3, #1
 8016976:	4631      	mov	r1, r6
 8016978:	4628      	mov	r0, r5
 801697a:	47b8      	blx	r7
 801697c:	3001      	adds	r0, #1
 801697e:	d10e      	bne.n	801699e <_printf_float+0x42a>
 8016980:	e659      	b.n	8016636 <_printf_float+0xc2>
 8016982:	2301      	movs	r3, #1
 8016984:	4652      	mov	r2, sl
 8016986:	4631      	mov	r1, r6
 8016988:	4628      	mov	r0, r5
 801698a:	47b8      	blx	r7
 801698c:	3001      	adds	r0, #1
 801698e:	f43f ae52 	beq.w	8016636 <_printf_float+0xc2>
 8016992:	f108 0801 	add.w	r8, r8, #1
 8016996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016998:	3b01      	subs	r3, #1
 801699a:	4543      	cmp	r3, r8
 801699c:	dcf1      	bgt.n	8016982 <_printf_float+0x40e>
 801699e:	464b      	mov	r3, r9
 80169a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80169a4:	e6dc      	b.n	8016760 <_printf_float+0x1ec>
 80169a6:	f04f 0800 	mov.w	r8, #0
 80169aa:	f104 0a1a 	add.w	sl, r4, #26
 80169ae:	e7f2      	b.n	8016996 <_printf_float+0x422>
 80169b0:	2301      	movs	r3, #1
 80169b2:	4642      	mov	r2, r8
 80169b4:	e7df      	b.n	8016976 <_printf_float+0x402>
 80169b6:	2301      	movs	r3, #1
 80169b8:	464a      	mov	r2, r9
 80169ba:	4631      	mov	r1, r6
 80169bc:	4628      	mov	r0, r5
 80169be:	47b8      	blx	r7
 80169c0:	3001      	adds	r0, #1
 80169c2:	f43f ae38 	beq.w	8016636 <_printf_float+0xc2>
 80169c6:	f108 0801 	add.w	r8, r8, #1
 80169ca:	68e3      	ldr	r3, [r4, #12]
 80169cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169ce:	1a5b      	subs	r3, r3, r1
 80169d0:	4543      	cmp	r3, r8
 80169d2:	dcf0      	bgt.n	80169b6 <_printf_float+0x442>
 80169d4:	e6fa      	b.n	80167cc <_printf_float+0x258>
 80169d6:	f04f 0800 	mov.w	r8, #0
 80169da:	f104 0919 	add.w	r9, r4, #25
 80169de:	e7f4      	b.n	80169ca <_printf_float+0x456>

080169e0 <_printf_common>:
 80169e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169e4:	4616      	mov	r6, r2
 80169e6:	4699      	mov	r9, r3
 80169e8:	688a      	ldr	r2, [r1, #8]
 80169ea:	690b      	ldr	r3, [r1, #16]
 80169ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80169f0:	4293      	cmp	r3, r2
 80169f2:	bfb8      	it	lt
 80169f4:	4613      	movlt	r3, r2
 80169f6:	6033      	str	r3, [r6, #0]
 80169f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80169fc:	4607      	mov	r7, r0
 80169fe:	460c      	mov	r4, r1
 8016a00:	b10a      	cbz	r2, 8016a06 <_printf_common+0x26>
 8016a02:	3301      	adds	r3, #1
 8016a04:	6033      	str	r3, [r6, #0]
 8016a06:	6823      	ldr	r3, [r4, #0]
 8016a08:	0699      	lsls	r1, r3, #26
 8016a0a:	bf42      	ittt	mi
 8016a0c:	6833      	ldrmi	r3, [r6, #0]
 8016a0e:	3302      	addmi	r3, #2
 8016a10:	6033      	strmi	r3, [r6, #0]
 8016a12:	6825      	ldr	r5, [r4, #0]
 8016a14:	f015 0506 	ands.w	r5, r5, #6
 8016a18:	d106      	bne.n	8016a28 <_printf_common+0x48>
 8016a1a:	f104 0a19 	add.w	sl, r4, #25
 8016a1e:	68e3      	ldr	r3, [r4, #12]
 8016a20:	6832      	ldr	r2, [r6, #0]
 8016a22:	1a9b      	subs	r3, r3, r2
 8016a24:	42ab      	cmp	r3, r5
 8016a26:	dc26      	bgt.n	8016a76 <_printf_common+0x96>
 8016a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016a2c:	1e13      	subs	r3, r2, #0
 8016a2e:	6822      	ldr	r2, [r4, #0]
 8016a30:	bf18      	it	ne
 8016a32:	2301      	movne	r3, #1
 8016a34:	0692      	lsls	r2, r2, #26
 8016a36:	d42b      	bmi.n	8016a90 <_printf_common+0xb0>
 8016a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016a3c:	4649      	mov	r1, r9
 8016a3e:	4638      	mov	r0, r7
 8016a40:	47c0      	blx	r8
 8016a42:	3001      	adds	r0, #1
 8016a44:	d01e      	beq.n	8016a84 <_printf_common+0xa4>
 8016a46:	6823      	ldr	r3, [r4, #0]
 8016a48:	68e5      	ldr	r5, [r4, #12]
 8016a4a:	6832      	ldr	r2, [r6, #0]
 8016a4c:	f003 0306 	and.w	r3, r3, #6
 8016a50:	2b04      	cmp	r3, #4
 8016a52:	bf08      	it	eq
 8016a54:	1aad      	subeq	r5, r5, r2
 8016a56:	68a3      	ldr	r3, [r4, #8]
 8016a58:	6922      	ldr	r2, [r4, #16]
 8016a5a:	bf0c      	ite	eq
 8016a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016a60:	2500      	movne	r5, #0
 8016a62:	4293      	cmp	r3, r2
 8016a64:	bfc4      	itt	gt
 8016a66:	1a9b      	subgt	r3, r3, r2
 8016a68:	18ed      	addgt	r5, r5, r3
 8016a6a:	2600      	movs	r6, #0
 8016a6c:	341a      	adds	r4, #26
 8016a6e:	42b5      	cmp	r5, r6
 8016a70:	d11a      	bne.n	8016aa8 <_printf_common+0xc8>
 8016a72:	2000      	movs	r0, #0
 8016a74:	e008      	b.n	8016a88 <_printf_common+0xa8>
 8016a76:	2301      	movs	r3, #1
 8016a78:	4652      	mov	r2, sl
 8016a7a:	4649      	mov	r1, r9
 8016a7c:	4638      	mov	r0, r7
 8016a7e:	47c0      	blx	r8
 8016a80:	3001      	adds	r0, #1
 8016a82:	d103      	bne.n	8016a8c <_printf_common+0xac>
 8016a84:	f04f 30ff 	mov.w	r0, #4294967295
 8016a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a8c:	3501      	adds	r5, #1
 8016a8e:	e7c6      	b.n	8016a1e <_printf_common+0x3e>
 8016a90:	18e1      	adds	r1, r4, r3
 8016a92:	1c5a      	adds	r2, r3, #1
 8016a94:	2030      	movs	r0, #48	; 0x30
 8016a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016a9a:	4422      	add	r2, r4
 8016a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016aa4:	3302      	adds	r3, #2
 8016aa6:	e7c7      	b.n	8016a38 <_printf_common+0x58>
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	4622      	mov	r2, r4
 8016aac:	4649      	mov	r1, r9
 8016aae:	4638      	mov	r0, r7
 8016ab0:	47c0      	blx	r8
 8016ab2:	3001      	adds	r0, #1
 8016ab4:	d0e6      	beq.n	8016a84 <_printf_common+0xa4>
 8016ab6:	3601      	adds	r6, #1
 8016ab8:	e7d9      	b.n	8016a6e <_printf_common+0x8e>
	...

08016abc <_printf_i>:
 8016abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ac0:	460c      	mov	r4, r1
 8016ac2:	4691      	mov	r9, r2
 8016ac4:	7e27      	ldrb	r7, [r4, #24]
 8016ac6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016ac8:	2f78      	cmp	r7, #120	; 0x78
 8016aca:	4680      	mov	r8, r0
 8016acc:	469a      	mov	sl, r3
 8016ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016ad2:	d807      	bhi.n	8016ae4 <_printf_i+0x28>
 8016ad4:	2f62      	cmp	r7, #98	; 0x62
 8016ad6:	d80a      	bhi.n	8016aee <_printf_i+0x32>
 8016ad8:	2f00      	cmp	r7, #0
 8016ada:	f000 80d8 	beq.w	8016c8e <_printf_i+0x1d2>
 8016ade:	2f58      	cmp	r7, #88	; 0x58
 8016ae0:	f000 80a3 	beq.w	8016c2a <_printf_i+0x16e>
 8016ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016aec:	e03a      	b.n	8016b64 <_printf_i+0xa8>
 8016aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016af2:	2b15      	cmp	r3, #21
 8016af4:	d8f6      	bhi.n	8016ae4 <_printf_i+0x28>
 8016af6:	a001      	add	r0, pc, #4	; (adr r0, 8016afc <_printf_i+0x40>)
 8016af8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016afc:	08016b55 	.word	0x08016b55
 8016b00:	08016b69 	.word	0x08016b69
 8016b04:	08016ae5 	.word	0x08016ae5
 8016b08:	08016ae5 	.word	0x08016ae5
 8016b0c:	08016ae5 	.word	0x08016ae5
 8016b10:	08016ae5 	.word	0x08016ae5
 8016b14:	08016b69 	.word	0x08016b69
 8016b18:	08016ae5 	.word	0x08016ae5
 8016b1c:	08016ae5 	.word	0x08016ae5
 8016b20:	08016ae5 	.word	0x08016ae5
 8016b24:	08016ae5 	.word	0x08016ae5
 8016b28:	08016c75 	.word	0x08016c75
 8016b2c:	08016b99 	.word	0x08016b99
 8016b30:	08016c57 	.word	0x08016c57
 8016b34:	08016ae5 	.word	0x08016ae5
 8016b38:	08016ae5 	.word	0x08016ae5
 8016b3c:	08016c97 	.word	0x08016c97
 8016b40:	08016ae5 	.word	0x08016ae5
 8016b44:	08016b99 	.word	0x08016b99
 8016b48:	08016ae5 	.word	0x08016ae5
 8016b4c:	08016ae5 	.word	0x08016ae5
 8016b50:	08016c5f 	.word	0x08016c5f
 8016b54:	680b      	ldr	r3, [r1, #0]
 8016b56:	1d1a      	adds	r2, r3, #4
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	600a      	str	r2, [r1, #0]
 8016b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016b64:	2301      	movs	r3, #1
 8016b66:	e0a3      	b.n	8016cb0 <_printf_i+0x1f4>
 8016b68:	6825      	ldr	r5, [r4, #0]
 8016b6a:	6808      	ldr	r0, [r1, #0]
 8016b6c:	062e      	lsls	r6, r5, #24
 8016b6e:	f100 0304 	add.w	r3, r0, #4
 8016b72:	d50a      	bpl.n	8016b8a <_printf_i+0xce>
 8016b74:	6805      	ldr	r5, [r0, #0]
 8016b76:	600b      	str	r3, [r1, #0]
 8016b78:	2d00      	cmp	r5, #0
 8016b7a:	da03      	bge.n	8016b84 <_printf_i+0xc8>
 8016b7c:	232d      	movs	r3, #45	; 0x2d
 8016b7e:	426d      	negs	r5, r5
 8016b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016b84:	485e      	ldr	r0, [pc, #376]	; (8016d00 <_printf_i+0x244>)
 8016b86:	230a      	movs	r3, #10
 8016b88:	e019      	b.n	8016bbe <_printf_i+0x102>
 8016b8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016b8e:	6805      	ldr	r5, [r0, #0]
 8016b90:	600b      	str	r3, [r1, #0]
 8016b92:	bf18      	it	ne
 8016b94:	b22d      	sxthne	r5, r5
 8016b96:	e7ef      	b.n	8016b78 <_printf_i+0xbc>
 8016b98:	680b      	ldr	r3, [r1, #0]
 8016b9a:	6825      	ldr	r5, [r4, #0]
 8016b9c:	1d18      	adds	r0, r3, #4
 8016b9e:	6008      	str	r0, [r1, #0]
 8016ba0:	0628      	lsls	r0, r5, #24
 8016ba2:	d501      	bpl.n	8016ba8 <_printf_i+0xec>
 8016ba4:	681d      	ldr	r5, [r3, #0]
 8016ba6:	e002      	b.n	8016bae <_printf_i+0xf2>
 8016ba8:	0669      	lsls	r1, r5, #25
 8016baa:	d5fb      	bpl.n	8016ba4 <_printf_i+0xe8>
 8016bac:	881d      	ldrh	r5, [r3, #0]
 8016bae:	4854      	ldr	r0, [pc, #336]	; (8016d00 <_printf_i+0x244>)
 8016bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8016bb2:	bf0c      	ite	eq
 8016bb4:	2308      	moveq	r3, #8
 8016bb6:	230a      	movne	r3, #10
 8016bb8:	2100      	movs	r1, #0
 8016bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016bbe:	6866      	ldr	r6, [r4, #4]
 8016bc0:	60a6      	str	r6, [r4, #8]
 8016bc2:	2e00      	cmp	r6, #0
 8016bc4:	bfa2      	ittt	ge
 8016bc6:	6821      	ldrge	r1, [r4, #0]
 8016bc8:	f021 0104 	bicge.w	r1, r1, #4
 8016bcc:	6021      	strge	r1, [r4, #0]
 8016bce:	b90d      	cbnz	r5, 8016bd4 <_printf_i+0x118>
 8016bd0:	2e00      	cmp	r6, #0
 8016bd2:	d04d      	beq.n	8016c70 <_printf_i+0x1b4>
 8016bd4:	4616      	mov	r6, r2
 8016bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8016bda:	fb03 5711 	mls	r7, r3, r1, r5
 8016bde:	5dc7      	ldrb	r7, [r0, r7]
 8016be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016be4:	462f      	mov	r7, r5
 8016be6:	42bb      	cmp	r3, r7
 8016be8:	460d      	mov	r5, r1
 8016bea:	d9f4      	bls.n	8016bd6 <_printf_i+0x11a>
 8016bec:	2b08      	cmp	r3, #8
 8016bee:	d10b      	bne.n	8016c08 <_printf_i+0x14c>
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	07df      	lsls	r7, r3, #31
 8016bf4:	d508      	bpl.n	8016c08 <_printf_i+0x14c>
 8016bf6:	6923      	ldr	r3, [r4, #16]
 8016bf8:	6861      	ldr	r1, [r4, #4]
 8016bfa:	4299      	cmp	r1, r3
 8016bfc:	bfde      	ittt	le
 8016bfe:	2330      	movle	r3, #48	; 0x30
 8016c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016c04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016c08:	1b92      	subs	r2, r2, r6
 8016c0a:	6122      	str	r2, [r4, #16]
 8016c0c:	f8cd a000 	str.w	sl, [sp]
 8016c10:	464b      	mov	r3, r9
 8016c12:	aa03      	add	r2, sp, #12
 8016c14:	4621      	mov	r1, r4
 8016c16:	4640      	mov	r0, r8
 8016c18:	f7ff fee2 	bl	80169e0 <_printf_common>
 8016c1c:	3001      	adds	r0, #1
 8016c1e:	d14c      	bne.n	8016cba <_printf_i+0x1fe>
 8016c20:	f04f 30ff 	mov.w	r0, #4294967295
 8016c24:	b004      	add	sp, #16
 8016c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c2a:	4835      	ldr	r0, [pc, #212]	; (8016d00 <_printf_i+0x244>)
 8016c2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016c30:	6823      	ldr	r3, [r4, #0]
 8016c32:	680e      	ldr	r6, [r1, #0]
 8016c34:	061f      	lsls	r7, r3, #24
 8016c36:	f856 5b04 	ldr.w	r5, [r6], #4
 8016c3a:	600e      	str	r6, [r1, #0]
 8016c3c:	d514      	bpl.n	8016c68 <_printf_i+0x1ac>
 8016c3e:	07d9      	lsls	r1, r3, #31
 8016c40:	bf44      	itt	mi
 8016c42:	f043 0320 	orrmi.w	r3, r3, #32
 8016c46:	6023      	strmi	r3, [r4, #0]
 8016c48:	b91d      	cbnz	r5, 8016c52 <_printf_i+0x196>
 8016c4a:	6823      	ldr	r3, [r4, #0]
 8016c4c:	f023 0320 	bic.w	r3, r3, #32
 8016c50:	6023      	str	r3, [r4, #0]
 8016c52:	2310      	movs	r3, #16
 8016c54:	e7b0      	b.n	8016bb8 <_printf_i+0xfc>
 8016c56:	6823      	ldr	r3, [r4, #0]
 8016c58:	f043 0320 	orr.w	r3, r3, #32
 8016c5c:	6023      	str	r3, [r4, #0]
 8016c5e:	2378      	movs	r3, #120	; 0x78
 8016c60:	4828      	ldr	r0, [pc, #160]	; (8016d04 <_printf_i+0x248>)
 8016c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016c66:	e7e3      	b.n	8016c30 <_printf_i+0x174>
 8016c68:	065e      	lsls	r6, r3, #25
 8016c6a:	bf48      	it	mi
 8016c6c:	b2ad      	uxthmi	r5, r5
 8016c6e:	e7e6      	b.n	8016c3e <_printf_i+0x182>
 8016c70:	4616      	mov	r6, r2
 8016c72:	e7bb      	b.n	8016bec <_printf_i+0x130>
 8016c74:	680b      	ldr	r3, [r1, #0]
 8016c76:	6826      	ldr	r6, [r4, #0]
 8016c78:	6960      	ldr	r0, [r4, #20]
 8016c7a:	1d1d      	adds	r5, r3, #4
 8016c7c:	600d      	str	r5, [r1, #0]
 8016c7e:	0635      	lsls	r5, r6, #24
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	d501      	bpl.n	8016c88 <_printf_i+0x1cc>
 8016c84:	6018      	str	r0, [r3, #0]
 8016c86:	e002      	b.n	8016c8e <_printf_i+0x1d2>
 8016c88:	0671      	lsls	r1, r6, #25
 8016c8a:	d5fb      	bpl.n	8016c84 <_printf_i+0x1c8>
 8016c8c:	8018      	strh	r0, [r3, #0]
 8016c8e:	2300      	movs	r3, #0
 8016c90:	6123      	str	r3, [r4, #16]
 8016c92:	4616      	mov	r6, r2
 8016c94:	e7ba      	b.n	8016c0c <_printf_i+0x150>
 8016c96:	680b      	ldr	r3, [r1, #0]
 8016c98:	1d1a      	adds	r2, r3, #4
 8016c9a:	600a      	str	r2, [r1, #0]
 8016c9c:	681e      	ldr	r6, [r3, #0]
 8016c9e:	6862      	ldr	r2, [r4, #4]
 8016ca0:	2100      	movs	r1, #0
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	f7e9 fa9c 	bl	80001e0 <memchr>
 8016ca8:	b108      	cbz	r0, 8016cae <_printf_i+0x1f2>
 8016caa:	1b80      	subs	r0, r0, r6
 8016cac:	6060      	str	r0, [r4, #4]
 8016cae:	6863      	ldr	r3, [r4, #4]
 8016cb0:	6123      	str	r3, [r4, #16]
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cb8:	e7a8      	b.n	8016c0c <_printf_i+0x150>
 8016cba:	6923      	ldr	r3, [r4, #16]
 8016cbc:	4632      	mov	r2, r6
 8016cbe:	4649      	mov	r1, r9
 8016cc0:	4640      	mov	r0, r8
 8016cc2:	47d0      	blx	sl
 8016cc4:	3001      	adds	r0, #1
 8016cc6:	d0ab      	beq.n	8016c20 <_printf_i+0x164>
 8016cc8:	6823      	ldr	r3, [r4, #0]
 8016cca:	079b      	lsls	r3, r3, #30
 8016ccc:	d413      	bmi.n	8016cf6 <_printf_i+0x23a>
 8016cce:	68e0      	ldr	r0, [r4, #12]
 8016cd0:	9b03      	ldr	r3, [sp, #12]
 8016cd2:	4298      	cmp	r0, r3
 8016cd4:	bfb8      	it	lt
 8016cd6:	4618      	movlt	r0, r3
 8016cd8:	e7a4      	b.n	8016c24 <_printf_i+0x168>
 8016cda:	2301      	movs	r3, #1
 8016cdc:	4632      	mov	r2, r6
 8016cde:	4649      	mov	r1, r9
 8016ce0:	4640      	mov	r0, r8
 8016ce2:	47d0      	blx	sl
 8016ce4:	3001      	adds	r0, #1
 8016ce6:	d09b      	beq.n	8016c20 <_printf_i+0x164>
 8016ce8:	3501      	adds	r5, #1
 8016cea:	68e3      	ldr	r3, [r4, #12]
 8016cec:	9903      	ldr	r1, [sp, #12]
 8016cee:	1a5b      	subs	r3, r3, r1
 8016cf0:	42ab      	cmp	r3, r5
 8016cf2:	dcf2      	bgt.n	8016cda <_printf_i+0x21e>
 8016cf4:	e7eb      	b.n	8016cce <_printf_i+0x212>
 8016cf6:	2500      	movs	r5, #0
 8016cf8:	f104 0619 	add.w	r6, r4, #25
 8016cfc:	e7f5      	b.n	8016cea <_printf_i+0x22e>
 8016cfe:	bf00      	nop
 8016d00:	0801c836 	.word	0x0801c836
 8016d04:	0801c847 	.word	0x0801c847

08016d08 <_scanf_float>:
 8016d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d0c:	b087      	sub	sp, #28
 8016d0e:	4617      	mov	r7, r2
 8016d10:	9303      	str	r3, [sp, #12]
 8016d12:	688b      	ldr	r3, [r1, #8]
 8016d14:	1e5a      	subs	r2, r3, #1
 8016d16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016d1a:	bf83      	ittte	hi
 8016d1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016d20:	195b      	addhi	r3, r3, r5
 8016d22:	9302      	strhi	r3, [sp, #8]
 8016d24:	2300      	movls	r3, #0
 8016d26:	bf86      	itte	hi
 8016d28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016d2c:	608b      	strhi	r3, [r1, #8]
 8016d2e:	9302      	strls	r3, [sp, #8]
 8016d30:	680b      	ldr	r3, [r1, #0]
 8016d32:	468b      	mov	fp, r1
 8016d34:	2500      	movs	r5, #0
 8016d36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016d3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8016d3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016d42:	4680      	mov	r8, r0
 8016d44:	460c      	mov	r4, r1
 8016d46:	465e      	mov	r6, fp
 8016d48:	46aa      	mov	sl, r5
 8016d4a:	46a9      	mov	r9, r5
 8016d4c:	9501      	str	r5, [sp, #4]
 8016d4e:	68a2      	ldr	r2, [r4, #8]
 8016d50:	b152      	cbz	r2, 8016d68 <_scanf_float+0x60>
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	2b4e      	cmp	r3, #78	; 0x4e
 8016d58:	d864      	bhi.n	8016e24 <_scanf_float+0x11c>
 8016d5a:	2b40      	cmp	r3, #64	; 0x40
 8016d5c:	d83c      	bhi.n	8016dd8 <_scanf_float+0xd0>
 8016d5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016d62:	b2c8      	uxtb	r0, r1
 8016d64:	280e      	cmp	r0, #14
 8016d66:	d93a      	bls.n	8016dde <_scanf_float+0xd6>
 8016d68:	f1b9 0f00 	cmp.w	r9, #0
 8016d6c:	d003      	beq.n	8016d76 <_scanf_float+0x6e>
 8016d6e:	6823      	ldr	r3, [r4, #0]
 8016d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016d74:	6023      	str	r3, [r4, #0]
 8016d76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016d7a:	f1ba 0f01 	cmp.w	sl, #1
 8016d7e:	f200 8113 	bhi.w	8016fa8 <_scanf_float+0x2a0>
 8016d82:	455e      	cmp	r6, fp
 8016d84:	f200 8105 	bhi.w	8016f92 <_scanf_float+0x28a>
 8016d88:	2501      	movs	r5, #1
 8016d8a:	4628      	mov	r0, r5
 8016d8c:	b007      	add	sp, #28
 8016d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016d96:	2a0d      	cmp	r2, #13
 8016d98:	d8e6      	bhi.n	8016d68 <_scanf_float+0x60>
 8016d9a:	a101      	add	r1, pc, #4	; (adr r1, 8016da0 <_scanf_float+0x98>)
 8016d9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016da0:	08016edf 	.word	0x08016edf
 8016da4:	08016d69 	.word	0x08016d69
 8016da8:	08016d69 	.word	0x08016d69
 8016dac:	08016d69 	.word	0x08016d69
 8016db0:	08016f3f 	.word	0x08016f3f
 8016db4:	08016f17 	.word	0x08016f17
 8016db8:	08016d69 	.word	0x08016d69
 8016dbc:	08016d69 	.word	0x08016d69
 8016dc0:	08016eed 	.word	0x08016eed
 8016dc4:	08016d69 	.word	0x08016d69
 8016dc8:	08016d69 	.word	0x08016d69
 8016dcc:	08016d69 	.word	0x08016d69
 8016dd0:	08016d69 	.word	0x08016d69
 8016dd4:	08016ea5 	.word	0x08016ea5
 8016dd8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016ddc:	e7db      	b.n	8016d96 <_scanf_float+0x8e>
 8016dde:	290e      	cmp	r1, #14
 8016de0:	d8c2      	bhi.n	8016d68 <_scanf_float+0x60>
 8016de2:	a001      	add	r0, pc, #4	; (adr r0, 8016de8 <_scanf_float+0xe0>)
 8016de4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016de8:	08016e97 	.word	0x08016e97
 8016dec:	08016d69 	.word	0x08016d69
 8016df0:	08016e97 	.word	0x08016e97
 8016df4:	08016f2b 	.word	0x08016f2b
 8016df8:	08016d69 	.word	0x08016d69
 8016dfc:	08016e45 	.word	0x08016e45
 8016e00:	08016e81 	.word	0x08016e81
 8016e04:	08016e81 	.word	0x08016e81
 8016e08:	08016e81 	.word	0x08016e81
 8016e0c:	08016e81 	.word	0x08016e81
 8016e10:	08016e81 	.word	0x08016e81
 8016e14:	08016e81 	.word	0x08016e81
 8016e18:	08016e81 	.word	0x08016e81
 8016e1c:	08016e81 	.word	0x08016e81
 8016e20:	08016e81 	.word	0x08016e81
 8016e24:	2b6e      	cmp	r3, #110	; 0x6e
 8016e26:	d809      	bhi.n	8016e3c <_scanf_float+0x134>
 8016e28:	2b60      	cmp	r3, #96	; 0x60
 8016e2a:	d8b2      	bhi.n	8016d92 <_scanf_float+0x8a>
 8016e2c:	2b54      	cmp	r3, #84	; 0x54
 8016e2e:	d077      	beq.n	8016f20 <_scanf_float+0x218>
 8016e30:	2b59      	cmp	r3, #89	; 0x59
 8016e32:	d199      	bne.n	8016d68 <_scanf_float+0x60>
 8016e34:	2d07      	cmp	r5, #7
 8016e36:	d197      	bne.n	8016d68 <_scanf_float+0x60>
 8016e38:	2508      	movs	r5, #8
 8016e3a:	e029      	b.n	8016e90 <_scanf_float+0x188>
 8016e3c:	2b74      	cmp	r3, #116	; 0x74
 8016e3e:	d06f      	beq.n	8016f20 <_scanf_float+0x218>
 8016e40:	2b79      	cmp	r3, #121	; 0x79
 8016e42:	e7f6      	b.n	8016e32 <_scanf_float+0x12a>
 8016e44:	6821      	ldr	r1, [r4, #0]
 8016e46:	05c8      	lsls	r0, r1, #23
 8016e48:	d51a      	bpl.n	8016e80 <_scanf_float+0x178>
 8016e4a:	9b02      	ldr	r3, [sp, #8]
 8016e4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016e50:	6021      	str	r1, [r4, #0]
 8016e52:	f109 0901 	add.w	r9, r9, #1
 8016e56:	b11b      	cbz	r3, 8016e60 <_scanf_float+0x158>
 8016e58:	3b01      	subs	r3, #1
 8016e5a:	3201      	adds	r2, #1
 8016e5c:	9302      	str	r3, [sp, #8]
 8016e5e:	60a2      	str	r2, [r4, #8]
 8016e60:	68a3      	ldr	r3, [r4, #8]
 8016e62:	3b01      	subs	r3, #1
 8016e64:	60a3      	str	r3, [r4, #8]
 8016e66:	6923      	ldr	r3, [r4, #16]
 8016e68:	3301      	adds	r3, #1
 8016e6a:	6123      	str	r3, [r4, #16]
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	3b01      	subs	r3, #1
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	607b      	str	r3, [r7, #4]
 8016e74:	f340 8084 	ble.w	8016f80 <_scanf_float+0x278>
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	3301      	adds	r3, #1
 8016e7c:	603b      	str	r3, [r7, #0]
 8016e7e:	e766      	b.n	8016d4e <_scanf_float+0x46>
 8016e80:	eb1a 0f05 	cmn.w	sl, r5
 8016e84:	f47f af70 	bne.w	8016d68 <_scanf_float+0x60>
 8016e88:	6822      	ldr	r2, [r4, #0]
 8016e8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016e8e:	6022      	str	r2, [r4, #0]
 8016e90:	f806 3b01 	strb.w	r3, [r6], #1
 8016e94:	e7e4      	b.n	8016e60 <_scanf_float+0x158>
 8016e96:	6822      	ldr	r2, [r4, #0]
 8016e98:	0610      	lsls	r0, r2, #24
 8016e9a:	f57f af65 	bpl.w	8016d68 <_scanf_float+0x60>
 8016e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ea2:	e7f4      	b.n	8016e8e <_scanf_float+0x186>
 8016ea4:	f1ba 0f00 	cmp.w	sl, #0
 8016ea8:	d10e      	bne.n	8016ec8 <_scanf_float+0x1c0>
 8016eaa:	f1b9 0f00 	cmp.w	r9, #0
 8016eae:	d10e      	bne.n	8016ece <_scanf_float+0x1c6>
 8016eb0:	6822      	ldr	r2, [r4, #0]
 8016eb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016eb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016eba:	d108      	bne.n	8016ece <_scanf_float+0x1c6>
 8016ebc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016ec0:	6022      	str	r2, [r4, #0]
 8016ec2:	f04f 0a01 	mov.w	sl, #1
 8016ec6:	e7e3      	b.n	8016e90 <_scanf_float+0x188>
 8016ec8:	f1ba 0f02 	cmp.w	sl, #2
 8016ecc:	d055      	beq.n	8016f7a <_scanf_float+0x272>
 8016ece:	2d01      	cmp	r5, #1
 8016ed0:	d002      	beq.n	8016ed8 <_scanf_float+0x1d0>
 8016ed2:	2d04      	cmp	r5, #4
 8016ed4:	f47f af48 	bne.w	8016d68 <_scanf_float+0x60>
 8016ed8:	3501      	adds	r5, #1
 8016eda:	b2ed      	uxtb	r5, r5
 8016edc:	e7d8      	b.n	8016e90 <_scanf_float+0x188>
 8016ede:	f1ba 0f01 	cmp.w	sl, #1
 8016ee2:	f47f af41 	bne.w	8016d68 <_scanf_float+0x60>
 8016ee6:	f04f 0a02 	mov.w	sl, #2
 8016eea:	e7d1      	b.n	8016e90 <_scanf_float+0x188>
 8016eec:	b97d      	cbnz	r5, 8016f0e <_scanf_float+0x206>
 8016eee:	f1b9 0f00 	cmp.w	r9, #0
 8016ef2:	f47f af3c 	bne.w	8016d6e <_scanf_float+0x66>
 8016ef6:	6822      	ldr	r2, [r4, #0]
 8016ef8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016efc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016f00:	f47f af39 	bne.w	8016d76 <_scanf_float+0x6e>
 8016f04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016f08:	6022      	str	r2, [r4, #0]
 8016f0a:	2501      	movs	r5, #1
 8016f0c:	e7c0      	b.n	8016e90 <_scanf_float+0x188>
 8016f0e:	2d03      	cmp	r5, #3
 8016f10:	d0e2      	beq.n	8016ed8 <_scanf_float+0x1d0>
 8016f12:	2d05      	cmp	r5, #5
 8016f14:	e7de      	b.n	8016ed4 <_scanf_float+0x1cc>
 8016f16:	2d02      	cmp	r5, #2
 8016f18:	f47f af26 	bne.w	8016d68 <_scanf_float+0x60>
 8016f1c:	2503      	movs	r5, #3
 8016f1e:	e7b7      	b.n	8016e90 <_scanf_float+0x188>
 8016f20:	2d06      	cmp	r5, #6
 8016f22:	f47f af21 	bne.w	8016d68 <_scanf_float+0x60>
 8016f26:	2507      	movs	r5, #7
 8016f28:	e7b2      	b.n	8016e90 <_scanf_float+0x188>
 8016f2a:	6822      	ldr	r2, [r4, #0]
 8016f2c:	0591      	lsls	r1, r2, #22
 8016f2e:	f57f af1b 	bpl.w	8016d68 <_scanf_float+0x60>
 8016f32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016f36:	6022      	str	r2, [r4, #0]
 8016f38:	f8cd 9004 	str.w	r9, [sp, #4]
 8016f3c:	e7a8      	b.n	8016e90 <_scanf_float+0x188>
 8016f3e:	6822      	ldr	r2, [r4, #0]
 8016f40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016f44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016f48:	d006      	beq.n	8016f58 <_scanf_float+0x250>
 8016f4a:	0550      	lsls	r0, r2, #21
 8016f4c:	f57f af0c 	bpl.w	8016d68 <_scanf_float+0x60>
 8016f50:	f1b9 0f00 	cmp.w	r9, #0
 8016f54:	f43f af0f 	beq.w	8016d76 <_scanf_float+0x6e>
 8016f58:	0591      	lsls	r1, r2, #22
 8016f5a:	bf58      	it	pl
 8016f5c:	9901      	ldrpl	r1, [sp, #4]
 8016f5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016f62:	bf58      	it	pl
 8016f64:	eba9 0101 	subpl.w	r1, r9, r1
 8016f68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016f6c:	bf58      	it	pl
 8016f6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016f72:	6022      	str	r2, [r4, #0]
 8016f74:	f04f 0900 	mov.w	r9, #0
 8016f78:	e78a      	b.n	8016e90 <_scanf_float+0x188>
 8016f7a:	f04f 0a03 	mov.w	sl, #3
 8016f7e:	e787      	b.n	8016e90 <_scanf_float+0x188>
 8016f80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016f84:	4639      	mov	r1, r7
 8016f86:	4640      	mov	r0, r8
 8016f88:	4798      	blx	r3
 8016f8a:	2800      	cmp	r0, #0
 8016f8c:	f43f aedf 	beq.w	8016d4e <_scanf_float+0x46>
 8016f90:	e6ea      	b.n	8016d68 <_scanf_float+0x60>
 8016f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016f9a:	463a      	mov	r2, r7
 8016f9c:	4640      	mov	r0, r8
 8016f9e:	4798      	blx	r3
 8016fa0:	6923      	ldr	r3, [r4, #16]
 8016fa2:	3b01      	subs	r3, #1
 8016fa4:	6123      	str	r3, [r4, #16]
 8016fa6:	e6ec      	b.n	8016d82 <_scanf_float+0x7a>
 8016fa8:	1e6b      	subs	r3, r5, #1
 8016faa:	2b06      	cmp	r3, #6
 8016fac:	d825      	bhi.n	8016ffa <_scanf_float+0x2f2>
 8016fae:	2d02      	cmp	r5, #2
 8016fb0:	d836      	bhi.n	8017020 <_scanf_float+0x318>
 8016fb2:	455e      	cmp	r6, fp
 8016fb4:	f67f aee8 	bls.w	8016d88 <_scanf_float+0x80>
 8016fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016fbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016fc0:	463a      	mov	r2, r7
 8016fc2:	4640      	mov	r0, r8
 8016fc4:	4798      	blx	r3
 8016fc6:	6923      	ldr	r3, [r4, #16]
 8016fc8:	3b01      	subs	r3, #1
 8016fca:	6123      	str	r3, [r4, #16]
 8016fcc:	e7f1      	b.n	8016fb2 <_scanf_float+0x2aa>
 8016fce:	9802      	ldr	r0, [sp, #8]
 8016fd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016fd4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016fd8:	9002      	str	r0, [sp, #8]
 8016fda:	463a      	mov	r2, r7
 8016fdc:	4640      	mov	r0, r8
 8016fde:	4798      	blx	r3
 8016fe0:	6923      	ldr	r3, [r4, #16]
 8016fe2:	3b01      	subs	r3, #1
 8016fe4:	6123      	str	r3, [r4, #16]
 8016fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fea:	fa5f fa8a 	uxtb.w	sl, sl
 8016fee:	f1ba 0f02 	cmp.w	sl, #2
 8016ff2:	d1ec      	bne.n	8016fce <_scanf_float+0x2c6>
 8016ff4:	3d03      	subs	r5, #3
 8016ff6:	b2ed      	uxtb	r5, r5
 8016ff8:	1b76      	subs	r6, r6, r5
 8016ffa:	6823      	ldr	r3, [r4, #0]
 8016ffc:	05da      	lsls	r2, r3, #23
 8016ffe:	d52f      	bpl.n	8017060 <_scanf_float+0x358>
 8017000:	055b      	lsls	r3, r3, #21
 8017002:	d510      	bpl.n	8017026 <_scanf_float+0x31e>
 8017004:	455e      	cmp	r6, fp
 8017006:	f67f aebf 	bls.w	8016d88 <_scanf_float+0x80>
 801700a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801700e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017012:	463a      	mov	r2, r7
 8017014:	4640      	mov	r0, r8
 8017016:	4798      	blx	r3
 8017018:	6923      	ldr	r3, [r4, #16]
 801701a:	3b01      	subs	r3, #1
 801701c:	6123      	str	r3, [r4, #16]
 801701e:	e7f1      	b.n	8017004 <_scanf_float+0x2fc>
 8017020:	46aa      	mov	sl, r5
 8017022:	9602      	str	r6, [sp, #8]
 8017024:	e7df      	b.n	8016fe6 <_scanf_float+0x2de>
 8017026:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801702a:	6923      	ldr	r3, [r4, #16]
 801702c:	2965      	cmp	r1, #101	; 0x65
 801702e:	f103 33ff 	add.w	r3, r3, #4294967295
 8017032:	f106 35ff 	add.w	r5, r6, #4294967295
 8017036:	6123      	str	r3, [r4, #16]
 8017038:	d00c      	beq.n	8017054 <_scanf_float+0x34c>
 801703a:	2945      	cmp	r1, #69	; 0x45
 801703c:	d00a      	beq.n	8017054 <_scanf_float+0x34c>
 801703e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017042:	463a      	mov	r2, r7
 8017044:	4640      	mov	r0, r8
 8017046:	4798      	blx	r3
 8017048:	6923      	ldr	r3, [r4, #16]
 801704a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801704e:	3b01      	subs	r3, #1
 8017050:	1eb5      	subs	r5, r6, #2
 8017052:	6123      	str	r3, [r4, #16]
 8017054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017058:	463a      	mov	r2, r7
 801705a:	4640      	mov	r0, r8
 801705c:	4798      	blx	r3
 801705e:	462e      	mov	r6, r5
 8017060:	6825      	ldr	r5, [r4, #0]
 8017062:	f015 0510 	ands.w	r5, r5, #16
 8017066:	d158      	bne.n	801711a <_scanf_float+0x412>
 8017068:	7035      	strb	r5, [r6, #0]
 801706a:	6823      	ldr	r3, [r4, #0]
 801706c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017074:	d11c      	bne.n	80170b0 <_scanf_float+0x3a8>
 8017076:	9b01      	ldr	r3, [sp, #4]
 8017078:	454b      	cmp	r3, r9
 801707a:	eba3 0209 	sub.w	r2, r3, r9
 801707e:	d124      	bne.n	80170ca <_scanf_float+0x3c2>
 8017080:	2200      	movs	r2, #0
 8017082:	4659      	mov	r1, fp
 8017084:	4640      	mov	r0, r8
 8017086:	f000 fee1 	bl	8017e4c <_strtod_r>
 801708a:	9b03      	ldr	r3, [sp, #12]
 801708c:	6821      	ldr	r1, [r4, #0]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	f011 0f02 	tst.w	r1, #2
 8017094:	ec57 6b10 	vmov	r6, r7, d0
 8017098:	f103 0204 	add.w	r2, r3, #4
 801709c:	d020      	beq.n	80170e0 <_scanf_float+0x3d8>
 801709e:	9903      	ldr	r1, [sp, #12]
 80170a0:	600a      	str	r2, [r1, #0]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	e9c3 6700 	strd	r6, r7, [r3]
 80170a8:	68e3      	ldr	r3, [r4, #12]
 80170aa:	3301      	adds	r3, #1
 80170ac:	60e3      	str	r3, [r4, #12]
 80170ae:	e66c      	b.n	8016d8a <_scanf_float+0x82>
 80170b0:	9b04      	ldr	r3, [sp, #16]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d0e4      	beq.n	8017080 <_scanf_float+0x378>
 80170b6:	9905      	ldr	r1, [sp, #20]
 80170b8:	230a      	movs	r3, #10
 80170ba:	462a      	mov	r2, r5
 80170bc:	3101      	adds	r1, #1
 80170be:	4640      	mov	r0, r8
 80170c0:	f000 ff4e 	bl	8017f60 <_strtol_r>
 80170c4:	9b04      	ldr	r3, [sp, #16]
 80170c6:	9e05      	ldr	r6, [sp, #20]
 80170c8:	1ac2      	subs	r2, r0, r3
 80170ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80170ce:	429e      	cmp	r6, r3
 80170d0:	bf28      	it	cs
 80170d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80170d6:	4912      	ldr	r1, [pc, #72]	; (8017120 <_scanf_float+0x418>)
 80170d8:	4630      	mov	r0, r6
 80170da:	f000 f86f 	bl	80171bc <siprintf>
 80170de:	e7cf      	b.n	8017080 <_scanf_float+0x378>
 80170e0:	f011 0f04 	tst.w	r1, #4
 80170e4:	9903      	ldr	r1, [sp, #12]
 80170e6:	600a      	str	r2, [r1, #0]
 80170e8:	d1db      	bne.n	80170a2 <_scanf_float+0x39a>
 80170ea:	f8d3 8000 	ldr.w	r8, [r3]
 80170ee:	ee10 2a10 	vmov	r2, s0
 80170f2:	ee10 0a10 	vmov	r0, s0
 80170f6:	463b      	mov	r3, r7
 80170f8:	4639      	mov	r1, r7
 80170fa:	f7e9 fd17 	bl	8000b2c <__aeabi_dcmpun>
 80170fe:	b128      	cbz	r0, 801710c <_scanf_float+0x404>
 8017100:	4808      	ldr	r0, [pc, #32]	; (8017124 <_scanf_float+0x41c>)
 8017102:	f000 f821 	bl	8017148 <nanf>
 8017106:	ed88 0a00 	vstr	s0, [r8]
 801710a:	e7cd      	b.n	80170a8 <_scanf_float+0x3a0>
 801710c:	4630      	mov	r0, r6
 801710e:	4639      	mov	r1, r7
 8017110:	f7e9 fd6a 	bl	8000be8 <__aeabi_d2f>
 8017114:	f8c8 0000 	str.w	r0, [r8]
 8017118:	e7c6      	b.n	80170a8 <_scanf_float+0x3a0>
 801711a:	2500      	movs	r5, #0
 801711c:	e635      	b.n	8016d8a <_scanf_float+0x82>
 801711e:	bf00      	nop
 8017120:	0801c858 	.word	0x0801c858
 8017124:	0801cc70 	.word	0x0801cc70

08017128 <_sbrk_r>:
 8017128:	b538      	push	{r3, r4, r5, lr}
 801712a:	4d06      	ldr	r5, [pc, #24]	; (8017144 <_sbrk_r+0x1c>)
 801712c:	2300      	movs	r3, #0
 801712e:	4604      	mov	r4, r0
 8017130:	4608      	mov	r0, r1
 8017132:	602b      	str	r3, [r5, #0]
 8017134:	f7f4 fa00 	bl	800b538 <_sbrk>
 8017138:	1c43      	adds	r3, r0, #1
 801713a:	d102      	bne.n	8017142 <_sbrk_r+0x1a>
 801713c:	682b      	ldr	r3, [r5, #0]
 801713e:	b103      	cbz	r3, 8017142 <_sbrk_r+0x1a>
 8017140:	6023      	str	r3, [r4, #0]
 8017142:	bd38      	pop	{r3, r4, r5, pc}
 8017144:	20011b84 	.word	0x20011b84

08017148 <nanf>:
 8017148:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017150 <nanf+0x8>
 801714c:	4770      	bx	lr
 801714e:	bf00      	nop
 8017150:	7fc00000 	.word	0x7fc00000

08017154 <sniprintf>:
 8017154:	b40c      	push	{r2, r3}
 8017156:	b530      	push	{r4, r5, lr}
 8017158:	4b17      	ldr	r3, [pc, #92]	; (80171b8 <sniprintf+0x64>)
 801715a:	1e0c      	subs	r4, r1, #0
 801715c:	681d      	ldr	r5, [r3, #0]
 801715e:	b09d      	sub	sp, #116	; 0x74
 8017160:	da08      	bge.n	8017174 <sniprintf+0x20>
 8017162:	238b      	movs	r3, #139	; 0x8b
 8017164:	602b      	str	r3, [r5, #0]
 8017166:	f04f 30ff 	mov.w	r0, #4294967295
 801716a:	b01d      	add	sp, #116	; 0x74
 801716c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017170:	b002      	add	sp, #8
 8017172:	4770      	bx	lr
 8017174:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017178:	f8ad 3014 	strh.w	r3, [sp, #20]
 801717c:	bf14      	ite	ne
 801717e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017182:	4623      	moveq	r3, r4
 8017184:	9304      	str	r3, [sp, #16]
 8017186:	9307      	str	r3, [sp, #28]
 8017188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801718c:	9002      	str	r0, [sp, #8]
 801718e:	9006      	str	r0, [sp, #24]
 8017190:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017194:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017196:	ab21      	add	r3, sp, #132	; 0x84
 8017198:	a902      	add	r1, sp, #8
 801719a:	4628      	mov	r0, r5
 801719c:	9301      	str	r3, [sp, #4]
 801719e:	f002 fe13 	bl	8019dc8 <_svfiprintf_r>
 80171a2:	1c43      	adds	r3, r0, #1
 80171a4:	bfbc      	itt	lt
 80171a6:	238b      	movlt	r3, #139	; 0x8b
 80171a8:	602b      	strlt	r3, [r5, #0]
 80171aa:	2c00      	cmp	r4, #0
 80171ac:	d0dd      	beq.n	801716a <sniprintf+0x16>
 80171ae:	9b02      	ldr	r3, [sp, #8]
 80171b0:	2200      	movs	r2, #0
 80171b2:	701a      	strb	r2, [r3, #0]
 80171b4:	e7d9      	b.n	801716a <sniprintf+0x16>
 80171b6:	bf00      	nop
 80171b8:	20004210 	.word	0x20004210

080171bc <siprintf>:
 80171bc:	b40e      	push	{r1, r2, r3}
 80171be:	b500      	push	{lr}
 80171c0:	b09c      	sub	sp, #112	; 0x70
 80171c2:	ab1d      	add	r3, sp, #116	; 0x74
 80171c4:	9002      	str	r0, [sp, #8]
 80171c6:	9006      	str	r0, [sp, #24]
 80171c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80171cc:	4809      	ldr	r0, [pc, #36]	; (80171f4 <siprintf+0x38>)
 80171ce:	9107      	str	r1, [sp, #28]
 80171d0:	9104      	str	r1, [sp, #16]
 80171d2:	4909      	ldr	r1, [pc, #36]	; (80171f8 <siprintf+0x3c>)
 80171d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80171d8:	9105      	str	r1, [sp, #20]
 80171da:	6800      	ldr	r0, [r0, #0]
 80171dc:	9301      	str	r3, [sp, #4]
 80171de:	a902      	add	r1, sp, #8
 80171e0:	f002 fdf2 	bl	8019dc8 <_svfiprintf_r>
 80171e4:	9b02      	ldr	r3, [sp, #8]
 80171e6:	2200      	movs	r2, #0
 80171e8:	701a      	strb	r2, [r3, #0]
 80171ea:	b01c      	add	sp, #112	; 0x70
 80171ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80171f0:	b003      	add	sp, #12
 80171f2:	4770      	bx	lr
 80171f4:	20004210 	.word	0x20004210
 80171f8:	ffff0208 	.word	0xffff0208

080171fc <sulp>:
 80171fc:	b570      	push	{r4, r5, r6, lr}
 80171fe:	4604      	mov	r4, r0
 8017200:	460d      	mov	r5, r1
 8017202:	ec45 4b10 	vmov	d0, r4, r5
 8017206:	4616      	mov	r6, r2
 8017208:	f002 fc24 	bl	8019a54 <__ulp>
 801720c:	ec51 0b10 	vmov	r0, r1, d0
 8017210:	b17e      	cbz	r6, 8017232 <sulp+0x36>
 8017212:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017216:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801721a:	2b00      	cmp	r3, #0
 801721c:	dd09      	ble.n	8017232 <sulp+0x36>
 801721e:	051b      	lsls	r3, r3, #20
 8017220:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017224:	2400      	movs	r4, #0
 8017226:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801722a:	4622      	mov	r2, r4
 801722c:	462b      	mov	r3, r5
 801722e:	f7e9 f9e3 	bl	80005f8 <__aeabi_dmul>
 8017232:	bd70      	pop	{r4, r5, r6, pc}
 8017234:	0000      	movs	r0, r0
	...

08017238 <_strtod_l>:
 8017238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801723c:	b0a3      	sub	sp, #140	; 0x8c
 801723e:	461f      	mov	r7, r3
 8017240:	2300      	movs	r3, #0
 8017242:	931e      	str	r3, [sp, #120]	; 0x78
 8017244:	4ba4      	ldr	r3, [pc, #656]	; (80174d8 <_strtod_l+0x2a0>)
 8017246:	9219      	str	r2, [sp, #100]	; 0x64
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	9307      	str	r3, [sp, #28]
 801724c:	4604      	mov	r4, r0
 801724e:	4618      	mov	r0, r3
 8017250:	4688      	mov	r8, r1
 8017252:	f7e8 ffbd 	bl	80001d0 <strlen>
 8017256:	f04f 0a00 	mov.w	sl, #0
 801725a:	4605      	mov	r5, r0
 801725c:	f04f 0b00 	mov.w	fp, #0
 8017260:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017264:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017266:	781a      	ldrb	r2, [r3, #0]
 8017268:	2a2b      	cmp	r2, #43	; 0x2b
 801726a:	d04c      	beq.n	8017306 <_strtod_l+0xce>
 801726c:	d839      	bhi.n	80172e2 <_strtod_l+0xaa>
 801726e:	2a0d      	cmp	r2, #13
 8017270:	d832      	bhi.n	80172d8 <_strtod_l+0xa0>
 8017272:	2a08      	cmp	r2, #8
 8017274:	d832      	bhi.n	80172dc <_strtod_l+0xa4>
 8017276:	2a00      	cmp	r2, #0
 8017278:	d03c      	beq.n	80172f4 <_strtod_l+0xbc>
 801727a:	2300      	movs	r3, #0
 801727c:	930e      	str	r3, [sp, #56]	; 0x38
 801727e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017280:	7833      	ldrb	r3, [r6, #0]
 8017282:	2b30      	cmp	r3, #48	; 0x30
 8017284:	f040 80b4 	bne.w	80173f0 <_strtod_l+0x1b8>
 8017288:	7873      	ldrb	r3, [r6, #1]
 801728a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801728e:	2b58      	cmp	r3, #88	; 0x58
 8017290:	d16c      	bne.n	801736c <_strtod_l+0x134>
 8017292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017294:	9301      	str	r3, [sp, #4]
 8017296:	ab1e      	add	r3, sp, #120	; 0x78
 8017298:	9702      	str	r7, [sp, #8]
 801729a:	9300      	str	r3, [sp, #0]
 801729c:	4a8f      	ldr	r2, [pc, #572]	; (80174dc <_strtod_l+0x2a4>)
 801729e:	ab1f      	add	r3, sp, #124	; 0x7c
 80172a0:	a91d      	add	r1, sp, #116	; 0x74
 80172a2:	4620      	mov	r0, r4
 80172a4:	f001 fd40 	bl	8018d28 <__gethex>
 80172a8:	f010 0707 	ands.w	r7, r0, #7
 80172ac:	4605      	mov	r5, r0
 80172ae:	d005      	beq.n	80172bc <_strtod_l+0x84>
 80172b0:	2f06      	cmp	r7, #6
 80172b2:	d12a      	bne.n	801730a <_strtod_l+0xd2>
 80172b4:	3601      	adds	r6, #1
 80172b6:	2300      	movs	r3, #0
 80172b8:	961d      	str	r6, [sp, #116]	; 0x74
 80172ba:	930e      	str	r3, [sp, #56]	; 0x38
 80172bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80172be:	2b00      	cmp	r3, #0
 80172c0:	f040 8596 	bne.w	8017df0 <_strtod_l+0xbb8>
 80172c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172c6:	b1db      	cbz	r3, 8017300 <_strtod_l+0xc8>
 80172c8:	4652      	mov	r2, sl
 80172ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80172ce:	ec43 2b10 	vmov	d0, r2, r3
 80172d2:	b023      	add	sp, #140	; 0x8c
 80172d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d8:	2a20      	cmp	r2, #32
 80172da:	d1ce      	bne.n	801727a <_strtod_l+0x42>
 80172dc:	3301      	adds	r3, #1
 80172de:	931d      	str	r3, [sp, #116]	; 0x74
 80172e0:	e7c0      	b.n	8017264 <_strtod_l+0x2c>
 80172e2:	2a2d      	cmp	r2, #45	; 0x2d
 80172e4:	d1c9      	bne.n	801727a <_strtod_l+0x42>
 80172e6:	2201      	movs	r2, #1
 80172e8:	920e      	str	r2, [sp, #56]	; 0x38
 80172ea:	1c5a      	adds	r2, r3, #1
 80172ec:	921d      	str	r2, [sp, #116]	; 0x74
 80172ee:	785b      	ldrb	r3, [r3, #1]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d1c4      	bne.n	801727e <_strtod_l+0x46>
 80172f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80172f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	f040 8576 	bne.w	8017dec <_strtod_l+0xbb4>
 8017300:	4652      	mov	r2, sl
 8017302:	465b      	mov	r3, fp
 8017304:	e7e3      	b.n	80172ce <_strtod_l+0x96>
 8017306:	2200      	movs	r2, #0
 8017308:	e7ee      	b.n	80172e8 <_strtod_l+0xb0>
 801730a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801730c:	b13a      	cbz	r2, 801731e <_strtod_l+0xe6>
 801730e:	2135      	movs	r1, #53	; 0x35
 8017310:	a820      	add	r0, sp, #128	; 0x80
 8017312:	f002 fcaa 	bl	8019c6a <__copybits>
 8017316:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017318:	4620      	mov	r0, r4
 801731a:	f002 f86f 	bl	80193fc <_Bfree>
 801731e:	3f01      	subs	r7, #1
 8017320:	2f05      	cmp	r7, #5
 8017322:	d807      	bhi.n	8017334 <_strtod_l+0xfc>
 8017324:	e8df f007 	tbb	[pc, r7]
 8017328:	1d180b0e 	.word	0x1d180b0e
 801732c:	030e      	.short	0x030e
 801732e:	f04f 0b00 	mov.w	fp, #0
 8017332:	46da      	mov	sl, fp
 8017334:	0728      	lsls	r0, r5, #28
 8017336:	d5c1      	bpl.n	80172bc <_strtod_l+0x84>
 8017338:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801733c:	e7be      	b.n	80172bc <_strtod_l+0x84>
 801733e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017342:	e7f7      	b.n	8017334 <_strtod_l+0xfc>
 8017344:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017348:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801734a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801734e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017352:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017356:	e7ed      	b.n	8017334 <_strtod_l+0xfc>
 8017358:	f8df b184 	ldr.w	fp, [pc, #388]	; 80174e0 <_strtod_l+0x2a8>
 801735c:	f04f 0a00 	mov.w	sl, #0
 8017360:	e7e8      	b.n	8017334 <_strtod_l+0xfc>
 8017362:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017366:	f04f 3aff 	mov.w	sl, #4294967295
 801736a:	e7e3      	b.n	8017334 <_strtod_l+0xfc>
 801736c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801736e:	1c5a      	adds	r2, r3, #1
 8017370:	921d      	str	r2, [sp, #116]	; 0x74
 8017372:	785b      	ldrb	r3, [r3, #1]
 8017374:	2b30      	cmp	r3, #48	; 0x30
 8017376:	d0f9      	beq.n	801736c <_strtod_l+0x134>
 8017378:	2b00      	cmp	r3, #0
 801737a:	d09f      	beq.n	80172bc <_strtod_l+0x84>
 801737c:	2301      	movs	r3, #1
 801737e:	f04f 0900 	mov.w	r9, #0
 8017382:	9304      	str	r3, [sp, #16]
 8017384:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017386:	930a      	str	r3, [sp, #40]	; 0x28
 8017388:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801738c:	464f      	mov	r7, r9
 801738e:	220a      	movs	r2, #10
 8017390:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017392:	7806      	ldrb	r6, [r0, #0]
 8017394:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017398:	b2d9      	uxtb	r1, r3
 801739a:	2909      	cmp	r1, #9
 801739c:	d92a      	bls.n	80173f4 <_strtod_l+0x1bc>
 801739e:	9907      	ldr	r1, [sp, #28]
 80173a0:	462a      	mov	r2, r5
 80173a2:	f002 fe19 	bl	8019fd8 <strncmp>
 80173a6:	b398      	cbz	r0, 8017410 <_strtod_l+0x1d8>
 80173a8:	2000      	movs	r0, #0
 80173aa:	4633      	mov	r3, r6
 80173ac:	463d      	mov	r5, r7
 80173ae:	9007      	str	r0, [sp, #28]
 80173b0:	4602      	mov	r2, r0
 80173b2:	2b65      	cmp	r3, #101	; 0x65
 80173b4:	d001      	beq.n	80173ba <_strtod_l+0x182>
 80173b6:	2b45      	cmp	r3, #69	; 0x45
 80173b8:	d118      	bne.n	80173ec <_strtod_l+0x1b4>
 80173ba:	b91d      	cbnz	r5, 80173c4 <_strtod_l+0x18c>
 80173bc:	9b04      	ldr	r3, [sp, #16]
 80173be:	4303      	orrs	r3, r0
 80173c0:	d098      	beq.n	80172f4 <_strtod_l+0xbc>
 80173c2:	2500      	movs	r5, #0
 80173c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80173c8:	f108 0301 	add.w	r3, r8, #1
 80173cc:	931d      	str	r3, [sp, #116]	; 0x74
 80173ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80173d2:	2b2b      	cmp	r3, #43	; 0x2b
 80173d4:	d075      	beq.n	80174c2 <_strtod_l+0x28a>
 80173d6:	2b2d      	cmp	r3, #45	; 0x2d
 80173d8:	d07b      	beq.n	80174d2 <_strtod_l+0x29a>
 80173da:	f04f 0c00 	mov.w	ip, #0
 80173de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80173e2:	2909      	cmp	r1, #9
 80173e4:	f240 8082 	bls.w	80174ec <_strtod_l+0x2b4>
 80173e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80173ec:	2600      	movs	r6, #0
 80173ee:	e09d      	b.n	801752c <_strtod_l+0x2f4>
 80173f0:	2300      	movs	r3, #0
 80173f2:	e7c4      	b.n	801737e <_strtod_l+0x146>
 80173f4:	2f08      	cmp	r7, #8
 80173f6:	bfd8      	it	le
 80173f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80173fa:	f100 0001 	add.w	r0, r0, #1
 80173fe:	bfda      	itte	le
 8017400:	fb02 3301 	mlale	r3, r2, r1, r3
 8017404:	9309      	strle	r3, [sp, #36]	; 0x24
 8017406:	fb02 3909 	mlagt	r9, r2, r9, r3
 801740a:	3701      	adds	r7, #1
 801740c:	901d      	str	r0, [sp, #116]	; 0x74
 801740e:	e7bf      	b.n	8017390 <_strtod_l+0x158>
 8017410:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017412:	195a      	adds	r2, r3, r5
 8017414:	921d      	str	r2, [sp, #116]	; 0x74
 8017416:	5d5b      	ldrb	r3, [r3, r5]
 8017418:	2f00      	cmp	r7, #0
 801741a:	d037      	beq.n	801748c <_strtod_l+0x254>
 801741c:	9007      	str	r0, [sp, #28]
 801741e:	463d      	mov	r5, r7
 8017420:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017424:	2a09      	cmp	r2, #9
 8017426:	d912      	bls.n	801744e <_strtod_l+0x216>
 8017428:	2201      	movs	r2, #1
 801742a:	e7c2      	b.n	80173b2 <_strtod_l+0x17a>
 801742c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801742e:	1c5a      	adds	r2, r3, #1
 8017430:	921d      	str	r2, [sp, #116]	; 0x74
 8017432:	785b      	ldrb	r3, [r3, #1]
 8017434:	3001      	adds	r0, #1
 8017436:	2b30      	cmp	r3, #48	; 0x30
 8017438:	d0f8      	beq.n	801742c <_strtod_l+0x1f4>
 801743a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801743e:	2a08      	cmp	r2, #8
 8017440:	f200 84db 	bhi.w	8017dfa <_strtod_l+0xbc2>
 8017444:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017446:	9007      	str	r0, [sp, #28]
 8017448:	2000      	movs	r0, #0
 801744a:	920a      	str	r2, [sp, #40]	; 0x28
 801744c:	4605      	mov	r5, r0
 801744e:	3b30      	subs	r3, #48	; 0x30
 8017450:	f100 0201 	add.w	r2, r0, #1
 8017454:	d014      	beq.n	8017480 <_strtod_l+0x248>
 8017456:	9907      	ldr	r1, [sp, #28]
 8017458:	4411      	add	r1, r2
 801745a:	9107      	str	r1, [sp, #28]
 801745c:	462a      	mov	r2, r5
 801745e:	eb00 0e05 	add.w	lr, r0, r5
 8017462:	210a      	movs	r1, #10
 8017464:	4572      	cmp	r2, lr
 8017466:	d113      	bne.n	8017490 <_strtod_l+0x258>
 8017468:	182a      	adds	r2, r5, r0
 801746a:	2a08      	cmp	r2, #8
 801746c:	f105 0501 	add.w	r5, r5, #1
 8017470:	4405      	add	r5, r0
 8017472:	dc1c      	bgt.n	80174ae <_strtod_l+0x276>
 8017474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017476:	220a      	movs	r2, #10
 8017478:	fb02 3301 	mla	r3, r2, r1, r3
 801747c:	9309      	str	r3, [sp, #36]	; 0x24
 801747e:	2200      	movs	r2, #0
 8017480:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017482:	1c59      	adds	r1, r3, #1
 8017484:	911d      	str	r1, [sp, #116]	; 0x74
 8017486:	785b      	ldrb	r3, [r3, #1]
 8017488:	4610      	mov	r0, r2
 801748a:	e7c9      	b.n	8017420 <_strtod_l+0x1e8>
 801748c:	4638      	mov	r0, r7
 801748e:	e7d2      	b.n	8017436 <_strtod_l+0x1fe>
 8017490:	2a08      	cmp	r2, #8
 8017492:	dc04      	bgt.n	801749e <_strtod_l+0x266>
 8017494:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017496:	434e      	muls	r6, r1
 8017498:	9609      	str	r6, [sp, #36]	; 0x24
 801749a:	3201      	adds	r2, #1
 801749c:	e7e2      	b.n	8017464 <_strtod_l+0x22c>
 801749e:	f102 0c01 	add.w	ip, r2, #1
 80174a2:	f1bc 0f10 	cmp.w	ip, #16
 80174a6:	bfd8      	it	le
 80174a8:	fb01 f909 	mulle.w	r9, r1, r9
 80174ac:	e7f5      	b.n	801749a <_strtod_l+0x262>
 80174ae:	2d10      	cmp	r5, #16
 80174b0:	bfdc      	itt	le
 80174b2:	220a      	movle	r2, #10
 80174b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80174b8:	e7e1      	b.n	801747e <_strtod_l+0x246>
 80174ba:	2300      	movs	r3, #0
 80174bc:	9307      	str	r3, [sp, #28]
 80174be:	2201      	movs	r2, #1
 80174c0:	e77c      	b.n	80173bc <_strtod_l+0x184>
 80174c2:	f04f 0c00 	mov.w	ip, #0
 80174c6:	f108 0302 	add.w	r3, r8, #2
 80174ca:	931d      	str	r3, [sp, #116]	; 0x74
 80174cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80174d0:	e785      	b.n	80173de <_strtod_l+0x1a6>
 80174d2:	f04f 0c01 	mov.w	ip, #1
 80174d6:	e7f6      	b.n	80174c6 <_strtod_l+0x28e>
 80174d8:	0801cab0 	.word	0x0801cab0
 80174dc:	0801c860 	.word	0x0801c860
 80174e0:	7ff00000 	.word	0x7ff00000
 80174e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80174e6:	1c59      	adds	r1, r3, #1
 80174e8:	911d      	str	r1, [sp, #116]	; 0x74
 80174ea:	785b      	ldrb	r3, [r3, #1]
 80174ec:	2b30      	cmp	r3, #48	; 0x30
 80174ee:	d0f9      	beq.n	80174e4 <_strtod_l+0x2ac>
 80174f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80174f4:	2908      	cmp	r1, #8
 80174f6:	f63f af79 	bhi.w	80173ec <_strtod_l+0x1b4>
 80174fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80174fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017500:	9308      	str	r3, [sp, #32]
 8017502:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017504:	1c59      	adds	r1, r3, #1
 8017506:	911d      	str	r1, [sp, #116]	; 0x74
 8017508:	785b      	ldrb	r3, [r3, #1]
 801750a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801750e:	2e09      	cmp	r6, #9
 8017510:	d937      	bls.n	8017582 <_strtod_l+0x34a>
 8017512:	9e08      	ldr	r6, [sp, #32]
 8017514:	1b89      	subs	r1, r1, r6
 8017516:	2908      	cmp	r1, #8
 8017518:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801751c:	dc02      	bgt.n	8017524 <_strtod_l+0x2ec>
 801751e:	4576      	cmp	r6, lr
 8017520:	bfa8      	it	ge
 8017522:	4676      	movge	r6, lr
 8017524:	f1bc 0f00 	cmp.w	ip, #0
 8017528:	d000      	beq.n	801752c <_strtod_l+0x2f4>
 801752a:	4276      	negs	r6, r6
 801752c:	2d00      	cmp	r5, #0
 801752e:	d14f      	bne.n	80175d0 <_strtod_l+0x398>
 8017530:	9904      	ldr	r1, [sp, #16]
 8017532:	4301      	orrs	r1, r0
 8017534:	f47f aec2 	bne.w	80172bc <_strtod_l+0x84>
 8017538:	2a00      	cmp	r2, #0
 801753a:	f47f aedb 	bne.w	80172f4 <_strtod_l+0xbc>
 801753e:	2b69      	cmp	r3, #105	; 0x69
 8017540:	d027      	beq.n	8017592 <_strtod_l+0x35a>
 8017542:	dc24      	bgt.n	801758e <_strtod_l+0x356>
 8017544:	2b49      	cmp	r3, #73	; 0x49
 8017546:	d024      	beq.n	8017592 <_strtod_l+0x35a>
 8017548:	2b4e      	cmp	r3, #78	; 0x4e
 801754a:	f47f aed3 	bne.w	80172f4 <_strtod_l+0xbc>
 801754e:	499e      	ldr	r1, [pc, #632]	; (80177c8 <_strtod_l+0x590>)
 8017550:	a81d      	add	r0, sp, #116	; 0x74
 8017552:	f001 fe41 	bl	80191d8 <__match>
 8017556:	2800      	cmp	r0, #0
 8017558:	f43f aecc 	beq.w	80172f4 <_strtod_l+0xbc>
 801755c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	2b28      	cmp	r3, #40	; 0x28
 8017562:	d12d      	bne.n	80175c0 <_strtod_l+0x388>
 8017564:	4999      	ldr	r1, [pc, #612]	; (80177cc <_strtod_l+0x594>)
 8017566:	aa20      	add	r2, sp, #128	; 0x80
 8017568:	a81d      	add	r0, sp, #116	; 0x74
 801756a:	f001 fe49 	bl	8019200 <__hexnan>
 801756e:	2805      	cmp	r0, #5
 8017570:	d126      	bne.n	80175c0 <_strtod_l+0x388>
 8017572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017574:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017578:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801757c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017580:	e69c      	b.n	80172bc <_strtod_l+0x84>
 8017582:	210a      	movs	r1, #10
 8017584:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017588:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801758c:	e7b9      	b.n	8017502 <_strtod_l+0x2ca>
 801758e:	2b6e      	cmp	r3, #110	; 0x6e
 8017590:	e7db      	b.n	801754a <_strtod_l+0x312>
 8017592:	498f      	ldr	r1, [pc, #572]	; (80177d0 <_strtod_l+0x598>)
 8017594:	a81d      	add	r0, sp, #116	; 0x74
 8017596:	f001 fe1f 	bl	80191d8 <__match>
 801759a:	2800      	cmp	r0, #0
 801759c:	f43f aeaa 	beq.w	80172f4 <_strtod_l+0xbc>
 80175a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80175a2:	498c      	ldr	r1, [pc, #560]	; (80177d4 <_strtod_l+0x59c>)
 80175a4:	3b01      	subs	r3, #1
 80175a6:	a81d      	add	r0, sp, #116	; 0x74
 80175a8:	931d      	str	r3, [sp, #116]	; 0x74
 80175aa:	f001 fe15 	bl	80191d8 <__match>
 80175ae:	b910      	cbnz	r0, 80175b6 <_strtod_l+0x37e>
 80175b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80175b2:	3301      	adds	r3, #1
 80175b4:	931d      	str	r3, [sp, #116]	; 0x74
 80175b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80177e4 <_strtod_l+0x5ac>
 80175ba:	f04f 0a00 	mov.w	sl, #0
 80175be:	e67d      	b.n	80172bc <_strtod_l+0x84>
 80175c0:	4885      	ldr	r0, [pc, #532]	; (80177d8 <_strtod_l+0x5a0>)
 80175c2:	f002 fd01 	bl	8019fc8 <nan>
 80175c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80175ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80175ce:	e675      	b.n	80172bc <_strtod_l+0x84>
 80175d0:	9b07      	ldr	r3, [sp, #28]
 80175d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175d4:	1af3      	subs	r3, r6, r3
 80175d6:	2f00      	cmp	r7, #0
 80175d8:	bf08      	it	eq
 80175da:	462f      	moveq	r7, r5
 80175dc:	2d10      	cmp	r5, #16
 80175de:	9308      	str	r3, [sp, #32]
 80175e0:	46a8      	mov	r8, r5
 80175e2:	bfa8      	it	ge
 80175e4:	f04f 0810 	movge.w	r8, #16
 80175e8:	f7e8 ff8c 	bl	8000504 <__aeabi_ui2d>
 80175ec:	2d09      	cmp	r5, #9
 80175ee:	4682      	mov	sl, r0
 80175f0:	468b      	mov	fp, r1
 80175f2:	dd13      	ble.n	801761c <_strtod_l+0x3e4>
 80175f4:	4b79      	ldr	r3, [pc, #484]	; (80177dc <_strtod_l+0x5a4>)
 80175f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80175fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80175fe:	f7e8 fffb 	bl	80005f8 <__aeabi_dmul>
 8017602:	4682      	mov	sl, r0
 8017604:	4648      	mov	r0, r9
 8017606:	468b      	mov	fp, r1
 8017608:	f7e8 ff7c 	bl	8000504 <__aeabi_ui2d>
 801760c:	4602      	mov	r2, r0
 801760e:	460b      	mov	r3, r1
 8017610:	4650      	mov	r0, sl
 8017612:	4659      	mov	r1, fp
 8017614:	f7e8 fe3a 	bl	800028c <__adddf3>
 8017618:	4682      	mov	sl, r0
 801761a:	468b      	mov	fp, r1
 801761c:	2d0f      	cmp	r5, #15
 801761e:	dc38      	bgt.n	8017692 <_strtod_l+0x45a>
 8017620:	9b08      	ldr	r3, [sp, #32]
 8017622:	2b00      	cmp	r3, #0
 8017624:	f43f ae4a 	beq.w	80172bc <_strtod_l+0x84>
 8017628:	dd24      	ble.n	8017674 <_strtod_l+0x43c>
 801762a:	2b16      	cmp	r3, #22
 801762c:	dc0b      	bgt.n	8017646 <_strtod_l+0x40e>
 801762e:	4d6b      	ldr	r5, [pc, #428]	; (80177dc <_strtod_l+0x5a4>)
 8017630:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017634:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017638:	4652      	mov	r2, sl
 801763a:	465b      	mov	r3, fp
 801763c:	f7e8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8017640:	4682      	mov	sl, r0
 8017642:	468b      	mov	fp, r1
 8017644:	e63a      	b.n	80172bc <_strtod_l+0x84>
 8017646:	9a08      	ldr	r2, [sp, #32]
 8017648:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801764c:	4293      	cmp	r3, r2
 801764e:	db20      	blt.n	8017692 <_strtod_l+0x45a>
 8017650:	4c62      	ldr	r4, [pc, #392]	; (80177dc <_strtod_l+0x5a4>)
 8017652:	f1c5 050f 	rsb	r5, r5, #15
 8017656:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801765a:	4652      	mov	r2, sl
 801765c:	465b      	mov	r3, fp
 801765e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017662:	f7e8 ffc9 	bl	80005f8 <__aeabi_dmul>
 8017666:	9b08      	ldr	r3, [sp, #32]
 8017668:	1b5d      	subs	r5, r3, r5
 801766a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801766e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017672:	e7e3      	b.n	801763c <_strtod_l+0x404>
 8017674:	9b08      	ldr	r3, [sp, #32]
 8017676:	3316      	adds	r3, #22
 8017678:	db0b      	blt.n	8017692 <_strtod_l+0x45a>
 801767a:	9b07      	ldr	r3, [sp, #28]
 801767c:	4a57      	ldr	r2, [pc, #348]	; (80177dc <_strtod_l+0x5a4>)
 801767e:	1b9e      	subs	r6, r3, r6
 8017680:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017684:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017688:	4650      	mov	r0, sl
 801768a:	4659      	mov	r1, fp
 801768c:	f7e9 f8de 	bl	800084c <__aeabi_ddiv>
 8017690:	e7d6      	b.n	8017640 <_strtod_l+0x408>
 8017692:	9b08      	ldr	r3, [sp, #32]
 8017694:	eba5 0808 	sub.w	r8, r5, r8
 8017698:	4498      	add	r8, r3
 801769a:	f1b8 0f00 	cmp.w	r8, #0
 801769e:	dd71      	ble.n	8017784 <_strtod_l+0x54c>
 80176a0:	f018 030f 	ands.w	r3, r8, #15
 80176a4:	d00a      	beq.n	80176bc <_strtod_l+0x484>
 80176a6:	494d      	ldr	r1, [pc, #308]	; (80177dc <_strtod_l+0x5a4>)
 80176a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80176ac:	4652      	mov	r2, sl
 80176ae:	465b      	mov	r3, fp
 80176b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176b4:	f7e8 ffa0 	bl	80005f8 <__aeabi_dmul>
 80176b8:	4682      	mov	sl, r0
 80176ba:	468b      	mov	fp, r1
 80176bc:	f038 080f 	bics.w	r8, r8, #15
 80176c0:	d04d      	beq.n	801775e <_strtod_l+0x526>
 80176c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80176c6:	dd22      	ble.n	801770e <_strtod_l+0x4d6>
 80176c8:	2500      	movs	r5, #0
 80176ca:	462e      	mov	r6, r5
 80176cc:	9509      	str	r5, [sp, #36]	; 0x24
 80176ce:	9507      	str	r5, [sp, #28]
 80176d0:	2322      	movs	r3, #34	; 0x22
 80176d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80177e4 <_strtod_l+0x5ac>
 80176d6:	6023      	str	r3, [r4, #0]
 80176d8:	f04f 0a00 	mov.w	sl, #0
 80176dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176de:	2b00      	cmp	r3, #0
 80176e0:	f43f adec 	beq.w	80172bc <_strtod_l+0x84>
 80176e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80176e6:	4620      	mov	r0, r4
 80176e8:	f001 fe88 	bl	80193fc <_Bfree>
 80176ec:	9907      	ldr	r1, [sp, #28]
 80176ee:	4620      	mov	r0, r4
 80176f0:	f001 fe84 	bl	80193fc <_Bfree>
 80176f4:	4631      	mov	r1, r6
 80176f6:	4620      	mov	r0, r4
 80176f8:	f001 fe80 	bl	80193fc <_Bfree>
 80176fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80176fe:	4620      	mov	r0, r4
 8017700:	f001 fe7c 	bl	80193fc <_Bfree>
 8017704:	4629      	mov	r1, r5
 8017706:	4620      	mov	r0, r4
 8017708:	f001 fe78 	bl	80193fc <_Bfree>
 801770c:	e5d6      	b.n	80172bc <_strtod_l+0x84>
 801770e:	2300      	movs	r3, #0
 8017710:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017714:	4650      	mov	r0, sl
 8017716:	4659      	mov	r1, fp
 8017718:	4699      	mov	r9, r3
 801771a:	f1b8 0f01 	cmp.w	r8, #1
 801771e:	dc21      	bgt.n	8017764 <_strtod_l+0x52c>
 8017720:	b10b      	cbz	r3, 8017726 <_strtod_l+0x4ee>
 8017722:	4682      	mov	sl, r0
 8017724:	468b      	mov	fp, r1
 8017726:	4b2e      	ldr	r3, [pc, #184]	; (80177e0 <_strtod_l+0x5a8>)
 8017728:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801772c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017730:	4652      	mov	r2, sl
 8017732:	465b      	mov	r3, fp
 8017734:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017738:	f7e8 ff5e 	bl	80005f8 <__aeabi_dmul>
 801773c:	4b29      	ldr	r3, [pc, #164]	; (80177e4 <_strtod_l+0x5ac>)
 801773e:	460a      	mov	r2, r1
 8017740:	400b      	ands	r3, r1
 8017742:	4929      	ldr	r1, [pc, #164]	; (80177e8 <_strtod_l+0x5b0>)
 8017744:	428b      	cmp	r3, r1
 8017746:	4682      	mov	sl, r0
 8017748:	d8be      	bhi.n	80176c8 <_strtod_l+0x490>
 801774a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801774e:	428b      	cmp	r3, r1
 8017750:	bf86      	itte	hi
 8017752:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80177ec <_strtod_l+0x5b4>
 8017756:	f04f 3aff 	movhi.w	sl, #4294967295
 801775a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801775e:	2300      	movs	r3, #0
 8017760:	9304      	str	r3, [sp, #16]
 8017762:	e081      	b.n	8017868 <_strtod_l+0x630>
 8017764:	f018 0f01 	tst.w	r8, #1
 8017768:	d007      	beq.n	801777a <_strtod_l+0x542>
 801776a:	4b1d      	ldr	r3, [pc, #116]	; (80177e0 <_strtod_l+0x5a8>)
 801776c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017774:	f7e8 ff40 	bl	80005f8 <__aeabi_dmul>
 8017778:	2301      	movs	r3, #1
 801777a:	f109 0901 	add.w	r9, r9, #1
 801777e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017782:	e7ca      	b.n	801771a <_strtod_l+0x4e2>
 8017784:	d0eb      	beq.n	801775e <_strtod_l+0x526>
 8017786:	f1c8 0800 	rsb	r8, r8, #0
 801778a:	f018 020f 	ands.w	r2, r8, #15
 801778e:	d00a      	beq.n	80177a6 <_strtod_l+0x56e>
 8017790:	4b12      	ldr	r3, [pc, #72]	; (80177dc <_strtod_l+0x5a4>)
 8017792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017796:	4650      	mov	r0, sl
 8017798:	4659      	mov	r1, fp
 801779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801779e:	f7e9 f855 	bl	800084c <__aeabi_ddiv>
 80177a2:	4682      	mov	sl, r0
 80177a4:	468b      	mov	fp, r1
 80177a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80177aa:	d0d8      	beq.n	801775e <_strtod_l+0x526>
 80177ac:	f1b8 0f1f 	cmp.w	r8, #31
 80177b0:	dd1e      	ble.n	80177f0 <_strtod_l+0x5b8>
 80177b2:	2500      	movs	r5, #0
 80177b4:	462e      	mov	r6, r5
 80177b6:	9509      	str	r5, [sp, #36]	; 0x24
 80177b8:	9507      	str	r5, [sp, #28]
 80177ba:	2322      	movs	r3, #34	; 0x22
 80177bc:	f04f 0a00 	mov.w	sl, #0
 80177c0:	f04f 0b00 	mov.w	fp, #0
 80177c4:	6023      	str	r3, [r4, #0]
 80177c6:	e789      	b.n	80176dc <_strtod_l+0x4a4>
 80177c8:	0801c831 	.word	0x0801c831
 80177cc:	0801c874 	.word	0x0801c874
 80177d0:	0801c829 	.word	0x0801c829
 80177d4:	0801c9b4 	.word	0x0801c9b4
 80177d8:	0801cc70 	.word	0x0801cc70
 80177dc:	0801cb50 	.word	0x0801cb50
 80177e0:	0801cb28 	.word	0x0801cb28
 80177e4:	7ff00000 	.word	0x7ff00000
 80177e8:	7ca00000 	.word	0x7ca00000
 80177ec:	7fefffff 	.word	0x7fefffff
 80177f0:	f018 0310 	ands.w	r3, r8, #16
 80177f4:	bf18      	it	ne
 80177f6:	236a      	movne	r3, #106	; 0x6a
 80177f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017bb0 <_strtod_l+0x978>
 80177fc:	9304      	str	r3, [sp, #16]
 80177fe:	4650      	mov	r0, sl
 8017800:	4659      	mov	r1, fp
 8017802:	2300      	movs	r3, #0
 8017804:	f018 0f01 	tst.w	r8, #1
 8017808:	d004      	beq.n	8017814 <_strtod_l+0x5dc>
 801780a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801780e:	f7e8 fef3 	bl	80005f8 <__aeabi_dmul>
 8017812:	2301      	movs	r3, #1
 8017814:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017818:	f109 0908 	add.w	r9, r9, #8
 801781c:	d1f2      	bne.n	8017804 <_strtod_l+0x5cc>
 801781e:	b10b      	cbz	r3, 8017824 <_strtod_l+0x5ec>
 8017820:	4682      	mov	sl, r0
 8017822:	468b      	mov	fp, r1
 8017824:	9b04      	ldr	r3, [sp, #16]
 8017826:	b1bb      	cbz	r3, 8017858 <_strtod_l+0x620>
 8017828:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801782c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017830:	2b00      	cmp	r3, #0
 8017832:	4659      	mov	r1, fp
 8017834:	dd10      	ble.n	8017858 <_strtod_l+0x620>
 8017836:	2b1f      	cmp	r3, #31
 8017838:	f340 8128 	ble.w	8017a8c <_strtod_l+0x854>
 801783c:	2b34      	cmp	r3, #52	; 0x34
 801783e:	bfde      	ittt	le
 8017840:	3b20      	suble	r3, #32
 8017842:	f04f 32ff 	movle.w	r2, #4294967295
 8017846:	fa02 f303 	lslle.w	r3, r2, r3
 801784a:	f04f 0a00 	mov.w	sl, #0
 801784e:	bfcc      	ite	gt
 8017850:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017854:	ea03 0b01 	andle.w	fp, r3, r1
 8017858:	2200      	movs	r2, #0
 801785a:	2300      	movs	r3, #0
 801785c:	4650      	mov	r0, sl
 801785e:	4659      	mov	r1, fp
 8017860:	f7e9 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8017864:	2800      	cmp	r0, #0
 8017866:	d1a4      	bne.n	80177b2 <_strtod_l+0x57a>
 8017868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801786a:	9300      	str	r3, [sp, #0]
 801786c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801786e:	462b      	mov	r3, r5
 8017870:	463a      	mov	r2, r7
 8017872:	4620      	mov	r0, r4
 8017874:	f001 fe2e 	bl	80194d4 <__s2b>
 8017878:	9009      	str	r0, [sp, #36]	; 0x24
 801787a:	2800      	cmp	r0, #0
 801787c:	f43f af24 	beq.w	80176c8 <_strtod_l+0x490>
 8017880:	9b07      	ldr	r3, [sp, #28]
 8017882:	1b9e      	subs	r6, r3, r6
 8017884:	9b08      	ldr	r3, [sp, #32]
 8017886:	2b00      	cmp	r3, #0
 8017888:	bfb4      	ite	lt
 801788a:	4633      	movlt	r3, r6
 801788c:	2300      	movge	r3, #0
 801788e:	9310      	str	r3, [sp, #64]	; 0x40
 8017890:	9b08      	ldr	r3, [sp, #32]
 8017892:	2500      	movs	r5, #0
 8017894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017898:	9318      	str	r3, [sp, #96]	; 0x60
 801789a:	462e      	mov	r6, r5
 801789c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801789e:	4620      	mov	r0, r4
 80178a0:	6859      	ldr	r1, [r3, #4]
 80178a2:	f001 fd6b 	bl	801937c <_Balloc>
 80178a6:	9007      	str	r0, [sp, #28]
 80178a8:	2800      	cmp	r0, #0
 80178aa:	f43f af11 	beq.w	80176d0 <_strtod_l+0x498>
 80178ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178b0:	691a      	ldr	r2, [r3, #16]
 80178b2:	3202      	adds	r2, #2
 80178b4:	f103 010c 	add.w	r1, r3, #12
 80178b8:	0092      	lsls	r2, r2, #2
 80178ba:	300c      	adds	r0, #12
 80178bc:	f7fe fce0 	bl	8016280 <memcpy>
 80178c0:	ec4b ab10 	vmov	d0, sl, fp
 80178c4:	aa20      	add	r2, sp, #128	; 0x80
 80178c6:	a91f      	add	r1, sp, #124	; 0x7c
 80178c8:	4620      	mov	r0, r4
 80178ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80178ce:	f002 f93d 	bl	8019b4c <__d2b>
 80178d2:	901e      	str	r0, [sp, #120]	; 0x78
 80178d4:	2800      	cmp	r0, #0
 80178d6:	f43f aefb 	beq.w	80176d0 <_strtod_l+0x498>
 80178da:	2101      	movs	r1, #1
 80178dc:	4620      	mov	r0, r4
 80178de:	f001 fe93 	bl	8019608 <__i2b>
 80178e2:	4606      	mov	r6, r0
 80178e4:	2800      	cmp	r0, #0
 80178e6:	f43f aef3 	beq.w	80176d0 <_strtod_l+0x498>
 80178ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80178ec:	9904      	ldr	r1, [sp, #16]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	bfab      	itete	ge
 80178f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80178f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80178f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80178f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80178fc:	bfac      	ite	ge
 80178fe:	eb03 0902 	addge.w	r9, r3, r2
 8017902:	1ad7      	sublt	r7, r2, r3
 8017904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017906:	eba3 0801 	sub.w	r8, r3, r1
 801790a:	4490      	add	r8, r2
 801790c:	4ba3      	ldr	r3, [pc, #652]	; (8017b9c <_strtod_l+0x964>)
 801790e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017912:	4598      	cmp	r8, r3
 8017914:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017918:	f280 80cc 	bge.w	8017ab4 <_strtod_l+0x87c>
 801791c:	eba3 0308 	sub.w	r3, r3, r8
 8017920:	2b1f      	cmp	r3, #31
 8017922:	eba2 0203 	sub.w	r2, r2, r3
 8017926:	f04f 0101 	mov.w	r1, #1
 801792a:	f300 80b6 	bgt.w	8017a9a <_strtod_l+0x862>
 801792e:	fa01 f303 	lsl.w	r3, r1, r3
 8017932:	9311      	str	r3, [sp, #68]	; 0x44
 8017934:	2300      	movs	r3, #0
 8017936:	930c      	str	r3, [sp, #48]	; 0x30
 8017938:	eb09 0802 	add.w	r8, r9, r2
 801793c:	9b04      	ldr	r3, [sp, #16]
 801793e:	45c1      	cmp	r9, r8
 8017940:	4417      	add	r7, r2
 8017942:	441f      	add	r7, r3
 8017944:	464b      	mov	r3, r9
 8017946:	bfa8      	it	ge
 8017948:	4643      	movge	r3, r8
 801794a:	42bb      	cmp	r3, r7
 801794c:	bfa8      	it	ge
 801794e:	463b      	movge	r3, r7
 8017950:	2b00      	cmp	r3, #0
 8017952:	bfc2      	ittt	gt
 8017954:	eba8 0803 	subgt.w	r8, r8, r3
 8017958:	1aff      	subgt	r7, r7, r3
 801795a:	eba9 0903 	subgt.w	r9, r9, r3
 801795e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017960:	2b00      	cmp	r3, #0
 8017962:	dd17      	ble.n	8017994 <_strtod_l+0x75c>
 8017964:	4631      	mov	r1, r6
 8017966:	461a      	mov	r2, r3
 8017968:	4620      	mov	r0, r4
 801796a:	f001 ff09 	bl	8019780 <__pow5mult>
 801796e:	4606      	mov	r6, r0
 8017970:	2800      	cmp	r0, #0
 8017972:	f43f aead 	beq.w	80176d0 <_strtod_l+0x498>
 8017976:	4601      	mov	r1, r0
 8017978:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801797a:	4620      	mov	r0, r4
 801797c:	f001 fe5a 	bl	8019634 <__multiply>
 8017980:	900f      	str	r0, [sp, #60]	; 0x3c
 8017982:	2800      	cmp	r0, #0
 8017984:	f43f aea4 	beq.w	80176d0 <_strtod_l+0x498>
 8017988:	991e      	ldr	r1, [sp, #120]	; 0x78
 801798a:	4620      	mov	r0, r4
 801798c:	f001 fd36 	bl	80193fc <_Bfree>
 8017990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017992:	931e      	str	r3, [sp, #120]	; 0x78
 8017994:	f1b8 0f00 	cmp.w	r8, #0
 8017998:	f300 8091 	bgt.w	8017abe <_strtod_l+0x886>
 801799c:	9b08      	ldr	r3, [sp, #32]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	dd08      	ble.n	80179b4 <_strtod_l+0x77c>
 80179a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80179a4:	9907      	ldr	r1, [sp, #28]
 80179a6:	4620      	mov	r0, r4
 80179a8:	f001 feea 	bl	8019780 <__pow5mult>
 80179ac:	9007      	str	r0, [sp, #28]
 80179ae:	2800      	cmp	r0, #0
 80179b0:	f43f ae8e 	beq.w	80176d0 <_strtod_l+0x498>
 80179b4:	2f00      	cmp	r7, #0
 80179b6:	dd08      	ble.n	80179ca <_strtod_l+0x792>
 80179b8:	9907      	ldr	r1, [sp, #28]
 80179ba:	463a      	mov	r2, r7
 80179bc:	4620      	mov	r0, r4
 80179be:	f001 ff39 	bl	8019834 <__lshift>
 80179c2:	9007      	str	r0, [sp, #28]
 80179c4:	2800      	cmp	r0, #0
 80179c6:	f43f ae83 	beq.w	80176d0 <_strtod_l+0x498>
 80179ca:	f1b9 0f00 	cmp.w	r9, #0
 80179ce:	dd08      	ble.n	80179e2 <_strtod_l+0x7aa>
 80179d0:	4631      	mov	r1, r6
 80179d2:	464a      	mov	r2, r9
 80179d4:	4620      	mov	r0, r4
 80179d6:	f001 ff2d 	bl	8019834 <__lshift>
 80179da:	4606      	mov	r6, r0
 80179dc:	2800      	cmp	r0, #0
 80179de:	f43f ae77 	beq.w	80176d0 <_strtod_l+0x498>
 80179e2:	9a07      	ldr	r2, [sp, #28]
 80179e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80179e6:	4620      	mov	r0, r4
 80179e8:	f001 ffac 	bl	8019944 <__mdiff>
 80179ec:	4605      	mov	r5, r0
 80179ee:	2800      	cmp	r0, #0
 80179f0:	f43f ae6e 	beq.w	80176d0 <_strtod_l+0x498>
 80179f4:	68c3      	ldr	r3, [r0, #12]
 80179f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80179f8:	2300      	movs	r3, #0
 80179fa:	60c3      	str	r3, [r0, #12]
 80179fc:	4631      	mov	r1, r6
 80179fe:	f001 ff85 	bl	801990c <__mcmp>
 8017a02:	2800      	cmp	r0, #0
 8017a04:	da65      	bge.n	8017ad2 <_strtod_l+0x89a>
 8017a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a08:	ea53 030a 	orrs.w	r3, r3, sl
 8017a0c:	f040 8087 	bne.w	8017b1e <_strtod_l+0x8e6>
 8017a10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	f040 8082 	bne.w	8017b1e <_strtod_l+0x8e6>
 8017a1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017a1e:	0d1b      	lsrs	r3, r3, #20
 8017a20:	051b      	lsls	r3, r3, #20
 8017a22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017a26:	d97a      	bls.n	8017b1e <_strtod_l+0x8e6>
 8017a28:	696b      	ldr	r3, [r5, #20]
 8017a2a:	b913      	cbnz	r3, 8017a32 <_strtod_l+0x7fa>
 8017a2c:	692b      	ldr	r3, [r5, #16]
 8017a2e:	2b01      	cmp	r3, #1
 8017a30:	dd75      	ble.n	8017b1e <_strtod_l+0x8e6>
 8017a32:	4629      	mov	r1, r5
 8017a34:	2201      	movs	r2, #1
 8017a36:	4620      	mov	r0, r4
 8017a38:	f001 fefc 	bl	8019834 <__lshift>
 8017a3c:	4631      	mov	r1, r6
 8017a3e:	4605      	mov	r5, r0
 8017a40:	f001 ff64 	bl	801990c <__mcmp>
 8017a44:	2800      	cmp	r0, #0
 8017a46:	dd6a      	ble.n	8017b1e <_strtod_l+0x8e6>
 8017a48:	9904      	ldr	r1, [sp, #16]
 8017a4a:	4a55      	ldr	r2, [pc, #340]	; (8017ba0 <_strtod_l+0x968>)
 8017a4c:	465b      	mov	r3, fp
 8017a4e:	2900      	cmp	r1, #0
 8017a50:	f000 8085 	beq.w	8017b5e <_strtod_l+0x926>
 8017a54:	ea02 010b 	and.w	r1, r2, fp
 8017a58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017a5c:	dc7f      	bgt.n	8017b5e <_strtod_l+0x926>
 8017a5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017a62:	f77f aeaa 	ble.w	80177ba <_strtod_l+0x582>
 8017a66:	4a4f      	ldr	r2, [pc, #316]	; (8017ba4 <_strtod_l+0x96c>)
 8017a68:	2300      	movs	r3, #0
 8017a6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8017a6e:	4650      	mov	r0, sl
 8017a70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017a74:	4659      	mov	r1, fp
 8017a76:	f7e8 fdbf 	bl	80005f8 <__aeabi_dmul>
 8017a7a:	460b      	mov	r3, r1
 8017a7c:	4303      	orrs	r3, r0
 8017a7e:	bf08      	it	eq
 8017a80:	2322      	moveq	r3, #34	; 0x22
 8017a82:	4682      	mov	sl, r0
 8017a84:	468b      	mov	fp, r1
 8017a86:	bf08      	it	eq
 8017a88:	6023      	streq	r3, [r4, #0]
 8017a8a:	e62b      	b.n	80176e4 <_strtod_l+0x4ac>
 8017a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8017a90:	fa02 f303 	lsl.w	r3, r2, r3
 8017a94:	ea03 0a0a 	and.w	sl, r3, sl
 8017a98:	e6de      	b.n	8017858 <_strtod_l+0x620>
 8017a9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8017a9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017aa2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017aa6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8017aaa:	fa01 f308 	lsl.w	r3, r1, r8
 8017aae:	930c      	str	r3, [sp, #48]	; 0x30
 8017ab0:	9111      	str	r1, [sp, #68]	; 0x44
 8017ab2:	e741      	b.n	8017938 <_strtod_l+0x700>
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8017ab8:	2301      	movs	r3, #1
 8017aba:	9311      	str	r3, [sp, #68]	; 0x44
 8017abc:	e73c      	b.n	8017938 <_strtod_l+0x700>
 8017abe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017ac0:	4642      	mov	r2, r8
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	f001 feb6 	bl	8019834 <__lshift>
 8017ac8:	901e      	str	r0, [sp, #120]	; 0x78
 8017aca:	2800      	cmp	r0, #0
 8017acc:	f47f af66 	bne.w	801799c <_strtod_l+0x764>
 8017ad0:	e5fe      	b.n	80176d0 <_strtod_l+0x498>
 8017ad2:	465f      	mov	r7, fp
 8017ad4:	d16e      	bne.n	8017bb4 <_strtod_l+0x97c>
 8017ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ad8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017adc:	b342      	cbz	r2, 8017b30 <_strtod_l+0x8f8>
 8017ade:	4a32      	ldr	r2, [pc, #200]	; (8017ba8 <_strtod_l+0x970>)
 8017ae0:	4293      	cmp	r3, r2
 8017ae2:	d128      	bne.n	8017b36 <_strtod_l+0x8fe>
 8017ae4:	9b04      	ldr	r3, [sp, #16]
 8017ae6:	4650      	mov	r0, sl
 8017ae8:	b1eb      	cbz	r3, 8017b26 <_strtod_l+0x8ee>
 8017aea:	4a2d      	ldr	r2, [pc, #180]	; (8017ba0 <_strtod_l+0x968>)
 8017aec:	403a      	ands	r2, r7
 8017aee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017af2:	f04f 31ff 	mov.w	r1, #4294967295
 8017af6:	d819      	bhi.n	8017b2c <_strtod_l+0x8f4>
 8017af8:	0d12      	lsrs	r2, r2, #20
 8017afa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017afe:	fa01 f303 	lsl.w	r3, r1, r3
 8017b02:	4298      	cmp	r0, r3
 8017b04:	d117      	bne.n	8017b36 <_strtod_l+0x8fe>
 8017b06:	4b29      	ldr	r3, [pc, #164]	; (8017bac <_strtod_l+0x974>)
 8017b08:	429f      	cmp	r7, r3
 8017b0a:	d102      	bne.n	8017b12 <_strtod_l+0x8da>
 8017b0c:	3001      	adds	r0, #1
 8017b0e:	f43f addf 	beq.w	80176d0 <_strtod_l+0x498>
 8017b12:	4b23      	ldr	r3, [pc, #140]	; (8017ba0 <_strtod_l+0x968>)
 8017b14:	403b      	ands	r3, r7
 8017b16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017b1a:	f04f 0a00 	mov.w	sl, #0
 8017b1e:	9b04      	ldr	r3, [sp, #16]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d1a0      	bne.n	8017a66 <_strtod_l+0x82e>
 8017b24:	e5de      	b.n	80176e4 <_strtod_l+0x4ac>
 8017b26:	f04f 33ff 	mov.w	r3, #4294967295
 8017b2a:	e7ea      	b.n	8017b02 <_strtod_l+0x8ca>
 8017b2c:	460b      	mov	r3, r1
 8017b2e:	e7e8      	b.n	8017b02 <_strtod_l+0x8ca>
 8017b30:	ea53 030a 	orrs.w	r3, r3, sl
 8017b34:	d088      	beq.n	8017a48 <_strtod_l+0x810>
 8017b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b38:	b1db      	cbz	r3, 8017b72 <_strtod_l+0x93a>
 8017b3a:	423b      	tst	r3, r7
 8017b3c:	d0ef      	beq.n	8017b1e <_strtod_l+0x8e6>
 8017b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b40:	9a04      	ldr	r2, [sp, #16]
 8017b42:	4650      	mov	r0, sl
 8017b44:	4659      	mov	r1, fp
 8017b46:	b1c3      	cbz	r3, 8017b7a <_strtod_l+0x942>
 8017b48:	f7ff fb58 	bl	80171fc <sulp>
 8017b4c:	4602      	mov	r2, r0
 8017b4e:	460b      	mov	r3, r1
 8017b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017b54:	f7e8 fb9a 	bl	800028c <__adddf3>
 8017b58:	4682      	mov	sl, r0
 8017b5a:	468b      	mov	fp, r1
 8017b5c:	e7df      	b.n	8017b1e <_strtod_l+0x8e6>
 8017b5e:	4013      	ands	r3, r2
 8017b60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017b64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017b68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017b6c:	f04f 3aff 	mov.w	sl, #4294967295
 8017b70:	e7d5      	b.n	8017b1e <_strtod_l+0x8e6>
 8017b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b74:	ea13 0f0a 	tst.w	r3, sl
 8017b78:	e7e0      	b.n	8017b3c <_strtod_l+0x904>
 8017b7a:	f7ff fb3f 	bl	80171fc <sulp>
 8017b7e:	4602      	mov	r2, r0
 8017b80:	460b      	mov	r3, r1
 8017b82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017b86:	f7e8 fb7f 	bl	8000288 <__aeabi_dsub>
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	4682      	mov	sl, r0
 8017b90:	468b      	mov	fp, r1
 8017b92:	f7e8 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b96:	2800      	cmp	r0, #0
 8017b98:	d0c1      	beq.n	8017b1e <_strtod_l+0x8e6>
 8017b9a:	e60e      	b.n	80177ba <_strtod_l+0x582>
 8017b9c:	fffffc02 	.word	0xfffffc02
 8017ba0:	7ff00000 	.word	0x7ff00000
 8017ba4:	39500000 	.word	0x39500000
 8017ba8:	000fffff 	.word	0x000fffff
 8017bac:	7fefffff 	.word	0x7fefffff
 8017bb0:	0801c888 	.word	0x0801c888
 8017bb4:	4631      	mov	r1, r6
 8017bb6:	4628      	mov	r0, r5
 8017bb8:	f002 f824 	bl	8019c04 <__ratio>
 8017bbc:	ec59 8b10 	vmov	r8, r9, d0
 8017bc0:	ee10 0a10 	vmov	r0, s0
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017bca:	4649      	mov	r1, r9
 8017bcc:	f7e8 ff90 	bl	8000af0 <__aeabi_dcmple>
 8017bd0:	2800      	cmp	r0, #0
 8017bd2:	d07c      	beq.n	8017cce <_strtod_l+0xa96>
 8017bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d04c      	beq.n	8017c74 <_strtod_l+0xa3c>
 8017bda:	4b95      	ldr	r3, [pc, #596]	; (8017e30 <_strtod_l+0xbf8>)
 8017bdc:	2200      	movs	r2, #0
 8017bde:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017be2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017e30 <_strtod_l+0xbf8>
 8017be6:	f04f 0800 	mov.w	r8, #0
 8017bea:	4b92      	ldr	r3, [pc, #584]	; (8017e34 <_strtod_l+0xbfc>)
 8017bec:	403b      	ands	r3, r7
 8017bee:	9311      	str	r3, [sp, #68]	; 0x44
 8017bf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017bf2:	4b91      	ldr	r3, [pc, #580]	; (8017e38 <_strtod_l+0xc00>)
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	f040 80b2 	bne.w	8017d5e <_strtod_l+0xb26>
 8017bfa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017c02:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017c06:	ec4b ab10 	vmov	d0, sl, fp
 8017c0a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8017c0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017c12:	f001 ff1f 	bl	8019a54 <__ulp>
 8017c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017c1a:	ec53 2b10 	vmov	r2, r3, d0
 8017c1e:	f7e8 fceb 	bl	80005f8 <__aeabi_dmul>
 8017c22:	4652      	mov	r2, sl
 8017c24:	465b      	mov	r3, fp
 8017c26:	f7e8 fb31 	bl	800028c <__adddf3>
 8017c2a:	460b      	mov	r3, r1
 8017c2c:	4981      	ldr	r1, [pc, #516]	; (8017e34 <_strtod_l+0xbfc>)
 8017c2e:	4a83      	ldr	r2, [pc, #524]	; (8017e3c <_strtod_l+0xc04>)
 8017c30:	4019      	ands	r1, r3
 8017c32:	4291      	cmp	r1, r2
 8017c34:	4682      	mov	sl, r0
 8017c36:	d95e      	bls.n	8017cf6 <_strtod_l+0xabe>
 8017c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c3a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017c3e:	4293      	cmp	r3, r2
 8017c40:	d103      	bne.n	8017c4a <_strtod_l+0xa12>
 8017c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c44:	3301      	adds	r3, #1
 8017c46:	f43f ad43 	beq.w	80176d0 <_strtod_l+0x498>
 8017c4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017e48 <_strtod_l+0xc10>
 8017c4e:	f04f 3aff 	mov.w	sl, #4294967295
 8017c52:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017c54:	4620      	mov	r0, r4
 8017c56:	f001 fbd1 	bl	80193fc <_Bfree>
 8017c5a:	9907      	ldr	r1, [sp, #28]
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	f001 fbcd 	bl	80193fc <_Bfree>
 8017c62:	4631      	mov	r1, r6
 8017c64:	4620      	mov	r0, r4
 8017c66:	f001 fbc9 	bl	80193fc <_Bfree>
 8017c6a:	4629      	mov	r1, r5
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	f001 fbc5 	bl	80193fc <_Bfree>
 8017c72:	e613      	b.n	801789c <_strtod_l+0x664>
 8017c74:	f1ba 0f00 	cmp.w	sl, #0
 8017c78:	d11b      	bne.n	8017cb2 <_strtod_l+0xa7a>
 8017c7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017c7e:	b9f3      	cbnz	r3, 8017cbe <_strtod_l+0xa86>
 8017c80:	4b6b      	ldr	r3, [pc, #428]	; (8017e30 <_strtod_l+0xbf8>)
 8017c82:	2200      	movs	r2, #0
 8017c84:	4640      	mov	r0, r8
 8017c86:	4649      	mov	r1, r9
 8017c88:	f7e8 ff28 	bl	8000adc <__aeabi_dcmplt>
 8017c8c:	b9d0      	cbnz	r0, 8017cc4 <_strtod_l+0xa8c>
 8017c8e:	4640      	mov	r0, r8
 8017c90:	4649      	mov	r1, r9
 8017c92:	4b6b      	ldr	r3, [pc, #428]	; (8017e40 <_strtod_l+0xc08>)
 8017c94:	2200      	movs	r2, #0
 8017c96:	f7e8 fcaf 	bl	80005f8 <__aeabi_dmul>
 8017c9a:	4680      	mov	r8, r0
 8017c9c:	4689      	mov	r9, r1
 8017c9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017ca2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017ca6:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ca8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017cac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017cb0:	e79b      	b.n	8017bea <_strtod_l+0x9b2>
 8017cb2:	f1ba 0f01 	cmp.w	sl, #1
 8017cb6:	d102      	bne.n	8017cbe <_strtod_l+0xa86>
 8017cb8:	2f00      	cmp	r7, #0
 8017cba:	f43f ad7e 	beq.w	80177ba <_strtod_l+0x582>
 8017cbe:	4b61      	ldr	r3, [pc, #388]	; (8017e44 <_strtod_l+0xc0c>)
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	e78c      	b.n	8017bde <_strtod_l+0x9a6>
 8017cc4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017e40 <_strtod_l+0xc08>
 8017cc8:	f04f 0800 	mov.w	r8, #0
 8017ccc:	e7e7      	b.n	8017c9e <_strtod_l+0xa66>
 8017cce:	4b5c      	ldr	r3, [pc, #368]	; (8017e40 <_strtod_l+0xc08>)
 8017cd0:	4640      	mov	r0, r8
 8017cd2:	4649      	mov	r1, r9
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	f7e8 fc8f 	bl	80005f8 <__aeabi_dmul>
 8017cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cdc:	4680      	mov	r8, r0
 8017cde:	4689      	mov	r9, r1
 8017ce0:	b933      	cbnz	r3, 8017cf0 <_strtod_l+0xab8>
 8017ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ce6:	9012      	str	r0, [sp, #72]	; 0x48
 8017ce8:	9313      	str	r3, [sp, #76]	; 0x4c
 8017cea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017cee:	e7dd      	b.n	8017cac <_strtod_l+0xa74>
 8017cf0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017cf4:	e7f9      	b.n	8017cea <_strtod_l+0xab2>
 8017cf6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017cfa:	9b04      	ldr	r3, [sp, #16]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d1a8      	bne.n	8017c52 <_strtod_l+0xa1a>
 8017d00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017d04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017d06:	0d1b      	lsrs	r3, r3, #20
 8017d08:	051b      	lsls	r3, r3, #20
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	d1a1      	bne.n	8017c52 <_strtod_l+0xa1a>
 8017d0e:	4640      	mov	r0, r8
 8017d10:	4649      	mov	r1, r9
 8017d12:	f7e8 ffd1 	bl	8000cb8 <__aeabi_d2lz>
 8017d16:	f7e8 fc41 	bl	800059c <__aeabi_l2d>
 8017d1a:	4602      	mov	r2, r0
 8017d1c:	460b      	mov	r3, r1
 8017d1e:	4640      	mov	r0, r8
 8017d20:	4649      	mov	r1, r9
 8017d22:	f7e8 fab1 	bl	8000288 <__aeabi_dsub>
 8017d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017d2c:	ea43 030a 	orr.w	r3, r3, sl
 8017d30:	4313      	orrs	r3, r2
 8017d32:	4680      	mov	r8, r0
 8017d34:	4689      	mov	r9, r1
 8017d36:	d053      	beq.n	8017de0 <_strtod_l+0xba8>
 8017d38:	a335      	add	r3, pc, #212	; (adr r3, 8017e10 <_strtod_l+0xbd8>)
 8017d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d3e:	f7e8 fecd 	bl	8000adc <__aeabi_dcmplt>
 8017d42:	2800      	cmp	r0, #0
 8017d44:	f47f acce 	bne.w	80176e4 <_strtod_l+0x4ac>
 8017d48:	a333      	add	r3, pc, #204	; (adr r3, 8017e18 <_strtod_l+0xbe0>)
 8017d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d4e:	4640      	mov	r0, r8
 8017d50:	4649      	mov	r1, r9
 8017d52:	f7e8 fee1 	bl	8000b18 <__aeabi_dcmpgt>
 8017d56:	2800      	cmp	r0, #0
 8017d58:	f43f af7b 	beq.w	8017c52 <_strtod_l+0xa1a>
 8017d5c:	e4c2      	b.n	80176e4 <_strtod_l+0x4ac>
 8017d5e:	9b04      	ldr	r3, [sp, #16]
 8017d60:	b333      	cbz	r3, 8017db0 <_strtod_l+0xb78>
 8017d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017d68:	d822      	bhi.n	8017db0 <_strtod_l+0xb78>
 8017d6a:	a32d      	add	r3, pc, #180	; (adr r3, 8017e20 <_strtod_l+0xbe8>)
 8017d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d70:	4640      	mov	r0, r8
 8017d72:	4649      	mov	r1, r9
 8017d74:	f7e8 febc 	bl	8000af0 <__aeabi_dcmple>
 8017d78:	b1a0      	cbz	r0, 8017da4 <_strtod_l+0xb6c>
 8017d7a:	4649      	mov	r1, r9
 8017d7c:	4640      	mov	r0, r8
 8017d7e:	f7e8 ff13 	bl	8000ba8 <__aeabi_d2uiz>
 8017d82:	2801      	cmp	r0, #1
 8017d84:	bf38      	it	cc
 8017d86:	2001      	movcc	r0, #1
 8017d88:	f7e8 fbbc 	bl	8000504 <__aeabi_ui2d>
 8017d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d8e:	4680      	mov	r8, r0
 8017d90:	4689      	mov	r9, r1
 8017d92:	bb13      	cbnz	r3, 8017dda <_strtod_l+0xba2>
 8017d94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d98:	9014      	str	r0, [sp, #80]	; 0x50
 8017d9a:	9315      	str	r3, [sp, #84]	; 0x54
 8017d9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017da0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017da6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017da8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017dac:	1a9b      	subs	r3, r3, r2
 8017dae:	930d      	str	r3, [sp, #52]	; 0x34
 8017db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017db4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017db8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017dbc:	f001 fe4a 	bl	8019a54 <__ulp>
 8017dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017dc4:	ec53 2b10 	vmov	r2, r3, d0
 8017dc8:	f7e8 fc16 	bl	80005f8 <__aeabi_dmul>
 8017dcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017dd0:	f7e8 fa5c 	bl	800028c <__adddf3>
 8017dd4:	4682      	mov	sl, r0
 8017dd6:	468b      	mov	fp, r1
 8017dd8:	e78f      	b.n	8017cfa <_strtod_l+0xac2>
 8017dda:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8017dde:	e7dd      	b.n	8017d9c <_strtod_l+0xb64>
 8017de0:	a311      	add	r3, pc, #68	; (adr r3, 8017e28 <_strtod_l+0xbf0>)
 8017de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017de6:	f7e8 fe79 	bl	8000adc <__aeabi_dcmplt>
 8017dea:	e7b4      	b.n	8017d56 <_strtod_l+0xb1e>
 8017dec:	2300      	movs	r3, #0
 8017dee:	930e      	str	r3, [sp, #56]	; 0x38
 8017df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017df2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017df4:	6013      	str	r3, [r2, #0]
 8017df6:	f7ff ba65 	b.w	80172c4 <_strtod_l+0x8c>
 8017dfa:	2b65      	cmp	r3, #101	; 0x65
 8017dfc:	f43f ab5d 	beq.w	80174ba <_strtod_l+0x282>
 8017e00:	2b45      	cmp	r3, #69	; 0x45
 8017e02:	f43f ab5a 	beq.w	80174ba <_strtod_l+0x282>
 8017e06:	2201      	movs	r2, #1
 8017e08:	f7ff bb92 	b.w	8017530 <_strtod_l+0x2f8>
 8017e0c:	f3af 8000 	nop.w
 8017e10:	94a03595 	.word	0x94a03595
 8017e14:	3fdfffff 	.word	0x3fdfffff
 8017e18:	35afe535 	.word	0x35afe535
 8017e1c:	3fe00000 	.word	0x3fe00000
 8017e20:	ffc00000 	.word	0xffc00000
 8017e24:	41dfffff 	.word	0x41dfffff
 8017e28:	94a03595 	.word	0x94a03595
 8017e2c:	3fcfffff 	.word	0x3fcfffff
 8017e30:	3ff00000 	.word	0x3ff00000
 8017e34:	7ff00000 	.word	0x7ff00000
 8017e38:	7fe00000 	.word	0x7fe00000
 8017e3c:	7c9fffff 	.word	0x7c9fffff
 8017e40:	3fe00000 	.word	0x3fe00000
 8017e44:	bff00000 	.word	0xbff00000
 8017e48:	7fefffff 	.word	0x7fefffff

08017e4c <_strtod_r>:
 8017e4c:	4b01      	ldr	r3, [pc, #4]	; (8017e54 <_strtod_r+0x8>)
 8017e4e:	f7ff b9f3 	b.w	8017238 <_strtod_l>
 8017e52:	bf00      	nop
 8017e54:	20004278 	.word	0x20004278

08017e58 <_strtol_l.isra.0>:
 8017e58:	2b01      	cmp	r3, #1
 8017e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e5e:	d001      	beq.n	8017e64 <_strtol_l.isra.0+0xc>
 8017e60:	2b24      	cmp	r3, #36	; 0x24
 8017e62:	d906      	bls.n	8017e72 <_strtol_l.isra.0+0x1a>
 8017e64:	f7fe f9d2 	bl	801620c <__errno>
 8017e68:	2316      	movs	r3, #22
 8017e6a:	6003      	str	r3, [r0, #0]
 8017e6c:	2000      	movs	r0, #0
 8017e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e72:	4f3a      	ldr	r7, [pc, #232]	; (8017f5c <_strtol_l.isra.0+0x104>)
 8017e74:	468e      	mov	lr, r1
 8017e76:	4676      	mov	r6, lr
 8017e78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017e7c:	5de5      	ldrb	r5, [r4, r7]
 8017e7e:	f015 0508 	ands.w	r5, r5, #8
 8017e82:	d1f8      	bne.n	8017e76 <_strtol_l.isra.0+0x1e>
 8017e84:	2c2d      	cmp	r4, #45	; 0x2d
 8017e86:	d134      	bne.n	8017ef2 <_strtol_l.isra.0+0x9a>
 8017e88:	f89e 4000 	ldrb.w	r4, [lr]
 8017e8c:	f04f 0801 	mov.w	r8, #1
 8017e90:	f106 0e02 	add.w	lr, r6, #2
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d05c      	beq.n	8017f52 <_strtol_l.isra.0+0xfa>
 8017e98:	2b10      	cmp	r3, #16
 8017e9a:	d10c      	bne.n	8017eb6 <_strtol_l.isra.0+0x5e>
 8017e9c:	2c30      	cmp	r4, #48	; 0x30
 8017e9e:	d10a      	bne.n	8017eb6 <_strtol_l.isra.0+0x5e>
 8017ea0:	f89e 4000 	ldrb.w	r4, [lr]
 8017ea4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017ea8:	2c58      	cmp	r4, #88	; 0x58
 8017eaa:	d14d      	bne.n	8017f48 <_strtol_l.isra.0+0xf0>
 8017eac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017eb0:	2310      	movs	r3, #16
 8017eb2:	f10e 0e02 	add.w	lr, lr, #2
 8017eb6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017eba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017ebe:	2600      	movs	r6, #0
 8017ec0:	fbbc f9f3 	udiv	r9, ip, r3
 8017ec4:	4635      	mov	r5, r6
 8017ec6:	fb03 ca19 	mls	sl, r3, r9, ip
 8017eca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017ece:	2f09      	cmp	r7, #9
 8017ed0:	d818      	bhi.n	8017f04 <_strtol_l.isra.0+0xac>
 8017ed2:	463c      	mov	r4, r7
 8017ed4:	42a3      	cmp	r3, r4
 8017ed6:	dd24      	ble.n	8017f22 <_strtol_l.isra.0+0xca>
 8017ed8:	2e00      	cmp	r6, #0
 8017eda:	db1f      	blt.n	8017f1c <_strtol_l.isra.0+0xc4>
 8017edc:	45a9      	cmp	r9, r5
 8017ede:	d31d      	bcc.n	8017f1c <_strtol_l.isra.0+0xc4>
 8017ee0:	d101      	bne.n	8017ee6 <_strtol_l.isra.0+0x8e>
 8017ee2:	45a2      	cmp	sl, r4
 8017ee4:	db1a      	blt.n	8017f1c <_strtol_l.isra.0+0xc4>
 8017ee6:	fb05 4503 	mla	r5, r5, r3, r4
 8017eea:	2601      	movs	r6, #1
 8017eec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017ef0:	e7eb      	b.n	8017eca <_strtol_l.isra.0+0x72>
 8017ef2:	2c2b      	cmp	r4, #43	; 0x2b
 8017ef4:	bf08      	it	eq
 8017ef6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017efa:	46a8      	mov	r8, r5
 8017efc:	bf08      	it	eq
 8017efe:	f106 0e02 	addeq.w	lr, r6, #2
 8017f02:	e7c7      	b.n	8017e94 <_strtol_l.isra.0+0x3c>
 8017f04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017f08:	2f19      	cmp	r7, #25
 8017f0a:	d801      	bhi.n	8017f10 <_strtol_l.isra.0+0xb8>
 8017f0c:	3c37      	subs	r4, #55	; 0x37
 8017f0e:	e7e1      	b.n	8017ed4 <_strtol_l.isra.0+0x7c>
 8017f10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017f14:	2f19      	cmp	r7, #25
 8017f16:	d804      	bhi.n	8017f22 <_strtol_l.isra.0+0xca>
 8017f18:	3c57      	subs	r4, #87	; 0x57
 8017f1a:	e7db      	b.n	8017ed4 <_strtol_l.isra.0+0x7c>
 8017f1c:	f04f 36ff 	mov.w	r6, #4294967295
 8017f20:	e7e4      	b.n	8017eec <_strtol_l.isra.0+0x94>
 8017f22:	2e00      	cmp	r6, #0
 8017f24:	da05      	bge.n	8017f32 <_strtol_l.isra.0+0xda>
 8017f26:	2322      	movs	r3, #34	; 0x22
 8017f28:	6003      	str	r3, [r0, #0]
 8017f2a:	4665      	mov	r5, ip
 8017f2c:	b942      	cbnz	r2, 8017f40 <_strtol_l.isra.0+0xe8>
 8017f2e:	4628      	mov	r0, r5
 8017f30:	e79d      	b.n	8017e6e <_strtol_l.isra.0+0x16>
 8017f32:	f1b8 0f00 	cmp.w	r8, #0
 8017f36:	d000      	beq.n	8017f3a <_strtol_l.isra.0+0xe2>
 8017f38:	426d      	negs	r5, r5
 8017f3a:	2a00      	cmp	r2, #0
 8017f3c:	d0f7      	beq.n	8017f2e <_strtol_l.isra.0+0xd6>
 8017f3e:	b10e      	cbz	r6, 8017f44 <_strtol_l.isra.0+0xec>
 8017f40:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017f44:	6011      	str	r1, [r2, #0]
 8017f46:	e7f2      	b.n	8017f2e <_strtol_l.isra.0+0xd6>
 8017f48:	2430      	movs	r4, #48	; 0x30
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d1b3      	bne.n	8017eb6 <_strtol_l.isra.0+0x5e>
 8017f4e:	2308      	movs	r3, #8
 8017f50:	e7b1      	b.n	8017eb6 <_strtol_l.isra.0+0x5e>
 8017f52:	2c30      	cmp	r4, #48	; 0x30
 8017f54:	d0a4      	beq.n	8017ea0 <_strtol_l.isra.0+0x48>
 8017f56:	230a      	movs	r3, #10
 8017f58:	e7ad      	b.n	8017eb6 <_strtol_l.isra.0+0x5e>
 8017f5a:	bf00      	nop
 8017f5c:	0801c8b1 	.word	0x0801c8b1

08017f60 <_strtol_r>:
 8017f60:	f7ff bf7a 	b.w	8017e58 <_strtol_l.isra.0>

08017f64 <quorem>:
 8017f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f68:	6903      	ldr	r3, [r0, #16]
 8017f6a:	690c      	ldr	r4, [r1, #16]
 8017f6c:	42a3      	cmp	r3, r4
 8017f6e:	4607      	mov	r7, r0
 8017f70:	f2c0 8081 	blt.w	8018076 <quorem+0x112>
 8017f74:	3c01      	subs	r4, #1
 8017f76:	f101 0814 	add.w	r8, r1, #20
 8017f7a:	f100 0514 	add.w	r5, r0, #20
 8017f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f82:	9301      	str	r3, [sp, #4]
 8017f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f8c:	3301      	adds	r3, #1
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017f94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017f98:	fbb2 f6f3 	udiv	r6, r2, r3
 8017f9c:	d331      	bcc.n	8018002 <quorem+0x9e>
 8017f9e:	f04f 0e00 	mov.w	lr, #0
 8017fa2:	4640      	mov	r0, r8
 8017fa4:	46ac      	mov	ip, r5
 8017fa6:	46f2      	mov	sl, lr
 8017fa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8017fac:	b293      	uxth	r3, r2
 8017fae:	fb06 e303 	mla	r3, r6, r3, lr
 8017fb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	ebaa 0303 	sub.w	r3, sl, r3
 8017fbc:	0c12      	lsrs	r2, r2, #16
 8017fbe:	f8dc a000 	ldr.w	sl, [ip]
 8017fc2:	fb06 e202 	mla	r2, r6, r2, lr
 8017fc6:	fa13 f38a 	uxtah	r3, r3, sl
 8017fca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017fce:	fa1f fa82 	uxth.w	sl, r2
 8017fd2:	f8dc 2000 	ldr.w	r2, [ip]
 8017fd6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017fda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017fde:	b29b      	uxth	r3, r3
 8017fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017fe4:	4581      	cmp	r9, r0
 8017fe6:	f84c 3b04 	str.w	r3, [ip], #4
 8017fea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017fee:	d2db      	bcs.n	8017fa8 <quorem+0x44>
 8017ff0:	f855 300b 	ldr.w	r3, [r5, fp]
 8017ff4:	b92b      	cbnz	r3, 8018002 <quorem+0x9e>
 8017ff6:	9b01      	ldr	r3, [sp, #4]
 8017ff8:	3b04      	subs	r3, #4
 8017ffa:	429d      	cmp	r5, r3
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	d32e      	bcc.n	801805e <quorem+0xfa>
 8018000:	613c      	str	r4, [r7, #16]
 8018002:	4638      	mov	r0, r7
 8018004:	f001 fc82 	bl	801990c <__mcmp>
 8018008:	2800      	cmp	r0, #0
 801800a:	db24      	blt.n	8018056 <quorem+0xf2>
 801800c:	3601      	adds	r6, #1
 801800e:	4628      	mov	r0, r5
 8018010:	f04f 0c00 	mov.w	ip, #0
 8018014:	f858 2b04 	ldr.w	r2, [r8], #4
 8018018:	f8d0 e000 	ldr.w	lr, [r0]
 801801c:	b293      	uxth	r3, r2
 801801e:	ebac 0303 	sub.w	r3, ip, r3
 8018022:	0c12      	lsrs	r2, r2, #16
 8018024:	fa13 f38e 	uxtah	r3, r3, lr
 8018028:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801802c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018030:	b29b      	uxth	r3, r3
 8018032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018036:	45c1      	cmp	r9, r8
 8018038:	f840 3b04 	str.w	r3, [r0], #4
 801803c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018040:	d2e8      	bcs.n	8018014 <quorem+0xb0>
 8018042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801804a:	b922      	cbnz	r2, 8018056 <quorem+0xf2>
 801804c:	3b04      	subs	r3, #4
 801804e:	429d      	cmp	r5, r3
 8018050:	461a      	mov	r2, r3
 8018052:	d30a      	bcc.n	801806a <quorem+0x106>
 8018054:	613c      	str	r4, [r7, #16]
 8018056:	4630      	mov	r0, r6
 8018058:	b003      	add	sp, #12
 801805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801805e:	6812      	ldr	r2, [r2, #0]
 8018060:	3b04      	subs	r3, #4
 8018062:	2a00      	cmp	r2, #0
 8018064:	d1cc      	bne.n	8018000 <quorem+0x9c>
 8018066:	3c01      	subs	r4, #1
 8018068:	e7c7      	b.n	8017ffa <quorem+0x96>
 801806a:	6812      	ldr	r2, [r2, #0]
 801806c:	3b04      	subs	r3, #4
 801806e:	2a00      	cmp	r2, #0
 8018070:	d1f0      	bne.n	8018054 <quorem+0xf0>
 8018072:	3c01      	subs	r4, #1
 8018074:	e7eb      	b.n	801804e <quorem+0xea>
 8018076:	2000      	movs	r0, #0
 8018078:	e7ee      	b.n	8018058 <quorem+0xf4>
 801807a:	0000      	movs	r0, r0
 801807c:	0000      	movs	r0, r0
	...

08018080 <_dtoa_r>:
 8018080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018084:	ed2d 8b02 	vpush	{d8}
 8018088:	ec57 6b10 	vmov	r6, r7, d0
 801808c:	b095      	sub	sp, #84	; 0x54
 801808e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018090:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018094:	9105      	str	r1, [sp, #20]
 8018096:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801809a:	4604      	mov	r4, r0
 801809c:	9209      	str	r2, [sp, #36]	; 0x24
 801809e:	930f      	str	r3, [sp, #60]	; 0x3c
 80180a0:	b975      	cbnz	r5, 80180c0 <_dtoa_r+0x40>
 80180a2:	2010      	movs	r0, #16
 80180a4:	f7fe f8dc 	bl	8016260 <malloc>
 80180a8:	4602      	mov	r2, r0
 80180aa:	6260      	str	r0, [r4, #36]	; 0x24
 80180ac:	b920      	cbnz	r0, 80180b8 <_dtoa_r+0x38>
 80180ae:	4bb2      	ldr	r3, [pc, #712]	; (8018378 <_dtoa_r+0x2f8>)
 80180b0:	21ea      	movs	r1, #234	; 0xea
 80180b2:	48b2      	ldr	r0, [pc, #712]	; (801837c <_dtoa_r+0x2fc>)
 80180b4:	f001 ffb0 	bl	801a018 <__assert_func>
 80180b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80180bc:	6005      	str	r5, [r0, #0]
 80180be:	60c5      	str	r5, [r0, #12]
 80180c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180c2:	6819      	ldr	r1, [r3, #0]
 80180c4:	b151      	cbz	r1, 80180dc <_dtoa_r+0x5c>
 80180c6:	685a      	ldr	r2, [r3, #4]
 80180c8:	604a      	str	r2, [r1, #4]
 80180ca:	2301      	movs	r3, #1
 80180cc:	4093      	lsls	r3, r2
 80180ce:	608b      	str	r3, [r1, #8]
 80180d0:	4620      	mov	r0, r4
 80180d2:	f001 f993 	bl	80193fc <_Bfree>
 80180d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180d8:	2200      	movs	r2, #0
 80180da:	601a      	str	r2, [r3, #0]
 80180dc:	1e3b      	subs	r3, r7, #0
 80180de:	bfb9      	ittee	lt
 80180e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80180e4:	9303      	strlt	r3, [sp, #12]
 80180e6:	2300      	movge	r3, #0
 80180e8:	f8c8 3000 	strge.w	r3, [r8]
 80180ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80180f0:	4ba3      	ldr	r3, [pc, #652]	; (8018380 <_dtoa_r+0x300>)
 80180f2:	bfbc      	itt	lt
 80180f4:	2201      	movlt	r2, #1
 80180f6:	f8c8 2000 	strlt.w	r2, [r8]
 80180fa:	ea33 0309 	bics.w	r3, r3, r9
 80180fe:	d11b      	bne.n	8018138 <_dtoa_r+0xb8>
 8018100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018102:	f242 730f 	movw	r3, #9999	; 0x270f
 8018106:	6013      	str	r3, [r2, #0]
 8018108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801810c:	4333      	orrs	r3, r6
 801810e:	f000 857a 	beq.w	8018c06 <_dtoa_r+0xb86>
 8018112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018114:	b963      	cbnz	r3, 8018130 <_dtoa_r+0xb0>
 8018116:	4b9b      	ldr	r3, [pc, #620]	; (8018384 <_dtoa_r+0x304>)
 8018118:	e024      	b.n	8018164 <_dtoa_r+0xe4>
 801811a:	4b9b      	ldr	r3, [pc, #620]	; (8018388 <_dtoa_r+0x308>)
 801811c:	9300      	str	r3, [sp, #0]
 801811e:	3308      	adds	r3, #8
 8018120:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018122:	6013      	str	r3, [r2, #0]
 8018124:	9800      	ldr	r0, [sp, #0]
 8018126:	b015      	add	sp, #84	; 0x54
 8018128:	ecbd 8b02 	vpop	{d8}
 801812c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018130:	4b94      	ldr	r3, [pc, #592]	; (8018384 <_dtoa_r+0x304>)
 8018132:	9300      	str	r3, [sp, #0]
 8018134:	3303      	adds	r3, #3
 8018136:	e7f3      	b.n	8018120 <_dtoa_r+0xa0>
 8018138:	ed9d 7b02 	vldr	d7, [sp, #8]
 801813c:	2200      	movs	r2, #0
 801813e:	ec51 0b17 	vmov	r0, r1, d7
 8018142:	2300      	movs	r3, #0
 8018144:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018148:	f7e8 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 801814c:	4680      	mov	r8, r0
 801814e:	b158      	cbz	r0, 8018168 <_dtoa_r+0xe8>
 8018150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018152:	2301      	movs	r3, #1
 8018154:	6013      	str	r3, [r2, #0]
 8018156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018158:	2b00      	cmp	r3, #0
 801815a:	f000 8551 	beq.w	8018c00 <_dtoa_r+0xb80>
 801815e:	488b      	ldr	r0, [pc, #556]	; (801838c <_dtoa_r+0x30c>)
 8018160:	6018      	str	r0, [r3, #0]
 8018162:	1e43      	subs	r3, r0, #1
 8018164:	9300      	str	r3, [sp, #0]
 8018166:	e7dd      	b.n	8018124 <_dtoa_r+0xa4>
 8018168:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801816c:	aa12      	add	r2, sp, #72	; 0x48
 801816e:	a913      	add	r1, sp, #76	; 0x4c
 8018170:	4620      	mov	r0, r4
 8018172:	f001 fceb 	bl	8019b4c <__d2b>
 8018176:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801817a:	4683      	mov	fp, r0
 801817c:	2d00      	cmp	r5, #0
 801817e:	d07c      	beq.n	801827a <_dtoa_r+0x1fa>
 8018180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018182:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801818a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801818e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018192:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801819a:	4b7d      	ldr	r3, [pc, #500]	; (8018390 <_dtoa_r+0x310>)
 801819c:	2200      	movs	r2, #0
 801819e:	4630      	mov	r0, r6
 80181a0:	4639      	mov	r1, r7
 80181a2:	f7e8 f871 	bl	8000288 <__aeabi_dsub>
 80181a6:	a36e      	add	r3, pc, #440	; (adr r3, 8018360 <_dtoa_r+0x2e0>)
 80181a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ac:	f7e8 fa24 	bl	80005f8 <__aeabi_dmul>
 80181b0:	a36d      	add	r3, pc, #436	; (adr r3, 8018368 <_dtoa_r+0x2e8>)
 80181b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181b6:	f7e8 f869 	bl	800028c <__adddf3>
 80181ba:	4606      	mov	r6, r0
 80181bc:	4628      	mov	r0, r5
 80181be:	460f      	mov	r7, r1
 80181c0:	f7e8 f9b0 	bl	8000524 <__aeabi_i2d>
 80181c4:	a36a      	add	r3, pc, #424	; (adr r3, 8018370 <_dtoa_r+0x2f0>)
 80181c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ca:	f7e8 fa15 	bl	80005f8 <__aeabi_dmul>
 80181ce:	4602      	mov	r2, r0
 80181d0:	460b      	mov	r3, r1
 80181d2:	4630      	mov	r0, r6
 80181d4:	4639      	mov	r1, r7
 80181d6:	f7e8 f859 	bl	800028c <__adddf3>
 80181da:	4606      	mov	r6, r0
 80181dc:	460f      	mov	r7, r1
 80181de:	f7e8 fcbb 	bl	8000b58 <__aeabi_d2iz>
 80181e2:	2200      	movs	r2, #0
 80181e4:	4682      	mov	sl, r0
 80181e6:	2300      	movs	r3, #0
 80181e8:	4630      	mov	r0, r6
 80181ea:	4639      	mov	r1, r7
 80181ec:	f7e8 fc76 	bl	8000adc <__aeabi_dcmplt>
 80181f0:	b148      	cbz	r0, 8018206 <_dtoa_r+0x186>
 80181f2:	4650      	mov	r0, sl
 80181f4:	f7e8 f996 	bl	8000524 <__aeabi_i2d>
 80181f8:	4632      	mov	r2, r6
 80181fa:	463b      	mov	r3, r7
 80181fc:	f7e8 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 8018200:	b908      	cbnz	r0, 8018206 <_dtoa_r+0x186>
 8018202:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018206:	f1ba 0f16 	cmp.w	sl, #22
 801820a:	d854      	bhi.n	80182b6 <_dtoa_r+0x236>
 801820c:	4b61      	ldr	r3, [pc, #388]	; (8018394 <_dtoa_r+0x314>)
 801820e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018216:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801821a:	f7e8 fc5f 	bl	8000adc <__aeabi_dcmplt>
 801821e:	2800      	cmp	r0, #0
 8018220:	d04b      	beq.n	80182ba <_dtoa_r+0x23a>
 8018222:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018226:	2300      	movs	r3, #0
 8018228:	930e      	str	r3, [sp, #56]	; 0x38
 801822a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801822c:	1b5d      	subs	r5, r3, r5
 801822e:	1e6b      	subs	r3, r5, #1
 8018230:	9304      	str	r3, [sp, #16]
 8018232:	bf43      	ittte	mi
 8018234:	2300      	movmi	r3, #0
 8018236:	f1c5 0801 	rsbmi	r8, r5, #1
 801823a:	9304      	strmi	r3, [sp, #16]
 801823c:	f04f 0800 	movpl.w	r8, #0
 8018240:	f1ba 0f00 	cmp.w	sl, #0
 8018244:	db3b      	blt.n	80182be <_dtoa_r+0x23e>
 8018246:	9b04      	ldr	r3, [sp, #16]
 8018248:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801824c:	4453      	add	r3, sl
 801824e:	9304      	str	r3, [sp, #16]
 8018250:	2300      	movs	r3, #0
 8018252:	9306      	str	r3, [sp, #24]
 8018254:	9b05      	ldr	r3, [sp, #20]
 8018256:	2b09      	cmp	r3, #9
 8018258:	d869      	bhi.n	801832e <_dtoa_r+0x2ae>
 801825a:	2b05      	cmp	r3, #5
 801825c:	bfc4      	itt	gt
 801825e:	3b04      	subgt	r3, #4
 8018260:	9305      	strgt	r3, [sp, #20]
 8018262:	9b05      	ldr	r3, [sp, #20]
 8018264:	f1a3 0302 	sub.w	r3, r3, #2
 8018268:	bfcc      	ite	gt
 801826a:	2500      	movgt	r5, #0
 801826c:	2501      	movle	r5, #1
 801826e:	2b03      	cmp	r3, #3
 8018270:	d869      	bhi.n	8018346 <_dtoa_r+0x2c6>
 8018272:	e8df f003 	tbb	[pc, r3]
 8018276:	4e2c      	.short	0x4e2c
 8018278:	5a4c      	.short	0x5a4c
 801827a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801827e:	441d      	add	r5, r3
 8018280:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018284:	2b20      	cmp	r3, #32
 8018286:	bfc1      	itttt	gt
 8018288:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801828c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018290:	fa09 f303 	lslgt.w	r3, r9, r3
 8018294:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018298:	bfda      	itte	le
 801829a:	f1c3 0320 	rsble	r3, r3, #32
 801829e:	fa06 f003 	lslle.w	r0, r6, r3
 80182a2:	4318      	orrgt	r0, r3
 80182a4:	f7e8 f92e 	bl	8000504 <__aeabi_ui2d>
 80182a8:	2301      	movs	r3, #1
 80182aa:	4606      	mov	r6, r0
 80182ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80182b0:	3d01      	subs	r5, #1
 80182b2:	9310      	str	r3, [sp, #64]	; 0x40
 80182b4:	e771      	b.n	801819a <_dtoa_r+0x11a>
 80182b6:	2301      	movs	r3, #1
 80182b8:	e7b6      	b.n	8018228 <_dtoa_r+0x1a8>
 80182ba:	900e      	str	r0, [sp, #56]	; 0x38
 80182bc:	e7b5      	b.n	801822a <_dtoa_r+0x1aa>
 80182be:	f1ca 0300 	rsb	r3, sl, #0
 80182c2:	9306      	str	r3, [sp, #24]
 80182c4:	2300      	movs	r3, #0
 80182c6:	eba8 080a 	sub.w	r8, r8, sl
 80182ca:	930d      	str	r3, [sp, #52]	; 0x34
 80182cc:	e7c2      	b.n	8018254 <_dtoa_r+0x1d4>
 80182ce:	2300      	movs	r3, #0
 80182d0:	9308      	str	r3, [sp, #32]
 80182d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	dc39      	bgt.n	801834c <_dtoa_r+0x2cc>
 80182d8:	f04f 0901 	mov.w	r9, #1
 80182dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80182e0:	464b      	mov	r3, r9
 80182e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80182e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80182e8:	2200      	movs	r2, #0
 80182ea:	6042      	str	r2, [r0, #4]
 80182ec:	2204      	movs	r2, #4
 80182ee:	f102 0614 	add.w	r6, r2, #20
 80182f2:	429e      	cmp	r6, r3
 80182f4:	6841      	ldr	r1, [r0, #4]
 80182f6:	d92f      	bls.n	8018358 <_dtoa_r+0x2d8>
 80182f8:	4620      	mov	r0, r4
 80182fa:	f001 f83f 	bl	801937c <_Balloc>
 80182fe:	9000      	str	r0, [sp, #0]
 8018300:	2800      	cmp	r0, #0
 8018302:	d14b      	bne.n	801839c <_dtoa_r+0x31c>
 8018304:	4b24      	ldr	r3, [pc, #144]	; (8018398 <_dtoa_r+0x318>)
 8018306:	4602      	mov	r2, r0
 8018308:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801830c:	e6d1      	b.n	80180b2 <_dtoa_r+0x32>
 801830e:	2301      	movs	r3, #1
 8018310:	e7de      	b.n	80182d0 <_dtoa_r+0x250>
 8018312:	2300      	movs	r3, #0
 8018314:	9308      	str	r3, [sp, #32]
 8018316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018318:	eb0a 0903 	add.w	r9, sl, r3
 801831c:	f109 0301 	add.w	r3, r9, #1
 8018320:	2b01      	cmp	r3, #1
 8018322:	9301      	str	r3, [sp, #4]
 8018324:	bfb8      	it	lt
 8018326:	2301      	movlt	r3, #1
 8018328:	e7dd      	b.n	80182e6 <_dtoa_r+0x266>
 801832a:	2301      	movs	r3, #1
 801832c:	e7f2      	b.n	8018314 <_dtoa_r+0x294>
 801832e:	2501      	movs	r5, #1
 8018330:	2300      	movs	r3, #0
 8018332:	9305      	str	r3, [sp, #20]
 8018334:	9508      	str	r5, [sp, #32]
 8018336:	f04f 39ff 	mov.w	r9, #4294967295
 801833a:	2200      	movs	r2, #0
 801833c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018340:	2312      	movs	r3, #18
 8018342:	9209      	str	r2, [sp, #36]	; 0x24
 8018344:	e7cf      	b.n	80182e6 <_dtoa_r+0x266>
 8018346:	2301      	movs	r3, #1
 8018348:	9308      	str	r3, [sp, #32]
 801834a:	e7f4      	b.n	8018336 <_dtoa_r+0x2b6>
 801834c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018350:	f8cd 9004 	str.w	r9, [sp, #4]
 8018354:	464b      	mov	r3, r9
 8018356:	e7c6      	b.n	80182e6 <_dtoa_r+0x266>
 8018358:	3101      	adds	r1, #1
 801835a:	6041      	str	r1, [r0, #4]
 801835c:	0052      	lsls	r2, r2, #1
 801835e:	e7c6      	b.n	80182ee <_dtoa_r+0x26e>
 8018360:	636f4361 	.word	0x636f4361
 8018364:	3fd287a7 	.word	0x3fd287a7
 8018368:	8b60c8b3 	.word	0x8b60c8b3
 801836c:	3fc68a28 	.word	0x3fc68a28
 8018370:	509f79fb 	.word	0x509f79fb
 8018374:	3fd34413 	.word	0x3fd34413
 8018378:	0801c9be 	.word	0x0801c9be
 801837c:	0801c9d5 	.word	0x0801c9d5
 8018380:	7ff00000 	.word	0x7ff00000
 8018384:	0801c9ba 	.word	0x0801c9ba
 8018388:	0801c9b1 	.word	0x0801c9b1
 801838c:	0801c835 	.word	0x0801c835
 8018390:	3ff80000 	.word	0x3ff80000
 8018394:	0801cb50 	.word	0x0801cb50
 8018398:	0801ca34 	.word	0x0801ca34
 801839c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801839e:	9a00      	ldr	r2, [sp, #0]
 80183a0:	601a      	str	r2, [r3, #0]
 80183a2:	9b01      	ldr	r3, [sp, #4]
 80183a4:	2b0e      	cmp	r3, #14
 80183a6:	f200 80ad 	bhi.w	8018504 <_dtoa_r+0x484>
 80183aa:	2d00      	cmp	r5, #0
 80183ac:	f000 80aa 	beq.w	8018504 <_dtoa_r+0x484>
 80183b0:	f1ba 0f00 	cmp.w	sl, #0
 80183b4:	dd36      	ble.n	8018424 <_dtoa_r+0x3a4>
 80183b6:	4ac3      	ldr	r2, [pc, #780]	; (80186c4 <_dtoa_r+0x644>)
 80183b8:	f00a 030f 	and.w	r3, sl, #15
 80183bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80183c0:	ed93 7b00 	vldr	d7, [r3]
 80183c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80183c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80183cc:	eeb0 8a47 	vmov.f32	s16, s14
 80183d0:	eef0 8a67 	vmov.f32	s17, s15
 80183d4:	d016      	beq.n	8018404 <_dtoa_r+0x384>
 80183d6:	4bbc      	ldr	r3, [pc, #752]	; (80186c8 <_dtoa_r+0x648>)
 80183d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80183dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80183e0:	f7e8 fa34 	bl	800084c <__aeabi_ddiv>
 80183e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183e8:	f007 070f 	and.w	r7, r7, #15
 80183ec:	2503      	movs	r5, #3
 80183ee:	4eb6      	ldr	r6, [pc, #728]	; (80186c8 <_dtoa_r+0x648>)
 80183f0:	b957      	cbnz	r7, 8018408 <_dtoa_r+0x388>
 80183f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183f6:	ec53 2b18 	vmov	r2, r3, d8
 80183fa:	f7e8 fa27 	bl	800084c <__aeabi_ddiv>
 80183fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018402:	e029      	b.n	8018458 <_dtoa_r+0x3d8>
 8018404:	2502      	movs	r5, #2
 8018406:	e7f2      	b.n	80183ee <_dtoa_r+0x36e>
 8018408:	07f9      	lsls	r1, r7, #31
 801840a:	d508      	bpl.n	801841e <_dtoa_r+0x39e>
 801840c:	ec51 0b18 	vmov	r0, r1, d8
 8018410:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018414:	f7e8 f8f0 	bl	80005f8 <__aeabi_dmul>
 8018418:	ec41 0b18 	vmov	d8, r0, r1
 801841c:	3501      	adds	r5, #1
 801841e:	107f      	asrs	r7, r7, #1
 8018420:	3608      	adds	r6, #8
 8018422:	e7e5      	b.n	80183f0 <_dtoa_r+0x370>
 8018424:	f000 80a6 	beq.w	8018574 <_dtoa_r+0x4f4>
 8018428:	f1ca 0600 	rsb	r6, sl, #0
 801842c:	4ba5      	ldr	r3, [pc, #660]	; (80186c4 <_dtoa_r+0x644>)
 801842e:	4fa6      	ldr	r7, [pc, #664]	; (80186c8 <_dtoa_r+0x648>)
 8018430:	f006 020f 	and.w	r2, r6, #15
 8018434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801843c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018440:	f7e8 f8da 	bl	80005f8 <__aeabi_dmul>
 8018444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018448:	1136      	asrs	r6, r6, #4
 801844a:	2300      	movs	r3, #0
 801844c:	2502      	movs	r5, #2
 801844e:	2e00      	cmp	r6, #0
 8018450:	f040 8085 	bne.w	801855e <_dtoa_r+0x4de>
 8018454:	2b00      	cmp	r3, #0
 8018456:	d1d2      	bne.n	80183fe <_dtoa_r+0x37e>
 8018458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801845a:	2b00      	cmp	r3, #0
 801845c:	f000 808c 	beq.w	8018578 <_dtoa_r+0x4f8>
 8018460:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018464:	4b99      	ldr	r3, [pc, #612]	; (80186cc <_dtoa_r+0x64c>)
 8018466:	2200      	movs	r2, #0
 8018468:	4630      	mov	r0, r6
 801846a:	4639      	mov	r1, r7
 801846c:	f7e8 fb36 	bl	8000adc <__aeabi_dcmplt>
 8018470:	2800      	cmp	r0, #0
 8018472:	f000 8081 	beq.w	8018578 <_dtoa_r+0x4f8>
 8018476:	9b01      	ldr	r3, [sp, #4]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d07d      	beq.n	8018578 <_dtoa_r+0x4f8>
 801847c:	f1b9 0f00 	cmp.w	r9, #0
 8018480:	dd3c      	ble.n	80184fc <_dtoa_r+0x47c>
 8018482:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018486:	9307      	str	r3, [sp, #28]
 8018488:	2200      	movs	r2, #0
 801848a:	4b91      	ldr	r3, [pc, #580]	; (80186d0 <_dtoa_r+0x650>)
 801848c:	4630      	mov	r0, r6
 801848e:	4639      	mov	r1, r7
 8018490:	f7e8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8018494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018498:	3501      	adds	r5, #1
 801849a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801849e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80184a2:	4628      	mov	r0, r5
 80184a4:	f7e8 f83e 	bl	8000524 <__aeabi_i2d>
 80184a8:	4632      	mov	r2, r6
 80184aa:	463b      	mov	r3, r7
 80184ac:	f7e8 f8a4 	bl	80005f8 <__aeabi_dmul>
 80184b0:	4b88      	ldr	r3, [pc, #544]	; (80186d4 <_dtoa_r+0x654>)
 80184b2:	2200      	movs	r2, #0
 80184b4:	f7e7 feea 	bl	800028c <__adddf3>
 80184b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80184bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184c0:	9303      	str	r3, [sp, #12]
 80184c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d15c      	bne.n	8018582 <_dtoa_r+0x502>
 80184c8:	4b83      	ldr	r3, [pc, #524]	; (80186d8 <_dtoa_r+0x658>)
 80184ca:	2200      	movs	r2, #0
 80184cc:	4630      	mov	r0, r6
 80184ce:	4639      	mov	r1, r7
 80184d0:	f7e7 feda 	bl	8000288 <__aeabi_dsub>
 80184d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80184d8:	4606      	mov	r6, r0
 80184da:	460f      	mov	r7, r1
 80184dc:	f7e8 fb1c 	bl	8000b18 <__aeabi_dcmpgt>
 80184e0:	2800      	cmp	r0, #0
 80184e2:	f040 8296 	bne.w	8018a12 <_dtoa_r+0x992>
 80184e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80184ea:	4630      	mov	r0, r6
 80184ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80184f0:	4639      	mov	r1, r7
 80184f2:	f7e8 faf3 	bl	8000adc <__aeabi_dcmplt>
 80184f6:	2800      	cmp	r0, #0
 80184f8:	f040 8288 	bne.w	8018a0c <_dtoa_r+0x98c>
 80184fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018500:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018506:	2b00      	cmp	r3, #0
 8018508:	f2c0 8158 	blt.w	80187bc <_dtoa_r+0x73c>
 801850c:	f1ba 0f0e 	cmp.w	sl, #14
 8018510:	f300 8154 	bgt.w	80187bc <_dtoa_r+0x73c>
 8018514:	4b6b      	ldr	r3, [pc, #428]	; (80186c4 <_dtoa_r+0x644>)
 8018516:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801851a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018520:	2b00      	cmp	r3, #0
 8018522:	f280 80e3 	bge.w	80186ec <_dtoa_r+0x66c>
 8018526:	9b01      	ldr	r3, [sp, #4]
 8018528:	2b00      	cmp	r3, #0
 801852a:	f300 80df 	bgt.w	80186ec <_dtoa_r+0x66c>
 801852e:	f040 826d 	bne.w	8018a0c <_dtoa_r+0x98c>
 8018532:	4b69      	ldr	r3, [pc, #420]	; (80186d8 <_dtoa_r+0x658>)
 8018534:	2200      	movs	r2, #0
 8018536:	4640      	mov	r0, r8
 8018538:	4649      	mov	r1, r9
 801853a:	f7e8 f85d 	bl	80005f8 <__aeabi_dmul>
 801853e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018542:	f7e8 fadf 	bl	8000b04 <__aeabi_dcmpge>
 8018546:	9e01      	ldr	r6, [sp, #4]
 8018548:	4637      	mov	r7, r6
 801854a:	2800      	cmp	r0, #0
 801854c:	f040 8243 	bne.w	80189d6 <_dtoa_r+0x956>
 8018550:	9d00      	ldr	r5, [sp, #0]
 8018552:	2331      	movs	r3, #49	; 0x31
 8018554:	f805 3b01 	strb.w	r3, [r5], #1
 8018558:	f10a 0a01 	add.w	sl, sl, #1
 801855c:	e23f      	b.n	80189de <_dtoa_r+0x95e>
 801855e:	07f2      	lsls	r2, r6, #31
 8018560:	d505      	bpl.n	801856e <_dtoa_r+0x4ee>
 8018562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018566:	f7e8 f847 	bl	80005f8 <__aeabi_dmul>
 801856a:	3501      	adds	r5, #1
 801856c:	2301      	movs	r3, #1
 801856e:	1076      	asrs	r6, r6, #1
 8018570:	3708      	adds	r7, #8
 8018572:	e76c      	b.n	801844e <_dtoa_r+0x3ce>
 8018574:	2502      	movs	r5, #2
 8018576:	e76f      	b.n	8018458 <_dtoa_r+0x3d8>
 8018578:	9b01      	ldr	r3, [sp, #4]
 801857a:	f8cd a01c 	str.w	sl, [sp, #28]
 801857e:	930c      	str	r3, [sp, #48]	; 0x30
 8018580:	e78d      	b.n	801849e <_dtoa_r+0x41e>
 8018582:	9900      	ldr	r1, [sp, #0]
 8018584:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018588:	4b4e      	ldr	r3, [pc, #312]	; (80186c4 <_dtoa_r+0x644>)
 801858a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801858e:	4401      	add	r1, r0
 8018590:	9102      	str	r1, [sp, #8]
 8018592:	9908      	ldr	r1, [sp, #32]
 8018594:	eeb0 8a47 	vmov.f32	s16, s14
 8018598:	eef0 8a67 	vmov.f32	s17, s15
 801859c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80185a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80185a4:	2900      	cmp	r1, #0
 80185a6:	d045      	beq.n	8018634 <_dtoa_r+0x5b4>
 80185a8:	494c      	ldr	r1, [pc, #304]	; (80186dc <_dtoa_r+0x65c>)
 80185aa:	2000      	movs	r0, #0
 80185ac:	f7e8 f94e 	bl	800084c <__aeabi_ddiv>
 80185b0:	ec53 2b18 	vmov	r2, r3, d8
 80185b4:	f7e7 fe68 	bl	8000288 <__aeabi_dsub>
 80185b8:	9d00      	ldr	r5, [sp, #0]
 80185ba:	ec41 0b18 	vmov	d8, r0, r1
 80185be:	4639      	mov	r1, r7
 80185c0:	4630      	mov	r0, r6
 80185c2:	f7e8 fac9 	bl	8000b58 <__aeabi_d2iz>
 80185c6:	900c      	str	r0, [sp, #48]	; 0x30
 80185c8:	f7e7 ffac 	bl	8000524 <__aeabi_i2d>
 80185cc:	4602      	mov	r2, r0
 80185ce:	460b      	mov	r3, r1
 80185d0:	4630      	mov	r0, r6
 80185d2:	4639      	mov	r1, r7
 80185d4:	f7e7 fe58 	bl	8000288 <__aeabi_dsub>
 80185d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185da:	3330      	adds	r3, #48	; 0x30
 80185dc:	f805 3b01 	strb.w	r3, [r5], #1
 80185e0:	ec53 2b18 	vmov	r2, r3, d8
 80185e4:	4606      	mov	r6, r0
 80185e6:	460f      	mov	r7, r1
 80185e8:	f7e8 fa78 	bl	8000adc <__aeabi_dcmplt>
 80185ec:	2800      	cmp	r0, #0
 80185ee:	d165      	bne.n	80186bc <_dtoa_r+0x63c>
 80185f0:	4632      	mov	r2, r6
 80185f2:	463b      	mov	r3, r7
 80185f4:	4935      	ldr	r1, [pc, #212]	; (80186cc <_dtoa_r+0x64c>)
 80185f6:	2000      	movs	r0, #0
 80185f8:	f7e7 fe46 	bl	8000288 <__aeabi_dsub>
 80185fc:	ec53 2b18 	vmov	r2, r3, d8
 8018600:	f7e8 fa6c 	bl	8000adc <__aeabi_dcmplt>
 8018604:	2800      	cmp	r0, #0
 8018606:	f040 80b9 	bne.w	801877c <_dtoa_r+0x6fc>
 801860a:	9b02      	ldr	r3, [sp, #8]
 801860c:	429d      	cmp	r5, r3
 801860e:	f43f af75 	beq.w	80184fc <_dtoa_r+0x47c>
 8018612:	4b2f      	ldr	r3, [pc, #188]	; (80186d0 <_dtoa_r+0x650>)
 8018614:	ec51 0b18 	vmov	r0, r1, d8
 8018618:	2200      	movs	r2, #0
 801861a:	f7e7 ffed 	bl	80005f8 <__aeabi_dmul>
 801861e:	4b2c      	ldr	r3, [pc, #176]	; (80186d0 <_dtoa_r+0x650>)
 8018620:	ec41 0b18 	vmov	d8, r0, r1
 8018624:	2200      	movs	r2, #0
 8018626:	4630      	mov	r0, r6
 8018628:	4639      	mov	r1, r7
 801862a:	f7e7 ffe5 	bl	80005f8 <__aeabi_dmul>
 801862e:	4606      	mov	r6, r0
 8018630:	460f      	mov	r7, r1
 8018632:	e7c4      	b.n	80185be <_dtoa_r+0x53e>
 8018634:	ec51 0b17 	vmov	r0, r1, d7
 8018638:	f7e7 ffde 	bl	80005f8 <__aeabi_dmul>
 801863c:	9b02      	ldr	r3, [sp, #8]
 801863e:	9d00      	ldr	r5, [sp, #0]
 8018640:	930c      	str	r3, [sp, #48]	; 0x30
 8018642:	ec41 0b18 	vmov	d8, r0, r1
 8018646:	4639      	mov	r1, r7
 8018648:	4630      	mov	r0, r6
 801864a:	f7e8 fa85 	bl	8000b58 <__aeabi_d2iz>
 801864e:	9011      	str	r0, [sp, #68]	; 0x44
 8018650:	f7e7 ff68 	bl	8000524 <__aeabi_i2d>
 8018654:	4602      	mov	r2, r0
 8018656:	460b      	mov	r3, r1
 8018658:	4630      	mov	r0, r6
 801865a:	4639      	mov	r1, r7
 801865c:	f7e7 fe14 	bl	8000288 <__aeabi_dsub>
 8018660:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018662:	3330      	adds	r3, #48	; 0x30
 8018664:	f805 3b01 	strb.w	r3, [r5], #1
 8018668:	9b02      	ldr	r3, [sp, #8]
 801866a:	429d      	cmp	r5, r3
 801866c:	4606      	mov	r6, r0
 801866e:	460f      	mov	r7, r1
 8018670:	f04f 0200 	mov.w	r2, #0
 8018674:	d134      	bne.n	80186e0 <_dtoa_r+0x660>
 8018676:	4b19      	ldr	r3, [pc, #100]	; (80186dc <_dtoa_r+0x65c>)
 8018678:	ec51 0b18 	vmov	r0, r1, d8
 801867c:	f7e7 fe06 	bl	800028c <__adddf3>
 8018680:	4602      	mov	r2, r0
 8018682:	460b      	mov	r3, r1
 8018684:	4630      	mov	r0, r6
 8018686:	4639      	mov	r1, r7
 8018688:	f7e8 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 801868c:	2800      	cmp	r0, #0
 801868e:	d175      	bne.n	801877c <_dtoa_r+0x6fc>
 8018690:	ec53 2b18 	vmov	r2, r3, d8
 8018694:	4911      	ldr	r1, [pc, #68]	; (80186dc <_dtoa_r+0x65c>)
 8018696:	2000      	movs	r0, #0
 8018698:	f7e7 fdf6 	bl	8000288 <__aeabi_dsub>
 801869c:	4602      	mov	r2, r0
 801869e:	460b      	mov	r3, r1
 80186a0:	4630      	mov	r0, r6
 80186a2:	4639      	mov	r1, r7
 80186a4:	f7e8 fa1a 	bl	8000adc <__aeabi_dcmplt>
 80186a8:	2800      	cmp	r0, #0
 80186aa:	f43f af27 	beq.w	80184fc <_dtoa_r+0x47c>
 80186ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80186b0:	1e6b      	subs	r3, r5, #1
 80186b2:	930c      	str	r3, [sp, #48]	; 0x30
 80186b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80186b8:	2b30      	cmp	r3, #48	; 0x30
 80186ba:	d0f8      	beq.n	80186ae <_dtoa_r+0x62e>
 80186bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80186c0:	e04a      	b.n	8018758 <_dtoa_r+0x6d8>
 80186c2:	bf00      	nop
 80186c4:	0801cb50 	.word	0x0801cb50
 80186c8:	0801cb28 	.word	0x0801cb28
 80186cc:	3ff00000 	.word	0x3ff00000
 80186d0:	40240000 	.word	0x40240000
 80186d4:	401c0000 	.word	0x401c0000
 80186d8:	40140000 	.word	0x40140000
 80186dc:	3fe00000 	.word	0x3fe00000
 80186e0:	4baf      	ldr	r3, [pc, #700]	; (80189a0 <_dtoa_r+0x920>)
 80186e2:	f7e7 ff89 	bl	80005f8 <__aeabi_dmul>
 80186e6:	4606      	mov	r6, r0
 80186e8:	460f      	mov	r7, r1
 80186ea:	e7ac      	b.n	8018646 <_dtoa_r+0x5c6>
 80186ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80186f0:	9d00      	ldr	r5, [sp, #0]
 80186f2:	4642      	mov	r2, r8
 80186f4:	464b      	mov	r3, r9
 80186f6:	4630      	mov	r0, r6
 80186f8:	4639      	mov	r1, r7
 80186fa:	f7e8 f8a7 	bl	800084c <__aeabi_ddiv>
 80186fe:	f7e8 fa2b 	bl	8000b58 <__aeabi_d2iz>
 8018702:	9002      	str	r0, [sp, #8]
 8018704:	f7e7 ff0e 	bl	8000524 <__aeabi_i2d>
 8018708:	4642      	mov	r2, r8
 801870a:	464b      	mov	r3, r9
 801870c:	f7e7 ff74 	bl	80005f8 <__aeabi_dmul>
 8018710:	4602      	mov	r2, r0
 8018712:	460b      	mov	r3, r1
 8018714:	4630      	mov	r0, r6
 8018716:	4639      	mov	r1, r7
 8018718:	f7e7 fdb6 	bl	8000288 <__aeabi_dsub>
 801871c:	9e02      	ldr	r6, [sp, #8]
 801871e:	9f01      	ldr	r7, [sp, #4]
 8018720:	3630      	adds	r6, #48	; 0x30
 8018722:	f805 6b01 	strb.w	r6, [r5], #1
 8018726:	9e00      	ldr	r6, [sp, #0]
 8018728:	1bae      	subs	r6, r5, r6
 801872a:	42b7      	cmp	r7, r6
 801872c:	4602      	mov	r2, r0
 801872e:	460b      	mov	r3, r1
 8018730:	d137      	bne.n	80187a2 <_dtoa_r+0x722>
 8018732:	f7e7 fdab 	bl	800028c <__adddf3>
 8018736:	4642      	mov	r2, r8
 8018738:	464b      	mov	r3, r9
 801873a:	4606      	mov	r6, r0
 801873c:	460f      	mov	r7, r1
 801873e:	f7e8 f9eb 	bl	8000b18 <__aeabi_dcmpgt>
 8018742:	b9c8      	cbnz	r0, 8018778 <_dtoa_r+0x6f8>
 8018744:	4642      	mov	r2, r8
 8018746:	464b      	mov	r3, r9
 8018748:	4630      	mov	r0, r6
 801874a:	4639      	mov	r1, r7
 801874c:	f7e8 f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8018750:	b110      	cbz	r0, 8018758 <_dtoa_r+0x6d8>
 8018752:	9b02      	ldr	r3, [sp, #8]
 8018754:	07d9      	lsls	r1, r3, #31
 8018756:	d40f      	bmi.n	8018778 <_dtoa_r+0x6f8>
 8018758:	4620      	mov	r0, r4
 801875a:	4659      	mov	r1, fp
 801875c:	f000 fe4e 	bl	80193fc <_Bfree>
 8018760:	2300      	movs	r3, #0
 8018762:	702b      	strb	r3, [r5, #0]
 8018764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018766:	f10a 0001 	add.w	r0, sl, #1
 801876a:	6018      	str	r0, [r3, #0]
 801876c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801876e:	2b00      	cmp	r3, #0
 8018770:	f43f acd8 	beq.w	8018124 <_dtoa_r+0xa4>
 8018774:	601d      	str	r5, [r3, #0]
 8018776:	e4d5      	b.n	8018124 <_dtoa_r+0xa4>
 8018778:	f8cd a01c 	str.w	sl, [sp, #28]
 801877c:	462b      	mov	r3, r5
 801877e:	461d      	mov	r5, r3
 8018780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018784:	2a39      	cmp	r2, #57	; 0x39
 8018786:	d108      	bne.n	801879a <_dtoa_r+0x71a>
 8018788:	9a00      	ldr	r2, [sp, #0]
 801878a:	429a      	cmp	r2, r3
 801878c:	d1f7      	bne.n	801877e <_dtoa_r+0x6fe>
 801878e:	9a07      	ldr	r2, [sp, #28]
 8018790:	9900      	ldr	r1, [sp, #0]
 8018792:	3201      	adds	r2, #1
 8018794:	9207      	str	r2, [sp, #28]
 8018796:	2230      	movs	r2, #48	; 0x30
 8018798:	700a      	strb	r2, [r1, #0]
 801879a:	781a      	ldrb	r2, [r3, #0]
 801879c:	3201      	adds	r2, #1
 801879e:	701a      	strb	r2, [r3, #0]
 80187a0:	e78c      	b.n	80186bc <_dtoa_r+0x63c>
 80187a2:	4b7f      	ldr	r3, [pc, #508]	; (80189a0 <_dtoa_r+0x920>)
 80187a4:	2200      	movs	r2, #0
 80187a6:	f7e7 ff27 	bl	80005f8 <__aeabi_dmul>
 80187aa:	2200      	movs	r2, #0
 80187ac:	2300      	movs	r3, #0
 80187ae:	4606      	mov	r6, r0
 80187b0:	460f      	mov	r7, r1
 80187b2:	f7e8 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80187b6:	2800      	cmp	r0, #0
 80187b8:	d09b      	beq.n	80186f2 <_dtoa_r+0x672>
 80187ba:	e7cd      	b.n	8018758 <_dtoa_r+0x6d8>
 80187bc:	9a08      	ldr	r2, [sp, #32]
 80187be:	2a00      	cmp	r2, #0
 80187c0:	f000 80c4 	beq.w	801894c <_dtoa_r+0x8cc>
 80187c4:	9a05      	ldr	r2, [sp, #20]
 80187c6:	2a01      	cmp	r2, #1
 80187c8:	f300 80a8 	bgt.w	801891c <_dtoa_r+0x89c>
 80187cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80187ce:	2a00      	cmp	r2, #0
 80187d0:	f000 80a0 	beq.w	8018914 <_dtoa_r+0x894>
 80187d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80187d8:	9e06      	ldr	r6, [sp, #24]
 80187da:	4645      	mov	r5, r8
 80187dc:	9a04      	ldr	r2, [sp, #16]
 80187de:	2101      	movs	r1, #1
 80187e0:	441a      	add	r2, r3
 80187e2:	4620      	mov	r0, r4
 80187e4:	4498      	add	r8, r3
 80187e6:	9204      	str	r2, [sp, #16]
 80187e8:	f000 ff0e 	bl	8019608 <__i2b>
 80187ec:	4607      	mov	r7, r0
 80187ee:	2d00      	cmp	r5, #0
 80187f0:	dd0b      	ble.n	801880a <_dtoa_r+0x78a>
 80187f2:	9b04      	ldr	r3, [sp, #16]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	dd08      	ble.n	801880a <_dtoa_r+0x78a>
 80187f8:	42ab      	cmp	r3, r5
 80187fa:	9a04      	ldr	r2, [sp, #16]
 80187fc:	bfa8      	it	ge
 80187fe:	462b      	movge	r3, r5
 8018800:	eba8 0803 	sub.w	r8, r8, r3
 8018804:	1aed      	subs	r5, r5, r3
 8018806:	1ad3      	subs	r3, r2, r3
 8018808:	9304      	str	r3, [sp, #16]
 801880a:	9b06      	ldr	r3, [sp, #24]
 801880c:	b1fb      	cbz	r3, 801884e <_dtoa_r+0x7ce>
 801880e:	9b08      	ldr	r3, [sp, #32]
 8018810:	2b00      	cmp	r3, #0
 8018812:	f000 809f 	beq.w	8018954 <_dtoa_r+0x8d4>
 8018816:	2e00      	cmp	r6, #0
 8018818:	dd11      	ble.n	801883e <_dtoa_r+0x7be>
 801881a:	4639      	mov	r1, r7
 801881c:	4632      	mov	r2, r6
 801881e:	4620      	mov	r0, r4
 8018820:	f000 ffae 	bl	8019780 <__pow5mult>
 8018824:	465a      	mov	r2, fp
 8018826:	4601      	mov	r1, r0
 8018828:	4607      	mov	r7, r0
 801882a:	4620      	mov	r0, r4
 801882c:	f000 ff02 	bl	8019634 <__multiply>
 8018830:	4659      	mov	r1, fp
 8018832:	9007      	str	r0, [sp, #28]
 8018834:	4620      	mov	r0, r4
 8018836:	f000 fde1 	bl	80193fc <_Bfree>
 801883a:	9b07      	ldr	r3, [sp, #28]
 801883c:	469b      	mov	fp, r3
 801883e:	9b06      	ldr	r3, [sp, #24]
 8018840:	1b9a      	subs	r2, r3, r6
 8018842:	d004      	beq.n	801884e <_dtoa_r+0x7ce>
 8018844:	4659      	mov	r1, fp
 8018846:	4620      	mov	r0, r4
 8018848:	f000 ff9a 	bl	8019780 <__pow5mult>
 801884c:	4683      	mov	fp, r0
 801884e:	2101      	movs	r1, #1
 8018850:	4620      	mov	r0, r4
 8018852:	f000 fed9 	bl	8019608 <__i2b>
 8018856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018858:	2b00      	cmp	r3, #0
 801885a:	4606      	mov	r6, r0
 801885c:	dd7c      	ble.n	8018958 <_dtoa_r+0x8d8>
 801885e:	461a      	mov	r2, r3
 8018860:	4601      	mov	r1, r0
 8018862:	4620      	mov	r0, r4
 8018864:	f000 ff8c 	bl	8019780 <__pow5mult>
 8018868:	9b05      	ldr	r3, [sp, #20]
 801886a:	2b01      	cmp	r3, #1
 801886c:	4606      	mov	r6, r0
 801886e:	dd76      	ble.n	801895e <_dtoa_r+0x8de>
 8018870:	2300      	movs	r3, #0
 8018872:	9306      	str	r3, [sp, #24]
 8018874:	6933      	ldr	r3, [r6, #16]
 8018876:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801887a:	6918      	ldr	r0, [r3, #16]
 801887c:	f000 fe74 	bl	8019568 <__hi0bits>
 8018880:	f1c0 0020 	rsb	r0, r0, #32
 8018884:	9b04      	ldr	r3, [sp, #16]
 8018886:	4418      	add	r0, r3
 8018888:	f010 001f 	ands.w	r0, r0, #31
 801888c:	f000 8086 	beq.w	801899c <_dtoa_r+0x91c>
 8018890:	f1c0 0320 	rsb	r3, r0, #32
 8018894:	2b04      	cmp	r3, #4
 8018896:	dd7f      	ble.n	8018998 <_dtoa_r+0x918>
 8018898:	f1c0 001c 	rsb	r0, r0, #28
 801889c:	9b04      	ldr	r3, [sp, #16]
 801889e:	4403      	add	r3, r0
 80188a0:	4480      	add	r8, r0
 80188a2:	4405      	add	r5, r0
 80188a4:	9304      	str	r3, [sp, #16]
 80188a6:	f1b8 0f00 	cmp.w	r8, #0
 80188aa:	dd05      	ble.n	80188b8 <_dtoa_r+0x838>
 80188ac:	4659      	mov	r1, fp
 80188ae:	4642      	mov	r2, r8
 80188b0:	4620      	mov	r0, r4
 80188b2:	f000 ffbf 	bl	8019834 <__lshift>
 80188b6:	4683      	mov	fp, r0
 80188b8:	9b04      	ldr	r3, [sp, #16]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	dd05      	ble.n	80188ca <_dtoa_r+0x84a>
 80188be:	4631      	mov	r1, r6
 80188c0:	461a      	mov	r2, r3
 80188c2:	4620      	mov	r0, r4
 80188c4:	f000 ffb6 	bl	8019834 <__lshift>
 80188c8:	4606      	mov	r6, r0
 80188ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d069      	beq.n	80189a4 <_dtoa_r+0x924>
 80188d0:	4631      	mov	r1, r6
 80188d2:	4658      	mov	r0, fp
 80188d4:	f001 f81a 	bl	801990c <__mcmp>
 80188d8:	2800      	cmp	r0, #0
 80188da:	da63      	bge.n	80189a4 <_dtoa_r+0x924>
 80188dc:	2300      	movs	r3, #0
 80188de:	4659      	mov	r1, fp
 80188e0:	220a      	movs	r2, #10
 80188e2:	4620      	mov	r0, r4
 80188e4:	f000 fdac 	bl	8019440 <__multadd>
 80188e8:	9b08      	ldr	r3, [sp, #32]
 80188ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80188ee:	4683      	mov	fp, r0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	f000 818f 	beq.w	8018c14 <_dtoa_r+0xb94>
 80188f6:	4639      	mov	r1, r7
 80188f8:	2300      	movs	r3, #0
 80188fa:	220a      	movs	r2, #10
 80188fc:	4620      	mov	r0, r4
 80188fe:	f000 fd9f 	bl	8019440 <__multadd>
 8018902:	f1b9 0f00 	cmp.w	r9, #0
 8018906:	4607      	mov	r7, r0
 8018908:	f300 808e 	bgt.w	8018a28 <_dtoa_r+0x9a8>
 801890c:	9b05      	ldr	r3, [sp, #20]
 801890e:	2b02      	cmp	r3, #2
 8018910:	dc50      	bgt.n	80189b4 <_dtoa_r+0x934>
 8018912:	e089      	b.n	8018a28 <_dtoa_r+0x9a8>
 8018914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801891a:	e75d      	b.n	80187d8 <_dtoa_r+0x758>
 801891c:	9b01      	ldr	r3, [sp, #4]
 801891e:	1e5e      	subs	r6, r3, #1
 8018920:	9b06      	ldr	r3, [sp, #24]
 8018922:	42b3      	cmp	r3, r6
 8018924:	bfbf      	itttt	lt
 8018926:	9b06      	ldrlt	r3, [sp, #24]
 8018928:	9606      	strlt	r6, [sp, #24]
 801892a:	1af2      	sublt	r2, r6, r3
 801892c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801892e:	bfb6      	itet	lt
 8018930:	189b      	addlt	r3, r3, r2
 8018932:	1b9e      	subge	r6, r3, r6
 8018934:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018936:	9b01      	ldr	r3, [sp, #4]
 8018938:	bfb8      	it	lt
 801893a:	2600      	movlt	r6, #0
 801893c:	2b00      	cmp	r3, #0
 801893e:	bfb5      	itete	lt
 8018940:	eba8 0503 	sublt.w	r5, r8, r3
 8018944:	9b01      	ldrge	r3, [sp, #4]
 8018946:	2300      	movlt	r3, #0
 8018948:	4645      	movge	r5, r8
 801894a:	e747      	b.n	80187dc <_dtoa_r+0x75c>
 801894c:	9e06      	ldr	r6, [sp, #24]
 801894e:	9f08      	ldr	r7, [sp, #32]
 8018950:	4645      	mov	r5, r8
 8018952:	e74c      	b.n	80187ee <_dtoa_r+0x76e>
 8018954:	9a06      	ldr	r2, [sp, #24]
 8018956:	e775      	b.n	8018844 <_dtoa_r+0x7c4>
 8018958:	9b05      	ldr	r3, [sp, #20]
 801895a:	2b01      	cmp	r3, #1
 801895c:	dc18      	bgt.n	8018990 <_dtoa_r+0x910>
 801895e:	9b02      	ldr	r3, [sp, #8]
 8018960:	b9b3      	cbnz	r3, 8018990 <_dtoa_r+0x910>
 8018962:	9b03      	ldr	r3, [sp, #12]
 8018964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018968:	b9a3      	cbnz	r3, 8018994 <_dtoa_r+0x914>
 801896a:	9b03      	ldr	r3, [sp, #12]
 801896c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018970:	0d1b      	lsrs	r3, r3, #20
 8018972:	051b      	lsls	r3, r3, #20
 8018974:	b12b      	cbz	r3, 8018982 <_dtoa_r+0x902>
 8018976:	9b04      	ldr	r3, [sp, #16]
 8018978:	3301      	adds	r3, #1
 801897a:	9304      	str	r3, [sp, #16]
 801897c:	f108 0801 	add.w	r8, r8, #1
 8018980:	2301      	movs	r3, #1
 8018982:	9306      	str	r3, [sp, #24]
 8018984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018986:	2b00      	cmp	r3, #0
 8018988:	f47f af74 	bne.w	8018874 <_dtoa_r+0x7f4>
 801898c:	2001      	movs	r0, #1
 801898e:	e779      	b.n	8018884 <_dtoa_r+0x804>
 8018990:	2300      	movs	r3, #0
 8018992:	e7f6      	b.n	8018982 <_dtoa_r+0x902>
 8018994:	9b02      	ldr	r3, [sp, #8]
 8018996:	e7f4      	b.n	8018982 <_dtoa_r+0x902>
 8018998:	d085      	beq.n	80188a6 <_dtoa_r+0x826>
 801899a:	4618      	mov	r0, r3
 801899c:	301c      	adds	r0, #28
 801899e:	e77d      	b.n	801889c <_dtoa_r+0x81c>
 80189a0:	40240000 	.word	0x40240000
 80189a4:	9b01      	ldr	r3, [sp, #4]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	dc38      	bgt.n	8018a1c <_dtoa_r+0x99c>
 80189aa:	9b05      	ldr	r3, [sp, #20]
 80189ac:	2b02      	cmp	r3, #2
 80189ae:	dd35      	ble.n	8018a1c <_dtoa_r+0x99c>
 80189b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80189b4:	f1b9 0f00 	cmp.w	r9, #0
 80189b8:	d10d      	bne.n	80189d6 <_dtoa_r+0x956>
 80189ba:	4631      	mov	r1, r6
 80189bc:	464b      	mov	r3, r9
 80189be:	2205      	movs	r2, #5
 80189c0:	4620      	mov	r0, r4
 80189c2:	f000 fd3d 	bl	8019440 <__multadd>
 80189c6:	4601      	mov	r1, r0
 80189c8:	4606      	mov	r6, r0
 80189ca:	4658      	mov	r0, fp
 80189cc:	f000 ff9e 	bl	801990c <__mcmp>
 80189d0:	2800      	cmp	r0, #0
 80189d2:	f73f adbd 	bgt.w	8018550 <_dtoa_r+0x4d0>
 80189d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189d8:	9d00      	ldr	r5, [sp, #0]
 80189da:	ea6f 0a03 	mvn.w	sl, r3
 80189de:	f04f 0800 	mov.w	r8, #0
 80189e2:	4631      	mov	r1, r6
 80189e4:	4620      	mov	r0, r4
 80189e6:	f000 fd09 	bl	80193fc <_Bfree>
 80189ea:	2f00      	cmp	r7, #0
 80189ec:	f43f aeb4 	beq.w	8018758 <_dtoa_r+0x6d8>
 80189f0:	f1b8 0f00 	cmp.w	r8, #0
 80189f4:	d005      	beq.n	8018a02 <_dtoa_r+0x982>
 80189f6:	45b8      	cmp	r8, r7
 80189f8:	d003      	beq.n	8018a02 <_dtoa_r+0x982>
 80189fa:	4641      	mov	r1, r8
 80189fc:	4620      	mov	r0, r4
 80189fe:	f000 fcfd 	bl	80193fc <_Bfree>
 8018a02:	4639      	mov	r1, r7
 8018a04:	4620      	mov	r0, r4
 8018a06:	f000 fcf9 	bl	80193fc <_Bfree>
 8018a0a:	e6a5      	b.n	8018758 <_dtoa_r+0x6d8>
 8018a0c:	2600      	movs	r6, #0
 8018a0e:	4637      	mov	r7, r6
 8018a10:	e7e1      	b.n	80189d6 <_dtoa_r+0x956>
 8018a12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018a14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018a18:	4637      	mov	r7, r6
 8018a1a:	e599      	b.n	8018550 <_dtoa_r+0x4d0>
 8018a1c:	9b08      	ldr	r3, [sp, #32]
 8018a1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	f000 80fd 	beq.w	8018c22 <_dtoa_r+0xba2>
 8018a28:	2d00      	cmp	r5, #0
 8018a2a:	dd05      	ble.n	8018a38 <_dtoa_r+0x9b8>
 8018a2c:	4639      	mov	r1, r7
 8018a2e:	462a      	mov	r2, r5
 8018a30:	4620      	mov	r0, r4
 8018a32:	f000 feff 	bl	8019834 <__lshift>
 8018a36:	4607      	mov	r7, r0
 8018a38:	9b06      	ldr	r3, [sp, #24]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d05c      	beq.n	8018af8 <_dtoa_r+0xa78>
 8018a3e:	6879      	ldr	r1, [r7, #4]
 8018a40:	4620      	mov	r0, r4
 8018a42:	f000 fc9b 	bl	801937c <_Balloc>
 8018a46:	4605      	mov	r5, r0
 8018a48:	b928      	cbnz	r0, 8018a56 <_dtoa_r+0x9d6>
 8018a4a:	4b80      	ldr	r3, [pc, #512]	; (8018c4c <_dtoa_r+0xbcc>)
 8018a4c:	4602      	mov	r2, r0
 8018a4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018a52:	f7ff bb2e 	b.w	80180b2 <_dtoa_r+0x32>
 8018a56:	693a      	ldr	r2, [r7, #16]
 8018a58:	3202      	adds	r2, #2
 8018a5a:	0092      	lsls	r2, r2, #2
 8018a5c:	f107 010c 	add.w	r1, r7, #12
 8018a60:	300c      	adds	r0, #12
 8018a62:	f7fd fc0d 	bl	8016280 <memcpy>
 8018a66:	2201      	movs	r2, #1
 8018a68:	4629      	mov	r1, r5
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f000 fee2 	bl	8019834 <__lshift>
 8018a70:	9b00      	ldr	r3, [sp, #0]
 8018a72:	3301      	adds	r3, #1
 8018a74:	9301      	str	r3, [sp, #4]
 8018a76:	9b00      	ldr	r3, [sp, #0]
 8018a78:	444b      	add	r3, r9
 8018a7a:	9307      	str	r3, [sp, #28]
 8018a7c:	9b02      	ldr	r3, [sp, #8]
 8018a7e:	f003 0301 	and.w	r3, r3, #1
 8018a82:	46b8      	mov	r8, r7
 8018a84:	9306      	str	r3, [sp, #24]
 8018a86:	4607      	mov	r7, r0
 8018a88:	9b01      	ldr	r3, [sp, #4]
 8018a8a:	4631      	mov	r1, r6
 8018a8c:	3b01      	subs	r3, #1
 8018a8e:	4658      	mov	r0, fp
 8018a90:	9302      	str	r3, [sp, #8]
 8018a92:	f7ff fa67 	bl	8017f64 <quorem>
 8018a96:	4603      	mov	r3, r0
 8018a98:	3330      	adds	r3, #48	; 0x30
 8018a9a:	9004      	str	r0, [sp, #16]
 8018a9c:	4641      	mov	r1, r8
 8018a9e:	4658      	mov	r0, fp
 8018aa0:	9308      	str	r3, [sp, #32]
 8018aa2:	f000 ff33 	bl	801990c <__mcmp>
 8018aa6:	463a      	mov	r2, r7
 8018aa8:	4681      	mov	r9, r0
 8018aaa:	4631      	mov	r1, r6
 8018aac:	4620      	mov	r0, r4
 8018aae:	f000 ff49 	bl	8019944 <__mdiff>
 8018ab2:	68c2      	ldr	r2, [r0, #12]
 8018ab4:	9b08      	ldr	r3, [sp, #32]
 8018ab6:	4605      	mov	r5, r0
 8018ab8:	bb02      	cbnz	r2, 8018afc <_dtoa_r+0xa7c>
 8018aba:	4601      	mov	r1, r0
 8018abc:	4658      	mov	r0, fp
 8018abe:	f000 ff25 	bl	801990c <__mcmp>
 8018ac2:	9b08      	ldr	r3, [sp, #32]
 8018ac4:	4602      	mov	r2, r0
 8018ac6:	4629      	mov	r1, r5
 8018ac8:	4620      	mov	r0, r4
 8018aca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018ace:	f000 fc95 	bl	80193fc <_Bfree>
 8018ad2:	9b05      	ldr	r3, [sp, #20]
 8018ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ad6:	9d01      	ldr	r5, [sp, #4]
 8018ad8:	ea43 0102 	orr.w	r1, r3, r2
 8018adc:	9b06      	ldr	r3, [sp, #24]
 8018ade:	430b      	orrs	r3, r1
 8018ae0:	9b08      	ldr	r3, [sp, #32]
 8018ae2:	d10d      	bne.n	8018b00 <_dtoa_r+0xa80>
 8018ae4:	2b39      	cmp	r3, #57	; 0x39
 8018ae6:	d029      	beq.n	8018b3c <_dtoa_r+0xabc>
 8018ae8:	f1b9 0f00 	cmp.w	r9, #0
 8018aec:	dd01      	ble.n	8018af2 <_dtoa_r+0xa72>
 8018aee:	9b04      	ldr	r3, [sp, #16]
 8018af0:	3331      	adds	r3, #49	; 0x31
 8018af2:	9a02      	ldr	r2, [sp, #8]
 8018af4:	7013      	strb	r3, [r2, #0]
 8018af6:	e774      	b.n	80189e2 <_dtoa_r+0x962>
 8018af8:	4638      	mov	r0, r7
 8018afa:	e7b9      	b.n	8018a70 <_dtoa_r+0x9f0>
 8018afc:	2201      	movs	r2, #1
 8018afe:	e7e2      	b.n	8018ac6 <_dtoa_r+0xa46>
 8018b00:	f1b9 0f00 	cmp.w	r9, #0
 8018b04:	db06      	blt.n	8018b14 <_dtoa_r+0xa94>
 8018b06:	9905      	ldr	r1, [sp, #20]
 8018b08:	ea41 0909 	orr.w	r9, r1, r9
 8018b0c:	9906      	ldr	r1, [sp, #24]
 8018b0e:	ea59 0101 	orrs.w	r1, r9, r1
 8018b12:	d120      	bne.n	8018b56 <_dtoa_r+0xad6>
 8018b14:	2a00      	cmp	r2, #0
 8018b16:	ddec      	ble.n	8018af2 <_dtoa_r+0xa72>
 8018b18:	4659      	mov	r1, fp
 8018b1a:	2201      	movs	r2, #1
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	9301      	str	r3, [sp, #4]
 8018b20:	f000 fe88 	bl	8019834 <__lshift>
 8018b24:	4631      	mov	r1, r6
 8018b26:	4683      	mov	fp, r0
 8018b28:	f000 fef0 	bl	801990c <__mcmp>
 8018b2c:	2800      	cmp	r0, #0
 8018b2e:	9b01      	ldr	r3, [sp, #4]
 8018b30:	dc02      	bgt.n	8018b38 <_dtoa_r+0xab8>
 8018b32:	d1de      	bne.n	8018af2 <_dtoa_r+0xa72>
 8018b34:	07da      	lsls	r2, r3, #31
 8018b36:	d5dc      	bpl.n	8018af2 <_dtoa_r+0xa72>
 8018b38:	2b39      	cmp	r3, #57	; 0x39
 8018b3a:	d1d8      	bne.n	8018aee <_dtoa_r+0xa6e>
 8018b3c:	9a02      	ldr	r2, [sp, #8]
 8018b3e:	2339      	movs	r3, #57	; 0x39
 8018b40:	7013      	strb	r3, [r2, #0]
 8018b42:	462b      	mov	r3, r5
 8018b44:	461d      	mov	r5, r3
 8018b46:	3b01      	subs	r3, #1
 8018b48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018b4c:	2a39      	cmp	r2, #57	; 0x39
 8018b4e:	d050      	beq.n	8018bf2 <_dtoa_r+0xb72>
 8018b50:	3201      	adds	r2, #1
 8018b52:	701a      	strb	r2, [r3, #0]
 8018b54:	e745      	b.n	80189e2 <_dtoa_r+0x962>
 8018b56:	2a00      	cmp	r2, #0
 8018b58:	dd03      	ble.n	8018b62 <_dtoa_r+0xae2>
 8018b5a:	2b39      	cmp	r3, #57	; 0x39
 8018b5c:	d0ee      	beq.n	8018b3c <_dtoa_r+0xabc>
 8018b5e:	3301      	adds	r3, #1
 8018b60:	e7c7      	b.n	8018af2 <_dtoa_r+0xa72>
 8018b62:	9a01      	ldr	r2, [sp, #4]
 8018b64:	9907      	ldr	r1, [sp, #28]
 8018b66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018b6a:	428a      	cmp	r2, r1
 8018b6c:	d02a      	beq.n	8018bc4 <_dtoa_r+0xb44>
 8018b6e:	4659      	mov	r1, fp
 8018b70:	2300      	movs	r3, #0
 8018b72:	220a      	movs	r2, #10
 8018b74:	4620      	mov	r0, r4
 8018b76:	f000 fc63 	bl	8019440 <__multadd>
 8018b7a:	45b8      	cmp	r8, r7
 8018b7c:	4683      	mov	fp, r0
 8018b7e:	f04f 0300 	mov.w	r3, #0
 8018b82:	f04f 020a 	mov.w	r2, #10
 8018b86:	4641      	mov	r1, r8
 8018b88:	4620      	mov	r0, r4
 8018b8a:	d107      	bne.n	8018b9c <_dtoa_r+0xb1c>
 8018b8c:	f000 fc58 	bl	8019440 <__multadd>
 8018b90:	4680      	mov	r8, r0
 8018b92:	4607      	mov	r7, r0
 8018b94:	9b01      	ldr	r3, [sp, #4]
 8018b96:	3301      	adds	r3, #1
 8018b98:	9301      	str	r3, [sp, #4]
 8018b9a:	e775      	b.n	8018a88 <_dtoa_r+0xa08>
 8018b9c:	f000 fc50 	bl	8019440 <__multadd>
 8018ba0:	4639      	mov	r1, r7
 8018ba2:	4680      	mov	r8, r0
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	220a      	movs	r2, #10
 8018ba8:	4620      	mov	r0, r4
 8018baa:	f000 fc49 	bl	8019440 <__multadd>
 8018bae:	4607      	mov	r7, r0
 8018bb0:	e7f0      	b.n	8018b94 <_dtoa_r+0xb14>
 8018bb2:	f1b9 0f00 	cmp.w	r9, #0
 8018bb6:	9a00      	ldr	r2, [sp, #0]
 8018bb8:	bfcc      	ite	gt
 8018bba:	464d      	movgt	r5, r9
 8018bbc:	2501      	movle	r5, #1
 8018bbe:	4415      	add	r5, r2
 8018bc0:	f04f 0800 	mov.w	r8, #0
 8018bc4:	4659      	mov	r1, fp
 8018bc6:	2201      	movs	r2, #1
 8018bc8:	4620      	mov	r0, r4
 8018bca:	9301      	str	r3, [sp, #4]
 8018bcc:	f000 fe32 	bl	8019834 <__lshift>
 8018bd0:	4631      	mov	r1, r6
 8018bd2:	4683      	mov	fp, r0
 8018bd4:	f000 fe9a 	bl	801990c <__mcmp>
 8018bd8:	2800      	cmp	r0, #0
 8018bda:	dcb2      	bgt.n	8018b42 <_dtoa_r+0xac2>
 8018bdc:	d102      	bne.n	8018be4 <_dtoa_r+0xb64>
 8018bde:	9b01      	ldr	r3, [sp, #4]
 8018be0:	07db      	lsls	r3, r3, #31
 8018be2:	d4ae      	bmi.n	8018b42 <_dtoa_r+0xac2>
 8018be4:	462b      	mov	r3, r5
 8018be6:	461d      	mov	r5, r3
 8018be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018bec:	2a30      	cmp	r2, #48	; 0x30
 8018bee:	d0fa      	beq.n	8018be6 <_dtoa_r+0xb66>
 8018bf0:	e6f7      	b.n	80189e2 <_dtoa_r+0x962>
 8018bf2:	9a00      	ldr	r2, [sp, #0]
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d1a5      	bne.n	8018b44 <_dtoa_r+0xac4>
 8018bf8:	f10a 0a01 	add.w	sl, sl, #1
 8018bfc:	2331      	movs	r3, #49	; 0x31
 8018bfe:	e779      	b.n	8018af4 <_dtoa_r+0xa74>
 8018c00:	4b13      	ldr	r3, [pc, #76]	; (8018c50 <_dtoa_r+0xbd0>)
 8018c02:	f7ff baaf 	b.w	8018164 <_dtoa_r+0xe4>
 8018c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	f47f aa86 	bne.w	801811a <_dtoa_r+0x9a>
 8018c0e:	4b11      	ldr	r3, [pc, #68]	; (8018c54 <_dtoa_r+0xbd4>)
 8018c10:	f7ff baa8 	b.w	8018164 <_dtoa_r+0xe4>
 8018c14:	f1b9 0f00 	cmp.w	r9, #0
 8018c18:	dc03      	bgt.n	8018c22 <_dtoa_r+0xba2>
 8018c1a:	9b05      	ldr	r3, [sp, #20]
 8018c1c:	2b02      	cmp	r3, #2
 8018c1e:	f73f aec9 	bgt.w	80189b4 <_dtoa_r+0x934>
 8018c22:	9d00      	ldr	r5, [sp, #0]
 8018c24:	4631      	mov	r1, r6
 8018c26:	4658      	mov	r0, fp
 8018c28:	f7ff f99c 	bl	8017f64 <quorem>
 8018c2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018c30:	f805 3b01 	strb.w	r3, [r5], #1
 8018c34:	9a00      	ldr	r2, [sp, #0]
 8018c36:	1aaa      	subs	r2, r5, r2
 8018c38:	4591      	cmp	r9, r2
 8018c3a:	ddba      	ble.n	8018bb2 <_dtoa_r+0xb32>
 8018c3c:	4659      	mov	r1, fp
 8018c3e:	2300      	movs	r3, #0
 8018c40:	220a      	movs	r2, #10
 8018c42:	4620      	mov	r0, r4
 8018c44:	f000 fbfc 	bl	8019440 <__multadd>
 8018c48:	4683      	mov	fp, r0
 8018c4a:	e7eb      	b.n	8018c24 <_dtoa_r+0xba4>
 8018c4c:	0801ca34 	.word	0x0801ca34
 8018c50:	0801c834 	.word	0x0801c834
 8018c54:	0801c9b1 	.word	0x0801c9b1

08018c58 <rshift>:
 8018c58:	6903      	ldr	r3, [r0, #16]
 8018c5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018c5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018c66:	f100 0414 	add.w	r4, r0, #20
 8018c6a:	dd45      	ble.n	8018cf8 <rshift+0xa0>
 8018c6c:	f011 011f 	ands.w	r1, r1, #31
 8018c70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018c74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018c78:	d10c      	bne.n	8018c94 <rshift+0x3c>
 8018c7a:	f100 0710 	add.w	r7, r0, #16
 8018c7e:	4629      	mov	r1, r5
 8018c80:	42b1      	cmp	r1, r6
 8018c82:	d334      	bcc.n	8018cee <rshift+0x96>
 8018c84:	1a9b      	subs	r3, r3, r2
 8018c86:	009b      	lsls	r3, r3, #2
 8018c88:	1eea      	subs	r2, r5, #3
 8018c8a:	4296      	cmp	r6, r2
 8018c8c:	bf38      	it	cc
 8018c8e:	2300      	movcc	r3, #0
 8018c90:	4423      	add	r3, r4
 8018c92:	e015      	b.n	8018cc0 <rshift+0x68>
 8018c94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018c98:	f1c1 0820 	rsb	r8, r1, #32
 8018c9c:	40cf      	lsrs	r7, r1
 8018c9e:	f105 0e04 	add.w	lr, r5, #4
 8018ca2:	46a1      	mov	r9, r4
 8018ca4:	4576      	cmp	r6, lr
 8018ca6:	46f4      	mov	ip, lr
 8018ca8:	d815      	bhi.n	8018cd6 <rshift+0x7e>
 8018caa:	1a9b      	subs	r3, r3, r2
 8018cac:	009a      	lsls	r2, r3, #2
 8018cae:	3a04      	subs	r2, #4
 8018cb0:	3501      	adds	r5, #1
 8018cb2:	42ae      	cmp	r6, r5
 8018cb4:	bf38      	it	cc
 8018cb6:	2200      	movcc	r2, #0
 8018cb8:	18a3      	adds	r3, r4, r2
 8018cba:	50a7      	str	r7, [r4, r2]
 8018cbc:	b107      	cbz	r7, 8018cc0 <rshift+0x68>
 8018cbe:	3304      	adds	r3, #4
 8018cc0:	1b1a      	subs	r2, r3, r4
 8018cc2:	42a3      	cmp	r3, r4
 8018cc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018cc8:	bf08      	it	eq
 8018cca:	2300      	moveq	r3, #0
 8018ccc:	6102      	str	r2, [r0, #16]
 8018cce:	bf08      	it	eq
 8018cd0:	6143      	streq	r3, [r0, #20]
 8018cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cd6:	f8dc c000 	ldr.w	ip, [ip]
 8018cda:	fa0c fc08 	lsl.w	ip, ip, r8
 8018cde:	ea4c 0707 	orr.w	r7, ip, r7
 8018ce2:	f849 7b04 	str.w	r7, [r9], #4
 8018ce6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018cea:	40cf      	lsrs	r7, r1
 8018cec:	e7da      	b.n	8018ca4 <rshift+0x4c>
 8018cee:	f851 cb04 	ldr.w	ip, [r1], #4
 8018cf2:	f847 cf04 	str.w	ip, [r7, #4]!
 8018cf6:	e7c3      	b.n	8018c80 <rshift+0x28>
 8018cf8:	4623      	mov	r3, r4
 8018cfa:	e7e1      	b.n	8018cc0 <rshift+0x68>

08018cfc <__hexdig_fun>:
 8018cfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018d00:	2b09      	cmp	r3, #9
 8018d02:	d802      	bhi.n	8018d0a <__hexdig_fun+0xe>
 8018d04:	3820      	subs	r0, #32
 8018d06:	b2c0      	uxtb	r0, r0
 8018d08:	4770      	bx	lr
 8018d0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018d0e:	2b05      	cmp	r3, #5
 8018d10:	d801      	bhi.n	8018d16 <__hexdig_fun+0x1a>
 8018d12:	3847      	subs	r0, #71	; 0x47
 8018d14:	e7f7      	b.n	8018d06 <__hexdig_fun+0xa>
 8018d16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018d1a:	2b05      	cmp	r3, #5
 8018d1c:	d801      	bhi.n	8018d22 <__hexdig_fun+0x26>
 8018d1e:	3827      	subs	r0, #39	; 0x27
 8018d20:	e7f1      	b.n	8018d06 <__hexdig_fun+0xa>
 8018d22:	2000      	movs	r0, #0
 8018d24:	4770      	bx	lr
	...

08018d28 <__gethex>:
 8018d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d2c:	ed2d 8b02 	vpush	{d8}
 8018d30:	b089      	sub	sp, #36	; 0x24
 8018d32:	ee08 0a10 	vmov	s16, r0
 8018d36:	9304      	str	r3, [sp, #16]
 8018d38:	4bbc      	ldr	r3, [pc, #752]	; (801902c <__gethex+0x304>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	9301      	str	r3, [sp, #4]
 8018d3e:	4618      	mov	r0, r3
 8018d40:	468b      	mov	fp, r1
 8018d42:	4690      	mov	r8, r2
 8018d44:	f7e7 fa44 	bl	80001d0 <strlen>
 8018d48:	9b01      	ldr	r3, [sp, #4]
 8018d4a:	f8db 2000 	ldr.w	r2, [fp]
 8018d4e:	4403      	add	r3, r0
 8018d50:	4682      	mov	sl, r0
 8018d52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018d56:	9305      	str	r3, [sp, #20]
 8018d58:	1c93      	adds	r3, r2, #2
 8018d5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018d5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018d62:	32fe      	adds	r2, #254	; 0xfe
 8018d64:	18d1      	adds	r1, r2, r3
 8018d66:	461f      	mov	r7, r3
 8018d68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018d6c:	9100      	str	r1, [sp, #0]
 8018d6e:	2830      	cmp	r0, #48	; 0x30
 8018d70:	d0f8      	beq.n	8018d64 <__gethex+0x3c>
 8018d72:	f7ff ffc3 	bl	8018cfc <__hexdig_fun>
 8018d76:	4604      	mov	r4, r0
 8018d78:	2800      	cmp	r0, #0
 8018d7a:	d13a      	bne.n	8018df2 <__gethex+0xca>
 8018d7c:	9901      	ldr	r1, [sp, #4]
 8018d7e:	4652      	mov	r2, sl
 8018d80:	4638      	mov	r0, r7
 8018d82:	f001 f929 	bl	8019fd8 <strncmp>
 8018d86:	4605      	mov	r5, r0
 8018d88:	2800      	cmp	r0, #0
 8018d8a:	d168      	bne.n	8018e5e <__gethex+0x136>
 8018d8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018d90:	eb07 060a 	add.w	r6, r7, sl
 8018d94:	f7ff ffb2 	bl	8018cfc <__hexdig_fun>
 8018d98:	2800      	cmp	r0, #0
 8018d9a:	d062      	beq.n	8018e62 <__gethex+0x13a>
 8018d9c:	4633      	mov	r3, r6
 8018d9e:	7818      	ldrb	r0, [r3, #0]
 8018da0:	2830      	cmp	r0, #48	; 0x30
 8018da2:	461f      	mov	r7, r3
 8018da4:	f103 0301 	add.w	r3, r3, #1
 8018da8:	d0f9      	beq.n	8018d9e <__gethex+0x76>
 8018daa:	f7ff ffa7 	bl	8018cfc <__hexdig_fun>
 8018dae:	2301      	movs	r3, #1
 8018db0:	fab0 f480 	clz	r4, r0
 8018db4:	0964      	lsrs	r4, r4, #5
 8018db6:	4635      	mov	r5, r6
 8018db8:	9300      	str	r3, [sp, #0]
 8018dba:	463a      	mov	r2, r7
 8018dbc:	4616      	mov	r6, r2
 8018dbe:	3201      	adds	r2, #1
 8018dc0:	7830      	ldrb	r0, [r6, #0]
 8018dc2:	f7ff ff9b 	bl	8018cfc <__hexdig_fun>
 8018dc6:	2800      	cmp	r0, #0
 8018dc8:	d1f8      	bne.n	8018dbc <__gethex+0x94>
 8018dca:	9901      	ldr	r1, [sp, #4]
 8018dcc:	4652      	mov	r2, sl
 8018dce:	4630      	mov	r0, r6
 8018dd0:	f001 f902 	bl	8019fd8 <strncmp>
 8018dd4:	b980      	cbnz	r0, 8018df8 <__gethex+0xd0>
 8018dd6:	b94d      	cbnz	r5, 8018dec <__gethex+0xc4>
 8018dd8:	eb06 050a 	add.w	r5, r6, sl
 8018ddc:	462a      	mov	r2, r5
 8018dde:	4616      	mov	r6, r2
 8018de0:	3201      	adds	r2, #1
 8018de2:	7830      	ldrb	r0, [r6, #0]
 8018de4:	f7ff ff8a 	bl	8018cfc <__hexdig_fun>
 8018de8:	2800      	cmp	r0, #0
 8018dea:	d1f8      	bne.n	8018dde <__gethex+0xb6>
 8018dec:	1bad      	subs	r5, r5, r6
 8018dee:	00ad      	lsls	r5, r5, #2
 8018df0:	e004      	b.n	8018dfc <__gethex+0xd4>
 8018df2:	2400      	movs	r4, #0
 8018df4:	4625      	mov	r5, r4
 8018df6:	e7e0      	b.n	8018dba <__gethex+0x92>
 8018df8:	2d00      	cmp	r5, #0
 8018dfa:	d1f7      	bne.n	8018dec <__gethex+0xc4>
 8018dfc:	7833      	ldrb	r3, [r6, #0]
 8018dfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018e02:	2b50      	cmp	r3, #80	; 0x50
 8018e04:	d13b      	bne.n	8018e7e <__gethex+0x156>
 8018e06:	7873      	ldrb	r3, [r6, #1]
 8018e08:	2b2b      	cmp	r3, #43	; 0x2b
 8018e0a:	d02c      	beq.n	8018e66 <__gethex+0x13e>
 8018e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8018e0e:	d02e      	beq.n	8018e6e <__gethex+0x146>
 8018e10:	1c71      	adds	r1, r6, #1
 8018e12:	f04f 0900 	mov.w	r9, #0
 8018e16:	7808      	ldrb	r0, [r1, #0]
 8018e18:	f7ff ff70 	bl	8018cfc <__hexdig_fun>
 8018e1c:	1e43      	subs	r3, r0, #1
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	2b18      	cmp	r3, #24
 8018e22:	d82c      	bhi.n	8018e7e <__gethex+0x156>
 8018e24:	f1a0 0210 	sub.w	r2, r0, #16
 8018e28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018e2c:	f7ff ff66 	bl	8018cfc <__hexdig_fun>
 8018e30:	1e43      	subs	r3, r0, #1
 8018e32:	b2db      	uxtb	r3, r3
 8018e34:	2b18      	cmp	r3, #24
 8018e36:	d91d      	bls.n	8018e74 <__gethex+0x14c>
 8018e38:	f1b9 0f00 	cmp.w	r9, #0
 8018e3c:	d000      	beq.n	8018e40 <__gethex+0x118>
 8018e3e:	4252      	negs	r2, r2
 8018e40:	4415      	add	r5, r2
 8018e42:	f8cb 1000 	str.w	r1, [fp]
 8018e46:	b1e4      	cbz	r4, 8018e82 <__gethex+0x15a>
 8018e48:	9b00      	ldr	r3, [sp, #0]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	bf14      	ite	ne
 8018e4e:	2700      	movne	r7, #0
 8018e50:	2706      	moveq	r7, #6
 8018e52:	4638      	mov	r0, r7
 8018e54:	b009      	add	sp, #36	; 0x24
 8018e56:	ecbd 8b02 	vpop	{d8}
 8018e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e5e:	463e      	mov	r6, r7
 8018e60:	4625      	mov	r5, r4
 8018e62:	2401      	movs	r4, #1
 8018e64:	e7ca      	b.n	8018dfc <__gethex+0xd4>
 8018e66:	f04f 0900 	mov.w	r9, #0
 8018e6a:	1cb1      	adds	r1, r6, #2
 8018e6c:	e7d3      	b.n	8018e16 <__gethex+0xee>
 8018e6e:	f04f 0901 	mov.w	r9, #1
 8018e72:	e7fa      	b.n	8018e6a <__gethex+0x142>
 8018e74:	230a      	movs	r3, #10
 8018e76:	fb03 0202 	mla	r2, r3, r2, r0
 8018e7a:	3a10      	subs	r2, #16
 8018e7c:	e7d4      	b.n	8018e28 <__gethex+0x100>
 8018e7e:	4631      	mov	r1, r6
 8018e80:	e7df      	b.n	8018e42 <__gethex+0x11a>
 8018e82:	1bf3      	subs	r3, r6, r7
 8018e84:	3b01      	subs	r3, #1
 8018e86:	4621      	mov	r1, r4
 8018e88:	2b07      	cmp	r3, #7
 8018e8a:	dc0b      	bgt.n	8018ea4 <__gethex+0x17c>
 8018e8c:	ee18 0a10 	vmov	r0, s16
 8018e90:	f000 fa74 	bl	801937c <_Balloc>
 8018e94:	4604      	mov	r4, r0
 8018e96:	b940      	cbnz	r0, 8018eaa <__gethex+0x182>
 8018e98:	4b65      	ldr	r3, [pc, #404]	; (8019030 <__gethex+0x308>)
 8018e9a:	4602      	mov	r2, r0
 8018e9c:	21de      	movs	r1, #222	; 0xde
 8018e9e:	4865      	ldr	r0, [pc, #404]	; (8019034 <__gethex+0x30c>)
 8018ea0:	f001 f8ba 	bl	801a018 <__assert_func>
 8018ea4:	3101      	adds	r1, #1
 8018ea6:	105b      	asrs	r3, r3, #1
 8018ea8:	e7ee      	b.n	8018e88 <__gethex+0x160>
 8018eaa:	f100 0914 	add.w	r9, r0, #20
 8018eae:	f04f 0b00 	mov.w	fp, #0
 8018eb2:	f1ca 0301 	rsb	r3, sl, #1
 8018eb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8018eba:	f8cd b000 	str.w	fp, [sp]
 8018ebe:	9306      	str	r3, [sp, #24]
 8018ec0:	42b7      	cmp	r7, r6
 8018ec2:	d340      	bcc.n	8018f46 <__gethex+0x21e>
 8018ec4:	9802      	ldr	r0, [sp, #8]
 8018ec6:	9b00      	ldr	r3, [sp, #0]
 8018ec8:	f840 3b04 	str.w	r3, [r0], #4
 8018ecc:	eba0 0009 	sub.w	r0, r0, r9
 8018ed0:	1080      	asrs	r0, r0, #2
 8018ed2:	0146      	lsls	r6, r0, #5
 8018ed4:	6120      	str	r0, [r4, #16]
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f000 fb46 	bl	8019568 <__hi0bits>
 8018edc:	1a30      	subs	r0, r6, r0
 8018ede:	f8d8 6000 	ldr.w	r6, [r8]
 8018ee2:	42b0      	cmp	r0, r6
 8018ee4:	dd63      	ble.n	8018fae <__gethex+0x286>
 8018ee6:	1b87      	subs	r7, r0, r6
 8018ee8:	4639      	mov	r1, r7
 8018eea:	4620      	mov	r0, r4
 8018eec:	f000 fee0 	bl	8019cb0 <__any_on>
 8018ef0:	4682      	mov	sl, r0
 8018ef2:	b1a8      	cbz	r0, 8018f20 <__gethex+0x1f8>
 8018ef4:	1e7b      	subs	r3, r7, #1
 8018ef6:	1159      	asrs	r1, r3, #5
 8018ef8:	f003 021f 	and.w	r2, r3, #31
 8018efc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018f00:	f04f 0a01 	mov.w	sl, #1
 8018f04:	fa0a f202 	lsl.w	r2, sl, r2
 8018f08:	420a      	tst	r2, r1
 8018f0a:	d009      	beq.n	8018f20 <__gethex+0x1f8>
 8018f0c:	4553      	cmp	r3, sl
 8018f0e:	dd05      	ble.n	8018f1c <__gethex+0x1f4>
 8018f10:	1eb9      	subs	r1, r7, #2
 8018f12:	4620      	mov	r0, r4
 8018f14:	f000 fecc 	bl	8019cb0 <__any_on>
 8018f18:	2800      	cmp	r0, #0
 8018f1a:	d145      	bne.n	8018fa8 <__gethex+0x280>
 8018f1c:	f04f 0a02 	mov.w	sl, #2
 8018f20:	4639      	mov	r1, r7
 8018f22:	4620      	mov	r0, r4
 8018f24:	f7ff fe98 	bl	8018c58 <rshift>
 8018f28:	443d      	add	r5, r7
 8018f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018f2e:	42ab      	cmp	r3, r5
 8018f30:	da4c      	bge.n	8018fcc <__gethex+0x2a4>
 8018f32:	ee18 0a10 	vmov	r0, s16
 8018f36:	4621      	mov	r1, r4
 8018f38:	f000 fa60 	bl	80193fc <_Bfree>
 8018f3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f3e:	2300      	movs	r3, #0
 8018f40:	6013      	str	r3, [r2, #0]
 8018f42:	27a3      	movs	r7, #163	; 0xa3
 8018f44:	e785      	b.n	8018e52 <__gethex+0x12a>
 8018f46:	1e73      	subs	r3, r6, #1
 8018f48:	9a05      	ldr	r2, [sp, #20]
 8018f4a:	9303      	str	r3, [sp, #12]
 8018f4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018f50:	4293      	cmp	r3, r2
 8018f52:	d019      	beq.n	8018f88 <__gethex+0x260>
 8018f54:	f1bb 0f20 	cmp.w	fp, #32
 8018f58:	d107      	bne.n	8018f6a <__gethex+0x242>
 8018f5a:	9b02      	ldr	r3, [sp, #8]
 8018f5c:	9a00      	ldr	r2, [sp, #0]
 8018f5e:	f843 2b04 	str.w	r2, [r3], #4
 8018f62:	9302      	str	r3, [sp, #8]
 8018f64:	2300      	movs	r3, #0
 8018f66:	9300      	str	r3, [sp, #0]
 8018f68:	469b      	mov	fp, r3
 8018f6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018f6e:	f7ff fec5 	bl	8018cfc <__hexdig_fun>
 8018f72:	9b00      	ldr	r3, [sp, #0]
 8018f74:	f000 000f 	and.w	r0, r0, #15
 8018f78:	fa00 f00b 	lsl.w	r0, r0, fp
 8018f7c:	4303      	orrs	r3, r0
 8018f7e:	9300      	str	r3, [sp, #0]
 8018f80:	f10b 0b04 	add.w	fp, fp, #4
 8018f84:	9b03      	ldr	r3, [sp, #12]
 8018f86:	e00d      	b.n	8018fa4 <__gethex+0x27c>
 8018f88:	9b03      	ldr	r3, [sp, #12]
 8018f8a:	9a06      	ldr	r2, [sp, #24]
 8018f8c:	4413      	add	r3, r2
 8018f8e:	42bb      	cmp	r3, r7
 8018f90:	d3e0      	bcc.n	8018f54 <__gethex+0x22c>
 8018f92:	4618      	mov	r0, r3
 8018f94:	9901      	ldr	r1, [sp, #4]
 8018f96:	9307      	str	r3, [sp, #28]
 8018f98:	4652      	mov	r2, sl
 8018f9a:	f001 f81d 	bl	8019fd8 <strncmp>
 8018f9e:	9b07      	ldr	r3, [sp, #28]
 8018fa0:	2800      	cmp	r0, #0
 8018fa2:	d1d7      	bne.n	8018f54 <__gethex+0x22c>
 8018fa4:	461e      	mov	r6, r3
 8018fa6:	e78b      	b.n	8018ec0 <__gethex+0x198>
 8018fa8:	f04f 0a03 	mov.w	sl, #3
 8018fac:	e7b8      	b.n	8018f20 <__gethex+0x1f8>
 8018fae:	da0a      	bge.n	8018fc6 <__gethex+0x29e>
 8018fb0:	1a37      	subs	r7, r6, r0
 8018fb2:	4621      	mov	r1, r4
 8018fb4:	ee18 0a10 	vmov	r0, s16
 8018fb8:	463a      	mov	r2, r7
 8018fba:	f000 fc3b 	bl	8019834 <__lshift>
 8018fbe:	1bed      	subs	r5, r5, r7
 8018fc0:	4604      	mov	r4, r0
 8018fc2:	f100 0914 	add.w	r9, r0, #20
 8018fc6:	f04f 0a00 	mov.w	sl, #0
 8018fca:	e7ae      	b.n	8018f2a <__gethex+0x202>
 8018fcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018fd0:	42a8      	cmp	r0, r5
 8018fd2:	dd72      	ble.n	80190ba <__gethex+0x392>
 8018fd4:	1b45      	subs	r5, r0, r5
 8018fd6:	42ae      	cmp	r6, r5
 8018fd8:	dc36      	bgt.n	8019048 <__gethex+0x320>
 8018fda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018fde:	2b02      	cmp	r3, #2
 8018fe0:	d02a      	beq.n	8019038 <__gethex+0x310>
 8018fe2:	2b03      	cmp	r3, #3
 8018fe4:	d02c      	beq.n	8019040 <__gethex+0x318>
 8018fe6:	2b01      	cmp	r3, #1
 8018fe8:	d115      	bne.n	8019016 <__gethex+0x2ee>
 8018fea:	42ae      	cmp	r6, r5
 8018fec:	d113      	bne.n	8019016 <__gethex+0x2ee>
 8018fee:	2e01      	cmp	r6, #1
 8018ff0:	d10b      	bne.n	801900a <__gethex+0x2e2>
 8018ff2:	9a04      	ldr	r2, [sp, #16]
 8018ff4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018ff8:	6013      	str	r3, [r2, #0]
 8018ffa:	2301      	movs	r3, #1
 8018ffc:	6123      	str	r3, [r4, #16]
 8018ffe:	f8c9 3000 	str.w	r3, [r9]
 8019002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019004:	2762      	movs	r7, #98	; 0x62
 8019006:	601c      	str	r4, [r3, #0]
 8019008:	e723      	b.n	8018e52 <__gethex+0x12a>
 801900a:	1e71      	subs	r1, r6, #1
 801900c:	4620      	mov	r0, r4
 801900e:	f000 fe4f 	bl	8019cb0 <__any_on>
 8019012:	2800      	cmp	r0, #0
 8019014:	d1ed      	bne.n	8018ff2 <__gethex+0x2ca>
 8019016:	ee18 0a10 	vmov	r0, s16
 801901a:	4621      	mov	r1, r4
 801901c:	f000 f9ee 	bl	80193fc <_Bfree>
 8019020:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019022:	2300      	movs	r3, #0
 8019024:	6013      	str	r3, [r2, #0]
 8019026:	2750      	movs	r7, #80	; 0x50
 8019028:	e713      	b.n	8018e52 <__gethex+0x12a>
 801902a:	bf00      	nop
 801902c:	0801cab0 	.word	0x0801cab0
 8019030:	0801ca34 	.word	0x0801ca34
 8019034:	0801ca45 	.word	0x0801ca45
 8019038:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801903a:	2b00      	cmp	r3, #0
 801903c:	d1eb      	bne.n	8019016 <__gethex+0x2ee>
 801903e:	e7d8      	b.n	8018ff2 <__gethex+0x2ca>
 8019040:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019042:	2b00      	cmp	r3, #0
 8019044:	d1d5      	bne.n	8018ff2 <__gethex+0x2ca>
 8019046:	e7e6      	b.n	8019016 <__gethex+0x2ee>
 8019048:	1e6f      	subs	r7, r5, #1
 801904a:	f1ba 0f00 	cmp.w	sl, #0
 801904e:	d131      	bne.n	80190b4 <__gethex+0x38c>
 8019050:	b127      	cbz	r7, 801905c <__gethex+0x334>
 8019052:	4639      	mov	r1, r7
 8019054:	4620      	mov	r0, r4
 8019056:	f000 fe2b 	bl	8019cb0 <__any_on>
 801905a:	4682      	mov	sl, r0
 801905c:	117b      	asrs	r3, r7, #5
 801905e:	2101      	movs	r1, #1
 8019060:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019064:	f007 071f 	and.w	r7, r7, #31
 8019068:	fa01 f707 	lsl.w	r7, r1, r7
 801906c:	421f      	tst	r7, r3
 801906e:	4629      	mov	r1, r5
 8019070:	4620      	mov	r0, r4
 8019072:	bf18      	it	ne
 8019074:	f04a 0a02 	orrne.w	sl, sl, #2
 8019078:	1b76      	subs	r6, r6, r5
 801907a:	f7ff fded 	bl	8018c58 <rshift>
 801907e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019082:	2702      	movs	r7, #2
 8019084:	f1ba 0f00 	cmp.w	sl, #0
 8019088:	d048      	beq.n	801911c <__gethex+0x3f4>
 801908a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801908e:	2b02      	cmp	r3, #2
 8019090:	d015      	beq.n	80190be <__gethex+0x396>
 8019092:	2b03      	cmp	r3, #3
 8019094:	d017      	beq.n	80190c6 <__gethex+0x39e>
 8019096:	2b01      	cmp	r3, #1
 8019098:	d109      	bne.n	80190ae <__gethex+0x386>
 801909a:	f01a 0f02 	tst.w	sl, #2
 801909e:	d006      	beq.n	80190ae <__gethex+0x386>
 80190a0:	f8d9 0000 	ldr.w	r0, [r9]
 80190a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80190a8:	f01a 0f01 	tst.w	sl, #1
 80190ac:	d10e      	bne.n	80190cc <__gethex+0x3a4>
 80190ae:	f047 0710 	orr.w	r7, r7, #16
 80190b2:	e033      	b.n	801911c <__gethex+0x3f4>
 80190b4:	f04f 0a01 	mov.w	sl, #1
 80190b8:	e7d0      	b.n	801905c <__gethex+0x334>
 80190ba:	2701      	movs	r7, #1
 80190bc:	e7e2      	b.n	8019084 <__gethex+0x35c>
 80190be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80190c0:	f1c3 0301 	rsb	r3, r3, #1
 80190c4:	9315      	str	r3, [sp, #84]	; 0x54
 80190c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d0f0      	beq.n	80190ae <__gethex+0x386>
 80190cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80190d0:	f104 0314 	add.w	r3, r4, #20
 80190d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80190d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80190dc:	f04f 0c00 	mov.w	ip, #0
 80190e0:	4618      	mov	r0, r3
 80190e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80190e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80190ea:	d01c      	beq.n	8019126 <__gethex+0x3fe>
 80190ec:	3201      	adds	r2, #1
 80190ee:	6002      	str	r2, [r0, #0]
 80190f0:	2f02      	cmp	r7, #2
 80190f2:	f104 0314 	add.w	r3, r4, #20
 80190f6:	d13f      	bne.n	8019178 <__gethex+0x450>
 80190f8:	f8d8 2000 	ldr.w	r2, [r8]
 80190fc:	3a01      	subs	r2, #1
 80190fe:	42b2      	cmp	r2, r6
 8019100:	d10a      	bne.n	8019118 <__gethex+0x3f0>
 8019102:	1171      	asrs	r1, r6, #5
 8019104:	2201      	movs	r2, #1
 8019106:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801910a:	f006 061f 	and.w	r6, r6, #31
 801910e:	fa02 f606 	lsl.w	r6, r2, r6
 8019112:	421e      	tst	r6, r3
 8019114:	bf18      	it	ne
 8019116:	4617      	movne	r7, r2
 8019118:	f047 0720 	orr.w	r7, r7, #32
 801911c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801911e:	601c      	str	r4, [r3, #0]
 8019120:	9b04      	ldr	r3, [sp, #16]
 8019122:	601d      	str	r5, [r3, #0]
 8019124:	e695      	b.n	8018e52 <__gethex+0x12a>
 8019126:	4299      	cmp	r1, r3
 8019128:	f843 cc04 	str.w	ip, [r3, #-4]
 801912c:	d8d8      	bhi.n	80190e0 <__gethex+0x3b8>
 801912e:	68a3      	ldr	r3, [r4, #8]
 8019130:	459b      	cmp	fp, r3
 8019132:	db19      	blt.n	8019168 <__gethex+0x440>
 8019134:	6861      	ldr	r1, [r4, #4]
 8019136:	ee18 0a10 	vmov	r0, s16
 801913a:	3101      	adds	r1, #1
 801913c:	f000 f91e 	bl	801937c <_Balloc>
 8019140:	4681      	mov	r9, r0
 8019142:	b918      	cbnz	r0, 801914c <__gethex+0x424>
 8019144:	4b1a      	ldr	r3, [pc, #104]	; (80191b0 <__gethex+0x488>)
 8019146:	4602      	mov	r2, r0
 8019148:	2184      	movs	r1, #132	; 0x84
 801914a:	e6a8      	b.n	8018e9e <__gethex+0x176>
 801914c:	6922      	ldr	r2, [r4, #16]
 801914e:	3202      	adds	r2, #2
 8019150:	f104 010c 	add.w	r1, r4, #12
 8019154:	0092      	lsls	r2, r2, #2
 8019156:	300c      	adds	r0, #12
 8019158:	f7fd f892 	bl	8016280 <memcpy>
 801915c:	4621      	mov	r1, r4
 801915e:	ee18 0a10 	vmov	r0, s16
 8019162:	f000 f94b 	bl	80193fc <_Bfree>
 8019166:	464c      	mov	r4, r9
 8019168:	6923      	ldr	r3, [r4, #16]
 801916a:	1c5a      	adds	r2, r3, #1
 801916c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019170:	6122      	str	r2, [r4, #16]
 8019172:	2201      	movs	r2, #1
 8019174:	615a      	str	r2, [r3, #20]
 8019176:	e7bb      	b.n	80190f0 <__gethex+0x3c8>
 8019178:	6922      	ldr	r2, [r4, #16]
 801917a:	455a      	cmp	r2, fp
 801917c:	dd0b      	ble.n	8019196 <__gethex+0x46e>
 801917e:	2101      	movs	r1, #1
 8019180:	4620      	mov	r0, r4
 8019182:	f7ff fd69 	bl	8018c58 <rshift>
 8019186:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801918a:	3501      	adds	r5, #1
 801918c:	42ab      	cmp	r3, r5
 801918e:	f6ff aed0 	blt.w	8018f32 <__gethex+0x20a>
 8019192:	2701      	movs	r7, #1
 8019194:	e7c0      	b.n	8019118 <__gethex+0x3f0>
 8019196:	f016 061f 	ands.w	r6, r6, #31
 801919a:	d0fa      	beq.n	8019192 <__gethex+0x46a>
 801919c:	449a      	add	sl, r3
 801919e:	f1c6 0620 	rsb	r6, r6, #32
 80191a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80191a6:	f000 f9df 	bl	8019568 <__hi0bits>
 80191aa:	42b0      	cmp	r0, r6
 80191ac:	dbe7      	blt.n	801917e <__gethex+0x456>
 80191ae:	e7f0      	b.n	8019192 <__gethex+0x46a>
 80191b0:	0801ca34 	.word	0x0801ca34

080191b4 <L_shift>:
 80191b4:	f1c2 0208 	rsb	r2, r2, #8
 80191b8:	0092      	lsls	r2, r2, #2
 80191ba:	b570      	push	{r4, r5, r6, lr}
 80191bc:	f1c2 0620 	rsb	r6, r2, #32
 80191c0:	6843      	ldr	r3, [r0, #4]
 80191c2:	6804      	ldr	r4, [r0, #0]
 80191c4:	fa03 f506 	lsl.w	r5, r3, r6
 80191c8:	432c      	orrs	r4, r5
 80191ca:	40d3      	lsrs	r3, r2
 80191cc:	6004      	str	r4, [r0, #0]
 80191ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80191d2:	4288      	cmp	r0, r1
 80191d4:	d3f4      	bcc.n	80191c0 <L_shift+0xc>
 80191d6:	bd70      	pop	{r4, r5, r6, pc}

080191d8 <__match>:
 80191d8:	b530      	push	{r4, r5, lr}
 80191da:	6803      	ldr	r3, [r0, #0]
 80191dc:	3301      	adds	r3, #1
 80191de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80191e2:	b914      	cbnz	r4, 80191ea <__match+0x12>
 80191e4:	6003      	str	r3, [r0, #0]
 80191e6:	2001      	movs	r0, #1
 80191e8:	bd30      	pop	{r4, r5, pc}
 80191ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80191f2:	2d19      	cmp	r5, #25
 80191f4:	bf98      	it	ls
 80191f6:	3220      	addls	r2, #32
 80191f8:	42a2      	cmp	r2, r4
 80191fa:	d0f0      	beq.n	80191de <__match+0x6>
 80191fc:	2000      	movs	r0, #0
 80191fe:	e7f3      	b.n	80191e8 <__match+0x10>

08019200 <__hexnan>:
 8019200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019204:	680b      	ldr	r3, [r1, #0]
 8019206:	6801      	ldr	r1, [r0, #0]
 8019208:	115e      	asrs	r6, r3, #5
 801920a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801920e:	f013 031f 	ands.w	r3, r3, #31
 8019212:	b087      	sub	sp, #28
 8019214:	bf18      	it	ne
 8019216:	3604      	addne	r6, #4
 8019218:	2500      	movs	r5, #0
 801921a:	1f37      	subs	r7, r6, #4
 801921c:	4682      	mov	sl, r0
 801921e:	4690      	mov	r8, r2
 8019220:	9301      	str	r3, [sp, #4]
 8019222:	f846 5c04 	str.w	r5, [r6, #-4]
 8019226:	46b9      	mov	r9, r7
 8019228:	463c      	mov	r4, r7
 801922a:	9502      	str	r5, [sp, #8]
 801922c:	46ab      	mov	fp, r5
 801922e:	784a      	ldrb	r2, [r1, #1]
 8019230:	1c4b      	adds	r3, r1, #1
 8019232:	9303      	str	r3, [sp, #12]
 8019234:	b342      	cbz	r2, 8019288 <__hexnan+0x88>
 8019236:	4610      	mov	r0, r2
 8019238:	9105      	str	r1, [sp, #20]
 801923a:	9204      	str	r2, [sp, #16]
 801923c:	f7ff fd5e 	bl	8018cfc <__hexdig_fun>
 8019240:	2800      	cmp	r0, #0
 8019242:	d14f      	bne.n	80192e4 <__hexnan+0xe4>
 8019244:	9a04      	ldr	r2, [sp, #16]
 8019246:	9905      	ldr	r1, [sp, #20]
 8019248:	2a20      	cmp	r2, #32
 801924a:	d818      	bhi.n	801927e <__hexnan+0x7e>
 801924c:	9b02      	ldr	r3, [sp, #8]
 801924e:	459b      	cmp	fp, r3
 8019250:	dd13      	ble.n	801927a <__hexnan+0x7a>
 8019252:	454c      	cmp	r4, r9
 8019254:	d206      	bcs.n	8019264 <__hexnan+0x64>
 8019256:	2d07      	cmp	r5, #7
 8019258:	dc04      	bgt.n	8019264 <__hexnan+0x64>
 801925a:	462a      	mov	r2, r5
 801925c:	4649      	mov	r1, r9
 801925e:	4620      	mov	r0, r4
 8019260:	f7ff ffa8 	bl	80191b4 <L_shift>
 8019264:	4544      	cmp	r4, r8
 8019266:	d950      	bls.n	801930a <__hexnan+0x10a>
 8019268:	2300      	movs	r3, #0
 801926a:	f1a4 0904 	sub.w	r9, r4, #4
 801926e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019272:	f8cd b008 	str.w	fp, [sp, #8]
 8019276:	464c      	mov	r4, r9
 8019278:	461d      	mov	r5, r3
 801927a:	9903      	ldr	r1, [sp, #12]
 801927c:	e7d7      	b.n	801922e <__hexnan+0x2e>
 801927e:	2a29      	cmp	r2, #41	; 0x29
 8019280:	d156      	bne.n	8019330 <__hexnan+0x130>
 8019282:	3102      	adds	r1, #2
 8019284:	f8ca 1000 	str.w	r1, [sl]
 8019288:	f1bb 0f00 	cmp.w	fp, #0
 801928c:	d050      	beq.n	8019330 <__hexnan+0x130>
 801928e:	454c      	cmp	r4, r9
 8019290:	d206      	bcs.n	80192a0 <__hexnan+0xa0>
 8019292:	2d07      	cmp	r5, #7
 8019294:	dc04      	bgt.n	80192a0 <__hexnan+0xa0>
 8019296:	462a      	mov	r2, r5
 8019298:	4649      	mov	r1, r9
 801929a:	4620      	mov	r0, r4
 801929c:	f7ff ff8a 	bl	80191b4 <L_shift>
 80192a0:	4544      	cmp	r4, r8
 80192a2:	d934      	bls.n	801930e <__hexnan+0x10e>
 80192a4:	f1a8 0204 	sub.w	r2, r8, #4
 80192a8:	4623      	mov	r3, r4
 80192aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80192ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80192b2:	429f      	cmp	r7, r3
 80192b4:	d2f9      	bcs.n	80192aa <__hexnan+0xaa>
 80192b6:	1b3b      	subs	r3, r7, r4
 80192b8:	f023 0303 	bic.w	r3, r3, #3
 80192bc:	3304      	adds	r3, #4
 80192be:	3401      	adds	r4, #1
 80192c0:	3e03      	subs	r6, #3
 80192c2:	42b4      	cmp	r4, r6
 80192c4:	bf88      	it	hi
 80192c6:	2304      	movhi	r3, #4
 80192c8:	4443      	add	r3, r8
 80192ca:	2200      	movs	r2, #0
 80192cc:	f843 2b04 	str.w	r2, [r3], #4
 80192d0:	429f      	cmp	r7, r3
 80192d2:	d2fb      	bcs.n	80192cc <__hexnan+0xcc>
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	b91b      	cbnz	r3, 80192e0 <__hexnan+0xe0>
 80192d8:	4547      	cmp	r7, r8
 80192da:	d127      	bne.n	801932c <__hexnan+0x12c>
 80192dc:	2301      	movs	r3, #1
 80192de:	603b      	str	r3, [r7, #0]
 80192e0:	2005      	movs	r0, #5
 80192e2:	e026      	b.n	8019332 <__hexnan+0x132>
 80192e4:	3501      	adds	r5, #1
 80192e6:	2d08      	cmp	r5, #8
 80192e8:	f10b 0b01 	add.w	fp, fp, #1
 80192ec:	dd06      	ble.n	80192fc <__hexnan+0xfc>
 80192ee:	4544      	cmp	r4, r8
 80192f0:	d9c3      	bls.n	801927a <__hexnan+0x7a>
 80192f2:	2300      	movs	r3, #0
 80192f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80192f8:	2501      	movs	r5, #1
 80192fa:	3c04      	subs	r4, #4
 80192fc:	6822      	ldr	r2, [r4, #0]
 80192fe:	f000 000f 	and.w	r0, r0, #15
 8019302:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019306:	6022      	str	r2, [r4, #0]
 8019308:	e7b7      	b.n	801927a <__hexnan+0x7a>
 801930a:	2508      	movs	r5, #8
 801930c:	e7b5      	b.n	801927a <__hexnan+0x7a>
 801930e:	9b01      	ldr	r3, [sp, #4]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d0df      	beq.n	80192d4 <__hexnan+0xd4>
 8019314:	f04f 32ff 	mov.w	r2, #4294967295
 8019318:	f1c3 0320 	rsb	r3, r3, #32
 801931c:	fa22 f303 	lsr.w	r3, r2, r3
 8019320:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019324:	401a      	ands	r2, r3
 8019326:	f846 2c04 	str.w	r2, [r6, #-4]
 801932a:	e7d3      	b.n	80192d4 <__hexnan+0xd4>
 801932c:	3f04      	subs	r7, #4
 801932e:	e7d1      	b.n	80192d4 <__hexnan+0xd4>
 8019330:	2004      	movs	r0, #4
 8019332:	b007      	add	sp, #28
 8019334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019338 <_localeconv_r>:
 8019338:	4800      	ldr	r0, [pc, #0]	; (801933c <_localeconv_r+0x4>)
 801933a:	4770      	bx	lr
 801933c:	20004368 	.word	0x20004368

08019340 <__ascii_mbtowc>:
 8019340:	b082      	sub	sp, #8
 8019342:	b901      	cbnz	r1, 8019346 <__ascii_mbtowc+0x6>
 8019344:	a901      	add	r1, sp, #4
 8019346:	b142      	cbz	r2, 801935a <__ascii_mbtowc+0x1a>
 8019348:	b14b      	cbz	r3, 801935e <__ascii_mbtowc+0x1e>
 801934a:	7813      	ldrb	r3, [r2, #0]
 801934c:	600b      	str	r3, [r1, #0]
 801934e:	7812      	ldrb	r2, [r2, #0]
 8019350:	1e10      	subs	r0, r2, #0
 8019352:	bf18      	it	ne
 8019354:	2001      	movne	r0, #1
 8019356:	b002      	add	sp, #8
 8019358:	4770      	bx	lr
 801935a:	4610      	mov	r0, r2
 801935c:	e7fb      	b.n	8019356 <__ascii_mbtowc+0x16>
 801935e:	f06f 0001 	mvn.w	r0, #1
 8019362:	e7f8      	b.n	8019356 <__ascii_mbtowc+0x16>

08019364 <__malloc_lock>:
 8019364:	4801      	ldr	r0, [pc, #4]	; (801936c <__malloc_lock+0x8>)
 8019366:	f000 be88 	b.w	801a07a <__retarget_lock_acquire_recursive>
 801936a:	bf00      	nop
 801936c:	20011b8c 	.word	0x20011b8c

08019370 <__malloc_unlock>:
 8019370:	4801      	ldr	r0, [pc, #4]	; (8019378 <__malloc_unlock+0x8>)
 8019372:	f000 be83 	b.w	801a07c <__retarget_lock_release_recursive>
 8019376:	bf00      	nop
 8019378:	20011b8c 	.word	0x20011b8c

0801937c <_Balloc>:
 801937c:	b570      	push	{r4, r5, r6, lr}
 801937e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019380:	4604      	mov	r4, r0
 8019382:	460d      	mov	r5, r1
 8019384:	b976      	cbnz	r6, 80193a4 <_Balloc+0x28>
 8019386:	2010      	movs	r0, #16
 8019388:	f7fc ff6a 	bl	8016260 <malloc>
 801938c:	4602      	mov	r2, r0
 801938e:	6260      	str	r0, [r4, #36]	; 0x24
 8019390:	b920      	cbnz	r0, 801939c <_Balloc+0x20>
 8019392:	4b18      	ldr	r3, [pc, #96]	; (80193f4 <_Balloc+0x78>)
 8019394:	4818      	ldr	r0, [pc, #96]	; (80193f8 <_Balloc+0x7c>)
 8019396:	2166      	movs	r1, #102	; 0x66
 8019398:	f000 fe3e 	bl	801a018 <__assert_func>
 801939c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80193a0:	6006      	str	r6, [r0, #0]
 80193a2:	60c6      	str	r6, [r0, #12]
 80193a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80193a6:	68f3      	ldr	r3, [r6, #12]
 80193a8:	b183      	cbz	r3, 80193cc <_Balloc+0x50>
 80193aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80193ac:	68db      	ldr	r3, [r3, #12]
 80193ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80193b2:	b9b8      	cbnz	r0, 80193e4 <_Balloc+0x68>
 80193b4:	2101      	movs	r1, #1
 80193b6:	fa01 f605 	lsl.w	r6, r1, r5
 80193ba:	1d72      	adds	r2, r6, #5
 80193bc:	0092      	lsls	r2, r2, #2
 80193be:	4620      	mov	r0, r4
 80193c0:	f000 fc97 	bl	8019cf2 <_calloc_r>
 80193c4:	b160      	cbz	r0, 80193e0 <_Balloc+0x64>
 80193c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80193ca:	e00e      	b.n	80193ea <_Balloc+0x6e>
 80193cc:	2221      	movs	r2, #33	; 0x21
 80193ce:	2104      	movs	r1, #4
 80193d0:	4620      	mov	r0, r4
 80193d2:	f000 fc8e 	bl	8019cf2 <_calloc_r>
 80193d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80193d8:	60f0      	str	r0, [r6, #12]
 80193da:	68db      	ldr	r3, [r3, #12]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d1e4      	bne.n	80193aa <_Balloc+0x2e>
 80193e0:	2000      	movs	r0, #0
 80193e2:	bd70      	pop	{r4, r5, r6, pc}
 80193e4:	6802      	ldr	r2, [r0, #0]
 80193e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80193ea:	2300      	movs	r3, #0
 80193ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80193f0:	e7f7      	b.n	80193e2 <_Balloc+0x66>
 80193f2:	bf00      	nop
 80193f4:	0801c9be 	.word	0x0801c9be
 80193f8:	0801cac4 	.word	0x0801cac4

080193fc <_Bfree>:
 80193fc:	b570      	push	{r4, r5, r6, lr}
 80193fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019400:	4605      	mov	r5, r0
 8019402:	460c      	mov	r4, r1
 8019404:	b976      	cbnz	r6, 8019424 <_Bfree+0x28>
 8019406:	2010      	movs	r0, #16
 8019408:	f7fc ff2a 	bl	8016260 <malloc>
 801940c:	4602      	mov	r2, r0
 801940e:	6268      	str	r0, [r5, #36]	; 0x24
 8019410:	b920      	cbnz	r0, 801941c <_Bfree+0x20>
 8019412:	4b09      	ldr	r3, [pc, #36]	; (8019438 <_Bfree+0x3c>)
 8019414:	4809      	ldr	r0, [pc, #36]	; (801943c <_Bfree+0x40>)
 8019416:	218a      	movs	r1, #138	; 0x8a
 8019418:	f000 fdfe 	bl	801a018 <__assert_func>
 801941c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019420:	6006      	str	r6, [r0, #0]
 8019422:	60c6      	str	r6, [r0, #12]
 8019424:	b13c      	cbz	r4, 8019436 <_Bfree+0x3a>
 8019426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019428:	6862      	ldr	r2, [r4, #4]
 801942a:	68db      	ldr	r3, [r3, #12]
 801942c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019430:	6021      	str	r1, [r4, #0]
 8019432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019436:	bd70      	pop	{r4, r5, r6, pc}
 8019438:	0801c9be 	.word	0x0801c9be
 801943c:	0801cac4 	.word	0x0801cac4

08019440 <__multadd>:
 8019440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019444:	690e      	ldr	r6, [r1, #16]
 8019446:	4607      	mov	r7, r0
 8019448:	4698      	mov	r8, r3
 801944a:	460c      	mov	r4, r1
 801944c:	f101 0014 	add.w	r0, r1, #20
 8019450:	2300      	movs	r3, #0
 8019452:	6805      	ldr	r5, [r0, #0]
 8019454:	b2a9      	uxth	r1, r5
 8019456:	fb02 8101 	mla	r1, r2, r1, r8
 801945a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801945e:	0c2d      	lsrs	r5, r5, #16
 8019460:	fb02 c505 	mla	r5, r2, r5, ip
 8019464:	b289      	uxth	r1, r1
 8019466:	3301      	adds	r3, #1
 8019468:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801946c:	429e      	cmp	r6, r3
 801946e:	f840 1b04 	str.w	r1, [r0], #4
 8019472:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019476:	dcec      	bgt.n	8019452 <__multadd+0x12>
 8019478:	f1b8 0f00 	cmp.w	r8, #0
 801947c:	d022      	beq.n	80194c4 <__multadd+0x84>
 801947e:	68a3      	ldr	r3, [r4, #8]
 8019480:	42b3      	cmp	r3, r6
 8019482:	dc19      	bgt.n	80194b8 <__multadd+0x78>
 8019484:	6861      	ldr	r1, [r4, #4]
 8019486:	4638      	mov	r0, r7
 8019488:	3101      	adds	r1, #1
 801948a:	f7ff ff77 	bl	801937c <_Balloc>
 801948e:	4605      	mov	r5, r0
 8019490:	b928      	cbnz	r0, 801949e <__multadd+0x5e>
 8019492:	4602      	mov	r2, r0
 8019494:	4b0d      	ldr	r3, [pc, #52]	; (80194cc <__multadd+0x8c>)
 8019496:	480e      	ldr	r0, [pc, #56]	; (80194d0 <__multadd+0x90>)
 8019498:	21b5      	movs	r1, #181	; 0xb5
 801949a:	f000 fdbd 	bl	801a018 <__assert_func>
 801949e:	6922      	ldr	r2, [r4, #16]
 80194a0:	3202      	adds	r2, #2
 80194a2:	f104 010c 	add.w	r1, r4, #12
 80194a6:	0092      	lsls	r2, r2, #2
 80194a8:	300c      	adds	r0, #12
 80194aa:	f7fc fee9 	bl	8016280 <memcpy>
 80194ae:	4621      	mov	r1, r4
 80194b0:	4638      	mov	r0, r7
 80194b2:	f7ff ffa3 	bl	80193fc <_Bfree>
 80194b6:	462c      	mov	r4, r5
 80194b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80194bc:	3601      	adds	r6, #1
 80194be:	f8c3 8014 	str.w	r8, [r3, #20]
 80194c2:	6126      	str	r6, [r4, #16]
 80194c4:	4620      	mov	r0, r4
 80194c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ca:	bf00      	nop
 80194cc:	0801ca34 	.word	0x0801ca34
 80194d0:	0801cac4 	.word	0x0801cac4

080194d4 <__s2b>:
 80194d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194d8:	460c      	mov	r4, r1
 80194da:	4615      	mov	r5, r2
 80194dc:	461f      	mov	r7, r3
 80194de:	2209      	movs	r2, #9
 80194e0:	3308      	adds	r3, #8
 80194e2:	4606      	mov	r6, r0
 80194e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80194e8:	2100      	movs	r1, #0
 80194ea:	2201      	movs	r2, #1
 80194ec:	429a      	cmp	r2, r3
 80194ee:	db09      	blt.n	8019504 <__s2b+0x30>
 80194f0:	4630      	mov	r0, r6
 80194f2:	f7ff ff43 	bl	801937c <_Balloc>
 80194f6:	b940      	cbnz	r0, 801950a <__s2b+0x36>
 80194f8:	4602      	mov	r2, r0
 80194fa:	4b19      	ldr	r3, [pc, #100]	; (8019560 <__s2b+0x8c>)
 80194fc:	4819      	ldr	r0, [pc, #100]	; (8019564 <__s2b+0x90>)
 80194fe:	21ce      	movs	r1, #206	; 0xce
 8019500:	f000 fd8a 	bl	801a018 <__assert_func>
 8019504:	0052      	lsls	r2, r2, #1
 8019506:	3101      	adds	r1, #1
 8019508:	e7f0      	b.n	80194ec <__s2b+0x18>
 801950a:	9b08      	ldr	r3, [sp, #32]
 801950c:	6143      	str	r3, [r0, #20]
 801950e:	2d09      	cmp	r5, #9
 8019510:	f04f 0301 	mov.w	r3, #1
 8019514:	6103      	str	r3, [r0, #16]
 8019516:	dd16      	ble.n	8019546 <__s2b+0x72>
 8019518:	f104 0909 	add.w	r9, r4, #9
 801951c:	46c8      	mov	r8, r9
 801951e:	442c      	add	r4, r5
 8019520:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019524:	4601      	mov	r1, r0
 8019526:	3b30      	subs	r3, #48	; 0x30
 8019528:	220a      	movs	r2, #10
 801952a:	4630      	mov	r0, r6
 801952c:	f7ff ff88 	bl	8019440 <__multadd>
 8019530:	45a0      	cmp	r8, r4
 8019532:	d1f5      	bne.n	8019520 <__s2b+0x4c>
 8019534:	f1a5 0408 	sub.w	r4, r5, #8
 8019538:	444c      	add	r4, r9
 801953a:	1b2d      	subs	r5, r5, r4
 801953c:	1963      	adds	r3, r4, r5
 801953e:	42bb      	cmp	r3, r7
 8019540:	db04      	blt.n	801954c <__s2b+0x78>
 8019542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019546:	340a      	adds	r4, #10
 8019548:	2509      	movs	r5, #9
 801954a:	e7f6      	b.n	801953a <__s2b+0x66>
 801954c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019550:	4601      	mov	r1, r0
 8019552:	3b30      	subs	r3, #48	; 0x30
 8019554:	220a      	movs	r2, #10
 8019556:	4630      	mov	r0, r6
 8019558:	f7ff ff72 	bl	8019440 <__multadd>
 801955c:	e7ee      	b.n	801953c <__s2b+0x68>
 801955e:	bf00      	nop
 8019560:	0801ca34 	.word	0x0801ca34
 8019564:	0801cac4 	.word	0x0801cac4

08019568 <__hi0bits>:
 8019568:	0c03      	lsrs	r3, r0, #16
 801956a:	041b      	lsls	r3, r3, #16
 801956c:	b9d3      	cbnz	r3, 80195a4 <__hi0bits+0x3c>
 801956e:	0400      	lsls	r0, r0, #16
 8019570:	2310      	movs	r3, #16
 8019572:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019576:	bf04      	itt	eq
 8019578:	0200      	lsleq	r0, r0, #8
 801957a:	3308      	addeq	r3, #8
 801957c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019580:	bf04      	itt	eq
 8019582:	0100      	lsleq	r0, r0, #4
 8019584:	3304      	addeq	r3, #4
 8019586:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801958a:	bf04      	itt	eq
 801958c:	0080      	lsleq	r0, r0, #2
 801958e:	3302      	addeq	r3, #2
 8019590:	2800      	cmp	r0, #0
 8019592:	db05      	blt.n	80195a0 <__hi0bits+0x38>
 8019594:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019598:	f103 0301 	add.w	r3, r3, #1
 801959c:	bf08      	it	eq
 801959e:	2320      	moveq	r3, #32
 80195a0:	4618      	mov	r0, r3
 80195a2:	4770      	bx	lr
 80195a4:	2300      	movs	r3, #0
 80195a6:	e7e4      	b.n	8019572 <__hi0bits+0xa>

080195a8 <__lo0bits>:
 80195a8:	6803      	ldr	r3, [r0, #0]
 80195aa:	f013 0207 	ands.w	r2, r3, #7
 80195ae:	4601      	mov	r1, r0
 80195b0:	d00b      	beq.n	80195ca <__lo0bits+0x22>
 80195b2:	07da      	lsls	r2, r3, #31
 80195b4:	d424      	bmi.n	8019600 <__lo0bits+0x58>
 80195b6:	0798      	lsls	r0, r3, #30
 80195b8:	bf49      	itett	mi
 80195ba:	085b      	lsrmi	r3, r3, #1
 80195bc:	089b      	lsrpl	r3, r3, #2
 80195be:	2001      	movmi	r0, #1
 80195c0:	600b      	strmi	r3, [r1, #0]
 80195c2:	bf5c      	itt	pl
 80195c4:	600b      	strpl	r3, [r1, #0]
 80195c6:	2002      	movpl	r0, #2
 80195c8:	4770      	bx	lr
 80195ca:	b298      	uxth	r0, r3
 80195cc:	b9b0      	cbnz	r0, 80195fc <__lo0bits+0x54>
 80195ce:	0c1b      	lsrs	r3, r3, #16
 80195d0:	2010      	movs	r0, #16
 80195d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80195d6:	bf04      	itt	eq
 80195d8:	0a1b      	lsreq	r3, r3, #8
 80195da:	3008      	addeq	r0, #8
 80195dc:	071a      	lsls	r2, r3, #28
 80195de:	bf04      	itt	eq
 80195e0:	091b      	lsreq	r3, r3, #4
 80195e2:	3004      	addeq	r0, #4
 80195e4:	079a      	lsls	r2, r3, #30
 80195e6:	bf04      	itt	eq
 80195e8:	089b      	lsreq	r3, r3, #2
 80195ea:	3002      	addeq	r0, #2
 80195ec:	07da      	lsls	r2, r3, #31
 80195ee:	d403      	bmi.n	80195f8 <__lo0bits+0x50>
 80195f0:	085b      	lsrs	r3, r3, #1
 80195f2:	f100 0001 	add.w	r0, r0, #1
 80195f6:	d005      	beq.n	8019604 <__lo0bits+0x5c>
 80195f8:	600b      	str	r3, [r1, #0]
 80195fa:	4770      	bx	lr
 80195fc:	4610      	mov	r0, r2
 80195fe:	e7e8      	b.n	80195d2 <__lo0bits+0x2a>
 8019600:	2000      	movs	r0, #0
 8019602:	4770      	bx	lr
 8019604:	2020      	movs	r0, #32
 8019606:	4770      	bx	lr

08019608 <__i2b>:
 8019608:	b510      	push	{r4, lr}
 801960a:	460c      	mov	r4, r1
 801960c:	2101      	movs	r1, #1
 801960e:	f7ff feb5 	bl	801937c <_Balloc>
 8019612:	4602      	mov	r2, r0
 8019614:	b928      	cbnz	r0, 8019622 <__i2b+0x1a>
 8019616:	4b05      	ldr	r3, [pc, #20]	; (801962c <__i2b+0x24>)
 8019618:	4805      	ldr	r0, [pc, #20]	; (8019630 <__i2b+0x28>)
 801961a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801961e:	f000 fcfb 	bl	801a018 <__assert_func>
 8019622:	2301      	movs	r3, #1
 8019624:	6144      	str	r4, [r0, #20]
 8019626:	6103      	str	r3, [r0, #16]
 8019628:	bd10      	pop	{r4, pc}
 801962a:	bf00      	nop
 801962c:	0801ca34 	.word	0x0801ca34
 8019630:	0801cac4 	.word	0x0801cac4

08019634 <__multiply>:
 8019634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019638:	4614      	mov	r4, r2
 801963a:	690a      	ldr	r2, [r1, #16]
 801963c:	6923      	ldr	r3, [r4, #16]
 801963e:	429a      	cmp	r2, r3
 8019640:	bfb8      	it	lt
 8019642:	460b      	movlt	r3, r1
 8019644:	460d      	mov	r5, r1
 8019646:	bfbc      	itt	lt
 8019648:	4625      	movlt	r5, r4
 801964a:	461c      	movlt	r4, r3
 801964c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019650:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019654:	68ab      	ldr	r3, [r5, #8]
 8019656:	6869      	ldr	r1, [r5, #4]
 8019658:	eb0a 0709 	add.w	r7, sl, r9
 801965c:	42bb      	cmp	r3, r7
 801965e:	b085      	sub	sp, #20
 8019660:	bfb8      	it	lt
 8019662:	3101      	addlt	r1, #1
 8019664:	f7ff fe8a 	bl	801937c <_Balloc>
 8019668:	b930      	cbnz	r0, 8019678 <__multiply+0x44>
 801966a:	4602      	mov	r2, r0
 801966c:	4b42      	ldr	r3, [pc, #264]	; (8019778 <__multiply+0x144>)
 801966e:	4843      	ldr	r0, [pc, #268]	; (801977c <__multiply+0x148>)
 8019670:	f240 115d 	movw	r1, #349	; 0x15d
 8019674:	f000 fcd0 	bl	801a018 <__assert_func>
 8019678:	f100 0614 	add.w	r6, r0, #20
 801967c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019680:	4633      	mov	r3, r6
 8019682:	2200      	movs	r2, #0
 8019684:	4543      	cmp	r3, r8
 8019686:	d31e      	bcc.n	80196c6 <__multiply+0x92>
 8019688:	f105 0c14 	add.w	ip, r5, #20
 801968c:	f104 0314 	add.w	r3, r4, #20
 8019690:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019694:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019698:	9202      	str	r2, [sp, #8]
 801969a:	ebac 0205 	sub.w	r2, ip, r5
 801969e:	3a15      	subs	r2, #21
 80196a0:	f022 0203 	bic.w	r2, r2, #3
 80196a4:	3204      	adds	r2, #4
 80196a6:	f105 0115 	add.w	r1, r5, #21
 80196aa:	458c      	cmp	ip, r1
 80196ac:	bf38      	it	cc
 80196ae:	2204      	movcc	r2, #4
 80196b0:	9201      	str	r2, [sp, #4]
 80196b2:	9a02      	ldr	r2, [sp, #8]
 80196b4:	9303      	str	r3, [sp, #12]
 80196b6:	429a      	cmp	r2, r3
 80196b8:	d808      	bhi.n	80196cc <__multiply+0x98>
 80196ba:	2f00      	cmp	r7, #0
 80196bc:	dc55      	bgt.n	801976a <__multiply+0x136>
 80196be:	6107      	str	r7, [r0, #16]
 80196c0:	b005      	add	sp, #20
 80196c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196c6:	f843 2b04 	str.w	r2, [r3], #4
 80196ca:	e7db      	b.n	8019684 <__multiply+0x50>
 80196cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80196d0:	f1ba 0f00 	cmp.w	sl, #0
 80196d4:	d020      	beq.n	8019718 <__multiply+0xe4>
 80196d6:	f105 0e14 	add.w	lr, r5, #20
 80196da:	46b1      	mov	r9, r6
 80196dc:	2200      	movs	r2, #0
 80196de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80196e2:	f8d9 b000 	ldr.w	fp, [r9]
 80196e6:	b2a1      	uxth	r1, r4
 80196e8:	fa1f fb8b 	uxth.w	fp, fp
 80196ec:	fb0a b101 	mla	r1, sl, r1, fp
 80196f0:	4411      	add	r1, r2
 80196f2:	f8d9 2000 	ldr.w	r2, [r9]
 80196f6:	0c24      	lsrs	r4, r4, #16
 80196f8:	0c12      	lsrs	r2, r2, #16
 80196fa:	fb0a 2404 	mla	r4, sl, r4, r2
 80196fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019702:	b289      	uxth	r1, r1
 8019704:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019708:	45f4      	cmp	ip, lr
 801970a:	f849 1b04 	str.w	r1, [r9], #4
 801970e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019712:	d8e4      	bhi.n	80196de <__multiply+0xaa>
 8019714:	9901      	ldr	r1, [sp, #4]
 8019716:	5072      	str	r2, [r6, r1]
 8019718:	9a03      	ldr	r2, [sp, #12]
 801971a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801971e:	3304      	adds	r3, #4
 8019720:	f1b9 0f00 	cmp.w	r9, #0
 8019724:	d01f      	beq.n	8019766 <__multiply+0x132>
 8019726:	6834      	ldr	r4, [r6, #0]
 8019728:	f105 0114 	add.w	r1, r5, #20
 801972c:	46b6      	mov	lr, r6
 801972e:	f04f 0a00 	mov.w	sl, #0
 8019732:	880a      	ldrh	r2, [r1, #0]
 8019734:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019738:	fb09 b202 	mla	r2, r9, r2, fp
 801973c:	4492      	add	sl, r2
 801973e:	b2a4      	uxth	r4, r4
 8019740:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019744:	f84e 4b04 	str.w	r4, [lr], #4
 8019748:	f851 4b04 	ldr.w	r4, [r1], #4
 801974c:	f8be 2000 	ldrh.w	r2, [lr]
 8019750:	0c24      	lsrs	r4, r4, #16
 8019752:	fb09 2404 	mla	r4, r9, r4, r2
 8019756:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801975a:	458c      	cmp	ip, r1
 801975c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019760:	d8e7      	bhi.n	8019732 <__multiply+0xfe>
 8019762:	9a01      	ldr	r2, [sp, #4]
 8019764:	50b4      	str	r4, [r6, r2]
 8019766:	3604      	adds	r6, #4
 8019768:	e7a3      	b.n	80196b2 <__multiply+0x7e>
 801976a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801976e:	2b00      	cmp	r3, #0
 8019770:	d1a5      	bne.n	80196be <__multiply+0x8a>
 8019772:	3f01      	subs	r7, #1
 8019774:	e7a1      	b.n	80196ba <__multiply+0x86>
 8019776:	bf00      	nop
 8019778:	0801ca34 	.word	0x0801ca34
 801977c:	0801cac4 	.word	0x0801cac4

08019780 <__pow5mult>:
 8019780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019784:	4615      	mov	r5, r2
 8019786:	f012 0203 	ands.w	r2, r2, #3
 801978a:	4606      	mov	r6, r0
 801978c:	460f      	mov	r7, r1
 801978e:	d007      	beq.n	80197a0 <__pow5mult+0x20>
 8019790:	4c25      	ldr	r4, [pc, #148]	; (8019828 <__pow5mult+0xa8>)
 8019792:	3a01      	subs	r2, #1
 8019794:	2300      	movs	r3, #0
 8019796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801979a:	f7ff fe51 	bl	8019440 <__multadd>
 801979e:	4607      	mov	r7, r0
 80197a0:	10ad      	asrs	r5, r5, #2
 80197a2:	d03d      	beq.n	8019820 <__pow5mult+0xa0>
 80197a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80197a6:	b97c      	cbnz	r4, 80197c8 <__pow5mult+0x48>
 80197a8:	2010      	movs	r0, #16
 80197aa:	f7fc fd59 	bl	8016260 <malloc>
 80197ae:	4602      	mov	r2, r0
 80197b0:	6270      	str	r0, [r6, #36]	; 0x24
 80197b2:	b928      	cbnz	r0, 80197c0 <__pow5mult+0x40>
 80197b4:	4b1d      	ldr	r3, [pc, #116]	; (801982c <__pow5mult+0xac>)
 80197b6:	481e      	ldr	r0, [pc, #120]	; (8019830 <__pow5mult+0xb0>)
 80197b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80197bc:	f000 fc2c 	bl	801a018 <__assert_func>
 80197c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80197c4:	6004      	str	r4, [r0, #0]
 80197c6:	60c4      	str	r4, [r0, #12]
 80197c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80197cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80197d0:	b94c      	cbnz	r4, 80197e6 <__pow5mult+0x66>
 80197d2:	f240 2171 	movw	r1, #625	; 0x271
 80197d6:	4630      	mov	r0, r6
 80197d8:	f7ff ff16 	bl	8019608 <__i2b>
 80197dc:	2300      	movs	r3, #0
 80197de:	f8c8 0008 	str.w	r0, [r8, #8]
 80197e2:	4604      	mov	r4, r0
 80197e4:	6003      	str	r3, [r0, #0]
 80197e6:	f04f 0900 	mov.w	r9, #0
 80197ea:	07eb      	lsls	r3, r5, #31
 80197ec:	d50a      	bpl.n	8019804 <__pow5mult+0x84>
 80197ee:	4639      	mov	r1, r7
 80197f0:	4622      	mov	r2, r4
 80197f2:	4630      	mov	r0, r6
 80197f4:	f7ff ff1e 	bl	8019634 <__multiply>
 80197f8:	4639      	mov	r1, r7
 80197fa:	4680      	mov	r8, r0
 80197fc:	4630      	mov	r0, r6
 80197fe:	f7ff fdfd 	bl	80193fc <_Bfree>
 8019802:	4647      	mov	r7, r8
 8019804:	106d      	asrs	r5, r5, #1
 8019806:	d00b      	beq.n	8019820 <__pow5mult+0xa0>
 8019808:	6820      	ldr	r0, [r4, #0]
 801980a:	b938      	cbnz	r0, 801981c <__pow5mult+0x9c>
 801980c:	4622      	mov	r2, r4
 801980e:	4621      	mov	r1, r4
 8019810:	4630      	mov	r0, r6
 8019812:	f7ff ff0f 	bl	8019634 <__multiply>
 8019816:	6020      	str	r0, [r4, #0]
 8019818:	f8c0 9000 	str.w	r9, [r0]
 801981c:	4604      	mov	r4, r0
 801981e:	e7e4      	b.n	80197ea <__pow5mult+0x6a>
 8019820:	4638      	mov	r0, r7
 8019822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019826:	bf00      	nop
 8019828:	0801cc18 	.word	0x0801cc18
 801982c:	0801c9be 	.word	0x0801c9be
 8019830:	0801cac4 	.word	0x0801cac4

08019834 <__lshift>:
 8019834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019838:	460c      	mov	r4, r1
 801983a:	6849      	ldr	r1, [r1, #4]
 801983c:	6923      	ldr	r3, [r4, #16]
 801983e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019842:	68a3      	ldr	r3, [r4, #8]
 8019844:	4607      	mov	r7, r0
 8019846:	4691      	mov	r9, r2
 8019848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801984c:	f108 0601 	add.w	r6, r8, #1
 8019850:	42b3      	cmp	r3, r6
 8019852:	db0b      	blt.n	801986c <__lshift+0x38>
 8019854:	4638      	mov	r0, r7
 8019856:	f7ff fd91 	bl	801937c <_Balloc>
 801985a:	4605      	mov	r5, r0
 801985c:	b948      	cbnz	r0, 8019872 <__lshift+0x3e>
 801985e:	4602      	mov	r2, r0
 8019860:	4b28      	ldr	r3, [pc, #160]	; (8019904 <__lshift+0xd0>)
 8019862:	4829      	ldr	r0, [pc, #164]	; (8019908 <__lshift+0xd4>)
 8019864:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019868:	f000 fbd6 	bl	801a018 <__assert_func>
 801986c:	3101      	adds	r1, #1
 801986e:	005b      	lsls	r3, r3, #1
 8019870:	e7ee      	b.n	8019850 <__lshift+0x1c>
 8019872:	2300      	movs	r3, #0
 8019874:	f100 0114 	add.w	r1, r0, #20
 8019878:	f100 0210 	add.w	r2, r0, #16
 801987c:	4618      	mov	r0, r3
 801987e:	4553      	cmp	r3, sl
 8019880:	db33      	blt.n	80198ea <__lshift+0xb6>
 8019882:	6920      	ldr	r0, [r4, #16]
 8019884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019888:	f104 0314 	add.w	r3, r4, #20
 801988c:	f019 091f 	ands.w	r9, r9, #31
 8019890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019898:	d02b      	beq.n	80198f2 <__lshift+0xbe>
 801989a:	f1c9 0e20 	rsb	lr, r9, #32
 801989e:	468a      	mov	sl, r1
 80198a0:	2200      	movs	r2, #0
 80198a2:	6818      	ldr	r0, [r3, #0]
 80198a4:	fa00 f009 	lsl.w	r0, r0, r9
 80198a8:	4302      	orrs	r2, r0
 80198aa:	f84a 2b04 	str.w	r2, [sl], #4
 80198ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80198b2:	459c      	cmp	ip, r3
 80198b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80198b8:	d8f3      	bhi.n	80198a2 <__lshift+0x6e>
 80198ba:	ebac 0304 	sub.w	r3, ip, r4
 80198be:	3b15      	subs	r3, #21
 80198c0:	f023 0303 	bic.w	r3, r3, #3
 80198c4:	3304      	adds	r3, #4
 80198c6:	f104 0015 	add.w	r0, r4, #21
 80198ca:	4584      	cmp	ip, r0
 80198cc:	bf38      	it	cc
 80198ce:	2304      	movcc	r3, #4
 80198d0:	50ca      	str	r2, [r1, r3]
 80198d2:	b10a      	cbz	r2, 80198d8 <__lshift+0xa4>
 80198d4:	f108 0602 	add.w	r6, r8, #2
 80198d8:	3e01      	subs	r6, #1
 80198da:	4638      	mov	r0, r7
 80198dc:	612e      	str	r6, [r5, #16]
 80198de:	4621      	mov	r1, r4
 80198e0:	f7ff fd8c 	bl	80193fc <_Bfree>
 80198e4:	4628      	mov	r0, r5
 80198e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80198ee:	3301      	adds	r3, #1
 80198f0:	e7c5      	b.n	801987e <__lshift+0x4a>
 80198f2:	3904      	subs	r1, #4
 80198f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80198f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80198fc:	459c      	cmp	ip, r3
 80198fe:	d8f9      	bhi.n	80198f4 <__lshift+0xc0>
 8019900:	e7ea      	b.n	80198d8 <__lshift+0xa4>
 8019902:	bf00      	nop
 8019904:	0801ca34 	.word	0x0801ca34
 8019908:	0801cac4 	.word	0x0801cac4

0801990c <__mcmp>:
 801990c:	b530      	push	{r4, r5, lr}
 801990e:	6902      	ldr	r2, [r0, #16]
 8019910:	690c      	ldr	r4, [r1, #16]
 8019912:	1b12      	subs	r2, r2, r4
 8019914:	d10e      	bne.n	8019934 <__mcmp+0x28>
 8019916:	f100 0314 	add.w	r3, r0, #20
 801991a:	3114      	adds	r1, #20
 801991c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019920:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019924:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019928:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801992c:	42a5      	cmp	r5, r4
 801992e:	d003      	beq.n	8019938 <__mcmp+0x2c>
 8019930:	d305      	bcc.n	801993e <__mcmp+0x32>
 8019932:	2201      	movs	r2, #1
 8019934:	4610      	mov	r0, r2
 8019936:	bd30      	pop	{r4, r5, pc}
 8019938:	4283      	cmp	r3, r0
 801993a:	d3f3      	bcc.n	8019924 <__mcmp+0x18>
 801993c:	e7fa      	b.n	8019934 <__mcmp+0x28>
 801993e:	f04f 32ff 	mov.w	r2, #4294967295
 8019942:	e7f7      	b.n	8019934 <__mcmp+0x28>

08019944 <__mdiff>:
 8019944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019948:	460c      	mov	r4, r1
 801994a:	4606      	mov	r6, r0
 801994c:	4611      	mov	r1, r2
 801994e:	4620      	mov	r0, r4
 8019950:	4617      	mov	r7, r2
 8019952:	f7ff ffdb 	bl	801990c <__mcmp>
 8019956:	1e05      	subs	r5, r0, #0
 8019958:	d110      	bne.n	801997c <__mdiff+0x38>
 801995a:	4629      	mov	r1, r5
 801995c:	4630      	mov	r0, r6
 801995e:	f7ff fd0d 	bl	801937c <_Balloc>
 8019962:	b930      	cbnz	r0, 8019972 <__mdiff+0x2e>
 8019964:	4b39      	ldr	r3, [pc, #228]	; (8019a4c <__mdiff+0x108>)
 8019966:	4602      	mov	r2, r0
 8019968:	f240 2132 	movw	r1, #562	; 0x232
 801996c:	4838      	ldr	r0, [pc, #224]	; (8019a50 <__mdiff+0x10c>)
 801996e:	f000 fb53 	bl	801a018 <__assert_func>
 8019972:	2301      	movs	r3, #1
 8019974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801997c:	bfa4      	itt	ge
 801997e:	463b      	movge	r3, r7
 8019980:	4627      	movge	r7, r4
 8019982:	4630      	mov	r0, r6
 8019984:	6879      	ldr	r1, [r7, #4]
 8019986:	bfa6      	itte	ge
 8019988:	461c      	movge	r4, r3
 801998a:	2500      	movge	r5, #0
 801998c:	2501      	movlt	r5, #1
 801998e:	f7ff fcf5 	bl	801937c <_Balloc>
 8019992:	b920      	cbnz	r0, 801999e <__mdiff+0x5a>
 8019994:	4b2d      	ldr	r3, [pc, #180]	; (8019a4c <__mdiff+0x108>)
 8019996:	4602      	mov	r2, r0
 8019998:	f44f 7110 	mov.w	r1, #576	; 0x240
 801999c:	e7e6      	b.n	801996c <__mdiff+0x28>
 801999e:	693e      	ldr	r6, [r7, #16]
 80199a0:	60c5      	str	r5, [r0, #12]
 80199a2:	6925      	ldr	r5, [r4, #16]
 80199a4:	f107 0114 	add.w	r1, r7, #20
 80199a8:	f104 0914 	add.w	r9, r4, #20
 80199ac:	f100 0e14 	add.w	lr, r0, #20
 80199b0:	f107 0210 	add.w	r2, r7, #16
 80199b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80199b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80199bc:	46f2      	mov	sl, lr
 80199be:	2700      	movs	r7, #0
 80199c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80199c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80199c8:	fa1f f883 	uxth.w	r8, r3
 80199cc:	fa17 f78b 	uxtah	r7, r7, fp
 80199d0:	0c1b      	lsrs	r3, r3, #16
 80199d2:	eba7 0808 	sub.w	r8, r7, r8
 80199d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80199da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80199de:	fa1f f888 	uxth.w	r8, r8
 80199e2:	141f      	asrs	r7, r3, #16
 80199e4:	454d      	cmp	r5, r9
 80199e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80199ea:	f84a 3b04 	str.w	r3, [sl], #4
 80199ee:	d8e7      	bhi.n	80199c0 <__mdiff+0x7c>
 80199f0:	1b2b      	subs	r3, r5, r4
 80199f2:	3b15      	subs	r3, #21
 80199f4:	f023 0303 	bic.w	r3, r3, #3
 80199f8:	3304      	adds	r3, #4
 80199fa:	3415      	adds	r4, #21
 80199fc:	42a5      	cmp	r5, r4
 80199fe:	bf38      	it	cc
 8019a00:	2304      	movcc	r3, #4
 8019a02:	4419      	add	r1, r3
 8019a04:	4473      	add	r3, lr
 8019a06:	469e      	mov	lr, r3
 8019a08:	460d      	mov	r5, r1
 8019a0a:	4565      	cmp	r5, ip
 8019a0c:	d30e      	bcc.n	8019a2c <__mdiff+0xe8>
 8019a0e:	f10c 0203 	add.w	r2, ip, #3
 8019a12:	1a52      	subs	r2, r2, r1
 8019a14:	f022 0203 	bic.w	r2, r2, #3
 8019a18:	3903      	subs	r1, #3
 8019a1a:	458c      	cmp	ip, r1
 8019a1c:	bf38      	it	cc
 8019a1e:	2200      	movcc	r2, #0
 8019a20:	441a      	add	r2, r3
 8019a22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019a26:	b17b      	cbz	r3, 8019a48 <__mdiff+0x104>
 8019a28:	6106      	str	r6, [r0, #16]
 8019a2a:	e7a5      	b.n	8019978 <__mdiff+0x34>
 8019a2c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019a30:	fa17 f488 	uxtah	r4, r7, r8
 8019a34:	1422      	asrs	r2, r4, #16
 8019a36:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019a3a:	b2a4      	uxth	r4, r4
 8019a3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019a40:	f84e 4b04 	str.w	r4, [lr], #4
 8019a44:	1417      	asrs	r7, r2, #16
 8019a46:	e7e0      	b.n	8019a0a <__mdiff+0xc6>
 8019a48:	3e01      	subs	r6, #1
 8019a4a:	e7ea      	b.n	8019a22 <__mdiff+0xde>
 8019a4c:	0801ca34 	.word	0x0801ca34
 8019a50:	0801cac4 	.word	0x0801cac4

08019a54 <__ulp>:
 8019a54:	b082      	sub	sp, #8
 8019a56:	ed8d 0b00 	vstr	d0, [sp]
 8019a5a:	9b01      	ldr	r3, [sp, #4]
 8019a5c:	4912      	ldr	r1, [pc, #72]	; (8019aa8 <__ulp+0x54>)
 8019a5e:	4019      	ands	r1, r3
 8019a60:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019a64:	2900      	cmp	r1, #0
 8019a66:	dd05      	ble.n	8019a74 <__ulp+0x20>
 8019a68:	2200      	movs	r2, #0
 8019a6a:	460b      	mov	r3, r1
 8019a6c:	ec43 2b10 	vmov	d0, r2, r3
 8019a70:	b002      	add	sp, #8
 8019a72:	4770      	bx	lr
 8019a74:	4249      	negs	r1, r1
 8019a76:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019a7a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019a7e:	f04f 0200 	mov.w	r2, #0
 8019a82:	f04f 0300 	mov.w	r3, #0
 8019a86:	da04      	bge.n	8019a92 <__ulp+0x3e>
 8019a88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019a8c:	fa41 f300 	asr.w	r3, r1, r0
 8019a90:	e7ec      	b.n	8019a6c <__ulp+0x18>
 8019a92:	f1a0 0114 	sub.w	r1, r0, #20
 8019a96:	291e      	cmp	r1, #30
 8019a98:	bfda      	itte	le
 8019a9a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019a9e:	fa20 f101 	lsrle.w	r1, r0, r1
 8019aa2:	2101      	movgt	r1, #1
 8019aa4:	460a      	mov	r2, r1
 8019aa6:	e7e1      	b.n	8019a6c <__ulp+0x18>
 8019aa8:	7ff00000 	.word	0x7ff00000

08019aac <__b2d>:
 8019aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aae:	6905      	ldr	r5, [r0, #16]
 8019ab0:	f100 0714 	add.w	r7, r0, #20
 8019ab4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019ab8:	1f2e      	subs	r6, r5, #4
 8019aba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019abe:	4620      	mov	r0, r4
 8019ac0:	f7ff fd52 	bl	8019568 <__hi0bits>
 8019ac4:	f1c0 0320 	rsb	r3, r0, #32
 8019ac8:	280a      	cmp	r0, #10
 8019aca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019b48 <__b2d+0x9c>
 8019ace:	600b      	str	r3, [r1, #0]
 8019ad0:	dc14      	bgt.n	8019afc <__b2d+0x50>
 8019ad2:	f1c0 0e0b 	rsb	lr, r0, #11
 8019ad6:	fa24 f10e 	lsr.w	r1, r4, lr
 8019ada:	42b7      	cmp	r7, r6
 8019adc:	ea41 030c 	orr.w	r3, r1, ip
 8019ae0:	bf34      	ite	cc
 8019ae2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019ae6:	2100      	movcs	r1, #0
 8019ae8:	3015      	adds	r0, #21
 8019aea:	fa04 f000 	lsl.w	r0, r4, r0
 8019aee:	fa21 f10e 	lsr.w	r1, r1, lr
 8019af2:	ea40 0201 	orr.w	r2, r0, r1
 8019af6:	ec43 2b10 	vmov	d0, r2, r3
 8019afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019afc:	42b7      	cmp	r7, r6
 8019afe:	bf3a      	itte	cc
 8019b00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019b04:	f1a5 0608 	subcc.w	r6, r5, #8
 8019b08:	2100      	movcs	r1, #0
 8019b0a:	380b      	subs	r0, #11
 8019b0c:	d017      	beq.n	8019b3e <__b2d+0x92>
 8019b0e:	f1c0 0c20 	rsb	ip, r0, #32
 8019b12:	fa04 f500 	lsl.w	r5, r4, r0
 8019b16:	42be      	cmp	r6, r7
 8019b18:	fa21 f40c 	lsr.w	r4, r1, ip
 8019b1c:	ea45 0504 	orr.w	r5, r5, r4
 8019b20:	bf8c      	ite	hi
 8019b22:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019b26:	2400      	movls	r4, #0
 8019b28:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019b2c:	fa01 f000 	lsl.w	r0, r1, r0
 8019b30:	fa24 f40c 	lsr.w	r4, r4, ip
 8019b34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019b38:	ea40 0204 	orr.w	r2, r0, r4
 8019b3c:	e7db      	b.n	8019af6 <__b2d+0x4a>
 8019b3e:	ea44 030c 	orr.w	r3, r4, ip
 8019b42:	460a      	mov	r2, r1
 8019b44:	e7d7      	b.n	8019af6 <__b2d+0x4a>
 8019b46:	bf00      	nop
 8019b48:	3ff00000 	.word	0x3ff00000

08019b4c <__d2b>:
 8019b4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019b50:	4689      	mov	r9, r1
 8019b52:	2101      	movs	r1, #1
 8019b54:	ec57 6b10 	vmov	r6, r7, d0
 8019b58:	4690      	mov	r8, r2
 8019b5a:	f7ff fc0f 	bl	801937c <_Balloc>
 8019b5e:	4604      	mov	r4, r0
 8019b60:	b930      	cbnz	r0, 8019b70 <__d2b+0x24>
 8019b62:	4602      	mov	r2, r0
 8019b64:	4b25      	ldr	r3, [pc, #148]	; (8019bfc <__d2b+0xb0>)
 8019b66:	4826      	ldr	r0, [pc, #152]	; (8019c00 <__d2b+0xb4>)
 8019b68:	f240 310a 	movw	r1, #778	; 0x30a
 8019b6c:	f000 fa54 	bl	801a018 <__assert_func>
 8019b70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019b74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019b78:	bb35      	cbnz	r5, 8019bc8 <__d2b+0x7c>
 8019b7a:	2e00      	cmp	r6, #0
 8019b7c:	9301      	str	r3, [sp, #4]
 8019b7e:	d028      	beq.n	8019bd2 <__d2b+0x86>
 8019b80:	4668      	mov	r0, sp
 8019b82:	9600      	str	r6, [sp, #0]
 8019b84:	f7ff fd10 	bl	80195a8 <__lo0bits>
 8019b88:	9900      	ldr	r1, [sp, #0]
 8019b8a:	b300      	cbz	r0, 8019bce <__d2b+0x82>
 8019b8c:	9a01      	ldr	r2, [sp, #4]
 8019b8e:	f1c0 0320 	rsb	r3, r0, #32
 8019b92:	fa02 f303 	lsl.w	r3, r2, r3
 8019b96:	430b      	orrs	r3, r1
 8019b98:	40c2      	lsrs	r2, r0
 8019b9a:	6163      	str	r3, [r4, #20]
 8019b9c:	9201      	str	r2, [sp, #4]
 8019b9e:	9b01      	ldr	r3, [sp, #4]
 8019ba0:	61a3      	str	r3, [r4, #24]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	bf14      	ite	ne
 8019ba6:	2202      	movne	r2, #2
 8019ba8:	2201      	moveq	r2, #1
 8019baa:	6122      	str	r2, [r4, #16]
 8019bac:	b1d5      	cbz	r5, 8019be4 <__d2b+0x98>
 8019bae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019bb2:	4405      	add	r5, r0
 8019bb4:	f8c9 5000 	str.w	r5, [r9]
 8019bb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019bbc:	f8c8 0000 	str.w	r0, [r8]
 8019bc0:	4620      	mov	r0, r4
 8019bc2:	b003      	add	sp, #12
 8019bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019bcc:	e7d5      	b.n	8019b7a <__d2b+0x2e>
 8019bce:	6161      	str	r1, [r4, #20]
 8019bd0:	e7e5      	b.n	8019b9e <__d2b+0x52>
 8019bd2:	a801      	add	r0, sp, #4
 8019bd4:	f7ff fce8 	bl	80195a8 <__lo0bits>
 8019bd8:	9b01      	ldr	r3, [sp, #4]
 8019bda:	6163      	str	r3, [r4, #20]
 8019bdc:	2201      	movs	r2, #1
 8019bde:	6122      	str	r2, [r4, #16]
 8019be0:	3020      	adds	r0, #32
 8019be2:	e7e3      	b.n	8019bac <__d2b+0x60>
 8019be4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019be8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019bec:	f8c9 0000 	str.w	r0, [r9]
 8019bf0:	6918      	ldr	r0, [r3, #16]
 8019bf2:	f7ff fcb9 	bl	8019568 <__hi0bits>
 8019bf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019bfa:	e7df      	b.n	8019bbc <__d2b+0x70>
 8019bfc:	0801ca34 	.word	0x0801ca34
 8019c00:	0801cac4 	.word	0x0801cac4

08019c04 <__ratio>:
 8019c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c08:	4688      	mov	r8, r1
 8019c0a:	4669      	mov	r1, sp
 8019c0c:	4681      	mov	r9, r0
 8019c0e:	f7ff ff4d 	bl	8019aac <__b2d>
 8019c12:	a901      	add	r1, sp, #4
 8019c14:	4640      	mov	r0, r8
 8019c16:	ec55 4b10 	vmov	r4, r5, d0
 8019c1a:	f7ff ff47 	bl	8019aac <__b2d>
 8019c1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019c22:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019c26:	eba3 0c02 	sub.w	ip, r3, r2
 8019c2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019c2e:	1a9b      	subs	r3, r3, r2
 8019c30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019c34:	ec51 0b10 	vmov	r0, r1, d0
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	bfd6      	itet	le
 8019c3c:	460a      	movle	r2, r1
 8019c3e:	462a      	movgt	r2, r5
 8019c40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019c44:	468b      	mov	fp, r1
 8019c46:	462f      	mov	r7, r5
 8019c48:	bfd4      	ite	le
 8019c4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019c4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019c52:	4620      	mov	r0, r4
 8019c54:	ee10 2a10 	vmov	r2, s0
 8019c58:	465b      	mov	r3, fp
 8019c5a:	4639      	mov	r1, r7
 8019c5c:	f7e6 fdf6 	bl	800084c <__aeabi_ddiv>
 8019c60:	ec41 0b10 	vmov	d0, r0, r1
 8019c64:	b003      	add	sp, #12
 8019c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019c6a <__copybits>:
 8019c6a:	3901      	subs	r1, #1
 8019c6c:	b570      	push	{r4, r5, r6, lr}
 8019c6e:	1149      	asrs	r1, r1, #5
 8019c70:	6914      	ldr	r4, [r2, #16]
 8019c72:	3101      	adds	r1, #1
 8019c74:	f102 0314 	add.w	r3, r2, #20
 8019c78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019c7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019c80:	1f05      	subs	r5, r0, #4
 8019c82:	42a3      	cmp	r3, r4
 8019c84:	d30c      	bcc.n	8019ca0 <__copybits+0x36>
 8019c86:	1aa3      	subs	r3, r4, r2
 8019c88:	3b11      	subs	r3, #17
 8019c8a:	f023 0303 	bic.w	r3, r3, #3
 8019c8e:	3211      	adds	r2, #17
 8019c90:	42a2      	cmp	r2, r4
 8019c92:	bf88      	it	hi
 8019c94:	2300      	movhi	r3, #0
 8019c96:	4418      	add	r0, r3
 8019c98:	2300      	movs	r3, #0
 8019c9a:	4288      	cmp	r0, r1
 8019c9c:	d305      	bcc.n	8019caa <__copybits+0x40>
 8019c9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ca0:	f853 6b04 	ldr.w	r6, [r3], #4
 8019ca4:	f845 6f04 	str.w	r6, [r5, #4]!
 8019ca8:	e7eb      	b.n	8019c82 <__copybits+0x18>
 8019caa:	f840 3b04 	str.w	r3, [r0], #4
 8019cae:	e7f4      	b.n	8019c9a <__copybits+0x30>

08019cb0 <__any_on>:
 8019cb0:	f100 0214 	add.w	r2, r0, #20
 8019cb4:	6900      	ldr	r0, [r0, #16]
 8019cb6:	114b      	asrs	r3, r1, #5
 8019cb8:	4298      	cmp	r0, r3
 8019cba:	b510      	push	{r4, lr}
 8019cbc:	db11      	blt.n	8019ce2 <__any_on+0x32>
 8019cbe:	dd0a      	ble.n	8019cd6 <__any_on+0x26>
 8019cc0:	f011 011f 	ands.w	r1, r1, #31
 8019cc4:	d007      	beq.n	8019cd6 <__any_on+0x26>
 8019cc6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019cca:	fa24 f001 	lsr.w	r0, r4, r1
 8019cce:	fa00 f101 	lsl.w	r1, r0, r1
 8019cd2:	428c      	cmp	r4, r1
 8019cd4:	d10b      	bne.n	8019cee <__any_on+0x3e>
 8019cd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019cda:	4293      	cmp	r3, r2
 8019cdc:	d803      	bhi.n	8019ce6 <__any_on+0x36>
 8019cde:	2000      	movs	r0, #0
 8019ce0:	bd10      	pop	{r4, pc}
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	e7f7      	b.n	8019cd6 <__any_on+0x26>
 8019ce6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019cea:	2900      	cmp	r1, #0
 8019cec:	d0f5      	beq.n	8019cda <__any_on+0x2a>
 8019cee:	2001      	movs	r0, #1
 8019cf0:	e7f6      	b.n	8019ce0 <__any_on+0x30>

08019cf2 <_calloc_r>:
 8019cf2:	b513      	push	{r0, r1, r4, lr}
 8019cf4:	434a      	muls	r2, r1
 8019cf6:	4611      	mov	r1, r2
 8019cf8:	9201      	str	r2, [sp, #4]
 8019cfa:	f7fc fb41 	bl	8016380 <_malloc_r>
 8019cfe:	4604      	mov	r4, r0
 8019d00:	b118      	cbz	r0, 8019d0a <_calloc_r+0x18>
 8019d02:	9a01      	ldr	r2, [sp, #4]
 8019d04:	2100      	movs	r1, #0
 8019d06:	f7fc fae3 	bl	80162d0 <memset>
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	b002      	add	sp, #8
 8019d0e:	bd10      	pop	{r4, pc}

08019d10 <__ssputs_r>:
 8019d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d14:	688e      	ldr	r6, [r1, #8]
 8019d16:	429e      	cmp	r6, r3
 8019d18:	4682      	mov	sl, r0
 8019d1a:	460c      	mov	r4, r1
 8019d1c:	4690      	mov	r8, r2
 8019d1e:	461f      	mov	r7, r3
 8019d20:	d838      	bhi.n	8019d94 <__ssputs_r+0x84>
 8019d22:	898a      	ldrh	r2, [r1, #12]
 8019d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d28:	d032      	beq.n	8019d90 <__ssputs_r+0x80>
 8019d2a:	6825      	ldr	r5, [r4, #0]
 8019d2c:	6909      	ldr	r1, [r1, #16]
 8019d2e:	eba5 0901 	sub.w	r9, r5, r1
 8019d32:	6965      	ldr	r5, [r4, #20]
 8019d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019d3c:	3301      	adds	r3, #1
 8019d3e:	444b      	add	r3, r9
 8019d40:	106d      	asrs	r5, r5, #1
 8019d42:	429d      	cmp	r5, r3
 8019d44:	bf38      	it	cc
 8019d46:	461d      	movcc	r5, r3
 8019d48:	0553      	lsls	r3, r2, #21
 8019d4a:	d531      	bpl.n	8019db0 <__ssputs_r+0xa0>
 8019d4c:	4629      	mov	r1, r5
 8019d4e:	f7fc fb17 	bl	8016380 <_malloc_r>
 8019d52:	4606      	mov	r6, r0
 8019d54:	b950      	cbnz	r0, 8019d6c <__ssputs_r+0x5c>
 8019d56:	230c      	movs	r3, #12
 8019d58:	f8ca 3000 	str.w	r3, [sl]
 8019d5c:	89a3      	ldrh	r3, [r4, #12]
 8019d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d62:	81a3      	strh	r3, [r4, #12]
 8019d64:	f04f 30ff 	mov.w	r0, #4294967295
 8019d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d6c:	6921      	ldr	r1, [r4, #16]
 8019d6e:	464a      	mov	r2, r9
 8019d70:	f7fc fa86 	bl	8016280 <memcpy>
 8019d74:	89a3      	ldrh	r3, [r4, #12]
 8019d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d7e:	81a3      	strh	r3, [r4, #12]
 8019d80:	6126      	str	r6, [r4, #16]
 8019d82:	6165      	str	r5, [r4, #20]
 8019d84:	444e      	add	r6, r9
 8019d86:	eba5 0509 	sub.w	r5, r5, r9
 8019d8a:	6026      	str	r6, [r4, #0]
 8019d8c:	60a5      	str	r5, [r4, #8]
 8019d8e:	463e      	mov	r6, r7
 8019d90:	42be      	cmp	r6, r7
 8019d92:	d900      	bls.n	8019d96 <__ssputs_r+0x86>
 8019d94:	463e      	mov	r6, r7
 8019d96:	4632      	mov	r2, r6
 8019d98:	6820      	ldr	r0, [r4, #0]
 8019d9a:	4641      	mov	r1, r8
 8019d9c:	f7fc fa7e 	bl	801629c <memmove>
 8019da0:	68a3      	ldr	r3, [r4, #8]
 8019da2:	6822      	ldr	r2, [r4, #0]
 8019da4:	1b9b      	subs	r3, r3, r6
 8019da6:	4432      	add	r2, r6
 8019da8:	60a3      	str	r3, [r4, #8]
 8019daa:	6022      	str	r2, [r4, #0]
 8019dac:	2000      	movs	r0, #0
 8019dae:	e7db      	b.n	8019d68 <__ssputs_r+0x58>
 8019db0:	462a      	mov	r2, r5
 8019db2:	f000 f964 	bl	801a07e <_realloc_r>
 8019db6:	4606      	mov	r6, r0
 8019db8:	2800      	cmp	r0, #0
 8019dba:	d1e1      	bne.n	8019d80 <__ssputs_r+0x70>
 8019dbc:	6921      	ldr	r1, [r4, #16]
 8019dbe:	4650      	mov	r0, sl
 8019dc0:	f7fc fa8e 	bl	80162e0 <_free_r>
 8019dc4:	e7c7      	b.n	8019d56 <__ssputs_r+0x46>
	...

08019dc8 <_svfiprintf_r>:
 8019dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dcc:	4698      	mov	r8, r3
 8019dce:	898b      	ldrh	r3, [r1, #12]
 8019dd0:	061b      	lsls	r3, r3, #24
 8019dd2:	b09d      	sub	sp, #116	; 0x74
 8019dd4:	4607      	mov	r7, r0
 8019dd6:	460d      	mov	r5, r1
 8019dd8:	4614      	mov	r4, r2
 8019dda:	d50e      	bpl.n	8019dfa <_svfiprintf_r+0x32>
 8019ddc:	690b      	ldr	r3, [r1, #16]
 8019dde:	b963      	cbnz	r3, 8019dfa <_svfiprintf_r+0x32>
 8019de0:	2140      	movs	r1, #64	; 0x40
 8019de2:	f7fc facd 	bl	8016380 <_malloc_r>
 8019de6:	6028      	str	r0, [r5, #0]
 8019de8:	6128      	str	r0, [r5, #16]
 8019dea:	b920      	cbnz	r0, 8019df6 <_svfiprintf_r+0x2e>
 8019dec:	230c      	movs	r3, #12
 8019dee:	603b      	str	r3, [r7, #0]
 8019df0:	f04f 30ff 	mov.w	r0, #4294967295
 8019df4:	e0d1      	b.n	8019f9a <_svfiprintf_r+0x1d2>
 8019df6:	2340      	movs	r3, #64	; 0x40
 8019df8:	616b      	str	r3, [r5, #20]
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8019dfe:	2320      	movs	r3, #32
 8019e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e08:	2330      	movs	r3, #48	; 0x30
 8019e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019fb4 <_svfiprintf_r+0x1ec>
 8019e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e12:	f04f 0901 	mov.w	r9, #1
 8019e16:	4623      	mov	r3, r4
 8019e18:	469a      	mov	sl, r3
 8019e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e1e:	b10a      	cbz	r2, 8019e24 <_svfiprintf_r+0x5c>
 8019e20:	2a25      	cmp	r2, #37	; 0x25
 8019e22:	d1f9      	bne.n	8019e18 <_svfiprintf_r+0x50>
 8019e24:	ebba 0b04 	subs.w	fp, sl, r4
 8019e28:	d00b      	beq.n	8019e42 <_svfiprintf_r+0x7a>
 8019e2a:	465b      	mov	r3, fp
 8019e2c:	4622      	mov	r2, r4
 8019e2e:	4629      	mov	r1, r5
 8019e30:	4638      	mov	r0, r7
 8019e32:	f7ff ff6d 	bl	8019d10 <__ssputs_r>
 8019e36:	3001      	adds	r0, #1
 8019e38:	f000 80aa 	beq.w	8019f90 <_svfiprintf_r+0x1c8>
 8019e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e3e:	445a      	add	r2, fp
 8019e40:	9209      	str	r2, [sp, #36]	; 0x24
 8019e42:	f89a 3000 	ldrb.w	r3, [sl]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	f000 80a2 	beq.w	8019f90 <_svfiprintf_r+0x1c8>
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8019e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e56:	f10a 0a01 	add.w	sl, sl, #1
 8019e5a:	9304      	str	r3, [sp, #16]
 8019e5c:	9307      	str	r3, [sp, #28]
 8019e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e62:	931a      	str	r3, [sp, #104]	; 0x68
 8019e64:	4654      	mov	r4, sl
 8019e66:	2205      	movs	r2, #5
 8019e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e6c:	4851      	ldr	r0, [pc, #324]	; (8019fb4 <_svfiprintf_r+0x1ec>)
 8019e6e:	f7e6 f9b7 	bl	80001e0 <memchr>
 8019e72:	9a04      	ldr	r2, [sp, #16]
 8019e74:	b9d8      	cbnz	r0, 8019eae <_svfiprintf_r+0xe6>
 8019e76:	06d0      	lsls	r0, r2, #27
 8019e78:	bf44      	itt	mi
 8019e7a:	2320      	movmi	r3, #32
 8019e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e80:	0711      	lsls	r1, r2, #28
 8019e82:	bf44      	itt	mi
 8019e84:	232b      	movmi	r3, #43	; 0x2b
 8019e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8019e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8019e90:	d015      	beq.n	8019ebe <_svfiprintf_r+0xf6>
 8019e92:	9a07      	ldr	r2, [sp, #28]
 8019e94:	4654      	mov	r4, sl
 8019e96:	2000      	movs	r0, #0
 8019e98:	f04f 0c0a 	mov.w	ip, #10
 8019e9c:	4621      	mov	r1, r4
 8019e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ea2:	3b30      	subs	r3, #48	; 0x30
 8019ea4:	2b09      	cmp	r3, #9
 8019ea6:	d94e      	bls.n	8019f46 <_svfiprintf_r+0x17e>
 8019ea8:	b1b0      	cbz	r0, 8019ed8 <_svfiprintf_r+0x110>
 8019eaa:	9207      	str	r2, [sp, #28]
 8019eac:	e014      	b.n	8019ed8 <_svfiprintf_r+0x110>
 8019eae:	eba0 0308 	sub.w	r3, r0, r8
 8019eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8019eb6:	4313      	orrs	r3, r2
 8019eb8:	9304      	str	r3, [sp, #16]
 8019eba:	46a2      	mov	sl, r4
 8019ebc:	e7d2      	b.n	8019e64 <_svfiprintf_r+0x9c>
 8019ebe:	9b03      	ldr	r3, [sp, #12]
 8019ec0:	1d19      	adds	r1, r3, #4
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	9103      	str	r1, [sp, #12]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	bfbb      	ittet	lt
 8019eca:	425b      	neglt	r3, r3
 8019ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8019ed0:	9307      	strge	r3, [sp, #28]
 8019ed2:	9307      	strlt	r3, [sp, #28]
 8019ed4:	bfb8      	it	lt
 8019ed6:	9204      	strlt	r2, [sp, #16]
 8019ed8:	7823      	ldrb	r3, [r4, #0]
 8019eda:	2b2e      	cmp	r3, #46	; 0x2e
 8019edc:	d10c      	bne.n	8019ef8 <_svfiprintf_r+0x130>
 8019ede:	7863      	ldrb	r3, [r4, #1]
 8019ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8019ee2:	d135      	bne.n	8019f50 <_svfiprintf_r+0x188>
 8019ee4:	9b03      	ldr	r3, [sp, #12]
 8019ee6:	1d1a      	adds	r2, r3, #4
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	9203      	str	r2, [sp, #12]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	bfb8      	it	lt
 8019ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ef4:	3402      	adds	r4, #2
 8019ef6:	9305      	str	r3, [sp, #20]
 8019ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019fc4 <_svfiprintf_r+0x1fc>
 8019efc:	7821      	ldrb	r1, [r4, #0]
 8019efe:	2203      	movs	r2, #3
 8019f00:	4650      	mov	r0, sl
 8019f02:	f7e6 f96d 	bl	80001e0 <memchr>
 8019f06:	b140      	cbz	r0, 8019f1a <_svfiprintf_r+0x152>
 8019f08:	2340      	movs	r3, #64	; 0x40
 8019f0a:	eba0 000a 	sub.w	r0, r0, sl
 8019f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8019f12:	9b04      	ldr	r3, [sp, #16]
 8019f14:	4303      	orrs	r3, r0
 8019f16:	3401      	adds	r4, #1
 8019f18:	9304      	str	r3, [sp, #16]
 8019f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f1e:	4826      	ldr	r0, [pc, #152]	; (8019fb8 <_svfiprintf_r+0x1f0>)
 8019f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f24:	2206      	movs	r2, #6
 8019f26:	f7e6 f95b 	bl	80001e0 <memchr>
 8019f2a:	2800      	cmp	r0, #0
 8019f2c:	d038      	beq.n	8019fa0 <_svfiprintf_r+0x1d8>
 8019f2e:	4b23      	ldr	r3, [pc, #140]	; (8019fbc <_svfiprintf_r+0x1f4>)
 8019f30:	bb1b      	cbnz	r3, 8019f7a <_svfiprintf_r+0x1b2>
 8019f32:	9b03      	ldr	r3, [sp, #12]
 8019f34:	3307      	adds	r3, #7
 8019f36:	f023 0307 	bic.w	r3, r3, #7
 8019f3a:	3308      	adds	r3, #8
 8019f3c:	9303      	str	r3, [sp, #12]
 8019f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f40:	4433      	add	r3, r6
 8019f42:	9309      	str	r3, [sp, #36]	; 0x24
 8019f44:	e767      	b.n	8019e16 <_svfiprintf_r+0x4e>
 8019f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f4a:	460c      	mov	r4, r1
 8019f4c:	2001      	movs	r0, #1
 8019f4e:	e7a5      	b.n	8019e9c <_svfiprintf_r+0xd4>
 8019f50:	2300      	movs	r3, #0
 8019f52:	3401      	adds	r4, #1
 8019f54:	9305      	str	r3, [sp, #20]
 8019f56:	4619      	mov	r1, r3
 8019f58:	f04f 0c0a 	mov.w	ip, #10
 8019f5c:	4620      	mov	r0, r4
 8019f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f62:	3a30      	subs	r2, #48	; 0x30
 8019f64:	2a09      	cmp	r2, #9
 8019f66:	d903      	bls.n	8019f70 <_svfiprintf_r+0x1a8>
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d0c5      	beq.n	8019ef8 <_svfiprintf_r+0x130>
 8019f6c:	9105      	str	r1, [sp, #20]
 8019f6e:	e7c3      	b.n	8019ef8 <_svfiprintf_r+0x130>
 8019f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f74:	4604      	mov	r4, r0
 8019f76:	2301      	movs	r3, #1
 8019f78:	e7f0      	b.n	8019f5c <_svfiprintf_r+0x194>
 8019f7a:	ab03      	add	r3, sp, #12
 8019f7c:	9300      	str	r3, [sp, #0]
 8019f7e:	462a      	mov	r2, r5
 8019f80:	4b0f      	ldr	r3, [pc, #60]	; (8019fc0 <_svfiprintf_r+0x1f8>)
 8019f82:	a904      	add	r1, sp, #16
 8019f84:	4638      	mov	r0, r7
 8019f86:	f7fc faf5 	bl	8016574 <_printf_float>
 8019f8a:	1c42      	adds	r2, r0, #1
 8019f8c:	4606      	mov	r6, r0
 8019f8e:	d1d6      	bne.n	8019f3e <_svfiprintf_r+0x176>
 8019f90:	89ab      	ldrh	r3, [r5, #12]
 8019f92:	065b      	lsls	r3, r3, #25
 8019f94:	f53f af2c 	bmi.w	8019df0 <_svfiprintf_r+0x28>
 8019f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f9a:	b01d      	add	sp, #116	; 0x74
 8019f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fa0:	ab03      	add	r3, sp, #12
 8019fa2:	9300      	str	r3, [sp, #0]
 8019fa4:	462a      	mov	r2, r5
 8019fa6:	4b06      	ldr	r3, [pc, #24]	; (8019fc0 <_svfiprintf_r+0x1f8>)
 8019fa8:	a904      	add	r1, sp, #16
 8019faa:	4638      	mov	r0, r7
 8019fac:	f7fc fd86 	bl	8016abc <_printf_i>
 8019fb0:	e7eb      	b.n	8019f8a <_svfiprintf_r+0x1c2>
 8019fb2:	bf00      	nop
 8019fb4:	0801cc24 	.word	0x0801cc24
 8019fb8:	0801cc2e 	.word	0x0801cc2e
 8019fbc:	08016575 	.word	0x08016575
 8019fc0:	08019d11 	.word	0x08019d11
 8019fc4:	0801cc2a 	.word	0x0801cc2a

08019fc8 <nan>:
 8019fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019fd0 <nan+0x8>
 8019fcc:	4770      	bx	lr
 8019fce:	bf00      	nop
 8019fd0:	00000000 	.word	0x00000000
 8019fd4:	7ff80000 	.word	0x7ff80000

08019fd8 <strncmp>:
 8019fd8:	b510      	push	{r4, lr}
 8019fda:	b16a      	cbz	r2, 8019ff8 <strncmp+0x20>
 8019fdc:	3901      	subs	r1, #1
 8019fde:	1884      	adds	r4, r0, r2
 8019fe0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019fe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019fe8:	4293      	cmp	r3, r2
 8019fea:	d103      	bne.n	8019ff4 <strncmp+0x1c>
 8019fec:	42a0      	cmp	r0, r4
 8019fee:	d001      	beq.n	8019ff4 <strncmp+0x1c>
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d1f5      	bne.n	8019fe0 <strncmp+0x8>
 8019ff4:	1a98      	subs	r0, r3, r2
 8019ff6:	bd10      	pop	{r4, pc}
 8019ff8:	4610      	mov	r0, r2
 8019ffa:	e7fc      	b.n	8019ff6 <strncmp+0x1e>

08019ffc <__ascii_wctomb>:
 8019ffc:	b149      	cbz	r1, 801a012 <__ascii_wctomb+0x16>
 8019ffe:	2aff      	cmp	r2, #255	; 0xff
 801a000:	bf85      	ittet	hi
 801a002:	238a      	movhi	r3, #138	; 0x8a
 801a004:	6003      	strhi	r3, [r0, #0]
 801a006:	700a      	strbls	r2, [r1, #0]
 801a008:	f04f 30ff 	movhi.w	r0, #4294967295
 801a00c:	bf98      	it	ls
 801a00e:	2001      	movls	r0, #1
 801a010:	4770      	bx	lr
 801a012:	4608      	mov	r0, r1
 801a014:	4770      	bx	lr
	...

0801a018 <__assert_func>:
 801a018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a01a:	4614      	mov	r4, r2
 801a01c:	461a      	mov	r2, r3
 801a01e:	4b09      	ldr	r3, [pc, #36]	; (801a044 <__assert_func+0x2c>)
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	4605      	mov	r5, r0
 801a024:	68d8      	ldr	r0, [r3, #12]
 801a026:	b14c      	cbz	r4, 801a03c <__assert_func+0x24>
 801a028:	4b07      	ldr	r3, [pc, #28]	; (801a048 <__assert_func+0x30>)
 801a02a:	9100      	str	r1, [sp, #0]
 801a02c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a030:	4906      	ldr	r1, [pc, #24]	; (801a04c <__assert_func+0x34>)
 801a032:	462b      	mov	r3, r5
 801a034:	f000 f80e 	bl	801a054 <fiprintf>
 801a038:	f000 fa60 	bl	801a4fc <abort>
 801a03c:	4b04      	ldr	r3, [pc, #16]	; (801a050 <__assert_func+0x38>)
 801a03e:	461c      	mov	r4, r3
 801a040:	e7f3      	b.n	801a02a <__assert_func+0x12>
 801a042:	bf00      	nop
 801a044:	20004210 	.word	0x20004210
 801a048:	0801cc35 	.word	0x0801cc35
 801a04c:	0801cc42 	.word	0x0801cc42
 801a050:	0801cc70 	.word	0x0801cc70

0801a054 <fiprintf>:
 801a054:	b40e      	push	{r1, r2, r3}
 801a056:	b503      	push	{r0, r1, lr}
 801a058:	4601      	mov	r1, r0
 801a05a:	ab03      	add	r3, sp, #12
 801a05c:	4805      	ldr	r0, [pc, #20]	; (801a074 <fiprintf+0x20>)
 801a05e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a062:	6800      	ldr	r0, [r0, #0]
 801a064:	9301      	str	r3, [sp, #4]
 801a066:	f000 f859 	bl	801a11c <_vfiprintf_r>
 801a06a:	b002      	add	sp, #8
 801a06c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a070:	b003      	add	sp, #12
 801a072:	4770      	bx	lr
 801a074:	20004210 	.word	0x20004210

0801a078 <__retarget_lock_init_recursive>:
 801a078:	4770      	bx	lr

0801a07a <__retarget_lock_acquire_recursive>:
 801a07a:	4770      	bx	lr

0801a07c <__retarget_lock_release_recursive>:
 801a07c:	4770      	bx	lr

0801a07e <_realloc_r>:
 801a07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a080:	4607      	mov	r7, r0
 801a082:	4614      	mov	r4, r2
 801a084:	460e      	mov	r6, r1
 801a086:	b921      	cbnz	r1, 801a092 <_realloc_r+0x14>
 801a088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a08c:	4611      	mov	r1, r2
 801a08e:	f7fc b977 	b.w	8016380 <_malloc_r>
 801a092:	b922      	cbnz	r2, 801a09e <_realloc_r+0x20>
 801a094:	f7fc f924 	bl	80162e0 <_free_r>
 801a098:	4625      	mov	r5, r4
 801a09a:	4628      	mov	r0, r5
 801a09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a09e:	f000 fc51 	bl	801a944 <_malloc_usable_size_r>
 801a0a2:	42a0      	cmp	r0, r4
 801a0a4:	d20f      	bcs.n	801a0c6 <_realloc_r+0x48>
 801a0a6:	4621      	mov	r1, r4
 801a0a8:	4638      	mov	r0, r7
 801a0aa:	f7fc f969 	bl	8016380 <_malloc_r>
 801a0ae:	4605      	mov	r5, r0
 801a0b0:	2800      	cmp	r0, #0
 801a0b2:	d0f2      	beq.n	801a09a <_realloc_r+0x1c>
 801a0b4:	4631      	mov	r1, r6
 801a0b6:	4622      	mov	r2, r4
 801a0b8:	f7fc f8e2 	bl	8016280 <memcpy>
 801a0bc:	4631      	mov	r1, r6
 801a0be:	4638      	mov	r0, r7
 801a0c0:	f7fc f90e 	bl	80162e0 <_free_r>
 801a0c4:	e7e9      	b.n	801a09a <_realloc_r+0x1c>
 801a0c6:	4635      	mov	r5, r6
 801a0c8:	e7e7      	b.n	801a09a <_realloc_r+0x1c>

0801a0ca <__sfputc_r>:
 801a0ca:	6893      	ldr	r3, [r2, #8]
 801a0cc:	3b01      	subs	r3, #1
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	b410      	push	{r4}
 801a0d2:	6093      	str	r3, [r2, #8]
 801a0d4:	da08      	bge.n	801a0e8 <__sfputc_r+0x1e>
 801a0d6:	6994      	ldr	r4, [r2, #24]
 801a0d8:	42a3      	cmp	r3, r4
 801a0da:	db01      	blt.n	801a0e0 <__sfputc_r+0x16>
 801a0dc:	290a      	cmp	r1, #10
 801a0de:	d103      	bne.n	801a0e8 <__sfputc_r+0x1e>
 801a0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0e4:	f000 b94a 	b.w	801a37c <__swbuf_r>
 801a0e8:	6813      	ldr	r3, [r2, #0]
 801a0ea:	1c58      	adds	r0, r3, #1
 801a0ec:	6010      	str	r0, [r2, #0]
 801a0ee:	7019      	strb	r1, [r3, #0]
 801a0f0:	4608      	mov	r0, r1
 801a0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0f6:	4770      	bx	lr

0801a0f8 <__sfputs_r>:
 801a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0fa:	4606      	mov	r6, r0
 801a0fc:	460f      	mov	r7, r1
 801a0fe:	4614      	mov	r4, r2
 801a100:	18d5      	adds	r5, r2, r3
 801a102:	42ac      	cmp	r4, r5
 801a104:	d101      	bne.n	801a10a <__sfputs_r+0x12>
 801a106:	2000      	movs	r0, #0
 801a108:	e007      	b.n	801a11a <__sfputs_r+0x22>
 801a10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a10e:	463a      	mov	r2, r7
 801a110:	4630      	mov	r0, r6
 801a112:	f7ff ffda 	bl	801a0ca <__sfputc_r>
 801a116:	1c43      	adds	r3, r0, #1
 801a118:	d1f3      	bne.n	801a102 <__sfputs_r+0xa>
 801a11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a11c <_vfiprintf_r>:
 801a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a120:	460d      	mov	r5, r1
 801a122:	b09d      	sub	sp, #116	; 0x74
 801a124:	4614      	mov	r4, r2
 801a126:	4698      	mov	r8, r3
 801a128:	4606      	mov	r6, r0
 801a12a:	b118      	cbz	r0, 801a134 <_vfiprintf_r+0x18>
 801a12c:	6983      	ldr	r3, [r0, #24]
 801a12e:	b90b      	cbnz	r3, 801a134 <_vfiprintf_r+0x18>
 801a130:	f000 fb06 	bl	801a740 <__sinit>
 801a134:	4b89      	ldr	r3, [pc, #548]	; (801a35c <_vfiprintf_r+0x240>)
 801a136:	429d      	cmp	r5, r3
 801a138:	d11b      	bne.n	801a172 <_vfiprintf_r+0x56>
 801a13a:	6875      	ldr	r5, [r6, #4]
 801a13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a13e:	07d9      	lsls	r1, r3, #31
 801a140:	d405      	bmi.n	801a14e <_vfiprintf_r+0x32>
 801a142:	89ab      	ldrh	r3, [r5, #12]
 801a144:	059a      	lsls	r2, r3, #22
 801a146:	d402      	bmi.n	801a14e <_vfiprintf_r+0x32>
 801a148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a14a:	f7ff ff96 	bl	801a07a <__retarget_lock_acquire_recursive>
 801a14e:	89ab      	ldrh	r3, [r5, #12]
 801a150:	071b      	lsls	r3, r3, #28
 801a152:	d501      	bpl.n	801a158 <_vfiprintf_r+0x3c>
 801a154:	692b      	ldr	r3, [r5, #16]
 801a156:	b9eb      	cbnz	r3, 801a194 <_vfiprintf_r+0x78>
 801a158:	4629      	mov	r1, r5
 801a15a:	4630      	mov	r0, r6
 801a15c:	f000 f960 	bl	801a420 <__swsetup_r>
 801a160:	b1c0      	cbz	r0, 801a194 <_vfiprintf_r+0x78>
 801a162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a164:	07dc      	lsls	r4, r3, #31
 801a166:	d50e      	bpl.n	801a186 <_vfiprintf_r+0x6a>
 801a168:	f04f 30ff 	mov.w	r0, #4294967295
 801a16c:	b01d      	add	sp, #116	; 0x74
 801a16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a172:	4b7b      	ldr	r3, [pc, #492]	; (801a360 <_vfiprintf_r+0x244>)
 801a174:	429d      	cmp	r5, r3
 801a176:	d101      	bne.n	801a17c <_vfiprintf_r+0x60>
 801a178:	68b5      	ldr	r5, [r6, #8]
 801a17a:	e7df      	b.n	801a13c <_vfiprintf_r+0x20>
 801a17c:	4b79      	ldr	r3, [pc, #484]	; (801a364 <_vfiprintf_r+0x248>)
 801a17e:	429d      	cmp	r5, r3
 801a180:	bf08      	it	eq
 801a182:	68f5      	ldreq	r5, [r6, #12]
 801a184:	e7da      	b.n	801a13c <_vfiprintf_r+0x20>
 801a186:	89ab      	ldrh	r3, [r5, #12]
 801a188:	0598      	lsls	r0, r3, #22
 801a18a:	d4ed      	bmi.n	801a168 <_vfiprintf_r+0x4c>
 801a18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a18e:	f7ff ff75 	bl	801a07c <__retarget_lock_release_recursive>
 801a192:	e7e9      	b.n	801a168 <_vfiprintf_r+0x4c>
 801a194:	2300      	movs	r3, #0
 801a196:	9309      	str	r3, [sp, #36]	; 0x24
 801a198:	2320      	movs	r3, #32
 801a19a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a19e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1a2:	2330      	movs	r3, #48	; 0x30
 801a1a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a368 <_vfiprintf_r+0x24c>
 801a1a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1ac:	f04f 0901 	mov.w	r9, #1
 801a1b0:	4623      	mov	r3, r4
 801a1b2:	469a      	mov	sl, r3
 801a1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1b8:	b10a      	cbz	r2, 801a1be <_vfiprintf_r+0xa2>
 801a1ba:	2a25      	cmp	r2, #37	; 0x25
 801a1bc:	d1f9      	bne.n	801a1b2 <_vfiprintf_r+0x96>
 801a1be:	ebba 0b04 	subs.w	fp, sl, r4
 801a1c2:	d00b      	beq.n	801a1dc <_vfiprintf_r+0xc0>
 801a1c4:	465b      	mov	r3, fp
 801a1c6:	4622      	mov	r2, r4
 801a1c8:	4629      	mov	r1, r5
 801a1ca:	4630      	mov	r0, r6
 801a1cc:	f7ff ff94 	bl	801a0f8 <__sfputs_r>
 801a1d0:	3001      	adds	r0, #1
 801a1d2:	f000 80aa 	beq.w	801a32a <_vfiprintf_r+0x20e>
 801a1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1d8:	445a      	add	r2, fp
 801a1da:	9209      	str	r2, [sp, #36]	; 0x24
 801a1dc:	f89a 3000 	ldrb.w	r3, [sl]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	f000 80a2 	beq.w	801a32a <_vfiprintf_r+0x20e>
 801a1e6:	2300      	movs	r3, #0
 801a1e8:	f04f 32ff 	mov.w	r2, #4294967295
 801a1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a1f0:	f10a 0a01 	add.w	sl, sl, #1
 801a1f4:	9304      	str	r3, [sp, #16]
 801a1f6:	9307      	str	r3, [sp, #28]
 801a1f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a1fc:	931a      	str	r3, [sp, #104]	; 0x68
 801a1fe:	4654      	mov	r4, sl
 801a200:	2205      	movs	r2, #5
 801a202:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a206:	4858      	ldr	r0, [pc, #352]	; (801a368 <_vfiprintf_r+0x24c>)
 801a208:	f7e5 ffea 	bl	80001e0 <memchr>
 801a20c:	9a04      	ldr	r2, [sp, #16]
 801a20e:	b9d8      	cbnz	r0, 801a248 <_vfiprintf_r+0x12c>
 801a210:	06d1      	lsls	r1, r2, #27
 801a212:	bf44      	itt	mi
 801a214:	2320      	movmi	r3, #32
 801a216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a21a:	0713      	lsls	r3, r2, #28
 801a21c:	bf44      	itt	mi
 801a21e:	232b      	movmi	r3, #43	; 0x2b
 801a220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a224:	f89a 3000 	ldrb.w	r3, [sl]
 801a228:	2b2a      	cmp	r3, #42	; 0x2a
 801a22a:	d015      	beq.n	801a258 <_vfiprintf_r+0x13c>
 801a22c:	9a07      	ldr	r2, [sp, #28]
 801a22e:	4654      	mov	r4, sl
 801a230:	2000      	movs	r0, #0
 801a232:	f04f 0c0a 	mov.w	ip, #10
 801a236:	4621      	mov	r1, r4
 801a238:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a23c:	3b30      	subs	r3, #48	; 0x30
 801a23e:	2b09      	cmp	r3, #9
 801a240:	d94e      	bls.n	801a2e0 <_vfiprintf_r+0x1c4>
 801a242:	b1b0      	cbz	r0, 801a272 <_vfiprintf_r+0x156>
 801a244:	9207      	str	r2, [sp, #28]
 801a246:	e014      	b.n	801a272 <_vfiprintf_r+0x156>
 801a248:	eba0 0308 	sub.w	r3, r0, r8
 801a24c:	fa09 f303 	lsl.w	r3, r9, r3
 801a250:	4313      	orrs	r3, r2
 801a252:	9304      	str	r3, [sp, #16]
 801a254:	46a2      	mov	sl, r4
 801a256:	e7d2      	b.n	801a1fe <_vfiprintf_r+0xe2>
 801a258:	9b03      	ldr	r3, [sp, #12]
 801a25a:	1d19      	adds	r1, r3, #4
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	9103      	str	r1, [sp, #12]
 801a260:	2b00      	cmp	r3, #0
 801a262:	bfbb      	ittet	lt
 801a264:	425b      	neglt	r3, r3
 801a266:	f042 0202 	orrlt.w	r2, r2, #2
 801a26a:	9307      	strge	r3, [sp, #28]
 801a26c:	9307      	strlt	r3, [sp, #28]
 801a26e:	bfb8      	it	lt
 801a270:	9204      	strlt	r2, [sp, #16]
 801a272:	7823      	ldrb	r3, [r4, #0]
 801a274:	2b2e      	cmp	r3, #46	; 0x2e
 801a276:	d10c      	bne.n	801a292 <_vfiprintf_r+0x176>
 801a278:	7863      	ldrb	r3, [r4, #1]
 801a27a:	2b2a      	cmp	r3, #42	; 0x2a
 801a27c:	d135      	bne.n	801a2ea <_vfiprintf_r+0x1ce>
 801a27e:	9b03      	ldr	r3, [sp, #12]
 801a280:	1d1a      	adds	r2, r3, #4
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	9203      	str	r2, [sp, #12]
 801a286:	2b00      	cmp	r3, #0
 801a288:	bfb8      	it	lt
 801a28a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a28e:	3402      	adds	r4, #2
 801a290:	9305      	str	r3, [sp, #20]
 801a292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a378 <_vfiprintf_r+0x25c>
 801a296:	7821      	ldrb	r1, [r4, #0]
 801a298:	2203      	movs	r2, #3
 801a29a:	4650      	mov	r0, sl
 801a29c:	f7e5 ffa0 	bl	80001e0 <memchr>
 801a2a0:	b140      	cbz	r0, 801a2b4 <_vfiprintf_r+0x198>
 801a2a2:	2340      	movs	r3, #64	; 0x40
 801a2a4:	eba0 000a 	sub.w	r0, r0, sl
 801a2a8:	fa03 f000 	lsl.w	r0, r3, r0
 801a2ac:	9b04      	ldr	r3, [sp, #16]
 801a2ae:	4303      	orrs	r3, r0
 801a2b0:	3401      	adds	r4, #1
 801a2b2:	9304      	str	r3, [sp, #16]
 801a2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2b8:	482c      	ldr	r0, [pc, #176]	; (801a36c <_vfiprintf_r+0x250>)
 801a2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a2be:	2206      	movs	r2, #6
 801a2c0:	f7e5 ff8e 	bl	80001e0 <memchr>
 801a2c4:	2800      	cmp	r0, #0
 801a2c6:	d03f      	beq.n	801a348 <_vfiprintf_r+0x22c>
 801a2c8:	4b29      	ldr	r3, [pc, #164]	; (801a370 <_vfiprintf_r+0x254>)
 801a2ca:	bb1b      	cbnz	r3, 801a314 <_vfiprintf_r+0x1f8>
 801a2cc:	9b03      	ldr	r3, [sp, #12]
 801a2ce:	3307      	adds	r3, #7
 801a2d0:	f023 0307 	bic.w	r3, r3, #7
 801a2d4:	3308      	adds	r3, #8
 801a2d6:	9303      	str	r3, [sp, #12]
 801a2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2da:	443b      	add	r3, r7
 801a2dc:	9309      	str	r3, [sp, #36]	; 0x24
 801a2de:	e767      	b.n	801a1b0 <_vfiprintf_r+0x94>
 801a2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2e4:	460c      	mov	r4, r1
 801a2e6:	2001      	movs	r0, #1
 801a2e8:	e7a5      	b.n	801a236 <_vfiprintf_r+0x11a>
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	3401      	adds	r4, #1
 801a2ee:	9305      	str	r3, [sp, #20]
 801a2f0:	4619      	mov	r1, r3
 801a2f2:	f04f 0c0a 	mov.w	ip, #10
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a2fc:	3a30      	subs	r2, #48	; 0x30
 801a2fe:	2a09      	cmp	r2, #9
 801a300:	d903      	bls.n	801a30a <_vfiprintf_r+0x1ee>
 801a302:	2b00      	cmp	r3, #0
 801a304:	d0c5      	beq.n	801a292 <_vfiprintf_r+0x176>
 801a306:	9105      	str	r1, [sp, #20]
 801a308:	e7c3      	b.n	801a292 <_vfiprintf_r+0x176>
 801a30a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a30e:	4604      	mov	r4, r0
 801a310:	2301      	movs	r3, #1
 801a312:	e7f0      	b.n	801a2f6 <_vfiprintf_r+0x1da>
 801a314:	ab03      	add	r3, sp, #12
 801a316:	9300      	str	r3, [sp, #0]
 801a318:	462a      	mov	r2, r5
 801a31a:	4b16      	ldr	r3, [pc, #88]	; (801a374 <_vfiprintf_r+0x258>)
 801a31c:	a904      	add	r1, sp, #16
 801a31e:	4630      	mov	r0, r6
 801a320:	f7fc f928 	bl	8016574 <_printf_float>
 801a324:	4607      	mov	r7, r0
 801a326:	1c78      	adds	r0, r7, #1
 801a328:	d1d6      	bne.n	801a2d8 <_vfiprintf_r+0x1bc>
 801a32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a32c:	07d9      	lsls	r1, r3, #31
 801a32e:	d405      	bmi.n	801a33c <_vfiprintf_r+0x220>
 801a330:	89ab      	ldrh	r3, [r5, #12]
 801a332:	059a      	lsls	r2, r3, #22
 801a334:	d402      	bmi.n	801a33c <_vfiprintf_r+0x220>
 801a336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a338:	f7ff fea0 	bl	801a07c <__retarget_lock_release_recursive>
 801a33c:	89ab      	ldrh	r3, [r5, #12]
 801a33e:	065b      	lsls	r3, r3, #25
 801a340:	f53f af12 	bmi.w	801a168 <_vfiprintf_r+0x4c>
 801a344:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a346:	e711      	b.n	801a16c <_vfiprintf_r+0x50>
 801a348:	ab03      	add	r3, sp, #12
 801a34a:	9300      	str	r3, [sp, #0]
 801a34c:	462a      	mov	r2, r5
 801a34e:	4b09      	ldr	r3, [pc, #36]	; (801a374 <_vfiprintf_r+0x258>)
 801a350:	a904      	add	r1, sp, #16
 801a352:	4630      	mov	r0, r6
 801a354:	f7fc fbb2 	bl	8016abc <_printf_i>
 801a358:	e7e4      	b.n	801a324 <_vfiprintf_r+0x208>
 801a35a:	bf00      	nop
 801a35c:	0801cc94 	.word	0x0801cc94
 801a360:	0801ccb4 	.word	0x0801ccb4
 801a364:	0801cc74 	.word	0x0801cc74
 801a368:	0801cc24 	.word	0x0801cc24
 801a36c:	0801cc2e 	.word	0x0801cc2e
 801a370:	08016575 	.word	0x08016575
 801a374:	0801a0f9 	.word	0x0801a0f9
 801a378:	0801cc2a 	.word	0x0801cc2a

0801a37c <__swbuf_r>:
 801a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a37e:	460e      	mov	r6, r1
 801a380:	4614      	mov	r4, r2
 801a382:	4605      	mov	r5, r0
 801a384:	b118      	cbz	r0, 801a38e <__swbuf_r+0x12>
 801a386:	6983      	ldr	r3, [r0, #24]
 801a388:	b90b      	cbnz	r3, 801a38e <__swbuf_r+0x12>
 801a38a:	f000 f9d9 	bl	801a740 <__sinit>
 801a38e:	4b21      	ldr	r3, [pc, #132]	; (801a414 <__swbuf_r+0x98>)
 801a390:	429c      	cmp	r4, r3
 801a392:	d12b      	bne.n	801a3ec <__swbuf_r+0x70>
 801a394:	686c      	ldr	r4, [r5, #4]
 801a396:	69a3      	ldr	r3, [r4, #24]
 801a398:	60a3      	str	r3, [r4, #8]
 801a39a:	89a3      	ldrh	r3, [r4, #12]
 801a39c:	071a      	lsls	r2, r3, #28
 801a39e:	d52f      	bpl.n	801a400 <__swbuf_r+0x84>
 801a3a0:	6923      	ldr	r3, [r4, #16]
 801a3a2:	b36b      	cbz	r3, 801a400 <__swbuf_r+0x84>
 801a3a4:	6923      	ldr	r3, [r4, #16]
 801a3a6:	6820      	ldr	r0, [r4, #0]
 801a3a8:	1ac0      	subs	r0, r0, r3
 801a3aa:	6963      	ldr	r3, [r4, #20]
 801a3ac:	b2f6      	uxtb	r6, r6
 801a3ae:	4283      	cmp	r3, r0
 801a3b0:	4637      	mov	r7, r6
 801a3b2:	dc04      	bgt.n	801a3be <__swbuf_r+0x42>
 801a3b4:	4621      	mov	r1, r4
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	f000 f92e 	bl	801a618 <_fflush_r>
 801a3bc:	bb30      	cbnz	r0, 801a40c <__swbuf_r+0x90>
 801a3be:	68a3      	ldr	r3, [r4, #8]
 801a3c0:	3b01      	subs	r3, #1
 801a3c2:	60a3      	str	r3, [r4, #8]
 801a3c4:	6823      	ldr	r3, [r4, #0]
 801a3c6:	1c5a      	adds	r2, r3, #1
 801a3c8:	6022      	str	r2, [r4, #0]
 801a3ca:	701e      	strb	r6, [r3, #0]
 801a3cc:	6963      	ldr	r3, [r4, #20]
 801a3ce:	3001      	adds	r0, #1
 801a3d0:	4283      	cmp	r3, r0
 801a3d2:	d004      	beq.n	801a3de <__swbuf_r+0x62>
 801a3d4:	89a3      	ldrh	r3, [r4, #12]
 801a3d6:	07db      	lsls	r3, r3, #31
 801a3d8:	d506      	bpl.n	801a3e8 <__swbuf_r+0x6c>
 801a3da:	2e0a      	cmp	r6, #10
 801a3dc:	d104      	bne.n	801a3e8 <__swbuf_r+0x6c>
 801a3de:	4621      	mov	r1, r4
 801a3e0:	4628      	mov	r0, r5
 801a3e2:	f000 f919 	bl	801a618 <_fflush_r>
 801a3e6:	b988      	cbnz	r0, 801a40c <__swbuf_r+0x90>
 801a3e8:	4638      	mov	r0, r7
 801a3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3ec:	4b0a      	ldr	r3, [pc, #40]	; (801a418 <__swbuf_r+0x9c>)
 801a3ee:	429c      	cmp	r4, r3
 801a3f0:	d101      	bne.n	801a3f6 <__swbuf_r+0x7a>
 801a3f2:	68ac      	ldr	r4, [r5, #8]
 801a3f4:	e7cf      	b.n	801a396 <__swbuf_r+0x1a>
 801a3f6:	4b09      	ldr	r3, [pc, #36]	; (801a41c <__swbuf_r+0xa0>)
 801a3f8:	429c      	cmp	r4, r3
 801a3fa:	bf08      	it	eq
 801a3fc:	68ec      	ldreq	r4, [r5, #12]
 801a3fe:	e7ca      	b.n	801a396 <__swbuf_r+0x1a>
 801a400:	4621      	mov	r1, r4
 801a402:	4628      	mov	r0, r5
 801a404:	f000 f80c 	bl	801a420 <__swsetup_r>
 801a408:	2800      	cmp	r0, #0
 801a40a:	d0cb      	beq.n	801a3a4 <__swbuf_r+0x28>
 801a40c:	f04f 37ff 	mov.w	r7, #4294967295
 801a410:	e7ea      	b.n	801a3e8 <__swbuf_r+0x6c>
 801a412:	bf00      	nop
 801a414:	0801cc94 	.word	0x0801cc94
 801a418:	0801ccb4 	.word	0x0801ccb4
 801a41c:	0801cc74 	.word	0x0801cc74

0801a420 <__swsetup_r>:
 801a420:	4b32      	ldr	r3, [pc, #200]	; (801a4ec <__swsetup_r+0xcc>)
 801a422:	b570      	push	{r4, r5, r6, lr}
 801a424:	681d      	ldr	r5, [r3, #0]
 801a426:	4606      	mov	r6, r0
 801a428:	460c      	mov	r4, r1
 801a42a:	b125      	cbz	r5, 801a436 <__swsetup_r+0x16>
 801a42c:	69ab      	ldr	r3, [r5, #24]
 801a42e:	b913      	cbnz	r3, 801a436 <__swsetup_r+0x16>
 801a430:	4628      	mov	r0, r5
 801a432:	f000 f985 	bl	801a740 <__sinit>
 801a436:	4b2e      	ldr	r3, [pc, #184]	; (801a4f0 <__swsetup_r+0xd0>)
 801a438:	429c      	cmp	r4, r3
 801a43a:	d10f      	bne.n	801a45c <__swsetup_r+0x3c>
 801a43c:	686c      	ldr	r4, [r5, #4]
 801a43e:	89a3      	ldrh	r3, [r4, #12]
 801a440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a444:	0719      	lsls	r1, r3, #28
 801a446:	d42c      	bmi.n	801a4a2 <__swsetup_r+0x82>
 801a448:	06dd      	lsls	r5, r3, #27
 801a44a:	d411      	bmi.n	801a470 <__swsetup_r+0x50>
 801a44c:	2309      	movs	r3, #9
 801a44e:	6033      	str	r3, [r6, #0]
 801a450:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a454:	81a3      	strh	r3, [r4, #12]
 801a456:	f04f 30ff 	mov.w	r0, #4294967295
 801a45a:	e03e      	b.n	801a4da <__swsetup_r+0xba>
 801a45c:	4b25      	ldr	r3, [pc, #148]	; (801a4f4 <__swsetup_r+0xd4>)
 801a45e:	429c      	cmp	r4, r3
 801a460:	d101      	bne.n	801a466 <__swsetup_r+0x46>
 801a462:	68ac      	ldr	r4, [r5, #8]
 801a464:	e7eb      	b.n	801a43e <__swsetup_r+0x1e>
 801a466:	4b24      	ldr	r3, [pc, #144]	; (801a4f8 <__swsetup_r+0xd8>)
 801a468:	429c      	cmp	r4, r3
 801a46a:	bf08      	it	eq
 801a46c:	68ec      	ldreq	r4, [r5, #12]
 801a46e:	e7e6      	b.n	801a43e <__swsetup_r+0x1e>
 801a470:	0758      	lsls	r0, r3, #29
 801a472:	d512      	bpl.n	801a49a <__swsetup_r+0x7a>
 801a474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a476:	b141      	cbz	r1, 801a48a <__swsetup_r+0x6a>
 801a478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a47c:	4299      	cmp	r1, r3
 801a47e:	d002      	beq.n	801a486 <__swsetup_r+0x66>
 801a480:	4630      	mov	r0, r6
 801a482:	f7fb ff2d 	bl	80162e0 <_free_r>
 801a486:	2300      	movs	r3, #0
 801a488:	6363      	str	r3, [r4, #52]	; 0x34
 801a48a:	89a3      	ldrh	r3, [r4, #12]
 801a48c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a490:	81a3      	strh	r3, [r4, #12]
 801a492:	2300      	movs	r3, #0
 801a494:	6063      	str	r3, [r4, #4]
 801a496:	6923      	ldr	r3, [r4, #16]
 801a498:	6023      	str	r3, [r4, #0]
 801a49a:	89a3      	ldrh	r3, [r4, #12]
 801a49c:	f043 0308 	orr.w	r3, r3, #8
 801a4a0:	81a3      	strh	r3, [r4, #12]
 801a4a2:	6923      	ldr	r3, [r4, #16]
 801a4a4:	b94b      	cbnz	r3, 801a4ba <__swsetup_r+0x9a>
 801a4a6:	89a3      	ldrh	r3, [r4, #12]
 801a4a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a4ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a4b0:	d003      	beq.n	801a4ba <__swsetup_r+0x9a>
 801a4b2:	4621      	mov	r1, r4
 801a4b4:	4630      	mov	r0, r6
 801a4b6:	f000 fa05 	bl	801a8c4 <__smakebuf_r>
 801a4ba:	89a0      	ldrh	r0, [r4, #12]
 801a4bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4c0:	f010 0301 	ands.w	r3, r0, #1
 801a4c4:	d00a      	beq.n	801a4dc <__swsetup_r+0xbc>
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	60a3      	str	r3, [r4, #8]
 801a4ca:	6963      	ldr	r3, [r4, #20]
 801a4cc:	425b      	negs	r3, r3
 801a4ce:	61a3      	str	r3, [r4, #24]
 801a4d0:	6923      	ldr	r3, [r4, #16]
 801a4d2:	b943      	cbnz	r3, 801a4e6 <__swsetup_r+0xc6>
 801a4d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4d8:	d1ba      	bne.n	801a450 <__swsetup_r+0x30>
 801a4da:	bd70      	pop	{r4, r5, r6, pc}
 801a4dc:	0781      	lsls	r1, r0, #30
 801a4de:	bf58      	it	pl
 801a4e0:	6963      	ldrpl	r3, [r4, #20]
 801a4e2:	60a3      	str	r3, [r4, #8]
 801a4e4:	e7f4      	b.n	801a4d0 <__swsetup_r+0xb0>
 801a4e6:	2000      	movs	r0, #0
 801a4e8:	e7f7      	b.n	801a4da <__swsetup_r+0xba>
 801a4ea:	bf00      	nop
 801a4ec:	20004210 	.word	0x20004210
 801a4f0:	0801cc94 	.word	0x0801cc94
 801a4f4:	0801ccb4 	.word	0x0801ccb4
 801a4f8:	0801cc74 	.word	0x0801cc74

0801a4fc <abort>:
 801a4fc:	b508      	push	{r3, lr}
 801a4fe:	2006      	movs	r0, #6
 801a500:	f000 fa50 	bl	801a9a4 <raise>
 801a504:	2001      	movs	r0, #1
 801a506:	f7f0 ff9f 	bl	800b448 <_exit>
	...

0801a50c <__sflush_r>:
 801a50c:	898a      	ldrh	r2, [r1, #12]
 801a50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a512:	4605      	mov	r5, r0
 801a514:	0710      	lsls	r0, r2, #28
 801a516:	460c      	mov	r4, r1
 801a518:	d458      	bmi.n	801a5cc <__sflush_r+0xc0>
 801a51a:	684b      	ldr	r3, [r1, #4]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	dc05      	bgt.n	801a52c <__sflush_r+0x20>
 801a520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a522:	2b00      	cmp	r3, #0
 801a524:	dc02      	bgt.n	801a52c <__sflush_r+0x20>
 801a526:	2000      	movs	r0, #0
 801a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a52e:	2e00      	cmp	r6, #0
 801a530:	d0f9      	beq.n	801a526 <__sflush_r+0x1a>
 801a532:	2300      	movs	r3, #0
 801a534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a538:	682f      	ldr	r7, [r5, #0]
 801a53a:	602b      	str	r3, [r5, #0]
 801a53c:	d032      	beq.n	801a5a4 <__sflush_r+0x98>
 801a53e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a540:	89a3      	ldrh	r3, [r4, #12]
 801a542:	075a      	lsls	r2, r3, #29
 801a544:	d505      	bpl.n	801a552 <__sflush_r+0x46>
 801a546:	6863      	ldr	r3, [r4, #4]
 801a548:	1ac0      	subs	r0, r0, r3
 801a54a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a54c:	b10b      	cbz	r3, 801a552 <__sflush_r+0x46>
 801a54e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a550:	1ac0      	subs	r0, r0, r3
 801a552:	2300      	movs	r3, #0
 801a554:	4602      	mov	r2, r0
 801a556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a558:	6a21      	ldr	r1, [r4, #32]
 801a55a:	4628      	mov	r0, r5
 801a55c:	47b0      	blx	r6
 801a55e:	1c43      	adds	r3, r0, #1
 801a560:	89a3      	ldrh	r3, [r4, #12]
 801a562:	d106      	bne.n	801a572 <__sflush_r+0x66>
 801a564:	6829      	ldr	r1, [r5, #0]
 801a566:	291d      	cmp	r1, #29
 801a568:	d82c      	bhi.n	801a5c4 <__sflush_r+0xb8>
 801a56a:	4a2a      	ldr	r2, [pc, #168]	; (801a614 <__sflush_r+0x108>)
 801a56c:	40ca      	lsrs	r2, r1
 801a56e:	07d6      	lsls	r6, r2, #31
 801a570:	d528      	bpl.n	801a5c4 <__sflush_r+0xb8>
 801a572:	2200      	movs	r2, #0
 801a574:	6062      	str	r2, [r4, #4]
 801a576:	04d9      	lsls	r1, r3, #19
 801a578:	6922      	ldr	r2, [r4, #16]
 801a57a:	6022      	str	r2, [r4, #0]
 801a57c:	d504      	bpl.n	801a588 <__sflush_r+0x7c>
 801a57e:	1c42      	adds	r2, r0, #1
 801a580:	d101      	bne.n	801a586 <__sflush_r+0x7a>
 801a582:	682b      	ldr	r3, [r5, #0]
 801a584:	b903      	cbnz	r3, 801a588 <__sflush_r+0x7c>
 801a586:	6560      	str	r0, [r4, #84]	; 0x54
 801a588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a58a:	602f      	str	r7, [r5, #0]
 801a58c:	2900      	cmp	r1, #0
 801a58e:	d0ca      	beq.n	801a526 <__sflush_r+0x1a>
 801a590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a594:	4299      	cmp	r1, r3
 801a596:	d002      	beq.n	801a59e <__sflush_r+0x92>
 801a598:	4628      	mov	r0, r5
 801a59a:	f7fb fea1 	bl	80162e0 <_free_r>
 801a59e:	2000      	movs	r0, #0
 801a5a0:	6360      	str	r0, [r4, #52]	; 0x34
 801a5a2:	e7c1      	b.n	801a528 <__sflush_r+0x1c>
 801a5a4:	6a21      	ldr	r1, [r4, #32]
 801a5a6:	2301      	movs	r3, #1
 801a5a8:	4628      	mov	r0, r5
 801a5aa:	47b0      	blx	r6
 801a5ac:	1c41      	adds	r1, r0, #1
 801a5ae:	d1c7      	bne.n	801a540 <__sflush_r+0x34>
 801a5b0:	682b      	ldr	r3, [r5, #0]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d0c4      	beq.n	801a540 <__sflush_r+0x34>
 801a5b6:	2b1d      	cmp	r3, #29
 801a5b8:	d001      	beq.n	801a5be <__sflush_r+0xb2>
 801a5ba:	2b16      	cmp	r3, #22
 801a5bc:	d101      	bne.n	801a5c2 <__sflush_r+0xb6>
 801a5be:	602f      	str	r7, [r5, #0]
 801a5c0:	e7b1      	b.n	801a526 <__sflush_r+0x1a>
 801a5c2:	89a3      	ldrh	r3, [r4, #12]
 801a5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a5c8:	81a3      	strh	r3, [r4, #12]
 801a5ca:	e7ad      	b.n	801a528 <__sflush_r+0x1c>
 801a5cc:	690f      	ldr	r7, [r1, #16]
 801a5ce:	2f00      	cmp	r7, #0
 801a5d0:	d0a9      	beq.n	801a526 <__sflush_r+0x1a>
 801a5d2:	0793      	lsls	r3, r2, #30
 801a5d4:	680e      	ldr	r6, [r1, #0]
 801a5d6:	bf08      	it	eq
 801a5d8:	694b      	ldreq	r3, [r1, #20]
 801a5da:	600f      	str	r7, [r1, #0]
 801a5dc:	bf18      	it	ne
 801a5de:	2300      	movne	r3, #0
 801a5e0:	eba6 0807 	sub.w	r8, r6, r7
 801a5e4:	608b      	str	r3, [r1, #8]
 801a5e6:	f1b8 0f00 	cmp.w	r8, #0
 801a5ea:	dd9c      	ble.n	801a526 <__sflush_r+0x1a>
 801a5ec:	6a21      	ldr	r1, [r4, #32]
 801a5ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a5f0:	4643      	mov	r3, r8
 801a5f2:	463a      	mov	r2, r7
 801a5f4:	4628      	mov	r0, r5
 801a5f6:	47b0      	blx	r6
 801a5f8:	2800      	cmp	r0, #0
 801a5fa:	dc06      	bgt.n	801a60a <__sflush_r+0xfe>
 801a5fc:	89a3      	ldrh	r3, [r4, #12]
 801a5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a602:	81a3      	strh	r3, [r4, #12]
 801a604:	f04f 30ff 	mov.w	r0, #4294967295
 801a608:	e78e      	b.n	801a528 <__sflush_r+0x1c>
 801a60a:	4407      	add	r7, r0
 801a60c:	eba8 0800 	sub.w	r8, r8, r0
 801a610:	e7e9      	b.n	801a5e6 <__sflush_r+0xda>
 801a612:	bf00      	nop
 801a614:	20400001 	.word	0x20400001

0801a618 <_fflush_r>:
 801a618:	b538      	push	{r3, r4, r5, lr}
 801a61a:	690b      	ldr	r3, [r1, #16]
 801a61c:	4605      	mov	r5, r0
 801a61e:	460c      	mov	r4, r1
 801a620:	b913      	cbnz	r3, 801a628 <_fflush_r+0x10>
 801a622:	2500      	movs	r5, #0
 801a624:	4628      	mov	r0, r5
 801a626:	bd38      	pop	{r3, r4, r5, pc}
 801a628:	b118      	cbz	r0, 801a632 <_fflush_r+0x1a>
 801a62a:	6983      	ldr	r3, [r0, #24]
 801a62c:	b90b      	cbnz	r3, 801a632 <_fflush_r+0x1a>
 801a62e:	f000 f887 	bl	801a740 <__sinit>
 801a632:	4b14      	ldr	r3, [pc, #80]	; (801a684 <_fflush_r+0x6c>)
 801a634:	429c      	cmp	r4, r3
 801a636:	d11b      	bne.n	801a670 <_fflush_r+0x58>
 801a638:	686c      	ldr	r4, [r5, #4]
 801a63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d0ef      	beq.n	801a622 <_fflush_r+0xa>
 801a642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a644:	07d0      	lsls	r0, r2, #31
 801a646:	d404      	bmi.n	801a652 <_fflush_r+0x3a>
 801a648:	0599      	lsls	r1, r3, #22
 801a64a:	d402      	bmi.n	801a652 <_fflush_r+0x3a>
 801a64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a64e:	f7ff fd14 	bl	801a07a <__retarget_lock_acquire_recursive>
 801a652:	4628      	mov	r0, r5
 801a654:	4621      	mov	r1, r4
 801a656:	f7ff ff59 	bl	801a50c <__sflush_r>
 801a65a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a65c:	07da      	lsls	r2, r3, #31
 801a65e:	4605      	mov	r5, r0
 801a660:	d4e0      	bmi.n	801a624 <_fflush_r+0xc>
 801a662:	89a3      	ldrh	r3, [r4, #12]
 801a664:	059b      	lsls	r3, r3, #22
 801a666:	d4dd      	bmi.n	801a624 <_fflush_r+0xc>
 801a668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a66a:	f7ff fd07 	bl	801a07c <__retarget_lock_release_recursive>
 801a66e:	e7d9      	b.n	801a624 <_fflush_r+0xc>
 801a670:	4b05      	ldr	r3, [pc, #20]	; (801a688 <_fflush_r+0x70>)
 801a672:	429c      	cmp	r4, r3
 801a674:	d101      	bne.n	801a67a <_fflush_r+0x62>
 801a676:	68ac      	ldr	r4, [r5, #8]
 801a678:	e7df      	b.n	801a63a <_fflush_r+0x22>
 801a67a:	4b04      	ldr	r3, [pc, #16]	; (801a68c <_fflush_r+0x74>)
 801a67c:	429c      	cmp	r4, r3
 801a67e:	bf08      	it	eq
 801a680:	68ec      	ldreq	r4, [r5, #12]
 801a682:	e7da      	b.n	801a63a <_fflush_r+0x22>
 801a684:	0801cc94 	.word	0x0801cc94
 801a688:	0801ccb4 	.word	0x0801ccb4
 801a68c:	0801cc74 	.word	0x0801cc74

0801a690 <std>:
 801a690:	2300      	movs	r3, #0
 801a692:	b510      	push	{r4, lr}
 801a694:	4604      	mov	r4, r0
 801a696:	e9c0 3300 	strd	r3, r3, [r0]
 801a69a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a69e:	6083      	str	r3, [r0, #8]
 801a6a0:	8181      	strh	r1, [r0, #12]
 801a6a2:	6643      	str	r3, [r0, #100]	; 0x64
 801a6a4:	81c2      	strh	r2, [r0, #14]
 801a6a6:	6183      	str	r3, [r0, #24]
 801a6a8:	4619      	mov	r1, r3
 801a6aa:	2208      	movs	r2, #8
 801a6ac:	305c      	adds	r0, #92	; 0x5c
 801a6ae:	f7fb fe0f 	bl	80162d0 <memset>
 801a6b2:	4b05      	ldr	r3, [pc, #20]	; (801a6c8 <std+0x38>)
 801a6b4:	6263      	str	r3, [r4, #36]	; 0x24
 801a6b6:	4b05      	ldr	r3, [pc, #20]	; (801a6cc <std+0x3c>)
 801a6b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a6ba:	4b05      	ldr	r3, [pc, #20]	; (801a6d0 <std+0x40>)
 801a6bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a6be:	4b05      	ldr	r3, [pc, #20]	; (801a6d4 <std+0x44>)
 801a6c0:	6224      	str	r4, [r4, #32]
 801a6c2:	6323      	str	r3, [r4, #48]	; 0x30
 801a6c4:	bd10      	pop	{r4, pc}
 801a6c6:	bf00      	nop
 801a6c8:	0801a9dd 	.word	0x0801a9dd
 801a6cc:	0801a9ff 	.word	0x0801a9ff
 801a6d0:	0801aa37 	.word	0x0801aa37
 801a6d4:	0801aa5b 	.word	0x0801aa5b

0801a6d8 <_cleanup_r>:
 801a6d8:	4901      	ldr	r1, [pc, #4]	; (801a6e0 <_cleanup_r+0x8>)
 801a6da:	f000 b8af 	b.w	801a83c <_fwalk_reent>
 801a6de:	bf00      	nop
 801a6e0:	0801a619 	.word	0x0801a619

0801a6e4 <__sfmoreglue>:
 801a6e4:	b570      	push	{r4, r5, r6, lr}
 801a6e6:	1e4a      	subs	r2, r1, #1
 801a6e8:	2568      	movs	r5, #104	; 0x68
 801a6ea:	4355      	muls	r5, r2
 801a6ec:	460e      	mov	r6, r1
 801a6ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a6f2:	f7fb fe45 	bl	8016380 <_malloc_r>
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	b140      	cbz	r0, 801a70c <__sfmoreglue+0x28>
 801a6fa:	2100      	movs	r1, #0
 801a6fc:	e9c0 1600 	strd	r1, r6, [r0]
 801a700:	300c      	adds	r0, #12
 801a702:	60a0      	str	r0, [r4, #8]
 801a704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a708:	f7fb fde2 	bl	80162d0 <memset>
 801a70c:	4620      	mov	r0, r4
 801a70e:	bd70      	pop	{r4, r5, r6, pc}

0801a710 <__sfp_lock_acquire>:
 801a710:	4801      	ldr	r0, [pc, #4]	; (801a718 <__sfp_lock_acquire+0x8>)
 801a712:	f7ff bcb2 	b.w	801a07a <__retarget_lock_acquire_recursive>
 801a716:	bf00      	nop
 801a718:	20011b90 	.word	0x20011b90

0801a71c <__sfp_lock_release>:
 801a71c:	4801      	ldr	r0, [pc, #4]	; (801a724 <__sfp_lock_release+0x8>)
 801a71e:	f7ff bcad 	b.w	801a07c <__retarget_lock_release_recursive>
 801a722:	bf00      	nop
 801a724:	20011b90 	.word	0x20011b90

0801a728 <__sinit_lock_acquire>:
 801a728:	4801      	ldr	r0, [pc, #4]	; (801a730 <__sinit_lock_acquire+0x8>)
 801a72a:	f7ff bca6 	b.w	801a07a <__retarget_lock_acquire_recursive>
 801a72e:	bf00      	nop
 801a730:	20011b8b 	.word	0x20011b8b

0801a734 <__sinit_lock_release>:
 801a734:	4801      	ldr	r0, [pc, #4]	; (801a73c <__sinit_lock_release+0x8>)
 801a736:	f7ff bca1 	b.w	801a07c <__retarget_lock_release_recursive>
 801a73a:	bf00      	nop
 801a73c:	20011b8b 	.word	0x20011b8b

0801a740 <__sinit>:
 801a740:	b510      	push	{r4, lr}
 801a742:	4604      	mov	r4, r0
 801a744:	f7ff fff0 	bl	801a728 <__sinit_lock_acquire>
 801a748:	69a3      	ldr	r3, [r4, #24]
 801a74a:	b11b      	cbz	r3, 801a754 <__sinit+0x14>
 801a74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a750:	f7ff bff0 	b.w	801a734 <__sinit_lock_release>
 801a754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a758:	6523      	str	r3, [r4, #80]	; 0x50
 801a75a:	4b13      	ldr	r3, [pc, #76]	; (801a7a8 <__sinit+0x68>)
 801a75c:	4a13      	ldr	r2, [pc, #76]	; (801a7ac <__sinit+0x6c>)
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	62a2      	str	r2, [r4, #40]	; 0x28
 801a762:	42a3      	cmp	r3, r4
 801a764:	bf04      	itt	eq
 801a766:	2301      	moveq	r3, #1
 801a768:	61a3      	streq	r3, [r4, #24]
 801a76a:	4620      	mov	r0, r4
 801a76c:	f000 f820 	bl	801a7b0 <__sfp>
 801a770:	6060      	str	r0, [r4, #4]
 801a772:	4620      	mov	r0, r4
 801a774:	f000 f81c 	bl	801a7b0 <__sfp>
 801a778:	60a0      	str	r0, [r4, #8]
 801a77a:	4620      	mov	r0, r4
 801a77c:	f000 f818 	bl	801a7b0 <__sfp>
 801a780:	2200      	movs	r2, #0
 801a782:	60e0      	str	r0, [r4, #12]
 801a784:	2104      	movs	r1, #4
 801a786:	6860      	ldr	r0, [r4, #4]
 801a788:	f7ff ff82 	bl	801a690 <std>
 801a78c:	68a0      	ldr	r0, [r4, #8]
 801a78e:	2201      	movs	r2, #1
 801a790:	2109      	movs	r1, #9
 801a792:	f7ff ff7d 	bl	801a690 <std>
 801a796:	68e0      	ldr	r0, [r4, #12]
 801a798:	2202      	movs	r2, #2
 801a79a:	2112      	movs	r1, #18
 801a79c:	f7ff ff78 	bl	801a690 <std>
 801a7a0:	2301      	movs	r3, #1
 801a7a2:	61a3      	str	r3, [r4, #24]
 801a7a4:	e7d2      	b.n	801a74c <__sinit+0xc>
 801a7a6:	bf00      	nop
 801a7a8:	0801c820 	.word	0x0801c820
 801a7ac:	0801a6d9 	.word	0x0801a6d9

0801a7b0 <__sfp>:
 801a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7b2:	4607      	mov	r7, r0
 801a7b4:	f7ff ffac 	bl	801a710 <__sfp_lock_acquire>
 801a7b8:	4b1e      	ldr	r3, [pc, #120]	; (801a834 <__sfp+0x84>)
 801a7ba:	681e      	ldr	r6, [r3, #0]
 801a7bc:	69b3      	ldr	r3, [r6, #24]
 801a7be:	b913      	cbnz	r3, 801a7c6 <__sfp+0x16>
 801a7c0:	4630      	mov	r0, r6
 801a7c2:	f7ff ffbd 	bl	801a740 <__sinit>
 801a7c6:	3648      	adds	r6, #72	; 0x48
 801a7c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a7cc:	3b01      	subs	r3, #1
 801a7ce:	d503      	bpl.n	801a7d8 <__sfp+0x28>
 801a7d0:	6833      	ldr	r3, [r6, #0]
 801a7d2:	b30b      	cbz	r3, 801a818 <__sfp+0x68>
 801a7d4:	6836      	ldr	r6, [r6, #0]
 801a7d6:	e7f7      	b.n	801a7c8 <__sfp+0x18>
 801a7d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a7dc:	b9d5      	cbnz	r5, 801a814 <__sfp+0x64>
 801a7de:	4b16      	ldr	r3, [pc, #88]	; (801a838 <__sfp+0x88>)
 801a7e0:	60e3      	str	r3, [r4, #12]
 801a7e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a7e6:	6665      	str	r5, [r4, #100]	; 0x64
 801a7e8:	f7ff fc46 	bl	801a078 <__retarget_lock_init_recursive>
 801a7ec:	f7ff ff96 	bl	801a71c <__sfp_lock_release>
 801a7f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a7f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a7f8:	6025      	str	r5, [r4, #0]
 801a7fa:	61a5      	str	r5, [r4, #24]
 801a7fc:	2208      	movs	r2, #8
 801a7fe:	4629      	mov	r1, r5
 801a800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a804:	f7fb fd64 	bl	80162d0 <memset>
 801a808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a80c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a810:	4620      	mov	r0, r4
 801a812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a814:	3468      	adds	r4, #104	; 0x68
 801a816:	e7d9      	b.n	801a7cc <__sfp+0x1c>
 801a818:	2104      	movs	r1, #4
 801a81a:	4638      	mov	r0, r7
 801a81c:	f7ff ff62 	bl	801a6e4 <__sfmoreglue>
 801a820:	4604      	mov	r4, r0
 801a822:	6030      	str	r0, [r6, #0]
 801a824:	2800      	cmp	r0, #0
 801a826:	d1d5      	bne.n	801a7d4 <__sfp+0x24>
 801a828:	f7ff ff78 	bl	801a71c <__sfp_lock_release>
 801a82c:	230c      	movs	r3, #12
 801a82e:	603b      	str	r3, [r7, #0]
 801a830:	e7ee      	b.n	801a810 <__sfp+0x60>
 801a832:	bf00      	nop
 801a834:	0801c820 	.word	0x0801c820
 801a838:	ffff0001 	.word	0xffff0001

0801a83c <_fwalk_reent>:
 801a83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a840:	4606      	mov	r6, r0
 801a842:	4688      	mov	r8, r1
 801a844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a848:	2700      	movs	r7, #0
 801a84a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a84e:	f1b9 0901 	subs.w	r9, r9, #1
 801a852:	d505      	bpl.n	801a860 <_fwalk_reent+0x24>
 801a854:	6824      	ldr	r4, [r4, #0]
 801a856:	2c00      	cmp	r4, #0
 801a858:	d1f7      	bne.n	801a84a <_fwalk_reent+0xe>
 801a85a:	4638      	mov	r0, r7
 801a85c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a860:	89ab      	ldrh	r3, [r5, #12]
 801a862:	2b01      	cmp	r3, #1
 801a864:	d907      	bls.n	801a876 <_fwalk_reent+0x3a>
 801a866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a86a:	3301      	adds	r3, #1
 801a86c:	d003      	beq.n	801a876 <_fwalk_reent+0x3a>
 801a86e:	4629      	mov	r1, r5
 801a870:	4630      	mov	r0, r6
 801a872:	47c0      	blx	r8
 801a874:	4307      	orrs	r7, r0
 801a876:	3568      	adds	r5, #104	; 0x68
 801a878:	e7e9      	b.n	801a84e <_fwalk_reent+0x12>

0801a87a <__swhatbuf_r>:
 801a87a:	b570      	push	{r4, r5, r6, lr}
 801a87c:	460e      	mov	r6, r1
 801a87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a882:	2900      	cmp	r1, #0
 801a884:	b096      	sub	sp, #88	; 0x58
 801a886:	4614      	mov	r4, r2
 801a888:	461d      	mov	r5, r3
 801a88a:	da07      	bge.n	801a89c <__swhatbuf_r+0x22>
 801a88c:	2300      	movs	r3, #0
 801a88e:	602b      	str	r3, [r5, #0]
 801a890:	89b3      	ldrh	r3, [r6, #12]
 801a892:	061a      	lsls	r2, r3, #24
 801a894:	d410      	bmi.n	801a8b8 <__swhatbuf_r+0x3e>
 801a896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a89a:	e00e      	b.n	801a8ba <__swhatbuf_r+0x40>
 801a89c:	466a      	mov	r2, sp
 801a89e:	f000 f903 	bl	801aaa8 <_fstat_r>
 801a8a2:	2800      	cmp	r0, #0
 801a8a4:	dbf2      	blt.n	801a88c <__swhatbuf_r+0x12>
 801a8a6:	9a01      	ldr	r2, [sp, #4]
 801a8a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a8ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a8b0:	425a      	negs	r2, r3
 801a8b2:	415a      	adcs	r2, r3
 801a8b4:	602a      	str	r2, [r5, #0]
 801a8b6:	e7ee      	b.n	801a896 <__swhatbuf_r+0x1c>
 801a8b8:	2340      	movs	r3, #64	; 0x40
 801a8ba:	2000      	movs	r0, #0
 801a8bc:	6023      	str	r3, [r4, #0]
 801a8be:	b016      	add	sp, #88	; 0x58
 801a8c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a8c4 <__smakebuf_r>:
 801a8c4:	898b      	ldrh	r3, [r1, #12]
 801a8c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a8c8:	079d      	lsls	r5, r3, #30
 801a8ca:	4606      	mov	r6, r0
 801a8cc:	460c      	mov	r4, r1
 801a8ce:	d507      	bpl.n	801a8e0 <__smakebuf_r+0x1c>
 801a8d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a8d4:	6023      	str	r3, [r4, #0]
 801a8d6:	6123      	str	r3, [r4, #16]
 801a8d8:	2301      	movs	r3, #1
 801a8da:	6163      	str	r3, [r4, #20]
 801a8dc:	b002      	add	sp, #8
 801a8de:	bd70      	pop	{r4, r5, r6, pc}
 801a8e0:	ab01      	add	r3, sp, #4
 801a8e2:	466a      	mov	r2, sp
 801a8e4:	f7ff ffc9 	bl	801a87a <__swhatbuf_r>
 801a8e8:	9900      	ldr	r1, [sp, #0]
 801a8ea:	4605      	mov	r5, r0
 801a8ec:	4630      	mov	r0, r6
 801a8ee:	f7fb fd47 	bl	8016380 <_malloc_r>
 801a8f2:	b948      	cbnz	r0, 801a908 <__smakebuf_r+0x44>
 801a8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8f8:	059a      	lsls	r2, r3, #22
 801a8fa:	d4ef      	bmi.n	801a8dc <__smakebuf_r+0x18>
 801a8fc:	f023 0303 	bic.w	r3, r3, #3
 801a900:	f043 0302 	orr.w	r3, r3, #2
 801a904:	81a3      	strh	r3, [r4, #12]
 801a906:	e7e3      	b.n	801a8d0 <__smakebuf_r+0xc>
 801a908:	4b0d      	ldr	r3, [pc, #52]	; (801a940 <__smakebuf_r+0x7c>)
 801a90a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a90c:	89a3      	ldrh	r3, [r4, #12]
 801a90e:	6020      	str	r0, [r4, #0]
 801a910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a914:	81a3      	strh	r3, [r4, #12]
 801a916:	9b00      	ldr	r3, [sp, #0]
 801a918:	6163      	str	r3, [r4, #20]
 801a91a:	9b01      	ldr	r3, [sp, #4]
 801a91c:	6120      	str	r0, [r4, #16]
 801a91e:	b15b      	cbz	r3, 801a938 <__smakebuf_r+0x74>
 801a920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a924:	4630      	mov	r0, r6
 801a926:	f000 f8d1 	bl	801aacc <_isatty_r>
 801a92a:	b128      	cbz	r0, 801a938 <__smakebuf_r+0x74>
 801a92c:	89a3      	ldrh	r3, [r4, #12]
 801a92e:	f023 0303 	bic.w	r3, r3, #3
 801a932:	f043 0301 	orr.w	r3, r3, #1
 801a936:	81a3      	strh	r3, [r4, #12]
 801a938:	89a0      	ldrh	r0, [r4, #12]
 801a93a:	4305      	orrs	r5, r0
 801a93c:	81a5      	strh	r5, [r4, #12]
 801a93e:	e7cd      	b.n	801a8dc <__smakebuf_r+0x18>
 801a940:	0801a6d9 	.word	0x0801a6d9

0801a944 <_malloc_usable_size_r>:
 801a944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a948:	1f18      	subs	r0, r3, #4
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	bfbc      	itt	lt
 801a94e:	580b      	ldrlt	r3, [r1, r0]
 801a950:	18c0      	addlt	r0, r0, r3
 801a952:	4770      	bx	lr

0801a954 <_raise_r>:
 801a954:	291f      	cmp	r1, #31
 801a956:	b538      	push	{r3, r4, r5, lr}
 801a958:	4604      	mov	r4, r0
 801a95a:	460d      	mov	r5, r1
 801a95c:	d904      	bls.n	801a968 <_raise_r+0x14>
 801a95e:	2316      	movs	r3, #22
 801a960:	6003      	str	r3, [r0, #0]
 801a962:	f04f 30ff 	mov.w	r0, #4294967295
 801a966:	bd38      	pop	{r3, r4, r5, pc}
 801a968:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a96a:	b112      	cbz	r2, 801a972 <_raise_r+0x1e>
 801a96c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a970:	b94b      	cbnz	r3, 801a986 <_raise_r+0x32>
 801a972:	4620      	mov	r0, r4
 801a974:	f000 f830 	bl	801a9d8 <_getpid_r>
 801a978:	462a      	mov	r2, r5
 801a97a:	4601      	mov	r1, r0
 801a97c:	4620      	mov	r0, r4
 801a97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a982:	f000 b817 	b.w	801a9b4 <_kill_r>
 801a986:	2b01      	cmp	r3, #1
 801a988:	d00a      	beq.n	801a9a0 <_raise_r+0x4c>
 801a98a:	1c59      	adds	r1, r3, #1
 801a98c:	d103      	bne.n	801a996 <_raise_r+0x42>
 801a98e:	2316      	movs	r3, #22
 801a990:	6003      	str	r3, [r0, #0]
 801a992:	2001      	movs	r0, #1
 801a994:	e7e7      	b.n	801a966 <_raise_r+0x12>
 801a996:	2400      	movs	r4, #0
 801a998:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a99c:	4628      	mov	r0, r5
 801a99e:	4798      	blx	r3
 801a9a0:	2000      	movs	r0, #0
 801a9a2:	e7e0      	b.n	801a966 <_raise_r+0x12>

0801a9a4 <raise>:
 801a9a4:	4b02      	ldr	r3, [pc, #8]	; (801a9b0 <raise+0xc>)
 801a9a6:	4601      	mov	r1, r0
 801a9a8:	6818      	ldr	r0, [r3, #0]
 801a9aa:	f7ff bfd3 	b.w	801a954 <_raise_r>
 801a9ae:	bf00      	nop
 801a9b0:	20004210 	.word	0x20004210

0801a9b4 <_kill_r>:
 801a9b4:	b538      	push	{r3, r4, r5, lr}
 801a9b6:	4d07      	ldr	r5, [pc, #28]	; (801a9d4 <_kill_r+0x20>)
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	4604      	mov	r4, r0
 801a9bc:	4608      	mov	r0, r1
 801a9be:	4611      	mov	r1, r2
 801a9c0:	602b      	str	r3, [r5, #0]
 801a9c2:	f7f0 fd31 	bl	800b428 <_kill>
 801a9c6:	1c43      	adds	r3, r0, #1
 801a9c8:	d102      	bne.n	801a9d0 <_kill_r+0x1c>
 801a9ca:	682b      	ldr	r3, [r5, #0]
 801a9cc:	b103      	cbz	r3, 801a9d0 <_kill_r+0x1c>
 801a9ce:	6023      	str	r3, [r4, #0]
 801a9d0:	bd38      	pop	{r3, r4, r5, pc}
 801a9d2:	bf00      	nop
 801a9d4:	20011b84 	.word	0x20011b84

0801a9d8 <_getpid_r>:
 801a9d8:	f7f0 bd1e 	b.w	800b418 <_getpid>

0801a9dc <__sread>:
 801a9dc:	b510      	push	{r4, lr}
 801a9de:	460c      	mov	r4, r1
 801a9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9e4:	f000 f894 	bl	801ab10 <_read_r>
 801a9e8:	2800      	cmp	r0, #0
 801a9ea:	bfab      	itete	ge
 801a9ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a9ee:	89a3      	ldrhlt	r3, [r4, #12]
 801a9f0:	181b      	addge	r3, r3, r0
 801a9f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a9f6:	bfac      	ite	ge
 801a9f8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a9fa:	81a3      	strhlt	r3, [r4, #12]
 801a9fc:	bd10      	pop	{r4, pc}

0801a9fe <__swrite>:
 801a9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa02:	461f      	mov	r7, r3
 801aa04:	898b      	ldrh	r3, [r1, #12]
 801aa06:	05db      	lsls	r3, r3, #23
 801aa08:	4605      	mov	r5, r0
 801aa0a:	460c      	mov	r4, r1
 801aa0c:	4616      	mov	r6, r2
 801aa0e:	d505      	bpl.n	801aa1c <__swrite+0x1e>
 801aa10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa14:	2302      	movs	r3, #2
 801aa16:	2200      	movs	r2, #0
 801aa18:	f000 f868 	bl	801aaec <_lseek_r>
 801aa1c:	89a3      	ldrh	r3, [r4, #12]
 801aa1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aa26:	81a3      	strh	r3, [r4, #12]
 801aa28:	4632      	mov	r2, r6
 801aa2a:	463b      	mov	r3, r7
 801aa2c:	4628      	mov	r0, r5
 801aa2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa32:	f000 b817 	b.w	801aa64 <_write_r>

0801aa36 <__sseek>:
 801aa36:	b510      	push	{r4, lr}
 801aa38:	460c      	mov	r4, r1
 801aa3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa3e:	f000 f855 	bl	801aaec <_lseek_r>
 801aa42:	1c43      	adds	r3, r0, #1
 801aa44:	89a3      	ldrh	r3, [r4, #12]
 801aa46:	bf15      	itete	ne
 801aa48:	6560      	strne	r0, [r4, #84]	; 0x54
 801aa4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801aa4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801aa52:	81a3      	strheq	r3, [r4, #12]
 801aa54:	bf18      	it	ne
 801aa56:	81a3      	strhne	r3, [r4, #12]
 801aa58:	bd10      	pop	{r4, pc}

0801aa5a <__sclose>:
 801aa5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa5e:	f000 b813 	b.w	801aa88 <_close_r>
	...

0801aa64 <_write_r>:
 801aa64:	b538      	push	{r3, r4, r5, lr}
 801aa66:	4d07      	ldr	r5, [pc, #28]	; (801aa84 <_write_r+0x20>)
 801aa68:	4604      	mov	r4, r0
 801aa6a:	4608      	mov	r0, r1
 801aa6c:	4611      	mov	r1, r2
 801aa6e:	2200      	movs	r2, #0
 801aa70:	602a      	str	r2, [r5, #0]
 801aa72:	461a      	mov	r2, r3
 801aa74:	f7f0 fd0f 	bl	800b496 <_write>
 801aa78:	1c43      	adds	r3, r0, #1
 801aa7a:	d102      	bne.n	801aa82 <_write_r+0x1e>
 801aa7c:	682b      	ldr	r3, [r5, #0]
 801aa7e:	b103      	cbz	r3, 801aa82 <_write_r+0x1e>
 801aa80:	6023      	str	r3, [r4, #0]
 801aa82:	bd38      	pop	{r3, r4, r5, pc}
 801aa84:	20011b84 	.word	0x20011b84

0801aa88 <_close_r>:
 801aa88:	b538      	push	{r3, r4, r5, lr}
 801aa8a:	4d06      	ldr	r5, [pc, #24]	; (801aaa4 <_close_r+0x1c>)
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	4604      	mov	r4, r0
 801aa90:	4608      	mov	r0, r1
 801aa92:	602b      	str	r3, [r5, #0]
 801aa94:	f7f0 fd1b 	bl	800b4ce <_close>
 801aa98:	1c43      	adds	r3, r0, #1
 801aa9a:	d102      	bne.n	801aaa2 <_close_r+0x1a>
 801aa9c:	682b      	ldr	r3, [r5, #0]
 801aa9e:	b103      	cbz	r3, 801aaa2 <_close_r+0x1a>
 801aaa0:	6023      	str	r3, [r4, #0]
 801aaa2:	bd38      	pop	{r3, r4, r5, pc}
 801aaa4:	20011b84 	.word	0x20011b84

0801aaa8 <_fstat_r>:
 801aaa8:	b538      	push	{r3, r4, r5, lr}
 801aaaa:	4d07      	ldr	r5, [pc, #28]	; (801aac8 <_fstat_r+0x20>)
 801aaac:	2300      	movs	r3, #0
 801aaae:	4604      	mov	r4, r0
 801aab0:	4608      	mov	r0, r1
 801aab2:	4611      	mov	r1, r2
 801aab4:	602b      	str	r3, [r5, #0]
 801aab6:	f7f0 fd16 	bl	800b4e6 <_fstat>
 801aaba:	1c43      	adds	r3, r0, #1
 801aabc:	d102      	bne.n	801aac4 <_fstat_r+0x1c>
 801aabe:	682b      	ldr	r3, [r5, #0]
 801aac0:	b103      	cbz	r3, 801aac4 <_fstat_r+0x1c>
 801aac2:	6023      	str	r3, [r4, #0]
 801aac4:	bd38      	pop	{r3, r4, r5, pc}
 801aac6:	bf00      	nop
 801aac8:	20011b84 	.word	0x20011b84

0801aacc <_isatty_r>:
 801aacc:	b538      	push	{r3, r4, r5, lr}
 801aace:	4d06      	ldr	r5, [pc, #24]	; (801aae8 <_isatty_r+0x1c>)
 801aad0:	2300      	movs	r3, #0
 801aad2:	4604      	mov	r4, r0
 801aad4:	4608      	mov	r0, r1
 801aad6:	602b      	str	r3, [r5, #0]
 801aad8:	f7f0 fd15 	bl	800b506 <_isatty>
 801aadc:	1c43      	adds	r3, r0, #1
 801aade:	d102      	bne.n	801aae6 <_isatty_r+0x1a>
 801aae0:	682b      	ldr	r3, [r5, #0]
 801aae2:	b103      	cbz	r3, 801aae6 <_isatty_r+0x1a>
 801aae4:	6023      	str	r3, [r4, #0]
 801aae6:	bd38      	pop	{r3, r4, r5, pc}
 801aae8:	20011b84 	.word	0x20011b84

0801aaec <_lseek_r>:
 801aaec:	b538      	push	{r3, r4, r5, lr}
 801aaee:	4d07      	ldr	r5, [pc, #28]	; (801ab0c <_lseek_r+0x20>)
 801aaf0:	4604      	mov	r4, r0
 801aaf2:	4608      	mov	r0, r1
 801aaf4:	4611      	mov	r1, r2
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	602a      	str	r2, [r5, #0]
 801aafa:	461a      	mov	r2, r3
 801aafc:	f7f0 fd0e 	bl	800b51c <_lseek>
 801ab00:	1c43      	adds	r3, r0, #1
 801ab02:	d102      	bne.n	801ab0a <_lseek_r+0x1e>
 801ab04:	682b      	ldr	r3, [r5, #0]
 801ab06:	b103      	cbz	r3, 801ab0a <_lseek_r+0x1e>
 801ab08:	6023      	str	r3, [r4, #0]
 801ab0a:	bd38      	pop	{r3, r4, r5, pc}
 801ab0c:	20011b84 	.word	0x20011b84

0801ab10 <_read_r>:
 801ab10:	b538      	push	{r3, r4, r5, lr}
 801ab12:	4d07      	ldr	r5, [pc, #28]	; (801ab30 <_read_r+0x20>)
 801ab14:	4604      	mov	r4, r0
 801ab16:	4608      	mov	r0, r1
 801ab18:	4611      	mov	r1, r2
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	602a      	str	r2, [r5, #0]
 801ab1e:	461a      	mov	r2, r3
 801ab20:	f7f0 fc9c 	bl	800b45c <_read>
 801ab24:	1c43      	adds	r3, r0, #1
 801ab26:	d102      	bne.n	801ab2e <_read_r+0x1e>
 801ab28:	682b      	ldr	r3, [r5, #0]
 801ab2a:	b103      	cbz	r3, 801ab2e <_read_r+0x1e>
 801ab2c:	6023      	str	r3, [r4, #0]
 801ab2e:	bd38      	pop	{r3, r4, r5, pc}
 801ab30:	20011b84 	.word	0x20011b84
 801ab34:	00000000 	.word	0x00000000

0801ab38 <ceil>:
 801ab38:	ec51 0b10 	vmov	r0, r1, d0
 801ab3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ab44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ab48:	2e13      	cmp	r6, #19
 801ab4a:	ee10 5a10 	vmov	r5, s0
 801ab4e:	ee10 8a10 	vmov	r8, s0
 801ab52:	460c      	mov	r4, r1
 801ab54:	dc30      	bgt.n	801abb8 <ceil+0x80>
 801ab56:	2e00      	cmp	r6, #0
 801ab58:	da12      	bge.n	801ab80 <ceil+0x48>
 801ab5a:	a335      	add	r3, pc, #212	; (adr r3, 801ac30 <ceil+0xf8>)
 801ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab60:	f7e5 fb94 	bl	800028c <__adddf3>
 801ab64:	2200      	movs	r2, #0
 801ab66:	2300      	movs	r3, #0
 801ab68:	f7e5 ffd6 	bl	8000b18 <__aeabi_dcmpgt>
 801ab6c:	b128      	cbz	r0, 801ab7a <ceil+0x42>
 801ab6e:	2c00      	cmp	r4, #0
 801ab70:	db55      	blt.n	801ac1e <ceil+0xe6>
 801ab72:	432c      	orrs	r4, r5
 801ab74:	d057      	beq.n	801ac26 <ceil+0xee>
 801ab76:	4c30      	ldr	r4, [pc, #192]	; (801ac38 <ceil+0x100>)
 801ab78:	2500      	movs	r5, #0
 801ab7a:	4621      	mov	r1, r4
 801ab7c:	4628      	mov	r0, r5
 801ab7e:	e025      	b.n	801abcc <ceil+0x94>
 801ab80:	4f2e      	ldr	r7, [pc, #184]	; (801ac3c <ceil+0x104>)
 801ab82:	4137      	asrs	r7, r6
 801ab84:	ea01 0307 	and.w	r3, r1, r7
 801ab88:	4303      	orrs	r3, r0
 801ab8a:	d01f      	beq.n	801abcc <ceil+0x94>
 801ab8c:	a328      	add	r3, pc, #160	; (adr r3, 801ac30 <ceil+0xf8>)
 801ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab92:	f7e5 fb7b 	bl	800028c <__adddf3>
 801ab96:	2200      	movs	r2, #0
 801ab98:	2300      	movs	r3, #0
 801ab9a:	f7e5 ffbd 	bl	8000b18 <__aeabi_dcmpgt>
 801ab9e:	2800      	cmp	r0, #0
 801aba0:	d0eb      	beq.n	801ab7a <ceil+0x42>
 801aba2:	2c00      	cmp	r4, #0
 801aba4:	bfc2      	ittt	gt
 801aba6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801abaa:	fa43 f606 	asrgt.w	r6, r3, r6
 801abae:	19a4      	addgt	r4, r4, r6
 801abb0:	ea24 0407 	bic.w	r4, r4, r7
 801abb4:	2500      	movs	r5, #0
 801abb6:	e7e0      	b.n	801ab7a <ceil+0x42>
 801abb8:	2e33      	cmp	r6, #51	; 0x33
 801abba:	dd0b      	ble.n	801abd4 <ceil+0x9c>
 801abbc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801abc0:	d104      	bne.n	801abcc <ceil+0x94>
 801abc2:	ee10 2a10 	vmov	r2, s0
 801abc6:	460b      	mov	r3, r1
 801abc8:	f7e5 fb60 	bl	800028c <__adddf3>
 801abcc:	ec41 0b10 	vmov	d0, r0, r1
 801abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abd4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801abd8:	f04f 33ff 	mov.w	r3, #4294967295
 801abdc:	fa23 f707 	lsr.w	r7, r3, r7
 801abe0:	4207      	tst	r7, r0
 801abe2:	d0f3      	beq.n	801abcc <ceil+0x94>
 801abe4:	a312      	add	r3, pc, #72	; (adr r3, 801ac30 <ceil+0xf8>)
 801abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abea:	f7e5 fb4f 	bl	800028c <__adddf3>
 801abee:	2200      	movs	r2, #0
 801abf0:	2300      	movs	r3, #0
 801abf2:	f7e5 ff91 	bl	8000b18 <__aeabi_dcmpgt>
 801abf6:	2800      	cmp	r0, #0
 801abf8:	d0bf      	beq.n	801ab7a <ceil+0x42>
 801abfa:	2c00      	cmp	r4, #0
 801abfc:	dd02      	ble.n	801ac04 <ceil+0xcc>
 801abfe:	2e14      	cmp	r6, #20
 801ac00:	d103      	bne.n	801ac0a <ceil+0xd2>
 801ac02:	3401      	adds	r4, #1
 801ac04:	ea25 0507 	bic.w	r5, r5, r7
 801ac08:	e7b7      	b.n	801ab7a <ceil+0x42>
 801ac0a:	2301      	movs	r3, #1
 801ac0c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ac10:	fa03 f606 	lsl.w	r6, r3, r6
 801ac14:	4435      	add	r5, r6
 801ac16:	4545      	cmp	r5, r8
 801ac18:	bf38      	it	cc
 801ac1a:	18e4      	addcc	r4, r4, r3
 801ac1c:	e7f2      	b.n	801ac04 <ceil+0xcc>
 801ac1e:	2500      	movs	r5, #0
 801ac20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ac24:	e7a9      	b.n	801ab7a <ceil+0x42>
 801ac26:	4625      	mov	r5, r4
 801ac28:	e7a7      	b.n	801ab7a <ceil+0x42>
 801ac2a:	bf00      	nop
 801ac2c:	f3af 8000 	nop.w
 801ac30:	8800759c 	.word	0x8800759c
 801ac34:	7e37e43c 	.word	0x7e37e43c
 801ac38:	3ff00000 	.word	0x3ff00000
 801ac3c:	000fffff 	.word	0x000fffff

0801ac40 <cos>:
 801ac40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ac42:	ec53 2b10 	vmov	r2, r3, d0
 801ac46:	4824      	ldr	r0, [pc, #144]	; (801acd8 <cos+0x98>)
 801ac48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ac4c:	4281      	cmp	r1, r0
 801ac4e:	dc06      	bgt.n	801ac5e <cos+0x1e>
 801ac50:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801acd0 <cos+0x90>
 801ac54:	f000 fce4 	bl	801b620 <__kernel_cos>
 801ac58:	ec51 0b10 	vmov	r0, r1, d0
 801ac5c:	e007      	b.n	801ac6e <cos+0x2e>
 801ac5e:	481f      	ldr	r0, [pc, #124]	; (801acdc <cos+0x9c>)
 801ac60:	4281      	cmp	r1, r0
 801ac62:	dd09      	ble.n	801ac78 <cos+0x38>
 801ac64:	ee10 0a10 	vmov	r0, s0
 801ac68:	4619      	mov	r1, r3
 801ac6a:	f7e5 fb0d 	bl	8000288 <__aeabi_dsub>
 801ac6e:	ec41 0b10 	vmov	d0, r0, r1
 801ac72:	b005      	add	sp, #20
 801ac74:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac78:	4668      	mov	r0, sp
 801ac7a:	f000 fa11 	bl	801b0a0 <__ieee754_rem_pio2>
 801ac7e:	f000 0003 	and.w	r0, r0, #3
 801ac82:	2801      	cmp	r0, #1
 801ac84:	d007      	beq.n	801ac96 <cos+0x56>
 801ac86:	2802      	cmp	r0, #2
 801ac88:	d012      	beq.n	801acb0 <cos+0x70>
 801ac8a:	b9c0      	cbnz	r0, 801acbe <cos+0x7e>
 801ac8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ac90:	ed9d 0b00 	vldr	d0, [sp]
 801ac94:	e7de      	b.n	801ac54 <cos+0x14>
 801ac96:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ac9a:	ed9d 0b00 	vldr	d0, [sp]
 801ac9e:	f001 f8c7 	bl	801be30 <__kernel_sin>
 801aca2:	ec53 2b10 	vmov	r2, r3, d0
 801aca6:	ee10 0a10 	vmov	r0, s0
 801acaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801acae:	e7de      	b.n	801ac6e <cos+0x2e>
 801acb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801acb4:	ed9d 0b00 	vldr	d0, [sp]
 801acb8:	f000 fcb2 	bl	801b620 <__kernel_cos>
 801acbc:	e7f1      	b.n	801aca2 <cos+0x62>
 801acbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801acc2:	ed9d 0b00 	vldr	d0, [sp]
 801acc6:	2001      	movs	r0, #1
 801acc8:	f001 f8b2 	bl	801be30 <__kernel_sin>
 801accc:	e7c4      	b.n	801ac58 <cos+0x18>
 801acce:	bf00      	nop
	...
 801acd8:	3fe921fb 	.word	0x3fe921fb
 801acdc:	7fefffff 	.word	0x7fefffff

0801ace0 <round>:
 801ace0:	ec51 0b10 	vmov	r0, r1, d0
 801ace4:	b570      	push	{r4, r5, r6, lr}
 801ace6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801acea:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801acee:	2c13      	cmp	r4, #19
 801acf0:	ee10 2a10 	vmov	r2, s0
 801acf4:	460b      	mov	r3, r1
 801acf6:	dc19      	bgt.n	801ad2c <round+0x4c>
 801acf8:	2c00      	cmp	r4, #0
 801acfa:	da09      	bge.n	801ad10 <round+0x30>
 801acfc:	3401      	adds	r4, #1
 801acfe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801ad02:	d103      	bne.n	801ad0c <round+0x2c>
 801ad04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801ad08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ad0c:	2100      	movs	r1, #0
 801ad0e:	e028      	b.n	801ad62 <round+0x82>
 801ad10:	4d15      	ldr	r5, [pc, #84]	; (801ad68 <round+0x88>)
 801ad12:	4125      	asrs	r5, r4
 801ad14:	ea01 0605 	and.w	r6, r1, r5
 801ad18:	4332      	orrs	r2, r6
 801ad1a:	d00e      	beq.n	801ad3a <round+0x5a>
 801ad1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801ad20:	fa42 f404 	asr.w	r4, r2, r4
 801ad24:	4423      	add	r3, r4
 801ad26:	ea23 0305 	bic.w	r3, r3, r5
 801ad2a:	e7ef      	b.n	801ad0c <round+0x2c>
 801ad2c:	2c33      	cmp	r4, #51	; 0x33
 801ad2e:	dd07      	ble.n	801ad40 <round+0x60>
 801ad30:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801ad34:	d101      	bne.n	801ad3a <round+0x5a>
 801ad36:	f7e5 faa9 	bl	800028c <__adddf3>
 801ad3a:	ec41 0b10 	vmov	d0, r0, r1
 801ad3e:	bd70      	pop	{r4, r5, r6, pc}
 801ad40:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801ad44:	f04f 35ff 	mov.w	r5, #4294967295
 801ad48:	40f5      	lsrs	r5, r6
 801ad4a:	4228      	tst	r0, r5
 801ad4c:	d0f5      	beq.n	801ad3a <round+0x5a>
 801ad4e:	2101      	movs	r1, #1
 801ad50:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801ad54:	fa01 f404 	lsl.w	r4, r1, r4
 801ad58:	1912      	adds	r2, r2, r4
 801ad5a:	bf28      	it	cs
 801ad5c:	185b      	addcs	r3, r3, r1
 801ad5e:	ea22 0105 	bic.w	r1, r2, r5
 801ad62:	4608      	mov	r0, r1
 801ad64:	4619      	mov	r1, r3
 801ad66:	e7e8      	b.n	801ad3a <round+0x5a>
 801ad68:	000fffff 	.word	0x000fffff
 801ad6c:	00000000 	.word	0x00000000

0801ad70 <sin>:
 801ad70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ad72:	ec53 2b10 	vmov	r2, r3, d0
 801ad76:	4826      	ldr	r0, [pc, #152]	; (801ae10 <sin+0xa0>)
 801ad78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ad7c:	4281      	cmp	r1, r0
 801ad7e:	dc07      	bgt.n	801ad90 <sin+0x20>
 801ad80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801ae08 <sin+0x98>
 801ad84:	2000      	movs	r0, #0
 801ad86:	f001 f853 	bl	801be30 <__kernel_sin>
 801ad8a:	ec51 0b10 	vmov	r0, r1, d0
 801ad8e:	e007      	b.n	801ada0 <sin+0x30>
 801ad90:	4820      	ldr	r0, [pc, #128]	; (801ae14 <sin+0xa4>)
 801ad92:	4281      	cmp	r1, r0
 801ad94:	dd09      	ble.n	801adaa <sin+0x3a>
 801ad96:	ee10 0a10 	vmov	r0, s0
 801ad9a:	4619      	mov	r1, r3
 801ad9c:	f7e5 fa74 	bl	8000288 <__aeabi_dsub>
 801ada0:	ec41 0b10 	vmov	d0, r0, r1
 801ada4:	b005      	add	sp, #20
 801ada6:	f85d fb04 	ldr.w	pc, [sp], #4
 801adaa:	4668      	mov	r0, sp
 801adac:	f000 f978 	bl	801b0a0 <__ieee754_rem_pio2>
 801adb0:	f000 0003 	and.w	r0, r0, #3
 801adb4:	2801      	cmp	r0, #1
 801adb6:	d008      	beq.n	801adca <sin+0x5a>
 801adb8:	2802      	cmp	r0, #2
 801adba:	d00d      	beq.n	801add8 <sin+0x68>
 801adbc:	b9d0      	cbnz	r0, 801adf4 <sin+0x84>
 801adbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801adc2:	ed9d 0b00 	vldr	d0, [sp]
 801adc6:	2001      	movs	r0, #1
 801adc8:	e7dd      	b.n	801ad86 <sin+0x16>
 801adca:	ed9d 1b02 	vldr	d1, [sp, #8]
 801adce:	ed9d 0b00 	vldr	d0, [sp]
 801add2:	f000 fc25 	bl	801b620 <__kernel_cos>
 801add6:	e7d8      	b.n	801ad8a <sin+0x1a>
 801add8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801addc:	ed9d 0b00 	vldr	d0, [sp]
 801ade0:	2001      	movs	r0, #1
 801ade2:	f001 f825 	bl	801be30 <__kernel_sin>
 801ade6:	ec53 2b10 	vmov	r2, r3, d0
 801adea:	ee10 0a10 	vmov	r0, s0
 801adee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801adf2:	e7d5      	b.n	801ada0 <sin+0x30>
 801adf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801adf8:	ed9d 0b00 	vldr	d0, [sp]
 801adfc:	f000 fc10 	bl	801b620 <__kernel_cos>
 801ae00:	e7f1      	b.n	801ade6 <sin+0x76>
 801ae02:	bf00      	nop
 801ae04:	f3af 8000 	nop.w
	...
 801ae10:	3fe921fb 	.word	0x3fe921fb
 801ae14:	7fefffff 	.word	0x7fefffff

0801ae18 <ceilf>:
 801ae18:	ee10 3a10 	vmov	r3, s0
 801ae1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ae20:	3a7f      	subs	r2, #127	; 0x7f
 801ae22:	2a16      	cmp	r2, #22
 801ae24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ae28:	dc2a      	bgt.n	801ae80 <ceilf+0x68>
 801ae2a:	2a00      	cmp	r2, #0
 801ae2c:	da11      	bge.n	801ae52 <ceilf+0x3a>
 801ae2e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801ae94 <ceilf+0x7c>
 801ae32:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ae36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ae3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae3e:	dd05      	ble.n	801ae4c <ceilf+0x34>
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	db23      	blt.n	801ae8c <ceilf+0x74>
 801ae44:	2900      	cmp	r1, #0
 801ae46:	bf18      	it	ne
 801ae48:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801ae4c:	ee00 3a10 	vmov	s0, r3
 801ae50:	4770      	bx	lr
 801ae52:	4911      	ldr	r1, [pc, #68]	; (801ae98 <ceilf+0x80>)
 801ae54:	4111      	asrs	r1, r2
 801ae56:	420b      	tst	r3, r1
 801ae58:	d0fa      	beq.n	801ae50 <ceilf+0x38>
 801ae5a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ae94 <ceilf+0x7c>
 801ae5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ae62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ae66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae6a:	ddef      	ble.n	801ae4c <ceilf+0x34>
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	bfc2      	ittt	gt
 801ae70:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801ae74:	fa40 f202 	asrgt.w	r2, r0, r2
 801ae78:	189b      	addgt	r3, r3, r2
 801ae7a:	ea23 0301 	bic.w	r3, r3, r1
 801ae7e:	e7e5      	b.n	801ae4c <ceilf+0x34>
 801ae80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ae84:	d3e4      	bcc.n	801ae50 <ceilf+0x38>
 801ae86:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ae8a:	4770      	bx	lr
 801ae8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ae90:	e7dc      	b.n	801ae4c <ceilf+0x34>
 801ae92:	bf00      	nop
 801ae94:	7149f2ca 	.word	0x7149f2ca
 801ae98:	007fffff 	.word	0x007fffff

0801ae9c <atan2>:
 801ae9c:	f000 b834 	b.w	801af08 <__ieee754_atan2>

0801aea0 <sqrt>:
 801aea0:	b538      	push	{r3, r4, r5, lr}
 801aea2:	ed2d 8b02 	vpush	{d8}
 801aea6:	ec55 4b10 	vmov	r4, r5, d0
 801aeaa:	f000 fb03 	bl	801b4b4 <__ieee754_sqrt>
 801aeae:	4b15      	ldr	r3, [pc, #84]	; (801af04 <sqrt+0x64>)
 801aeb0:	eeb0 8a40 	vmov.f32	s16, s0
 801aeb4:	eef0 8a60 	vmov.f32	s17, s1
 801aeb8:	f993 3000 	ldrsb.w	r3, [r3]
 801aebc:	3301      	adds	r3, #1
 801aebe:	d019      	beq.n	801aef4 <sqrt+0x54>
 801aec0:	4622      	mov	r2, r4
 801aec2:	462b      	mov	r3, r5
 801aec4:	4620      	mov	r0, r4
 801aec6:	4629      	mov	r1, r5
 801aec8:	f7e5 fe30 	bl	8000b2c <__aeabi_dcmpun>
 801aecc:	b990      	cbnz	r0, 801aef4 <sqrt+0x54>
 801aece:	2200      	movs	r2, #0
 801aed0:	2300      	movs	r3, #0
 801aed2:	4620      	mov	r0, r4
 801aed4:	4629      	mov	r1, r5
 801aed6:	f7e5 fe01 	bl	8000adc <__aeabi_dcmplt>
 801aeda:	b158      	cbz	r0, 801aef4 <sqrt+0x54>
 801aedc:	f7fb f996 	bl	801620c <__errno>
 801aee0:	2321      	movs	r3, #33	; 0x21
 801aee2:	6003      	str	r3, [r0, #0]
 801aee4:	2200      	movs	r2, #0
 801aee6:	2300      	movs	r3, #0
 801aee8:	4610      	mov	r0, r2
 801aeea:	4619      	mov	r1, r3
 801aeec:	f7e5 fcae 	bl	800084c <__aeabi_ddiv>
 801aef0:	ec41 0b18 	vmov	d8, r0, r1
 801aef4:	eeb0 0a48 	vmov.f32	s0, s16
 801aef8:	eef0 0a68 	vmov.f32	s1, s17
 801aefc:	ecbd 8b02 	vpop	{d8}
 801af00:	bd38      	pop	{r3, r4, r5, pc}
 801af02:	bf00      	nop
 801af04:	200043e4 	.word	0x200043e4

0801af08 <__ieee754_atan2>:
 801af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af0c:	ec57 6b11 	vmov	r6, r7, d1
 801af10:	4273      	negs	r3, r6
 801af12:	f8df e184 	ldr.w	lr, [pc, #388]	; 801b098 <__ieee754_atan2+0x190>
 801af16:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801af1a:	4333      	orrs	r3, r6
 801af1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801af20:	4573      	cmp	r3, lr
 801af22:	ec51 0b10 	vmov	r0, r1, d0
 801af26:	ee11 8a10 	vmov	r8, s2
 801af2a:	d80a      	bhi.n	801af42 <__ieee754_atan2+0x3a>
 801af2c:	4244      	negs	r4, r0
 801af2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801af32:	4304      	orrs	r4, r0
 801af34:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801af38:	4574      	cmp	r4, lr
 801af3a:	ee10 9a10 	vmov	r9, s0
 801af3e:	468c      	mov	ip, r1
 801af40:	d907      	bls.n	801af52 <__ieee754_atan2+0x4a>
 801af42:	4632      	mov	r2, r6
 801af44:	463b      	mov	r3, r7
 801af46:	f7e5 f9a1 	bl	800028c <__adddf3>
 801af4a:	ec41 0b10 	vmov	d0, r0, r1
 801af4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af52:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801af56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801af5a:	4334      	orrs	r4, r6
 801af5c:	d103      	bne.n	801af66 <__ieee754_atan2+0x5e>
 801af5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af62:	f001 b825 	b.w	801bfb0 <atan>
 801af66:	17bc      	asrs	r4, r7, #30
 801af68:	f004 0402 	and.w	r4, r4, #2
 801af6c:	ea53 0909 	orrs.w	r9, r3, r9
 801af70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801af74:	d107      	bne.n	801af86 <__ieee754_atan2+0x7e>
 801af76:	2c02      	cmp	r4, #2
 801af78:	d060      	beq.n	801b03c <__ieee754_atan2+0x134>
 801af7a:	2c03      	cmp	r4, #3
 801af7c:	d1e5      	bne.n	801af4a <__ieee754_atan2+0x42>
 801af7e:	a142      	add	r1, pc, #264	; (adr r1, 801b088 <__ieee754_atan2+0x180>)
 801af80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af84:	e7e1      	b.n	801af4a <__ieee754_atan2+0x42>
 801af86:	ea52 0808 	orrs.w	r8, r2, r8
 801af8a:	d106      	bne.n	801af9a <__ieee754_atan2+0x92>
 801af8c:	f1bc 0f00 	cmp.w	ip, #0
 801af90:	da5f      	bge.n	801b052 <__ieee754_atan2+0x14a>
 801af92:	a13f      	add	r1, pc, #252	; (adr r1, 801b090 <__ieee754_atan2+0x188>)
 801af94:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af98:	e7d7      	b.n	801af4a <__ieee754_atan2+0x42>
 801af9a:	4572      	cmp	r2, lr
 801af9c:	d10f      	bne.n	801afbe <__ieee754_atan2+0xb6>
 801af9e:	4293      	cmp	r3, r2
 801afa0:	f104 34ff 	add.w	r4, r4, #4294967295
 801afa4:	d107      	bne.n	801afb6 <__ieee754_atan2+0xae>
 801afa6:	2c02      	cmp	r4, #2
 801afa8:	d84c      	bhi.n	801b044 <__ieee754_atan2+0x13c>
 801afaa:	4b35      	ldr	r3, [pc, #212]	; (801b080 <__ieee754_atan2+0x178>)
 801afac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801afb0:	e9d4 0100 	ldrd	r0, r1, [r4]
 801afb4:	e7c9      	b.n	801af4a <__ieee754_atan2+0x42>
 801afb6:	2c02      	cmp	r4, #2
 801afb8:	d848      	bhi.n	801b04c <__ieee754_atan2+0x144>
 801afba:	4b32      	ldr	r3, [pc, #200]	; (801b084 <__ieee754_atan2+0x17c>)
 801afbc:	e7f6      	b.n	801afac <__ieee754_atan2+0xa4>
 801afbe:	4573      	cmp	r3, lr
 801afc0:	d0e4      	beq.n	801af8c <__ieee754_atan2+0x84>
 801afc2:	1a9b      	subs	r3, r3, r2
 801afc4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801afc8:	ea4f 5223 	mov.w	r2, r3, asr #20
 801afcc:	da1e      	bge.n	801b00c <__ieee754_atan2+0x104>
 801afce:	2f00      	cmp	r7, #0
 801afd0:	da01      	bge.n	801afd6 <__ieee754_atan2+0xce>
 801afd2:	323c      	adds	r2, #60	; 0x3c
 801afd4:	db1e      	blt.n	801b014 <__ieee754_atan2+0x10c>
 801afd6:	4632      	mov	r2, r6
 801afd8:	463b      	mov	r3, r7
 801afda:	f7e5 fc37 	bl	800084c <__aeabi_ddiv>
 801afde:	ec41 0b10 	vmov	d0, r0, r1
 801afe2:	f001 f985 	bl	801c2f0 <fabs>
 801afe6:	f000 ffe3 	bl	801bfb0 <atan>
 801afea:	ec51 0b10 	vmov	r0, r1, d0
 801afee:	2c01      	cmp	r4, #1
 801aff0:	d013      	beq.n	801b01a <__ieee754_atan2+0x112>
 801aff2:	2c02      	cmp	r4, #2
 801aff4:	d015      	beq.n	801b022 <__ieee754_atan2+0x11a>
 801aff6:	2c00      	cmp	r4, #0
 801aff8:	d0a7      	beq.n	801af4a <__ieee754_atan2+0x42>
 801affa:	a319      	add	r3, pc, #100	; (adr r3, 801b060 <__ieee754_atan2+0x158>)
 801affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b000:	f7e5 f942 	bl	8000288 <__aeabi_dsub>
 801b004:	a318      	add	r3, pc, #96	; (adr r3, 801b068 <__ieee754_atan2+0x160>)
 801b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b00a:	e014      	b.n	801b036 <__ieee754_atan2+0x12e>
 801b00c:	a118      	add	r1, pc, #96	; (adr r1, 801b070 <__ieee754_atan2+0x168>)
 801b00e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b012:	e7ec      	b.n	801afee <__ieee754_atan2+0xe6>
 801b014:	2000      	movs	r0, #0
 801b016:	2100      	movs	r1, #0
 801b018:	e7e9      	b.n	801afee <__ieee754_atan2+0xe6>
 801b01a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b01e:	4619      	mov	r1, r3
 801b020:	e793      	b.n	801af4a <__ieee754_atan2+0x42>
 801b022:	a30f      	add	r3, pc, #60	; (adr r3, 801b060 <__ieee754_atan2+0x158>)
 801b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b028:	f7e5 f92e 	bl	8000288 <__aeabi_dsub>
 801b02c:	4602      	mov	r2, r0
 801b02e:	460b      	mov	r3, r1
 801b030:	a10d      	add	r1, pc, #52	; (adr r1, 801b068 <__ieee754_atan2+0x160>)
 801b032:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b036:	f7e5 f927 	bl	8000288 <__aeabi_dsub>
 801b03a:	e786      	b.n	801af4a <__ieee754_atan2+0x42>
 801b03c:	a10a      	add	r1, pc, #40	; (adr r1, 801b068 <__ieee754_atan2+0x160>)
 801b03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b042:	e782      	b.n	801af4a <__ieee754_atan2+0x42>
 801b044:	a10c      	add	r1, pc, #48	; (adr r1, 801b078 <__ieee754_atan2+0x170>)
 801b046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b04a:	e77e      	b.n	801af4a <__ieee754_atan2+0x42>
 801b04c:	2000      	movs	r0, #0
 801b04e:	2100      	movs	r1, #0
 801b050:	e77b      	b.n	801af4a <__ieee754_atan2+0x42>
 801b052:	a107      	add	r1, pc, #28	; (adr r1, 801b070 <__ieee754_atan2+0x168>)
 801b054:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b058:	e777      	b.n	801af4a <__ieee754_atan2+0x42>
 801b05a:	bf00      	nop
 801b05c:	f3af 8000 	nop.w
 801b060:	33145c07 	.word	0x33145c07
 801b064:	3ca1a626 	.word	0x3ca1a626
 801b068:	54442d18 	.word	0x54442d18
 801b06c:	400921fb 	.word	0x400921fb
 801b070:	54442d18 	.word	0x54442d18
 801b074:	3ff921fb 	.word	0x3ff921fb
 801b078:	54442d18 	.word	0x54442d18
 801b07c:	3fe921fb 	.word	0x3fe921fb
 801b080:	0801ccd8 	.word	0x0801ccd8
 801b084:	0801ccf0 	.word	0x0801ccf0
 801b088:	54442d18 	.word	0x54442d18
 801b08c:	c00921fb 	.word	0xc00921fb
 801b090:	54442d18 	.word	0x54442d18
 801b094:	bff921fb 	.word	0xbff921fb
 801b098:	7ff00000 	.word	0x7ff00000
 801b09c:	00000000 	.word	0x00000000

0801b0a0 <__ieee754_rem_pio2>:
 801b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0a4:	ed2d 8b02 	vpush	{d8}
 801b0a8:	ec55 4b10 	vmov	r4, r5, d0
 801b0ac:	4bca      	ldr	r3, [pc, #808]	; (801b3d8 <__ieee754_rem_pio2+0x338>)
 801b0ae:	b08b      	sub	sp, #44	; 0x2c
 801b0b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b0b4:	4598      	cmp	r8, r3
 801b0b6:	4682      	mov	sl, r0
 801b0b8:	9502      	str	r5, [sp, #8]
 801b0ba:	dc08      	bgt.n	801b0ce <__ieee754_rem_pio2+0x2e>
 801b0bc:	2200      	movs	r2, #0
 801b0be:	2300      	movs	r3, #0
 801b0c0:	ed80 0b00 	vstr	d0, [r0]
 801b0c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b0c8:	f04f 0b00 	mov.w	fp, #0
 801b0cc:	e028      	b.n	801b120 <__ieee754_rem_pio2+0x80>
 801b0ce:	4bc3      	ldr	r3, [pc, #780]	; (801b3dc <__ieee754_rem_pio2+0x33c>)
 801b0d0:	4598      	cmp	r8, r3
 801b0d2:	dc78      	bgt.n	801b1c6 <__ieee754_rem_pio2+0x126>
 801b0d4:	9b02      	ldr	r3, [sp, #8]
 801b0d6:	4ec2      	ldr	r6, [pc, #776]	; (801b3e0 <__ieee754_rem_pio2+0x340>)
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	ee10 0a10 	vmov	r0, s0
 801b0de:	a3b0      	add	r3, pc, #704	; (adr r3, 801b3a0 <__ieee754_rem_pio2+0x300>)
 801b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e4:	4629      	mov	r1, r5
 801b0e6:	dd39      	ble.n	801b15c <__ieee754_rem_pio2+0xbc>
 801b0e8:	f7e5 f8ce 	bl	8000288 <__aeabi_dsub>
 801b0ec:	45b0      	cmp	r8, r6
 801b0ee:	4604      	mov	r4, r0
 801b0f0:	460d      	mov	r5, r1
 801b0f2:	d01b      	beq.n	801b12c <__ieee754_rem_pio2+0x8c>
 801b0f4:	a3ac      	add	r3, pc, #688	; (adr r3, 801b3a8 <__ieee754_rem_pio2+0x308>)
 801b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0fa:	f7e5 f8c5 	bl	8000288 <__aeabi_dsub>
 801b0fe:	4602      	mov	r2, r0
 801b100:	460b      	mov	r3, r1
 801b102:	e9ca 2300 	strd	r2, r3, [sl]
 801b106:	4620      	mov	r0, r4
 801b108:	4629      	mov	r1, r5
 801b10a:	f7e5 f8bd 	bl	8000288 <__aeabi_dsub>
 801b10e:	a3a6      	add	r3, pc, #664	; (adr r3, 801b3a8 <__ieee754_rem_pio2+0x308>)
 801b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b114:	f7e5 f8b8 	bl	8000288 <__aeabi_dsub>
 801b118:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b11c:	f04f 0b01 	mov.w	fp, #1
 801b120:	4658      	mov	r0, fp
 801b122:	b00b      	add	sp, #44	; 0x2c
 801b124:	ecbd 8b02 	vpop	{d8}
 801b128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b12c:	a3a0      	add	r3, pc, #640	; (adr r3, 801b3b0 <__ieee754_rem_pio2+0x310>)
 801b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b132:	f7e5 f8a9 	bl	8000288 <__aeabi_dsub>
 801b136:	a3a0      	add	r3, pc, #640	; (adr r3, 801b3b8 <__ieee754_rem_pio2+0x318>)
 801b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13c:	4604      	mov	r4, r0
 801b13e:	460d      	mov	r5, r1
 801b140:	f7e5 f8a2 	bl	8000288 <__aeabi_dsub>
 801b144:	4602      	mov	r2, r0
 801b146:	460b      	mov	r3, r1
 801b148:	e9ca 2300 	strd	r2, r3, [sl]
 801b14c:	4620      	mov	r0, r4
 801b14e:	4629      	mov	r1, r5
 801b150:	f7e5 f89a 	bl	8000288 <__aeabi_dsub>
 801b154:	a398      	add	r3, pc, #608	; (adr r3, 801b3b8 <__ieee754_rem_pio2+0x318>)
 801b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b15a:	e7db      	b.n	801b114 <__ieee754_rem_pio2+0x74>
 801b15c:	f7e5 f896 	bl	800028c <__adddf3>
 801b160:	45b0      	cmp	r8, r6
 801b162:	4604      	mov	r4, r0
 801b164:	460d      	mov	r5, r1
 801b166:	d016      	beq.n	801b196 <__ieee754_rem_pio2+0xf6>
 801b168:	a38f      	add	r3, pc, #572	; (adr r3, 801b3a8 <__ieee754_rem_pio2+0x308>)
 801b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b16e:	f7e5 f88d 	bl	800028c <__adddf3>
 801b172:	4602      	mov	r2, r0
 801b174:	460b      	mov	r3, r1
 801b176:	e9ca 2300 	strd	r2, r3, [sl]
 801b17a:	4620      	mov	r0, r4
 801b17c:	4629      	mov	r1, r5
 801b17e:	f7e5 f883 	bl	8000288 <__aeabi_dsub>
 801b182:	a389      	add	r3, pc, #548	; (adr r3, 801b3a8 <__ieee754_rem_pio2+0x308>)
 801b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b188:	f7e5 f880 	bl	800028c <__adddf3>
 801b18c:	f04f 3bff 	mov.w	fp, #4294967295
 801b190:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b194:	e7c4      	b.n	801b120 <__ieee754_rem_pio2+0x80>
 801b196:	a386      	add	r3, pc, #536	; (adr r3, 801b3b0 <__ieee754_rem_pio2+0x310>)
 801b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b19c:	f7e5 f876 	bl	800028c <__adddf3>
 801b1a0:	a385      	add	r3, pc, #532	; (adr r3, 801b3b8 <__ieee754_rem_pio2+0x318>)
 801b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1a6:	4604      	mov	r4, r0
 801b1a8:	460d      	mov	r5, r1
 801b1aa:	f7e5 f86f 	bl	800028c <__adddf3>
 801b1ae:	4602      	mov	r2, r0
 801b1b0:	460b      	mov	r3, r1
 801b1b2:	e9ca 2300 	strd	r2, r3, [sl]
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	f7e5 f865 	bl	8000288 <__aeabi_dsub>
 801b1be:	a37e      	add	r3, pc, #504	; (adr r3, 801b3b8 <__ieee754_rem_pio2+0x318>)
 801b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1c4:	e7e0      	b.n	801b188 <__ieee754_rem_pio2+0xe8>
 801b1c6:	4b87      	ldr	r3, [pc, #540]	; (801b3e4 <__ieee754_rem_pio2+0x344>)
 801b1c8:	4598      	cmp	r8, r3
 801b1ca:	f300 80d9 	bgt.w	801b380 <__ieee754_rem_pio2+0x2e0>
 801b1ce:	f001 f88f 	bl	801c2f0 <fabs>
 801b1d2:	ec55 4b10 	vmov	r4, r5, d0
 801b1d6:	ee10 0a10 	vmov	r0, s0
 801b1da:	a379      	add	r3, pc, #484	; (adr r3, 801b3c0 <__ieee754_rem_pio2+0x320>)
 801b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e0:	4629      	mov	r1, r5
 801b1e2:	f7e5 fa09 	bl	80005f8 <__aeabi_dmul>
 801b1e6:	4b80      	ldr	r3, [pc, #512]	; (801b3e8 <__ieee754_rem_pio2+0x348>)
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	f7e5 f84f 	bl	800028c <__adddf3>
 801b1ee:	f7e5 fcb3 	bl	8000b58 <__aeabi_d2iz>
 801b1f2:	4683      	mov	fp, r0
 801b1f4:	f7e5 f996 	bl	8000524 <__aeabi_i2d>
 801b1f8:	4602      	mov	r2, r0
 801b1fa:	460b      	mov	r3, r1
 801b1fc:	ec43 2b18 	vmov	d8, r2, r3
 801b200:	a367      	add	r3, pc, #412	; (adr r3, 801b3a0 <__ieee754_rem_pio2+0x300>)
 801b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b206:	f7e5 f9f7 	bl	80005f8 <__aeabi_dmul>
 801b20a:	4602      	mov	r2, r0
 801b20c:	460b      	mov	r3, r1
 801b20e:	4620      	mov	r0, r4
 801b210:	4629      	mov	r1, r5
 801b212:	f7e5 f839 	bl	8000288 <__aeabi_dsub>
 801b216:	a364      	add	r3, pc, #400	; (adr r3, 801b3a8 <__ieee754_rem_pio2+0x308>)
 801b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b21c:	4606      	mov	r6, r0
 801b21e:	460f      	mov	r7, r1
 801b220:	ec51 0b18 	vmov	r0, r1, d8
 801b224:	f7e5 f9e8 	bl	80005f8 <__aeabi_dmul>
 801b228:	f1bb 0f1f 	cmp.w	fp, #31
 801b22c:	4604      	mov	r4, r0
 801b22e:	460d      	mov	r5, r1
 801b230:	dc0d      	bgt.n	801b24e <__ieee754_rem_pio2+0x1ae>
 801b232:	4b6e      	ldr	r3, [pc, #440]	; (801b3ec <__ieee754_rem_pio2+0x34c>)
 801b234:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b23c:	4543      	cmp	r3, r8
 801b23e:	d006      	beq.n	801b24e <__ieee754_rem_pio2+0x1ae>
 801b240:	4622      	mov	r2, r4
 801b242:	462b      	mov	r3, r5
 801b244:	4630      	mov	r0, r6
 801b246:	4639      	mov	r1, r7
 801b248:	f7e5 f81e 	bl	8000288 <__aeabi_dsub>
 801b24c:	e00f      	b.n	801b26e <__ieee754_rem_pio2+0x1ce>
 801b24e:	462b      	mov	r3, r5
 801b250:	4622      	mov	r2, r4
 801b252:	4630      	mov	r0, r6
 801b254:	4639      	mov	r1, r7
 801b256:	f7e5 f817 	bl	8000288 <__aeabi_dsub>
 801b25a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b25e:	9303      	str	r3, [sp, #12]
 801b260:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b264:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b268:	f1b8 0f10 	cmp.w	r8, #16
 801b26c:	dc02      	bgt.n	801b274 <__ieee754_rem_pio2+0x1d4>
 801b26e:	e9ca 0100 	strd	r0, r1, [sl]
 801b272:	e039      	b.n	801b2e8 <__ieee754_rem_pio2+0x248>
 801b274:	a34e      	add	r3, pc, #312	; (adr r3, 801b3b0 <__ieee754_rem_pio2+0x310>)
 801b276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b27a:	ec51 0b18 	vmov	r0, r1, d8
 801b27e:	f7e5 f9bb 	bl	80005f8 <__aeabi_dmul>
 801b282:	4604      	mov	r4, r0
 801b284:	460d      	mov	r5, r1
 801b286:	4602      	mov	r2, r0
 801b288:	460b      	mov	r3, r1
 801b28a:	4630      	mov	r0, r6
 801b28c:	4639      	mov	r1, r7
 801b28e:	f7e4 fffb 	bl	8000288 <__aeabi_dsub>
 801b292:	4602      	mov	r2, r0
 801b294:	460b      	mov	r3, r1
 801b296:	4680      	mov	r8, r0
 801b298:	4689      	mov	r9, r1
 801b29a:	4630      	mov	r0, r6
 801b29c:	4639      	mov	r1, r7
 801b29e:	f7e4 fff3 	bl	8000288 <__aeabi_dsub>
 801b2a2:	4622      	mov	r2, r4
 801b2a4:	462b      	mov	r3, r5
 801b2a6:	f7e4 ffef 	bl	8000288 <__aeabi_dsub>
 801b2aa:	a343      	add	r3, pc, #268	; (adr r3, 801b3b8 <__ieee754_rem_pio2+0x318>)
 801b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b0:	4604      	mov	r4, r0
 801b2b2:	460d      	mov	r5, r1
 801b2b4:	ec51 0b18 	vmov	r0, r1, d8
 801b2b8:	f7e5 f99e 	bl	80005f8 <__aeabi_dmul>
 801b2bc:	4622      	mov	r2, r4
 801b2be:	462b      	mov	r3, r5
 801b2c0:	f7e4 ffe2 	bl	8000288 <__aeabi_dsub>
 801b2c4:	4602      	mov	r2, r0
 801b2c6:	460b      	mov	r3, r1
 801b2c8:	4604      	mov	r4, r0
 801b2ca:	460d      	mov	r5, r1
 801b2cc:	4640      	mov	r0, r8
 801b2ce:	4649      	mov	r1, r9
 801b2d0:	f7e4 ffda 	bl	8000288 <__aeabi_dsub>
 801b2d4:	9a03      	ldr	r2, [sp, #12]
 801b2d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b2da:	1ad3      	subs	r3, r2, r3
 801b2dc:	2b31      	cmp	r3, #49	; 0x31
 801b2de:	dc24      	bgt.n	801b32a <__ieee754_rem_pio2+0x28a>
 801b2e0:	e9ca 0100 	strd	r0, r1, [sl]
 801b2e4:	4646      	mov	r6, r8
 801b2e6:	464f      	mov	r7, r9
 801b2e8:	e9da 8900 	ldrd	r8, r9, [sl]
 801b2ec:	4630      	mov	r0, r6
 801b2ee:	4642      	mov	r2, r8
 801b2f0:	464b      	mov	r3, r9
 801b2f2:	4639      	mov	r1, r7
 801b2f4:	f7e4 ffc8 	bl	8000288 <__aeabi_dsub>
 801b2f8:	462b      	mov	r3, r5
 801b2fa:	4622      	mov	r2, r4
 801b2fc:	f7e4 ffc4 	bl	8000288 <__aeabi_dsub>
 801b300:	9b02      	ldr	r3, [sp, #8]
 801b302:	2b00      	cmp	r3, #0
 801b304:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b308:	f6bf af0a 	bge.w	801b120 <__ieee754_rem_pio2+0x80>
 801b30c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b310:	f8ca 3004 	str.w	r3, [sl, #4]
 801b314:	f8ca 8000 	str.w	r8, [sl]
 801b318:	f8ca 0008 	str.w	r0, [sl, #8]
 801b31c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b320:	f8ca 300c 	str.w	r3, [sl, #12]
 801b324:	f1cb 0b00 	rsb	fp, fp, #0
 801b328:	e6fa      	b.n	801b120 <__ieee754_rem_pio2+0x80>
 801b32a:	a327      	add	r3, pc, #156	; (adr r3, 801b3c8 <__ieee754_rem_pio2+0x328>)
 801b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b330:	ec51 0b18 	vmov	r0, r1, d8
 801b334:	f7e5 f960 	bl	80005f8 <__aeabi_dmul>
 801b338:	4604      	mov	r4, r0
 801b33a:	460d      	mov	r5, r1
 801b33c:	4602      	mov	r2, r0
 801b33e:	460b      	mov	r3, r1
 801b340:	4640      	mov	r0, r8
 801b342:	4649      	mov	r1, r9
 801b344:	f7e4 ffa0 	bl	8000288 <__aeabi_dsub>
 801b348:	4602      	mov	r2, r0
 801b34a:	460b      	mov	r3, r1
 801b34c:	4606      	mov	r6, r0
 801b34e:	460f      	mov	r7, r1
 801b350:	4640      	mov	r0, r8
 801b352:	4649      	mov	r1, r9
 801b354:	f7e4 ff98 	bl	8000288 <__aeabi_dsub>
 801b358:	4622      	mov	r2, r4
 801b35a:	462b      	mov	r3, r5
 801b35c:	f7e4 ff94 	bl	8000288 <__aeabi_dsub>
 801b360:	a31b      	add	r3, pc, #108	; (adr r3, 801b3d0 <__ieee754_rem_pio2+0x330>)
 801b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b366:	4604      	mov	r4, r0
 801b368:	460d      	mov	r5, r1
 801b36a:	ec51 0b18 	vmov	r0, r1, d8
 801b36e:	f7e5 f943 	bl	80005f8 <__aeabi_dmul>
 801b372:	4622      	mov	r2, r4
 801b374:	462b      	mov	r3, r5
 801b376:	f7e4 ff87 	bl	8000288 <__aeabi_dsub>
 801b37a:	4604      	mov	r4, r0
 801b37c:	460d      	mov	r5, r1
 801b37e:	e75f      	b.n	801b240 <__ieee754_rem_pio2+0x1a0>
 801b380:	4b1b      	ldr	r3, [pc, #108]	; (801b3f0 <__ieee754_rem_pio2+0x350>)
 801b382:	4598      	cmp	r8, r3
 801b384:	dd36      	ble.n	801b3f4 <__ieee754_rem_pio2+0x354>
 801b386:	ee10 2a10 	vmov	r2, s0
 801b38a:	462b      	mov	r3, r5
 801b38c:	4620      	mov	r0, r4
 801b38e:	4629      	mov	r1, r5
 801b390:	f7e4 ff7a 	bl	8000288 <__aeabi_dsub>
 801b394:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b398:	e9ca 0100 	strd	r0, r1, [sl]
 801b39c:	e694      	b.n	801b0c8 <__ieee754_rem_pio2+0x28>
 801b39e:	bf00      	nop
 801b3a0:	54400000 	.word	0x54400000
 801b3a4:	3ff921fb 	.word	0x3ff921fb
 801b3a8:	1a626331 	.word	0x1a626331
 801b3ac:	3dd0b461 	.word	0x3dd0b461
 801b3b0:	1a600000 	.word	0x1a600000
 801b3b4:	3dd0b461 	.word	0x3dd0b461
 801b3b8:	2e037073 	.word	0x2e037073
 801b3bc:	3ba3198a 	.word	0x3ba3198a
 801b3c0:	6dc9c883 	.word	0x6dc9c883
 801b3c4:	3fe45f30 	.word	0x3fe45f30
 801b3c8:	2e000000 	.word	0x2e000000
 801b3cc:	3ba3198a 	.word	0x3ba3198a
 801b3d0:	252049c1 	.word	0x252049c1
 801b3d4:	397b839a 	.word	0x397b839a
 801b3d8:	3fe921fb 	.word	0x3fe921fb
 801b3dc:	4002d97b 	.word	0x4002d97b
 801b3e0:	3ff921fb 	.word	0x3ff921fb
 801b3e4:	413921fb 	.word	0x413921fb
 801b3e8:	3fe00000 	.word	0x3fe00000
 801b3ec:	0801cd08 	.word	0x0801cd08
 801b3f0:	7fefffff 	.word	0x7fefffff
 801b3f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b3f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b3fc:	ee10 0a10 	vmov	r0, s0
 801b400:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b404:	ee10 6a10 	vmov	r6, s0
 801b408:	460f      	mov	r7, r1
 801b40a:	f7e5 fba5 	bl	8000b58 <__aeabi_d2iz>
 801b40e:	f7e5 f889 	bl	8000524 <__aeabi_i2d>
 801b412:	4602      	mov	r2, r0
 801b414:	460b      	mov	r3, r1
 801b416:	4630      	mov	r0, r6
 801b418:	4639      	mov	r1, r7
 801b41a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b41e:	f7e4 ff33 	bl	8000288 <__aeabi_dsub>
 801b422:	4b22      	ldr	r3, [pc, #136]	; (801b4ac <__ieee754_rem_pio2+0x40c>)
 801b424:	2200      	movs	r2, #0
 801b426:	f7e5 f8e7 	bl	80005f8 <__aeabi_dmul>
 801b42a:	460f      	mov	r7, r1
 801b42c:	4606      	mov	r6, r0
 801b42e:	f7e5 fb93 	bl	8000b58 <__aeabi_d2iz>
 801b432:	f7e5 f877 	bl	8000524 <__aeabi_i2d>
 801b436:	4602      	mov	r2, r0
 801b438:	460b      	mov	r3, r1
 801b43a:	4630      	mov	r0, r6
 801b43c:	4639      	mov	r1, r7
 801b43e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b442:	f7e4 ff21 	bl	8000288 <__aeabi_dsub>
 801b446:	4b19      	ldr	r3, [pc, #100]	; (801b4ac <__ieee754_rem_pio2+0x40c>)
 801b448:	2200      	movs	r2, #0
 801b44a:	f7e5 f8d5 	bl	80005f8 <__aeabi_dmul>
 801b44e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b452:	ad04      	add	r5, sp, #16
 801b454:	f04f 0803 	mov.w	r8, #3
 801b458:	46a9      	mov	r9, r5
 801b45a:	2600      	movs	r6, #0
 801b45c:	2700      	movs	r7, #0
 801b45e:	4632      	mov	r2, r6
 801b460:	463b      	mov	r3, r7
 801b462:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b466:	46c3      	mov	fp, r8
 801b468:	3d08      	subs	r5, #8
 801b46a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b46e:	f7e5 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 801b472:	2800      	cmp	r0, #0
 801b474:	d1f3      	bne.n	801b45e <__ieee754_rem_pio2+0x3be>
 801b476:	4b0e      	ldr	r3, [pc, #56]	; (801b4b0 <__ieee754_rem_pio2+0x410>)
 801b478:	9301      	str	r3, [sp, #4]
 801b47a:	2302      	movs	r3, #2
 801b47c:	9300      	str	r3, [sp, #0]
 801b47e:	4622      	mov	r2, r4
 801b480:	465b      	mov	r3, fp
 801b482:	4651      	mov	r1, sl
 801b484:	4648      	mov	r0, r9
 801b486:	f000 f993 	bl	801b7b0 <__kernel_rem_pio2>
 801b48a:	9b02      	ldr	r3, [sp, #8]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	4683      	mov	fp, r0
 801b490:	f6bf ae46 	bge.w	801b120 <__ieee754_rem_pio2+0x80>
 801b494:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b498:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b49c:	f8ca 3004 	str.w	r3, [sl, #4]
 801b4a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 801b4a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b4a8:	e73a      	b.n	801b320 <__ieee754_rem_pio2+0x280>
 801b4aa:	bf00      	nop
 801b4ac:	41700000 	.word	0x41700000
 801b4b0:	0801cd88 	.word	0x0801cd88

0801b4b4 <__ieee754_sqrt>:
 801b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4b8:	ec55 4b10 	vmov	r4, r5, d0
 801b4bc:	4e56      	ldr	r6, [pc, #344]	; (801b618 <__ieee754_sqrt+0x164>)
 801b4be:	43ae      	bics	r6, r5
 801b4c0:	ee10 0a10 	vmov	r0, s0
 801b4c4:	ee10 3a10 	vmov	r3, s0
 801b4c8:	4629      	mov	r1, r5
 801b4ca:	462a      	mov	r2, r5
 801b4cc:	d110      	bne.n	801b4f0 <__ieee754_sqrt+0x3c>
 801b4ce:	ee10 2a10 	vmov	r2, s0
 801b4d2:	462b      	mov	r3, r5
 801b4d4:	f7e5 f890 	bl	80005f8 <__aeabi_dmul>
 801b4d8:	4602      	mov	r2, r0
 801b4da:	460b      	mov	r3, r1
 801b4dc:	4620      	mov	r0, r4
 801b4de:	4629      	mov	r1, r5
 801b4e0:	f7e4 fed4 	bl	800028c <__adddf3>
 801b4e4:	4604      	mov	r4, r0
 801b4e6:	460d      	mov	r5, r1
 801b4e8:	ec45 4b10 	vmov	d0, r4, r5
 801b4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4f0:	2d00      	cmp	r5, #0
 801b4f2:	dc10      	bgt.n	801b516 <__ieee754_sqrt+0x62>
 801b4f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b4f8:	4330      	orrs	r0, r6
 801b4fa:	d0f5      	beq.n	801b4e8 <__ieee754_sqrt+0x34>
 801b4fc:	b15d      	cbz	r5, 801b516 <__ieee754_sqrt+0x62>
 801b4fe:	ee10 2a10 	vmov	r2, s0
 801b502:	462b      	mov	r3, r5
 801b504:	ee10 0a10 	vmov	r0, s0
 801b508:	f7e4 febe 	bl	8000288 <__aeabi_dsub>
 801b50c:	4602      	mov	r2, r0
 801b50e:	460b      	mov	r3, r1
 801b510:	f7e5 f99c 	bl	800084c <__aeabi_ddiv>
 801b514:	e7e6      	b.n	801b4e4 <__ieee754_sqrt+0x30>
 801b516:	1509      	asrs	r1, r1, #20
 801b518:	d076      	beq.n	801b608 <__ieee754_sqrt+0x154>
 801b51a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b51e:	07ce      	lsls	r6, r1, #31
 801b520:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b524:	bf5e      	ittt	pl
 801b526:	0fda      	lsrpl	r2, r3, #31
 801b528:	005b      	lslpl	r3, r3, #1
 801b52a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b52e:	0fda      	lsrs	r2, r3, #31
 801b530:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b534:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b538:	2000      	movs	r0, #0
 801b53a:	106d      	asrs	r5, r5, #1
 801b53c:	005b      	lsls	r3, r3, #1
 801b53e:	f04f 0e16 	mov.w	lr, #22
 801b542:	4684      	mov	ip, r0
 801b544:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b548:	eb0c 0401 	add.w	r4, ip, r1
 801b54c:	4294      	cmp	r4, r2
 801b54e:	bfde      	ittt	le
 801b550:	1b12      	suble	r2, r2, r4
 801b552:	eb04 0c01 	addle.w	ip, r4, r1
 801b556:	1840      	addle	r0, r0, r1
 801b558:	0052      	lsls	r2, r2, #1
 801b55a:	f1be 0e01 	subs.w	lr, lr, #1
 801b55e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b562:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b566:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b56a:	d1ed      	bne.n	801b548 <__ieee754_sqrt+0x94>
 801b56c:	4671      	mov	r1, lr
 801b56e:	2720      	movs	r7, #32
 801b570:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b574:	4562      	cmp	r2, ip
 801b576:	eb04 060e 	add.w	r6, r4, lr
 801b57a:	dc02      	bgt.n	801b582 <__ieee754_sqrt+0xce>
 801b57c:	d113      	bne.n	801b5a6 <__ieee754_sqrt+0xf2>
 801b57e:	429e      	cmp	r6, r3
 801b580:	d811      	bhi.n	801b5a6 <__ieee754_sqrt+0xf2>
 801b582:	2e00      	cmp	r6, #0
 801b584:	eb06 0e04 	add.w	lr, r6, r4
 801b588:	da43      	bge.n	801b612 <__ieee754_sqrt+0x15e>
 801b58a:	f1be 0f00 	cmp.w	lr, #0
 801b58e:	db40      	blt.n	801b612 <__ieee754_sqrt+0x15e>
 801b590:	f10c 0801 	add.w	r8, ip, #1
 801b594:	eba2 020c 	sub.w	r2, r2, ip
 801b598:	429e      	cmp	r6, r3
 801b59a:	bf88      	it	hi
 801b59c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b5a0:	1b9b      	subs	r3, r3, r6
 801b5a2:	4421      	add	r1, r4
 801b5a4:	46c4      	mov	ip, r8
 801b5a6:	0052      	lsls	r2, r2, #1
 801b5a8:	3f01      	subs	r7, #1
 801b5aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b5ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b5b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b5b6:	d1dd      	bne.n	801b574 <__ieee754_sqrt+0xc0>
 801b5b8:	4313      	orrs	r3, r2
 801b5ba:	d006      	beq.n	801b5ca <__ieee754_sqrt+0x116>
 801b5bc:	1c4c      	adds	r4, r1, #1
 801b5be:	bf13      	iteet	ne
 801b5c0:	3101      	addne	r1, #1
 801b5c2:	3001      	addeq	r0, #1
 801b5c4:	4639      	moveq	r1, r7
 801b5c6:	f021 0101 	bicne.w	r1, r1, #1
 801b5ca:	1043      	asrs	r3, r0, #1
 801b5cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b5d0:	0849      	lsrs	r1, r1, #1
 801b5d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b5d6:	07c2      	lsls	r2, r0, #31
 801b5d8:	bf48      	it	mi
 801b5da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b5de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b5e2:	460c      	mov	r4, r1
 801b5e4:	463d      	mov	r5, r7
 801b5e6:	e77f      	b.n	801b4e8 <__ieee754_sqrt+0x34>
 801b5e8:	0ada      	lsrs	r2, r3, #11
 801b5ea:	3815      	subs	r0, #21
 801b5ec:	055b      	lsls	r3, r3, #21
 801b5ee:	2a00      	cmp	r2, #0
 801b5f0:	d0fa      	beq.n	801b5e8 <__ieee754_sqrt+0x134>
 801b5f2:	02d7      	lsls	r7, r2, #11
 801b5f4:	d50a      	bpl.n	801b60c <__ieee754_sqrt+0x158>
 801b5f6:	f1c1 0420 	rsb	r4, r1, #32
 801b5fa:	fa23 f404 	lsr.w	r4, r3, r4
 801b5fe:	1e4d      	subs	r5, r1, #1
 801b600:	408b      	lsls	r3, r1
 801b602:	4322      	orrs	r2, r4
 801b604:	1b41      	subs	r1, r0, r5
 801b606:	e788      	b.n	801b51a <__ieee754_sqrt+0x66>
 801b608:	4608      	mov	r0, r1
 801b60a:	e7f0      	b.n	801b5ee <__ieee754_sqrt+0x13a>
 801b60c:	0052      	lsls	r2, r2, #1
 801b60e:	3101      	adds	r1, #1
 801b610:	e7ef      	b.n	801b5f2 <__ieee754_sqrt+0x13e>
 801b612:	46e0      	mov	r8, ip
 801b614:	e7be      	b.n	801b594 <__ieee754_sqrt+0xe0>
 801b616:	bf00      	nop
 801b618:	7ff00000 	.word	0x7ff00000
 801b61c:	00000000 	.word	0x00000000

0801b620 <__kernel_cos>:
 801b620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b624:	ec57 6b10 	vmov	r6, r7, d0
 801b628:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b62c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b630:	ed8d 1b00 	vstr	d1, [sp]
 801b634:	da07      	bge.n	801b646 <__kernel_cos+0x26>
 801b636:	ee10 0a10 	vmov	r0, s0
 801b63a:	4639      	mov	r1, r7
 801b63c:	f7e5 fa8c 	bl	8000b58 <__aeabi_d2iz>
 801b640:	2800      	cmp	r0, #0
 801b642:	f000 8088 	beq.w	801b756 <__kernel_cos+0x136>
 801b646:	4632      	mov	r2, r6
 801b648:	463b      	mov	r3, r7
 801b64a:	4630      	mov	r0, r6
 801b64c:	4639      	mov	r1, r7
 801b64e:	f7e4 ffd3 	bl	80005f8 <__aeabi_dmul>
 801b652:	4b51      	ldr	r3, [pc, #324]	; (801b798 <__kernel_cos+0x178>)
 801b654:	2200      	movs	r2, #0
 801b656:	4604      	mov	r4, r0
 801b658:	460d      	mov	r5, r1
 801b65a:	f7e4 ffcd 	bl	80005f8 <__aeabi_dmul>
 801b65e:	a340      	add	r3, pc, #256	; (adr r3, 801b760 <__kernel_cos+0x140>)
 801b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b664:	4682      	mov	sl, r0
 801b666:	468b      	mov	fp, r1
 801b668:	4620      	mov	r0, r4
 801b66a:	4629      	mov	r1, r5
 801b66c:	f7e4 ffc4 	bl	80005f8 <__aeabi_dmul>
 801b670:	a33d      	add	r3, pc, #244	; (adr r3, 801b768 <__kernel_cos+0x148>)
 801b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b676:	f7e4 fe09 	bl	800028c <__adddf3>
 801b67a:	4622      	mov	r2, r4
 801b67c:	462b      	mov	r3, r5
 801b67e:	f7e4 ffbb 	bl	80005f8 <__aeabi_dmul>
 801b682:	a33b      	add	r3, pc, #236	; (adr r3, 801b770 <__kernel_cos+0x150>)
 801b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b688:	f7e4 fdfe 	bl	8000288 <__aeabi_dsub>
 801b68c:	4622      	mov	r2, r4
 801b68e:	462b      	mov	r3, r5
 801b690:	f7e4 ffb2 	bl	80005f8 <__aeabi_dmul>
 801b694:	a338      	add	r3, pc, #224	; (adr r3, 801b778 <__kernel_cos+0x158>)
 801b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b69a:	f7e4 fdf7 	bl	800028c <__adddf3>
 801b69e:	4622      	mov	r2, r4
 801b6a0:	462b      	mov	r3, r5
 801b6a2:	f7e4 ffa9 	bl	80005f8 <__aeabi_dmul>
 801b6a6:	a336      	add	r3, pc, #216	; (adr r3, 801b780 <__kernel_cos+0x160>)
 801b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ac:	f7e4 fdec 	bl	8000288 <__aeabi_dsub>
 801b6b0:	4622      	mov	r2, r4
 801b6b2:	462b      	mov	r3, r5
 801b6b4:	f7e4 ffa0 	bl	80005f8 <__aeabi_dmul>
 801b6b8:	a333      	add	r3, pc, #204	; (adr r3, 801b788 <__kernel_cos+0x168>)
 801b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6be:	f7e4 fde5 	bl	800028c <__adddf3>
 801b6c2:	4622      	mov	r2, r4
 801b6c4:	462b      	mov	r3, r5
 801b6c6:	f7e4 ff97 	bl	80005f8 <__aeabi_dmul>
 801b6ca:	4622      	mov	r2, r4
 801b6cc:	462b      	mov	r3, r5
 801b6ce:	f7e4 ff93 	bl	80005f8 <__aeabi_dmul>
 801b6d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b6d6:	4604      	mov	r4, r0
 801b6d8:	460d      	mov	r5, r1
 801b6da:	4630      	mov	r0, r6
 801b6dc:	4639      	mov	r1, r7
 801b6de:	f7e4 ff8b 	bl	80005f8 <__aeabi_dmul>
 801b6e2:	460b      	mov	r3, r1
 801b6e4:	4602      	mov	r2, r0
 801b6e6:	4629      	mov	r1, r5
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	f7e4 fdcd 	bl	8000288 <__aeabi_dsub>
 801b6ee:	4b2b      	ldr	r3, [pc, #172]	; (801b79c <__kernel_cos+0x17c>)
 801b6f0:	4598      	cmp	r8, r3
 801b6f2:	4606      	mov	r6, r0
 801b6f4:	460f      	mov	r7, r1
 801b6f6:	dc10      	bgt.n	801b71a <__kernel_cos+0xfa>
 801b6f8:	4602      	mov	r2, r0
 801b6fa:	460b      	mov	r3, r1
 801b6fc:	4650      	mov	r0, sl
 801b6fe:	4659      	mov	r1, fp
 801b700:	f7e4 fdc2 	bl	8000288 <__aeabi_dsub>
 801b704:	460b      	mov	r3, r1
 801b706:	4926      	ldr	r1, [pc, #152]	; (801b7a0 <__kernel_cos+0x180>)
 801b708:	4602      	mov	r2, r0
 801b70a:	2000      	movs	r0, #0
 801b70c:	f7e4 fdbc 	bl	8000288 <__aeabi_dsub>
 801b710:	ec41 0b10 	vmov	d0, r0, r1
 801b714:	b003      	add	sp, #12
 801b716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b71a:	4b22      	ldr	r3, [pc, #136]	; (801b7a4 <__kernel_cos+0x184>)
 801b71c:	4920      	ldr	r1, [pc, #128]	; (801b7a0 <__kernel_cos+0x180>)
 801b71e:	4598      	cmp	r8, r3
 801b720:	bfcc      	ite	gt
 801b722:	4d21      	ldrgt	r5, [pc, #132]	; (801b7a8 <__kernel_cos+0x188>)
 801b724:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b728:	2400      	movs	r4, #0
 801b72a:	4622      	mov	r2, r4
 801b72c:	462b      	mov	r3, r5
 801b72e:	2000      	movs	r0, #0
 801b730:	f7e4 fdaa 	bl	8000288 <__aeabi_dsub>
 801b734:	4622      	mov	r2, r4
 801b736:	4680      	mov	r8, r0
 801b738:	4689      	mov	r9, r1
 801b73a:	462b      	mov	r3, r5
 801b73c:	4650      	mov	r0, sl
 801b73e:	4659      	mov	r1, fp
 801b740:	f7e4 fda2 	bl	8000288 <__aeabi_dsub>
 801b744:	4632      	mov	r2, r6
 801b746:	463b      	mov	r3, r7
 801b748:	f7e4 fd9e 	bl	8000288 <__aeabi_dsub>
 801b74c:	4602      	mov	r2, r0
 801b74e:	460b      	mov	r3, r1
 801b750:	4640      	mov	r0, r8
 801b752:	4649      	mov	r1, r9
 801b754:	e7da      	b.n	801b70c <__kernel_cos+0xec>
 801b756:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b790 <__kernel_cos+0x170>
 801b75a:	e7db      	b.n	801b714 <__kernel_cos+0xf4>
 801b75c:	f3af 8000 	nop.w
 801b760:	be8838d4 	.word	0xbe8838d4
 801b764:	bda8fae9 	.word	0xbda8fae9
 801b768:	bdb4b1c4 	.word	0xbdb4b1c4
 801b76c:	3e21ee9e 	.word	0x3e21ee9e
 801b770:	809c52ad 	.word	0x809c52ad
 801b774:	3e927e4f 	.word	0x3e927e4f
 801b778:	19cb1590 	.word	0x19cb1590
 801b77c:	3efa01a0 	.word	0x3efa01a0
 801b780:	16c15177 	.word	0x16c15177
 801b784:	3f56c16c 	.word	0x3f56c16c
 801b788:	5555554c 	.word	0x5555554c
 801b78c:	3fa55555 	.word	0x3fa55555
 801b790:	00000000 	.word	0x00000000
 801b794:	3ff00000 	.word	0x3ff00000
 801b798:	3fe00000 	.word	0x3fe00000
 801b79c:	3fd33332 	.word	0x3fd33332
 801b7a0:	3ff00000 	.word	0x3ff00000
 801b7a4:	3fe90000 	.word	0x3fe90000
 801b7a8:	3fd20000 	.word	0x3fd20000
 801b7ac:	00000000 	.word	0x00000000

0801b7b0 <__kernel_rem_pio2>:
 801b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b4:	ed2d 8b02 	vpush	{d8}
 801b7b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b7bc:	f112 0f14 	cmn.w	r2, #20
 801b7c0:	9308      	str	r3, [sp, #32]
 801b7c2:	9101      	str	r1, [sp, #4]
 801b7c4:	4bc6      	ldr	r3, [pc, #792]	; (801bae0 <__kernel_rem_pio2+0x330>)
 801b7c6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b7c8:	9009      	str	r0, [sp, #36]	; 0x24
 801b7ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b7ce:	9304      	str	r3, [sp, #16]
 801b7d0:	9b08      	ldr	r3, [sp, #32]
 801b7d2:	f103 33ff 	add.w	r3, r3, #4294967295
 801b7d6:	bfa8      	it	ge
 801b7d8:	1ed4      	subge	r4, r2, #3
 801b7da:	9306      	str	r3, [sp, #24]
 801b7dc:	bfb2      	itee	lt
 801b7de:	2400      	movlt	r4, #0
 801b7e0:	2318      	movge	r3, #24
 801b7e2:	fb94 f4f3 	sdivge	r4, r4, r3
 801b7e6:	f06f 0317 	mvn.w	r3, #23
 801b7ea:	fb04 3303 	mla	r3, r4, r3, r3
 801b7ee:	eb03 0a02 	add.w	sl, r3, r2
 801b7f2:	9b04      	ldr	r3, [sp, #16]
 801b7f4:	9a06      	ldr	r2, [sp, #24]
 801b7f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801bad0 <__kernel_rem_pio2+0x320>
 801b7fa:	eb03 0802 	add.w	r8, r3, r2
 801b7fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b800:	1aa7      	subs	r7, r4, r2
 801b802:	ae20      	add	r6, sp, #128	; 0x80
 801b804:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b808:	2500      	movs	r5, #0
 801b80a:	4545      	cmp	r5, r8
 801b80c:	dd18      	ble.n	801b840 <__kernel_rem_pio2+0x90>
 801b80e:	9b08      	ldr	r3, [sp, #32]
 801b810:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b814:	aa20      	add	r2, sp, #128	; 0x80
 801b816:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801bad0 <__kernel_rem_pio2+0x320>
 801b81a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b81e:	f1c3 0301 	rsb	r3, r3, #1
 801b822:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b826:	9307      	str	r3, [sp, #28]
 801b828:	9b07      	ldr	r3, [sp, #28]
 801b82a:	9a04      	ldr	r2, [sp, #16]
 801b82c:	4443      	add	r3, r8
 801b82e:	429a      	cmp	r2, r3
 801b830:	db2f      	blt.n	801b892 <__kernel_rem_pio2+0xe2>
 801b832:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b836:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b83a:	462f      	mov	r7, r5
 801b83c:	2600      	movs	r6, #0
 801b83e:	e01b      	b.n	801b878 <__kernel_rem_pio2+0xc8>
 801b840:	42ef      	cmn	r7, r5
 801b842:	d407      	bmi.n	801b854 <__kernel_rem_pio2+0xa4>
 801b844:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b848:	f7e4 fe6c 	bl	8000524 <__aeabi_i2d>
 801b84c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b850:	3501      	adds	r5, #1
 801b852:	e7da      	b.n	801b80a <__kernel_rem_pio2+0x5a>
 801b854:	ec51 0b18 	vmov	r0, r1, d8
 801b858:	e7f8      	b.n	801b84c <__kernel_rem_pio2+0x9c>
 801b85a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b85e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b862:	f7e4 fec9 	bl	80005f8 <__aeabi_dmul>
 801b866:	4602      	mov	r2, r0
 801b868:	460b      	mov	r3, r1
 801b86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b86e:	f7e4 fd0d 	bl	800028c <__adddf3>
 801b872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b876:	3601      	adds	r6, #1
 801b878:	9b06      	ldr	r3, [sp, #24]
 801b87a:	429e      	cmp	r6, r3
 801b87c:	f1a7 0708 	sub.w	r7, r7, #8
 801b880:	ddeb      	ble.n	801b85a <__kernel_rem_pio2+0xaa>
 801b882:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b886:	3508      	adds	r5, #8
 801b888:	ecab 7b02 	vstmia	fp!, {d7}
 801b88c:	f108 0801 	add.w	r8, r8, #1
 801b890:	e7ca      	b.n	801b828 <__kernel_rem_pio2+0x78>
 801b892:	9b04      	ldr	r3, [sp, #16]
 801b894:	aa0c      	add	r2, sp, #48	; 0x30
 801b896:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b89a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b89c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b89e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b8a2:	9c04      	ldr	r4, [sp, #16]
 801b8a4:	930a      	str	r3, [sp, #40]	; 0x28
 801b8a6:	ab98      	add	r3, sp, #608	; 0x260
 801b8a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b8ac:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b8b0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801b8b4:	f8cd b008 	str.w	fp, [sp, #8]
 801b8b8:	4625      	mov	r5, r4
 801b8ba:	2d00      	cmp	r5, #0
 801b8bc:	dc78      	bgt.n	801b9b0 <__kernel_rem_pio2+0x200>
 801b8be:	ec47 6b10 	vmov	d0, r6, r7
 801b8c2:	4650      	mov	r0, sl
 801b8c4:	f000 fda0 	bl	801c408 <scalbn>
 801b8c8:	ec57 6b10 	vmov	r6, r7, d0
 801b8cc:	2200      	movs	r2, #0
 801b8ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b8d2:	ee10 0a10 	vmov	r0, s0
 801b8d6:	4639      	mov	r1, r7
 801b8d8:	f7e4 fe8e 	bl	80005f8 <__aeabi_dmul>
 801b8dc:	ec41 0b10 	vmov	d0, r0, r1
 801b8e0:	f000 fd12 	bl	801c308 <floor>
 801b8e4:	4b7f      	ldr	r3, [pc, #508]	; (801bae4 <__kernel_rem_pio2+0x334>)
 801b8e6:	ec51 0b10 	vmov	r0, r1, d0
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	f7e4 fe84 	bl	80005f8 <__aeabi_dmul>
 801b8f0:	4602      	mov	r2, r0
 801b8f2:	460b      	mov	r3, r1
 801b8f4:	4630      	mov	r0, r6
 801b8f6:	4639      	mov	r1, r7
 801b8f8:	f7e4 fcc6 	bl	8000288 <__aeabi_dsub>
 801b8fc:	460f      	mov	r7, r1
 801b8fe:	4606      	mov	r6, r0
 801b900:	f7e5 f92a 	bl	8000b58 <__aeabi_d2iz>
 801b904:	9007      	str	r0, [sp, #28]
 801b906:	f7e4 fe0d 	bl	8000524 <__aeabi_i2d>
 801b90a:	4602      	mov	r2, r0
 801b90c:	460b      	mov	r3, r1
 801b90e:	4630      	mov	r0, r6
 801b910:	4639      	mov	r1, r7
 801b912:	f7e4 fcb9 	bl	8000288 <__aeabi_dsub>
 801b916:	f1ba 0f00 	cmp.w	sl, #0
 801b91a:	4606      	mov	r6, r0
 801b91c:	460f      	mov	r7, r1
 801b91e:	dd70      	ble.n	801ba02 <__kernel_rem_pio2+0x252>
 801b920:	1e62      	subs	r2, r4, #1
 801b922:	ab0c      	add	r3, sp, #48	; 0x30
 801b924:	9d07      	ldr	r5, [sp, #28]
 801b926:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b92a:	f1ca 0118 	rsb	r1, sl, #24
 801b92e:	fa40 f301 	asr.w	r3, r0, r1
 801b932:	441d      	add	r5, r3
 801b934:	408b      	lsls	r3, r1
 801b936:	1ac0      	subs	r0, r0, r3
 801b938:	ab0c      	add	r3, sp, #48	; 0x30
 801b93a:	9507      	str	r5, [sp, #28]
 801b93c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b940:	f1ca 0317 	rsb	r3, sl, #23
 801b944:	fa40 f303 	asr.w	r3, r0, r3
 801b948:	9302      	str	r3, [sp, #8]
 801b94a:	9b02      	ldr	r3, [sp, #8]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	dd66      	ble.n	801ba1e <__kernel_rem_pio2+0x26e>
 801b950:	9b07      	ldr	r3, [sp, #28]
 801b952:	2200      	movs	r2, #0
 801b954:	3301      	adds	r3, #1
 801b956:	9307      	str	r3, [sp, #28]
 801b958:	4615      	mov	r5, r2
 801b95a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b95e:	4294      	cmp	r4, r2
 801b960:	f300 8099 	bgt.w	801ba96 <__kernel_rem_pio2+0x2e6>
 801b964:	f1ba 0f00 	cmp.w	sl, #0
 801b968:	dd07      	ble.n	801b97a <__kernel_rem_pio2+0x1ca>
 801b96a:	f1ba 0f01 	cmp.w	sl, #1
 801b96e:	f000 80a5 	beq.w	801babc <__kernel_rem_pio2+0x30c>
 801b972:	f1ba 0f02 	cmp.w	sl, #2
 801b976:	f000 80c1 	beq.w	801bafc <__kernel_rem_pio2+0x34c>
 801b97a:	9b02      	ldr	r3, [sp, #8]
 801b97c:	2b02      	cmp	r3, #2
 801b97e:	d14e      	bne.n	801ba1e <__kernel_rem_pio2+0x26e>
 801b980:	4632      	mov	r2, r6
 801b982:	463b      	mov	r3, r7
 801b984:	4958      	ldr	r1, [pc, #352]	; (801bae8 <__kernel_rem_pio2+0x338>)
 801b986:	2000      	movs	r0, #0
 801b988:	f7e4 fc7e 	bl	8000288 <__aeabi_dsub>
 801b98c:	4606      	mov	r6, r0
 801b98e:	460f      	mov	r7, r1
 801b990:	2d00      	cmp	r5, #0
 801b992:	d044      	beq.n	801ba1e <__kernel_rem_pio2+0x26e>
 801b994:	4650      	mov	r0, sl
 801b996:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801bad8 <__kernel_rem_pio2+0x328>
 801b99a:	f000 fd35 	bl	801c408 <scalbn>
 801b99e:	4630      	mov	r0, r6
 801b9a0:	4639      	mov	r1, r7
 801b9a2:	ec53 2b10 	vmov	r2, r3, d0
 801b9a6:	f7e4 fc6f 	bl	8000288 <__aeabi_dsub>
 801b9aa:	4606      	mov	r6, r0
 801b9ac:	460f      	mov	r7, r1
 801b9ae:	e036      	b.n	801ba1e <__kernel_rem_pio2+0x26e>
 801b9b0:	4b4e      	ldr	r3, [pc, #312]	; (801baec <__kernel_rem_pio2+0x33c>)
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	4630      	mov	r0, r6
 801b9b6:	4639      	mov	r1, r7
 801b9b8:	f7e4 fe1e 	bl	80005f8 <__aeabi_dmul>
 801b9bc:	f7e5 f8cc 	bl	8000b58 <__aeabi_d2iz>
 801b9c0:	f7e4 fdb0 	bl	8000524 <__aeabi_i2d>
 801b9c4:	4b4a      	ldr	r3, [pc, #296]	; (801baf0 <__kernel_rem_pio2+0x340>)
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	4680      	mov	r8, r0
 801b9ca:	4689      	mov	r9, r1
 801b9cc:	f7e4 fe14 	bl	80005f8 <__aeabi_dmul>
 801b9d0:	4602      	mov	r2, r0
 801b9d2:	460b      	mov	r3, r1
 801b9d4:	4630      	mov	r0, r6
 801b9d6:	4639      	mov	r1, r7
 801b9d8:	f7e4 fc56 	bl	8000288 <__aeabi_dsub>
 801b9dc:	f7e5 f8bc 	bl	8000b58 <__aeabi_d2iz>
 801b9e0:	9b02      	ldr	r3, [sp, #8]
 801b9e2:	f843 0b04 	str.w	r0, [r3], #4
 801b9e6:	3d01      	subs	r5, #1
 801b9e8:	9302      	str	r3, [sp, #8]
 801b9ea:	ab70      	add	r3, sp, #448	; 0x1c0
 801b9ec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9f4:	4640      	mov	r0, r8
 801b9f6:	4649      	mov	r1, r9
 801b9f8:	f7e4 fc48 	bl	800028c <__adddf3>
 801b9fc:	4606      	mov	r6, r0
 801b9fe:	460f      	mov	r7, r1
 801ba00:	e75b      	b.n	801b8ba <__kernel_rem_pio2+0x10a>
 801ba02:	d105      	bne.n	801ba10 <__kernel_rem_pio2+0x260>
 801ba04:	1e63      	subs	r3, r4, #1
 801ba06:	aa0c      	add	r2, sp, #48	; 0x30
 801ba08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ba0c:	15c3      	asrs	r3, r0, #23
 801ba0e:	e79b      	b.n	801b948 <__kernel_rem_pio2+0x198>
 801ba10:	4b38      	ldr	r3, [pc, #224]	; (801baf4 <__kernel_rem_pio2+0x344>)
 801ba12:	2200      	movs	r2, #0
 801ba14:	f7e5 f876 	bl	8000b04 <__aeabi_dcmpge>
 801ba18:	2800      	cmp	r0, #0
 801ba1a:	d139      	bne.n	801ba90 <__kernel_rem_pio2+0x2e0>
 801ba1c:	9002      	str	r0, [sp, #8]
 801ba1e:	2200      	movs	r2, #0
 801ba20:	2300      	movs	r3, #0
 801ba22:	4630      	mov	r0, r6
 801ba24:	4639      	mov	r1, r7
 801ba26:	f7e5 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 801ba2a:	2800      	cmp	r0, #0
 801ba2c:	f000 80b4 	beq.w	801bb98 <__kernel_rem_pio2+0x3e8>
 801ba30:	f104 3bff 	add.w	fp, r4, #4294967295
 801ba34:	465b      	mov	r3, fp
 801ba36:	2200      	movs	r2, #0
 801ba38:	9904      	ldr	r1, [sp, #16]
 801ba3a:	428b      	cmp	r3, r1
 801ba3c:	da65      	bge.n	801bb0a <__kernel_rem_pio2+0x35a>
 801ba3e:	2a00      	cmp	r2, #0
 801ba40:	d07b      	beq.n	801bb3a <__kernel_rem_pio2+0x38a>
 801ba42:	ab0c      	add	r3, sp, #48	; 0x30
 801ba44:	f1aa 0a18 	sub.w	sl, sl, #24
 801ba48:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	f000 80a0 	beq.w	801bb92 <__kernel_rem_pio2+0x3e2>
 801ba52:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801bad8 <__kernel_rem_pio2+0x328>
 801ba56:	4650      	mov	r0, sl
 801ba58:	f000 fcd6 	bl	801c408 <scalbn>
 801ba5c:	4f23      	ldr	r7, [pc, #140]	; (801baec <__kernel_rem_pio2+0x33c>)
 801ba5e:	ec55 4b10 	vmov	r4, r5, d0
 801ba62:	46d8      	mov	r8, fp
 801ba64:	2600      	movs	r6, #0
 801ba66:	f1b8 0f00 	cmp.w	r8, #0
 801ba6a:	f280 80cf 	bge.w	801bc0c <__kernel_rem_pio2+0x45c>
 801ba6e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801bad0 <__kernel_rem_pio2+0x320>
 801ba72:	465f      	mov	r7, fp
 801ba74:	f04f 0800 	mov.w	r8, #0
 801ba78:	2f00      	cmp	r7, #0
 801ba7a:	f2c0 80fd 	blt.w	801bc78 <__kernel_rem_pio2+0x4c8>
 801ba7e:	ab70      	add	r3, sp, #448	; 0x1c0
 801ba80:	f8df a074 	ldr.w	sl, [pc, #116]	; 801baf8 <__kernel_rem_pio2+0x348>
 801ba84:	ec55 4b18 	vmov	r4, r5, d8
 801ba88:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801ba8c:	2600      	movs	r6, #0
 801ba8e:	e0e5      	b.n	801bc5c <__kernel_rem_pio2+0x4ac>
 801ba90:	2302      	movs	r3, #2
 801ba92:	9302      	str	r3, [sp, #8]
 801ba94:	e75c      	b.n	801b950 <__kernel_rem_pio2+0x1a0>
 801ba96:	f8db 3000 	ldr.w	r3, [fp]
 801ba9a:	b955      	cbnz	r5, 801bab2 <__kernel_rem_pio2+0x302>
 801ba9c:	b123      	cbz	r3, 801baa8 <__kernel_rem_pio2+0x2f8>
 801ba9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801baa2:	f8cb 3000 	str.w	r3, [fp]
 801baa6:	2301      	movs	r3, #1
 801baa8:	3201      	adds	r2, #1
 801baaa:	f10b 0b04 	add.w	fp, fp, #4
 801baae:	461d      	mov	r5, r3
 801bab0:	e755      	b.n	801b95e <__kernel_rem_pio2+0x1ae>
 801bab2:	1acb      	subs	r3, r1, r3
 801bab4:	f8cb 3000 	str.w	r3, [fp]
 801bab8:	462b      	mov	r3, r5
 801baba:	e7f5      	b.n	801baa8 <__kernel_rem_pio2+0x2f8>
 801babc:	1e62      	subs	r2, r4, #1
 801babe:	ab0c      	add	r3, sp, #48	; 0x30
 801bac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bac4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801bac8:	a90c      	add	r1, sp, #48	; 0x30
 801baca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801bace:	e754      	b.n	801b97a <__kernel_rem_pio2+0x1ca>
	...
 801badc:	3ff00000 	.word	0x3ff00000
 801bae0:	0801ced0 	.word	0x0801ced0
 801bae4:	40200000 	.word	0x40200000
 801bae8:	3ff00000 	.word	0x3ff00000
 801baec:	3e700000 	.word	0x3e700000
 801baf0:	41700000 	.word	0x41700000
 801baf4:	3fe00000 	.word	0x3fe00000
 801baf8:	0801ce90 	.word	0x0801ce90
 801bafc:	1e62      	subs	r2, r4, #1
 801bafe:	ab0c      	add	r3, sp, #48	; 0x30
 801bb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bb04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801bb08:	e7de      	b.n	801bac8 <__kernel_rem_pio2+0x318>
 801bb0a:	a90c      	add	r1, sp, #48	; 0x30
 801bb0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801bb10:	3b01      	subs	r3, #1
 801bb12:	430a      	orrs	r2, r1
 801bb14:	e790      	b.n	801ba38 <__kernel_rem_pio2+0x288>
 801bb16:	3301      	adds	r3, #1
 801bb18:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bb1c:	2900      	cmp	r1, #0
 801bb1e:	d0fa      	beq.n	801bb16 <__kernel_rem_pio2+0x366>
 801bb20:	9a08      	ldr	r2, [sp, #32]
 801bb22:	18e3      	adds	r3, r4, r3
 801bb24:	18a6      	adds	r6, r4, r2
 801bb26:	aa20      	add	r2, sp, #128	; 0x80
 801bb28:	1c65      	adds	r5, r4, #1
 801bb2a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801bb2e:	9302      	str	r3, [sp, #8]
 801bb30:	9b02      	ldr	r3, [sp, #8]
 801bb32:	42ab      	cmp	r3, r5
 801bb34:	da04      	bge.n	801bb40 <__kernel_rem_pio2+0x390>
 801bb36:	461c      	mov	r4, r3
 801bb38:	e6b5      	b.n	801b8a6 <__kernel_rem_pio2+0xf6>
 801bb3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb3c:	2301      	movs	r3, #1
 801bb3e:	e7eb      	b.n	801bb18 <__kernel_rem_pio2+0x368>
 801bb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bb46:	f7e4 fced 	bl	8000524 <__aeabi_i2d>
 801bb4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801bb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb50:	46b3      	mov	fp, r6
 801bb52:	461c      	mov	r4, r3
 801bb54:	2700      	movs	r7, #0
 801bb56:	f04f 0800 	mov.w	r8, #0
 801bb5a:	f04f 0900 	mov.w	r9, #0
 801bb5e:	9b06      	ldr	r3, [sp, #24]
 801bb60:	429f      	cmp	r7, r3
 801bb62:	dd06      	ble.n	801bb72 <__kernel_rem_pio2+0x3c2>
 801bb64:	ab70      	add	r3, sp, #448	; 0x1c0
 801bb66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bb6a:	e9c3 8900 	strd	r8, r9, [r3]
 801bb6e:	3501      	adds	r5, #1
 801bb70:	e7de      	b.n	801bb30 <__kernel_rem_pio2+0x380>
 801bb72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801bb76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801bb7a:	f7e4 fd3d 	bl	80005f8 <__aeabi_dmul>
 801bb7e:	4602      	mov	r2, r0
 801bb80:	460b      	mov	r3, r1
 801bb82:	4640      	mov	r0, r8
 801bb84:	4649      	mov	r1, r9
 801bb86:	f7e4 fb81 	bl	800028c <__adddf3>
 801bb8a:	3701      	adds	r7, #1
 801bb8c:	4680      	mov	r8, r0
 801bb8e:	4689      	mov	r9, r1
 801bb90:	e7e5      	b.n	801bb5e <__kernel_rem_pio2+0x3ae>
 801bb92:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bb96:	e754      	b.n	801ba42 <__kernel_rem_pio2+0x292>
 801bb98:	ec47 6b10 	vmov	d0, r6, r7
 801bb9c:	f1ca 0000 	rsb	r0, sl, #0
 801bba0:	f000 fc32 	bl	801c408 <scalbn>
 801bba4:	ec57 6b10 	vmov	r6, r7, d0
 801bba8:	4b9f      	ldr	r3, [pc, #636]	; (801be28 <__kernel_rem_pio2+0x678>)
 801bbaa:	ee10 0a10 	vmov	r0, s0
 801bbae:	2200      	movs	r2, #0
 801bbb0:	4639      	mov	r1, r7
 801bbb2:	f7e4 ffa7 	bl	8000b04 <__aeabi_dcmpge>
 801bbb6:	b300      	cbz	r0, 801bbfa <__kernel_rem_pio2+0x44a>
 801bbb8:	4b9c      	ldr	r3, [pc, #624]	; (801be2c <__kernel_rem_pio2+0x67c>)
 801bbba:	2200      	movs	r2, #0
 801bbbc:	4630      	mov	r0, r6
 801bbbe:	4639      	mov	r1, r7
 801bbc0:	f7e4 fd1a 	bl	80005f8 <__aeabi_dmul>
 801bbc4:	f7e4 ffc8 	bl	8000b58 <__aeabi_d2iz>
 801bbc8:	4605      	mov	r5, r0
 801bbca:	f7e4 fcab 	bl	8000524 <__aeabi_i2d>
 801bbce:	4b96      	ldr	r3, [pc, #600]	; (801be28 <__kernel_rem_pio2+0x678>)
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	f7e4 fd11 	bl	80005f8 <__aeabi_dmul>
 801bbd6:	460b      	mov	r3, r1
 801bbd8:	4602      	mov	r2, r0
 801bbda:	4639      	mov	r1, r7
 801bbdc:	4630      	mov	r0, r6
 801bbde:	f7e4 fb53 	bl	8000288 <__aeabi_dsub>
 801bbe2:	f7e4 ffb9 	bl	8000b58 <__aeabi_d2iz>
 801bbe6:	f104 0b01 	add.w	fp, r4, #1
 801bbea:	ab0c      	add	r3, sp, #48	; 0x30
 801bbec:	f10a 0a18 	add.w	sl, sl, #24
 801bbf0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bbf4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801bbf8:	e72b      	b.n	801ba52 <__kernel_rem_pio2+0x2a2>
 801bbfa:	4630      	mov	r0, r6
 801bbfc:	4639      	mov	r1, r7
 801bbfe:	f7e4 ffab 	bl	8000b58 <__aeabi_d2iz>
 801bc02:	ab0c      	add	r3, sp, #48	; 0x30
 801bc04:	46a3      	mov	fp, r4
 801bc06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bc0a:	e722      	b.n	801ba52 <__kernel_rem_pio2+0x2a2>
 801bc0c:	ab70      	add	r3, sp, #448	; 0x1c0
 801bc0e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801bc12:	ab0c      	add	r3, sp, #48	; 0x30
 801bc14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801bc18:	f7e4 fc84 	bl	8000524 <__aeabi_i2d>
 801bc1c:	4622      	mov	r2, r4
 801bc1e:	462b      	mov	r3, r5
 801bc20:	f7e4 fcea 	bl	80005f8 <__aeabi_dmul>
 801bc24:	4632      	mov	r2, r6
 801bc26:	e9c9 0100 	strd	r0, r1, [r9]
 801bc2a:	463b      	mov	r3, r7
 801bc2c:	4620      	mov	r0, r4
 801bc2e:	4629      	mov	r1, r5
 801bc30:	f7e4 fce2 	bl	80005f8 <__aeabi_dmul>
 801bc34:	f108 38ff 	add.w	r8, r8, #4294967295
 801bc38:	4604      	mov	r4, r0
 801bc3a:	460d      	mov	r5, r1
 801bc3c:	e713      	b.n	801ba66 <__kernel_rem_pio2+0x2b6>
 801bc3e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801bc42:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801bc46:	f7e4 fcd7 	bl	80005f8 <__aeabi_dmul>
 801bc4a:	4602      	mov	r2, r0
 801bc4c:	460b      	mov	r3, r1
 801bc4e:	4620      	mov	r0, r4
 801bc50:	4629      	mov	r1, r5
 801bc52:	f7e4 fb1b 	bl	800028c <__adddf3>
 801bc56:	3601      	adds	r6, #1
 801bc58:	4604      	mov	r4, r0
 801bc5a:	460d      	mov	r5, r1
 801bc5c:	9b04      	ldr	r3, [sp, #16]
 801bc5e:	429e      	cmp	r6, r3
 801bc60:	dc01      	bgt.n	801bc66 <__kernel_rem_pio2+0x4b6>
 801bc62:	45b0      	cmp	r8, r6
 801bc64:	daeb      	bge.n	801bc3e <__kernel_rem_pio2+0x48e>
 801bc66:	ab48      	add	r3, sp, #288	; 0x120
 801bc68:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bc6c:	e9c3 4500 	strd	r4, r5, [r3]
 801bc70:	3f01      	subs	r7, #1
 801bc72:	f108 0801 	add.w	r8, r8, #1
 801bc76:	e6ff      	b.n	801ba78 <__kernel_rem_pio2+0x2c8>
 801bc78:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bc7a:	2b02      	cmp	r3, #2
 801bc7c:	dc0b      	bgt.n	801bc96 <__kernel_rem_pio2+0x4e6>
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	dc6e      	bgt.n	801bd60 <__kernel_rem_pio2+0x5b0>
 801bc82:	d045      	beq.n	801bd10 <__kernel_rem_pio2+0x560>
 801bc84:	9b07      	ldr	r3, [sp, #28]
 801bc86:	f003 0007 	and.w	r0, r3, #7
 801bc8a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801bc8e:	ecbd 8b02 	vpop	{d8}
 801bc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc96:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bc98:	2b03      	cmp	r3, #3
 801bc9a:	d1f3      	bne.n	801bc84 <__kernel_rem_pio2+0x4d4>
 801bc9c:	ab48      	add	r3, sp, #288	; 0x120
 801bc9e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801bca2:	46d0      	mov	r8, sl
 801bca4:	46d9      	mov	r9, fp
 801bca6:	f1b9 0f00 	cmp.w	r9, #0
 801bcaa:	f1a8 0808 	sub.w	r8, r8, #8
 801bcae:	dc64      	bgt.n	801bd7a <__kernel_rem_pio2+0x5ca>
 801bcb0:	465c      	mov	r4, fp
 801bcb2:	2c01      	cmp	r4, #1
 801bcb4:	f1aa 0a08 	sub.w	sl, sl, #8
 801bcb8:	dc7e      	bgt.n	801bdb8 <__kernel_rem_pio2+0x608>
 801bcba:	2000      	movs	r0, #0
 801bcbc:	2100      	movs	r1, #0
 801bcbe:	f1bb 0f01 	cmp.w	fp, #1
 801bcc2:	f300 8097 	bgt.w	801bdf4 <__kernel_rem_pio2+0x644>
 801bcc6:	9b02      	ldr	r3, [sp, #8]
 801bcc8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801bccc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	f040 8099 	bne.w	801be08 <__kernel_rem_pio2+0x658>
 801bcd6:	9b01      	ldr	r3, [sp, #4]
 801bcd8:	e9c3 5600 	strd	r5, r6, [r3]
 801bcdc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801bce0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bce4:	e7ce      	b.n	801bc84 <__kernel_rem_pio2+0x4d4>
 801bce6:	ab48      	add	r3, sp, #288	; 0x120
 801bce8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf0:	f7e4 facc 	bl	800028c <__adddf3>
 801bcf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bcf8:	f1bb 0f00 	cmp.w	fp, #0
 801bcfc:	daf3      	bge.n	801bce6 <__kernel_rem_pio2+0x536>
 801bcfe:	9b02      	ldr	r3, [sp, #8]
 801bd00:	b113      	cbz	r3, 801bd08 <__kernel_rem_pio2+0x558>
 801bd02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bd06:	4619      	mov	r1, r3
 801bd08:	9b01      	ldr	r3, [sp, #4]
 801bd0a:	e9c3 0100 	strd	r0, r1, [r3]
 801bd0e:	e7b9      	b.n	801bc84 <__kernel_rem_pio2+0x4d4>
 801bd10:	2000      	movs	r0, #0
 801bd12:	2100      	movs	r1, #0
 801bd14:	e7f0      	b.n	801bcf8 <__kernel_rem_pio2+0x548>
 801bd16:	ab48      	add	r3, sp, #288	; 0x120
 801bd18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd20:	f7e4 fab4 	bl	800028c <__adddf3>
 801bd24:	3c01      	subs	r4, #1
 801bd26:	2c00      	cmp	r4, #0
 801bd28:	daf5      	bge.n	801bd16 <__kernel_rem_pio2+0x566>
 801bd2a:	9b02      	ldr	r3, [sp, #8]
 801bd2c:	b1e3      	cbz	r3, 801bd68 <__kernel_rem_pio2+0x5b8>
 801bd2e:	4602      	mov	r2, r0
 801bd30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bd34:	9c01      	ldr	r4, [sp, #4]
 801bd36:	e9c4 2300 	strd	r2, r3, [r4]
 801bd3a:	4602      	mov	r2, r0
 801bd3c:	460b      	mov	r3, r1
 801bd3e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801bd42:	f7e4 faa1 	bl	8000288 <__aeabi_dsub>
 801bd46:	ad4a      	add	r5, sp, #296	; 0x128
 801bd48:	2401      	movs	r4, #1
 801bd4a:	45a3      	cmp	fp, r4
 801bd4c:	da0f      	bge.n	801bd6e <__kernel_rem_pio2+0x5be>
 801bd4e:	9b02      	ldr	r3, [sp, #8]
 801bd50:	b113      	cbz	r3, 801bd58 <__kernel_rem_pio2+0x5a8>
 801bd52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bd56:	4619      	mov	r1, r3
 801bd58:	9b01      	ldr	r3, [sp, #4]
 801bd5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801bd5e:	e791      	b.n	801bc84 <__kernel_rem_pio2+0x4d4>
 801bd60:	465c      	mov	r4, fp
 801bd62:	2000      	movs	r0, #0
 801bd64:	2100      	movs	r1, #0
 801bd66:	e7de      	b.n	801bd26 <__kernel_rem_pio2+0x576>
 801bd68:	4602      	mov	r2, r0
 801bd6a:	460b      	mov	r3, r1
 801bd6c:	e7e2      	b.n	801bd34 <__kernel_rem_pio2+0x584>
 801bd6e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801bd72:	f7e4 fa8b 	bl	800028c <__adddf3>
 801bd76:	3401      	adds	r4, #1
 801bd78:	e7e7      	b.n	801bd4a <__kernel_rem_pio2+0x59a>
 801bd7a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801bd7e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801bd82:	4620      	mov	r0, r4
 801bd84:	4632      	mov	r2, r6
 801bd86:	463b      	mov	r3, r7
 801bd88:	4629      	mov	r1, r5
 801bd8a:	f7e4 fa7f 	bl	800028c <__adddf3>
 801bd8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd92:	4602      	mov	r2, r0
 801bd94:	460b      	mov	r3, r1
 801bd96:	4620      	mov	r0, r4
 801bd98:	4629      	mov	r1, r5
 801bd9a:	f7e4 fa75 	bl	8000288 <__aeabi_dsub>
 801bd9e:	4632      	mov	r2, r6
 801bda0:	463b      	mov	r3, r7
 801bda2:	f7e4 fa73 	bl	800028c <__adddf3>
 801bda6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bdaa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801bdae:	ed88 7b00 	vstr	d7, [r8]
 801bdb2:	f109 39ff 	add.w	r9, r9, #4294967295
 801bdb6:	e776      	b.n	801bca6 <__kernel_rem_pio2+0x4f6>
 801bdb8:	e9da 8900 	ldrd	r8, r9, [sl]
 801bdbc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801bdc0:	4640      	mov	r0, r8
 801bdc2:	4632      	mov	r2, r6
 801bdc4:	463b      	mov	r3, r7
 801bdc6:	4649      	mov	r1, r9
 801bdc8:	f7e4 fa60 	bl	800028c <__adddf3>
 801bdcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bdd0:	4602      	mov	r2, r0
 801bdd2:	460b      	mov	r3, r1
 801bdd4:	4640      	mov	r0, r8
 801bdd6:	4649      	mov	r1, r9
 801bdd8:	f7e4 fa56 	bl	8000288 <__aeabi_dsub>
 801bddc:	4632      	mov	r2, r6
 801bdde:	463b      	mov	r3, r7
 801bde0:	f7e4 fa54 	bl	800028c <__adddf3>
 801bde4:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bde8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bdec:	ed8a 7b00 	vstr	d7, [sl]
 801bdf0:	3c01      	subs	r4, #1
 801bdf2:	e75e      	b.n	801bcb2 <__kernel_rem_pio2+0x502>
 801bdf4:	ab48      	add	r3, sp, #288	; 0x120
 801bdf6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdfe:	f7e4 fa45 	bl	800028c <__adddf3>
 801be02:	f10b 3bff 	add.w	fp, fp, #4294967295
 801be06:	e75a      	b.n	801bcbe <__kernel_rem_pio2+0x50e>
 801be08:	9b01      	ldr	r3, [sp, #4]
 801be0a:	9a01      	ldr	r2, [sp, #4]
 801be0c:	601d      	str	r5, [r3, #0]
 801be0e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801be12:	605c      	str	r4, [r3, #4]
 801be14:	609f      	str	r7, [r3, #8]
 801be16:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801be1a:	60d3      	str	r3, [r2, #12]
 801be1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be20:	6110      	str	r0, [r2, #16]
 801be22:	6153      	str	r3, [r2, #20]
 801be24:	e72e      	b.n	801bc84 <__kernel_rem_pio2+0x4d4>
 801be26:	bf00      	nop
 801be28:	41700000 	.word	0x41700000
 801be2c:	3e700000 	.word	0x3e700000

0801be30 <__kernel_sin>:
 801be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be34:	ed2d 8b04 	vpush	{d8-d9}
 801be38:	eeb0 8a41 	vmov.f32	s16, s2
 801be3c:	eef0 8a61 	vmov.f32	s17, s3
 801be40:	ec55 4b10 	vmov	r4, r5, d0
 801be44:	b083      	sub	sp, #12
 801be46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801be4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801be4e:	9001      	str	r0, [sp, #4]
 801be50:	da06      	bge.n	801be60 <__kernel_sin+0x30>
 801be52:	ee10 0a10 	vmov	r0, s0
 801be56:	4629      	mov	r1, r5
 801be58:	f7e4 fe7e 	bl	8000b58 <__aeabi_d2iz>
 801be5c:	2800      	cmp	r0, #0
 801be5e:	d051      	beq.n	801bf04 <__kernel_sin+0xd4>
 801be60:	4622      	mov	r2, r4
 801be62:	462b      	mov	r3, r5
 801be64:	4620      	mov	r0, r4
 801be66:	4629      	mov	r1, r5
 801be68:	f7e4 fbc6 	bl	80005f8 <__aeabi_dmul>
 801be6c:	4682      	mov	sl, r0
 801be6e:	468b      	mov	fp, r1
 801be70:	4602      	mov	r2, r0
 801be72:	460b      	mov	r3, r1
 801be74:	4620      	mov	r0, r4
 801be76:	4629      	mov	r1, r5
 801be78:	f7e4 fbbe 	bl	80005f8 <__aeabi_dmul>
 801be7c:	a341      	add	r3, pc, #260	; (adr r3, 801bf84 <__kernel_sin+0x154>)
 801be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be82:	4680      	mov	r8, r0
 801be84:	4689      	mov	r9, r1
 801be86:	4650      	mov	r0, sl
 801be88:	4659      	mov	r1, fp
 801be8a:	f7e4 fbb5 	bl	80005f8 <__aeabi_dmul>
 801be8e:	a33f      	add	r3, pc, #252	; (adr r3, 801bf8c <__kernel_sin+0x15c>)
 801be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be94:	f7e4 f9f8 	bl	8000288 <__aeabi_dsub>
 801be98:	4652      	mov	r2, sl
 801be9a:	465b      	mov	r3, fp
 801be9c:	f7e4 fbac 	bl	80005f8 <__aeabi_dmul>
 801bea0:	a33c      	add	r3, pc, #240	; (adr r3, 801bf94 <__kernel_sin+0x164>)
 801bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bea6:	f7e4 f9f1 	bl	800028c <__adddf3>
 801beaa:	4652      	mov	r2, sl
 801beac:	465b      	mov	r3, fp
 801beae:	f7e4 fba3 	bl	80005f8 <__aeabi_dmul>
 801beb2:	a33a      	add	r3, pc, #232	; (adr r3, 801bf9c <__kernel_sin+0x16c>)
 801beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beb8:	f7e4 f9e6 	bl	8000288 <__aeabi_dsub>
 801bebc:	4652      	mov	r2, sl
 801bebe:	465b      	mov	r3, fp
 801bec0:	f7e4 fb9a 	bl	80005f8 <__aeabi_dmul>
 801bec4:	a337      	add	r3, pc, #220	; (adr r3, 801bfa4 <__kernel_sin+0x174>)
 801bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beca:	f7e4 f9df 	bl	800028c <__adddf3>
 801bece:	9b01      	ldr	r3, [sp, #4]
 801bed0:	4606      	mov	r6, r0
 801bed2:	460f      	mov	r7, r1
 801bed4:	b9eb      	cbnz	r3, 801bf12 <__kernel_sin+0xe2>
 801bed6:	4602      	mov	r2, r0
 801bed8:	460b      	mov	r3, r1
 801beda:	4650      	mov	r0, sl
 801bedc:	4659      	mov	r1, fp
 801bede:	f7e4 fb8b 	bl	80005f8 <__aeabi_dmul>
 801bee2:	a325      	add	r3, pc, #148	; (adr r3, 801bf78 <__kernel_sin+0x148>)
 801bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bee8:	f7e4 f9ce 	bl	8000288 <__aeabi_dsub>
 801beec:	4642      	mov	r2, r8
 801beee:	464b      	mov	r3, r9
 801bef0:	f7e4 fb82 	bl	80005f8 <__aeabi_dmul>
 801bef4:	4602      	mov	r2, r0
 801bef6:	460b      	mov	r3, r1
 801bef8:	4620      	mov	r0, r4
 801befa:	4629      	mov	r1, r5
 801befc:	f7e4 f9c6 	bl	800028c <__adddf3>
 801bf00:	4604      	mov	r4, r0
 801bf02:	460d      	mov	r5, r1
 801bf04:	ec45 4b10 	vmov	d0, r4, r5
 801bf08:	b003      	add	sp, #12
 801bf0a:	ecbd 8b04 	vpop	{d8-d9}
 801bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf12:	4b1b      	ldr	r3, [pc, #108]	; (801bf80 <__kernel_sin+0x150>)
 801bf14:	ec51 0b18 	vmov	r0, r1, d8
 801bf18:	2200      	movs	r2, #0
 801bf1a:	f7e4 fb6d 	bl	80005f8 <__aeabi_dmul>
 801bf1e:	4632      	mov	r2, r6
 801bf20:	ec41 0b19 	vmov	d9, r0, r1
 801bf24:	463b      	mov	r3, r7
 801bf26:	4640      	mov	r0, r8
 801bf28:	4649      	mov	r1, r9
 801bf2a:	f7e4 fb65 	bl	80005f8 <__aeabi_dmul>
 801bf2e:	4602      	mov	r2, r0
 801bf30:	460b      	mov	r3, r1
 801bf32:	ec51 0b19 	vmov	r0, r1, d9
 801bf36:	f7e4 f9a7 	bl	8000288 <__aeabi_dsub>
 801bf3a:	4652      	mov	r2, sl
 801bf3c:	465b      	mov	r3, fp
 801bf3e:	f7e4 fb5b 	bl	80005f8 <__aeabi_dmul>
 801bf42:	ec53 2b18 	vmov	r2, r3, d8
 801bf46:	f7e4 f99f 	bl	8000288 <__aeabi_dsub>
 801bf4a:	a30b      	add	r3, pc, #44	; (adr r3, 801bf78 <__kernel_sin+0x148>)
 801bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf50:	4606      	mov	r6, r0
 801bf52:	460f      	mov	r7, r1
 801bf54:	4640      	mov	r0, r8
 801bf56:	4649      	mov	r1, r9
 801bf58:	f7e4 fb4e 	bl	80005f8 <__aeabi_dmul>
 801bf5c:	4602      	mov	r2, r0
 801bf5e:	460b      	mov	r3, r1
 801bf60:	4630      	mov	r0, r6
 801bf62:	4639      	mov	r1, r7
 801bf64:	f7e4 f992 	bl	800028c <__adddf3>
 801bf68:	4602      	mov	r2, r0
 801bf6a:	460b      	mov	r3, r1
 801bf6c:	4620      	mov	r0, r4
 801bf6e:	4629      	mov	r1, r5
 801bf70:	f7e4 f98a 	bl	8000288 <__aeabi_dsub>
 801bf74:	e7c4      	b.n	801bf00 <__kernel_sin+0xd0>
 801bf76:	bf00      	nop
 801bf78:	55555549 	.word	0x55555549
 801bf7c:	3fc55555 	.word	0x3fc55555
 801bf80:	3fe00000 	.word	0x3fe00000
 801bf84:	5acfd57c 	.word	0x5acfd57c
 801bf88:	3de5d93a 	.word	0x3de5d93a
 801bf8c:	8a2b9ceb 	.word	0x8a2b9ceb
 801bf90:	3e5ae5e6 	.word	0x3e5ae5e6
 801bf94:	57b1fe7d 	.word	0x57b1fe7d
 801bf98:	3ec71de3 	.word	0x3ec71de3
 801bf9c:	19c161d5 	.word	0x19c161d5
 801bfa0:	3f2a01a0 	.word	0x3f2a01a0
 801bfa4:	1110f8a6 	.word	0x1110f8a6
 801bfa8:	3f811111 	.word	0x3f811111
 801bfac:	00000000 	.word	0x00000000

0801bfb0 <atan>:
 801bfb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfb4:	ec55 4b10 	vmov	r4, r5, d0
 801bfb8:	4bc3      	ldr	r3, [pc, #780]	; (801c2c8 <atan+0x318>)
 801bfba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bfbe:	429e      	cmp	r6, r3
 801bfc0:	46ab      	mov	fp, r5
 801bfc2:	dd18      	ble.n	801bff6 <atan+0x46>
 801bfc4:	4bc1      	ldr	r3, [pc, #772]	; (801c2cc <atan+0x31c>)
 801bfc6:	429e      	cmp	r6, r3
 801bfc8:	dc01      	bgt.n	801bfce <atan+0x1e>
 801bfca:	d109      	bne.n	801bfe0 <atan+0x30>
 801bfcc:	b144      	cbz	r4, 801bfe0 <atan+0x30>
 801bfce:	4622      	mov	r2, r4
 801bfd0:	462b      	mov	r3, r5
 801bfd2:	4620      	mov	r0, r4
 801bfd4:	4629      	mov	r1, r5
 801bfd6:	f7e4 f959 	bl	800028c <__adddf3>
 801bfda:	4604      	mov	r4, r0
 801bfdc:	460d      	mov	r5, r1
 801bfde:	e006      	b.n	801bfee <atan+0x3e>
 801bfe0:	f1bb 0f00 	cmp.w	fp, #0
 801bfe4:	f300 8131 	bgt.w	801c24a <atan+0x29a>
 801bfe8:	a59b      	add	r5, pc, #620	; (adr r5, 801c258 <atan+0x2a8>)
 801bfea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bfee:	ec45 4b10 	vmov	d0, r4, r5
 801bff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bff6:	4bb6      	ldr	r3, [pc, #728]	; (801c2d0 <atan+0x320>)
 801bff8:	429e      	cmp	r6, r3
 801bffa:	dc14      	bgt.n	801c026 <atan+0x76>
 801bffc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801c000:	429e      	cmp	r6, r3
 801c002:	dc0d      	bgt.n	801c020 <atan+0x70>
 801c004:	a396      	add	r3, pc, #600	; (adr r3, 801c260 <atan+0x2b0>)
 801c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c00a:	ee10 0a10 	vmov	r0, s0
 801c00e:	4629      	mov	r1, r5
 801c010:	f7e4 f93c 	bl	800028c <__adddf3>
 801c014:	4baf      	ldr	r3, [pc, #700]	; (801c2d4 <atan+0x324>)
 801c016:	2200      	movs	r2, #0
 801c018:	f7e4 fd7e 	bl	8000b18 <__aeabi_dcmpgt>
 801c01c:	2800      	cmp	r0, #0
 801c01e:	d1e6      	bne.n	801bfee <atan+0x3e>
 801c020:	f04f 3aff 	mov.w	sl, #4294967295
 801c024:	e02b      	b.n	801c07e <atan+0xce>
 801c026:	f000 f963 	bl	801c2f0 <fabs>
 801c02a:	4bab      	ldr	r3, [pc, #684]	; (801c2d8 <atan+0x328>)
 801c02c:	429e      	cmp	r6, r3
 801c02e:	ec55 4b10 	vmov	r4, r5, d0
 801c032:	f300 80bf 	bgt.w	801c1b4 <atan+0x204>
 801c036:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801c03a:	429e      	cmp	r6, r3
 801c03c:	f300 80a0 	bgt.w	801c180 <atan+0x1d0>
 801c040:	ee10 2a10 	vmov	r2, s0
 801c044:	ee10 0a10 	vmov	r0, s0
 801c048:	462b      	mov	r3, r5
 801c04a:	4629      	mov	r1, r5
 801c04c:	f7e4 f91e 	bl	800028c <__adddf3>
 801c050:	4ba0      	ldr	r3, [pc, #640]	; (801c2d4 <atan+0x324>)
 801c052:	2200      	movs	r2, #0
 801c054:	f7e4 f918 	bl	8000288 <__aeabi_dsub>
 801c058:	2200      	movs	r2, #0
 801c05a:	4606      	mov	r6, r0
 801c05c:	460f      	mov	r7, r1
 801c05e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c062:	4620      	mov	r0, r4
 801c064:	4629      	mov	r1, r5
 801c066:	f7e4 f911 	bl	800028c <__adddf3>
 801c06a:	4602      	mov	r2, r0
 801c06c:	460b      	mov	r3, r1
 801c06e:	4630      	mov	r0, r6
 801c070:	4639      	mov	r1, r7
 801c072:	f7e4 fbeb 	bl	800084c <__aeabi_ddiv>
 801c076:	f04f 0a00 	mov.w	sl, #0
 801c07a:	4604      	mov	r4, r0
 801c07c:	460d      	mov	r5, r1
 801c07e:	4622      	mov	r2, r4
 801c080:	462b      	mov	r3, r5
 801c082:	4620      	mov	r0, r4
 801c084:	4629      	mov	r1, r5
 801c086:	f7e4 fab7 	bl	80005f8 <__aeabi_dmul>
 801c08a:	4602      	mov	r2, r0
 801c08c:	460b      	mov	r3, r1
 801c08e:	4680      	mov	r8, r0
 801c090:	4689      	mov	r9, r1
 801c092:	f7e4 fab1 	bl	80005f8 <__aeabi_dmul>
 801c096:	a374      	add	r3, pc, #464	; (adr r3, 801c268 <atan+0x2b8>)
 801c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c09c:	4606      	mov	r6, r0
 801c09e:	460f      	mov	r7, r1
 801c0a0:	f7e4 faaa 	bl	80005f8 <__aeabi_dmul>
 801c0a4:	a372      	add	r3, pc, #456	; (adr r3, 801c270 <atan+0x2c0>)
 801c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0aa:	f7e4 f8ef 	bl	800028c <__adddf3>
 801c0ae:	4632      	mov	r2, r6
 801c0b0:	463b      	mov	r3, r7
 801c0b2:	f7e4 faa1 	bl	80005f8 <__aeabi_dmul>
 801c0b6:	a370      	add	r3, pc, #448	; (adr r3, 801c278 <atan+0x2c8>)
 801c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0bc:	f7e4 f8e6 	bl	800028c <__adddf3>
 801c0c0:	4632      	mov	r2, r6
 801c0c2:	463b      	mov	r3, r7
 801c0c4:	f7e4 fa98 	bl	80005f8 <__aeabi_dmul>
 801c0c8:	a36d      	add	r3, pc, #436	; (adr r3, 801c280 <atan+0x2d0>)
 801c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ce:	f7e4 f8dd 	bl	800028c <__adddf3>
 801c0d2:	4632      	mov	r2, r6
 801c0d4:	463b      	mov	r3, r7
 801c0d6:	f7e4 fa8f 	bl	80005f8 <__aeabi_dmul>
 801c0da:	a36b      	add	r3, pc, #428	; (adr r3, 801c288 <atan+0x2d8>)
 801c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e0:	f7e4 f8d4 	bl	800028c <__adddf3>
 801c0e4:	4632      	mov	r2, r6
 801c0e6:	463b      	mov	r3, r7
 801c0e8:	f7e4 fa86 	bl	80005f8 <__aeabi_dmul>
 801c0ec:	a368      	add	r3, pc, #416	; (adr r3, 801c290 <atan+0x2e0>)
 801c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f2:	f7e4 f8cb 	bl	800028c <__adddf3>
 801c0f6:	4642      	mov	r2, r8
 801c0f8:	464b      	mov	r3, r9
 801c0fa:	f7e4 fa7d 	bl	80005f8 <__aeabi_dmul>
 801c0fe:	a366      	add	r3, pc, #408	; (adr r3, 801c298 <atan+0x2e8>)
 801c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c104:	4680      	mov	r8, r0
 801c106:	4689      	mov	r9, r1
 801c108:	4630      	mov	r0, r6
 801c10a:	4639      	mov	r1, r7
 801c10c:	f7e4 fa74 	bl	80005f8 <__aeabi_dmul>
 801c110:	a363      	add	r3, pc, #396	; (adr r3, 801c2a0 <atan+0x2f0>)
 801c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c116:	f7e4 f8b7 	bl	8000288 <__aeabi_dsub>
 801c11a:	4632      	mov	r2, r6
 801c11c:	463b      	mov	r3, r7
 801c11e:	f7e4 fa6b 	bl	80005f8 <__aeabi_dmul>
 801c122:	a361      	add	r3, pc, #388	; (adr r3, 801c2a8 <atan+0x2f8>)
 801c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c128:	f7e4 f8ae 	bl	8000288 <__aeabi_dsub>
 801c12c:	4632      	mov	r2, r6
 801c12e:	463b      	mov	r3, r7
 801c130:	f7e4 fa62 	bl	80005f8 <__aeabi_dmul>
 801c134:	a35e      	add	r3, pc, #376	; (adr r3, 801c2b0 <atan+0x300>)
 801c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c13a:	f7e4 f8a5 	bl	8000288 <__aeabi_dsub>
 801c13e:	4632      	mov	r2, r6
 801c140:	463b      	mov	r3, r7
 801c142:	f7e4 fa59 	bl	80005f8 <__aeabi_dmul>
 801c146:	a35c      	add	r3, pc, #368	; (adr r3, 801c2b8 <atan+0x308>)
 801c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c14c:	f7e4 f89c 	bl	8000288 <__aeabi_dsub>
 801c150:	4632      	mov	r2, r6
 801c152:	463b      	mov	r3, r7
 801c154:	f7e4 fa50 	bl	80005f8 <__aeabi_dmul>
 801c158:	4602      	mov	r2, r0
 801c15a:	460b      	mov	r3, r1
 801c15c:	4640      	mov	r0, r8
 801c15e:	4649      	mov	r1, r9
 801c160:	f7e4 f894 	bl	800028c <__adddf3>
 801c164:	4622      	mov	r2, r4
 801c166:	462b      	mov	r3, r5
 801c168:	f7e4 fa46 	bl	80005f8 <__aeabi_dmul>
 801c16c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801c170:	4602      	mov	r2, r0
 801c172:	460b      	mov	r3, r1
 801c174:	d14b      	bne.n	801c20e <atan+0x25e>
 801c176:	4620      	mov	r0, r4
 801c178:	4629      	mov	r1, r5
 801c17a:	f7e4 f885 	bl	8000288 <__aeabi_dsub>
 801c17e:	e72c      	b.n	801bfda <atan+0x2a>
 801c180:	ee10 0a10 	vmov	r0, s0
 801c184:	4b53      	ldr	r3, [pc, #332]	; (801c2d4 <atan+0x324>)
 801c186:	2200      	movs	r2, #0
 801c188:	4629      	mov	r1, r5
 801c18a:	f7e4 f87d 	bl	8000288 <__aeabi_dsub>
 801c18e:	4b51      	ldr	r3, [pc, #324]	; (801c2d4 <atan+0x324>)
 801c190:	4606      	mov	r6, r0
 801c192:	460f      	mov	r7, r1
 801c194:	2200      	movs	r2, #0
 801c196:	4620      	mov	r0, r4
 801c198:	4629      	mov	r1, r5
 801c19a:	f7e4 f877 	bl	800028c <__adddf3>
 801c19e:	4602      	mov	r2, r0
 801c1a0:	460b      	mov	r3, r1
 801c1a2:	4630      	mov	r0, r6
 801c1a4:	4639      	mov	r1, r7
 801c1a6:	f7e4 fb51 	bl	800084c <__aeabi_ddiv>
 801c1aa:	f04f 0a01 	mov.w	sl, #1
 801c1ae:	4604      	mov	r4, r0
 801c1b0:	460d      	mov	r5, r1
 801c1b2:	e764      	b.n	801c07e <atan+0xce>
 801c1b4:	4b49      	ldr	r3, [pc, #292]	; (801c2dc <atan+0x32c>)
 801c1b6:	429e      	cmp	r6, r3
 801c1b8:	da1d      	bge.n	801c1f6 <atan+0x246>
 801c1ba:	ee10 0a10 	vmov	r0, s0
 801c1be:	4b48      	ldr	r3, [pc, #288]	; (801c2e0 <atan+0x330>)
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	4629      	mov	r1, r5
 801c1c4:	f7e4 f860 	bl	8000288 <__aeabi_dsub>
 801c1c8:	4b45      	ldr	r3, [pc, #276]	; (801c2e0 <atan+0x330>)
 801c1ca:	4606      	mov	r6, r0
 801c1cc:	460f      	mov	r7, r1
 801c1ce:	2200      	movs	r2, #0
 801c1d0:	4620      	mov	r0, r4
 801c1d2:	4629      	mov	r1, r5
 801c1d4:	f7e4 fa10 	bl	80005f8 <__aeabi_dmul>
 801c1d8:	4b3e      	ldr	r3, [pc, #248]	; (801c2d4 <atan+0x324>)
 801c1da:	2200      	movs	r2, #0
 801c1dc:	f7e4 f856 	bl	800028c <__adddf3>
 801c1e0:	4602      	mov	r2, r0
 801c1e2:	460b      	mov	r3, r1
 801c1e4:	4630      	mov	r0, r6
 801c1e6:	4639      	mov	r1, r7
 801c1e8:	f7e4 fb30 	bl	800084c <__aeabi_ddiv>
 801c1ec:	f04f 0a02 	mov.w	sl, #2
 801c1f0:	4604      	mov	r4, r0
 801c1f2:	460d      	mov	r5, r1
 801c1f4:	e743      	b.n	801c07e <atan+0xce>
 801c1f6:	462b      	mov	r3, r5
 801c1f8:	ee10 2a10 	vmov	r2, s0
 801c1fc:	4939      	ldr	r1, [pc, #228]	; (801c2e4 <atan+0x334>)
 801c1fe:	2000      	movs	r0, #0
 801c200:	f7e4 fb24 	bl	800084c <__aeabi_ddiv>
 801c204:	f04f 0a03 	mov.w	sl, #3
 801c208:	4604      	mov	r4, r0
 801c20a:	460d      	mov	r5, r1
 801c20c:	e737      	b.n	801c07e <atan+0xce>
 801c20e:	4b36      	ldr	r3, [pc, #216]	; (801c2e8 <atan+0x338>)
 801c210:	4e36      	ldr	r6, [pc, #216]	; (801c2ec <atan+0x33c>)
 801c212:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c216:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801c21a:	e9da 2300 	ldrd	r2, r3, [sl]
 801c21e:	f7e4 f833 	bl	8000288 <__aeabi_dsub>
 801c222:	4622      	mov	r2, r4
 801c224:	462b      	mov	r3, r5
 801c226:	f7e4 f82f 	bl	8000288 <__aeabi_dsub>
 801c22a:	4602      	mov	r2, r0
 801c22c:	460b      	mov	r3, r1
 801c22e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c232:	f7e4 f829 	bl	8000288 <__aeabi_dsub>
 801c236:	f1bb 0f00 	cmp.w	fp, #0
 801c23a:	4604      	mov	r4, r0
 801c23c:	460d      	mov	r5, r1
 801c23e:	f6bf aed6 	bge.w	801bfee <atan+0x3e>
 801c242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c246:	461d      	mov	r5, r3
 801c248:	e6d1      	b.n	801bfee <atan+0x3e>
 801c24a:	a51d      	add	r5, pc, #116	; (adr r5, 801c2c0 <atan+0x310>)
 801c24c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c250:	e6cd      	b.n	801bfee <atan+0x3e>
 801c252:	bf00      	nop
 801c254:	f3af 8000 	nop.w
 801c258:	54442d18 	.word	0x54442d18
 801c25c:	bff921fb 	.word	0xbff921fb
 801c260:	8800759c 	.word	0x8800759c
 801c264:	7e37e43c 	.word	0x7e37e43c
 801c268:	e322da11 	.word	0xe322da11
 801c26c:	3f90ad3a 	.word	0x3f90ad3a
 801c270:	24760deb 	.word	0x24760deb
 801c274:	3fa97b4b 	.word	0x3fa97b4b
 801c278:	a0d03d51 	.word	0xa0d03d51
 801c27c:	3fb10d66 	.word	0x3fb10d66
 801c280:	c54c206e 	.word	0xc54c206e
 801c284:	3fb745cd 	.word	0x3fb745cd
 801c288:	920083ff 	.word	0x920083ff
 801c28c:	3fc24924 	.word	0x3fc24924
 801c290:	5555550d 	.word	0x5555550d
 801c294:	3fd55555 	.word	0x3fd55555
 801c298:	2c6a6c2f 	.word	0x2c6a6c2f
 801c29c:	bfa2b444 	.word	0xbfa2b444
 801c2a0:	52defd9a 	.word	0x52defd9a
 801c2a4:	3fadde2d 	.word	0x3fadde2d
 801c2a8:	af749a6d 	.word	0xaf749a6d
 801c2ac:	3fb3b0f2 	.word	0x3fb3b0f2
 801c2b0:	fe231671 	.word	0xfe231671
 801c2b4:	3fbc71c6 	.word	0x3fbc71c6
 801c2b8:	9998ebc4 	.word	0x9998ebc4
 801c2bc:	3fc99999 	.word	0x3fc99999
 801c2c0:	54442d18 	.word	0x54442d18
 801c2c4:	3ff921fb 	.word	0x3ff921fb
 801c2c8:	440fffff 	.word	0x440fffff
 801c2cc:	7ff00000 	.word	0x7ff00000
 801c2d0:	3fdbffff 	.word	0x3fdbffff
 801c2d4:	3ff00000 	.word	0x3ff00000
 801c2d8:	3ff2ffff 	.word	0x3ff2ffff
 801c2dc:	40038000 	.word	0x40038000
 801c2e0:	3ff80000 	.word	0x3ff80000
 801c2e4:	bff00000 	.word	0xbff00000
 801c2e8:	0801cf00 	.word	0x0801cf00
 801c2ec:	0801cee0 	.word	0x0801cee0

0801c2f0 <fabs>:
 801c2f0:	ec51 0b10 	vmov	r0, r1, d0
 801c2f4:	ee10 2a10 	vmov	r2, s0
 801c2f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c2fc:	ec43 2b10 	vmov	d0, r2, r3
 801c300:	4770      	bx	lr
 801c302:	0000      	movs	r0, r0
 801c304:	0000      	movs	r0, r0
	...

0801c308 <floor>:
 801c308:	ec51 0b10 	vmov	r0, r1, d0
 801c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c310:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c314:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c318:	2e13      	cmp	r6, #19
 801c31a:	ee10 5a10 	vmov	r5, s0
 801c31e:	ee10 8a10 	vmov	r8, s0
 801c322:	460c      	mov	r4, r1
 801c324:	dc32      	bgt.n	801c38c <floor+0x84>
 801c326:	2e00      	cmp	r6, #0
 801c328:	da14      	bge.n	801c354 <floor+0x4c>
 801c32a:	a333      	add	r3, pc, #204	; (adr r3, 801c3f8 <floor+0xf0>)
 801c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c330:	f7e3 ffac 	bl	800028c <__adddf3>
 801c334:	2200      	movs	r2, #0
 801c336:	2300      	movs	r3, #0
 801c338:	f7e4 fbee 	bl	8000b18 <__aeabi_dcmpgt>
 801c33c:	b138      	cbz	r0, 801c34e <floor+0x46>
 801c33e:	2c00      	cmp	r4, #0
 801c340:	da57      	bge.n	801c3f2 <floor+0xea>
 801c342:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c346:	431d      	orrs	r5, r3
 801c348:	d001      	beq.n	801c34e <floor+0x46>
 801c34a:	4c2d      	ldr	r4, [pc, #180]	; (801c400 <floor+0xf8>)
 801c34c:	2500      	movs	r5, #0
 801c34e:	4621      	mov	r1, r4
 801c350:	4628      	mov	r0, r5
 801c352:	e025      	b.n	801c3a0 <floor+0x98>
 801c354:	4f2b      	ldr	r7, [pc, #172]	; (801c404 <floor+0xfc>)
 801c356:	4137      	asrs	r7, r6
 801c358:	ea01 0307 	and.w	r3, r1, r7
 801c35c:	4303      	orrs	r3, r0
 801c35e:	d01f      	beq.n	801c3a0 <floor+0x98>
 801c360:	a325      	add	r3, pc, #148	; (adr r3, 801c3f8 <floor+0xf0>)
 801c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c366:	f7e3 ff91 	bl	800028c <__adddf3>
 801c36a:	2200      	movs	r2, #0
 801c36c:	2300      	movs	r3, #0
 801c36e:	f7e4 fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 801c372:	2800      	cmp	r0, #0
 801c374:	d0eb      	beq.n	801c34e <floor+0x46>
 801c376:	2c00      	cmp	r4, #0
 801c378:	bfbe      	ittt	lt
 801c37a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c37e:	fa43 f606 	asrlt.w	r6, r3, r6
 801c382:	19a4      	addlt	r4, r4, r6
 801c384:	ea24 0407 	bic.w	r4, r4, r7
 801c388:	2500      	movs	r5, #0
 801c38a:	e7e0      	b.n	801c34e <floor+0x46>
 801c38c:	2e33      	cmp	r6, #51	; 0x33
 801c38e:	dd0b      	ble.n	801c3a8 <floor+0xa0>
 801c390:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c394:	d104      	bne.n	801c3a0 <floor+0x98>
 801c396:	ee10 2a10 	vmov	r2, s0
 801c39a:	460b      	mov	r3, r1
 801c39c:	f7e3 ff76 	bl	800028c <__adddf3>
 801c3a0:	ec41 0b10 	vmov	d0, r0, r1
 801c3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c3ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c3b0:	fa23 f707 	lsr.w	r7, r3, r7
 801c3b4:	4207      	tst	r7, r0
 801c3b6:	d0f3      	beq.n	801c3a0 <floor+0x98>
 801c3b8:	a30f      	add	r3, pc, #60	; (adr r3, 801c3f8 <floor+0xf0>)
 801c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3be:	f7e3 ff65 	bl	800028c <__adddf3>
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	f7e4 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 801c3ca:	2800      	cmp	r0, #0
 801c3cc:	d0bf      	beq.n	801c34e <floor+0x46>
 801c3ce:	2c00      	cmp	r4, #0
 801c3d0:	da02      	bge.n	801c3d8 <floor+0xd0>
 801c3d2:	2e14      	cmp	r6, #20
 801c3d4:	d103      	bne.n	801c3de <floor+0xd6>
 801c3d6:	3401      	adds	r4, #1
 801c3d8:	ea25 0507 	bic.w	r5, r5, r7
 801c3dc:	e7b7      	b.n	801c34e <floor+0x46>
 801c3de:	2301      	movs	r3, #1
 801c3e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c3e4:	fa03 f606 	lsl.w	r6, r3, r6
 801c3e8:	4435      	add	r5, r6
 801c3ea:	4545      	cmp	r5, r8
 801c3ec:	bf38      	it	cc
 801c3ee:	18e4      	addcc	r4, r4, r3
 801c3f0:	e7f2      	b.n	801c3d8 <floor+0xd0>
 801c3f2:	2500      	movs	r5, #0
 801c3f4:	462c      	mov	r4, r5
 801c3f6:	e7aa      	b.n	801c34e <floor+0x46>
 801c3f8:	8800759c 	.word	0x8800759c
 801c3fc:	7e37e43c 	.word	0x7e37e43c
 801c400:	bff00000 	.word	0xbff00000
 801c404:	000fffff 	.word	0x000fffff

0801c408 <scalbn>:
 801c408:	b570      	push	{r4, r5, r6, lr}
 801c40a:	ec55 4b10 	vmov	r4, r5, d0
 801c40e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c412:	4606      	mov	r6, r0
 801c414:	462b      	mov	r3, r5
 801c416:	b99a      	cbnz	r2, 801c440 <scalbn+0x38>
 801c418:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c41c:	4323      	orrs	r3, r4
 801c41e:	d036      	beq.n	801c48e <scalbn+0x86>
 801c420:	4b39      	ldr	r3, [pc, #228]	; (801c508 <scalbn+0x100>)
 801c422:	4629      	mov	r1, r5
 801c424:	ee10 0a10 	vmov	r0, s0
 801c428:	2200      	movs	r2, #0
 801c42a:	f7e4 f8e5 	bl	80005f8 <__aeabi_dmul>
 801c42e:	4b37      	ldr	r3, [pc, #220]	; (801c50c <scalbn+0x104>)
 801c430:	429e      	cmp	r6, r3
 801c432:	4604      	mov	r4, r0
 801c434:	460d      	mov	r5, r1
 801c436:	da10      	bge.n	801c45a <scalbn+0x52>
 801c438:	a32b      	add	r3, pc, #172	; (adr r3, 801c4e8 <scalbn+0xe0>)
 801c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c43e:	e03a      	b.n	801c4b6 <scalbn+0xae>
 801c440:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c444:	428a      	cmp	r2, r1
 801c446:	d10c      	bne.n	801c462 <scalbn+0x5a>
 801c448:	ee10 2a10 	vmov	r2, s0
 801c44c:	4620      	mov	r0, r4
 801c44e:	4629      	mov	r1, r5
 801c450:	f7e3 ff1c 	bl	800028c <__adddf3>
 801c454:	4604      	mov	r4, r0
 801c456:	460d      	mov	r5, r1
 801c458:	e019      	b.n	801c48e <scalbn+0x86>
 801c45a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c45e:	460b      	mov	r3, r1
 801c460:	3a36      	subs	r2, #54	; 0x36
 801c462:	4432      	add	r2, r6
 801c464:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c468:	428a      	cmp	r2, r1
 801c46a:	dd08      	ble.n	801c47e <scalbn+0x76>
 801c46c:	2d00      	cmp	r5, #0
 801c46e:	a120      	add	r1, pc, #128	; (adr r1, 801c4f0 <scalbn+0xe8>)
 801c470:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c474:	da1c      	bge.n	801c4b0 <scalbn+0xa8>
 801c476:	a120      	add	r1, pc, #128	; (adr r1, 801c4f8 <scalbn+0xf0>)
 801c478:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c47c:	e018      	b.n	801c4b0 <scalbn+0xa8>
 801c47e:	2a00      	cmp	r2, #0
 801c480:	dd08      	ble.n	801c494 <scalbn+0x8c>
 801c482:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c486:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c48a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c48e:	ec45 4b10 	vmov	d0, r4, r5
 801c492:	bd70      	pop	{r4, r5, r6, pc}
 801c494:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c498:	da19      	bge.n	801c4ce <scalbn+0xc6>
 801c49a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c49e:	429e      	cmp	r6, r3
 801c4a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c4a4:	dd0a      	ble.n	801c4bc <scalbn+0xb4>
 801c4a6:	a112      	add	r1, pc, #72	; (adr r1, 801c4f0 <scalbn+0xe8>)
 801c4a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d1e2      	bne.n	801c476 <scalbn+0x6e>
 801c4b0:	a30f      	add	r3, pc, #60	; (adr r3, 801c4f0 <scalbn+0xe8>)
 801c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4b6:	f7e4 f89f 	bl	80005f8 <__aeabi_dmul>
 801c4ba:	e7cb      	b.n	801c454 <scalbn+0x4c>
 801c4bc:	a10a      	add	r1, pc, #40	; (adr r1, 801c4e8 <scalbn+0xe0>)
 801c4be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d0b8      	beq.n	801c438 <scalbn+0x30>
 801c4c6:	a10e      	add	r1, pc, #56	; (adr r1, 801c500 <scalbn+0xf8>)
 801c4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4cc:	e7b4      	b.n	801c438 <scalbn+0x30>
 801c4ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c4d2:	3236      	adds	r2, #54	; 0x36
 801c4d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c4d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c4dc:	4620      	mov	r0, r4
 801c4de:	4b0c      	ldr	r3, [pc, #48]	; (801c510 <scalbn+0x108>)
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	e7e8      	b.n	801c4b6 <scalbn+0xae>
 801c4e4:	f3af 8000 	nop.w
 801c4e8:	c2f8f359 	.word	0xc2f8f359
 801c4ec:	01a56e1f 	.word	0x01a56e1f
 801c4f0:	8800759c 	.word	0x8800759c
 801c4f4:	7e37e43c 	.word	0x7e37e43c
 801c4f8:	8800759c 	.word	0x8800759c
 801c4fc:	fe37e43c 	.word	0xfe37e43c
 801c500:	c2f8f359 	.word	0xc2f8f359
 801c504:	81a56e1f 	.word	0x81a56e1f
 801c508:	43500000 	.word	0x43500000
 801c50c:	ffff3cb0 	.word	0xffff3cb0
 801c510:	3c900000 	.word	0x3c900000

0801c514 <_init>:
 801c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c516:	bf00      	nop
 801c518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c51a:	bc08      	pop	{r3}
 801c51c:	469e      	mov	lr, r3
 801c51e:	4770      	bx	lr

0801c520 <_fini>:
 801c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c522:	bf00      	nop
 801c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c526:	bc08      	pop	{r3}
 801c528:	469e      	mov	lr, r3
 801c52a:	4770      	bx	lr
