
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b25c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0801b3f0  0801b3f0  0002b3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bba0  0801bba0  00030be0  2**0
                  CONTENTS
  4 .ARM          00000008  0801bba0  0801bba0  0002bba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bba8  0801bba8  00030be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bba8  0801bba8  0002bba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bbac  0801bbac  0002bbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000be0  20000000  0801bbb0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bde8  20000be0  0801c790  00030be0  2**3
                  ALLOC
 10 ._user_heap_stack 000063c0  2000c9c8  0801c790  0003c9c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030be0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000315a2  00000000  00000000  00030c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065c1  00000000  00000000  000621b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dd0  00000000  00000000  00068778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b88  00000000  00000000  0006a548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a05d  00000000  00000000  0006c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020175  00000000  00000000  0009612d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddd35  00000000  00000000  000b62a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00193fd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008be0  00000000  00000000  00194054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000be0 	.word	0x20000be0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b3d4 	.word	0x0801b3d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000be4 	.word	0x20000be4
 80001cc:	0801b3d4 	.word	0x0801b3d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <packetRead>:
extern double DOWN_HEIGHT_ON_SLOT 	    = 126.5f;

Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef		Gcode_Cor[1000];
uint16_t point_counter = 0;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    duty_cmd->id_command = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <packetRead+0x38>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f000 813e 	beq.w	8001238 <packetRead+0x2b0>
 8000fbc:	f000 be50 	b.w	8001c60 <packetRead+0xcd8>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

        	do {
        		Gcode_Packet_Command_TypeDef move_type 	 = message[temp_pointer] & 0x0f;
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	74bb      	strb	r3, [r7, #18]
				switch (move_type){
 8000fd2:	7cbb      	ldrb	r3, [r7, #18]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	f200 8127 	bhi.w	8001228 <packetRead+0x2a0>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <packetRead+0x58>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08001061 	.word	0x08001061
 8000fe8:	08001121 	.word	0x08001121
 8000fec:	08001121 	.word	0x08001121
				case FIRST_PACKET:{
					temp_pointer++;
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8000ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa90 	bl	8000524 <__aeabi_i2d>
 8001004:	a3b2      	add	r3, pc, #712	; (adr r3, 80012d0 <packetRead+0x348>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4ab1      	ldr	r2, [pc, #708]	; (80012d8 <packetRead+0x350>)
 8001014:	e9c2 3400 	strd	r3, r4, [r2]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	3304      	adds	r3, #4
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 800101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa7c 	bl	8000524 <__aeabi_i2d>
 800102c:	a3a8      	add	r3, pc, #672	; (adr r3, 80012d0 <packetRead+0x348>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4aa8      	ldr	r2, [pc, #672]	; (80012dc <packetRead+0x354>)
 800103c:	e9c2 3400 	strd	r3, r4, [r2]
 8001040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001042:	3304      	adds	r3, #4
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4aa4      	ldr	r2, [pc, #656]	; (80012e0 <packetRead+0x358>)
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	3304      	adds	r3, #4
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter = 0;
 8001058:	4ba2      	ldr	r3, [pc, #648]	; (80012e4 <packetRead+0x35c>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800105e:	e0e3      	b.n	8001228 <packetRead+0x2a0>
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <packetRead+0x35c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	4aa0      	ldr	r2, [pc, #640]	; (80012e8 <packetRead+0x360>)
 8001068:	460b      	mov	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	440b      	add	r3, r1
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	3314      	adds	r3, #20
 8001074:	7cba      	ldrb	r2, [r7, #18]
 8001076:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4a96      	ldr	r2, [pc, #600]	; (80012e4 <packetRead+0x35c>)
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	4611      	mov	r1, r2
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	4a94      	ldr	r2, [pc, #592]	; (80012e8 <packetRead+0x360>)
 8001098:	460b      	mov	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	440b      	add	r3, r1
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	3315      	adds	r3, #21
 80010a4:	4602      	mov	r2, r0
 80010a6:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a8d      	ldr	r2, [pc, #564]	; (80012e4 <packetRead+0x35c>)
 80010b0:	8812      	ldrh	r2, [r2, #0]
 80010b2:	4610      	mov	r0, r2
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	498c      	ldr	r1, [pc, #560]	; (80012e8 <packetRead+0x360>)
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	3304      	adds	r3, #4
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a84      	ldr	r2, [pc, #528]	; (80012e4 <packetRead+0x35c>)
 80010d2:	8812      	ldrh	r2, [r2, #0]
 80010d4:	4610      	mov	r0, r2
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4983      	ldr	r1, [pc, #524]	; (80012e8 <packetRead+0x360>)
 80010da:	4603      	mov	r3, r0
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4403      	add	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	3304      	adds	r3, #4
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	3304      	adds	r3, #4
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a7b      	ldr	r2, [pc, #492]	; (80012e4 <packetRead+0x35c>)
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	4610      	mov	r0, r2
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	497a      	ldr	r1, [pc, #488]	; (80012e8 <packetRead+0x360>)
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4403      	add	r3, r0
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3308      	adds	r3, #8
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	3304      	adds	r3, #4
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 8001112:	4b74      	ldr	r3, [pc, #464]	; (80012e4 <packetRead+0x35c>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <packetRead+0x35c>)
 800111c:	801a      	strh	r2, [r3, #0]
				}
				break;
 800111e:	e083      	b.n	8001228 <packetRead+0x2a0>
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].type_define[0] = move_type;
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <packetRead+0x35c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <packetRead+0x360>)
 8001128:	460b      	mov	r3, r1
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	440b      	add	r3, r1
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	3314      	adds	r3, #20
 8001134:	7cba      	ldrb	r2, [r7, #18]
 8001136:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].type_define[1]	= message[temp_pointer++] >> 4 & 0x0f;
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4a66      	ldr	r2, [pc, #408]	; (80012e4 <packetRead+0x35c>)
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	4a64      	ldr	r2, [pc, #400]	; (80012e8 <packetRead+0x360>)
 8001158:	460b      	mov	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	3315      	adds	r3, #21
 8001164:	4602      	mov	r2, r0
 8001166:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	4a5d      	ldr	r2, [pc, #372]	; (80012e4 <packetRead+0x35c>)
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	4610      	mov	r0, r2
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	495c      	ldr	r1, [pc, #368]	; (80012e8 <packetRead+0x360>)
 8001178:	4603      	mov	r3, r0
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4403      	add	r3, r0
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	3304      	adds	r3, #4
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <packetRead+0x35c>)
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	4610      	mov	r0, r2
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4953      	ldr	r1, [pc, #332]	; (80012e8 <packetRead+0x360>)
 800119a:	4603      	mov	r3, r0
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4403      	add	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3304      	adds	r3, #4
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	3304      	adds	r3, #4
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <packetRead+0x35c>)
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	4610      	mov	r0, r2
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	494a      	ldr	r1, [pc, #296]	; (80012e8 <packetRead+0x360>)
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4403      	add	r3, r0
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3308      	adds	r3, #8
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	3304      	adds	r3, #4
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <packetRead+0x35c>)
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	4610      	mov	r0, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4941      	ldr	r1, [pc, #260]	; (80012e8 <packetRead+0x360>)
 80011e2:	4603      	mov	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	330c      	adds	r3, #12
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	3304      	adds	r3, #4
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <packetRead+0x35c>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	4610      	mov	r0, r2
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4938      	ldr	r1, [pc, #224]	; (80012e8 <packetRead+0x360>)
 8001206:	4603      	mov	r3, r0
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4403      	add	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3310      	adds	r3, #16
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	3304      	adds	r3, #4
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
					point_counter++;
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <packetRead+0x35c>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <packetRead+0x35c>)
 8001224:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001226:	bf00      	nop
				}
        	}while(temp_pointer < length);
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	429a      	cmp	r2, r3
 800122e:	f6ff aec9 	blt.w	8000fc4 <packetRead+0x3c>
        	return CMD_GCODE;
 8001232:	231a      	movs	r3, #26
 8001234:	f000 bd15 	b.w	8001c62 <packetRead+0xcda>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            switch(command_id)
 8001240:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001244:	2b19      	cmp	r3, #25
 8001246:	f200 8509 	bhi.w	8001c5c <packetRead+0xcd4>
 800124a:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <packetRead+0x2c8>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	080012b9 	.word	0x080012b9
 8001254:	080012f1 	.word	0x080012f1
 8001258:	08001309 	.word	0x08001309
 800125c:	080013d1 	.word	0x080013d1
 8001260:	0800161d 	.word	0x0800161d
 8001264:	080013d1 	.word	0x080013d1
 8001268:	0800188f 	.word	0x0800188f
 800126c:	08001893 	.word	0x08001893
 8001270:	08001c5d 	.word	0x08001c5d
 8001274:	080018b3 	.word	0x080018b3
 8001278:	080018d1 	.word	0x080018d1
 800127c:	08001933 	.word	0x08001933
 8001280:	08001a01 	.word	0x08001a01
 8001284:	08001c2d 	.word	0x08001c2d
 8001288:	08001c3d 	.word	0x08001c3d
 800128c:	08001c5d 	.word	0x08001c5d
 8001290:	08001c5d 	.word	0x08001c5d
 8001294:	08001b69 	.word	0x08001b69
 8001298:	08001c4d 	.word	0x08001c4d
 800129c:	08001c1d 	.word	0x08001c1d
 80012a0:	0800199f 	.word	0x0800199f
 80012a4:	080019c9 	.word	0x080019c9
 80012a8:	08001c5d 	.word	0x08001c5d
 80012ac:	08001c5d 	.word	0x08001c5d
 80012b0:	08001a3b 	.word	0x08001a3b
 80012b4:	08001b1b 	.word	0x08001b1b
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f000 bcc9 	b.w	8001c62 <packetRead+0xcda>
 80012d0:	a0000000 	.word	0xa0000000
 80012d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80012d8:	20004dc0 	.word	0x20004dc0
 80012dc:	20004db8 	.word	0x20004db8
 80012e0:	20004dd8 	.word	0x20004dd8
 80012e4:	20000bfc 	.word	0x20000bfc
 80012e8:	20004ddc 	.word	0x20004ddc
 80012ec:	358637bd 	.word	0x358637bd
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001302:	2301      	movs	r3, #1
 8001304:	f000 bcad 	b.w	8001c62 <packetRead+0xcda>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d15d      	bne.n	80013ca <packetRead+0x442>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800130e:	f06f 0301 	mvn.w	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	3304      	adds	r3, #4
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 80012ec <packetRead+0x364>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 80012ec <packetRead+0x364>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	ee17 0a90 	vmov	r0, s15
 8001360:	f7ff f8f2 	bl	8000548 <__aeabi_f2d>
 8001364:	4603      	mov	r3, r0
 8001366:	460c      	mov	r4, r1
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	4ca6      	ldr	r4, [pc, #664]	; (8001610 <packetRead+0x688>)
 8001376:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	4ca4      	ldr	r4, [pc, #656]	; (8001614 <packetRead+0x68c>)
 8001382:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	4ca2      	ldr	r4, [pc, #648]	; (8001618 <packetRead+0x690>)
 800138e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	f04f 0400 	mov.w	r4, #0
 800139c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2201      	movs	r2, #1
 80013b0:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2202      	movs	r2, #2
 80013b6:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f000 bc4c 	b.w	8001c62 <packetRead+0xcda>
                        return CMD_ERROR;
 80013ca:	2316      	movs	r3, #22
 80013cc:	f000 bc49 	b.w	8001c62 <packetRead+0xcda>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b1d      	cmp	r3, #29
 80013d4:	f040 8107 	bne.w	80015e6 <packetRead+0x65e>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 80013d8:	f06f 0301 	mvn.w	r3, #1
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	3304      	adds	r3, #4
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f899 	bl	8000524 <__aeabi_i2d>
 80013f2:	a385      	add	r3, pc, #532	; (adr r3, 8001608 <packetRead+0x680>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f8fe 	bl	80005f8 <__aeabi_dmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	3304      	adds	r3, #4
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f885 	bl	8000524 <__aeabi_i2d>
 800141a:	a37b      	add	r3, pc, #492	; (adr r3, 8001608 <packetRead+0x680>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8ea 	bl	80005f8 <__aeabi_dmul>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	3304      	adds	r3, #4
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f871 	bl	8000524 <__aeabi_i2d>
 8001442:	a371      	add	r3, pc, #452	; (adr r3, 8001608 <packetRead+0x680>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f8d6 	bl	80005f8 <__aeabi_dmul>
 800144c:	4603      	mov	r3, r0
 800144e:	460c      	mov	r4, r1
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	3304      	adds	r3, #4
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f85d 	bl	8000524 <__aeabi_i2d>
 800146a:	a367      	add	r3, pc, #412	; (adr r3, 8001608 <packetRead+0x680>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8c2 	bl	80005f8 <__aeabi_dmul>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	3304      	adds	r3, #4
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f849 	bl	8000524 <__aeabi_i2d>
 8001492:	a35d      	add	r3, pc, #372	; (adr r3, 8001608 <packetRead+0x680>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f8ae 	bl	80005f8 <__aeabi_dmul>
 800149c:	4603      	mov	r3, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	3304      	adds	r3, #4
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 80014b6:	7cfb      	ldrb	r3, [r7, #19]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d117      	bne.n	80014ec <packetRead+0x564>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	3301      	adds	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f827 	bl	8000524 <__aeabi_i2d>
 80014d6:	a34c      	add	r3, pc, #304	; (adr r3, 8001608 <packetRead+0x680>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f88c 	bl	80005f8 <__aeabi_dmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 80014ea:	e052      	b.n	8001592 <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d117      	bne.n	8001522 <packetRead+0x59a>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	3301      	adds	r3, #1
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f80c 	bl	8000524 <__aeabi_i2d>
 800150c:	a33e      	add	r3, pc, #248	; (adr r3, 8001608 <packetRead+0x680>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f871 	bl	80005f8 <__aeabi_dmul>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001520:	e037      	b.n	8001592 <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001522:	7cfb      	ldrb	r3, [r7, #19]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d117      	bne.n	8001558 <packetRead+0x5d0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2203      	movs	r2, #3
 800152c:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	3301      	adds	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	a331      	add	r3, pc, #196	; (adr r3, 8001608 <packetRead+0x680>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f856 	bl	80005f8 <__aeabi_dmul>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001556:	e01c      	b.n	8001592 <packetRead+0x60a>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001558:	7cfb      	ldrb	r3, [r7, #19]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d117      	bne.n	800158e <packetRead+0x606>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2202      	movs	r2, #2
 8001562:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	3301      	adds	r3, #1
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffd6 	bl	8000524 <__aeabi_i2d>
 8001578:	a323      	add	r3, pc, #140	; (adr r3, 8001608 <packetRead+0x680>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f83b 	bl	80005f8 <__aeabi_dmul>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 800158c:	e001      	b.n	8001592 <packetRead+0x60a>
						}else{
							return CMD_ERROR;
 800158e:	2316      	movs	r3, #22
 8001590:	e367      	b.n	8001c62 <packetRead+0xcda>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	3304      	adds	r3, #4
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	3301      	adds	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 80015b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d106      	bne.n	80015cc <packetRead+0x644>
							duty_cmd->path_type = DUTY_PATH_LINE;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	735a      	strb	r2, [r3, #13]
 80015ca:	e00e      	b.n	80015ea <packetRead+0x662>
						}else if(command_id == CMD_MOVE_JOINT){
 80015cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d106      	bne.n	80015e2 <packetRead+0x65a>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	735a      	strb	r2, [r3, #13]
 80015e0:	e003      	b.n	80015ea <packetRead+0x662>
						}else{
							return CMD_ERROR;
 80015e2:	2316      	movs	r3, #22
 80015e4:	e33d      	b.n	8001c62 <packetRead+0xcda>
						}

					}else{
						return CMD_ERROR;
 80015e6:	2316      	movs	r3, #22
 80015e8:	e33b      	b.n	8001c62 <packetRead+0xcda>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2202      	movs	r2, #2
 80015ee:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
					return command_id;
 80015fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001600:	e32f      	b.n	8001c62 <packetRead+0xcda>
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	a0000000 	.word	0xa0000000
 800160c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001610:	406f4000 	.word	0x406f4000
 8001614:	c0690000 	.word	0xc0690000
 8001618:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b22      	cmp	r3, #34	; 0x22
 8001620:	f040 8133 	bne.w	800188a <packetRead+0x902>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001624:	f06f 0301 	mvn.w	r3, #1
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	3304      	adds	r3, #4
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff73 	bl	8000524 <__aeabi_i2d>
 800163e:	f20f 5310 	addw	r3, pc, #1296	; 0x510
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4603      	mov	r3, r0
 800164c:	460c      	mov	r4, r1
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	3304      	adds	r3, #4
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	3304      	adds	r3, #4
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff49 	bl	8000524 <__aeabi_i2d>
 8001692:	f20f 43bc 	addw	r3, pc, #1212	; 0x4bc
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffad 	bl	80005f8 <__aeabi_dmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	3304      	adds	r3, #4
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff34 	bl	8000524 <__aeabi_i2d>
 80016bc:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff98 	bl	80005f8 <__aeabi_dmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	460c      	mov	r4, r1
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	3304      	adds	r3, #4
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_i2d>
 80016e6:	f20f 4368 	addw	r3, pc, #1128	; 0x468
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff83 	bl	80005f8 <__aeabi_dmul>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	3304      	adds	r3, #4
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff0a 	bl	8000524 <__aeabi_i2d>
 8001710:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff6e 	bl	80005f8 <__aeabi_dmul>
 800171c:	4603      	mov	r3, r0
 800171e:	460c      	mov	r4, r1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
                		arc_type = message[temp_pointer+=4];
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	3304      	adds	r3, #4
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	757b      	strb	r3, [r7, #21]
                		if(arc_type == ARC_AW_TYPE){
 8001736:	7d7b      	ldrb	r3, [r7, #21]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d103      	bne.n	8001744 <packetRead+0x7bc>
                			duty_cmd->arc_dir = 1;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	e009      	b.n	8001758 <packetRead+0x7d0>
                		}else if(arc_type == ARC_CW_TYPE){
 8001744:	7d7b      	ldrb	r3, [r7, #21]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d104      	bne.n	8001754 <packetRead+0x7cc>
                			duty_cmd->arc_dir = -1;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	e001      	b.n	8001758 <packetRead+0x7d0>
                		}else{
                			return CMD_ERROR;
 8001754:	2316      	movs	r3, #22
 8001756:	e284      	b.n	8001c62 <packetRead+0xcda>
                		}
                		mode_init = message[temp_pointer+=1];
 8001758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175a:	3301      	adds	r3, #1
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	753b      	strb	r3, [r7, #20]
						if(mode_init == DUTY_MODE_INIT_QVA){
 8001768:	7d3b      	ldrb	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d117      	bne.n	800179e <packetRead+0x816>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	3301      	adds	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fece 	bl	8000524 <__aeabi_i2d>
 8001788:	a3f1      	add	r3, pc, #964	; (adr r3, 8001b50 <packetRead+0xbc8>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff33 	bl	80005f8 <__aeabi_dmul>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 800179c:	e052      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 800179e:	7d3b      	ldrb	r3, [r7, #20]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d117      	bne.n	80017d4 <packetRead+0x84c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	3301      	adds	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe feb3 	bl	8000524 <__aeabi_i2d>
 80017be:	a3e4      	add	r3, pc, #912	; (adr r3, 8001b50 <packetRead+0xbc8>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ff18 	bl	80005f8 <__aeabi_dmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80017d2:	e037      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 80017d4:	7d3b      	ldrb	r3, [r7, #20]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d117      	bne.n	800180a <packetRead+0x882>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2203      	movs	r2, #3
 80017de:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	3301      	adds	r3, #1
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe98 	bl	8000524 <__aeabi_i2d>
 80017f4:	a3d6      	add	r3, pc, #856	; (adr r3, 8001b50 <packetRead+0xbc8>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001808:	e01c      	b.n	8001844 <packetRead+0x8bc>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 800180a:	7d3b      	ldrb	r3, [r7, #20]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d117      	bne.n	8001840 <packetRead+0x8b8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2202      	movs	r2, #2
 8001814:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	3301      	adds	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe7d 	bl	8000524 <__aeabi_i2d>
 800182a:	a3c9      	add	r3, pc, #804	; (adr r3, 8001b50 <packetRead+0xbc8>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe fee2 	bl	80005f8 <__aeabi_dmul>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
 800183e:	e001      	b.n	8001844 <packetRead+0x8bc>
						}else{
							return CMD_ERROR;
 8001840:	2316      	movs	r3, #22
 8001842:	e20e      	b.n	8001c62 <packetRead+0xcda>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	3304      	adds	r3, #4
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	3301      	adds	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001886:	2304      	movs	r3, #4
 8001888:	e1eb      	b.n	8001c62 <packetRead+0xcda>
                		return CMD_ERROR;
 800188a:	2316      	movs	r3, #22
 800188c:	e1e9      	b.n	8001c62 <packetRead+0xcda>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 800188e:	2306      	movs	r3, #6
 8001890:	e1e7      	b.n	8001c62 <packetRead+0xcda>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d10a      	bne.n	80018ae <packetRead+0x926>
						temp_pointer = 2;
 8001898:	2302      	movs	r3, #2
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->arc_dir = message[temp_pointer];
 800189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 80018aa:	2307      	movs	r3, #7
 80018ac:	e1d9      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 80018ae:	2316      	movs	r3, #22
 80018b0:	e1d7      	b.n	8001c62 <packetRead+0xcda>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d109      	bne.n	80018cc <packetRead+0x944>
						temp_pointer = 2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	4ba4      	ldr	r3, [pc, #656]	; (8001b58 <packetRead+0xbd0>)
 80018c6:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 80018c8:	2309      	movs	r3, #9
 80018ca:	e1ca      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 80018cc:	2316      	movs	r3, #22
 80018ce:	e1c8      	b.n	8001c62 <packetRead+0xcda>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d12b      	bne.n	800192e <packetRead+0x9a6>
						temp_pointer = 2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
						test_value_array[0] = message[temp_pointer++];
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e0:	461a      	mov	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b25a      	sxtb	r2, r3
 80018ea:	4b9c      	ldr	r3, [pc, #624]	; (8001b5c <packetRead+0xbd4>)
 80018ec:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b25a      	sxtb	r2, r3
 80018fe:	4b97      	ldr	r3, [pc, #604]	; (8001b5c <packetRead+0xbd4>)
 8001900:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001908:	461a      	mov	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b25a      	sxtb	r2, r3
 8001912:	4b92      	ldr	r3, [pc, #584]	; (8001b5c <packetRead+0xbd4>)
 8001914:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800191c:	461a      	mov	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25a      	sxtb	r2, r3
 8001926:	4b8d      	ldr	r3, [pc, #564]	; (8001b5c <packetRead+0xbd4>)
 8001928:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 800192a:	230a      	movs	r3, #10
 800192c:	e199      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 800192e:	2316      	movs	r3, #22
 8001930:	e197      	b.n	8001c62 <packetRead+0xcda>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d130      	bne.n	800199a <packetRead+0xa12>
						uint8_t method;
						temp_pointer = 2;
 8001938:	2302      	movs	r3, #2
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 8001946:	7dbb      	ldrb	r3, [r7, #22]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <packetRead+0x9cc>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	705a      	strb	r2, [r3, #1]
 8001952:	e01d      	b.n	8001990 <packetRead+0xa08>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001954:	7dbb      	ldrb	r3, [r7, #22]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d103      	bne.n	8001962 <packetRead+0x9da>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	705a      	strb	r2, [r3, #1]
 8001960:	e016      	b.n	8001990 <packetRead+0xa08>
						} else if (SCARA_METHOD_GCODE == method) {
 8001962:	7dbb      	ldrb	r3, [r7, #22]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d103      	bne.n	8001970 <packetRead+0x9e8>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2202      	movs	r2, #2
 800196c:	705a      	strb	r2, [r3, #1]
 800196e:	e00f      	b.n	8001990 <packetRead+0xa08>
						}else if(SCARA_METHOD_TEST == method){
 8001970:	7dbb      	ldrb	r3, [r7, #22]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d103      	bne.n	800197e <packetRead+0x9f6>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2203      	movs	r2, #3
 800197a:	705a      	strb	r2, [r3, #1]
 800197c:	e008      	b.n	8001990 <packetRead+0xa08>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d103      	bne.n	800198c <packetRead+0xa04>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2204      	movs	r2, #4
 8001988:	705a      	strb	r2, [r3, #1]
 800198a:	e001      	b.n	8001990 <packetRead+0xa08>
						}else {
							return CMD_ERROR;
 800198c:	2316      	movs	r3, #22
 800198e:	e168      	b.n	8001c62 <packetRead+0xcda>
						}
						duty_cmd->change_method = TRUE;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001996:	230b      	movs	r3, #11
 8001998:	e163      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 800199a:	2316      	movs	r3, #22
 800199c:	e161      	b.n	8001c62 <packetRead+0xcda>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d10f      	bne.n	80019c4 <packetRead+0xa3c>
						int temp_pointer = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 80019c0:	2314      	movs	r3, #20
 80019c2:	e14e      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 80019c4:	2316      	movs	r3, #22
 80019c6:	e14c      	b.n	8001c62 <packetRead+0xcda>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d116      	bne.n	80019fc <packetRead+0xa74>
						int temp_pointer = 2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dd02      	ble.n	80019e8 <packetRead+0xa60>
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	2b0e      	cmp	r3, #14
 80019e6:	dd01      	ble.n	80019ec <packetRead+0xa64>
							return CMD_ERROR;
 80019e8:	2316      	movs	r3, #22
 80019ea:	e13a      	b.n	8001c62 <packetRead+0xcda>
						}
						duty_cmd->key_speed = speed;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6a3a      	ldr	r2, [r7, #32]
 80019f0:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 80019f2:	4a5b      	ldr	r2, [pc, #364]	; (8001b60 <packetRead+0xbd8>)
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 80019f8:	2315      	movs	r3, #21
 80019fa:	e132      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 80019fc:	2316      	movs	r3, #22
 80019fe:	e130      	b.n	8001c62 <packetRead+0xcda>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d117      	bne.n	8001a36 <packetRead+0xaae>
						int temp_pointer = 2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d901      	bls.n	8001a1e <packetRead+0xa96>
							return CMD_ERROR;
 8001a1a:	2316      	movs	r3, #22
 8001a1c:	e121      	b.n	8001c62 <packetRead+0xcda>
						}
						duty_cmd->test_key = test_key;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	7dfa      	ldrb	r2, [r7, #23]
 8001a22:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001a32:	230c      	movs	r3, #12
 8001a34:	e115      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 8001a36:	2316      	movs	r3, #22
 8001a38:	e113      	b.n	8001c62 <packetRead+0xcda>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d16a      	bne.n	8001b16 <packetRead+0xb8e>
						temp_pointer = -2;
 8001a40:	f06f 0301 	mvn.w	r3, #1
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	3304      	adds	r3, #4
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd65 	bl	8000524 <__aeabi_i2d>
 8001a5a:	a33d      	add	r3, pc, #244	; (adr r3, 8001b50 <packetRead+0xbc8>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fdca 	bl	80005f8 <__aeabi_dmul>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	3304      	adds	r3, #4
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd51 	bl	8000524 <__aeabi_i2d>
 8001a82:	a333      	add	r3, pc, #204	; (adr r3, 8001b50 <packetRead+0xbc8>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fdb6 	bl	80005f8 <__aeabi_dmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	3304      	adds	r3, #4
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd3d 	bl	8000524 <__aeabi_i2d>
 8001aaa:	a329      	add	r3, pc, #164	; (adr r3, 8001b50 <packetRead+0xbc8>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fda2 	bl	80005f8 <__aeabi_dmul>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	460c      	mov	r4, r1
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd13 	bl	8000504 <__aeabi_ui2d>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2200      	movs	r2, #0
 8001af2:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001b12:	2318      	movs	r3, #24
 8001b14:	e0a5      	b.n	8001c62 <packetRead+0xcda>
						return CMD_ERROR;
 8001b16:	2316      	movs	r3, #22
 8001b18:	e0a3      	b.n	8001c62 <packetRead+0xcda>
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b06      	cmp	r3, #6
 8001b1e:	d114      	bne.n	8001b4a <packetRead+0xbc2>
						temp_pointer = 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fcf9 	bl	8000524 <__aeabi_i2d>
 8001b32:	a307      	add	r3, pc, #28	; (adr r3, 8001b50 <packetRead+0xbc8>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fd5e 	bl	80005f8 <__aeabi_dmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <packetRead+0xbdc>)
 8001b42:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001b46:	2319      	movs	r3, #25
 8001b48:	e08b      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 8001b4a:	2316      	movs	r3, #22
 8001b4c:	e089      	b.n	8001c62 <packetRead+0xcda>
 8001b4e:	bf00      	nop
 8001b50:	a0000000 	.word	0xa0000000
 8001b54:	3eb0c6f7 	.word	0x3eb0c6f7
 8001b58:	2000ab9c 	.word	0x2000ab9c
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000060 	.word	0x20000060
 8001b64:	20000058 	.word	0x20000058
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d154      	bne.n	8001c18 <packetRead+0xc90>
						temp_pointer = -2;
 8001b6e:	f06f 0301 	mvn.w	r3, #1
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	3304      	adds	r3, #4
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcce 	bl	8000524 <__aeabi_i2d>
 8001b88:	a339      	add	r3, pc, #228	; (adr r3, 8001c70 <packetRead+0xce8>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fd33 	bl	80005f8 <__aeabi_dmul>
 8001b92:	4603      	mov	r3, r0
 8001b94:	460c      	mov	r4, r1
 8001b96:	4a38      	ldr	r2, [pc, #224]	; (8001c78 <packetRead+0xcf0>)
 8001b98:	e9c2 3400 	strd	r3, r4, [r2]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcba 	bl	8000524 <__aeabi_i2d>
 8001bb0:	a32f      	add	r3, pc, #188	; (adr r3, 8001c70 <packetRead+0xce8>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe fd1f 	bl	80005f8 <__aeabi_dmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <packetRead+0xcf4>)
 8001bc0:	e9c2 3400 	strd	r3, r4, [r2]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fca6 	bl	8000524 <__aeabi_i2d>
 8001bd8:	a325      	add	r3, pc, #148	; (adr r3, 8001c70 <packetRead+0xce8>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fd0b 	bl	80005f8 <__aeabi_dmul>
 8001be2:	4603      	mov	r3, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <packetRead+0xcf8>)
 8001be8:	e9c2 3400 	strd	r3, r4, [r2]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	3304      	adds	r3, #4
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc92 	bl	8000524 <__aeabi_i2d>
 8001c00:	a31b      	add	r3, pc, #108	; (adr r3, 8001c70 <packetRead+0xce8>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460c      	mov	r4, r1
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <packetRead+0xcfc>)
 8001c10:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_GCODE_CONFIGURE;
 8001c14:	2311      	movs	r3, #17
 8001c16:	e024      	b.n	8001c62 <packetRead+0xcda>
					}else{
						return CMD_ERROR;
 8001c18:	2316      	movs	r3, #22
 8001c1a:	e022      	b.n	8001c62 <packetRead+0xcda>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 8001c28:	2313      	movs	r3, #19
 8001c2a:	e01a      	b.n	8001c62 <packetRead+0xcda>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 8001c38:	230d      	movs	r3, #13
 8001c3a:	e012      	b.n	8001c62 <packetRead+0xcda>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 8001c48:	230e      	movs	r3, #14
 8001c4a:	e00a      	b.n	8001c62 <packetRead+0xcda>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 8001c58:	2312      	movs	r3, #18
 8001c5a:	e002      	b.n	8001c62 <packetRead+0xcda>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001c5c:	2316      	movs	r3, #22
 8001c5e:	e000      	b.n	8001c62 <packetRead+0xcda>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001c60:	2317      	movs	r3, #23
        }
    }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3734      	adds	r7, #52	; 0x34
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd90      	pop	{r4, r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	f3af 8000 	nop.w
 8001c70:	a0000000 	.word	0xa0000000
 8001c74:	3eb0c6f7 	.word	0x3eb0c6f7
 8001c78:	20004dd0 	.word	0x20004dd0
 8001c7c:	2000aba8 	.word	0x2000aba8
 8001c80:	2000aba0 	.word	0x2000aba0
 8001c84:	20004dc8 	.word	0x20004dc8

08001c88 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001c88:	b082      	sub	sp, #8
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b0e2      	sub	sp, #392	; 0x188
 8001c8e:	af2e      	add	r7, sp, #184	; 0xb8
 8001c90:	4601      	mov	r1, r0
 8001c92:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001c96:	e880 000c 	stmia.w	r0, {r2, r3}
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b1a      	cmp	r3, #26
 8001ca2:	f200 815e 	bhi.w	8001f62 <commandReply+0x2da>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <commandReply+0x24>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d19 	.word	0x08001d19
 8001cb0:	08001d19 	.word	0x08001d19
 8001cb4:	08001d19 	.word	0x08001d19
 8001cb8:	08001d19 	.word	0x08001d19
 8001cbc:	08001d19 	.word	0x08001d19
 8001cc0:	08001d19 	.word	0x08001d19
 8001cc4:	08001d19 	.word	0x08001d19
 8001cc8:	08001d21 	.word	0x08001d21
 8001ccc:	08001d9b 	.word	0x08001d9b
 8001cd0:	08001dcf 	.word	0x08001dcf
 8001cd4:	08001e65 	.word	0x08001e65
 8001cd8:	08001e8f 	.word	0x08001e8f
 8001cdc:	08001d19 	.word	0x08001d19
 8001ce0:	08001ef1 	.word	0x08001ef1
 8001ce4:	08001ef1 	.word	0x08001ef1
 8001ce8:	08001ef1 	.word	0x08001ef1
 8001cec:	08001ef1 	.word	0x08001ef1
 8001cf0:	08001ecf 	.word	0x08001ecf
 8001cf4:	08001ef1 	.word	0x08001ef1
 8001cf8:	08001ef1 	.word	0x08001ef1
 8001cfc:	08001ef9 	.word	0x08001ef9
 8001d00:	08001f01 	.word	0x08001f01
 8001d04:	08001f41 	.word	0x08001f41
 8001d08:	08001f63 	.word	0x08001f63
 8001d0c:	08001d19 	.word	0x08001d19
 8001d10:	08001e87 	.word	0x08001e87
 8001d14:	08001e97 	.word	0x08001e97
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8001d18:	2309      	movs	r3, #9
 8001d1a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001d1e:	e130      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 8001d20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d110      	bne.n	8001d4a <commandReply+0xc2>
				scaraSetOutput(1);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f008 fd55 	bl	800a7d8 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 8001d2e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d3a:	6011      	str	r1, [r2, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d42:	4413      	add	r3, r2
 8001d44:	220d      	movs	r2, #13
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e023      	b.n	8001d92 <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 8001d4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d110      	bne.n	8001d74 <commandReply+0xec>
				scaraSetOutput(0);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f008 fd40 	bl	800a7d8 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8001d58:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d64:	6011      	str	r1, [r2, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d6c:	4413      	add	r3, r2
 8001d6e:	220e      	movs	r2, #14
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e00e      	b.n	8001d92 <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8001d74:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1c59      	adds	r1, r3, #1
 8001d7c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d80:	6011      	str	r1, [r2, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d88:	4413      	add	r3, r2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001d8e:	2307      	movs	r3, #7
 8001d90:	e0f9      	b.n	8001f86 <commandReply+0x2fe>
			}
			ret = RPD_OK;
 8001d92:	2308      	movs	r3, #8
 8001d94:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001d98:	e0f3      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001d9a:	f008 fd7f 	bl	800a89c <scaraGetMode>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 8001da4:	f008 fd92 	bl	800a8cc <scaraGetDutyState>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001dae:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <commandReply+0x13e>
 8001db6:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <commandReply+0x13e>
				ret = RPD_IDLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001dc4:	e0dd      	b.n	8001f82 <commandReply+0x2fa>
				ret = RPD_BUSY;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001dcc:	e0d9      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001dce:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <commandReply+0x30c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <commandReply+0x156>
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <commandReply+0x30c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d113      	bne.n	8001e06 <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f880 	bl	8004ee8 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 f957 	bl	80040a0 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001df2:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <commandReply+0x30c>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d11e      	bne.n	8001e38 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f008 fd3c 	bl	800a87c <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001e04:	e018      	b.n	8001e38 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <commandReply+0x30c>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d105      	bne.n	8001e1a <commandReply+0x192>
				scaraGetPosition(&position);
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	4618      	mov	r0, r3
 8001e14:	f008 fd22 	bl	800a85c <scaraGetPosition>
 8001e18:	e00e      	b.n	8001e38 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 8001e1a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1c59      	adds	r1, r3, #1
 8001e22:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e26:	6011      	str	r1, [r2, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001e2e:	4413      	add	r3, r2
 8001e30:	2210      	movs	r2, #16
 8001e32:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001e34:	2307      	movs	r3, #7
 8001e36:	e0a6      	b.n	8001f86 <commandReply+0x2fe>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8001e38:	4668      	mov	r0, sp
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	22b8      	movs	r2, #184	; 0xb8
 8001e40:	4619      	mov	r1, r3
 8001e42:	f014 f863 	bl	8015f0c <memcpy>
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	cb0c      	ldmia	r3, {r2, r3}
 8001e4c:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8001e50:	f008 fd72 	bl	800a938 <scaraPosition_packaging>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e5a:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001e62:	e08e      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 8001e64:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1c59      	adds	r1, r3, #1
 8001e6c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e70:	6011      	str	r1, [r2, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001e78:	4413      	add	r3, r2
 8001e7a:	2211      	movs	r2, #17
 8001e7c:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001e84:	e07d      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 8001e86:	2308      	movs	r3, #8
 8001e88:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001e8c:	e079      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001e8e:	2309      	movs	r3, #9
 8001e90:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001e94:	e075      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 8001e96:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <commandReply+0x310>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <commandReply+0x314>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d110      	bne.n	8001ec6 <commandReply+0x23e>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 8001ea4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	1c59      	adds	r1, r3, #1
 8001eac:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001eb0:	6011      	str	r1, [r2, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001eb8:	4413      	add	r3, r2
 8001eba:	221e      	movs	r2, #30
 8001ebc:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 8001ec4:	e05d      	b.n	8001f82 <commandReply+0x2fa>
			ret = RPD_TRANSFER;
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 8001ecc:	e059      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 8001ece:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	1c59      	adds	r1, r3, #1
 8001ed6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001eda:	6011      	str	r1, [r2, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ee2:	4413      	add	r3, r2
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 8001eee:	e048      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 8001ef0:	2309      	movs	r3, #9
 8001ef2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001ef6:	e044      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8001ef8:	2309      	movs	r3, #9
 8001efa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001efe:	e040      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 8001f00:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f0c:	6011      	str	r1, [r2, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f14:	4413      	add	r3, r2
 8001f16:	2216      	movs	r2, #22
 8001f18:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 8001f1a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001f1e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	1c59      	adds	r1, r3, #1
 8001f26:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f2a:	6011      	str	r1, [r2, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f32:	4413      	add	r3, r2
 8001f34:	b2c2      	uxtb	r2, r0
 8001f36:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001f3e:	e020      	b.n	8001f82 <commandReply+0x2fa>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8001f40:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1c59      	adds	r1, r3, #1
 8001f48:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f4c:	6011      	str	r1, [r2, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f54:	4413      	add	r3, r2
 8001f56:	2215      	movs	r2, #21
 8001f58:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001f60:	e00f      	b.n	8001f82 <commandReply+0x2fa>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8001f62:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	1c59      	adds	r1, r3, #1
 8001f6a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f6e:	6011      	str	r1, [r2, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001f76:	4413      	add	r3, r2
 8001f78:	2217      	movs	r2, #23
 8001f7a:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 8001f82:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	37d0      	adds	r7, #208	; 0xd0
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f90:	b002      	add	sp, #8
 8001f92:	4770      	bx	lr
 8001f94:	2000ab9c 	.word	0x2000ab9c
 8001f98:	20000bfc 	.word	0x20000bfc
 8001f9c:	20004dd8 	.word	0x20004dd8

08001fa0 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	617a      	str	r2, [r7, #20]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2228      	movs	r2, #40	; 0x28
 8001fc2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	617a      	str	r2, [r7, #20]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	4413      	add	r3, r2
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	617a      	str	r2, [r7, #20]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	4413      	add	r3, r2
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	617a      	str	r2, [r7, #20]
 8001fea:	461a      	mov	r2, r3
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	4413      	add	r3, r2
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	617a      	str	r2, [r7, #20]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	4413      	add	r3, r2
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00c      	beq.n	8002026 <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	6a3a      	ldr	r2, [r7, #32]
 8002010:	4413      	add	r3, r2
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f013 ff78 	bl	8015f0c <memcpy>
		out_length += detail_length;
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	4413      	add	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e007      	b.n	8002036 <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	617a      	str	r2, [r7, #20]
 800202c:	461a      	mov	r2, r3
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	4413      	add	r3, r2
 8002032:	2225      	movs	r2, #37	; 0x25
 8002034:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	617a      	str	r2, [r7, #20]
 800203c:	461a      	mov	r2, r3
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	4413      	add	r3, r2
 8002042:	227d      	movs	r2, #125	; 0x7d
 8002044:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	617a      	str	r2, [r7, #20]
 800204c:	461a      	mov	r2, r3
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	4413      	add	r3, r2
 8002052:	2229      	movs	r2, #41	; 0x29
 8002054:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	3301      	adds	r3, #1
 800205e:	3a02      	subs	r2, #2
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002064:	697b      	ldr	r3, [r7, #20]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b096      	sub	sp, #88	; 0x58
 8002074:	af02      	add	r7, sp, #8
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	f107 0008 	add.w	r0, r7, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <LOG_REPORT+0x78>)
 800208a:	213f      	movs	r1, #63	; 0x3f
 800208c:	f014 fe66 	bl	8016d5c <sniprintf>
 8002090:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8002092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d101      	bne.n	800209e <LOG_REPORT+0x2e>
		return FALSE;
 800209a:	2300      	movs	r3, #0
 800209c:	e01f      	b.n	80020de <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 800209e:	f107 0308 	add.w	r3, r7, #8
 80020a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020a4:	4619      	mov	r1, r3
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <LOG_REPORT+0x7c>)
 80020a8:	f002 fc3f 	bl	800492a <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80020ac:	4810      	ldr	r0, [pc, #64]	; (80020f0 <LOG_REPORT+0x80>)
 80020ae:	f009 ff0f 	bl	800bed0 <HAL_DMA_GetState>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d101      	bne.n	80020bc <LOG_REPORT+0x4c>
		return TRUE;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e010      	b.n	80020de <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80020bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <LOG_REPORT+0x84>)
 80020c2:	480a      	ldr	r0, [pc, #40]	; (80020ec <LOG_REPORT+0x7c>)
 80020c4:	f002 fc59 	bl	800497a <ringBuff_PopArray>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80020ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020d2:	461a      	mov	r2, r3
 80020d4:	4907      	ldr	r1, [pc, #28]	; (80020f4 <LOG_REPORT+0x84>)
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <LOG_REPORT+0x88>)
 80020d8:	f00c fc7a 	bl	800e9d0 <HAL_UART_Transmit_DMA>
	return TRUE;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3750      	adds	r7, #80	; 0x50
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	0801b3f0 	.word	0x0801b3f0
 80020ec:	20000470 	.word	0x20000470
 80020f0:	2000bc80 	.word	0x2000bc80
 80020f4:	2000abb0 	.word	0x2000abb0
 80020f8:	2000bc40 	.word	0x2000bc40

080020fc <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 2;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3b02      	subs	r3, #2
 800210c:	617b      	str	r3, [r7, #20]
	//check packet length
	if(message_buff[1] == data_length && backup_available == 0){
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3301      	adds	r3, #1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4293      	cmp	r3, r2
 800211a:	d119      	bne.n	8002150 <unPackPayload+0x54>
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <unPackPayload+0xdc>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d115      	bne.n	8002150 <unPackPayload+0x54>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b03      	cmp	r3, #3
 8002128:	dc02      	bgt.n	8002130 <unPackPayload+0x34>
			return -1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e04f      	b.n	80021d0 <unPackPayload+0xd4>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b28      	cmp	r3, #40	; 0x28
 8002136:	d002      	beq.n	800213e <unPackPayload+0x42>
			return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	e048      	b.n	80021d0 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length - RECEIVE_END_LENGTH);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1c99      	adds	r1, r3, #2
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3b02      	subs	r3, #2
 8002146:	461a      	mov	r2, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f013 fedf 	bl	8015f0c <memcpy>
 800214e:	e03d      	b.n	80021cc <unPackPayload+0xd0>
	}else if(message_buff[1] != data_length && backup_available == 0){
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3301      	adds	r3, #1
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4293      	cmp	r3, r2
 800215c:	d01b      	beq.n	8002196 <unPackPayload+0x9a>
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <unPackPayload+0xdc>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d117      	bne.n	8002196 <unPackPayload+0x9a>
		backup_available = 1;
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <unPackPayload+0xdc>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
		// check start char
		if(message_buff[0] != START_CHAR){
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b28      	cmp	r3, #40	; 0x28
 8002172:	d002      	beq.n	800217a <unPackPayload+0x7e>
			return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	e02a      	b.n	80021d0 <unPackPayload+0xd4>
		}
		memcpy(data_packet, &message_buff[2], data_length);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3302      	adds	r3, #2
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f013 fec2 	bl	8015f0c <memcpy>
		backup_length = data_length;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <unPackPayload+0xe0>)
 800218e:	701a      	strb	r2, [r3, #0]
		return - 1;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
 8002194:	e01c      	b.n	80021d0 <unPackPayload+0xd4>
	}else if(backup_available == 1){
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <unPackPayload+0xdc>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d113      	bne.n	80021c6 <unPackPayload+0xca>
		backup_available = 0;
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <unPackPayload+0xdc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <unPackPayload+0xe0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	68f9      	ldr	r1, [r7, #12]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f013 feaa 	bl	8015f0c <memcpy>
		data_length = backup_length + in_length;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <unPackPayload+0xe0>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4413      	add	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e002      	b.n	80021cc <unPackPayload+0xd0>
	}else{
		return - 1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e001      	b.n	80021d0 <unPackPayload+0xd4>
	}


	return data_length - RECEIVE_END_LENGTH;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3b02      	subs	r3, #2
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	2000acb0 	.word	0x2000acb0
 80021dc:	2000acb1 	.word	0x2000acb1

080021e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_DMA_Init+0x3c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <MX_DMA_Init+0x3c>)
 80021f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_DMA_Init+0x3c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2105      	movs	r1, #5
 8002206:	200f      	movs	r0, #15
 8002208:	f009 fb86 	bl	800b918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800220c:	200f      	movs	r0, #15
 800220e:	f009 fb9f 	bl	800b950 <HAL_NVIC_EnableIRQ>

}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800

08002220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <vApplicationGetIdleTaskMemory+0x2c>)
 8002230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <vApplicationGetIdleTaskMemory+0x30>)
 8002236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	20000c00 	.word	0x20000c00
 8002250:	20000c54 	.word	0x20000c54

08002254 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002254:	b5b0      	push	{r4, r5, r7, lr}
 8002256:	b094      	sub	sp, #80	; 0x50
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 800225a:	2300      	movs	r3, #0
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
 800225e:	2300      	movs	r3, #0
 8002260:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8002262:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002266:	4618      	mov	r0, r3
 8002268:	f010 fb8e 	bl	8012988 <osMutexCreate>
 800226c:	4602      	mov	r2, r0
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <MX_FREERTOS_Init+0x90>)
 8002270:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8002272:	2301      	movs	r3, #1
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
 8002276:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002280:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8002282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f010 fc95 	bl	8012bb8 <osMailCreate>
 800228e:	4602      	mov	r2, r0
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <MX_FREERTOS_Init+0x94>)
 8002292:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <MX_FREERTOS_Init+0x98>)
 8002296:	f107 041c 	add.w	r4, r7, #28
 800229a:	461d      	mov	r5, r3
 800229c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f010 fa7e 	bl	80127b0 <osThreadCreate>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <MX_FREERTOS_Init+0x9c>)
 80022b8:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_FREERTOS_Init+0xa0>)
 80022bc:	463c      	mov	r4, r7
 80022be:	461d      	mov	r5, r3
 80022c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 80022cc:	463b      	mov	r3, r7
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f010 fa6d 	bl	80127b0 <osThreadCreate>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <MX_FREERTOS_Init+0xa4>)
 80022da:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80022dc:	bf00      	nop
 80022de:	3750      	adds	r7, #80	; 0x50
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bdb0      	pop	{r4, r5, r7, pc}
 80022e4:	2000acb8 	.word	0x2000acb8
 80022e8:	2000acbc 	.word	0x2000acbc
 80022ec:	0801b40c 	.word	0x0801b40c
 80022f0:	2000acb4 	.word	0x2000acb4
 80022f4:	0801b438 	.word	0x0801b438
 80022f8:	2000acc0 	.word	0x2000acc0
 80022fc:	00000000 	.word	0x00000000

08002300 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002302:	f6ad 3d14 	subw	sp, sp, #2836	; 0xb14
 8002306:	af6c      	add	r7, sp, #432	; 0x1b0
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800230e:	f013 f875 	bl	80153fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002312:	2201      	movs	r2, #1
 8002314:	2110      	movs	r1, #16
 8002316:	48d0      	ldr	r0, [pc, #832]	; (8002658 <StartDefaultTask+0x358>)
 8002318:	f00a f860 	bl	800c3dc <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
  uint8_t object_head_pointer = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
  double state_time = 0;
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 800233a:	e9c2 3400 	strd	r3, r4, [r2]
  int run_point = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8002344:	f107 0320 	add.w	r3, r7, #32
 8002348:	4ac4      	ldr	r2, [pc, #784]	; (800265c <StartDefaultTask+0x35c>)
 800234a:	4618      	mov	r0, r3
 800234c:	4611      	mov	r1, r2
 800234e:	2390      	movs	r3, #144	; 0x90
 8002350:	461a      	mov	r2, r3
 8002352:	f013 fddb 	bl	8015f0c <memcpy>
  		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f} ,
		{203.859f, -101.616f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002356:	21e6      	movs	r1, #230	; 0xe6
 8002358:	48c1      	ldr	r0, [pc, #772]	; (8002660 <StartDefaultTask+0x360>)
 800235a:	f7ff fe89 	bl	8002070 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 800235e:	f008 faa9 	bl	800a8b4 <scaraGetMethod>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
  current_mode	 = scaraGetMode();
 8002368:	f008 fa98 	bl	800a89c <scaraGetMode>
 800236c:	4603      	mov	r3, r0
 800236e:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
  current_duty_state	 = scaraGetDutyState();
 8002372:	f008 faab 	bl	800a8cc <scaraGetDutyState>
 8002376:	4603      	mov	r3, r0
 8002378:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955

  // Start up robot
  scaraStartup();
 800237c:	f003 facc 	bl	8005918 <scaraStartup>
  osDelay(10);
 8002380:	200a      	movs	r0, #10
 8002382:	f010 fa61 	bl	8012848 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8002386:	4ab7      	ldr	r2, [pc, #732]	; (8002664 <StartDefaultTask+0x364>)
 8002388:	a4ab      	add	r4, pc, #684	; (adr r4, 8002638 <StartDefaultTask+0x338>)
 800238a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800238e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8002392:	4ab4      	ldr	r2, [pc, #720]	; (8002664 <StartDefaultTask+0x364>)
 8002394:	a4aa      	add	r4, pc, #680	; (adr r4, 8002640 <StartDefaultTask+0x340>)
 8002396:	e9d4 3400 	ldrd	r3, r4, [r4]
 800239a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 800239e:	4ab1      	ldr	r2, [pc, #708]	; (8002664 <StartDefaultTask+0x364>)
 80023a0:	a4a9      	add	r4, pc, #676	; (adr r4, 8002648 <StartDefaultTask+0x348>)
 80023a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023a6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 80023aa:	4aae      	ldr	r2, [pc, #696]	; (8002664 <StartDefaultTask+0x364>)
 80023ac:	a4a8      	add	r4, pc, #672	; (adr r4, 8002650 <StartDefaultTask+0x350>)
 80023ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023b2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 80023b6:	4aab      	ldr	r2, [pc, #684]	; (8002664 <StartDefaultTask+0x364>)
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 80023c4:	48a7      	ldr	r0, [pc, #668]	; (8002664 <StartDefaultTask+0x364>)
 80023c6:	f001 fe6b 	bl	80040a0 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 80023ca:	48a7      	ldr	r0, [pc, #668]	; (8002668 <StartDefaultTask+0x368>)
 80023cc:	f00b fedd 	bl	800e18a <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	2101      	movs	r1, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f010 fa88 	bl	80128f0 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	  respond_packed_lenght = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
	  infor_lenght			= 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	  infor_packed_lenght	= 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
	  task_usb_lenght		= 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
	  usb_lenght			= 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
	  total_respond_length  = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
	  detail_ptr 			= 0;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002410:	4a96      	ldr	r2, [pc, #600]	; (800266c <StartDefaultTask+0x36c>)
 8002412:	4b97      	ldr	r3, [pc, #604]	; (8002670 <StartDefaultTask+0x370>)
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	23c0      	movs	r3, #192	; 0xc0
 800241a:	461a      	mov	r2, r3
 800241c:	f013 fd76 	bl	8015f0c <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002420:	4a93      	ldr	r2, [pc, #588]	; (8002670 <StartDefaultTask+0x370>)
 8002422:	4b90      	ldr	r3, [pc, #576]	; (8002664 <StartDefaultTask+0x364>)
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	23c0      	movs	r3, #192	; 0xc0
 800242a:	461a      	mov	r2, r3
 800242c:	f013 fd6e 	bl	8015f0c <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002430:	4b90      	ldr	r3, [pc, #576]	; (8002674 <StartDefaultTask+0x374>)
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 8002438:	2200      	movs	r2, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f010 fc68 	bl	8012d10 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002440:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8002444:	2b20      	cmp	r3, #32
 8002446:	d116      	bne.n	8002476 <StartDefaultTask+0x176>
		   dataMail = ret_mail.value.p;
 8002448:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	; 0x8f0
 800244c:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002450:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002454:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002458:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800245c:	4618      	mov	r0, r3
 800245e:	f013 fd55 	bl	8015f0c <memcpy>
		   isNewDuty = TRUE;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002468:	4b82      	ldr	r3, [pc, #520]	; (8002674 <StartDefaultTask+0x374>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 8002470:	4618      	mov	r0, r3
 8002472:	f010 fcc1 	bl	8012df8 <osMailFree>
	  }
	  if(isNewDuty) {
 8002476:	f897 395f 	ldrb.w	r3, [r7, #2399]	; 0x95f
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 838a 	beq.w	8002b94 <StartDefaultTask+0x894>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8002480:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	f040 80f6 	bne.w	8002678 <StartDefaultTask+0x378>
			  //free(Object);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 800248c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002490:	785b      	ldrb	r3, [r3, #1]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d122      	bne.n	80024dc <StartDefaultTask+0x1dc>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 80024a2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80024a6:	2218      	movs	r2, #24
 80024a8:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80024aa:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80024b4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80024b8:	4413      	add	r3, r2
 80024ba:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2301      	movs	r3, #1
 80024c2:	2008      	movs	r0, #8
 80024c4:	f7ff fd6c 	bl	8001fa0 <commandRespond1>
 80024c8:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 80024cc:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80024d0:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80024d4:	4413      	add	r3, r2
 80024d6:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80024da:	e358      	b.n	8002b8e <StartDefaultTask+0x88e>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 80024dc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d122      	bne.n	800252c <StartDefaultTask+0x22c>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 80024f2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80024f6:	2219      	movs	r2, #25
 80024f8:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80024fa:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002504:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002508:	4413      	add	r3, r2
 800250a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	2008      	movs	r0, #8
 8002514:	f7ff fd44 	bl	8001fa0 <commandRespond1>
 8002518:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 800251c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002520:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002524:	4413      	add	r3, r2
 8002526:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 800252a:	e330      	b.n	8002b8e <StartDefaultTask+0x88e>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 800252c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d122      	bne.n	800257c <StartDefaultTask+0x27c>
//				  }
//				  testing_array = (double*)malloc(2*sizeof(double));
//				  if(testing_array == NULL){
//					  int t = 2;
//				  }
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  current_method = SCARA_METHOD_GCODE;
 800253c:	2302      	movs	r3, #2
 800253e:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 8002542:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002546:	221a      	movs	r2, #26
 8002548:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800254a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002554:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002558:	4413      	add	r3, r2
 800255a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	2008      	movs	r0, #8
 8002564:	f7ff fd1c 	bl	8001fa0 <commandRespond1>
 8002568:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				total_respond_length += respond_lenght;
 800256c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002570:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002574:	4413      	add	r3, r2
 8002576:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 800257a:	e308      	b.n	8002b8e <StartDefaultTask+0x88e>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 800257c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d12f      	bne.n	80025e6 <StartDefaultTask+0x2e6>
				  test_value[0] = 0;
 8002586:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 800258e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002592:	2200      	movs	r2, #0
 8002594:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002596:	f207 7324 	addw	r3, r7, #1828	; 0x724
 800259a:	2200      	movs	r2, #0
 800259c:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 800259e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80025a2:	2200      	movs	r2, #0
 80025a4:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  detail_array[0] = TEST_METHOD;
 80025ac:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80025b0:	221b      	movs	r2, #27
 80025b2:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80025b4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80025be:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80025c2:	4413      	add	r3, r2
 80025c4:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2301      	movs	r3, #1
 80025cc:	2008      	movs	r0, #8
 80025ce:	f7ff fce7 	bl	8001fa0 <commandRespond1>
 80025d2:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 80025d6:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80025da:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80025de:	4413      	add	r3, r2
 80025e0:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80025e4:	e2d3      	b.n	8002b8e <StartDefaultTask+0x88e>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 80025e6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	f040 82ce 	bne.w	8002b8e <StartDefaultTask+0x88e>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 80025f2:	2304      	movs	r3, #4
 80025f4:	f887 3957 	strb.w	r3, [r7, #2391]	; 0x957
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 80025fe:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002602:	221c      	movs	r2, #28
 8002604:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002606:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002610:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002614:	4413      	add	r3, r2
 8002616:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2301      	movs	r3, #1
 800261e:	2008      	movs	r0, #8
 8002620:	f7ff fcbe 	bl	8001fa0 <commandRespond1>
 8002624:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8002628:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800262c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002630:	4413      	add	r3, r2
 8002632:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002636:	e2aa      	b.n	8002b8e <StartDefaultTask+0x88e>
 8002638:	20000000 	.word	0x20000000
 800263c:	bff7b904 	.word	0xbff7b904
 8002640:	80000000 	.word	0x80000000
 8002644:	4002d893 	.word	0x4002d893
 8002648:	90c91080 	.word	0x90c91080
 800264c:	3fa1eb63 	.word	0x3fa1eb63
 8002650:	cec41dd2 	.word	0xcec41dd2
 8002654:	4007ba14 	.word	0x4007ba14
 8002658:	40020400 	.word	0x40020400
 800265c:	0801b538 	.word	0x0801b538
 8002660:	0801b454 	.word	0x0801b454
 8002664:	2000bac0 	.word	0x2000bac0
 8002668:	2000bc00 	.word	0x2000bc00
 800266c:	2000b7c0 	.word	0x2000b7c0
 8002670:	2000b940 	.word	0x2000b940
 8002674:	2000acbc 	.word	0x2000acbc
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002678:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	f897 2957 	ldrb.w	r2, [r7, #2391]	; 0x957
 8002682:	429a      	cmp	r2, r3
 8002684:	f040 8263 	bne.w	8002b4e <StartDefaultTask+0x84e>
				  	  switch( duty_cmd.robot_method) {
 8002688:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	2b04      	cmp	r3, #4
 8002690:	f200 8257 	bhi.w	8002b42 <StartDefaultTask+0x842>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <StartDefaultTask+0x39c>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026b1 	.word	0x080026b1
 80026a0:	08002707 	.word	0x08002707
 80026a4:	08002a1d 	.word	0x08002a1d
 80026a8:	080028c3 	.word	0x080028c3
 80026ac:	08002aa9 	.word	0x08002aa9
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 80026b0:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10d      	bne.n	80026d4 <StartDefaultTask+0x3d4>
				  			  current_key = duty_cmd.keyboard;
 80026b8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026bc:	78db      	ldrb	r3, [r3, #3]
 80026be:	f887 3952 	strb.w	r3, [r7, #2386]	; 0x952
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
				  			  current_key_speed = duty_cmd.key_speed;
 80026c8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 80026d2:	e259      	b.n	8002b88 <StartDefaultTask+0x888>
				  		  } else if (current_key == duty_cmd.keyboard
 80026d4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026d8:	78db      	ldrb	r3, [r3, #3]
 80026da:	f897 2952 	ldrb.w	r2, [r7, #2386]	; 0x952
 80026de:	429a      	cmp	r2, r3
 80026e0:	f040 8252 	bne.w	8002b88 <StartDefaultTask+0x888>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 80026e4:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	f040 824d 	bne.w	8002b88 <StartDefaultTask+0x888>
									  && current_key_speed == duty_cmd.key_speed) {
 80026ee:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f8d7 294c 	ldr.w	r2, [r7, #2380]	; 0x94c
 80026f8:	429a      	cmp	r2, r3
 80026fa:	f040 8245 	bne.w	8002b88 <StartDefaultTask+0x888>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
				  	  break;
 8002704:	e240      	b.n	8002b88 <StartDefaultTask+0x888>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002706:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800270a:	789b      	ldrb	r3, [r3, #2]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d029      	beq.n	8002764 <StartDefaultTask+0x464>
 8002710:	2b02      	cmp	r3, #2
 8002712:	d074      	beq.n	80027fe <StartDefaultTask+0x4fe>
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 80cd 	bne.w	80028b4 <StartDefaultTask+0x5b4>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 8002720:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002724:	2220      	movs	r2, #32
 8002726:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002728:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002732:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002736:	4413      	add	r3, r2
 8002738:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	2008      	movs	r0, #8
 8002742:	f7ff fc2d 	bl	8001fa0 <commandRespond1>
 8002746:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 800274a:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800274e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002752:	4413      	add	r3, r2
 8002754:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002758:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800275c:	48cb      	ldr	r0, [pc, #812]	; (8002a8c <StartDefaultTask+0x78c>)
 800275e:	f7ff fc87 	bl	8002070 <LOG_REPORT>
							  }
							  break;
 8002762:	e0ad      	b.n	80028c0 <StartDefaultTask+0x5c0>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002764:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002768:	2b02      	cmp	r3, #2
 800276a:	d126      	bne.n	80027ba <StartDefaultTask+0x4ba>
 800276c:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002770:	2b00      	cmp	r3, #0
 8002772:	d122      	bne.n	80027ba <StartDefaultTask+0x4ba>
									  current_mode = SCARA_MODE_SCAN;
 8002774:	2301      	movs	r3, #1
 8002776:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 8002780:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002784:	2221      	movs	r2, #33	; 0x21
 8002786:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002788:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002792:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002796:	4413      	add	r3, r2
 8002798:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2301      	movs	r3, #1
 80027a0:	2008      	movs	r0, #8
 80027a2:	f7ff fbfd 	bl	8001fa0 <commandRespond1>
 80027a6:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 80027aa:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80027ae:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80027b2:	4413      	add	r3, r2
 80027b4:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 80027b8:	e082      	b.n	80028c0 <StartDefaultTask+0x5c0>
									detail_array[0] = BUSY;
 80027ba:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80027be:	2222      	movs	r2, #34	; 0x22
 80027c0:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027c2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80027cc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80027d0:	4413      	add	r3, r2
 80027d2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	2007      	movs	r0, #7
 80027dc:	f7ff fbe0 	bl	8001fa0 <commandRespond1>
 80027e0:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 80027e4:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80027e8:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80027ec:	4413      	add	r3, r2
 80027ee:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80027f2:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80027f6:	48a6      	ldr	r0, [pc, #664]	; (8002a90 <StartDefaultTask+0x790>)
 80027f8:	f7ff fc3a 	bl	8002070 <LOG_REPORT>
							  break;
 80027fc:	e060      	b.n	80028c0 <StartDefaultTask+0x5c0>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 80027fe:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002802:	2b02      	cmp	r3, #2
 8002804:	d133      	bne.n	800286e <StartDefaultTask+0x56e>
 8002806:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 800280a:	2b00      	cmp	r3, #0
 800280c:	d12f      	bne.n	800286e <StartDefaultTask+0x56e>
									  scaraSetScanFlag();
 800280e:	f007 ffd7 	bl	800a7c0 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002812:	f008 f867 	bl	800a8e4 <scaraIsScanLimit>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <StartDefaultTask+0x52a>
										  current_mode	 = SCARA_MODE_DUTY;
 800281c:	2302      	movs	r3, #2
 800281e:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
									  if (scaraIsScanLimit()) {
 8002828:	e043      	b.n	80028b2 <StartDefaultTask+0x5b2>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 800282a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800282e:	2223      	movs	r2, #35	; 0x23
 8002830:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002832:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800283c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002840:	4413      	add	r3, r2
 8002842:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2301      	movs	r3, #1
 800284a:	2007      	movs	r0, #7
 800284c:	f7ff fba8 	bl	8001fa0 <commandRespond1>
 8002850:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
										total_respond_length += respond_lenght;
 8002854:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002858:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800285c:	4413      	add	r3, r2
 800285e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002862:	f240 11ad 	movw	r1, #429	; 0x1ad
 8002866:	488b      	ldr	r0, [pc, #556]	; (8002a94 <StartDefaultTask+0x794>)
 8002868:	f7ff fc02 	bl	8002070 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 800286c:	e021      	b.n	80028b2 <StartDefaultTask+0x5b2>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 800286e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002872:	2222      	movs	r2, #34	; 0x22
 8002874:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002876:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800287a:	6899      	ldr	r1, [r3, #8]
 800287c:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002880:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002884:	4413      	add	r3, r2
 8002886:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2301      	movs	r3, #1
 800288e:	2007      	movs	r0, #7
 8002890:	f7ff fb86 	bl	8001fa0 <commandRespond1>
 8002894:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
									total_respond_length += respond_lenght;
 8002898:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800289c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80028a0:	4413      	add	r3, r2
 80028a2:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80028a6:	f240 11b7 	movw	r1, #439	; 0x1b7
 80028aa:	487b      	ldr	r0, [pc, #492]	; (8002a98 <StartDefaultTask+0x798>)
 80028ac:	f7ff fbe0 	bl	8002070 <LOG_REPORT>
								  }
							  }
							  break;
 80028b0:	e006      	b.n	80028c0 <StartDefaultTask+0x5c0>
 80028b2:	e005      	b.n	80028c0 <StartDefaultTask+0x5c0>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80028b4:	f240 11bd 	movw	r1, #445	; 0x1bd
 80028b8:	4878      	ldr	r0, [pc, #480]	; (8002a9c <StartDefaultTask+0x79c>)
 80028ba:	f7ff fbd9 	bl	8002070 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 80028be:	e166      	b.n	8002b8e <StartDefaultTask+0x88e>
 80028c0:	e165      	b.n	8002b8e <StartDefaultTask+0x88e>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 80028c2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 80028ca:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80028ce:	2200      	movs	r2, #0
 80028d0:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 80028d2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80028d6:	2200      	movs	r2, #0
 80028d8:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 80028da:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80028de:	2200      	movs	r2, #0
 80028e0:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 80028e2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80028e6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80028ea:	2b07      	cmp	r3, #7
 80028ec:	f200 8094 	bhi.w	8002a18 <StartDefaultTask+0x718>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <StartDefaultTask+0x5f8>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002919 	.word	0x08002919
 80028fc:	08002935 	.word	0x08002935
 8002900:	08002959 	.word	0x08002959
 8002904:	08002975 	.word	0x08002975
 8002908:	08002999 	.word	0x08002999
 800290c:	080029b5 	.word	0x080029b5
 8002910:	080029d9 	.word	0x080029d9
 8002914:	080029f5 	.word	0x080029f5
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002918:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800291c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <StartDefaultTask+0x7a0>)
 8002928:	f993 1000 	ldrsb.w	r1, [r3]
 800292c:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002930:	5499      	strb	r1, [r3, r2]
						  break;
 8002932:	e072      	b.n	8002a1a <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002934:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <StartDefaultTask+0x7a0>)
 8002936:	f993 3000 	ldrsb.w	r3, [r3]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	425b      	negs	r3, r3
 800293e:	b2d9      	uxtb	r1, r3
 8002940:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002944:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	b249      	sxtb	r1, r1
 8002950:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002954:	5499      	strb	r1, [r3, r2]
						  break;
 8002956:	e060      	b.n	8002a1a <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002958:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800295c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <StartDefaultTask+0x7a0>)
 8002968:	f993 1001 	ldrsb.w	r1, [r3, #1]
 800296c:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002970:	5499      	strb	r1, [r3, r2]
						  break;
 8002972:	e052      	b.n	8002a1a <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002974:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <StartDefaultTask+0x7a0>)
 8002976:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	425b      	negs	r3, r3
 800297e:	b2d9      	uxtb	r1, r3
 8002980:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002984:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	b249      	sxtb	r1, r1
 8002990:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002994:	5499      	strb	r1, [r3, r2]
						  break;
 8002996:	e040      	b.n	8002a1a <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002998:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800299c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <StartDefaultTask+0x7a0>)
 80029a8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80029ac:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029b0:	5499      	strb	r1, [r3, r2]
						  break;
 80029b2:	e032      	b.n	8002a1a <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <StartDefaultTask+0x7a0>)
 80029b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	425b      	negs	r3, r3
 80029be:	b2d9      	uxtb	r1, r3
 80029c0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80029c4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	b249      	sxtb	r1, r1
 80029d0:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029d4:	5499      	strb	r1, [r3, r2]
						  break;
 80029d6:	e020      	b.n	8002a1a <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 80029d8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80029dc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <StartDefaultTask+0x7a0>)
 80029e8:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80029ec:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80029f0:	5499      	strb	r1, [r3, r2]
						  break;
 80029f2:	e012      	b.n	8002a1a <StartDefaultTask+0x71a>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <StartDefaultTask+0x7a0>)
 80029f6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	425b      	negs	r3, r3
 80029fe:	b2d9      	uxtb	r1, r3
 8002a00:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a04:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	b249      	sxtb	r1, r1
 8002a10:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8002a14:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002a16:	e000      	b.n	8002a1a <StartDefaultTask+0x71a>
						  default:
							  break;
 8002a18:	bf00      	nop
						  }
					  }
					  break;
 8002a1a:	e0b8      	b.n	8002b8e <StartDefaultTask+0x88e>
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8002a1c:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <StartDefaultTask+0x73c>
 8002a24:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b13      	cmp	r3, #19
 8002a2c:	d106      	bne.n	8002a3c <StartDefaultTask+0x73c>
				  			  run_point = 1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002a34:	2304      	movs	r3, #4
 8002a36:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
 8002a3a:	e025      	b.n	8002a88 <StartDefaultTask+0x788>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8002a3c:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10e      	bne.n	8002a62 <StartDefaultTask+0x762>
 8002a44:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b12      	cmp	r3, #18
 8002a4c:	d109      	bne.n	8002a62 <StartDefaultTask+0x762>
				  			  lowlayer_readTruePosition(&positionCurrent);
 8002a4e:	4815      	ldr	r0, [pc, #84]	; (8002aa4 <StartDefaultTask+0x7a4>)
 8002a50:	f002 fa4a 	bl	8004ee8 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8002a54:	4813      	ldr	r0, [pc, #76]	; (8002aa4 <StartDefaultTask+0x7a4>)
 8002a56:	f001 fb23 	bl	80040a0 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
 8002a60:	e012      	b.n	8002a88 <StartDefaultTask+0x788>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 8002a62:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b0d      	cmp	r3, #13
 8002a6a:	d103      	bne.n	8002a74 <StartDefaultTask+0x774>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 8002a72:	e08b      	b.n	8002b8c <StartDefaultTask+0x88c>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 8002a74:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b0e      	cmp	r3, #14
 8002a7c:	f040 8086 	bne.w	8002b8c <StartDefaultTask+0x88c>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  	  break;
 8002a86:	e081      	b.n	8002b8c <StartDefaultTask+0x88c>
 8002a88:	e080      	b.n	8002b8c <StartDefaultTask+0x88c>
 8002a8a:	bf00      	nop
 8002a8c:	0801b474 	.word	0x0801b474
 8002a90:	0801b484 	.word	0x0801b484
 8002a94:	0801b494 	.word	0x0801b494
 8002a98:	0801b4a8 	.word	0x0801b4a8
 8002a9c:	0801b4b8 	.word	0x0801b4b8
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	2000b940 	.word	0x2000b940
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002aa8:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8002aac:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002ab0:	21c8      	movs	r1, #200	; 0xc8
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	18d0      	adds	r0, r2, r3
 8002ab8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002abc:	3328      	adds	r3, #40	; 0x28
 8002abe:	22c0      	movs	r2, #192	; 0xc0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f013 fa23 	bl	8015f0c <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8002ac6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002aca:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002ace:	f897 593d 	ldrb.w	r5, [r7, #2365]	; 0x93d
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	f7fe f867 	bl	8000ba8 <__aeabi_d2uiz>
 8002ada:	4603      	mov	r3, r0
 8002adc:	b299      	uxth	r1, r3
 8002ade:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002ae2:	23c8      	movs	r3, #200	; 0xc8
 8002ae4:	fb03 f305 	mul.w	r3, r3, r5
 8002ae8:	4413      	add	r3, r2
 8002aea:	33c0      	adds	r3, #192	; 0xc0
 8002aec:	460a      	mov	r2, r1
 8002aee:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8002af0:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8002af4:	3301      	adds	r3, #1
 8002af6:	425a      	negs	r2, r3
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	f002 0207 	and.w	r2, r2, #7
 8002b00:	bf58      	it	pl
 8002b02:	4253      	negpl	r3, r2
 8002b04:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
				  		  detail_array[0] = OBJECT_DETECTED;
 8002b08:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002b0c:	221d      	movs	r2, #29
 8002b0e:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b10:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002b1a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002b1e:	4413      	add	r3, r2
 8002b20:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2301      	movs	r3, #1
 8002b28:	2008      	movs	r0, #8
 8002b2a:	f7ff fa39 	bl	8001fa0 <commandRespond1>
 8002b2e:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
						  total_respond_length += respond_lenght;
 8002b32:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002b36:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  	  }
				  	  break;
 8002b40:	e025      	b.n	8002b8e <StartDefaultTask+0x88e>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8002b42:	f240 2102 	movw	r1, #514	; 0x202
 8002b46:	48c8      	ldr	r0, [pc, #800]	; (8002e68 <StartDefaultTask+0xb68>)
 8002b48:	f7ff fa92 	bl	8002070 <LOG_REPORT>
 8002b4c:	e01f      	b.n	8002b8e <StartDefaultTask+0x88e>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 8002b4e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b56:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002b60:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002b64:	4413      	add	r3, r2
 8002b66:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	2007      	movs	r0, #7
 8002b70:	f7ff fa16 	bl	8001fa0 <commandRespond1>
 8002b74:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002b78:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002b7c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002b80:	4413      	add	r3, r2
 8002b82:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8002b86:	e002      	b.n	8002b8e <StartDefaultTask+0x88e>
				  	  break;
 8002b88:	bf00      	nop
 8002b8a:	e000      	b.n	8002b8e <StartDefaultTask+0x88e>
				  	  break;
 8002b8c:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 395f 	strb.w	r3, [r7, #2399]	; 0x95f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002b94:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	f200 8738 	bhi.w	8003a0e <StartDefaultTask+0x170e>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <StartDefaultTask+0x8a4>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bb9 	.word	0x08002bb9
 8002ba8:	08002d67 	.word	0x08002d67
 8002bac:	08003151 	.word	0x08003151
 8002bb0:	080033cb 	.word	0x080033cb
 8002bb4:	080033f1 	.word	0x080033f1
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8002bb8:	f897 3953 	ldrb.w	r3, [r7, #2387]	; 0x953
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	f200 870c 	bhi.w	80039da <StartDefaultTask+0x16da>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <StartDefaultTask+0x8c8>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002d61 	.word	0x08002d61
 8002bcc:	08002bd9 	.word	0x08002bd9
 8002bd0:	08002c47 	.word	0x08002c47
 8002bd4:	08002d23 	.word	0x08002d23
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8002bd8:	4ba4      	ldr	r3, [pc, #656]	; (8002e6c <StartDefaultTask+0xb6c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	f897 3952 	ldrb.w	r3, [r7, #2386]	; 0x952
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f007 ff98 	bl	800ab18 <scaraKeyInit1>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d127      	bne.n	8002c3e <StartDefaultTask+0x93e>
				  run_time = 0;
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	f04f 0400 	mov.w	r4, #0
 8002bf6:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002bfa:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 8002c04:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002c08:	2225      	movs	r2, #37	; 0x25
 8002c0a:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c0c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002c10:	6899      	ldr	r1, [r3, #8]
 8002c12:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002c16:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2301      	movs	r3, #1
 8002c24:	2003      	movs	r0, #3
 8002c26:	f7ff f9bb 	bl	8001fa0 <commandRespond1>
 8002c2a:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002c2e:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002c32:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002c36:	4413      	add	r3, r2
 8002c38:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002c3c:	e091      	b.n	8002d62 <StartDefaultTask+0xa62>
				  current_key_state = SCARA_KEY_STATE_READY;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
		  break;
 8002c44:	e08d      	b.n	8002d62 <StartDefaultTask+0xa62>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002c46:	a386      	add	r3, pc, #536	; (adr r3, 8002e60 <StartDefaultTask+0xb60>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c54:	f7fd fb1a 	bl	800028c <__adddf3>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002c60:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002c64:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8002c68:	ed93 0b00 	vldr	d0, [r3]
 8002c6c:	f007 fe46 	bl	800a8fc <scaraIsFinish>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <StartDefaultTask+0x97e>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8002c76:	2303      	movs	r3, #3
 8002c78:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002c7c:	e071      	b.n	8002d62 <StartDefaultTask+0xa62>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8002c7e:	4c7c      	ldr	r4, [pc, #496]	; (8002e70 <StartDefaultTask+0xb70>)
 8002c80:	4668      	mov	r0, sp
 8002c82:	f104 0308 	add.w	r3, r4, #8
 8002c86:	22b8      	movs	r2, #184	; 0xb8
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f013 f93f 	bl	8015f0c <memcpy>
 8002c8e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002c92:	4878      	ldr	r0, [pc, #480]	; (8002e74 <StartDefaultTask+0xb74>)
 8002c94:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002c98:	ed91 0b00 	vldr	d0, [r1]
 8002c9c:	f005 fed6 	bl	8008a4c <scaraFlowDuty>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f887 38f9 	strb.w	r3, [r7, #2297]	; 0x8f9
				  if ( SCARA_STATUS_OK == status) {
 8002ca6:	f897 38f9 	ldrb.w	r3, [r7, #2297]	; 0x8f9
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d113      	bne.n	8002cd6 <StartDefaultTask+0x9d6>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002cae:	4c70      	ldr	r4, [pc, #448]	; (8002e70 <StartDefaultTask+0xb70>)
 8002cb0:	4a70      	ldr	r2, [pc, #448]	; (8002e74 <StartDefaultTask+0xb74>)
 8002cb2:	ab2c      	add	r3, sp, #176	; 0xb0
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	22c0      	movs	r2, #192	; 0xc0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f013 f927 	bl	8015f0c <memcpy>
 8002cbe:	4668      	mov	r0, sp
 8002cc0:	f104 0310 	add.w	r3, r4, #16
 8002cc4:	22b0      	movs	r2, #176	; 0xb0
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f013 f920 	bl	8015f0c <memcpy>
 8002ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cd0:	f002 fa9a 	bl	8005208 <lowlayer_computeAndWritePulse>
		  break;
 8002cd4:	e045      	b.n	8002d62 <StartDefaultTask+0xa62>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
					detail_array[0] = status;
 8002cdc:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002ce0:	f897 28f9 	ldrb.w	r2, [r7, #2297]	; 0x8f9
 8002ce4:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ce6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002cea:	6899      	ldr	r1, [r3, #8]
 8002cec:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002cf0:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	2006      	movs	r0, #6
 8002d00:	f7ff f94e 	bl	8001fa0 <commandRespond1>
 8002d04:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8002d08:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002d0c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002d10:	4413      	add	r3, r2
 8002d12:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  LOG_REPORT("STOP KEY", __LINE__);
 8002d16:	f240 2157 	movw	r1, #599	; 0x257
 8002d1a:	4857      	ldr	r0, [pc, #348]	; (8002e78 <StartDefaultTask+0xb78>)
 8002d1c:	f7ff f9a8 	bl	8002070 <LOG_REPORT>
		  break;
 8002d20:	e01f      	b.n	8002d62 <StartDefaultTask+0xa62>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8002d22:	4854      	ldr	r0, [pc, #336]	; (8002e74 <StartDefaultTask+0xb74>)
 8002d24:	f002 f8e0 	bl	8004ee8 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 8002d28:	4852      	ldr	r0, [pc, #328]	; (8002e74 <StartDefaultTask+0xb74>)
 8002d2a:	f001 f9b9 	bl	80040a0 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3953 	strb.w	r3, [r7, #2387]	; 0x953
			  positionNext.t = 0;
 8002d34:	4a4f      	ldr	r2, [pc, #316]	; (8002e74 <StartDefaultTask+0xb74>)
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	f04f 0400 	mov.w	r4, #0
 8002d3e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002d42:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <StartDefaultTask+0xb74>)
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8002d50:	4a48      	ldr	r2, [pc, #288]	; (8002e74 <StartDefaultTask+0xb74>)
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002d5e:	e000      	b.n	8002d62 <StartDefaultTask+0xa62>
		  break;
 8002d60:	bf00      	nop
		  }
	  }
	  break;
 8002d62:	f000 be3a 	b.w	80039da <StartDefaultTask+0x16da>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002d66:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d00b      	beq.n	8002d86 <StartDefaultTask+0xa86>
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d066      	beq.n	8002e40 <StartDefaultTask+0xb40>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 81e4 	bne.w	8003140 <StartDefaultTask+0xe40>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
			  }
			  break;
 8002d84:	e1e2      	b.n	800314c <StartDefaultTask+0xe4c>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8002d86:	f897 3954 	ldrb.w	r3, [r7, #2388]	; 0x954
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d84e      	bhi.n	8002e2c <StartDefaultTask+0xb2c>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <StartDefaultTask+0xa94>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002da5 	.word	0x08002da5
 8002d98:	08002db1 	.word	0x08002db1
 8002d9c:	08002dc3 	.word	0x08002dc3
 8002da0:	08002dd7 	.word	0x08002dd7
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002da4:	f001 fe96 	bl	8004ad4 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
					  }
					  break;
 8002dae:	e046      	b.n	8002e3e <StartDefaultTask+0xb3e>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002db0:	f001 fec2 	bl	8004b38 <lowlayer_scanFlow>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03e      	beq.n	8002e38 <StartDefaultTask+0xb38>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
						  }
					  }
					  break;
 8002dc0:	e03a      	b.n	8002e38 <StartDefaultTask+0xb38>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002dc2:	482c      	ldr	r0, [pc, #176]	; (8002e74 <StartDefaultTask+0xb74>)
 8002dc4:	f002 f814 	bl	8004df0 <lowlayer_goToSoftLimit>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d036      	beq.n	8002e3c <StartDefaultTask+0xb3c>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	f887 3954 	strb.w	r3, [r7, #2388]	; 0x954
							}
					  }
					  break;
 8002dd4:	e032      	b.n	8002e3c <StartDefaultTask+0xb3c>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8002dd6:	4827      	ldr	r0, [pc, #156]	; (8002e74 <StartDefaultTask+0xb74>)
 8002dd8:	f002 f886 	bl	8004ee8 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8002ddc:	4825      	ldr	r0, [pc, #148]	; (8002e74 <StartDefaultTask+0xb74>)
 8002dde:	f001 f95f 	bl	80040a0 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	f887 3956 	strb.w	r3, [r7, #2390]	; 0x956
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
						  scaraSetScanFlag();
 8002dee:	f007 fce7 	bl	800a7c0 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 8002df2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002df6:	2225      	movs	r2, #37	; 0x25
 8002df8:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002dfa:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002e04:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002e08:	4413      	add	r3, r2
 8002e0a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	2005      	movs	r0, #5
 8002e14:	f7ff f8c4 	bl	8001fa0 <commandRespond1>
 8002e18:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
						total_respond_length += respond_lenght;
 8002e1c:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002e20:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002e24:	4413      	add	r3, r2
 8002e26:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  }
					  break;
 8002e2a:	e008      	b.n	8002e3e <StartDefaultTask+0xb3e>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002e2c:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8002e30:	4812      	ldr	r0, [pc, #72]	; (8002e7c <StartDefaultTask+0xb7c>)
 8002e32:	f7ff f91d 	bl	8002070 <LOG_REPORT>
						  while(1);
 8002e36:	e7fe      	b.n	8002e36 <StartDefaultTask+0xb36>
					  break;
 8002e38:	bf00      	nop
 8002e3a:	e187      	b.n	800314c <StartDefaultTask+0xe4c>
					  break;
 8002e3c:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002e3e:	e185      	b.n	800314c <StartDefaultTask+0xe4c>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002e40:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	f200 8173 	bhi.w	8003130 <StartDefaultTask+0xe30>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <StartDefaultTask+0xb50>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	0800313d 	.word	0x0800313d
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002fdf 	.word	0x08002fdf
 8002e5c:	080030bb 	.word	0x080030bb
 8002e60:	40000000 	.word	0x40000000
 8002e64:	3f847ae1 	.word	0x3f847ae1
 8002e68:	0801b4cc 	.word	0x0801b4cc
 8002e6c:	20000060 	.word	0x20000060
 8002e70:	2000b940 	.word	0x2000b940
 8002e74:	2000bac0 	.word	0x2000bac0
 8002e78:	0801b4e4 	.word	0x0801b4e4
 8002e7c:	0801b4f0 	.word	0x0801b4f0

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002e80:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 8002e84:	4668      	mov	r0, sp
 8002e86:	f104 0310 	add.w	r3, r4, #16
 8002e8a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f013 f83c 	bl	8015f0c <memcpy>
 8002e94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e98:	f002 fd4a 	bl	8005930 <scaraInitDuty>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f887 38fb 	strb.w	r3, [r7, #2299]	; 0x8fb
						  if ( SCARA_STATUS_OK == status1) {
 8002ea2:	f897 38fb 	ldrb.w	r3, [r7, #2299]	; 0x8fb
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d173      	bne.n	8002f92 <StartDefaultTask+0xc92>
							  status2 = scaraTestDuty();
 8002eaa:	f007 fc0d 	bl	800a6c8 <scaraTestDuty>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f887 38fa 	strb.w	r3, [r7, #2298]	; 0x8fa
							  if (SCARA_STATUS_OK == status2) {
 8002eb4:	f897 38fa 	ldrb.w	r3, [r7, #2298]	; 0x8fa
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d144      	bne.n	8002f46 <StartDefaultTask+0xc46>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002ece:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 8002ed2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002ed6:	f897 28fb 	ldrb.w	r2, [r7, #2299]	; 0x8fb
 8002eda:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002edc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002ee6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002eea:	4413      	add	r3, r2
 8002eec:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	2008      	movs	r0, #8
 8002ef6:	f7ff f853 	bl	8001fa0 <commandRespond1>
 8002efa:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							  total_respond_length += respond_lenght;
 8002efe:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002f02:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002f06:	4413      	add	r3, r2
 8002f08:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							  detail_array[0] = NONE;
 8002f0c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002f10:	2225      	movs	r2, #37	; 0x25
 8002f12:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002f14:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002f1e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002f22:	4413      	add	r3, r2
 8002f24:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f7ff f837 	bl	8001fa0 <commandRespond1>
 8002f32:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							  total_respond_length += respond_lenght;
 8002f36:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002f3a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002f3e:	4413      	add	r3, r2
 8002f40:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8002f44:	e0fb      	b.n	800313e <StartDefaultTask+0xe3e>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002f4c:	f240 21cb 	movw	r1, #715	; 0x2cb
 8002f50:	48cf      	ldr	r0, [pc, #828]	; (8003290 <StartDefaultTask+0xf90>)
 8002f52:	f7ff f88d 	bl	8002070 <LOG_REPORT>
								detail_array[0] = status2;
 8002f56:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002f5a:	f897 28fa 	ldrb.w	r2, [r7, #2298]	; 0x8fa
 8002f5e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002f60:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002f6a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002f6e:	4413      	add	r3, r2
 8002f70:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2301      	movs	r3, #1
 8002f78:	2007      	movs	r0, #7
 8002f7a:	f7ff f811 	bl	8001fa0 <commandRespond1>
 8002f7e:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 8002f82:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002f86:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  break;
 8002f90:	e0d5      	b.n	800313e <StartDefaultTask+0xe3e>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
							detail_array[0] = status1;
 8002f98:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8002f9c:	f897 28fb 	ldrb.w	r2, [r7, #2299]	; 0x8fb
 8002fa0:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002fa2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8002fac:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	2007      	movs	r0, #7
 8002fbc:	f7fe fff0 	bl	8001fa0 <commandRespond1>
 8002fc0:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
							total_respond_length += respond_lenght;
 8002fc4:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8002fc8:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002fcc:	4413      	add	r3, r2
 8002fce:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002fd2:	f240 21d6 	movw	r1, #726	; 0x2d6
 8002fd6:	48af      	ldr	r0, [pc, #700]	; (8003294 <StartDefaultTask+0xf94>)
 8002fd8:	f7ff f84a 	bl	8002070 <LOG_REPORT>
				  break;
 8002fdc:	e0af      	b.n	800313e <StartDefaultTask+0xe3e>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8002fde:	a3aa      	add	r3, pc, #680	; (adr r3, 8003288 <StartDefaultTask+0xf88>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8002fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fec:	f7fd f94e 	bl	800028c <__adddf3>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8002ff8:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8002ffc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8003000:	ed93 0b00 	vldr	d0, [r3]
 8003004:	f007 fc7a 	bl	800a8fc <scaraIsFinish>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <StartDefaultTask+0xd16>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 800300e:	2303      	movs	r3, #3
 8003010:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8003014:	e093      	b.n	800313e <StartDefaultTask+0xe3e>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003016:	4ca0      	ldr	r4, [pc, #640]	; (8003298 <StartDefaultTask+0xf98>)
 8003018:	4668      	mov	r0, sp
 800301a:	f104 0308 	add.w	r3, r4, #8
 800301e:	22b8      	movs	r2, #184	; 0xb8
 8003020:	4619      	mov	r1, r3
 8003022:	f012 ff73 	bl	8015f0c <memcpy>
 8003026:	e894 000c 	ldmia.w	r4, {r2, r3}
 800302a:	489c      	ldr	r0, [pc, #624]	; (800329c <StartDefaultTask+0xf9c>)
 800302c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003030:	ed91 0b00 	vldr	d0, [r1]
 8003034:	f005 fd0a 	bl	8008a4c <scaraFlowDuty>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 38fc 	strb.w	r3, [r7, #2300]	; 0x8fc
							  if ( SCARA_STATUS_OK == status) {
 800303e:	f897 38fc 	ldrb.w	r3, [r7, #2300]	; 0x8fc
 8003042:	2b00      	cmp	r3, #0
 8003044:	d113      	bne.n	800306e <StartDefaultTask+0xd6e>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003046:	4c94      	ldr	r4, [pc, #592]	; (8003298 <StartDefaultTask+0xf98>)
 8003048:	4a94      	ldr	r2, [pc, #592]	; (800329c <StartDefaultTask+0xf9c>)
 800304a:	ab2c      	add	r3, sp, #176	; 0xb0
 800304c:	4611      	mov	r1, r2
 800304e:	22c0      	movs	r2, #192	; 0xc0
 8003050:	4618      	mov	r0, r3
 8003052:	f012 ff5b 	bl	8015f0c <memcpy>
 8003056:	4668      	mov	r0, sp
 8003058:	f104 0310 	add.w	r3, r4, #16
 800305c:	22b0      	movs	r2, #176	; 0xb0
 800305e:	4619      	mov	r1, r3
 8003060:	f012 ff54 	bl	8015f0c <memcpy>
 8003064:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003068:	f002 f8ce 	bl	8005208 <lowlayer_computeAndWritePulse>
				  break;
 800306c:	e067      	b.n	800313e <StartDefaultTask+0xe3e>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800306e:	2303      	movs	r3, #3
 8003070:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
								detail_array[0] = status;
 8003074:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003078:	f897 28fc 	ldrb.w	r2, [r7, #2300]	; 0x8fc
 800307c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800307e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003082:	6899      	ldr	r1, [r3, #8]
 8003084:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003088:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800308c:	4413      	add	r3, r2
 800308e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2301      	movs	r3, #1
 8003096:	2006      	movs	r0, #6
 8003098:	f7fe ff82 	bl	8001fa0 <commandRespond1>
 800309c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
								total_respond_length += respond_lenght;
 80030a0:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80030a4:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80030a8:	4413      	add	r3, r2
 80030aa:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
								  LOG_REPORT("STOP DUTY", __LINE__);
 80030ae:	f240 21ee 	movw	r1, #750	; 0x2ee
 80030b2:	487b      	ldr	r0, [pc, #492]	; (80032a0 <StartDefaultTask+0xfa0>)
 80030b4:	f7fe ffdc 	bl	8002070 <LOG_REPORT>
				  break;
 80030b8:	e041      	b.n	800313e <StartDefaultTask+0xe3e>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 80030ba:	4878      	ldr	r0, [pc, #480]	; (800329c <StartDefaultTask+0xf9c>)
 80030bc:	f001 ff14 	bl	8004ee8 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 80030c0:	4876      	ldr	r0, [pc, #472]	; (800329c <StartDefaultTask+0xf9c>)
 80030c2:	f000 ffed 	bl	80040a0 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
						  positionNext.t = 0;
 80030cc:	4a73      	ldr	r2, [pc, #460]	; (800329c <StartDefaultTask+0xf9c>)
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f04f 0400 	mov.w	r4, #0
 80030d6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 80030da:	4a70      	ldr	r2, [pc, #448]	; (800329c <StartDefaultTask+0xf9c>)
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	f04f 0400 	mov.w	r4, #0
 80030e4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 80030e8:	4a6c      	ldr	r2, [pc, #432]	; (800329c <StartDefaultTask+0xf9c>)
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform

					detail_array[0] = NONE;
 80030f6:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80030fa:	2225      	movs	r2, #37	; 0x25
 80030fc:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80030fe:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003102:	6899      	ldr	r1, [r3, #8]
 8003104:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 8003108:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800310c:	4413      	add	r3, r2
 800310e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	2005      	movs	r0, #5
 8003118:	f7fe ff42 	bl	8001fa0 <commandRespond1>
 800311c:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8003120:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003124:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003128:	4413      	add	r3, r2
 800312a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					  }
				  break;
 800312e:	e006      	b.n	800313e <StartDefaultTask+0xe3e>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003130:	f240 3106 	movw	r1, #774	; 0x306
 8003134:	485b      	ldr	r0, [pc, #364]	; (80032a4 <StartDefaultTask+0xfa4>)
 8003136:	f7fe ff9b 	bl	8002070 <LOG_REPORT>
						  while(1);
 800313a:	e7fe      	b.n	800313a <StartDefaultTask+0xe3a>
				  break;
 800313c:	bf00      	nop
					  }
				  }

			  }
			  break;
 800313e:	e005      	b.n	800314c <StartDefaultTask+0xe4c>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8003140:	f44f 7144 	mov.w	r1, #784	; 0x310
 8003144:	4858      	ldr	r0, [pc, #352]	; (80032a8 <StartDefaultTask+0xfa8>)
 8003146:	f7fe ff93 	bl	8002070 <LOG_REPORT>
				  while(1);
 800314a:	e7fe      	b.n	800314a <StartDefaultTask+0xe4a>
			  }
		  }
	  }
	  break;
 800314c:	f000 bc5f 	b.w	8003a0e <StartDefaultTask+0x170e>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 8003150:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8003154:	2b04      	cmp	r3, #4
 8003156:	f200 8136 	bhi.w	80033c6 <StartDefaultTask+0x10c6>
 800315a:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <StartDefaultTask+0xe60>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	080033c7 	.word	0x080033c7
 8003164:	080033c7 	.word	0x080033c7
 8003168:	080032b9 	.word	0x080032b9
 800316c:	080033c7 	.word	0x080033c7
 8003170:	08003175 	.word	0x08003175
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, Gcode_Cor[run_point]);
 8003174:	494d      	ldr	r1, [pc, #308]	; (80032ac <StartDefaultTask+0xfac>)
 8003176:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	f507 65e5 	add.w	r5, r7, #1832	; 0x728
 8003188:	466c      	mov	r4, sp
 800318a:	f103 020c 	add.w	r2, r3, #12
 800318e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003196:	4628      	mov	r0, r5
 8003198:	f000 fe1a 	bl	8003dd0 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 800319c:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 80031a0:	4668      	mov	r0, sp
 80031a2:	f104 0310 	add.w	r3, r4, #16
 80031a6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80031aa:	4619      	mov	r1, r3
 80031ac:	f012 feae 	bl	8015f0c <memcpy>
 80031b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031b4:	f002 fbbc 	bl	8005930 <scaraInitDuty>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 38fe 	strb.w	r3, [r7, #2302]	; 0x8fe
			  if(status == SCARA_STATUS_OK){
 80031be:	f897 38fe 	ldrb.w	r3, [r7, #2302]	; 0x8fe
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d13e      	bne.n	8003244 <StartDefaultTask+0xf44>
				  run_time = 0;
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	f04f 0400 	mov.w	r4, #0
 80031ce:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80031d2:	e9c2 3400 	strd	r3, r4, [r2]
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80031d6:	2302      	movs	r3, #2
 80031d8:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = (uint8_t)(run_point * 100.0f / total_num_of_point );
 80031dc:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80032b0 <StartDefaultTask+0xfb0>
 80031ec:	ee67 6a87 	vmul.f32	s13, s15, s14
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <StartDefaultTask+0xfb4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003204:	edc7 7a01 	vstr	s15, [r7, #4]
 8003208:	793b      	ldrb	r3, [r7, #4]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003210:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003212:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800321c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003220:	4413      	add	r3, r2
 8003222:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2301      	movs	r3, #1
 800322a:	200b      	movs	r0, #11
 800322c:	f7fe feb8 	bl	8001fa0 <commandRespond1>
 8003230:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8003234:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003238:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800323c:	4413      	add	r3, r2
 800323e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 8003242:	e039      	b.n	80032b8 <StartDefaultTask+0xfb8>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003244:	2303      	movs	r3, #3
 8003246:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  detail_array[0] = status;
 800324a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800324e:	f897 28fe 	ldrb.w	r2, [r7, #2302]	; 0x8fe
 8003252:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003254:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800325e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003262:	4413      	add	r3, r2
 8003264:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2301      	movs	r3, #1
 800326c:	2007      	movs	r0, #7
 800326e:	f7fe fe97 	bl	8001fa0 <commandRespond1>
 8003272:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
				  total_respond_length += respond_lenght;
 8003276:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 800327a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800327e:	4413      	add	r3, r2
 8003280:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
				  break;
 8003284:	e0a0      	b.n	80033c8 <StartDefaultTask+0x10c8>
 8003286:	bf00      	nop
 8003288:	40000000 	.word	0x40000000
 800328c:	3f847ae1 	.word	0x3f847ae1
 8003290:	0801b500 	.word	0x0801b500
 8003294:	0801b50c 	.word	0x0801b50c
 8003298:	2000b940 	.word	0x2000b940
 800329c:	2000bac0 	.word	0x2000bac0
 80032a0:	0801b518 	.word	0x0801b518
 80032a4:	0801b4f0 	.word	0x0801b4f0
 80032a8:	0801b524 	.word	0x0801b524
 80032ac:	20004ddc 	.word	0x20004ddc
 80032b0:	42c80000 	.word	0x42c80000
 80032b4:	20004dd8 	.word	0x20004dd8
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 80032b8:	a3d5      	add	r3, pc, #852	; (adr r3, 8003610 <StartDefaultTask+0x1310>)
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80032c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032c6:	f7fc ffe1 	bl	800028c <__adddf3>
 80032ca:	4603      	mov	r3, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80032d2:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80032d6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80032da:	ed93 0b00 	vldr	d0, [r3]
 80032de:	f007 fb0d 	bl	800a8fc <scaraIsFinish>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d021      	beq.n	800332c <StartDefaultTask+0x102c>
				if(run_point >= total_num_of_point){
 80032e8:	4bbd      	ldr	r3, [pc, #756]	; (80035e0 <StartDefaultTask+0x12e0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8d7 292c 	ldr.w	r2, [r7, #2348]	; 0x92c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	db09      	blt.n	8003308 <StartDefaultTask+0x1008>
					current_duty_state = SCARA_DUTY_STATE_READY;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					lowlayer_readTruePosition(&positionNext);
 80032fa:	48ba      	ldr	r0, [pc, #744]	; (80035e4 <StartDefaultTask+0x12e4>)
 80032fc:	f001 fdf4 	bl	8004ee8 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003300:	48b8      	ldr	r0, [pc, #736]	; (80035e4 <StartDefaultTask+0x12e4>)
 8003302:	f000 fecd 	bl	80040a0 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003306:	e05f      	b.n	80033c8 <StartDefaultTask+0x10c8>
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003308:	2304      	movs	r3, #4
 800330a:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					run_point++;
 800330e:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8003312:	3301      	adds	r3, #1
 8003314:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003318:	4ab2      	ldr	r2, [pc, #712]	; (80035e4 <StartDefaultTask+0x12e4>)
 800331a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800331e:	4610      	mov	r0, r2
 8003320:	3328      	adds	r3, #40	; 0x28
 8003322:	22c0      	movs	r2, #192	; 0xc0
 8003324:	4619      	mov	r1, r3
 8003326:	f012 fdf1 	bl	8015f0c <memcpy>
		  break;
 800332a:	e04d      	b.n	80033c8 <StartDefaultTask+0x10c8>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800332c:	4cae      	ldr	r4, [pc, #696]	; (80035e8 <StartDefaultTask+0x12e8>)
 800332e:	4668      	mov	r0, sp
 8003330:	f104 0308 	add.w	r3, r4, #8
 8003334:	22b8      	movs	r2, #184	; 0xb8
 8003336:	4619      	mov	r1, r3
 8003338:	f012 fde8 	bl	8015f0c <memcpy>
 800333c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003340:	48a8      	ldr	r0, [pc, #672]	; (80035e4 <StartDefaultTask+0x12e4>)
 8003342:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003346:	ed91 0b00 	vldr	d0, [r1]
 800334a:	f005 fb7f 	bl	8008a4c <scaraFlowDuty>
 800334e:	4603      	mov	r3, r0
 8003350:	f887 38fd 	strb.w	r3, [r7, #2301]	; 0x8fd
				if ( SCARA_STATUS_OK == status) {
 8003354:	f897 38fd 	ldrb.w	r3, [r7, #2301]	; 0x8fd
 8003358:	2b00      	cmp	r3, #0
 800335a:	d113      	bne.n	8003384 <StartDefaultTask+0x1084>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800335c:	4ca2      	ldr	r4, [pc, #648]	; (80035e8 <StartDefaultTask+0x12e8>)
 800335e:	4aa1      	ldr	r2, [pc, #644]	; (80035e4 <StartDefaultTask+0x12e4>)
 8003360:	ab2c      	add	r3, sp, #176	; 0xb0
 8003362:	4611      	mov	r1, r2
 8003364:	22c0      	movs	r2, #192	; 0xc0
 8003366:	4618      	mov	r0, r3
 8003368:	f012 fdd0 	bl	8015f0c <memcpy>
 800336c:	4668      	mov	r0, sp
 800336e:	f104 0310 	add.w	r3, r4, #16
 8003372:	22b0      	movs	r2, #176	; 0xb0
 8003374:	4619      	mov	r1, r3
 8003376:	f012 fdc9 	bl	8015f0c <memcpy>
 800337a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800337e:	f001 ff43 	bl	8005208 <lowlayer_computeAndWritePulse>
		  break;
 8003382:	e021      	b.n	80033c8 <StartDefaultTask+0x10c8>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003384:	2303      	movs	r3, #3
 8003386:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  detail_array[0] = status;
 800338a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800338e:	f897 28fd 	ldrb.w	r2, [r7, #2301]	; 0x8fd
 8003392:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003394:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800339e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80033a2:	4413      	add	r3, r2
 80033a4:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	2301      	movs	r3, #1
 80033ac:	2007      	movs	r0, #7
 80033ae:	f7fe fdf7 	bl	8001fa0 <commandRespond1>
 80033b2:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					  total_respond_length += respond_lenght;
 80033b6:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80033ba:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80033be:	4413      	add	r3, r2
 80033c0:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
		  break;
 80033c4:	e000      	b.n	80033c8 <StartDefaultTask+0x10c8>

		  }
		  break;
		  
		  default:
			  break;
 80033c6:	bf00      	nop
		  }
	  }

	  break;
 80033c8:	e321      	b.n	8003a0e <StartDefaultTask+0x170e>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 80033ca:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80033ce:	f993 0000 	ldrsb.w	r0, [r3]
 80033d2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80033d6:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80033da:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80033de:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80033e2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80033e6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80033ea:	f002 f8b1 	bl	8005550 <lowlayer_writePulse>
	  }
	  break;
 80033ee:	e30e      	b.n	8003a0e <StartDefaultTask+0x170e>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 80033f0:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 80033f4:	3b01      	subs	r3, #1
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	f200 8308 	bhi.w	8003a0c <StartDefaultTask+0x170c>
 80033fc:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <StartDefaultTask+0x1104>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003415 	.word	0x08003415
 8003408:	080038af 	.word	0x080038af
 800340c:	080039cf 	.word	0x080039cf
 8003410:	0800344d 	.word	0x0800344d
		  case SCARA_DUTY_STATE_INIT:{
			  //Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
			  HAL_TIM_Base_Start(&htim2);
 8003414:	4875      	ldr	r0, [pc, #468]	; (80035ec <StartDefaultTask+0x12ec>)
 8003416:	f00a fe94 	bl	800e142 <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
			  object_head_pointer = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	f887 393d 	strb.w	r3, [r7, #2365]	; 0x93d
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 800342c:	2304      	movs	r3, #4
 800342e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003432:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003436:	2204      	movs	r2, #4
 8003438:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 800343a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800343e:	2200      	movs	r2, #0
 8003440:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003442:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003446:	2200      	movs	r2, #0
 8003448:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 800344a:	e2c5      	b.n	80039d8 <StartDefaultTask+0x16d8>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 800344c:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003450:	f897 393d 	ldrb.w	r3, [r7, #2365]	; 0x93d
 8003454:	429a      	cmp	r2, r3
 8003456:	f000 82bc 	beq.w	80039d2 <StartDefaultTask+0x16d2>
				  switch(operation_state){
 800345a:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 800345e:	2b07      	cmp	r3, #7
 8003460:	f200 8186 	bhi.w	8003770 <StartDefaultTask+0x1470>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <StartDefaultTask+0x116c>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	0800348d 	.word	0x0800348d
 8003470:	0800356f 	.word	0x0800356f
 8003474:	0800359b 	.word	0x0800359b
 8003478:	080035b1 	.word	0x080035b1
 800347c:	08003619 	.word	0x08003619
 8003480:	08003703 	.word	0x08003703
 8003484:	0800372f 	.word	0x0800372f
 8003488:	08003745 	.word	0x08003745
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT;
 800348c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b29a      	uxth	r2, r3
 8003494:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003498:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800349c:	20c8      	movs	r0, #200	; 0xc8
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	440b      	add	r3, r1
 80034a4:	33c0      	adds	r3, #192	; 0xc0
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80035f0 <StartDefaultTask+0x12f0>
 80034b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034bc:	ee17 0a90 	vmov	r0, s15
 80034c0:	f7fd f842 	bl	8000548 <__aeabi_f2d>
 80034c4:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <StartDefaultTask+0x12f4>)
 80034c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034ca:	461a      	mov	r2, r3
 80034cc:	4623      	mov	r3, r4
 80034ce:	f7fc fedd 	bl	800028c <__adddf3>
 80034d2:	4603      	mov	r3, r0
 80034d4:	460c      	mov	r4, r1
 80034d6:	4618      	mov	r0, r3
 80034d8:	4621      	mov	r1, r4
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <StartDefaultTask+0x12f8>)
 80034dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	f7fc fed2 	bl	800028c <__adddf3>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 80034f0:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 80034f4:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80034f8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80034fc:	21c8      	movs	r1, #200	; 0xc8
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3350      	adds	r3, #80	; 0x50
 8003506:	e9d3 4500 	ldrd	r4, r5, [r3]
 800350a:	4b3c      	ldr	r3, [pc, #240]	; (80035fc <StartDefaultTask+0x12fc>)
 800350c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003510:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f7fd f86e 	bl	80005f8 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	f897 693e 	ldrb.w	r6, [r7, #2366]	; 0x93e
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fc feae 	bl	8000288 <__aeabi_dsub>
 800352c:	4603      	mov	r3, r0
 800352e:	460c      	mov	r4, r1
 8003530:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003534:	22c8      	movs	r2, #200	; 0xc8
 8003536:	fb02 f206 	mul.w	r2, r2, r6
 800353a:	440a      	add	r2, r1
 800353c:	3250      	adds	r2, #80	; 0x50
 800353e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003542:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <StartDefaultTask+0x1300>)
 8003548:	e9d3 3400 	ldrd	r3, r4, [r3]
 800354c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003550:	20c8      	movs	r0, #200	; 0xc8
 8003552:	fb00 f202 	mul.w	r2, r0, r2
 8003556:	440a      	add	r2, r1
 8003558:	3258      	adds	r2, #88	; 0x58
 800355a:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <StartDefaultTask+0x12f4>)
 8003560:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003564:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003568:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800356c:	e100      	b.n	8003770 <StartDefaultTask+0x1470>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 800356e:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <StartDefaultTask+0x1304>)
 8003574:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003578:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800357c:	20c8      	movs	r0, #200	; 0xc8
 800357e:	fb00 f202 	mul.w	r2, r0, r2
 8003582:	440a      	add	r2, r1
 8003584:	3258      	adds	r2, #88	; 0x58
 8003586:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <StartDefaultTask+0x12f8>)
 800358c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003590:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003594:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003598:	e0ea      	b.n	8003770 <StartDefaultTask+0x1470>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <StartDefaultTask+0x1308>)
 800359c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035a0:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80035a4:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f007 f915 	bl	800a7d8 <scaraSetOutput>
					  }
					  break;
 80035ae:	e0df      	b.n	8003770 <StartDefaultTask+0x1470>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80035b0:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <StartDefaultTask+0x1300>)
 80035b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035ba:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80035be:	20c8      	movs	r0, #200	; 0xc8
 80035c0:	fb00 f202 	mul.w	r2, r0, r2
 80035c4:	440a      	add	r2, r1
 80035c6:	3258      	adds	r2, #88	; 0x58
 80035c8:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <StartDefaultTask+0x130c>)
 80035ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035d2:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80035d6:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 80035da:	e0c9      	b.n	8003770 <StartDefaultTask+0x1470>
 80035dc:	f3af 8000 	nop.w
 80035e0:	20004dd8 	.word	0x20004dd8
 80035e4:	2000bac0 	.word	0x2000bac0
 80035e8:	2000b940 	.word	0x2000b940
 80035ec:	2000bbc0 	.word	0x2000bbc0
 80035f0:	399c09bf 	.word	0x399c09bf
 80035f4:	20000028 	.word	0x20000028
 80035f8:	20000010 	.word	0x20000010
 80035fc:	20000058 	.word	0x20000058
 8003600:	20000040 	.word	0x20000040
 8003604:	20000048 	.word	0x20000048
 8003608:	20000030 	.word	0x20000030
 800360c:	20000018 	.word	0x20000018
 8003610:	40000000 	.word	0x40000000
 8003614:	3f847ae1 	.word	0x3f847ae1
					  case SCARA_MOVE_TO_SLOT :{

						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8003618:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800361c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003620:	21c8      	movs	r1, #200	; 0xc8
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	33b8      	adds	r3, #184	; 0xb8
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003632:	f107 0120 	add.w	r1, r7, #32
 8003636:	4603      	mov	r3, r0
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4403      	add	r3, r0
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003644:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003648:	20c8      	movs	r0, #200	; 0xc8
 800364a:	fb00 f202 	mul.w	r2, r0, r2
 800364e:	440a      	add	r2, r1
 8003650:	3248      	adds	r2, #72	; 0x48
 8003652:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;
 8003656:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800365a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800365e:	21c8      	movs	r1, #200	; 0xc8
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	33b8      	adds	r3, #184	; 0xb8
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003670:	f107 0120 	add.w	r1, r7, #32
 8003674:	4603      	mov	r3, r0
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4403      	add	r3, r0
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	3308      	adds	r3, #8
 8003680:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003684:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003688:	20c8      	movs	r0, #200	; 0xc8
 800368a:	fb00 f202 	mul.w	r2, r0, r2
 800368e:	440a      	add	r2, r1
 8003690:	3250      	adds	r2, #80	; 0x50
 8003692:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].roll;
 8003696:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800369a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800369e:	21c8      	movs	r1, #200	; 0xc8
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	33b8      	adds	r3, #184	; 0xb8
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 80036b0:	f107 0120 	add.w	r1, r7, #32
 80036b4:	4603      	mov	r3, r0
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4403      	add	r3, r0
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	3310      	adds	r3, #16
 80036c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036c4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80036c8:	20c8      	movs	r0, #200	; 0xc8
 80036ca:	fb00 f202 	mul.w	r2, r0, r2
 80036ce:	440a      	add	r2, r1
 80036d0:	3260      	adds	r2, #96	; 0x60
 80036d2:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 80036d6:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 80036da:	4bc3      	ldr	r3, [pc, #780]	; (80039e8 <StartDefaultTask+0x16e8>)
 80036dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036e0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80036e4:	20c8      	movs	r0, #200	; 0xc8
 80036e6:	fb00 f202 	mul.w	r2, r0, r2
 80036ea:	440a      	add	r2, r1
 80036ec:	3258      	adds	r2, #88	; 0x58
 80036ee:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = MOVE_TIME;
 80036f2:	4bbe      	ldr	r3, [pc, #760]	; (80039ec <StartDefaultTask+0x16ec>)
 80036f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036f8:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80036fc:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8003700:	e036      	b.n	8003770 <StartDefaultTask+0x1470>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8003702:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003706:	4bba      	ldr	r3, [pc, #744]	; (80039f0 <StartDefaultTask+0x16f0>)
 8003708:	e9d3 3400 	ldrd	r3, r4, [r3]
 800370c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003710:	20c8      	movs	r0, #200	; 0xc8
 8003712:	fb00 f202 	mul.w	r2, r0, r2
 8003716:	440a      	add	r2, r1
 8003718:	3258      	adds	r2, #88	; 0x58
 800371a:	e9c2 3400 	strd	r3, r4, [r2]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 800371e:	4bb5      	ldr	r3, [pc, #724]	; (80039f4 <StartDefaultTask+0x16f4>)
 8003720:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003724:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003728:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800372c:	e020      	b.n	8003770 <StartDefaultTask+0x1470>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 800372e:	4bb2      	ldr	r3, [pc, #712]	; (80039f8 <StartDefaultTask+0x16f8>)
 8003730:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003734:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8003738:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 800373c:	2000      	movs	r0, #0
 800373e:	f007 f84b 	bl	800a7d8 <scaraSetOutput>
					  }
					  break;
 8003742:	e015      	b.n	8003770 <StartDefaultTask+0x1470>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 8003744:	4bad      	ldr	r3, [pc, #692]	; (80039fc <StartDefaultTask+0x16fc>)
 8003746:	e9d3 3400 	ldrd	r3, r4, [r3]
 800374a:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 800374e:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003752:	f897 293e 	ldrb.w	r2, [r7, #2366]	; 0x93e
 8003756:	4ba4      	ldr	r3, [pc, #656]	; (80039e8 <StartDefaultTask+0x16e8>)
 8003758:	e9d3 3400 	ldrd	r3, r4, [r3]
 800375c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003760:	20c8      	movs	r0, #200	; 0xc8
 8003762:	fb00 f202 	mul.w	r2, r0, r2
 8003766:	440a      	add	r2, r1
 8003768:	3258      	adds	r2, #88	; 0x58
 800376a:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 800376e:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8003770:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 8003774:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003778:	21c8      	movs	r1, #200	; 0xc8
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	18d1      	adds	r1, r2, r3
 8003780:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003784:	3328      	adds	r3, #40	; 0x28
 8003786:	22c0      	movs	r2, #192	; 0xc0
 8003788:	4618      	mov	r0, r3
 800378a:	f012 fbbf 	bl	8015f0c <memcpy>
				  duty_cmd.time_total = state_time;
 800378e:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8003792:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003796:	e9d3 3400 	ldrd	r3, r4, [r3]
 800379a:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 800379e:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 80037ae:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d003      	beq.n	80037be <StartDefaultTask+0x14be>
 80037b6:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d103      	bne.n	80037c6 <StartDefaultTask+0x14c6>
					  status1 = SCARA_STATUS_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 392b 	strb.w	r3, [r7, #2347]	; 0x92b
 80037c4:	e031      	b.n	800382a <StartDefaultTask+0x152a>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 80037c6:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d00b      	beq.n	80037e6 <StartDefaultTask+0x14e6>
 80037ce:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d007      	beq.n	80037e6 <StartDefaultTask+0x14e6>
 80037d6:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d003      	beq.n	80037e6 <StartDefaultTask+0x14e6>
 80037de:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80037e2:	2b07      	cmp	r3, #7
 80037e4:	d108      	bne.n	80037f8 <StartDefaultTask+0x14f8>
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 80037e6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80037ea:	2202      	movs	r2, #2
 80037ec:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 80037ee:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80037f2:	2203      	movs	r2, #3
 80037f4:	745a      	strb	r2, [r3, #17]
 80037f6:	e007      	b.n	8003808 <StartDefaultTask+0x1508>
					  }else{
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 80037f8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80037fc:	2200      	movs	r2, #0
 80037fe:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8003800:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003804:	2201      	movs	r2, #1
 8003806:	745a      	strb	r2, [r3, #17]
					  }
					  status1 = scaraInitDuty(duty_cmd);
 8003808:	f507 64e5 	add.w	r4, r7, #1832	; 0x728
 800380c:	4668      	mov	r0, sp
 800380e:	f104 0310 	add.w	r3, r4, #16
 8003812:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003816:	4619      	mov	r1, r3
 8003818:	f012 fb78 	bl	8015f0c <memcpy>
 800381c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003820:	f002 f886 	bl	8005930 <scaraInitDuty>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 392b 	strb.w	r3, [r7, #2347]	; 0x92b
				  }
				  if ( SCARA_STATUS_OK == status1) {
 800382a:	f897 392b 	ldrb.w	r3, [r7, #2347]	; 0x92b
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <StartDefaultTask+0x154a>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003832:	2302      	movs	r3, #2
 8003834:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				  	run_time = 0;
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	f04f 0400 	mov.w	r4, #0
 8003840:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003844:	e9c2 3400 	strd	r3, r4, [r2]
 8003848:	e031      	b.n	80038ae <StartDefaultTask+0x15ae>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 800384a:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 800384e:	3301      	adds	r3, #1
 8003850:	425a      	negs	r2, r3
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	f002 0207 	and.w	r2, r2, #7
 800385a:	bf58      	it	pl
 800385c:	4253      	negpl	r3, r2
 800385e:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
					operation_state = SCARA_MOVE_TO_TARGET;
 8003862:	2300      	movs	r3, #0
 8003864:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
					detail_array[0] = status1;
 8003868:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800386c:	f897 292b 	ldrb.w	r2, [r7, #2347]	; 0x92b
 8003870:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003872:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 800387c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003880:	4413      	add	r3, r2
 8003882:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2301      	movs	r3, #1
 800388a:	2007      	movs	r0, #7
 800388c:	f7fe fb88 	bl	8001fa0 <commandRespond1>
 8003890:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					total_respond_length += respond_lenght;
 8003894:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 8003898:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800389c:	4413      	add	r3, r2
 800389e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
					LOG_REPORT("INIT FAIL", __LINE__);
 80038a2:	f240 31c3 	movw	r1, #963	; 0x3c3
 80038a6:	4856      	ldr	r0, [pc, #344]	; (8003a00 <StartDefaultTask+0x1700>)
 80038a8:	f7fe fbe2 	bl	8002070 <LOG_REPORT>
					break;
 80038ac:	e094      	b.n	80039d8 <StartDefaultTask+0x16d8>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80038ae:	a34c      	add	r3, pc, #304	; (adr r3, 80039e0 <StartDefaultTask+0x16e0>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80038b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038bc:	f7fc fce6 	bl	800028c <__adddf3>
 80038c0:	4603      	mov	r3, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80038c8:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80038cc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80038d0:	ed93 0b00 	vldr	d0, [r3]
 80038d4:	f007 f812 	bl	800a8fc <scaraIsFinish>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d022      	beq.n	8003924 <StartDefaultTask+0x1624>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80038de:	2304      	movs	r3, #4
 80038e0:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 80038e4:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 80038e8:	2b07      	cmp	r3, #7
 80038ea:	d10f      	bne.n	800390c <StartDefaultTask+0x160c>
					operation_state = SCARA_MOVE_TO_TARGET;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
					object_tail_pointer = (object_tail_pointer+1)%8;
 80038f2:	f897 393e 	ldrb.w	r3, [r7, #2366]	; 0x93e
 80038f6:	3301      	adds	r3, #1
 80038f8:	425a      	negs	r2, r3
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	f002 0207 	and.w	r2, r2, #7
 8003902:	bf58      	it	pl
 8003904:	4253      	negpl	r3, r2
 8003906:	f887 393e 	strb.w	r3, [r7, #2366]	; 0x93e
 800390a:	e004      	b.n	8003916 <StartDefaultTask+0x1616>
				}else{
					operation_state += 1; //next state
 800390c:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003910:	3301      	adds	r3, #1
 8003912:	f887 393f 	strb.w	r3, [r7, #2367]	; 0x93f
				}
				lowlayer_readTruePosition(&positionNext);
 8003916:	483b      	ldr	r0, [pc, #236]	; (8003a04 <StartDefaultTask+0x1704>)
 8003918:	f001 fae6 	bl	8004ee8 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 800391c:	4839      	ldr	r0, [pc, #228]	; (8003a04 <StartDefaultTask+0x1704>)
 800391e:	f000 fbbf 	bl	80040a0 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003922:	e058      	b.n	80039d6 <StartDefaultTask+0x16d6>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8003924:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003928:	2b02      	cmp	r3, #2
 800392a:	d054      	beq.n	80039d6 <StartDefaultTask+0x16d6>
 800392c:	f897 393f 	ldrb.w	r3, [r7, #2367]	; 0x93f
 8003930:	2b06      	cmp	r3, #6
 8003932:	d050      	beq.n	80039d6 <StartDefaultTask+0x16d6>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003934:	4c34      	ldr	r4, [pc, #208]	; (8003a08 <StartDefaultTask+0x1708>)
 8003936:	4668      	mov	r0, sp
 8003938:	f104 0308 	add.w	r3, r4, #8
 800393c:	22b8      	movs	r2, #184	; 0xb8
 800393e:	4619      	mov	r1, r3
 8003940:	f012 fae4 	bl	8015f0c <memcpy>
 8003944:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003948:	482e      	ldr	r0, [pc, #184]	; (8003a04 <StartDefaultTask+0x1704>)
 800394a:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800394e:	ed91 0b00 	vldr	d0, [r1]
 8003952:	f005 f87b 	bl	8008a4c <scaraFlowDuty>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 38ff 	strb.w	r3, [r7, #2303]	; 0x8ff
				if ( SCARA_STATUS_OK == status) {
 800395c:	f897 38ff 	ldrb.w	r3, [r7, #2303]	; 0x8ff
 8003960:	2b00      	cmp	r3, #0
 8003962:	d113      	bne.n	800398c <StartDefaultTask+0x168c>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003964:	4c28      	ldr	r4, [pc, #160]	; (8003a08 <StartDefaultTask+0x1708>)
 8003966:	4a27      	ldr	r2, [pc, #156]	; (8003a04 <StartDefaultTask+0x1704>)
 8003968:	ab2c      	add	r3, sp, #176	; 0xb0
 800396a:	4611      	mov	r1, r2
 800396c:	22c0      	movs	r2, #192	; 0xc0
 800396e:	4618      	mov	r0, r3
 8003970:	f012 facc 	bl	8015f0c <memcpy>
 8003974:	4668      	mov	r0, sp
 8003976:	f104 0310 	add.w	r3, r4, #16
 800397a:	22b0      	movs	r2, #176	; 0xb0
 800397c:	4619      	mov	r1, r3
 800397e:	f012 fac5 	bl	8015f0c <memcpy>
 8003982:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003986:	f001 fc3f 	bl	8005208 <lowlayer_computeAndWritePulse>
		  break;
 800398a:	e024      	b.n	80039d6 <StartDefaultTask+0x16d6>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800398c:	2303      	movs	r3, #3
 800398e:	f887 3955 	strb.w	r3, [r7, #2389]	; 0x955
					  detail_array[0] = status;
 8003992:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003996:	f897 28ff 	ldrb.w	r2, [r7, #2303]	; 0x8ff
 800399a:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800399c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	f207 62fc 	addw	r2, r7, #1788	; 0x6fc
 80039a6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80039aa:	4413      	add	r3, r2
 80039ac:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2301      	movs	r3, #1
 80039b4:	2007      	movs	r0, #7
 80039b6:	f7fe faf3 	bl	8001fa0 <commandRespond1>
 80039ba:	f8c7 0924 	str.w	r0, [r7, #2340]	; 0x924
					  total_respond_length += respond_lenght;
 80039be:	f8d7 2958 	ldr.w	r2, [r7, #2392]	; 0x958
 80039c2:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80039c6:	4413      	add	r3, r2
 80039c8:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
		  break;
 80039cc:	e003      	b.n	80039d6 <StartDefaultTask+0x16d6>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 80039ce:	bf00      	nop
 80039d0:	e01c      	b.n	8003a0c <StartDefaultTask+0x170c>
				  break;
 80039d2:	bf00      	nop
 80039d4:	e01a      	b.n	8003a0c <StartDefaultTask+0x170c>
		  break;
 80039d6:	bf00      	nop
		  }
	  }
	  break;
 80039d8:	e018      	b.n	8003a0c <StartDefaultTask+0x170c>
	  break;
 80039da:	bf00      	nop
 80039dc:	e017      	b.n	8003a0e <StartDefaultTask+0x170e>
 80039de:	bf00      	nop
 80039e0:	40000000 	.word	0x40000000
 80039e4:	3f847ae1 	.word	0x3f847ae1
 80039e8:	20000040 	.word	0x20000040
 80039ec:	20000028 	.word	0x20000028
 80039f0:	20000050 	.word	0x20000050
 80039f4:	20000008 	.word	0x20000008
 80039f8:	20000038 	.word	0x20000038
 80039fc:	20000020 	.word	0x20000020
 8003a00:	0801b50c 	.word	0x0801b50c
 8003a04:	2000bac0 	.word	0x2000bac0
 8003a08:	2000b940 	.word	0x2000b940
	  break;
 8003a0c:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 8003a0e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dd08      	ble.n	8003a28 <StartDefaultTask+0x1728>
		CDC_Transmit_FS(respond, total_respond_length);
 8003a16:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f011 fdf6 	bl	8015614 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8003a28:	f897 3957 	ldrb.w	r3, [r7, #2391]	; 0x957
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f006 ff05 	bl	800a83c <scaraSetMethod>
	  scaraSetMode(current_mode);
 8003a32:	f897 3956 	ldrb.w	r3, [r7, #2390]	; 0x956
 8003a36:	4618      	mov	r0, r3
 8003a38:	f006 fef0 	bl	800a81c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8003a3c:	f897 3955 	ldrb.w	r3, [r7, #2389]	; 0x955
 8003a40:	4618      	mov	r0, r3
 8003a42:	f006 fedb 	bl	800a7fc <scaraSetDutyState>

    osDelay(1);
 8003a46:	2001      	movs	r0, #1
 8003a48:	f00e fefe 	bl	8012848 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8003a4c:	f7fe bcc0 	b.w	80023d0 <StartDefaultTask+0xd0>

08003a50 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a52:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8003a56:	af70      	add	r7, sp, #448	; 0x1c0
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8003a5c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003a60:	2201      	movs	r2, #1
 8003a62:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003a64:	4964      	ldr	r1, [pc, #400]	; (8003bf8 <Start_USB_RX_Task+0x1a8>)
 8003a66:	4865      	ldr	r0, [pc, #404]	; (8003bfc <Start_USB_RX_Task+0x1ac>)
 8003a68:	f000 ffa8 	bl	80049bc <ringBuff_DistanceOf>
 8003a6c:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 8003a70:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d0f4      	beq.n	8003a64 <Start_USB_RX_Task+0x14>
 8003a7a:	466b      	mov	r3, sp
 8003a7c:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8003a7e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003a82:	1c58      	adds	r0, r3, #1
 8003a84:	1e43      	subs	r3, r0, #1
 8003a86:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	00d4      	lsls	r4, r2, #3
 8003a9c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003aa0:	00cb      	lsls	r3, r1, #3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	00d4      	lsls	r4, r2, #3
 8003ab4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003ab8:	00cb      	lsls	r3, r1, #3
 8003aba:	4603      	mov	r3, r0
 8003abc:	3307      	adds	r3, #7
 8003abe:	08db      	lsrs	r3, r3, #3
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	ebad 0d03 	sub.w	sp, sp, r3
 8003ac6:	ab70      	add	r3, sp, #448	; 0x1c0
 8003ac8:	3300      	adds	r3, #0
 8003aca:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8003ace:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8003ad2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4848      	ldr	r0, [pc, #288]	; (8003bfc <Start_USB_RX_Task+0x1ac>)
 8003adc:	f000 ff4d 	bl	800497a <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 8003ae0:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8003ae4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f107 020c 	add.w	r2, r7, #12
 8003aee:	4619      	mov	r1, r3
 8003af0:	f7fe fb04 	bl	80020fc <unPackPayload>
 8003af4:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8003af8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d077      	beq.n	8003bf2 <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8003b02:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003b06:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8003b0a:	f107 000c 	add.w	r0, r7, #12
 8003b0e:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8003b12:	f7fd fa39 	bl	8000f88 <packetRead>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 8003b1c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b20:	2287      	movs	r2, #135	; 0x87
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f012 fa15 	bl	8015f54 <memset>
				  detail_length = 0;
 8003b2a:	f107 0308 	add.w	r3, r7, #8
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8003b32:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8003b36:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	936f      	str	r3, [sp, #444]	; 0x1bc
 8003b40:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b44:	936e      	str	r3, [sp, #440]	; 0x1b8
 8003b46:	4668      	mov	r0, sp
 8003b48:	f104 0308 	add.w	r3, r4, #8
 8003b4c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8003b50:	4619      	mov	r1, r3
 8003b52:	f012 f9db 	bl	8015f0c <memcpy>
 8003b56:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f7fe f894 	bl	8001c88 <commandReply>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 8003b66:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003b6a:	2b09      	cmp	r3, #9
 8003b6c:	d123      	bne.n	8003bb6 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 8003b74:	e008      	b.n	8003b88 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <Start_USB_RX_Task+0x1b0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00f f872 	bl	8012c68 <osMailAlloc>
 8003b84:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 8003b88:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f2      	beq.n	8003b76 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8003b90:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003b94:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8003b9e:	f012 f9b5 	bl	8015f0c <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <Start_USB_RX_Task+0x1b0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8003baa:	4618      	mov	r0, r3
 8003bac:	f00f f872 	bl	8012c94 <osMailPut>
 8003bb0:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8003bb4:	e01d      	b.n	8003bf2 <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8003bb6:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8003bba:	2b0a      	cmp	r3, #10
 8003bbc:	d019      	beq.n	8003bf2 <Start_USB_RX_Task+0x1a2>

				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8003bbe:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 8003bc2:	f107 0308 	add.w	r3, r7, #8
 8003bc6:	681c      	ldr	r4, [r3, #0]
 8003bc8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003bcc:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8003bd0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	f7fe f9e2 	bl	8001fa0 <commandRespond1>
 8003bdc:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8003be0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f011 fd11 	bl	8015614 <CDC_Transmit_FS>
 8003bf2:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8003bf4:	e736      	b.n	8003a64 <Start_USB_RX_Task+0x14>
 8003bf6:	bf00      	nop
 8003bf8:	0801b5c8 	.word	0x0801b5c8
 8003bfc:	20000064 	.word	0x20000064
 8003c00:	2000acbc 	.word	0x2000acbc

08003c04 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b292      	uxth	r2, r2
 8003c14:	801a      	strh	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	611a      	str	r2, [r3, #16]
 8003c50:	615a      	str	r2, [r3, #20]
 8003c52:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c56:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003c5a:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c5e:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <MX_FSMC_Init+0xbc>)
 8003c60:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8003c68:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c70:	2208      	movs	r2, #8
 8003c72:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003c74:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c76:	2210      	movs	r2, #16
 8003c78:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003cb8:	230f      	movs	r3, #15
 8003cba:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003cbc:	230f      	movs	r3, #15
 8003cbe:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003cc0:	23ff      	movs	r3, #255	; 0xff
 8003cc2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003cc8:	2310      	movs	r3, #16
 8003cca:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003ccc:	2311      	movs	r3, #17
 8003cce:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <MX_FSMC_Init+0xb8>)
 8003cdc:	f008 fb98 	bl	800c410 <HAL_NOR_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003ce6:	f000 fda9 	bl	800483c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003cea:	bf00      	nop
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000acc8 	.word	0x2000acc8
 8003cf8:	a0000104 	.word	0xa0000104

08003cfc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003d10:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_FSMC_MspInit+0xa8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d140      	bne.n	8003d9a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8003d18:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <HAL_FSMC_MspInit+0xa8>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <HAL_FSMC_MspInit+0xac>)
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <HAL_FSMC_MspInit+0xac>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6393      	str	r3, [r2, #56]	; 0x38
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_FSMC_MspInit+0xac>)
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003d3a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003d3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d40:	2302      	movs	r3, #2
 8003d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4815      	ldr	r0, [pc, #84]	; (8003dac <HAL_FSMC_MspInit+0xb0>)
 8003d56:	f008 f9a7 	bl	800c0a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003d5a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003d5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	480e      	ldr	r0, [pc, #56]	; (8003db0 <HAL_FSMC_MspInit+0xb4>)
 8003d76:	f008 f997 	bl	800c0a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d86:	2303      	movs	r3, #3
 8003d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d8e:	1d3b      	adds	r3, r7, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4808      	ldr	r0, [pc, #32]	; (8003db4 <HAL_FSMC_MspInit+0xb8>)
 8003d94:	f008 f988 	bl	800c0a8 <HAL_GPIO_Init>
 8003d98:	e000      	b.n	8003d9c <HAL_FSMC_MspInit+0xa0>
    return;
 8003d9a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20001054 	.word	0x20001054
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40020c00 	.word	0x40020c00
 8003db4:	40020400 	.word	0x40020400

08003db8 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003dc0:	f7ff ff9c 	bl	8003cfc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	0000      	movs	r0, r0
	...

08003dd0 <update_gcode_point>:
 */

#include "gcode_handler.h"

void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, SCARA_Gcode_Cor_TypeDef gcode_point)
{
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	b590      	push	{r4, r7, lr}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	f107 001c 	add.w	r0, r7, #28
 8003dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	duty_cmd->target_point.x = (double)gcode_point.X * COR_INVERSE_SCALE + offset_x;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fc fb9d 	bl	8000524 <__aeabi_i2d>
 8003dea:	a347      	add	r3, pc, #284	; (adr r3, 8003f08 <update_gcode_point+0x138>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fc02 	bl	80005f8 <__aeabi_dmul>
 8003df4:	4603      	mov	r3, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4b44      	ldr	r3, [pc, #272]	; (8003f10 <update_gcode_point+0x140>)
 8003dfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e02:	461a      	mov	r2, r3
 8003e04:	4623      	mov	r3, r4
 8003e06:	f7fc fa41 	bl	800028c <__adddf3>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    duty_cmd->target_point.y = (double)gcode_point.Y * COR_INVERSE_SCALE + offset_y;
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc fb84 	bl	8000524 <__aeabi_i2d>
 8003e1c:	a33a      	add	r3, pc, #232	; (adr r3, 8003f08 <update_gcode_point+0x138>)
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f7fc fbe9 	bl	80005f8 <__aeabi_dmul>
 8003e26:	4603      	mov	r3, r0
 8003e28:	460c      	mov	r4, r1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <update_gcode_point+0x144>)
 8003e30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	f7fc fa28 	bl	800028c <__adddf3>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    if(gcode_point.type_define[1] == UP_Z){
 8003e46:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d10f      	bne.n	8003e6e <update_gcode_point+0x9e>
  	  duty_cmd->target_point.z = up_z_height + offset_z;
 8003e4e:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <update_gcode_point+0x148>)
 8003e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e54:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <update_gcode_point+0x14c>)
 8003e56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4623      	mov	r3, r4
 8003e5e:	f7fc fa15 	bl	800028c <__adddf3>
 8003e62:	4603      	mov	r3, r0
 8003e64:	460c      	mov	r4, r1
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8003e6c:	e00e      	b.n	8003e8c <update_gcode_point+0xbc>
    }else{
  	  duty_cmd->target_point.z = down_z_height + offset_z;
 8003e6e:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <update_gcode_point+0x150>)
 8003e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <update_gcode_point+0x14c>)
 8003e76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	f7fc fa05 	bl	800028c <__adddf3>
 8003e82:	4603      	mov	r3, r0
 8003e84:	460c      	mov	r4, r1
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
    }
    duty_cmd->target_point.roll = roll_angle;
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <update_gcode_point+0x154>)
 8003e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
    duty_cmd->v_factor = (double)gcode_point.F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc fb42 	bl	8000524 <__aeabi_i2d>
 8003ea0:	a319      	add	r3, pc, #100	; (adr r3, 8003f08 <update_gcode_point+0x138>)
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	f7fc fba7 	bl	80005f8 <__aeabi_dmul>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	460c      	mov	r4, r1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <update_gcode_point+0x158>)
 8003eb8:	f7fc fcc8 	bl	800084c <__aeabi_ddiv>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
    duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	741a      	strb	r2, [r3, #16]
    duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	731a      	strb	r2, [r3, #12]
    duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	745a      	strb	r2, [r3, #17]
    if(gcode_point.type_define[0] == LINEAR_TYPE){
 8003ed8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d103      	bne.n	8003ee8 <update_gcode_point+0x118>
  	  duty_cmd->path_type = DUTY_PATH_LINE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	739a      	strb	r2, [r3, #14]
 8003ee6:	e002      	b.n	8003eee <update_gcode_point+0x11e>
    }else if(gcode_point.type_define[0] == ARC_AW_TYPE){
 8003ee8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003eec:	2b03      	cmp	r3, #3

    }else if(gcode_point.type_define[0] == ARC_CW_TYPE){

    }
    duty_cmd->path_type = DUTY_PATH_LINE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	739a      	strb	r2, [r3, #14]
    duty_cmd->space_type = DUTY_SPACE_TASK;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	735a      	strb	r2, [r3, #13]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f04:	b004      	add	sp, #16
 8003f06:	4770      	bx	lr
 8003f08:	a0000000 	.word	0xa0000000
 8003f0c:	3eb0c6f7 	.word	0x3eb0c6f7
 8003f10:	20004dd0 	.word	0x20004dd0
 8003f14:	2000aba8 	.word	0x2000aba8
 8003f18:	20004db8 	.word	0x20004db8
 8003f1c:	2000aba0 	.word	0x2000aba0
 8003f20:	20004dc0 	.word	0x20004dc0
 8003f24:	20004dc8 	.word	0x20004dc8
 8003f28:	40877000 	.word	0x40877000

08003f2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <MX_GPIO_Init+0x160>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4a50      	ldr	r2, [pc, #320]	; (800408c <MX_GPIO_Init+0x160>)
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f50:	6313      	str	r3, [r2, #48]	; 0x30
 8003f52:	4b4e      	ldr	r3, [pc, #312]	; (800408c <MX_GPIO_Init+0x160>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <MX_GPIO_Init+0x160>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a49      	ldr	r2, [pc, #292]	; (800408c <MX_GPIO_Init+0x160>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	4b47      	ldr	r3, [pc, #284]	; (800408c <MX_GPIO_Init+0x160>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	4b43      	ldr	r3, [pc, #268]	; (800408c <MX_GPIO_Init+0x160>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a42      	ldr	r2, [pc, #264]	; (800408c <MX_GPIO_Init+0x160>)
 8003f84:	f043 0310 	orr.w	r3, r3, #16
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b40      	ldr	r3, [pc, #256]	; (800408c <MX_GPIO_Init+0x160>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	4b3c      	ldr	r3, [pc, #240]	; (800408c <MX_GPIO_Init+0x160>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4a3b      	ldr	r2, [pc, #236]	; (800408c <MX_GPIO_Init+0x160>)
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa6:	4b39      	ldr	r3, [pc, #228]	; (800408c <MX_GPIO_Init+0x160>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4b35      	ldr	r3, [pc, #212]	; (800408c <MX_GPIO_Init+0x160>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a34      	ldr	r2, [pc, #208]	; (800408c <MX_GPIO_Init+0x160>)
 8003fbc:	f043 0308 	orr.w	r3, r3, #8
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc2:	4b32      	ldr	r3, [pc, #200]	; (800408c <MX_GPIO_Init+0x160>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8003fd4:	482e      	ldr	r0, [pc, #184]	; (8004090 <MX_GPIO_Init+0x164>)
 8003fd6:	f008 fa01 	bl	800c3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f641 0148 	movw	r1, #6216	; 0x1848
 8003fe0:	482c      	ldr	r0, [pc, #176]	; (8004094 <MX_GPIO_Init+0x168>)
 8003fe2:	f008 f9fb 	bl	800c3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003fec:	482a      	ldr	r0, [pc, #168]	; (8004098 <MX_GPIO_Init+0x16c>)
 8003fee:	f008 f9f5 	bl	800c3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8003ff2:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8003ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004000:	2300      	movs	r3, #0
 8004002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004004:	f107 0314 	add.w	r3, r7, #20
 8004008:	4619      	mov	r1, r3
 800400a:	4821      	ldr	r0, [pc, #132]	; (8004090 <MX_GPIO_Init+0x164>)
 800400c:	f008 f84c 	bl	800c0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8004010:	f640 0348 	movw	r3, #2120	; 0x848
 8004014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004016:	2301      	movs	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401e:	2300      	movs	r3, #0
 8004020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	4619      	mov	r1, r3
 8004028:	481a      	ldr	r0, [pc, #104]	; (8004094 <MX_GPIO_Init+0x168>)
 800402a:	f008 f83d 	bl	800c0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 800402e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004034:	2301      	movs	r3, #1
 8004036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403c:	2303      	movs	r3, #3
 800403e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8004040:	f107 0314 	add.w	r3, r7, #20
 8004044:	4619      	mov	r1, r3
 8004046:	4813      	ldr	r0, [pc, #76]	; (8004094 <MX_GPIO_Init+0x168>)
 8004048:	f008 f82e 	bl	800c0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 800404c:	f242 0304 	movw	r3, #8196	; 0x2004
 8004050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004056:	2301      	movs	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800405a:	f107 0314 	add.w	r3, r7, #20
 800405e:	4619      	mov	r1, r3
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <MX_GPIO_Init+0x168>)
 8004062:	f008 f821 	bl	800c0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8004066:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800406a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406c:	2301      	movs	r3, #1
 800406e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	4619      	mov	r1, r3
 800407e:	4806      	ldr	r0, [pc, #24]	; (8004098 <MX_GPIO_Init+0x16c>)
 8004080:	f008 f812 	bl	800c0a8 <HAL_GPIO_Init>

}
 8004084:	bf00      	nop
 8004086:	3728      	adds	r7, #40	; 0x28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	40020400 	.word	0x40020400
 8004094:	40020c00 	.word	0x40020c00
 8004098:	40020000 	.word	0x40020000
 800409c:	00000000 	.word	0x00000000

080040a0 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 80040a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a2:	b08b      	sub	sp, #44	; 0x2c
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80040ae:	eeb0 0a47 	vmov.f32	s0, s14
 80040b2:	eef0 0a67 	vmov.f32	s1, s15
 80040b6:	f015 fd17 	bl	8019ae8 <cos>
 80040ba:	ec51 0b10 	vmov	r0, r1, d0
 80040be:	a38e      	add	r3, pc, #568	; (adr r3, 80042f8 <kinematicForward+0x258>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f7fc fa98 	bl	80005f8 <__aeabi_dmul>
 80040c8:	4603      	mov	r3, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	461d      	mov	r5, r3
 80040ce:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80040dc:	461a      	mov	r2, r3
 80040de:	4623      	mov	r3, r4
 80040e0:	f7fc f8d4 	bl	800028c <__adddf3>
 80040e4:	4603      	mov	r3, r0
 80040e6:	460c      	mov	r4, r1
 80040e8:	ec44 3b17 	vmov	d7, r3, r4
 80040ec:	eeb0 0a47 	vmov.f32	s0, s14
 80040f0:	eef0 0a67 	vmov.f32	s1, s15
 80040f4:	f015 fcf8 	bl	8019ae8 <cos>
 80040f8:	ec51 0b10 	vmov	r0, r1, d0
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	4b83      	ldr	r3, [pc, #524]	; (8004310 <kinematicForward+0x270>)
 8004102:	f7fc fa79 	bl	80005f8 <__aeabi_dmul>
 8004106:	4603      	mov	r3, r0
 8004108:	460c      	mov	r4, r1
 800410a:	461a      	mov	r2, r3
 800410c:	4623      	mov	r3, r4
 800410e:	4628      	mov	r0, r5
 8004110:	4631      	mov	r1, r6
 8004112:	f7fc f8bb 	bl	800028c <__adddf3>
 8004116:	4603      	mov	r3, r0
 8004118:	460c      	mov	r4, r1
 800411a:	461d      	mov	r5, r3
 800411c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800412a:	461a      	mov	r2, r3
 800412c:	4623      	mov	r3, r4
 800412e:	f7fc f8ad 	bl	800028c <__adddf3>
 8004132:	4603      	mov	r3, r0
 8004134:	460c      	mov	r4, r1
 8004136:	4618      	mov	r0, r3
 8004138:	4621      	mov	r1, r4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004140:	461a      	mov	r2, r3
 8004142:	4623      	mov	r3, r4
 8004144:	f7fc f8a0 	bl	8000288 <__aeabi_dsub>
 8004148:	4603      	mov	r3, r0
 800414a:	460c      	mov	r4, r1
 800414c:	ec44 3b17 	vmov	d7, r3, r4
 8004150:	eeb0 0a47 	vmov.f32	s0, s14
 8004154:	eef0 0a67 	vmov.f32	s1, s15
 8004158:	f015 fcc6 	bl	8019ae8 <cos>
 800415c:	ec51 0b10 	vmov	r0, r1, d0
 8004160:	a363      	add	r3, pc, #396	; (adr r3, 80042f0 <kinematicForward+0x250>)
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f7fc fa47 	bl	80005f8 <__aeabi_dmul>
 800416a:	4603      	mov	r3, r0
 800416c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 800416e:	461a      	mov	r2, r3
 8004170:	4623      	mov	r3, r4
 8004172:	4628      	mov	r0, r5
 8004174:	4631      	mov	r1, r6
 8004176:	f7fc f889 	bl	800028c <__adddf3>
 800417a:	4603      	mov	r3, r0
 800417c:	460c      	mov	r4, r1
 800417e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004188:	eeb0 0a47 	vmov.f32	s0, s14
 800418c:	eef0 0a67 	vmov.f32	s1, s15
 8004190:	f015 fd3a 	bl	8019c08 <sin>
 8004194:	ec51 0b10 	vmov	r0, r1, d0
 8004198:	a357      	add	r3, pc, #348	; (adr r3, 80042f8 <kinematicForward+0x258>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f7fc fa2b 	bl	80005f8 <__aeabi_dmul>
 80041a2:	4603      	mov	r3, r0
 80041a4:	460c      	mov	r4, r1
 80041a6:	461d      	mov	r5, r3
 80041a8:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80041b6:	461a      	mov	r2, r3
 80041b8:	4623      	mov	r3, r4
 80041ba:	f7fc f867 	bl	800028c <__adddf3>
 80041be:	4603      	mov	r3, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	ec44 3b17 	vmov	d7, r3, r4
 80041c6:	eeb0 0a47 	vmov.f32	s0, s14
 80041ca:	eef0 0a67 	vmov.f32	s1, s15
 80041ce:	f015 fd1b 	bl	8019c08 <sin>
 80041d2:	ec51 0b10 	vmov	r0, r1, d0
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	4b4d      	ldr	r3, [pc, #308]	; (8004310 <kinematicForward+0x270>)
 80041dc:	f7fc fa0c 	bl	80005f8 <__aeabi_dmul>
 80041e0:	4603      	mov	r3, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	461a      	mov	r2, r3
 80041e6:	4623      	mov	r3, r4
 80041e8:	4628      	mov	r0, r5
 80041ea:	4631      	mov	r1, r6
 80041ec:	f7fc f84e 	bl	800028c <__adddf3>
 80041f0:	4603      	mov	r3, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	461d      	mov	r5, r3
 80041f6:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004204:	461a      	mov	r2, r3
 8004206:	4623      	mov	r3, r4
 8004208:	f7fc f840 	bl	800028c <__adddf3>
 800420c:	4603      	mov	r3, r0
 800420e:	460c      	mov	r4, r1
 8004210:	4618      	mov	r0, r3
 8004212:	4621      	mov	r1, r4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800421a:	461a      	mov	r2, r3
 800421c:	4623      	mov	r3, r4
 800421e:	f7fc f833 	bl	8000288 <__aeabi_dsub>
 8004222:	4603      	mov	r3, r0
 8004224:	460c      	mov	r4, r1
 8004226:	ec44 3b17 	vmov	d7, r3, r4
 800422a:	eeb0 0a47 	vmov.f32	s0, s14
 800422e:	eef0 0a67 	vmov.f32	s1, s15
 8004232:	f015 fce9 	bl	8019c08 <sin>
 8004236:	ec51 0b10 	vmov	r0, r1, d0
 800423a:	a32d      	add	r3, pc, #180	; (adr r3, 80042f0 <kinematicForward+0x250>)
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f7fc f9da 	bl	80005f8 <__aeabi_dmul>
 8004244:	4603      	mov	r3, r0
 8004246:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8004248:	461a      	mov	r2, r3
 800424a:	4623      	mov	r3, r4
 800424c:	4628      	mov	r0, r5
 800424e:	4631      	mov	r1, r6
 8004250:	f7fc f81c 	bl	800028c <__adddf3>
 8004254:	4603      	mov	r3, r0
 8004256:	460c      	mov	r4, r1
 8004258:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8004262:	461a      	mov	r2, r3
 8004264:	4623      	mov	r3, r4
 8004266:	a126      	add	r1, pc, #152	; (adr r1, 8004300 <kinematicForward+0x260>)
 8004268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800426c:	f7fc f80c 	bl	8000288 <__aeabi_dsub>
 8004270:	4603      	mov	r3, r0
 8004272:	460c      	mov	r4, r1
 8004274:	4618      	mov	r0, r3
 8004276:	4621      	mov	r1, r4
 8004278:	a323      	add	r3, pc, #140	; (adr r3, 8004308 <kinematicForward+0x268>)
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f7fc f803 	bl	8000288 <__aeabi_dsub>
 8004282:	4603      	mov	r3, r0
 8004284:	460c      	mov	r4, r1
 8004286:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004296:	461a      	mov	r2, r3
 8004298:	4623      	mov	r3, r4
 800429a:	f7fb fff7 	bl	800028c <__adddf3>
 800429e:	4603      	mov	r3, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	4618      	mov	r0, r3
 80042a4:	4621      	mov	r1, r4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80042ac:	461a      	mov	r2, r3
 80042ae:	4623      	mov	r3, r4
 80042b0:	f7fb ffea 	bl	8000288 <__aeabi_dsub>
 80042b4:	4603      	mov	r3, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80042c2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80042cc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80042d6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80042e0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 80042e4:	2301      	movs	r3, #1
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	372c      	adds	r7, #44	; 0x2c
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ee:	bf00      	nop
 80042f0:	80000000 	.word	0x80000000
 80042f4:	40402e14 	.word	0x40402e14
 80042f8:	00000000 	.word	0x00000000
 80042fc:	4068a000 	.word	0x4068a000
 8004300:	00000000 	.word	0x00000000
 8004304:	406a6000 	.word	0x406a6000
 8004308:	e0000000 	.word	0xe0000000
 800430c:	40536b22 	.word	0x40536b22
 8004310:	40640000 	.word	0x40640000
 8004314:	00000000 	.word	0x00000000

08004318 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8004318:	b082      	sub	sp, #8
 800431a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800431e:	b0a0      	sub	sp, #128	; 0x80
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8004328:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004332:	a1f2      	add	r1, pc, #968	; (adr r1, 80046fc <kinematicInverse+0x3e4>)
 8004334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004338:	f7fb ffa6 	bl	8000288 <__aeabi_dsub>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004350:	eeb0 0a47 	vmov.f32	s0, s14
 8004354:	eef0 0a67 	vmov.f32	s1, s15
 8004358:	f015 fbc6 	bl	8019ae8 <cos>
 800435c:	ec51 0b10 	vmov	r0, r1, d0
 8004360:	a3e8      	add	r3, pc, #928	; (adr r3, 8004704 <kinematicInverse+0x3ec>)
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f7fc f947 	bl	80005f8 <__aeabi_dmul>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4650      	mov	r0, sl
 8004370:	4659      	mov	r1, fp
 8004372:	f7fb ff89 	bl	8000288 <__aeabi_dsub>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800438a:	eeb0 0a47 	vmov.f32	s0, s14
 800438e:	eef0 0a67 	vmov.f32	s1, s15
 8004392:	f015 fc39 	bl	8019c08 <sin>
 8004396:	ec51 0b10 	vmov	r0, r1, d0
 800439a:	a3da      	add	r3, pc, #872	; (adr r3, 8004704 <kinematicInverse+0x3ec>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fc f92a 	bl	80005f8 <__aeabi_dmul>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4650      	mov	r0, sl
 80043aa:	4659      	mov	r1, fp
 80043ac:	f7fb ff6c 	bl	8000288 <__aeabi_dsub>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80043b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80043bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043c0:	f7fc f91a 	bl	80005f8 <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4692      	mov	sl, r2
 80043ca:	469b      	mov	fp, r3
 80043cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043d4:	f7fc f910 	bl	80005f8 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4650      	mov	r0, sl
 80043de:	4659      	mov	r1, fp
 80043e0:	f7fb ff54 	bl	800028c <__adddf3>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	a3c7      	add	r3, pc, #796	; (adr r3, 800470c <kinematicInverse+0x3f4>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f7fb ff49 	bl	8000288 <__aeabi_dsub>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	4bbb      	ldr	r3, [pc, #748]	; (80046f0 <kinematicInverse+0x3d8>)
 8004404:	f7fb ff40 	bl	8000288 <__aeabi_dsub>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	a3b3      	add	r3, pc, #716	; (adr r3, 80046e0 <kinematicInverse+0x3c8>)
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	f7fc fa19 	bl	800084c <__aeabi_ddiv>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8004422:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004426:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800442a:	f7fc f8e5 	bl	80005f8 <__aeabi_dmul>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	49af      	ldr	r1, [pc, #700]	; (80046f4 <kinematicInverse+0x3dc>)
 8004438:	f7fb ff26 	bl	8000288 <__aeabi_dsub>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004450:	f7fc fb44 	bl	8000adc <__aeabi_dcmplt>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <kinematicInverse+0x146>
		return FALSE;
 800445a:	2300      	movs	r3, #0
 800445c:	e136      	b.n	80046cc <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 800445e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8004462:	f015 fc5b 	bl	8019d1c <sqrt>
 8004466:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 800446a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38
 800446e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004470:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8004476:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800447a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800447e:	f015 fc4b 	bl	8019d18 <atan2>
 8004482:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8004486:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800448a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800448e:	f015 fc43 	bl	8019d18 <atan2>
 8004492:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8004496:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800449a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800449e:	f7fb fef3 	bl	8000288 <__aeabi_dsub>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4614      	mov	r4, r2
 80044a8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80044ac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80044b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044b4:	f7fb fee8 	bl	8000288 <__aeabi_dsub>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4690      	mov	r8, r2
 80044be:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80044c2:	4642      	mov	r2, r8
 80044c4:	464b      	mov	r3, r9
 80044c6:	4620      	mov	r0, r4
 80044c8:	4629      	mov	r1, r5
 80044ca:	f7fc fb11 	bl	8000af0 <__aeabi_dcmple>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 80044d4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80044d8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80044dc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80044e0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80044e4:	e007      	b.n	80044f6 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 80044e6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80044ea:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 80044ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80044f2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	4b7f      	ldr	r3, [pc, #508]	; (80046f8 <kinematicInverse+0x3e0>)
 80044fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004500:	f7fc f87a 	bl	80005f8 <__aeabi_dmul>
 8004504:	4603      	mov	r3, r0
 8004506:	460c      	mov	r4, r1
 8004508:	4618      	mov	r0, r3
 800450a:	4621      	mov	r1, r4
 800450c:	a376      	add	r3, pc, #472	; (adr r3, 80046e8 <kinematicInverse+0x3d0>)
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	f7fb febb 	bl	800028c <__adddf3>
 8004516:	4603      	mov	r3, r0
 8004518:	460c      	mov	r4, r1
 800451a:	4618      	mov	r0, r3
 800451c:	4621      	mov	r1, r4
 800451e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004522:	f7fc f869 	bl	80005f8 <__aeabi_dmul>
 8004526:	4603      	mov	r3, r0
 8004528:	460c      	mov	r4, r1
 800452a:	4625      	mov	r5, r4
 800452c:	461c      	mov	r4, r3
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	4b71      	ldr	r3, [pc, #452]	; (80046f8 <kinematicInverse+0x3e0>)
 8004534:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004538:	f7fc f85e 	bl	80005f8 <__aeabi_dmul>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004548:	f7fc f856 	bl	80005f8 <__aeabi_dmul>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4620      	mov	r0, r4
 8004552:	4629      	mov	r1, r5
 8004554:	f7fb fe98 	bl	8000288 <__aeabi_dsub>
 8004558:	4603      	mov	r3, r0
 800455a:	460c      	mov	r4, r1
 800455c:	4625      	mov	r5, r4
 800455e:	461c      	mov	r4, r3
 8004560:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004564:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004568:	f7fc f846 	bl	80005f8 <__aeabi_dmul>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4690      	mov	r8, r2
 8004572:	4699      	mov	r9, r3
 8004574:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004578:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800457c:	f7fc f83c 	bl	80005f8 <__aeabi_dmul>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4640      	mov	r0, r8
 8004586:	4649      	mov	r1, r9
 8004588:	f7fb fe80 	bl	800028c <__adddf3>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4620      	mov	r0, r4
 8004592:	4629      	mov	r1, r5
 8004594:	f7fc f95a 	bl	800084c <__aeabi_ddiv>
 8004598:	4603      	mov	r3, r0
 800459a:	460c      	mov	r4, r1
 800459c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	4b54      	ldr	r3, [pc, #336]	; (80046f8 <kinematicInverse+0x3e0>)
 80045a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80045aa:	f7fc f825 	bl	80005f8 <__aeabi_dmul>
 80045ae:	4603      	mov	r3, r0
 80045b0:	460c      	mov	r4, r1
 80045b2:	4618      	mov	r0, r3
 80045b4:	4621      	mov	r1, r4
 80045b6:	a34c      	add	r3, pc, #304	; (adr r3, 80046e8 <kinematicInverse+0x3d0>)
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f7fb fe66 	bl	800028c <__adddf3>
 80045c0:	4603      	mov	r3, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	4618      	mov	r0, r3
 80045c6:	4621      	mov	r1, r4
 80045c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80045cc:	f7fc f814 	bl	80005f8 <__aeabi_dmul>
 80045d0:	4603      	mov	r3, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	4625      	mov	r5, r4
 80045d6:	461c      	mov	r4, r3
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <kinematicInverse+0x3e0>)
 80045de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80045e2:	f7fc f809 	bl	80005f8 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045f2:	f7fc f801 	bl	80005f8 <__aeabi_dmul>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4620      	mov	r0, r4
 80045fc:	4629      	mov	r1, r5
 80045fe:	f7fb fe45 	bl	800028c <__adddf3>
 8004602:	4603      	mov	r3, r0
 8004604:	460c      	mov	r4, r1
 8004606:	4625      	mov	r5, r4
 8004608:	461c      	mov	r4, r3
 800460a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800460e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004612:	f7fb fff1 	bl	80005f8 <__aeabi_dmul>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4690      	mov	r8, r2
 800461c:	4699      	mov	r9, r3
 800461e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004622:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004626:	f7fb ffe7 	bl	80005f8 <__aeabi_dmul>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4640      	mov	r0, r8
 8004630:	4649      	mov	r1, r9
 8004632:	f7fb fe2b 	bl	800028c <__adddf3>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	f7fc f905 	bl	800084c <__aeabi_ddiv>
 8004642:	4603      	mov	r3, r0
 8004644:	460c      	mov	r4, r1
 8004646:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 800464a:	ed97 1b06 	vldr	d1, [r7, #24]
 800464e:	ed97 0b08 	vldr	d0, [r7, #32]
 8004652:	f015 fb61 	bl	8019d18 <atan2>
 8004656:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 800465a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800465e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004662:	f7fb fe13 	bl	800028c <__adddf3>
 8004666:	4603      	mov	r3, r0
 8004668:	460c      	mov	r4, r1
 800466a:	4618      	mov	r0, r3
 800466c:	4621      	mov	r1, r4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004674:	461a      	mov	r2, r3
 8004676:	4623      	mov	r3, r4
 8004678:	f7fb fe06 	bl	8000288 <__aeabi_dsub>
 800467c:	4603      	mov	r3, r0
 800467e:	460c      	mov	r4, r1
 8004680:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8004684:	ed97 3b02 	vldr	d3, [r7, #8]
 8004688:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 800468c:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8004690:	ed97 0b04 	vldr	d0, [r7, #16]
 8004694:	f005 fef8 	bl	800a488 <scaraCheckWorkSpace4>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 800469e:	2300      	movs	r3, #0
 80046a0:	e014      	b.n	80046cc <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80046a8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80046b2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80046bc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80046c6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 80046ca:	2301      	movs	r3, #1
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3780      	adds	r7, #128	; 0x80
 80046d0:	46bd      	mov	sp, r7
 80046d2:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d6:	b002      	add	sp, #8
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	f3af 8000 	nop.w
 80046e0:	00000000 	.word	0x00000000
 80046e4:	40eec800 	.word	0x40eec800
 80046e8:	00000000 	.word	0x00000000
 80046ec:	4068a000 	.word	0x4068a000
 80046f0:	40d90000 	.word	0x40d90000
 80046f4:	3ff00000 	.word	0x3ff00000
 80046f8:	40640000 	.word	0x40640000
 80046fc:	80000000 	.word	0x80000000
 8004700:	4060aa6e 	.word	0x4060aa6e
 8004704:	80000000 	.word	0x80000000
 8004708:	40402e14 	.word	0x40402e14
 800470c:	00000000 	.word	0x00000000
 8004710:	40e2f320 	.word	0x40e2f320

08004714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004718:	f006 ffe2 	bl	800b6e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800471c:	f000 f812 	bl	8004744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004720:	f7ff fc04 	bl	8003f2c <MX_GPIO_Init>
  MX_DMA_Init();
 8004724:	f7fd fd5c 	bl	80021e0 <MX_DMA_Init>
  MX_UART4_Init();
 8004728:	f006 fedc 	bl	800b4e4 <MX_UART4_Init>
  MX_FSMC_Init();
 800472c:	f7ff fa86 	bl	8003c3c <MX_FSMC_Init>
  MX_TIM7_Init();
 8004730:	f006 fe66 	bl	800b400 <MX_TIM7_Init>
  MX_TIM2_Init();
 8004734:	f006 fe16 	bl	800b364 <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004738:	f7fd fd8c 	bl	8002254 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800473c:	f00e f831 	bl	80127a2 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8004740:	e7fe      	b.n	8004740 <main+0x2c>
	...

08004744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b094      	sub	sp, #80	; 0x50
 8004748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800474a:	f107 0320 	add.w	r3, r7, #32
 800474e:	2230      	movs	r2, #48	; 0x30
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f011 fbfe 	bl	8015f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004758:	f107 030c 	add.w	r3, r7, #12
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	4b28      	ldr	r3, [pc, #160]	; (8004810 <SystemClock_Config+0xcc>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <SystemClock_Config+0xcc>)
 8004772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004776:	6413      	str	r3, [r2, #64]	; 0x40
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <SystemClock_Config+0xcc>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004784:	2300      	movs	r3, #0
 8004786:	607b      	str	r3, [r7, #4]
 8004788:	4b22      	ldr	r3, [pc, #136]	; (8004814 <SystemClock_Config+0xd0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <SystemClock_Config+0xd0>)
 800478e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <SystemClock_Config+0xd0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047aa:	2302      	movs	r3, #2
 80047ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80047b4:	2308      	movs	r3, #8
 80047b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80047b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80047bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047be:	2302      	movs	r3, #2
 80047c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80047c2:	2307      	movs	r3, #7
 80047c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047c6:	f107 0320 	add.w	r3, r7, #32
 80047ca:	4618      	mov	r0, r3
 80047cc:	f008 fffa 	bl	800d7c4 <HAL_RCC_OscConfig>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80047d6:	f000 f831 	bl	800483c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047da:	230f      	movs	r3, #15
 80047dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047de:	2302      	movs	r3, #2
 80047e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80047ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047f2:	f107 030c 	add.w	r3, r7, #12
 80047f6:	2105      	movs	r1, #5
 80047f8:	4618      	mov	r0, r3
 80047fa:	f009 fa53 	bl	800dca4 <HAL_RCC_ClockConfig>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004804:	f000 f81a 	bl	800483c <Error_Handler>
  }
}
 8004808:	bf00      	nop
 800480a:	3750      	adds	r7, #80	; 0x50
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	40007000 	.word	0x40007000

08004818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a04      	ldr	r2, [pc, #16]	; (8004838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800482a:	f006 ff7b 	bl	800b724 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40001000 	.word	0x40001000

0800483c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <ringBuff_PushChar+0x1a>
		return FALSE;
 8004860:	2300      	movs	r3, #0
 8004862:	e024      	b.n	80048ae <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	78f9      	ldrb	r1, [r7, #3]
 800486e:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004876:	3301      	adds	r3, #1
 8004878:	425a      	negs	r2, r3
 800487a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800487e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004882:	bf58      	it	pl
 8004884:	4253      	negpl	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004898:	429a      	cmp	r2, r3
 800489a:	d103      	bne.n	80048a4 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 80048ac:	2301      	movs	r3, #1
	}
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <ringBuff_PopChar+0x18>
		return FALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e025      	b.n	800491e <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	5cd2      	ldrb	r2, [r2, r3]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80048e6:	3301      	adds	r3, #1
 80048e8:	425a      	negs	r2, r3
 80048ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80048f2:	bf58      	it	pl
 80048f4:	4253      	negpl	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004908:	429a      	cmp	r2, r3
 800490a:	d103      	bne.n	8004914 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 800491c:	2301      	movs	r3, #1
	}
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004936:	2300      	movs	r3, #0
 8004938:	82fb      	strh	r3, [r7, #22]
 800493a:	e011      	b.n	8004960 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 800493c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	4413      	add	r3, r2
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff ff7e 	bl	800484a <ringBuff_PushChar>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8004954:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004958:	b29b      	uxth	r3, r3
 800495a:	3301      	adds	r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	82fb      	strh	r3, [r7, #22]
 8004960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	dce8      	bgt.n	800493c <ringBuff_PushArray+0x12>
 800496a:	e000      	b.n	800496e <ringBuff_PushArray+0x44>
			break;
 800496c:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 800496e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e00c      	b.n	80049a6 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	4413      	add	r3, r2
 8004992:	4619      	mov	r1, r3
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff ff90 	bl	80048ba <ringBuff_PopChar>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3301      	adds	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	dbee      	blt.n	800498c <ringBuff_PopArray+0x12>
 80049ae:	e000      	b.n	80049b2 <ringBuff_PopArray+0x38>
			break;
 80049b0:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80049b2:	697b      	ldr	r3, [r7, #20]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80049cc:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80049dc:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 80049de:	6838      	ldr	r0, [r7, #0]
 80049e0:	f7fb fbf6 	bl	80001d0 <strlen>
 80049e4:	4603      	mov	r3, r0
 80049e6:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d066      	beq.n	8004ac0 <ringBuff_DistanceOf+0x104>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	e030      	b.n	8004a5a <ringBuff_DistanceOf+0x9e>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	440b      	add	r3, r1
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d103      	bne.n	8004a14 <ringBuff_DistanceOf+0x58>
	                sync_state++;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e00c      	b.n	8004a2e <ringBuff_DistanceOf+0x72>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d102      	bne.n	8004a2a <ringBuff_DistanceOf+0x6e>
	                sync_state = 1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e001      	b.n	8004a2e <ringBuff_DistanceOf+0x72>
	            }else{
	                sync_state = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d101      	bne.n	8004a3a <ringBuff_DistanceOf+0x7e>
	                return distance;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	e048      	b.n	8004acc <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3301      	adds	r3, #1
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	425a      	negs	r2, r3
 8004a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a50:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004a54:	bf58      	it	pl
 8004a56:	4253      	negpl	r3, r2
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	dbca      	blt.n	80049f8 <ringBuff_DistanceOf+0x3c>
 8004a62:	e031      	b.n	8004ac8 <ringBuff_DistanceOf+0x10c>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	440b      	add	r3, r1
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d103      	bne.n	8004a80 <ringBuff_DistanceOf+0xc4>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e00c      	b.n	8004a9a <ringBuff_DistanceOf+0xde>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	781a      	ldrb	r2, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d102      	bne.n	8004a96 <ringBuff_DistanceOf+0xda>
	                sync_state = 1;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e001      	b.n	8004a9a <ringBuff_DistanceOf+0xde>
	            }else{
	                sync_state = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d101      	bne.n	8004aa6 <ringBuff_DistanceOf+0xea>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	e012      	b.n	8004acc <ringBuff_DistanceOf+0x110>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	425a      	negs	r2, r3
 8004ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ab6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004aba:	bf58      	it	pl
 8004abc:	4253      	negpl	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d1cd      	bne.n	8004a64 <ringBuff_DistanceOf+0xa8>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8004ad8:	f000 fdfe 	bl	80056d8 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <lowlayer_scanReset+0x4c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <lowlayer_scanReset+0x4c>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <lowlayer_scanReset+0x4c>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <lowlayer_scanReset+0x4c>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <lowlayer_scanReset+0x50>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <lowlayer_scanReset+0x50>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <lowlayer_scanReset+0x50>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <lowlayer_scanReset+0x54>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <lowlayer_scanReset+0x58>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8004b12:	2200      	movs	r2, #0
 8004b14:	2108      	movs	r1, #8
 8004b16:	4806      	ldr	r0, [pc, #24]	; (8004b30 <lowlayer_scanReset+0x5c>)
 8004b18:	f007 fc60 	bl	800c3dc <HAL_GPIO_WritePin>
}
 8004b1c:	bf00      	nop
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2000ad18 	.word	0x2000ad18
 8004b24:	2000ad2c 	.word	0x2000ad2c
 8004b28:	2000ad28 	.word	0x2000ad28
 8004b2c:	2000ad48 	.word	0x2000ad48
 8004b30:	40020c00 	.word	0x40020c00
 8004b34:	00000000 	.word	0x00000000

08004b38 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8004b42:	f000 fe87 	bl	8005854 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8004b46:	4b98      	ldr	r3, [pc, #608]	; (8004da8 <lowlayer_scanFlow+0x270>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d837      	bhi.n	8004bbe <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8004b4e:	4b96      	ldr	r3, [pc, #600]	; (8004da8 <lowlayer_scanFlow+0x270>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	f1c3 0303 	rsb	r3, r3, #3
 8004b56:	4a95      	ldr	r2, [pc, #596]	; (8004dac <lowlayer_scanFlow+0x274>)
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d121      	bne.n	8004ba2 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8004b5e:	4b92      	ldr	r3, [pc, #584]	; (8004da8 <lowlayer_scanFlow+0x270>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	f1c3 0203 	rsb	r2, r3, #3
 8004b66:	4b90      	ldr	r3, [pc, #576]	; (8004da8 <lowlayer_scanFlow+0x270>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	f1c3 0303 	rsb	r3, r3, #3
 8004b6e:	4990      	ldr	r1, [pc, #576]	; (8004db0 <lowlayer_scanFlow+0x278>)
 8004b70:	568a      	ldrsb	r2, [r1, r2]
 8004b72:	f107 0108 	add.w	r1, r7, #8
 8004b76:	440b      	add	r3, r1
 8004b78:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8004b7c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	425b      	negs	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	b258      	sxtb	r0, r3
 8004b88:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8004b8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	425b      	negs	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	b25a      	sxtb	r2, r3
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	f000 fcd8 	bl	8005550 <lowlayer_writePulse>
 8004ba0:	e00b      	b.n	8004bba <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8004ba2:	4b81      	ldr	r3, [pc, #516]	; (8004da8 <lowlayer_scanFlow+0x270>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b7f      	ldr	r3, [pc, #508]	; (8004da8 <lowlayer_scanFlow+0x270>)
 8004bac:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f000 fccb 	bl	8005550 <lowlayer_writePulse>
		}

		return FALSE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e0d8      	b.n	8004d70 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2108      	movs	r1, #8
 8004bc2:	487c      	ldr	r0, [pc, #496]	; (8004db4 <lowlayer_scanFlow+0x27c>)
 8004bc4:	f007 fc0a 	bl	800c3dc <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8004bc8:	f000 fe28 	bl	800581c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f000 fcbc 	bl	8005550 <lowlayer_writePulse>
		scan_flag = 1;
 8004bd8:	4b77      	ldr	r3, [pc, #476]	; (8004db8 <lowlayer_scanFlow+0x280>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8004bde:	4b77      	ldr	r3, [pc, #476]	; (8004dbc <lowlayer_scanFlow+0x284>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a77      	ldr	r2, [pc, #476]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004be4:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8004be6:	4b75      	ldr	r3, [pc, #468]	; (8004dbc <lowlayer_scanFlow+0x284>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4a75      	ldr	r2, [pc, #468]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004bec:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8004bee:	4b73      	ldr	r3, [pc, #460]	; (8004dbc <lowlayer_scanFlow+0x284>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4a73      	ldr	r2, [pc, #460]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004bf4:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8004bf6:	4b73      	ldr	r3, [pc, #460]	; (8004dc4 <lowlayer_scanFlow+0x28c>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	4a73      	ldr	r2, [pc, #460]	; (8004dc8 <lowlayer_scanFlow+0x290>)
 8004bfc:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8004bfe:	4b70      	ldr	r3, [pc, #448]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4619      	mov	r1, r3
 8004c06:	4871      	ldr	r0, [pc, #452]	; (8004dcc <lowlayer_scanFlow+0x294>)
 8004c08:	f7fd fa32 	bl	8002070 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8004c0c:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4619      	mov	r1, r3
 8004c14:	486e      	ldr	r0, [pc, #440]	; (8004dd0 <lowlayer_scanFlow+0x298>)
 8004c16:	f7fd fa2b 	bl	8002070 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8004c1a:	4b69      	ldr	r3, [pc, #420]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4619      	mov	r1, r3
 8004c22:	486c      	ldr	r0, [pc, #432]	; (8004dd4 <lowlayer_scanFlow+0x29c>)
 8004c24:	f7fd fa24 	bl	8002070 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8004c28:	4b67      	ldr	r3, [pc, #412]	; (8004dc8 <lowlayer_scanFlow+0x290>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4869      	ldr	r0, [pc, #420]	; (8004dd8 <lowlayer_scanFlow+0x2a0>)
 8004c32:	f7fd fa1d 	bl	8002070 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8004c36:	4b62      	ldr	r3, [pc, #392]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c42:	ee17 0a90 	vmov	r0, s15
 8004c46:	f7fb fc7f 	bl	8000548 <__aeabi_f2d>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	f7fb fb1d 	bl	800028c <__adddf3>
 8004c52:	4603      	mov	r3, r0
 8004c54:	460c      	mov	r4, r1
 8004c56:	4618      	mov	r0, r3
 8004c58:	4621      	mov	r1, r4
 8004c5a:	a347      	add	r3, pc, #284	; (adr r3, 8004d78 <lowlayer_scanFlow+0x240>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb fcca 	bl	80005f8 <__aeabi_dmul>
 8004c64:	4603      	mov	r3, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	4618      	mov	r0, r3
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	a344      	add	r3, pc, #272	; (adr r3, 8004d80 <lowlayer_scanFlow+0x248>)
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f7fb fdeb 	bl	800084c <__aeabi_ddiv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	a142      	add	r1, pc, #264	; (adr r1, 8004d88 <lowlayer_scanFlow+0x250>)
 8004c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c84:	f7fb fb00 	bl	8000288 <__aeabi_dsub>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8004c8c:	4a53      	ldr	r2, [pc, #332]	; (8004ddc <lowlayer_scanFlow+0x2a4>)
 8004c8e:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8004c92:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c9e:	ee17 0a90 	vmov	r0, s15
 8004ca2:	f7fb fc51 	bl	8000548 <__aeabi_f2d>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	f7fb faef 	bl	800028c <__adddf3>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	a330      	add	r3, pc, #192	; (adr r3, 8004d78 <lowlayer_scanFlow+0x240>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f7fb fc9c 	bl	80005f8 <__aeabi_dmul>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	4b44      	ldr	r3, [pc, #272]	; (8004de0 <lowlayer_scanFlow+0x2a8>)
 8004cce:	f7fb fdbd 	bl	800084c <__aeabi_ddiv>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4623      	mov	r3, r4
 8004cda:	a12d      	add	r1, pc, #180	; (adr r1, 8004d90 <lowlayer_scanFlow+0x258>)
 8004cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ce0:	f7fb fad2 	bl	8000288 <__aeabi_dsub>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8004ce8:	4a3c      	ldr	r2, [pc, #240]	; (8004ddc <lowlayer_scanFlow+0x2a4>)
 8004cea:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8004cee:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <lowlayer_scanFlow+0x288>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cfa:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004de4 <lowlayer_scanFlow+0x2ac>
 8004cfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d02:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004de8 <lowlayer_scanFlow+0x2b0>
 8004d06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d0a:	ee17 0a90 	vmov	r0, s15
 8004d0e:	f7fb fc1b 	bl	8000548 <__aeabi_f2d>
 8004d12:	4603      	mov	r3, r0
 8004d14:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8004d16:	4a31      	ldr	r2, [pc, #196]	; (8004ddc <lowlayer_scanFlow+0x2a4>)
 8004d18:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <lowlayer_scanFlow+0x290>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb fbff 	bl	8000524 <__aeabi_i2d>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	f7fb faaf 	bl	800028c <__adddf3>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	460c      	mov	r4, r1
 8004d32:	4618      	mov	r0, r3
 8004d34:	4621      	mov	r1, r4
 8004d36:	a310      	add	r3, pc, #64	; (adr r3, 8004d78 <lowlayer_scanFlow+0x240>)
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	f7fb fc5c 	bl	80005f8 <__aeabi_dmul>
 8004d40:	4603      	mov	r3, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	4618      	mov	r0, r3
 8004d46:	4621      	mov	r1, r4
 8004d48:	a313      	add	r3, pc, #76	; (adr r3, 8004d98 <lowlayer_scanFlow+0x260>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f7fb fd7d 	bl	800084c <__aeabi_ddiv>
 8004d52:	4603      	mov	r3, r0
 8004d54:	460c      	mov	r4, r1
 8004d56:	461a      	mov	r2, r3
 8004d58:	4623      	mov	r3, r4
 8004d5a:	a111      	add	r1, pc, #68	; (adr r1, 8004da0 <lowlayer_scanFlow+0x268>)
 8004d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d60:	f7fb fa92 	bl	8000288 <__aeabi_dsub>
 8004d64:	4603      	mov	r3, r0
 8004d66:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <lowlayer_scanFlow+0x2a4>)
 8004d6a:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8004d6e:	2301      	movs	r3, #1
	}
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd90      	pop	{r4, r7, pc}
 8004d78:	60000000 	.word	0x60000000
 8004d7c:	400921fb 	.word	0x400921fb
 8004d80:	00000000 	.word	0x00000000
 8004d84:	40f38800 	.word	0x40f38800
 8004d88:	40000000 	.word	0x40000000
 8004d8c:	bff9f17a 	.word	0xbff9f17a
 8004d90:	80000000 	.word	0x80000000
 8004d94:	40039716 	.word	0x40039716
 8004d98:	a0000000 	.word	0xa0000000
 8004d9c:	40d3bca1 	.word	0x40d3bca1
 8004da0:	a0000000 	.word	0xa0000000
 8004da4:	4008330d 	.word	0x4008330d
 8004da8:	2000ad48 	.word	0x2000ad48
 8004dac:	2000ad38 	.word	0x2000ad38
 8004db0:	0801b6a4 	.word	0x0801b6a4
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	2000ad28 	.word	0x2000ad28
 8004dbc:	2000ad3c 	.word	0x2000ad3c
 8004dc0:	2000ad70 	.word	0x2000ad70
 8004dc4:	2000ad18 	.word	0x2000ad18
 8004dc8:	2000ad4c 	.word	0x2000ad4c
 8004dcc:	0801b5cc 	.word	0x0801b5cc
 8004dd0:	0801b5e0 	.word	0x0801b5e0
 8004dd4:	0801b5f4 	.word	0x0801b5f4
 8004dd8:	0801b608 	.word	0x0801b608
 8004ddc:	2000ad50 	.word	0x2000ad50
 8004de0:	40ff4000 	.word	0x40ff4000
 8004de4:	4426aaab 	.word	0x4426aaab
 8004de8:	400f1aa0 	.word	0x400f1aa0
 8004dec:	00000000 	.word	0x00000000

08004df0 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f94d 	bl	80050a0 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004e0c:	a330      	add	r3, pc, #192	; (adr r3, 8004ed0 <lowlayer_goToSoftLimit+0xe0>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	f7fb fe63 	bl	8000adc <__aeabi_dcmplt>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	723b      	strb	r3, [r7, #8]
		check++;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	3301      	adds	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004e2c:	a32a      	add	r3, pc, #168	; (adr r3, 8004ed8 <lowlayer_goToSoftLimit+0xe8>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f7fb fe71 	bl	8000b18 <__aeabi_dcmpgt>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8004e3c:	2305      	movs	r3, #5
 8004e3e:	727b      	strb	r3, [r7, #9]
		check++;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	3301      	adds	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	f7fb fe42 	bl	8000adc <__aeabi_dcmplt>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8004e5e:	2305      	movs	r3, #5
 8004e60:	72bb      	strb	r3, [r7, #10]
		check++;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	3301      	adds	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004e6e:	a31c      	add	r3, pc, #112	; (adr r3, 8004ee0 <lowlayer_goToSoftLimit+0xf0>)
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f7fb fe50 	bl	8000b18 <__aeabi_dcmpgt>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8004e7e:	230a      	movs	r3, #10
 8004e80:	72fb      	strb	r3, [r7, #11]
		check++;
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	3301      	adds	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d013      	beq.n	8004eb6 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8004e8e:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8004e92:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	425b      	negs	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	b259      	sxtb	r1, r3
 8004e9e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8004ea2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	425b      	negs	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	f000 fb4f 	bl	8005550 <lowlayer_writePulse>
		return FALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e006      	b.n	8004ec4 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2100      	movs	r1, #0
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f000 fb47 	bl	8005550 <lowlayer_writePulse>
		return TRUE;
 8004ec2:	2301      	movs	r3, #1
	}
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	daaaaaab 	.word	0xdaaaaaab
 8004ed4:	bff7bc89 	.word	0xbff7bc89
 8004ed8:	88000000 	.word	0x88000000
 8004edc:	4002d97c 	.word	0x4002d97c
 8004ee0:	daaaaaab 	.word	0xdaaaaaab
 8004ee4:	4007bc89 	.word	0x4007bc89

08004ee8 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004ef0:	f000 fc78 	bl	80057e4 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8004ef4:	4b62      	ldr	r3, [pc, #392]	; (8005080 <lowlayer_readTruePosition+0x198>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4b62      	ldr	r3, [pc, #392]	; (8005084 <lowlayer_readTruePosition+0x19c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f06:	ee17 0a90 	vmov	r0, s15
 8004f0a:	f7fb fb1d 	bl	8000548 <__aeabi_f2d>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	f7fb f9bb 	bl	800028c <__adddf3>
 8004f16:	4603      	mov	r3, r0
 8004f18:	460c      	mov	r4, r1
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	a34c      	add	r3, pc, #304	; (adr r3, 8005050 <lowlayer_readTruePosition+0x168>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f7fb fb68 	bl	80005f8 <__aeabi_dmul>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	4621      	mov	r1, r4
 8004f30:	a349      	add	r3, pc, #292	; (adr r3, 8005058 <lowlayer_readTruePosition+0x170>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb fc89 	bl	800084c <__aeabi_ddiv>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	4618      	mov	r0, r3
 8004f40:	4621      	mov	r1, r4
 8004f42:	a347      	add	r3, pc, #284	; (adr r3, 8005060 <lowlayer_readTruePosition+0x178>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f7fb f99e 	bl	8000288 <__aeabi_dsub>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8004f56:	4b4a      	ldr	r3, [pc, #296]	; (8005080 <lowlayer_readTruePosition+0x198>)
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	4b4a      	ldr	r3, [pc, #296]	; (8005084 <lowlayer_readTruePosition+0x19c>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f68:	ee17 0a90 	vmov	r0, s15
 8004f6c:	f7fb faec 	bl	8000548 <__aeabi_f2d>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	f7fb f98a 	bl	800028c <__adddf3>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	4621      	mov	r1, r4
 8004f80:	a333      	add	r3, pc, #204	; (adr r3, 8005050 <lowlayer_readTruePosition+0x168>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f7fb fb37 	bl	80005f8 <__aeabi_dmul>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	4618      	mov	r0, r3
 8004f90:	4621      	mov	r1, r4
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	4b3c      	ldr	r3, [pc, #240]	; (8005088 <lowlayer_readTruePosition+0x1a0>)
 8004f98:	f7fb fc58 	bl	800084c <__aeabi_ddiv>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	a330      	add	r3, pc, #192	; (adr r3, 8005068 <lowlayer_readTruePosition+0x180>)
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f7fb f96f 	bl	800028c <__adddf3>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8004fb8:	4b31      	ldr	r3, [pc, #196]	; (8005080 <lowlayer_readTruePosition+0x198>)
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	4b31      	ldr	r3, [pc, #196]	; (8005084 <lowlayer_readTruePosition+0x19c>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fca:	eeb1 7a67 	vneg.f32	s14, s15
 8004fce:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800508c <lowlayer_readTruePosition+0x1a4>
 8004fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fd6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005090 <lowlayer_readTruePosition+0x1a8>
 8004fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fde:	ee17 0a90 	vmov	r0, s15
 8004fe2:	f7fb fab1 	bl	8000548 <__aeabi_f2d>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8004ff0:	4b28      	ldr	r3, [pc, #160]	; (8005094 <lowlayer_readTruePosition+0x1ac>)
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	4b28      	ldr	r3, [pc, #160]	; (8005098 <lowlayer_readTruePosition+0x1b0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fb fa92 	bl	8000524 <__aeabi_i2d>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	f7fb f942 	bl	800028c <__adddf3>
 8005008:	4603      	mov	r3, r0
 800500a:	460c      	mov	r4, r1
 800500c:	4618      	mov	r0, r3
 800500e:	4621      	mov	r1, r4
 8005010:	a30f      	add	r3, pc, #60	; (adr r3, 8005050 <lowlayer_readTruePosition+0x168>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb faef 	bl	80005f8 <__aeabi_dmul>
 800501a:	4603      	mov	r3, r0
 800501c:	460c      	mov	r4, r1
 800501e:	4618      	mov	r0, r3
 8005020:	4621      	mov	r1, r4
 8005022:	a313      	add	r3, pc, #76	; (adr r3, 8005070 <lowlayer_readTruePosition+0x188>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb fc10 	bl	800084c <__aeabi_ddiv>
 800502c:	4603      	mov	r3, r0
 800502e:	460c      	mov	r4, r1
 8005030:	4618      	mov	r0, r3
 8005032:	4621      	mov	r1, r4
 8005034:	a310      	add	r3, pc, #64	; (adr r3, 8005078 <lowlayer_readTruePosition+0x190>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb f927 	bl	800028c <__adddf3>
 800503e:	4603      	mov	r3, r0
 8005040:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bd90      	pop	{r4, r7, pc}
 8005050:	60000000 	.word	0x60000000
 8005054:	400921fb 	.word	0x400921fb
 8005058:	00000000 	.word	0x00000000
 800505c:	40f38800 	.word	0x40f38800
 8005060:	40000000 	.word	0x40000000
 8005064:	3ff9f17a 	.word	0x3ff9f17a
 8005068:	80000000 	.word	0x80000000
 800506c:	40039716 	.word	0x40039716
 8005070:	a0000000 	.word	0xa0000000
 8005074:	40d3bca1 	.word	0x40d3bca1
 8005078:	a0000000 	.word	0xa0000000
 800507c:	4008330d 	.word	0x4008330d
 8005080:	2000ad2c 	.word	0x2000ad2c
 8005084:	2000ad70 	.word	0x2000ad70
 8005088:	40ff4000 	.word	0x40ff4000
 800508c:	4426aaab 	.word	0x4426aaab
 8005090:	400f1aa0 	.word	0x400f1aa0
 8005094:	2000ad18 	.word	0x2000ad18
 8005098:	2000ad4c 	.word	0x2000ad4c
 800509c:	00000000 	.word	0x00000000

080050a0 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 80050a0:	b5b0      	push	{r4, r5, r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 80050a8:	4b53      	ldr	r3, [pc, #332]	; (80051f8 <lowlayer_readSetPosition+0x158>)
 80050aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050ae:	4b53      	ldr	r3, [pc, #332]	; (80051fc <lowlayer_readSetPosition+0x15c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fb fa36 	bl	8000524 <__aeabi_i2d>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	f7fb f8e6 	bl	800028c <__adddf3>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4610      	mov	r0, r2
 80050c6:	4619      	mov	r1, r3
 80050c8:	a345      	add	r3, pc, #276	; (adr r3, 80051e0 <lowlayer_readSetPosition+0x140>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f7fb fa93 	bl	80005f8 <__aeabi_dmul>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	a343      	add	r3, pc, #268	; (adr r3, 80051e8 <lowlayer_readSetPosition+0x148>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f7fb fbb4 	bl	800084c <__aeabi_ddiv>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4620      	mov	r0, r4
 80050ea:	4629      	mov	r1, r5
 80050ec:	f7fb f8ce 	bl	800028c <__adddf3>
 80050f0:	4603      	mov	r3, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 80050fa:	4b3f      	ldr	r3, [pc, #252]	; (80051f8 <lowlayer_readSetPosition+0x158>)
 80050fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005100:	4b3e      	ldr	r3, [pc, #248]	; (80051fc <lowlayer_readSetPosition+0x15c>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	f7fb fa0d 	bl	8000524 <__aeabi_i2d>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	f7fb f8bd 	bl	800028c <__adddf3>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	a331      	add	r3, pc, #196	; (adr r3, 80051e0 <lowlayer_readSetPosition+0x140>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f7fb fa6a 	bl	80005f8 <__aeabi_dmul>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4610      	mov	r0, r2
 800512a:	4619      	mov	r1, r3
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	4b33      	ldr	r3, [pc, #204]	; (8005200 <lowlayer_readSetPosition+0x160>)
 8005132:	f7fb fb8b 	bl	800084c <__aeabi_ddiv>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4620      	mov	r0, r4
 800513c:	4629      	mov	r1, r5
 800513e:	f7fb f8a5 	bl	800028c <__adddf3>
 8005142:	4603      	mov	r3, r0
 8005144:	460c      	mov	r4, r1
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <lowlayer_readSetPosition+0x158>)
 800514e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005152:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <lowlayer_readSetPosition+0x15c>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800515e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005204 <lowlayer_readSetPosition+0x164>
 8005162:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005166:	ee16 0a90 	vmov	r0, s13
 800516a:	f7fb f9ed 	bl	8000548 <__aeabi_f2d>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4620      	mov	r0, r4
 8005174:	4629      	mov	r1, r5
 8005176:	f7fb f889 	bl	800028c <__adddf3>
 800517a:	4603      	mov	r3, r0
 800517c:	460c      	mov	r4, r1
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8005184:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <lowlayer_readSetPosition+0x158>)
 8005186:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800518a:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <lowlayer_readSetPosition+0x15c>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fb f9c8 	bl	8000524 <__aeabi_i2d>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	f7fb f878 	bl	800028c <__adddf3>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	a30e      	add	r3, pc, #56	; (adr r3, 80051e0 <lowlayer_readSetPosition+0x140>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb fa25 	bl	80005f8 <__aeabi_dmul>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	a30e      	add	r3, pc, #56	; (adr r3, 80051f0 <lowlayer_readSetPosition+0x150>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f7fb fb46 	bl	800084c <__aeabi_ddiv>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4620      	mov	r0, r4
 80051c6:	4629      	mov	r1, r5
 80051c8:	f7fb f860 	bl	800028c <__adddf3>
 80051cc:	4603      	mov	r3, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bdb0      	pop	{r4, r5, r7, pc}
 80051de:	bf00      	nop
 80051e0:	60000000 	.word	0x60000000
 80051e4:	400921fb 	.word	0x400921fb
 80051e8:	00000000 	.word	0x00000000
 80051ec:	40d38800 	.word	0x40d38800
 80051f0:	a0000000 	.word	0xa0000000
 80051f4:	40d3bca1 	.word	0x40d3bca1
 80051f8:	2000ad50 	.word	0x2000ad50
 80051fc:	2000ad18 	.word	0x2000ad18
 8005200:	40df4000 	.word	0x40df4000
 8005204:	42c80000 	.word	0x42c80000

08005208 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8005208:	b084      	sub	sp, #16
 800520a:	b590      	push	{r4, r7, lr}
 800520c:	b093      	sub	sp, #76	; 0x4c
 800520e:	af00      	add	r7, sp, #0
 8005210:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8005214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8005218:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800521c:	a3c4      	add	r3, pc, #784	; (adr r3, 8005530 <lowlayer_computeAndWritePulse+0x328>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fb f833 	bl	800028c <__adddf3>
 8005226:	4603      	mov	r3, r0
 8005228:	460c      	mov	r4, r1
 800522a:	4618      	mov	r0, r3
 800522c:	4621      	mov	r1, r4
 800522e:	a3c2      	add	r3, pc, #776	; (adr r3, 8005538 <lowlayer_computeAndWritePulse+0x330>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f7fb f9e0 	bl	80005f8 <__aeabi_dmul>
 8005238:	4603      	mov	r3, r0
 800523a:	460c      	mov	r4, r1
 800523c:	4618      	mov	r0, r3
 800523e:	4621      	mov	r1, r4
 8005240:	a3b5      	add	r3, pc, #724	; (adr r3, 8005518 <lowlayer_computeAndWritePulse+0x310>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f7fb fb01 	bl	800084c <__aeabi_ddiv>
 800524a:	4603      	mov	r3, r0
 800524c:	460c      	mov	r4, r1
 800524e:	ec44 3b17 	vmov	d7, r3, r4
 8005252:	eeb0 0a47 	vmov.f32	s0, s14
 8005256:	eef0 0a67 	vmov.f32	s1, s15
 800525a:	f014 fc89 	bl	8019b70 <round>
 800525e:	ec54 3b10 	vmov	r3, r4, d0
 8005262:	4618      	mov	r0, r3
 8005264:	4621      	mov	r1, r4
 8005266:	f7fb fc9f 	bl	8000ba8 <__aeabi_d2uiz>
 800526a:	4603      	mov	r3, r0
 800526c:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800526e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005272:	a3b3      	add	r3, pc, #716	; (adr r3, 8005540 <lowlayer_computeAndWritePulse+0x338>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f7fb f808 	bl	800028c <__adddf3>
 800527c:	4603      	mov	r3, r0
 800527e:	460c      	mov	r4, r1
 8005280:	4618      	mov	r0, r3
 8005282:	4621      	mov	r1, r4
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	4baf      	ldr	r3, [pc, #700]	; (8005548 <lowlayer_computeAndWritePulse+0x340>)
 800528a:	f7fb f9b5 	bl	80005f8 <__aeabi_dmul>
 800528e:	4603      	mov	r3, r0
 8005290:	460c      	mov	r4, r1
 8005292:	4618      	mov	r0, r3
 8005294:	4621      	mov	r1, r4
 8005296:	a3a0      	add	r3, pc, #640	; (adr r3, 8005518 <lowlayer_computeAndWritePulse+0x310>)
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f7fb fad6 	bl	800084c <__aeabi_ddiv>
 80052a0:	4603      	mov	r3, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	ec44 3b17 	vmov	d7, r3, r4
 80052a8:	eeb0 0a47 	vmov.f32	s0, s14
 80052ac:	eef0 0a67 	vmov.f32	s1, s15
 80052b0:	f014 fc5e 	bl	8019b70 <round>
 80052b4:	ec54 3b10 	vmov	r3, r4, d0
 80052b8:	4618      	mov	r0, r3
 80052ba:	4621      	mov	r1, r4
 80052bc:	f7fb fc74 	bl	8000ba8 <__aeabi_d2uiz>
 80052c0:	4603      	mov	r3, r0
 80052c2:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 80052c4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	4b9f      	ldr	r3, [pc, #636]	; (800554c <lowlayer_computeAndWritePulse+0x344>)
 80052ce:	f7fb f993 	bl	80005f8 <__aeabi_dmul>
 80052d2:	4603      	mov	r3, r0
 80052d4:	460c      	mov	r4, r1
 80052d6:	ec44 3b17 	vmov	d7, r3, r4
 80052da:	eeb0 0a47 	vmov.f32	s0, s14
 80052de:	eef0 0a67 	vmov.f32	s1, s15
 80052e2:	f014 fc45 	bl	8019b70 <round>
 80052e6:	ec54 3b10 	vmov	r3, r4, d0
 80052ea:	4618      	mov	r0, r3
 80052ec:	4621      	mov	r1, r4
 80052ee:	f7fb fc5b 	bl	8000ba8 <__aeabi_d2uiz>
 80052f2:	4603      	mov	r3, r0
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80052f6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80052fa:	a389      	add	r3, pc, #548	; (adr r3, 8005520 <lowlayer_computeAndWritePulse+0x318>)
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f7fa ffc4 	bl	800028c <__adddf3>
 8005304:	4603      	mov	r3, r0
 8005306:	460c      	mov	r4, r1
 8005308:	4618      	mov	r0, r3
 800530a:	4621      	mov	r1, r4
 800530c:	a386      	add	r3, pc, #536	; (adr r3, 8005528 <lowlayer_computeAndWritePulse+0x320>)
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fb f971 	bl	80005f8 <__aeabi_dmul>
 8005316:	4603      	mov	r3, r0
 8005318:	460c      	mov	r4, r1
 800531a:	4618      	mov	r0, r3
 800531c:	4621      	mov	r1, r4
 800531e:	a37e      	add	r3, pc, #504	; (adr r3, 8005518 <lowlayer_computeAndWritePulse+0x310>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fb fa92 	bl	800084c <__aeabi_ddiv>
 8005328:	4603      	mov	r3, r0
 800532a:	460c      	mov	r4, r1
 800532c:	ec44 3b17 	vmov	d7, r3, r4
 8005330:	eeb0 0a47 	vmov.f32	s0, s14
 8005334:	eef0 0a67 	vmov.f32	s1, s15
 8005338:	f014 fc1a 	bl	8019b70 <round>
 800533c:	ec54 3b10 	vmov	r3, r4, d0
 8005340:	4618      	mov	r0, r3
 8005342:	4621      	mov	r1, r4
 8005344:	f7fb fc30 	bl	8000ba8 <__aeabi_d2uiz>
 8005348:	4603      	mov	r3, r0
 800534a:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 800534c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8005350:	a377      	add	r3, pc, #476	; (adr r3, 8005530 <lowlayer_computeAndWritePulse+0x328>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fa ff99 	bl	800028c <__adddf3>
 800535a:	4603      	mov	r3, r0
 800535c:	460c      	mov	r4, r1
 800535e:	4618      	mov	r0, r3
 8005360:	4621      	mov	r1, r4
 8005362:	a375      	add	r3, pc, #468	; (adr r3, 8005538 <lowlayer_computeAndWritePulse+0x330>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fb f946 	bl	80005f8 <__aeabi_dmul>
 800536c:	4603      	mov	r3, r0
 800536e:	460c      	mov	r4, r1
 8005370:	4618      	mov	r0, r3
 8005372:	4621      	mov	r1, r4
 8005374:	a368      	add	r3, pc, #416	; (adr r3, 8005518 <lowlayer_computeAndWritePulse+0x310>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fb fa67 	bl	800084c <__aeabi_ddiv>
 800537e:	4603      	mov	r3, r0
 8005380:	460c      	mov	r4, r1
 8005382:	ec44 3b17 	vmov	d7, r3, r4
 8005386:	eeb0 0a47 	vmov.f32	s0, s14
 800538a:	eef0 0a67 	vmov.f32	s1, s15
 800538e:	f014 fbef 	bl	8019b70 <round>
 8005392:	ec54 3b10 	vmov	r3, r4, d0
 8005396:	4618      	mov	r0, r3
 8005398:	4621      	mov	r1, r4
 800539a:	f7fb fc05 	bl	8000ba8 <__aeabi_d2uiz>
 800539e:	4603      	mov	r3, r0
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80053a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80053a6:	a366      	add	r3, pc, #408	; (adr r3, 8005540 <lowlayer_computeAndWritePulse+0x338>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f7fa ff6e 	bl	800028c <__adddf3>
 80053b0:	4603      	mov	r3, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	4618      	mov	r0, r3
 80053b6:	4621      	mov	r1, r4
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	4b62      	ldr	r3, [pc, #392]	; (8005548 <lowlayer_computeAndWritePulse+0x340>)
 80053be:	f7fb f91b 	bl	80005f8 <__aeabi_dmul>
 80053c2:	4603      	mov	r3, r0
 80053c4:	460c      	mov	r4, r1
 80053c6:	4618      	mov	r0, r3
 80053c8:	4621      	mov	r1, r4
 80053ca:	a353      	add	r3, pc, #332	; (adr r3, 8005518 <lowlayer_computeAndWritePulse+0x310>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fb fa3c 	bl	800084c <__aeabi_ddiv>
 80053d4:	4603      	mov	r3, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	ec44 3b17 	vmov	d7, r3, r4
 80053dc:	eeb0 0a47 	vmov.f32	s0, s14
 80053e0:	eef0 0a67 	vmov.f32	s1, s15
 80053e4:	f014 fbc4 	bl	8019b70 <round>
 80053e8:	ec54 3b10 	vmov	r3, r4, d0
 80053ec:	4618      	mov	r0, r3
 80053ee:	4621      	mov	r1, r4
 80053f0:	f7fb fbda 	bl	8000ba8 <__aeabi_d2uiz>
 80053f4:	4603      	mov	r3, r0
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80053f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	4b52      	ldr	r3, [pc, #328]	; (800554c <lowlayer_computeAndWritePulse+0x344>)
 8005402:	f7fb f8f9 	bl	80005f8 <__aeabi_dmul>
 8005406:	4603      	mov	r3, r0
 8005408:	460c      	mov	r4, r1
 800540a:	ec44 3b17 	vmov	d7, r3, r4
 800540e:	eeb0 0a47 	vmov.f32	s0, s14
 8005412:	eef0 0a67 	vmov.f32	s1, s15
 8005416:	f014 fbab 	bl	8019b70 <round>
 800541a:	ec54 3b10 	vmov	r3, r4, d0
 800541e:	4618      	mov	r0, r3
 8005420:	4621      	mov	r1, r4
 8005422:	f7fb fbc1 	bl	8000ba8 <__aeabi_d2uiz>
 8005426:	4603      	mov	r3, r0
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800542a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800542e:	a33c      	add	r3, pc, #240	; (adr r3, 8005520 <lowlayer_computeAndWritePulse+0x318>)
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f7fa ff2a 	bl	800028c <__adddf3>
 8005438:	4603      	mov	r3, r0
 800543a:	460c      	mov	r4, r1
 800543c:	4618      	mov	r0, r3
 800543e:	4621      	mov	r1, r4
 8005440:	a339      	add	r3, pc, #228	; (adr r3, 8005528 <lowlayer_computeAndWritePulse+0x320>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fb f8d7 	bl	80005f8 <__aeabi_dmul>
 800544a:	4603      	mov	r3, r0
 800544c:	460c      	mov	r4, r1
 800544e:	4618      	mov	r0, r3
 8005450:	4621      	mov	r1, r4
 8005452:	a331      	add	r3, pc, #196	; (adr r3, 8005518 <lowlayer_computeAndWritePulse+0x310>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f7fb f9f8 	bl	800084c <__aeabi_ddiv>
 800545c:	4603      	mov	r3, r0
 800545e:	460c      	mov	r4, r1
 8005460:	ec44 3b17 	vmov	d7, r3, r4
 8005464:	eeb0 0a47 	vmov.f32	s0, s14
 8005468:	eef0 0a67 	vmov.f32	s1, s15
 800546c:	f014 fb80 	bl	8019b70 <round>
 8005470:	ec54 3b10 	vmov	r3, r4, d0
 8005474:	4618      	mov	r0, r3
 8005476:	4621      	mov	r1, r4
 8005478:	f7fb fb96 	bl	8000ba8 <__aeabi_d2uiz>
 800547c:	4603      	mov	r3, r0
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8005480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f04f 0400 	mov.w	r4, #0
 800548a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 800548e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	f04f 0400 	mov.w	r4, #0
 8005498:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 800549c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800549e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f04f 0400 	mov.w	r4, #0
 80054a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80054aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	f04f 0400 	mov.w	r4, #0
 80054b4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfb8      	it	lt
 80054be:	425b      	neglt	r3, r3
 80054c0:	2b7f      	cmp	r3, #127	; 0x7f
 80054c2:	dc11      	bgt.n	80054e8 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bfb8      	it	lt
 80054ca:	425b      	neglt	r3, r3
 80054cc:	2b7f      	cmp	r3, #127	; 0x7f
 80054ce:	dc0b      	bgt.n	80054e8 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bfb8      	it	lt
 80054d6:	425b      	neglt	r3, r3
 80054d8:	2b7f      	cmp	r3, #127	; 0x7f
 80054da:	dc05      	bgt.n	80054e8 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bfb8      	it	lt
 80054e2:	425b      	neglt	r3, r3
 80054e4:	2b7f      	cmp	r3, #127	; 0x7f
 80054e6:	dd01      	ble.n	80054ec <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	e00c      	b.n	8005506 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 80054ec:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80054f0:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80054f4:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80054f8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80054fc:	f000 f828 	bl	8005550 <lowlayer_writePulse>
 8005500:	4603      	mov	r3, r0
 8005502:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8005504:	79fb      	ldrb	r3, [r7, #7]
}
 8005506:	4618      	mov	r0, r3
 8005508:	374c      	adds	r7, #76	; 0x4c
 800550a:	46bd      	mov	sp, r7
 800550c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005510:	b004      	add	sp, #16
 8005512:	4770      	bx	lr
 8005514:	f3af 8000 	nop.w
 8005518:	60000000 	.word	0x60000000
 800551c:	401921fb 	.word	0x401921fb
 8005520:	daaaaaab 	.word	0xdaaaaaab
 8005524:	4007bc89 	.word	0x4007bc89
 8005528:	a0000000 	.word	0xa0000000
 800552c:	40d3bca1 	.word	0x40d3bca1
 8005530:	daaaaaab 	.word	0xdaaaaaab
 8005534:	3ff7bc89 	.word	0x3ff7bc89
 8005538:	00000000 	.word	0x00000000
 800553c:	40d38800 	.word	0x40d38800
 8005540:	88000000 	.word	0x88000000
 8005544:	4002d97c 	.word	0x4002d97c
 8005548:	40df4000 	.word	0x40df4000
 800554c:	40590000 	.word	0x40590000

08005550 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8005550:	b590      	push	{r4, r7, lr}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	4611      	mov	r1, r2
 800555c:	461a      	mov	r2, r3
 800555e:	4623      	mov	r3, r4
 8005560:	71fb      	strb	r3, [r7, #7]
 8005562:	4603      	mov	r3, r0
 8005564:	71bb      	strb	r3, [r7, #6]
 8005566:	460b      	mov	r3, r1
 8005568:	717b      	strb	r3, [r7, #5]
 800556a:	4613      	mov	r3, r2
 800556c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800556e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005572:	2b00      	cmp	r3, #0
 8005574:	da06      	bge.n	8005584 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	425b      	negs	r3, r3
 800557a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	425b      	negs	r3, r3
 8005580:	75fb      	strb	r3, [r7, #23]
 8005582:	e006      	b.n	8005592 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800558e:	b25b      	sxtb	r3, r3
 8005590:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8005592:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005596:	2b00      	cmp	r3, #0
 8005598:	da06      	bge.n	80055a8 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800559a:	79bb      	ldrb	r3, [r7, #6]
 800559c:	425b      	negs	r3, r3
 800559e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 80055a0:	79bb      	ldrb	r3, [r7, #6]
 80055a2:	425b      	negs	r3, r3
 80055a4:	75bb      	strb	r3, [r7, #22]
 80055a6:	e006      	b.n	80055b6 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 80055a8:	79bb      	ldrb	r3, [r7, #6]
 80055aa:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80055ac:	79bb      	ldrb	r3, [r7, #6]
 80055ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 80055b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	da0b      	bge.n	80055d6 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 80055be:	797b      	ldrb	r3, [r7, #5]
 80055c0:	425b      	negs	r3, r3
 80055c2:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 80055c4:	797b      	ldrb	r3, [r7, #5]
 80055c6:	425b      	negs	r3, r3
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	b25b      	sxtb	r3, r3
 80055cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	757b      	strb	r3, [r7, #21]
 80055d4:	e003      	b.n	80055de <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 80055d6:	797b      	ldrb	r3, [r7, #5]
 80055d8:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 80055da:	797b      	ldrb	r3, [r7, #5]
 80055dc:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 80055de:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	da06      	bge.n	80055f4 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 80055e6:	793b      	ldrb	r3, [r7, #4]
 80055e8:	425b      	negs	r3, r3
 80055ea:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 80055ec:	793b      	ldrb	r3, [r7, #4]
 80055ee:	425b      	negs	r3, r3
 80055f0:	753b      	strb	r3, [r7, #20]
 80055f2:	e006      	b.n	8005602 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80055f4:	793b      	ldrb	r3, [r7, #4]
 80055f6:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80055f8:	793b      	ldrb	r3, [r7, #4]
 80055fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	2b4b      	cmp	r3, #75	; 0x4b
 8005606:	d808      	bhi.n	800561a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8005608:	7cbb      	ldrb	r3, [r7, #18]
 800560a:	2b78      	cmp	r3, #120	; 0x78
 800560c:	d805      	bhi.n	800561a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 800560e:	7c7b      	ldrb	r3, [r7, #17]
 8005610:	2b7d      	cmp	r3, #125	; 0x7d
 8005612:	d802      	bhi.n	800561a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8005614:	7c3b      	ldrb	r3, [r7, #16]
 8005616:	2b65      	cmp	r3, #101	; 0x65
 8005618:	d901      	bls.n	800561e <lowlayer_writePulse+0xce>
		return FALSE;
 800561a:	2300      	movs	r3, #0
 800561c:	e04b      	b.n	80056b6 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800561e:	2200      	movs	r2, #0
 8005620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005624:	4826      	ldr	r0, [pc, #152]	; (80056c0 <lowlayer_writePulse+0x170>)
 8005626:	f006 fed9 	bl	800c3dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005630:	4824      	ldr	r0, [pc, #144]	; (80056c4 <lowlayer_writePulse+0x174>)
 8005632:	f006 fed3 	bl	800c3dc <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	4619      	mov	r1, r3
 800563a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800563e:	f7fe fae1 	bl	8003c04 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8005642:	7dbb      	ldrb	r3, [r7, #22]
 8005644:	4619      	mov	r1, r3
 8005646:	4820      	ldr	r0, [pc, #128]	; (80056c8 <lowlayer_writePulse+0x178>)
 8005648:	f7fe fadc 	bl	8003c04 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 800564c:	7d7b      	ldrb	r3, [r7, #21]
 800564e:	4619      	mov	r1, r3
 8005650:	481e      	ldr	r0, [pc, #120]	; (80056cc <lowlayer_writePulse+0x17c>)
 8005652:	f7fe fad7 	bl	8003c04 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8005656:	7d3b      	ldrb	r3, [r7, #20]
 8005658:	4619      	mov	r1, r3
 800565a:	481d      	ldr	r0, [pc, #116]	; (80056d0 <lowlayer_writePulse+0x180>)
 800565c:	f7fe fad2 	bl	8003c04 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8005660:	2364      	movs	r3, #100	; 0x64
 8005662:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8005664:	bf00      	nop
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	73fa      	strb	r2, [r7, #15]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1fa      	bne.n	8005666 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8005670:	2201      	movs	r2, #1
 8005672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005676:	4813      	ldr	r0, [pc, #76]	; (80056c4 <lowlayer_writePulse+0x174>)
 8005678:	f006 feb0 	bl	800c3dc <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 800567c:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <lowlayer_writePulse+0x184>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005684:	4413      	add	r3, r2
 8005686:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <lowlayer_writePulse+0x184>)
 8005688:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 800568a:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <lowlayer_writePulse+0x184>)
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005692:	4413      	add	r3, r2
 8005694:	4a0f      	ldr	r2, [pc, #60]	; (80056d4 <lowlayer_writePulse+0x184>)
 8005696:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8005698:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <lowlayer_writePulse+0x184>)
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80056a0:	4413      	add	r3, r2
 80056a2:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <lowlayer_writePulse+0x184>)
 80056a4:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <lowlayer_writePulse+0x184>)
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	4a08      	ldr	r2, [pc, #32]	; (80056d4 <lowlayer_writePulse+0x184>)
 80056b2:	60d3      	str	r3, [r2, #12]

	return TRUE;
 80056b4:	2301      	movs	r3, #1
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd90      	pop	{r4, r7, pc}
 80056be:	bf00      	nop
 80056c0:	40020000 	.word	0x40020000
 80056c4:	40020c00 	.word	0x40020c00
 80056c8:	60000002 	.word	0x60000002
 80056cc:	60000004 	.word	0x60000004
 80056d0:	60000006 	.word	0x60000006
 80056d4:	2000ad18 	.word	0x2000ad18

080056d8 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 80056de:	2364      	movs	r3, #100	; 0x64
 80056e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 80056e2:	2201      	movs	r2, #1
 80056e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056e8:	4809      	ldr	r0, [pc, #36]	; (8005710 <lowlayer_resetEncoder+0x38>)
 80056ea:	f006 fe77 	bl	800c3dc <HAL_GPIO_WritePin>
	while (delay--);
 80056ee:	bf00      	nop
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	71fa      	strb	r2, [r7, #7]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1fa      	bne.n	80056f0 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80056fa:	2200      	movs	r2, #0
 80056fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005700:	4803      	ldr	r0, [pc, #12]	; (8005710 <lowlayer_resetEncoder+0x38>)
 8005702:	f006 fe6b 	bl	800c3dc <HAL_GPIO_WritePin>
}
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40020c00 	.word	0x40020c00

08005714 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <lowlayer_readLimitSwitch+0x1c>)
 800571c:	f7fe fa81 	bl	8003c22 <FSMC_Read>
 8005720:	4603      	mov	r3, r0
 8005722:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	b2db      	uxtb	r3, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	60000020 	.word	0x60000020

08005734 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d81c      	bhi.n	800577e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800574a:	3310      	adds	r3, #16
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fa67 	bl	8003c22 <FSMC_Read>
 8005754:	4603      	mov	r3, r0
 8005756:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800575e:	3310      	adds	r3, #16
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	3302      	adds	r3, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f7fe fa5c 	bl	8003c22 <FSMC_Read>
 800576a:	4603      	mov	r3, r0
 800576c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800576e:	893b      	ldrh	r3, [r7, #8]
 8005770:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	041a      	lsls	r2, r3, #16
 8005776:	897b      	ldrh	r3, [r7, #10]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e001      	b.n	8005782 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d81c      	bhi.n	80057d6 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80057a2:	3318      	adds	r3, #24
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fa3b 	bl	8003c22 <FSMC_Read>
 80057ac:	4603      	mov	r3, r0
 80057ae:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80057b6:	3318      	adds	r3, #24
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	3302      	adds	r3, #2
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fe fa30 	bl	8003c22 <FSMC_Read>
 80057c2:	4603      	mov	r3, r0
 80057c4:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80057c6:	893b      	ldrh	r3, [r7, #8]
 80057c8:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	041a      	lsls	r2, r3, #16
 80057ce:	897b      	ldrh	r3, [r7, #10]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e001      	b.n	80057da <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80057ea:	2300      	movs	r3, #0
 80057ec:	71fb      	strb	r3, [r7, #7]
 80057ee:	e00b      	b.n	8005808 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 80057f0:	79fc      	ldrb	r4, [r7, #7]
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff9d 	bl	8005734 <lowlayer_readEncoder>
 80057fa:	4602      	mov	r2, r0
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <lowlayer_updateEncoder+0x34>)
 80057fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	3301      	adds	r3, #1
 8005806:	71fb      	strb	r3, [r7, #7]
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d9f0      	bls.n	80057f0 <lowlayer_updateEncoder+0xc>
	}
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	bd90      	pop	{r4, r7, pc}
 8005816:	bf00      	nop
 8005818:	2000ad2c 	.word	0x2000ad2c

0800581c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8005822:	2300      	movs	r3, #0
 8005824:	71fb      	strb	r3, [r7, #7]
 8005826:	e00b      	b.n	8005840 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8005828:	79fc      	ldrb	r4, [r7, #7]
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff ffad 	bl	800578c <lowlayer_readCapture>
 8005832:	4602      	mov	r2, r0
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <lowlayer_updateCapture+0x34>)
 8005836:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	3301      	adds	r3, #1
 800583e:	71fb      	strb	r3, [r7, #7]
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d9f0      	bls.n	8005828 <lowlayer_updateCapture+0xc>
	}
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	bf00      	nop
 8005850:	2000ad3c 	.word	0x2000ad3c

08005854 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 800585a:	f7ff ff5b 	bl	8005714 <lowlayer_readLimitSwitch>
 800585e:	4603      	mov	r3, r0
 8005860:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8005862:	2300      	movs	r3, #0
 8005864:	71fb      	strb	r3, [r7, #7]
 8005866:	e00d      	b.n	8005884 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8005868:	79ba      	ldrb	r2, [r7, #6]
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	fa42 f303 	asr.w	r3, r2, r3
 8005870:	b2da      	uxtb	r2, r3
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	f002 0201 	and.w	r2, r2, #1
 8005878:	b2d1      	uxtb	r1, r2
 800587a:	4a06      	ldr	r2, [pc, #24]	; (8005894 <lowlayer_updateLimit+0x40>)
 800587c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	3301      	adds	r3, #1
 8005882:	71fb      	strb	r3, [r7, #7]
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d9ee      	bls.n	8005868 <lowlayer_updateLimit+0x14>
	}
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000ad38 	.word	0x2000ad38

08005898 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d006      	beq.n	80058b6 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 80058a8:	2201      	movs	r2, #1
 80058aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058ae:	4807      	ldr	r0, [pc, #28]	; (80058cc <lowlayer_setOutput+0x34>)
 80058b0:	f006 fd94 	bl	800c3dc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 80058b4:	e005      	b.n	80058c2 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 80058b6:	2200      	movs	r2, #0
 80058b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058bc:	4803      	ldr	r0, [pc, #12]	; (80058cc <lowlayer_setOutput+0x34>)
 80058be:	f006 fd8d 	bl	800c3dc <HAL_GPIO_WritePin>
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40020400 	.word	0x40020400

080058d0 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 80058d4:	2201      	movs	r2, #1
 80058d6:	2140      	movs	r1, #64	; 0x40
 80058d8:	4802      	ldr	r0, [pc, #8]	; (80058e4 <lowlayer_CPLD_Init+0x14>)
 80058da:	f006 fd7f 	bl	800c3dc <HAL_GPIO_WritePin>
}
 80058de:	bf00      	nop
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40020c00 	.word	0x40020c00

080058e8 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058f2:	4808      	ldr	r0, [pc, #32]	; (8005914 <lowlayer_stepMotorInit+0x2c>)
 80058f4:	f006 fd72 	bl	800c3dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 80058f8:	2201      	movs	r2, #1
 80058fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058fe:	4805      	ldr	r0, [pc, #20]	; (8005914 <lowlayer_stepMotorInit+0x2c>)
 8005900:	f006 fd6c 	bl	800c3dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8005904:	2201      	movs	r2, #1
 8005906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800590a:	4802      	ldr	r0, [pc, #8]	; (8005914 <lowlayer_stepMotorInit+0x2c>)
 800590c:	f006 fd66 	bl	800c3dc <HAL_GPIO_WritePin>
}
 8005910:	bf00      	nop
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40020000 	.word	0x40020000

08005918 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 800591c:	f7ff ffd8 	bl	80058d0 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8005920:	f7ff ffe2 	bl	80058e8 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8005924:	f7ff fed8 	bl	80056d8 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}
 800592c:	0000      	movs	r0, r0
	...

08005930 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8005930:	b084      	sub	sp, #16
 8005932:	b5b0      	push	{r4, r5, r7, lr}
 8005934:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8005938:	af90      	add	r7, sp, #576	; 0x240
 800593a:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 800593e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8005942:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 8390 	bne.w	800606c <scaraInitDuty+0x73c>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 800594c:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8005950:	a394      	add	r3, pc, #592	; (adr r3, 8005ba4 <scaraInitDuty+0x274>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	f7fa fe4f 	bl	80005f8 <__aeabi_dmul>
 800595a:	4603      	mov	r3, r0
 800595c:	460c      	mov	r4, r1
 800595e:	4618      	mov	r0, r3
 8005960:	4621      	mov	r1, r4
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	4b8a      	ldr	r3, [pc, #552]	; (8005b90 <scaraInitDuty+0x260>)
 8005968:	f7fa ff70 	bl	800084c <__aeabi_ddiv>
 800596c:	4603      	mov	r3, r0
 800596e:	460c      	mov	r4, r1
 8005970:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005974:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005978:	2b01      	cmp	r3, #1
 800597a:	d138      	bne.n	80059ee <scaraInitDuty+0xbe>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 800597c:	4b85      	ldr	r3, [pc, #532]	; (8005b94 <scaraInitDuty+0x264>)
 800597e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005982:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005986:	461a      	mov	r2, r3
 8005988:	4623      	mov	r3, r4
 800598a:	f7fa fc7f 	bl	800028c <__adddf3>
 800598e:	4603      	mov	r3, r0
 8005990:	460c      	mov	r4, r1
 8005992:	463a      	mov	r2, r7
 8005994:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8005998:	4b7e      	ldr	r3, [pc, #504]	; (8005b94 <scaraInitDuty+0x264>)
 800599a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800599e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80059a2:	461a      	mov	r2, r3
 80059a4:	4623      	mov	r3, r4
 80059a6:	f7fa fc71 	bl	800028c <__adddf3>
 80059aa:	4603      	mov	r3, r0
 80059ac:	460c      	mov	r4, r1
 80059ae:	463a      	mov	r2, r7
 80059b0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80059b4:	4b77      	ldr	r3, [pc, #476]	; (8005b94 <scaraInitDuty+0x264>)
 80059b6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80059ba:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80059be:	461a      	mov	r2, r3
 80059c0:	4623      	mov	r3, r4
 80059c2:	f7fa fc63 	bl	800028c <__adddf3>
 80059c6:	4603      	mov	r3, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	463a      	mov	r2, r7
 80059cc:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80059d0:	4b70      	ldr	r3, [pc, #448]	; (8005b94 <scaraInitDuty+0x264>)
 80059d2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80059d6:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80059da:	461a      	mov	r2, r3
 80059dc:	4623      	mov	r3, r4
 80059de:	f7fa fc55 	bl	800028c <__adddf3>
 80059e2:	4603      	mov	r3, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	463a      	mov	r2, r7
 80059e8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 80059ec:	e01b      	b.n	8005a26 <scaraInitDuty+0xf6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80059ee:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d114      	bne.n	8005a20 <scaraInitDuty+0xf0>
			target_point.x 		= command.target_point.x;
 80059f6:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80059fa:	463a      	mov	r2, r7
 80059fc:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005a00:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005a04:	463a      	mov	r2, r7
 8005a06:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8005a0a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8005a0e:	463a      	mov	r2, r7
 8005a10:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8005a14:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8005a18:	463a      	mov	r2, r7
 8005a1a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8005a1e:	e002      	b.n	8005a26 <scaraInitDuty+0xf6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8005a20:	230c      	movs	r3, #12
 8005a22:	f001 bac3 	b.w	8006fac <scaraInitDuty+0x167c>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8005a26:	463b      	mov	r3, r7
 8005a28:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005a2c:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <scaraInitDuty+0x264>)
 8005a2e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005a32:	461a      	mov	r2, r3
 8005a34:	4623      	mov	r3, r4
 8005a36:	f7fa fc27 	bl	8000288 <__aeabi_dsub>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
		dir_angle = 1;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
		if ( angle_s < 0) {
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8005a54:	f7fb f842 	bl	8000adc <__aeabi_dcmplt>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <scaraInitDuty+0x134>
			dir_angle = -1;
 8005a5e:	23ff      	movs	r3, #255	; 0xff
 8005a60:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8005a64:	4b4c      	ldr	r3, [pc, #304]	; (8005b98 <scaraInitDuty+0x268>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8005a6a:	4b4a      	ldr	r3, [pc, #296]	; (8005b94 <scaraInitDuty+0x264>)
 8005a6c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005a70:	4a49      	ldr	r2, [pc, #292]	; (8005b98 <scaraInitDuty+0x268>)
 8005a72:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005a76:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8005a7a:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d11f      	bne.n	8005ac2 <scaraInitDuty+0x192>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8005a82:	4b45      	ldr	r3, [pc, #276]	; (8005b98 <scaraInitDuty+0x268>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005a88:	4c42      	ldr	r4, [pc, #264]	; (8005b94 <scaraInitDuty+0x264>)
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	a82e      	add	r0, sp, #184	; 0xb8
 8005a8e:	4619      	mov	r1, r3
 8005a90:	23c0      	movs	r3, #192	; 0xc0
 8005a92:	461a      	mov	r2, r3
 8005a94:	f010 fa3a 	bl	8015f0c <memcpy>
 8005a98:	4668      	mov	r0, sp
 8005a9a:	f104 0308 	add.w	r3, r4, #8
 8005a9e:	22b8      	movs	r2, #184	; 0xb8
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f010 fa33 	bl	8015f0c <memcpy>
 8005aa6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005aaa:	483c      	ldr	r0, [pc, #240]	; (8005b9c <scaraInitDuty+0x26c>)
 8005aac:	f001 fa96 	bl	8006fdc <scaraInitLine>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 8005ab6:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <scaraInitDuty+0x268>)
 8005ab8:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005abc:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8005ac0:	e05c      	b.n	8005b7c <scaraInitDuty+0x24c>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8005ac2:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d155      	bne.n	8005b76 <scaraInitDuty+0x246>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8005aca:	4b32      	ldr	r3, [pc, #200]	; (8005b94 <scaraInitDuty+0x264>)
 8005acc:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005ad0:	463a      	mov	r2, r7
 8005ad2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
//				center_point.y 		= command.target_point.y;
//				center_point.z 		= positionCurrent.z;
//			} else {
//				return SCARA_STATUS_ERROR_COORDINATE;
//			}
			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8005ad6:	4b2f      	ldr	r3, [pc, #188]	; (8005b94 <scaraInitDuty+0x264>)
 8005ad8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005adc:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	f7fa fbd2 	bl	800028c <__adddf3>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005af0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <scaraInitDuty+0x264>)
 8005af6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005afa:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 8005afe:	461a      	mov	r2, r3
 8005b00:	4623      	mov	r3, r4
 8005b02:	f7fa fbc3 	bl	800028c <__adddf3>
 8005b06:	4603      	mov	r3, r0
 8005b08:	460c      	mov	r4, r1
 8005b0a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005b0e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
			center_point.z 		= positionCurrent.z;
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <scaraInitDuty+0x264>)
 8005b14:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005b18:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005b1c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8005b20:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <scaraInitDuty+0x268>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8005b26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005b2a:	4c1a      	ldr	r4, [pc, #104]	; (8005b94 <scaraInitDuty+0x264>)
 8005b2c:	938e      	str	r3, [sp, #568]	; 0x238
 8005b2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005b32:	a85e      	add	r0, sp, #376	; 0x178
 8005b34:	4619      	mov	r1, r3
 8005b36:	23c0      	movs	r3, #192	; 0xc0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f010 f9e7 	bl	8015f0c <memcpy>
 8005b3e:	463b      	mov	r3, r7
 8005b40:	a82e      	add	r0, sp, #184	; 0xb8
 8005b42:	4619      	mov	r1, r3
 8005b44:	23c0      	movs	r3, #192	; 0xc0
 8005b46:	461a      	mov	r2, r3
 8005b48:	f010 f9e0 	bl	8015f0c <memcpy>
 8005b4c:	4668      	mov	r0, sp
 8005b4e:	f104 0308 	add.w	r3, r4, #8
 8005b52:	22b8      	movs	r2, #184	; 0xb8
 8005b54:	4619      	mov	r1, r3
 8005b56:	f010 f9d9 	bl	8015f0c <memcpy>
 8005b5a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005b5e:	4810      	ldr	r0, [pc, #64]	; (8005ba0 <scaraInitDuty+0x270>)
 8005b60:	f001 fb02 	bl	8007168 <scaraInitCircle>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <scaraInitDuty+0x268>)
 8005b6c:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8005b70:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8005b74:	e002      	b.n	8005b7c <scaraInitDuty+0x24c>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005b76:	2303      	movs	r3, #3
 8005b78:	f001 ba18 	b.w	8006fac <scaraInitDuty+0x167c>
		}

		if ( SCARA_STATUS_OK != status) {
 8005b7c:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d013      	beq.n	8005bac <scaraInitDuty+0x27c>
			return status;
 8005b84:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005b88:	f001 ba10 	b.w	8006fac <scaraInitDuty+0x167c>
 8005b8c:	f3af 8000 	nop.w
 8005b90:	40668000 	.word	0x40668000
 8005b94:	2000b940 	.word	0x2000b940
 8005b98:	2000ad80 	.word	0x2000ad80
 8005b9c:	2000ad90 	.word	0x2000ad90
 8005ba0:	2000ae00 	.word	0x2000ae00
 8005ba4:	60000000 	.word	0x60000000
 8005ba8:	400921fb 	.word	0x400921fb
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8005bac:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 80ed 	bne.w	8005d90 <scaraInitDuty+0x460>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005bb6:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d155      	bne.n	8005c6a <scaraInitDuty+0x33a>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8005bbe:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005bc2:	4a9b      	ldr	r2, [pc, #620]	; (8005e30 <scaraInitDuty+0x500>)
 8005bc4:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005bc8:	4b99      	ldr	r3, [pc, #612]	; (8005e30 <scaraInitDuty+0x500>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005bd0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005bd4:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8005bd8:	eeb0 2a46 	vmov.f32	s4, s12
 8005bdc:	eef0 2a66 	vmov.f32	s5, s13
 8005be0:	eeb0 1a47 	vmov.f32	s2, s14
 8005be4:	eef0 1a67 	vmov.f32	s3, s15
 8005be8:	2201      	movs	r2, #1
 8005bea:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005bee:	2104      	movs	r1, #4
 8005bf0:	4890      	ldr	r0, [pc, #576]	; (8005e34 <scaraInitDuty+0x504>)
 8005bf2:	f001 fcf1 	bl	80075d8 <scaraInitLSPB1>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005bfc:	4a8c      	ldr	r2, [pc, #560]	; (8005e30 <scaraInitDuty+0x500>)
 8005bfe:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8005c02:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8005c06:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005c0a:	4a89      	ldr	r2, [pc, #548]	; (8005e30 <scaraInitDuty+0x500>)
 8005c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c10:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005c14:	4b86      	ldr	r3, [pc, #536]	; (8005e30 <scaraInitDuty+0x500>)
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005c1c:	f997 31af 	ldrsb.w	r3, [r7, #431]	; 0x1af
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fa fc7f 	bl	8000524 <__aeabi_i2d>
 8005c26:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8005c2a:	f7fa fce5 	bl	80005f8 <__aeabi_dmul>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	ec44 3b16 	vmov	d6, r3, r4
 8005c36:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005c3a:	eeb0 1a47 	vmov.f32	s2, s14
 8005c3e:	eef0 1a67 	vmov.f32	s3, s15
 8005c42:	2203      	movs	r2, #3
 8005c44:	eeb0 0a46 	vmov.f32	s0, s12
 8005c48:	eef0 0a66 	vmov.f32	s1, s13
 8005c4c:	2105      	movs	r1, #5
 8005c4e:	487a      	ldr	r0, [pc, #488]	; (8005e38 <scaraInitDuty+0x508>)
 8005c50:	f001 fc56 	bl	8007500 <scaraInitLinear>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 8005c5a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005c5e:	4a74      	ldr	r2, [pc, #464]	; (8005e30 <scaraInitDuty+0x500>)
 8005c60:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005c64:	e9c2 3400 	strd	r3, r4, [r2]
 8005c68:	e1e5      	b.n	8006036 <scaraInitDuty+0x706>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005c6a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 808b 	bne.w	8005d8a <scaraInitDuty+0x45a>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005c74:	4b6e      	ldr	r3, [pc, #440]	; (8005e30 <scaraInitDuty+0x500>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005c7c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005c80:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005c84:	eeb0 2a46 	vmov.f32	s4, s12
 8005c88:	eef0 2a66 	vmov.f32	s5, s13
 8005c8c:	eeb0 1a47 	vmov.f32	s2, s14
 8005c90:	eef0 1a67 	vmov.f32	s3, s15
 8005c94:	2200      	movs	r2, #0
 8005c96:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005c9a:	2104      	movs	r1, #4
 8005c9c:	4865      	ldr	r0, [pc, #404]	; (8005e34 <scaraInitDuty+0x504>)
 8005c9e:	f001 ff6f 	bl	8007b80 <scaraInitLSPB>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005ca8:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <scaraInitDuty+0x500>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005cb0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005cb4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005cb8:	eeb0 2a46 	vmov.f32	s4, s12
 8005cbc:	eef0 2a66 	vmov.f32	s5, s13
 8005cc0:	eeb0 1a47 	vmov.f32	s2, s14
 8005cc4:	eef0 1a67 	vmov.f32	s3, s15
 8005cc8:	2200      	movs	r2, #0
 8005cca:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005cce:	2105      	movs	r1, #5
 8005cd0:	485a      	ldr	r0, [pc, #360]	; (8005e3c <scaraInitDuty+0x50c>)
 8005cd2:	f001 ff55 	bl	8007b80 <scaraInitLSPB>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8005cdc:	4b54      	ldr	r3, [pc, #336]	; (8005e30 <scaraInitDuty+0x500>)
 8005cde:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8005ce2:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <scaraInitDuty+0x500>)
 8005ce4:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4623      	mov	r3, r4
 8005cec:	f7fa ff14 	bl	8000b18 <__aeabi_dcmpgt>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d024      	beq.n	8005d40 <scaraInitDuty+0x410>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8005cf6:	4b4e      	ldr	r3, [pc, #312]	; (8005e30 <scaraInitDuty+0x500>)
 8005cf8:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005cfc:	4a4c      	ldr	r2, [pc, #304]	; (8005e30 <scaraInitDuty+0x500>)
 8005cfe:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005d02:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d06:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d0a:	eeb0 2a46 	vmov.f32	s4, s12
 8005d0e:	eef0 2a66 	vmov.f32	s5, s13
 8005d12:	eeb0 1a47 	vmov.f32	s2, s14
 8005d16:	eef0 1a67 	vmov.f32	s3, s15
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005d20:	2105      	movs	r1, #5
 8005d22:	4846      	ldr	r0, [pc, #280]	; (8005e3c <scaraInitDuty+0x50c>)
 8005d24:	f001 ff2c 	bl	8007b80 <scaraInitLSPB>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8005d2e:	4b40      	ldr	r3, [pc, #256]	; (8005e30 <scaraInitDuty+0x500>)
 8005d30:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005d34:	4a3e      	ldr	r2, [pc, #248]	; (8005e30 <scaraInitDuty+0x500>)
 8005d36:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005d3a:	e9c2 3400 	strd	r3, r4, [r2]
 8005d3e:	e17a      	b.n	8006036 <scaraInitDuty+0x706>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8005d40:	4b3b      	ldr	r3, [pc, #236]	; (8005e30 <scaraInitDuty+0x500>)
 8005d42:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005d46:	4a3a      	ldr	r2, [pc, #232]	; (8005e30 <scaraInitDuty+0x500>)
 8005d48:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005d4c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d50:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d54:	eeb0 2a46 	vmov.f32	s4, s12
 8005d58:	eef0 2a66 	vmov.f32	s5, s13
 8005d5c:	eeb0 1a47 	vmov.f32	s2, s14
 8005d60:	eef0 1a67 	vmov.f32	s3, s15
 8005d64:	2201      	movs	r2, #1
 8005d66:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005d6a:	2104      	movs	r1, #4
 8005d6c:	4831      	ldr	r0, [pc, #196]	; (8005e34 <scaraInitDuty+0x504>)
 8005d6e:	f001 ff07 	bl	8007b80 <scaraInitLSPB>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8005d78:	4b2d      	ldr	r3, [pc, #180]	; (8005e30 <scaraInitDuty+0x500>)
 8005d7a:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005d7e:	4a2c      	ldr	r2, [pc, #176]	; (8005e30 <scaraInitDuty+0x500>)
 8005d80:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005d84:	e9c2 3400 	strd	r3, r4, [r2]
 8005d88:	e155      	b.n	8006036 <scaraInitDuty+0x706>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	f001 b90e 	b.w	8006fac <scaraInitDuty+0x167c>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8005d90:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	f040 80ea 	bne.w	8005f6e <scaraInitDuty+0x63e>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005d9a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d152      	bne.n	8005e48 <scaraInitDuty+0x518>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8005da2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005da6:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <scaraInitDuty+0x500>)
 8005da8:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005dac:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <scaraInitDuty+0x500>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005db4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005db8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005dbc:	eeb0 2a46 	vmov.f32	s4, s12
 8005dc0:	eef0 2a66 	vmov.f32	s5, s13
 8005dc4:	eeb0 1a47 	vmov.f32	s2, s14
 8005dc8:	eef0 1a67 	vmov.f32	s3, s15
 8005dcc:	2201      	movs	r2, #1
 8005dce:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005dd2:	2104      	movs	r1, #4
 8005dd4:	481a      	ldr	r0, [pc, #104]	; (8005e40 <scaraInitDuty+0x510>)
 8005dd6:	f002 fab3 	bl	8008340 <scaraInitScurve>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8005de0:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005de4:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <scaraInitDuty+0x500>)
 8005de6:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <scaraInitDuty+0x500>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005df2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005df6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005dfa:	eeb0 2a46 	vmov.f32	s4, s12
 8005dfe:	eef0 2a66 	vmov.f32	s5, s13
 8005e02:	eeb0 1a47 	vmov.f32	s2, s14
 8005e06:	eef0 1a67 	vmov.f32	s3, s15
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005e10:	2105      	movs	r1, #5
 8005e12:	480c      	ldr	r0, [pc, #48]	; (8005e44 <scaraInitDuty+0x514>)
 8005e14:	f002 fa94 	bl	8008340 <scaraInitScurve>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8005e1e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005e22:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <scaraInitDuty+0x500>)
 8005e24:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005e28:	e9c2 3400 	strd	r3, r4, [r2]
 8005e2c:	e103      	b.n	8006036 <scaraInitDuty+0x706>
 8005e2e:	bf00      	nop
 8005e30:	2000ad80 	.word	0x2000ad80
 8005e34:	2000ae98 	.word	0x2000ae98
 8005e38:	2000b168 	.word	0x2000b168
 8005e3c:	2000b018 	.word	0x2000b018
 8005e40:	2000af18 	.word	0x2000af18
 8005e44:	2000b098 	.word	0x2000b098

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005e48:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 808b 	bne.w	8005f68 <scaraInitDuty+0x638>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005e52:	4b81      	ldr	r3, [pc, #516]	; (8006058 <scaraInitDuty+0x728>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005e5a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e5e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e62:	eeb0 2a46 	vmov.f32	s4, s12
 8005e66:	eef0 2a66 	vmov.f32	s5, s13
 8005e6a:	eeb0 1a47 	vmov.f32	s2, s14
 8005e6e:	eef0 1a67 	vmov.f32	s3, s15
 8005e72:	2200      	movs	r2, #0
 8005e74:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005e78:	2104      	movs	r1, #4
 8005e7a:	4878      	ldr	r0, [pc, #480]	; (800605c <scaraInitDuty+0x72c>)
 8005e7c:	f002 fa60 	bl	8008340 <scaraInitScurve>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005e86:	4b74      	ldr	r3, [pc, #464]	; (8006058 <scaraInitDuty+0x728>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005e8e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e92:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e96:	eeb0 2a46 	vmov.f32	s4, s12
 8005e9a:	eef0 2a66 	vmov.f32	s5, s13
 8005e9e:	eeb0 1a47 	vmov.f32	s2, s14
 8005ea2:	eef0 1a67 	vmov.f32	s3, s15
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005eac:	2105      	movs	r1, #5
 8005eae:	486c      	ldr	r0, [pc, #432]	; (8006060 <scaraInitDuty+0x730>)
 8005eb0:	f002 fa46 	bl	8008340 <scaraInitScurve>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8005eba:	4b67      	ldr	r3, [pc, #412]	; (8006058 <scaraInitDuty+0x728>)
 8005ebc:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8005ec0:	4b65      	ldr	r3, [pc, #404]	; (8006058 <scaraInitDuty+0x728>)
 8005ec2:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4623      	mov	r3, r4
 8005eca:	f7fa fe25 	bl	8000b18 <__aeabi_dcmpgt>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d024      	beq.n	8005f1e <scaraInitDuty+0x5ee>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8005ed4:	4b60      	ldr	r3, [pc, #384]	; (8006058 <scaraInitDuty+0x728>)
 8005ed6:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005eda:	4a5f      	ldr	r2, [pc, #380]	; (8006058 <scaraInitDuty+0x728>)
 8005edc:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005ee0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005ee4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005ee8:	eeb0 2a46 	vmov.f32	s4, s12
 8005eec:	eef0 2a66 	vmov.f32	s5, s13
 8005ef0:	eeb0 1a47 	vmov.f32	s2, s14
 8005ef4:	eef0 1a67 	vmov.f32	s3, s15
 8005ef8:	2201      	movs	r2, #1
 8005efa:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005efe:	2105      	movs	r1, #5
 8005f00:	4857      	ldr	r0, [pc, #348]	; (8006060 <scaraInitDuty+0x730>)
 8005f02:	f002 fa1d 	bl	8008340 <scaraInitScurve>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005f0c:	4b52      	ldr	r3, [pc, #328]	; (8006058 <scaraInitDuty+0x728>)
 8005f0e:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005f12:	4a51      	ldr	r2, [pc, #324]	; (8006058 <scaraInitDuty+0x728>)
 8005f14:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005f18:	e9c2 3400 	strd	r3, r4, [r2]
 8005f1c:	e08b      	b.n	8006036 <scaraInitDuty+0x706>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8005f1e:	4b4e      	ldr	r3, [pc, #312]	; (8006058 <scaraInitDuty+0x728>)
 8005f20:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005f24:	4a4c      	ldr	r2, [pc, #304]	; (8006058 <scaraInitDuty+0x728>)
 8005f26:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005f2a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f2e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f32:	eeb0 2a46 	vmov.f32	s4, s12
 8005f36:	eef0 2a66 	vmov.f32	s5, s13
 8005f3a:	eeb0 1a47 	vmov.f32	s2, s14
 8005f3e:	eef0 1a67 	vmov.f32	s3, s15
 8005f42:	2201      	movs	r2, #1
 8005f44:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005f48:	2104      	movs	r1, #4
 8005f4a:	4844      	ldr	r0, [pc, #272]	; (800605c <scaraInitDuty+0x72c>)
 8005f4c:	f002 f9f8 	bl	8008340 <scaraInitScurve>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8005f56:	4b40      	ldr	r3, [pc, #256]	; (8006058 <scaraInitDuty+0x728>)
 8005f58:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005f5c:	4a3e      	ldr	r2, [pc, #248]	; (8006058 <scaraInitDuty+0x728>)
 8005f5e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005f62:	e9c2 3400 	strd	r3, r4, [r2]
 8005f66:	e066      	b.n	8006036 <scaraInitDuty+0x706>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f001 b81f 	b.w	8006fac <scaraInitDuty+0x167c>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 8005f6e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d15c      	bne.n	8006030 <scaraInitDuty+0x700>
			myDUTY.time_total = command.time_total;
 8005f76:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005f7a:	4a37      	ldr	r2, [pc, #220]	; (8006058 <scaraInitDuty+0x728>)
 8005f7c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005f80:	e9c2 3400 	strd	r3, r4, [r2]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005f84:	4a34      	ldr	r2, [pc, #208]	; (8006058 <scaraInitDuty+0x728>)
 8005f86:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8005f8a:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005f8e:	4b32      	ldr	r3, [pc, #200]	; (8006058 <scaraInitDuty+0x728>)
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005f96:	4b30      	ldr	r3, [pc, #192]	; (8006058 <scaraInitDuty+0x728>)
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 8005f9e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d110      	bne.n	8005fc8 <scaraInitDuty+0x698>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 8005fa6:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005faa:	eeb0 1a47 	vmov.f32	s2, s14
 8005fae:	eef0 1a67 	vmov.f32	s3, s15
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005fb8:	2104      	movs	r1, #4
 8005fba:	482a      	ldr	r0, [pc, #168]	; (8006064 <scaraInitDuty+0x734>)
 8005fbc:	f001 faa0 	bl	8007500 <scaraInitLinear>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005fc6:	e013      	b.n	8005ff0 <scaraInitDuty+0x6c0>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8005fc8:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d10f      	bne.n	8005ff0 <scaraInitDuty+0x6c0>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QV, command.v_factor);
 8005fd0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005fd4:	eeb0 1a47 	vmov.f32	s2, s14
 8005fd8:	eef0 1a67 	vmov.f32	s3, s15
 8005fdc:	2202      	movs	r2, #2
 8005fde:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005fe2:	2104      	movs	r1, #4
 8005fe4:	481f      	ldr	r0, [pc, #124]	; (8006064 <scaraInitDuty+0x734>)
 8005fe6:	f001 fa8b 	bl	8007500 <scaraInitLinear>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			}
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005ff0:	f997 31af 	ldrsb.w	r3, [r7, #431]	; 0x1af
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fa fa95 	bl	8000524 <__aeabi_i2d>
 8005ffa:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8005ffe:	f7fa fafb 	bl	80005f8 <__aeabi_dmul>
 8006002:	4603      	mov	r3, r0
 8006004:	460c      	mov	r4, r1
 8006006:	ec44 3b16 	vmov	d6, r3, r4
 800600a:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800600e:	eeb0 1a47 	vmov.f32	s2, s14
 8006012:	eef0 1a67 	vmov.f32	s3, s15
 8006016:	2203      	movs	r2, #3
 8006018:	eeb0 0a46 	vmov.f32	s0, s12
 800601c:	eef0 0a66 	vmov.f32	s1, s13
 8006020:	2105      	movs	r1, #5
 8006022:	4811      	ldr	r0, [pc, #68]	; (8006068 <scaraInitDuty+0x738>)
 8006024:	f001 fa6c 	bl	8007500 <scaraInitLinear>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800602e:	e002      	b.n	8006036 <scaraInitDuty+0x706>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8006030:	2305      	movs	r3, #5
 8006032:	f000 bfbb 	b.w	8006fac <scaraInitDuty+0x167c>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8006036:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <scaraInitDuty+0x716>
			return status1;
 800603e:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006042:	f000 bfb3 	b.w	8006fac <scaraInitDuty+0x167c>
		}
		if ( SCARA_STATUS_OK != status2) {
 8006046:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8780 	beq.w	8006f50 <scaraInitDuty+0x1620>
			return status2;
 8006050:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006054:	f000 bfaa 	b.w	8006fac <scaraInitDuty+0x167c>
 8006058:	2000ad80 	.word	0x2000ad80
 800605c:	2000af18 	.word	0x2000af18
 8006060:	2000b098 	.word	0x2000b098
 8006064:	2000afe8 	.word	0x2000afe8
 8006068:	2000b168 	.word	0x2000b168
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800606c:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006070:	2b01      	cmp	r3, #1
 8006072:	f040 876b 	bne.w	8006f4c <scaraInitDuty+0x161c>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8006076:	4bb6      	ldr	r3, [pc, #728]	; (8006350 <scaraInitDuty+0xa20>)
 8006078:	2201      	movs	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 800607c:	4bb5      	ldr	r3, [pc, #724]	; (8006354 <scaraInitDuty+0xa24>)
 800607e:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8006082:	4ab3      	ldr	r2, [pc, #716]	; (8006350 <scaraInitDuty+0xa20>)
 8006084:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8006088:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 800608c:	4bb1      	ldr	r3, [pc, #708]	; (8006354 <scaraInitDuty+0xa24>)
 800608e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006092:	4aaf      	ldr	r2, [pc, #700]	; (8006350 <scaraInitDuty+0xa20>)
 8006094:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 8006098:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 800609c:	4bad      	ldr	r3, [pc, #692]	; (8006354 <scaraInitDuty+0xa24>)
 800609e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80060a2:	4aab      	ldr	r2, [pc, #684]	; (8006350 <scaraInitDuty+0xa20>)
 80060a4:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 80060a8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80060ac:	4ba9      	ldr	r3, [pc, #676]	; (8006354 <scaraInitDuty+0xa24>)
 80060ae:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80060b2:	4aa7      	ldr	r2, [pc, #668]	; (8006350 <scaraInitDuty+0xa20>)
 80060b4:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 80060b8:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if(command.joint_type == DUTY_JOINT_4DOF){
 80060bc:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 8373 	bne.w	80067ac <scaraInitDuty+0xe7c>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 80060c6:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80060ca:	a39f      	add	r3, pc, #636	; (adr r3, 8006348 <scaraInitDuty+0xa18>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa fa92 	bl	80005f8 <__aeabi_dmul>
 80060d4:	4603      	mov	r3, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	4618      	mov	r0, r3
 80060da:	4621      	mov	r1, r4
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	4b9d      	ldr	r3, [pc, #628]	; (8006358 <scaraInitDuty+0xa28>)
 80060e2:	f7fa fbb3 	bl	800084c <__aeabi_ddiv>
 80060e6:	4603      	mov	r3, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80060ee:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d13c      	bne.n	8006170 <scaraInitDuty+0x840>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 80060f6:	4b97      	ldr	r3, [pc, #604]	; (8006354 <scaraInitDuty+0xa24>)
 80060f8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80060fc:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006100:	461a      	mov	r2, r3
 8006102:	4623      	mov	r3, r4
 8006104:	f7fa f8c2 	bl	800028c <__adddf3>
 8006108:	4603      	mov	r3, r0
 800610a:	460c      	mov	r4, r1
 800610c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006110:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8006114:	4b8f      	ldr	r3, [pc, #572]	; (8006354 <scaraInitDuty+0xa24>)
 8006116:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800611a:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800611e:	461a      	mov	r2, r3
 8006120:	4623      	mov	r3, r4
 8006122:	f7fa f8b3 	bl	800028c <__adddf3>
 8006126:	4603      	mov	r3, r0
 8006128:	460c      	mov	r4, r1
 800612a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800612e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8006132:	4b88      	ldr	r3, [pc, #544]	; (8006354 <scaraInitDuty+0xa24>)
 8006134:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006138:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800613c:	461a      	mov	r2, r3
 800613e:	4623      	mov	r3, r4
 8006140:	f7fa f8a4 	bl	800028c <__adddf3>
 8006144:	4603      	mov	r3, r0
 8006146:	460c      	mov	r4, r1
 8006148:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800614c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006150:	4b80      	ldr	r3, [pc, #512]	; (8006354 <scaraInitDuty+0xa24>)
 8006152:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006156:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800615a:	461a      	mov	r2, r3
 800615c:	4623      	mov	r3, r4
 800615e:	f7fa f895 	bl	800028c <__adddf3>
 8006162:	4603      	mov	r3, r0
 8006164:	460c      	mov	r4, r1
 8006166:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800616a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 800616e:	e01f      	b.n	80061b0 <scaraInitDuty+0x880>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006170:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006174:	2b00      	cmp	r3, #0
 8006176:	d118      	bne.n	80061aa <scaraInitDuty+0x87a>
				target_point.x 		= command.target_point.x;
 8006178:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800617c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006180:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 8006184:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006188:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800618c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 8006190:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8006194:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006198:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 800619c:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80061a0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061a4:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 80061a8:	e002      	b.n	80061b0 <scaraInitDuty+0x880>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80061aa:	230c      	movs	r3, #12
 80061ac:	f000 befe 	b.w	8006fac <scaraInitDuty+0x167c>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 80061b0:	4c68      	ldr	r4, [pc, #416]	; (8006354 <scaraInitDuty+0xa24>)
 80061b2:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 80061b6:	4668      	mov	r0, sp
 80061b8:	f104 0308 	add.w	r3, r4, #8
 80061bc:	22b8      	movs	r2, #184	; 0xb8
 80061be:	4619      	mov	r1, r3
 80061c0:	f00f fea4 	bl	8015f0c <memcpy>
 80061c4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7fe f8a5 	bl	8004318 <kinematicInverse>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <scaraInitDuty+0x8aa>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80061d4:	2307      	movs	r3, #7
 80061d6:	f000 bee9 	b.w	8006fac <scaraInitDuty+0x167c>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80061da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80061de:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80061e2:	4b5c      	ldr	r3, [pc, #368]	; (8006354 <scaraInitDuty+0xa24>)
 80061e4:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80061e8:	461a      	mov	r2, r3
 80061ea:	4623      	mov	r3, r4
 80061ec:	f7fa f84c 	bl	8000288 <__aeabi_dsub>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	463a      	mov	r2, r7
 80061f6:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80061fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80061fe:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8006202:	4b54      	ldr	r3, [pc, #336]	; (8006354 <scaraInitDuty+0xa24>)
 8006204:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006208:	461a      	mov	r2, r3
 800620a:	4623      	mov	r3, r4
 800620c:	f7fa f83c 	bl	8000288 <__aeabi_dsub>
 8006210:	4603      	mov	r3, r0
 8006212:	460c      	mov	r4, r1
 8006214:	463a      	mov	r2, r7
 8006216:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 800621a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800621e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006222:	4b4c      	ldr	r3, [pc, #304]	; (8006354 <scaraInitDuty+0xa24>)
 8006224:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8006228:	461a      	mov	r2, r3
 800622a:	4623      	mov	r3, r4
 800622c:	f7fa f82c 	bl	8000288 <__aeabi_dsub>
 8006230:	4603      	mov	r3, r0
 8006232:	460c      	mov	r4, r1
 8006234:	463a      	mov	r2, r7
 8006236:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 800623a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800623e:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8006242:	4b44      	ldr	r3, [pc, #272]	; (8006354 <scaraInitDuty+0xa24>)
 8006244:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8006248:	461a      	mov	r2, r3
 800624a:	4623      	mov	r3, r4
 800624c:	f7fa f81c 	bl	8000288 <__aeabi_dsub>
 8006250:	4603      	mov	r3, r0
 8006252:	460c      	mov	r4, r1
 8006254:	463a      	mov	r2, r7
 8006256:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800625a:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 8157 	bne.w	8006512 <scaraInitDuty+0xbe2>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006264:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d162      	bne.n	8006332 <scaraInitDuty+0xa02>
					for ( uint8_t i = 0; i < 4; i++) {
 800626c:	2300      	movs	r3, #0
 800626e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006272:	e051      	b.n	8006318 <scaraInitDuty+0x9e8>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006274:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 8006278:	4935      	ldr	r1, [pc, #212]	; (8006350 <scaraInitDuty+0xa20>)
 800627a:	4613      	mov	r3, r2
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	4413      	add	r3, r2
 8006280:	01db      	lsls	r3, r3, #7
 8006282:	440b      	add	r3, r1
 8006284:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800628c:	f897 01ae 	ldrb.w	r0, [r7, #430]	; 0x1ae
 8006290:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006294:	4c2e      	ldr	r4, [pc, #184]	; (8006350 <scaraInitDuty+0xa20>)
 8006296:	4603      	mov	r3, r0
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4403      	add	r3, r0
 800629c:	01db      	lsls	r3, r3, #7
 800629e:	4423      	add	r3, r4
 80062a0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80062a4:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80062a8:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 80062ac:	4613      	mov	r3, r2
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	4413      	add	r3, r2
 80062b2:	01db      	lsls	r3, r3, #7
 80062b4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80062b8:	4a25      	ldr	r2, [pc, #148]	; (8006350 <scaraInitDuty+0xa20>)
 80062ba:	1898      	adds	r0, r3, r2
 80062bc:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80062c0:	4a26      	ldr	r2, [pc, #152]	; (800635c <scaraInitDuty+0xa2c>)
 80062c2:	5cd1      	ldrb	r1, [r2, r3]
 80062c4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80062c8:	463a      	mov	r2, r7
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	4413      	add	r3, r2
 80062ce:	ed93 7b00 	vldr	d7, [r3]
 80062d2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80062d6:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 80062da:	eeb0 2a45 	vmov.f32	s4, s10
 80062de:	eef0 2a65 	vmov.f32	s5, s11
 80062e2:	eeb0 1a46 	vmov.f32	s2, s12
 80062e6:	eef0 1a66 	vmov.f32	s3, s13
 80062ea:	2201      	movs	r2, #1
 80062ec:	eeb0 0a47 	vmov.f32	s0, s14
 80062f0:	eef0 0a67 	vmov.f32	s1, s15
 80062f4:	f001 f970 	bl	80075d8 <scaraInitLSPB1>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
						if(status1 != SCARA_STATUS_OK){
 80062fe:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <scaraInitDuty+0x9de>
							return status1;
 8006306:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800630a:	f000 be4f 	b.w	8006fac <scaraInitDuty+0x167c>
					for ( uint8_t i = 0; i < 4; i++) {
 800630e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8006312:	3301      	adds	r3, #1
 8006314:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8006318:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800631c:	2b03      	cmp	r3, #3
 800631e:	d9a9      	bls.n	8006274 <scaraInitDuty+0x944>
						}
					}
					myDUTY.time_total = command.time_total;
 8006320:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006324:	4a0a      	ldr	r2, [pc, #40]	; (8006350 <scaraInitDuty+0xa20>)
 8006326:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800632a:	e9c2 3400 	strd	r3, r4, [r2]
 800632e:	f000 be0f 	b.w	8006f50 <scaraInitDuty+0x1620>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006332:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006336:	2b00      	cmp	r3, #0
 8006338:	f040 80e8 	bne.w	800650c <scaraInitDuty+0xbdc>
					for ( uint8_t i = 0; i < 4; i++) {
 800633c:	2300      	movs	r3, #0
 800633e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8006342:	e049      	b.n	80063d8 <scaraInitDuty+0xaa8>
 8006344:	f3af 8000 	nop.w
 8006348:	60000000 	.word	0x60000000
 800634c:	400921fb 	.word	0x400921fb
 8006350:	2000ad80 	.word	0x2000ad80
 8006354:	2000b940 	.word	0x2000b940
 8006358:	40668000 	.word	0x40668000
 800635c:	20000884 	.word	0x20000884
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006360:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 8006364:	49c8      	ldr	r1, [pc, #800]	; (8006688 <scaraInitDuty+0xd58>)
 8006366:	4613      	mov	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	4413      	add	r3, r2
 800636c:	01db      	lsls	r3, r3, #7
 800636e:	440b      	add	r3, r1
 8006370:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006378:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 800637c:	4613      	mov	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006388:	4abf      	ldr	r2, [pc, #764]	; (8006688 <scaraInitDuty+0xd58>)
 800638a:	1898      	adds	r0, r3, r2
 800638c:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006390:	4abe      	ldr	r2, [pc, #760]	; (800668c <scaraInitDuty+0xd5c>)
 8006392:	5cd1      	ldrb	r1, [r2, r3]
 8006394:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8006398:	463a      	mov	r2, r7
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	4413      	add	r3, r2
 800639e:	ed93 7b00 	vldr	d7, [r3]
 80063a2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80063a6:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80063aa:	eeb0 2a45 	vmov.f32	s4, s10
 80063ae:	eef0 2a65 	vmov.f32	s5, s11
 80063b2:	eeb0 1a46 	vmov.f32	s2, s12
 80063b6:	eef0 1a66 	vmov.f32	s3, s13
 80063ba:	2200      	movs	r2, #0
 80063bc:	eeb0 0a47 	vmov.f32	s0, s14
 80063c0:	eef0 0a67 	vmov.f32	s1, s15
 80063c4:	f001 fbdc 	bl	8007b80 <scaraInitLSPB>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80063ce:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80063d2:	3301      	adds	r3, #1
 80063d4:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80063d8:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d9bf      	bls.n	8006360 <scaraInitDuty+0xa30>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80063e0:	4ba9      	ldr	r3, [pc, #676]	; (8006688 <scaraInitDuty+0xd58>)
 80063e2:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	f04f 0400 	mov.w	r4, #0
 80063ee:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80063f2:	2300      	movs	r3, #0
 80063f4:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 80063f8:	e02d      	b.n	8006456 <scaraInitDuty+0xb26>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80063fa:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 80063fe:	49a2      	ldr	r1, [pc, #648]	; (8006688 <scaraInitDuty+0xd58>)
 8006400:	4613      	mov	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	4413      	add	r3, r2
 8006406:	01db      	lsls	r3, r3, #7
 8006408:	440b      	add	r3, r1
 800640a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800640e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006412:	4b9d      	ldr	r3, [pc, #628]	; (8006688 <scaraInitDuty+0xd58>)
 8006414:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006418:	e9d3 3400 	ldrd	r3, r4, [r3]
 800641c:	461a      	mov	r2, r3
 800641e:	4623      	mov	r3, r4
 8006420:	f7fa fb7a 	bl	8000b18 <__aeabi_dcmpgt>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d010      	beq.n	800644c <scaraInitDuty+0xb1c>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800642a:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 800642e:	4996      	ldr	r1, [pc, #600]	; (8006688 <scaraInitDuty+0xd58>)
 8006430:	4613      	mov	r3, r2
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4413      	add	r3, r2
 8006436:	01db      	lsls	r3, r3, #7
 8006438:	440b      	add	r3, r1
 800643a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800643e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006442:	4a91      	ldr	r2, [pc, #580]	; (8006688 <scaraInitDuty+0xd58>)
 8006444:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006448:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800644c:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8006450:	3301      	adds	r3, #1
 8006452:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 8006456:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 800645a:	2b03      	cmp	r3, #3
 800645c:	d9cd      	bls.n	80063fa <scaraInitDuty+0xaca>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 800645e:	2300      	movs	r3, #0
 8006460:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8006464:	e04c      	b.n	8006500 <scaraInitDuty+0xbd0>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006466:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 800646a:	4987      	ldr	r1, [pc, #540]	; (8006688 <scaraInitDuty+0xd58>)
 800646c:	4613      	mov	r3, r2
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	4413      	add	r3, r2
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	440b      	add	r3, r1
 8006476:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 800647e:	f897 01ab 	ldrb.w	r0, [r7, #427]	; 0x1ab
 8006482:	4b81      	ldr	r3, [pc, #516]	; (8006688 <scaraInitDuty+0xd58>)
 8006484:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006488:	e9d3 1200 	ldrd	r1, r2, [r3]
 800648c:	4c7e      	ldr	r4, [pc, #504]	; (8006688 <scaraInitDuty+0xd58>)
 800648e:	4603      	mov	r3, r0
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4403      	add	r3, r0
 8006494:	01db      	lsls	r3, r3, #7
 8006496:	4423      	add	r3, r4
 8006498:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800649c:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80064a0:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 80064a4:	4613      	mov	r3, r2
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	4413      	add	r3, r2
 80064aa:	01db      	lsls	r3, r3, #7
 80064ac:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80064b0:	4a75      	ldr	r2, [pc, #468]	; (8006688 <scaraInitDuty+0xd58>)
 80064b2:	1898      	adds	r0, r3, r2
 80064b4:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 80064b8:	4a74      	ldr	r2, [pc, #464]	; (800668c <scaraInitDuty+0xd5c>)
 80064ba:	5cd1      	ldrb	r1, [r2, r3]
 80064bc:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 80064c0:	463a      	mov	r2, r7
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	4413      	add	r3, r2
 80064c6:	ed93 7b00 	vldr	d7, [r3]
 80064ca:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80064ce:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80064d2:	eeb0 2a45 	vmov.f32	s4, s10
 80064d6:	eef0 2a65 	vmov.f32	s5, s11
 80064da:	eeb0 1a46 	vmov.f32	s2, s12
 80064de:	eef0 1a66 	vmov.f32	s3, s13
 80064e2:	2201      	movs	r2, #1
 80064e4:	eeb0 0a47 	vmov.f32	s0, s14
 80064e8:	eef0 0a67 	vmov.f32	s1, s15
 80064ec:	f001 fb48 	bl	8007b80 <scaraInitLSPB>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80064f6:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 80064fa:	3301      	adds	r3, #1
 80064fc:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8006500:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8006504:	2b03      	cmp	r3, #3
 8006506:	d9ae      	bls.n	8006466 <scaraInitDuty+0xb36>
 8006508:	f000 bd22 	b.w	8006f50 <scaraInitDuty+0x1620>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800650c:	2308      	movs	r3, #8
 800650e:	f000 bd4d 	b.w	8006fac <scaraInitDuty+0x167c>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8006512:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006516:	2b01      	cmp	r3, #1
 8006518:	f040 8145 	bne.w	80067a6 <scaraInitDuty+0xe76>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800651c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d15a      	bne.n	80065da <scaraInitDuty+0xcaa>
					for ( uint8_t i = 0; i < 4; i++) {
 8006524:	2300      	movs	r3, #0
 8006526:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 800652a:	e049      	b.n	80065c0 <scaraInitDuty+0xc90>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800652c:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 8006530:	4955      	ldr	r1, [pc, #340]	; (8006688 <scaraInitDuty+0xd58>)
 8006532:	4613      	mov	r3, r2
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	4413      	add	r3, r2
 8006538:	01db      	lsls	r3, r3, #7
 800653a:	440b      	add	r3, r1
 800653c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006540:	2201      	movs	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006544:	f897 01aa 	ldrb.w	r0, [r7, #426]	; 0x1aa
 8006548:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 800654c:	4c4e      	ldr	r4, [pc, #312]	; (8006688 <scaraInitDuty+0xd58>)
 800654e:	4603      	mov	r3, r0
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4403      	add	r3, r0
 8006554:	01db      	lsls	r3, r3, #7
 8006556:	4423      	add	r3, r4
 8006558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655c:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006560:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 8006564:	4613      	mov	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4413      	add	r3, r2
 800656a:	01db      	lsls	r3, r3, #7
 800656c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006570:	4a45      	ldr	r2, [pc, #276]	; (8006688 <scaraInitDuty+0xd58>)
 8006572:	1898      	adds	r0, r3, r2
 8006574:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8006578:	4a44      	ldr	r2, [pc, #272]	; (800668c <scaraInitDuty+0xd5c>)
 800657a:	5cd1      	ldrb	r1, [r2, r3]
 800657c:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8006580:	463a      	mov	r2, r7
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	4413      	add	r3, r2
 8006586:	ed93 7b00 	vldr	d7, [r3]
 800658a:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800658e:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006592:	eeb0 2a45 	vmov.f32	s4, s10
 8006596:	eef0 2a65 	vmov.f32	s5, s11
 800659a:	eeb0 1a46 	vmov.f32	s2, s12
 800659e:	eef0 1a66 	vmov.f32	s3, s13
 80065a2:	2201      	movs	r2, #1
 80065a4:	eeb0 0a47 	vmov.f32	s0, s14
 80065a8:	eef0 0a67 	vmov.f32	s1, s15
 80065ac:	f001 fec8 	bl	8008340 <scaraInitScurve>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80065b6:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 80065ba:	3301      	adds	r3, #1
 80065bc:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 80065c0:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d9b1      	bls.n	800652c <scaraInitDuty+0xbfc>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 80065c8:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80065cc:	4a2e      	ldr	r2, [pc, #184]	; (8006688 <scaraInitDuty+0xd58>)
 80065ce:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80065d2:	e9c2 3400 	strd	r3, r4, [r2]
 80065d6:	f000 bcbb 	b.w	8006f50 <scaraInitDuty+0x1620>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80065da:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 80de 	bne.w	80067a0 <scaraInitDuty+0xe70>
					for ( uint8_t i = 0; i < 4; i++) {
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 80065ea:	e03b      	b.n	8006664 <scaraInitDuty+0xd34>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80065ec:	f897 21a9 	ldrb.w	r2, [r7, #425]	; 0x1a9
 80065f0:	4925      	ldr	r1, [pc, #148]	; (8006688 <scaraInitDuty+0xd58>)
 80065f2:	4613      	mov	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4413      	add	r3, r2
 80065f8:	01db      	lsls	r3, r3, #7
 80065fa:	440b      	add	r3, r1
 80065fc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006600:	2201      	movs	r2, #1
 8006602:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006604:	f897 21a9 	ldrb.w	r2, [r7, #425]	; 0x1a9
 8006608:	4613      	mov	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4413      	add	r3, r2
 800660e:	01db      	lsls	r3, r3, #7
 8006610:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006614:	4a1c      	ldr	r2, [pc, #112]	; (8006688 <scaraInitDuty+0xd58>)
 8006616:	1898      	adds	r0, r3, r2
 8006618:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 800661c:	4a1b      	ldr	r2, [pc, #108]	; (800668c <scaraInitDuty+0xd5c>)
 800661e:	5cd1      	ldrb	r1, [r2, r3]
 8006620:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 8006624:	463a      	mov	r2, r7
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4413      	add	r3, r2
 800662a:	ed93 7b00 	vldr	d7, [r3]
 800662e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006632:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006636:	eeb0 2a45 	vmov.f32	s4, s10
 800663a:	eef0 2a65 	vmov.f32	s5, s11
 800663e:	eeb0 1a46 	vmov.f32	s2, s12
 8006642:	eef0 1a66 	vmov.f32	s3, s13
 8006646:	2200      	movs	r2, #0
 8006648:	eeb0 0a47 	vmov.f32	s0, s14
 800664c:	eef0 0a67 	vmov.f32	s1, s15
 8006650:	f001 fe76 	bl	8008340 <scaraInitScurve>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800665a:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 800665e:	3301      	adds	r3, #1
 8006660:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 8006664:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 8006668:	2b03      	cmp	r3, #3
 800666a:	d9bf      	bls.n	80065ec <scaraInitDuty+0xcbc>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <scaraInitDuty+0xd58>)
 800666e:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	f04f 0400 	mov.w	r4, #0
 800667a:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800667e:	2300      	movs	r3, #0
 8006680:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 8006684:	e032      	b.n	80066ec <scaraInitDuty+0xdbc>
 8006686:	bf00      	nop
 8006688:	2000ad80 	.word	0x2000ad80
 800668c:	20000884 	.word	0x20000884
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8006690:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 8006694:	49bc      	ldr	r1, [pc, #752]	; (8006988 <scaraInitDuty+0x1058>)
 8006696:	4613      	mov	r3, r2
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	4413      	add	r3, r2
 800669c:	01db      	lsls	r3, r3, #7
 800669e:	440b      	add	r3, r1
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066a8:	4bb7      	ldr	r3, [pc, #732]	; (8006988 <scaraInitDuty+0x1058>)
 80066aa:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80066ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066b2:	461a      	mov	r2, r3
 80066b4:	4623      	mov	r3, r4
 80066b6:	f7fa fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d010      	beq.n	80066e2 <scaraInitDuty+0xdb2>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80066c0:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 80066c4:	49b0      	ldr	r1, [pc, #704]	; (8006988 <scaraInitDuty+0x1058>)
 80066c6:	4613      	mov	r3, r2
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	4413      	add	r3, r2
 80066cc:	01db      	lsls	r3, r3, #7
 80066ce:	440b      	add	r3, r1
 80066d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066d8:	4aab      	ldr	r2, [pc, #684]	; (8006988 <scaraInitDuty+0x1058>)
 80066da:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80066de:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80066e2:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 80066e6:	3301      	adds	r3, #1
 80066e8:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 80066ec:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d9cd      	bls.n	8006690 <scaraInitDuty+0xd60>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 80066fa:	e04c      	b.n	8006796 <scaraInitDuty+0xe66>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80066fc:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 8006700:	49a1      	ldr	r1, [pc, #644]	; (8006988 <scaraInitDuty+0x1058>)
 8006702:	4613      	mov	r3, r2
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	4413      	add	r3, r2
 8006708:	01db      	lsls	r3, r3, #7
 800670a:	440b      	add	r3, r1
 800670c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006710:	2201      	movs	r2, #1
 8006712:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8006714:	f897 01a7 	ldrb.w	r0, [r7, #423]	; 0x1a7
 8006718:	4b9b      	ldr	r3, [pc, #620]	; (8006988 <scaraInitDuty+0x1058>)
 800671a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800671e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006722:	4c99      	ldr	r4, [pc, #612]	; (8006988 <scaraInitDuty+0x1058>)
 8006724:	4603      	mov	r3, r0
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	4403      	add	r3, r0
 800672a:	01db      	lsls	r3, r3, #7
 800672c:	4423      	add	r3, r4
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006736:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 800673a:	4613      	mov	r3, r2
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	4413      	add	r3, r2
 8006740:	01db      	lsls	r3, r3, #7
 8006742:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006746:	4a90      	ldr	r2, [pc, #576]	; (8006988 <scaraInitDuty+0x1058>)
 8006748:	1898      	adds	r0, r3, r2
 800674a:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800674e:	4a8f      	ldr	r2, [pc, #572]	; (800698c <scaraInitDuty+0x105c>)
 8006750:	5cd1      	ldrb	r1, [r2, r3]
 8006752:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8006756:	463a      	mov	r2, r7
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4413      	add	r3, r2
 800675c:	ed93 7b00 	vldr	d7, [r3]
 8006760:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006764:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006768:	eeb0 2a45 	vmov.f32	s4, s10
 800676c:	eef0 2a65 	vmov.f32	s5, s11
 8006770:	eeb0 1a46 	vmov.f32	s2, s12
 8006774:	eef0 1a66 	vmov.f32	s3, s13
 8006778:	2201      	movs	r2, #1
 800677a:	eeb0 0a47 	vmov.f32	s0, s14
 800677e:	eef0 0a67 	vmov.f32	s1, s15
 8006782:	f001 fddd 	bl	8008340 <scaraInitScurve>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800678c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8006790:	3301      	adds	r3, #1
 8006792:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 8006796:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 800679a:	2b03      	cmp	r3, #3
 800679c:	d9ae      	bls.n	80066fc <scaraInitDuty+0xdcc>
 800679e:	e3d7      	b.n	8006f50 <scaraInitDuty+0x1620>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80067a0:	2308      	movs	r3, #8
 80067a2:	f000 bc03 	b.w	8006fac <scaraInitDuty+0x167c>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80067a6:	2305      	movs	r3, #5
 80067a8:	f000 bc00 	b.w	8006fac <scaraInitDuty+0x167c>
			}
		}else if ( DUTY_JOINT_SINGLE == command.joint_type) {
 80067ac:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f040 83c9 	bne.w	8006f48 <scaraInitDuty+0x1618>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.arc_dir) {
 80067b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	f200 8144 	bhi.w	8006a48 <scaraInitDuty+0x1118>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <scaraInitDuty+0xe98>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	0800687b 	.word	0x0800687b
 80067d0:	0800691d 	.word	0x0800691d
 80067d4:	080069a9 	.word	0x080069a9
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80067d8:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80067dc:	a368      	add	r3, pc, #416	; (adr r3, 8006980 <scaraInitDuty+0x1050>)
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	f7f9 ff09 	bl	80005f8 <__aeabi_dmul>
 80067e6:	4603      	mov	r3, r0
 80067e8:	460c      	mov	r4, r1
 80067ea:	4618      	mov	r0, r3
 80067ec:	4621      	mov	r1, r4
 80067ee:	f04f 0200 	mov.w	r2, #0
 80067f2:	4b67      	ldr	r3, [pc, #412]	; (8006990 <scaraInitDuty+0x1060>)
 80067f4:	f7fa f82a 	bl	800084c <__aeabi_ddiv>
 80067f8:	4603      	mov	r3, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006800:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006804:	2b01      	cmp	r3, #1
 8006806:	d113      	bne.n	8006830 <scaraInitDuty+0xf00>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8006808:	4b5f      	ldr	r3, [pc, #380]	; (8006988 <scaraInitDuty+0x1058>)
 800680a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800680e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006812:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006816:	461a      	mov	r2, r3
 8006818:	4623      	mov	r3, r4
 800681a:	f7f9 fd37 	bl	800028c <__adddf3>
 800681e:	4603      	mov	r3, r0
 8006820:	460c      	mov	r4, r1
 8006822:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8006826:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800682a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 800682e:	e019      	b.n	8006864 <scaraInitDuty+0xf34>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006830:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006834:	2b00      	cmp	r3, #0
 8006836:	d113      	bne.n	8006860 <scaraInitDuty+0xf30>
					abs_position = command.sub_para_double;
 8006838:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800683c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8006840:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006844:	4b50      	ldr	r3, [pc, #320]	; (8006988 <scaraInitDuty+0x1058>)
 8006846:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800684a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800684e:	461a      	mov	r2, r3
 8006850:	4623      	mov	r3, r4
 8006852:	f7f9 fd19 	bl	8000288 <__aeabi_dsub>
 8006856:	4603      	mov	r3, r0
 8006858:	460c      	mov	r4, r1
 800685a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 800685e:	e001      	b.n	8006864 <scaraInitDuty+0xf34>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8006860:	230c      	movs	r3, #12
 8006862:	e3a3      	b.n	8006fac <scaraInitDuty+0x167c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8006864:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8006868:	2000      	movs	r0, #0
 800686a:	f003 fe95 	bl	800a598 <scaraCheckWorkSpace1>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80eb 	beq.w	8006a4c <scaraInitDuty+0x111c>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006876:	2307      	movs	r3, #7
 8006878:	e398      	b.n	8006fac <scaraInitDuty+0x167c>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 800687a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800687e:	a340      	add	r3, pc, #256	; (adr r3, 8006980 <scaraInitDuty+0x1050>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 feb8 	bl	80005f8 <__aeabi_dmul>
 8006888:	4603      	mov	r3, r0
 800688a:	460c      	mov	r4, r1
 800688c:	4618      	mov	r0, r3
 800688e:	4621      	mov	r1, r4
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	4b3e      	ldr	r3, [pc, #248]	; (8006990 <scaraInitDuty+0x1060>)
 8006896:	f7f9 ffd9 	bl	800084c <__aeabi_ddiv>
 800689a:	4603      	mov	r3, r0
 800689c:	460c      	mov	r4, r1
 800689e:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80068a2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d113      	bne.n	80068d2 <scaraInitDuty+0xfa2>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 80068aa:	4b37      	ldr	r3, [pc, #220]	; (8006988 <scaraInitDuty+0x1058>)
 80068ac:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80068b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068b4:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80068b8:	461a      	mov	r2, r3
 80068ba:	4623      	mov	r3, r4
 80068bc:	f7f9 fce6 	bl	800028c <__adddf3>
 80068c0:	4603      	mov	r3, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 80068c8:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80068cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 80068d0:	e019      	b.n	8006906 <scaraInitDuty+0xfd6>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80068d2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d113      	bne.n	8006902 <scaraInitDuty+0xfd2>
					abs_position = command.sub_para_double;
 80068da:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80068de:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 80068e2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80068e6:	4b28      	ldr	r3, [pc, #160]	; (8006988 <scaraInitDuty+0x1058>)
 80068e8:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80068ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068f0:	461a      	mov	r2, r3
 80068f2:	4623      	mov	r3, r4
 80068f4:	f7f9 fcc8 	bl	8000288 <__aeabi_dsub>
 80068f8:	4603      	mov	r3, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8006900:	e001      	b.n	8006906 <scaraInitDuty+0xfd6>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8006902:	230c      	movs	r3, #12
 8006904:	e352      	b.n	8006fac <scaraInitDuty+0x167c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8006906:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800690a:	2001      	movs	r0, #1
 800690c:	f003 fe44 	bl	800a598 <scaraCheckWorkSpace1>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 809c 	beq.w	8006a50 <scaraInitDuty+0x1120>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006918:	2307      	movs	r3, #7
 800691a:	e347      	b.n	8006fac <scaraInitDuty+0x167c>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800691c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006920:	2b01      	cmp	r3, #1
 8006922:	d113      	bne.n	800694c <scaraInitDuty+0x101c>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8006924:	4b18      	ldr	r3, [pc, #96]	; (8006988 <scaraInitDuty+0x1058>)
 8006926:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800692a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800692e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006932:	461a      	mov	r2, r3
 8006934:	4623      	mov	r3, r4
 8006936:	f7f9 fca9 	bl	800028c <__adddf3>
 800693a:	4603      	mov	r3, r0
 800693c:	460c      	mov	r4, r1
 800693e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8006942:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006946:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 800694a:	e023      	b.n	8006994 <scaraInitDuty+0x1064>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800694c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006950:	2b00      	cmp	r3, #0
 8006952:	d113      	bne.n	800697c <scaraInitDuty+0x104c>
					abs_position = command.sub_para_double;
 8006954:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006958:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 800695c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006960:	4b09      	ldr	r3, [pc, #36]	; (8006988 <scaraInitDuty+0x1058>)
 8006962:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8006966:	e9d3 3400 	ldrd	r3, r4, [r3]
 800696a:	461a      	mov	r2, r3
 800696c:	4623      	mov	r3, r4
 800696e:	f7f9 fc8b 	bl	8000288 <__aeabi_dsub>
 8006972:	4603      	mov	r3, r0
 8006974:	460c      	mov	r4, r1
 8006976:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 800697a:	e00b      	b.n	8006994 <scaraInitDuty+0x1064>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800697c:	230c      	movs	r3, #12
 800697e:	e315      	b.n	8006fac <scaraInitDuty+0x167c>
 8006980:	60000000 	.word	0x60000000
 8006984:	400921fb 	.word	0x400921fb
 8006988:	2000ad80 	.word	0x2000ad80
 800698c:	20000884 	.word	0x20000884
 8006990:	40668000 	.word	0x40668000
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8006994:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8006998:	2002      	movs	r0, #2
 800699a:	f003 fdfd 	bl	800a598 <scaraCheckWorkSpace1>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d057      	beq.n	8006a54 <scaraInitDuty+0x1124>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80069a4:	2307      	movs	r3, #7
 80069a6:	e301      	b.n	8006fac <scaraInitDuty+0x167c>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80069a8:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80069ac:	a3cd      	add	r3, pc, #820	; (adr r3, 8006ce4 <scaraInitDuty+0x13b4>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f7f9 fe21 	bl	80005f8 <__aeabi_dmul>
 80069b6:	4603      	mov	r3, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	4618      	mov	r0, r3
 80069bc:	4621      	mov	r1, r4
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	4bc5      	ldr	r3, [pc, #788]	; (8006cd8 <scaraInitDuty+0x13a8>)
 80069c4:	f7f9 ff42 	bl	800084c <__aeabi_ddiv>
 80069c8:	4603      	mov	r3, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80069d0:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d113      	bne.n	8006a00 <scaraInitDuty+0x10d0>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 80069d8:	4bc0      	ldr	r3, [pc, #768]	; (8006cdc <scaraInitDuty+0x13ac>)
 80069da:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 80069de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069e2:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80069e6:	461a      	mov	r2, r3
 80069e8:	4623      	mov	r3, r4
 80069ea:	f7f9 fc4f 	bl	800028c <__adddf3>
 80069ee:	4603      	mov	r3, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 80069f6:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80069fa:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 80069fe:	e019      	b.n	8006a34 <scaraInitDuty+0x1104>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006a00:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d113      	bne.n	8006a30 <scaraInitDuty+0x1100>
					abs_position = command.sub_para_double;
 8006a08:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8006a0c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8006a10:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006a14:	4bb1      	ldr	r3, [pc, #708]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006a16:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8006a1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4623      	mov	r3, r4
 8006a22:	f7f9 fc31 	bl	8000288 <__aeabi_dsub>
 8006a26:	4603      	mov	r3, r0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8006a2e:	e001      	b.n	8006a34 <scaraInitDuty+0x1104>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8006a30:	230c      	movs	r3, #12
 8006a32:	e2bb      	b.n	8006fac <scaraInitDuty+0x167c>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8006a34:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8006a38:	2003      	movs	r0, #3
 8006a3a:	f003 fdad 	bl	800a598 <scaraCheckWorkSpace1>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <scaraInitDuty+0x1128>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006a44:	2307      	movs	r3, #7
 8006a46:	e2b1      	b.n	8006fac <scaraInitDuty+0x167c>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8006a48:	230b      	movs	r3, #11
 8006a4a:	e2af      	b.n	8006fac <scaraInitDuty+0x167c>
				break;
 8006a4c:	bf00      	nop
 8006a4e:	e004      	b.n	8006a5a <scaraInitDuty+0x112a>
				break;
 8006a50:	bf00      	nop
 8006a52:	e002      	b.n	8006a5a <scaraInitDuty+0x112a>
				break;
 8006a54:	bf00      	nop
 8006a56:	e000      	b.n	8006a5a <scaraInitDuty+0x112a>
				break;
 8006a58:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8006a5a:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 8127 	bne.w	8006cb2 <scaraInitDuty+0x1382>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006a64:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f040 8097 	bne.w	8006b9c <scaraInitDuty+0x126c>
					for ( uint8_t i = 0; i < 4; i++) {
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8006a74:	e08c      	b.n	8006b90 <scaraInitDuty+0x1260>
						if ( i == command.arc_dir) {
 8006a76:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006a7a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d13d      	bne.n	8006afe <scaraInitDuty+0x11ce>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006a82:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006a86:	4995      	ldr	r1, [pc, #596]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006a88:	4613      	mov	r3, r2
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	4413      	add	r3, r2
 8006a8e:	01db      	lsls	r3, r3, #7
 8006a90:	440b      	add	r3, r1
 8006a92:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006a9a:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8006a9e:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006aa2:	4c8e      	ldr	r4, [pc, #568]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	4403      	add	r3, r0
 8006aaa:	01db      	lsls	r3, r3, #7
 8006aac:	4423      	add	r3, r4
 8006aae:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006ab2:	e9c3 1200 	strd	r1, r2, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006ab6:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006aba:	4613      	mov	r3, r2
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4413      	add	r3, r2
 8006ac0:	01db      	lsls	r3, r3, #7
 8006ac2:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006ac6:	4a85      	ldr	r2, [pc, #532]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006ac8:	1898      	adds	r0, r3, r2
 8006aca:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006ace:	4a84      	ldr	r2, [pc, #528]	; (8006ce0 <scaraInitDuty+0x13b0>)
 8006ad0:	5cd3      	ldrb	r3, [r2, r3]
 8006ad2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006ad6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006ada:	eeb0 2a46 	vmov.f32	s4, s12
 8006ade:	eef0 2a66 	vmov.f32	s5, s13
 8006ae2:	eeb0 1a47 	vmov.f32	s2, s14
 8006ae6:	eef0 1a67 	vmov.f32	s3, s15
 8006aea:	2201      	movs	r2, #1
 8006aec:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006af0:	4619      	mov	r1, r3
 8006af2:	f001 f845 	bl	8007b80 <scaraInitLSPB>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006afc:	e03c      	b.n	8006b78 <scaraInitDuty+0x1248>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006afe:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006b02:	4976      	ldr	r1, [pc, #472]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	01db      	lsls	r3, r3, #7
 8006b0c:	440b      	add	r3, r1
 8006b0e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006b16:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8006b1a:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006b1e:	4c6f      	ldr	r4, [pc, #444]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006b20:	4603      	mov	r3, r0
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	4403      	add	r3, r0
 8006b26:	01db      	lsls	r3, r3, #7
 8006b28:	4423      	add	r3, r4
 8006b2a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006b2e:	e9c3 1200 	strd	r1, r2, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006b32:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8006b36:	4613      	mov	r3, r2
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	01db      	lsls	r3, r3, #7
 8006b3e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006b42:	4a66      	ldr	r2, [pc, #408]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006b44:	1898      	adds	r0, r3, r2
 8006b46:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006b4a:	4a65      	ldr	r2, [pc, #404]	; (8006ce0 <scaraInitDuty+0x13b0>)
 8006b4c:	5cd3      	ldrb	r3, [r2, r3]
 8006b4e:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006b52:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006b56:	eeb0 2a46 	vmov.f32	s4, s12
 8006b5a:	eef0 2a66 	vmov.f32	s5, s13
 8006b5e:	eeb0 1a47 	vmov.f32	s2, s14
 8006b62:	eef0 1a67 	vmov.f32	s3, s15
 8006b66:	2201      	movs	r2, #1
 8006b68:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8006cd0 <scaraInitDuty+0x13a0>
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f001 f807 	bl	8007b80 <scaraInitLSPB>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8006b78:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006b7c:	4a57      	ldr	r2, [pc, #348]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006b7e:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006b82:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006b86:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8006b90:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	f67f af6e 	bls.w	8006a76 <scaraInitDuty+0x1146>
 8006b9a:	e1c7      	b.n	8006f2c <scaraInitDuty+0x15fc>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006b9c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f040 8084 	bne.w	8006cae <scaraInitDuty+0x137e>
					for ( uint8_t i = 0; i < 4; i++) {
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8006bac:	e07a      	b.n	8006ca4 <scaraInitDuty+0x1374>
						if ( i == command.arc_dir) {
 8006bae:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006bb2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d140      	bne.n	8006c3c <scaraInitDuty+0x130c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006bba:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006bbe:	4947      	ldr	r1, [pc, #284]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4413      	add	r3, r2
 8006bc6:	01db      	lsls	r3, r3, #7
 8006bc8:	440b      	add	r3, r1
 8006bca:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006bd2:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4413      	add	r3, r2
 8006bdc:	01db      	lsls	r3, r3, #7
 8006bde:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006be2:	4a3e      	ldr	r2, [pc, #248]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006be4:	1898      	adds	r0, r3, r2
 8006be6:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006bea:	4a3d      	ldr	r2, [pc, #244]	; (8006ce0 <scaraInitDuty+0x13b0>)
 8006bec:	5cd3      	ldrb	r3, [r2, r3]
 8006bee:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006bf2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006bf6:	eeb0 2a46 	vmov.f32	s4, s12
 8006bfa:	eef0 2a66 	vmov.f32	s5, s13
 8006bfe:	eeb0 1a47 	vmov.f32	s2, s14
 8006c02:	eef0 1a67 	vmov.f32	s3, s15
 8006c06:	2200      	movs	r2, #0
 8006c08:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	f000 ffb7 	bl	8007b80 <scaraInitLSPB>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8006c18:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c1c:	492f      	ldr	r1, [pc, #188]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006c1e:	4613      	mov	r3, r2
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4413      	add	r3, r2
 8006c24:	01db      	lsls	r3, r3, #7
 8006c26:	440b      	add	r3, r1
 8006c28:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006c2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c30:	4a2a      	ldr	r2, [pc, #168]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006c32:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006c36:	e9c2 3400 	strd	r3, r4, [r2]
 8006c3a:	e02e      	b.n	8006c9a <scaraInitDuty+0x136a>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006c3c:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c40:	4926      	ldr	r1, [pc, #152]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	01db      	lsls	r3, r3, #7
 8006c4a:	440b      	add	r3, r1
 8006c4c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006c54:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	01db      	lsls	r3, r3, #7
 8006c60:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006c64:	4a1d      	ldr	r2, [pc, #116]	; (8006cdc <scaraInitDuty+0x13ac>)
 8006c66:	1898      	adds	r0, r3, r2
 8006c68:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006c6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ce0 <scaraInitDuty+0x13b0>)
 8006c6e:	5cd3      	ldrb	r3, [r2, r3]
 8006c70:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006c74:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006c78:	eeb0 2a46 	vmov.f32	s4, s12
 8006c7c:	eef0 2a66 	vmov.f32	s5, s13
 8006c80:	eeb0 1a47 	vmov.f32	s2, s14
 8006c84:	eef0 1a67 	vmov.f32	s3, s15
 8006c88:	2200      	movs	r2, #0
 8006c8a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006cd0 <scaraInitDuty+0x13a0>
 8006c8e:	4619      	mov	r1, r3
 8006c90:	f000 ff76 	bl	8007b80 <scaraInitLSPB>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8006c9a:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8006ca4:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d980      	bls.n	8006bae <scaraInitDuty+0x127e>
 8006cac:	e13e      	b.n	8006f2c <scaraInitDuty+0x15fc>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006cae:	2308      	movs	r3, #8
 8006cb0:	e17c      	b.n	8006fac <scaraInitDuty+0x167c>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8006cb2:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	f040 8136 	bne.w	8006f28 <scaraInitDuty+0x15f8>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006cbc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	f040 80a6 	bne.w	8006e12 <scaraInitDuty+0x14e2>
						for ( uint8_t i = 0; i < 4; i++) {
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006ccc:	e09b      	b.n	8006e06 <scaraInitDuty+0x14d6>
 8006cce:	bf00      	nop
	...
 8006cd8:	40668000 	.word	0x40668000
 8006cdc:	2000ad80 	.word	0x2000ad80
 8006ce0:	20000884 	.word	0x20000884
 8006ce4:	60000000 	.word	0x60000000
 8006ce8:	400921fb 	.word	0x400921fb
							if ( i == command.arc_dir) {
 8006cec:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006cf0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d13d      	bne.n	8006d74 <scaraInitDuty+0x1444>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006cf8:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006cfc:	49b2      	ldr	r1, [pc, #712]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006cfe:	4613      	mov	r3, r2
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	4413      	add	r3, r2
 8006d04:	01db      	lsls	r3, r3, #7
 8006d06:	440b      	add	r3, r1
 8006d08:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006d10:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8006d14:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006d18:	4cab      	ldr	r4, [pc, #684]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4403      	add	r3, r0
 8006d20:	01db      	lsls	r3, r3, #7
 8006d22:	4423      	add	r3, r4
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d28:	e9c3 1200 	strd	r1, r2, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006d2c:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d30:	4613      	mov	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	4413      	add	r3, r2
 8006d36:	01db      	lsls	r3, r3, #7
 8006d38:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006d3c:	4aa2      	ldr	r2, [pc, #648]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006d3e:	1898      	adds	r0, r3, r2
 8006d40:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006d44:	4aa1      	ldr	r2, [pc, #644]	; (8006fcc <scaraInitDuty+0x169c>)
 8006d46:	5cd3      	ldrb	r3, [r2, r3]
 8006d48:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006d4c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006d50:	eeb0 2a46 	vmov.f32	s4, s12
 8006d54:	eef0 2a66 	vmov.f32	s5, s13
 8006d58:	eeb0 1a47 	vmov.f32	s2, s14
 8006d5c:	eef0 1a67 	vmov.f32	s3, s15
 8006d60:	2201      	movs	r2, #1
 8006d62:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006d66:	4619      	mov	r1, r3
 8006d68:	f001 faea 	bl	8008340 <scaraInitScurve>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8006d72:	e03c      	b.n	8006dee <scaraInitDuty+0x14be>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006d74:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006d78:	4993      	ldr	r1, [pc, #588]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	01db      	lsls	r3, r3, #7
 8006d82:	440b      	add	r3, r1
 8006d84:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006d88:	2201      	movs	r2, #1
 8006d8a:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8006d8c:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8006d90:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006d94:	4c8c      	ldr	r4, [pc, #560]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006d96:	4603      	mov	r3, r0
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	4403      	add	r3, r0
 8006d9c:	01db      	lsls	r3, r3, #7
 8006d9e:	4423      	add	r3, r4
 8006da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da4:	e9c3 1200 	strd	r1, r2, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006da8:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8006dac:	4613      	mov	r3, r2
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	4413      	add	r3, r2
 8006db2:	01db      	lsls	r3, r3, #7
 8006db4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006db8:	4a83      	ldr	r2, [pc, #524]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006dba:	1898      	adds	r0, r3, r2
 8006dbc:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006dc0:	4a82      	ldr	r2, [pc, #520]	; (8006fcc <scaraInitDuty+0x169c>)
 8006dc2:	5cd3      	ldrb	r3, [r2, r3]
 8006dc4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006dc8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006dcc:	eeb0 2a46 	vmov.f32	s4, s12
 8006dd0:	eef0 2a66 	vmov.f32	s5, s13
 8006dd4:	eeb0 1a47 	vmov.f32	s2, s14
 8006dd8:	eef0 1a67 	vmov.f32	s3, s15
 8006ddc:	2201      	movs	r2, #1
 8006dde:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8006fc0 <scaraInitDuty+0x1690>
 8006de2:	4619      	mov	r1, r3
 8006de4:	f001 faac 	bl	8008340 <scaraInitScurve>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8006dee:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006df2:	4a75      	ldr	r2, [pc, #468]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006df4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006df8:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8006dfc:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006e00:	3301      	adds	r3, #1
 8006e02:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8006e06:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	f67f af6e 	bls.w	8006cec <scaraInitDuty+0x13bc>
 8006e10:	e08c      	b.n	8006f2c <scaraInitDuty+0x15fc>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006e12:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 8084 	bne.w	8006f24 <scaraInitDuty+0x15f4>
						for ( uint8_t i = 0; i < 4; i++) {
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006e22:	e07a      	b.n	8006f1a <scaraInitDuty+0x15ea>
							if ( i == command.arc_dir) {
 8006e24:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006e28:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d140      	bne.n	8006eb2 <scaraInitDuty+0x1582>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006e30:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006e34:	4964      	ldr	r1, [pc, #400]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006e36:	4613      	mov	r3, r2
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	4413      	add	r3, r2
 8006e3c:	01db      	lsls	r3, r3, #7
 8006e3e:	440b      	add	r3, r1
 8006e40:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006e44:	2201      	movs	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006e48:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	4413      	add	r3, r2
 8006e52:	01db      	lsls	r3, r3, #7
 8006e54:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006e58:	4a5b      	ldr	r2, [pc, #364]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006e5a:	1898      	adds	r0, r3, r2
 8006e5c:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006e60:	4a5a      	ldr	r2, [pc, #360]	; (8006fcc <scaraInitDuty+0x169c>)
 8006e62:	5cd3      	ldrb	r3, [r2, r3]
 8006e64:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006e68:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006e6c:	eeb0 2a46 	vmov.f32	s4, s12
 8006e70:	eef0 2a66 	vmov.f32	s5, s13
 8006e74:	eeb0 1a47 	vmov.f32	s2, s14
 8006e78:	eef0 1a67 	vmov.f32	s3, s15
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8006e82:	4619      	mov	r1, r3
 8006e84:	f001 fa5c 	bl	8008340 <scaraInitScurve>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006e8e:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006e92:	494d      	ldr	r1, [pc, #308]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006e94:	4613      	mov	r3, r2
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4413      	add	r3, r2
 8006e9a:	01db      	lsls	r3, r3, #7
 8006e9c:	440b      	add	r3, r1
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ea6:	4a48      	ldr	r2, [pc, #288]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006ea8:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006eac:	e9c2 3400 	strd	r3, r4, [r2]
 8006eb0:	e02e      	b.n	8006f10 <scaraInitDuty+0x15e0>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006eb2:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006eb6:	4944      	ldr	r1, [pc, #272]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006eb8:	4613      	mov	r3, r2
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	4413      	add	r3, r2
 8006ebe:	01db      	lsls	r3, r3, #7
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006eca:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006ece:	4613      	mov	r3, r2
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	4413      	add	r3, r2
 8006ed4:	01db      	lsls	r3, r3, #7
 8006ed6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006eda:	4a3b      	ldr	r2, [pc, #236]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006edc:	1898      	adds	r0, r3, r2
 8006ede:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006ee2:	4a3a      	ldr	r2, [pc, #232]	; (8006fcc <scaraInitDuty+0x169c>)
 8006ee4:	5cd3      	ldrb	r3, [r2, r3]
 8006ee6:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006eea:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006eee:	eeb0 2a46 	vmov.f32	s4, s12
 8006ef2:	eef0 2a66 	vmov.f32	s5, s13
 8006ef6:	eeb0 1a47 	vmov.f32	s2, s14
 8006efa:	eef0 1a67 	vmov.f32	s3, s15
 8006efe:	2200      	movs	r2, #0
 8006f00:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8006fc0 <scaraInitDuty+0x1690>
 8006f04:	4619      	mov	r1, r3
 8006f06:	f001 fa1b 	bl	8008340 <scaraInitScurve>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 8006f10:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f14:	3301      	adds	r3, #1
 8006f16:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006f1a:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d980      	bls.n	8006e24 <scaraInitDuty+0x14f4>
 8006f22:	e003      	b.n	8006f2c <scaraInitDuty+0x15fc>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8006f24:	2308      	movs	r3, #8
 8006f26:	e041      	b.n	8006fac <scaraInitDuty+0x167c>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006f28:	2305      	movs	r3, #5
 8006f2a:	e03f      	b.n	8006fac <scaraInitDuty+0x167c>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8006f2c:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <scaraInitDuty+0x160a>
				return status1;
 8006f34:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006f38:	e038      	b.n	8006fac <scaraInitDuty+0x167c>
			}
			if ( SCARA_STATUS_OK != status2) {
 8006f3a:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d006      	beq.n	8006f50 <scaraInitDuty+0x1620>
				return status2;
 8006f42:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006f46:	e031      	b.n	8006fac <scaraInitDuty+0x167c>
			}

		//----Joint Quadra
		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8006f48:	2304      	movs	r3, #4
 8006f4a:	e02f      	b.n	8006fac <scaraInitDuty+0x167c>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e02d      	b.n	8006fac <scaraInitDuty+0x167c>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8006f50:	4a1f      	ldr	r2, [pc, #124]	; (8006fd0 <scaraInitDuty+0x16a0>)
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	f04f 0400 	mov.w	r4, #0
 8006f5a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8006f5e:	4b1a      	ldr	r3, [pc, #104]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006f60:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f68:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <scaraInitDuty+0x16a0>)
 8006f6a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8006f6e:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <scaraInitDuty+0x16a4>)
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	f04f 0400 	mov.w	r4, #0
 8006f78:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8006f7c:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006f7e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f86:	4a13      	ldr	r2, [pc, #76]	; (8006fd4 <scaraInitDuty+0x16a4>)
 8006f88:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8006f8c:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <scaraInitDuty+0x16a8>)
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	f04f 0400 	mov.w	r4, #0
 8006f96:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8006f9a:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <scaraInitDuty+0x1698>)
 8006f9c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006fa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fa4:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <scaraInitDuty+0x16a8>)
 8006fa6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006fb8:	b004      	add	sp, #16
 8006fba:	4770      	bx	lr
 8006fbc:	f3af 8000 	nop.w
	...
 8006fc8:	2000ad80 	.word	0x2000ad80
 8006fcc:	20000884 	.word	0x20000884
 8006fd0:	2000b940 	.word	0x2000b940
 8006fd4:	2000bac0 	.word	0x2000bac0
 8006fd8:	2000ba00 	.word	0x2000ba00

08006fdc <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8006fdc:	b082      	sub	sp, #8
 8006fde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe0:	b0b1      	sub	sp, #196	; 0xc4
 8006fe2:	af2e      	add	r7, sp, #184	; 0xb8
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	f107 0120 	add.w	r1, r7, #32
 8006fea:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8006fee:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8006ff2:	4668      	mov	r0, sp
 8006ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ff8:	22b8      	movs	r2, #184	; 0xb8
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	f00e ff86 	bl	8015f0c <memcpy>
 8007000:	f107 0320 	add.w	r3, r7, #32
 8007004:	cb0c      	ldmia	r3, {r2, r3}
 8007006:	4620      	mov	r0, r4
 8007008:	f7fd f986 	bl	8004318 <kinematicInverse>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007012:	2307      	movs	r3, #7
 8007014:	e09e      	b.n	8007154 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8007016:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8007020:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 800702a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8007034:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 800703e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8007048:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8007052:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007056:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800705a:	461a      	mov	r2, r3
 800705c:	4623      	mov	r3, r4
 800705e:	f7f9 f913 	bl	8000288 <__aeabi_dsub>
 8007062:	4603      	mov	r3, r0
 8007064:	460c      	mov	r4, r1
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 800706c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007070:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007074:	461a      	mov	r2, r3
 8007076:	4623      	mov	r3, r4
 8007078:	f7f9 f906 	bl	8000288 <__aeabi_dsub>
 800707c:	4603      	mov	r3, r0
 800707e:	460c      	mov	r4, r1
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8007086:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800708a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800708e:	461a      	mov	r2, r3
 8007090:	4623      	mov	r3, r4
 8007092:	f7f9 f8f9 	bl	8000288 <__aeabi_dsub>
 8007096:	4603      	mov	r3, r0
 8007098:	460c      	mov	r4, r1
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80070ac:	461a      	mov	r2, r3
 80070ae:	4623      	mov	r3, r4
 80070b0:	f7f9 faa2 	bl	80005f8 <__aeabi_dmul>
 80070b4:	4603      	mov	r3, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	461d      	mov	r5, r3
 80070ba:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80070c8:	461a      	mov	r2, r3
 80070ca:	4623      	mov	r3, r4
 80070cc:	f7f9 fa94 	bl	80005f8 <__aeabi_dmul>
 80070d0:	4603      	mov	r3, r0
 80070d2:	460c      	mov	r4, r1
 80070d4:	461a      	mov	r2, r3
 80070d6:	4623      	mov	r3, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	4631      	mov	r1, r6
 80070dc:	f7f9 f8d6 	bl	800028c <__adddf3>
 80070e0:	4603      	mov	r3, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	461d      	mov	r5, r3
 80070e6:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80070f4:	461a      	mov	r2, r3
 80070f6:	4623      	mov	r3, r4
 80070f8:	f7f9 fa7e 	bl	80005f8 <__aeabi_dmul>
 80070fc:	4603      	mov	r3, r0
 80070fe:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007100:	461a      	mov	r2, r3
 8007102:	4623      	mov	r3, r4
 8007104:	4628      	mov	r0, r5
 8007106:	4631      	mov	r1, r6
 8007108:	f7f9 f8c0 	bl	800028c <__adddf3>
 800710c:	4603      	mov	r3, r0
 800710e:	460c      	mov	r4, r1
 8007110:	ec44 3b17 	vmov	d7, r3, r4
 8007114:	eeb0 0a47 	vmov.f32	s0, s14
 8007118:	eef0 0a67 	vmov.f32	s1, s15
 800711c:	f012 fdfe 	bl	8019d1c <sqrt>
 8007120:	eeb0 7a40 	vmov.f32	s14, s0
 8007124:	eef0 7a60 	vmov.f32	s15, s1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800715e:	b002      	add	sp, #8
 8007160:	4770      	bx	lr
 8007162:	0000      	movs	r0, r0
 8007164:	0000      	movs	r0, r0
	...

08007168 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007168:	b082      	sub	sp, #8
 800716a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716e:	b0c7      	sub	sp, #284	; 0x11c
 8007170:	af2e      	add	r7, sp, #184	; 0xb8
 8007172:	6178      	str	r0, [r7, #20]
 8007174:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8007178:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 800717c:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8007180:	4668      	mov	r0, sp
 8007182:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007186:	22b8      	movs	r2, #184	; 0xb8
 8007188:	4619      	mov	r1, r3
 800718a:	f00e febf 	bl	8015f0c <memcpy>
 800718e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007192:	cb0c      	ldmia	r3, {r2, r3}
 8007194:	4620      	mov	r0, r4
 8007196:	f7fd f8bf 	bl	8004318 <kinematicInverse>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80071a0:	2307      	movs	r3, #7
 80071a2:	e199      	b.n	80074d8 <scaraInitCircle+0x370>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 80071a4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d006      	beq.n	80071ba <scaraInitCircle+0x52>
 80071ac:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d001      	beq.n	80071ba <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 80071b6:	2306      	movs	r3, #6
 80071b8:	e18e      	b.n	80074d8 <scaraInitCircle+0x370>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 80071ba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80071be:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80071c2:	461a      	mov	r2, r3
 80071c4:	4623      	mov	r3, r4
 80071c6:	f7f9 f85f 	bl	8000288 <__aeabi_dsub>
 80071ca:	4603      	mov	r3, r0
 80071cc:	460c      	mov	r4, r1
 80071ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	y_start = start.y - center.y;
 80071d2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80071d6:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80071da:	461a      	mov	r2, r3
 80071dc:	4623      	mov	r3, r4
 80071de:	f7f9 f853 	bl	8000288 <__aeabi_dsub>
 80071e2:	4603      	mov	r3, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	x_stop  = end.x  - center.x;
 80071ea:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80071ee:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80071f2:	461a      	mov	r2, r3
 80071f4:	4623      	mov	r3, r4
 80071f6:	f7f9 f847 	bl	8000288 <__aeabi_dsub>
 80071fa:	4603      	mov	r3, r0
 80071fc:	460c      	mov	r4, r1
 80071fe:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	y_stop  = end.y  - center.y;
 8007202:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8007206:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800720a:	461a      	mov	r2, r3
 800720c:	4623      	mov	r3, r4
 800720e:	f7f9 f83b 	bl	8000288 <__aeabi_dsub>
 8007212:	4603      	mov	r3, r0
 8007214:	460c      	mov	r4, r1
 8007216:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	r1 = sqrt(x_start*x_start + y_start*y_start);
 800721a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800721e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007222:	f7f9 f9e9 	bl	80005f8 <__aeabi_dmul>
 8007226:	4603      	mov	r3, r0
 8007228:	460c      	mov	r4, r1
 800722a:	469a      	mov	sl, r3
 800722c:	46a3      	mov	fp, r4
 800722e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007232:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007236:	f7f9 f9df 	bl	80005f8 <__aeabi_dmul>
 800723a:	4603      	mov	r3, r0
 800723c:	460c      	mov	r4, r1
 800723e:	461a      	mov	r2, r3
 8007240:	4623      	mov	r3, r4
 8007242:	4650      	mov	r0, sl
 8007244:	4659      	mov	r1, fp
 8007246:	f7f9 f821 	bl	800028c <__adddf3>
 800724a:	4603      	mov	r3, r0
 800724c:	460c      	mov	r4, r1
 800724e:	ec44 3b17 	vmov	d7, r3, r4
 8007252:	eeb0 0a47 	vmov.f32	s0, s14
 8007256:	eef0 0a67 	vmov.f32	s1, s15
 800725a:	f012 fd5f 	bl	8019d1c <sqrt>
 800725e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007266:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800726a:	f7f9 f9c5 	bl	80005f8 <__aeabi_dmul>
 800726e:	4603      	mov	r3, r0
 8007270:	460c      	mov	r4, r1
 8007272:	469a      	mov	sl, r3
 8007274:	46a3      	mov	fp, r4
 8007276:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800727a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800727e:	f7f9 f9bb 	bl	80005f8 <__aeabi_dmul>
 8007282:	4603      	mov	r3, r0
 8007284:	460c      	mov	r4, r1
 8007286:	461a      	mov	r2, r3
 8007288:	4623      	mov	r3, r4
 800728a:	4650      	mov	r0, sl
 800728c:	4659      	mov	r1, fp
 800728e:	f7f8 fffd 	bl	800028c <__adddf3>
 8007292:	4603      	mov	r3, r0
 8007294:	460c      	mov	r4, r1
 8007296:	ec44 3b17 	vmov	d7, r3, r4
 800729a:	eeb0 0a47 	vmov.f32	s0, s14
 800729e:	eef0 0a67 	vmov.f32	s1, s15
 80072a2:	f012 fd3b 	bl	8019d1c <sqrt>
 80072a6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	if( 1.0 < fabs(r1 - r2)) {
 80072aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80072b2:	f7f8 ffe9 	bl	8000288 <__aeabi_dsub>
 80072b6:	4603      	mov	r3, r0
 80072b8:	460c      	mov	r4, r1
 80072ba:	4698      	mov	r8, r3
 80072bc:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	4b8c      	ldr	r3, [pc, #560]	; (80074f8 <scaraInitCircle+0x390>)
 80072c6:	4640      	mov	r0, r8
 80072c8:	4649      	mov	r1, r9
 80072ca:	f7f9 fc25 	bl	8000b18 <__aeabi_dcmpgt>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <scaraInitCircle+0x170>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 80072d4:	2306      	movs	r3, #6
 80072d6:	e0ff      	b.n	80074d8 <scaraInitCircle+0x370>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 80072d8:	a383      	add	r3, pc, #524	; (adr r3, 80074e8 <scaraInitCircle+0x380>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80072e2:	f7f9 fbfb 	bl	8000adc <__aeabi_dcmplt>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <scaraInitCircle+0x198>
 80072ec:	a37e      	add	r3, pc, #504	; (adr r3, 80074e8 <scaraInitCircle+0x380>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072f6:	f7f9 fbf1 	bl	8000adc <__aeabi_dcmplt>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <scaraInitCircle+0x19c>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007300:	2306      	movs	r3, #6
 8007302:	e0e9      	b.n	80074d8 <scaraInitCircle+0x370>
	}

	angle_start = atan2(y_start, x_start);
 8007304:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8007308:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800730c:	f012 fd04 	bl	8019d18 <atan2>
 8007310:	ed87 0b08 	vstr	d0, [r7, #32]
	angle_stop  = atan2(y_stop, x_stop);
 8007314:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8007318:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800731c:	f012 fcfc 	bl	8019d18 <atan2>
 8007320:	ed87 0b06 	vstr	d0, [r7, #24]
	delta_angle = angle_stop - angle_start;
 8007324:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007328:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800732c:	f7f8 ffac 	bl	8000288 <__aeabi_dsub>
 8007330:	4603      	mov	r3, r0
 8007332:	460c      	mov	r4, r1
 8007334:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

	if (delta_angle < 0 && dir > 0) {
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007344:	f7f9 fbca 	bl	8000adc <__aeabi_dcmplt>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d015      	beq.n	800737a <scaraInitCircle+0x212>
 800734e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd11      	ble.n	800737a <scaraInitCircle+0x212>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800735c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007366:	a162      	add	r1, pc, #392	; (adr r1, 80074f0 <scaraInitCircle+0x388>)
 8007368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800736c:	f7f8 ff8c 	bl	8000288 <__aeabi_dsub>
 8007370:	4603      	mov	r3, r0
 8007372:	460c      	mov	r4, r1
 8007374:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8007378:	e01f      	b.n	80073ba <scaraInitCircle+0x252>
	}else if(delta_angle > 0 && dir < 0){
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	f04f 0300 	mov.w	r3, #0
 8007382:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007386:	f7f9 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d014      	beq.n	80073ba <scaraInitCircle+0x252>
 8007390:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8007394:	2b00      	cmp	r3, #0
 8007396:	da10      	bge.n	80073ba <scaraInitCircle+0x252>
		delta_angle = 2*PI - fabs(delta_angle);
 8007398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800739e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a8:	a151      	add	r1, pc, #324	; (adr r1, 80074f0 <scaraInitCircle+0x388>)
 80073aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ae:	f7f8 ff6b 	bl	8000288 <__aeabi_dsub>
 80073b2:	4603      	mov	r3, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	}
	if(delta_angle*dir < 0){
 80073ba:	f8d7 02c8 	ldr.w	r0, [r7, #712]	; 0x2c8
 80073be:	f7f9 f8b1 	bl	8000524 <__aeabi_i2d>
 80073c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073c6:	f7f9 f917 	bl	80005f8 <__aeabi_dmul>
 80073ca:	4603      	mov	r3, r0
 80073cc:	460c      	mov	r4, r1
 80073ce:	4618      	mov	r0, r3
 80073d0:	4621      	mov	r1, r4
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	f04f 0300 	mov.w	r3, #0
 80073da:	f7f9 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00f      	beq.n	8007404 <scaraInitCircle+0x29c>
		delta_angle = 2*PI - fabs(delta_angle);
 80073e4:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 80073e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80073ec:	462a      	mov	r2, r5
 80073ee:	4633      	mov	r3, r6
 80073f0:	a13f      	add	r1, pc, #252	; (adr r1, 80074f0 <scaraInitCircle+0x388>)
 80073f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f6:	f7f8 ff47 	bl	8000288 <__aeabi_dsub>
 80073fa:	4603      	mov	r3, r0
 80073fc:	460c      	mov	r4, r1
 80073fe:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8007402:	e005      	b.n	8007410 <scaraInitCircle+0x2a8>
	}else{
		delta_angle = fabs(delta_angle);
 8007404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007406:	65bb      	str	r3, [r7, #88]	; 0x58
 8007408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800740e:	65fb      	str	r3, [r7, #92]	; 0x5c

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8007410:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8007414:	b25a      	sxtb	r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007420:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800742a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007434:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800743e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8007442:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007446:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800744a:	f7f9 f8d5 	bl	80005f8 <__aeabi_dmul>
 800744e:	4603      	mov	r3, r0
 8007450:	460c      	mov	r4, r1
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8007458:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8007462:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 800746c:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8007476:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8007480:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 800748a:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8007494:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 800749e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 80074a8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3764      	adds	r7, #100	; 0x64
 80074dc:	46bd      	mov	sp, r7
 80074de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e2:	b002      	add	sp, #8
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	9999999a 	.word	0x9999999a
 80074ec:	3fb99999 	.word	0x3fb99999
 80074f0:	60000000 	.word	0x60000000
 80074f4:	401921fb 	.word	0x401921fb
 80074f8:	3ff00000 	.word	0x3ff00000
 80074fc:	00000000 	.word	0x00000000

08007500 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 8007500:	b590      	push	{r4, r7, lr}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6178      	str	r0, [r7, #20]
 8007508:	460b      	mov	r3, r1
 800750a:	ed87 0b02 	vstr	d0, [r7, #8]
 800750e:	ed87 1b00 	vstr	d1, [r7]
 8007512:	74fb      	strb	r3, [r7, #19]
 8007514:	4613      	mov	r3, r2
 8007516:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8007518:	7cfb      	ldrb	r3, [r7, #19]
 800751a:	2b04      	cmp	r3, #4
 800751c:	d004      	beq.n	8007528 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 800751e:	7cfb      	ldrb	r3, [r7, #19]
 8007520:	2b05      	cmp	r3, #5
 8007522:	d001      	beq.n	8007528 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007524:	2306      	movs	r3, #6
 8007526:	e04b      	b.n	80075c0 <scaraInitLinear+0xc0>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8007528:	7cbb      	ldrb	r3, [r7, #18]
 800752a:	2b03      	cmp	r3, #3
 800752c:	d125      	bne.n	800757a <scaraInitLinear+0x7a>
		linear->constant_v = total_s / additional_factor;
 800752e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007536:	f7f9 f989 	bl	800084c <__aeabi_ddiv>
 800753a:	4603      	mov	r3, r0
 800753c:	460c      	mov	r4, r1
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
 8007544:	a322      	add	r3, pc, #136	; (adr r3, 80075d0 <scaraInitLinear+0xd0>)
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800754e:	f7f9 f97d 	bl	800084c <__aeabi_ddiv>
 8007552:	4603      	mov	r3, r0
 8007554:	460c      	mov	r4, r1
 8007556:	4618      	mov	r0, r3
 8007558:	4621      	mov	r1, r4
 800755a:	f7f9 fb45 	bl	8000be8 <__aeabi_d2f>
 800755e:	4603      	mov	r3, r0
 8007560:	ee00 3a10 	vmov	s0, r3
 8007564:	f012 fb98 	bl	8019c98 <ceilf>
 8007568:	eef0 7a40 	vmov.f32	s15, s0
 800756c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007570:	ee17 2a90 	vmov	r2, s15
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	621a      	str	r2, [r3, #32]
 8007578:	e021      	b.n	80075be <scaraInitLinear+0xbe>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 800757a:	7cbb      	ldrb	r3, [r7, #18]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d11c      	bne.n	80075ba <scaraInitLinear+0xba>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <scaraInitLinear+0xc8>)
 8007586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758a:	f7f9 f835 	bl	80005f8 <__aeabi_dmul>
 800758e:	4603      	mov	r3, r0
 8007590:	460c      	mov	r4, r1
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	e9c2 3402 	strd	r3, r4, [r2, #8]
		myDUTY.time_total = total_s / linear->constant_v;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800759e:	461a      	mov	r2, r3
 80075a0:	4623      	mov	r3, r4
 80075a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075a6:	f7f9 f951 	bl	800084c <__aeabi_ddiv>
 80075aa:	4603      	mov	r3, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	4a07      	ldr	r2, [pc, #28]	; (80075cc <scaraInitLinear+0xcc>)
 80075b0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80075b4:	e9c2 3400 	strd	r3, r4, [r2]
 80075b8:	e001      	b.n	80075be <scaraInitLinear+0xbe>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80075ba:	2306      	movs	r3, #6
 80075bc:	e000      	b.n	80075c0 <scaraInitLinear+0xc0>
	}

	return SCARA_STATUS_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd90      	pop	{r4, r7, pc}
 80075c8:	40877000 	.word	0x40877000
 80075cc:	2000ad80 	.word	0x2000ad80
 80075d0:	40000000 	.word	0x40000000
 80075d4:	3f847ae1 	.word	0x3f847ae1

080075d8 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 80075d8:	b5b0      	push	{r4, r5, r7, lr}
 80075da:	b096      	sub	sp, #88	; 0x58
 80075dc:	af00      	add	r7, sp, #0
 80075de:	61f8      	str	r0, [r7, #28]
 80075e0:	460b      	mov	r3, r1
 80075e2:	ed87 0b04 	vstr	d0, [r7, #16]
 80075e6:	ed87 1b02 	vstr	d1, [r7, #8]
 80075ea:	ed87 2b00 	vstr	d2, [r7]
 80075ee:	76fb      	strb	r3, [r7, #27]
 80075f0:	4613      	mov	r3, r2
 80075f2:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(total_s < 0){
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007600:	f7f9 fa6c 	bl	8000adc <__aeabi_dcmplt>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <scaraInitLSPB1+0x46>
		total_s = -total_s;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007614:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	22ff      	movs	r2, #255	; 0xff
 800761a:	701a      	strb	r2, [r3, #0]
 800761c:	e002      	b.n	8007624 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8007624:	7efb      	ldrb	r3, [r7, #27]
 8007626:	2b04      	cmp	r3, #4
 8007628:	d12c      	bne.n	8007684 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800762a:	7ebb      	ldrb	r3, [r7, #26]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10f      	bne.n	8007650 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	4ba6      	ldr	r3, [pc, #664]	; (80078d0 <scaraInitLSPB1+0x2f8>)
 8007636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800763a:	f7f8 ffdd 	bl	80005f8 <__aeabi_dmul>
 800763e:	4603      	mov	r3, r0
 8007640:	460c      	mov	r4, r1
 8007642:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8007646:	e9d7 3400 	ldrd	r3, r4, [r7]
 800764a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800764e:	e073      	b.n	8007738 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8007650:	7ebb      	ldrb	r3, [r7, #26]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d170      	bne.n	8007738 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	4b9e      	ldr	r3, [pc, #632]	; (80078d4 <scaraInitLSPB1+0x2fc>)
 800765c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007660:	f7f8 ffca 	bl	80005f8 <__aeabi_dmul>
 8007664:	4603      	mov	r3, r0
 8007666:	460c      	mov	r4, r1
 8007668:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	4b97      	ldr	r3, [pc, #604]	; (80078d0 <scaraInitLSPB1+0x2f8>)
 8007672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007676:	f7f8 ffbf 	bl	80005f8 <__aeabi_dmul>
 800767a:	4603      	mov	r3, r0
 800767c:	460c      	mov	r4, r1
 800767e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8007682:	e059      	b.n	8007738 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 8007684:	7efb      	ldrb	r3, [r7, #27]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d112      	bne.n	80076b0 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800768a:	7ebb      	ldrb	r3, [r7, #26]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d153      	bne.n	8007738 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8007690:	a383      	add	r3, pc, #524	; (adr r3, 80078a0 <scaraInitLSPB1+0x2c8>)
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800769a:	f7f8 ffad 	bl	80005f8 <__aeabi_dmul>
 800769e:	4603      	mov	r3, r0
 80076a0:	460c      	mov	r4, r1
 80076a2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 80076a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80076aa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80076ae:	e043      	b.n	8007738 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 80076b0:	7efb      	ldrb	r3, [r7, #27]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d112      	bne.n	80076dc <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076b6:	7ebb      	ldrb	r3, [r7, #26]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d13d      	bne.n	8007738 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80076bc:	a378      	add	r3, pc, #480	; (adr r3, 80078a0 <scaraInitLSPB1+0x2c8>)
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076c6:	f7f8 ff97 	bl	80005f8 <__aeabi_dmul>
 80076ca:	4603      	mov	r3, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 80076d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80076d6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80076da:	e02d      	b.n	8007738 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 80076dc:	7efb      	ldrb	r3, [r7, #27]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d112      	bne.n	8007708 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80076e2:	7ebb      	ldrb	r3, [r7, #26]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d127      	bne.n	8007738 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80076e8:	a36f      	add	r3, pc, #444	; (adr r3, 80078a8 <scaraInitLSPB1+0x2d0>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076f2:	f7f8 ff81 	bl	80005f8 <__aeabi_dmul>
 80076f6:	4603      	mov	r3, r0
 80076f8:	460c      	mov	r4, r1
 80076fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 80076fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007702:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007706:	e017      	b.n	8007738 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8007708:	7efb      	ldrb	r3, [r7, #27]
 800770a:	2b03      	cmp	r3, #3
 800770c:	d112      	bne.n	8007734 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800770e:	7ebb      	ldrb	r3, [r7, #26]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d111      	bne.n	8007738 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8007714:	a366      	add	r3, pc, #408	; (adr r3, 80078b0 <scaraInitLSPB1+0x2d8>)
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800771e:	f7f8 ff6b 	bl	80005f8 <__aeabi_dmul>
 8007722:	4603      	mov	r3, r0
 8007724:	460c      	mov	r4, r1
 8007726:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 800772a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800772e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007732:	e001      	b.n	8007738 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8007734:	2306      	movs	r3, #6
 8007736:	e213      	b.n	8007b60 <scaraInitLSPB1+0x588>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8007738:	7ebb      	ldrb	r3, [r7, #26]
 800773a:	2b01      	cmp	r3, #1
 800773c:	f040 80d2 	bne.w	80078e4 <scaraInitLSPB1+0x30c>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8007740:	a35d      	add	r3, pc, #372	; (adr r3, 80078b8 <scaraInitLSPB1+0x2e0>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800774a:	f7f9 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d01d      	beq.n	8007790 <scaraInitLSPB1+0x1b8>
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	4b5f      	ldr	r3, [pc, #380]	; (80078d8 <scaraInitLSPB1+0x300>)
 800775a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800775e:	f7f9 f9db 	bl	8000b18 <__aeabi_dcmpgt>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d013      	beq.n	8007790 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	4b5b      	ldr	r3, [pc, #364]	; (80078dc <scaraInitLSPB1+0x304>)
 800776e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007772:	f7f8 ff41 	bl	80005f8 <__aeabi_dmul>
 8007776:	4603      	mov	r3, r0
 8007778:	460c      	mov	r4, r1
 800777a:	4618      	mov	r0, r3
 800777c:	4621      	mov	r1, r4
 800777e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007782:	f7f9 f863 	bl	800084c <__aeabi_ddiv>
 8007786:	4603      	mov	r3, r0
 8007788:	460c      	mov	r4, r1
 800778a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800778e:	e060      	b.n	8007852 <scaraInitLSPB1+0x27a>
		}else if(v_design < 0.0001 && tf > 0.15){ //check if velocity valid or not
 8007790:	a34b      	add	r3, pc, #300	; (adr r3, 80078c0 <scaraInitLSPB1+0x2e8>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800779a:	f7f9 f99f 	bl	8000adc <__aeabi_dcmplt>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01d      	beq.n	80077e0 <scaraInitLSPB1+0x208>
 80077a4:	a348      	add	r3, pc, #288	; (adr r3, 80078c8 <scaraInitLSPB1+0x2f0>)
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80077ae:	f7f9 f9b3 	bl	8000b18 <__aeabi_dcmpgt>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d013      	beq.n	80077e0 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	4b47      	ldr	r3, [pc, #284]	; (80078dc <scaraInitLSPB1+0x304>)
 80077be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	4603      	mov	r3, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	4618      	mov	r0, r3
 80077cc:	4621      	mov	r1, r4
 80077ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80077d2:	f7f9 f83b 	bl	800084c <__aeabi_ddiv>
 80077d6:	4603      	mov	r3, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80077de:	e038      	b.n	8007852 <scaraInitLSPB1+0x27a>
		}else{
			v_lim = total_s/tf;
 80077e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80077e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077e8:	f7f9 f830 	bl	800084c <__aeabi_ddiv>
 80077ec:	4603      	mov	r3, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 80077f4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80077f8:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <scaraInitLSPB1+0x308>)
 80077fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077fe:	f7f8 fefb 	bl	80005f8 <__aeabi_dmul>
 8007802:	4603      	mov	r3, r0
 8007804:	460c      	mov	r4, r1
 8007806:	461a      	mov	r2, r3
 8007808:	4623      	mov	r3, r4
 800780a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800780e:	f7f9 f965 	bl	8000adc <__aeabi_dcmplt>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <scaraInitLSPB1+0x244>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8007818:	2309      	movs	r3, #9
 800781a:	e1a1      	b.n	8007b60 <scaraInitLSPB1+0x588>
			}else if(v_design > 2*v_lim){
 800781c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	f7f8 fd32 	bl	800028c <__adddf3>
 8007828:	4603      	mov	r3, r0
 800782a:	460c      	mov	r4, r1
 800782c:	461a      	mov	r2, r3
 800782e:	4623      	mov	r3, r4
 8007830:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007834:	f7f9 f970 	bl	8000b18 <__aeabi_dcmpgt>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <scaraInitLSPB1+0x27a>
				v_design = 2*v_lim;
 800783e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	f7f8 fd21 	bl	800028c <__adddf3>
 800784a:	4603      	mov	r3, r0
 800784c:	460c      	mov	r4, r1
 800784e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8007852:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007856:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800785a:	f7f8 fff7 	bl	800084c <__aeabi_ddiv>
 800785e:	4603      	mov	r3, r0
 8007860:	460c      	mov	r4, r1
 8007862:	461a      	mov	r2, r3
 8007864:	4623      	mov	r3, r4
 8007866:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800786a:	f7f8 fd0d 	bl	8000288 <__aeabi_dsub>
 800786e:	4603      	mov	r3, r0
 8007870:	460c      	mov	r4, r1
 8007872:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8007876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800787a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800787e:	f7f8 ffe5 	bl	800084c <__aeabi_ddiv>
 8007882:	4603      	mov	r3, r0
 8007884:	460c      	mov	r4, r1
 8007886:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 800788a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800788e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007892:	f7f8 fcf9 	bl	8000288 <__aeabi_dsub>
 8007896:	4603      	mov	r3, r0
 8007898:	460c      	mov	r4, r1
 800789a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800789e:	e0fb      	b.n	8007a98 <scaraInitLSPB1+0x4c0>
 80078a0:	14000000 	.word	0x14000000
 80078a4:	4000f6f0 	.word	0x4000f6f0
 80078a8:	00000000 	.word	0x00000000
 80078ac:	405c2000 	.word	0x405c2000
 80078b0:	6b259425 	.word	0x6b259425
 80078b4:	40069b91 	.word	0x40069b91
 80078b8:	9999999a 	.word	0x9999999a
 80078bc:	3fb99999 	.word	0x3fb99999
 80078c0:	eb1c432d 	.word	0xeb1c432d
 80078c4:	3f1a36e2 	.word	0x3f1a36e2
 80078c8:	33333333 	.word	0x33333333
 80078cc:	3fc33333 	.word	0x3fc33333
 80078d0:	40877000 	.word	0x40877000
 80078d4:	407f4000 	.word	0x407f4000
 80078d8:	401e0000 	.word	0x401e0000
 80078dc:	3ff80000 	.word	0x3ff80000
 80078e0:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 80078e4:	7ebb      	ldrb	r3, [r7, #26]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 80d6 	bne.w	8007a98 <scaraInitLSPB1+0x4c0>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 80078ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078f4:	f7f8 fe80 	bl	80005f8 <__aeabi_dmul>
 80078f8:	4603      	mov	r3, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	4625      	mov	r5, r4
 80078fe:	461c      	mov	r4, r3
 8007900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007904:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007908:	f7f8 fe76 	bl	80005f8 <__aeabi_dmul>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4620      	mov	r0, r4
 8007912:	4629      	mov	r1, r5
 8007914:	f7f9 f8e2 	bl	8000adc <__aeabi_dcmplt>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8088 	beq.w	8007a30 <scaraInitLSPB1+0x458>
			if(total_s/v_design < 0.8){ //td too small
 8007920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007924:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007928:	f7f8 ff90 	bl	800084c <__aeabi_ddiv>
 800792c:	4603      	mov	r3, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4618      	mov	r0, r3
 8007932:	4621      	mov	r1, r4
 8007934:	a390      	add	r3, pc, #576	; (adr r3, 8007b78 <scaraInitLSPB1+0x5a0>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f7f9 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <scaraInitLSPB1+0x382>
				//recalculate v_design
				v_design = 0.8*total_s;
 8007944:	a38c      	add	r3, pc, #560	; (adr r3, 8007b78 <scaraInitLSPB1+0x5a0>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800794e:	f7f8 fe53 	bl	80005f8 <__aeabi_dmul>
 8007952:	4603      	mov	r3, r0
 8007954:	460c      	mov	r4, r1
 8007956:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 800795a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800795e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007962:	f7f8 ff73 	bl	800084c <__aeabi_ddiv>
 8007966:	4603      	mov	r3, r0
 8007968:	460c      	mov	r4, r1
 800796a:	4618      	mov	r0, r3
 800796c:	4621      	mov	r1, r4
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	4b7f      	ldr	r3, [pc, #508]	; (8007b70 <scaraInitLSPB1+0x598>)
 8007974:	f7f9 f8b2 	bl	8000adc <__aeabi_dcmplt>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <scaraInitLSPB1+0x3bc>
				//recalculate a_design
				a_design = v_design/0.5;
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	4b7b      	ldr	r3, [pc, #492]	; (8007b70 <scaraInitLSPB1+0x598>)
 8007984:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007988:	f7f8 ff60 	bl	800084c <__aeabi_ddiv>
 800798c:	4603      	mov	r3, r0
 800798e:	460c      	mov	r4, r1
 8007990:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8007994:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007998:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800799c:	f7f8 ff56 	bl	800084c <__aeabi_ddiv>
 80079a0:	4603      	mov	r3, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 80079a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079b0:	f7f8 ff4c 	bl	800084c <__aeabi_ddiv>
 80079b4:	4603      	mov	r3, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 80079bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079c4:	f7f8 fc62 	bl	800028c <__adddf3>
 80079c8:	4603      	mov	r3, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 80079d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079d8:	f7f8 ff38 	bl	800084c <__aeabi_ddiv>
 80079dc:	4603      	mov	r3, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	4618      	mov	r0, r3
 80079e2:	4621      	mov	r1, r4
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	4b62      	ldr	r3, [pc, #392]	; (8007b74 <scaraInitLSPB1+0x59c>)
 80079ea:	f7f9 f877 	bl	8000adc <__aeabi_dcmplt>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d051      	beq.n	8007a98 <scaraInitLSPB1+0x4c0>
				//recalculate a_design
				a_design = v_design;
 80079f4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80079f8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
				ta = 1;
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	4c5c      	ldr	r4, [pc, #368]	; (8007b74 <scaraInitLSPB1+0x59c>)
 8007a02:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				td = total_s/v_design;
 8007a06:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a0e:	f7f8 ff1d 	bl	800084c <__aeabi_ddiv>
 8007a12:	4603      	mov	r3, r0
 8007a14:	460c      	mov	r4, r1
 8007a16:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				tf = ta + td;
 8007a1a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a22:	f7f8 fc33 	bl	800028c <__adddf3>
 8007a26:	4603      	mov	r3, r0
 8007a28:	460c      	mov	r4, r1
 8007a2a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007a2e:	e033      	b.n	8007a98 <scaraInitLSPB1+0x4c0>
			}

		}else{
			tf = 2*total_s/v_design;
 8007a30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	f7f8 fc28 	bl	800028c <__adddf3>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	4618      	mov	r0, r3
 8007a42:	4621      	mov	r1, r4
 8007a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a48:	f7f8 ff00 	bl	800084c <__aeabi_ddiv>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a5c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a60:	f7f8 fef4 	bl	800084c <__aeabi_ddiv>
 8007a64:	4603      	mov	r3, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a78:	f7f8 fee8 	bl	800084c <__aeabi_ddiv>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8007a84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a88:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a8c:	f7f8 fede 	bl	800084c <__aeabi_ddiv>
 8007a90:	4603      	mov	r3, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007a98:	a333      	add	r3, pc, #204	; (adr r3, 8007b68 <scaraInitLSPB1+0x590>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007aa2:	f7f8 fed3 	bl	800084c <__aeabi_ddiv>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	4618      	mov	r0, r3
 8007aac:	4621      	mov	r1, r4
 8007aae:	f7f9 f89b 	bl	8000be8 <__aeabi_d2f>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	ee00 3a10 	vmov	s0, r3
 8007ab8:	f012 f8ee 	bl	8019c98 <ceilf>
 8007abc:	eef0 7a40 	vmov.f32	s15, s0
 8007ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac4:	ee17 3a90 	vmov	r3, s15
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	f04f 0400 	mov.w	r4, #0
 8007ad4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007ade:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007ae8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8007af2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007afc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007b06:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007b10:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007b1a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	f04f 0400 	mov.w	r4, #0
 8007b28:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	f04f 0400 	mov.w	r4, #0
 8007b36:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3e:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4623      	mov	r3, r4
 8007b50:	f7f8 fb9a 	bl	8000288 <__aeabi_dsub>
 8007b54:	4603      	mov	r3, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3758      	adds	r7, #88	; 0x58
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bdb0      	pop	{r4, r5, r7, pc}
 8007b68:	40000000 	.word	0x40000000
 8007b6c:	3f847ae1 	.word	0x3f847ae1
 8007b70:	3fe00000 	.word	0x3fe00000
 8007b74:	3ff00000 	.word	0x3ff00000
 8007b78:	9999999a 	.word	0x9999999a
 8007b7c:	3fe99999 	.word	0x3fe99999

08007b80 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	b0ad      	sub	sp, #180	; 0xb4
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	ed87 0b08 	vstr	d0, [r7, #32]
 8007b90:	ed87 1b06 	vstr	d1, [r7, #24]
 8007b94:	ed87 2b04 	vstr	d2, [r7, #16]
 8007b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8007ba2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d118      	bne.n	8007bdc <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8007baa:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bb6:	f7f8 fd1f 	bl	80005f8 <__aeabi_dmul>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8007bc2:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bce:	f7f8 fd13 	bl	80005f8 <__aeabi_dmul>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007bda:	e092      	b.n	8007d02 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8007bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007be0:	2b05      	cmp	r3, #5
 8007be2:	d118      	bne.n	8007c16 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007be4:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bf0:	f7f8 fd02 	bl	80005f8 <__aeabi_dmul>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8007bfc:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c08:	f7f8 fcf6 	bl	80005f8 <__aeabi_dmul>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007c14:	e075      	b.n	8007d02 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8007c16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d118      	bne.n	8007c50 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8007c1e:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c2a:	f7f8 fce5 	bl	80005f8 <__aeabi_dmul>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	460c      	mov	r4, r1
 8007c32:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8007c36:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c42:	f7f8 fcd9 	bl	80005f8 <__aeabi_dmul>
 8007c46:	4603      	mov	r3, r0
 8007c48:	460c      	mov	r4, r1
 8007c4a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007c4e:	e058      	b.n	8007d02 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8007c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d118      	bne.n	8007c8a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8007c58:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c64:	f7f8 fcc8 	bl	80005f8 <__aeabi_dmul>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8007c70:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c7c:	f7f8 fcbc 	bl	80005f8 <__aeabi_dmul>
 8007c80:	4603      	mov	r3, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007c88:	e03b      	b.n	8007d02 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8007c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d118      	bne.n	8007cc4 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8007c92:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c9e:	f7f8 fcab 	bl	80005f8 <__aeabi_dmul>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8007caa:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cb6:	f7f8 fc9f 	bl	80005f8 <__aeabi_dmul>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007cc2:	e01e      	b.n	8007d02 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8007cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d118      	bne.n	8007cfe <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8007ccc:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8007ce4:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cf0:	f7f8 fc82 	bl	80005f8 <__aeabi_dmul>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007cfc:	e001      	b.n	8007d02 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8007cfe:	2306      	movs	r3, #6
 8007d00:	e2fa      	b.n	80082f8 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	f04f 0400 	mov.w	r4, #0
 8007d0a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 8007d0e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007d12:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 8007d16:	f04f 0300 	mov.w	r3, #0
 8007d1a:	f04f 0400 	mov.w	r4, #0
 8007d1e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 8007d22:	f04f 0300 	mov.w	r3, #0
 8007d26:	f04f 0400 	mov.w	r4, #0
 8007d2a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8007d2e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007d32:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007d36:	f7f8 fedb 	bl	8000af0 <__aeabi_dcmple>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007d46:	e00c      	b.n	8007d62 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8007d48:	23ff      	movs	r3, #255	; 0xff
 8007d4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8007d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007d5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007d62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	f040 809e 	bne.w	8007ea8 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8007d72:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007d76:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007d82:	f7f8 fec9 	bl	8000b18 <__aeabi_dcmpgt>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 8081 	beq.w	8007e90 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 8007d8e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007d92:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007d96:	f7f8 fa77 	bl	8000288 <__aeabi_dsub>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	4618      	mov	r0, r3
 8007da0:	4621      	mov	r1, r4
 8007da2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007da6:	f7f8 fd51 	bl	800084c <__aeabi_ddiv>
 8007daa:	4603      	mov	r3, r0
 8007dac:	460c      	mov	r4, r1
 8007dae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8007db2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007db6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007dba:	f7f8 fa65 	bl	8000288 <__aeabi_dsub>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	f7f8 fa5f 	bl	800028c <__adddf3>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007dda:	f7f8 fd37 	bl	800084c <__aeabi_ddiv>
 8007dde:	4603      	mov	r3, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8007de6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007dea:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007dee:	f7f8 fe75 	bl	8000adc <__aeabi_dcmplt>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8007df8:	2309      	movs	r3, #9
 8007dfa:	e27d      	b.n	80082f8 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 8007dfc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007e00:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e04:	f7f8 fe74 	bl	8000af0 <__aeabi_dcmple>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 8007e0e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007e12:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8007e16:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007e22:	f7f8 fe79 	bl	8000b18 <__aeabi_dcmpgt>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01a      	beq.n	8007e62 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8007e2c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007e30:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007e34:	f7f8 fa28 	bl	8000288 <__aeabi_dsub>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	4621      	mov	r1, r4
 8007e40:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007e44:	f7f8 fd02 	bl	800084c <__aeabi_ddiv>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4623      	mov	r3, r4
 8007e50:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007e54:	f7f8 fa18 	bl	8000288 <__aeabi_dsub>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8007e60:	e00b      	b.n	8007e7a <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007e6e:	f7f8 fced 	bl	800084c <__aeabi_ddiv>
 8007e72:	4603      	mov	r3, r0
 8007e74:	460c      	mov	r4, r1
 8007e76:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8007e7a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007e7e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007e82:	f7f8 fce3 	bl	800084c <__aeabi_ddiv>
 8007e86:	4603      	mov	r3, r0
 8007e88:	460c      	mov	r4, r1
 8007e8a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8007e8e:	e00b      	b.n	8007ea8 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8007e90:	f04f 0300 	mov.w	r3, #0
 8007e94:	f04f 0400 	mov.w	r4, #0
 8007e98:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	f04f 0400 	mov.w	r4, #0
 8007ea4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007ea8:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007eb4:	f7f8 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 819c 	beq.w	80081f8 <scaraInitLSPB+0x678>
 8007ec0:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007ecc:	f7f8 fe24 	bl	8000b18 <__aeabi_dcmpgt>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 8190 	beq.w	80081f8 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8007ed8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007edc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007ee0:	f7f8 f9d2 	bl	8000288 <__aeabi_dsub>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	461d      	mov	r5, r3
 8007eea:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8007eee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	f7f8 fb7f 	bl	80005f8 <__aeabi_dmul>
 8007efa:	4603      	mov	r3, r0
 8007efc:	460c      	mov	r4, r1
 8007efe:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8007f02:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007f06:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007f0a:	f7f8 fb75 	bl	80005f8 <__aeabi_dmul>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	460c      	mov	r4, r1
 8007f12:	e9c7 3400 	strd	r3, r4, [r7]
 8007f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f1a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f1e:	f7f8 fb6b 	bl	80005f8 <__aeabi_dmul>
 8007f22:	4603      	mov	r3, r0
 8007f24:	460c      	mov	r4, r1
 8007f26:	461d      	mov	r5, r3
 8007f28:	4626      	mov	r6, r4
 8007f2a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f32:	f7f8 fb61 	bl	80005f8 <__aeabi_dmul>
 8007f36:	4603      	mov	r3, r0
 8007f38:	460c      	mov	r4, r1
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	4628      	mov	r0, r5
 8007f40:	4631      	mov	r1, r6
 8007f42:	f7f8 f9a3 	bl	800028c <__adddf3>
 8007f46:	4603      	mov	r3, r0
 8007f48:	460c      	mov	r4, r1
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f56:	f7f8 fc79 	bl	800084c <__aeabi_ddiv>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4623      	mov	r3, r4
 8007f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f66:	f7f8 f98f 	bl	8000288 <__aeabi_dsub>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4623      	mov	r3, r4
 8007f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f76:	f7f8 fdbb 	bl	8000af0 <__aeabi_dcmple>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d075      	beq.n	800806c <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8007f80:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007f84:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007f88:	f7f8 f97e 	bl	8000288 <__aeabi_dsub>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	469a      	mov	sl, r3
 8007f92:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8007f96:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	4659      	mov	r1, fp
 8007f9e:	f7f8 fb2b 	bl	80005f8 <__aeabi_dmul>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4625      	mov	r5, r4
 8007fa8:	461c      	mov	r4, r3
 8007faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007fb2:	f7f8 fb21 	bl	80005f8 <__aeabi_dmul>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4690      	mov	r8, r2
 8007fbc:	4699      	mov	r9, r3
 8007fbe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007fc6:	f7f8 fb17 	bl	80005f8 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4640      	mov	r0, r8
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	f7f8 f95b 	bl	800028c <__adddf3>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fe6:	f7f8 fc31 	bl	800084c <__aeabi_ddiv>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4620      	mov	r0, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7f8 f94b 	bl	800028c <__adddf3>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	ec44 3b17 	vmov	d7, r3, r4
 8007ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8008002:	eef0 0a67 	vmov.f32	s1, s15
 8008006:	f011 fe89 	bl	8019d1c <sqrt>
 800800a:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800800e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008012:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008016:	f7f8 f937 	bl	8000288 <__aeabi_dsub>
 800801a:	4603      	mov	r3, r0
 800801c:	460c      	mov	r4, r1
 800801e:	4618      	mov	r0, r3
 8008020:	4621      	mov	r1, r4
 8008022:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008026:	f7f8 fc11 	bl	800084c <__aeabi_ddiv>
 800802a:	4603      	mov	r3, r0
 800802c:	460c      	mov	r4, r1
 800802e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8008032:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008036:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800803a:	f7f8 f925 	bl	8000288 <__aeabi_dsub>
 800803e:	4603      	mov	r3, r0
 8008040:	460c      	mov	r4, r1
 8008042:	4618      	mov	r0, r3
 8008044:	4621      	mov	r1, r4
 8008046:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800804a:	f7f8 fbff 	bl	800084c <__aeabi_ddiv>
 800804e:	4603      	mov	r3, r0
 8008050:	460c      	mov	r4, r1
 8008052:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8008056:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800805a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800805e:	f7f8 f915 	bl	800028c <__adddf3>
 8008062:	4603      	mov	r3, r0
 8008064:	460c      	mov	r4, r1
 8008066:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800806a:	e0e3      	b.n	8008234 <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 800806c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008070:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8008074:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800807c:	f7f8 f904 	bl	8000288 <__aeabi_dsub>
 8008080:	4603      	mov	r3, r0
 8008082:	460c      	mov	r4, r1
 8008084:	4618      	mov	r0, r3
 8008086:	4621      	mov	r1, r4
 8008088:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800808c:	f7f8 fbde 	bl	800084c <__aeabi_ddiv>
 8008090:	4603      	mov	r3, r0
 8008092:	460c      	mov	r4, r1
 8008094:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8008098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800809c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080a0:	f7f8 f8f2 	bl	8000288 <__aeabi_dsub>
 80080a4:	4603      	mov	r3, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	4618      	mov	r0, r3
 80080aa:	4621      	mov	r1, r4
 80080ac:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80080b0:	f7f8 fbcc 	bl	800084c <__aeabi_ddiv>
 80080b4:	4603      	mov	r3, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80080bc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80080c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80080c4:	f7f8 f8e0 	bl	8000288 <__aeabi_dsub>
 80080c8:	4603      	mov	r3, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	4698      	mov	r8, r3
 80080ce:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80080d2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80080d6:	4640      	mov	r0, r8
 80080d8:	4649      	mov	r1, r9
 80080da:	f7f8 fbb7 	bl	800084c <__aeabi_ddiv>
 80080de:	4603      	mov	r3, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	4625      	mov	r5, r4
 80080e4:	461c      	mov	r4, r3
 80080e6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	f7f8 f8cd 	bl	800028c <__adddf3>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080fa:	f7f8 fba7 	bl	800084c <__aeabi_ddiv>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4690      	mov	r8, r2
 8008104:	4699      	mov	r9, r3
 8008106:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800810a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800810e:	f7f8 fb9d 	bl	800084c <__aeabi_ddiv>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	f04f 0000 	mov.w	r0, #0
 800811a:	497d      	ldr	r1, [pc, #500]	; (8008310 <scaraInitLSPB+0x790>)
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4640      	mov	r0, r8
 8008126:	4649      	mov	r1, r9
 8008128:	f7f8 fa66 	bl	80005f8 <__aeabi_dmul>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4690      	mov	r8, r2
 8008132:	4699      	mov	r9, r3
 8008134:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008138:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800813c:	f7f8 fb86 	bl	800084c <__aeabi_ddiv>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	f04f 0000 	mov.w	r0, #0
 8008148:	4971      	ldr	r1, [pc, #452]	; (8008310 <scaraInitLSPB+0x790>)
 800814a:	f7f8 f89d 	bl	8000288 <__aeabi_dsub>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f7f8 fa4f 	bl	80005f8 <__aeabi_dmul>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 f893 	bl	800028c <__adddf3>
 8008166:	4603      	mov	r3, r0
 8008168:	460c      	mov	r4, r1
 800816a:	4625      	mov	r5, r4
 800816c:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 800816e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	f7f8 f889 	bl	800028c <__adddf3>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008182:	f7f8 fb63 	bl	800084c <__aeabi_ddiv>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4690      	mov	r8, r2
 800818c:	4699      	mov	r9, r3
 800818e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8008192:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008196:	f7f8 fb59 	bl	800084c <__aeabi_ddiv>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	f04f 0000 	mov.w	r0, #0
 80081a2:	495b      	ldr	r1, [pc, #364]	; (8008310 <scaraInitLSPB+0x790>)
 80081a4:	f7f8 f870 	bl	8000288 <__aeabi_dsub>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4640      	mov	r0, r8
 80081ae:	4649      	mov	r1, r9
 80081b0:	f7f8 fa22 	bl	80005f8 <__aeabi_dmul>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4690      	mov	r8, r2
 80081ba:	4699      	mov	r9, r3
 80081bc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80081c0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80081c4:	f7f8 fb42 	bl	800084c <__aeabi_ddiv>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	f04f 0000 	mov.w	r0, #0
 80081d0:	494f      	ldr	r1, [pc, #316]	; (8008310 <scaraInitLSPB+0x790>)
 80081d2:	f7f8 f859 	bl	8000288 <__aeabi_dsub>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 fa0b 	bl	80005f8 <__aeabi_dmul>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f8 f84f 	bl	800028c <__adddf3>
 80081ee:	4603      	mov	r3, r0
 80081f0:	460c      	mov	r4, r1
 80081f2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80081f6:	e01d      	b.n	8008234 <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	f04f 0400 	mov.w	r4, #0
 8008200:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800820c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008210:	f7f8 fb1c 	bl	800084c <__aeabi_ddiv>
 8008214:	4603      	mov	r3, r0
 8008216:	460c      	mov	r4, r1
 8008218:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008224:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008228:	f7f8 fb10 	bl	800084c <__aeabi_ddiv>
 800822c:	4603      	mov	r3, r0
 800822e:	460c      	mov	r4, r1
 8008230:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8008234:	a334      	add	r3, pc, #208	; (adr r3, 8008308 <scaraInitLSPB+0x788>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800823e:	f7f8 fb05 	bl	800084c <__aeabi_ddiv>
 8008242:	4603      	mov	r3, r0
 8008244:	460c      	mov	r4, r1
 8008246:	4618      	mov	r0, r3
 8008248:	4621      	mov	r1, r4
 800824a:	f7f8 fccd 	bl	8000be8 <__aeabi_d2f>
 800824e:	4603      	mov	r3, r0
 8008250:	ee00 3a10 	vmov	s0, r3
 8008254:	f011 fd20 	bl	8019c98 <ceilf>
 8008258:	eef0 7a40 	vmov.f32	s15, s0
 800825c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008260:	ee17 3a90 	vmov	r3, s15
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800826c:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 800826e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008270:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008274:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8008278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800827e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8008282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008284:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8008288:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 800828c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800828e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8008292:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8008296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008298:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800829c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 80082a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80082a6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 80082aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ac:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80082b0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 80082b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082b6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80082ba:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 80082be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80082c4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 80082c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80082ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d6:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80082e4:	461a      	mov	r2, r3
 80082e6:	4623      	mov	r3, r4
 80082e8:	f7f7 ffce 	bl	8000288 <__aeabi_dsub>
 80082ec:	4603      	mov	r3, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	37b4      	adds	r7, #180	; 0xb4
 80082fc:	46bd      	mov	sp, r7
 80082fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008302:	bf00      	nop
 8008304:	f3af 8000 	nop.w
 8008308:	40000000 	.word	0x40000000
 800830c:	3f847ae1 	.word	0x3f847ae1
 8008310:	3ff00000 	.word	0x3ff00000
 8008314:	00000000 	.word	0x00000000
 8008318:	405c2000 	.word	0x405c2000
 800831c:	14000000 	.word	0x14000000
 8008320:	4000f6f0 	.word	0x4000f6f0
 8008324:	6b259425 	.word	0x6b259425
 8008328:	40069b91 	.word	0x40069b91
 800832c:	d2f1a9fc 	.word	0xd2f1a9fc
 8008330:	3f50624d 	.word	0x3f50624d
 8008334:	9abcaf48 	.word	0x9abcaf48
 8008338:	3e7ad7f2 	.word	0x3e7ad7f2
 800833c:	00000000 	.word	0x00000000

08008340 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8008340:	b5b0      	push	{r4, r5, r7, lr}
 8008342:	b0ba      	sub	sp, #232	; 0xe8
 8008344:	af00      	add	r7, sp, #0
 8008346:	61f8      	str	r0, [r7, #28]
 8008348:	460b      	mov	r3, r1
 800834a:	ed87 0b04 	vstr	d0, [r7, #16]
 800834e:	ed87 1b02 	vstr	d1, [r7, #8]
 8008352:	ed87 2b00 	vstr	d2, [r7]
 8008356:	76fb      	strb	r3, [r7, #27]
 8008358:	4613      	mov	r3, r2
 800835a:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 800835c:	7efb      	ldrb	r3, [r7, #27]
 800835e:	2b04      	cmp	r3, #4
 8008360:	d118      	bne.n	8008394 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8008362:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800836e:	f7f8 f943 	bl	80005f8 <__aeabi_dmul>
 8008372:	4603      	mov	r3, r0
 8008374:	460c      	mov	r4, r1
 8008376:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 800837a:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008386:	f7f8 f937 	bl	80005f8 <__aeabi_dmul>
 800838a:	4603      	mov	r3, r0
 800838c:	460c      	mov	r4, r1
 800838e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008392:	e083      	b.n	800849c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8008394:	7efb      	ldrb	r3, [r7, #27]
 8008396:	2b05      	cmp	r3, #5
 8008398:	d116      	bne.n	80083c8 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 800839a:	a3fc      	add	r3, pc, #1008	; (adr r3, 800878c <scaraInitScurve+0x44c>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083a4:	f7f8 f928 	bl	80005f8 <__aeabi_dmul>
 80083a8:	4603      	mov	r3, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 80083b0:	a3f6      	add	r3, pc, #984	; (adr r3, 800878c <scaraInitScurve+0x44c>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ba:	f7f8 f91d 	bl	80005f8 <__aeabi_dmul>
 80083be:	4603      	mov	r3, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80083c6:	e069      	b.n	800849c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 80083c8:	7efb      	ldrb	r3, [r7, #27]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d116      	bne.n	80083fc <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 80083ce:	a3ef      	add	r3, pc, #956	; (adr r3, 800878c <scaraInitScurve+0x44c>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083d8:	f7f8 f90e 	bl	80005f8 <__aeabi_dmul>
 80083dc:	4603      	mov	r3, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 80083e4:	a3e9      	add	r3, pc, #932	; (adr r3, 800878c <scaraInitScurve+0x44c>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ee:	f7f8 f903 	bl	80005f8 <__aeabi_dmul>
 80083f2:	4603      	mov	r3, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80083fa:	e04f      	b.n	800849c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 80083fc:	7efb      	ldrb	r3, [r7, #27]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d116      	bne.n	8008430 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8008402:	a3e2      	add	r3, pc, #904	; (adr r3, 800878c <scaraInitScurve+0x44c>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800840c:	f7f8 f8f4 	bl	80005f8 <__aeabi_dmul>
 8008410:	4603      	mov	r3, r0
 8008412:	460c      	mov	r4, r1
 8008414:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8008418:	a3dc      	add	r3, pc, #880	; (adr r3, 800878c <scaraInitScurve+0x44c>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008422:	f7f8 f8e9 	bl	80005f8 <__aeabi_dmul>
 8008426:	4603      	mov	r3, r0
 8008428:	460c      	mov	r4, r1
 800842a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800842e:	e035      	b.n	800849c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8008430:	7efb      	ldrb	r3, [r7, #27]
 8008432:	2b02      	cmp	r3, #2
 8008434:	d116      	bne.n	8008464 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8008436:	a3d3      	add	r3, pc, #844	; (adr r3, 8008784 <scaraInitScurve+0x444>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008440:	f7f8 f8da 	bl	80005f8 <__aeabi_dmul>
 8008444:	4603      	mov	r3, r0
 8008446:	460c      	mov	r4, r1
 8008448:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 800844c:	a3cd      	add	r3, pc, #820	; (adr r3, 8008784 <scaraInitScurve+0x444>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008456:	f7f8 f8cf 	bl	80005f8 <__aeabi_dmul>
 800845a:	4603      	mov	r3, r0
 800845c:	460c      	mov	r4, r1
 800845e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008462:	e01b      	b.n	800849c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8008464:	7efb      	ldrb	r3, [r7, #27]
 8008466:	2b03      	cmp	r3, #3
 8008468:	d116      	bne.n	8008498 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 800846a:	a3ca      	add	r3, pc, #808	; (adr r3, 8008794 <scaraInitScurve+0x454>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008474:	f7f8 f8c0 	bl	80005f8 <__aeabi_dmul>
 8008478:	4603      	mov	r3, r0
 800847a:	460c      	mov	r4, r1
 800847c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8008480:	a3c4      	add	r3, pc, #784	; (adr r3, 8008794 <scaraInitScurve+0x454>)
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800848a:	f7f8 f8b5 	bl	80005f8 <__aeabi_dmul>
 800848e:	4603      	mov	r3, r0
 8008490:	460c      	mov	r4, r1
 8008492:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008496:	e001      	b.n	800849c <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8008498:	2306      	movs	r3, #6
 800849a:	e2c8      	b.n	8008a2e <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	f04f 0400 	mov.w	r4, #0
 80084a4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	f04f 0400 	mov.w	r4, #0
 80084b0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	f04f 0400 	mov.w	r4, #0
 80084bc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 80084c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80084c4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084d4:	f7f8 fb02 	bl	8000adc <__aeabi_dcmplt>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d015      	beq.n	800850a <scaraInitScurve+0x1ca>
		 dir = -1;
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	4ca5      	ldr	r4, [pc, #660]	; (8008778 <scaraInitScurve+0x438>)
 80084e4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 80084e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80084f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	613b      	str	r3, [r7, #16]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e004      	b.n	8008514 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	4c9b      	ldr	r4, [pc, #620]	; (800877c <scaraInitScurve+0x43c>)
 8008510:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8008514:	7ebb      	ldrb	r3, [r7, #26]
 8008516:	2b01      	cmp	r3, #1
 8008518:	f040 8082 	bne.w	8008620 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008522:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8008526:	a390      	add	r3, pc, #576	; (adr r3, 8008768 <scaraInitScurve+0x428>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008530:	f7f8 faf2 	bl	8000b18 <__aeabi_dcmpgt>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d066      	beq.n	8008608 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	4b90      	ldr	r3, [pc, #576]	; (8008780 <scaraInitScurve+0x440>)
 8008540:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008544:	f7f8 f982 	bl	800084c <__aeabi_ddiv>
 8008548:	4603      	mov	r3, r0
 800854a:	460c      	mov	r4, r1
 800854c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8008550:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	f7f7 fe98 	bl	800028c <__adddf3>
 800855c:	4603      	mov	r3, r0
 800855e:	460c      	mov	r4, r1
 8008560:	461a      	mov	r2, r3
 8008562:	4623      	mov	r3, r4
 8008564:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008568:	f7f8 f970 	bl	800084c <__aeabi_ddiv>
 800856c:	4603      	mov	r3, r0
 800856e:	460c      	mov	r4, r1
 8008570:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8008574:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008578:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800857c:	f7f8 facc 	bl	8000b18 <__aeabi_dcmpgt>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d022      	beq.n	80085cc <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8008586:	f04f 0200 	mov.w	r2, #0
 800858a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800858e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008592:	f7f8 f95b 	bl	800084c <__aeabi_ddiv>
 8008596:	4603      	mov	r3, r0
 8008598:	460c      	mov	r4, r1
 800859a:	4625      	mov	r5, r4
 800859c:	461c      	mov	r4, r3
 800859e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	f7f7 fe71 	bl	800028c <__adddf3>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085b2:	f7f8 f94b 	bl	800084c <__aeabi_ddiv>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4620      	mov	r0, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f7 fe63 	bl	8000288 <__aeabi_dsub>
 80085c2:	4603      	mov	r3, r0
 80085c4:	460c      	mov	r4, r1
 80085c6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 80085ca:	e003      	b.n	80085d4 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 80085cc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80085d0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 80085d4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80085d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085dc:	f7f8 f936 	bl	800084c <__aeabi_ddiv>
 80085e0:	4603      	mov	r3, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 80085e8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80085ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80085f0:	f7f8 fa92 	bl	8000b18 <__aeabi_dcmpgt>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80085fa:	230a      	movs	r3, #10
 80085fc:	e217      	b.n	8008a2e <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 80085fe:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8008602:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008606:	e00b      	b.n	8008620 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8008608:	f04f 0300 	mov.w	r3, #0
 800860c:	f04f 0400 	mov.w	r4, #0
 8008610:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	f04f 0400 	mov.w	r4, #0
 800861c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8008620:	a353      	add	r3, pc, #332	; (adr r3, 8008770 <scaraInitScurve+0x430>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800862a:	f7f8 fa75 	bl	8000b18 <__aeabi_dcmpgt>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 80b3 	beq.w	800879c <scaraInitScurve+0x45c>
 8008636:	a34e      	add	r3, pc, #312	; (adr r3, 8008770 <scaraInitScurve+0x430>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008640:	f7f8 fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 80a8 	beq.w	800879c <scaraInitScurve+0x45c>
		 no_phases = 5;
 800864c:	2305      	movs	r3, #5
 800864e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8008652:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008656:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800865a:	f7f8 f8f7 	bl	800084c <__aeabi_ddiv>
 800865e:	4603      	mov	r3, r0
 8008660:	460c      	mov	r4, r1
 8008662:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8008666:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800866a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800866e:	f7f8 f8ed 	bl	800084c <__aeabi_ddiv>
 8008672:	4603      	mov	r3, r0
 8008674:	460c      	mov	r4, r1
 8008676:	4625      	mov	r5, r4
 8008678:	461c      	mov	r4, r3
 800867a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	f7f7 fe03 	bl	800028c <__adddf3>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f7 fdfb 	bl	8000288 <__aeabi_dsub>
 8008692:	4603      	mov	r3, r0
 8008694:	460c      	mov	r4, r1
 8008696:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80086a6:	f7f8 fa19 	bl	8000adc <__aeabi_dcmplt>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d022      	beq.n	80086f6 <scaraInitScurve+0x3b6>
			 tc = 0;
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	f04f 0400 	mov.w	r4, #0
 80086b8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 80086bc:	2304      	movs	r3, #4
 80086be:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 80086c2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	f7f7 fddf 	bl	800028c <__adddf3>
 80086ce:	4603      	mov	r3, r0
 80086d0:	460c      	mov	r4, r1
 80086d2:	461a      	mov	r2, r3
 80086d4:	4623      	mov	r3, r4
 80086d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086da:	f7f8 f8b7 	bl	800084c <__aeabi_ddiv>
 80086de:	4603      	mov	r3, r0
 80086e0:	460c      	mov	r4, r1
 80086e2:	ec44 3b17 	vmov	d7, r3, r4
 80086e6:	eeb0 0a47 	vmov.f32	s0, s14
 80086ea:	eef0 0a67 	vmov.f32	s1, s15
 80086ee:	f011 fb15 	bl	8019d1c <sqrt>
 80086f2:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 80086f6:	a31c      	add	r3, pc, #112	; (adr r3, 8008768 <scaraInitScurve+0x428>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008700:	f7f8 f9ec 	bl	8000adc <__aeabi_dcmplt>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <scaraInitScurve+0x3d8>
			 j_max = 0;
 800870a:	f04f 0300 	mov.w	r3, #0
 800870e:	f04f 0400 	mov.w	r4, #0
 8008712:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8008716:	e009      	b.n	800872c <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8008718:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800871c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008720:	f7f8 f894 	bl	800084c <__aeabi_ddiv>
 8008724:	4603      	mov	r3, r0
 8008726:	460c      	mov	r4, r1
 8008728:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 800872c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008730:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008734:	f7f7 ff60 	bl	80005f8 <__aeabi_dmul>
 8008738:	4603      	mov	r3, r0
 800873a:	460c      	mov	r4, r1
 800873c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <scaraInitScurve+0x440>)
 8008746:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800874a:	f7f7 ff55 	bl	80005f8 <__aeabi_dmul>
 800874e:	4603      	mov	r3, r0
 8008750:	460c      	mov	r4, r1
 8008752:	461a      	mov	r2, r3
 8008754:	4623      	mov	r3, r4
 8008756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800875a:	f7f7 fd97 	bl	800028c <__adddf3>
 800875e:	4603      	mov	r3, r0
 8008760:	460c      	mov	r4, r1
 8008762:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8008766:	e039      	b.n	80087dc <scaraInitScurve+0x49c>
 8008768:	d2f1a9fc 	.word	0xd2f1a9fc
 800876c:	3f50624d 	.word	0x3f50624d
 8008770:	9abcaf48 	.word	0x9abcaf48
 8008774:	3e7ad7f2 	.word	0x3e7ad7f2
 8008778:	bff00000 	.word	0xbff00000
 800877c:	3ff00000 	.word	0x3ff00000
 8008780:	40100000 	.word	0x40100000
 8008784:	00000000 	.word	0x00000000
 8008788:	405c2000 	.word	0x405c2000
 800878c:	14000000 	.word	0x14000000
 8008790:	4000f6f0 	.word	0x4000f6f0
 8008794:	6b259425 	.word	0x6b259425
 8008798:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 800879c:	f04f 0300 	mov.w	r3, #0
 80087a0:	f04f 0400 	mov.w	r4, #0
 80087a4:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	f04f 0400 	mov.w	r4, #0
 80087b0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 80087b4:	2304      	movs	r3, #4
 80087b6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	4ba0      	ldr	r3, [pc, #640]	; (8008a40 <scaraInitScurve+0x700>)
 80087c0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80087c4:	f7f8 f842 	bl	800084c <__aeabi_ddiv>
 80087c8:	4603      	mov	r3, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 80087d0:	f04f 0300 	mov.w	r3, #0
 80087d4:	f04f 0400 	mov.w	r4, #0
 80087d8:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 80087dc:	a396      	add	r3, pc, #600	; (adr r3, 8008a38 <scaraInitScurve+0x6f8>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80087e6:	f7f8 f831 	bl	800084c <__aeabi_ddiv>
 80087ea:	4603      	mov	r3, r0
 80087ec:	460c      	mov	r4, r1
 80087ee:	ec44 3b17 	vmov	d7, r3, r4
 80087f2:	eeb0 0a47 	vmov.f32	s0, s14
 80087f6:	eef0 0a67 	vmov.f32	s1, s15
 80087fa:	f011 f8f5 	bl	80199e8 <ceil>
 80087fe:	ec54 3b10 	vmov	r3, r4, d0
 8008802:	4618      	mov	r0, r3
 8008804:	4621      	mov	r1, r4
 8008806:	f7f8 f9cf 	bl	8000ba8 <__aeabi_d2uiz>
 800880a:	4603      	mov	r3, r0
 800880c:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	4b8c      	ldr	r3, [pc, #560]	; (8008a44 <scaraInitScurve+0x704>)
 8008814:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008818:	f7f7 feee 	bl	80005f8 <__aeabi_dmul>
 800881c:	4603      	mov	r3, r0
 800881e:	460c      	mov	r4, r1
 8008820:	4618      	mov	r0, r3
 8008822:	4621      	mov	r1, r4
 8008824:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008828:	f7f7 fee6 	bl	80005f8 <__aeabi_dmul>
 800882c:	4603      	mov	r3, r0
 800882e:	460c      	mov	r4, r1
 8008830:	461a      	mov	r2, r3
 8008832:	4623      	mov	r3, r4
 8008834:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008838:	f7f7 fede 	bl	80005f8 <__aeabi_dmul>
 800883c:	4603      	mov	r3, r0
 800883e:	460c      	mov	r4, r1
 8008840:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8008844:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008848:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	4603      	mov	r3, r0
 8008852:	460c      	mov	r4, r1
 8008854:	4618      	mov	r0, r3
 8008856:	4621      	mov	r1, r4
 8008858:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800885c:	f7f7 fecc 	bl	80005f8 <__aeabi_dmul>
 8008860:	4603      	mov	r3, r0
 8008862:	460c      	mov	r4, r1
 8008864:	4618      	mov	r0, r3
 8008866:	4621      	mov	r1, r4
 8008868:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800886c:	f7f7 fec4 	bl	80005f8 <__aeabi_dmul>
 8008870:	4603      	mov	r3, r0
 8008872:	460c      	mov	r4, r1
 8008874:	4618      	mov	r0, r3
 8008876:	4621      	mov	r1, r4
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	4b72      	ldr	r3, [pc, #456]	; (8008a48 <scaraInitScurve+0x708>)
 800887e:	f7f7 ffe5 	bl	800084c <__aeabi_ddiv>
 8008882:	4603      	mov	r3, r0
 8008884:	460c      	mov	r4, r1
 8008886:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 800888a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800888e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008892:	f7f7 feb1 	bl	80005f8 <__aeabi_dmul>
 8008896:	4603      	mov	r3, r0
 8008898:	460c      	mov	r4, r1
 800889a:	461a      	mov	r2, r3
 800889c:	4623      	mov	r3, r4
 800889e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80088a2:	f7f7 fea9 	bl	80005f8 <__aeabi_dmul>
 80088a6:	4603      	mov	r3, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 80088ae:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80088b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088b6:	f7f7 fe9f 	bl	80005f8 <__aeabi_dmul>
 80088ba:	4603      	mov	r3, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 80088c2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80088c6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 80088ca:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80088ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	4603      	mov	r3, r0
 80088d8:	460c      	mov	r4, r1
 80088da:	461a      	mov	r2, r3
 80088dc:	4623      	mov	r3, r4
 80088de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80088e2:	f7f7 fcd3 	bl	800028c <__adddf3>
 80088e6:	4603      	mov	r3, r0
 80088e8:	460c      	mov	r4, r1
 80088ea:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 80088ee:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80088f2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 80088f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80088fe:	f7f7 fcc5 	bl	800028c <__adddf3>
 8008902:	4603      	mov	r3, r0
 8008904:	460c      	mov	r4, r1
 8008906:	4618      	mov	r0, r3
 8008908:	4621      	mov	r1, r4
 800890a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800890e:	f7f7 fcbb 	bl	8000288 <__aeabi_dsub>
 8008912:	4603      	mov	r3, r0
 8008914:	460c      	mov	r4, r1
 8008916:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008920:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800892a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 800892e:	69fa      	ldr	r2, [r7, #28]
 8008930:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8008934:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8008938:	69fa      	ldr	r2, [r7, #28]
 800893a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800893e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8008948:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8008952:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 8008956:	69fa      	ldr	r2, [r7, #28]
 8008958:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800895c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8008966:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8008970:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800897a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8008984:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800898e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008996:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800899e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 80089a2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80089a6:	f7f8 f8d7 	bl	8000b58 <__aeabi_d2iz>
 80089aa:	4603      	mov	r3, r0
 80089ac:	b25a      	sxtb	r2, r3
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	f04f 0400 	mov.w	r4, #0
 80089bc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	f04f 0400 	mov.w	r4, #0
 80089ca:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	f04f 0300 	mov.w	r3, #0
 80089d4:	f04f 0400 	mov.w	r4, #0
 80089d8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 80089dc:	69fa      	ldr	r2, [r7, #28]
 80089de:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80089e2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80089ec:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80089f6:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008a00:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008a0a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008a14:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8008a1e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008a28:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	37e8      	adds	r7, #232	; 0xe8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bdb0      	pop	{r4, r5, r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40000000 	.word	0x40000000
 8008a3c:	3f847ae1 	.word	0x3f847ae1
 8008a40:	40100000 	.word	0x40100000
 8008a44:	3fe00000 	.word	0x3fe00000
 8008a48:	40180000 	.word	0x40180000

08008a4c <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	b5b0      	push	{r4, r5, r7, lr}
 8008a50:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008a54:	af2e      	add	r7, sp, #184	; 0xb8
 8008a56:	f107 0108 	add.w	r1, r7, #8
 8008a5a:	ed81 0b00 	vstr	d0, [r1]
 8008a5e:	1d39      	adds	r1, r7, #4
 8008a60:	6008      	str	r0, [r1, #0]
 8008a62:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8008a66:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8008a6a:	f107 0210 	add.w	r2, r7, #16
 8008a6e:	f107 0308 	add.w	r3, r7, #8
 8008a72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a76:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8008a7a:	4ba9      	ldr	r3, [pc, #676]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f040 815a 	bne.w	8008d38 <scaraFlowDuty+0x2ec>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8008a84:	4ba6      	ldr	r3, [pc, #664]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008a86:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d12b      	bne.n	8008ae6 <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8008a8e:	f107 0308 	add.w	r3, r7, #8
 8008a92:	ed93 0b00 	vldr	d0, [r3]
 8008a96:	48a3      	ldr	r0, [pc, #652]	; (8008d24 <scaraFlowDuty+0x2d8>)
 8008a98:	f000 fc72 	bl	8009380 <scaraFlowLSPB1>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8008aa2:	4b9f      	ldr	r3, [pc, #636]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008aa4:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8008aa8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8008aac:	4b9c      	ldr	r3, [pc, #624]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008aae:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8008ab2:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008ab6:	4b9a      	ldr	r3, [pc, #616]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008ab8:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008abc:	f107 0108 	add.w	r1, r7, #8
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4623      	mov	r3, r4
 8008ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ac8:	f7f7 fd96 	bl	80005f8 <__aeabi_dmul>
 8008acc:	4603      	mov	r3, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008ad4:	4b92      	ldr	r3, [pc, #584]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008ad6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008ada:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008ae4:	e063      	b.n	8008bae <scaraFlowDuty+0x162>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8008ae6:	4b8e      	ldr	r3, [pc, #568]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008ae8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d12d      	bne.n	8008b4c <scaraFlowDuty+0x100>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8008af0:	f107 0308 	add.w	r3, r7, #8
 8008af4:	ed93 0b00 	vldr	d0, [r3]
 8008af8:	488b      	ldr	r0, [pc, #556]	; (8008d28 <scaraFlowDuty+0x2dc>)
 8008afa:	f000 fddf 	bl	80096bc <scaraFLowScurve>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8008b04:	f107 0308 	add.w	r3, r7, #8
 8008b08:	ed93 0b00 	vldr	d0, [r3]
 8008b0c:	4887      	ldr	r0, [pc, #540]	; (8008d2c <scaraFlowDuty+0x2e0>)
 8008b0e:	f000 fdd5 	bl	80096bc <scaraFLowScurve>
 8008b12:	4603      	mov	r3, r0
 8008b14:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8008b18:	4b81      	ldr	r3, [pc, #516]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b1a:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8008b1e:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 8008b22:	4b7f      	ldr	r3, [pc, #508]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b24:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8008b28:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8008b2c:	4b7c      	ldr	r3, [pc, #496]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b2e:	e9d3 34f8 	ldrd	r3, r4, [r3, #992]	; 0x3e0
 8008b32:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 8008b36:	4b7a      	ldr	r3, [pc, #488]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b38:	e9d3 34f6 	ldrd	r3, r4, [r3, #984]	; 0x3d8
 8008b3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8008b40:	4b77      	ldr	r3, [pc, #476]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b42:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 8008b46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008b4a:	e030      	b.n	8008bae <scaraFlowDuty+0x162>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8008b4c:	4b74      	ldr	r3, [pc, #464]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b4e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d129      	bne.n	8008baa <scaraFlowDuty+0x15e>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8008b56:	4b72      	ldr	r3, [pc, #456]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b58:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 8008b5c:	f107 0108 	add.w	r1, r7, #8
 8008b60:	461a      	mov	r2, r3
 8008b62:	4623      	mov	r3, r4
 8008b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b68:	f7f7 fd46 	bl	80005f8 <__aeabi_dmul>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8008b74:	4b6a      	ldr	r3, [pc, #424]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b76:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008b7a:	f107 0108 	add.w	r1, r7, #8
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4623      	mov	r3, r4
 8008b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b86:	f7f7 fd37 	bl	80005f8 <__aeabi_dmul>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8008b92:	4b63      	ldr	r3, [pc, #396]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008b94:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008b98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008ba8:	e001      	b.n	8008bae <scaraFlowDuty+0x162>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008baa:	2305      	movs	r3, #5
 8008bac:	e2cd      	b.n	800914a <scaraFlowDuty+0x6fe>
		}

		if ( SCARA_STATUS_OK != status1) {
 8008bae:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <scaraFlowDuty+0x170>
			return status1;
 8008bb6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008bba:	e2c6      	b.n	800914a <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008bbc:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <scaraFlowDuty+0x17e>
			return status2;
 8008bc4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008bc8:	e2bf      	b.n	800914a <scaraFlowDuty+0x6fe>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8008bca:	4b55      	ldr	r3, [pc, #340]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008bcc:	7a1b      	ldrb	r3, [r3, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d117      	bne.n	8008c02 <scaraFlowDuty+0x1b6>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8008bd2:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008bd6:	4856      	ldr	r0, [pc, #344]	; (8008d30 <scaraFlowDuty+0x2e4>)
 8008bd8:	f000 fac2 	bl	8009160 <scaraFlowLine>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8008be2:	4b4f      	ldr	r3, [pc, #316]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008be4:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8008be8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 8008bec:	4b4c      	ldr	r3, [pc, #304]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008bee:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008bf2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 8008bf6:	4b4a      	ldr	r3, [pc, #296]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008bf8:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008bfc:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008c00:	e01d      	b.n	8008c3e <scaraFlowDuty+0x1f2>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8008c02:	4b47      	ldr	r3, [pc, #284]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008c04:	7a1b      	ldrb	r3, [r3, #8]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d117      	bne.n	8008c3a <scaraFlowDuty+0x1ee>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8008c0a:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8008c0e:	4849      	ldr	r0, [pc, #292]	; (8008d34 <scaraFlowDuty+0x2e8>)
 8008c10:	f000 fb2e 	bl	8009270 <scaraFlowCircle>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8008c1a:	4b41      	ldr	r3, [pc, #260]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008c1c:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8008c20:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 8008c24:	4b3e      	ldr	r3, [pc, #248]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008c26:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8008c2a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 8008c2e:	4b3c      	ldr	r3, [pc, #240]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008c30:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8008c34:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008c38:	e001      	b.n	8008c3e <scaraFlowDuty+0x1f2>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e285      	b.n	800914a <scaraFlowDuty+0x6fe>
		}

		positionCompute.x 		= x;
 8008c3e:	f107 0210 	add.w	r2, r7, #16
 8008c42:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8008c46:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8008c4a:	f107 0210 	add.w	r2, r7, #16
 8008c4e:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8008c52:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 8008c56:	f107 0210 	add.w	r2, r7, #16
 8008c5a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8008c5e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8008c62:	4b2f      	ldr	r3, [pc, #188]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008c64:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008c68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008c6c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7f7 fc57 	bl	8000524 <__aeabi_i2d>
 8008c76:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8008c7a:	f7f7 fcbd 	bl	80005f8 <__aeabi_dmul>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4620      	mov	r0, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f7 fb01 	bl	800028c <__adddf3>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	f107 0210 	add.w	r2, r7, #16
 8008c92:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8008c96:	f107 0210 	add.w	r2, r7, #16
 8008c9a:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8008c9e:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8008ca2:	f107 0210 	add.w	r2, r7, #16
 8008ca6:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8008caa:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8008cae:	f107 0210 	add.w	r2, r7, #16
 8008cb2:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8008cb6:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8008cba:	f107 0210 	add.w	r2, r7, #16
 8008cbe:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8008cc2:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8008cc6:	4b16      	ldr	r3, [pc, #88]	; (8008d20 <scaraFlowDuty+0x2d4>)
 8008cc8:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8008ccc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cd0:	f107 0210 	add.w	r2, r7, #16
 8008cd4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8008cd8:	f107 0210 	add.w	r2, r7, #16
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ce4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8008ce8:	f107 0410 	add.w	r4, r7, #16
 8008cec:	4668      	mov	r0, sp
 8008cee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008cf2:	22b8      	movs	r2, #184	; 0xb8
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	f00d f909 	bl	8015f0c <memcpy>
 8008cfa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008cfe:	cb0c      	ldmia	r3, {r2, r3}
 8008d00:	4620      	mov	r0, r4
 8008d02:	f7fb fb09 	bl	8004318 <kinematicInverse>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <scaraFlowDuty+0x2c4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008d0c:	2307      	movs	r3, #7
 8008d0e:	e21c      	b.n	800914a <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8008d10:	f107 0110 	add.w	r1, r7, #16
 8008d14:	1d3b      	adds	r3, r7, #4
 8008d16:	22c0      	movs	r2, #192	; 0xc0
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	f00d f8f7 	bl	8015f0c <memcpy>
 8008d1e:	e213      	b.n	8009148 <scaraFlowDuty+0x6fc>
 8008d20:	2000ad80 	.word	0x2000ad80
 8008d24:	2000ae98 	.word	0x2000ae98
 8008d28:	2000af18 	.word	0x2000af18
 8008d2c:	2000b098 	.word	0x2000b098
 8008d30:	2000ad90 	.word	0x2000ad90
 8008d34:	2000ae00 	.word	0x2000ae00
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008d38:	4b8b      	ldr	r3, [pc, #556]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	f040 8201 	bne.w	8009144 <scaraFlowDuty+0x6f8>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8008d42:	4b89      	ldr	r3, [pc, #548]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008d44:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d174      	bne.n	8008e36 <scaraFlowDuty+0x3ea>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 8008d4c:	f107 0308 	add.w	r3, r7, #8
 8008d50:	ed93 0b00 	vldr	d0, [r3]
 8008d54:	4885      	ldr	r0, [pc, #532]	; (8008f6c <scaraFlowDuty+0x520>)
 8008d56:	f000 fb13 	bl	8009380 <scaraFlowLSPB1>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 8008d60:	f107 0308 	add.w	r3, r7, #8
 8008d64:	ed93 0b00 	vldr	d0, [r3]
 8008d68:	4881      	ldr	r0, [pc, #516]	; (8008f70 <scaraFlowDuty+0x524>)
 8008d6a:	f000 fb09 	bl	8009380 <scaraFlowLSPB1>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 8008d74:	f107 0308 	add.w	r3, r7, #8
 8008d78:	ed93 0b00 	vldr	d0, [r3]
 8008d7c:	487d      	ldr	r0, [pc, #500]	; (8008f74 <scaraFlowDuty+0x528>)
 8008d7e:	f000 faff 	bl	8009380 <scaraFlowLSPB1>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 8008d88:	f107 0308 	add.w	r3, r7, #8
 8008d8c:	ed93 0b00 	vldr	d0, [r3]
 8008d90:	4879      	ldr	r0, [pc, #484]	; (8008f78 <scaraFlowDuty+0x52c>)
 8008d92:	f000 faf5 	bl	8009380 <scaraFlowLSPB1>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8008d9c:	4b72      	ldr	r3, [pc, #456]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008d9e:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8008da2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8008da6:	4b70      	ldr	r3, [pc, #448]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008da8:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8008dac:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8008db0:	4b6d      	ldr	r3, [pc, #436]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008db2:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8008db6:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8008dba:	4b6b      	ldr	r3, [pc, #428]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008dbc:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8008dc0:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8008dc4:	4b68      	ldr	r3, [pc, #416]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008dc6:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008dca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008dce:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8008dd2:	4b65      	ldr	r3, [pc, #404]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008dd4:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8008dd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ddc:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8008de0:	4b61      	ldr	r3, [pc, #388]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008de2:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8008de6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008dea:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8008dee:	4b5e      	ldr	r3, [pc, #376]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008df0:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8008df4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008df8:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8008dfc:	4b5a      	ldr	r3, [pc, #360]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008dfe:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8008e02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e06:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8008e0a:	4b57      	ldr	r3, [pc, #348]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008e0c:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8008e10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e14:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8008e18:	4b53      	ldr	r3, [pc, #332]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008e1a:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008e1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e22:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8008e26:	4b50      	ldr	r3, [pc, #320]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008e28:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008e2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e30:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008e34:	e07b      	b.n	8008f2e <scaraFlowDuty+0x4e2>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8008e36:	4b4c      	ldr	r3, [pc, #304]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008e38:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d174      	bne.n	8008f2a <scaraFlowDuty+0x4de>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008e40:	f107 0308 	add.w	r3, r7, #8
 8008e44:	ed93 0b00 	vldr	d0, [r3]
 8008e48:	484c      	ldr	r0, [pc, #304]	; (8008f7c <scaraFlowDuty+0x530>)
 8008e4a:	f000 fc37 	bl	80096bc <scaraFLowScurve>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8008e54:	f107 0308 	add.w	r3, r7, #8
 8008e58:	ed93 0b00 	vldr	d0, [r3]
 8008e5c:	4848      	ldr	r0, [pc, #288]	; (8008f80 <scaraFlowDuty+0x534>)
 8008e5e:	f000 fc2d 	bl	80096bc <scaraFLowScurve>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8008e68:	f107 0308 	add.w	r3, r7, #8
 8008e6c:	ed93 0b00 	vldr	d0, [r3]
 8008e70:	4844      	ldr	r0, [pc, #272]	; (8008f84 <scaraFlowDuty+0x538>)
 8008e72:	f000 fc23 	bl	80096bc <scaraFLowScurve>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8008e7c:	f107 0308 	add.w	r3, r7, #8
 8008e80:	ed93 0b00 	vldr	d0, [r3]
 8008e84:	4840      	ldr	r0, [pc, #256]	; (8008f88 <scaraFlowDuty+0x53c>)
 8008e86:	f000 fc19 	bl	80096bc <scaraFLowScurve>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8008e90:	4b35      	ldr	r3, [pc, #212]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008e92:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 8008e96:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8008e9a:	4b33      	ldr	r3, [pc, #204]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008e9c:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8008ea0:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8008ea4:	4b30      	ldr	r3, [pc, #192]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008ea6:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8008eaa:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8008eae:	4b2e      	ldr	r3, [pc, #184]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008eb0:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 8008eb4:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8008eb8:	4b2b      	ldr	r3, [pc, #172]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008eba:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8008ebe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ec2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8008ec6:	4b28      	ldr	r3, [pc, #160]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008ec8:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8008ecc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ed0:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8008ed4:	4b24      	ldr	r3, [pc, #144]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008ed6:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8008eda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ede:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8008ee2:	4b21      	ldr	r3, [pc, #132]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008ee4:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8008ee8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008eec:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008ef2:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8008ef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008efa:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8008efe:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008f00:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8008f04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f08:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8008f0c:	4b16      	ldr	r3, [pc, #88]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008f0e:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8008f12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f16:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8008f1a:	4b13      	ldr	r3, [pc, #76]	; (8008f68 <scaraFlowDuty+0x51c>)
 8008f1c:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8008f20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f24:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8008f28:	e001      	b.n	8008f2e <scaraFlowDuty+0x4e2>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008f2a:	2305      	movs	r3, #5
 8008f2c:	e10d      	b.n	800914a <scaraFlowDuty+0x6fe>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8008f2e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <scaraFlowDuty+0x4f0>
			return status1;
 8008f36:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008f3a:	e106      	b.n	800914a <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008f3c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <scaraFlowDuty+0x4fe>
			return status2;
 8008f44:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008f48:	e0ff      	b.n	800914a <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status3) {
 8008f4a:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <scaraFlowDuty+0x50c>
			return status3;
 8008f52:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008f56:	e0f8      	b.n	800914a <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status4) {
 8008f58:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d015      	beq.n	8008f8c <scaraFlowDuty+0x540>
			return status4;
 8008f60:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008f64:	e0f1      	b.n	800914a <scaraFlowDuty+0x6fe>
 8008f66:	bf00      	nop
 8008f68:	2000ad80 	.word	0x2000ad80
 8008f6c:	2000b1a0 	.word	0x2000b1a0
 8008f70:	2000b320 	.word	0x2000b320
 8008f74:	2000b4a0 	.word	0x2000b4a0
 8008f78:	2000b620 	.word	0x2000b620
 8008f7c:	2000b220 	.word	0x2000b220
 8008f80:	2000b3a0 	.word	0x2000b3a0
 8008f84:	2000b520 	.word	0x2000b520
 8008f88:	2000b6a0 	.word	0x2000b6a0
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8008f8c:	4b73      	ldr	r3, [pc, #460]	; (800915c <scaraFlowDuty+0x710>)
 8008f8e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8008f92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008f96:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f7 fac2 	bl	8000524 <__aeabi_i2d>
 8008fa0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8008fa4:	f7f7 fb28 	bl	80005f8 <__aeabi_dmul>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4620      	mov	r0, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7f7 f96c 	bl	800028c <__adddf3>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	f107 0210 	add.w	r2, r7, #16
 8008fbc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8008fc0:	4b66      	ldr	r3, [pc, #408]	; (800915c <scaraFlowDuty+0x710>)
 8008fc2:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8008fc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008fca:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f7 faa8 	bl	8000524 <__aeabi_i2d>
 8008fd4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8008fd8:	f7f7 fb0e 	bl	80005f8 <__aeabi_dmul>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	f7f7 f952 	bl	800028c <__adddf3>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	460c      	mov	r4, r1
 8008fec:	f107 0210 	add.w	r2, r7, #16
 8008ff0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8008ff4:	4b59      	ldr	r3, [pc, #356]	; (800915c <scaraFlowDuty+0x710>)
 8008ff6:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008ffa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008ffe:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 8009002:	4618      	mov	r0, r3
 8009004:	f7f7 fa8e 	bl	8000524 <__aeabi_i2d>
 8009008:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800900c:	f7f7 faf4 	bl	80005f8 <__aeabi_dmul>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4620      	mov	r0, r4
 8009016:	4629      	mov	r1, r5
 8009018:	f7f7 f938 	bl	800028c <__adddf3>
 800901c:	4603      	mov	r3, r0
 800901e:	460c      	mov	r4, r1
 8009020:	f107 0210 	add.w	r2, r7, #16
 8009024:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8009028:	4b4c      	ldr	r3, [pc, #304]	; (800915c <scaraFlowDuty+0x710>)
 800902a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800902e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009032:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 8009036:	4618      	mov	r0, r3
 8009038:	f7f7 fa74 	bl	8000524 <__aeabi_i2d>
 800903c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4620      	mov	r0, r4
 800904a:	4629      	mov	r1, r5
 800904c:	f7f7 f91e 	bl	800028c <__adddf3>
 8009050:	4603      	mov	r3, r0
 8009052:	460c      	mov	r4, r1
 8009054:	f107 0210 	add.w	r2, r7, #16
 8009058:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800905c:	f107 0210 	add.w	r2, r7, #16
 8009060:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8009064:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8009068:	f107 0210 	add.w	r2, r7, #16
 800906c:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8009070:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8009074:	f107 0210 	add.w	r2, r7, #16
 8009078:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800907c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8009080:	f107 0210 	add.w	r2, r7, #16
 8009084:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8009088:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800908c:	f107 0210 	add.w	r2, r7, #16
 8009090:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8009094:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8009098:	f107 0210 	add.w	r2, r7, #16
 800909c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80090a0:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 80090a4:	f107 0210 	add.w	r2, r7, #16
 80090a8:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80090ac:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 80090b0:	f107 0210 	add.w	r2, r7, #16
 80090b4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80090b8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 80090bc:	4b27      	ldr	r3, [pc, #156]	; (800915c <scaraFlowDuty+0x710>)
 80090be:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80090c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090c6:	f107 0210 	add.w	r2, r7, #16
 80090ca:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80090ce:	f107 0210 	add.w	r2, r7, #16
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090da:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80090de:	f107 0310 	add.w	r3, r7, #16
 80090e2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80090e6:	f107 0310 	add.w	r3, r7, #16
 80090ea:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80090ee:	f107 0310 	add.w	r3, r7, #16
 80090f2:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80090f6:	f107 0310 	add.w	r3, r7, #16
 80090fa:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80090fe:	eeb0 3a44 	vmov.f32	s6, s8
 8009102:	eef0 3a64 	vmov.f32	s7, s9
 8009106:	eeb0 2a45 	vmov.f32	s4, s10
 800910a:	eef0 2a65 	vmov.f32	s5, s11
 800910e:	eeb0 1a46 	vmov.f32	s2, s12
 8009112:	eef0 1a66 	vmov.f32	s3, s13
 8009116:	eeb0 0a47 	vmov.f32	s0, s14
 800911a:	eef0 0a67 	vmov.f32	s1, s15
 800911e:	f001 f9b3 	bl	800a488 <scaraCheckWorkSpace4>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <scaraFlowDuty+0x6e0>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009128:	2307      	movs	r3, #7
 800912a:	e00e      	b.n	800914a <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800912c:	f107 0110 	add.w	r1, r7, #16
 8009130:	1d3b      	adds	r3, r7, #4
 8009132:	22c0      	movs	r2, #192	; 0xc0
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f00c fee9 	bl	8015f0c <memcpy>
		}
		kinematicForward(pos_Next);
 800913a:	1d3b      	adds	r3, r7, #4
 800913c:	6818      	ldr	r0, [r3, #0]
 800913e:	f7fa ffaf 	bl	80040a0 <kinematicForward>
 8009142:	e001      	b.n	8009148 <scaraFlowDuty+0x6fc>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8009144:	2302      	movs	r3, #2
 8009146:	e000      	b.n	800914a <scaraFlowDuty+0x6fe>
	}

	return SCARA_STATUS_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8009150:	46bd      	mov	sp, r7
 8009152:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009156:	b002      	add	sp, #8
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	2000ad80 	.word	0x2000ad80

08009160 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8009160:	b5b0      	push	{r4, r5, r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009172:	a33d      	add	r3, pc, #244	; (adr r3, 8009268 <scaraFlowLine+0x108>)
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f7f7 fcce 	bl	8000b18 <__aeabi_dcmpgt>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d05a      	beq.n	8009238 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800918e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009192:	f7f7 fa31 	bl	80005f8 <__aeabi_dmul>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4610      	mov	r0, r2
 800919c:	4619      	mov	r1, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80091a4:	f7f7 fb52 	bl	800084c <__aeabi_ddiv>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4620      	mov	r0, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	f7f7 f86c 	bl	800028c <__adddf3>
 80091b4:	4603      	mov	r3, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80091ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ce:	f7f7 fa13 	bl	80005f8 <__aeabi_dmul>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4610      	mov	r0, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80091e0:	f7f7 fb34 	bl	800084c <__aeabi_ddiv>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4620      	mov	r0, r4
 80091ea:	4629      	mov	r1, r5
 80091ec:	f7f7 f84e 	bl	800028c <__adddf3>
 80091f0:	4603      	mov	r3, r0
 80091f2:	460c      	mov	r4, r1
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8009206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800920a:	f7f7 f9f5 	bl	80005f8 <__aeabi_dmul>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4610      	mov	r0, r2
 8009214:	4619      	mov	r1, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800921c:	f7f7 fb16 	bl	800084c <__aeabi_ddiv>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4620      	mov	r0, r4
 8009226:	4629      	mov	r1, r5
 8009228:	f7f7 f830 	bl	800028c <__adddf3>
 800922c:	4603      	mov	r3, r0
 800922e:	460c      	mov	r4, r1
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8009236:	e011      	b.n	800925c <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bdb0      	pop	{r4, r5, r7, pc}
 8009266:	bf00      	nop
 8009268:	47ae147b 	.word	0x47ae147b
 800926c:	3f847ae1 	.word	0x3f847ae1

08009270 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8009270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009274:	b086      	sub	sp, #24
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009284:	461a      	mov	r2, r3
 8009286:	4623      	mov	r3, r4
 8009288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800928c:	f7f7 fade 	bl	800084c <__aeabi_ddiv>
 8009290:	4603      	mov	r3, r0
 8009292:	460c      	mov	r4, r1
 8009294:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f993 3000 	ldrsb.w	r3, [r3]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7f7 f937 	bl	8000524 <__aeabi_i2d>
 80092b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092ba:	f7f7 f99d 	bl	80005f8 <__aeabi_dmul>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	4650      	mov	r0, sl
 80092c4:	4659      	mov	r1, fp
 80092c6:	f7f6 ffe1 	bl	800028c <__adddf3>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	ec43 2b17 	vmov	d7, r2, r3
 80092d2:	eeb0 0a47 	vmov.f32	s0, s14
 80092d6:	eef0 0a67 	vmov.f32	s1, s15
 80092da:	f010 fc05 	bl	8019ae8 <cos>
 80092de:	ec53 2b10 	vmov	r2, r3, d0
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4620      	mov	r0, r4
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f6 ffcb 	bl	800028c <__adddf3>
 80092f6:	4603      	mov	r3, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f993 3000 	ldrsb.w	r3, [r3]
 8009318:	4618      	mov	r0, r3
 800931a:	f7f7 f903 	bl	8000524 <__aeabi_i2d>
 800931e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4650      	mov	r0, sl
 800932c:	4659      	mov	r1, fp
 800932e:	f7f6 ffad 	bl	800028c <__adddf3>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	ec43 2b17 	vmov	d7, r2, r3
 800933a:	eeb0 0a47 	vmov.f32	s0, s14
 800933e:	eef0 0a67 	vmov.f32	s1, s15
 8009342:	f010 fc61 	bl	8019c08 <sin>
 8009346:	ec53 2b10 	vmov	r2, r3, d0
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f7 f953 	bl	80005f8 <__aeabi_dmul>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4620      	mov	r0, r4
 8009358:	4629      	mov	r1, r5
 800935a:	f7f6 ff97 	bl	800028c <__adddf3>
 800935e:	4603      	mov	r3, r0
 8009360:	460c      	mov	r4, r1
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009380 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8009380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009384:	b08b      	sub	sp, #44	; 0x2c
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009394:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800939e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80093a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093b8:	f7f7 fba4 	bl	8000b04 <__aeabi_dcmpge>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d05b      	beq.n	800947a <scaraFlowLSPB1+0xfa>
 80093c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ca:	f7f7 fb91 	bl	8000af0 <__aeabi_dcmple>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d052      	beq.n	800947a <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80093ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f0:	f7f7 f902 	bl	80005f8 <__aeabi_dmul>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4620      	mov	r0, r4
 80093fa:	4629      	mov	r1, r5
 80093fc:	f7f6 ff46 	bl	800028c <__adddf3>
 8009400:	4603      	mov	r3, r0
 8009402:	460c      	mov	r4, r1
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941a:	f7f7 f8ed 	bl	80005f8 <__aeabi_dmul>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4620      	mov	r0, r4
 8009424:	4629      	mov	r1, r5
 8009426:	f7f6 ff31 	bl	800028c <__adddf3>
 800942a:	4603      	mov	r3, r0
 800942c:	460c      	mov	r4, r1
 800942e:	4625      	mov	r5, r4
 8009430:	461c      	mov	r4, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	4b9e      	ldr	r3, [pc, #632]	; (80096b8 <scaraFlowLSPB1+0x338>)
 800943e:	f7f7 f8db 	bl	80005f8 <__aeabi_dmul>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4610      	mov	r0, r2
 8009448:	4619      	mov	r1, r3
 800944a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800945e:	f7f7 f8cb 	bl	80005f8 <__aeabi_dmul>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f6 ff0f 	bl	800028c <__adddf3>
 800946e:	4603      	mov	r3, r0
 8009470:	460c      	mov	r4, r1
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009478:	e117      	b.n	80096aa <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 800947a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800947e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009482:	f7f7 fb35 	bl	8000af0 <__aeabi_dcmple>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d056      	beq.n	800953a <scaraFlowLSPB1+0x1ba>
 800948c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009494:	f7f7 fb2c 	bl	8000af0 <__aeabi_dcmple>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d04d      	beq.n	800953a <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	f04f 0300 	mov.w	r3, #0
 80094a4:	f04f 0400 	mov.w	r4, #0
 80094a8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80094c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80094c8:	f7f7 f896 	bl	80005f8 <__aeabi_dmul>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4610      	mov	r0, r2
 80094d2:	4619      	mov	r1, r3
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	4b77      	ldr	r3, [pc, #476]	; (80096b8 <scaraFlowLSPB1+0x338>)
 80094da:	f7f7 f88d 	bl	80005f8 <__aeabi_dmul>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4620      	mov	r0, r4
 80094e4:	4629      	mov	r1, r5
 80094e6:	f7f6 fed1 	bl	800028c <__adddf3>
 80094ea:	4603      	mov	r3, r0
 80094ec:	460c      	mov	r4, r1
 80094ee:	4698      	mov	r8, r3
 80094f0:	46a1      	mov	r9, r4
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80094f8:	f04f 0200 	mov.w	r2, #0
 80094fc:	4b6e      	ldr	r3, [pc, #440]	; (80096b8 <scaraFlowLSPB1+0x338>)
 80094fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009502:	f7f7 f879 	bl	80005f8 <__aeabi_dmul>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800950e:	f7f6 febb 	bl	8000288 <__aeabi_dsub>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4620      	mov	r0, r4
 8009518:	4629      	mov	r1, r5
 800951a:	f7f7 f86d 	bl	80005f8 <__aeabi_dmul>
 800951e:	4603      	mov	r3, r0
 8009520:	460c      	mov	r4, r1
 8009522:	461a      	mov	r2, r3
 8009524:	4623      	mov	r3, r4
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	f7f6 feaf 	bl	800028c <__adddf3>
 800952e:	4603      	mov	r3, r0
 8009530:	460c      	mov	r4, r1
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009538:	e0b7      	b.n	80096aa <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td <= time && time <= tf) {
 800953a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009542:	f7f7 fad5 	bl	8000af0 <__aeabi_dcmple>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 809a 	beq.w	8009682 <scaraFlowLSPB1+0x302>
 800954e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009556:	f7f7 facb 	bl	8000af0 <__aeabi_dcmple>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 8090 	beq.w	8009682 <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009568:	4614      	mov	r4, r2
 800956a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8009580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009584:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009588:	f7f6 fe7e 	bl	8000288 <__aeabi_dsub>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4640      	mov	r0, r8
 8009592:	4649      	mov	r1, r9
 8009594:	f7f7 f830 	bl	80005f8 <__aeabi_dmul>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4620      	mov	r0, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	f7f6 fe74 	bl	800028c <__adddf3>
 80095a4:	4603      	mov	r3, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80095ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80095c2:	f7f6 fe61 	bl	8000288 <__aeabi_dsub>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f7 f813 	bl	80005f8 <__aeabi_dmul>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f6 fe55 	bl	8000288 <__aeabi_dsub>
 80095de:	4603      	mov	r3, r0
 80095e0:	460c      	mov	r4, r1
 80095e2:	461d      	mov	r5, r3
 80095e4:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80095f2:	461a      	mov	r2, r3
 80095f4:	4623      	mov	r3, r4
 80095f6:	f7f6 fe47 	bl	8000288 <__aeabi_dsub>
 80095fa:	4603      	mov	r3, r0
 80095fc:	460c      	mov	r4, r1
 80095fe:	4698      	mov	r8, r3
 8009600:	46a1      	mov	r9, r4
 8009602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009606:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800960a:	f7f6 fe3d 	bl	8000288 <__aeabi_dsub>
 800960e:	4603      	mov	r3, r0
 8009610:	460c      	mov	r4, r1
 8009612:	461a      	mov	r2, r3
 8009614:	4623      	mov	r3, r4
 8009616:	4640      	mov	r0, r8
 8009618:	4649      	mov	r1, r9
 800961a:	f7f6 ffed 	bl	80005f8 <__aeabi_dmul>
 800961e:	4603      	mov	r3, r0
 8009620:	460c      	mov	r4, r1
 8009622:	4698      	mov	r8, r3
 8009624:	46a1      	mov	r9, r4
 8009626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800962a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800962e:	f7f6 fe2b 	bl	8000288 <__aeabi_dsub>
 8009632:	4603      	mov	r3, r0
 8009634:	460c      	mov	r4, r1
 8009636:	461a      	mov	r2, r3
 8009638:	4623      	mov	r3, r4
 800963a:	4640      	mov	r0, r8
 800963c:	4649      	mov	r1, r9
 800963e:	f7f6 ffdb 	bl	80005f8 <__aeabi_dmul>
 8009642:	4603      	mov	r3, r0
 8009644:	460c      	mov	r4, r1
 8009646:	4698      	mov	r8, r3
 8009648:	46a1      	mov	r9, r4
 800964a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	f7f6 fe1b 	bl	800028c <__adddf3>
 8009656:	4603      	mov	r3, r0
 8009658:	460c      	mov	r4, r1
 800965a:	461a      	mov	r2, r3
 800965c:	4623      	mov	r3, r4
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	f7f7 f8f3 	bl	800084c <__aeabi_ddiv>
 8009666:	4603      	mov	r3, r0
 8009668:	460c      	mov	r4, r1
 800966a:	461a      	mov	r2, r3
 800966c:	4623      	mov	r3, r4
 800966e:	4628      	mov	r0, r5
 8009670:	4631      	mov	r1, r6
 8009672:	f7f6 fe09 	bl	8000288 <__aeabi_dsub>
 8009676:	4603      	mov	r3, r0
 8009678:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8009680:	e013      	b.n	80096aa <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	f04f 0300 	mov.w	r3, #0
 8009688:	f04f 0400 	mov.w	r4, #0
 800968c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	f04f 0300 	mov.w	r3, #0
 8009696:	f04f 0400 	mov.w	r4, #0
 800969a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	372c      	adds	r7, #44	; 0x2c
 80096b0:	46bd      	mov	sp, r7
 80096b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096b6:	bf00      	nop
 80096b8:	3fe00000 	.word	0x3fe00000

080096bc <scaraFLowScurve>:
	return SCARA_STATUS_OK;
}


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 80096bc:	b5b0      	push	{r4, r5, r7, lr}
 80096be:	b092      	sub	sp, #72	; 0x48
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6278      	str	r0, [r7, #36]	; 0x24
 80096c4:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80096ce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80096d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80096e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	f040 8321 	bne.w	8009d34 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 80096f2:	f04f 0200 	mov.w	r2, #0
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096fe:	f7f7 fa01 	bl	8000b04 <__aeabi_dcmpge>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d059      	beq.n	80097bc <scaraFLowScurve+0x100>
 8009708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800970c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009710:	f7f7 f9e4 	bl	8000adc <__aeabi_dcmplt>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d050      	beq.n	80097bc <scaraFLowScurve+0x100>
			 t = time;
 800971a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800971e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009726:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800972a:	f7f6 ff65 	bl	80005f8 <__aeabi_dmul>
 800972e:	4603      	mov	r3, r0
 8009730:	460c      	mov	r4, r1
 8009732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009734:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009738:	f04f 0200 	mov.w	r2, #0
 800973c:	4b93      	ldr	r3, [pc, #588]	; (800998c <scaraFLowScurve+0x2d0>)
 800973e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009742:	f7f6 ff59 	bl	80005f8 <__aeabi_dmul>
 8009746:	4603      	mov	r3, r0
 8009748:	460c      	mov	r4, r1
 800974a:	4618      	mov	r0, r3
 800974c:	4621      	mov	r1, r4
 800974e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	4603      	mov	r3, r0
 8009758:	460c      	mov	r4, r1
 800975a:	4618      	mov	r0, r3
 800975c:	4621      	mov	r1, r4
 800975e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009762:	f7f6 ff49 	bl	80005f8 <__aeabi_dmul>
 8009766:	4603      	mov	r3, r0
 8009768:	460c      	mov	r4, r1
 800976a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800976c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009770:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009774:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009778:	f7f6 ff3e 	bl	80005f8 <__aeabi_dmul>
 800977c:	4603      	mov	r3, r0
 800977e:	460c      	mov	r4, r1
 8009780:	4618      	mov	r0, r3
 8009782:	4621      	mov	r1, r4
 8009784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009788:	f7f6 ff36 	bl	80005f8 <__aeabi_dmul>
 800978c:	4603      	mov	r3, r0
 800978e:	460c      	mov	r4, r1
 8009790:	4618      	mov	r0, r3
 8009792:	4621      	mov	r1, r4
 8009794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009798:	f7f6 ff2e 	bl	80005f8 <__aeabi_dmul>
 800979c:	4603      	mov	r3, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	4618      	mov	r0, r3
 80097a2:	4621      	mov	r1, r4
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	4b79      	ldr	r3, [pc, #484]	; (8009990 <scaraFLowScurve+0x2d4>)
 80097aa:	f7f7 f84f 	bl	800084c <__aeabi_ddiv>
 80097ae:	4603      	mov	r3, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80097b8:	f000 be56 	b.w	800a468 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80097bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80097c4:	f7f7 f994 	bl	8000af0 <__aeabi_dcmple>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 80e2 	beq.w	8009994 <scaraFLowScurve+0x2d8>
 80097d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	f7f6 fd58 	bl	800028c <__adddf3>
 80097dc:	4603      	mov	r3, r0
 80097de:	460c      	mov	r4, r1
 80097e0:	461a      	mov	r2, r3
 80097e2:	4623      	mov	r3, r4
 80097e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097e8:	f7f7 f978 	bl	8000adc <__aeabi_dcmplt>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 80d0 	beq.w	8009994 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 80097f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097fc:	f7f6 fd44 	bl	8000288 <__aeabi_dsub>
 8009800:	4603      	mov	r3, r0
 8009802:	460c      	mov	r4, r1
 8009804:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800980c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009810:	f7f6 fef2 	bl	80005f8 <__aeabi_dmul>
 8009814:	4603      	mov	r3, r0
 8009816:	460c      	mov	r4, r1
 8009818:	4625      	mov	r5, r4
 800981a:	461c      	mov	r4, r3
 800981c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009820:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009824:	f7f6 fee8 	bl	80005f8 <__aeabi_dmul>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4620      	mov	r0, r4
 800982e:	4629      	mov	r1, r5
 8009830:	f7f6 fd2a 	bl	8000288 <__aeabi_dsub>
 8009834:	4603      	mov	r3, r0
 8009836:	460c      	mov	r4, r1
 8009838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009844:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009848:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800984c:	f7f6 fed4 	bl	80005f8 <__aeabi_dmul>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	4610      	mov	r0, r2
 8009856:	4619      	mov	r1, r3
 8009858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800985c:	f7f6 fecc 	bl	80005f8 <__aeabi_dmul>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fd10 	bl	800028c <__adddf3>
 800986c:	4603      	mov	r3, r0
 800986e:	460c      	mov	r4, r1
 8009870:	4625      	mov	r5, r4
 8009872:	461c      	mov	r4, r3
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	4b44      	ldr	r3, [pc, #272]	; (800998c <scaraFLowScurve+0x2d0>)
 800987a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800987e:	f7f6 febb 	bl	80005f8 <__aeabi_dmul>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4610      	mov	r0, r2
 8009888:	4619      	mov	r1, r3
 800988a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800988e:	f7f6 feb3 	bl	80005f8 <__aeabi_dmul>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4610      	mov	r0, r2
 8009898:	4619      	mov	r1, r3
 800989a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800989e:	f7f6 feab 	bl	80005f8 <__aeabi_dmul>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f6 fced 	bl	8000288 <__aeabi_dsub>
 80098ae:	4603      	mov	r3, r0
 80098b0:	460c      	mov	r4, r1
 80098b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b4:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80098c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098c8:	f7f6 fe96 	bl	80005f8 <__aeabi_dmul>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4620      	mov	r0, r4
 80098d2:	4629      	mov	r1, r5
 80098d4:	f7f6 fcda 	bl	800028c <__adddf3>
 80098d8:	4603      	mov	r3, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	4625      	mov	r5, r4
 80098de:	461c      	mov	r4, r3
 80098e0:	f04f 0200 	mov.w	r2, #0
 80098e4:	4b29      	ldr	r3, [pc, #164]	; (800998c <scaraFLowScurve+0x2d0>)
 80098e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4610      	mov	r0, r2
 80098f4:	4619      	mov	r1, r3
 80098f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098fa:	f7f6 fe7d 	bl	80005f8 <__aeabi_dmul>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4610      	mov	r0, r2
 8009904:	4619      	mov	r1, r3
 8009906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800990a:	f7f6 fe75 	bl	80005f8 <__aeabi_dmul>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4610      	mov	r0, r2
 8009914:	4619      	mov	r1, r3
 8009916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800991a:	f7f6 fe6d 	bl	80005f8 <__aeabi_dmul>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4620      	mov	r0, r4
 8009924:	4629      	mov	r1, r5
 8009926:	f7f6 fcb1 	bl	800028c <__adddf3>
 800992a:	4603      	mov	r3, r0
 800992c:	460c      	mov	r4, r1
 800992e:	4625      	mov	r5, r4
 8009930:	461c      	mov	r4, r3
 8009932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009936:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800993a:	f7f6 fe5d 	bl	80005f8 <__aeabi_dmul>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4610      	mov	r0, r2
 8009944:	4619      	mov	r1, r3
 8009946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800994a:	f7f6 fe55 	bl	80005f8 <__aeabi_dmul>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4610      	mov	r0, r2
 8009954:	4619      	mov	r1, r3
 8009956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800995a:	f7f6 fe4d 	bl	80005f8 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4610      	mov	r0, r2
 8009964:	4619      	mov	r1, r3
 8009966:	f04f 0200 	mov.w	r2, #0
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <scaraFLowScurve+0x2d4>)
 800996c:	f7f6 ff6e 	bl	800084c <__aeabi_ddiv>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f6 fc86 	bl	8000288 <__aeabi_dsub>
 800997c:	4603      	mov	r3, r0
 800997e:	460c      	mov	r4, r1
 8009980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009982:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009986:	f000 bd6f 	b.w	800a468 <scaraFLowScurve+0xdac>
 800998a:	bf00      	nop
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8009994:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	f7f6 fc76 	bl	800028c <__adddf3>
 80099a0:	4603      	mov	r3, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	461a      	mov	r2, r3
 80099a6:	4623      	mov	r3, r4
 80099a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099ac:	f7f7 f8aa 	bl	8000b04 <__aeabi_dcmpge>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 80a2 	beq.w	8009afc <scaraFLowScurve+0x440>
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	4b4c      	ldr	r3, [pc, #304]	; (8009af0 <scaraFLowScurve+0x434>)
 80099be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80099c2:	f7f6 fe19 	bl	80005f8 <__aeabi_dmul>
 80099c6:	4603      	mov	r3, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	461a      	mov	r2, r3
 80099cc:	4623      	mov	r3, r4
 80099ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099d2:	f7f7 f883 	bl	8000adc <__aeabi_dcmplt>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 808f 	beq.w	8009afc <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 80099de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	f7f6 fc51 	bl	800028c <__adddf3>
 80099ea:	4603      	mov	r3, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	461a      	mov	r2, r3
 80099f0:	4623      	mov	r3, r4
 80099f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099f6:	f7f6 fc47 	bl	8000288 <__aeabi_dsub>
 80099fa:	4603      	mov	r3, r0
 80099fc:	460c      	mov	r4, r1
 80099fe:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a04:	613b      	str	r3, [r7, #16]
 8009a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009a16:	f7f6 fdef 	bl	80005f8 <__aeabi_dmul>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a20:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8009a2a:	f04f 0200 	mov.w	r2, #0
 8009a2e:	4b31      	ldr	r3, [pc, #196]	; (8009af4 <scaraFLowScurve+0x438>)
 8009a30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a34:	f7f6 fde0 	bl	80005f8 <__aeabi_dmul>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	4619      	mov	r1, r3
 8009a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a44:	f7f6 fdd8 	bl	80005f8 <__aeabi_dmul>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4619      	mov	r1, r3
 8009a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fc12 	bl	8000288 <__aeabi_dsub>
 8009a64:	4603      	mov	r3, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a76:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a7e:	f7f6 fdbb 	bl	80005f8 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f6 fbff 	bl	800028c <__adddf3>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	460c      	mov	r4, r1
 8009a92:	4625      	mov	r5, r4
 8009a94:	461c      	mov	r4, r3
 8009a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a9a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a9e:	f7f6 fdab 	bl	80005f8 <__aeabi_dmul>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009aae:	f7f6 fda3 	bl	80005f8 <__aeabi_dmul>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	4619      	mov	r1, r3
 8009aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009abe:	f7f6 fd9b 	bl	80005f8 <__aeabi_dmul>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f04f 0200 	mov.w	r2, #0
 8009ace:	4b0a      	ldr	r3, [pc, #40]	; (8009af8 <scaraFLowScurve+0x43c>)
 8009ad0:	f7f6 febc 	bl	800084c <__aeabi_ddiv>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4620      	mov	r0, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	f7f6 fbd4 	bl	8000288 <__aeabi_dsub>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009aea:	f000 bcbd 	b.w	800a468 <scaraFLowScurve+0xdac>
 8009aee:	bf00      	nop
 8009af0:	40080000 	.word	0x40080000
 8009af4:	3fe00000 	.word	0x3fe00000
 8009af8:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8009afc:	f04f 0200 	mov.w	r2, #0
 8009b00:	4b88      	ldr	r3, [pc, #544]	; (8009d24 <scaraFLowScurve+0x668>)
 8009b02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b06:	f7f6 fd77 	bl	80005f8 <__aeabi_dmul>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	461a      	mov	r2, r3
 8009b10:	4623      	mov	r3, r4
 8009b12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b16:	f7f6 fff5 	bl	8000b04 <__aeabi_dcmpge>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 80ec 	beq.w	8009cfa <scaraFLowScurve+0x63e>
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	4b80      	ldr	r3, [pc, #512]	; (8009d28 <scaraFLowScurve+0x66c>)
 8009b28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b2c:	f7f6 fd64 	bl	80005f8 <__aeabi_dmul>
 8009b30:	4603      	mov	r3, r0
 8009b32:	460c      	mov	r4, r1
 8009b34:	461a      	mov	r2, r3
 8009b36:	4623      	mov	r3, r4
 8009b38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b3c:	f7f6 ffce 	bl	8000adc <__aeabi_dcmplt>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 80d9 	beq.w	8009cfa <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8009b48:	f04f 0200 	mov.w	r2, #0
 8009b4c:	4b75      	ldr	r3, [pc, #468]	; (8009d24 <scaraFLowScurve+0x668>)
 8009b4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b52:	f7f6 fd51 	bl	80005f8 <__aeabi_dmul>
 8009b56:	4603      	mov	r3, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b62:	f7f6 fb91 	bl	8000288 <__aeabi_dsub>
 8009b66:	4603      	mov	r3, r0
 8009b68:	460c      	mov	r4, r1
 8009b6a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b70:	60bb      	str	r3, [r7, #8]
 8009b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b82:	f7f6 fd39 	bl	80005f8 <__aeabi_dmul>
 8009b86:	4603      	mov	r3, r0
 8009b88:	460c      	mov	r4, r1
 8009b8a:	4625      	mov	r5, r4
 8009b8c:	461c      	mov	r4, r3
 8009b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b92:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b96:	f7f6 fd2f 	bl	80005f8 <__aeabi_dmul>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	f7f6 fb73 	bl	800028c <__adddf3>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bac:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009bb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009bba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009bbe:	f7f6 fd1b 	bl	80005f8 <__aeabi_dmul>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	4619      	mov	r1, r3
 8009bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	f7f6 fb55 	bl	8000288 <__aeabi_dsub>
 8009bde:	4603      	mov	r3, r0
 8009be0:	460c      	mov	r4, r1
 8009be2:	4625      	mov	r5, r4
 8009be4:	461c      	mov	r4, r3
 8009be6:	f04f 0200 	mov.w	r2, #0
 8009bea:	4b50      	ldr	r3, [pc, #320]	; (8009d2c <scaraFLowScurve+0x670>)
 8009bec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4610      	mov	r0, r2
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c10:	f7f6 fcf2 	bl	80005f8 <__aeabi_dmul>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4620      	mov	r0, r4
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	f7f6 fb36 	bl	800028c <__adddf3>
 8009c20:	4603      	mov	r3, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c26:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009c36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c3a:	f7f6 fcdd 	bl	80005f8 <__aeabi_dmul>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4620      	mov	r0, r4
 8009c44:	4629      	mov	r1, r5
 8009c46:	f7f6 fb21 	bl	800028c <__adddf3>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	4625      	mov	r5, r4
 8009c50:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <scaraFLowScurve+0x670>)
 8009c58:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c5c:	f7f6 fccc 	bl	80005f8 <__aeabi_dmul>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4610      	mov	r0, r2
 8009c66:	4619      	mov	r1, r3
 8009c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4610      	mov	r0, r2
 8009c76:	4619      	mov	r1, r3
 8009c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c7c:	f7f6 fcbc 	bl	80005f8 <__aeabi_dmul>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4610      	mov	r0, r2
 8009c86:	4619      	mov	r1, r3
 8009c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c8c:	f7f6 fcb4 	bl	80005f8 <__aeabi_dmul>
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	4620      	mov	r0, r4
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7f6 faf6 	bl	8000288 <__aeabi_dsub>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	4625      	mov	r5, r4
 8009ca2:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8009ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ca8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009cac:	f7f6 fca4 	bl	80005f8 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cbc:	f7f6 fc9c 	bl	80005f8 <__aeabi_dmul>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ccc:	f7f6 fc94 	bl	80005f8 <__aeabi_dmul>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	f04f 0200 	mov.w	r2, #0
 8009cdc:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <scaraFLowScurve+0x674>)
 8009cde:	f7f6 fdb5 	bl	800084c <__aeabi_ddiv>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	4629      	mov	r1, r5
 8009cea:	f7f6 facf 	bl	800028c <__adddf3>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009cf8:	e3b6      	b.n	800a468 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8009cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfc:	f04f 0300 	mov.w	r3, #0
 8009d00:	f04f 0400 	mov.w	r4, #0
 8009d04:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0a:	f04f 0300 	mov.w	r3, #0
 8009d0e:	f04f 0400 	mov.w	r4, #0
 8009d12:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8009d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009d22:	e3a1      	b.n	800a468 <scaraFLowScurve+0xdac>
 8009d24:	40080000 	.word	0x40080000
 8009d28:	40100000 	.word	0x40100000
 8009d2c:	3fe00000 	.word	0x3fe00000
 8009d30:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d3a:	2b05      	cmp	r3, #5
 8009d3c:	f040 8392 	bne.w	800a464 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d4c:	f7f6 feda 	bl	8000b04 <__aeabi_dcmpge>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d058      	beq.n	8009e08 <scaraFLowScurve+0x74c>
 8009d56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d5e:	f7f6 febd 	bl	8000adc <__aeabi_dcmplt>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d04f      	beq.n	8009e08 <scaraFLowScurve+0x74c>
			 t = time;
 8009d68:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009d6c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d74:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d78:	f7f6 fc3e 	bl	80005f8 <__aeabi_dmul>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d82:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009d86:	f04f 0200 	mov.w	r2, #0
 8009d8a:	4b91      	ldr	r3, [pc, #580]	; (8009fd0 <scaraFLowScurve+0x914>)
 8009d8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009d90:	f7f6 fc32 	bl	80005f8 <__aeabi_dmul>
 8009d94:	4603      	mov	r3, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	4618      	mov	r0, r3
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009da0:	f7f6 fc2a 	bl	80005f8 <__aeabi_dmul>
 8009da4:	4603      	mov	r3, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	4618      	mov	r0, r3
 8009daa:	4621      	mov	r1, r4
 8009dac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009db0:	f7f6 fc22 	bl	80005f8 <__aeabi_dmul>
 8009db4:	4603      	mov	r3, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dba:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dc2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009dc6:	f7f6 fc17 	bl	80005f8 <__aeabi_dmul>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	460c      	mov	r4, r1
 8009dce:	4618      	mov	r0, r3
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dd6:	f7f6 fc0f 	bl	80005f8 <__aeabi_dmul>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	460c      	mov	r4, r1
 8009dde:	4618      	mov	r0, r3
 8009de0:	4621      	mov	r1, r4
 8009de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009de6:	f7f6 fc07 	bl	80005f8 <__aeabi_dmul>
 8009dea:	4603      	mov	r3, r0
 8009dec:	460c      	mov	r4, r1
 8009dee:	4618      	mov	r0, r3
 8009df0:	4621      	mov	r1, r4
 8009df2:	f04f 0200 	mov.w	r2, #0
 8009df6:	4b77      	ldr	r3, [pc, #476]	; (8009fd4 <scaraFLowScurve+0x918>)
 8009df8:	f7f6 fd28 	bl	800084c <__aeabi_ddiv>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e02:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009e06:	e32f      	b.n	800a468 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009e10:	f7f6 fe6e 	bl	8000af0 <__aeabi_dcmple>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 80de 	beq.w	8009fd8 <scaraFLowScurve+0x91c>
 8009e1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	f7f6 fa32 	bl	800028c <__adddf3>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009e30:	f7f6 fe54 	bl	8000adc <__aeabi_dcmplt>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80ce 	beq.w	8009fd8 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8009e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009e44:	f7f6 fa20 	bl	8000288 <__aeabi_dsub>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009e50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	4625      	mov	r5, r4
 8009e62:	461c      	mov	r4, r3
 8009e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e68:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e6c:	f7f6 fbc4 	bl	80005f8 <__aeabi_dmul>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	f7f6 fa06 	bl	8000288 <__aeabi_dsub>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e82:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e94:	f7f6 fbb0 	bl	80005f8 <__aeabi_dmul>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ea4:	f7f6 fba8 	bl	80005f8 <__aeabi_dmul>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 f9ec 	bl	800028c <__adddf3>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	4625      	mov	r5, r4
 8009eba:	461c      	mov	r4, r3
 8009ebc:	f04f 0200 	mov.w	r2, #0
 8009ec0:	4b43      	ldr	r3, [pc, #268]	; (8009fd0 <scaraFLowScurve+0x914>)
 8009ec2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ec6:	f7f6 fb97 	bl	80005f8 <__aeabi_dmul>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4610      	mov	r0, r2
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ed6:	f7f6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ee6:	f7f6 fb87 	bl	80005f8 <__aeabi_dmul>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4620      	mov	r0, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	f7f6 f9c9 	bl	8000288 <__aeabi_dsub>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	460c      	mov	r4, r1
 8009efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efc:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f10:	f7f6 fb72 	bl	80005f8 <__aeabi_dmul>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4620      	mov	r0, r4
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	f7f6 f9b6 	bl	800028c <__adddf3>
 8009f20:	4603      	mov	r3, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	4625      	mov	r5, r4
 8009f26:	461c      	mov	r4, r3
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	4b28      	ldr	r3, [pc, #160]	; (8009fd0 <scaraFLowScurve+0x914>)
 8009f2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f32:	f7f6 fb61 	bl	80005f8 <__aeabi_dmul>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f42:	f7f6 fb59 	bl	80005f8 <__aeabi_dmul>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f52:	f7f6 fb51 	bl	80005f8 <__aeabi_dmul>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f62:	f7f6 fb49 	bl	80005f8 <__aeabi_dmul>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7f6 f98d 	bl	800028c <__adddf3>
 8009f72:	4603      	mov	r3, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	4625      	mov	r5, r4
 8009f78:	461c      	mov	r4, r3
 8009f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f82:	f7f6 fb39 	bl	80005f8 <__aeabi_dmul>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f92:	f7f6 fb31 	bl	80005f8 <__aeabi_dmul>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fa2:	f7f6 fb29 	bl	80005f8 <__aeabi_dmul>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4610      	mov	r0, r2
 8009fac:	4619      	mov	r1, r3
 8009fae:	f04f 0200 	mov.w	r2, #0
 8009fb2:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <scaraFLowScurve+0x918>)
 8009fb4:	f7f6 fc4a 	bl	800084c <__aeabi_ddiv>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	f7f6 f962 	bl	8000288 <__aeabi_dsub>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fca:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009fce:	e24b      	b.n	800a468 <scaraFLowScurve+0xdac>
 8009fd0:	3fe00000 	.word	0x3fe00000
 8009fd4:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8009fd8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	f7f6 f954 	bl	800028c <__adddf3>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009fec:	f7f6 fd8a 	bl	8000b04 <__aeabi_dcmpge>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d04b      	beq.n	800a08e <scaraFLowScurve+0x9d2>
 8009ff6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	f7f6 f945 	bl	800028c <__adddf3>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4610      	mov	r0, r2
 800a008:	4619      	mov	r1, r3
 800a00a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a00e:	f7f6 f93d 	bl	800028c <__adddf3>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a01a:	f7f6 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d034      	beq.n	800a08e <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 800a024:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	f7f6 f92e 	bl	800028c <__adddf3>
 800a030:	4603      	mov	r3, r0
 800a032:	460c      	mov	r4, r1
 800a034:	461a      	mov	r2, r3
 800a036:	4623      	mov	r3, r4
 800a038:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a03c:	f7f6 f924 	bl	8000288 <__aeabi_dsub>
 800a040:	4603      	mov	r3, r0
 800a042:	460c      	mov	r4, r1
 800a044:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 800a048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	f04f 0400 	mov.w	r4, #0
 800a052:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800a05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800a06e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a072:	f7f6 fac1 	bl	80005f8 <__aeabi_dmul>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	4620      	mov	r0, r4
 800a07c:	4629      	mov	r1, r5
 800a07e:	f7f6 f905 	bl	800028c <__adddf3>
 800a082:	4603      	mov	r3, r0
 800a084:	460c      	mov	r4, r1
 800a086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a088:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a08c:	e1ec      	b.n	800a468 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 800a08e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	f7f6 f8f9 	bl	800028c <__adddf3>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4610      	mov	r0, r2
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a0a6:	f7f6 f8f1 	bl	800028c <__adddf3>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a0b2:	f7f6 fd27 	bl	8000b04 <__aeabi_dcmpge>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 80af 	beq.w	800a21c <scaraFLowScurve+0xb60>
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	4b53      	ldr	r3, [pc, #332]	; (800a210 <scaraFLowScurve+0xb54>)
 800a0c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a0c8:	f7f6 fa96 	bl	80005f8 <__aeabi_dmul>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a0d8:	f7f6 f8d8 	bl	800028c <__adddf3>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a0e4:	f7f6 fcfa 	bl	8000adc <__aeabi_dcmplt>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 8096 	beq.w	800a21c <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 800a0f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	f7f6 f8c8 	bl	800028c <__adddf3>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	4618      	mov	r0, r3
 800a102:	4621      	mov	r1, r4
 800a104:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a108:	f7f6 f8c0 	bl	800028c <__adddf3>
 800a10c:	4603      	mov	r3, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	461a      	mov	r2, r3
 800a112:	4623      	mov	r3, r4
 800a114:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a118:	f7f6 f8b6 	bl	8000288 <__aeabi_dsub>
 800a11c:	4603      	mov	r3, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 800a124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a126:	603b      	str	r3, [r7, #0]
 800a128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a12a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a12e:	607b      	str	r3, [r7, #4]
 800a130:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a134:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a138:	f7f6 fa5e 	bl	80005f8 <__aeabi_dmul>
 800a13c:	4603      	mov	r3, r0
 800a13e:	460c      	mov	r4, r1
 800a140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a142:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 800a14c:	f04f 0200 	mov.w	r2, #0
 800a150:	4b30      	ldr	r3, [pc, #192]	; (800a214 <scaraFLowScurve+0xb58>)
 800a152:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a156:	f7f6 fa4f 	bl	80005f8 <__aeabi_dmul>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4610      	mov	r0, r2
 800a160:	4619      	mov	r1, r3
 800a162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a166:	f7f6 fa47 	bl	80005f8 <__aeabi_dmul>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4610      	mov	r0, r2
 800a170:	4619      	mov	r1, r3
 800a172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a176:	f7f6 fa3f 	bl	80005f8 <__aeabi_dmul>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 f881 	bl	8000288 <__aeabi_dsub>
 800a186:	4603      	mov	r3, r0
 800a188:	460c      	mov	r4, r1
 800a18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 800a19c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1a0:	f7f6 fa2a 	bl	80005f8 <__aeabi_dmul>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	f7f6 f86e 	bl	800028c <__adddf3>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	4625      	mov	r5, r4
 800a1b6:	461c      	mov	r4, r3
 800a1b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a1c0:	f7f6 fa1a 	bl	80005f8 <__aeabi_dmul>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1d0:	f7f6 fa12 	bl	80005f8 <__aeabi_dmul>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4610      	mov	r0, r2
 800a1da:	4619      	mov	r1, r3
 800a1dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1e0:	f7f6 fa0a 	bl	80005f8 <__aeabi_dmul>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	4b09      	ldr	r3, [pc, #36]	; (800a218 <scaraFLowScurve+0xb5c>)
 800a1f2:	f7f6 fb2b 	bl	800084c <__aeabi_ddiv>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	f7f6 f843 	bl	8000288 <__aeabi_dsub>
 800a202:	4603      	mov	r3, r0
 800a204:	460c      	mov	r4, r1
 800a206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a208:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a20c:	e12c      	b.n	800a468 <scaraFLowScurve+0xdac>
 800a20e:	bf00      	nop
 800a210:	40080000 	.word	0x40080000
 800a214:	3fe00000 	.word	0x3fe00000
 800a218:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 800a21c:	f04f 0200 	mov.w	r2, #0
 800a220:	4b94      	ldr	r3, [pc, #592]	; (800a474 <scaraFLowScurve+0xdb8>)
 800a222:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a226:	f7f6 f9e7 	bl	80005f8 <__aeabi_dmul>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	4610      	mov	r0, r2
 800a230:	4619      	mov	r1, r3
 800a232:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a236:	f7f6 f829 	bl	800028c <__adddf3>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a242:	f7f6 fc5f 	bl	8000b04 <__aeabi_dcmpge>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80f6 	beq.w	800a43a <scaraFLowScurve+0xd7e>
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	4b89      	ldr	r3, [pc, #548]	; (800a478 <scaraFLowScurve+0xdbc>)
 800a254:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a258:	f7f6 f9ce 	bl	80005f8 <__aeabi_dmul>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4610      	mov	r0, r2
 800a262:	4619      	mov	r1, r3
 800a264:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a268:	f7f6 f810 	bl	800028c <__adddf3>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a274:	f7f6 fc32 	bl	8000adc <__aeabi_dcmplt>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 80dd 	beq.w	800a43a <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 800a280:	f04f 0200 	mov.w	r2, #0
 800a284:	4b7b      	ldr	r3, [pc, #492]	; (800a474 <scaraFLowScurve+0xdb8>)
 800a286:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a28a:	f7f6 f9b5 	bl	80005f8 <__aeabi_dmul>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4610      	mov	r0, r2
 800a294:	4619      	mov	r1, r3
 800a296:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a29a:	f7f5 fff7 	bl	800028c <__adddf3>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a2a6:	f7f5 ffef 	bl	8000288 <__aeabi_dsub>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800a2b2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800a2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a2ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7f6 f999 	bl	80005f8 <__aeabi_dmul>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	4625      	mov	r5, r4
 800a2cc:	461c      	mov	r4, r3
 800a2ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a2d6:	f7f6 f98f 	bl	80005f8 <__aeabi_dmul>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4620      	mov	r0, r4
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	f7f5 ffd3 	bl	800028c <__adddf3>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ec:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 800a2f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a2fe:	f7f6 f97b 	bl	80005f8 <__aeabi_dmul>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4610      	mov	r0, r2
 800a308:	4619      	mov	r1, r3
 800a30a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a30e:	f7f6 f973 	bl	80005f8 <__aeabi_dmul>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4620      	mov	r0, r4
 800a318:	4629      	mov	r1, r5
 800a31a:	f7f5 ffb5 	bl	8000288 <__aeabi_dsub>
 800a31e:	4603      	mov	r3, r0
 800a320:	460c      	mov	r4, r1
 800a322:	4625      	mov	r5, r4
 800a324:	461c      	mov	r4, r3
 800a326:	f04f 0200 	mov.w	r2, #0
 800a32a:	4b54      	ldr	r3, [pc, #336]	; (800a47c <scaraFLowScurve+0xdc0>)
 800a32c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a330:	f7f6 f962 	bl	80005f8 <__aeabi_dmul>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4610      	mov	r0, r2
 800a33a:	4619      	mov	r1, r3
 800a33c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a340:	f7f6 f95a 	bl	80005f8 <__aeabi_dmul>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4610      	mov	r0, r2
 800a34a:	4619      	mov	r1, r3
 800a34c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a350:	f7f6 f952 	bl	80005f8 <__aeabi_dmul>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f5 ff96 	bl	800028c <__adddf3>
 800a360:	4603      	mov	r3, r0
 800a362:	460c      	mov	r4, r1
 800a364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a366:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800a376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a37a:	f7f6 f93d 	bl	80005f8 <__aeabi_dmul>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4620      	mov	r0, r4
 800a384:	4629      	mov	r1, r5
 800a386:	f7f5 ff81 	bl	800028c <__adddf3>
 800a38a:	4603      	mov	r3, r0
 800a38c:	460c      	mov	r4, r1
 800a38e:	4625      	mov	r5, r4
 800a390:	461c      	mov	r4, r3
 800a392:	f04f 0200 	mov.w	r2, #0
 800a396:	4b39      	ldr	r3, [pc, #228]	; (800a47c <scaraFLowScurve+0xdc0>)
 800a398:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a39c:	f7f6 f92c 	bl	80005f8 <__aeabi_dmul>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a3ac:	f7f6 f924 	bl	80005f8 <__aeabi_dmul>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3bc:	f7f6 f91c 	bl	80005f8 <__aeabi_dmul>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3cc:	f7f6 f914 	bl	80005f8 <__aeabi_dmul>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f5 ff56 	bl	8000288 <__aeabi_dsub>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	4625      	mov	r5, r4
 800a3e2:	461c      	mov	r4, r3
 800a3e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a3ec:	f7f6 f904 	bl	80005f8 <__aeabi_dmul>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3fc:	f7f6 f8fc 	bl	80005f8 <__aeabi_dmul>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4610      	mov	r0, r2
 800a406:	4619      	mov	r1, r3
 800a408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a40c:	f7f6 f8f4 	bl	80005f8 <__aeabi_dmul>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4610      	mov	r0, r2
 800a416:	4619      	mov	r1, r3
 800a418:	f04f 0200 	mov.w	r2, #0
 800a41c:	4b18      	ldr	r3, [pc, #96]	; (800a480 <scaraFLowScurve+0xdc4>)
 800a41e:	f7f6 fa15 	bl	800084c <__aeabi_ddiv>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4620      	mov	r0, r4
 800a428:	4629      	mov	r1, r5
 800a42a:	f7f5 ff2f 	bl	800028c <__adddf3>
 800a42e:	4603      	mov	r3, r0
 800a430:	460c      	mov	r4, r1
 800a432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a434:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a438:	e016      	b.n	800a468 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800a43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a43c:	f04f 0300 	mov.w	r3, #0
 800a440:	f04f 0400 	mov.w	r4, #0
 800a444:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 800a448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44a:	f04f 0300 	mov.w	r3, #0
 800a44e:	f04f 0400 	mov.w	r4, #0
 800a452:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800a462:	e001      	b.n	800a468 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e000      	b.n	800a46a <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3748      	adds	r7, #72	; 0x48
 800a46e:	46bd      	mov	sp, r7
 800a470:	bdb0      	pop	{r4, r5, r7, pc}
 800a472:	bf00      	nop
 800a474:	40080000 	.word	0x40080000
 800a478:	40100000 	.word	0x40100000
 800a47c:	3fe00000 	.word	0x3fe00000
 800a480:	40180000 	.word	0x40180000
 800a484:	00000000 	.word	0x00000000

0800a488 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	ed87 0b06 	vstr	d0, [r7, #24]
 800a492:	ed87 1b04 	vstr	d1, [r7, #16]
 800a496:	ed87 2b02 	vstr	d2, [r7, #8]
 800a49a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a49e:	a335      	add	r3, pc, #212	; (adr r3, 800a574 <scaraCheckWorkSpace4+0xec>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a4a8:	f7f6 fb18 	bl	8000adc <__aeabi_dcmplt>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <scaraCheckWorkSpace4+0x3e>
 800a4b2:	a332      	add	r3, pc, #200	; (adr r3, 800a57c <scaraCheckWorkSpace4+0xf4>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a4bc:	f7f6 fb2c 	bl	8000b18 <__aeabi_dcmpgt>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4c6:	2307      	movs	r3, #7
 800a4c8:	e043      	b.n	800a552 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a4ca:	a32e      	add	r3, pc, #184	; (adr r3, 800a584 <scaraCheckWorkSpace4+0xfc>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a4d4:	f7f6 fb02 	bl	8000adc <__aeabi_dcmplt>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d109      	bne.n	800a4f2 <scaraCheckWorkSpace4+0x6a>
 800a4de:	a32b      	add	r3, pc, #172	; (adr r3, 800a58c <scaraCheckWorkSpace4+0x104>)
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a4e8:	f7f6 fb16 	bl	8000b18 <__aeabi_dcmpgt>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4f2:	2307      	movs	r3, #7
 800a4f4:	e02d      	b.n	800a552 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a4f6:	f04f 0200 	mov.w	r2, #0
 800a4fa:	f04f 0300 	mov.w	r3, #0
 800a4fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a502:	f7f6 faeb 	bl	8000adc <__aeabi_dcmplt>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d109      	bne.n	800a520 <scaraCheckWorkSpace4+0x98>
 800a50c:	f04f 0200 	mov.w	r2, #0
 800a510:	4b17      	ldr	r3, [pc, #92]	; (800a570 <scaraCheckWorkSpace4+0xe8>)
 800a512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a516:	f7f6 faff 	bl	8000b18 <__aeabi_dcmpgt>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a520:	2307      	movs	r3, #7
 800a522:	e016      	b.n	800a552 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a524:	a30e      	add	r3, pc, #56	; (adr r3, 800a560 <scaraCheckWorkSpace4+0xd8>)
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a52e:	f7f6 fad5 	bl	8000adc <__aeabi_dcmplt>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d109      	bne.n	800a54c <scaraCheckWorkSpace4+0xc4>
 800a538:	a30b      	add	r3, pc, #44	; (adr r3, 800a568 <scaraCheckWorkSpace4+0xe0>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a542:	f7f6 fae9 	bl	8000b18 <__aeabi_dcmpgt>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a54c:	2307      	movs	r3, #7
 800a54e:	e000      	b.n	800a552 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3720      	adds	r7, #32
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w
 800a560:	a7777778 	.word	0xa7777778
 800a564:	c0088956 	.word	0xc0088956
 800a568:	a7777778 	.word	0xa7777778
 800a56c:	40088956 	.word	0x40088956
 800a570:	40590000 	.word	0x40590000
 800a574:	74444445 	.word	0x74444445
 800a578:	bff95623 	.word	0xbff95623
 800a57c:	74444445 	.word	0x74444445
 800a580:	3ff95623 	.word	0x3ff95623
 800a584:	54cccccd 	.word	0x54cccccd
 800a588:	c003a649 	.word	0xc003a649
 800a58c:	54cccccd 	.word	0x54cccccd
 800a590:	4003a649 	.word	0x4003a649
 800a594:	00000000 	.word	0x00000000

0800a598 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	ed87 0b00 	vstr	d0, [r7]
 800a5a4:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d117      	bne.n	800a5dc <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a5ac:	a33d      	add	r3, pc, #244	; (adr r3, 800a6a4 <scaraCheckWorkSpace1+0x10c>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5b6:	f7f6 faa5 	bl	8000b04 <__aeabi_dcmpge>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00b      	beq.n	800a5d8 <scaraCheckWorkSpace1+0x40>
 800a5c0:	a33a      	add	r3, pc, #232	; (adr r3, 800a6ac <scaraCheckWorkSpace1+0x114>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5ca:	f7f6 fa91 	bl	8000af0 <__aeabi_dcmple>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e054      	b.n	800a682 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a5d8:	2307      	movs	r3, #7
 800a5da:	e052      	b.n	800a682 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d117      	bne.n	800a612 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a5e2:	a334      	add	r3, pc, #208	; (adr r3, 800a6b4 <scaraCheckWorkSpace1+0x11c>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5ec:	f7f6 fa8a 	bl	8000b04 <__aeabi_dcmpge>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00b      	beq.n	800a60e <scaraCheckWorkSpace1+0x76>
 800a5f6:	a331      	add	r3, pc, #196	; (adr r3, 800a6bc <scaraCheckWorkSpace1+0x124>)
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a600:	f7f6 fa76 	bl	8000af0 <__aeabi_dcmple>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e039      	b.n	800a682 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a60e:	2307      	movs	r3, #7
 800a610:	e037      	b.n	800a682 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	2b02      	cmp	r3, #2
 800a616:	d118      	bne.n	800a64a <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a618:	f04f 0200 	mov.w	r2, #0
 800a61c:	f04f 0300 	mov.w	r3, #0
 800a620:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a624:	f7f6 fa6e 	bl	8000b04 <__aeabi_dcmpge>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00b      	beq.n	800a646 <scaraCheckWorkSpace1+0xae>
 800a62e:	f04f 0200 	mov.w	r2, #0
 800a632:	4b1b      	ldr	r3, [pc, #108]	; (800a6a0 <scaraCheckWorkSpace1+0x108>)
 800a634:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a638:	f7f6 fa5a 	bl	8000af0 <__aeabi_dcmple>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	e01d      	b.n	800a682 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a646:	2307      	movs	r3, #7
 800a648:	e01b      	b.n	800a682 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	d117      	bne.n	800a680 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a650:	a30f      	add	r3, pc, #60	; (adr r3, 800a690 <scaraCheckWorkSpace1+0xf8>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a65a:	f7f6 fa53 	bl	8000b04 <__aeabi_dcmpge>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00b      	beq.n	800a67c <scaraCheckWorkSpace1+0xe4>
 800a664:	a30c      	add	r3, pc, #48	; (adr r3, 800a698 <scaraCheckWorkSpace1+0x100>)
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a66e:	f7f6 fa3f 	bl	8000af0 <__aeabi_dcmple>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	e002      	b.n	800a682 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a67c:	2307      	movs	r3, #7
 800a67e:	e000      	b.n	800a682 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a680:	2301      	movs	r3, #1
	}
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	f3af 8000 	nop.w
 800a690:	daaaaaab 	.word	0xdaaaaaab
 800a694:	c007bc89 	.word	0xc007bc89
 800a698:	daaaaaab 	.word	0xdaaaaaab
 800a69c:	4007bc89 	.word	0x4007bc89
 800a6a0:	40590000 	.word	0x40590000
 800a6a4:	daaaaaab 	.word	0xdaaaaaab
 800a6a8:	bff7bc89 	.word	0xbff7bc89
 800a6ac:	daaaaaab 	.word	0xdaaaaaab
 800a6b0:	3ff7bc89 	.word	0x3ff7bc89
 800a6b4:	88000000 	.word	0x88000000
 800a6b8:	c002d97c 	.word	0xc002d97c
 800a6bc:	88000000 	.word	0x88000000
 800a6c0:	4002d97c 	.word	0x4002d97c
 800a6c4:	00000000 	.word	0x00000000

0800a6c8 <scaraTestDuty>:
	}
	return SCARA_STATUS_OK;
}

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a6c8:	b5b0      	push	{r4, r5, r7, lr}
 800a6ca:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a6ce:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a6d0:	f04f 0300 	mov.w	r3, #0
 800a6d4:	f04f 0400 	mov.w	r4, #0
 800a6d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a6dc:	463b      	mov	r3, r7
 800a6de:	4a36      	ldr	r2, [pc, #216]	; (800a7b8 <scaraTestDuty+0xf0>)
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	23c0      	movs	r3, #192	; 0xc0
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f00b fc10 	bl	8015f0c <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a6ec:	4b33      	ldr	r3, [pc, #204]	; (800a7bc <scaraTestDuty+0xf4>)
 800a6ee:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a6f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6f6:	a32e      	add	r3, pc, #184	; (adr r3, 800a7b0 <scaraTestDuty+0xe8>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f7f6 f8a6 	bl	800084c <__aeabi_ddiv>
 800a700:	4603      	mov	r3, r0
 800a702:	460c      	mov	r4, r1
 800a704:	ec44 3b17 	vmov	d7, r3, r4
 800a708:	eeb0 0a47 	vmov.f32	s0, s14
 800a70c:	eef0 0a67 	vmov.f32	s1, s15
 800a710:	f00f f96a 	bl	80199e8 <ceil>
 800a714:	ec54 3b10 	vmov	r3, r4, d0
 800a718:	4618      	mov	r0, r3
 800a71a:	4621      	mov	r1, r4
 800a71c:	f7f6 fa1c 	bl	8000b58 <__aeabi_d2iz>
 800a720:	4603      	mov	r3, r0
 800a722:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a726:	2301      	movs	r3, #1
 800a728:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a72c:	e032      	b.n	800a794 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a72e:	a320      	add	r3, pc, #128	; (adr r3, 800a7b0 <scaraTestDuty+0xe8>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a738:	f7f5 fda8 	bl	800028c <__adddf3>
 800a73c:	4603      	mov	r3, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a744:	463c      	mov	r4, r7
 800a746:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a74a:	4668      	mov	r0, sp
 800a74c:	f104 0308 	add.w	r3, r4, #8
 800a750:	22b8      	movs	r2, #184	; 0xb8
 800a752:	4619      	mov	r1, r3
 800a754:	f00b fbda 	bl	8015f0c <memcpy>
 800a758:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a75c:	4628      	mov	r0, r5
 800a75e:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a762:	f7fe f973 	bl	8008a4c <scaraFlowDuty>
 800a766:	4603      	mov	r3, r0
 800a768:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a76c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <scaraTestDuty+0xb2>
			return status;
 800a774:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a778:	e013      	b.n	800a7a2 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a77a:	463a      	mov	r2, r7
 800a77c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a780:	4611      	mov	r1, r2
 800a782:	22c0      	movs	r2, #192	; 0xc0
 800a784:	4618      	mov	r0, r3
 800a786:	f00b fbc1 	bl	8015f0c <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a78a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a78e:	3301      	adds	r3, #1
 800a790:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a794:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a798:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a79c:	429a      	cmp	r2, r3
 800a79e:	dbc6      	blt.n	800a72e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	40000000 	.word	0x40000000
 800a7b4:	3f847ae1 	.word	0x3f847ae1
 800a7b8:	2000b940 	.word	0x2000b940
 800a7bc:	2000ad80 	.word	0x2000ad80

0800a7c0 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a7c4:	4b03      	ldr	r3, [pc, #12]	; (800a7d4 <scaraSetScanFlag+0x14>)
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	70da      	strb	r2, [r3, #3]
}
 800a7ca:	bf00      	nop
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	2000087c 	.word	0x2000087c

0800a7d8 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a7e2:	4a05      	ldr	r2, [pc, #20]	; (800a7f8 <scaraSetOutput+0x20>)
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a7e8:	79fb      	ldrb	r3, [r7, #7]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fb f854 	bl	8005898 <lowlayer_setOutput>
}
 800a7f0:	bf00      	nop
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	2000087c 	.word	0x2000087c

0800a7fc <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a806:	4a04      	ldr	r2, [pc, #16]	; (800a818 <scaraSetDutyState+0x1c>)
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	7093      	strb	r3, [r2, #2]
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	2000087c 	.word	0x2000087c

0800a81c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a826:	4a04      	ldr	r2, [pc, #16]	; (800a838 <scaraSetMode+0x1c>)
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	7053      	strb	r3, [r2, #1]
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	2000087c 	.word	0x2000087c

0800a83c <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a846:	4a04      	ldr	r2, [pc, #16]	; (800a858 <scaraSetMethod+0x1c>)
 800a848:	79fb      	ldrb	r3, [r7, #7]
 800a84a:	7013      	strb	r3, [r2, #0]
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	2000087c 	.word	0x2000087c

0800a85c <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a864:	22c0      	movs	r2, #192	; 0xc0
 800a866:	4904      	ldr	r1, [pc, #16]	; (800a878 <scaraGetPosition+0x1c>)
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f00b fb4f 	bl	8015f0c <memcpy>
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	2000b940 	.word	0x2000b940

0800a87c <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a884:	22c0      	movs	r2, #192	; 0xc0
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	4803      	ldr	r0, [pc, #12]	; (800a898 <scaraUpdatePosition+0x1c>)
 800a88a:	f00b fb3f 	bl	8015f0c <memcpy>
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	2000bac0 	.word	0x2000bac0

0800a89c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a8a0:	4b03      	ldr	r3, [pc, #12]	; (800a8b0 <scaraGetMode+0x14>)
 800a8a2:	785b      	ldrb	r3, [r3, #1]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	2000087c 	.word	0x2000087c

0800a8b4 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a8b4:	b480      	push	{r7}
 800a8b6:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a8b8:	4b03      	ldr	r3, [pc, #12]	; (800a8c8 <scaraGetMethod+0x14>)
 800a8ba:	781b      	ldrb	r3, [r3, #0]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	2000087c 	.word	0x2000087c

0800a8cc <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a8cc:	b480      	push	{r7}
 800a8ce:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a8d0:	4b03      	ldr	r3, [pc, #12]	; (800a8e0 <scaraGetDutyState+0x14>)
 800a8d2:	789b      	ldrb	r3, [r3, #2]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	2000087c 	.word	0x2000087c

0800a8e4 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a8e8:	4b03      	ldr	r3, [pc, #12]	; (800a8f8 <scaraIsScanLimit+0x14>)
 800a8ea:	78db      	ldrb	r3, [r3, #3]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	2000087c 	.word	0x2000087c

0800a8fc <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a8fc:	b590      	push	{r4, r7, lr}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a906:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <scaraIsFinish+0x34>)
 800a908:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a90c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a910:	461a      	mov	r2, r3
 800a912:	4623      	mov	r3, r4
 800a914:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a918:	f7f6 f8fe 	bl	8000b18 <__aeabi_dcmpgt>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <scaraIsFinish+0x2a>
		return TRUE;
 800a922:	2301      	movs	r3, #1
 800a924:	e000      	b.n	800a928 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a926:	2300      	movs	r3, #0
	}
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd90      	pop	{r4, r7, pc}
 800a930:	2000ad80 	.word	0x2000ad80
 800a934:	00000000 	.word	0x00000000

0800a938 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a938:	b082      	sub	sp, #8
 800a93a:	b590      	push	{r4, r7, lr}
 800a93c:	b085      	sub	sp, #20
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	f107 0120 	add.w	r1, r7, #32
 800a946:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a94a:	f06f 0303 	mvn.w	r3, #3
 800a94e:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a950:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a954:	a35c      	add	r3, pc, #368	; (adr r3, 800aac8 <scaraPosition_packaging+0x190>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fe4d 	bl	80005f8 <__aeabi_dmul>
 800a95e:	4603      	mov	r3, r0
 800a960:	460c      	mov	r4, r1
 800a962:	4618      	mov	r0, r3
 800a964:	4621      	mov	r1, r4
 800a966:	f7f6 f8f7 	bl	8000b58 <__aeabi_d2iz>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3304      	adds	r3, #4
 800a96e:	60fb      	str	r3, [r7, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	4413      	add	r3, r2
 800a976:	4619      	mov	r1, r3
 800a978:	f000 f8aa 	bl	800aad0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a97c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a980:	a351      	add	r3, pc, #324	; (adr r3, 800aac8 <scaraPosition_packaging+0x190>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fe37 	bl	80005f8 <__aeabi_dmul>
 800a98a:	4603      	mov	r3, r0
 800a98c:	460c      	mov	r4, r1
 800a98e:	4618      	mov	r0, r3
 800a990:	4621      	mov	r1, r4
 800a992:	f7f6 f8e1 	bl	8000b58 <__aeabi_d2iz>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3304      	adds	r3, #4
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	f000 f894 	bl	800aad0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a9a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a9ac:	a346      	add	r3, pc, #280	; (adr r3, 800aac8 <scaraPosition_packaging+0x190>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	f7f5 fe21 	bl	80005f8 <__aeabi_dmul>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	4621      	mov	r1, r4
 800a9be:	f7f6 f8cb 	bl	8000b58 <__aeabi_d2iz>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	f000 f87e 	bl	800aad0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a9d4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a9d8:	a33b      	add	r3, pc, #236	; (adr r3, 800aac8 <scaraPosition_packaging+0x190>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fe0b 	bl	80005f8 <__aeabi_dmul>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	f7f6 f8b5 	bl	8000b58 <__aeabi_d2iz>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f000 f868 	bl	800aad0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa00:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800aa04:	a330      	add	r3, pc, #192	; (adr r3, 800aac8 <scaraPosition_packaging+0x190>)
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	f7f5 fdf5 	bl	80005f8 <__aeabi_dmul>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	460c      	mov	r4, r1
 800aa12:	4618      	mov	r0, r3
 800aa14:	4621      	mov	r1, r4
 800aa16:	f7f6 f89f 	bl	8000b58 <__aeabi_d2iz>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	4413      	add	r3, r2
 800aa26:	4619      	mov	r1, r3
 800aa28:	f000 f852 	bl	800aad0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa2c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800aa30:	a325      	add	r3, pc, #148	; (adr r3, 800aac8 <scaraPosition_packaging+0x190>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	f7f5 fddf 	bl	80005f8 <__aeabi_dmul>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	4618      	mov	r0, r3
 800aa40:	4621      	mov	r1, r4
 800aa42:	f7f6 f889 	bl	8000b58 <__aeabi_d2iz>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3304      	adds	r3, #4
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	4413      	add	r3, r2
 800aa52:	4619      	mov	r1, r3
 800aa54:	f000 f83c 	bl	800aad0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aa5c:	a31a      	add	r3, pc, #104	; (adr r3, 800aac8 <scaraPosition_packaging+0x190>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f7f5 fdc9 	bl	80005f8 <__aeabi_dmul>
 800aa66:	4603      	mov	r3, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	f7f6 f873 	bl	8000b58 <__aeabi_d2iz>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3304      	adds	r3, #4
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	4619      	mov	r1, r3
 800aa80:	f000 f826 	bl	800aad0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800aa84:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800aa88:	a30f      	add	r3, pc, #60	; (adr r3, 800aac8 <scaraPosition_packaging+0x190>)
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	f7f5 fdb3 	bl	80005f8 <__aeabi_dmul>
 800aa92:	4603      	mov	r3, r0
 800aa94:	460c      	mov	r4, r1
 800aa96:	4618      	mov	r0, r3
 800aa98:	4621      	mov	r1, r4
 800aa9a:	f7f6 f85d 	bl	8000b58 <__aeabi_d2iz>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	4619      	mov	r1, r3
 800aaac:	f000 f810 	bl	800aad0 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3304      	adds	r3, #4
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aabe:	b002      	add	sp, #8
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	f3af 8000 	nop.w
 800aac8:	00000000 	.word	0x00000000
 800aacc:	412e8480 	.word	0x412e8480

0800aad0 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	121a      	asrs	r2, r3, #8
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	3301      	adds	r3, #1
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	141a      	asrs	r2, r3, #16
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	3302      	adds	r3, #2
 800aaf6:	b2d2      	uxtb	r2, r2
 800aaf8:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	161a      	asrs	r2, r3, #24
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	3303      	adds	r3, #3
 800ab02:	b2d2      	uxtb	r2, r2
 800ab04:	701a      	strb	r2, [r3, #0]
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	0000      	movs	r0, r0
 800ab14:	0000      	movs	r0, r0
	...

0800ab18 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800ab18:	b590      	push	{r4, r7, lr}
 800ab1a:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800ab1e:	af6c      	add	r7, sp, #432	; 0x1b0
 800ab20:	4602      	mov	r2, r0
 800ab22:	463b      	mov	r3, r7
 800ab24:	6019      	str	r1, [r3, #0]
 800ab26:	1dfb      	adds	r3, r7, #7
 800ab28:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800ab2a:	f107 0308 	add.w	r3, r7, #8
 800ab2e:	2201      	movs	r2, #1
 800ab30:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800ab32:	f107 0308 	add.w	r3, r7, #8
 800ab36:	2200      	movs	r2, #0
 800ab38:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800ab3a:	f107 0308 	add.w	r3, r7, #8
 800ab3e:	2201      	movs	r2, #1
 800ab40:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800ab42:	f04f 0300 	mov.w	r3, #0
 800ab46:	f04f 0400 	mov.w	r4, #0
 800ab4a:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800ab4e:	463b      	mov	r3, r7
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dd03      	ble.n	800ab5e <scaraKeyInit1+0x46>
 800ab56:	463b      	mov	r3, r7
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b0e      	cmp	r3, #14
 800ab5c:	dd01      	ble.n	800ab62 <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800ab5e:	2306      	movs	r3, #6
 800ab60:	e2c0      	b.n	800b0e4 <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800ab62:	1dfb      	adds	r3, r7, #7
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b07      	cmp	r3, #7
 800ab68:	f200 8298 	bhi.w	800b09c <scaraKeyInit1+0x584>
 800ab6c:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <scaraKeyInit1+0x5c>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab95 	.word	0x0800ab95
 800ab78:	0800ac37 	.word	0x0800ac37
 800ab7c:	0800acdd 	.word	0x0800acdd
 800ab80:	0800ad7b 	.word	0x0800ad7b
 800ab84:	0800ae1d 	.word	0x0800ae1d
 800ab88:	0800aebb 	.word	0x0800aebb
 800ab8c:	0800af5d 	.word	0x0800af5d
 800ab90:	0800affb 	.word	0x0800affb
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800ab94:	f107 0208 	add.w	r2, r7, #8
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aba4:	f107 0308 	add.w	r3, r7, #8
 800aba8:	2200      	movs	r2, #0
 800abaa:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800abac:	f107 0308 	add.w	r3, r7, #8
 800abb0:	2200      	movs	r2, #0
 800abb2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800abb4:	463b      	mov	r3, r7
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7f5 fcb0 	bl	8000524 <__aeabi_i2d>
 800abc4:	4603      	mov	r3, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	f107 0208 	add.w	r2, r7, #8
 800abcc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800abd0:	f107 0208 	add.w	r2, r7, #8
 800abd4:	f04f 0300 	mov.w	r3, #0
 800abd8:	f04f 0400 	mov.w	r4, #0
 800abdc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800abe0:	f107 0208 	add.w	r2, r7, #8
 800abe4:	f04f 0300 	mov.w	r3, #0
 800abe8:	f04f 0400 	mov.w	r4, #0
 800abec:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800abf0:	f107 0208 	add.w	r2, r7, #8
 800abf4:	f04f 0300 	mov.w	r3, #0
 800abf8:	f04f 0400 	mov.w	r4, #0
 800abfc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ac00:	463b      	mov	r3, r7
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	f7f5 fc8e 	bl	8000524 <__aeabi_i2d>
 800ac08:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f7f5 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ac14:	4603      	mov	r3, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	4618      	mov	r0, r3
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fb32 	bl	800028c <__adddf3>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	f107 0208 	add.w	r2, r7, #8
 800ac30:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ac34:	e232      	b.n	800b09c <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800ac36:	f107 0208 	add.w	r2, r7, #8
 800ac3a:	f04f 0300 	mov.w	r3, #0
 800ac3e:	f04f 0400 	mov.w	r4, #0
 800ac42:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac46:	f107 0308 	add.w	r3, r7, #8
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac4e:	f107 0308 	add.w	r3, r7, #8
 800ac52:	2200      	movs	r2, #0
 800ac54:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800ac56:	463b      	mov	r3, r7
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	079b      	lsls	r3, r3, #30
 800ac5e:	1a9b      	subs	r3, r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	1a9b      	subs	r3, r3, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7f5 fc5d 	bl	8000524 <__aeabi_i2d>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	f107 0208 	add.w	r2, r7, #8
 800ac72:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ac76:	f107 0208 	add.w	r2, r7, #8
 800ac7a:	f04f 0300 	mov.w	r3, #0
 800ac7e:	f04f 0400 	mov.w	r4, #0
 800ac82:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac86:	f107 0208 	add.w	r2, r7, #8
 800ac8a:	f04f 0300 	mov.w	r3, #0
 800ac8e:	f04f 0400 	mov.w	r4, #0
 800ac92:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ac96:	f107 0208 	add.w	r2, r7, #8
 800ac9a:	f04f 0300 	mov.w	r3, #0
 800ac9e:	f04f 0400 	mov.w	r4, #0
 800aca2:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800aca6:	463b      	mov	r3, r7
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	f7f5 fc3b 	bl	8000524 <__aeabi_i2d>
 800acae:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 fc9f 	bl	80005f8 <__aeabi_dmul>
 800acba:	4603      	mov	r3, r0
 800acbc:	460c      	mov	r4, r1
 800acbe:	4618      	mov	r0, r3
 800acc0:	4621      	mov	r1, r4
 800acc2:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	f7f5 fadf 	bl	800028c <__adddf3>
 800acce:	4603      	mov	r3, r0
 800acd0:	460c      	mov	r4, r1
 800acd2:	f107 0208 	add.w	r2, r7, #8
 800acd6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800acda:	e1df      	b.n	800b09c <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800acdc:	f107 0208 	add.w	r2, r7, #8
 800ace0:	f04f 0300 	mov.w	r3, #0
 800ace4:	f04f 0400 	mov.w	r4, #0
 800ace8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800acec:	f107 0308 	add.w	r3, r7, #8
 800acf0:	2200      	movs	r2, #0
 800acf2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800acf4:	f107 0308 	add.w	r3, r7, #8
 800acf8:	2200      	movs	r2, #0
 800acfa:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800acfc:	f107 0208 	add.w	r2, r7, #8
 800ad00:	f04f 0300 	mov.w	r3, #0
 800ad04:	f04f 0400 	mov.w	r4, #0
 800ad08:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800ad0c:	463b      	mov	r3, r7
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	4613      	mov	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7f5 fc04 	bl	8000524 <__aeabi_i2d>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	460c      	mov	r4, r1
 800ad20:	f107 0208 	add.w	r2, r7, #8
 800ad24:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ad28:	f107 0208 	add.w	r2, r7, #8
 800ad2c:	f04f 0300 	mov.w	r3, #0
 800ad30:	f04f 0400 	mov.w	r4, #0
 800ad34:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ad38:	f107 0208 	add.w	r2, r7, #8
 800ad3c:	f04f 0300 	mov.w	r3, #0
 800ad40:	f04f 0400 	mov.w	r4, #0
 800ad44:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ad48:	463b      	mov	r3, r7
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	f7f5 fbea 	bl	8000524 <__aeabi_i2d>
 800ad50:	a3e7      	add	r3, pc, #924	; (adr r3, 800b0f0 <scaraKeyInit1+0x5d8>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	f7f5 fc4f 	bl	80005f8 <__aeabi_dmul>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	4618      	mov	r0, r3
 800ad60:	4621      	mov	r1, r4
 800ad62:	a3e5      	add	r3, pc, #916	; (adr r3, 800b0f8 <scaraKeyInit1+0x5e0>)
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	f7f5 fa90 	bl	800028c <__adddf3>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	460c      	mov	r4, r1
 800ad70:	f107 0208 	add.w	r2, r7, #8
 800ad74:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ad78:	e190      	b.n	800b09c <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800ad7a:	f107 0208 	add.w	r2, r7, #8
 800ad7e:	f04f 0300 	mov.w	r3, #0
 800ad82:	f04f 0400 	mov.w	r4, #0
 800ad86:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ad8a:	f107 0308 	add.w	r3, r7, #8
 800ad8e:	2200      	movs	r2, #0
 800ad90:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ad92:	f107 0308 	add.w	r3, r7, #8
 800ad96:	2200      	movs	r2, #0
 800ad98:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ad9a:	f107 0208 	add.w	r2, r7, #8
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	f04f 0400 	mov.w	r4, #0
 800ada6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800adaa:	463b      	mov	r3, r7
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	4613      	mov	r3, r2
 800adb0:	079b      	lsls	r3, r3, #30
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	1a9b      	subs	r3, r3, r2
 800adb8:	4618      	mov	r0, r3
 800adba:	f7f5 fbb3 	bl	8000524 <__aeabi_i2d>
 800adbe:	4603      	mov	r3, r0
 800adc0:	460c      	mov	r4, r1
 800adc2:	f107 0208 	add.w	r2, r7, #8
 800adc6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800adca:	f107 0208 	add.w	r2, r7, #8
 800adce:	f04f 0300 	mov.w	r3, #0
 800add2:	f04f 0400 	mov.w	r4, #0
 800add6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800adda:	f107 0208 	add.w	r2, r7, #8
 800adde:	f04f 0300 	mov.w	r3, #0
 800ade2:	f04f 0400 	mov.w	r4, #0
 800ade6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800adea:	463b      	mov	r3, r7
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	f7f5 fb99 	bl	8000524 <__aeabi_i2d>
 800adf2:	a3bf      	add	r3, pc, #764	; (adr r3, 800b0f0 <scaraKeyInit1+0x5d8>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f7f5 fbfe 	bl	80005f8 <__aeabi_dmul>
 800adfc:	4603      	mov	r3, r0
 800adfe:	460c      	mov	r4, r1
 800ae00:	4618      	mov	r0, r3
 800ae02:	4621      	mov	r1, r4
 800ae04:	a3bc      	add	r3, pc, #752	; (adr r3, 800b0f8 <scaraKeyInit1+0x5e0>)
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f7f5 fa3f 	bl	800028c <__adddf3>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	460c      	mov	r4, r1
 800ae12:	f107 0208 	add.w	r2, r7, #8
 800ae16:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ae1a:	e13f      	b.n	800b09c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800ae1c:	f107 0208 	add.w	r2, r7, #8
 800ae20:	f04f 0300 	mov.w	r3, #0
 800ae24:	f04f 0400 	mov.w	r4, #0
 800ae28:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ae2c:	f107 0308 	add.w	r3, r7, #8
 800ae30:	2200      	movs	r2, #0
 800ae32:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	2200      	movs	r2, #0
 800ae3a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ae3c:	f107 0208 	add.w	r2, r7, #8
 800ae40:	f04f 0300 	mov.w	r3, #0
 800ae44:	f04f 0400 	mov.w	r4, #0
 800ae48:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ae4c:	f107 0208 	add.w	r2, r7, #8
 800ae50:	f04f 0300 	mov.w	r3, #0
 800ae54:	f04f 0400 	mov.w	r4, #0
 800ae58:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800ae5c:	463b      	mov	r3, r7
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	4613      	mov	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7f5 fb5c 	bl	8000524 <__aeabi_i2d>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	f107 0208 	add.w	r2, r7, #8
 800ae74:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ae78:	f107 0208 	add.w	r2, r7, #8
 800ae7c:	f04f 0300 	mov.w	r3, #0
 800ae80:	f04f 0400 	mov.w	r4, #0
 800ae84:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800ae88:	463b      	mov	r3, r7
 800ae8a:	6818      	ldr	r0, [r3, #0]
 800ae8c:	f7f5 fb4a 	bl	8000524 <__aeabi_i2d>
 800ae90:	a397      	add	r3, pc, #604	; (adr r3, 800b0f0 <scaraKeyInit1+0x5d8>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	4618      	mov	r0, r3
 800aea0:	4621      	mov	r1, r4
 800aea2:	a395      	add	r3, pc, #596	; (adr r3, 800b0f8 <scaraKeyInit1+0x5e0>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 f9f0 	bl	800028c <__adddf3>
 800aeac:	4603      	mov	r3, r0
 800aeae:	460c      	mov	r4, r1
 800aeb0:	f107 0208 	add.w	r2, r7, #8
 800aeb4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aeb8:	e0f0      	b.n	800b09c <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800aeba:	f107 0208 	add.w	r2, r7, #8
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	f04f 0400 	mov.w	r4, #0
 800aec6:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	2200      	movs	r2, #0
 800aed0:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aed2:	f107 0308 	add.w	r3, r7, #8
 800aed6:	2200      	movs	r2, #0
 800aed8:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aeda:	f107 0208 	add.w	r2, r7, #8
 800aede:	f04f 0300 	mov.w	r3, #0
 800aee2:	f04f 0400 	mov.w	r4, #0
 800aee6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aeea:	f107 0208 	add.w	r2, r7, #8
 800aeee:	f04f 0300 	mov.w	r3, #0
 800aef2:	f04f 0400 	mov.w	r4, #0
 800aef6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800aefa:	463b      	mov	r3, r7
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	4613      	mov	r3, r2
 800af00:	079b      	lsls	r3, r3, #30
 800af02:	1a9b      	subs	r3, r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	1a9b      	subs	r3, r3, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f7f5 fb0b 	bl	8000524 <__aeabi_i2d>
 800af0e:	4603      	mov	r3, r0
 800af10:	460c      	mov	r4, r1
 800af12:	f107 0208 	add.w	r2, r7, #8
 800af16:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800af1a:	f107 0208 	add.w	r2, r7, #8
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	f04f 0400 	mov.w	r4, #0
 800af26:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800af2a:	463b      	mov	r3, r7
 800af2c:	6818      	ldr	r0, [r3, #0]
 800af2e:	f7f5 faf9 	bl	8000524 <__aeabi_i2d>
 800af32:	a36f      	add	r3, pc, #444	; (adr r3, 800b0f0 <scaraKeyInit1+0x5d8>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f7f5 fb5e 	bl	80005f8 <__aeabi_dmul>
 800af3c:	4603      	mov	r3, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	4618      	mov	r0, r3
 800af42:	4621      	mov	r1, r4
 800af44:	a36c      	add	r3, pc, #432	; (adr r3, 800b0f8 <scaraKeyInit1+0x5e0>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	f7f5 f99f 	bl	800028c <__adddf3>
 800af4e:	4603      	mov	r3, r0
 800af50:	460c      	mov	r4, r1
 800af52:	f107 0208 	add.w	r2, r7, #8
 800af56:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800af5a:	e09f      	b.n	800b09c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800af5c:	f107 0208 	add.w	r2, r7, #8
 800af60:	f04f 0300 	mov.w	r3, #0
 800af64:	f04f 0400 	mov.w	r4, #0
 800af68:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800af6c:	f107 0308 	add.w	r3, r7, #8
 800af70:	2200      	movs	r2, #0
 800af72:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800af74:	f107 0308 	add.w	r3, r7, #8
 800af78:	2200      	movs	r2, #0
 800af7a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800af7c:	f107 0208 	add.w	r2, r7, #8
 800af80:	f04f 0300 	mov.w	r3, #0
 800af84:	f04f 0400 	mov.w	r4, #0
 800af88:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800af8c:	f107 0208 	add.w	r2, r7, #8
 800af90:	f04f 0300 	mov.w	r3, #0
 800af94:	f04f 0400 	mov.w	r4, #0
 800af98:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800af9c:	f107 0208 	add.w	r2, r7, #8
 800afa0:	f04f 0300 	mov.w	r3, #0
 800afa4:	f04f 0400 	mov.w	r4, #0
 800afa8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800afac:	463b      	mov	r3, r7
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f5 fab4 	bl	8000524 <__aeabi_i2d>
 800afbc:	4603      	mov	r3, r0
 800afbe:	460c      	mov	r4, r1
 800afc0:	f107 0208 	add.w	r2, r7, #8
 800afc4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800afc8:	463b      	mov	r3, r7
 800afca:	6818      	ldr	r0, [r3, #0]
 800afcc:	f7f5 faaa 	bl	8000524 <__aeabi_i2d>
 800afd0:	a347      	add	r3, pc, #284	; (adr r3, 800b0f0 <scaraKeyInit1+0x5d8>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 fb0f 	bl	80005f8 <__aeabi_dmul>
 800afda:	4603      	mov	r3, r0
 800afdc:	460c      	mov	r4, r1
 800afde:	4618      	mov	r0, r3
 800afe0:	4621      	mov	r1, r4
 800afe2:	a345      	add	r3, pc, #276	; (adr r3, 800b0f8 <scaraKeyInit1+0x5e0>)
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f7f5 f950 	bl	800028c <__adddf3>
 800afec:	4603      	mov	r3, r0
 800afee:	460c      	mov	r4, r1
 800aff0:	f107 0208 	add.w	r2, r7, #8
 800aff4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aff8:	e050      	b.n	800b09c <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800affa:	f107 0208 	add.w	r2, r7, #8
 800affe:	f04f 0300 	mov.w	r3, #0
 800b002:	f04f 0400 	mov.w	r4, #0
 800b006:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b00a:	f107 0308 	add.w	r3, r7, #8
 800b00e:	2200      	movs	r2, #0
 800b010:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b012:	f107 0308 	add.w	r3, r7, #8
 800b016:	2200      	movs	r2, #0
 800b018:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b01a:	f107 0208 	add.w	r2, r7, #8
 800b01e:	f04f 0300 	mov.w	r3, #0
 800b022:	f04f 0400 	mov.w	r4, #0
 800b026:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b02a:	f107 0208 	add.w	r2, r7, #8
 800b02e:	f04f 0300 	mov.w	r3, #0
 800b032:	f04f 0400 	mov.w	r4, #0
 800b036:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b03a:	f107 0208 	add.w	r2, r7, #8
 800b03e:	f04f 0300 	mov.w	r3, #0
 800b042:	f04f 0400 	mov.w	r4, #0
 800b046:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800b04a:	463b      	mov	r3, r7
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	4613      	mov	r3, r2
 800b050:	079b      	lsls	r3, r3, #30
 800b052:	1a9b      	subs	r3, r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	1a9b      	subs	r3, r3, r2
 800b058:	4618      	mov	r0, r3
 800b05a:	f7f5 fa63 	bl	8000524 <__aeabi_i2d>
 800b05e:	4603      	mov	r3, r0
 800b060:	460c      	mov	r4, r1
 800b062:	f107 0208 	add.w	r2, r7, #8
 800b066:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b06a:	463b      	mov	r3, r7
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	f7f5 fa59 	bl	8000524 <__aeabi_i2d>
 800b072:	a31f      	add	r3, pc, #124	; (adr r3, 800b0f0 <scaraKeyInit1+0x5d8>)
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f7f5 fabe 	bl	80005f8 <__aeabi_dmul>
 800b07c:	4603      	mov	r3, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	4618      	mov	r0, r3
 800b082:	4621      	mov	r1, r4
 800b084:	a31c      	add	r3, pc, #112	; (adr r3, 800b0f8 <scaraKeyInit1+0x5e0>)
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f7f5 f8ff 	bl	800028c <__adddf3>
 800b08e:	4603      	mov	r3, r0
 800b090:	460c      	mov	r4, r1
 800b092:	f107 0208 	add.w	r2, r7, #8
 800b096:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800b09a:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800b09c:	f107 0408 	add.w	r4, r7, #8
 800b0a0:	4668      	mov	r0, sp
 800b0a2:	f104 0310 	add.w	r3, r4, #16
 800b0a6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	f00a ff2e 	bl	8015f0c <memcpy>
 800b0b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b0b4:	f7fa fc3c 	bl	8005930 <scaraInitDuty>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800b0be:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10b      	bne.n	800b0de <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800b0c6:	f7ff faff 	bl	800a6c8 <scaraTestDuty>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800b0d0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <scaraKeyInit1+0x5cc>
			return status;
 800b0d8:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b0dc:	e002      	b.n	800b0e4 <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800b0de:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b0e2:	e7ff      	b.n	800b0e4 <scaraKeyInit1+0x5cc>
	}
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd90      	pop	{r4, r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	9999999a 	.word	0x9999999a
 800b0f4:	3fa99999 	.word	0x3fa99999
 800b0f8:	9999999a 	.word	0x9999999a
 800b0fc:	3fe99999 	.word	0x3fe99999

0800b100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b106:	2300      	movs	r3, #0
 800b108:	607b      	str	r3, [r7, #4]
 800b10a:	4b12      	ldr	r3, [pc, #72]	; (800b154 <HAL_MspInit+0x54>)
 800b10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10e:	4a11      	ldr	r2, [pc, #68]	; (800b154 <HAL_MspInit+0x54>)
 800b110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b114:	6453      	str	r3, [r2, #68]	; 0x44
 800b116:	4b0f      	ldr	r3, [pc, #60]	; (800b154 <HAL_MspInit+0x54>)
 800b118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b11e:	607b      	str	r3, [r7, #4]
 800b120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b122:	2300      	movs	r3, #0
 800b124:	603b      	str	r3, [r7, #0]
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <HAL_MspInit+0x54>)
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	4a0a      	ldr	r2, [pc, #40]	; (800b154 <HAL_MspInit+0x54>)
 800b12c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b130:	6413      	str	r3, [r2, #64]	; 0x40
 800b132:	4b08      	ldr	r3, [pc, #32]	; (800b154 <HAL_MspInit+0x54>)
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b13e:	2200      	movs	r2, #0
 800b140:	210f      	movs	r1, #15
 800b142:	f06f 0001 	mvn.w	r0, #1
 800b146:	f000 fbe7 	bl	800b918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	40023800 	.word	0x40023800

0800b158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08c      	sub	sp, #48	; 0x30
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b168:	2200      	movs	r2, #0
 800b16a:	6879      	ldr	r1, [r7, #4]
 800b16c:	2036      	movs	r0, #54	; 0x36
 800b16e:	f000 fbd3 	bl	800b918 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b172:	2036      	movs	r0, #54	; 0x36
 800b174:	f000 fbec 	bl	800b950 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	4b1f      	ldr	r3, [pc, #124]	; (800b1fc <HAL_InitTick+0xa4>)
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	4a1e      	ldr	r2, [pc, #120]	; (800b1fc <HAL_InitTick+0xa4>)
 800b182:	f043 0310 	orr.w	r3, r3, #16
 800b186:	6413      	str	r3, [r2, #64]	; 0x40
 800b188:	4b1c      	ldr	r3, [pc, #112]	; (800b1fc <HAL_InitTick+0xa4>)
 800b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18c:	f003 0310 	and.w	r3, r3, #16
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b194:	f107 0210 	add.w	r2, r7, #16
 800b198:	f107 0314 	add.w	r3, r7, #20
 800b19c:	4611      	mov	r1, r2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f002 ff72 	bl	800e088 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b1a4:	f002 ff48 	bl	800e038 <HAL_RCC_GetPCLK1Freq>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b0:	4a13      	ldr	r2, [pc, #76]	; (800b200 <HAL_InitTick+0xa8>)
 800b1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b6:	0c9b      	lsrs	r3, r3, #18
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b1bc:	4b11      	ldr	r3, [pc, #68]	; (800b204 <HAL_InitTick+0xac>)
 800b1be:	4a12      	ldr	r2, [pc, #72]	; (800b208 <HAL_InitTick+0xb0>)
 800b1c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b1c2:	4b10      	ldr	r3, [pc, #64]	; (800b204 <HAL_InitTick+0xac>)
 800b1c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b1c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b1ca:	4a0e      	ldr	r2, [pc, #56]	; (800b204 <HAL_InitTick+0xac>)
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b1d0:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <HAL_InitTick+0xac>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	; (800b204 <HAL_InitTick+0xac>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b1dc:	4809      	ldr	r0, [pc, #36]	; (800b204 <HAL_InitTick+0xac>)
 800b1de:	f002 ff85 	bl	800e0ec <HAL_TIM_Base_Init>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d104      	bne.n	800b1f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b1e8:	4806      	ldr	r0, [pc, #24]	; (800b204 <HAL_InitTick+0xac>)
 800b1ea:	f002 ffce 	bl	800e18a <HAL_TIM_Base_Start_IT>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	e000      	b.n	800b1f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3730      	adds	r7, #48	; 0x30
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	40023800 	.word	0x40023800
 800b200:	431bde83 	.word	0x431bde83
 800b204:	2000bb80 	.word	0x2000bb80
 800b208:	40001000 	.word	0x40001000

0800b20c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b20c:	b480      	push	{r7}
 800b20e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b210:	bf00      	nop
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
	...

0800b21c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b220:	2162      	movs	r1, #98	; 0x62
 800b222:	4802      	ldr	r0, [pc, #8]	; (800b22c <HardFault_Handler+0x10>)
 800b224:	f7f6 ff24 	bl	8002070 <LOG_REPORT>
 800b228:	e7fa      	b.n	800b220 <HardFault_Handler+0x4>
 800b22a:	bf00      	nop
 800b22c:	0801b618 	.word	0x0801b618

0800b230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b234:	2172      	movs	r1, #114	; 0x72
 800b236:	4802      	ldr	r0, [pc, #8]	; (800b240 <MemManage_Handler+0x10>)
 800b238:	f7f6 ff1a 	bl	8002070 <LOG_REPORT>
 800b23c:	e7fa      	b.n	800b234 <MemManage_Handler+0x4>
 800b23e:	bf00      	nop
 800b240:	0801b630 	.word	0x0801b630

0800b244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b248:	2182      	movs	r1, #130	; 0x82
 800b24a:	4802      	ldr	r0, [pc, #8]	; (800b254 <BusFault_Handler+0x10>)
 800b24c:	f7f6 ff10 	bl	8002070 <LOG_REPORT>
 800b250:	e7fa      	b.n	800b248 <BusFault_Handler+0x4>
 800b252:	bf00      	nop
 800b254:	0801b644 	.word	0x0801b644

0800b258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b25c:	e7fe      	b.n	800b25c <UsageFault_Handler+0x4>

0800b25e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b25e:	b480      	push	{r7}
 800b260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b262:	bf00      	nop
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b270:	4802      	ldr	r0, [pc, #8]	; (800b27c <DMA1_Stream4_IRQHandler+0x10>)
 800b272:	f000 fca3 	bl	800bbbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b276:	bf00      	nop
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	2000bc80 	.word	0x2000bc80

0800b280 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b284:	4802      	ldr	r0, [pc, #8]	; (800b290 <UART4_IRQHandler+0x10>)
 800b286:	f003 fc0f 	bl	800eaa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b28a:	bf00      	nop
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	2000bc40 	.word	0x2000bc40

0800b294 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b298:	4802      	ldr	r0, [pc, #8]	; (800b2a4 <TIM6_DAC_IRQHandler+0x10>)
 800b29a:	f002 ff9a 	bl	800e1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b29e:	bf00      	nop
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	2000bb80 	.word	0x2000bb80

0800b2a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b2ac:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <TIM7_IRQHandler+0x1c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f007 fadc 	bl	8012870 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b2b8:	4803      	ldr	r0, [pc, #12]	; (800b2c8 <TIM7_IRQHandler+0x20>)
 800b2ba:	f002 ff8a 	bl	800e1d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b2be:	bf00      	nop
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	2000acb4 	.word	0x2000acb4
 800b2c8:	2000bc00 	.word	0x2000bc00

0800b2cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b2d0:	4802      	ldr	r0, [pc, #8]	; (800b2dc <OTG_FS_IRQHandler+0x10>)
 800b2d2:	f001 fa43 	bl	800c75c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b2d6:	bf00      	nop
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	2000c5bc 	.word	0x2000c5bc

0800b2e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b2e8:	4b11      	ldr	r3, [pc, #68]	; (800b330 <_sbrk+0x50>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d102      	bne.n	800b2f6 <_sbrk+0x16>
		heap_end = &end;
 800b2f0:	4b0f      	ldr	r3, [pc, #60]	; (800b330 <_sbrk+0x50>)
 800b2f2:	4a10      	ldr	r2, [pc, #64]	; (800b334 <_sbrk+0x54>)
 800b2f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b2f6:	4b0e      	ldr	r3, [pc, #56]	; (800b330 <_sbrk+0x50>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b2fc:	4b0c      	ldr	r3, [pc, #48]	; (800b330 <_sbrk+0x50>)
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4413      	add	r3, r2
 800b304:	466a      	mov	r2, sp
 800b306:	4293      	cmp	r3, r2
 800b308:	d907      	bls.n	800b31a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b30a:	f00a fdc5 	bl	8015e98 <__errno>
 800b30e:	4602      	mov	r2, r0
 800b310:	230c      	movs	r3, #12
 800b312:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b314:	f04f 33ff 	mov.w	r3, #4294967295
 800b318:	e006      	b.n	800b328 <_sbrk+0x48>
	}

	heap_end += incr;
 800b31a:	4b05      	ldr	r3, [pc, #20]	; (800b330 <_sbrk+0x50>)
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4413      	add	r3, r2
 800b322:	4a03      	ldr	r2, [pc, #12]	; (800b330 <_sbrk+0x50>)
 800b324:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b326:	68fb      	ldr	r3, [r7, #12]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20001058 	.word	0x20001058
 800b334:	2000c9c8 	.word	0x2000c9c8

0800b338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b338:	b480      	push	{r7}
 800b33a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b33c:	4b08      	ldr	r3, [pc, #32]	; (800b360 <SystemInit+0x28>)
 800b33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b342:	4a07      	ldr	r2, [pc, #28]	; (800b360 <SystemInit+0x28>)
 800b344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b34c:	4b04      	ldr	r3, [pc, #16]	; (800b360 <SystemInit+0x28>)
 800b34e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b352:	609a      	str	r2, [r3, #8]
#endif
}
 800b354:	bf00      	nop
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	e000ed00 	.word	0xe000ed00

0800b364 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b36a:	f107 0308 	add.w	r3, r7, #8
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	605a      	str	r2, [r3, #4]
 800b374:	609a      	str	r2, [r3, #8]
 800b376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b378:	463b      	mov	r3, r7
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b380:	4b1e      	ldr	r3, [pc, #120]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b388:	4b1c      	ldr	r3, [pc, #112]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b38a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b38e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b390:	4b1a      	ldr	r3, [pc, #104]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b392:	2200      	movs	r2, #0
 800b394:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b396:	4b19      	ldr	r3, [pc, #100]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b39c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b39e:	4b17      	ldr	r3, [pc, #92]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b3a4:	4b15      	ldr	r3, [pc, #84]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b3aa:	4814      	ldr	r0, [pc, #80]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b3ac:	f002 fe9e 	bl	800e0ec <HAL_TIM_Base_Init>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b3b6:	f7f9 fa41 	bl	800483c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b3ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b3c0:	f107 0308 	add.w	r3, r7, #8
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	480d      	ldr	r0, [pc, #52]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b3c8:	f003 f80b 	bl	800e3e2 <HAL_TIM_ConfigClockSource>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b3d2:	f7f9 fa33 	bl	800483c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b3de:	463b      	mov	r3, r7
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4806      	ldr	r0, [pc, #24]	; (800b3fc <MX_TIM2_Init+0x98>)
 800b3e4:	f003 fa16 	bl	800e814 <HAL_TIMEx_MasterConfigSynchronization>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b3ee:	f7f9 fa25 	bl	800483c <Error_Handler>
  }

}
 800b3f2:	bf00      	nop
 800b3f4:	3718      	adds	r7, #24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	2000bbc0 	.word	0x2000bbc0

0800b400 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b406:	463b      	mov	r3, r7
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b40e:	4b15      	ldr	r3, [pc, #84]	; (800b464 <MX_TIM7_Init+0x64>)
 800b410:	4a15      	ldr	r2, [pc, #84]	; (800b468 <MX_TIM7_Init+0x68>)
 800b412:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b414:	4b13      	ldr	r3, [pc, #76]	; (800b464 <MX_TIM7_Init+0x64>)
 800b416:	2253      	movs	r2, #83	; 0x53
 800b418:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b41a:	4b12      	ldr	r3, [pc, #72]	; (800b464 <MX_TIM7_Init+0x64>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b420:	4b10      	ldr	r3, [pc, #64]	; (800b464 <MX_TIM7_Init+0x64>)
 800b422:	f242 720f 	movw	r2, #9999	; 0x270f
 800b426:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b428:	4b0e      	ldr	r3, [pc, #56]	; (800b464 <MX_TIM7_Init+0x64>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b42e:	480d      	ldr	r0, [pc, #52]	; (800b464 <MX_TIM7_Init+0x64>)
 800b430:	f002 fe5c 	bl	800e0ec <HAL_TIM_Base_Init>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b43a:	f7f9 f9ff 	bl	800483c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b43e:	2300      	movs	r3, #0
 800b440:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b442:	2300      	movs	r3, #0
 800b444:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b446:	463b      	mov	r3, r7
 800b448:	4619      	mov	r1, r3
 800b44a:	4806      	ldr	r0, [pc, #24]	; (800b464 <MX_TIM7_Init+0x64>)
 800b44c:	f003 f9e2 	bl	800e814 <HAL_TIMEx_MasterConfigSynchronization>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b456:	f7f9 f9f1 	bl	800483c <Error_Handler>
  }

}
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	2000bc00 	.word	0x2000bc00
 800b468:	40001400 	.word	0x40001400

0800b46c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b47c:	d10e      	bne.n	800b49c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	4b16      	ldr	r3, [pc, #88]	; (800b4dc <HAL_TIM_Base_MspInit+0x70>)
 800b484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b486:	4a15      	ldr	r2, [pc, #84]	; (800b4dc <HAL_TIM_Base_MspInit+0x70>)
 800b488:	f043 0301 	orr.w	r3, r3, #1
 800b48c:	6413      	str	r3, [r2, #64]	; 0x40
 800b48e:	4b13      	ldr	r3, [pc, #76]	; (800b4dc <HAL_TIM_Base_MspInit+0x70>)
 800b490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b49a:	e01a      	b.n	800b4d2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a0f      	ldr	r2, [pc, #60]	; (800b4e0 <HAL_TIM_Base_MspInit+0x74>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d115      	bne.n	800b4d2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60bb      	str	r3, [r7, #8]
 800b4aa:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <HAL_TIM_Base_MspInit+0x70>)
 800b4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ae:	4a0b      	ldr	r2, [pc, #44]	; (800b4dc <HAL_TIM_Base_MspInit+0x70>)
 800b4b0:	f043 0320 	orr.w	r3, r3, #32
 800b4b4:	6413      	str	r3, [r2, #64]	; 0x40
 800b4b6:	4b09      	ldr	r3, [pc, #36]	; (800b4dc <HAL_TIM_Base_MspInit+0x70>)
 800b4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ba:	f003 0320 	and.w	r3, r3, #32
 800b4be:	60bb      	str	r3, [r7, #8]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2105      	movs	r1, #5
 800b4c6:	2037      	movs	r0, #55	; 0x37
 800b4c8:	f000 fa26 	bl	800b918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b4cc:	2037      	movs	r0, #55	; 0x37
 800b4ce:	f000 fa3f 	bl	800b950 <HAL_NVIC_EnableIRQ>
}
 800b4d2:	bf00      	nop
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	40023800 	.word	0x40023800
 800b4e0:	40001400 	.word	0x40001400

0800b4e4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b4e8:	4b11      	ldr	r3, [pc, #68]	; (800b530 <MX_UART4_Init+0x4c>)
 800b4ea:	4a12      	ldr	r2, [pc, #72]	; (800b534 <MX_UART4_Init+0x50>)
 800b4ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b4ee:	4b10      	ldr	r3, [pc, #64]	; (800b530 <MX_UART4_Init+0x4c>)
 800b4f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b4f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b4f6:	4b0e      	ldr	r3, [pc, #56]	; (800b530 <MX_UART4_Init+0x4c>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b4fc:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <MX_UART4_Init+0x4c>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b502:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <MX_UART4_Init+0x4c>)
 800b504:	2200      	movs	r2, #0
 800b506:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b508:	4b09      	ldr	r3, [pc, #36]	; (800b530 <MX_UART4_Init+0x4c>)
 800b50a:	220c      	movs	r2, #12
 800b50c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b50e:	4b08      	ldr	r3, [pc, #32]	; (800b530 <MX_UART4_Init+0x4c>)
 800b510:	2200      	movs	r2, #0
 800b512:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b514:	4b06      	ldr	r3, [pc, #24]	; (800b530 <MX_UART4_Init+0x4c>)
 800b516:	2200      	movs	r2, #0
 800b518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b51a:	4805      	ldr	r0, [pc, #20]	; (800b530 <MX_UART4_Init+0x4c>)
 800b51c:	f003 fa0a 	bl	800e934 <HAL_UART_Init>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b526:	f7f9 f989 	bl	800483c <Error_Handler>
  }

}
 800b52a:	bf00      	nop
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	2000bc40 	.word	0x2000bc40
 800b534:	40004c00 	.word	0x40004c00

0800b538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b08a      	sub	sp, #40	; 0x28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b540:	f107 0314 	add.w	r3, r7, #20
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	605a      	str	r2, [r3, #4]
 800b54a:	609a      	str	r2, [r3, #8]
 800b54c:	60da      	str	r2, [r3, #12]
 800b54e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a34      	ldr	r2, [pc, #208]	; (800b628 <HAL_UART_MspInit+0xf0>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d161      	bne.n	800b61e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b55a:	2300      	movs	r3, #0
 800b55c:	613b      	str	r3, [r7, #16]
 800b55e:	4b33      	ldr	r3, [pc, #204]	; (800b62c <HAL_UART_MspInit+0xf4>)
 800b560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b562:	4a32      	ldr	r2, [pc, #200]	; (800b62c <HAL_UART_MspInit+0xf4>)
 800b564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b568:	6413      	str	r3, [r2, #64]	; 0x40
 800b56a:	4b30      	ldr	r3, [pc, #192]	; (800b62c <HAL_UART_MspInit+0xf4>)
 800b56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b572:	613b      	str	r3, [r7, #16]
 800b574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	4b2c      	ldr	r3, [pc, #176]	; (800b62c <HAL_UART_MspInit+0xf4>)
 800b57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57e:	4a2b      	ldr	r2, [pc, #172]	; (800b62c <HAL_UART_MspInit+0xf4>)
 800b580:	f043 0301 	orr.w	r3, r3, #1
 800b584:	6313      	str	r3, [r2, #48]	; 0x30
 800b586:	4b29      	ldr	r3, [pc, #164]	; (800b62c <HAL_UART_MspInit+0xf4>)
 800b588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	60fb      	str	r3, [r7, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b592:	2303      	movs	r3, #3
 800b594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b596:	2302      	movs	r3, #2
 800b598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b59a:	2301      	movs	r3, #1
 800b59c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b5a2:	2308      	movs	r3, #8
 800b5a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5a6:	f107 0314 	add.w	r3, r7, #20
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4820      	ldr	r0, [pc, #128]	; (800b630 <HAL_UART_MspInit+0xf8>)
 800b5ae:	f000 fd7b 	bl	800c0a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b5b2:	4b20      	ldr	r3, [pc, #128]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5b4:	4a20      	ldr	r2, [pc, #128]	; (800b638 <HAL_UART_MspInit+0x100>)
 800b5b6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b5b8:	4b1e      	ldr	r3, [pc, #120]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b5be:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b5c0:	4b1c      	ldr	r3, [pc, #112]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5c2:	2240      	movs	r2, #64	; 0x40
 800b5c4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b5c6:	4b1b      	ldr	r3, [pc, #108]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b5cc:	4b19      	ldr	r3, [pc, #100]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5d2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b5d4:	4b17      	ldr	r3, [pc, #92]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b5da:	4b16      	ldr	r3, [pc, #88]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5dc:	2200      	movs	r2, #0
 800b5de:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b5e0:	4b14      	ldr	r3, [pc, #80]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b5e6:	4b13      	ldr	r3, [pc, #76]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b5ec:	4b11      	ldr	r3, [pc, #68]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b5f2:	4810      	ldr	r0, [pc, #64]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b5f4:	f000 f9ba 	bl	800b96c <HAL_DMA_Init>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b5fe:	f7f9 f91d 	bl	800483c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a0b      	ldr	r2, [pc, #44]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b606:	631a      	str	r2, [r3, #48]	; 0x30
 800b608:	4a0a      	ldr	r2, [pc, #40]	; (800b634 <HAL_UART_MspInit+0xfc>)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b60e:	2200      	movs	r2, #0
 800b610:	2105      	movs	r1, #5
 800b612:	2034      	movs	r0, #52	; 0x34
 800b614:	f000 f980 	bl	800b918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b618:	2034      	movs	r0, #52	; 0x34
 800b61a:	f000 f999 	bl	800b950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b61e:	bf00      	nop
 800b620:	3728      	adds	r7, #40	; 0x28
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	40004c00 	.word	0x40004c00
 800b62c:	40023800 	.word	0x40023800
 800b630:	40020000 	.word	0x40020000
 800b634:	2000bc80 	.word	0x2000bc80
 800b638:	40026070 	.word	0x40026070

0800b63c <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a0c      	ldr	r2, [pc, #48]	; (800b67c <HAL_UART_TxCpltCallback+0x40>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d112      	bne.n	800b674 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b64e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b652:	490b      	ldr	r1, [pc, #44]	; (800b680 <HAL_UART_TxCpltCallback+0x44>)
 800b654:	480b      	ldr	r0, [pc, #44]	; (800b684 <HAL_UART_TxCpltCallback+0x48>)
 800b656:	f7f9 f990 	bl	800497a <ringBuff_PopArray>
 800b65a:	4603      	mov	r3, r0
 800b65c:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b65e:	89fb      	ldrh	r3, [r7, #14]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d006      	beq.n	800b672 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b664:	89fb      	ldrh	r3, [r7, #14]
 800b666:	461a      	mov	r2, r3
 800b668:	4905      	ldr	r1, [pc, #20]	; (800b680 <HAL_UART_TxCpltCallback+0x44>)
 800b66a:	4807      	ldr	r0, [pc, #28]	; (800b688 <HAL_UART_TxCpltCallback+0x4c>)
 800b66c:	f003 f9b0 	bl	800e9d0 <HAL_UART_Transmit_DMA>
 800b670:	e000      	b.n	800b674 <HAL_UART_TxCpltCallback+0x38>
			return;
 800b672:	bf00      	nop
	}
}
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	40004c00 	.word	0x40004c00
 800b680:	2000abb0 	.word	0x2000abb0
 800b684:	20000470 	.word	0x20000470
 800b688:	2000bc40 	.word	0x2000bc40

0800b68c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b68c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b6c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b690:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b692:	e003      	b.n	800b69c <LoopCopyDataInit>

0800b694 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b694:	4b0c      	ldr	r3, [pc, #48]	; (800b6c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b696:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b698:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b69a:	3104      	adds	r1, #4

0800b69c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b69c:	480b      	ldr	r0, [pc, #44]	; (800b6cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b69e:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b6a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b6a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b6a4:	d3f6      	bcc.n	800b694 <CopyDataInit>
  ldr  r2, =_sbss
 800b6a6:	4a0b      	ldr	r2, [pc, #44]	; (800b6d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b6a8:	e002      	b.n	800b6b0 <LoopFillZerobss>

0800b6aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b6aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b6ac:	f842 3b04 	str.w	r3, [r2], #4

0800b6b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b6b0:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b6b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b6b4:	d3f9      	bcc.n	800b6aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b6b6:	f7ff fe3f 	bl	800b338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b6ba:	f00a fbf3 	bl	8015ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b6be:	f7f9 f829 	bl	8004714 <main>
  bx  lr    
 800b6c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b6c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b6c8:	0801bbb0 	.word	0x0801bbb0
  ldr  r0, =_sdata
 800b6cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b6d0:	20000be0 	.word	0x20000be0
  ldr  r2, =_sbss
 800b6d4:	20000be0 	.word	0x20000be0
  ldr  r3, = _ebss
 800b6d8:	2000c9c8 	.word	0x2000c9c8

0800b6dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b6dc:	e7fe      	b.n	800b6dc <ADC_IRQHandler>
	...

0800b6e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b6e4:	4b0e      	ldr	r3, [pc, #56]	; (800b720 <HAL_Init+0x40>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a0d      	ldr	r2, [pc, #52]	; (800b720 <HAL_Init+0x40>)
 800b6ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b6f0:	4b0b      	ldr	r3, [pc, #44]	; (800b720 <HAL_Init+0x40>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a0a      	ldr	r2, [pc, #40]	; (800b720 <HAL_Init+0x40>)
 800b6f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b6fc:	4b08      	ldr	r3, [pc, #32]	; (800b720 <HAL_Init+0x40>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a07      	ldr	r2, [pc, #28]	; (800b720 <HAL_Init+0x40>)
 800b702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b708:	2003      	movs	r0, #3
 800b70a:	f000 f8fa 	bl	800b902 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b70e:	2000      	movs	r0, #0
 800b710:	f7ff fd22 	bl	800b158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b714:	f7ff fcf4 	bl	800b100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	40023c00 	.word	0x40023c00

0800b724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b728:	4b06      	ldr	r3, [pc, #24]	; (800b744 <HAL_IncTick+0x20>)
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	4b06      	ldr	r3, [pc, #24]	; (800b748 <HAL_IncTick+0x24>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4413      	add	r3, r2
 800b734:	4a04      	ldr	r2, [pc, #16]	; (800b748 <HAL_IncTick+0x24>)
 800b736:	6013      	str	r3, [r2, #0]
}
 800b738:	bf00      	nop
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	20000890 	.word	0x20000890
 800b748:	2000bce0 	.word	0x2000bce0

0800b74c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0
  return uwTick;
 800b750:	4b03      	ldr	r3, [pc, #12]	; (800b760 <HAL_GetTick+0x14>)
 800b752:	681b      	ldr	r3, [r3, #0]
}
 800b754:	4618      	mov	r0, r3
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	2000bce0 	.word	0x2000bce0

0800b764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b76c:	f7ff ffee 	bl	800b74c <HAL_GetTick>
 800b770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77c:	d005      	beq.n	800b78a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b77e:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <HAL_Delay+0x40>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4413      	add	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b78a:	bf00      	nop
 800b78c:	f7ff ffde 	bl	800b74c <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d8f7      	bhi.n	800b78c <HAL_Delay+0x28>
  {
  }
}
 800b79c:	bf00      	nop
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20000890 	.word	0x20000890

0800b7a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f003 0307 	and.w	r3, r3, #7
 800b7b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b7b8:	4b0c      	ldr	r3, [pc, #48]	; (800b7ec <__NVIC_SetPriorityGrouping+0x44>)
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b7d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b7d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b7da:	4a04      	ldr	r2, [pc, #16]	; (800b7ec <__NVIC_SetPriorityGrouping+0x44>)
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	60d3      	str	r3, [r2, #12]
}
 800b7e0:	bf00      	nop
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	e000ed00 	.word	0xe000ed00

0800b7f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7f4:	4b04      	ldr	r3, [pc, #16]	; (800b808 <__NVIC_GetPriorityGrouping+0x18>)
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	0a1b      	lsrs	r3, r3, #8
 800b7fa:	f003 0307 	and.w	r3, r3, #7
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	e000ed00 	.word	0xe000ed00

0800b80c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	db0b      	blt.n	800b836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b81e:	79fb      	ldrb	r3, [r7, #7]
 800b820:	f003 021f 	and.w	r2, r3, #31
 800b824:	4907      	ldr	r1, [pc, #28]	; (800b844 <__NVIC_EnableIRQ+0x38>)
 800b826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b82a:	095b      	lsrs	r3, r3, #5
 800b82c:	2001      	movs	r0, #1
 800b82e:	fa00 f202 	lsl.w	r2, r0, r2
 800b832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	e000e100 	.word	0xe000e100

0800b848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	6039      	str	r1, [r7, #0]
 800b852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	db0a      	blt.n	800b872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	490c      	ldr	r1, [pc, #48]	; (800b894 <__NVIC_SetPriority+0x4c>)
 800b862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b866:	0112      	lsls	r2, r2, #4
 800b868:	b2d2      	uxtb	r2, r2
 800b86a:	440b      	add	r3, r1
 800b86c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b870:	e00a      	b.n	800b888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	b2da      	uxtb	r2, r3
 800b876:	4908      	ldr	r1, [pc, #32]	; (800b898 <__NVIC_SetPriority+0x50>)
 800b878:	79fb      	ldrb	r3, [r7, #7]
 800b87a:	f003 030f 	and.w	r3, r3, #15
 800b87e:	3b04      	subs	r3, #4
 800b880:	0112      	lsls	r2, r2, #4
 800b882:	b2d2      	uxtb	r2, r2
 800b884:	440b      	add	r3, r1
 800b886:	761a      	strb	r2, [r3, #24]
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	e000e100 	.word	0xe000e100
 800b898:	e000ed00 	.word	0xe000ed00

0800b89c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b089      	sub	sp, #36	; 0x24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f003 0307 	and.w	r3, r3, #7
 800b8ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f1c3 0307 	rsb	r3, r3, #7
 800b8b6:	2b04      	cmp	r3, #4
 800b8b8:	bf28      	it	cs
 800b8ba:	2304      	movcs	r3, #4
 800b8bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	2b06      	cmp	r3, #6
 800b8c4:	d902      	bls.n	800b8cc <NVIC_EncodePriority+0x30>
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	3b03      	subs	r3, #3
 800b8ca:	e000      	b.n	800b8ce <NVIC_EncodePriority+0x32>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8da:	43da      	mvns	r2, r3
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	401a      	ands	r2, r3
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b8e4:	f04f 31ff 	mov.w	r1, #4294967295
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ee:	43d9      	mvns	r1, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8f4:	4313      	orrs	r3, r2
         );
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3724      	adds	r7, #36	; 0x24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff ff4c 	bl	800b7a8 <__NVIC_SetPriorityGrouping>
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b92a:	f7ff ff61 	bl	800b7f0 <__NVIC_GetPriorityGrouping>
 800b92e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	68b9      	ldr	r1, [r7, #8]
 800b934:	6978      	ldr	r0, [r7, #20]
 800b936:	f7ff ffb1 	bl	800b89c <NVIC_EncodePriority>
 800b93a:	4602      	mov	r2, r0
 800b93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b940:	4611      	mov	r1, r2
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff ff80 	bl	800b848 <__NVIC_SetPriority>
}
 800b948:	bf00      	nop
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	4603      	mov	r3, r0
 800b958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b95a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff ff54 	bl	800b80c <__NVIC_EnableIRQ>
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b974:	2300      	movs	r3, #0
 800b976:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b978:	f7ff fee8 	bl	800b74c <HAL_GetTick>
 800b97c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e099      	b.n	800babc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2202      	movs	r2, #2
 800b994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f022 0201 	bic.w	r2, r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9a8:	e00f      	b.n	800b9ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b9aa:	f7ff fecf 	bl	800b74c <HAL_GetTick>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	2b05      	cmp	r3, #5
 800b9b6:	d908      	bls.n	800b9ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2203      	movs	r2, #3
 800b9c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	e078      	b.n	800babc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e8      	bne.n	800b9aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	4b38      	ldr	r3, [pc, #224]	; (800bac4 <HAL_DMA_Init+0x158>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b9f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
 800ba14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	2b04      	cmp	r3, #4
 800ba22:	d107      	bne.n	800ba34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	695b      	ldr	r3, [r3, #20]
 800ba42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	f023 0307 	bic.w	r3, r3, #7
 800ba4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	2b04      	cmp	r3, #4
 800ba5c:	d117      	bne.n	800ba8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00e      	beq.n	800ba8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fa9f 	bl	800bfb4 <DMA_CheckFifoParam>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d008      	beq.n	800ba8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2240      	movs	r2, #64	; 0x40
 800ba80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e016      	b.n	800babc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fa56 	bl	800bf48 <DMA_CalcBaseAndBitshift>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baa4:	223f      	movs	r2, #63	; 0x3f
 800baa6:	409a      	lsls	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3718      	adds	r7, #24
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	f010803f 	.word	0xf010803f

0800bac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bade:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d101      	bne.n	800baee <HAL_DMA_Start_IT+0x26>
 800baea:	2302      	movs	r3, #2
 800baec:	e040      	b.n	800bb70 <HAL_DMA_Start_IT+0xa8>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2201      	movs	r2, #1
 800baf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d12f      	bne.n	800bb62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2202      	movs	r2, #2
 800bb06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	68b9      	ldr	r1, [r7, #8]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f000 f9e8 	bl	800beec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb20:	223f      	movs	r2, #63	; 0x3f
 800bb22:	409a      	lsls	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f042 0216 	orr.w	r2, r2, #22
 800bb36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d007      	beq.n	800bb50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f042 0208 	orr.w	r2, r2, #8
 800bb4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f042 0201 	orr.w	r2, r2, #1
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	e005      	b.n	800bb6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d004      	beq.n	800bb96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2280      	movs	r2, #128	; 0x80
 800bb90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e00c      	b.n	800bbb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2205      	movs	r2, #5
 800bb9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0201 	bic.w	r2, r2, #1
 800bbac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bbc8:	4b92      	ldr	r3, [pc, #584]	; (800be14 <HAL_DMA_IRQHandler+0x258>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a92      	ldr	r2, [pc, #584]	; (800be18 <HAL_DMA_IRQHandler+0x25c>)
 800bbce:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd2:	0a9b      	lsrs	r3, r3, #10
 800bbd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbe6:	2208      	movs	r2, #8
 800bbe8:	409a      	lsls	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	4013      	ands	r3, r2
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d01a      	beq.n	800bc28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 0304 	and.w	r3, r3, #4
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d013      	beq.n	800bc28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f022 0204 	bic.w	r2, r2, #4
 800bc0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc14:	2208      	movs	r2, #8
 800bc16:	409a      	lsls	r2, r3
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc20:	f043 0201 	orr.w	r2, r3, #1
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	409a      	lsls	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4013      	ands	r3, r2
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d012      	beq.n	800bc5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00b      	beq.n	800bc5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	409a      	lsls	r2, r3
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc56:	f043 0202 	orr.w	r2, r3, #2
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc62:	2204      	movs	r2, #4
 800bc64:	409a      	lsls	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	4013      	ands	r3, r2
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d012      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0302 	and.w	r3, r3, #2
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc80:	2204      	movs	r2, #4
 800bc82:	409a      	lsls	r2, r3
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc8c:	f043 0204 	orr.w	r2, r3, #4
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc98:	2210      	movs	r2, #16
 800bc9a:	409a      	lsls	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4013      	ands	r3, r2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d043      	beq.n	800bd2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0308 	and.w	r3, r3, #8
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d03c      	beq.n	800bd2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcb6:	2210      	movs	r2, #16
 800bcb8:	409a      	lsls	r2, r3
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d018      	beq.n	800bcfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d108      	bne.n	800bcec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d024      	beq.n	800bd2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	4798      	blx	r3
 800bcea:	e01f      	b.n	800bd2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01b      	beq.n	800bd2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	4798      	blx	r3
 800bcfc:	e016      	b.n	800bd2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d107      	bne.n	800bd1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f022 0208 	bic.w	r2, r2, #8
 800bd1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd30:	2220      	movs	r2, #32
 800bd32:	409a      	lsls	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	4013      	ands	r3, r2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 808e 	beq.w	800be5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 0310 	and.w	r3, r3, #16
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 8086 	beq.w	800be5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd52:	2220      	movs	r2, #32
 800bd54:	409a      	lsls	r2, r3
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b05      	cmp	r3, #5
 800bd64:	d136      	bne.n	800bdd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 0216 	bic.w	r2, r2, #22
 800bd74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	695a      	ldr	r2, [r3, #20]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d103      	bne.n	800bd96 <HAL_DMA_IRQHandler+0x1da>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d007      	beq.n	800bda6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f022 0208 	bic.w	r2, r2, #8
 800bda4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdaa:	223f      	movs	r2, #63	; 0x3f
 800bdac:	409a      	lsls	r2, r3
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d07d      	beq.n	800bec6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	4798      	blx	r3
        }
        return;
 800bdd2:	e078      	b.n	800bec6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d01c      	beq.n	800be1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d108      	bne.n	800be02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d030      	beq.n	800be5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	4798      	blx	r3
 800be00:	e02b      	b.n	800be5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d027      	beq.n	800be5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	4798      	blx	r3
 800be12:	e022      	b.n	800be5a <HAL_DMA_IRQHandler+0x29e>
 800be14:	20000888 	.word	0x20000888
 800be18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10f      	bne.n	800be4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f022 0210 	bic.w	r2, r2, #16
 800be38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d003      	beq.n	800be5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d032      	beq.n	800bec8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d022      	beq.n	800beb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2205      	movs	r2, #5
 800be72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f022 0201 	bic.w	r2, r2, #1
 800be84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	3301      	adds	r3, #1
 800be8a:	60bb      	str	r3, [r7, #8]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d307      	bcc.n	800bea2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1f2      	bne.n	800be86 <HAL_DMA_IRQHandler+0x2ca>
 800bea0:	e000      	b.n	800bea4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bea2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d005      	beq.n	800bec8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	4798      	blx	r3
 800bec4:	e000      	b.n	800bec8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bec6:	bf00      	nop
    }
  }
}
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop

0800bed0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bede:	b2db      	uxtb	r3, r3
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bf08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	2b40      	cmp	r3, #64	; 0x40
 800bf18:	d108      	bne.n	800bf2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bf2a:	e007      	b.n	800bf3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	60da      	str	r2, [r3, #12]
}
 800bf3c:	bf00      	nop
 800bf3e:	3714      	adds	r7, #20
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	3b10      	subs	r3, #16
 800bf58:	4a14      	ldr	r2, [pc, #80]	; (800bfac <DMA_CalcBaseAndBitshift+0x64>)
 800bf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5e:	091b      	lsrs	r3, r3, #4
 800bf60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bf62:	4a13      	ldr	r2, [pc, #76]	; (800bfb0 <DMA_CalcBaseAndBitshift+0x68>)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	4413      	add	r3, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d909      	bls.n	800bf8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bf7e:	f023 0303 	bic.w	r3, r3, #3
 800bf82:	1d1a      	adds	r2, r3, #4
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	659a      	str	r2, [r3, #88]	; 0x58
 800bf88:	e007      	b.n	800bf9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bf92:	f023 0303 	bic.w	r3, r3, #3
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	aaaaaaab 	.word	0xaaaaaaab
 800bfb0:	0801b6c0 	.word	0x0801b6c0

0800bfb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d11f      	bne.n	800c00e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b03      	cmp	r3, #3
 800bfd2:	d855      	bhi.n	800c080 <DMA_CheckFifoParam+0xcc>
 800bfd4:	a201      	add	r2, pc, #4	; (adr r2, 800bfdc <DMA_CheckFifoParam+0x28>)
 800bfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfda:	bf00      	nop
 800bfdc:	0800bfed 	.word	0x0800bfed
 800bfe0:	0800bfff 	.word	0x0800bfff
 800bfe4:	0800bfed 	.word	0x0800bfed
 800bfe8:	0800c081 	.word	0x0800c081
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d045      	beq.n	800c084 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bffc:	e042      	b.n	800c084 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c006:	d13f      	bne.n	800c088 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c00c:	e03c      	b.n	800c088 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	699b      	ldr	r3, [r3, #24]
 800c012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c016:	d121      	bne.n	800c05c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d836      	bhi.n	800c08c <DMA_CheckFifoParam+0xd8>
 800c01e:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <DMA_CheckFifoParam+0x70>)
 800c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c024:	0800c035 	.word	0x0800c035
 800c028:	0800c03b 	.word	0x0800c03b
 800c02c:	0800c035 	.word	0x0800c035
 800c030:	0800c04d 	.word	0x0800c04d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	73fb      	strb	r3, [r7, #15]
      break;
 800c038:	e02f      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c042:	2b00      	cmp	r3, #0
 800c044:	d024      	beq.n	800c090 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c04a:	e021      	b.n	800c090 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c050:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c054:	d11e      	bne.n	800c094 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c05a:	e01b      	b.n	800c094 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d902      	bls.n	800c068 <DMA_CheckFifoParam+0xb4>
 800c062:	2b03      	cmp	r3, #3
 800c064:	d003      	beq.n	800c06e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c066:	e018      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	73fb      	strb	r3, [r7, #15]
      break;
 800c06c:	e015      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00e      	beq.n	800c098 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	73fb      	strb	r3, [r7, #15]
      break;
 800c07e:	e00b      	b.n	800c098 <DMA_CheckFifoParam+0xe4>
      break;
 800c080:	bf00      	nop
 800c082:	e00a      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
      break;
 800c084:	bf00      	nop
 800c086:	e008      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
      break;
 800c088:	bf00      	nop
 800c08a:	e006      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
      break;
 800c08c:	bf00      	nop
 800c08e:	e004      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
      break;
 800c090:	bf00      	nop
 800c092:	e002      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
      break;   
 800c094:	bf00      	nop
 800c096:	e000      	b.n	800c09a <DMA_CheckFifoParam+0xe6>
      break;
 800c098:	bf00      	nop
    }
  } 
  
  return status; 
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b089      	sub	sp, #36	; 0x24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c0be:	2300      	movs	r3, #0
 800c0c0:	61fb      	str	r3, [r7, #28]
 800c0c2:	e16b      	b.n	800c39c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c0d8:	693a      	ldr	r2, [r7, #16]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	f040 815a 	bne.w	800c396 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d00b      	beq.n	800c102 <HAL_GPIO_Init+0x5a>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d007      	beq.n	800c102 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c0f6:	2b11      	cmp	r3, #17
 800c0f8:	d003      	beq.n	800c102 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	2b12      	cmp	r3, #18
 800c100:	d130      	bne.n	800c164 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	2203      	movs	r2, #3
 800c10e:	fa02 f303 	lsl.w	r3, r2, r3
 800c112:	43db      	mvns	r3, r3
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	4013      	ands	r3, r2
 800c118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	fa02 f303 	lsl.w	r3, r2, r3
 800c126:	69ba      	ldr	r2, [r7, #24]
 800c128:	4313      	orrs	r3, r2
 800c12a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c138:	2201      	movs	r2, #1
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	fa02 f303 	lsl.w	r3, r2, r3
 800c140:	43db      	mvns	r3, r3
 800c142:	69ba      	ldr	r2, [r7, #24]
 800c144:	4013      	ands	r3, r2
 800c146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	091b      	lsrs	r3, r3, #4
 800c14e:	f003 0201 	and.w	r2, r3, #1
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	fa02 f303 	lsl.w	r3, r2, r3
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	69ba      	ldr	r2, [r7, #24]
 800c162:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	005b      	lsls	r3, r3, #1
 800c16e:	2203      	movs	r2, #3
 800c170:	fa02 f303 	lsl.w	r3, r2, r3
 800c174:	43db      	mvns	r3, r3
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	4013      	ands	r3, r2
 800c17a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	689a      	ldr	r2, [r3, #8]
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	fa02 f303 	lsl.w	r3, r2, r3
 800c188:	69ba      	ldr	r2, [r7, #24]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d003      	beq.n	800c1a4 <HAL_GPIO_Init+0xfc>
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	2b12      	cmp	r3, #18
 800c1a2:	d123      	bne.n	800c1ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	08da      	lsrs	r2, r3, #3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	3208      	adds	r2, #8
 800c1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	f003 0307 	and.w	r3, r3, #7
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	220f      	movs	r2, #15
 800c1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c0:	43db      	mvns	r3, r3
 800c1c2:	69ba      	ldr	r2, [r7, #24]
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	691a      	ldr	r2, [r3, #16]
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	f003 0307 	and.w	r3, r3, #7
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d8:	69ba      	ldr	r2, [r7, #24]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	08da      	lsrs	r2, r3, #3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3208      	adds	r2, #8
 800c1e6:	69b9      	ldr	r1, [r7, #24]
 800c1e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	2203      	movs	r2, #3
 800c1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1fc:	43db      	mvns	r3, r3
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	4013      	ands	r3, r2
 800c202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	f003 0203 	and.w	r2, r3, #3
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	fa02 f303 	lsl.w	r3, r2, r3
 800c214:	69ba      	ldr	r2, [r7, #24]
 800c216:	4313      	orrs	r3, r2
 800c218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	69ba      	ldr	r2, [r7, #24]
 800c21e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 80b4 	beq.w	800c396 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	4b5f      	ldr	r3, [pc, #380]	; (800c3b0 <HAL_GPIO_Init+0x308>)
 800c234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c236:	4a5e      	ldr	r2, [pc, #376]	; (800c3b0 <HAL_GPIO_Init+0x308>)
 800c238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c23c:	6453      	str	r3, [r2, #68]	; 0x44
 800c23e:	4b5c      	ldr	r3, [pc, #368]	; (800c3b0 <HAL_GPIO_Init+0x308>)
 800c240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c24a:	4a5a      	ldr	r2, [pc, #360]	; (800c3b4 <HAL_GPIO_Init+0x30c>)
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	089b      	lsrs	r3, r3, #2
 800c250:	3302      	adds	r3, #2
 800c252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	220f      	movs	r2, #15
 800c262:	fa02 f303 	lsl.w	r3, r2, r3
 800c266:	43db      	mvns	r3, r3
 800c268:	69ba      	ldr	r2, [r7, #24]
 800c26a:	4013      	ands	r3, r2
 800c26c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a51      	ldr	r2, [pc, #324]	; (800c3b8 <HAL_GPIO_Init+0x310>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d02b      	beq.n	800c2ce <HAL_GPIO_Init+0x226>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a50      	ldr	r2, [pc, #320]	; (800c3bc <HAL_GPIO_Init+0x314>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d025      	beq.n	800c2ca <HAL_GPIO_Init+0x222>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a4f      	ldr	r2, [pc, #316]	; (800c3c0 <HAL_GPIO_Init+0x318>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d01f      	beq.n	800c2c6 <HAL_GPIO_Init+0x21e>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a4e      	ldr	r2, [pc, #312]	; (800c3c4 <HAL_GPIO_Init+0x31c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d019      	beq.n	800c2c2 <HAL_GPIO_Init+0x21a>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a4d      	ldr	r2, [pc, #308]	; (800c3c8 <HAL_GPIO_Init+0x320>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d013      	beq.n	800c2be <HAL_GPIO_Init+0x216>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a4c      	ldr	r2, [pc, #304]	; (800c3cc <HAL_GPIO_Init+0x324>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d00d      	beq.n	800c2ba <HAL_GPIO_Init+0x212>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a4b      	ldr	r2, [pc, #300]	; (800c3d0 <HAL_GPIO_Init+0x328>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d007      	beq.n	800c2b6 <HAL_GPIO_Init+0x20e>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a4a      	ldr	r2, [pc, #296]	; (800c3d4 <HAL_GPIO_Init+0x32c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d101      	bne.n	800c2b2 <HAL_GPIO_Init+0x20a>
 800c2ae:	2307      	movs	r3, #7
 800c2b0:	e00e      	b.n	800c2d0 <HAL_GPIO_Init+0x228>
 800c2b2:	2308      	movs	r3, #8
 800c2b4:	e00c      	b.n	800c2d0 <HAL_GPIO_Init+0x228>
 800c2b6:	2306      	movs	r3, #6
 800c2b8:	e00a      	b.n	800c2d0 <HAL_GPIO_Init+0x228>
 800c2ba:	2305      	movs	r3, #5
 800c2bc:	e008      	b.n	800c2d0 <HAL_GPIO_Init+0x228>
 800c2be:	2304      	movs	r3, #4
 800c2c0:	e006      	b.n	800c2d0 <HAL_GPIO_Init+0x228>
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e004      	b.n	800c2d0 <HAL_GPIO_Init+0x228>
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	e002      	b.n	800c2d0 <HAL_GPIO_Init+0x228>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e000      	b.n	800c2d0 <HAL_GPIO_Init+0x228>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	69fa      	ldr	r2, [r7, #28]
 800c2d2:	f002 0203 	and.w	r2, r2, #3
 800c2d6:	0092      	lsls	r2, r2, #2
 800c2d8:	4093      	lsls	r3, r2
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c2e0:	4934      	ldr	r1, [pc, #208]	; (800c3b4 <HAL_GPIO_Init+0x30c>)
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	089b      	lsrs	r3, r3, #2
 800c2e6:	3302      	adds	r3, #2
 800c2e8:	69ba      	ldr	r2, [r7, #24]
 800c2ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c2ee:	4b3a      	ldr	r3, [pc, #232]	; (800c3d8 <HAL_GPIO_Init+0x330>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	43db      	mvns	r3, r3
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c30a:	69ba      	ldr	r2, [r7, #24]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	4313      	orrs	r3, r2
 800c310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c312:	4a31      	ldr	r2, [pc, #196]	; (800c3d8 <HAL_GPIO_Init+0x330>)
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c318:	4b2f      	ldr	r3, [pc, #188]	; (800c3d8 <HAL_GPIO_Init+0x330>)
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	43db      	mvns	r3, r3
 800c322:	69ba      	ldr	r2, [r7, #24]
 800c324:	4013      	ands	r3, r2
 800c326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	4313      	orrs	r3, r2
 800c33a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c33c:	4a26      	ldr	r2, [pc, #152]	; (800c3d8 <HAL_GPIO_Init+0x330>)
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c342:	4b25      	ldr	r3, [pc, #148]	; (800c3d8 <HAL_GPIO_Init+0x330>)
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	43db      	mvns	r3, r3
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	4013      	ands	r3, r2
 800c350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d003      	beq.n	800c366 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c35e:	69ba      	ldr	r2, [r7, #24]
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	4313      	orrs	r3, r2
 800c364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c366:	4a1c      	ldr	r2, [pc, #112]	; (800c3d8 <HAL_GPIO_Init+0x330>)
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c36c:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <HAL_GPIO_Init+0x330>)
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	43db      	mvns	r3, r3
 800c376:	69ba      	ldr	r2, [r7, #24]
 800c378:	4013      	ands	r3, r2
 800c37a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d003      	beq.n	800c390 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c390:	4a11      	ldr	r2, [pc, #68]	; (800c3d8 <HAL_GPIO_Init+0x330>)
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	3301      	adds	r3, #1
 800c39a:	61fb      	str	r3, [r7, #28]
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	2b0f      	cmp	r3, #15
 800c3a0:	f67f ae90 	bls.w	800c0c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c3a4:	bf00      	nop
 800c3a6:	3724      	adds	r7, #36	; 0x24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	40023800 	.word	0x40023800
 800c3b4:	40013800 	.word	0x40013800
 800c3b8:	40020000 	.word	0x40020000
 800c3bc:	40020400 	.word	0x40020400
 800c3c0:	40020800 	.word	0x40020800
 800c3c4:	40020c00 	.word	0x40020c00
 800c3c8:	40021000 	.word	0x40021000
 800c3cc:	40021400 	.word	0x40021400
 800c3d0:	40021800 	.word	0x40021800
 800c3d4:	40021c00 	.word	0x40021c00
 800c3d8:	40013c00 	.word	0x40013c00

0800c3dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	807b      	strh	r3, [r7, #2]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c3ec:	787b      	ldrb	r3, [r7, #1]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c3f2:	887a      	ldrh	r2, [r7, #2]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c3f8:	e003      	b.n	800c402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c3fa:	887b      	ldrh	r3, [r7, #2]
 800c3fc:	041a      	lsls	r2, r3, #16
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	619a      	str	r2, [r3, #24]
}
 800c402:	bf00      	nop
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
	...

0800c410 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	e043      	b.n	800c4ae <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d106      	bne.n	800c440 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f7f7 fcbc 	bl	8003db8 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	3308      	adds	r3, #8
 800c448:	4619      	mov	r1, r3
 800c44a:	4610      	mov	r0, r2
 800c44c:	f003 f97e 	bl	800f74c <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6818      	ldr	r0, [r3, #0]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	461a      	mov	r2, r3
 800c45a:	68b9      	ldr	r1, [r7, #8]
 800c45c:	f003 f9c8 	bl	800f7f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6858      	ldr	r0, [r3, #4]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	689a      	ldr	r2, [r3, #8]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46c:	6879      	ldr	r1, [r7, #4]
 800c46e:	f003 f9fd 	bl	800f86c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	6892      	ldr	r2, [r2, #8]
 800c47a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	6892      	ldr	r2, [r2, #8]
 800c486:	f041 0101 	orr.w	r1, r1, #1
 800c48a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	695b      	ldr	r3, [r3, #20]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d103      	bne.n	800c49e <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c496:	4b08      	ldr	r3, [pc, #32]	; (800c4b8 <HAL_NOR_Init+0xa8>)
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
 800c49c:	e002      	b.n	800c4a4 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c49e:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <HAL_NOR_Init+0xa8>)
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	2000105c 	.word	0x2000105c

0800c4bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4be:	b08f      	sub	sp, #60	; 0x3c
 800c4c0:	af0a      	add	r7, sp, #40	; 0x28
 800c4c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d101      	bne.n	800c4ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e10f      	b.n	800c6ee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d106      	bne.n	800c4ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f009 f9d9 	bl	80158a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d102      	bne.n	800c508 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f003 fb02 	bl	800fb16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	603b      	str	r3, [r7, #0]
 800c518:	687e      	ldr	r6, [r7, #4]
 800c51a:	466d      	mov	r5, sp
 800c51c:	f106 0410 	add.w	r4, r6, #16
 800c520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c528:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c52c:	e885 0003 	stmia.w	r5, {r0, r1}
 800c530:	1d33      	adds	r3, r6, #4
 800c532:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c534:	6838      	ldr	r0, [r7, #0]
 800c536:	f003 f9d9 	bl	800f8ec <USB_CoreInit>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d005      	beq.n	800c54c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2202      	movs	r2, #2
 800c544:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	e0d0      	b.n	800c6ee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2100      	movs	r1, #0
 800c552:	4618      	mov	r0, r3
 800c554:	f003 faf0 	bl	800fb38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]
 800c55c:	e04a      	b.n	800c5f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c55e:	7bfa      	ldrb	r2, [r7, #15]
 800c560:	6879      	ldr	r1, [r7, #4]
 800c562:	4613      	mov	r3, r2
 800c564:	00db      	lsls	r3, r3, #3
 800c566:	1a9b      	subs	r3, r3, r2
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	440b      	add	r3, r1
 800c56c:	333d      	adds	r3, #61	; 0x3d
 800c56e:	2201      	movs	r2, #1
 800c570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c572:	7bfa      	ldrb	r2, [r7, #15]
 800c574:	6879      	ldr	r1, [r7, #4]
 800c576:	4613      	mov	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	1a9b      	subs	r3, r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	440b      	add	r3, r1
 800c580:	333c      	adds	r3, #60	; 0x3c
 800c582:	7bfa      	ldrb	r2, [r7, #15]
 800c584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c586:	7bfa      	ldrb	r2, [r7, #15]
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	b298      	uxth	r0, r3
 800c58c:	6879      	ldr	r1, [r7, #4]
 800c58e:	4613      	mov	r3, r2
 800c590:	00db      	lsls	r3, r3, #3
 800c592:	1a9b      	subs	r3, r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	440b      	add	r3, r1
 800c598:	3342      	adds	r3, #66	; 0x42
 800c59a:	4602      	mov	r2, r0
 800c59c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c59e:	7bfa      	ldrb	r2, [r7, #15]
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	00db      	lsls	r3, r3, #3
 800c5a6:	1a9b      	subs	r3, r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	440b      	add	r3, r1
 800c5ac:	333f      	adds	r3, #63	; 0x3f
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c5b2:	7bfa      	ldrb	r2, [r7, #15]
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	00db      	lsls	r3, r3, #3
 800c5ba:	1a9b      	subs	r3, r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	440b      	add	r3, r1
 800c5c0:	3344      	adds	r3, #68	; 0x44
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c5c6:	7bfa      	ldrb	r2, [r7, #15]
 800c5c8:	6879      	ldr	r1, [r7, #4]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	1a9b      	subs	r3, r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	440b      	add	r3, r1
 800c5d4:	3348      	adds	r3, #72	; 0x48
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c5da:	7bfa      	ldrb	r2, [r7, #15]
 800c5dc:	6879      	ldr	r1, [r7, #4]
 800c5de:	4613      	mov	r3, r2
 800c5e0:	00db      	lsls	r3, r3, #3
 800c5e2:	1a9b      	subs	r3, r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	440b      	add	r3, r1
 800c5e8:	3350      	adds	r3, #80	; 0x50
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5ee:	7bfb      	ldrb	r3, [r7, #15]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	73fb      	strb	r3, [r7, #15]
 800c5f4:	7bfa      	ldrb	r2, [r7, #15]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d3af      	bcc.n	800c55e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5fe:	2300      	movs	r3, #0
 800c600:	73fb      	strb	r3, [r7, #15]
 800c602:	e044      	b.n	800c68e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c604:	7bfa      	ldrb	r2, [r7, #15]
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	4613      	mov	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	440b      	add	r3, r1
 800c612:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c61a:	7bfa      	ldrb	r2, [r7, #15]
 800c61c:	6879      	ldr	r1, [r7, #4]
 800c61e:	4613      	mov	r3, r2
 800c620:	00db      	lsls	r3, r3, #3
 800c622:	1a9b      	subs	r3, r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	440b      	add	r3, r1
 800c628:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c62c:	7bfa      	ldrb	r2, [r7, #15]
 800c62e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c630:	7bfa      	ldrb	r2, [r7, #15]
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	4613      	mov	r3, r2
 800c636:	00db      	lsls	r3, r3, #3
 800c638:	1a9b      	subs	r3, r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	440b      	add	r3, r1
 800c63e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c642:	2200      	movs	r2, #0
 800c644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c646:	7bfa      	ldrb	r2, [r7, #15]
 800c648:	6879      	ldr	r1, [r7, #4]
 800c64a:	4613      	mov	r3, r2
 800c64c:	00db      	lsls	r3, r3, #3
 800c64e:	1a9b      	subs	r3, r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	440b      	add	r3, r1
 800c654:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c65c:	7bfa      	ldrb	r2, [r7, #15]
 800c65e:	6879      	ldr	r1, [r7, #4]
 800c660:	4613      	mov	r3, r2
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	1a9b      	subs	r3, r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	440b      	add	r3, r1
 800c66a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c66e:	2200      	movs	r2, #0
 800c670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c672:	7bfa      	ldrb	r2, [r7, #15]
 800c674:	6879      	ldr	r1, [r7, #4]
 800c676:	4613      	mov	r3, r2
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	1a9b      	subs	r3, r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	440b      	add	r3, r1
 800c680:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c688:	7bfb      	ldrb	r3, [r7, #15]
 800c68a:	3301      	adds	r3, #1
 800c68c:	73fb      	strb	r3, [r7, #15]
 800c68e:	7bfa      	ldrb	r2, [r7, #15]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	429a      	cmp	r2, r3
 800c696:	d3b5      	bcc.n	800c604 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	603b      	str	r3, [r7, #0]
 800c69e:	687e      	ldr	r6, [r7, #4]
 800c6a0:	466d      	mov	r5, sp
 800c6a2:	f106 0410 	add.w	r4, r6, #16
 800c6a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c6b2:	e885 0003 	stmia.w	r5, {r0, r1}
 800c6b6:	1d33      	adds	r3, r6, #4
 800c6b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6ba:	6838      	ldr	r0, [r7, #0]
 800c6bc:	f003 fa66 	bl	800fb8c <USB_DevInit>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d005      	beq.n	800c6d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2202      	movs	r2, #2
 800c6ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e00d      	b.n	800c6ee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f004 faae 	bl	8010c48 <USB_DevDisconnect>

  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d101      	bne.n	800c712 <HAL_PCD_Start+0x1c>
 800c70e:	2302      	movs	r3, #2
 800c710:	e020      	b.n	800c754 <HAL_PCD_Start+0x5e>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d109      	bne.n	800c736 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c726:	2b01      	cmp	r3, #1
 800c728:	d005      	beq.n	800c736 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f003 f9da 	bl	800faf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4618      	mov	r0, r3
 800c746:	f004 fa5e 	bl	8010c06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c75c:	b590      	push	{r4, r7, lr}
 800c75e:	b08d      	sub	sp, #52	; 0x34
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4618      	mov	r0, r3
 800c774:	f004 fb1c 	bl	8010db0 <USB_GetMode>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f040 839d 	bne.w	800ceba <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4618      	mov	r0, r3
 800c786:	f004 fa80 	bl	8010c8a <USB_ReadInterrupts>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 8393 	beq.w	800ceb8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4618      	mov	r0, r3
 800c798:	f004 fa77 	bl	8010c8a <USB_ReadInterrupts>
 800c79c:	4603      	mov	r3, r0
 800c79e:	f003 0302 	and.w	r3, r3, #2
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d107      	bne.n	800c7b6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	695a      	ldr	r2, [r3, #20]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f002 0202 	and.w	r2, r2, #2
 800c7b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f004 fa65 	bl	8010c8a <USB_ReadInterrupts>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	f003 0310 	and.w	r3, r3, #16
 800c7c6:	2b10      	cmp	r3, #16
 800c7c8:	d161      	bne.n	800c88e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	699a      	ldr	r2, [r3, #24]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f022 0210 	bic.w	r2, r2, #16
 800c7d8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	f003 020f 	and.w	r2, r3, #15
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	00db      	lsls	r3, r3, #3
 800c7ea:	1a9b      	subs	r3, r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	0c5b      	lsrs	r3, r3, #17
 800c7fe:	f003 030f 	and.w	r3, r3, #15
 800c802:	2b02      	cmp	r3, #2
 800c804:	d124      	bne.n	800c850 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c806:	69ba      	ldr	r2, [r7, #24]
 800c808:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c80c:	4013      	ands	r3, r2
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d035      	beq.n	800c87e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	091b      	lsrs	r3, r3, #4
 800c81a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c81c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c820:	b29b      	uxth	r3, r3
 800c822:	461a      	mov	r2, r3
 800c824:	6a38      	ldr	r0, [r7, #32]
 800c826:	f004 f8cb 	bl	80109c0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	68da      	ldr	r2, [r3, #12]
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	091b      	lsrs	r3, r3, #4
 800c832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c836:	441a      	add	r2, r3
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	699a      	ldr	r2, [r3, #24]
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	091b      	lsrs	r3, r3, #4
 800c844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c848:	441a      	add	r2, r3
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	619a      	str	r2, [r3, #24]
 800c84e:	e016      	b.n	800c87e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	0c5b      	lsrs	r3, r3, #17
 800c854:	f003 030f 	and.w	r3, r3, #15
 800c858:	2b06      	cmp	r3, #6
 800c85a:	d110      	bne.n	800c87e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c862:	2208      	movs	r2, #8
 800c864:	4619      	mov	r1, r3
 800c866:	6a38      	ldr	r0, [r7, #32]
 800c868:	f004 f8aa 	bl	80109c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	699a      	ldr	r2, [r3, #24]
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	091b      	lsrs	r3, r3, #4
 800c874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c878:	441a      	add	r2, r3
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	699a      	ldr	r2, [r3, #24]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f042 0210 	orr.w	r2, r2, #16
 800c88c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4618      	mov	r0, r3
 800c894:	f004 f9f9 	bl	8010c8a <USB_ReadInterrupts>
 800c898:	4603      	mov	r3, r0
 800c89a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c89e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c8a2:	d16e      	bne.n	800c982 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f004 f9ff 	bl	8010cb0 <USB_ReadDevAllOutEpInterrupt>
 800c8b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c8b4:	e062      	b.n	800c97c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b8:	f003 0301 	and.w	r3, r3, #1
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d057      	beq.n	800c970 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8c6:	b2d2      	uxtb	r2, r2
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f004 fa24 	bl	8010d18 <USB_ReadDevOutEPInterrupt>
 800c8d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	f003 0301 	and.w	r3, r3, #1
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00c      	beq.n	800c8f6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8de:	015a      	lsls	r2, r3, #5
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c8ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fdb1 	bl	800d458 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	f003 0308 	and.w	r3, r3, #8
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00c      	beq.n	800c91a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	015a      	lsls	r2, r3, #5
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	4413      	add	r3, r2
 800c908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c90c:	461a      	mov	r2, r3
 800c90e:	2308      	movs	r3, #8
 800c910:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 feab 	bl	800d670 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	f003 0310 	and.w	r3, r3, #16
 800c920:	2b00      	cmp	r3, #0
 800c922:	d008      	beq.n	800c936 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	015a      	lsls	r2, r3, #5
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	4413      	add	r3, r2
 800c92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c930:	461a      	mov	r2, r3
 800c932:	2310      	movs	r3, #16
 800c934:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f003 0320 	and.w	r3, r3, #32
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d008      	beq.n	800c952 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	015a      	lsls	r2, r3, #5
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	4413      	add	r3, r2
 800c948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94c:	461a      	mov	r2, r3
 800c94e:	2320      	movs	r3, #32
 800c950:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d009      	beq.n	800c970 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c968:	461a      	mov	r2, r3
 800c96a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c96e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	3301      	adds	r3, #1
 800c974:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c978:	085b      	lsrs	r3, r3, #1
 800c97a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d199      	bne.n	800c8b6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4618      	mov	r0, r3
 800c988:	f004 f97f 	bl	8010c8a <USB_ReadInterrupts>
 800c98c:	4603      	mov	r3, r0
 800c98e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c996:	f040 80c0 	bne.w	800cb1a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f004 f9a0 	bl	8010ce4 <USB_ReadDevAllInEpInterrupt>
 800c9a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c9aa:	e0b2      	b.n	800cb12 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 80a7 	beq.w	800cb06 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f004 f9c6 	bl	8010d54 <USB_ReadDevInEPInterrupt>
 800c9c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d057      	beq.n	800ca84 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	f003 030f 	and.w	r3, r3, #15
 800c9da:	2201      	movs	r2, #1
 800c9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	43db      	mvns	r3, r3
 800c9ee:	69f9      	ldr	r1, [r7, #28]
 800c9f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	015a      	lsls	r2, r3, #5
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	4413      	add	r3, r2
 800ca00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca04:	461a      	mov	r2, r3
 800ca06:	2301      	movs	r3, #1
 800ca08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d132      	bne.n	800ca78 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ca12:	6879      	ldr	r1, [r7, #4]
 800ca14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca16:	4613      	mov	r3, r2
 800ca18:	00db      	lsls	r3, r3, #3
 800ca1a:	1a9b      	subs	r3, r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	440b      	add	r3, r1
 800ca20:	3348      	adds	r3, #72	; 0x48
 800ca22:	6819      	ldr	r1, [r3, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca28:	4613      	mov	r3, r2
 800ca2a:	00db      	lsls	r3, r3, #3
 800ca2c:	1a9b      	subs	r3, r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4403      	add	r3, r0
 800ca32:	3344      	adds	r3, #68	; 0x44
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4419      	add	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	1a9b      	subs	r3, r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4403      	add	r3, r0
 800ca46:	3348      	adds	r3, #72	; 0x48
 800ca48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d113      	bne.n	800ca78 <HAL_PCD_IRQHandler+0x31c>
 800ca50:	6879      	ldr	r1, [r7, #4]
 800ca52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca54:	4613      	mov	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	1a9b      	subs	r3, r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	3350      	adds	r3, #80	; 0x50
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d108      	bne.n	800ca78 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6818      	ldr	r0, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ca70:	461a      	mov	r2, r3
 800ca72:	2101      	movs	r1, #1
 800ca74:	f004 f9ce 	bl	8010e14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f008 ff8f 	bl	80159a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	f003 0308 	and.w	r3, r3, #8
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d008      	beq.n	800caa0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca90:	015a      	lsls	r2, r3, #5
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	4413      	add	r3, r2
 800ca96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	2308      	movs	r3, #8
 800ca9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	f003 0310 	and.w	r3, r3, #16
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d008      	beq.n	800cabc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab6:	461a      	mov	r2, r3
 800cab8:	2310      	movs	r3, #16
 800caba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d008      	beq.n	800cad8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac8:	015a      	lsls	r2, r3, #5
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	4413      	add	r3, r2
 800cace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad2:	461a      	mov	r2, r3
 800cad4:	2340      	movs	r3, #64	; 0x40
 800cad6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	f003 0302 	and.w	r3, r3, #2
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d008      	beq.n	800caf4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae4:	015a      	lsls	r2, r3, #5
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	4413      	add	r3, r2
 800caea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caee:	461a      	mov	r2, r3
 800caf0:	2302      	movs	r3, #2
 800caf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d003      	beq.n	800cb06 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800cafe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fc1b 	bl	800d33c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb08:	3301      	adds	r3, #1
 800cb0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	085b      	lsrs	r3, r3, #1
 800cb10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f47f af49 	bne.w	800c9ac <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f004 f8b3 	bl	8010c8a <USB_ReadInterrupts>
 800cb24:	4603      	mov	r3, r0
 800cb26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb2e:	d122      	bne.n	800cb76 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	69fa      	ldr	r2, [r7, #28]
 800cb3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb3e:	f023 0301 	bic.w	r3, r3, #1
 800cb42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d108      	bne.n	800cb60 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cb56:	2100      	movs	r1, #0
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 fe27 	bl	800d7ac <HAL_PCDEx_LPM_Callback>
 800cb5e:	e002      	b.n	800cb66 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f008 ff95 	bl	8015a90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	695a      	ldr	r2, [r3, #20]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cb74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f004 f885 	bl	8010c8a <USB_ReadInterrupts>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb8a:	d112      	bne.n	800cbb2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d102      	bne.n	800cba2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f008 ff51 	bl	8015a44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	695a      	ldr	r2, [r3, #20]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800cbb0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f004 f867 	bl	8010c8a <USB_ReadInterrupts>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbc6:	f040 80c7 	bne.w	800cd58 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	69fa      	ldr	r2, [r7, #28]
 800cbd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbd8:	f023 0301 	bic.w	r3, r3, #1
 800cbdc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2110      	movs	r1, #16
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f003 f935 	bl	800fe54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbea:	2300      	movs	r3, #0
 800cbec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbee:	e056      	b.n	800cc9e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc14:	0151      	lsls	r1, r2, #5
 800cc16:	69fa      	ldr	r2, [r7, #28]
 800cc18:	440a      	add	r2, r1
 800cc1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc22:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc34:	0151      	lsls	r1, r2, #5
 800cc36:	69fa      	ldr	r2, [r7, #28]
 800cc38:	440a      	add	r2, r1
 800cc3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc50:	461a      	mov	r2, r3
 800cc52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	015a      	lsls	r2, r3, #5
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	4413      	add	r3, r2
 800cc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc68:	0151      	lsls	r1, r2, #5
 800cc6a:	69fa      	ldr	r2, [r7, #28]
 800cc6c:	440a      	add	r2, r1
 800cc6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc88:	0151      	lsls	r1, r2, #5
 800cc8a:	69fa      	ldr	r2, [r7, #28]
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d3a3      	bcc.n	800cbf0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccae:	69db      	ldr	r3, [r3, #28]
 800ccb0:	69fa      	ldr	r2, [r7, #28]
 800ccb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccb6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ccba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d016      	beq.n	800ccf2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccce:	69fa      	ldr	r2, [r7, #28]
 800ccd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccd4:	f043 030b 	orr.w	r3, r3, #11
 800ccd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cce4:	69fa      	ldr	r2, [r7, #28]
 800cce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccea:	f043 030b 	orr.w	r3, r3, #11
 800ccee:	6453      	str	r3, [r2, #68]	; 0x44
 800ccf0:	e015      	b.n	800cd1e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccf8:	695b      	ldr	r3, [r3, #20]
 800ccfa:	69fa      	ldr	r2, [r7, #28]
 800ccfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cd04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800cd08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	69fa      	ldr	r2, [r7, #28]
 800cd14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd18:	f043 030b 	orr.w	r3, r3, #11
 800cd1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	69fa      	ldr	r2, [r7, #28]
 800cd28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cd30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6818      	ldr	r0, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cd42:	461a      	mov	r2, r3
 800cd44:	f004 f866 	bl	8010e14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	695a      	ldr	r2, [r3, #20]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cd56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f003 ff94 	bl	8010c8a <USB_ReadInterrupts>
 800cd62:	4603      	mov	r3, r0
 800cd64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd6c:	d124      	bne.n	800cdb8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4618      	mov	r0, r3
 800cd74:	f004 f82a 	bl	8010dcc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f003 f8ca 	bl	800ff16 <USB_GetDevSpeed>
 800cd82:	4603      	mov	r3, r0
 800cd84:	461a      	mov	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681c      	ldr	r4, [r3, #0]
 800cd8e:	f001 f947 	bl	800e020 <HAL_RCC_GetHCLKFreq>
 800cd92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f002 fe07 	bl	800f9b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f008 fe25 	bl	80159f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	695a      	ldr	r2, [r3, #20]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800cdb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f003 ff64 	bl	8010c8a <USB_ReadInterrupts>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	f003 0308 	and.w	r3, r3, #8
 800cdc8:	2b08      	cmp	r3, #8
 800cdca:	d10a      	bne.n	800cde2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f008 fe02 	bl	80159d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	695a      	ldr	r2, [r3, #20]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f002 0208 	and.w	r2, r2, #8
 800cde0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f003 ff4f 	bl	8010c8a <USB_ReadInterrupts>
 800cdec:	4603      	mov	r3, r0
 800cdee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdf6:	d10f      	bne.n	800ce18 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	4619      	mov	r1, r3
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f008 fe64 	bl	8015ad0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	695a      	ldr	r2, [r3, #20]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ce16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f003 ff34 	bl	8010c8a <USB_ReadInterrupts>
 800ce22:	4603      	mov	r3, r0
 800ce24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce2c:	d10f      	bne.n	800ce4e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f008 fe37 	bl	8015aac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	695a      	ldr	r2, [r3, #20]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ce4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4618      	mov	r0, r3
 800ce54:	f003 ff19 	bl	8010c8a <USB_ReadInterrupts>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ce5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce62:	d10a      	bne.n	800ce7a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f008 fe45 	bl	8015af4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	695a      	ldr	r2, [r3, #20]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ce78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f003 ff03 	bl	8010c8a <USB_ReadInterrupts>
 800ce84:	4603      	mov	r3, r0
 800ce86:	f003 0304 	and.w	r3, r3, #4
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	d115      	bne.n	800ceba <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	f003 0304 	and.w	r3, r3, #4
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d002      	beq.n	800cea6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f008 fe35 	bl	8015b10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6859      	ldr	r1, [r3, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	69ba      	ldr	r2, [r7, #24]
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	605a      	str	r2, [r3, #4]
 800ceb6:	e000      	b.n	800ceba <HAL_PCD_IRQHandler+0x75e>
      return;
 800ceb8:	bf00      	nop
    }
  }
}
 800ceba:	3734      	adds	r7, #52	; 0x34
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd90      	pop	{r4, r7, pc}

0800cec0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d101      	bne.n	800ceda <HAL_PCD_SetAddress+0x1a>
 800ced6:	2302      	movs	r3, #2
 800ced8:	e013      	b.n	800cf02 <HAL_PCD_SetAddress+0x42>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	78fa      	ldrb	r2, [r7, #3]
 800cee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	78fa      	ldrb	r2, [r7, #3]
 800cef0:	4611      	mov	r1, r2
 800cef2:	4618      	mov	r0, r3
 800cef4:	f003 fe61 	bl	8010bba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b084      	sub	sp, #16
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
 800cf12:	4608      	mov	r0, r1
 800cf14:	4611      	mov	r1, r2
 800cf16:	461a      	mov	r2, r3
 800cf18:	4603      	mov	r3, r0
 800cf1a:	70fb      	strb	r3, [r7, #3]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	803b      	strh	r3, [r7, #0]
 800cf20:	4613      	mov	r3, r2
 800cf22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cf28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	da0f      	bge.n	800cf50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf30:	78fb      	ldrb	r3, [r7, #3]
 800cf32:	f003 020f 	and.w	r2, r3, #15
 800cf36:	4613      	mov	r3, r2
 800cf38:	00db      	lsls	r3, r3, #3
 800cf3a:	1a9b      	subs	r3, r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	3338      	adds	r3, #56	; 0x38
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	4413      	add	r3, r2
 800cf44:	3304      	adds	r3, #4
 800cf46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	705a      	strb	r2, [r3, #1]
 800cf4e:	e00f      	b.n	800cf70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf50:	78fb      	ldrb	r3, [r7, #3]
 800cf52:	f003 020f 	and.w	r2, r3, #15
 800cf56:	4613      	mov	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	1a9b      	subs	r3, r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	4413      	add	r3, r2
 800cf66:	3304      	adds	r3, #4
 800cf68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cf70:	78fb      	ldrb	r3, [r7, #3]
 800cf72:	f003 030f 	and.w	r3, r3, #15
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cf7c:	883a      	ldrh	r2, [r7, #0]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	78ba      	ldrb	r2, [r7, #2]
 800cf86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	785b      	ldrb	r3, [r3, #1]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d004      	beq.n	800cf9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cf9a:	78bb      	ldrb	r3, [r7, #2]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d102      	bne.n	800cfa6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d101      	bne.n	800cfb4 <HAL_PCD_EP_Open+0xaa>
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	e00e      	b.n	800cfd2 <HAL_PCD_EP_Open+0xc8>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	68f9      	ldr	r1, [r7, #12]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f002 ffcc 	bl	800ff60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cfd0:	7afb      	ldrb	r3, [r7, #11]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b084      	sub	sp, #16
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cfe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	da0f      	bge.n	800d00e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cfee:	78fb      	ldrb	r3, [r7, #3]
 800cff0:	f003 020f 	and.w	r2, r3, #15
 800cff4:	4613      	mov	r3, r2
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	1a9b      	subs	r3, r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	3338      	adds	r3, #56	; 0x38
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	4413      	add	r3, r2
 800d002:	3304      	adds	r3, #4
 800d004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2201      	movs	r2, #1
 800d00a:	705a      	strb	r2, [r3, #1]
 800d00c:	e00f      	b.n	800d02e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d00e:	78fb      	ldrb	r3, [r7, #3]
 800d010:	f003 020f 	and.w	r2, r3, #15
 800d014:	4613      	mov	r3, r2
 800d016:	00db      	lsls	r3, r3, #3
 800d018:	1a9b      	subs	r3, r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	4413      	add	r3, r2
 800d024:	3304      	adds	r3, #4
 800d026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d02e:	78fb      	ldrb	r3, [r7, #3]
 800d030:	f003 030f 	and.w	r3, r3, #15
 800d034:	b2da      	uxtb	r2, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d040:	2b01      	cmp	r3, #1
 800d042:	d101      	bne.n	800d048 <HAL_PCD_EP_Close+0x6e>
 800d044:	2302      	movs	r3, #2
 800d046:	e00e      	b.n	800d066 <HAL_PCD_EP_Close+0x8c>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68f9      	ldr	r1, [r7, #12]
 800d056:	4618      	mov	r0, r3
 800d058:	f003 f80a 	bl	8010070 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b086      	sub	sp, #24
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	607a      	str	r2, [r7, #4]
 800d078:	603b      	str	r3, [r7, #0]
 800d07a:	460b      	mov	r3, r1
 800d07c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d07e:	7afb      	ldrb	r3, [r7, #11]
 800d080:	f003 020f 	and.w	r2, r3, #15
 800d084:	4613      	mov	r3, r2
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	1a9b      	subs	r3, r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	4413      	add	r3, r2
 800d094:	3304      	adds	r3, #4
 800d096:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0b0:	7afb      	ldrb	r3, [r7, #11]
 800d0b2:	f003 030f 	and.w	r3, r3, #15
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d102      	bne.n	800d0ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d0ca:	7afb      	ldrb	r3, [r7, #11]
 800d0cc:	f003 030f 	and.w	r3, r3, #15
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d109      	bne.n	800d0e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6818      	ldr	r0, [r3, #0]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6979      	ldr	r1, [r7, #20]
 800d0e2:	f003 fae5 	bl	80106b0 <USB_EP0StartXfer>
 800d0e6:	e008      	b.n	800d0fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6818      	ldr	r0, [r3, #0]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	6979      	ldr	r1, [r7, #20]
 800d0f6:	f003 f897 	bl	8010228 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	460b      	mov	r3, r1
 800d10e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d110:	78fb      	ldrb	r3, [r7, #3]
 800d112:	f003 020f 	and.w	r2, r3, #15
 800d116:	6879      	ldr	r1, [r7, #4]
 800d118:	4613      	mov	r3, r2
 800d11a:	00db      	lsls	r3, r3, #3
 800d11c:	1a9b      	subs	r3, r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	440b      	add	r3, r1
 800d122:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d126:	681b      	ldr	r3, [r3, #0]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	607a      	str	r2, [r7, #4]
 800d13e:	603b      	str	r3, [r7, #0]
 800d140:	460b      	mov	r3, r1
 800d142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d144:	7afb      	ldrb	r3, [r7, #11]
 800d146:	f003 020f 	and.w	r2, r3, #15
 800d14a:	4613      	mov	r3, r2
 800d14c:	00db      	lsls	r3, r3, #3
 800d14e:	1a9b      	subs	r3, r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	3338      	adds	r3, #56	; 0x38
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	4413      	add	r3, r2
 800d158:	3304      	adds	r3, #4
 800d15a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2200      	movs	r2, #0
 800d16c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2201      	movs	r2, #1
 800d172:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d174:	7afb      	ldrb	r3, [r7, #11]
 800d176:	f003 030f 	and.w	r3, r3, #15
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d102      	bne.n	800d18e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d18e:	7afb      	ldrb	r3, [r7, #11]
 800d190:	f003 030f 	and.w	r3, r3, #15
 800d194:	2b00      	cmp	r3, #0
 800d196:	d109      	bne.n	800d1ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6818      	ldr	r0, [r3, #0]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	6979      	ldr	r1, [r7, #20]
 800d1a6:	f003 fa83 	bl	80106b0 <USB_EP0StartXfer>
 800d1aa:	e008      	b.n	800d1be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6818      	ldr	r0, [r3, #0]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	6979      	ldr	r1, [r7, #20]
 800d1ba:	f003 f835 	bl	8010228 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d1d4:	78fb      	ldrb	r3, [r7, #3]
 800d1d6:	f003 020f 	and.w	r2, r3, #15
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d901      	bls.n	800d1e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e050      	b.n	800d288 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d1e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	da0f      	bge.n	800d20e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1ee:	78fb      	ldrb	r3, [r7, #3]
 800d1f0:	f003 020f 	and.w	r2, r3, #15
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	00db      	lsls	r3, r3, #3
 800d1f8:	1a9b      	subs	r3, r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	3338      	adds	r3, #56	; 0x38
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	4413      	add	r3, r2
 800d202:	3304      	adds	r3, #4
 800d204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	705a      	strb	r2, [r3, #1]
 800d20c:	e00d      	b.n	800d22a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d20e:	78fa      	ldrb	r2, [r7, #3]
 800d210:	4613      	mov	r3, r2
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	1a9b      	subs	r3, r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	4413      	add	r3, r2
 800d220:	3304      	adds	r3, #4
 800d222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2201      	movs	r2, #1
 800d22e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d230:	78fb      	ldrb	r3, [r7, #3]
 800d232:	f003 030f 	and.w	r3, r3, #15
 800d236:	b2da      	uxtb	r2, r3
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d242:	2b01      	cmp	r3, #1
 800d244:	d101      	bne.n	800d24a <HAL_PCD_EP_SetStall+0x82>
 800d246:	2302      	movs	r3, #2
 800d248:	e01e      	b.n	800d288 <HAL_PCD_EP_SetStall+0xc0>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68f9      	ldr	r1, [r7, #12]
 800d258:	4618      	mov	r0, r3
 800d25a:	f003 fbda 	bl	8010a12 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	f003 030f 	and.w	r3, r3, #15
 800d264:	2b00      	cmp	r3, #0
 800d266:	d10a      	bne.n	800d27e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6818      	ldr	r0, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	b2d9      	uxtb	r1, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d278:	461a      	mov	r2, r3
 800d27a:	f003 fdcb 	bl	8010e14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d29c:	78fb      	ldrb	r3, [r7, #3]
 800d29e:	f003 020f 	and.w	r2, r3, #15
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d901      	bls.n	800d2ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e042      	b.n	800d334 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d2ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	da0f      	bge.n	800d2d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2b6:	78fb      	ldrb	r3, [r7, #3]
 800d2b8:	f003 020f 	and.w	r2, r3, #15
 800d2bc:	4613      	mov	r3, r2
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	1a9b      	subs	r3, r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	3338      	adds	r3, #56	; 0x38
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	3304      	adds	r3, #4
 800d2cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	705a      	strb	r2, [r3, #1]
 800d2d4:	e00f      	b.n	800d2f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2d6:	78fb      	ldrb	r3, [r7, #3]
 800d2d8:	f003 020f 	and.w	r2, r3, #15
 800d2dc:	4613      	mov	r3, r2
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	1a9b      	subs	r3, r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2fc:	78fb      	ldrb	r3, [r7, #3]
 800d2fe:	f003 030f 	and.w	r3, r3, #15
 800d302:	b2da      	uxtb	r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d101      	bne.n	800d316 <HAL_PCD_EP_ClrStall+0x86>
 800d312:	2302      	movs	r3, #2
 800d314:	e00e      	b.n	800d334 <HAL_PCD_EP_ClrStall+0xa4>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2201      	movs	r2, #1
 800d31a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	68f9      	ldr	r1, [r7, #12]
 800d324:	4618      	mov	r0, r3
 800d326:	f003 fbe2 	bl	8010aee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08a      	sub	sp, #40	; 0x28
 800d340:	af02      	add	r7, sp, #8
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d350:	683a      	ldr	r2, [r7, #0]
 800d352:	4613      	mov	r3, r2
 800d354:	00db      	lsls	r3, r3, #3
 800d356:	1a9b      	subs	r3, r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	3338      	adds	r3, #56	; 0x38
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	4413      	add	r3, r2
 800d360:	3304      	adds	r3, #4
 800d362:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	699a      	ldr	r2, [r3, #24]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	695b      	ldr	r3, [r3, #20]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d901      	bls.n	800d374 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	e06c      	b.n	800d44e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	695a      	ldr	r2, [r3, #20]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	69fa      	ldr	r2, [r7, #28]
 800d386:	429a      	cmp	r2, r3
 800d388:	d902      	bls.n	800d390 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	3303      	adds	r3, #3
 800d394:	089b      	lsrs	r3, r3, #2
 800d396:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d398:	e02b      	b.n	800d3f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	695a      	ldr	r2, [r3, #20]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	69fa      	ldr	r2, [r7, #28]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d902      	bls.n	800d3b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	3303      	adds	r3, #3
 800d3ba:	089b      	lsrs	r3, r3, #2
 800d3bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	68d9      	ldr	r1, [r3, #12]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	6978      	ldr	r0, [r7, #20]
 800d3d6:	f003 fabe 	bl	8010956 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	68da      	ldr	r2, [r3, #12]
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	441a      	add	r2, r3
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	699a      	ldr	r2, [r3, #24]
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	441a      	add	r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	015a      	lsls	r2, r3, #5
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	b29b      	uxth	r3, r3
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	429a      	cmp	r2, r3
 800d406:	d809      	bhi.n	800d41c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	699a      	ldr	r2, [r3, #24]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d410:	429a      	cmp	r2, r3
 800d412:	d203      	bcs.n	800d41c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	695b      	ldr	r3, [r3, #20]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1be      	bne.n	800d39a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	695a      	ldr	r2, [r3, #20]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	429a      	cmp	r2, r3
 800d426:	d811      	bhi.n	800d44c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	f003 030f 	and.w	r3, r3, #15
 800d42e:	2201      	movs	r2, #1
 800d430:	fa02 f303 	lsl.w	r3, r2, r3
 800d434:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d43c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	43db      	mvns	r3, r3
 800d442:	6939      	ldr	r1, [r7, #16]
 800d444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d448:	4013      	ands	r3, r2
 800d44a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3720      	adds	r7, #32
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	333c      	adds	r3, #60	; 0x3c
 800d470:	3304      	adds	r3, #4
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	015a      	lsls	r2, r3, #5
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	4413      	add	r3, r2
 800d47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	f040 80a0 	bne.w	800d5d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	f003 0308 	and.w	r3, r3, #8
 800d496:	2b00      	cmp	r3, #0
 800d498:	d015      	beq.n	800d4c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4a72      	ldr	r2, [pc, #456]	; (800d668 <PCD_EP_OutXfrComplete_int+0x210>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	f240 80dd 	bls.w	800d65e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 80d7 	beq.w	800d65e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4bc:	461a      	mov	r2, r3
 800d4be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4c2:	6093      	str	r3, [r2, #8]
 800d4c4:	e0cb      	b.n	800d65e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	f003 0320 	and.w	r3, r3, #32
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d009      	beq.n	800d4e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4dc:	461a      	mov	r2, r3
 800d4de:	2320      	movs	r3, #32
 800d4e0:	6093      	str	r3, [r2, #8]
 800d4e2:	e0bc      	b.n	800d65e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f040 80b7 	bne.w	800d65e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4a5d      	ldr	r2, [pc, #372]	; (800d668 <PCD_EP_OutXfrComplete_int+0x210>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d90f      	bls.n	800d518 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00a      	beq.n	800d518 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	015a      	lsls	r2, r3, #5
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	4413      	add	r3, r2
 800d50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50e:	461a      	mov	r2, r3
 800d510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d514:	6093      	str	r3, [r2, #8]
 800d516:	e0a2      	b.n	800d65e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d518:	6879      	ldr	r1, [r7, #4]
 800d51a:	683a      	ldr	r2, [r7, #0]
 800d51c:	4613      	mov	r3, r2
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	1a9b      	subs	r3, r3, r2
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	440b      	add	r3, r1
 800d526:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d52a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	0159      	lsls	r1, r3, #5
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	440b      	add	r3, r1
 800d534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d53e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	4613      	mov	r3, r2
 800d546:	00db      	lsls	r3, r3, #3
 800d548:	1a9b      	subs	r3, r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4403      	add	r3, r0
 800d54e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d552:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d554:	6879      	ldr	r1, [r7, #4]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	4613      	mov	r3, r2
 800d55a:	00db      	lsls	r3, r3, #3
 800d55c:	1a9b      	subs	r3, r3, r2
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	440b      	add	r3, r1
 800d562:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d566:	6819      	ldr	r1, [r3, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	4613      	mov	r3, r2
 800d56e:	00db      	lsls	r3, r3, #3
 800d570:	1a9b      	subs	r3, r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	4403      	add	r3, r0
 800d576:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4419      	add	r1, r3
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	4613      	mov	r3, r2
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	1a9b      	subs	r3, r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4403      	add	r3, r0
 800d58c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d590:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d114      	bne.n	800d5c2 <PCD_EP_OutXfrComplete_int+0x16a>
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	4613      	mov	r3, r2
 800d59e:	00db      	lsls	r3, r3, #3
 800d5a0:	1a9b      	subs	r3, r3, r2
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	440b      	add	r3, r1
 800d5a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d108      	bne.n	800d5c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6818      	ldr	r0, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	2101      	movs	r1, #1
 800d5be:	f003 fc29 	bl	8010e14 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f008 f9cf 	bl	801596c <HAL_PCD_DataOutStageCallback>
 800d5ce:	e046      	b.n	800d65e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	4a26      	ldr	r2, [pc, #152]	; (800d66c <PCD_EP_OutXfrComplete_int+0x214>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d124      	bne.n	800d622 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d00a      	beq.n	800d5f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	015a      	lsls	r2, r3, #5
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5f4:	6093      	str	r3, [r2, #8]
 800d5f6:	e032      	b.n	800d65e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f003 0320 	and.w	r3, r3, #32
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d008      	beq.n	800d614 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	015a      	lsls	r2, r3, #5
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	4413      	add	r3, r2
 800d60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d60e:	461a      	mov	r2, r3
 800d610:	2320      	movs	r3, #32
 800d612:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	b2db      	uxtb	r3, r3
 800d618:	4619      	mov	r1, r3
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f008 f9a6 	bl	801596c <HAL_PCD_DataOutStageCallback>
 800d620:	e01d      	b.n	800d65e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d114      	bne.n	800d652 <PCD_EP_OutXfrComplete_int+0x1fa>
 800d628:	6879      	ldr	r1, [r7, #4]
 800d62a:	683a      	ldr	r2, [r7, #0]
 800d62c:	4613      	mov	r3, r2
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	1a9b      	subs	r3, r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	440b      	add	r3, r1
 800d636:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d108      	bne.n	800d652 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6818      	ldr	r0, [r3, #0]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d64a:	461a      	mov	r2, r3
 800d64c:	2100      	movs	r1, #0
 800d64e:	f003 fbe1 	bl	8010e14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	b2db      	uxtb	r3, r3
 800d656:	4619      	mov	r1, r3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f008 f987 	bl	801596c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	4f54300a 	.word	0x4f54300a
 800d66c:	4f54310a 	.word	0x4f54310a

0800d670 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	333c      	adds	r3, #60	; 0x3c
 800d688:	3304      	adds	r3, #4
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	015a      	lsls	r2, r3, #5
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	4413      	add	r3, r2
 800d696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	4a15      	ldr	r2, [pc, #84]	; (800d6f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d90e      	bls.n	800d6c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d009      	beq.n	800d6c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	015a      	lsls	r2, r3, #5
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6bc:	461a      	mov	r2, r3
 800d6be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f008 f93f 	bl	8015948 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	4a0a      	ldr	r2, [pc, #40]	; (800d6f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d90c      	bls.n	800d6ec <PCD_EP_OutSetupPacket_int+0x7c>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d108      	bne.n	800d6ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6818      	ldr	r0, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	f003 fb94 	bl	8010e14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3718      	adds	r7, #24
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	4f54300a 	.word	0x4f54300a

0800d6fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	70fb      	strb	r3, [r7, #3]
 800d708:	4613      	mov	r3, r2
 800d70a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d714:	78fb      	ldrb	r3, [r7, #3]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d107      	bne.n	800d72a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d71a:	883b      	ldrh	r3, [r7, #0]
 800d71c:	0419      	lsls	r1, r3, #16
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	430a      	orrs	r2, r1
 800d726:	629a      	str	r2, [r3, #40]	; 0x28
 800d728:	e028      	b.n	800d77c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d730:	0c1b      	lsrs	r3, r3, #16
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	4413      	add	r3, r2
 800d736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d738:	2300      	movs	r3, #0
 800d73a:	73fb      	strb	r3, [r7, #15]
 800d73c:	e00d      	b.n	800d75a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	3340      	adds	r3, #64	; 0x40
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	4413      	add	r3, r2
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	0c1b      	lsrs	r3, r3, #16
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	4413      	add	r3, r2
 800d752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d754:	7bfb      	ldrb	r3, [r7, #15]
 800d756:	3301      	adds	r3, #1
 800d758:	73fb      	strb	r3, [r7, #15]
 800d75a:	7bfa      	ldrb	r2, [r7, #15]
 800d75c:	78fb      	ldrb	r3, [r7, #3]
 800d75e:	3b01      	subs	r3, #1
 800d760:	429a      	cmp	r2, r3
 800d762:	d3ec      	bcc.n	800d73e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d764:	883b      	ldrh	r3, [r7, #0]
 800d766:	0418      	lsls	r0, r3, #16
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6819      	ldr	r1, [r3, #0]
 800d76c:	78fb      	ldrb	r3, [r7, #3]
 800d76e:	3b01      	subs	r3, #1
 800d770:	68ba      	ldr	r2, [r7, #8]
 800d772:	4302      	orrs	r2, r0
 800d774:	3340      	adds	r3, #64	; 0x40
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	440b      	add	r3, r1
 800d77a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d77c:	2300      	movs	r3, #0
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3714      	adds	r7, #20
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b083      	sub	sp, #12
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	460b      	mov	r3, r1
 800d794:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	887a      	ldrh	r2, [r7, #2]
 800d79c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d7b8:	bf00      	nop
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e25b      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d075      	beq.n	800d8ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d7e2:	4ba3      	ldr	r3, [pc, #652]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	f003 030c 	and.w	r3, r3, #12
 800d7ea:	2b04      	cmp	r3, #4
 800d7ec:	d00c      	beq.n	800d808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d7ee:	4ba0      	ldr	r3, [pc, #640]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d7f6:	2b08      	cmp	r3, #8
 800d7f8:	d112      	bne.n	800d820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d7fa:	4b9d      	ldr	r3, [pc, #628]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d806:	d10b      	bne.n	800d820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d808:	4b99      	ldr	r3, [pc, #612]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d05b      	beq.n	800d8cc <HAL_RCC_OscConfig+0x108>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d157      	bne.n	800d8cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	e236      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d828:	d106      	bne.n	800d838 <HAL_RCC_OscConfig+0x74>
 800d82a:	4b91      	ldr	r3, [pc, #580]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a90      	ldr	r2, [pc, #576]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	e01d      	b.n	800d874 <HAL_RCC_OscConfig+0xb0>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d840:	d10c      	bne.n	800d85c <HAL_RCC_OscConfig+0x98>
 800d842:	4b8b      	ldr	r3, [pc, #556]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a8a      	ldr	r2, [pc, #552]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d84c:	6013      	str	r3, [r2, #0]
 800d84e:	4b88      	ldr	r3, [pc, #544]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a87      	ldr	r2, [pc, #540]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d858:	6013      	str	r3, [r2, #0]
 800d85a:	e00b      	b.n	800d874 <HAL_RCC_OscConfig+0xb0>
 800d85c:	4b84      	ldr	r3, [pc, #528]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a83      	ldr	r2, [pc, #524]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	4b81      	ldr	r3, [pc, #516]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a80      	ldr	r2, [pc, #512]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d86e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d013      	beq.n	800d8a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d87c:	f7fd ff66 	bl	800b74c <HAL_GetTick>
 800d880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d882:	e008      	b.n	800d896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d884:	f7fd ff62 	bl	800b74c <HAL_GetTick>
 800d888:	4602      	mov	r2, r0
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	2b64      	cmp	r3, #100	; 0x64
 800d890:	d901      	bls.n	800d896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	e1fb      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d896:	4b76      	ldr	r3, [pc, #472]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d0f0      	beq.n	800d884 <HAL_RCC_OscConfig+0xc0>
 800d8a2:	e014      	b.n	800d8ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8a4:	f7fd ff52 	bl	800b74c <HAL_GetTick>
 800d8a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d8aa:	e008      	b.n	800d8be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d8ac:	f7fd ff4e 	bl	800b74c <HAL_GetTick>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	2b64      	cmp	r3, #100	; 0x64
 800d8b8:	d901      	bls.n	800d8be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e1e7      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d8be:	4b6c      	ldr	r3, [pc, #432]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1f0      	bne.n	800d8ac <HAL_RCC_OscConfig+0xe8>
 800d8ca:	e000      	b.n	800d8ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 0302 	and.w	r3, r3, #2
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d063      	beq.n	800d9a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d8da:	4b65      	ldr	r3, [pc, #404]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f003 030c 	and.w	r3, r3, #12
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00b      	beq.n	800d8fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d8e6:	4b62      	ldr	r3, [pc, #392]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d8ee:	2b08      	cmp	r3, #8
 800d8f0:	d11c      	bne.n	800d92c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d8f2:	4b5f      	ldr	r3, [pc, #380]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d116      	bne.n	800d92c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8fe:	4b5c      	ldr	r3, [pc, #368]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f003 0302 	and.w	r3, r3, #2
 800d906:	2b00      	cmp	r3, #0
 800d908:	d005      	beq.n	800d916 <HAL_RCC_OscConfig+0x152>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d001      	beq.n	800d916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d912:	2301      	movs	r3, #1
 800d914:	e1bb      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d916:	4b56      	ldr	r3, [pc, #344]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	691b      	ldr	r3, [r3, #16]
 800d922:	00db      	lsls	r3, r3, #3
 800d924:	4952      	ldr	r1, [pc, #328]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d926:	4313      	orrs	r3, r2
 800d928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d92a:	e03a      	b.n	800d9a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d020      	beq.n	800d976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d934:	4b4f      	ldr	r3, [pc, #316]	; (800da74 <HAL_RCC_OscConfig+0x2b0>)
 800d936:	2201      	movs	r2, #1
 800d938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d93a:	f7fd ff07 	bl	800b74c <HAL_GetTick>
 800d93e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d940:	e008      	b.n	800d954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d942:	f7fd ff03 	bl	800b74c <HAL_GetTick>
 800d946:	4602      	mov	r2, r0
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d901      	bls.n	800d954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d950:	2303      	movs	r3, #3
 800d952:	e19c      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d954:	4b46      	ldr	r3, [pc, #280]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f003 0302 	and.w	r3, r3, #2
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d0f0      	beq.n	800d942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d960:	4b43      	ldr	r3, [pc, #268]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	691b      	ldr	r3, [r3, #16]
 800d96c:	00db      	lsls	r3, r3, #3
 800d96e:	4940      	ldr	r1, [pc, #256]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d970:	4313      	orrs	r3, r2
 800d972:	600b      	str	r3, [r1, #0]
 800d974:	e015      	b.n	800d9a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d976:	4b3f      	ldr	r3, [pc, #252]	; (800da74 <HAL_RCC_OscConfig+0x2b0>)
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d97c:	f7fd fee6 	bl	800b74c <HAL_GetTick>
 800d980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d982:	e008      	b.n	800d996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d984:	f7fd fee2 	bl	800b74c <HAL_GetTick>
 800d988:	4602      	mov	r2, r0
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	1ad3      	subs	r3, r2, r3
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d901      	bls.n	800d996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d992:	2303      	movs	r3, #3
 800d994:	e17b      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d996:	4b36      	ldr	r3, [pc, #216]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f003 0302 	and.w	r3, r3, #2
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1f0      	bne.n	800d984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f003 0308 	and.w	r3, r3, #8
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d030      	beq.n	800da10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d016      	beq.n	800d9e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d9b6:	4b30      	ldr	r3, [pc, #192]	; (800da78 <HAL_RCC_OscConfig+0x2b4>)
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9bc:	f7fd fec6 	bl	800b74c <HAL_GetTick>
 800d9c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d9c2:	e008      	b.n	800d9d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d9c4:	f7fd fec2 	bl	800b74c <HAL_GetTick>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d901      	bls.n	800d9d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d9d2:	2303      	movs	r3, #3
 800d9d4:	e15b      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d9d6:	4b26      	ldr	r3, [pc, #152]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800d9d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9da:	f003 0302 	and.w	r3, r3, #2
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d0f0      	beq.n	800d9c4 <HAL_RCC_OscConfig+0x200>
 800d9e2:	e015      	b.n	800da10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d9e4:	4b24      	ldr	r3, [pc, #144]	; (800da78 <HAL_RCC_OscConfig+0x2b4>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d9ea:	f7fd feaf 	bl	800b74c <HAL_GetTick>
 800d9ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d9f0:	e008      	b.n	800da04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d9f2:	f7fd feab 	bl	800b74c <HAL_GetTick>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d901      	bls.n	800da04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800da00:	2303      	movs	r3, #3
 800da02:	e144      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da04:	4b1a      	ldr	r3, [pc, #104]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800da06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da08:	f003 0302 	and.w	r3, r3, #2
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1f0      	bne.n	800d9f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 0304 	and.w	r3, r3, #4
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 80a0 	beq.w	800db5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800da1e:	2300      	movs	r3, #0
 800da20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da22:	4b13      	ldr	r3, [pc, #76]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800da24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10f      	bne.n	800da4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800da2e:	2300      	movs	r3, #0
 800da30:	60bb      	str	r3, [r7, #8]
 800da32:	4b0f      	ldr	r3, [pc, #60]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800da34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da36:	4a0e      	ldr	r2, [pc, #56]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800da38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da3c:	6413      	str	r3, [r2, #64]	; 0x40
 800da3e:	4b0c      	ldr	r3, [pc, #48]	; (800da70 <HAL_RCC_OscConfig+0x2ac>)
 800da40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da46:	60bb      	str	r3, [r7, #8]
 800da48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800da4a:	2301      	movs	r3, #1
 800da4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da4e:	4b0b      	ldr	r3, [pc, #44]	; (800da7c <HAL_RCC_OscConfig+0x2b8>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da56:	2b00      	cmp	r3, #0
 800da58:	d121      	bne.n	800da9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800da5a:	4b08      	ldr	r3, [pc, #32]	; (800da7c <HAL_RCC_OscConfig+0x2b8>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a07      	ldr	r2, [pc, #28]	; (800da7c <HAL_RCC_OscConfig+0x2b8>)
 800da60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800da66:	f7fd fe71 	bl	800b74c <HAL_GetTick>
 800da6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da6c:	e011      	b.n	800da92 <HAL_RCC_OscConfig+0x2ce>
 800da6e:	bf00      	nop
 800da70:	40023800 	.word	0x40023800
 800da74:	42470000 	.word	0x42470000
 800da78:	42470e80 	.word	0x42470e80
 800da7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800da80:	f7fd fe64 	bl	800b74c <HAL_GetTick>
 800da84:	4602      	mov	r2, r0
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d901      	bls.n	800da92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800da8e:	2303      	movs	r3, #3
 800da90:	e0fd      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da92:	4b81      	ldr	r3, [pc, #516]	; (800dc98 <HAL_RCC_OscConfig+0x4d4>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d0f0      	beq.n	800da80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d106      	bne.n	800dab4 <HAL_RCC_OscConfig+0x2f0>
 800daa6:	4b7d      	ldr	r3, [pc, #500]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800daa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daaa:	4a7c      	ldr	r2, [pc, #496]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800daac:	f043 0301 	orr.w	r3, r3, #1
 800dab0:	6713      	str	r3, [r2, #112]	; 0x70
 800dab2:	e01c      	b.n	800daee <HAL_RCC_OscConfig+0x32a>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	2b05      	cmp	r3, #5
 800daba:	d10c      	bne.n	800dad6 <HAL_RCC_OscConfig+0x312>
 800dabc:	4b77      	ldr	r3, [pc, #476]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac0:	4a76      	ldr	r2, [pc, #472]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dac2:	f043 0304 	orr.w	r3, r3, #4
 800dac6:	6713      	str	r3, [r2, #112]	; 0x70
 800dac8:	4b74      	ldr	r3, [pc, #464]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800daca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dacc:	4a73      	ldr	r2, [pc, #460]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dace:	f043 0301 	orr.w	r3, r3, #1
 800dad2:	6713      	str	r3, [r2, #112]	; 0x70
 800dad4:	e00b      	b.n	800daee <HAL_RCC_OscConfig+0x32a>
 800dad6:	4b71      	ldr	r3, [pc, #452]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dada:	4a70      	ldr	r2, [pc, #448]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dadc:	f023 0301 	bic.w	r3, r3, #1
 800dae0:	6713      	str	r3, [r2, #112]	; 0x70
 800dae2:	4b6e      	ldr	r3, [pc, #440]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae6:	4a6d      	ldr	r2, [pc, #436]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dae8:	f023 0304 	bic.w	r3, r3, #4
 800daec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d015      	beq.n	800db22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daf6:	f7fd fe29 	bl	800b74c <HAL_GetTick>
 800dafa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dafc:	e00a      	b.n	800db14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dafe:	f7fd fe25 	bl	800b74c <HAL_GetTick>
 800db02:	4602      	mov	r2, r0
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	f241 3288 	movw	r2, #5000	; 0x1388
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d901      	bls.n	800db14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e0bc      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db14:	4b61      	ldr	r3, [pc, #388]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800db16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db18:	f003 0302 	and.w	r3, r3, #2
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0ee      	beq.n	800dafe <HAL_RCC_OscConfig+0x33a>
 800db20:	e014      	b.n	800db4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800db22:	f7fd fe13 	bl	800b74c <HAL_GetTick>
 800db26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800db28:	e00a      	b.n	800db40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db2a:	f7fd fe0f 	bl	800b74c <HAL_GetTick>
 800db2e:	4602      	mov	r2, r0
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	f241 3288 	movw	r2, #5000	; 0x1388
 800db38:	4293      	cmp	r3, r2
 800db3a:	d901      	bls.n	800db40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800db3c:	2303      	movs	r3, #3
 800db3e:	e0a6      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800db40:	4b56      	ldr	r3, [pc, #344]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800db42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db44:	f003 0302 	and.w	r3, r3, #2
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1ee      	bne.n	800db2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d105      	bne.n	800db5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800db52:	4b52      	ldr	r3, [pc, #328]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800db54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db56:	4a51      	ldr	r2, [pc, #324]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800db58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	2b00      	cmp	r3, #0
 800db64:	f000 8092 	beq.w	800dc8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800db68:	4b4c      	ldr	r3, [pc, #304]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	f003 030c 	and.w	r3, r3, #12
 800db70:	2b08      	cmp	r3, #8
 800db72:	d05c      	beq.n	800dc2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	699b      	ldr	r3, [r3, #24]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d141      	bne.n	800dc00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db7c:	4b48      	ldr	r3, [pc, #288]	; (800dca0 <HAL_RCC_OscConfig+0x4dc>)
 800db7e:	2200      	movs	r2, #0
 800db80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db82:	f7fd fde3 	bl	800b74c <HAL_GetTick>
 800db86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db88:	e008      	b.n	800db9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db8a:	f7fd fddf 	bl	800b74c <HAL_GetTick>
 800db8e:	4602      	mov	r2, r0
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	2b02      	cmp	r3, #2
 800db96:	d901      	bls.n	800db9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800db98:	2303      	movs	r3, #3
 800db9a:	e078      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db9c:	4b3f      	ldr	r3, [pc, #252]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1f0      	bne.n	800db8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	69da      	ldr	r2, [r3, #28]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a1b      	ldr	r3, [r3, #32]
 800dbb0:	431a      	orrs	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb6:	019b      	lsls	r3, r3, #6
 800dbb8:	431a      	orrs	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbbe:	085b      	lsrs	r3, r3, #1
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	041b      	lsls	r3, r3, #16
 800dbc4:	431a      	orrs	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbca:	061b      	lsls	r3, r3, #24
 800dbcc:	4933      	ldr	r1, [pc, #204]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dbd2:	4b33      	ldr	r3, [pc, #204]	; (800dca0 <HAL_RCC_OscConfig+0x4dc>)
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dbd8:	f7fd fdb8 	bl	800b74c <HAL_GetTick>
 800dbdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbde:	e008      	b.n	800dbf2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dbe0:	f7fd fdb4 	bl	800b74c <HAL_GetTick>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d901      	bls.n	800dbf2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	e04d      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbf2:	4b2a      	ldr	r3, [pc, #168]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d0f0      	beq.n	800dbe0 <HAL_RCC_OscConfig+0x41c>
 800dbfe:	e045      	b.n	800dc8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc00:	4b27      	ldr	r3, [pc, #156]	; (800dca0 <HAL_RCC_OscConfig+0x4dc>)
 800dc02:	2200      	movs	r2, #0
 800dc04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc06:	f7fd fda1 	bl	800b74c <HAL_GetTick>
 800dc0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc0c:	e008      	b.n	800dc20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc0e:	f7fd fd9d 	bl	800b74c <HAL_GetTick>
 800dc12:	4602      	mov	r2, r0
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d901      	bls.n	800dc20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	e036      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc20:	4b1e      	ldr	r3, [pc, #120]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1f0      	bne.n	800dc0e <HAL_RCC_OscConfig+0x44a>
 800dc2c:	e02e      	b.n	800dc8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	699b      	ldr	r3, [r3, #24]
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d101      	bne.n	800dc3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e029      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dc3a:	4b18      	ldr	r3, [pc, #96]	; (800dc9c <HAL_RCC_OscConfig+0x4d8>)
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d11c      	bne.n	800dc88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d115      	bne.n	800dc88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dc62:	4013      	ands	r3, r2
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d10d      	bne.n	800dc88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d106      	bne.n	800dc88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d001      	beq.n	800dc8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e000      	b.n	800dc8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3718      	adds	r7, #24
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	40007000 	.word	0x40007000
 800dc9c:	40023800 	.word	0x40023800
 800dca0:	42470060 	.word	0x42470060

0800dca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d101      	bne.n	800dcb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	e0cc      	b.n	800de52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dcb8:	4b68      	ldr	r3, [pc, #416]	; (800de5c <HAL_RCC_ClockConfig+0x1b8>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f003 030f 	and.w	r3, r3, #15
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d90c      	bls.n	800dce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcc6:	4b65      	ldr	r3, [pc, #404]	; (800de5c <HAL_RCC_ClockConfig+0x1b8>)
 800dcc8:	683a      	ldr	r2, [r7, #0]
 800dcca:	b2d2      	uxtb	r2, r2
 800dccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcce:	4b63      	ldr	r3, [pc, #396]	; (800de5c <HAL_RCC_ClockConfig+0x1b8>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f003 030f 	and.w	r3, r3, #15
 800dcd6:	683a      	ldr	r2, [r7, #0]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d001      	beq.n	800dce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e0b8      	b.n	800de52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f003 0302 	and.w	r3, r3, #2
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d020      	beq.n	800dd2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f003 0304 	and.w	r3, r3, #4
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dcf8:	4b59      	ldr	r3, [pc, #356]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	4a58      	ldr	r2, [pc, #352]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dcfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dd02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f003 0308 	and.w	r3, r3, #8
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d005      	beq.n	800dd1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dd10:	4b53      	ldr	r3, [pc, #332]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	4a52      	ldr	r2, [pc, #328]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dd1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd1c:	4b50      	ldr	r3, [pc, #320]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	494d      	ldr	r1, [pc, #308]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d044      	beq.n	800ddc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d107      	bne.n	800dd52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd42:	4b47      	ldr	r3, [pc, #284]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d119      	bne.n	800dd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e07f      	b.n	800de52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d003      	beq.n	800dd62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dd5e:	2b03      	cmp	r3, #3
 800dd60:	d107      	bne.n	800dd72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd62:	4b3f      	ldr	r3, [pc, #252]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d109      	bne.n	800dd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e06f      	b.n	800de52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd72:	4b3b      	ldr	r3, [pc, #236]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f003 0302 	and.w	r3, r3, #2
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d101      	bne.n	800dd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e067      	b.n	800de52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd82:	4b37      	ldr	r3, [pc, #220]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f023 0203 	bic.w	r2, r3, #3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	4934      	ldr	r1, [pc, #208]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800dd90:	4313      	orrs	r3, r2
 800dd92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dd94:	f7fd fcda 	bl	800b74c <HAL_GetTick>
 800dd98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd9a:	e00a      	b.n	800ddb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd9c:	f7fd fcd6 	bl	800b74c <HAL_GetTick>
 800dda0:	4602      	mov	r2, r0
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d901      	bls.n	800ddb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ddae:	2303      	movs	r3, #3
 800ddb0:	e04f      	b.n	800de52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddb2:	4b2b      	ldr	r3, [pc, #172]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	f003 020c 	and.w	r2, r3, #12
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d1eb      	bne.n	800dd9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ddc4:	4b25      	ldr	r3, [pc, #148]	; (800de5c <HAL_RCC_ClockConfig+0x1b8>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f003 030f 	and.w	r3, r3, #15
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d20c      	bcs.n	800ddec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddd2:	4b22      	ldr	r3, [pc, #136]	; (800de5c <HAL_RCC_ClockConfig+0x1b8>)
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	b2d2      	uxtb	r2, r2
 800ddd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ddda:	4b20      	ldr	r3, [pc, #128]	; (800de5c <HAL_RCC_ClockConfig+0x1b8>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f003 030f 	and.w	r3, r3, #15
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d001      	beq.n	800ddec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dde8:	2301      	movs	r3, #1
 800ddea:	e032      	b.n	800de52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f003 0304 	and.w	r3, r3, #4
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d008      	beq.n	800de0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ddf8:	4b19      	ldr	r3, [pc, #100]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	4916      	ldr	r1, [pc, #88]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800de06:	4313      	orrs	r3, r2
 800de08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f003 0308 	and.w	r3, r3, #8
 800de12:	2b00      	cmp	r3, #0
 800de14:	d009      	beq.n	800de2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800de16:	4b12      	ldr	r3, [pc, #72]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	00db      	lsls	r3, r3, #3
 800de24:	490e      	ldr	r1, [pc, #56]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800de26:	4313      	orrs	r3, r2
 800de28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800de2a:	f000 f821 	bl	800de70 <HAL_RCC_GetSysClockFreq>
 800de2e:	4601      	mov	r1, r0
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <HAL_RCC_ClockConfig+0x1bc>)
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	091b      	lsrs	r3, r3, #4
 800de36:	f003 030f 	and.w	r3, r3, #15
 800de3a:	4a0a      	ldr	r2, [pc, #40]	; (800de64 <HAL_RCC_ClockConfig+0x1c0>)
 800de3c:	5cd3      	ldrb	r3, [r2, r3]
 800de3e:	fa21 f303 	lsr.w	r3, r1, r3
 800de42:	4a09      	ldr	r2, [pc, #36]	; (800de68 <HAL_RCC_ClockConfig+0x1c4>)
 800de44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800de46:	4b09      	ldr	r3, [pc, #36]	; (800de6c <HAL_RCC_ClockConfig+0x1c8>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fd f984 	bl	800b158 <HAL_InitTick>

  return HAL_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	40023c00 	.word	0x40023c00
 800de60:	40023800 	.word	0x40023800
 800de64:	0801b6a8 	.word	0x0801b6a8
 800de68:	20000888 	.word	0x20000888
 800de6c:	2000088c 	.word	0x2000088c

0800de70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800de76:	2300      	movs	r3, #0
 800de78:	607b      	str	r3, [r7, #4]
 800de7a:	2300      	movs	r3, #0
 800de7c:	60fb      	str	r3, [r7, #12]
 800de7e:	2300      	movs	r3, #0
 800de80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800de82:	2300      	movs	r3, #0
 800de84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800de86:	4b63      	ldr	r3, [pc, #396]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	f003 030c 	and.w	r3, r3, #12
 800de8e:	2b04      	cmp	r3, #4
 800de90:	d007      	beq.n	800dea2 <HAL_RCC_GetSysClockFreq+0x32>
 800de92:	2b08      	cmp	r3, #8
 800de94:	d008      	beq.n	800dea8 <HAL_RCC_GetSysClockFreq+0x38>
 800de96:	2b00      	cmp	r3, #0
 800de98:	f040 80b4 	bne.w	800e004 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800de9c:	4b5e      	ldr	r3, [pc, #376]	; (800e018 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800de9e:	60bb      	str	r3, [r7, #8]
       break;
 800dea0:	e0b3      	b.n	800e00a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dea2:	4b5e      	ldr	r3, [pc, #376]	; (800e01c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800dea4:	60bb      	str	r3, [r7, #8]
      break;
 800dea6:	e0b0      	b.n	800e00a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dea8:	4b5a      	ldr	r3, [pc, #360]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800deb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800deb2:	4b58      	ldr	r3, [pc, #352]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800deba:	2b00      	cmp	r3, #0
 800debc:	d04a      	beq.n	800df54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800debe:	4b55      	ldr	r3, [pc, #340]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	099b      	lsrs	r3, r3, #6
 800dec4:	f04f 0400 	mov.w	r4, #0
 800dec8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800decc:	f04f 0200 	mov.w	r2, #0
 800ded0:	ea03 0501 	and.w	r5, r3, r1
 800ded4:	ea04 0602 	and.w	r6, r4, r2
 800ded8:	4629      	mov	r1, r5
 800deda:	4632      	mov	r2, r6
 800dedc:	f04f 0300 	mov.w	r3, #0
 800dee0:	f04f 0400 	mov.w	r4, #0
 800dee4:	0154      	lsls	r4, r2, #5
 800dee6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800deea:	014b      	lsls	r3, r1, #5
 800deec:	4619      	mov	r1, r3
 800deee:	4622      	mov	r2, r4
 800def0:	1b49      	subs	r1, r1, r5
 800def2:	eb62 0206 	sbc.w	r2, r2, r6
 800def6:	f04f 0300 	mov.w	r3, #0
 800defa:	f04f 0400 	mov.w	r4, #0
 800defe:	0194      	lsls	r4, r2, #6
 800df00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800df04:	018b      	lsls	r3, r1, #6
 800df06:	1a5b      	subs	r3, r3, r1
 800df08:	eb64 0402 	sbc.w	r4, r4, r2
 800df0c:	f04f 0100 	mov.w	r1, #0
 800df10:	f04f 0200 	mov.w	r2, #0
 800df14:	00e2      	lsls	r2, r4, #3
 800df16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800df1a:	00d9      	lsls	r1, r3, #3
 800df1c:	460b      	mov	r3, r1
 800df1e:	4614      	mov	r4, r2
 800df20:	195b      	adds	r3, r3, r5
 800df22:	eb44 0406 	adc.w	r4, r4, r6
 800df26:	f04f 0100 	mov.w	r1, #0
 800df2a:	f04f 0200 	mov.w	r2, #0
 800df2e:	0262      	lsls	r2, r4, #9
 800df30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800df34:	0259      	lsls	r1, r3, #9
 800df36:	460b      	mov	r3, r1
 800df38:	4614      	mov	r4, r2
 800df3a:	4618      	mov	r0, r3
 800df3c:	4621      	mov	r1, r4
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f04f 0400 	mov.w	r4, #0
 800df44:	461a      	mov	r2, r3
 800df46:	4623      	mov	r3, r4
 800df48:	f7f2 fe9e 	bl	8000c88 <__aeabi_uldivmod>
 800df4c:	4603      	mov	r3, r0
 800df4e:	460c      	mov	r4, r1
 800df50:	60fb      	str	r3, [r7, #12]
 800df52:	e049      	b.n	800dfe8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df54:	4b2f      	ldr	r3, [pc, #188]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	099b      	lsrs	r3, r3, #6
 800df5a:	f04f 0400 	mov.w	r4, #0
 800df5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800df62:	f04f 0200 	mov.w	r2, #0
 800df66:	ea03 0501 	and.w	r5, r3, r1
 800df6a:	ea04 0602 	and.w	r6, r4, r2
 800df6e:	4629      	mov	r1, r5
 800df70:	4632      	mov	r2, r6
 800df72:	f04f 0300 	mov.w	r3, #0
 800df76:	f04f 0400 	mov.w	r4, #0
 800df7a:	0154      	lsls	r4, r2, #5
 800df7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800df80:	014b      	lsls	r3, r1, #5
 800df82:	4619      	mov	r1, r3
 800df84:	4622      	mov	r2, r4
 800df86:	1b49      	subs	r1, r1, r5
 800df88:	eb62 0206 	sbc.w	r2, r2, r6
 800df8c:	f04f 0300 	mov.w	r3, #0
 800df90:	f04f 0400 	mov.w	r4, #0
 800df94:	0194      	lsls	r4, r2, #6
 800df96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800df9a:	018b      	lsls	r3, r1, #6
 800df9c:	1a5b      	subs	r3, r3, r1
 800df9e:	eb64 0402 	sbc.w	r4, r4, r2
 800dfa2:	f04f 0100 	mov.w	r1, #0
 800dfa6:	f04f 0200 	mov.w	r2, #0
 800dfaa:	00e2      	lsls	r2, r4, #3
 800dfac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dfb0:	00d9      	lsls	r1, r3, #3
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	195b      	adds	r3, r3, r5
 800dfb8:	eb44 0406 	adc.w	r4, r4, r6
 800dfbc:	f04f 0100 	mov.w	r1, #0
 800dfc0:	f04f 0200 	mov.w	r2, #0
 800dfc4:	02a2      	lsls	r2, r4, #10
 800dfc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dfca:	0299      	lsls	r1, r3, #10
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4614      	mov	r4, r2
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	4621      	mov	r1, r4
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f04f 0400 	mov.w	r4, #0
 800dfda:	461a      	mov	r2, r3
 800dfdc:	4623      	mov	r3, r4
 800dfde:	f7f2 fe53 	bl	8000c88 <__aeabi_uldivmod>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dfe8:	4b0a      	ldr	r3, [pc, #40]	; (800e014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	0c1b      	lsrs	r3, r3, #16
 800dfee:	f003 0303 	and.w	r3, r3, #3
 800dff2:	3301      	adds	r3, #1
 800dff4:	005b      	lsls	r3, r3, #1
 800dff6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e000:	60bb      	str	r3, [r7, #8]
      break;
 800e002:	e002      	b.n	800e00a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e004:	4b04      	ldr	r3, [pc, #16]	; (800e018 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e006:	60bb      	str	r3, [r7, #8]
      break;
 800e008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e00a:	68bb      	ldr	r3, [r7, #8]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3714      	adds	r7, #20
 800e010:	46bd      	mov	sp, r7
 800e012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e014:	40023800 	.word	0x40023800
 800e018:	00f42400 	.word	0x00f42400
 800e01c:	007a1200 	.word	0x007a1200

0800e020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e020:	b480      	push	{r7}
 800e022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e024:	4b03      	ldr	r3, [pc, #12]	; (800e034 <HAL_RCC_GetHCLKFreq+0x14>)
 800e026:	681b      	ldr	r3, [r3, #0]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	20000888 	.word	0x20000888

0800e038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e03c:	f7ff fff0 	bl	800e020 <HAL_RCC_GetHCLKFreq>
 800e040:	4601      	mov	r1, r0
 800e042:	4b05      	ldr	r3, [pc, #20]	; (800e058 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	0a9b      	lsrs	r3, r3, #10
 800e048:	f003 0307 	and.w	r3, r3, #7
 800e04c:	4a03      	ldr	r2, [pc, #12]	; (800e05c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e04e:	5cd3      	ldrb	r3, [r2, r3]
 800e050:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e054:	4618      	mov	r0, r3
 800e056:	bd80      	pop	{r7, pc}
 800e058:	40023800 	.word	0x40023800
 800e05c:	0801b6b8 	.word	0x0801b6b8

0800e060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e064:	f7ff ffdc 	bl	800e020 <HAL_RCC_GetHCLKFreq>
 800e068:	4601      	mov	r1, r0
 800e06a:	4b05      	ldr	r3, [pc, #20]	; (800e080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	0b5b      	lsrs	r3, r3, #13
 800e070:	f003 0307 	and.w	r3, r3, #7
 800e074:	4a03      	ldr	r2, [pc, #12]	; (800e084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e076:	5cd3      	ldrb	r3, [r2, r3]
 800e078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	40023800 	.word	0x40023800
 800e084:	0801b6b8 	.word	0x0801b6b8

0800e088 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	220f      	movs	r2, #15
 800e096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e098:	4b12      	ldr	r3, [pc, #72]	; (800e0e4 <HAL_RCC_GetClockConfig+0x5c>)
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	f003 0203 	and.w	r2, r3, #3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <HAL_RCC_GetClockConfig+0x5c>)
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e0b0:	4b0c      	ldr	r3, [pc, #48]	; (800e0e4 <HAL_RCC_GetClockConfig+0x5c>)
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e0bc:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <HAL_RCC_GetClockConfig+0x5c>)
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	08db      	lsrs	r3, r3, #3
 800e0c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e0ca:	4b07      	ldr	r3, [pc, #28]	; (800e0e8 <HAL_RCC_GetClockConfig+0x60>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f003 020f 	and.w	r2, r3, #15
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	601a      	str	r2, [r3, #0]
}
 800e0d6:	bf00      	nop
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop
 800e0e4:	40023800 	.word	0x40023800
 800e0e8:	40023c00 	.word	0x40023c00

0800e0ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d101      	bne.n	800e0fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e01d      	b.n	800e13a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	d106      	bne.n	800e118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7fd f9aa 	bl	800b46c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2202      	movs	r2, #2
 800e11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	3304      	adds	r3, #4
 800e128:	4619      	mov	r1, r3
 800e12a:	4610      	mov	r0, r2
 800e12c:	f000 fa38 	bl	800e5a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e138:	2300      	movs	r3, #0
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e142:	b480      	push	{r7}
 800e144:	b085      	sub	sp, #20
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2202      	movs	r2, #2
 800e14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	f003 0307 	and.w	r3, r3, #7
 800e15c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b06      	cmp	r3, #6
 800e162:	d007      	beq.n	800e174 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f042 0201 	orr.w	r2, r2, #1
 800e172:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3714      	adds	r7, #20
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e18a:	b480      	push	{r7}
 800e18c:	b085      	sub	sp, #20
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	68da      	ldr	r2, [r3, #12]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f042 0201 	orr.w	r2, r2, #1
 800e1a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	f003 0307 	and.w	r3, r3, #7
 800e1ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b06      	cmp	r3, #6
 800e1b2:	d007      	beq.n	800e1c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f042 0201 	orr.w	r2, r2, #1
 800e1c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr

0800e1d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b082      	sub	sp, #8
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	f003 0302 	and.w	r3, r3, #2
 800e1e4:	2b02      	cmp	r3, #2
 800e1e6:	d122      	bne.n	800e22e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	f003 0302 	and.w	r3, r3, #2
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d11b      	bne.n	800e22e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f06f 0202 	mvn.w	r2, #2
 800e1fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2201      	movs	r2, #1
 800e204:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	699b      	ldr	r3, [r3, #24]
 800e20c:	f003 0303 	and.w	r3, r3, #3
 800e210:	2b00      	cmp	r3, #0
 800e212:	d003      	beq.n	800e21c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 f9a5 	bl	800e564 <HAL_TIM_IC_CaptureCallback>
 800e21a:	e005      	b.n	800e228 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 f997 	bl	800e550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f9a8 	bl	800e578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	691b      	ldr	r3, [r3, #16]
 800e234:	f003 0304 	and.w	r3, r3, #4
 800e238:	2b04      	cmp	r3, #4
 800e23a:	d122      	bne.n	800e282 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	68db      	ldr	r3, [r3, #12]
 800e242:	f003 0304 	and.w	r3, r3, #4
 800e246:	2b04      	cmp	r3, #4
 800e248:	d11b      	bne.n	800e282 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f06f 0204 	mvn.w	r2, #4
 800e252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2202      	movs	r2, #2
 800e258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	699b      	ldr	r3, [r3, #24]
 800e260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e264:	2b00      	cmp	r3, #0
 800e266:	d003      	beq.n	800e270 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 f97b 	bl	800e564 <HAL_TIM_IC_CaptureCallback>
 800e26e:	e005      	b.n	800e27c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 f96d 	bl	800e550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f97e 	bl	800e578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	f003 0308 	and.w	r3, r3, #8
 800e28c:	2b08      	cmp	r3, #8
 800e28e:	d122      	bne.n	800e2d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b08      	cmp	r3, #8
 800e29c:	d11b      	bne.n	800e2d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f06f 0208 	mvn.w	r2, #8
 800e2a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2204      	movs	r2, #4
 800e2ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	69db      	ldr	r3, [r3, #28]
 800e2b4:	f003 0303 	and.w	r3, r3, #3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f951 	bl	800e564 <HAL_TIM_IC_CaptureCallback>
 800e2c2:	e005      	b.n	800e2d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 f943 	bl	800e550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 f954 	bl	800e578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	691b      	ldr	r3, [r3, #16]
 800e2dc:	f003 0310 	and.w	r3, r3, #16
 800e2e0:	2b10      	cmp	r3, #16
 800e2e2:	d122      	bne.n	800e32a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	f003 0310 	and.w	r3, r3, #16
 800e2ee:	2b10      	cmp	r3, #16
 800e2f0:	d11b      	bne.n	800e32a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f06f 0210 	mvn.w	r2, #16
 800e2fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2208      	movs	r2, #8
 800e300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	69db      	ldr	r3, [r3, #28]
 800e308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d003      	beq.n	800e318 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 f927 	bl	800e564 <HAL_TIM_IC_CaptureCallback>
 800e316:	e005      	b.n	800e324 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f919 	bl	800e550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f92a 	bl	800e578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	691b      	ldr	r3, [r3, #16]
 800e330:	f003 0301 	and.w	r3, r3, #1
 800e334:	2b01      	cmp	r3, #1
 800e336:	d10e      	bne.n	800e356 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	f003 0301 	and.w	r3, r3, #1
 800e342:	2b01      	cmp	r3, #1
 800e344:	d107      	bne.n	800e356 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f06f 0201 	mvn.w	r2, #1
 800e34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7f6 fa61 	bl	8004818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e360:	2b80      	cmp	r3, #128	; 0x80
 800e362:	d10e      	bne.n	800e382 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e36e:	2b80      	cmp	r3, #128	; 0x80
 800e370:	d107      	bne.n	800e382 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 facf 	bl	800e920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	691b      	ldr	r3, [r3, #16]
 800e388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e38c:	2b40      	cmp	r3, #64	; 0x40
 800e38e:	d10e      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e39a:	2b40      	cmp	r3, #64	; 0x40
 800e39c:	d107      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f8ef 	bl	800e58c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	f003 0320 	and.w	r3, r3, #32
 800e3b8:	2b20      	cmp	r3, #32
 800e3ba:	d10e      	bne.n	800e3da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	f003 0320 	and.w	r3, r3, #32
 800e3c6:	2b20      	cmp	r3, #32
 800e3c8:	d107      	bne.n	800e3da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f06f 0220 	mvn.w	r2, #32
 800e3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fa99 	bl	800e90c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3da:	bf00      	nop
 800e3dc:	3708      	adds	r7, #8
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b084      	sub	sp, #16
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d101      	bne.n	800e3fa <HAL_TIM_ConfigClockSource+0x18>
 800e3f6:	2302      	movs	r3, #2
 800e3f8:	e0a6      	b.n	800e548 <HAL_TIM_ConfigClockSource+0x166>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2202      	movs	r2, #2
 800e406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e418:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e420:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b40      	cmp	r3, #64	; 0x40
 800e430:	d067      	beq.n	800e502 <HAL_TIM_ConfigClockSource+0x120>
 800e432:	2b40      	cmp	r3, #64	; 0x40
 800e434:	d80b      	bhi.n	800e44e <HAL_TIM_ConfigClockSource+0x6c>
 800e436:	2b10      	cmp	r3, #16
 800e438:	d073      	beq.n	800e522 <HAL_TIM_ConfigClockSource+0x140>
 800e43a:	2b10      	cmp	r3, #16
 800e43c:	d802      	bhi.n	800e444 <HAL_TIM_ConfigClockSource+0x62>
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d06f      	beq.n	800e522 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e442:	e078      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e444:	2b20      	cmp	r3, #32
 800e446:	d06c      	beq.n	800e522 <HAL_TIM_ConfigClockSource+0x140>
 800e448:	2b30      	cmp	r3, #48	; 0x30
 800e44a:	d06a      	beq.n	800e522 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e44c:	e073      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e44e:	2b70      	cmp	r3, #112	; 0x70
 800e450:	d00d      	beq.n	800e46e <HAL_TIM_ConfigClockSource+0x8c>
 800e452:	2b70      	cmp	r3, #112	; 0x70
 800e454:	d804      	bhi.n	800e460 <HAL_TIM_ConfigClockSource+0x7e>
 800e456:	2b50      	cmp	r3, #80	; 0x50
 800e458:	d033      	beq.n	800e4c2 <HAL_TIM_ConfigClockSource+0xe0>
 800e45a:	2b60      	cmp	r3, #96	; 0x60
 800e45c:	d041      	beq.n	800e4e2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e45e:	e06a      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e464:	d066      	beq.n	800e534 <HAL_TIM_ConfigClockSource+0x152>
 800e466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e46a:	d017      	beq.n	800e49c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e46c:	e063      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6818      	ldr	r0, [r3, #0]
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	6899      	ldr	r1, [r3, #8]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	685a      	ldr	r2, [r3, #4]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	f000 f9a9 	bl	800e7d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e490:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	609a      	str	r2, [r3, #8]
      break;
 800e49a:	e04c      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6818      	ldr	r0, [r3, #0]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	6899      	ldr	r1, [r3, #8]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	685a      	ldr	r2, [r3, #4]
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	f000 f992 	bl	800e7d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	689a      	ldr	r2, [r3, #8]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e4be:	609a      	str	r2, [r3, #8]
      break;
 800e4c0:	e039      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6818      	ldr	r0, [r3, #0]
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	6859      	ldr	r1, [r3, #4]
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	f000 f906 	bl	800e6e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2150      	movs	r1, #80	; 0x50
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 f95f 	bl	800e79e <TIM_ITRx_SetConfig>
      break;
 800e4e0:	e029      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6818      	ldr	r0, [r3, #0]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	6859      	ldr	r1, [r3, #4]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	f000 f925 	bl	800e73e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2160      	movs	r1, #96	; 0x60
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f000 f94f 	bl	800e79e <TIM_ITRx_SetConfig>
      break;
 800e500:	e019      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6818      	ldr	r0, [r3, #0]
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	6859      	ldr	r1, [r3, #4]
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	461a      	mov	r2, r3
 800e510:	f000 f8e6 	bl	800e6e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2140      	movs	r1, #64	; 0x40
 800e51a:	4618      	mov	r0, r3
 800e51c:	f000 f93f 	bl	800e79e <TIM_ITRx_SetConfig>
      break;
 800e520:	e009      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4619      	mov	r1, r3
 800e52c:	4610      	mov	r0, r2
 800e52e:	f000 f936 	bl	800e79e <TIM_ITRx_SetConfig>
      break;
 800e532:	e000      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e534:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2201      	movs	r2, #1
 800e53a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e558:	bf00      	nop
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e56c:	bf00      	nop
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e580:	bf00      	nop
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e594:	bf00      	nop
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	4a40      	ldr	r2, [pc, #256]	; (800e6b4 <TIM_Base_SetConfig+0x114>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d013      	beq.n	800e5e0 <TIM_Base_SetConfig+0x40>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5be:	d00f      	beq.n	800e5e0 <TIM_Base_SetConfig+0x40>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4a3d      	ldr	r2, [pc, #244]	; (800e6b8 <TIM_Base_SetConfig+0x118>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d00b      	beq.n	800e5e0 <TIM_Base_SetConfig+0x40>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4a3c      	ldr	r2, [pc, #240]	; (800e6bc <TIM_Base_SetConfig+0x11c>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d007      	beq.n	800e5e0 <TIM_Base_SetConfig+0x40>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	4a3b      	ldr	r2, [pc, #236]	; (800e6c0 <TIM_Base_SetConfig+0x120>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d003      	beq.n	800e5e0 <TIM_Base_SetConfig+0x40>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4a3a      	ldr	r2, [pc, #232]	; (800e6c4 <TIM_Base_SetConfig+0x124>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d108      	bne.n	800e5f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4a2f      	ldr	r2, [pc, #188]	; (800e6b4 <TIM_Base_SetConfig+0x114>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d02b      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e600:	d027      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	4a2c      	ldr	r2, [pc, #176]	; (800e6b8 <TIM_Base_SetConfig+0x118>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d023      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4a2b      	ldr	r2, [pc, #172]	; (800e6bc <TIM_Base_SetConfig+0x11c>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d01f      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4a2a      	ldr	r2, [pc, #168]	; (800e6c0 <TIM_Base_SetConfig+0x120>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d01b      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4a29      	ldr	r2, [pc, #164]	; (800e6c4 <TIM_Base_SetConfig+0x124>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d017      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4a28      	ldr	r2, [pc, #160]	; (800e6c8 <TIM_Base_SetConfig+0x128>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d013      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4a27      	ldr	r2, [pc, #156]	; (800e6cc <TIM_Base_SetConfig+0x12c>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d00f      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4a26      	ldr	r2, [pc, #152]	; (800e6d0 <TIM_Base_SetConfig+0x130>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d00b      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4a25      	ldr	r2, [pc, #148]	; (800e6d4 <TIM_Base_SetConfig+0x134>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d007      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4a24      	ldr	r2, [pc, #144]	; (800e6d8 <TIM_Base_SetConfig+0x138>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d003      	beq.n	800e652 <TIM_Base_SetConfig+0xb2>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4a23      	ldr	r2, [pc, #140]	; (800e6dc <TIM_Base_SetConfig+0x13c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d108      	bne.n	800e664 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	4313      	orrs	r3, r2
 800e662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	695b      	ldr	r3, [r3, #20]
 800e66e:	4313      	orrs	r3, r2
 800e670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	689a      	ldr	r2, [r3, #8]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	4a0a      	ldr	r2, [pc, #40]	; (800e6b4 <TIM_Base_SetConfig+0x114>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d003      	beq.n	800e698 <TIM_Base_SetConfig+0xf8>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4a0c      	ldr	r2, [pc, #48]	; (800e6c4 <TIM_Base_SetConfig+0x124>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d103      	bne.n	800e6a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	691a      	ldr	r2, [r3, #16]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	615a      	str	r2, [r3, #20]
}
 800e6a6:	bf00      	nop
 800e6a8:	3714      	adds	r7, #20
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	40010000 	.word	0x40010000
 800e6b8:	40000400 	.word	0x40000400
 800e6bc:	40000800 	.word	0x40000800
 800e6c0:	40000c00 	.word	0x40000c00
 800e6c4:	40010400 	.word	0x40010400
 800e6c8:	40014000 	.word	0x40014000
 800e6cc:	40014400 	.word	0x40014400
 800e6d0:	40014800 	.word	0x40014800
 800e6d4:	40001800 	.word	0x40001800
 800e6d8:	40001c00 	.word	0x40001c00
 800e6dc:	40002000 	.word	0x40002000

0800e6e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b087      	sub	sp, #28
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6a1b      	ldr	r3, [r3, #32]
 800e6f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6a1b      	ldr	r3, [r3, #32]
 800e6f6:	f023 0201 	bic.w	r2, r3, #1
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e70a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	011b      	lsls	r3, r3, #4
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	4313      	orrs	r3, r2
 800e714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	f023 030a 	bic.w	r3, r3, #10
 800e71c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	4313      	orrs	r3, r2
 800e724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	693a      	ldr	r2, [r7, #16]
 800e72a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	697a      	ldr	r2, [r7, #20]
 800e730:	621a      	str	r2, [r3, #32]
}
 800e732:	bf00      	nop
 800e734:	371c      	adds	r7, #28
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e73e:	b480      	push	{r7}
 800e740:	b087      	sub	sp, #28
 800e742:	af00      	add	r7, sp, #0
 800e744:	60f8      	str	r0, [r7, #12]
 800e746:	60b9      	str	r1, [r7, #8]
 800e748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	f023 0210 	bic.w	r2, r3, #16
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6a1b      	ldr	r3, [r3, #32]
 800e760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	031b      	lsls	r3, r3, #12
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	4313      	orrs	r3, r2
 800e772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e77a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	011b      	lsls	r3, r3, #4
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	4313      	orrs	r3, r2
 800e784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	697a      	ldr	r2, [r7, #20]
 800e78a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	693a      	ldr	r2, [r7, #16]
 800e790:	621a      	str	r2, [r3, #32]
}
 800e792:	bf00      	nop
 800e794:	371c      	adds	r7, #28
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	f043 0307 	orr.w	r3, r3, #7
 800e7c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	609a      	str	r2, [r3, #8]
}
 800e7c8:	bf00      	nop
 800e7ca:	3714      	adds	r7, #20
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b087      	sub	sp, #28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
 800e7e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e7ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	021a      	lsls	r2, r3, #8
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	4313      	orrs	r3, r2
 800e800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	697a      	ldr	r2, [r7, #20]
 800e806:	609a      	str	r2, [r3, #8]
}
 800e808:	bf00      	nop
 800e80a:	371c      	adds	r7, #28
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e824:	2b01      	cmp	r3, #1
 800e826:	d101      	bne.n	800e82c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e828:	2302      	movs	r3, #2
 800e82a:	e05a      	b.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2201      	movs	r2, #1
 800e830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2202      	movs	r2, #2
 800e838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	689b      	ldr	r3, [r3, #8]
 800e84a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	4313      	orrs	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a21      	ldr	r2, [pc, #132]	; (800e8f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d022      	beq.n	800e8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e878:	d01d      	beq.n	800e8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a1d      	ldr	r2, [pc, #116]	; (800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d018      	beq.n	800e8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a1b      	ldr	r2, [pc, #108]	; (800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d013      	beq.n	800e8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a1a      	ldr	r2, [pc, #104]	; (800e8fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d00e      	beq.n	800e8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a18      	ldr	r2, [pc, #96]	; (800e900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d009      	beq.n	800e8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4a17      	ldr	r2, [pc, #92]	; (800e904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d004      	beq.n	800e8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a15      	ldr	r2, [pc, #84]	; (800e908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d10c      	bne.n	800e8d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	68ba      	ldr	r2, [r7, #8]
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e8e0:	2300      	movs	r3, #0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3714      	adds	r7, #20
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	40010000 	.word	0x40010000
 800e8f4:	40000400 	.word	0x40000400
 800e8f8:	40000800 	.word	0x40000800
 800e8fc:	40000c00 	.word	0x40000c00
 800e900:	40010400 	.word	0x40010400
 800e904:	40014000 	.word	0x40014000
 800e908:	40001800 	.word	0x40001800

0800e90c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e914:	bf00      	nop
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e920:	b480      	push	{r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e03f      	b.n	800e9c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d106      	bne.n	800e960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f7fc fdec 	bl	800b538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2224      	movs	r2, #36	; 0x24
 800e964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68da      	ldr	r2, [r3, #12]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 fb6b 	bl	800f054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	691a      	ldr	r2, [r3, #16]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e98c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	695a      	ldr	r2, [r3, #20]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e99c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68da      	ldr	r2, [r3, #12]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e9ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2220      	movs	r2, #32
 800e9b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2220      	movs	r2, #32
 800e9c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
	...

0800e9d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	4613      	mov	r3, r2
 800e9dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2b20      	cmp	r3, #32
 800e9e8:	d153      	bne.n	800ea92 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d002      	beq.n	800e9f6 <HAL_UART_Transmit_DMA+0x26>
 800e9f0:	88fb      	ldrh	r3, [r7, #6]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d101      	bne.n	800e9fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e04c      	b.n	800ea94 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d101      	bne.n	800ea08 <HAL_UART_Transmit_DMA+0x38>
 800ea04:	2302      	movs	r3, #2
 800ea06:	e045      	b.n	800ea94 <HAL_UART_Transmit_DMA+0xc4>
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	88fa      	ldrh	r2, [r7, #6]
 800ea1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	88fa      	ldrh	r2, [r7, #6]
 800ea20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2221      	movs	r2, #33	; 0x21
 800ea2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea34:	4a19      	ldr	r2, [pc, #100]	; (800ea9c <HAL_UART_Transmit_DMA+0xcc>)
 800ea36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea3c:	4a18      	ldr	r2, [pc, #96]	; (800eaa0 <HAL_UART_Transmit_DMA+0xd0>)
 800ea3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea44:	4a17      	ldr	r2, [pc, #92]	; (800eaa4 <HAL_UART_Transmit_DMA+0xd4>)
 800ea46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ea50:	f107 0308 	add.w	r3, r7, #8
 800ea54:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	6819      	ldr	r1, [r3, #0]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3304      	adds	r3, #4
 800ea64:	461a      	mov	r2, r3
 800ea66:	88fb      	ldrh	r3, [r7, #6]
 800ea68:	f7fd f82e 	bl	800bac8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	695a      	ldr	r2, [r3, #20]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ea8c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e000      	b.n	800ea94 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ea92:	2302      	movs	r3, #2
  }
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3718      	adds	r7, #24
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	0800ece5 	.word	0x0800ece5
 800eaa0:	0800ed37 	.word	0x0800ed37
 800eaa4:	0800ed53 	.word	0x0800ed53

0800eaa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b088      	sub	sp, #32
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	695b      	ldr	r3, [r3, #20]
 800eac6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800eac8:	2300      	movs	r3, #0
 800eaca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800eacc:	2300      	movs	r3, #0
 800eace:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	f003 030f 	and.w	r3, r3, #15
 800ead6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d10d      	bne.n	800eafa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	f003 0320 	and.w	r3, r3, #32
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d008      	beq.n	800eafa <HAL_UART_IRQHandler+0x52>
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	f003 0320 	and.w	r3, r3, #32
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fa2d 	bl	800ef52 <UART_Receive_IT>
      return;
 800eaf8:	e0d1      	b.n	800ec9e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	f000 80b0 	beq.w	800ec62 <HAL_UART_IRQHandler+0x1ba>
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	f003 0301 	and.w	r3, r3, #1
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d105      	bne.n	800eb18 <HAL_UART_IRQHandler+0x70>
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f000 80a5 	beq.w	800ec62 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	f003 0301 	and.w	r3, r3, #1
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00a      	beq.n	800eb38 <HAL_UART_IRQHandler+0x90>
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d005      	beq.n	800eb38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb30:	f043 0201 	orr.w	r2, r3, #1
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800eb38:	69fb      	ldr	r3, [r7, #28]
 800eb3a:	f003 0304 	and.w	r3, r3, #4
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00a      	beq.n	800eb58 <HAL_UART_IRQHandler+0xb0>
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	f003 0301 	and.w	r3, r3, #1
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d005      	beq.n	800eb58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb50:	f043 0202 	orr.w	r2, r3, #2
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00a      	beq.n	800eb78 <HAL_UART_IRQHandler+0xd0>
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	f003 0301 	and.w	r3, r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d005      	beq.n	800eb78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb70:	f043 0204 	orr.w	r2, r3, #4
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	f003 0308 	and.w	r3, r3, #8
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00f      	beq.n	800eba2 <HAL_UART_IRQHandler+0xfa>
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	f003 0320 	and.w	r3, r3, #32
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d104      	bne.n	800eb96 <HAL_UART_IRQHandler+0xee>
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	f003 0301 	and.w	r3, r3, #1
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d005      	beq.n	800eba2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb9a:	f043 0208 	orr.w	r2, r3, #8
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d078      	beq.n	800ec9c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	f003 0320 	and.w	r3, r3, #32
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d007      	beq.n	800ebc4 <HAL_UART_IRQHandler+0x11c>
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	f003 0320 	and.w	r3, r3, #32
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f9c7 	bl	800ef52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	695b      	ldr	r3, [r3, #20]
 800ebca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebce:	2b40      	cmp	r3, #64	; 0x40
 800ebd0:	bf0c      	ite	eq
 800ebd2:	2301      	moveq	r3, #1
 800ebd4:	2300      	movne	r3, #0
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebde:	f003 0308 	and.w	r3, r3, #8
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d102      	bne.n	800ebec <HAL_UART_IRQHandler+0x144>
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d031      	beq.n	800ec50 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 f910 	bl	800ee12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	695b      	ldr	r3, [r3, #20]
 800ebf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebfc:	2b40      	cmp	r3, #64	; 0x40
 800ebfe:	d123      	bne.n	800ec48 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	695a      	ldr	r2, [r3, #20]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec0e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d013      	beq.n	800ec40 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1c:	4a21      	ldr	r2, [pc, #132]	; (800eca4 <HAL_UART_IRQHandler+0x1fc>)
 800ec1e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fc ffa7 	bl	800bb78 <HAL_DMA_Abort_IT>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d016      	beq.n	800ec5e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec3e:	e00e      	b.n	800ec5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 f845 	bl	800ecd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec46:	e00a      	b.n	800ec5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 f841 	bl	800ecd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec4e:	e006      	b.n	800ec5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f83d 	bl	800ecd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ec5c:	e01e      	b.n	800ec9c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec5e:	bf00      	nop
    return;
 800ec60:	e01c      	b.n	800ec9c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d008      	beq.n	800ec7e <HAL_UART_IRQHandler+0x1d6>
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d003      	beq.n	800ec7e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 f8fd 	bl	800ee76 <UART_Transmit_IT>
    return;
 800ec7c:	e00f      	b.n	800ec9e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d00a      	beq.n	800ec9e <HAL_UART_IRQHandler+0x1f6>
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d005      	beq.n	800ec9e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 f945 	bl	800ef22 <UART_EndTransmit_IT>
    return;
 800ec98:	bf00      	nop
 800ec9a:	e000      	b.n	800ec9e <HAL_UART_IRQHandler+0x1f6>
    return;
 800ec9c:	bf00      	nop
  }
}
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	0800ee4f 	.word	0x0800ee4f

0800eca8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d113      	bne.n	800ed28 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2200      	movs	r2, #0
 800ed04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	695a      	ldr	r2, [r3, #20]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed14:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	68da      	ldr	r2, [r3, #12]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed24:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed26:	e002      	b.n	800ed2e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f7fc fc87 	bl	800b63c <HAL_UART_TxCpltCallback>
}
 800ed2e:	bf00      	nop
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b084      	sub	sp, #16
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f7ff ffaf 	bl	800eca8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed4a:	bf00      	nop
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed52:	b580      	push	{r7, lr}
 800ed54:	b084      	sub	sp, #16
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed6e:	2b80      	cmp	r3, #128	; 0x80
 800ed70:	bf0c      	ite	eq
 800ed72:	2301      	moveq	r3, #1
 800ed74:	2300      	movne	r3, #0
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b21      	cmp	r3, #33	; 0x21
 800ed84:	d108      	bne.n	800ed98 <UART_DMAError+0x46>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d005      	beq.n	800ed98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ed92:	68b8      	ldr	r0, [r7, #8]
 800ed94:	f000 f827 	bl	800ede6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	695b      	ldr	r3, [r3, #20]
 800ed9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda2:	2b40      	cmp	r3, #64	; 0x40
 800eda4:	bf0c      	ite	eq
 800eda6:	2301      	moveq	r3, #1
 800eda8:	2300      	movne	r3, #0
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b22      	cmp	r3, #34	; 0x22
 800edb8:	d108      	bne.n	800edcc <UART_DMAError+0x7a>
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d005      	beq.n	800edcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	2200      	movs	r2, #0
 800edc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800edc6:	68b8      	ldr	r0, [r7, #8]
 800edc8:	f000 f823 	bl	800ee12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edd0:	f043 0210 	orr.w	r2, r3, #16
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800edd8:	68b8      	ldr	r0, [r7, #8]
 800edda:	f7ff ff79 	bl	800ecd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edde:	bf00      	nop
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ede6:	b480      	push	{r7}
 800ede8:	b083      	sub	sp, #12
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68da      	ldr	r2, [r3, #12]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800edfc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2220      	movs	r2, #32
 800ee02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ee06:	bf00      	nop
 800ee08:	370c      	adds	r7, #12
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr

0800ee12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee12:	b480      	push	{r7}
 800ee14:	b083      	sub	sp, #12
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	68da      	ldr	r2, [r3, #12]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ee28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	695a      	ldr	r2, [r3, #20]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f022 0201 	bic.w	r2, r2, #1
 800ee38:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2220      	movs	r2, #32
 800ee3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ee42:	bf00      	nop
 800ee44:	370c      	adds	r7, #12
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr

0800ee4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2200      	movs	r2, #0
 800ee66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	f7ff ff31 	bl	800ecd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee6e:	bf00      	nop
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ee76:	b480      	push	{r7}
 800ee78:	b085      	sub	sp, #20
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b21      	cmp	r3, #33	; 0x21
 800ee88:	d144      	bne.n	800ef14 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee92:	d11a      	bne.n	800eeca <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eea8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	691b      	ldr	r3, [r3, #16]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d105      	bne.n	800eebe <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	1c9a      	adds	r2, r3, #2
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	621a      	str	r2, [r3, #32]
 800eebc:	e00e      	b.n	800eedc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	621a      	str	r2, [r3, #32]
 800eec8:	e008      	b.n	800eedc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a1b      	ldr	r3, [r3, #32]
 800eece:	1c59      	adds	r1, r3, #1
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	6211      	str	r1, [r2, #32]
 800eed4:	781a      	ldrb	r2, [r3, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	3b01      	subs	r3, #1
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	4619      	mov	r1, r3
 800eeea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d10f      	bne.n	800ef10 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	68da      	ldr	r2, [r3, #12]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eefe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	68da      	ldr	r2, [r3, #12]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ef10:	2300      	movs	r3, #0
 800ef12:	e000      	b.n	800ef16 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ef14:	2302      	movs	r3, #2
  }
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3714      	adds	r7, #20
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b082      	sub	sp, #8
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68da      	ldr	r2, [r3, #12]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2220      	movs	r2, #32
 800ef3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7fc fb7a 	bl	800b63c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	2b22      	cmp	r3, #34	; 0x22
 800ef64:	d171      	bne.n	800f04a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef6e:	d123      	bne.n	800efb8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef74:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d10e      	bne.n	800ef9c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef94:	1c9a      	adds	r2, r3, #2
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	629a      	str	r2, [r3, #40]	; 0x28
 800ef9a:	e029      	b.n	800eff0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb0:	1c5a      	adds	r2, r3, #1
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	629a      	str	r2, [r3, #40]	; 0x28
 800efb6:	e01b      	b.n	800eff0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	691b      	ldr	r3, [r3, #16]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10a      	bne.n	800efd6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	6858      	ldr	r0, [r3, #4]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efca:	1c59      	adds	r1, r3, #1
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	6291      	str	r1, [r2, #40]	; 0x28
 800efd0:	b2c2      	uxtb	r2, r0
 800efd2:	701a      	strb	r2, [r3, #0]
 800efd4:	e00c      	b.n	800eff0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe2:	1c58      	adds	r0, r3, #1
 800efe4:	6879      	ldr	r1, [r7, #4]
 800efe6:	6288      	str	r0, [r1, #40]	; 0x28
 800efe8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800efec:	b2d2      	uxtb	r2, r2
 800efee:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	3b01      	subs	r3, #1
 800eff8:	b29b      	uxth	r3, r3
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	4619      	mov	r1, r3
 800effe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f000:	2b00      	cmp	r3, #0
 800f002:	d120      	bne.n	800f046 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68da      	ldr	r2, [r3, #12]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f022 0220 	bic.w	r2, r2, #32
 800f012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68da      	ldr	r2, [r3, #12]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	695a      	ldr	r2, [r3, #20]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f022 0201 	bic.w	r2, r2, #1
 800f032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2220      	movs	r2, #32
 800f038:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7ff fe3d 	bl	800ecbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	e002      	b.n	800f04c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f046:	2300      	movs	r3, #0
 800f048:	e000      	b.n	800f04c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f04a:	2302      	movs	r3, #2
  }
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3710      	adds	r7, #16
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f058:	b085      	sub	sp, #20
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	68da      	ldr	r2, [r3, #12]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	430a      	orrs	r2, r1
 800f072:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	689a      	ldr	r2, [r3, #8]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	691b      	ldr	r3, [r3, #16]
 800f07c:	431a      	orrs	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	695b      	ldr	r3, [r3, #20]
 800f082:	431a      	orrs	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	69db      	ldr	r3, [r3, #28]
 800f088:	4313      	orrs	r3, r2
 800f08a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f096:	f023 030c 	bic.w	r3, r3, #12
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	6812      	ldr	r2, [r2, #0]
 800f09e:	68f9      	ldr	r1, [r7, #12]
 800f0a0:	430b      	orrs	r3, r1
 800f0a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	699a      	ldr	r2, [r3, #24]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	430a      	orrs	r2, r1
 800f0b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	69db      	ldr	r3, [r3, #28]
 800f0be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0c2:	f040 818b 	bne.w	800f3dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4ac1      	ldr	r2, [pc, #772]	; (800f3d0 <UART_SetConfig+0x37c>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d005      	beq.n	800f0dc <UART_SetConfig+0x88>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4abf      	ldr	r2, [pc, #764]	; (800f3d4 <UART_SetConfig+0x380>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	f040 80bd 	bne.w	800f256 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f0dc:	f7fe ffc0 	bl	800e060 <HAL_RCC_GetPCLK2Freq>
 800f0e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	461d      	mov	r5, r3
 800f0e6:	f04f 0600 	mov.w	r6, #0
 800f0ea:	46a8      	mov	r8, r5
 800f0ec:	46b1      	mov	r9, r6
 800f0ee:	eb18 0308 	adds.w	r3, r8, r8
 800f0f2:	eb49 0409 	adc.w	r4, r9, r9
 800f0f6:	4698      	mov	r8, r3
 800f0f8:	46a1      	mov	r9, r4
 800f0fa:	eb18 0805 	adds.w	r8, r8, r5
 800f0fe:	eb49 0906 	adc.w	r9, r9, r6
 800f102:	f04f 0100 	mov.w	r1, #0
 800f106:	f04f 0200 	mov.w	r2, #0
 800f10a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f10e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f112:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f116:	4688      	mov	r8, r1
 800f118:	4691      	mov	r9, r2
 800f11a:	eb18 0005 	adds.w	r0, r8, r5
 800f11e:	eb49 0106 	adc.w	r1, r9, r6
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	461d      	mov	r5, r3
 800f128:	f04f 0600 	mov.w	r6, #0
 800f12c:	196b      	adds	r3, r5, r5
 800f12e:	eb46 0406 	adc.w	r4, r6, r6
 800f132:	461a      	mov	r2, r3
 800f134:	4623      	mov	r3, r4
 800f136:	f7f1 fda7 	bl	8000c88 <__aeabi_uldivmod>
 800f13a:	4603      	mov	r3, r0
 800f13c:	460c      	mov	r4, r1
 800f13e:	461a      	mov	r2, r3
 800f140:	4ba5      	ldr	r3, [pc, #660]	; (800f3d8 <UART_SetConfig+0x384>)
 800f142:	fba3 2302 	umull	r2, r3, r3, r2
 800f146:	095b      	lsrs	r3, r3, #5
 800f148:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	461d      	mov	r5, r3
 800f150:	f04f 0600 	mov.w	r6, #0
 800f154:	46a9      	mov	r9, r5
 800f156:	46b2      	mov	sl, r6
 800f158:	eb19 0309 	adds.w	r3, r9, r9
 800f15c:	eb4a 040a 	adc.w	r4, sl, sl
 800f160:	4699      	mov	r9, r3
 800f162:	46a2      	mov	sl, r4
 800f164:	eb19 0905 	adds.w	r9, r9, r5
 800f168:	eb4a 0a06 	adc.w	sl, sl, r6
 800f16c:	f04f 0100 	mov.w	r1, #0
 800f170:	f04f 0200 	mov.w	r2, #0
 800f174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f17c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f180:	4689      	mov	r9, r1
 800f182:	4692      	mov	sl, r2
 800f184:	eb19 0005 	adds.w	r0, r9, r5
 800f188:	eb4a 0106 	adc.w	r1, sl, r6
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	461d      	mov	r5, r3
 800f192:	f04f 0600 	mov.w	r6, #0
 800f196:	196b      	adds	r3, r5, r5
 800f198:	eb46 0406 	adc.w	r4, r6, r6
 800f19c:	461a      	mov	r2, r3
 800f19e:	4623      	mov	r3, r4
 800f1a0:	f7f1 fd72 	bl	8000c88 <__aeabi_uldivmod>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	460c      	mov	r4, r1
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	4b8b      	ldr	r3, [pc, #556]	; (800f3d8 <UART_SetConfig+0x384>)
 800f1ac:	fba3 1302 	umull	r1, r3, r3, r2
 800f1b0:	095b      	lsrs	r3, r3, #5
 800f1b2:	2164      	movs	r1, #100	; 0x64
 800f1b4:	fb01 f303 	mul.w	r3, r1, r3
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	00db      	lsls	r3, r3, #3
 800f1bc:	3332      	adds	r3, #50	; 0x32
 800f1be:	4a86      	ldr	r2, [pc, #536]	; (800f3d8 <UART_SetConfig+0x384>)
 800f1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c4:	095b      	lsrs	r3, r3, #5
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f1cc:	4498      	add	r8, r3
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	461d      	mov	r5, r3
 800f1d2:	f04f 0600 	mov.w	r6, #0
 800f1d6:	46a9      	mov	r9, r5
 800f1d8:	46b2      	mov	sl, r6
 800f1da:	eb19 0309 	adds.w	r3, r9, r9
 800f1de:	eb4a 040a 	adc.w	r4, sl, sl
 800f1e2:	4699      	mov	r9, r3
 800f1e4:	46a2      	mov	sl, r4
 800f1e6:	eb19 0905 	adds.w	r9, r9, r5
 800f1ea:	eb4a 0a06 	adc.w	sl, sl, r6
 800f1ee:	f04f 0100 	mov.w	r1, #0
 800f1f2:	f04f 0200 	mov.w	r2, #0
 800f1f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f202:	4689      	mov	r9, r1
 800f204:	4692      	mov	sl, r2
 800f206:	eb19 0005 	adds.w	r0, r9, r5
 800f20a:	eb4a 0106 	adc.w	r1, sl, r6
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	461d      	mov	r5, r3
 800f214:	f04f 0600 	mov.w	r6, #0
 800f218:	196b      	adds	r3, r5, r5
 800f21a:	eb46 0406 	adc.w	r4, r6, r6
 800f21e:	461a      	mov	r2, r3
 800f220:	4623      	mov	r3, r4
 800f222:	f7f1 fd31 	bl	8000c88 <__aeabi_uldivmod>
 800f226:	4603      	mov	r3, r0
 800f228:	460c      	mov	r4, r1
 800f22a:	461a      	mov	r2, r3
 800f22c:	4b6a      	ldr	r3, [pc, #424]	; (800f3d8 <UART_SetConfig+0x384>)
 800f22e:	fba3 1302 	umull	r1, r3, r3, r2
 800f232:	095b      	lsrs	r3, r3, #5
 800f234:	2164      	movs	r1, #100	; 0x64
 800f236:	fb01 f303 	mul.w	r3, r1, r3
 800f23a:	1ad3      	subs	r3, r2, r3
 800f23c:	00db      	lsls	r3, r3, #3
 800f23e:	3332      	adds	r3, #50	; 0x32
 800f240:	4a65      	ldr	r2, [pc, #404]	; (800f3d8 <UART_SetConfig+0x384>)
 800f242:	fba2 2303 	umull	r2, r3, r2, r3
 800f246:	095b      	lsrs	r3, r3, #5
 800f248:	f003 0207 	and.w	r2, r3, #7
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4442      	add	r2, r8
 800f252:	609a      	str	r2, [r3, #8]
 800f254:	e26f      	b.n	800f736 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f256:	f7fe feef 	bl	800e038 <HAL_RCC_GetPCLK1Freq>
 800f25a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	461d      	mov	r5, r3
 800f260:	f04f 0600 	mov.w	r6, #0
 800f264:	46a8      	mov	r8, r5
 800f266:	46b1      	mov	r9, r6
 800f268:	eb18 0308 	adds.w	r3, r8, r8
 800f26c:	eb49 0409 	adc.w	r4, r9, r9
 800f270:	4698      	mov	r8, r3
 800f272:	46a1      	mov	r9, r4
 800f274:	eb18 0805 	adds.w	r8, r8, r5
 800f278:	eb49 0906 	adc.w	r9, r9, r6
 800f27c:	f04f 0100 	mov.w	r1, #0
 800f280:	f04f 0200 	mov.w	r2, #0
 800f284:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f288:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f28c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f290:	4688      	mov	r8, r1
 800f292:	4691      	mov	r9, r2
 800f294:	eb18 0005 	adds.w	r0, r8, r5
 800f298:	eb49 0106 	adc.w	r1, r9, r6
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	461d      	mov	r5, r3
 800f2a2:	f04f 0600 	mov.w	r6, #0
 800f2a6:	196b      	adds	r3, r5, r5
 800f2a8:	eb46 0406 	adc.w	r4, r6, r6
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	4623      	mov	r3, r4
 800f2b0:	f7f1 fcea 	bl	8000c88 <__aeabi_uldivmod>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	4b47      	ldr	r3, [pc, #284]	; (800f3d8 <UART_SetConfig+0x384>)
 800f2bc:	fba3 2302 	umull	r2, r3, r3, r2
 800f2c0:	095b      	lsrs	r3, r3, #5
 800f2c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	461d      	mov	r5, r3
 800f2ca:	f04f 0600 	mov.w	r6, #0
 800f2ce:	46a9      	mov	r9, r5
 800f2d0:	46b2      	mov	sl, r6
 800f2d2:	eb19 0309 	adds.w	r3, r9, r9
 800f2d6:	eb4a 040a 	adc.w	r4, sl, sl
 800f2da:	4699      	mov	r9, r3
 800f2dc:	46a2      	mov	sl, r4
 800f2de:	eb19 0905 	adds.w	r9, r9, r5
 800f2e2:	eb4a 0a06 	adc.w	sl, sl, r6
 800f2e6:	f04f 0100 	mov.w	r1, #0
 800f2ea:	f04f 0200 	mov.w	r2, #0
 800f2ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f2f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f2f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f2fa:	4689      	mov	r9, r1
 800f2fc:	4692      	mov	sl, r2
 800f2fe:	eb19 0005 	adds.w	r0, r9, r5
 800f302:	eb4a 0106 	adc.w	r1, sl, r6
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	461d      	mov	r5, r3
 800f30c:	f04f 0600 	mov.w	r6, #0
 800f310:	196b      	adds	r3, r5, r5
 800f312:	eb46 0406 	adc.w	r4, r6, r6
 800f316:	461a      	mov	r2, r3
 800f318:	4623      	mov	r3, r4
 800f31a:	f7f1 fcb5 	bl	8000c88 <__aeabi_uldivmod>
 800f31e:	4603      	mov	r3, r0
 800f320:	460c      	mov	r4, r1
 800f322:	461a      	mov	r2, r3
 800f324:	4b2c      	ldr	r3, [pc, #176]	; (800f3d8 <UART_SetConfig+0x384>)
 800f326:	fba3 1302 	umull	r1, r3, r3, r2
 800f32a:	095b      	lsrs	r3, r3, #5
 800f32c:	2164      	movs	r1, #100	; 0x64
 800f32e:	fb01 f303 	mul.w	r3, r1, r3
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	3332      	adds	r3, #50	; 0x32
 800f338:	4a27      	ldr	r2, [pc, #156]	; (800f3d8 <UART_SetConfig+0x384>)
 800f33a:	fba2 2303 	umull	r2, r3, r2, r3
 800f33e:	095b      	lsrs	r3, r3, #5
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f346:	4498      	add	r8, r3
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	461d      	mov	r5, r3
 800f34c:	f04f 0600 	mov.w	r6, #0
 800f350:	46a9      	mov	r9, r5
 800f352:	46b2      	mov	sl, r6
 800f354:	eb19 0309 	adds.w	r3, r9, r9
 800f358:	eb4a 040a 	adc.w	r4, sl, sl
 800f35c:	4699      	mov	r9, r3
 800f35e:	46a2      	mov	sl, r4
 800f360:	eb19 0905 	adds.w	r9, r9, r5
 800f364:	eb4a 0a06 	adc.w	sl, sl, r6
 800f368:	f04f 0100 	mov.w	r1, #0
 800f36c:	f04f 0200 	mov.w	r2, #0
 800f370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f374:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f378:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f37c:	4689      	mov	r9, r1
 800f37e:	4692      	mov	sl, r2
 800f380:	eb19 0005 	adds.w	r0, r9, r5
 800f384:	eb4a 0106 	adc.w	r1, sl, r6
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	461d      	mov	r5, r3
 800f38e:	f04f 0600 	mov.w	r6, #0
 800f392:	196b      	adds	r3, r5, r5
 800f394:	eb46 0406 	adc.w	r4, r6, r6
 800f398:	461a      	mov	r2, r3
 800f39a:	4623      	mov	r3, r4
 800f39c:	f7f1 fc74 	bl	8000c88 <__aeabi_uldivmod>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	460c      	mov	r4, r1
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	4b0c      	ldr	r3, [pc, #48]	; (800f3d8 <UART_SetConfig+0x384>)
 800f3a8:	fba3 1302 	umull	r1, r3, r3, r2
 800f3ac:	095b      	lsrs	r3, r3, #5
 800f3ae:	2164      	movs	r1, #100	; 0x64
 800f3b0:	fb01 f303 	mul.w	r3, r1, r3
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	00db      	lsls	r3, r3, #3
 800f3b8:	3332      	adds	r3, #50	; 0x32
 800f3ba:	4a07      	ldr	r2, [pc, #28]	; (800f3d8 <UART_SetConfig+0x384>)
 800f3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800f3c0:	095b      	lsrs	r3, r3, #5
 800f3c2:	f003 0207 	and.w	r2, r3, #7
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4442      	add	r2, r8
 800f3cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f3ce:	e1b2      	b.n	800f736 <UART_SetConfig+0x6e2>
 800f3d0:	40011000 	.word	0x40011000
 800f3d4:	40011400 	.word	0x40011400
 800f3d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4ad7      	ldr	r2, [pc, #860]	; (800f740 <UART_SetConfig+0x6ec>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d005      	beq.n	800f3f2 <UART_SetConfig+0x39e>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4ad6      	ldr	r2, [pc, #856]	; (800f744 <UART_SetConfig+0x6f0>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	f040 80d1 	bne.w	800f594 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f3f2:	f7fe fe35 	bl	800e060 <HAL_RCC_GetPCLK2Freq>
 800f3f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	469a      	mov	sl, r3
 800f3fc:	f04f 0b00 	mov.w	fp, #0
 800f400:	46d0      	mov	r8, sl
 800f402:	46d9      	mov	r9, fp
 800f404:	eb18 0308 	adds.w	r3, r8, r8
 800f408:	eb49 0409 	adc.w	r4, r9, r9
 800f40c:	4698      	mov	r8, r3
 800f40e:	46a1      	mov	r9, r4
 800f410:	eb18 080a 	adds.w	r8, r8, sl
 800f414:	eb49 090b 	adc.w	r9, r9, fp
 800f418:	f04f 0100 	mov.w	r1, #0
 800f41c:	f04f 0200 	mov.w	r2, #0
 800f420:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f424:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f428:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f42c:	4688      	mov	r8, r1
 800f42e:	4691      	mov	r9, r2
 800f430:	eb1a 0508 	adds.w	r5, sl, r8
 800f434:	eb4b 0609 	adc.w	r6, fp, r9
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	4619      	mov	r1, r3
 800f43e:	f04f 0200 	mov.w	r2, #0
 800f442:	f04f 0300 	mov.w	r3, #0
 800f446:	f04f 0400 	mov.w	r4, #0
 800f44a:	0094      	lsls	r4, r2, #2
 800f44c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f450:	008b      	lsls	r3, r1, #2
 800f452:	461a      	mov	r2, r3
 800f454:	4623      	mov	r3, r4
 800f456:	4628      	mov	r0, r5
 800f458:	4631      	mov	r1, r6
 800f45a:	f7f1 fc15 	bl	8000c88 <__aeabi_uldivmod>
 800f45e:	4603      	mov	r3, r0
 800f460:	460c      	mov	r4, r1
 800f462:	461a      	mov	r2, r3
 800f464:	4bb8      	ldr	r3, [pc, #736]	; (800f748 <UART_SetConfig+0x6f4>)
 800f466:	fba3 2302 	umull	r2, r3, r3, r2
 800f46a:	095b      	lsrs	r3, r3, #5
 800f46c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	469b      	mov	fp, r3
 800f474:	f04f 0c00 	mov.w	ip, #0
 800f478:	46d9      	mov	r9, fp
 800f47a:	46e2      	mov	sl, ip
 800f47c:	eb19 0309 	adds.w	r3, r9, r9
 800f480:	eb4a 040a 	adc.w	r4, sl, sl
 800f484:	4699      	mov	r9, r3
 800f486:	46a2      	mov	sl, r4
 800f488:	eb19 090b 	adds.w	r9, r9, fp
 800f48c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f490:	f04f 0100 	mov.w	r1, #0
 800f494:	f04f 0200 	mov.w	r2, #0
 800f498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f49c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f4a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f4a4:	4689      	mov	r9, r1
 800f4a6:	4692      	mov	sl, r2
 800f4a8:	eb1b 0509 	adds.w	r5, fp, r9
 800f4ac:	eb4c 060a 	adc.w	r6, ip, sl
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	685b      	ldr	r3, [r3, #4]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	f04f 0200 	mov.w	r2, #0
 800f4ba:	f04f 0300 	mov.w	r3, #0
 800f4be:	f04f 0400 	mov.w	r4, #0
 800f4c2:	0094      	lsls	r4, r2, #2
 800f4c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f4c8:	008b      	lsls	r3, r1, #2
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	4623      	mov	r3, r4
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	4631      	mov	r1, r6
 800f4d2:	f7f1 fbd9 	bl	8000c88 <__aeabi_uldivmod>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	460c      	mov	r4, r1
 800f4da:	461a      	mov	r2, r3
 800f4dc:	4b9a      	ldr	r3, [pc, #616]	; (800f748 <UART_SetConfig+0x6f4>)
 800f4de:	fba3 1302 	umull	r1, r3, r3, r2
 800f4e2:	095b      	lsrs	r3, r3, #5
 800f4e4:	2164      	movs	r1, #100	; 0x64
 800f4e6:	fb01 f303 	mul.w	r3, r1, r3
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	011b      	lsls	r3, r3, #4
 800f4ee:	3332      	adds	r3, #50	; 0x32
 800f4f0:	4a95      	ldr	r2, [pc, #596]	; (800f748 <UART_SetConfig+0x6f4>)
 800f4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4f6:	095b      	lsrs	r3, r3, #5
 800f4f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4fc:	4498      	add	r8, r3
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	469b      	mov	fp, r3
 800f502:	f04f 0c00 	mov.w	ip, #0
 800f506:	46d9      	mov	r9, fp
 800f508:	46e2      	mov	sl, ip
 800f50a:	eb19 0309 	adds.w	r3, r9, r9
 800f50e:	eb4a 040a 	adc.w	r4, sl, sl
 800f512:	4699      	mov	r9, r3
 800f514:	46a2      	mov	sl, r4
 800f516:	eb19 090b 	adds.w	r9, r9, fp
 800f51a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f51e:	f04f 0100 	mov.w	r1, #0
 800f522:	f04f 0200 	mov.w	r2, #0
 800f526:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f52a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f52e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f532:	4689      	mov	r9, r1
 800f534:	4692      	mov	sl, r2
 800f536:	eb1b 0509 	adds.w	r5, fp, r9
 800f53a:	eb4c 060a 	adc.w	r6, ip, sl
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	4619      	mov	r1, r3
 800f544:	f04f 0200 	mov.w	r2, #0
 800f548:	f04f 0300 	mov.w	r3, #0
 800f54c:	f04f 0400 	mov.w	r4, #0
 800f550:	0094      	lsls	r4, r2, #2
 800f552:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f556:	008b      	lsls	r3, r1, #2
 800f558:	461a      	mov	r2, r3
 800f55a:	4623      	mov	r3, r4
 800f55c:	4628      	mov	r0, r5
 800f55e:	4631      	mov	r1, r6
 800f560:	f7f1 fb92 	bl	8000c88 <__aeabi_uldivmod>
 800f564:	4603      	mov	r3, r0
 800f566:	460c      	mov	r4, r1
 800f568:	461a      	mov	r2, r3
 800f56a:	4b77      	ldr	r3, [pc, #476]	; (800f748 <UART_SetConfig+0x6f4>)
 800f56c:	fba3 1302 	umull	r1, r3, r3, r2
 800f570:	095b      	lsrs	r3, r3, #5
 800f572:	2164      	movs	r1, #100	; 0x64
 800f574:	fb01 f303 	mul.w	r3, r1, r3
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	011b      	lsls	r3, r3, #4
 800f57c:	3332      	adds	r3, #50	; 0x32
 800f57e:	4a72      	ldr	r2, [pc, #456]	; (800f748 <UART_SetConfig+0x6f4>)
 800f580:	fba2 2303 	umull	r2, r3, r2, r3
 800f584:	095b      	lsrs	r3, r3, #5
 800f586:	f003 020f 	and.w	r2, r3, #15
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4442      	add	r2, r8
 800f590:	609a      	str	r2, [r3, #8]
 800f592:	e0d0      	b.n	800f736 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f594:	f7fe fd50 	bl	800e038 <HAL_RCC_GetPCLK1Freq>
 800f598:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	469a      	mov	sl, r3
 800f59e:	f04f 0b00 	mov.w	fp, #0
 800f5a2:	46d0      	mov	r8, sl
 800f5a4:	46d9      	mov	r9, fp
 800f5a6:	eb18 0308 	adds.w	r3, r8, r8
 800f5aa:	eb49 0409 	adc.w	r4, r9, r9
 800f5ae:	4698      	mov	r8, r3
 800f5b0:	46a1      	mov	r9, r4
 800f5b2:	eb18 080a 	adds.w	r8, r8, sl
 800f5b6:	eb49 090b 	adc.w	r9, r9, fp
 800f5ba:	f04f 0100 	mov.w	r1, #0
 800f5be:	f04f 0200 	mov.w	r2, #0
 800f5c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f5c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f5ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f5ce:	4688      	mov	r8, r1
 800f5d0:	4691      	mov	r9, r2
 800f5d2:	eb1a 0508 	adds.w	r5, sl, r8
 800f5d6:	eb4b 0609 	adc.w	r6, fp, r9
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	4619      	mov	r1, r3
 800f5e0:	f04f 0200 	mov.w	r2, #0
 800f5e4:	f04f 0300 	mov.w	r3, #0
 800f5e8:	f04f 0400 	mov.w	r4, #0
 800f5ec:	0094      	lsls	r4, r2, #2
 800f5ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f5f2:	008b      	lsls	r3, r1, #2
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	4623      	mov	r3, r4
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	4631      	mov	r1, r6
 800f5fc:	f7f1 fb44 	bl	8000c88 <__aeabi_uldivmod>
 800f600:	4603      	mov	r3, r0
 800f602:	460c      	mov	r4, r1
 800f604:	461a      	mov	r2, r3
 800f606:	4b50      	ldr	r3, [pc, #320]	; (800f748 <UART_SetConfig+0x6f4>)
 800f608:	fba3 2302 	umull	r2, r3, r3, r2
 800f60c:	095b      	lsrs	r3, r3, #5
 800f60e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	469b      	mov	fp, r3
 800f616:	f04f 0c00 	mov.w	ip, #0
 800f61a:	46d9      	mov	r9, fp
 800f61c:	46e2      	mov	sl, ip
 800f61e:	eb19 0309 	adds.w	r3, r9, r9
 800f622:	eb4a 040a 	adc.w	r4, sl, sl
 800f626:	4699      	mov	r9, r3
 800f628:	46a2      	mov	sl, r4
 800f62a:	eb19 090b 	adds.w	r9, r9, fp
 800f62e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f632:	f04f 0100 	mov.w	r1, #0
 800f636:	f04f 0200 	mov.w	r2, #0
 800f63a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f63e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f642:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f646:	4689      	mov	r9, r1
 800f648:	4692      	mov	sl, r2
 800f64a:	eb1b 0509 	adds.w	r5, fp, r9
 800f64e:	eb4c 060a 	adc.w	r6, ip, sl
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	4619      	mov	r1, r3
 800f658:	f04f 0200 	mov.w	r2, #0
 800f65c:	f04f 0300 	mov.w	r3, #0
 800f660:	f04f 0400 	mov.w	r4, #0
 800f664:	0094      	lsls	r4, r2, #2
 800f666:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f66a:	008b      	lsls	r3, r1, #2
 800f66c:	461a      	mov	r2, r3
 800f66e:	4623      	mov	r3, r4
 800f670:	4628      	mov	r0, r5
 800f672:	4631      	mov	r1, r6
 800f674:	f7f1 fb08 	bl	8000c88 <__aeabi_uldivmod>
 800f678:	4603      	mov	r3, r0
 800f67a:	460c      	mov	r4, r1
 800f67c:	461a      	mov	r2, r3
 800f67e:	4b32      	ldr	r3, [pc, #200]	; (800f748 <UART_SetConfig+0x6f4>)
 800f680:	fba3 1302 	umull	r1, r3, r3, r2
 800f684:	095b      	lsrs	r3, r3, #5
 800f686:	2164      	movs	r1, #100	; 0x64
 800f688:	fb01 f303 	mul.w	r3, r1, r3
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	011b      	lsls	r3, r3, #4
 800f690:	3332      	adds	r3, #50	; 0x32
 800f692:	4a2d      	ldr	r2, [pc, #180]	; (800f748 <UART_SetConfig+0x6f4>)
 800f694:	fba2 2303 	umull	r2, r3, r2, r3
 800f698:	095b      	lsrs	r3, r3, #5
 800f69a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f69e:	4498      	add	r8, r3
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	469b      	mov	fp, r3
 800f6a4:	f04f 0c00 	mov.w	ip, #0
 800f6a8:	46d9      	mov	r9, fp
 800f6aa:	46e2      	mov	sl, ip
 800f6ac:	eb19 0309 	adds.w	r3, r9, r9
 800f6b0:	eb4a 040a 	adc.w	r4, sl, sl
 800f6b4:	4699      	mov	r9, r3
 800f6b6:	46a2      	mov	sl, r4
 800f6b8:	eb19 090b 	adds.w	r9, r9, fp
 800f6bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f6c0:	f04f 0100 	mov.w	r1, #0
 800f6c4:	f04f 0200 	mov.w	r2, #0
 800f6c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f6cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f6d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f6d4:	4689      	mov	r9, r1
 800f6d6:	4692      	mov	sl, r2
 800f6d8:	eb1b 0509 	adds.w	r5, fp, r9
 800f6dc:	eb4c 060a 	adc.w	r6, ip, sl
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	f04f 0200 	mov.w	r2, #0
 800f6ea:	f04f 0300 	mov.w	r3, #0
 800f6ee:	f04f 0400 	mov.w	r4, #0
 800f6f2:	0094      	lsls	r4, r2, #2
 800f6f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f6f8:	008b      	lsls	r3, r1, #2
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	4623      	mov	r3, r4
 800f6fe:	4628      	mov	r0, r5
 800f700:	4631      	mov	r1, r6
 800f702:	f7f1 fac1 	bl	8000c88 <__aeabi_uldivmod>
 800f706:	4603      	mov	r3, r0
 800f708:	460c      	mov	r4, r1
 800f70a:	461a      	mov	r2, r3
 800f70c:	4b0e      	ldr	r3, [pc, #56]	; (800f748 <UART_SetConfig+0x6f4>)
 800f70e:	fba3 1302 	umull	r1, r3, r3, r2
 800f712:	095b      	lsrs	r3, r3, #5
 800f714:	2164      	movs	r1, #100	; 0x64
 800f716:	fb01 f303 	mul.w	r3, r1, r3
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	011b      	lsls	r3, r3, #4
 800f71e:	3332      	adds	r3, #50	; 0x32
 800f720:	4a09      	ldr	r2, [pc, #36]	; (800f748 <UART_SetConfig+0x6f4>)
 800f722:	fba2 2303 	umull	r2, r3, r2, r3
 800f726:	095b      	lsrs	r3, r3, #5
 800f728:	f003 020f 	and.w	r2, r3, #15
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4442      	add	r2, r8
 800f732:	609a      	str	r2, [r3, #8]
}
 800f734:	e7ff      	b.n	800f736 <UART_SetConfig+0x6e2>
 800f736:	bf00      	nop
 800f738:	3714      	adds	r7, #20
 800f73a:	46bd      	mov	sp, r7
 800f73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f740:	40011000 	.word	0x40011000
 800f744:	40011400 	.word	0x40011400
 800f748:	51eb851f 	.word	0x51eb851f

0800f74c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f74c:	b480      	push	{r7}
 800f74e:	b085      	sub	sp, #20
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f756:	2300      	movs	r3, #0
 800f758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f764:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f766:	68fa      	ldr	r2, [r7, #12]
 800f768:	4b20      	ldr	r3, [pc, #128]	; (800f7ec <FSMC_NORSRAM_Init+0xa0>)
 800f76a:	4013      	ands	r3, r2
 800f76c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f776:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f77c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f782:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f788:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f78e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f794:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f79a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f7a0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f7a6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f7ac:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f7b2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f7b8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	2b08      	cmp	r3, #8
 800f7c6:	d103      	bne.n	800f7d0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7ce:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	68f9      	ldr	r1, [r7, #12]
 800f7d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	fff00080 	.word	0xfff00080

0800f7f0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	1c5a      	adds	r2, r3, #1
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f80a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f812:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f81e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	689b      	ldr	r3, [r3, #8]
 800f824:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f826:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f82e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	691b      	ldr	r3, [r3, #16]
 800f834:	3b01      	subs	r3, #1
 800f836:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f838:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	695b      	ldr	r3, [r3, #20]
 800f83e:	3b02      	subs	r3, #2
 800f840:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f842:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f848:	4313      	orrs	r3, r2
 800f84a:	697a      	ldr	r2, [r7, #20]
 800f84c:	4313      	orrs	r3, r2
 800f84e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6979      	ldr	r1, [r7, #20]
 800f858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	371c      	adds	r7, #28
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
	...

0800f86c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b087      	sub	sp, #28
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f87a:	2300      	movs	r3, #0
 800f87c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f884:	d122      	bne.n	800f8cc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f88e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f890:	697a      	ldr	r2, [r7, #20]
 800f892:	4b15      	ldr	r3, [pc, #84]	; (800f8e8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f894:	4013      	ands	r3, r2
 800f896:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f8a2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f8aa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f8b2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f8b8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f8ba:	697a      	ldr	r2, [r7, #20]
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	6979      	ldr	r1, [r7, #20]
 800f8c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f8ca:	e005      	b.n	800f8d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f8d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f8d8:	2300      	movs	r3, #0
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	371c      	adds	r7, #28
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	cff00000 	.word	0xcff00000

0800f8ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8ec:	b084      	sub	sp, #16
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b084      	sub	sp, #16
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
 800f8f6:	f107 001c 	add.w	r0, r7, #28
 800f8fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f900:	2b01      	cmp	r3, #1
 800f902:	d122      	bne.n	800f94a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f91c:	687a      	ldr	r2, [r7, #4]
 800f91e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d105      	bne.n	800f93e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f001 fac6 	bl	8010ed0 <USB_CoreReset>
 800f944:	4603      	mov	r3, r0
 800f946:	73fb      	strb	r3, [r7, #15]
 800f948:	e01a      	b.n	800f980 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f001 faba 	bl	8010ed0 <USB_CoreReset>
 800f95c:	4603      	mov	r3, r0
 800f95e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f962:	2b00      	cmp	r3, #0
 800f964:	d106      	bne.n	800f974 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f96a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	639a      	str	r2, [r3, #56]	; 0x38
 800f972:	e005      	b.n	800f980 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f982:	2b01      	cmp	r3, #1
 800f984:	d10b      	bne.n	800f99e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	689b      	ldr	r3, [r3, #8]
 800f98a:	f043 0206 	orr.w	r2, r3, #6
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	f043 0220 	orr.w	r2, r3, #32
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3710      	adds	r7, #16
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9aa:	b004      	add	sp, #16
 800f9ac:	4770      	bx	lr
	...

0800f9b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b087      	sub	sp, #28
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	4613      	mov	r3, r2
 800f9bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f9be:	79fb      	ldrb	r3, [r7, #7]
 800f9c0:	2b02      	cmp	r3, #2
 800f9c2:	d165      	bne.n	800fa90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	4a41      	ldr	r2, [pc, #260]	; (800facc <USB_SetTurnaroundTime+0x11c>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d906      	bls.n	800f9da <USB_SetTurnaroundTime+0x2a>
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	4a40      	ldr	r2, [pc, #256]	; (800fad0 <USB_SetTurnaroundTime+0x120>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d802      	bhi.n	800f9da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f9d4:	230f      	movs	r3, #15
 800f9d6:	617b      	str	r3, [r7, #20]
 800f9d8:	e062      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	4a3c      	ldr	r2, [pc, #240]	; (800fad0 <USB_SetTurnaroundTime+0x120>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d906      	bls.n	800f9f0 <USB_SetTurnaroundTime+0x40>
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	4a3b      	ldr	r2, [pc, #236]	; (800fad4 <USB_SetTurnaroundTime+0x124>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d802      	bhi.n	800f9f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f9ea:	230e      	movs	r3, #14
 800f9ec:	617b      	str	r3, [r7, #20]
 800f9ee:	e057      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	4a38      	ldr	r2, [pc, #224]	; (800fad4 <USB_SetTurnaroundTime+0x124>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d906      	bls.n	800fa06 <USB_SetTurnaroundTime+0x56>
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	4a37      	ldr	r2, [pc, #220]	; (800fad8 <USB_SetTurnaroundTime+0x128>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d802      	bhi.n	800fa06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fa00:	230d      	movs	r3, #13
 800fa02:	617b      	str	r3, [r7, #20]
 800fa04:	e04c      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	4a33      	ldr	r2, [pc, #204]	; (800fad8 <USB_SetTurnaroundTime+0x128>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d906      	bls.n	800fa1c <USB_SetTurnaroundTime+0x6c>
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	4a32      	ldr	r2, [pc, #200]	; (800fadc <USB_SetTurnaroundTime+0x12c>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d802      	bhi.n	800fa1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fa16:	230c      	movs	r3, #12
 800fa18:	617b      	str	r3, [r7, #20]
 800fa1a:	e041      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	4a2f      	ldr	r2, [pc, #188]	; (800fadc <USB_SetTurnaroundTime+0x12c>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d906      	bls.n	800fa32 <USB_SetTurnaroundTime+0x82>
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	4a2e      	ldr	r2, [pc, #184]	; (800fae0 <USB_SetTurnaroundTime+0x130>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d802      	bhi.n	800fa32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fa2c:	230b      	movs	r3, #11
 800fa2e:	617b      	str	r3, [r7, #20]
 800fa30:	e036      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	4a2a      	ldr	r2, [pc, #168]	; (800fae0 <USB_SetTurnaroundTime+0x130>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d906      	bls.n	800fa48 <USB_SetTurnaroundTime+0x98>
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	4a29      	ldr	r2, [pc, #164]	; (800fae4 <USB_SetTurnaroundTime+0x134>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d802      	bhi.n	800fa48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fa42:	230a      	movs	r3, #10
 800fa44:	617b      	str	r3, [r7, #20]
 800fa46:	e02b      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	4a26      	ldr	r2, [pc, #152]	; (800fae4 <USB_SetTurnaroundTime+0x134>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d906      	bls.n	800fa5e <USB_SetTurnaroundTime+0xae>
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	4a25      	ldr	r2, [pc, #148]	; (800fae8 <USB_SetTurnaroundTime+0x138>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d802      	bhi.n	800fa5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fa58:	2309      	movs	r3, #9
 800fa5a:	617b      	str	r3, [r7, #20]
 800fa5c:	e020      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	4a21      	ldr	r2, [pc, #132]	; (800fae8 <USB_SetTurnaroundTime+0x138>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d906      	bls.n	800fa74 <USB_SetTurnaroundTime+0xc4>
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	4a20      	ldr	r2, [pc, #128]	; (800faec <USB_SetTurnaroundTime+0x13c>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d802      	bhi.n	800fa74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fa6e:	2308      	movs	r3, #8
 800fa70:	617b      	str	r3, [r7, #20]
 800fa72:	e015      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	4a1d      	ldr	r2, [pc, #116]	; (800faec <USB_SetTurnaroundTime+0x13c>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d906      	bls.n	800fa8a <USB_SetTurnaroundTime+0xda>
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	4a1c      	ldr	r2, [pc, #112]	; (800faf0 <USB_SetTurnaroundTime+0x140>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d802      	bhi.n	800fa8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fa84:	2307      	movs	r3, #7
 800fa86:	617b      	str	r3, [r7, #20]
 800fa88:	e00a      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fa8a:	2306      	movs	r3, #6
 800fa8c:	617b      	str	r3, [r7, #20]
 800fa8e:	e007      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fa90:	79fb      	ldrb	r3, [r7, #7]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d102      	bne.n	800fa9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fa96:	2309      	movs	r3, #9
 800fa98:	617b      	str	r3, [r7, #20]
 800fa9a:	e001      	b.n	800faa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fa9c:	2309      	movs	r3, #9
 800fa9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	68da      	ldr	r2, [r3, #12]
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	029b      	lsls	r3, r3, #10
 800fab4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fab8:	431a      	orrs	r2, r3
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	371c      	adds	r7, #28
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr
 800facc:	00d8acbf 	.word	0x00d8acbf
 800fad0:	00e4e1bf 	.word	0x00e4e1bf
 800fad4:	00f423ff 	.word	0x00f423ff
 800fad8:	0106737f 	.word	0x0106737f
 800fadc:	011a499f 	.word	0x011a499f
 800fae0:	01312cff 	.word	0x01312cff
 800fae4:	014ca43f 	.word	0x014ca43f
 800fae8:	016e35ff 	.word	0x016e35ff
 800faec:	01a6ab1f 	.word	0x01a6ab1f
 800faf0:	01e847ff 	.word	0x01e847ff

0800faf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	f043 0201 	orr.w	r2, r3, #1
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	370c      	adds	r7, #12
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr

0800fb16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb16:	b480      	push	{r7}
 800fb18:	b083      	sub	sp, #12
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	f023 0201 	bic.w	r2, r3, #1
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	460b      	mov	r3, r1
 800fb42:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fb50:	78fb      	ldrb	r3, [r7, #3]
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d106      	bne.n	800fb64 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	60da      	str	r2, [r3, #12]
 800fb62:	e00b      	b.n	800fb7c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fb64:	78fb      	ldrb	r3, [r7, #3]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d106      	bne.n	800fb78 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	60da      	str	r2, [r3, #12]
 800fb76:	e001      	b.n	800fb7c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e003      	b.n	800fb84 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fb7c:	2032      	movs	r0, #50	; 0x32
 800fb7e:	f7fb fdf1 	bl	800b764 <HAL_Delay>

  return HAL_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fb8c:	b084      	sub	sp, #16
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b086      	sub	sp, #24
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
 800fb96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fb9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fba6:	2300      	movs	r3, #0
 800fba8:	613b      	str	r3, [r7, #16]
 800fbaa:	e009      	b.n	800fbc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	3340      	adds	r3, #64	; 0x40
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4413      	add	r3, r2
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	613b      	str	r3, [r7, #16]
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	2b0e      	cmp	r3, #14
 800fbc4:	d9f2      	bls.n	800fbac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d11c      	bne.n	800fc06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbda:	f043 0302 	orr.w	r3, r3, #2
 800fbde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbfc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	639a      	str	r2, [r3, #56]	; 0x38
 800fc04:	e00b      	b.n	800fc1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc24:	461a      	mov	r2, r3
 800fc26:	2300      	movs	r3, #0
 800fc28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc30:	4619      	mov	r1, r3
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc38:	461a      	mov	r2, r3
 800fc3a:	680b      	ldr	r3, [r1, #0]
 800fc3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d10c      	bne.n	800fc5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d104      	bne.n	800fc54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 f949 	bl	800fee4 <USB_SetDevSpeed>
 800fc52:	e008      	b.n	800fc66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fc54:	2101      	movs	r1, #1
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 f944 	bl	800fee4 <USB_SetDevSpeed>
 800fc5c:	e003      	b.n	800fc66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fc5e:	2103      	movs	r1, #3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f000 f93f 	bl	800fee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fc66:	2110      	movs	r1, #16
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 f8f3 	bl	800fe54 <USB_FlushTxFifo>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d001      	beq.n	800fc78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800fc74:	2301      	movs	r3, #1
 800fc76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 f911 	bl	800fea0 <USB_FlushRxFifo>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d001      	beq.n	800fc88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800fc84:	2301      	movs	r3, #1
 800fc86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc8e:	461a      	mov	r2, r3
 800fc90:	2300      	movs	r3, #0
 800fc92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fca6:	461a      	mov	r2, r3
 800fca8:	2300      	movs	r3, #0
 800fcaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcac:	2300      	movs	r3, #0
 800fcae:	613b      	str	r3, [r7, #16]
 800fcb0:	e043      	b.n	800fd3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	015a      	lsls	r2, r3, #5
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	4413      	add	r3, r2
 800fcba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fcc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fcc8:	d118      	bne.n	800fcfc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d10a      	bne.n	800fce6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	015a      	lsls	r2, r3, #5
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcdc:	461a      	mov	r2, r3
 800fcde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fce2:	6013      	str	r3, [r2, #0]
 800fce4:	e013      	b.n	800fd0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	015a      	lsls	r2, r3, #5
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	4413      	add	r3, r2
 800fcee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fcf8:	6013      	str	r3, [r2, #0]
 800fcfa:	e008      	b.n	800fd0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	015a      	lsls	r2, r3, #5
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	4413      	add	r3, r2
 800fd04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd08:	461a      	mov	r2, r3
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	015a      	lsls	r2, r3, #5
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4413      	add	r3, r2
 800fd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	015a      	lsls	r2, r3, #5
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4413      	add	r3, r2
 800fd28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fd32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	3301      	adds	r3, #1
 800fd38:	613b      	str	r3, [r7, #16]
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	693a      	ldr	r2, [r7, #16]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d3b7      	bcc.n	800fcb2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd42:	2300      	movs	r3, #0
 800fd44:	613b      	str	r3, [r7, #16]
 800fd46:	e043      	b.n	800fdd0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	015a      	lsls	r2, r3, #5
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	4413      	add	r3, r2
 800fd50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd5e:	d118      	bne.n	800fd92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10a      	bne.n	800fd7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	015a      	lsls	r2, r3, #5
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd72:	461a      	mov	r2, r3
 800fd74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fd78:	6013      	str	r3, [r2, #0]
 800fd7a:	e013      	b.n	800fda4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	015a      	lsls	r2, r3, #5
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4413      	add	r3, r2
 800fd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd88:	461a      	mov	r2, r3
 800fd8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fd8e:	6013      	str	r3, [r2, #0]
 800fd90:	e008      	b.n	800fda4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	015a      	lsls	r2, r3, #5
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	4413      	add	r3, r2
 800fd9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd9e:	461a      	mov	r2, r3
 800fda0:	2300      	movs	r3, #0
 800fda2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	015a      	lsls	r2, r3, #5
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	4413      	add	r3, r2
 800fdac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	015a      	lsls	r2, r3, #5
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fdc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	613b      	str	r3, [r7, #16]
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	693a      	ldr	r2, [r7, #16]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d3b7      	bcc.n	800fd48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	68fa      	ldr	r2, [r7, #12]
 800fde2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fde6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fdf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d105      	bne.n	800fe0c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	699b      	ldr	r3, [r3, #24]
 800fe04:	f043 0210 	orr.w	r2, r3, #16
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	699a      	ldr	r2, [r3, #24]
 800fe10:	4b0f      	ldr	r3, [pc, #60]	; (800fe50 <USB_DevInit+0x2c4>)
 800fe12:	4313      	orrs	r3, r2
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fe18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d005      	beq.n	800fe2a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	699b      	ldr	r3, [r3, #24]
 800fe22:	f043 0208 	orr.w	r2, r3, #8
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fe2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d107      	bne.n	800fe40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	699b      	ldr	r3, [r3, #24]
 800fe34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe38:	f043 0304 	orr.w	r3, r3, #4
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fe40:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3718      	adds	r7, #24
 800fe46:	46bd      	mov	sp, r7
 800fe48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe4c:	b004      	add	sp, #16
 800fe4e:	4770      	bx	lr
 800fe50:	803c3800 	.word	0x803c3800

0800fe54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	019b      	lsls	r3, r3, #6
 800fe66:	f043 0220 	orr.w	r2, r3, #32
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	3301      	adds	r3, #1
 800fe72:	60fb      	str	r3, [r7, #12]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	4a09      	ldr	r2, [pc, #36]	; (800fe9c <USB_FlushTxFifo+0x48>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d901      	bls.n	800fe80 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fe7c:	2303      	movs	r3, #3
 800fe7e:	e006      	b.n	800fe8e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	691b      	ldr	r3, [r3, #16]
 800fe84:	f003 0320 	and.w	r3, r3, #32
 800fe88:	2b20      	cmp	r3, #32
 800fe8a:	d0f0      	beq.n	800fe6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3714      	adds	r7, #20
 800fe92:	46bd      	mov	sp, r7
 800fe94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop
 800fe9c:	00030d40 	.word	0x00030d40

0800fea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b085      	sub	sp, #20
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fea8:	2300      	movs	r3, #0
 800feaa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2210      	movs	r2, #16
 800feb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	3301      	adds	r3, #1
 800feb6:	60fb      	str	r3, [r7, #12]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	4a09      	ldr	r2, [pc, #36]	; (800fee0 <USB_FlushRxFifo+0x40>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d901      	bls.n	800fec4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fec0:	2303      	movs	r3, #3
 800fec2:	e006      	b.n	800fed2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	f003 0310 	and.w	r3, r3, #16
 800fecc:	2b10      	cmp	r3, #16
 800fece:	d0f0      	beq.n	800feb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop
 800fee0:	00030d40 	.word	0x00030d40

0800fee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	460b      	mov	r3, r1
 800feee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	78fb      	ldrb	r3, [r7, #3]
 800fefe:	68f9      	ldr	r1, [r7, #12]
 800ff00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff04:	4313      	orrs	r3, r2
 800ff06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ff08:	2300      	movs	r3, #0
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3714      	adds	r7, #20
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ff16:	b480      	push	{r7}
 800ff18:	b087      	sub	sp, #28
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff28:	689b      	ldr	r3, [r3, #8]
 800ff2a:	f003 0306 	and.w	r3, r3, #6
 800ff2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d102      	bne.n	800ff3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ff36:	2300      	movs	r3, #0
 800ff38:	75fb      	strb	r3, [r7, #23]
 800ff3a:	e00a      	b.n	800ff52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2b02      	cmp	r3, #2
 800ff40:	d002      	beq.n	800ff48 <USB_GetDevSpeed+0x32>
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	2b06      	cmp	r3, #6
 800ff46:	d102      	bne.n	800ff4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ff48:	2302      	movs	r3, #2
 800ff4a:	75fb      	strb	r3, [r7, #23]
 800ff4c:	e001      	b.n	800ff52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ff4e:	230f      	movs	r3, #15
 800ff50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ff52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	371c      	adds	r7, #28
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	785b      	ldrb	r3, [r3, #1]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d13a      	bne.n	800fff2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff82:	69da      	ldr	r2, [r3, #28]
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f003 030f 	and.w	r3, r3, #15
 800ff8c:	2101      	movs	r1, #1
 800ff8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	68f9      	ldr	r1, [r7, #12]
 800ff96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	015a      	lsls	r2, r3, #5
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	4413      	add	r3, r2
 800ffa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d155      	bne.n	8010060 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	015a      	lsls	r2, r3, #5
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	4413      	add	r3, r2
 800ffbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	78db      	ldrb	r3, [r3, #3]
 800ffce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	059b      	lsls	r3, r3, #22
 800ffd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	0151      	lsls	r1, r2, #5
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	440a      	add	r2, r1
 800ffe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffee:	6013      	str	r3, [r2, #0]
 800fff0:	e036      	b.n	8010060 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fff8:	69da      	ldr	r2, [r3, #28]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	f003 030f 	and.w	r3, r3, #15
 8010002:	2101      	movs	r1, #1
 8010004:	fa01 f303 	lsl.w	r3, r1, r3
 8010008:	041b      	lsls	r3, r3, #16
 801000a:	68f9      	ldr	r1, [r7, #12]
 801000c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010010:	4313      	orrs	r3, r2
 8010012:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	015a      	lsls	r2, r3, #5
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	4413      	add	r3, r2
 801001c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010026:	2b00      	cmp	r3, #0
 8010028:	d11a      	bne.n	8010060 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	015a      	lsls	r2, r3, #5
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	4413      	add	r3, r2
 8010032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	78db      	ldrb	r3, [r3, #3]
 8010044:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010046:	430b      	orrs	r3, r1
 8010048:	4313      	orrs	r3, r2
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	0151      	lsls	r1, r2, #5
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	440a      	add	r2, r1
 8010052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801005a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801005e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
	...

08010070 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010070:	b480      	push	{r7}
 8010072:	b085      	sub	sp, #20
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	785b      	ldrb	r3, [r3, #1]
 8010088:	2b01      	cmp	r3, #1
 801008a:	d161      	bne.n	8010150 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	015a      	lsls	r2, r3, #5
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	4413      	add	r3, r2
 8010094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801009e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100a2:	d11f      	bne.n	80100e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	015a      	lsls	r2, r3, #5
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	4413      	add	r3, r2
 80100ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68ba      	ldr	r2, [r7, #8]
 80100b4:	0151      	lsls	r1, r2, #5
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	440a      	add	r2, r1
 80100ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80100c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	015a      	lsls	r2, r3, #5
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	4413      	add	r3, r2
 80100cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	68ba      	ldr	r2, [r7, #8]
 80100d4:	0151      	lsls	r1, r2, #5
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	440a      	add	r2, r1
 80100da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	f003 030f 	and.w	r3, r3, #15
 80100f4:	2101      	movs	r1, #1
 80100f6:	fa01 f303 	lsl.w	r3, r1, r3
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	43db      	mvns	r3, r3
 80100fe:	68f9      	ldr	r1, [r7, #12]
 8010100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010104:	4013      	ands	r3, r2
 8010106:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801010e:	69da      	ldr	r2, [r3, #28]
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	f003 030f 	and.w	r3, r3, #15
 8010118:	2101      	movs	r1, #1
 801011a:	fa01 f303 	lsl.w	r3, r1, r3
 801011e:	b29b      	uxth	r3, r3
 8010120:	43db      	mvns	r3, r3
 8010122:	68f9      	ldr	r1, [r7, #12]
 8010124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010128:	4013      	ands	r3, r2
 801012a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	015a      	lsls	r2, r3, #5
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	4413      	add	r3, r2
 8010134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	0159      	lsls	r1, r3, #5
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	440b      	add	r3, r1
 8010142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010146:	4619      	mov	r1, r3
 8010148:	4b35      	ldr	r3, [pc, #212]	; (8010220 <USB_DeactivateEndpoint+0x1b0>)
 801014a:	4013      	ands	r3, r2
 801014c:	600b      	str	r3, [r1, #0]
 801014e:	e060      	b.n	8010212 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	015a      	lsls	r2, r3, #5
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	4413      	add	r3, r2
 8010158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010166:	d11f      	bne.n	80101a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	015a      	lsls	r2, r3, #5
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	4413      	add	r3, r2
 8010170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	68ba      	ldr	r2, [r7, #8]
 8010178:	0151      	lsls	r1, r2, #5
 801017a:	68fa      	ldr	r2, [r7, #12]
 801017c:	440a      	add	r2, r1
 801017e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010186:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	015a      	lsls	r2, r3, #5
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	4413      	add	r3, r2
 8010190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	0151      	lsls	r1, r2, #5
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	440a      	add	r2, r1
 801019e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	f003 030f 	and.w	r3, r3, #15
 80101b8:	2101      	movs	r1, #1
 80101ba:	fa01 f303 	lsl.w	r3, r1, r3
 80101be:	041b      	lsls	r3, r3, #16
 80101c0:	43db      	mvns	r3, r3
 80101c2:	68f9      	ldr	r1, [r7, #12]
 80101c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101c8:	4013      	ands	r3, r2
 80101ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101d2:	69da      	ldr	r2, [r3, #28]
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	781b      	ldrb	r3, [r3, #0]
 80101d8:	f003 030f 	and.w	r3, r3, #15
 80101dc:	2101      	movs	r1, #1
 80101de:	fa01 f303 	lsl.w	r3, r1, r3
 80101e2:	041b      	lsls	r3, r3, #16
 80101e4:	43db      	mvns	r3, r3
 80101e6:	68f9      	ldr	r1, [r7, #12]
 80101e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101ec:	4013      	ands	r3, r2
 80101ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	015a      	lsls	r2, r3, #5
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	4413      	add	r3, r2
 80101f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	0159      	lsls	r1, r3, #5
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	440b      	add	r3, r1
 8010206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801020a:	4619      	mov	r1, r3
 801020c:	4b05      	ldr	r3, [pc, #20]	; (8010224 <USB_DeactivateEndpoint+0x1b4>)
 801020e:	4013      	ands	r3, r2
 8010210:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	ec337800 	.word	0xec337800
 8010224:	eff37800 	.word	0xeff37800

08010228 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b08a      	sub	sp, #40	; 0x28
 801022c:	af02      	add	r7, sp, #8
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	4613      	mov	r3, r2
 8010234:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	785b      	ldrb	r3, [r3, #1]
 8010244:	2b01      	cmp	r3, #1
 8010246:	f040 815c 	bne.w	8010502 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	695b      	ldr	r3, [r3, #20]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d132      	bne.n	80102b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	015a      	lsls	r2, r3, #5
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	4413      	add	r3, r2
 801025a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801025e:	691b      	ldr	r3, [r3, #16]
 8010260:	69ba      	ldr	r2, [r7, #24]
 8010262:	0151      	lsls	r1, r2, #5
 8010264:	69fa      	ldr	r2, [r7, #28]
 8010266:	440a      	add	r2, r1
 8010268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801026c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010270:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	015a      	lsls	r2, r3, #5
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	4413      	add	r3, r2
 801027e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010282:	691b      	ldr	r3, [r3, #16]
 8010284:	69ba      	ldr	r2, [r7, #24]
 8010286:	0151      	lsls	r1, r2, #5
 8010288:	69fa      	ldr	r2, [r7, #28]
 801028a:	440a      	add	r2, r1
 801028c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	015a      	lsls	r2, r3, #5
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	4413      	add	r3, r2
 801029e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a2:	691b      	ldr	r3, [r3, #16]
 80102a4:	69ba      	ldr	r2, [r7, #24]
 80102a6:	0151      	lsls	r1, r2, #5
 80102a8:	69fa      	ldr	r2, [r7, #28]
 80102aa:	440a      	add	r2, r1
 80102ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102b0:	0cdb      	lsrs	r3, r3, #19
 80102b2:	04db      	lsls	r3, r3, #19
 80102b4:	6113      	str	r3, [r2, #16]
 80102b6:	e074      	b.n	80103a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	015a      	lsls	r2, r3, #5
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	4413      	add	r3, r2
 80102c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102c4:	691b      	ldr	r3, [r3, #16]
 80102c6:	69ba      	ldr	r2, [r7, #24]
 80102c8:	0151      	lsls	r1, r2, #5
 80102ca:	69fa      	ldr	r2, [r7, #28]
 80102cc:	440a      	add	r2, r1
 80102ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102d2:	0cdb      	lsrs	r3, r3, #19
 80102d4:	04db      	lsls	r3, r3, #19
 80102d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	015a      	lsls	r2, r3, #5
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	4413      	add	r3, r2
 80102e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e4:	691b      	ldr	r3, [r3, #16]
 80102e6:	69ba      	ldr	r2, [r7, #24]
 80102e8:	0151      	lsls	r1, r2, #5
 80102ea:	69fa      	ldr	r2, [r7, #28]
 80102ec:	440a      	add	r2, r1
 80102ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	015a      	lsls	r2, r3, #5
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	4413      	add	r3, r2
 8010304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010308:	691a      	ldr	r2, [r3, #16]
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	6959      	ldr	r1, [r3, #20]
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	440b      	add	r3, r1
 8010314:	1e59      	subs	r1, r3, #1
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	fbb1 f3f3 	udiv	r3, r1, r3
 801031e:	04d9      	lsls	r1, r3, #19
 8010320:	4b9d      	ldr	r3, [pc, #628]	; (8010598 <USB_EPStartXfer+0x370>)
 8010322:	400b      	ands	r3, r1
 8010324:	69b9      	ldr	r1, [r7, #24]
 8010326:	0148      	lsls	r0, r1, #5
 8010328:	69f9      	ldr	r1, [r7, #28]
 801032a:	4401      	add	r1, r0
 801032c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010330:	4313      	orrs	r3, r2
 8010332:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	015a      	lsls	r2, r3, #5
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	4413      	add	r3, r2
 801033c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010340:	691a      	ldr	r2, [r3, #16]
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	695b      	ldr	r3, [r3, #20]
 8010346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801034a:	69b9      	ldr	r1, [r7, #24]
 801034c:	0148      	lsls	r0, r1, #5
 801034e:	69f9      	ldr	r1, [r7, #28]
 8010350:	4401      	add	r1, r0
 8010352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010356:	4313      	orrs	r3, r2
 8010358:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	78db      	ldrb	r3, [r3, #3]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d11f      	bne.n	80103a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	015a      	lsls	r2, r3, #5
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	4413      	add	r3, r2
 801036a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801036e:	691b      	ldr	r3, [r3, #16]
 8010370:	69ba      	ldr	r2, [r7, #24]
 8010372:	0151      	lsls	r1, r2, #5
 8010374:	69fa      	ldr	r2, [r7, #28]
 8010376:	440a      	add	r2, r1
 8010378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801037c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010380:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	015a      	lsls	r2, r3, #5
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	4413      	add	r3, r2
 801038a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801038e:	691b      	ldr	r3, [r3, #16]
 8010390:	69ba      	ldr	r2, [r7, #24]
 8010392:	0151      	lsls	r1, r2, #5
 8010394:	69fa      	ldr	r2, [r7, #28]
 8010396:	440a      	add	r2, r1
 8010398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801039c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80103a2:	79fb      	ldrb	r3, [r7, #7]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d14b      	bne.n	8010440 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d009      	beq.n	80103c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	015a      	lsls	r2, r3, #5
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	4413      	add	r3, r2
 80103b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103bc:	461a      	mov	r2, r3
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	78db      	ldrb	r3, [r3, #3]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d128      	bne.n	801041e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d110      	bne.n	80103fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	015a      	lsls	r2, r3, #5
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	4413      	add	r3, r2
 80103e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	0151      	lsls	r1, r2, #5
 80103ee:	69fa      	ldr	r2, [r7, #28]
 80103f0:	440a      	add	r2, r1
 80103f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103fa:	6013      	str	r3, [r2, #0]
 80103fc:	e00f      	b.n	801041e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	015a      	lsls	r2, r3, #5
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	4413      	add	r3, r2
 8010406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	69ba      	ldr	r2, [r7, #24]
 801040e:	0151      	lsls	r1, r2, #5
 8010410:	69fa      	ldr	r2, [r7, #28]
 8010412:	440a      	add	r2, r1
 8010414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801041c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	015a      	lsls	r2, r3, #5
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	4413      	add	r3, r2
 8010426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	69ba      	ldr	r2, [r7, #24]
 801042e:	0151      	lsls	r1, r2, #5
 8010430:	69fa      	ldr	r2, [r7, #28]
 8010432:	440a      	add	r2, r1
 8010434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010438:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801043c:	6013      	str	r3, [r2, #0]
 801043e:	e12f      	b.n	80106a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	015a      	lsls	r2, r3, #5
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	4413      	add	r3, r2
 8010448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	69ba      	ldr	r2, [r7, #24]
 8010450:	0151      	lsls	r1, r2, #5
 8010452:	69fa      	ldr	r2, [r7, #28]
 8010454:	440a      	add	r2, r1
 8010456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801045a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801045e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	78db      	ldrb	r3, [r3, #3]
 8010464:	2b01      	cmp	r3, #1
 8010466:	d015      	beq.n	8010494 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	695b      	ldr	r3, [r3, #20]
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 8117 	beq.w	80106a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	f003 030f 	and.w	r3, r3, #15
 8010482:	2101      	movs	r1, #1
 8010484:	fa01 f303 	lsl.w	r3, r1, r3
 8010488:	69f9      	ldr	r1, [r7, #28]
 801048a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801048e:	4313      	orrs	r3, r2
 8010490:	634b      	str	r3, [r1, #52]	; 0x34
 8010492:	e105      	b.n	80106a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801049a:	689b      	ldr	r3, [r3, #8]
 801049c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d110      	bne.n	80104c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	015a      	lsls	r2, r3, #5
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	4413      	add	r3, r2
 80104ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	69ba      	ldr	r2, [r7, #24]
 80104b4:	0151      	lsls	r1, r2, #5
 80104b6:	69fa      	ldr	r2, [r7, #28]
 80104b8:	440a      	add	r2, r1
 80104ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80104c2:	6013      	str	r3, [r2, #0]
 80104c4:	e00f      	b.n	80104e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	015a      	lsls	r2, r3, #5
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	4413      	add	r3, r2
 80104ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	69ba      	ldr	r2, [r7, #24]
 80104d6:	0151      	lsls	r1, r2, #5
 80104d8:	69fa      	ldr	r2, [r7, #28]
 80104da:	440a      	add	r2, r1
 80104dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	68d9      	ldr	r1, [r3, #12]
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	781a      	ldrb	r2, [r3, #0]
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	b298      	uxth	r0, r3
 80104f4:	79fb      	ldrb	r3, [r7, #7]
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	4603      	mov	r3, r0
 80104fa:	68f8      	ldr	r0, [r7, #12]
 80104fc:	f000 fa2b 	bl	8010956 <USB_WritePacket>
 8010500:	e0ce      	b.n	80106a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	015a      	lsls	r2, r3, #5
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	4413      	add	r3, r2
 801050a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801050e:	691b      	ldr	r3, [r3, #16]
 8010510:	69ba      	ldr	r2, [r7, #24]
 8010512:	0151      	lsls	r1, r2, #5
 8010514:	69fa      	ldr	r2, [r7, #28]
 8010516:	440a      	add	r2, r1
 8010518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801051c:	0cdb      	lsrs	r3, r3, #19
 801051e:	04db      	lsls	r3, r3, #19
 8010520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	015a      	lsls	r2, r3, #5
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	4413      	add	r3, r2
 801052a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	69ba      	ldr	r2, [r7, #24]
 8010532:	0151      	lsls	r1, r2, #5
 8010534:	69fa      	ldr	r2, [r7, #28]
 8010536:	440a      	add	r2, r1
 8010538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801053c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010544:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	695b      	ldr	r3, [r3, #20]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d126      	bne.n	801059c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	015a      	lsls	r2, r3, #5
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	4413      	add	r3, r2
 8010556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801055a:	691a      	ldr	r2, [r3, #16]
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	689b      	ldr	r3, [r3, #8]
 8010560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010564:	69b9      	ldr	r1, [r7, #24]
 8010566:	0148      	lsls	r0, r1, #5
 8010568:	69f9      	ldr	r1, [r7, #28]
 801056a:	4401      	add	r1, r0
 801056c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010570:	4313      	orrs	r3, r2
 8010572:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	015a      	lsls	r2, r3, #5
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	4413      	add	r3, r2
 801057c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010580:	691b      	ldr	r3, [r3, #16]
 8010582:	69ba      	ldr	r2, [r7, #24]
 8010584:	0151      	lsls	r1, r2, #5
 8010586:	69fa      	ldr	r2, [r7, #28]
 8010588:	440a      	add	r2, r1
 801058a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801058e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010592:	6113      	str	r3, [r2, #16]
 8010594:	e036      	b.n	8010604 <USB_EPStartXfer+0x3dc>
 8010596:	bf00      	nop
 8010598:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	695a      	ldr	r2, [r3, #20]
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	689b      	ldr	r3, [r3, #8]
 80105a4:	4413      	add	r3, r2
 80105a6:	1e5a      	subs	r2, r3, #1
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	689b      	ldr	r3, [r3, #8]
 80105ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80105b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	015a      	lsls	r2, r3, #5
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	4413      	add	r3, r2
 80105ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105be:	691a      	ldr	r2, [r3, #16]
 80105c0:	8afb      	ldrh	r3, [r7, #22]
 80105c2:	04d9      	lsls	r1, r3, #19
 80105c4:	4b39      	ldr	r3, [pc, #228]	; (80106ac <USB_EPStartXfer+0x484>)
 80105c6:	400b      	ands	r3, r1
 80105c8:	69b9      	ldr	r1, [r7, #24]
 80105ca:	0148      	lsls	r0, r1, #5
 80105cc:	69f9      	ldr	r1, [r7, #28]
 80105ce:	4401      	add	r1, r0
 80105d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105d4:	4313      	orrs	r3, r2
 80105d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	015a      	lsls	r2, r3, #5
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	4413      	add	r3, r2
 80105e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e4:	691a      	ldr	r2, [r3, #16]
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	8af9      	ldrh	r1, [r7, #22]
 80105ec:	fb01 f303 	mul.w	r3, r1, r3
 80105f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105f4:	69b9      	ldr	r1, [r7, #24]
 80105f6:	0148      	lsls	r0, r1, #5
 80105f8:	69f9      	ldr	r1, [r7, #28]
 80105fa:	4401      	add	r1, r0
 80105fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010600:	4313      	orrs	r3, r2
 8010602:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010604:	79fb      	ldrb	r3, [r7, #7]
 8010606:	2b01      	cmp	r3, #1
 8010608:	d10d      	bne.n	8010626 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d009      	beq.n	8010626 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	68d9      	ldr	r1, [r3, #12]
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	015a      	lsls	r2, r3, #5
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	4413      	add	r3, r2
 801061e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010622:	460a      	mov	r2, r1
 8010624:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	78db      	ldrb	r3, [r3, #3]
 801062a:	2b01      	cmp	r3, #1
 801062c:	d128      	bne.n	8010680 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010634:	689b      	ldr	r3, [r3, #8]
 8010636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801063a:	2b00      	cmp	r3, #0
 801063c:	d110      	bne.n	8010660 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	015a      	lsls	r2, r3, #5
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	4413      	add	r3, r2
 8010646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	69ba      	ldr	r2, [r7, #24]
 801064e:	0151      	lsls	r1, r2, #5
 8010650:	69fa      	ldr	r2, [r7, #28]
 8010652:	440a      	add	r2, r1
 8010654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801065c:	6013      	str	r3, [r2, #0]
 801065e:	e00f      	b.n	8010680 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010660:	69bb      	ldr	r3, [r7, #24]
 8010662:	015a      	lsls	r2, r3, #5
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	4413      	add	r3, r2
 8010668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	69ba      	ldr	r2, [r7, #24]
 8010670:	0151      	lsls	r1, r2, #5
 8010672:	69fa      	ldr	r2, [r7, #28]
 8010674:	440a      	add	r2, r1
 8010676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801067e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010680:	69bb      	ldr	r3, [r7, #24]
 8010682:	015a      	lsls	r2, r3, #5
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	4413      	add	r3, r2
 8010688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	69ba      	ldr	r2, [r7, #24]
 8010690:	0151      	lsls	r1, r2, #5
 8010692:	69fa      	ldr	r2, [r7, #28]
 8010694:	440a      	add	r2, r1
 8010696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801069a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801069e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80106a0:	2300      	movs	r3, #0
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3720      	adds	r7, #32
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	1ff80000 	.word	0x1ff80000

080106b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b087      	sub	sp, #28
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	4613      	mov	r3, r2
 80106bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	785b      	ldrb	r3, [r3, #1]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	f040 80cd 	bne.w	801086c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	695b      	ldr	r3, [r3, #20]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d132      	bne.n	8010740 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	015a      	lsls	r2, r3, #5
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	4413      	add	r3, r2
 80106e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e6:	691b      	ldr	r3, [r3, #16]
 80106e8:	693a      	ldr	r2, [r7, #16]
 80106ea:	0151      	lsls	r1, r2, #5
 80106ec:	697a      	ldr	r2, [r7, #20]
 80106ee:	440a      	add	r2, r1
 80106f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80106f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80106fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	015a      	lsls	r2, r3, #5
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	4413      	add	r3, r2
 8010706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801070a:	691b      	ldr	r3, [r3, #16]
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	0151      	lsls	r1, r2, #5
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	440a      	add	r2, r1
 8010714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801071c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	015a      	lsls	r2, r3, #5
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	4413      	add	r3, r2
 8010726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	693a      	ldr	r2, [r7, #16]
 801072e:	0151      	lsls	r1, r2, #5
 8010730:	697a      	ldr	r2, [r7, #20]
 8010732:	440a      	add	r2, r1
 8010734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010738:	0cdb      	lsrs	r3, r3, #19
 801073a:	04db      	lsls	r3, r3, #19
 801073c:	6113      	str	r3, [r2, #16]
 801073e:	e04e      	b.n	80107de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	015a      	lsls	r2, r3, #5
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	4413      	add	r3, r2
 8010748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801074c:	691b      	ldr	r3, [r3, #16]
 801074e:	693a      	ldr	r2, [r7, #16]
 8010750:	0151      	lsls	r1, r2, #5
 8010752:	697a      	ldr	r2, [r7, #20]
 8010754:	440a      	add	r2, r1
 8010756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801075a:	0cdb      	lsrs	r3, r3, #19
 801075c:	04db      	lsls	r3, r3, #19
 801075e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	015a      	lsls	r2, r3, #5
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	4413      	add	r3, r2
 8010768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801076c:	691b      	ldr	r3, [r3, #16]
 801076e:	693a      	ldr	r2, [r7, #16]
 8010770:	0151      	lsls	r1, r2, #5
 8010772:	697a      	ldr	r2, [r7, #20]
 8010774:	440a      	add	r2, r1
 8010776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801077a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801077e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010782:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	695a      	ldr	r2, [r3, #20]
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	429a      	cmp	r2, r3
 801078e:	d903      	bls.n	8010798 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	689a      	ldr	r2, [r3, #8]
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	015a      	lsls	r2, r3, #5
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	4413      	add	r3, r2
 80107a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a4:	691b      	ldr	r3, [r3, #16]
 80107a6:	693a      	ldr	r2, [r7, #16]
 80107a8:	0151      	lsls	r1, r2, #5
 80107aa:	697a      	ldr	r2, [r7, #20]
 80107ac:	440a      	add	r2, r1
 80107ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	015a      	lsls	r2, r3, #5
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	4413      	add	r3, r2
 80107c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c4:	691a      	ldr	r2, [r3, #16]
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	695b      	ldr	r3, [r3, #20]
 80107ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107ce:	6939      	ldr	r1, [r7, #16]
 80107d0:	0148      	lsls	r0, r1, #5
 80107d2:	6979      	ldr	r1, [r7, #20]
 80107d4:	4401      	add	r1, r0
 80107d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80107da:	4313      	orrs	r3, r2
 80107dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80107de:	79fb      	ldrb	r3, [r7, #7]
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d11e      	bne.n	8010822 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	691b      	ldr	r3, [r3, #16]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d009      	beq.n	8010800 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	015a      	lsls	r2, r3, #5
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107f8:	461a      	mov	r2, r3
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	691b      	ldr	r3, [r3, #16]
 80107fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	015a      	lsls	r2, r3, #5
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	4413      	add	r3, r2
 8010808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	693a      	ldr	r2, [r7, #16]
 8010810:	0151      	lsls	r1, r2, #5
 8010812:	697a      	ldr	r2, [r7, #20]
 8010814:	440a      	add	r2, r1
 8010816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801081a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801081e:	6013      	str	r3, [r2, #0]
 8010820:	e092      	b.n	8010948 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	015a      	lsls	r2, r3, #5
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	4413      	add	r3, r2
 801082a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	693a      	ldr	r2, [r7, #16]
 8010832:	0151      	lsls	r1, r2, #5
 8010834:	697a      	ldr	r2, [r7, #20]
 8010836:	440a      	add	r2, r1
 8010838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801083c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010840:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	695b      	ldr	r3, [r3, #20]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d07e      	beq.n	8010948 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	f003 030f 	and.w	r3, r3, #15
 801085a:	2101      	movs	r1, #1
 801085c:	fa01 f303 	lsl.w	r3, r1, r3
 8010860:	6979      	ldr	r1, [r7, #20]
 8010862:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010866:	4313      	orrs	r3, r2
 8010868:	634b      	str	r3, [r1, #52]	; 0x34
 801086a:	e06d      	b.n	8010948 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	015a      	lsls	r2, r3, #5
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	4413      	add	r3, r2
 8010874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010878:	691b      	ldr	r3, [r3, #16]
 801087a:	693a      	ldr	r2, [r7, #16]
 801087c:	0151      	lsls	r1, r2, #5
 801087e:	697a      	ldr	r2, [r7, #20]
 8010880:	440a      	add	r2, r1
 8010882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010886:	0cdb      	lsrs	r3, r3, #19
 8010888:	04db      	lsls	r3, r3, #19
 801088a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	015a      	lsls	r2, r3, #5
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	4413      	add	r3, r2
 8010894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010898:	691b      	ldr	r3, [r3, #16]
 801089a:	693a      	ldr	r2, [r7, #16]
 801089c:	0151      	lsls	r1, r2, #5
 801089e:	697a      	ldr	r2, [r7, #20]
 80108a0:	440a      	add	r2, r1
 80108a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80108aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80108ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	695b      	ldr	r3, [r3, #20]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d003      	beq.n	80108c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	689a      	ldr	r2, [r3, #8]
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	015a      	lsls	r2, r3, #5
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	4413      	add	r3, r2
 80108c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	693a      	ldr	r2, [r7, #16]
 80108d0:	0151      	lsls	r1, r2, #5
 80108d2:	697a      	ldr	r2, [r7, #20]
 80108d4:	440a      	add	r2, r1
 80108d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	015a      	lsls	r2, r3, #5
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	4413      	add	r3, r2
 80108e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108ec:	691a      	ldr	r2, [r3, #16]
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108f6:	6939      	ldr	r1, [r7, #16]
 80108f8:	0148      	lsls	r0, r1, #5
 80108fa:	6979      	ldr	r1, [r7, #20]
 80108fc:	4401      	add	r1, r0
 80108fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010902:	4313      	orrs	r3, r2
 8010904:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010906:	79fb      	ldrb	r3, [r7, #7]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d10d      	bne.n	8010928 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d009      	beq.n	8010928 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	68d9      	ldr	r1, [r3, #12]
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	015a      	lsls	r2, r3, #5
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	4413      	add	r3, r2
 8010920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010924:	460a      	mov	r2, r1
 8010926:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	015a      	lsls	r2, r3, #5
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	4413      	add	r3, r2
 8010930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	693a      	ldr	r2, [r7, #16]
 8010938:	0151      	lsls	r1, r2, #5
 801093a:	697a      	ldr	r2, [r7, #20]
 801093c:	440a      	add	r2, r1
 801093e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	371c      	adds	r7, #28
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr

08010956 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010956:	b480      	push	{r7}
 8010958:	b089      	sub	sp, #36	; 0x24
 801095a:	af00      	add	r7, sp, #0
 801095c:	60f8      	str	r0, [r7, #12]
 801095e:	60b9      	str	r1, [r7, #8]
 8010960:	4611      	mov	r1, r2
 8010962:	461a      	mov	r2, r3
 8010964:	460b      	mov	r3, r1
 8010966:	71fb      	strb	r3, [r7, #7]
 8010968:	4613      	mov	r3, r2
 801096a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010974:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010978:	2b00      	cmp	r3, #0
 801097a:	d11a      	bne.n	80109b2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801097c:	88bb      	ldrh	r3, [r7, #4]
 801097e:	3303      	adds	r3, #3
 8010980:	089b      	lsrs	r3, r3, #2
 8010982:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010984:	2300      	movs	r3, #0
 8010986:	61bb      	str	r3, [r7, #24]
 8010988:	e00f      	b.n	80109aa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801098a:	79fb      	ldrb	r3, [r7, #7]
 801098c:	031a      	lsls	r2, r3, #12
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	4413      	add	r3, r2
 8010992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010996:	461a      	mov	r2, r3
 8010998:	69fb      	ldr	r3, [r7, #28]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	6013      	str	r3, [r2, #0]
      pSrc++;
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	3304      	adds	r3, #4
 80109a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	3301      	adds	r3, #1
 80109a8:	61bb      	str	r3, [r7, #24]
 80109aa:	69ba      	ldr	r2, [r7, #24]
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d3eb      	bcc.n	801098a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80109b2:	2300      	movs	r3, #0
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3724      	adds	r7, #36	; 0x24
 80109b8:	46bd      	mov	sp, r7
 80109ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109be:	4770      	bx	lr

080109c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b089      	sub	sp, #36	; 0x24
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	4613      	mov	r3, r2
 80109cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80109d6:	88fb      	ldrh	r3, [r7, #6]
 80109d8:	3303      	adds	r3, #3
 80109da:	089b      	lsrs	r3, r3, #2
 80109dc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80109de:	2300      	movs	r3, #0
 80109e0:	61bb      	str	r3, [r7, #24]
 80109e2:	e00b      	b.n	80109fc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109ea:	681a      	ldr	r2, [r3, #0]
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	3304      	adds	r3, #4
 80109f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	3301      	adds	r3, #1
 80109fa:	61bb      	str	r3, [r7, #24]
 80109fc:	69ba      	ldr	r2, [r7, #24]
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d3ef      	bcc.n	80109e4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010a04:	69fb      	ldr	r3, [r7, #28]
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3724      	adds	r7, #36	; 0x24
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010a12:	b480      	push	{r7}
 8010a14:	b085      	sub	sp, #20
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	785b      	ldrb	r3, [r3, #1]
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d12c      	bne.n	8010a88 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	015a      	lsls	r2, r3, #5
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	4413      	add	r3, r2
 8010a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	db12      	blt.n	8010a66 <USB_EPSetStall+0x54>
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00f      	beq.n	8010a66 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	015a      	lsls	r2, r3, #5
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	68ba      	ldr	r2, [r7, #8]
 8010a56:	0151      	lsls	r1, r2, #5
 8010a58:	68fa      	ldr	r2, [r7, #12]
 8010a5a:	440a      	add	r2, r1
 8010a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010a64:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	015a      	lsls	r2, r3, #5
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	4413      	add	r3, r2
 8010a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	0151      	lsls	r1, r2, #5
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	440a      	add	r2, r1
 8010a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010a84:	6013      	str	r3, [r2, #0]
 8010a86:	e02b      	b.n	8010ae0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	015a      	lsls	r2, r3, #5
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	4413      	add	r3, r2
 8010a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	db12      	blt.n	8010ac0 <USB_EPSetStall+0xae>
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d00f      	beq.n	8010ac0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	015a      	lsls	r2, r3, #5
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	0151      	lsls	r1, r2, #5
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	440a      	add	r2, r1
 8010ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010aba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010abe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	015a      	lsls	r2, r3, #5
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	4413      	add	r3, r2
 8010ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	68ba      	ldr	r2, [r7, #8]
 8010ad0:	0151      	lsls	r1, r2, #5
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	440a      	add	r2, r1
 8010ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010ade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3714      	adds	r7, #20
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr

08010aee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010aee:	b480      	push	{r7}
 8010af0:	b085      	sub	sp, #20
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
 8010af6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	785b      	ldrb	r3, [r3, #1]
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d128      	bne.n	8010b5c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	015a      	lsls	r2, r3, #5
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	4413      	add	r3, r2
 8010b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	0151      	lsls	r1, r2, #5
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	440a      	add	r2, r1
 8010b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	78db      	ldrb	r3, [r3, #3]
 8010b2e:	2b03      	cmp	r3, #3
 8010b30:	d003      	beq.n	8010b3a <USB_EPClearStall+0x4c>
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	78db      	ldrb	r3, [r3, #3]
 8010b36:	2b02      	cmp	r3, #2
 8010b38:	d138      	bne.n	8010bac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	015a      	lsls	r2, r3, #5
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	4413      	add	r3, r2
 8010b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	68ba      	ldr	r2, [r7, #8]
 8010b4a:	0151      	lsls	r1, r2, #5
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	440a      	add	r2, r1
 8010b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b58:	6013      	str	r3, [r2, #0]
 8010b5a:	e027      	b.n	8010bac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	015a      	lsls	r2, r3, #5
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	4413      	add	r3, r2
 8010b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	0151      	lsls	r1, r2, #5
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	440a      	add	r2, r1
 8010b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	78db      	ldrb	r3, [r3, #3]
 8010b80:	2b03      	cmp	r3, #3
 8010b82:	d003      	beq.n	8010b8c <USB_EPClearStall+0x9e>
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	78db      	ldrb	r3, [r3, #3]
 8010b88:	2b02      	cmp	r3, #2
 8010b8a:	d10f      	bne.n	8010bac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	015a      	lsls	r2, r3, #5
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	4413      	add	r3, r2
 8010b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68ba      	ldr	r2, [r7, #8]
 8010b9c:	0151      	lsls	r1, r2, #5
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	440a      	add	r2, r1
 8010ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010baa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010bac:	2300      	movs	r3, #0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3714      	adds	r7, #20
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr

08010bba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010bba:	b480      	push	{r7}
 8010bbc:	b085      	sub	sp, #20
 8010bbe:	af00      	add	r7, sp, #0
 8010bc0:	6078      	str	r0, [r7, #4]
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010bd8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010bdc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	78fb      	ldrb	r3, [r7, #3]
 8010be8:	011b      	lsls	r3, r3, #4
 8010bea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010bee:	68f9      	ldr	r1, [r7, #12]
 8010bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010bf8:	2300      	movs	r3, #0
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3714      	adds	r7, #20
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c04:	4770      	bx	lr

08010c06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c06:	b480      	push	{r7}
 8010c08:	b085      	sub	sp, #20
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	68fa      	ldr	r2, [r7, #12]
 8010c1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c20:	f023 0303 	bic.w	r3, r3, #3
 8010c24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	68fa      	ldr	r2, [r7, #12]
 8010c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c34:	f023 0302 	bic.w	r3, r3, #2
 8010c38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c62:	f023 0303 	bic.w	r3, r3, #3
 8010c66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	68fa      	ldr	r2, [r7, #12]
 8010c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c76:	f043 0302 	orr.w	r3, r3, #2
 8010c7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3714      	adds	r7, #20
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr

08010c8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010c8a:	b480      	push	{r7}
 8010c8c:	b085      	sub	sp, #20
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	695b      	ldr	r3, [r3, #20]
 8010c96:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	699b      	ldr	r3, [r3, #24]
 8010c9c:	68fa      	ldr	r2, [r7, #12]
 8010c9e:	4013      	ands	r3, r2
 8010ca0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cc2:	699b      	ldr	r3, [r3, #24]
 8010cc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	68ba      	ldr	r2, [r7, #8]
 8010cd0:	4013      	ands	r3, r2
 8010cd2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	0c1b      	lsrs	r3, r3, #16
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3714      	adds	r7, #20
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr

08010ce4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cf6:	699b      	ldr	r3, [r3, #24]
 8010cf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d00:	69db      	ldr	r3, [r3, #28]
 8010d02:	68ba      	ldr	r2, [r7, #8]
 8010d04:	4013      	ands	r3, r2
 8010d06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	b29b      	uxth	r3, r3
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3714      	adds	r7, #20
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr

08010d18 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	460b      	mov	r3, r1
 8010d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010d28:	78fb      	ldrb	r3, [r7, #3]
 8010d2a:	015a      	lsls	r2, r3, #5
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	4413      	add	r3, r2
 8010d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d34:	689b      	ldr	r3, [r3, #8]
 8010d36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d3e:	695b      	ldr	r3, [r3, #20]
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	4013      	ands	r3, r2
 8010d44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d46:	68bb      	ldr	r3, [r7, #8]
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3714      	adds	r7, #20
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr

08010d54 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b087      	sub	sp, #28
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d6a:	691b      	ldr	r3, [r3, #16]
 8010d6c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d76:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010d78:	78fb      	ldrb	r3, [r7, #3]
 8010d7a:	f003 030f 	and.w	r3, r3, #15
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	fa22 f303 	lsr.w	r3, r2, r3
 8010d84:	01db      	lsls	r3, r3, #7
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	693a      	ldr	r2, [r7, #16]
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010d8e:	78fb      	ldrb	r3, [r7, #3]
 8010d90:	015a      	lsls	r2, r3, #5
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	4413      	add	r3, r2
 8010d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d9a:	689b      	ldr	r3, [r3, #8]
 8010d9c:	693a      	ldr	r2, [r7, #16]
 8010d9e:	4013      	ands	r3, r2
 8010da0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010da2:	68bb      	ldr	r3, [r7, #8]
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	371c      	adds	r7, #28
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	695b      	ldr	r3, [r3, #20]
 8010dbc:	f003 0301 	and.w	r3, r3, #1
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b085      	sub	sp, #20
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010de6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010dea:	f023 0307 	bic.w	r3, r3, #7
 8010dee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	68fa      	ldr	r2, [r7, #12]
 8010dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3714      	adds	r7, #20
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr
	...

08010e14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b087      	sub	sp, #28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	460b      	mov	r3, r1
 8010e1e:	607a      	str	r2, [r7, #4]
 8010e20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	333c      	adds	r3, #60	; 0x3c
 8010e2a:	3304      	adds	r3, #4
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	4a26      	ldr	r2, [pc, #152]	; (8010ecc <USB_EP0_OutStart+0xb8>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d90a      	bls.n	8010e4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e48:	d101      	bne.n	8010e4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	e037      	b.n	8010ebe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e54:	461a      	mov	r2, r3
 8010e56:	2300      	movs	r3, #0
 8010e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e60:	691b      	ldr	r3, [r3, #16]
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	697a      	ldr	r2, [r7, #20]
 8010e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e7c:	f043 0318 	orr.w	r3, r3, #24
 8010e80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e88:	691b      	ldr	r3, [r3, #16]
 8010e8a:	697a      	ldr	r2, [r7, #20]
 8010e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010e94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010e96:	7afb      	ldrb	r3, [r7, #11]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d10f      	bne.n	8010ebc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	697a      	ldr	r2, [r7, #20]
 8010eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010eba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	371c      	adds	r7, #28
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	4f54300a 	.word	0x4f54300a

08010ed0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b085      	sub	sp, #20
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	60fb      	str	r3, [r7, #12]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	4a13      	ldr	r2, [pc, #76]	; (8010f34 <USB_CoreReset+0x64>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d901      	bls.n	8010eee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010eea:	2303      	movs	r3, #3
 8010eec:	e01b      	b.n	8010f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	daf2      	bge.n	8010edc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	691b      	ldr	r3, [r3, #16]
 8010efe:	f043 0201 	orr.w	r2, r3, #1
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	3301      	adds	r3, #1
 8010f0a:	60fb      	str	r3, [r7, #12]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	4a09      	ldr	r2, [pc, #36]	; (8010f34 <USB_CoreReset+0x64>)
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d901      	bls.n	8010f18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010f14:	2303      	movs	r3, #3
 8010f16:	e006      	b.n	8010f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	691b      	ldr	r3, [r3, #16]
 8010f1c:	f003 0301 	and.w	r3, r3, #1
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d0f0      	beq.n	8010f06 <USB_CoreReset+0x36>

  return HAL_OK;
 8010f24:	2300      	movs	r3, #0
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3714      	adds	r7, #20
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr
 8010f32:	bf00      	nop
 8010f34:	00030d40 	.word	0x00030d40

08010f38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	460b      	mov	r3, r1
 8010f42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010f44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010f48:	f004 ffd0 	bl	8015eec <malloc>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d105      	bne.n	8010f62 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010f5e:	2302      	movs	r3, #2
 8010f60:	e066      	b.n	8011030 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	68fa      	ldr	r2, [r7, #12]
 8010f66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	7c1b      	ldrb	r3, [r3, #16]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d119      	bne.n	8010fa6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f76:	2202      	movs	r2, #2
 8010f78:	2181      	movs	r1, #129	; 0x81
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f004 fe3d 	bl	8015bfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2201      	movs	r2, #1
 8010f84:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f8a:	2202      	movs	r2, #2
 8010f8c:	2101      	movs	r1, #1
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f004 fe33 	bl	8015bfa <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2201      	movs	r2, #1
 8010f98:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2210      	movs	r2, #16
 8010fa0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010fa4:	e016      	b.n	8010fd4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010fa6:	2340      	movs	r3, #64	; 0x40
 8010fa8:	2202      	movs	r2, #2
 8010faa:	2181      	movs	r1, #129	; 0x81
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f004 fe24 	bl	8015bfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010fb8:	2340      	movs	r3, #64	; 0x40
 8010fba:	2202      	movs	r2, #2
 8010fbc:	2101      	movs	r1, #1
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f004 fe1b 	bl	8015bfa <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2210      	movs	r2, #16
 8010fd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010fd4:	2308      	movs	r3, #8
 8010fd6:	2203      	movs	r2, #3
 8010fd8:	2182      	movs	r1, #130	; 0x82
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f004 fe0d 	bl	8015bfa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	7c1b      	ldrb	r3, [r3, #16]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d109      	bne.n	801101e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011014:	2101      	movs	r1, #1
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f004 fede 	bl	8015dd8 <USBD_LL_PrepareReceive>
 801101c:	e007      	b.n	801102e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011024:	2340      	movs	r3, #64	; 0x40
 8011026:	2101      	movs	r1, #1
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f004 fed5 	bl	8015dd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801102e:	2300      	movs	r3, #0
}
 8011030:	4618      	mov	r0, r3
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011044:	2300      	movs	r3, #0
 8011046:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011048:	2181      	movs	r1, #129	; 0x81
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f004 fdfb 	bl	8015c46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011056:	2101      	movs	r1, #1
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f004 fdf4 	bl	8015c46 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011066:	2182      	movs	r1, #130	; 0x82
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f004 fdec 	bl	8015c46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00e      	beq.n	80110a6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011098:	4618      	mov	r0, r3
 801109a:	f004 ff2f 	bl	8015efc <free>
    pdev->pClassData = NULL;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2200      	movs	r2, #0
 80110a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80110a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3710      	adds	r7, #16
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b086      	sub	sp, #24
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80110c2:	2300      	movs	r3, #0
 80110c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80110c6:	2300      	movs	r3, #0
 80110c8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80110ca:	2300      	movs	r3, #0
 80110cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d03a      	beq.n	8011150 <USBD_CDC_Setup+0xa0>
 80110da:	2b20      	cmp	r3, #32
 80110dc:	f040 8097 	bne.w	801120e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	88db      	ldrh	r3, [r3, #6]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d029      	beq.n	801113c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	b25b      	sxtb	r3, r3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	da11      	bge.n	8011116 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110f8:	689b      	ldr	r3, [r3, #8]
 80110fa:	683a      	ldr	r2, [r7, #0]
 80110fc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80110fe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011100:	683a      	ldr	r2, [r7, #0]
 8011102:	88d2      	ldrh	r2, [r2, #6]
 8011104:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011106:	6939      	ldr	r1, [r7, #16]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	88db      	ldrh	r3, [r3, #6]
 801110c:	461a      	mov	r2, r3
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f001 fa9d 	bl	801264e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8011114:	e082      	b.n	801121c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	785a      	ldrb	r2, [r3, #1]
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	88db      	ldrh	r3, [r3, #6]
 8011124:	b2da      	uxtb	r2, r3
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801112c:	6939      	ldr	r1, [r7, #16]
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	88db      	ldrh	r3, [r3, #6]
 8011132:	461a      	mov	r2, r3
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f001 fab6 	bl	80126a6 <USBD_CtlPrepareRx>
    break;
 801113a:	e06f      	b.n	801121c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011142:	689b      	ldr	r3, [r3, #8]
 8011144:	683a      	ldr	r2, [r7, #0]
 8011146:	7850      	ldrb	r0, [r2, #1]
 8011148:	2200      	movs	r2, #0
 801114a:	6839      	ldr	r1, [r7, #0]
 801114c:	4798      	blx	r3
    break;
 801114e:	e065      	b.n	801121c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	785b      	ldrb	r3, [r3, #1]
 8011154:	2b0b      	cmp	r3, #11
 8011156:	d84f      	bhi.n	80111f8 <USBD_CDC_Setup+0x148>
 8011158:	a201      	add	r2, pc, #4	; (adr r2, 8011160 <USBD_CDC_Setup+0xb0>)
 801115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801115e:	bf00      	nop
 8011160:	08011191 	.word	0x08011191
 8011164:	08011207 	.word	0x08011207
 8011168:	080111f9 	.word	0x080111f9
 801116c:	080111f9 	.word	0x080111f9
 8011170:	080111f9 	.word	0x080111f9
 8011174:	080111f9 	.word	0x080111f9
 8011178:	080111f9 	.word	0x080111f9
 801117c:	080111f9 	.word	0x080111f9
 8011180:	080111f9 	.word	0x080111f9
 8011184:	080111f9 	.word	0x080111f9
 8011188:	080111b9 	.word	0x080111b9
 801118c:	080111e1 	.word	0x080111e1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011196:	2b03      	cmp	r3, #3
 8011198:	d107      	bne.n	80111aa <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801119a:	f107 030c 	add.w	r3, r7, #12
 801119e:	2202      	movs	r2, #2
 80111a0:	4619      	mov	r1, r3
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f001 fa53 	bl	801264e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80111a8:	e030      	b.n	801120c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80111aa:	6839      	ldr	r1, [r7, #0]
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f001 f9dd 	bl	801256c <USBD_CtlError>
        ret = USBD_FAIL;
 80111b2:	2303      	movs	r3, #3
 80111b4:	75fb      	strb	r3, [r7, #23]
      break;
 80111b6:	e029      	b.n	801120c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111be:	2b03      	cmp	r3, #3
 80111c0:	d107      	bne.n	80111d2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80111c2:	f107 030f 	add.w	r3, r7, #15
 80111c6:	2201      	movs	r2, #1
 80111c8:	4619      	mov	r1, r3
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f001 fa3f 	bl	801264e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80111d0:	e01c      	b.n	801120c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80111d2:	6839      	ldr	r1, [r7, #0]
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f001 f9c9 	bl	801256c <USBD_CtlError>
        ret = USBD_FAIL;
 80111da:	2303      	movs	r3, #3
 80111dc:	75fb      	strb	r3, [r7, #23]
      break;
 80111de:	e015      	b.n	801120c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111e6:	2b03      	cmp	r3, #3
 80111e8:	d00f      	beq.n	801120a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80111ea:	6839      	ldr	r1, [r7, #0]
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f001 f9bd 	bl	801256c <USBD_CtlError>
        ret = USBD_FAIL;
 80111f2:	2303      	movs	r3, #3
 80111f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80111f6:	e008      	b.n	801120a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80111f8:	6839      	ldr	r1, [r7, #0]
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f001 f9b6 	bl	801256c <USBD_CtlError>
      ret = USBD_FAIL;
 8011200:	2303      	movs	r3, #3
 8011202:	75fb      	strb	r3, [r7, #23]
      break;
 8011204:	e002      	b.n	801120c <USBD_CDC_Setup+0x15c>
      break;
 8011206:	bf00      	nop
 8011208:	e008      	b.n	801121c <USBD_CDC_Setup+0x16c>
      break;
 801120a:	bf00      	nop
    }
    break;
 801120c:	e006      	b.n	801121c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 801120e:	6839      	ldr	r1, [r7, #0]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f001 f9ab 	bl	801256c <USBD_CtlError>
    ret = USBD_FAIL;
 8011216:	2303      	movs	r3, #3
 8011218:	75fb      	strb	r3, [r7, #23]
    break;
 801121a:	bf00      	nop
  }

  return (uint8_t)ret;
 801121c:	7dfb      	ldrb	r3, [r7, #23]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3718      	adds	r7, #24
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop

08011228 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	460b      	mov	r3, r1
 8011232:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801123a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011242:	2b00      	cmp	r3, #0
 8011244:	d101      	bne.n	801124a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011246:	2303      	movs	r3, #3
 8011248:	e049      	b.n	80112de <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011250:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011252:	78fa      	ldrb	r2, [r7, #3]
 8011254:	6879      	ldr	r1, [r7, #4]
 8011256:	4613      	mov	r3, r2
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	4413      	add	r3, r2
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	440b      	add	r3, r1
 8011260:	3318      	adds	r3, #24
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d029      	beq.n	80112bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011268:	78fa      	ldrb	r2, [r7, #3]
 801126a:	6879      	ldr	r1, [r7, #4]
 801126c:	4613      	mov	r3, r2
 801126e:	009b      	lsls	r3, r3, #2
 8011270:	4413      	add	r3, r2
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	440b      	add	r3, r1
 8011276:	3318      	adds	r3, #24
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	78f9      	ldrb	r1, [r7, #3]
 801127c:	68f8      	ldr	r0, [r7, #12]
 801127e:	460b      	mov	r3, r1
 8011280:	00db      	lsls	r3, r3, #3
 8011282:	1a5b      	subs	r3, r3, r1
 8011284:	009b      	lsls	r3, r3, #2
 8011286:	4403      	add	r3, r0
 8011288:	3344      	adds	r3, #68	; 0x44
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011290:	fb03 f301 	mul.w	r3, r3, r1
 8011294:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011296:	2b00      	cmp	r3, #0
 8011298:	d110      	bne.n	80112bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801129a:	78fa      	ldrb	r2, [r7, #3]
 801129c:	6879      	ldr	r1, [r7, #4]
 801129e:	4613      	mov	r3, r2
 80112a0:	009b      	lsls	r3, r3, #2
 80112a2:	4413      	add	r3, r2
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	440b      	add	r3, r1
 80112a8:	3318      	adds	r3, #24
 80112aa:	2200      	movs	r2, #0
 80112ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80112ae:	78f9      	ldrb	r1, [r7, #3]
 80112b0:	2300      	movs	r3, #0
 80112b2:	2200      	movs	r2, #0
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f004 fd6e 	bl	8015d96 <USBD_LL_Transmit>
 80112ba:	e00f      	b.n	80112dc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	2200      	movs	r2, #0
 80112c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80112d2:	68ba      	ldr	r2, [r7, #8]
 80112d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80112d8:	78fa      	ldrb	r2, [r7, #3]
 80112da:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80112dc:	2300      	movs	r3, #0
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b084      	sub	sp, #16
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
 80112ee:	460b      	mov	r3, r1
 80112f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011304:	2303      	movs	r3, #3
 8011306:	e015      	b.n	8011334 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011308:	78fb      	ldrb	r3, [r7, #3]
 801130a:	4619      	mov	r1, r3
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f004 fd84 	bl	8015e1a <USBD_LL_GetRxDataSize>
 8011312:	4602      	mov	r2, r0
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	68fa      	ldr	r2, [r7, #12]
 8011324:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801132e:	4611      	mov	r1, r2
 8011330:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011332:	2300      	movs	r3, #0
}
 8011334:	4618      	mov	r0, r3
 8011336:	3710      	adds	r7, #16
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801134a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011352:	2b00      	cmp	r3, #0
 8011354:	d015      	beq.n	8011382 <USBD_CDC_EP0_RxReady+0x46>
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801135c:	2bff      	cmp	r3, #255	; 0xff
 801135e:	d010      	beq.n	8011382 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	68fa      	ldr	r2, [r7, #12]
 801136a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801136e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011376:	b292      	uxth	r2, r2
 8011378:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	22ff      	movs	r2, #255	; 0xff
 801137e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011382:	2300      	movs	r3, #0
}
 8011384:	4618      	mov	r0, r3
 8011386:	3710      	adds	r7, #16
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801138c:	b480      	push	{r7}
 801138e:	b083      	sub	sp, #12
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2243      	movs	r2, #67	; 0x43
 8011398:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801139a:	4b03      	ldr	r3, [pc, #12]	; (80113a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801139c:	4618      	mov	r0, r3
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr
 80113a8:	2000091c 	.word	0x2000091c

080113ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2243      	movs	r2, #67	; 0x43
 80113b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80113ba:	4b03      	ldr	r3, [pc, #12]	; (80113c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80113bc:	4618      	mov	r0, r3
 80113be:	370c      	adds	r7, #12
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr
 80113c8:	200008d8 	.word	0x200008d8

080113cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2243      	movs	r2, #67	; 0x43
 80113d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80113da:	4b03      	ldr	r3, [pc, #12]	; (80113e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80113dc:	4618      	mov	r0, r3
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr
 80113e8:	20000960 	.word	0x20000960

080113ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	220a      	movs	r2, #10
 80113f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80113fa:	4b03      	ldr	r3, [pc, #12]	; (8011408 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr
 8011408:	20000894 	.word	0x20000894

0801140c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d101      	bne.n	8011420 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801141c:	2303      	movs	r3, #3
 801141e:	e004      	b.n	801142a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	683a      	ldr	r2, [r7, #0]
 8011424:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011428:	2300      	movs	r3, #0
}
 801142a:	4618      	mov	r0, r3
 801142c:	370c      	adds	r7, #12
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr

08011436 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011436:	b480      	push	{r7}
 8011438:	b087      	sub	sp, #28
 801143a:	af00      	add	r7, sp, #0
 801143c:	60f8      	str	r0, [r7, #12]
 801143e:	60b9      	str	r1, [r7, #8]
 8011440:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011448:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801145a:	2300      	movs	r3, #0
}
 801145c:	4618      	mov	r0, r3
 801145e:	371c      	adds	r7, #28
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr

08011468 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011478:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	683a      	ldr	r2, [r7, #0]
 801147e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	3714      	adds	r7, #20
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801149e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80114a0:	2301      	movs	r3, #1
 80114a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d101      	bne.n	80114b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80114ae:	2303      	movs	r3, #3
 80114b0:	e01a      	b.n	80114e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d114      	bne.n	80114e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	2201      	movs	r2, #1
 80114c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80114da:	2181      	movs	r1, #129	; 0x81
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f004 fc5a 	bl	8015d96 <USBD_LL_Transmit>

    ret = USBD_OK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80114e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011506:	2b00      	cmp	r3, #0
 8011508:	d101      	bne.n	801150e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801150a:	2303      	movs	r3, #3
 801150c:	e016      	b.n	801153c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	7c1b      	ldrb	r3, [r3, #16]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d109      	bne.n	801152a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801151c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011520:	2101      	movs	r1, #1
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f004 fc58 	bl	8015dd8 <USBD_LL_PrepareReceive>
 8011528:	e007      	b.n	801153a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011530:	2340      	movs	r3, #64	; 0x40
 8011532:	2101      	movs	r1, #1
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f004 fc4f 	bl	8015dd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	4613      	mov	r3, r2
 8011550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d101      	bne.n	801155c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011558:	2303      	movs	r3, #3
 801155a:	e025      	b.n	80115a8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011562:	2b00      	cmp	r3, #0
 8011564:	d003      	beq.n	801156e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2200      	movs	r2, #0
 801156a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011574:	2b00      	cmp	r3, #0
 8011576:	d003      	beq.n	8011580 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2200      	movs	r2, #0
 801157c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d003      	beq.n	801158e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	68ba      	ldr	r2, [r7, #8]
 801158a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2201      	movs	r2, #1
 8011592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	79fa      	ldrb	r2, [r7, #7]
 801159a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f004 fac5 	bl	8015b2c <USBD_LL_Init>
 80115a2:	4603      	mov	r3, r0
 80115a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80115a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3718      	adds	r7, #24
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80115ba:	2300      	movs	r3, #0
 80115bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d101      	bne.n	80115c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80115c4:	2303      	movs	r3, #3
 80115c6:	e010      	b.n	80115ea <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	683a      	ldr	r2, [r7, #0]
 80115cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115d8:	f107 020e 	add.w	r2, r7, #14
 80115dc:	4610      	mov	r0, r2
 80115de:	4798      	blx	r3
 80115e0:	4602      	mov	r2, r0
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80115e8:	2300      	movs	r3, #0
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b082      	sub	sp, #8
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f004 fae2 	bl	8015bc4 <USBD_LL_Start>
 8011600:	4603      	mov	r3, r0
}
 8011602:	4618      	mov	r0, r3
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801160a:	b480      	push	{r7}
 801160c:	b083      	sub	sp, #12
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	370c      	adds	r7, #12
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	460b      	mov	r3, r1
 801162a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801162c:	2303      	movs	r3, #3
 801162e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011636:	2b00      	cmp	r3, #0
 8011638:	d009      	beq.n	801164e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	78fa      	ldrb	r2, [r7, #3]
 8011644:	4611      	mov	r1, r2
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	4798      	blx	r3
 801164a:	4603      	mov	r3, r0
 801164c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011650:	4618      	mov	r0, r3
 8011652:	3710      	adds	r7, #16
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801166a:	2b00      	cmp	r3, #0
 801166c:	d007      	beq.n	801167e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	78fa      	ldrb	r2, [r7, #3]
 8011678:	4611      	mov	r1, r2
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	4798      	blx	r3
  }

  return USBD_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011698:	6839      	ldr	r1, [r7, #0]
 801169a:	4618      	mov	r0, r3
 801169c:	f000 ff2c 	bl	80124f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2201      	movs	r2, #1
 80116a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80116ae:	461a      	mov	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80116bc:	f003 031f 	and.w	r3, r3, #31
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d00e      	beq.n	80116e2 <USBD_LL_SetupStage+0x5a>
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d302      	bcc.n	80116ce <USBD_LL_SetupStage+0x46>
 80116c8:	2b02      	cmp	r3, #2
 80116ca:	d014      	beq.n	80116f6 <USBD_LL_SetupStage+0x6e>
 80116cc:	e01d      	b.n	801170a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116d4:	4619      	mov	r1, r3
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 fa18 	bl	8011b0c <USBD_StdDevReq>
 80116dc:	4603      	mov	r3, r0
 80116de:	73fb      	strb	r3, [r7, #15]
      break;
 80116e0:	e020      	b.n	8011724 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116e8:	4619      	mov	r1, r3
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f000 fa7c 	bl	8011be8 <USBD_StdItfReq>
 80116f0:	4603      	mov	r3, r0
 80116f2:	73fb      	strb	r3, [r7, #15]
      break;
 80116f4:	e016      	b.n	8011724 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80116fc:	4619      	mov	r1, r3
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 fab8 	bl	8011c74 <USBD_StdEPReq>
 8011704:	4603      	mov	r3, r0
 8011706:	73fb      	strb	r3, [r7, #15]
      break;
 8011708:	e00c      	b.n	8011724 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011710:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011714:	b2db      	uxtb	r3, r3
 8011716:	4619      	mov	r1, r3
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f004 fab3 	bl	8015c84 <USBD_LL_StallEP>
 801171e:	4603      	mov	r3, r0
 8011720:	73fb      	strb	r3, [r7, #15]
      break;
 8011722:	bf00      	nop
  }

  return ret;
 8011724:	7bfb      	ldrb	r3, [r7, #15]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}

0801172e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801172e:	b580      	push	{r7, lr}
 8011730:	b086      	sub	sp, #24
 8011732:	af00      	add	r7, sp, #0
 8011734:	60f8      	str	r0, [r7, #12]
 8011736:	460b      	mov	r3, r1
 8011738:	607a      	str	r2, [r7, #4]
 801173a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801173c:	7afb      	ldrb	r3, [r7, #11]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d137      	bne.n	80117b2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011748:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011750:	2b03      	cmp	r3, #3
 8011752:	d14a      	bne.n	80117ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	689a      	ldr	r2, [r3, #8]
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	429a      	cmp	r2, r3
 801175e:	d913      	bls.n	8011788 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	689a      	ldr	r2, [r3, #8]
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	1ad2      	subs	r2, r2, r3
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	68da      	ldr	r2, [r3, #12]
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	689b      	ldr	r3, [r3, #8]
 8011776:	4293      	cmp	r3, r2
 8011778:	bf28      	it	cs
 801177a:	4613      	movcs	r3, r2
 801177c:	461a      	mov	r2, r3
 801177e:	6879      	ldr	r1, [r7, #4]
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f000 ffad 	bl	80126e0 <USBD_CtlContinueRx>
 8011786:	e030      	b.n	80117ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801178e:	691b      	ldr	r3, [r3, #16]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d00a      	beq.n	80117aa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801179a:	2b03      	cmp	r3, #3
 801179c:	d105      	bne.n	80117aa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117a4:	691b      	ldr	r3, [r3, #16]
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	f000 ffa9 	bl	8012702 <USBD_CtlSendStatus>
 80117b0:	e01b      	b.n	80117ea <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117b8:	699b      	ldr	r3, [r3, #24]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d013      	beq.n	80117e6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80117c4:	2b03      	cmp	r3, #3
 80117c6:	d10e      	bne.n	80117e6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ce:	699b      	ldr	r3, [r3, #24]
 80117d0:	7afa      	ldrb	r2, [r7, #11]
 80117d2:	4611      	mov	r1, r2
 80117d4:	68f8      	ldr	r0, [r7, #12]
 80117d6:	4798      	blx	r3
 80117d8:	4603      	mov	r3, r0
 80117da:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80117dc:	7dfb      	ldrb	r3, [r7, #23]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d003      	beq.n	80117ea <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80117e2:	7dfb      	ldrb	r3, [r7, #23]
 80117e4:	e002      	b.n	80117ec <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80117e6:	2303      	movs	r3, #3
 80117e8:	e000      	b.n	80117ec <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3718      	adds	r7, #24
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b086      	sub	sp, #24
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	460b      	mov	r3, r1
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011802:	7afb      	ldrb	r3, [r7, #11]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d16a      	bne.n	80118de <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	3314      	adds	r3, #20
 801180c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011814:	2b02      	cmp	r3, #2
 8011816:	d155      	bne.n	80118c4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	689a      	ldr	r2, [r3, #8]
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	429a      	cmp	r2, r3
 8011822:	d914      	bls.n	801184e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	689a      	ldr	r2, [r3, #8]
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	68db      	ldr	r3, [r3, #12]
 801182c:	1ad2      	subs	r2, r2, r3
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	461a      	mov	r2, r3
 8011838:	6879      	ldr	r1, [r7, #4]
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f000 ff22 	bl	8012684 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011840:	2300      	movs	r3, #0
 8011842:	2200      	movs	r2, #0
 8011844:	2100      	movs	r1, #0
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f004 fac6 	bl	8015dd8 <USBD_LL_PrepareReceive>
 801184c:	e03a      	b.n	80118c4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	68da      	ldr	r2, [r3, #12]
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	429a      	cmp	r2, r3
 8011858:	d11c      	bne.n	8011894 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	685a      	ldr	r2, [r3, #4]
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011862:	429a      	cmp	r2, r3
 8011864:	d316      	bcc.n	8011894 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	685a      	ldr	r2, [r3, #4]
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011870:	429a      	cmp	r2, r3
 8011872:	d20f      	bcs.n	8011894 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011874:	2200      	movs	r2, #0
 8011876:	2100      	movs	r1, #0
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f000 ff03 	bl	8012684 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2200      	movs	r2, #0
 8011882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011886:	2300      	movs	r3, #0
 8011888:	2200      	movs	r2, #0
 801188a:	2100      	movs	r1, #0
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f004 faa3 	bl	8015dd8 <USBD_LL_PrepareReceive>
 8011892:	e017      	b.n	80118c4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d00a      	beq.n	80118b6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80118a6:	2b03      	cmp	r3, #3
 80118a8:	d105      	bne.n	80118b6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	68f8      	ldr	r0, [r7, #12]
 80118b4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80118b6:	2180      	movs	r1, #128	; 0x80
 80118b8:	68f8      	ldr	r0, [r7, #12]
 80118ba:	f004 f9e3 	bl	8015c84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80118be:	68f8      	ldr	r0, [r7, #12]
 80118c0:	f000 ff32 	bl	8012728 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d123      	bne.n	8011916 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80118ce:	68f8      	ldr	r0, [r7, #12]
 80118d0:	f7ff fe9b 	bl	801160a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2200      	movs	r2, #0
 80118d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80118dc:	e01b      	b.n	8011916 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118e4:	695b      	ldr	r3, [r3, #20]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d013      	beq.n	8011912 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80118f0:	2b03      	cmp	r3, #3
 80118f2:	d10e      	bne.n	8011912 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118fa:	695b      	ldr	r3, [r3, #20]
 80118fc:	7afa      	ldrb	r2, [r7, #11]
 80118fe:	4611      	mov	r1, r2
 8011900:	68f8      	ldr	r0, [r7, #12]
 8011902:	4798      	blx	r3
 8011904:	4603      	mov	r3, r0
 8011906:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011908:	7dfb      	ldrb	r3, [r7, #23]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d003      	beq.n	8011916 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801190e:	7dfb      	ldrb	r3, [r7, #23]
 8011910:	e002      	b.n	8011918 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011912:	2303      	movs	r3, #3
 8011914:	e000      	b.n	8011918 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011916:	2300      	movs	r3, #0
}
 8011918:	4618      	mov	r0, r3
 801191a:	3718      	adds	r7, #24
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2201      	movs	r2, #1
 801192c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2200      	movs	r2, #0
 8011934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801194c:	2b00      	cmp	r3, #0
 801194e:	d009      	beq.n	8011964 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	6852      	ldr	r2, [r2, #4]
 801195c:	b2d2      	uxtb	r2, r2
 801195e:	4611      	mov	r1, r2
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011964:	2340      	movs	r3, #64	; 0x40
 8011966:	2200      	movs	r2, #0
 8011968:	2100      	movs	r1, #0
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f004 f945 	bl	8015bfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2201      	movs	r2, #1
 8011974:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2240      	movs	r2, #64	; 0x40
 801197c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011980:	2340      	movs	r3, #64	; 0x40
 8011982:	2200      	movs	r2, #0
 8011984:	2180      	movs	r1, #128	; 0x80
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f004 f937 	bl	8015bfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2201      	movs	r2, #1
 8011990:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2240      	movs	r2, #64	; 0x40
 8011996:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011998:	2300      	movs	r3, #0
}
 801199a:	4618      	mov	r0, r3
 801199c:	3708      	adds	r7, #8
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80119a2:	b480      	push	{r7}
 80119a4:	b083      	sub	sp, #12
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
 80119aa:	460b      	mov	r3, r1
 80119ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	78fa      	ldrb	r2, [r7, #3]
 80119b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	370c      	adds	r7, #12
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr

080119c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80119c2:	b480      	push	{r7}
 80119c4:	b083      	sub	sp, #12
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2204      	movs	r2, #4
 80119da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80119de:	2300      	movs	r3, #0
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	370c      	adds	r7, #12
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119fa:	2b04      	cmp	r3, #4
 80119fc:	d105      	bne.n	8011a0a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011a0a:	2300      	movs	r3, #0
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a26:	2b03      	cmp	r3, #3
 8011a28:	d10b      	bne.n	8011a42 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a30:	69db      	ldr	r3, [r3, #28]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d005      	beq.n	8011a42 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a3c:	69db      	ldr	r3, [r3, #28]
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3708      	adds	r7, #8
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	460b      	mov	r3, r1
 8011a56:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011a58:	2300      	movs	r3, #0
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	370c      	adds	r7, #12
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr

08011a66 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011a66:	b480      	push	{r7}
 8011a68:	b083      	sub	sp, #12
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
 8011a6e:	460b      	mov	r3, r1
 8011a70:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr

08011a80 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011a88:	2300      	movs	r3, #0
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	370c      	adds	r7, #12
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr

08011a96 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011a96:	b580      	push	{r7, lr}
 8011a98:	b082      	sub	sp, #8
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d009      	beq.n	8011ac4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	6852      	ldr	r2, [r2, #4]
 8011abc:	b2d2      	uxtb	r2, r2
 8011abe:	4611      	mov	r1, r2
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	4798      	blx	r3
  }

  return USBD_OK;
 8011ac4:	2300      	movs	r3, #0
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3708      	adds	r7, #8
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011ace:	b480      	push	{r7}
 8011ad0:	b087      	sub	sp, #28
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011aec:	8a3b      	ldrh	r3, [r7, #16]
 8011aee:	021b      	lsls	r3, r3, #8
 8011af0:	b21a      	sxth	r2, r3
 8011af2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	b21b      	sxth	r3, r3
 8011afa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011afc:	89fb      	ldrh	r3, [r7, #14]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	371c      	adds	r7, #28
 8011b02:	46bd      	mov	sp, r7
 8011b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b08:	4770      	bx	lr
	...

08011b0c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b16:	2300      	movs	r3, #0
 8011b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b22:	2b20      	cmp	r3, #32
 8011b24:	d004      	beq.n	8011b30 <USBD_StdDevReq+0x24>
 8011b26:	2b40      	cmp	r3, #64	; 0x40
 8011b28:	d002      	beq.n	8011b30 <USBD_StdDevReq+0x24>
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00a      	beq.n	8011b44 <USBD_StdDevReq+0x38>
 8011b2e:	e050      	b.n	8011bd2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b36:	689b      	ldr	r3, [r3, #8]
 8011b38:	6839      	ldr	r1, [r7, #0]
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	4798      	blx	r3
 8011b3e:	4603      	mov	r3, r0
 8011b40:	73fb      	strb	r3, [r7, #15]
    break;
 8011b42:	e04b      	b.n	8011bdc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	785b      	ldrb	r3, [r3, #1]
 8011b48:	2b09      	cmp	r3, #9
 8011b4a:	d83c      	bhi.n	8011bc6 <USBD_StdDevReq+0xba>
 8011b4c:	a201      	add	r2, pc, #4	; (adr r2, 8011b54 <USBD_StdDevReq+0x48>)
 8011b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b52:	bf00      	nop
 8011b54:	08011ba9 	.word	0x08011ba9
 8011b58:	08011bbd 	.word	0x08011bbd
 8011b5c:	08011bc7 	.word	0x08011bc7
 8011b60:	08011bb3 	.word	0x08011bb3
 8011b64:	08011bc7 	.word	0x08011bc7
 8011b68:	08011b87 	.word	0x08011b87
 8011b6c:	08011b7d 	.word	0x08011b7d
 8011b70:	08011bc7 	.word	0x08011bc7
 8011b74:	08011b9f 	.word	0x08011b9f
 8011b78:	08011b91 	.word	0x08011b91
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011b7c:	6839      	ldr	r1, [r7, #0]
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f000 f9ce 	bl	8011f20 <USBD_GetDescriptor>
      break;
 8011b84:	e024      	b.n	8011bd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011b86:	6839      	ldr	r1, [r7, #0]
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f000 fb33 	bl	80121f4 <USBD_SetAddress>
      break;
 8011b8e:	e01f      	b.n	8011bd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011b90:	6839      	ldr	r1, [r7, #0]
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f000 fb70 	bl	8012278 <USBD_SetConfig>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8011b9c:	e018      	b.n	8011bd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011b9e:	6839      	ldr	r1, [r7, #0]
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f000 fc0d 	bl	80123c0 <USBD_GetConfig>
      break;
 8011ba6:	e013      	b.n	8011bd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011ba8:	6839      	ldr	r1, [r7, #0]
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f000 fc3c 	bl	8012428 <USBD_GetStatus>
      break;
 8011bb0:	e00e      	b.n	8011bd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011bb2:	6839      	ldr	r1, [r7, #0]
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f000 fc6a 	bl	801248e <USBD_SetFeature>
      break;
 8011bba:	e009      	b.n	8011bd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011bbc:	6839      	ldr	r1, [r7, #0]
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f000 fc79 	bl	80124b6 <USBD_ClrFeature>
      break;
 8011bc4:	e004      	b.n	8011bd0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011bc6:	6839      	ldr	r1, [r7, #0]
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f000 fccf 	bl	801256c <USBD_CtlError>
      break;
 8011bce:	bf00      	nop
    }
    break;
 8011bd0:	e004      	b.n	8011bdc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011bd2:	6839      	ldr	r1, [r7, #0]
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f000 fcc9 	bl	801256c <USBD_CtlError>
    break;
 8011bda:	bf00      	nop
  }

  return ret;
 8011bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop

08011be8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011bfe:	2b20      	cmp	r3, #32
 8011c00:	d003      	beq.n	8011c0a <USBD_StdItfReq+0x22>
 8011c02:	2b40      	cmp	r3, #64	; 0x40
 8011c04:	d001      	beq.n	8011c0a <USBD_StdItfReq+0x22>
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d12a      	bne.n	8011c60 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c10:	3b01      	subs	r3, #1
 8011c12:	2b02      	cmp	r3, #2
 8011c14:	d81d      	bhi.n	8011c52 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	889b      	ldrh	r3, [r3, #4]
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	d813      	bhi.n	8011c48 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c26:	689b      	ldr	r3, [r3, #8]
 8011c28:	6839      	ldr	r1, [r7, #0]
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	4798      	blx	r3
 8011c2e:	4603      	mov	r3, r0
 8011c30:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	88db      	ldrh	r3, [r3, #6]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d110      	bne.n	8011c5c <USBD_StdItfReq+0x74>
 8011c3a:	7bfb      	ldrb	r3, [r7, #15]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d10d      	bne.n	8011c5c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 fd5e 	bl	8012702 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011c46:	e009      	b.n	8011c5c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011c48:	6839      	ldr	r1, [r7, #0]
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 fc8e 	bl	801256c <USBD_CtlError>
      break;
 8011c50:	e004      	b.n	8011c5c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011c52:	6839      	ldr	r1, [r7, #0]
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 fc89 	bl	801256c <USBD_CtlError>
      break;
 8011c5a:	e000      	b.n	8011c5e <USBD_StdItfReq+0x76>
      break;
 8011c5c:	bf00      	nop
    }
    break;
 8011c5e:	e004      	b.n	8011c6a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011c60:	6839      	ldr	r1, [r7, #0]
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f000 fc82 	bl	801256c <USBD_CtlError>
    break;
 8011c68:	bf00      	nop
  }

  return ret;
 8011c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	889b      	ldrh	r3, [r3, #4]
 8011c86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c90:	2b20      	cmp	r3, #32
 8011c92:	d004      	beq.n	8011c9e <USBD_StdEPReq+0x2a>
 8011c94:	2b40      	cmp	r3, #64	; 0x40
 8011c96:	d002      	beq.n	8011c9e <USBD_StdEPReq+0x2a>
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00a      	beq.n	8011cb2 <USBD_StdEPReq+0x3e>
 8011c9c:	e135      	b.n	8011f0a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ca4:	689b      	ldr	r3, [r3, #8]
 8011ca6:	6839      	ldr	r1, [r7, #0]
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	4798      	blx	r3
 8011cac:	4603      	mov	r3, r0
 8011cae:	73fb      	strb	r3, [r7, #15]
    break;
 8011cb0:	e130      	b.n	8011f14 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	785b      	ldrb	r3, [r3, #1]
 8011cb6:	2b01      	cmp	r3, #1
 8011cb8:	d03e      	beq.n	8011d38 <USBD_StdEPReq+0xc4>
 8011cba:	2b03      	cmp	r3, #3
 8011cbc:	d002      	beq.n	8011cc4 <USBD_StdEPReq+0x50>
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d077      	beq.n	8011db2 <USBD_StdEPReq+0x13e>
 8011cc2:	e11c      	b.n	8011efe <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d002      	beq.n	8011cd4 <USBD_StdEPReq+0x60>
 8011cce:	2b03      	cmp	r3, #3
 8011cd0:	d015      	beq.n	8011cfe <USBD_StdEPReq+0x8a>
 8011cd2:	e02b      	b.n	8011d2c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011cd4:	7bbb      	ldrb	r3, [r7, #14]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d00c      	beq.n	8011cf4 <USBD_StdEPReq+0x80>
 8011cda:	7bbb      	ldrb	r3, [r7, #14]
 8011cdc:	2b80      	cmp	r3, #128	; 0x80
 8011cde:	d009      	beq.n	8011cf4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ce0:	7bbb      	ldrb	r3, [r7, #14]
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f003 ffcd 	bl	8015c84 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011cea:	2180      	movs	r1, #128	; 0x80
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f003 ffc9 	bl	8015c84 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011cf2:	e020      	b.n	8011d36 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011cf4:	6839      	ldr	r1, [r7, #0]
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f000 fc38 	bl	801256c <USBD_CtlError>
        break;
 8011cfc:	e01b      	b.n	8011d36 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	885b      	ldrh	r3, [r3, #2]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10e      	bne.n	8011d24 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011d06:	7bbb      	ldrb	r3, [r7, #14]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00b      	beq.n	8011d24 <USBD_StdEPReq+0xb0>
 8011d0c:	7bbb      	ldrb	r3, [r7, #14]
 8011d0e:	2b80      	cmp	r3, #128	; 0x80
 8011d10:	d008      	beq.n	8011d24 <USBD_StdEPReq+0xb0>
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	88db      	ldrh	r3, [r3, #6]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d104      	bne.n	8011d24 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d1a:	7bbb      	ldrb	r3, [r7, #14]
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f003 ffb0 	bl	8015c84 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f000 fcec 	bl	8012702 <USBD_CtlSendStatus>

        break;
 8011d2a:	e004      	b.n	8011d36 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8011d2c:	6839      	ldr	r1, [r7, #0]
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f000 fc1c 	bl	801256c <USBD_CtlError>
        break;
 8011d34:	bf00      	nop
      }
      break;
 8011d36:	e0e7      	b.n	8011f08 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	d002      	beq.n	8011d48 <USBD_StdEPReq+0xd4>
 8011d42:	2b03      	cmp	r3, #3
 8011d44:	d015      	beq.n	8011d72 <USBD_StdEPReq+0xfe>
 8011d46:	e02d      	b.n	8011da4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d48:	7bbb      	ldrb	r3, [r7, #14]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d00c      	beq.n	8011d68 <USBD_StdEPReq+0xf4>
 8011d4e:	7bbb      	ldrb	r3, [r7, #14]
 8011d50:	2b80      	cmp	r3, #128	; 0x80
 8011d52:	d009      	beq.n	8011d68 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d54:	7bbb      	ldrb	r3, [r7, #14]
 8011d56:	4619      	mov	r1, r3
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f003 ff93 	bl	8015c84 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d5e:	2180      	movs	r1, #128	; 0x80
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f003 ff8f 	bl	8015c84 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011d66:	e023      	b.n	8011db0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011d68:	6839      	ldr	r1, [r7, #0]
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 fbfe 	bl	801256c <USBD_CtlError>
        break;
 8011d70:	e01e      	b.n	8011db0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	885b      	ldrh	r3, [r3, #2]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d119      	bne.n	8011dae <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011d7a:	7bbb      	ldrb	r3, [r7, #14]
 8011d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d004      	beq.n	8011d8e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011d84:	7bbb      	ldrb	r3, [r7, #14]
 8011d86:	4619      	mov	r1, r3
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f003 ff9a 	bl	8015cc2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 fcb7 	bl	8012702 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d9a:	689b      	ldr	r3, [r3, #8]
 8011d9c:	6839      	ldr	r1, [r7, #0]
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	4798      	blx	r3
        }
        break;
 8011da2:	e004      	b.n	8011dae <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011da4:	6839      	ldr	r1, [r7, #0]
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 fbe0 	bl	801256c <USBD_CtlError>
        break;
 8011dac:	e000      	b.n	8011db0 <USBD_StdEPReq+0x13c>
        break;
 8011dae:	bf00      	nop
      }
      break;
 8011db0:	e0aa      	b.n	8011f08 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011db8:	2b02      	cmp	r3, #2
 8011dba:	d002      	beq.n	8011dc2 <USBD_StdEPReq+0x14e>
 8011dbc:	2b03      	cmp	r3, #3
 8011dbe:	d032      	beq.n	8011e26 <USBD_StdEPReq+0x1b2>
 8011dc0:	e097      	b.n	8011ef2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011dc2:	7bbb      	ldrb	r3, [r7, #14]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d007      	beq.n	8011dd8 <USBD_StdEPReq+0x164>
 8011dc8:	7bbb      	ldrb	r3, [r7, #14]
 8011dca:	2b80      	cmp	r3, #128	; 0x80
 8011dcc:	d004      	beq.n	8011dd8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011dce:	6839      	ldr	r1, [r7, #0]
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 fbcb 	bl	801256c <USBD_CtlError>
          break;
 8011dd6:	e091      	b.n	8011efc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	da0b      	bge.n	8011df8 <USBD_StdEPReq+0x184>
 8011de0:	7bbb      	ldrb	r3, [r7, #14]
 8011de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011de6:	4613      	mov	r3, r2
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	4413      	add	r3, r2
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	3310      	adds	r3, #16
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	4413      	add	r3, r2
 8011df4:	3304      	adds	r3, #4
 8011df6:	e00b      	b.n	8011e10 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011df8:	7bbb      	ldrb	r3, [r7, #14]
 8011dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011dfe:	4613      	mov	r3, r2
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	4413      	add	r3, r2
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	3304      	adds	r3, #4
 8011e10:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	2200      	movs	r2, #0
 8011e16:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	2202      	movs	r2, #2
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f000 fc15 	bl	801264e <USBD_CtlSendData>
        break;
 8011e24:	e06a      	b.n	8011efc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	da11      	bge.n	8011e52 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011e2e:	7bbb      	ldrb	r3, [r7, #14]
 8011e30:	f003 020f 	and.w	r2, r3, #15
 8011e34:	6879      	ldr	r1, [r7, #4]
 8011e36:	4613      	mov	r3, r2
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	4413      	add	r3, r2
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	440b      	add	r3, r1
 8011e40:	3324      	adds	r3, #36	; 0x24
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d117      	bne.n	8011e78 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011e48:	6839      	ldr	r1, [r7, #0]
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 fb8e 	bl	801256c <USBD_CtlError>
            break;
 8011e50:	e054      	b.n	8011efc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011e52:	7bbb      	ldrb	r3, [r7, #14]
 8011e54:	f003 020f 	and.w	r2, r3, #15
 8011e58:	6879      	ldr	r1, [r7, #4]
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	4413      	add	r3, r2
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	440b      	add	r3, r1
 8011e64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011e68:	881b      	ldrh	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d104      	bne.n	8011e78 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011e6e:	6839      	ldr	r1, [r7, #0]
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f000 fb7b 	bl	801256c <USBD_CtlError>
            break;
 8011e76:	e041      	b.n	8011efc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	da0b      	bge.n	8011e98 <USBD_StdEPReq+0x224>
 8011e80:	7bbb      	ldrb	r3, [r7, #14]
 8011e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e86:	4613      	mov	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	4413      	add	r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	3310      	adds	r3, #16
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	4413      	add	r3, r2
 8011e94:	3304      	adds	r3, #4
 8011e96:	e00b      	b.n	8011eb0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011e98:	7bbb      	ldrb	r3, [r7, #14]
 8011e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	009b      	lsls	r3, r3, #2
 8011ea2:	4413      	add	r3, r2
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	4413      	add	r3, r2
 8011eae:	3304      	adds	r3, #4
 8011eb0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011eb2:	7bbb      	ldrb	r3, [r7, #14]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d002      	beq.n	8011ebe <USBD_StdEPReq+0x24a>
 8011eb8:	7bbb      	ldrb	r3, [r7, #14]
 8011eba:	2b80      	cmp	r3, #128	; 0x80
 8011ebc:	d103      	bne.n	8011ec6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	601a      	str	r2, [r3, #0]
 8011ec4:	e00e      	b.n	8011ee4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011ec6:	7bbb      	ldrb	r3, [r7, #14]
 8011ec8:	4619      	mov	r1, r3
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f003 ff18 	bl	8015d00 <USBD_LL_IsStallEP>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d003      	beq.n	8011ede <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	2201      	movs	r2, #1
 8011eda:	601a      	str	r2, [r3, #0]
 8011edc:	e002      	b.n	8011ee4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	2202      	movs	r2, #2
 8011ee8:	4619      	mov	r1, r3
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 fbaf 	bl	801264e <USBD_CtlSendData>
          break;
 8011ef0:	e004      	b.n	8011efc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011ef2:	6839      	ldr	r1, [r7, #0]
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f000 fb39 	bl	801256c <USBD_CtlError>
        break;
 8011efa:	bf00      	nop
      }
      break;
 8011efc:	e004      	b.n	8011f08 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011efe:	6839      	ldr	r1, [r7, #0]
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f000 fb33 	bl	801256c <USBD_CtlError>
      break;
 8011f06:	bf00      	nop
    }
    break;
 8011f08:	e004      	b.n	8011f14 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011f0a:	6839      	ldr	r1, [r7, #0]
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 fb2d 	bl	801256c <USBD_CtlError>
    break;
 8011f12:	bf00      	nop
  }

  return ret;
 8011f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3710      	adds	r7, #16
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
	...

08011f20 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011f32:	2300      	movs	r3, #0
 8011f34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	885b      	ldrh	r3, [r3, #2]
 8011f3a:	0a1b      	lsrs	r3, r3, #8
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	3b01      	subs	r3, #1
 8011f40:	2b06      	cmp	r3, #6
 8011f42:	f200 8128 	bhi.w	8012196 <USBD_GetDescriptor+0x276>
 8011f46:	a201      	add	r2, pc, #4	; (adr r2, 8011f4c <USBD_GetDescriptor+0x2c>)
 8011f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f4c:	08011f69 	.word	0x08011f69
 8011f50:	08011f81 	.word	0x08011f81
 8011f54:	08011fc1 	.word	0x08011fc1
 8011f58:	08012197 	.word	0x08012197
 8011f5c:	08012197 	.word	0x08012197
 8011f60:	08012137 	.word	0x08012137
 8011f64:	08012163 	.word	0x08012163
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	7c12      	ldrb	r2, [r2, #16]
 8011f74:	f107 0108 	add.w	r1, r7, #8
 8011f78:	4610      	mov	r0, r2
 8011f7a:	4798      	blx	r3
 8011f7c:	60f8      	str	r0, [r7, #12]
    break;
 8011f7e:	e112      	b.n	80121a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	7c1b      	ldrb	r3, [r3, #16]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10d      	bne.n	8011fa4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f90:	f107 0208 	add.w	r2, r7, #8
 8011f94:	4610      	mov	r0, r2
 8011f96:	4798      	blx	r3
 8011f98:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011fa2:	e100      	b.n	80121a6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fac:	f107 0208 	add.w	r2, r7, #8
 8011fb0:	4610      	mov	r0, r2
 8011fb2:	4798      	blx	r3
 8011fb4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	3301      	adds	r3, #1
 8011fba:	2202      	movs	r2, #2
 8011fbc:	701a      	strb	r2, [r3, #0]
    break;
 8011fbe:	e0f2      	b.n	80121a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	885b      	ldrh	r3, [r3, #2]
 8011fc4:	b2db      	uxtb	r3, r3
 8011fc6:	2b05      	cmp	r3, #5
 8011fc8:	f200 80ac 	bhi.w	8012124 <USBD_GetDescriptor+0x204>
 8011fcc:	a201      	add	r2, pc, #4	; (adr r2, 8011fd4 <USBD_GetDescriptor+0xb4>)
 8011fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd2:	bf00      	nop
 8011fd4:	08011fed 	.word	0x08011fed
 8011fd8:	08012021 	.word	0x08012021
 8011fdc:	08012055 	.word	0x08012055
 8011fe0:	08012089 	.word	0x08012089
 8011fe4:	080120bd 	.word	0x080120bd
 8011fe8:	080120f1 	.word	0x080120f1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d00b      	beq.n	8012010 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	7c12      	ldrb	r2, [r2, #16]
 8012004:	f107 0108 	add.w	r1, r7, #8
 8012008:	4610      	mov	r0, r2
 801200a:	4798      	blx	r3
 801200c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801200e:	e091      	b.n	8012134 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012010:	6839      	ldr	r1, [r7, #0]
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f000 faaa 	bl	801256c <USBD_CtlError>
        err++;
 8012018:	7afb      	ldrb	r3, [r7, #11]
 801201a:	3301      	adds	r3, #1
 801201c:	72fb      	strb	r3, [r7, #11]
      break;
 801201e:	e089      	b.n	8012134 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012026:	689b      	ldr	r3, [r3, #8]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d00b      	beq.n	8012044 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012032:	689b      	ldr	r3, [r3, #8]
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	7c12      	ldrb	r2, [r2, #16]
 8012038:	f107 0108 	add.w	r1, r7, #8
 801203c:	4610      	mov	r0, r2
 801203e:	4798      	blx	r3
 8012040:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012042:	e077      	b.n	8012134 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012044:	6839      	ldr	r1, [r7, #0]
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 fa90 	bl	801256c <USBD_CtlError>
        err++;
 801204c:	7afb      	ldrb	r3, [r7, #11]
 801204e:	3301      	adds	r3, #1
 8012050:	72fb      	strb	r3, [r7, #11]
      break;
 8012052:	e06f      	b.n	8012134 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00b      	beq.n	8012078 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012066:	68db      	ldr	r3, [r3, #12]
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	7c12      	ldrb	r2, [r2, #16]
 801206c:	f107 0108 	add.w	r1, r7, #8
 8012070:	4610      	mov	r0, r2
 8012072:	4798      	blx	r3
 8012074:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012076:	e05d      	b.n	8012134 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 fa76 	bl	801256c <USBD_CtlError>
        err++;
 8012080:	7afb      	ldrb	r3, [r7, #11]
 8012082:	3301      	adds	r3, #1
 8012084:	72fb      	strb	r3, [r7, #11]
      break;
 8012086:	e055      	b.n	8012134 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801208e:	691b      	ldr	r3, [r3, #16]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d00b      	beq.n	80120ac <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	7c12      	ldrb	r2, [r2, #16]
 80120a0:	f107 0108 	add.w	r1, r7, #8
 80120a4:	4610      	mov	r0, r2
 80120a6:	4798      	blx	r3
 80120a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120aa:	e043      	b.n	8012134 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80120ac:	6839      	ldr	r1, [r7, #0]
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f000 fa5c 	bl	801256c <USBD_CtlError>
        err++;
 80120b4:	7afb      	ldrb	r3, [r7, #11]
 80120b6:	3301      	adds	r3, #1
 80120b8:	72fb      	strb	r3, [r7, #11]
      break;
 80120ba:	e03b      	b.n	8012134 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120c2:	695b      	ldr	r3, [r3, #20]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00b      	beq.n	80120e0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120ce:	695b      	ldr	r3, [r3, #20]
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	7c12      	ldrb	r2, [r2, #16]
 80120d4:	f107 0108 	add.w	r1, r7, #8
 80120d8:	4610      	mov	r0, r2
 80120da:	4798      	blx	r3
 80120dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120de:	e029      	b.n	8012134 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80120e0:	6839      	ldr	r1, [r7, #0]
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f000 fa42 	bl	801256c <USBD_CtlError>
        err++;
 80120e8:	7afb      	ldrb	r3, [r7, #11]
 80120ea:	3301      	adds	r3, #1
 80120ec:	72fb      	strb	r3, [r7, #11]
      break;
 80120ee:	e021      	b.n	8012134 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120f6:	699b      	ldr	r3, [r3, #24]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d00b      	beq.n	8012114 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012102:	699b      	ldr	r3, [r3, #24]
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	7c12      	ldrb	r2, [r2, #16]
 8012108:	f107 0108 	add.w	r1, r7, #8
 801210c:	4610      	mov	r0, r2
 801210e:	4798      	blx	r3
 8012110:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012112:	e00f      	b.n	8012134 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012114:	6839      	ldr	r1, [r7, #0]
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f000 fa28 	bl	801256c <USBD_CtlError>
        err++;
 801211c:	7afb      	ldrb	r3, [r7, #11]
 801211e:	3301      	adds	r3, #1
 8012120:	72fb      	strb	r3, [r7, #11]
      break;
 8012122:	e007      	b.n	8012134 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012124:	6839      	ldr	r1, [r7, #0]
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 fa20 	bl	801256c <USBD_CtlError>
      err++;
 801212c:	7afb      	ldrb	r3, [r7, #11]
 801212e:	3301      	adds	r3, #1
 8012130:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8012132:	bf00      	nop
    }
    break;
 8012134:	e037      	b.n	80121a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	7c1b      	ldrb	r3, [r3, #16]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d109      	bne.n	8012152 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012146:	f107 0208 	add.w	r2, r7, #8
 801214a:	4610      	mov	r0, r2
 801214c:	4798      	blx	r3
 801214e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012150:	e029      	b.n	80121a6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012152:	6839      	ldr	r1, [r7, #0]
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 fa09 	bl	801256c <USBD_CtlError>
      err++;
 801215a:	7afb      	ldrb	r3, [r7, #11]
 801215c:	3301      	adds	r3, #1
 801215e:	72fb      	strb	r3, [r7, #11]
    break;
 8012160:	e021      	b.n	80121a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	7c1b      	ldrb	r3, [r3, #16]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d10d      	bne.n	8012186 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012172:	f107 0208 	add.w	r2, r7, #8
 8012176:	4610      	mov	r0, r2
 8012178:	4798      	blx	r3
 801217a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	3301      	adds	r3, #1
 8012180:	2207      	movs	r2, #7
 8012182:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012184:	e00f      	b.n	80121a6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f9ef 	bl	801256c <USBD_CtlError>
      err++;
 801218e:	7afb      	ldrb	r3, [r7, #11]
 8012190:	3301      	adds	r3, #1
 8012192:	72fb      	strb	r3, [r7, #11]
    break;
 8012194:	e007      	b.n	80121a6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8012196:	6839      	ldr	r1, [r7, #0]
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f000 f9e7 	bl	801256c <USBD_CtlError>
    err++;
 801219e:	7afb      	ldrb	r3, [r7, #11]
 80121a0:	3301      	adds	r3, #1
 80121a2:	72fb      	strb	r3, [r7, #11]
    break;
 80121a4:	bf00      	nop
  }

  if (err != 0U)
 80121a6:	7afb      	ldrb	r3, [r7, #11]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d11e      	bne.n	80121ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	88db      	ldrh	r3, [r3, #6]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d016      	beq.n	80121e2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80121b4:	893b      	ldrh	r3, [r7, #8]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d00e      	beq.n	80121d8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	88da      	ldrh	r2, [r3, #6]
 80121be:	893b      	ldrh	r3, [r7, #8]
 80121c0:	4293      	cmp	r3, r2
 80121c2:	bf28      	it	cs
 80121c4:	4613      	movcs	r3, r2
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80121ca:	893b      	ldrh	r3, [r7, #8]
 80121cc:	461a      	mov	r2, r3
 80121ce:	68f9      	ldr	r1, [r7, #12]
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f000 fa3c 	bl	801264e <USBD_CtlSendData>
 80121d6:	e009      	b.n	80121ec <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80121d8:	6839      	ldr	r1, [r7, #0]
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 f9c6 	bl	801256c <USBD_CtlError>
 80121e0:	e004      	b.n	80121ec <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f000 fa8d 	bl	8012702 <USBD_CtlSendStatus>
 80121e8:	e000      	b.n	80121ec <USBD_GetDescriptor+0x2cc>
    return;
 80121ea:	bf00      	nop
    }
  }
}
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop

080121f4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	889b      	ldrh	r3, [r3, #4]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d130      	bne.n	8012268 <USBD_SetAddress+0x74>
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	88db      	ldrh	r3, [r3, #6]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d12c      	bne.n	8012268 <USBD_SetAddress+0x74>
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	885b      	ldrh	r3, [r3, #2]
 8012212:	2b7f      	cmp	r3, #127	; 0x7f
 8012214:	d828      	bhi.n	8012268 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	885b      	ldrh	r3, [r3, #2]
 801221a:	b2db      	uxtb	r3, r3
 801221c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012220:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012228:	2b03      	cmp	r3, #3
 801222a:	d104      	bne.n	8012236 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801222c:	6839      	ldr	r1, [r7, #0]
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f000 f99c 	bl	801256c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012234:	e01c      	b.n	8012270 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	7bfa      	ldrb	r2, [r7, #15]
 801223a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801223e:	7bfb      	ldrb	r3, [r7, #15]
 8012240:	4619      	mov	r1, r3
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f003 fd88 	bl	8015d58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 fa5a 	bl	8012702 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801224e:	7bfb      	ldrb	r3, [r7, #15]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d004      	beq.n	801225e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2202      	movs	r2, #2
 8012258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801225c:	e008      	b.n	8012270 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2201      	movs	r2, #1
 8012262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012266:	e003      	b.n	8012270 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012268:	6839      	ldr	r1, [r7, #0]
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f000 f97e 	bl	801256c <USBD_CtlError>
  }
}
 8012270:	bf00      	nop
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012282:	2300      	movs	r3, #0
 8012284:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	885b      	ldrh	r3, [r3, #2]
 801228a:	b2da      	uxtb	r2, r3
 801228c:	4b4b      	ldr	r3, [pc, #300]	; (80123bc <USBD_SetConfig+0x144>)
 801228e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012290:	4b4a      	ldr	r3, [pc, #296]	; (80123bc <USBD_SetConfig+0x144>)
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	2b01      	cmp	r3, #1
 8012296:	d905      	bls.n	80122a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012298:	6839      	ldr	r1, [r7, #0]
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f000 f966 	bl	801256c <USBD_CtlError>
    return USBD_FAIL;
 80122a0:	2303      	movs	r3, #3
 80122a2:	e087      	b.n	80123b4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d002      	beq.n	80122b4 <USBD_SetConfig+0x3c>
 80122ae:	2b03      	cmp	r3, #3
 80122b0:	d025      	beq.n	80122fe <USBD_SetConfig+0x86>
 80122b2:	e071      	b.n	8012398 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80122b4:	4b41      	ldr	r3, [pc, #260]	; (80123bc <USBD_SetConfig+0x144>)
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d01c      	beq.n	80122f6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80122bc:	4b3f      	ldr	r3, [pc, #252]	; (80123bc <USBD_SetConfig+0x144>)
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	461a      	mov	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80122c6:	4b3d      	ldr	r3, [pc, #244]	; (80123bc <USBD_SetConfig+0x144>)
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	4619      	mov	r1, r3
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff f9a7 	bl	8011620 <USBD_SetClassConfig>
 80122d2:	4603      	mov	r3, r0
 80122d4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80122d6:	7bfb      	ldrb	r3, [r7, #15]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d004      	beq.n	80122e6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80122dc:	6839      	ldr	r1, [r7, #0]
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 f944 	bl	801256c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80122e4:	e065      	b.n	80123b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 fa0b 	bl	8012702 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2203      	movs	r2, #3
 80122f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80122f4:	e05d      	b.n	80123b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fa03 	bl	8012702 <USBD_CtlSendStatus>
    break;
 80122fc:	e059      	b.n	80123b2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80122fe:	4b2f      	ldr	r3, [pc, #188]	; (80123bc <USBD_SetConfig+0x144>)
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d112      	bne.n	801232c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2202      	movs	r2, #2
 801230a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801230e:	4b2b      	ldr	r3, [pc, #172]	; (80123bc <USBD_SetConfig+0x144>)
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	461a      	mov	r2, r3
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012318:	4b28      	ldr	r3, [pc, #160]	; (80123bc <USBD_SetConfig+0x144>)
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	4619      	mov	r1, r3
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f7ff f99a 	bl	8011658 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f000 f9ec 	bl	8012702 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801232a:	e042      	b.n	80123b2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801232c:	4b23      	ldr	r3, [pc, #140]	; (80123bc <USBD_SetConfig+0x144>)
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	461a      	mov	r2, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	429a      	cmp	r2, r3
 8012338:	d02a      	beq.n	8012390 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	b2db      	uxtb	r3, r3
 8012340:	4619      	mov	r1, r3
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f7ff f988 	bl	8011658 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012348:	4b1c      	ldr	r3, [pc, #112]	; (80123bc <USBD_SetConfig+0x144>)
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	461a      	mov	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012352:	4b1a      	ldr	r3, [pc, #104]	; (80123bc <USBD_SetConfig+0x144>)
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	4619      	mov	r1, r3
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f7ff f961 	bl	8011620 <USBD_SetClassConfig>
 801235e:	4603      	mov	r3, r0
 8012360:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8012362:	7bfb      	ldrb	r3, [r7, #15]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00f      	beq.n	8012388 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 f8fe 	bl	801256c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	b2db      	uxtb	r3, r3
 8012376:	4619      	mov	r1, r3
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7ff f96d 	bl	8011658 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2202      	movs	r2, #2
 8012382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012386:	e014      	b.n	80123b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 f9ba 	bl	8012702 <USBD_CtlSendStatus>
    break;
 801238e:	e010      	b.n	80123b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 f9b6 	bl	8012702 <USBD_CtlSendStatus>
    break;
 8012396:	e00c      	b.n	80123b2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012398:	6839      	ldr	r1, [r7, #0]
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 f8e6 	bl	801256c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80123a0:	4b06      	ldr	r3, [pc, #24]	; (80123bc <USBD_SetConfig+0x144>)
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	4619      	mov	r1, r3
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff f956 	bl	8011658 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80123ac:	2303      	movs	r3, #3
 80123ae:	73fb      	strb	r3, [r7, #15]
    break;
 80123b0:	bf00      	nop
  }

  return ret;
 80123b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3710      	adds	r7, #16
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	20001060 	.word	0x20001060

080123c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	88db      	ldrh	r3, [r3, #6]
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d004      	beq.n	80123dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80123d2:	6839      	ldr	r1, [r7, #0]
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 f8c9 	bl	801256c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80123da:	e021      	b.n	8012420 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	db17      	blt.n	8012416 <USBD_GetConfig+0x56>
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	dd02      	ble.n	80123f0 <USBD_GetConfig+0x30>
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d00b      	beq.n	8012406 <USBD_GetConfig+0x46>
 80123ee:	e012      	b.n	8012416 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2200      	movs	r2, #0
 80123f4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	3308      	adds	r3, #8
 80123fa:	2201      	movs	r2, #1
 80123fc:	4619      	mov	r1, r3
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 f925 	bl	801264e <USBD_CtlSendData>
      break;
 8012404:	e00c      	b.n	8012420 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	3304      	adds	r3, #4
 801240a:	2201      	movs	r2, #1
 801240c:	4619      	mov	r1, r3
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f000 f91d 	bl	801264e <USBD_CtlSendData>
      break;
 8012414:	e004      	b.n	8012420 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8012416:	6839      	ldr	r1, [r7, #0]
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f000 f8a7 	bl	801256c <USBD_CtlError>
      break;
 801241e:	bf00      	nop
}
 8012420:	bf00      	nop
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012438:	3b01      	subs	r3, #1
 801243a:	2b02      	cmp	r3, #2
 801243c:	d81e      	bhi.n	801247c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	88db      	ldrh	r3, [r3, #6]
 8012442:	2b02      	cmp	r3, #2
 8012444:	d004      	beq.n	8012450 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012446:	6839      	ldr	r1, [r7, #0]
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f000 f88f 	bl	801256c <USBD_CtlError>
      break;
 801244e:	e01a      	b.n	8012486 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2201      	movs	r2, #1
 8012454:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801245c:	2b00      	cmp	r3, #0
 801245e:	d005      	beq.n	801246c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	f043 0202 	orr.w	r2, r3, #2
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	330c      	adds	r3, #12
 8012470:	2202      	movs	r2, #2
 8012472:	4619      	mov	r1, r3
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f000 f8ea 	bl	801264e <USBD_CtlSendData>
    break;
 801247a:	e004      	b.n	8012486 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801247c:	6839      	ldr	r1, [r7, #0]
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f000 f874 	bl	801256c <USBD_CtlError>
    break;
 8012484:	bf00      	nop
  }
}
 8012486:	bf00      	nop
 8012488:	3708      	adds	r7, #8
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}

0801248e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801248e:	b580      	push	{r7, lr}
 8012490:	b082      	sub	sp, #8
 8012492:	af00      	add	r7, sp, #0
 8012494:	6078      	str	r0, [r7, #4]
 8012496:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	885b      	ldrh	r3, [r3, #2]
 801249c:	2b01      	cmp	r3, #1
 801249e:	d106      	bne.n	80124ae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2201      	movs	r2, #1
 80124a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 f92a 	bl	8012702 <USBD_CtlSendStatus>
  }
}
 80124ae:	bf00      	nop
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124c6:	3b01      	subs	r3, #1
 80124c8:	2b02      	cmp	r3, #2
 80124ca:	d80b      	bhi.n	80124e4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	885b      	ldrh	r3, [r3, #2]
 80124d0:	2b01      	cmp	r3, #1
 80124d2:	d10c      	bne.n	80124ee <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f910 	bl	8012702 <USBD_CtlSendStatus>
      }
      break;
 80124e2:	e004      	b.n	80124ee <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80124e4:	6839      	ldr	r1, [r7, #0]
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 f840 	bl	801256c <USBD_CtlError>
      break;
 80124ec:	e000      	b.n	80124f0 <USBD_ClrFeature+0x3a>
      break;
 80124ee:	bf00      	nop
  }
}
 80124f0:	bf00      	nop
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	781a      	ldrb	r2, [r3, #0]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	3301      	adds	r3, #1
 8012512:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	781a      	ldrb	r2, [r3, #0]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	3301      	adds	r3, #1
 8012520:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7ff fad3 	bl	8011ace <SWAPBYTE>
 8012528:	4603      	mov	r3, r0
 801252a:	461a      	mov	r2, r3
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	3301      	adds	r3, #1
 8012534:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	3301      	adds	r3, #1
 801253a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801253c:	68f8      	ldr	r0, [r7, #12]
 801253e:	f7ff fac6 	bl	8011ace <SWAPBYTE>
 8012542:	4603      	mov	r3, r0
 8012544:	461a      	mov	r2, r3
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	3301      	adds	r3, #1
 801254e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	3301      	adds	r3, #1
 8012554:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	f7ff fab9 	bl	8011ace <SWAPBYTE>
 801255c:	4603      	mov	r3, r0
 801255e:	461a      	mov	r2, r3
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	80da      	strh	r2, [r3, #6]
}
 8012564:	bf00      	nop
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012576:	2180      	movs	r1, #128	; 0x80
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f003 fb83 	bl	8015c84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801257e:	2100      	movs	r1, #0
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f003 fb7f 	bl	8015c84 <USBD_LL_StallEP>
}
 8012586:	bf00      	nop
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801258e:	b580      	push	{r7, lr}
 8012590:	b086      	sub	sp, #24
 8012592:	af00      	add	r7, sp, #0
 8012594:	60f8      	str	r0, [r7, #12]
 8012596:	60b9      	str	r1, [r7, #8]
 8012598:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801259a:	2300      	movs	r3, #0
 801259c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d036      	beq.n	8012612 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80125a8:	6938      	ldr	r0, [r7, #16]
 80125aa:	f000 f836 	bl	801261a <USBD_GetLen>
 80125ae:	4603      	mov	r3, r0
 80125b0:	3301      	adds	r3, #1
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	005b      	lsls	r3, r3, #1
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80125bc:	7dfb      	ldrb	r3, [r7, #23]
 80125be:	68ba      	ldr	r2, [r7, #8]
 80125c0:	4413      	add	r3, r2
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	7812      	ldrb	r2, [r2, #0]
 80125c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80125c8:	7dfb      	ldrb	r3, [r7, #23]
 80125ca:	3301      	adds	r3, #1
 80125cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80125ce:	7dfb      	ldrb	r3, [r7, #23]
 80125d0:	68ba      	ldr	r2, [r7, #8]
 80125d2:	4413      	add	r3, r2
 80125d4:	2203      	movs	r2, #3
 80125d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80125d8:	7dfb      	ldrb	r3, [r7, #23]
 80125da:	3301      	adds	r3, #1
 80125dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80125de:	e013      	b.n	8012608 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80125e0:	7dfb      	ldrb	r3, [r7, #23]
 80125e2:	68ba      	ldr	r2, [r7, #8]
 80125e4:	4413      	add	r3, r2
 80125e6:	693a      	ldr	r2, [r7, #16]
 80125e8:	7812      	ldrb	r2, [r2, #0]
 80125ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	3301      	adds	r3, #1
 80125f0:	613b      	str	r3, [r7, #16]
    idx++;
 80125f2:	7dfb      	ldrb	r3, [r7, #23]
 80125f4:	3301      	adds	r3, #1
 80125f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80125f8:	7dfb      	ldrb	r3, [r7, #23]
 80125fa:	68ba      	ldr	r2, [r7, #8]
 80125fc:	4413      	add	r3, r2
 80125fe:	2200      	movs	r2, #0
 8012600:	701a      	strb	r2, [r3, #0]
    idx++;
 8012602:	7dfb      	ldrb	r3, [r7, #23]
 8012604:	3301      	adds	r3, #1
 8012606:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1e7      	bne.n	80125e0 <USBD_GetString+0x52>
 8012610:	e000      	b.n	8012614 <USBD_GetString+0x86>
    return;
 8012612:	bf00      	nop
  }
}
 8012614:	3718      	adds	r7, #24
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801261a:	b480      	push	{r7}
 801261c:	b085      	sub	sp, #20
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012622:	2300      	movs	r3, #0
 8012624:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801262a:	e005      	b.n	8012638 <USBD_GetLen+0x1e>
  {
    len++;
 801262c:	7bfb      	ldrb	r3, [r7, #15]
 801262e:	3301      	adds	r3, #1
 8012630:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	3301      	adds	r3, #1
 8012636:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d1f5      	bne.n	801262c <USBD_GetLen+0x12>
  }

  return len;
 8012640:	7bfb      	ldrb	r3, [r7, #15]
}
 8012642:	4618      	mov	r0, r3
 8012644:	3714      	adds	r7, #20
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr

0801264e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801264e:	b580      	push	{r7, lr}
 8012650:	b084      	sub	sp, #16
 8012652:	af00      	add	r7, sp, #0
 8012654:	60f8      	str	r0, [r7, #12]
 8012656:	60b9      	str	r1, [r7, #8]
 8012658:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	2202      	movs	r2, #2
 801265e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	687a      	ldr	r2, [r7, #4]
 8012666:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	68ba      	ldr	r2, [r7, #8]
 8012672:	2100      	movs	r1, #0
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f003 fb8e 	bl	8015d96 <USBD_LL_Transmit>

  return USBD_OK;
 801267a:	2300      	movs	r3, #0
}
 801267c:	4618      	mov	r0, r3
 801267e:	3710      	adds	r7, #16
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	68ba      	ldr	r2, [r7, #8]
 8012694:	2100      	movs	r1, #0
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f003 fb7d 	bl	8015d96 <USBD_LL_Transmit>

  return USBD_OK;
 801269c:	2300      	movs	r3, #0
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3710      	adds	r7, #16
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b084      	sub	sp, #16
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	60f8      	str	r0, [r7, #12]
 80126ae:	60b9      	str	r1, [r7, #8]
 80126b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2203      	movs	r2, #3
 80126b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	687a      	ldr	r2, [r7, #4]
 80126be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	68ba      	ldr	r2, [r7, #8]
 80126ce:	2100      	movs	r1, #0
 80126d0:	68f8      	ldr	r0, [r7, #12]
 80126d2:	f003 fb81 	bl	8015dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126d6:	2300      	movs	r3, #0
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3710      	adds	r7, #16
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	68ba      	ldr	r2, [r7, #8]
 80126f0:	2100      	movs	r1, #0
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	f003 fb70 	bl	8015dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012702:	b580      	push	{r7, lr}
 8012704:	b082      	sub	sp, #8
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2204      	movs	r2, #4
 801270e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012712:	2300      	movs	r3, #0
 8012714:	2200      	movs	r2, #0
 8012716:	2100      	movs	r1, #0
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f003 fb3c 	bl	8015d96 <USBD_LL_Transmit>

  return USBD_OK;
 801271e:	2300      	movs	r3, #0
}
 8012720:	4618      	mov	r0, r3
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2205      	movs	r2, #5
 8012734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012738:	2300      	movs	r3, #0
 801273a:	2200      	movs	r2, #0
 801273c:	2100      	movs	r1, #0
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f003 fb4a 	bl	8015dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012744:	2300      	movs	r3, #0
}
 8012746:	4618      	mov	r0, r3
 8012748:	3708      	adds	r7, #8
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}

0801274e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801274e:	b480      	push	{r7}
 8012750:	b085      	sub	sp, #20
 8012752:	af00      	add	r7, sp, #0
 8012754:	4603      	mov	r3, r0
 8012756:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012758:	2300      	movs	r3, #0
 801275a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801275c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012760:	2b84      	cmp	r3, #132	; 0x84
 8012762:	d005      	beq.n	8012770 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012764:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	4413      	add	r3, r2
 801276c:	3303      	adds	r3, #3
 801276e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012770:	68fb      	ldr	r3, [r7, #12]
}
 8012772:	4618      	mov	r0, r3
 8012774:	3714      	adds	r7, #20
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr

0801277e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801277e:	b480      	push	{r7}
 8012780:	b083      	sub	sp, #12
 8012782:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012784:	f3ef 8305 	mrs	r3, IPSR
 8012788:	607b      	str	r3, [r7, #4]
  return(result);
 801278a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801278c:	2b00      	cmp	r3, #0
 801278e:	bf14      	ite	ne
 8012790:	2301      	movne	r3, #1
 8012792:	2300      	moveq	r3, #0
 8012794:	b2db      	uxtb	r3, r3
}
 8012796:	4618      	mov	r0, r3
 8012798:	370c      	adds	r7, #12
 801279a:	46bd      	mov	sp, r7
 801279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a0:	4770      	bx	lr

080127a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80127a2:	b580      	push	{r7, lr}
 80127a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80127a6:	f001 fb31 	bl	8013e0c <vTaskStartScheduler>
  
  return osOK;
 80127aa:	2300      	movs	r3, #0
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80127b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127b2:	b089      	sub	sp, #36	; 0x24
 80127b4:	af04      	add	r7, sp, #16
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	695b      	ldr	r3, [r3, #20]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d020      	beq.n	8012804 <osThreadCreate+0x54>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	699b      	ldr	r3, [r3, #24]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d01c      	beq.n	8012804 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	685c      	ldr	r4, [r3, #4]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681d      	ldr	r5, [r3, #0]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	691e      	ldr	r6, [r3, #16]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7ff ffb6 	bl	801274e <makeFreeRtosPriority>
 80127e2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	695b      	ldr	r3, [r3, #20]
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127ec:	9202      	str	r2, [sp, #8]
 80127ee:	9301      	str	r3, [sp, #4]
 80127f0:	9100      	str	r1, [sp, #0]
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	4632      	mov	r2, r6
 80127f6:	4629      	mov	r1, r5
 80127f8:	4620      	mov	r0, r4
 80127fa:	f001 f944 	bl	8013a86 <xTaskCreateStatic>
 80127fe:	4603      	mov	r3, r0
 8012800:	60fb      	str	r3, [r7, #12]
 8012802:	e01c      	b.n	801283e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	685c      	ldr	r4, [r3, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012810:	b29e      	uxth	r6, r3
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012818:	4618      	mov	r0, r3
 801281a:	f7ff ff98 	bl	801274e <makeFreeRtosPriority>
 801281e:	4602      	mov	r2, r0
 8012820:	f107 030c 	add.w	r3, r7, #12
 8012824:	9301      	str	r3, [sp, #4]
 8012826:	9200      	str	r2, [sp, #0]
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	4632      	mov	r2, r6
 801282c:	4629      	mov	r1, r5
 801282e:	4620      	mov	r0, r4
 8012830:	f001 f983 	bl	8013b3a <xTaskCreate>
 8012834:	4603      	mov	r3, r0
 8012836:	2b01      	cmp	r3, #1
 8012838:	d001      	beq.n	801283e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801283a:	2300      	movs	r3, #0
 801283c:	e000      	b.n	8012840 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801283e:	68fb      	ldr	r3, [r7, #12]
}
 8012840:	4618      	mov	r0, r3
 8012842:	3714      	adds	r7, #20
 8012844:	46bd      	mov	sp, r7
 8012846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012848 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d001      	beq.n	801285e <osDelay+0x16>
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	e000      	b.n	8012860 <osDelay+0x18>
 801285e:	2301      	movs	r3, #1
 8012860:	4618      	mov	r0, r3
 8012862:	f001 fa9f 	bl	8013da4 <vTaskDelay>
  
  return osOK;
 8012866:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012868:	4618      	mov	r0, r3
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b086      	sub	sp, #24
 8012874:	af02      	add	r7, sp, #8
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801287a:	2300      	movs	r3, #0
 801287c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801287e:	2300      	movs	r3, #0
 8012880:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8012882:	f7ff ff7c 	bl	801277e <inHandlerMode>
 8012886:	4603      	mov	r3, r0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d01c      	beq.n	80128c6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 801288c:	6839      	ldr	r1, [r7, #0]
 801288e:	f107 0208 	add.w	r2, r7, #8
 8012892:	f107 030c 	add.w	r3, r7, #12
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	4613      	mov	r3, r2
 801289a:	2201      	movs	r2, #1
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f002 f857 	bl	8014950 <xTaskGenericNotifyFromISR>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d002      	beq.n	80128ae <osSignalSet+0x3e>
      return 0x80000000;
 80128a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128ac:	e019      	b.n	80128e2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d015      	beq.n	80128e0 <osSignalSet+0x70>
 80128b4:	4b0d      	ldr	r3, [pc, #52]	; (80128ec <osSignalSet+0x7c>)
 80128b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128ba:	601a      	str	r2, [r3, #0]
 80128bc:	f3bf 8f4f 	dsb	sy
 80128c0:	f3bf 8f6f 	isb	sy
 80128c4:	e00c      	b.n	80128e0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80128c6:	6839      	ldr	r1, [r7, #0]
 80128c8:	f107 0308 	add.w	r3, r7, #8
 80128cc:	2201      	movs	r2, #1
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f001 ff8c 	bl	80147ec <xTaskGenericNotify>
 80128d4:	4603      	mov	r3, r0
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d002      	beq.n	80128e0 <osSignalSet+0x70>
    return 0x80000000;
 80128da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128de:	e000      	b.n	80128e2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80128e0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3710      	adds	r7, #16
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	e000ed04 	.word	0xe000ed04

080128f0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80128f0:	b590      	push	{r4, r7, lr}
 80128f2:	b089      	sub	sp, #36	; 0x24
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80128fc:	2300      	movs	r3, #0
 80128fe:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012900:	2300      	movs	r3, #0
 8012902:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801290a:	d103      	bne.n	8012914 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 801290c:	f04f 33ff 	mov.w	r3, #4294967295
 8012910:	61fb      	str	r3, [r7, #28]
 8012912:	e009      	b.n	8012928 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d006      	beq.n	8012928 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 801291e:	69fb      	ldr	r3, [r7, #28]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d101      	bne.n	8012928 <osSignalWait+0x38>
      ticks = 1;
 8012924:	2301      	movs	r3, #1
 8012926:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012928:	f7ff ff29 	bl	801277e <inHandlerMode>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d002      	beq.n	8012938 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012932:	2382      	movs	r3, #130	; 0x82
 8012934:	613b      	str	r3, [r7, #16]
 8012936:	e01b      	b.n	8012970 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012938:	68b9      	ldr	r1, [r7, #8]
 801293a:	f107 0310 	add.w	r3, r7, #16
 801293e:	1d1a      	adds	r2, r3, #4
 8012940:	69fb      	ldr	r3, [r7, #28]
 8012942:	2000      	movs	r0, #0
 8012944:	f001 fef8 	bl	8014738 <xTaskNotifyWait>
 8012948:	4603      	mov	r3, r0
 801294a:	2b01      	cmp	r3, #1
 801294c:	d008      	beq.n	8012960 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 801294e:	69fb      	ldr	r3, [r7, #28]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d102      	bne.n	801295a <osSignalWait+0x6a>
 8012954:	2300      	movs	r3, #0
 8012956:	613b      	str	r3, [r7, #16]
 8012958:	e00a      	b.n	8012970 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 801295a:	2340      	movs	r3, #64	; 0x40
 801295c:	613b      	str	r3, [r7, #16]
 801295e:	e007      	b.n	8012970 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	2b00      	cmp	r3, #0
 8012964:	da02      	bge.n	801296c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8012966:	2386      	movs	r3, #134	; 0x86
 8012968:	613b      	str	r3, [r7, #16]
 801296a:	e001      	b.n	8012970 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 801296c:	2308      	movs	r3, #8
 801296e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	461c      	mov	r4, r3
 8012974:	f107 0310 	add.w	r3, r7, #16
 8012978:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801297c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	3724      	adds	r7, #36	; 0x24
 8012984:	46bd      	mov	sp, r7
 8012986:	bd90      	pop	{r4, r7, pc}

08012988 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d007      	beq.n	80129a8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	4619      	mov	r1, r3
 801299e:	2001      	movs	r0, #1
 80129a0:	f000 fc5f 	bl	8013262 <xQueueCreateMutexStatic>
 80129a4:	4603      	mov	r3, r0
 80129a6:	e003      	b.n	80129b0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80129a8:	2001      	movs	r0, #1
 80129aa:	f000 fc42 	bl	8013232 <xQueueCreateMutex>
 80129ae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	3708      	adds	r7, #8
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b086      	sub	sp, #24
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	3303      	adds	r3, #3
 80129c6:	f023 0303 	bic.w	r3, r3, #3
 80129ca:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80129cc:	2014      	movs	r0, #20
 80129ce:	f002 fb3f 	bl	8015050 <pvPortMalloc>
 80129d2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d046      	beq.n	8012a68 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681a      	ldr	r2, [r3, #0]
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80129e2:	68fa      	ldr	r2, [r7, #12]
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	2200      	movs	r2, #0
 80129ec:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	4618      	mov	r0, r3
 80129f4:	f002 fb2c 	bl	8015050 <pvPortMalloc>
 80129f8:	4602      	mov	r2, r0
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d02b      	beq.n	8012a5e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	68fa      	ldr	r2, [r7, #12]
 8012a0c:	fb02 f303 	mul.w	r3, r2, r3
 8012a10:	4618      	mov	r0, r3
 8012a12:	f002 fb1d 	bl	8015050 <pvPortMalloc>
 8012a16:	4602      	mov	r2, r0
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d011      	beq.n	8012a48 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012a24:	2300      	movs	r3, #0
 8012a26:	613b      	str	r3, [r7, #16]
 8012a28:	e008      	b.n	8012a3c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	685a      	ldr	r2, [r3, #4]
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	4413      	add	r3, r2
 8012a32:	2200      	movs	r2, #0
 8012a34:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	613b      	str	r3, [r7, #16]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	693a      	ldr	r2, [r7, #16]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d3f1      	bcc.n	8012a2a <osPoolCreate+0x72>
 8012a46:	e00f      	b.n	8012a68 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f002 fbc1 	bl	80151d4 <vPortFree>
        vPortFree(thePool);
 8012a52:	6978      	ldr	r0, [r7, #20]
 8012a54:	f002 fbbe 	bl	80151d4 <vPortFree>
        thePool = NULL;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	617b      	str	r3, [r7, #20]
 8012a5c:	e004      	b.n	8012a68 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012a5e:	6978      	ldr	r0, [r7, #20]
 8012a60:	f002 fbb8 	bl	80151d4 <vPortFree>
      thePool = NULL;
 8012a64:	2300      	movs	r3, #0
 8012a66:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012a68:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3718      	adds	r7, #24
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}

08012a72 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012a72:	b580      	push	{r7, lr}
 8012a74:	b08a      	sub	sp, #40	; 0x28
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012a82:	f7ff fe7c 	bl	801277e <inHandlerMode>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00e      	beq.n	8012aaa <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012a8c:	f3ef 8211 	mrs	r2, BASEPRI
 8012a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a94:	f383 8811 	msr	BASEPRI, r3
 8012a98:	f3bf 8f6f 	isb	sy
 8012a9c:	f3bf 8f4f 	dsb	sy
 8012aa0:	617a      	str	r2, [r7, #20]
 8012aa2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012aa4:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8012aa8:	e001      	b.n	8012aae <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012aaa:	f002 f9b7 	bl	8014e1c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012aae:	2300      	movs	r3, #0
 8012ab0:	61fb      	str	r3, [r7, #28]
 8012ab2:	e029      	b.n	8012b08 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	691a      	ldr	r2, [r3, #16]
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	4413      	add	r3, r2
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	6892      	ldr	r2, [r2, #8]
 8012ac0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ac4:	fb02 f201 	mul.w	r2, r2, r1
 8012ac8:	1a9b      	subs	r3, r3, r2
 8012aca:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	685a      	ldr	r2, [r3, #4]
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d113      	bne.n	8012b02 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	685a      	ldr	r2, [r3, #4]
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	4619      	mov	r1, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	68db      	ldr	r3, [r3, #12]
 8012af0:	69ba      	ldr	r2, [r7, #24]
 8012af2:	fb02 f303 	mul.w	r3, r2, r3
 8012af6:	440b      	add	r3, r1
 8012af8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	69ba      	ldr	r2, [r7, #24]
 8012afe:	611a      	str	r2, [r3, #16]
      break;
 8012b00:	e007      	b.n	8012b12 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	3301      	adds	r3, #1
 8012b06:	61fb      	str	r3, [r7, #28]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	689b      	ldr	r3, [r3, #8]
 8012b0c:	69fa      	ldr	r2, [r7, #28]
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d3d0      	bcc.n	8012ab4 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012b12:	f7ff fe34 	bl	801277e <inHandlerMode>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d005      	beq.n	8012b28 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	f383 8811 	msr	BASEPRI, r3
 8012b26:	e001      	b.n	8012b2c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012b28:	f002 f9a6 	bl	8014e78 <vPortExitCritical>
  }
  
  return p;
 8012b2c:	6a3b      	ldr	r3, [r7, #32]
}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3728      	adds	r7, #40	; 0x28
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}

08012b36 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012b36:	b480      	push	{r7}
 8012b38:	b085      	sub	sp, #20
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	6078      	str	r0, [r7, #4]
 8012b3e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d101      	bne.n	8012b4a <osPoolFree+0x14>
    return osErrorParameter;
 8012b46:	2380      	movs	r3, #128	; 0x80
 8012b48:	e030      	b.n	8012bac <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d101      	bne.n	8012b54 <osPoolFree+0x1e>
    return osErrorParameter;
 8012b50:	2380      	movs	r3, #128	; 0x80
 8012b52:	e02b      	b.n	8012bac <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	683a      	ldr	r2, [r7, #0]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d201      	bcs.n	8012b62 <osPoolFree+0x2c>
    return osErrorParameter;
 8012b5e:	2380      	movs	r3, #128	; 0x80
 8012b60:	e024      	b.n	8012bac <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	6812      	ldr	r2, [r2, #0]
 8012b68:	1a9b      	subs	r3, r3, r2
 8012b6a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	68da      	ldr	r2, [r3, #12]
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b76:	fb02 f201 	mul.w	r2, r2, r1
 8012b7a:	1a9b      	subs	r3, r3, r2
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d001      	beq.n	8012b84 <osPoolFree+0x4e>
    return osErrorParameter;
 8012b80:	2380      	movs	r3, #128	; 0x80
 8012b82:	e013      	b.n	8012bac <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	68db      	ldr	r3, [r3, #12]
 8012b88:	68fa      	ldr	r2, [r7, #12]
 8012b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b8e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	689b      	ldr	r3, [r3, #8]
 8012b94:	68fa      	ldr	r2, [r7, #12]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d301      	bcc.n	8012b9e <osPoolFree+0x68>
    return osErrorParameter;
 8012b9a:	2380      	movs	r3, #128	; 0x80
 8012b9c:	e006      	b.n	8012bac <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	685a      	ldr	r2, [r3, #4]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	4413      	add	r3, r2
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012baa:	2300      	movs	r3, #0
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	3714      	adds	r7, #20
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012bb8:	b590      	push	{r4, r7, lr}
 8012bba:	b087      	sub	sp, #28
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	60fb      	str	r3, [r7, #12]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	613b      	str	r3, [r7, #16]
 8012bce:	2300      	movs	r3, #0
 8012bd0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	689c      	ldr	r4, [r3, #8]
 8012bd6:	200c      	movs	r0, #12
 8012bd8:	f002 fa3a 	bl	8015050 <pvPortMalloc>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	689b      	ldr	r3, [r3, #8]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d101      	bne.n	8012bee <osMailCreate+0x36>
    return NULL;
 8012bea:	2300      	movs	r3, #0
 8012bec:	e038      	b.n	8012c60 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	687a      	ldr	r2, [r7, #4]
 8012bf6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6818      	ldr	r0, [r3, #0]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	681c      	ldr	r4, [r3, #0]
 8012c02:	2200      	movs	r2, #0
 8012c04:	2104      	movs	r1, #4
 8012c06:	f000 fa9c 	bl	8013142 <xQueueGenericCreate>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	689b      	ldr	r3, [r3, #8]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d107      	bne.n	8012c2a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	689b      	ldr	r3, [r3, #8]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	4618      	mov	r0, r3
 8012c22:	f002 fad7 	bl	80151d4 <vPortFree>
    return NULL;
 8012c26:	2300      	movs	r3, #0
 8012c28:	e01a      	b.n	8012c60 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	681c      	ldr	r4, [r3, #0]
 8012c30:	f107 030c 	add.w	r3, r7, #12
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7ff febf 	bl	80129b8 <osPoolCreate>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	689b      	ldr	r3, [r3, #8]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d107      	bne.n	8012c5a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	689b      	ldr	r3, [r3, #8]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f002 fabf 	bl	80151d4 <vPortFree>
    return NULL;
 8012c56:	2300      	movs	r3, #0
 8012c58:	e002      	b.n	8012c60 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	689b      	ldr	r3, [r3, #8]
 8012c5e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	371c      	adds	r7, #28
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd90      	pop	{r4, r7, pc}

08012c68 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d101      	bne.n	8012c7c <osMailAlloc+0x14>
    return NULL;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	e006      	b.n	8012c8a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7ff fef6 	bl	8012a72 <osPoolAlloc>
 8012c86:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012c88:	68fb      	ldr	r3, [r7, #12]
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3710      	adds	r7, #16
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
	...

08012c94 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d101      	bne.n	8012ca8 <osMailPut+0x14>
    return osErrorParameter;
 8012ca4:	2380      	movs	r3, #128	; 0x80
 8012ca6:	e02c      	b.n	8012d02 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012cac:	f7ff fd67 	bl	801277e <inHandlerMode>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d018      	beq.n	8012ce8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6858      	ldr	r0, [r3, #4]
 8012cba:	f107 020c 	add.w	r2, r7, #12
 8012cbe:	4639      	mov	r1, r7
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	f000 fbe3 	bl	801348c <xQueueGenericSendFromISR>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d001      	beq.n	8012cd0 <osMailPut+0x3c>
      return osErrorOS;
 8012ccc:	23ff      	movs	r3, #255	; 0xff
 8012cce:	e018      	b.n	8012d02 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d014      	beq.n	8012d00 <osMailPut+0x6c>
 8012cd6:	4b0d      	ldr	r3, [pc, #52]	; (8012d0c <osMailPut+0x78>)
 8012cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cdc:	601a      	str	r2, [r3, #0]
 8012cde:	f3bf 8f4f 	dsb	sy
 8012ce2:	f3bf 8f6f 	isb	sy
 8012ce6:	e00b      	b.n	8012d00 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6858      	ldr	r0, [r3, #4]
 8012cec:	4639      	mov	r1, r7
 8012cee:	2300      	movs	r3, #0
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	f000 fad1 	bl	8013298 <xQueueGenericSend>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	d001      	beq.n	8012d00 <osMailPut+0x6c>
      return osErrorOS;
 8012cfc:	23ff      	movs	r3, #255	; 0xff
 8012cfe:	e000      	b.n	8012d02 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}
 8012d0a:	bf00      	nop
 8012d0c:	e000ed04 	.word	0xe000ed04

08012d10 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012d10:	b590      	push	{r4, r7, lr}
 8012d12:	b08b      	sub	sp, #44	; 0x2c
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d10a      	bne.n	8012d3c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012d26:	2380      	movs	r3, #128	; 0x80
 8012d28:	617b      	str	r3, [r7, #20]
    return event;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	461c      	mov	r4, r3
 8012d2e:	f107 0314 	add.w	r3, r7, #20
 8012d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012d3a:	e056      	b.n	8012dea <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012d40:	2300      	movs	r3, #0
 8012d42:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d4a:	d103      	bne.n	8012d54 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8012d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d50:	627b      	str	r3, [r7, #36]	; 0x24
 8012d52:	e009      	b.n	8012d68 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d006      	beq.n	8012d68 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d101      	bne.n	8012d68 <osMailGet+0x58>
      ticks = 1;
 8012d64:	2301      	movs	r3, #1
 8012d66:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012d68:	f7ff fd09 	bl	801277e <inHandlerMode>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d01d      	beq.n	8012dae <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	6858      	ldr	r0, [r3, #4]
 8012d76:	f107 0220 	add.w	r2, r7, #32
 8012d7a:	f107 0314 	add.w	r3, r7, #20
 8012d7e:	3304      	adds	r3, #4
 8012d80:	4619      	mov	r1, r3
 8012d82:	f000 fcf3 	bl	801376c <xQueueReceiveFromISR>
 8012d86:	4603      	mov	r3, r0
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d102      	bne.n	8012d92 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012d8c:	2320      	movs	r3, #32
 8012d8e:	617b      	str	r3, [r7, #20]
 8012d90:	e001      	b.n	8012d96 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012d92:	2300      	movs	r3, #0
 8012d94:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d96:	6a3b      	ldr	r3, [r7, #32]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d01e      	beq.n	8012dda <osMailGet+0xca>
 8012d9c:	4b15      	ldr	r3, [pc, #84]	; (8012df4 <osMailGet+0xe4>)
 8012d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012da2:	601a      	str	r2, [r3, #0]
 8012da4:	f3bf 8f4f 	dsb	sy
 8012da8:	f3bf 8f6f 	isb	sy
 8012dac:	e015      	b.n	8012dda <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	6858      	ldr	r0, [r3, #4]
 8012db2:	f107 0314 	add.w	r3, r7, #20
 8012db6:	3304      	adds	r3, #4
 8012db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dba:	4619      	mov	r1, r3
 8012dbc:	f000 fbfa 	bl	80135b4 <xQueueReceive>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d102      	bne.n	8012dcc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012dc6:	2320      	movs	r3, #32
 8012dc8:	617b      	str	r3, [r7, #20]
 8012dca:	e006      	b.n	8012dda <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d101      	bne.n	8012dd6 <osMailGet+0xc6>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	e000      	b.n	8012dd8 <osMailGet+0xc8>
 8012dd6:	2340      	movs	r3, #64	; 0x40
 8012dd8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	461c      	mov	r4, r3
 8012dde:	f107 0314 	add.w	r3, r7, #20
 8012de2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012dea:	68f8      	ldr	r0, [r7, #12]
 8012dec:	372c      	adds	r7, #44	; 0x2c
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd90      	pop	{r4, r7, pc}
 8012df2:	bf00      	nop
 8012df4:	e000ed04 	.word	0xe000ed04

08012df8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d101      	bne.n	8012e0c <osMailFree+0x14>
    return osErrorParameter;
 8012e08:	2380      	movs	r3, #128	; 0x80
 8012e0a:	e006      	b.n	8012e1a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	689b      	ldr	r3, [r3, #8]
 8012e10:	6839      	ldr	r1, [r7, #0]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff fe8f 	bl	8012b36 <osPoolFree>
 8012e18:	4603      	mov	r3, r0
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012e22:	b480      	push	{r7}
 8012e24:	b083      	sub	sp, #12
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f103 0208 	add.w	r2, r3, #8
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f04f 32ff 	mov.w	r2, #4294967295
 8012e3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f103 0208 	add.w	r2, r3, #8
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f103 0208 	add.w	r2, r3, #8
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2200      	movs	r2, #0
 8012e54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012e56:	bf00      	nop
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr

08012e62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012e62:	b480      	push	{r7}
 8012e64:	b083      	sub	sp, #12
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012e70:	bf00      	nop
 8012e72:	370c      	adds	r7, #12
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr

08012e7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b085      	sub	sp, #20
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	689a      	ldr	r2, [r3, #8]
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	689b      	ldr	r3, [r3, #8]
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	683a      	ldr	r2, [r7, #0]
 8012ea6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	1c5a      	adds	r2, r3, #1
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	601a      	str	r2, [r3, #0]
}
 8012eb8:	bf00      	nop
 8012eba:	3714      	adds	r7, #20
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b085      	sub	sp, #20
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eda:	d103      	bne.n	8012ee4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	691b      	ldr	r3, [r3, #16]
 8012ee0:	60fb      	str	r3, [r7, #12]
 8012ee2:	e00c      	b.n	8012efe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	3308      	adds	r3, #8
 8012ee8:	60fb      	str	r3, [r7, #12]
 8012eea:	e002      	b.n	8012ef2 <vListInsert+0x2e>
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	60fb      	str	r3, [r7, #12]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	685b      	ldr	r3, [r3, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	68ba      	ldr	r2, [r7, #8]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d2f6      	bcs.n	8012eec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	685a      	ldr	r2, [r3, #4]
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	683a      	ldr	r2, [r7, #0]
 8012f0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	683a      	ldr	r2, [r7, #0]
 8012f18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	1c5a      	adds	r2, r3, #1
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	601a      	str	r2, [r3, #0]
}
 8012f2a:	bf00      	nop
 8012f2c:	3714      	adds	r7, #20
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr

08012f36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012f36:	b480      	push	{r7}
 8012f38:	b085      	sub	sp, #20
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	691b      	ldr	r3, [r3, #16]
 8012f42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	6892      	ldr	r2, [r2, #8]
 8012f4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	689b      	ldr	r3, [r3, #8]
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	6852      	ldr	r2, [r2, #4]
 8012f56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d103      	bne.n	8012f6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	689a      	ldr	r2, [r3, #8]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	1e5a      	subs	r2, r3, #1
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	681b      	ldr	r3, [r3, #0]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3714      	adds	r7, #20
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr
	...

08012f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b084      	sub	sp, #16
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d109      	bne.n	8012fb4 <xQueueGenericReset+0x28>
	__asm volatile
 8012fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa4:	f383 8811 	msr	BASEPRI, r3
 8012fa8:	f3bf 8f6f 	isb	sy
 8012fac:	f3bf 8f4f 	dsb	sy
 8012fb0:	60bb      	str	r3, [r7, #8]
 8012fb2:	e7fe      	b.n	8012fb2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012fb4:	f001 ff32 	bl	8014e1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	681a      	ldr	r2, [r3, #0]
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fc0:	68f9      	ldr	r1, [r7, #12]
 8012fc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012fc4:	fb01 f303 	mul.w	r3, r1, r3
 8012fc8:	441a      	add	r2, r3
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	681a      	ldr	r2, [r3, #0]
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681a      	ldr	r2, [r3, #0]
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fe4:	3b01      	subs	r3, #1
 8012fe6:	68f9      	ldr	r1, [r7, #12]
 8012fe8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012fea:	fb01 f303 	mul.w	r3, r1, r3
 8012fee:	441a      	add	r2, r3
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	22ff      	movs	r2, #255	; 0xff
 8012ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	22ff      	movs	r2, #255	; 0xff
 8013000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d114      	bne.n	8013034 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	691b      	ldr	r3, [r3, #16]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d01a      	beq.n	8013048 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	3310      	adds	r3, #16
 8013016:	4618      	mov	r0, r3
 8013018:	f001 f936 	bl	8014288 <xTaskRemoveFromEventList>
 801301c:	4603      	mov	r3, r0
 801301e:	2b00      	cmp	r3, #0
 8013020:	d012      	beq.n	8013048 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013022:	4b0d      	ldr	r3, [pc, #52]	; (8013058 <xQueueGenericReset+0xcc>)
 8013024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013028:	601a      	str	r2, [r3, #0]
 801302a:	f3bf 8f4f 	dsb	sy
 801302e:	f3bf 8f6f 	isb	sy
 8013032:	e009      	b.n	8013048 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	3310      	adds	r3, #16
 8013038:	4618      	mov	r0, r3
 801303a:	f7ff fef2 	bl	8012e22 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	3324      	adds	r3, #36	; 0x24
 8013042:	4618      	mov	r0, r3
 8013044:	f7ff feed 	bl	8012e22 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013048:	f001 ff16 	bl	8014e78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801304c:	2301      	movs	r3, #1
}
 801304e:	4618      	mov	r0, r3
 8013050:	3710      	adds	r7, #16
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	e000ed04 	.word	0xe000ed04

0801305c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08e      	sub	sp, #56	; 0x38
 8013060:	af02      	add	r7, sp, #8
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d109      	bne.n	8013084 <xQueueGenericCreateStatic+0x28>
 8013070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013074:	f383 8811 	msr	BASEPRI, r3
 8013078:	f3bf 8f6f 	isb	sy
 801307c:	f3bf 8f4f 	dsb	sy
 8013080:	62bb      	str	r3, [r7, #40]	; 0x28
 8013082:	e7fe      	b.n	8013082 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d109      	bne.n	801309e <xQueueGenericCreateStatic+0x42>
 801308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801308e:	f383 8811 	msr	BASEPRI, r3
 8013092:	f3bf 8f6f 	isb	sy
 8013096:	f3bf 8f4f 	dsb	sy
 801309a:	627b      	str	r3, [r7, #36]	; 0x24
 801309c:	e7fe      	b.n	801309c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d002      	beq.n	80130aa <xQueueGenericCreateStatic+0x4e>
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d001      	beq.n	80130ae <xQueueGenericCreateStatic+0x52>
 80130aa:	2301      	movs	r3, #1
 80130ac:	e000      	b.n	80130b0 <xQueueGenericCreateStatic+0x54>
 80130ae:	2300      	movs	r3, #0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d109      	bne.n	80130c8 <xQueueGenericCreateStatic+0x6c>
 80130b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b8:	f383 8811 	msr	BASEPRI, r3
 80130bc:	f3bf 8f6f 	isb	sy
 80130c0:	f3bf 8f4f 	dsb	sy
 80130c4:	623b      	str	r3, [r7, #32]
 80130c6:	e7fe      	b.n	80130c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d102      	bne.n	80130d4 <xQueueGenericCreateStatic+0x78>
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d101      	bne.n	80130d8 <xQueueGenericCreateStatic+0x7c>
 80130d4:	2301      	movs	r3, #1
 80130d6:	e000      	b.n	80130da <xQueueGenericCreateStatic+0x7e>
 80130d8:	2300      	movs	r3, #0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d109      	bne.n	80130f2 <xQueueGenericCreateStatic+0x96>
 80130de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	61fb      	str	r3, [r7, #28]
 80130f0:	e7fe      	b.n	80130f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80130f2:	2348      	movs	r3, #72	; 0x48
 80130f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	2b48      	cmp	r3, #72	; 0x48
 80130fa:	d009      	beq.n	8013110 <xQueueGenericCreateStatic+0xb4>
 80130fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013100:	f383 8811 	msr	BASEPRI, r3
 8013104:	f3bf 8f6f 	isb	sy
 8013108:	f3bf 8f4f 	dsb	sy
 801310c:	61bb      	str	r3, [r7, #24]
 801310e:	e7fe      	b.n	801310e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013110:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013118:	2b00      	cmp	r3, #0
 801311a:	d00d      	beq.n	8013138 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311e:	2201      	movs	r2, #1
 8013120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013124:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	4613      	mov	r3, r2
 801312e:	687a      	ldr	r2, [r7, #4]
 8013130:	68b9      	ldr	r1, [r7, #8]
 8013132:	68f8      	ldr	r0, [r7, #12]
 8013134:	f000 f844 	bl	80131c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801313a:	4618      	mov	r0, r3
 801313c:	3730      	adds	r7, #48	; 0x30
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}

08013142 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013142:	b580      	push	{r7, lr}
 8013144:	b08a      	sub	sp, #40	; 0x28
 8013146:	af02      	add	r7, sp, #8
 8013148:	60f8      	str	r0, [r7, #12]
 801314a:	60b9      	str	r1, [r7, #8]
 801314c:	4613      	mov	r3, r2
 801314e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d109      	bne.n	801316a <xQueueGenericCreate+0x28>
 8013156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315a:	f383 8811 	msr	BASEPRI, r3
 801315e:	f3bf 8f6f 	isb	sy
 8013162:	f3bf 8f4f 	dsb	sy
 8013166:	613b      	str	r3, [r7, #16]
 8013168:	e7fe      	b.n	8013168 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d102      	bne.n	8013176 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013170:	2300      	movs	r3, #0
 8013172:	61fb      	str	r3, [r7, #28]
 8013174:	e004      	b.n	8013180 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	68ba      	ldr	r2, [r7, #8]
 801317a:	fb02 f303 	mul.w	r3, r2, r3
 801317e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013180:	69fb      	ldr	r3, [r7, #28]
 8013182:	3348      	adds	r3, #72	; 0x48
 8013184:	4618      	mov	r0, r3
 8013186:	f001 ff63 	bl	8015050 <pvPortMalloc>
 801318a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d011      	beq.n	80131b6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	3348      	adds	r3, #72	; 0x48
 801319a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	2200      	movs	r2, #0
 80131a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80131a4:	79fa      	ldrb	r2, [r7, #7]
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	4613      	mov	r3, r2
 80131ac:	697a      	ldr	r2, [r7, #20]
 80131ae:	68b9      	ldr	r1, [r7, #8]
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f000 f805 	bl	80131c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80131b6:	69bb      	ldr	r3, [r7, #24]
	}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3720      	adds	r7, #32
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	60b9      	str	r1, [r7, #8]
 80131ca:	607a      	str	r2, [r7, #4]
 80131cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d103      	bne.n	80131dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80131d4:	69bb      	ldr	r3, [r7, #24]
 80131d6:	69ba      	ldr	r2, [r7, #24]
 80131d8:	601a      	str	r2, [r3, #0]
 80131da:	e002      	b.n	80131e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80131dc:	69bb      	ldr	r3, [r7, #24]
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	68fa      	ldr	r2, [r7, #12]
 80131e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	68ba      	ldr	r2, [r7, #8]
 80131ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80131ee:	2101      	movs	r1, #1
 80131f0:	69b8      	ldr	r0, [r7, #24]
 80131f2:	f7ff fecb 	bl	8012f8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80131f6:	bf00      	nop
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}

080131fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80131fe:	b580      	push	{r7, lr}
 8013200:	b082      	sub	sp, #8
 8013202:	af00      	add	r7, sp, #0
 8013204:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00e      	beq.n	801322a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2200      	movs	r2, #0
 8013216:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2200      	movs	r2, #0
 801321c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801321e:	2300      	movs	r3, #0
 8013220:	2200      	movs	r2, #0
 8013222:	2100      	movs	r1, #0
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 f837 	bl	8013298 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801322a:	bf00      	nop
 801322c:	3708      	adds	r7, #8
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}

08013232 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013232:	b580      	push	{r7, lr}
 8013234:	b086      	sub	sp, #24
 8013236:	af00      	add	r7, sp, #0
 8013238:	4603      	mov	r3, r0
 801323a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801323c:	2301      	movs	r3, #1
 801323e:	617b      	str	r3, [r7, #20]
 8013240:	2300      	movs	r3, #0
 8013242:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013244:	79fb      	ldrb	r3, [r7, #7]
 8013246:	461a      	mov	r2, r3
 8013248:	6939      	ldr	r1, [r7, #16]
 801324a:	6978      	ldr	r0, [r7, #20]
 801324c:	f7ff ff79 	bl	8013142 <xQueueGenericCreate>
 8013250:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	f7ff ffd3 	bl	80131fe <prvInitialiseMutex>

		return xNewQueue;
 8013258:	68fb      	ldr	r3, [r7, #12]
	}
 801325a:	4618      	mov	r0, r3
 801325c:	3718      	adds	r7, #24
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}

08013262 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013262:	b580      	push	{r7, lr}
 8013264:	b088      	sub	sp, #32
 8013266:	af02      	add	r7, sp, #8
 8013268:	4603      	mov	r3, r0
 801326a:	6039      	str	r1, [r7, #0]
 801326c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801326e:	2301      	movs	r3, #1
 8013270:	617b      	str	r3, [r7, #20]
 8013272:	2300      	movs	r3, #0
 8013274:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013276:	79fb      	ldrb	r3, [r7, #7]
 8013278:	9300      	str	r3, [sp, #0]
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	2200      	movs	r2, #0
 801327e:	6939      	ldr	r1, [r7, #16]
 8013280:	6978      	ldr	r0, [r7, #20]
 8013282:	f7ff feeb 	bl	801305c <xQueueGenericCreateStatic>
 8013286:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013288:	68f8      	ldr	r0, [r7, #12]
 801328a:	f7ff ffb8 	bl	80131fe <prvInitialiseMutex>

		return xNewQueue;
 801328e:	68fb      	ldr	r3, [r7, #12]
	}
 8013290:	4618      	mov	r0, r3
 8013292:	3718      	adds	r7, #24
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}

08013298 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b08e      	sub	sp, #56	; 0x38
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
 80132a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80132a6:	2300      	movs	r3, #0
 80132a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80132ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d109      	bne.n	80132c8 <xQueueGenericSend+0x30>
 80132b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b8:	f383 8811 	msr	BASEPRI, r3
 80132bc:	f3bf 8f6f 	isb	sy
 80132c0:	f3bf 8f4f 	dsb	sy
 80132c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80132c6:	e7fe      	b.n	80132c6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d103      	bne.n	80132d6 <xQueueGenericSend+0x3e>
 80132ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <xQueueGenericSend+0x42>
 80132d6:	2301      	movs	r3, #1
 80132d8:	e000      	b.n	80132dc <xQueueGenericSend+0x44>
 80132da:	2300      	movs	r3, #0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d109      	bne.n	80132f4 <xQueueGenericSend+0x5c>
 80132e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e4:	f383 8811 	msr	BASEPRI, r3
 80132e8:	f3bf 8f6f 	isb	sy
 80132ec:	f3bf 8f4f 	dsb	sy
 80132f0:	627b      	str	r3, [r7, #36]	; 0x24
 80132f2:	e7fe      	b.n	80132f2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	2b02      	cmp	r3, #2
 80132f8:	d103      	bne.n	8013302 <xQueueGenericSend+0x6a>
 80132fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132fe:	2b01      	cmp	r3, #1
 8013300:	d101      	bne.n	8013306 <xQueueGenericSend+0x6e>
 8013302:	2301      	movs	r3, #1
 8013304:	e000      	b.n	8013308 <xQueueGenericSend+0x70>
 8013306:	2300      	movs	r3, #0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d109      	bne.n	8013320 <xQueueGenericSend+0x88>
 801330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013310:	f383 8811 	msr	BASEPRI, r3
 8013314:	f3bf 8f6f 	isb	sy
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	623b      	str	r3, [r7, #32]
 801331e:	e7fe      	b.n	801331e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013320:	f001 f968 	bl	80145f4 <xTaskGetSchedulerState>
 8013324:	4603      	mov	r3, r0
 8013326:	2b00      	cmp	r3, #0
 8013328:	d102      	bne.n	8013330 <xQueueGenericSend+0x98>
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <xQueueGenericSend+0x9c>
 8013330:	2301      	movs	r3, #1
 8013332:	e000      	b.n	8013336 <xQueueGenericSend+0x9e>
 8013334:	2300      	movs	r3, #0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d109      	bne.n	801334e <xQueueGenericSend+0xb6>
 801333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801333e:	f383 8811 	msr	BASEPRI, r3
 8013342:	f3bf 8f6f 	isb	sy
 8013346:	f3bf 8f4f 	dsb	sy
 801334a:	61fb      	str	r3, [r7, #28]
 801334c:	e7fe      	b.n	801334c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801334e:	f001 fd65 	bl	8014e1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801335a:	429a      	cmp	r2, r3
 801335c:	d302      	bcc.n	8013364 <xQueueGenericSend+0xcc>
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	2b02      	cmp	r3, #2
 8013362:	d129      	bne.n	80133b8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013364:	683a      	ldr	r2, [r7, #0]
 8013366:	68b9      	ldr	r1, [r7, #8]
 8013368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801336a:	f000 fa7c 	bl	8013866 <prvCopyDataToQueue>
 801336e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013374:	2b00      	cmp	r3, #0
 8013376:	d010      	beq.n	801339a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801337a:	3324      	adds	r3, #36	; 0x24
 801337c:	4618      	mov	r0, r3
 801337e:	f000 ff83 	bl	8014288 <xTaskRemoveFromEventList>
 8013382:	4603      	mov	r3, r0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d013      	beq.n	80133b0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013388:	4b3f      	ldr	r3, [pc, #252]	; (8013488 <xQueueGenericSend+0x1f0>)
 801338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801338e:	601a      	str	r2, [r3, #0]
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	f3bf 8f6f 	isb	sy
 8013398:	e00a      	b.n	80133b0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339c:	2b00      	cmp	r3, #0
 801339e:	d007      	beq.n	80133b0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80133a0:	4b39      	ldr	r3, [pc, #228]	; (8013488 <xQueueGenericSend+0x1f0>)
 80133a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133a6:	601a      	str	r2, [r3, #0]
 80133a8:	f3bf 8f4f 	dsb	sy
 80133ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80133b0:	f001 fd62 	bl	8014e78 <vPortExitCritical>
				return pdPASS;
 80133b4:	2301      	movs	r3, #1
 80133b6:	e063      	b.n	8013480 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d103      	bne.n	80133c6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133be:	f001 fd5b 	bl	8014e78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80133c2:	2300      	movs	r3, #0
 80133c4:	e05c      	b.n	8013480 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d106      	bne.n	80133da <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133cc:	f107 0314 	add.w	r3, r7, #20
 80133d0:	4618      	mov	r0, r3
 80133d2:	f000 ffbb 	bl	801434c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80133d6:	2301      	movs	r3, #1
 80133d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80133da:	f001 fd4d 	bl	8014e78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80133de:	f000 fd73 	bl	8013ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80133e2:	f001 fd1b 	bl	8014e1c <vPortEnterCritical>
 80133e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133ec:	b25b      	sxtb	r3, r3
 80133ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133f2:	d103      	bne.n	80133fc <xQueueGenericSend+0x164>
 80133f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f6:	2200      	movs	r2, #0
 80133f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80133fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013402:	b25b      	sxtb	r3, r3
 8013404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013408:	d103      	bne.n	8013412 <xQueueGenericSend+0x17a>
 801340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340c:	2200      	movs	r2, #0
 801340e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013412:	f001 fd31 	bl	8014e78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013416:	1d3a      	adds	r2, r7, #4
 8013418:	f107 0314 	add.w	r3, r7, #20
 801341c:	4611      	mov	r1, r2
 801341e:	4618      	mov	r0, r3
 8013420:	f000 ffaa 	bl	8014378 <xTaskCheckForTimeOut>
 8013424:	4603      	mov	r3, r0
 8013426:	2b00      	cmp	r3, #0
 8013428:	d124      	bne.n	8013474 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801342a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801342c:	f000 fb13 	bl	8013a56 <prvIsQueueFull>
 8013430:	4603      	mov	r3, r0
 8013432:	2b00      	cmp	r3, #0
 8013434:	d018      	beq.n	8013468 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013438:	3310      	adds	r3, #16
 801343a:	687a      	ldr	r2, [r7, #4]
 801343c:	4611      	mov	r1, r2
 801343e:	4618      	mov	r0, r3
 8013440:	f000 fefe 	bl	8014240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013446:	f000 fa9e 	bl	8013986 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801344a:	f000 fd4b 	bl	8013ee4 <xTaskResumeAll>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	f47f af7c 	bne.w	801334e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8013456:	4b0c      	ldr	r3, [pc, #48]	; (8013488 <xQueueGenericSend+0x1f0>)
 8013458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801345c:	601a      	str	r2, [r3, #0]
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	f3bf 8f6f 	isb	sy
 8013466:	e772      	b.n	801334e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801346a:	f000 fa8c 	bl	8013986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801346e:	f000 fd39 	bl	8013ee4 <xTaskResumeAll>
 8013472:	e76c      	b.n	801334e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013476:	f000 fa86 	bl	8013986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801347a:	f000 fd33 	bl	8013ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801347e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013480:	4618      	mov	r0, r3
 8013482:	3738      	adds	r7, #56	; 0x38
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	e000ed04 	.word	0xe000ed04

0801348c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b08e      	sub	sp, #56	; 0x38
 8013490:	af00      	add	r7, sp, #0
 8013492:	60f8      	str	r0, [r7, #12]
 8013494:	60b9      	str	r1, [r7, #8]
 8013496:	607a      	str	r2, [r7, #4]
 8013498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d109      	bne.n	80134b8 <xQueueGenericSendFromISR+0x2c>
 80134a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a8:	f383 8811 	msr	BASEPRI, r3
 80134ac:	f3bf 8f6f 	isb	sy
 80134b0:	f3bf 8f4f 	dsb	sy
 80134b4:	627b      	str	r3, [r7, #36]	; 0x24
 80134b6:	e7fe      	b.n	80134b6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d103      	bne.n	80134c6 <xQueueGenericSendFromISR+0x3a>
 80134be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d101      	bne.n	80134ca <xQueueGenericSendFromISR+0x3e>
 80134c6:	2301      	movs	r3, #1
 80134c8:	e000      	b.n	80134cc <xQueueGenericSendFromISR+0x40>
 80134ca:	2300      	movs	r3, #0
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d109      	bne.n	80134e4 <xQueueGenericSendFromISR+0x58>
 80134d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d4:	f383 8811 	msr	BASEPRI, r3
 80134d8:	f3bf 8f6f 	isb	sy
 80134dc:	f3bf 8f4f 	dsb	sy
 80134e0:	623b      	str	r3, [r7, #32]
 80134e2:	e7fe      	b.n	80134e2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	2b02      	cmp	r3, #2
 80134e8:	d103      	bne.n	80134f2 <xQueueGenericSendFromISR+0x66>
 80134ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134ee:	2b01      	cmp	r3, #1
 80134f0:	d101      	bne.n	80134f6 <xQueueGenericSendFromISR+0x6a>
 80134f2:	2301      	movs	r3, #1
 80134f4:	e000      	b.n	80134f8 <xQueueGenericSendFromISR+0x6c>
 80134f6:	2300      	movs	r3, #0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d109      	bne.n	8013510 <xQueueGenericSendFromISR+0x84>
 80134fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	61fb      	str	r3, [r7, #28]
 801350e:	e7fe      	b.n	801350e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013510:	f001 fd60 	bl	8014fd4 <vPortValidateInterruptPriority>
	__asm volatile
 8013514:	f3ef 8211 	mrs	r2, BASEPRI
 8013518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801351c:	f383 8811 	msr	BASEPRI, r3
 8013520:	f3bf 8f6f 	isb	sy
 8013524:	f3bf 8f4f 	dsb	sy
 8013528:	61ba      	str	r2, [r7, #24]
 801352a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801352c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801352e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013538:	429a      	cmp	r2, r3
 801353a:	d302      	bcc.n	8013542 <xQueueGenericSendFromISR+0xb6>
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	2b02      	cmp	r3, #2
 8013540:	d12c      	bne.n	801359c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801354c:	683a      	ldr	r2, [r7, #0]
 801354e:	68b9      	ldr	r1, [r7, #8]
 8013550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013552:	f000 f988 	bl	8013866 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013556:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801355e:	d112      	bne.n	8013586 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013564:	2b00      	cmp	r3, #0
 8013566:	d016      	beq.n	8013596 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801356a:	3324      	adds	r3, #36	; 0x24
 801356c:	4618      	mov	r0, r3
 801356e:	f000 fe8b 	bl	8014288 <xTaskRemoveFromEventList>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d00e      	beq.n	8013596 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00b      	beq.n	8013596 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2201      	movs	r2, #1
 8013582:	601a      	str	r2, [r3, #0]
 8013584:	e007      	b.n	8013596 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801358a:	3301      	adds	r3, #1
 801358c:	b2db      	uxtb	r3, r3
 801358e:	b25a      	sxtb	r2, r3
 8013590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013596:	2301      	movs	r3, #1
 8013598:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801359a:	e001      	b.n	80135a0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801359c:	2300      	movs	r3, #0
 801359e:	637b      	str	r3, [r7, #52]	; 0x34
 80135a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3738      	adds	r7, #56	; 0x38
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b08c      	sub	sp, #48	; 0x30
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80135c0:	2300      	movs	r3, #0
 80135c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d109      	bne.n	80135e2 <xQueueReceive+0x2e>
	__asm volatile
 80135ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	623b      	str	r3, [r7, #32]
 80135e0:	e7fe      	b.n	80135e0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d103      	bne.n	80135f0 <xQueueReceive+0x3c>
 80135e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d101      	bne.n	80135f4 <xQueueReceive+0x40>
 80135f0:	2301      	movs	r3, #1
 80135f2:	e000      	b.n	80135f6 <xQueueReceive+0x42>
 80135f4:	2300      	movs	r3, #0
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d109      	bne.n	801360e <xQueueReceive+0x5a>
 80135fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135fe:	f383 8811 	msr	BASEPRI, r3
 8013602:	f3bf 8f6f 	isb	sy
 8013606:	f3bf 8f4f 	dsb	sy
 801360a:	61fb      	str	r3, [r7, #28]
 801360c:	e7fe      	b.n	801360c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801360e:	f000 fff1 	bl	80145f4 <xTaskGetSchedulerState>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d102      	bne.n	801361e <xQueueReceive+0x6a>
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d101      	bne.n	8013622 <xQueueReceive+0x6e>
 801361e:	2301      	movs	r3, #1
 8013620:	e000      	b.n	8013624 <xQueueReceive+0x70>
 8013622:	2300      	movs	r3, #0
 8013624:	2b00      	cmp	r3, #0
 8013626:	d109      	bne.n	801363c <xQueueReceive+0x88>
 8013628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362c:	f383 8811 	msr	BASEPRI, r3
 8013630:	f3bf 8f6f 	isb	sy
 8013634:	f3bf 8f4f 	dsb	sy
 8013638:	61bb      	str	r3, [r7, #24]
 801363a:	e7fe      	b.n	801363a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801363c:	f001 fbee 	bl	8014e1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013644:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013648:	2b00      	cmp	r3, #0
 801364a:	d01f      	beq.n	801368c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801364c:	68b9      	ldr	r1, [r7, #8]
 801364e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013650:	f000 f973 	bl	801393a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013656:	1e5a      	subs	r2, r3, #1
 8013658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365e:	691b      	ldr	r3, [r3, #16]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d00f      	beq.n	8013684 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013666:	3310      	adds	r3, #16
 8013668:	4618      	mov	r0, r3
 801366a:	f000 fe0d 	bl	8014288 <xTaskRemoveFromEventList>
 801366e:	4603      	mov	r3, r0
 8013670:	2b00      	cmp	r3, #0
 8013672:	d007      	beq.n	8013684 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013674:	4b3c      	ldr	r3, [pc, #240]	; (8013768 <xQueueReceive+0x1b4>)
 8013676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801367a:	601a      	str	r2, [r3, #0]
 801367c:	f3bf 8f4f 	dsb	sy
 8013680:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013684:	f001 fbf8 	bl	8014e78 <vPortExitCritical>
				return pdPASS;
 8013688:	2301      	movs	r3, #1
 801368a:	e069      	b.n	8013760 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d103      	bne.n	801369a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013692:	f001 fbf1 	bl	8014e78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013696:	2300      	movs	r3, #0
 8013698:	e062      	b.n	8013760 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369c:	2b00      	cmp	r3, #0
 801369e:	d106      	bne.n	80136ae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136a0:	f107 0310 	add.w	r3, r7, #16
 80136a4:	4618      	mov	r0, r3
 80136a6:	f000 fe51 	bl	801434c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136aa:	2301      	movs	r3, #1
 80136ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136ae:	f001 fbe3 	bl	8014e78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136b2:	f000 fc09 	bl	8013ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136b6:	f001 fbb1 	bl	8014e1c <vPortEnterCritical>
 80136ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136c0:	b25b      	sxtb	r3, r3
 80136c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c6:	d103      	bne.n	80136d0 <xQueueReceive+0x11c>
 80136c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ca:	2200      	movs	r2, #0
 80136cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136d6:	b25b      	sxtb	r3, r3
 80136d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136dc:	d103      	bne.n	80136e6 <xQueueReceive+0x132>
 80136de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e0:	2200      	movs	r2, #0
 80136e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136e6:	f001 fbc7 	bl	8014e78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136ea:	1d3a      	adds	r2, r7, #4
 80136ec:	f107 0310 	add.w	r3, r7, #16
 80136f0:	4611      	mov	r1, r2
 80136f2:	4618      	mov	r0, r3
 80136f4:	f000 fe40 	bl	8014378 <xTaskCheckForTimeOut>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d123      	bne.n	8013746 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013700:	f000 f993 	bl	8013a2a <prvIsQueueEmpty>
 8013704:	4603      	mov	r3, r0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d017      	beq.n	801373a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370c:	3324      	adds	r3, #36	; 0x24
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	4611      	mov	r1, r2
 8013712:	4618      	mov	r0, r3
 8013714:	f000 fd94 	bl	8014240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801371a:	f000 f934 	bl	8013986 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801371e:	f000 fbe1 	bl	8013ee4 <xTaskResumeAll>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d189      	bne.n	801363c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013728:	4b0f      	ldr	r3, [pc, #60]	; (8013768 <xQueueReceive+0x1b4>)
 801372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801372e:	601a      	str	r2, [r3, #0]
 8013730:	f3bf 8f4f 	dsb	sy
 8013734:	f3bf 8f6f 	isb	sy
 8013738:	e780      	b.n	801363c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801373a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801373c:	f000 f923 	bl	8013986 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013740:	f000 fbd0 	bl	8013ee4 <xTaskResumeAll>
 8013744:	e77a      	b.n	801363c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013748:	f000 f91d 	bl	8013986 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801374c:	f000 fbca 	bl	8013ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013752:	f000 f96a 	bl	8013a2a <prvIsQueueEmpty>
 8013756:	4603      	mov	r3, r0
 8013758:	2b00      	cmp	r3, #0
 801375a:	f43f af6f 	beq.w	801363c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801375e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013760:	4618      	mov	r0, r3
 8013762:	3730      	adds	r7, #48	; 0x30
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}
 8013768:	e000ed04 	.word	0xe000ed04

0801376c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b08e      	sub	sp, #56	; 0x38
 8013770:	af00      	add	r7, sp, #0
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377e:	2b00      	cmp	r3, #0
 8013780:	d109      	bne.n	8013796 <xQueueReceiveFromISR+0x2a>
 8013782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013786:	f383 8811 	msr	BASEPRI, r3
 801378a:	f3bf 8f6f 	isb	sy
 801378e:	f3bf 8f4f 	dsb	sy
 8013792:	623b      	str	r3, [r7, #32]
 8013794:	e7fe      	b.n	8013794 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d103      	bne.n	80137a4 <xQueueReceiveFromISR+0x38>
 801379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d101      	bne.n	80137a8 <xQueueReceiveFromISR+0x3c>
 80137a4:	2301      	movs	r3, #1
 80137a6:	e000      	b.n	80137aa <xQueueReceiveFromISR+0x3e>
 80137a8:	2300      	movs	r3, #0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d109      	bne.n	80137c2 <xQueueReceiveFromISR+0x56>
 80137ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b2:	f383 8811 	msr	BASEPRI, r3
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	61fb      	str	r3, [r7, #28]
 80137c0:	e7fe      	b.n	80137c0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80137c2:	f001 fc07 	bl	8014fd4 <vPortValidateInterruptPriority>
	__asm volatile
 80137c6:	f3ef 8211 	mrs	r2, BASEPRI
 80137ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ce:	f383 8811 	msr	BASEPRI, r3
 80137d2:	f3bf 8f6f 	isb	sy
 80137d6:	f3bf 8f4f 	dsb	sy
 80137da:	61ba      	str	r2, [r7, #24]
 80137dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80137de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80137e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80137e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d02f      	beq.n	801384e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80137ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80137f8:	68b9      	ldr	r1, [r7, #8]
 80137fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137fc:	f000 f89d 	bl	801393a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013802:	1e5a      	subs	r2, r3, #1
 8013804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013806:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013810:	d112      	bne.n	8013838 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013814:	691b      	ldr	r3, [r3, #16]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d016      	beq.n	8013848 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381c:	3310      	adds	r3, #16
 801381e:	4618      	mov	r0, r3
 8013820:	f000 fd32 	bl	8014288 <xTaskRemoveFromEventList>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d00e      	beq.n	8013848 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d00b      	beq.n	8013848 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2201      	movs	r2, #1
 8013834:	601a      	str	r2, [r3, #0]
 8013836:	e007      	b.n	8013848 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801383c:	3301      	adds	r3, #1
 801383e:	b2db      	uxtb	r3, r3
 8013840:	b25a      	sxtb	r2, r3
 8013842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013848:	2301      	movs	r3, #1
 801384a:	637b      	str	r3, [r7, #52]	; 0x34
 801384c:	e001      	b.n	8013852 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801384e:	2300      	movs	r3, #0
 8013850:	637b      	str	r3, [r7, #52]	; 0x34
 8013852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013854:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801385e:	4618      	mov	r0, r3
 8013860:	3738      	adds	r7, #56	; 0x38
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}

08013866 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013866:	b580      	push	{r7, lr}
 8013868:	b086      	sub	sp, #24
 801386a:	af00      	add	r7, sp, #0
 801386c:	60f8      	str	r0, [r7, #12]
 801386e:	60b9      	str	r1, [r7, #8]
 8013870:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013872:	2300      	movs	r3, #0
 8013874:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801387a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013880:	2b00      	cmp	r3, #0
 8013882:	d10d      	bne.n	80138a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d14d      	bne.n	8013928 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	689b      	ldr	r3, [r3, #8]
 8013890:	4618      	mov	r0, r3
 8013892:	f000 fecd 	bl	8014630 <xTaskPriorityDisinherit>
 8013896:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2200      	movs	r2, #0
 801389c:	609a      	str	r2, [r3, #8]
 801389e:	e043      	b.n	8013928 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d119      	bne.n	80138da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	6858      	ldr	r0, [r3, #4]
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138ae:	461a      	mov	r2, r3
 80138b0:	68b9      	ldr	r1, [r7, #8]
 80138b2:	f002 fb2b 	bl	8015f0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	685a      	ldr	r2, [r3, #4]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138be:	441a      	add	r2, r3
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	685a      	ldr	r2, [r3, #4]
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	689b      	ldr	r3, [r3, #8]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d32b      	bcc.n	8013928 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	681a      	ldr	r2, [r3, #0]
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	605a      	str	r2, [r3, #4]
 80138d8:	e026      	b.n	8013928 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	68d8      	ldr	r0, [r3, #12]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e2:	461a      	mov	r2, r3
 80138e4:	68b9      	ldr	r1, [r7, #8]
 80138e6:	f002 fb11 	bl	8015f0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	68da      	ldr	r2, [r3, #12]
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f2:	425b      	negs	r3, r3
 80138f4:	441a      	add	r2, r3
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	68da      	ldr	r2, [r3, #12]
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	429a      	cmp	r2, r3
 8013904:	d207      	bcs.n	8013916 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	689a      	ldr	r2, [r3, #8]
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801390e:	425b      	negs	r3, r3
 8013910:	441a      	add	r2, r3
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b02      	cmp	r3, #2
 801391a:	d105      	bne.n	8013928 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d002      	beq.n	8013928 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	3b01      	subs	r3, #1
 8013926:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	1c5a      	adds	r2, r3, #1
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013930:	697b      	ldr	r3, [r7, #20]
}
 8013932:	4618      	mov	r0, r3
 8013934:	3718      	adds	r7, #24
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}

0801393a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801393a:	b580      	push	{r7, lr}
 801393c:	b082      	sub	sp, #8
 801393e:	af00      	add	r7, sp, #0
 8013940:	6078      	str	r0, [r7, #4]
 8013942:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013948:	2b00      	cmp	r3, #0
 801394a:	d018      	beq.n	801397e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	68da      	ldr	r2, [r3, #12]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013954:	441a      	add	r2, r3
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	68da      	ldr	r2, [r3, #12]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	429a      	cmp	r2, r3
 8013964:	d303      	bcc.n	801396e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681a      	ldr	r2, [r3, #0]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	68d9      	ldr	r1, [r3, #12]
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013976:	461a      	mov	r2, r3
 8013978:	6838      	ldr	r0, [r7, #0]
 801397a:	f002 fac7 	bl	8015f0c <memcpy>
	}
}
 801397e:	bf00      	nop
 8013980:	3708      	adds	r7, #8
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}

08013986 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013986:	b580      	push	{r7, lr}
 8013988:	b084      	sub	sp, #16
 801398a:	af00      	add	r7, sp, #0
 801398c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801398e:	f001 fa45 	bl	8014e1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013998:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801399a:	e011      	b.n	80139c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d012      	beq.n	80139ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	3324      	adds	r3, #36	; 0x24
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 fc6d 	bl	8014288 <xTaskRemoveFromEventList>
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d001      	beq.n	80139b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80139b4:	f000 fd40 	bl	8014438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80139b8:	7bfb      	ldrb	r3, [r7, #15]
 80139ba:	3b01      	subs	r3, #1
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80139c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	dce9      	bgt.n	801399c <prvUnlockQueue+0x16>
 80139c8:	e000      	b.n	80139cc <prvUnlockQueue+0x46>
					break;
 80139ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	22ff      	movs	r2, #255	; 0xff
 80139d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80139d4:	f001 fa50 	bl	8014e78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80139d8:	f001 fa20 	bl	8014e1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80139e4:	e011      	b.n	8013a0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	691b      	ldr	r3, [r3, #16]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d012      	beq.n	8013a14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	3310      	adds	r3, #16
 80139f2:	4618      	mov	r0, r3
 80139f4:	f000 fc48 	bl	8014288 <xTaskRemoveFromEventList>
 80139f8:	4603      	mov	r3, r0
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d001      	beq.n	8013a02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80139fe:	f000 fd1b 	bl	8014438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a02:	7bbb      	ldrb	r3, [r7, #14]
 8013a04:	3b01      	subs	r3, #1
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	dce9      	bgt.n	80139e6 <prvUnlockQueue+0x60>
 8013a12:	e000      	b.n	8013a16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013a14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	22ff      	movs	r2, #255	; 0xff
 8013a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013a1e:	f001 fa2b 	bl	8014e78 <vPortExitCritical>
}
 8013a22:	bf00      	nop
 8013a24:	3710      	adds	r7, #16
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}

08013a2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013a2a:	b580      	push	{r7, lr}
 8013a2c:	b084      	sub	sp, #16
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013a32:	f001 f9f3 	bl	8014e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d102      	bne.n	8013a44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013a3e:	2301      	movs	r3, #1
 8013a40:	60fb      	str	r3, [r7, #12]
 8013a42:	e001      	b.n	8013a48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013a44:	2300      	movs	r3, #0
 8013a46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013a48:	f001 fa16 	bl	8014e78 <vPortExitCritical>

	return xReturn;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3710      	adds	r7, #16
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}

08013a56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013a56:	b580      	push	{r7, lr}
 8013a58:	b084      	sub	sp, #16
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013a5e:	f001 f9dd 	bl	8014e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d102      	bne.n	8013a74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	60fb      	str	r3, [r7, #12]
 8013a72:	e001      	b.n	8013a78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013a74:	2300      	movs	r3, #0
 8013a76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013a78:	f001 f9fe 	bl	8014e78 <vPortExitCritical>

	return xReturn;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3710      	adds	r7, #16
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b08e      	sub	sp, #56	; 0x38
 8013a8a:	af04      	add	r7, sp, #16
 8013a8c:	60f8      	str	r0, [r7, #12]
 8013a8e:	60b9      	str	r1, [r7, #8]
 8013a90:	607a      	str	r2, [r7, #4]
 8013a92:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d109      	bne.n	8013aae <xTaskCreateStatic+0x28>
	__asm volatile
 8013a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9e:	f383 8811 	msr	BASEPRI, r3
 8013aa2:	f3bf 8f6f 	isb	sy
 8013aa6:	f3bf 8f4f 	dsb	sy
 8013aaa:	623b      	str	r3, [r7, #32]
 8013aac:	e7fe      	b.n	8013aac <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d109      	bne.n	8013ac8 <xTaskCreateStatic+0x42>
 8013ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab8:	f383 8811 	msr	BASEPRI, r3
 8013abc:	f3bf 8f6f 	isb	sy
 8013ac0:	f3bf 8f4f 	dsb	sy
 8013ac4:	61fb      	str	r3, [r7, #28]
 8013ac6:	e7fe      	b.n	8013ac6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013ac8:	2354      	movs	r3, #84	; 0x54
 8013aca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	2b54      	cmp	r3, #84	; 0x54
 8013ad0:	d009      	beq.n	8013ae6 <xTaskCreateStatic+0x60>
 8013ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad6:	f383 8811 	msr	BASEPRI, r3
 8013ada:	f3bf 8f6f 	isb	sy
 8013ade:	f3bf 8f4f 	dsb	sy
 8013ae2:	61bb      	str	r3, [r7, #24]
 8013ae4:	e7fe      	b.n	8013ae4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013ae6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d01e      	beq.n	8013b2c <xTaskCreateStatic+0xa6>
 8013aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d01b      	beq.n	8013b2c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013afc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b00:	2202      	movs	r2, #2
 8013b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013b06:	2300      	movs	r3, #0
 8013b08:	9303      	str	r3, [sp, #12]
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0c:	9302      	str	r3, [sp, #8]
 8013b0e:	f107 0314 	add.w	r3, r7, #20
 8013b12:	9301      	str	r3, [sp, #4]
 8013b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b16:	9300      	str	r3, [sp, #0]
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	687a      	ldr	r2, [r7, #4]
 8013b1c:	68b9      	ldr	r1, [r7, #8]
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f000 f850 	bl	8013bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b26:	f000 f8d3 	bl	8013cd0 <prvAddNewTaskToReadyList>
 8013b2a:	e001      	b.n	8013b30 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013b30:	697b      	ldr	r3, [r7, #20]
	}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3728      	adds	r7, #40	; 0x28
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b08c      	sub	sp, #48	; 0x30
 8013b3e:	af04      	add	r7, sp, #16
 8013b40:	60f8      	str	r0, [r7, #12]
 8013b42:	60b9      	str	r1, [r7, #8]
 8013b44:	603b      	str	r3, [r7, #0]
 8013b46:	4613      	mov	r3, r2
 8013b48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013b4a:	88fb      	ldrh	r3, [r7, #6]
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f001 fa7e 	bl	8015050 <pvPortMalloc>
 8013b54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d00e      	beq.n	8013b7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013b5c:	2054      	movs	r0, #84	; 0x54
 8013b5e:	f001 fa77 	bl	8015050 <pvPortMalloc>
 8013b62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d003      	beq.n	8013b72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	697a      	ldr	r2, [r7, #20]
 8013b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8013b70:	e005      	b.n	8013b7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013b72:	6978      	ldr	r0, [r7, #20]
 8013b74:	f001 fb2e 	bl	80151d4 <vPortFree>
 8013b78:	e001      	b.n	8013b7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013b7e:	69fb      	ldr	r3, [r7, #28]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d017      	beq.n	8013bb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	2200      	movs	r2, #0
 8013b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013b8c:	88fa      	ldrh	r2, [r7, #6]
 8013b8e:	2300      	movs	r3, #0
 8013b90:	9303      	str	r3, [sp, #12]
 8013b92:	69fb      	ldr	r3, [r7, #28]
 8013b94:	9302      	str	r3, [sp, #8]
 8013b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b98:	9301      	str	r3, [sp, #4]
 8013b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9c:	9300      	str	r3, [sp, #0]
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	68b9      	ldr	r1, [r7, #8]
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f000 f80e 	bl	8013bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013ba8:	69f8      	ldr	r0, [r7, #28]
 8013baa:	f000 f891 	bl	8013cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013bae:	2301      	movs	r3, #1
 8013bb0:	61bb      	str	r3, [r7, #24]
 8013bb2:	e002      	b.n	8013bba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013bba:	69bb      	ldr	r3, [r7, #24]
	}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3720      	adds	r7, #32
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b088      	sub	sp, #32
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	60b9      	str	r1, [r7, #8]
 8013bce:	607a      	str	r2, [r7, #4]
 8013bd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013bdc:	3b01      	subs	r3, #1
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	4413      	add	r3, r2
 8013be2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013be4:	69bb      	ldr	r3, [r7, #24]
 8013be6:	f023 0307 	bic.w	r3, r3, #7
 8013bea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013bec:	69bb      	ldr	r3, [r7, #24]
 8013bee:	f003 0307 	and.w	r3, r3, #7
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d009      	beq.n	8013c0a <prvInitialiseNewTask+0x46>
 8013bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfa:	f383 8811 	msr	BASEPRI, r3
 8013bfe:	f3bf 8f6f 	isb	sy
 8013c02:	f3bf 8f4f 	dsb	sy
 8013c06:	617b      	str	r3, [r7, #20]
 8013c08:	e7fe      	b.n	8013c08 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d01f      	beq.n	8013c50 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013c10:	2300      	movs	r3, #0
 8013c12:	61fb      	str	r3, [r7, #28]
 8013c14:	e012      	b.n	8013c3c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013c16:	68ba      	ldr	r2, [r7, #8]
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	4413      	add	r3, r2
 8013c1c:	7819      	ldrb	r1, [r3, #0]
 8013c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c20:	69fb      	ldr	r3, [r7, #28]
 8013c22:	4413      	add	r3, r2
 8013c24:	3334      	adds	r3, #52	; 0x34
 8013c26:	460a      	mov	r2, r1
 8013c28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013c2a:	68ba      	ldr	r2, [r7, #8]
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	4413      	add	r3, r2
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d006      	beq.n	8013c44 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	61fb      	str	r3, [r7, #28]
 8013c3c:	69fb      	ldr	r3, [r7, #28]
 8013c3e:	2b0f      	cmp	r3, #15
 8013c40:	d9e9      	bls.n	8013c16 <prvInitialiseNewTask+0x52>
 8013c42:	e000      	b.n	8013c46 <prvInitialiseNewTask+0x82>
			{
				break;
 8013c44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c48:	2200      	movs	r2, #0
 8013c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c4e:	e003      	b.n	8013c58 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c52:	2200      	movs	r2, #0
 8013c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5a:	2b06      	cmp	r3, #6
 8013c5c:	d901      	bls.n	8013c62 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013c5e:	2306      	movs	r3, #6
 8013c60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c6c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c70:	2200      	movs	r2, #0
 8013c72:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c76:	3304      	adds	r3, #4
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7ff f8f2 	bl	8012e62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c80:	3318      	adds	r3, #24
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7ff f8ed 	bl	8012e62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	f1c3 0207 	rsb	r2, r3, #7
 8013c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013cac:	683a      	ldr	r2, [r7, #0]
 8013cae:	68f9      	ldr	r1, [r7, #12]
 8013cb0:	69b8      	ldr	r0, [r7, #24]
 8013cb2:	f000 ff8b 	bl	8014bcc <pxPortInitialiseStack>
 8013cb6:	4602      	mov	r2, r0
 8013cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d002      	beq.n	8013cc8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013cc8:	bf00      	nop
 8013cca:	3720      	adds	r7, #32
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013cd8:	f001 f8a0 	bl	8014e1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013cdc:	4b2a      	ldr	r3, [pc, #168]	; (8013d88 <prvAddNewTaskToReadyList+0xb8>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	4a29      	ldr	r2, [pc, #164]	; (8013d88 <prvAddNewTaskToReadyList+0xb8>)
 8013ce4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013ce6:	4b29      	ldr	r3, [pc, #164]	; (8013d8c <prvAddNewTaskToReadyList+0xbc>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d109      	bne.n	8013d02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013cee:	4a27      	ldr	r2, [pc, #156]	; (8013d8c <prvAddNewTaskToReadyList+0xbc>)
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013cf4:	4b24      	ldr	r3, [pc, #144]	; (8013d88 <prvAddNewTaskToReadyList+0xb8>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d110      	bne.n	8013d1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013cfc:	f000 fbc0 	bl	8014480 <prvInitialiseTaskLists>
 8013d00:	e00d      	b.n	8013d1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013d02:	4b23      	ldr	r3, [pc, #140]	; (8013d90 <prvAddNewTaskToReadyList+0xc0>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d109      	bne.n	8013d1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013d0a:	4b20      	ldr	r3, [pc, #128]	; (8013d8c <prvAddNewTaskToReadyList+0xbc>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d802      	bhi.n	8013d1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013d18:	4a1c      	ldr	r2, [pc, #112]	; (8013d8c <prvAddNewTaskToReadyList+0xbc>)
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013d1e:	4b1d      	ldr	r3, [pc, #116]	; (8013d94 <prvAddNewTaskToReadyList+0xc4>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	3301      	adds	r3, #1
 8013d24:	4a1b      	ldr	r2, [pc, #108]	; (8013d94 <prvAddNewTaskToReadyList+0xc4>)
 8013d26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	409a      	lsls	r2, r3
 8013d30:	4b19      	ldr	r3, [pc, #100]	; (8013d98 <prvAddNewTaskToReadyList+0xc8>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	4313      	orrs	r3, r2
 8013d36:	4a18      	ldr	r2, [pc, #96]	; (8013d98 <prvAddNewTaskToReadyList+0xc8>)
 8013d38:	6013      	str	r3, [r2, #0]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d3e:	4613      	mov	r3, r2
 8013d40:	009b      	lsls	r3, r3, #2
 8013d42:	4413      	add	r3, r2
 8013d44:	009b      	lsls	r3, r3, #2
 8013d46:	4a15      	ldr	r2, [pc, #84]	; (8013d9c <prvAddNewTaskToReadyList+0xcc>)
 8013d48:	441a      	add	r2, r3
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	3304      	adds	r3, #4
 8013d4e:	4619      	mov	r1, r3
 8013d50:	4610      	mov	r0, r2
 8013d52:	f7ff f893 	bl	8012e7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013d56:	f001 f88f 	bl	8014e78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013d5a:	4b0d      	ldr	r3, [pc, #52]	; (8013d90 <prvAddNewTaskToReadyList+0xc0>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d00e      	beq.n	8013d80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013d62:	4b0a      	ldr	r3, [pc, #40]	; (8013d8c <prvAddNewTaskToReadyList+0xbc>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d207      	bcs.n	8013d80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013d70:	4b0b      	ldr	r3, [pc, #44]	; (8013da0 <prvAddNewTaskToReadyList+0xd0>)
 8013d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d76:	601a      	str	r2, [r3, #0]
 8013d78:	f3bf 8f4f 	dsb	sy
 8013d7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d80:	bf00      	nop
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	20001164 	.word	0x20001164
 8013d8c:	20001064 	.word	0x20001064
 8013d90:	20001170 	.word	0x20001170
 8013d94:	20001180 	.word	0x20001180
 8013d98:	2000116c 	.word	0x2000116c
 8013d9c:	20001068 	.word	0x20001068
 8013da0:	e000ed04 	.word	0xe000ed04

08013da4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013dac:	2300      	movs	r3, #0
 8013dae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d016      	beq.n	8013de4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013db6:	4b13      	ldr	r3, [pc, #76]	; (8013e04 <vTaskDelay+0x60>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d009      	beq.n	8013dd2 <vTaskDelay+0x2e>
 8013dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc2:	f383 8811 	msr	BASEPRI, r3
 8013dc6:	f3bf 8f6f 	isb	sy
 8013dca:	f3bf 8f4f 	dsb	sy
 8013dce:	60bb      	str	r3, [r7, #8]
 8013dd0:	e7fe      	b.n	8013dd0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013dd2:	f000 f879 	bl	8013ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013dd6:	2100      	movs	r1, #0
 8013dd8:	6878      	ldr	r0, [r7, #4]
 8013dda:	f000 fe91 	bl	8014b00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013dde:	f000 f881 	bl	8013ee4 <xTaskResumeAll>
 8013de2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d107      	bne.n	8013dfa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013dea:	4b07      	ldr	r3, [pc, #28]	; (8013e08 <vTaskDelay+0x64>)
 8013dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013df0:	601a      	str	r2, [r3, #0]
 8013df2:	f3bf 8f4f 	dsb	sy
 8013df6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013dfa:	bf00      	nop
 8013dfc:	3710      	adds	r7, #16
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	2000118c 	.word	0x2000118c
 8013e08:	e000ed04 	.word	0xe000ed04

08013e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b08a      	sub	sp, #40	; 0x28
 8013e10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013e12:	2300      	movs	r3, #0
 8013e14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013e16:	2300      	movs	r3, #0
 8013e18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013e1a:	463a      	mov	r2, r7
 8013e1c:	1d39      	adds	r1, r7, #4
 8013e1e:	f107 0308 	add.w	r3, r7, #8
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7ee f9fc 	bl	8002220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013e28:	6839      	ldr	r1, [r7, #0]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	68ba      	ldr	r2, [r7, #8]
 8013e2e:	9202      	str	r2, [sp, #8]
 8013e30:	9301      	str	r3, [sp, #4]
 8013e32:	2300      	movs	r3, #0
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	2300      	movs	r3, #0
 8013e38:	460a      	mov	r2, r1
 8013e3a:	491d      	ldr	r1, [pc, #116]	; (8013eb0 <vTaskStartScheduler+0xa4>)
 8013e3c:	481d      	ldr	r0, [pc, #116]	; (8013eb4 <vTaskStartScheduler+0xa8>)
 8013e3e:	f7ff fe22 	bl	8013a86 <xTaskCreateStatic>
 8013e42:	4602      	mov	r2, r0
 8013e44:	4b1c      	ldr	r3, [pc, #112]	; (8013eb8 <vTaskStartScheduler+0xac>)
 8013e46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013e48:	4b1b      	ldr	r3, [pc, #108]	; (8013eb8 <vTaskStartScheduler+0xac>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d002      	beq.n	8013e56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013e50:	2301      	movs	r3, #1
 8013e52:	617b      	str	r3, [r7, #20]
 8013e54:	e001      	b.n	8013e5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013e56:	2300      	movs	r3, #0
 8013e58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	d115      	bne.n	8013e8c <vTaskStartScheduler+0x80>
 8013e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e64:	f383 8811 	msr	BASEPRI, r3
 8013e68:	f3bf 8f6f 	isb	sy
 8013e6c:	f3bf 8f4f 	dsb	sy
 8013e70:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e72:	4b12      	ldr	r3, [pc, #72]	; (8013ebc <vTaskStartScheduler+0xb0>)
 8013e74:	f04f 32ff 	mov.w	r2, #4294967295
 8013e78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e7a:	4b11      	ldr	r3, [pc, #68]	; (8013ec0 <vTaskStartScheduler+0xb4>)
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e80:	4b10      	ldr	r3, [pc, #64]	; (8013ec4 <vTaskStartScheduler+0xb8>)
 8013e82:	2200      	movs	r2, #0
 8013e84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e86:	f000 ff2b 	bl	8014ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e8a:	e00d      	b.n	8013ea8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e92:	d109      	bne.n	8013ea8 <vTaskStartScheduler+0x9c>
 8013e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e98:	f383 8811 	msr	BASEPRI, r3
 8013e9c:	f3bf 8f6f 	isb	sy
 8013ea0:	f3bf 8f4f 	dsb	sy
 8013ea4:	60fb      	str	r3, [r7, #12]
 8013ea6:	e7fe      	b.n	8013ea6 <vTaskStartScheduler+0x9a>
}
 8013ea8:	bf00      	nop
 8013eaa:	3718      	adds	r7, #24
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	0801b654 	.word	0x0801b654
 8013eb4:	08014451 	.word	0x08014451
 8013eb8:	20001188 	.word	0x20001188
 8013ebc:	20001184 	.word	0x20001184
 8013ec0:	20001170 	.word	0x20001170
 8013ec4:	20001168 	.word	0x20001168

08013ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013ec8:	b480      	push	{r7}
 8013eca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013ecc:	4b04      	ldr	r3, [pc, #16]	; (8013ee0 <vTaskSuspendAll+0x18>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	4a03      	ldr	r2, [pc, #12]	; (8013ee0 <vTaskSuspendAll+0x18>)
 8013ed4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013ed6:	bf00      	nop
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ede:	4770      	bx	lr
 8013ee0:	2000118c 	.word	0x2000118c

08013ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013eea:	2300      	movs	r3, #0
 8013eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ef2:	4b41      	ldr	r3, [pc, #260]	; (8013ff8 <xTaskResumeAll+0x114>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d109      	bne.n	8013f0e <xTaskResumeAll+0x2a>
 8013efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efe:	f383 8811 	msr	BASEPRI, r3
 8013f02:	f3bf 8f6f 	isb	sy
 8013f06:	f3bf 8f4f 	dsb	sy
 8013f0a:	603b      	str	r3, [r7, #0]
 8013f0c:	e7fe      	b.n	8013f0c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013f0e:	f000 ff85 	bl	8014e1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013f12:	4b39      	ldr	r3, [pc, #228]	; (8013ff8 <xTaskResumeAll+0x114>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	3b01      	subs	r3, #1
 8013f18:	4a37      	ldr	r2, [pc, #220]	; (8013ff8 <xTaskResumeAll+0x114>)
 8013f1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f1c:	4b36      	ldr	r3, [pc, #216]	; (8013ff8 <xTaskResumeAll+0x114>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d161      	bne.n	8013fe8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013f24:	4b35      	ldr	r3, [pc, #212]	; (8013ffc <xTaskResumeAll+0x118>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d05d      	beq.n	8013fe8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f2c:	e02e      	b.n	8013f8c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f2e:	4b34      	ldr	r3, [pc, #208]	; (8014000 <xTaskResumeAll+0x11c>)
 8013f30:	68db      	ldr	r3, [r3, #12]
 8013f32:	68db      	ldr	r3, [r3, #12]
 8013f34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	3318      	adds	r3, #24
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7fe fffb 	bl	8012f36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	3304      	adds	r3, #4
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7fe fff6 	bl	8012f36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f4e:	2201      	movs	r2, #1
 8013f50:	409a      	lsls	r2, r3
 8013f52:	4b2c      	ldr	r3, [pc, #176]	; (8014004 <xTaskResumeAll+0x120>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	4313      	orrs	r3, r2
 8013f58:	4a2a      	ldr	r2, [pc, #168]	; (8014004 <xTaskResumeAll+0x120>)
 8013f5a:	6013      	str	r3, [r2, #0]
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f60:	4613      	mov	r3, r2
 8013f62:	009b      	lsls	r3, r3, #2
 8013f64:	4413      	add	r3, r2
 8013f66:	009b      	lsls	r3, r3, #2
 8013f68:	4a27      	ldr	r2, [pc, #156]	; (8014008 <xTaskResumeAll+0x124>)
 8013f6a:	441a      	add	r2, r3
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	3304      	adds	r3, #4
 8013f70:	4619      	mov	r1, r3
 8013f72:	4610      	mov	r0, r2
 8013f74:	f7fe ff82 	bl	8012e7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f7c:	4b23      	ldr	r3, [pc, #140]	; (801400c <xTaskResumeAll+0x128>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d302      	bcc.n	8013f8c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013f86:	4b22      	ldr	r3, [pc, #136]	; (8014010 <xTaskResumeAll+0x12c>)
 8013f88:	2201      	movs	r2, #1
 8013f8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f8c:	4b1c      	ldr	r3, [pc, #112]	; (8014000 <xTaskResumeAll+0x11c>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d1cc      	bne.n	8013f2e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d001      	beq.n	8013f9e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f9a:	f000 fb0b 	bl	80145b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013f9e:	4b1d      	ldr	r3, [pc, #116]	; (8014014 <xTaskResumeAll+0x130>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d010      	beq.n	8013fcc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013faa:	f000 f837 	bl	801401c <xTaskIncrementTick>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d002      	beq.n	8013fba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013fb4:	4b16      	ldr	r3, [pc, #88]	; (8014010 <xTaskResumeAll+0x12c>)
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	3b01      	subs	r3, #1
 8013fbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d1f1      	bne.n	8013faa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013fc6:	4b13      	ldr	r3, [pc, #76]	; (8014014 <xTaskResumeAll+0x130>)
 8013fc8:	2200      	movs	r2, #0
 8013fca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013fcc:	4b10      	ldr	r3, [pc, #64]	; (8014010 <xTaskResumeAll+0x12c>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d009      	beq.n	8013fe8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013fd8:	4b0f      	ldr	r3, [pc, #60]	; (8014018 <xTaskResumeAll+0x134>)
 8013fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fde:	601a      	str	r2, [r3, #0]
 8013fe0:	f3bf 8f4f 	dsb	sy
 8013fe4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fe8:	f000 ff46 	bl	8014e78 <vPortExitCritical>

	return xAlreadyYielded;
 8013fec:	68bb      	ldr	r3, [r7, #8]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3710      	adds	r7, #16
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	2000118c 	.word	0x2000118c
 8013ffc:	20001164 	.word	0x20001164
 8014000:	20001124 	.word	0x20001124
 8014004:	2000116c 	.word	0x2000116c
 8014008:	20001068 	.word	0x20001068
 801400c:	20001064 	.word	0x20001064
 8014010:	20001178 	.word	0x20001178
 8014014:	20001174 	.word	0x20001174
 8014018:	e000ed04 	.word	0xe000ed04

0801401c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b086      	sub	sp, #24
 8014020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014022:	2300      	movs	r3, #0
 8014024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014026:	4b4e      	ldr	r3, [pc, #312]	; (8014160 <xTaskIncrementTick+0x144>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	2b00      	cmp	r3, #0
 801402c:	f040 8087 	bne.w	801413e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014030:	4b4c      	ldr	r3, [pc, #304]	; (8014164 <xTaskIncrementTick+0x148>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	3301      	adds	r3, #1
 8014036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014038:	4a4a      	ldr	r2, [pc, #296]	; (8014164 <xTaskIncrementTick+0x148>)
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d11f      	bne.n	8014084 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8014044:	4b48      	ldr	r3, [pc, #288]	; (8014168 <xTaskIncrementTick+0x14c>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d009      	beq.n	8014062 <xTaskIncrementTick+0x46>
 801404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014052:	f383 8811 	msr	BASEPRI, r3
 8014056:	f3bf 8f6f 	isb	sy
 801405a:	f3bf 8f4f 	dsb	sy
 801405e:	603b      	str	r3, [r7, #0]
 8014060:	e7fe      	b.n	8014060 <xTaskIncrementTick+0x44>
 8014062:	4b41      	ldr	r3, [pc, #260]	; (8014168 <xTaskIncrementTick+0x14c>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	60fb      	str	r3, [r7, #12]
 8014068:	4b40      	ldr	r3, [pc, #256]	; (801416c <xTaskIncrementTick+0x150>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	4a3e      	ldr	r2, [pc, #248]	; (8014168 <xTaskIncrementTick+0x14c>)
 801406e:	6013      	str	r3, [r2, #0]
 8014070:	4a3e      	ldr	r2, [pc, #248]	; (801416c <xTaskIncrementTick+0x150>)
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	6013      	str	r3, [r2, #0]
 8014076:	4b3e      	ldr	r3, [pc, #248]	; (8014170 <xTaskIncrementTick+0x154>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	3301      	adds	r3, #1
 801407c:	4a3c      	ldr	r2, [pc, #240]	; (8014170 <xTaskIncrementTick+0x154>)
 801407e:	6013      	str	r3, [r2, #0]
 8014080:	f000 fa98 	bl	80145b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014084:	4b3b      	ldr	r3, [pc, #236]	; (8014174 <xTaskIncrementTick+0x158>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	693a      	ldr	r2, [r7, #16]
 801408a:	429a      	cmp	r2, r3
 801408c:	d348      	bcc.n	8014120 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801408e:	4b36      	ldr	r3, [pc, #216]	; (8014168 <xTaskIncrementTick+0x14c>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d104      	bne.n	80140a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014098:	4b36      	ldr	r3, [pc, #216]	; (8014174 <xTaskIncrementTick+0x158>)
 801409a:	f04f 32ff 	mov.w	r2, #4294967295
 801409e:	601a      	str	r2, [r3, #0]
					break;
 80140a0:	e03e      	b.n	8014120 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140a2:	4b31      	ldr	r3, [pc, #196]	; (8014168 <xTaskIncrementTick+0x14c>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	68db      	ldr	r3, [r3, #12]
 80140aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80140b2:	693a      	ldr	r2, [r7, #16]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d203      	bcs.n	80140c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140ba:	4a2e      	ldr	r2, [pc, #184]	; (8014174 <xTaskIncrementTick+0x158>)
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140c0:	e02e      	b.n	8014120 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	3304      	adds	r3, #4
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fe ff35 	bl	8012f36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d004      	beq.n	80140de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	3318      	adds	r3, #24
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fe ff2c 	bl	8012f36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e2:	2201      	movs	r2, #1
 80140e4:	409a      	lsls	r2, r3
 80140e6:	4b24      	ldr	r3, [pc, #144]	; (8014178 <xTaskIncrementTick+0x15c>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	4313      	orrs	r3, r2
 80140ec:	4a22      	ldr	r2, [pc, #136]	; (8014178 <xTaskIncrementTick+0x15c>)
 80140ee:	6013      	str	r3, [r2, #0]
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140f4:	4613      	mov	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4413      	add	r3, r2
 80140fa:	009b      	lsls	r3, r3, #2
 80140fc:	4a1f      	ldr	r2, [pc, #124]	; (801417c <xTaskIncrementTick+0x160>)
 80140fe:	441a      	add	r2, r3
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	3304      	adds	r3, #4
 8014104:	4619      	mov	r1, r3
 8014106:	4610      	mov	r0, r2
 8014108:	f7fe feb8 	bl	8012e7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014110:	4b1b      	ldr	r3, [pc, #108]	; (8014180 <xTaskIncrementTick+0x164>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014116:	429a      	cmp	r2, r3
 8014118:	d3b9      	bcc.n	801408e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801411a:	2301      	movs	r3, #1
 801411c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801411e:	e7b6      	b.n	801408e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014120:	4b17      	ldr	r3, [pc, #92]	; (8014180 <xTaskIncrementTick+0x164>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014126:	4915      	ldr	r1, [pc, #84]	; (801417c <xTaskIncrementTick+0x160>)
 8014128:	4613      	mov	r3, r2
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	4413      	add	r3, r2
 801412e:	009b      	lsls	r3, r3, #2
 8014130:	440b      	add	r3, r1
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	2b01      	cmp	r3, #1
 8014136:	d907      	bls.n	8014148 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8014138:	2301      	movs	r3, #1
 801413a:	617b      	str	r3, [r7, #20]
 801413c:	e004      	b.n	8014148 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801413e:	4b11      	ldr	r3, [pc, #68]	; (8014184 <xTaskIncrementTick+0x168>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	3301      	adds	r3, #1
 8014144:	4a0f      	ldr	r2, [pc, #60]	; (8014184 <xTaskIncrementTick+0x168>)
 8014146:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014148:	4b0f      	ldr	r3, [pc, #60]	; (8014188 <xTaskIncrementTick+0x16c>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d001      	beq.n	8014154 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8014150:	2301      	movs	r3, #1
 8014152:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014154:	697b      	ldr	r3, [r7, #20]
}
 8014156:	4618      	mov	r0, r3
 8014158:	3718      	adds	r7, #24
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}
 801415e:	bf00      	nop
 8014160:	2000118c 	.word	0x2000118c
 8014164:	20001168 	.word	0x20001168
 8014168:	2000111c 	.word	0x2000111c
 801416c:	20001120 	.word	0x20001120
 8014170:	2000117c 	.word	0x2000117c
 8014174:	20001184 	.word	0x20001184
 8014178:	2000116c 	.word	0x2000116c
 801417c:	20001068 	.word	0x20001068
 8014180:	20001064 	.word	0x20001064
 8014184:	20001174 	.word	0x20001174
 8014188:	20001178 	.word	0x20001178

0801418c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801418c:	b480      	push	{r7}
 801418e:	b087      	sub	sp, #28
 8014190:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014192:	4b26      	ldr	r3, [pc, #152]	; (801422c <vTaskSwitchContext+0xa0>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d003      	beq.n	80141a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801419a:	4b25      	ldr	r3, [pc, #148]	; (8014230 <vTaskSwitchContext+0xa4>)
 801419c:	2201      	movs	r2, #1
 801419e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80141a0:	e03e      	b.n	8014220 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80141a2:	4b23      	ldr	r3, [pc, #140]	; (8014230 <vTaskSwitchContext+0xa4>)
 80141a4:	2200      	movs	r2, #0
 80141a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141a8:	4b22      	ldr	r3, [pc, #136]	; (8014234 <vTaskSwitchContext+0xa8>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	fab3 f383 	clz	r3, r3
 80141b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80141b6:	7afb      	ldrb	r3, [r7, #11]
 80141b8:	f1c3 031f 	rsb	r3, r3, #31
 80141bc:	617b      	str	r3, [r7, #20]
 80141be:	491e      	ldr	r1, [pc, #120]	; (8014238 <vTaskSwitchContext+0xac>)
 80141c0:	697a      	ldr	r2, [r7, #20]
 80141c2:	4613      	mov	r3, r2
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	4413      	add	r3, r2
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	440b      	add	r3, r1
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d109      	bne.n	80141e6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80141d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d6:	f383 8811 	msr	BASEPRI, r3
 80141da:	f3bf 8f6f 	isb	sy
 80141de:	f3bf 8f4f 	dsb	sy
 80141e2:	607b      	str	r3, [r7, #4]
 80141e4:	e7fe      	b.n	80141e4 <vTaskSwitchContext+0x58>
 80141e6:	697a      	ldr	r2, [r7, #20]
 80141e8:	4613      	mov	r3, r2
 80141ea:	009b      	lsls	r3, r3, #2
 80141ec:	4413      	add	r3, r2
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	4a11      	ldr	r2, [pc, #68]	; (8014238 <vTaskSwitchContext+0xac>)
 80141f2:	4413      	add	r3, r2
 80141f4:	613b      	str	r3, [r7, #16]
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	685a      	ldr	r2, [r3, #4]
 80141fc:	693b      	ldr	r3, [r7, #16]
 80141fe:	605a      	str	r2, [r3, #4]
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	685a      	ldr	r2, [r3, #4]
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	3308      	adds	r3, #8
 8014208:	429a      	cmp	r2, r3
 801420a:	d104      	bne.n	8014216 <vTaskSwitchContext+0x8a>
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	685a      	ldr	r2, [r3, #4]
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	605a      	str	r2, [r3, #4]
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	4a07      	ldr	r2, [pc, #28]	; (801423c <vTaskSwitchContext+0xb0>)
 801421e:	6013      	str	r3, [r2, #0]
}
 8014220:	bf00      	nop
 8014222:	371c      	adds	r7, #28
 8014224:	46bd      	mov	sp, r7
 8014226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422a:	4770      	bx	lr
 801422c:	2000118c 	.word	0x2000118c
 8014230:	20001178 	.word	0x20001178
 8014234:	2000116c 	.word	0x2000116c
 8014238:	20001068 	.word	0x20001068
 801423c:	20001064 	.word	0x20001064

08014240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b084      	sub	sp, #16
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d109      	bne.n	8014264 <vTaskPlaceOnEventList+0x24>
 8014250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014254:	f383 8811 	msr	BASEPRI, r3
 8014258:	f3bf 8f6f 	isb	sy
 801425c:	f3bf 8f4f 	dsb	sy
 8014260:	60fb      	str	r3, [r7, #12]
 8014262:	e7fe      	b.n	8014262 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014264:	4b07      	ldr	r3, [pc, #28]	; (8014284 <vTaskPlaceOnEventList+0x44>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	3318      	adds	r3, #24
 801426a:	4619      	mov	r1, r3
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7fe fe29 	bl	8012ec4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014272:	2101      	movs	r1, #1
 8014274:	6838      	ldr	r0, [r7, #0]
 8014276:	f000 fc43 	bl	8014b00 <prvAddCurrentTaskToDelayedList>
}
 801427a:	bf00      	nop
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop
 8014284:	20001064 	.word	0x20001064

08014288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b086      	sub	sp, #24
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	68db      	ldr	r3, [r3, #12]
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d109      	bne.n	80142b2 <xTaskRemoveFromEventList+0x2a>
 801429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a2:	f383 8811 	msr	BASEPRI, r3
 80142a6:	f3bf 8f6f 	isb	sy
 80142aa:	f3bf 8f4f 	dsb	sy
 80142ae:	60fb      	str	r3, [r7, #12]
 80142b0:	e7fe      	b.n	80142b0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	3318      	adds	r3, #24
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7fe fe3d 	bl	8012f36 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142bc:	4b1d      	ldr	r3, [pc, #116]	; (8014334 <xTaskRemoveFromEventList+0xac>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d11c      	bne.n	80142fe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	3304      	adds	r3, #4
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fe fe34 	bl	8012f36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142d2:	2201      	movs	r2, #1
 80142d4:	409a      	lsls	r2, r3
 80142d6:	4b18      	ldr	r3, [pc, #96]	; (8014338 <xTaskRemoveFromEventList+0xb0>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	4313      	orrs	r3, r2
 80142dc:	4a16      	ldr	r2, [pc, #88]	; (8014338 <xTaskRemoveFromEventList+0xb0>)
 80142de:	6013      	str	r3, [r2, #0]
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142e4:	4613      	mov	r3, r2
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	4413      	add	r3, r2
 80142ea:	009b      	lsls	r3, r3, #2
 80142ec:	4a13      	ldr	r2, [pc, #76]	; (801433c <xTaskRemoveFromEventList+0xb4>)
 80142ee:	441a      	add	r2, r3
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	3304      	adds	r3, #4
 80142f4:	4619      	mov	r1, r3
 80142f6:	4610      	mov	r0, r2
 80142f8:	f7fe fdc0 	bl	8012e7c <vListInsertEnd>
 80142fc:	e005      	b.n	801430a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80142fe:	693b      	ldr	r3, [r7, #16]
 8014300:	3318      	adds	r3, #24
 8014302:	4619      	mov	r1, r3
 8014304:	480e      	ldr	r0, [pc, #56]	; (8014340 <xTaskRemoveFromEventList+0xb8>)
 8014306:	f7fe fdb9 	bl	8012e7c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801430e:	4b0d      	ldr	r3, [pc, #52]	; (8014344 <xTaskRemoveFromEventList+0xbc>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014314:	429a      	cmp	r2, r3
 8014316:	d905      	bls.n	8014324 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014318:	2301      	movs	r3, #1
 801431a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801431c:	4b0a      	ldr	r3, [pc, #40]	; (8014348 <xTaskRemoveFromEventList+0xc0>)
 801431e:	2201      	movs	r2, #1
 8014320:	601a      	str	r2, [r3, #0]
 8014322:	e001      	b.n	8014328 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8014324:	2300      	movs	r3, #0
 8014326:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014328:	697b      	ldr	r3, [r7, #20]
}
 801432a:	4618      	mov	r0, r3
 801432c:	3718      	adds	r7, #24
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	2000118c 	.word	0x2000118c
 8014338:	2000116c 	.word	0x2000116c
 801433c:	20001068 	.word	0x20001068
 8014340:	20001124 	.word	0x20001124
 8014344:	20001064 	.word	0x20001064
 8014348:	20001178 	.word	0x20001178

0801434c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014354:	4b06      	ldr	r3, [pc, #24]	; (8014370 <vTaskInternalSetTimeOutState+0x24>)
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801435c:	4b05      	ldr	r3, [pc, #20]	; (8014374 <vTaskInternalSetTimeOutState+0x28>)
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	605a      	str	r2, [r3, #4]
}
 8014364:	bf00      	nop
 8014366:	370c      	adds	r7, #12
 8014368:	46bd      	mov	sp, r7
 801436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436e:	4770      	bx	lr
 8014370:	2000117c 	.word	0x2000117c
 8014374:	20001168 	.word	0x20001168

08014378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b088      	sub	sp, #32
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d109      	bne.n	801439c <xTaskCheckForTimeOut+0x24>
 8014388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801438c:	f383 8811 	msr	BASEPRI, r3
 8014390:	f3bf 8f6f 	isb	sy
 8014394:	f3bf 8f4f 	dsb	sy
 8014398:	613b      	str	r3, [r7, #16]
 801439a:	e7fe      	b.n	801439a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d109      	bne.n	80143b6 <xTaskCheckForTimeOut+0x3e>
 80143a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143a6:	f383 8811 	msr	BASEPRI, r3
 80143aa:	f3bf 8f6f 	isb	sy
 80143ae:	f3bf 8f4f 	dsb	sy
 80143b2:	60fb      	str	r3, [r7, #12]
 80143b4:	e7fe      	b.n	80143b4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80143b6:	f000 fd31 	bl	8014e1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80143ba:	4b1d      	ldr	r3, [pc, #116]	; (8014430 <xTaskCheckForTimeOut+0xb8>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	69ba      	ldr	r2, [r7, #24]
 80143c6:	1ad3      	subs	r3, r2, r3
 80143c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d2:	d102      	bne.n	80143da <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80143d4:	2300      	movs	r3, #0
 80143d6:	61fb      	str	r3, [r7, #28]
 80143d8:	e023      	b.n	8014422 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	4b15      	ldr	r3, [pc, #84]	; (8014434 <xTaskCheckForTimeOut+0xbc>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d007      	beq.n	80143f6 <xTaskCheckForTimeOut+0x7e>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	69ba      	ldr	r2, [r7, #24]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d302      	bcc.n	80143f6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80143f0:	2301      	movs	r3, #1
 80143f2:	61fb      	str	r3, [r7, #28]
 80143f4:	e015      	b.n	8014422 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	697a      	ldr	r2, [r7, #20]
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d20b      	bcs.n	8014418 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	681a      	ldr	r2, [r3, #0]
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	1ad2      	subs	r2, r2, r3
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7ff ff9d 	bl	801434c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014412:	2300      	movs	r3, #0
 8014414:	61fb      	str	r3, [r7, #28]
 8014416:	e004      	b.n	8014422 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	2200      	movs	r2, #0
 801441c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801441e:	2301      	movs	r3, #1
 8014420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014422:	f000 fd29 	bl	8014e78 <vPortExitCritical>

	return xReturn;
 8014426:	69fb      	ldr	r3, [r7, #28]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3720      	adds	r7, #32
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	20001168 	.word	0x20001168
 8014434:	2000117c 	.word	0x2000117c

08014438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014438:	b480      	push	{r7}
 801443a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801443c:	4b03      	ldr	r3, [pc, #12]	; (801444c <vTaskMissedYield+0x14>)
 801443e:	2201      	movs	r2, #1
 8014440:	601a      	str	r2, [r3, #0]
}
 8014442:	bf00      	nop
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	20001178 	.word	0x20001178

08014450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014458:	f000 f852 	bl	8014500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801445c:	4b06      	ldr	r3, [pc, #24]	; (8014478 <prvIdleTask+0x28>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b01      	cmp	r3, #1
 8014462:	d9f9      	bls.n	8014458 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014464:	4b05      	ldr	r3, [pc, #20]	; (801447c <prvIdleTask+0x2c>)
 8014466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801446a:	601a      	str	r2, [r3, #0]
 801446c:	f3bf 8f4f 	dsb	sy
 8014470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014474:	e7f0      	b.n	8014458 <prvIdleTask+0x8>
 8014476:	bf00      	nop
 8014478:	20001068 	.word	0x20001068
 801447c:	e000ed04 	.word	0xe000ed04

08014480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b082      	sub	sp, #8
 8014484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014486:	2300      	movs	r3, #0
 8014488:	607b      	str	r3, [r7, #4]
 801448a:	e00c      	b.n	80144a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	4613      	mov	r3, r2
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	4413      	add	r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	4a12      	ldr	r2, [pc, #72]	; (80144e0 <prvInitialiseTaskLists+0x60>)
 8014498:	4413      	add	r3, r2
 801449a:	4618      	mov	r0, r3
 801449c:	f7fe fcc1 	bl	8012e22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	3301      	adds	r3, #1
 80144a4:	607b      	str	r3, [r7, #4]
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2b06      	cmp	r3, #6
 80144aa:	d9ef      	bls.n	801448c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80144ac:	480d      	ldr	r0, [pc, #52]	; (80144e4 <prvInitialiseTaskLists+0x64>)
 80144ae:	f7fe fcb8 	bl	8012e22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80144b2:	480d      	ldr	r0, [pc, #52]	; (80144e8 <prvInitialiseTaskLists+0x68>)
 80144b4:	f7fe fcb5 	bl	8012e22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80144b8:	480c      	ldr	r0, [pc, #48]	; (80144ec <prvInitialiseTaskLists+0x6c>)
 80144ba:	f7fe fcb2 	bl	8012e22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80144be:	480c      	ldr	r0, [pc, #48]	; (80144f0 <prvInitialiseTaskLists+0x70>)
 80144c0:	f7fe fcaf 	bl	8012e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80144c4:	480b      	ldr	r0, [pc, #44]	; (80144f4 <prvInitialiseTaskLists+0x74>)
 80144c6:	f7fe fcac 	bl	8012e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80144ca:	4b0b      	ldr	r3, [pc, #44]	; (80144f8 <prvInitialiseTaskLists+0x78>)
 80144cc:	4a05      	ldr	r2, [pc, #20]	; (80144e4 <prvInitialiseTaskLists+0x64>)
 80144ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80144d0:	4b0a      	ldr	r3, [pc, #40]	; (80144fc <prvInitialiseTaskLists+0x7c>)
 80144d2:	4a05      	ldr	r2, [pc, #20]	; (80144e8 <prvInitialiseTaskLists+0x68>)
 80144d4:	601a      	str	r2, [r3, #0]
}
 80144d6:	bf00      	nop
 80144d8:	3708      	adds	r7, #8
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}
 80144de:	bf00      	nop
 80144e0:	20001068 	.word	0x20001068
 80144e4:	200010f4 	.word	0x200010f4
 80144e8:	20001108 	.word	0x20001108
 80144ec:	20001124 	.word	0x20001124
 80144f0:	20001138 	.word	0x20001138
 80144f4:	20001150 	.word	0x20001150
 80144f8:	2000111c 	.word	0x2000111c
 80144fc:	20001120 	.word	0x20001120

08014500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014506:	e019      	b.n	801453c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014508:	f000 fc88 	bl	8014e1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801450c:	4b0f      	ldr	r3, [pc, #60]	; (801454c <prvCheckTasksWaitingTermination+0x4c>)
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	68db      	ldr	r3, [r3, #12]
 8014512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	3304      	adds	r3, #4
 8014518:	4618      	mov	r0, r3
 801451a:	f7fe fd0c 	bl	8012f36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801451e:	4b0c      	ldr	r3, [pc, #48]	; (8014550 <prvCheckTasksWaitingTermination+0x50>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	3b01      	subs	r3, #1
 8014524:	4a0a      	ldr	r2, [pc, #40]	; (8014550 <prvCheckTasksWaitingTermination+0x50>)
 8014526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014528:	4b0a      	ldr	r3, [pc, #40]	; (8014554 <prvCheckTasksWaitingTermination+0x54>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	3b01      	subs	r3, #1
 801452e:	4a09      	ldr	r2, [pc, #36]	; (8014554 <prvCheckTasksWaitingTermination+0x54>)
 8014530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014532:	f000 fca1 	bl	8014e78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f000 f80e 	bl	8014558 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801453c:	4b05      	ldr	r3, [pc, #20]	; (8014554 <prvCheckTasksWaitingTermination+0x54>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d1e1      	bne.n	8014508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014544:	bf00      	nop
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	20001138 	.word	0x20001138
 8014550:	20001164 	.word	0x20001164
 8014554:	2000114c 	.word	0x2000114c

08014558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014566:	2b00      	cmp	r3, #0
 8014568:	d108      	bne.n	801457c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801456e:	4618      	mov	r0, r3
 8014570:	f000 fe30 	bl	80151d4 <vPortFree>
				vPortFree( pxTCB );
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 fe2d 	bl	80151d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801457a:	e017      	b.n	80145ac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014582:	2b01      	cmp	r3, #1
 8014584:	d103      	bne.n	801458e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f000 fe24 	bl	80151d4 <vPortFree>
	}
 801458c:	e00e      	b.n	80145ac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014594:	2b02      	cmp	r3, #2
 8014596:	d009      	beq.n	80145ac <prvDeleteTCB+0x54>
 8014598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801459c:	f383 8811 	msr	BASEPRI, r3
 80145a0:	f3bf 8f6f 	isb	sy
 80145a4:	f3bf 8f4f 	dsb	sy
 80145a8:	60fb      	str	r3, [r7, #12]
 80145aa:	e7fe      	b.n	80145aa <prvDeleteTCB+0x52>
	}
 80145ac:	bf00      	nop
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80145b4:	b480      	push	{r7}
 80145b6:	b083      	sub	sp, #12
 80145b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145ba:	4b0c      	ldr	r3, [pc, #48]	; (80145ec <prvResetNextTaskUnblockTime+0x38>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d104      	bne.n	80145ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80145c4:	4b0a      	ldr	r3, [pc, #40]	; (80145f0 <prvResetNextTaskUnblockTime+0x3c>)
 80145c6:	f04f 32ff 	mov.w	r2, #4294967295
 80145ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80145cc:	e008      	b.n	80145e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145ce:	4b07      	ldr	r3, [pc, #28]	; (80145ec <prvResetNextTaskUnblockTime+0x38>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	68db      	ldr	r3, [r3, #12]
 80145d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	4a04      	ldr	r2, [pc, #16]	; (80145f0 <prvResetNextTaskUnblockTime+0x3c>)
 80145de:	6013      	str	r3, [r2, #0]
}
 80145e0:	bf00      	nop
 80145e2:	370c      	adds	r7, #12
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr
 80145ec:	2000111c 	.word	0x2000111c
 80145f0:	20001184 	.word	0x20001184

080145f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80145fa:	4b0b      	ldr	r3, [pc, #44]	; (8014628 <xTaskGetSchedulerState+0x34>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d102      	bne.n	8014608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014602:	2301      	movs	r3, #1
 8014604:	607b      	str	r3, [r7, #4]
 8014606:	e008      	b.n	801461a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014608:	4b08      	ldr	r3, [pc, #32]	; (801462c <xTaskGetSchedulerState+0x38>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d102      	bne.n	8014616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014610:	2302      	movs	r3, #2
 8014612:	607b      	str	r3, [r7, #4]
 8014614:	e001      	b.n	801461a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014616:	2300      	movs	r3, #0
 8014618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801461a:	687b      	ldr	r3, [r7, #4]
	}
 801461c:	4618      	mov	r0, r3
 801461e:	370c      	adds	r7, #12
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr
 8014628:	20001170 	.word	0x20001170
 801462c:	2000118c 	.word	0x2000118c

08014630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014630:	b580      	push	{r7, lr}
 8014632:	b086      	sub	sp, #24
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801463c:	2300      	movs	r3, #0
 801463e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d06c      	beq.n	8014720 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014646:	4b39      	ldr	r3, [pc, #228]	; (801472c <xTaskPriorityDisinherit+0xfc>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	693a      	ldr	r2, [r7, #16]
 801464c:	429a      	cmp	r2, r3
 801464e:	d009      	beq.n	8014664 <xTaskPriorityDisinherit+0x34>
 8014650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014654:	f383 8811 	msr	BASEPRI, r3
 8014658:	f3bf 8f6f 	isb	sy
 801465c:	f3bf 8f4f 	dsb	sy
 8014660:	60fb      	str	r3, [r7, #12]
 8014662:	e7fe      	b.n	8014662 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014668:	2b00      	cmp	r3, #0
 801466a:	d109      	bne.n	8014680 <xTaskPriorityDisinherit+0x50>
 801466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014670:	f383 8811 	msr	BASEPRI, r3
 8014674:	f3bf 8f6f 	isb	sy
 8014678:	f3bf 8f4f 	dsb	sy
 801467c:	60bb      	str	r3, [r7, #8]
 801467e:	e7fe      	b.n	801467e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014684:	1e5a      	subs	r2, r3, #1
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014692:	429a      	cmp	r2, r3
 8014694:	d044      	beq.n	8014720 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801469a:	2b00      	cmp	r3, #0
 801469c:	d140      	bne.n	8014720 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801469e:	693b      	ldr	r3, [r7, #16]
 80146a0:	3304      	adds	r3, #4
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fe fc47 	bl	8012f36 <uxListRemove>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d115      	bne.n	80146da <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80146ae:	693b      	ldr	r3, [r7, #16]
 80146b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146b2:	491f      	ldr	r1, [pc, #124]	; (8014730 <xTaskPriorityDisinherit+0x100>)
 80146b4:	4613      	mov	r3, r2
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	4413      	add	r3, r2
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	440b      	add	r3, r1
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d10a      	bne.n	80146da <xTaskPriorityDisinherit+0xaa>
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146c8:	2201      	movs	r2, #1
 80146ca:	fa02 f303 	lsl.w	r3, r2, r3
 80146ce:	43da      	mvns	r2, r3
 80146d0:	4b18      	ldr	r3, [pc, #96]	; (8014734 <xTaskPriorityDisinherit+0x104>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	4013      	ands	r3, r2
 80146d6:	4a17      	ldr	r2, [pc, #92]	; (8014734 <xTaskPriorityDisinherit+0x104>)
 80146d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e6:	f1c3 0207 	rsb	r2, r3, #7
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146f2:	2201      	movs	r2, #1
 80146f4:	409a      	lsls	r2, r3
 80146f6:	4b0f      	ldr	r3, [pc, #60]	; (8014734 <xTaskPriorityDisinherit+0x104>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4313      	orrs	r3, r2
 80146fc:	4a0d      	ldr	r2, [pc, #52]	; (8014734 <xTaskPriorityDisinherit+0x104>)
 80146fe:	6013      	str	r3, [r2, #0]
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014704:	4613      	mov	r3, r2
 8014706:	009b      	lsls	r3, r3, #2
 8014708:	4413      	add	r3, r2
 801470a:	009b      	lsls	r3, r3, #2
 801470c:	4a08      	ldr	r2, [pc, #32]	; (8014730 <xTaskPriorityDisinherit+0x100>)
 801470e:	441a      	add	r2, r3
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	3304      	adds	r3, #4
 8014714:	4619      	mov	r1, r3
 8014716:	4610      	mov	r0, r2
 8014718:	f7fe fbb0 	bl	8012e7c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801471c:	2301      	movs	r3, #1
 801471e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014720:	697b      	ldr	r3, [r7, #20]
	}
 8014722:	4618      	mov	r0, r3
 8014724:	3718      	adds	r7, #24
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	20001064 	.word	0x20001064
 8014730:	20001068 	.word	0x20001068
 8014734:	2000116c 	.word	0x2000116c

08014738 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014738:	b580      	push	{r7, lr}
 801473a:	b086      	sub	sp, #24
 801473c:	af00      	add	r7, sp, #0
 801473e:	60f8      	str	r0, [r7, #12]
 8014740:	60b9      	str	r1, [r7, #8]
 8014742:	607a      	str	r2, [r7, #4]
 8014744:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014746:	f000 fb69 	bl	8014e1c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801474a:	4b26      	ldr	r3, [pc, #152]	; (80147e4 <xTaskNotifyWait+0xac>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014752:	b2db      	uxtb	r3, r3
 8014754:	2b02      	cmp	r3, #2
 8014756:	d01a      	beq.n	801478e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014758:	4b22      	ldr	r3, [pc, #136]	; (80147e4 <xTaskNotifyWait+0xac>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801475e:	68fa      	ldr	r2, [r7, #12]
 8014760:	43d2      	mvns	r2, r2
 8014762:	400a      	ands	r2, r1
 8014764:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014766:	4b1f      	ldr	r3, [pc, #124]	; (80147e4 <xTaskNotifyWait+0xac>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2201      	movs	r2, #1
 801476c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d00b      	beq.n	801478e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014776:	2101      	movs	r1, #1
 8014778:	6838      	ldr	r0, [r7, #0]
 801477a:	f000 f9c1 	bl	8014b00 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801477e:	4b1a      	ldr	r3, [pc, #104]	; (80147e8 <xTaskNotifyWait+0xb0>)
 8014780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014784:	601a      	str	r2, [r3, #0]
 8014786:	f3bf 8f4f 	dsb	sy
 801478a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801478e:	f000 fb73 	bl	8014e78 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014792:	f000 fb43 	bl	8014e1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d004      	beq.n	80147a6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801479c:	4b11      	ldr	r3, [pc, #68]	; (80147e4 <xTaskNotifyWait+0xac>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80147a6:	4b0f      	ldr	r3, [pc, #60]	; (80147e4 <xTaskNotifyWait+0xac>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	2b02      	cmp	r3, #2
 80147b2:	d002      	beq.n	80147ba <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80147b4:	2300      	movs	r3, #0
 80147b6:	617b      	str	r3, [r7, #20]
 80147b8:	e008      	b.n	80147cc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80147ba:	4b0a      	ldr	r3, [pc, #40]	; (80147e4 <xTaskNotifyWait+0xac>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	43d2      	mvns	r2, r2
 80147c4:	400a      	ands	r2, r1
 80147c6:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80147c8:	2301      	movs	r3, #1
 80147ca:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80147cc:	4b05      	ldr	r3, [pc, #20]	; (80147e4 <xTaskNotifyWait+0xac>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	2200      	movs	r2, #0
 80147d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80147d6:	f000 fb4f 	bl	8014e78 <vPortExitCritical>

		return xReturn;
 80147da:	697b      	ldr	r3, [r7, #20]
	}
 80147dc:	4618      	mov	r0, r3
 80147de:	3718      	adds	r7, #24
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}
 80147e4:	20001064 	.word	0x20001064
 80147e8:	e000ed04 	.word	0xe000ed04

080147ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b08a      	sub	sp, #40	; 0x28
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	603b      	str	r3, [r7, #0]
 80147f8:	4613      	mov	r3, r2
 80147fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80147fc:	2301      	movs	r3, #1
 80147fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d109      	bne.n	801481a <xTaskGenericNotify+0x2e>
 8014806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801480a:	f383 8811 	msr	BASEPRI, r3
 801480e:	f3bf 8f6f 	isb	sy
 8014812:	f3bf 8f4f 	dsb	sy
 8014816:	61bb      	str	r3, [r7, #24]
 8014818:	e7fe      	b.n	8014818 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801481e:	f000 fafd 	bl	8014e1c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d003      	beq.n	8014830 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014828:	6a3b      	ldr	r3, [r7, #32]
 801482a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014830:	6a3b      	ldr	r3, [r7, #32]
 8014832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014836:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014838:	6a3b      	ldr	r3, [r7, #32]
 801483a:	2202      	movs	r2, #2
 801483c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014840:	79fb      	ldrb	r3, [r7, #7]
 8014842:	2b04      	cmp	r3, #4
 8014844:	d827      	bhi.n	8014896 <xTaskGenericNotify+0xaa>
 8014846:	a201      	add	r2, pc, #4	; (adr r2, 801484c <xTaskGenericNotify+0x60>)
 8014848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801484c:	080148b5 	.word	0x080148b5
 8014850:	08014861 	.word	0x08014861
 8014854:	0801486f 	.word	0x0801486f
 8014858:	0801487b 	.word	0x0801487b
 801485c:	08014883 	.word	0x08014883
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014860:	6a3b      	ldr	r3, [r7, #32]
 8014862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	431a      	orrs	r2, r3
 8014868:	6a3b      	ldr	r3, [r7, #32]
 801486a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801486c:	e025      	b.n	80148ba <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801486e:	6a3b      	ldr	r3, [r7, #32]
 8014870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014872:	1c5a      	adds	r2, r3, #1
 8014874:	6a3b      	ldr	r3, [r7, #32]
 8014876:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014878:	e01f      	b.n	80148ba <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801487a:	6a3b      	ldr	r3, [r7, #32]
 801487c:	68ba      	ldr	r2, [r7, #8]
 801487e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014880:	e01b      	b.n	80148ba <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014882:	7ffb      	ldrb	r3, [r7, #31]
 8014884:	2b02      	cmp	r3, #2
 8014886:	d003      	beq.n	8014890 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014888:	6a3b      	ldr	r3, [r7, #32]
 801488a:	68ba      	ldr	r2, [r7, #8]
 801488c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801488e:	e014      	b.n	80148ba <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8014890:	2300      	movs	r3, #0
 8014892:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014894:	e011      	b.n	80148ba <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014896:	6a3b      	ldr	r3, [r7, #32]
 8014898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801489e:	d00b      	beq.n	80148b8 <xTaskGenericNotify+0xcc>
 80148a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a4:	f383 8811 	msr	BASEPRI, r3
 80148a8:	f3bf 8f6f 	isb	sy
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	617b      	str	r3, [r7, #20]
 80148b2:	e7fe      	b.n	80148b2 <xTaskGenericNotify+0xc6>
					break;
 80148b4:	bf00      	nop
 80148b6:	e000      	b.n	80148ba <xTaskGenericNotify+0xce>

					break;
 80148b8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80148ba:	7ffb      	ldrb	r3, [r7, #31]
 80148bc:	2b01      	cmp	r3, #1
 80148be:	d138      	bne.n	8014932 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148c0:	6a3b      	ldr	r3, [r7, #32]
 80148c2:	3304      	adds	r3, #4
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fe fb36 	bl	8012f36 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80148ca:	6a3b      	ldr	r3, [r7, #32]
 80148cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ce:	2201      	movs	r2, #1
 80148d0:	409a      	lsls	r2, r3
 80148d2:	4b1b      	ldr	r3, [pc, #108]	; (8014940 <xTaskGenericNotify+0x154>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	4313      	orrs	r3, r2
 80148d8:	4a19      	ldr	r2, [pc, #100]	; (8014940 <xTaskGenericNotify+0x154>)
 80148da:	6013      	str	r3, [r2, #0]
 80148dc:	6a3b      	ldr	r3, [r7, #32]
 80148de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148e0:	4613      	mov	r3, r2
 80148e2:	009b      	lsls	r3, r3, #2
 80148e4:	4413      	add	r3, r2
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	4a16      	ldr	r2, [pc, #88]	; (8014944 <xTaskGenericNotify+0x158>)
 80148ea:	441a      	add	r2, r3
 80148ec:	6a3b      	ldr	r3, [r7, #32]
 80148ee:	3304      	adds	r3, #4
 80148f0:	4619      	mov	r1, r3
 80148f2:	4610      	mov	r0, r2
 80148f4:	f7fe fac2 	bl	8012e7c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80148f8:	6a3b      	ldr	r3, [r7, #32]
 80148fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d009      	beq.n	8014914 <xTaskGenericNotify+0x128>
 8014900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014904:	f383 8811 	msr	BASEPRI, r3
 8014908:	f3bf 8f6f 	isb	sy
 801490c:	f3bf 8f4f 	dsb	sy
 8014910:	613b      	str	r3, [r7, #16]
 8014912:	e7fe      	b.n	8014912 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014914:	6a3b      	ldr	r3, [r7, #32]
 8014916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014918:	4b0b      	ldr	r3, [pc, #44]	; (8014948 <xTaskGenericNotify+0x15c>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801491e:	429a      	cmp	r2, r3
 8014920:	d907      	bls.n	8014932 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014922:	4b0a      	ldr	r3, [pc, #40]	; (801494c <xTaskGenericNotify+0x160>)
 8014924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014928:	601a      	str	r2, [r3, #0]
 801492a:	f3bf 8f4f 	dsb	sy
 801492e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014932:	f000 faa1 	bl	8014e78 <vPortExitCritical>

		return xReturn;
 8014936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014938:	4618      	mov	r0, r3
 801493a:	3728      	adds	r7, #40	; 0x28
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}
 8014940:	2000116c 	.word	0x2000116c
 8014944:	20001068 	.word	0x20001068
 8014948:	20001064 	.word	0x20001064
 801494c:	e000ed04 	.word	0xe000ed04

08014950 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014950:	b580      	push	{r7, lr}
 8014952:	b08e      	sub	sp, #56	; 0x38
 8014954:	af00      	add	r7, sp, #0
 8014956:	60f8      	str	r0, [r7, #12]
 8014958:	60b9      	str	r1, [r7, #8]
 801495a:	603b      	str	r3, [r7, #0]
 801495c:	4613      	mov	r3, r2
 801495e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014960:	2301      	movs	r3, #1
 8014962:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d109      	bne.n	801497e <xTaskGenericNotifyFromISR+0x2e>
 801496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801496e:	f383 8811 	msr	BASEPRI, r3
 8014972:	f3bf 8f6f 	isb	sy
 8014976:	f3bf 8f4f 	dsb	sy
 801497a:	627b      	str	r3, [r7, #36]	; 0x24
 801497c:	e7fe      	b.n	801497c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801497e:	f000 fb29 	bl	8014fd4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014986:	f3ef 8211 	mrs	r2, BASEPRI
 801498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801498e:	f383 8811 	msr	BASEPRI, r3
 8014992:	f3bf 8f6f 	isb	sy
 8014996:	f3bf 8f4f 	dsb	sy
 801499a:	623a      	str	r2, [r7, #32]
 801499c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801499e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80149a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d003      	beq.n	80149b0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80149a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80149b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80149b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80149ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149bc:	2202      	movs	r2, #2
 80149be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80149c2:	79fb      	ldrb	r3, [r7, #7]
 80149c4:	2b04      	cmp	r3, #4
 80149c6:	d829      	bhi.n	8014a1c <xTaskGenericNotifyFromISR+0xcc>
 80149c8:	a201      	add	r2, pc, #4	; (adr r2, 80149d0 <xTaskGenericNotifyFromISR+0x80>)
 80149ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ce:	bf00      	nop
 80149d0:	08014a3b 	.word	0x08014a3b
 80149d4:	080149e5 	.word	0x080149e5
 80149d8:	080149f3 	.word	0x080149f3
 80149dc:	080149ff 	.word	0x080149ff
 80149e0:	08014a07 	.word	0x08014a07
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80149e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	431a      	orrs	r2, r3
 80149ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80149f0:	e026      	b.n	8014a40 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80149f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149f6:	1c5a      	adds	r2, r3, #1
 80149f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80149fc:	e020      	b.n	8014a40 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80149fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a00:	68ba      	ldr	r2, [r7, #8]
 8014a02:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014a04:	e01c      	b.n	8014a40 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014a06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a0a:	2b02      	cmp	r3, #2
 8014a0c:	d003      	beq.n	8014a16 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a10:	68ba      	ldr	r2, [r7, #8]
 8014a12:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014a14:	e014      	b.n	8014a40 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8014a16:	2300      	movs	r3, #0
 8014a18:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014a1a:	e011      	b.n	8014a40 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a24:	d00b      	beq.n	8014a3e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8014a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a2a:	f383 8811 	msr	BASEPRI, r3
 8014a2e:	f3bf 8f6f 	isb	sy
 8014a32:	f3bf 8f4f 	dsb	sy
 8014a36:	61bb      	str	r3, [r7, #24]
 8014a38:	e7fe      	b.n	8014a38 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8014a3a:	bf00      	nop
 8014a3c:	e000      	b.n	8014a40 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8014a3e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014a40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	d144      	bne.n	8014ad2 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d009      	beq.n	8014a64 <xTaskGenericNotifyFromISR+0x114>
 8014a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a54:	f383 8811 	msr	BASEPRI, r3
 8014a58:	f3bf 8f6f 	isb	sy
 8014a5c:	f3bf 8f4f 	dsb	sy
 8014a60:	617b      	str	r3, [r7, #20]
 8014a62:	e7fe      	b.n	8014a62 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a64:	4b20      	ldr	r3, [pc, #128]	; (8014ae8 <xTaskGenericNotifyFromISR+0x198>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d11c      	bne.n	8014aa6 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6e:	3304      	adds	r3, #4
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fe fa60 	bl	8012f36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	409a      	lsls	r2, r3
 8014a7e:	4b1b      	ldr	r3, [pc, #108]	; (8014aec <xTaskGenericNotifyFromISR+0x19c>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	4313      	orrs	r3, r2
 8014a84:	4a19      	ldr	r2, [pc, #100]	; (8014aec <xTaskGenericNotifyFromISR+0x19c>)
 8014a86:	6013      	str	r3, [r2, #0]
 8014a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	009b      	lsls	r3, r3, #2
 8014a90:	4413      	add	r3, r2
 8014a92:	009b      	lsls	r3, r3, #2
 8014a94:	4a16      	ldr	r2, [pc, #88]	; (8014af0 <xTaskGenericNotifyFromISR+0x1a0>)
 8014a96:	441a      	add	r2, r3
 8014a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a9a:	3304      	adds	r3, #4
 8014a9c:	4619      	mov	r1, r3
 8014a9e:	4610      	mov	r0, r2
 8014aa0:	f7fe f9ec 	bl	8012e7c <vListInsertEnd>
 8014aa4:	e005      	b.n	8014ab2 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa8:	3318      	adds	r3, #24
 8014aaa:	4619      	mov	r1, r3
 8014aac:	4811      	ldr	r0, [pc, #68]	; (8014af4 <xTaskGenericNotifyFromISR+0x1a4>)
 8014aae:	f7fe f9e5 	bl	8012e7c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ab6:	4b10      	ldr	r3, [pc, #64]	; (8014af8 <xTaskGenericNotifyFromISR+0x1a8>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d908      	bls.n	8014ad2 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d002      	beq.n	8014acc <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ac8:	2201      	movs	r2, #1
 8014aca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014acc:	4b0b      	ldr	r3, [pc, #44]	; (8014afc <xTaskGenericNotifyFromISR+0x1ac>)
 8014ace:	2201      	movs	r2, #1
 8014ad0:	601a      	str	r2, [r3, #0]
 8014ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3738      	adds	r7, #56	; 0x38
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	2000118c 	.word	0x2000118c
 8014aec:	2000116c 	.word	0x2000116c
 8014af0:	20001068 	.word	0x20001068
 8014af4:	20001124 	.word	0x20001124
 8014af8:	20001064 	.word	0x20001064
 8014afc:	20001178 	.word	0x20001178

08014b00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014b0a:	4b29      	ldr	r3, [pc, #164]	; (8014bb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b10:	4b28      	ldr	r3, [pc, #160]	; (8014bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	3304      	adds	r3, #4
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7fe fa0d 	bl	8012f36 <uxListRemove>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d10b      	bne.n	8014b3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014b22:	4b24      	ldr	r3, [pc, #144]	; (8014bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b28:	2201      	movs	r2, #1
 8014b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8014b2e:	43da      	mvns	r2, r3
 8014b30:	4b21      	ldr	r3, [pc, #132]	; (8014bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	4013      	ands	r3, r2
 8014b36:	4a20      	ldr	r2, [pc, #128]	; (8014bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014b38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b40:	d10a      	bne.n	8014b58 <prvAddCurrentTaskToDelayedList+0x58>
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d007      	beq.n	8014b58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b48:	4b1a      	ldr	r3, [pc, #104]	; (8014bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	3304      	adds	r3, #4
 8014b4e:	4619      	mov	r1, r3
 8014b50:	481a      	ldr	r0, [pc, #104]	; (8014bbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8014b52:	f7fe f993 	bl	8012e7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014b56:	e026      	b.n	8014ba6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014b58:	68fa      	ldr	r2, [r7, #12]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014b60:	4b14      	ldr	r3, [pc, #80]	; (8014bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	68ba      	ldr	r2, [r7, #8]
 8014b66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014b68:	68ba      	ldr	r2, [r7, #8]
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d209      	bcs.n	8014b84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b70:	4b13      	ldr	r3, [pc, #76]	; (8014bc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014b72:	681a      	ldr	r2, [r3, #0]
 8014b74:	4b0f      	ldr	r3, [pc, #60]	; (8014bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	3304      	adds	r3, #4
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	4610      	mov	r0, r2
 8014b7e:	f7fe f9a1 	bl	8012ec4 <vListInsert>
}
 8014b82:	e010      	b.n	8014ba6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b84:	4b0f      	ldr	r3, [pc, #60]	; (8014bc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	4b0a      	ldr	r3, [pc, #40]	; (8014bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	3304      	adds	r3, #4
 8014b8e:	4619      	mov	r1, r3
 8014b90:	4610      	mov	r0, r2
 8014b92:	f7fe f997 	bl	8012ec4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014b96:	4b0c      	ldr	r3, [pc, #48]	; (8014bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	68ba      	ldr	r2, [r7, #8]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d202      	bcs.n	8014ba6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014ba0:	4a09      	ldr	r2, [pc, #36]	; (8014bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	6013      	str	r3, [r2, #0]
}
 8014ba6:	bf00      	nop
 8014ba8:	3710      	adds	r7, #16
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	20001168 	.word	0x20001168
 8014bb4:	20001064 	.word	0x20001064
 8014bb8:	2000116c 	.word	0x2000116c
 8014bbc:	20001150 	.word	0x20001150
 8014bc0:	20001120 	.word	0x20001120
 8014bc4:	2000111c 	.word	0x2000111c
 8014bc8:	20001184 	.word	0x20001184

08014bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014bcc:	b480      	push	{r7}
 8014bce:	b085      	sub	sp, #20
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	60f8      	str	r0, [r7, #12]
 8014bd4:	60b9      	str	r1, [r7, #8]
 8014bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	3b04      	subs	r3, #4
 8014bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	3b04      	subs	r3, #4
 8014bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	f023 0201 	bic.w	r2, r3, #1
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	3b04      	subs	r3, #4
 8014bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014bfc:	4a0c      	ldr	r2, [pc, #48]	; (8014c30 <pxPortInitialiseStack+0x64>)
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	3b14      	subs	r3, #20
 8014c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014c08:	687a      	ldr	r2, [r7, #4]
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	3b04      	subs	r3, #4
 8014c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	f06f 0202 	mvn.w	r2, #2
 8014c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	3b20      	subs	r3, #32
 8014c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014c22:	68fb      	ldr	r3, [r7, #12]
}
 8014c24:	4618      	mov	r0, r3
 8014c26:	3714      	adds	r7, #20
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2e:	4770      	bx	lr
 8014c30:	08014c35 	.word	0x08014c35

08014c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014c34:	b480      	push	{r7}
 8014c36:	b085      	sub	sp, #20
 8014c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014c3e:	4b11      	ldr	r3, [pc, #68]	; (8014c84 <prvTaskExitError+0x50>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c46:	d009      	beq.n	8014c5c <prvTaskExitError+0x28>
	__asm volatile
 8014c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c4c:	f383 8811 	msr	BASEPRI, r3
 8014c50:	f3bf 8f6f 	isb	sy
 8014c54:	f3bf 8f4f 	dsb	sy
 8014c58:	60fb      	str	r3, [r7, #12]
 8014c5a:	e7fe      	b.n	8014c5a <prvTaskExitError+0x26>
 8014c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c60:	f383 8811 	msr	BASEPRI, r3
 8014c64:	f3bf 8f6f 	isb	sy
 8014c68:	f3bf 8f4f 	dsb	sy
 8014c6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014c6e:	bf00      	nop
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d0fc      	beq.n	8014c70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014c76:	bf00      	nop
 8014c78:	3714      	adds	r7, #20
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c80:	4770      	bx	lr
 8014c82:	bf00      	nop
 8014c84:	200009a4 	.word	0x200009a4
	...

08014c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014c90:	4b07      	ldr	r3, [pc, #28]	; (8014cb0 <pxCurrentTCBConst2>)
 8014c92:	6819      	ldr	r1, [r3, #0]
 8014c94:	6808      	ldr	r0, [r1, #0]
 8014c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c9a:	f380 8809 	msr	PSP, r0
 8014c9e:	f3bf 8f6f 	isb	sy
 8014ca2:	f04f 0000 	mov.w	r0, #0
 8014ca6:	f380 8811 	msr	BASEPRI, r0
 8014caa:	4770      	bx	lr
 8014cac:	f3af 8000 	nop.w

08014cb0 <pxCurrentTCBConst2>:
 8014cb0:	20001064 	.word	0x20001064
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014cb4:	bf00      	nop
 8014cb6:	bf00      	nop

08014cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014cb8:	4808      	ldr	r0, [pc, #32]	; (8014cdc <prvPortStartFirstTask+0x24>)
 8014cba:	6800      	ldr	r0, [r0, #0]
 8014cbc:	6800      	ldr	r0, [r0, #0]
 8014cbe:	f380 8808 	msr	MSP, r0
 8014cc2:	f04f 0000 	mov.w	r0, #0
 8014cc6:	f380 8814 	msr	CONTROL, r0
 8014cca:	b662      	cpsie	i
 8014ccc:	b661      	cpsie	f
 8014cce:	f3bf 8f4f 	dsb	sy
 8014cd2:	f3bf 8f6f 	isb	sy
 8014cd6:	df00      	svc	0
 8014cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014cda:	bf00      	nop
 8014cdc:	e000ed08 	.word	0xe000ed08

08014ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b086      	sub	sp, #24
 8014ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014ce6:	4b44      	ldr	r3, [pc, #272]	; (8014df8 <xPortStartScheduler+0x118>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	4a44      	ldr	r2, [pc, #272]	; (8014dfc <xPortStartScheduler+0x11c>)
 8014cec:	4293      	cmp	r3, r2
 8014cee:	d109      	bne.n	8014d04 <xPortStartScheduler+0x24>
 8014cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf4:	f383 8811 	msr	BASEPRI, r3
 8014cf8:	f3bf 8f6f 	isb	sy
 8014cfc:	f3bf 8f4f 	dsb	sy
 8014d00:	613b      	str	r3, [r7, #16]
 8014d02:	e7fe      	b.n	8014d02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014d04:	4b3c      	ldr	r3, [pc, #240]	; (8014df8 <xPortStartScheduler+0x118>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	4a3d      	ldr	r2, [pc, #244]	; (8014e00 <xPortStartScheduler+0x120>)
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	d109      	bne.n	8014d22 <xPortStartScheduler+0x42>
 8014d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d12:	f383 8811 	msr	BASEPRI, r3
 8014d16:	f3bf 8f6f 	isb	sy
 8014d1a:	f3bf 8f4f 	dsb	sy
 8014d1e:	60fb      	str	r3, [r7, #12]
 8014d20:	e7fe      	b.n	8014d20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014d22:	4b38      	ldr	r3, [pc, #224]	; (8014e04 <xPortStartScheduler+0x124>)
 8014d24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	22ff      	movs	r2, #255	; 0xff
 8014d32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	781b      	ldrb	r3, [r3, #0]
 8014d38:	b2db      	uxtb	r3, r3
 8014d3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014d3c:	78fb      	ldrb	r3, [r7, #3]
 8014d3e:	b2db      	uxtb	r3, r3
 8014d40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014d44:	b2da      	uxtb	r2, r3
 8014d46:	4b30      	ldr	r3, [pc, #192]	; (8014e08 <xPortStartScheduler+0x128>)
 8014d48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014d4a:	4b30      	ldr	r3, [pc, #192]	; (8014e0c <xPortStartScheduler+0x12c>)
 8014d4c:	2207      	movs	r2, #7
 8014d4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d50:	e009      	b.n	8014d66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014d52:	4b2e      	ldr	r3, [pc, #184]	; (8014e0c <xPortStartScheduler+0x12c>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	3b01      	subs	r3, #1
 8014d58:	4a2c      	ldr	r2, [pc, #176]	; (8014e0c <xPortStartScheduler+0x12c>)
 8014d5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014d5c:	78fb      	ldrb	r3, [r7, #3]
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	005b      	lsls	r3, r3, #1
 8014d62:	b2db      	uxtb	r3, r3
 8014d64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d66:	78fb      	ldrb	r3, [r7, #3]
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d6e:	2b80      	cmp	r3, #128	; 0x80
 8014d70:	d0ef      	beq.n	8014d52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014d72:	4b26      	ldr	r3, [pc, #152]	; (8014e0c <xPortStartScheduler+0x12c>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	f1c3 0307 	rsb	r3, r3, #7
 8014d7a:	2b04      	cmp	r3, #4
 8014d7c:	d009      	beq.n	8014d92 <xPortStartScheduler+0xb2>
 8014d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d82:	f383 8811 	msr	BASEPRI, r3
 8014d86:	f3bf 8f6f 	isb	sy
 8014d8a:	f3bf 8f4f 	dsb	sy
 8014d8e:	60bb      	str	r3, [r7, #8]
 8014d90:	e7fe      	b.n	8014d90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014d92:	4b1e      	ldr	r3, [pc, #120]	; (8014e0c <xPortStartScheduler+0x12c>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	021b      	lsls	r3, r3, #8
 8014d98:	4a1c      	ldr	r2, [pc, #112]	; (8014e0c <xPortStartScheduler+0x12c>)
 8014d9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014d9c:	4b1b      	ldr	r3, [pc, #108]	; (8014e0c <xPortStartScheduler+0x12c>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014da4:	4a19      	ldr	r2, [pc, #100]	; (8014e0c <xPortStartScheduler+0x12c>)
 8014da6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	b2da      	uxtb	r2, r3
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014db0:	4b17      	ldr	r3, [pc, #92]	; (8014e10 <xPortStartScheduler+0x130>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	4a16      	ldr	r2, [pc, #88]	; (8014e10 <xPortStartScheduler+0x130>)
 8014db6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014dba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014dbc:	4b14      	ldr	r3, [pc, #80]	; (8014e10 <xPortStartScheduler+0x130>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	4a13      	ldr	r2, [pc, #76]	; (8014e10 <xPortStartScheduler+0x130>)
 8014dc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014dc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014dc8:	f000 f8d6 	bl	8014f78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014dcc:	4b11      	ldr	r3, [pc, #68]	; (8014e14 <xPortStartScheduler+0x134>)
 8014dce:	2200      	movs	r2, #0
 8014dd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014dd2:	f000 f8f5 	bl	8014fc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014dd6:	4b10      	ldr	r3, [pc, #64]	; (8014e18 <xPortStartScheduler+0x138>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	4a0f      	ldr	r2, [pc, #60]	; (8014e18 <xPortStartScheduler+0x138>)
 8014ddc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014de0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014de2:	f7ff ff69 	bl	8014cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014de6:	f7ff f9d1 	bl	801418c <vTaskSwitchContext>
	prvTaskExitError();
 8014dea:	f7ff ff23 	bl	8014c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014dee:	2300      	movs	r3, #0
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3718      	adds	r7, #24
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}
 8014df8:	e000ed00 	.word	0xe000ed00
 8014dfc:	410fc271 	.word	0x410fc271
 8014e00:	410fc270 	.word	0x410fc270
 8014e04:	e000e400 	.word	0xe000e400
 8014e08:	20001190 	.word	0x20001190
 8014e0c:	20001194 	.word	0x20001194
 8014e10:	e000ed20 	.word	0xe000ed20
 8014e14:	200009a4 	.word	0x200009a4
 8014e18:	e000ef34 	.word	0xe000ef34

08014e1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	b083      	sub	sp, #12
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e26:	f383 8811 	msr	BASEPRI, r3
 8014e2a:	f3bf 8f6f 	isb	sy
 8014e2e:	f3bf 8f4f 	dsb	sy
 8014e32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014e34:	4b0e      	ldr	r3, [pc, #56]	; (8014e70 <vPortEnterCritical+0x54>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	3301      	adds	r3, #1
 8014e3a:	4a0d      	ldr	r2, [pc, #52]	; (8014e70 <vPortEnterCritical+0x54>)
 8014e3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014e3e:	4b0c      	ldr	r3, [pc, #48]	; (8014e70 <vPortEnterCritical+0x54>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	2b01      	cmp	r3, #1
 8014e44:	d10e      	bne.n	8014e64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014e46:	4b0b      	ldr	r3, [pc, #44]	; (8014e74 <vPortEnterCritical+0x58>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	b2db      	uxtb	r3, r3
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d009      	beq.n	8014e64 <vPortEnterCritical+0x48>
 8014e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e54:	f383 8811 	msr	BASEPRI, r3
 8014e58:	f3bf 8f6f 	isb	sy
 8014e5c:	f3bf 8f4f 	dsb	sy
 8014e60:	603b      	str	r3, [r7, #0]
 8014e62:	e7fe      	b.n	8014e62 <vPortEnterCritical+0x46>
	}
}
 8014e64:	bf00      	nop
 8014e66:	370c      	adds	r7, #12
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr
 8014e70:	200009a4 	.word	0x200009a4
 8014e74:	e000ed04 	.word	0xe000ed04

08014e78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014e78:	b480      	push	{r7}
 8014e7a:	b083      	sub	sp, #12
 8014e7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014e7e:	4b11      	ldr	r3, [pc, #68]	; (8014ec4 <vPortExitCritical+0x4c>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d109      	bne.n	8014e9a <vPortExitCritical+0x22>
 8014e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e8a:	f383 8811 	msr	BASEPRI, r3
 8014e8e:	f3bf 8f6f 	isb	sy
 8014e92:	f3bf 8f4f 	dsb	sy
 8014e96:	607b      	str	r3, [r7, #4]
 8014e98:	e7fe      	b.n	8014e98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014e9a:	4b0a      	ldr	r3, [pc, #40]	; (8014ec4 <vPortExitCritical+0x4c>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	3b01      	subs	r3, #1
 8014ea0:	4a08      	ldr	r2, [pc, #32]	; (8014ec4 <vPortExitCritical+0x4c>)
 8014ea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014ea4:	4b07      	ldr	r3, [pc, #28]	; (8014ec4 <vPortExitCritical+0x4c>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d104      	bne.n	8014eb6 <vPortExitCritical+0x3e>
 8014eac:	2300      	movs	r3, #0
 8014eae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014eb6:	bf00      	nop
 8014eb8:	370c      	adds	r7, #12
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec0:	4770      	bx	lr
 8014ec2:	bf00      	nop
 8014ec4:	200009a4 	.word	0x200009a4
	...

08014ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014ed0:	f3ef 8009 	mrs	r0, PSP
 8014ed4:	f3bf 8f6f 	isb	sy
 8014ed8:	4b15      	ldr	r3, [pc, #84]	; (8014f30 <pxCurrentTCBConst>)
 8014eda:	681a      	ldr	r2, [r3, #0]
 8014edc:	f01e 0f10 	tst.w	lr, #16
 8014ee0:	bf08      	it	eq
 8014ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eea:	6010      	str	r0, [r2, #0]
 8014eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014ef4:	f380 8811 	msr	BASEPRI, r0
 8014ef8:	f3bf 8f4f 	dsb	sy
 8014efc:	f3bf 8f6f 	isb	sy
 8014f00:	f7ff f944 	bl	801418c <vTaskSwitchContext>
 8014f04:	f04f 0000 	mov.w	r0, #0
 8014f08:	f380 8811 	msr	BASEPRI, r0
 8014f0c:	bc09      	pop	{r0, r3}
 8014f0e:	6819      	ldr	r1, [r3, #0]
 8014f10:	6808      	ldr	r0, [r1, #0]
 8014f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f16:	f01e 0f10 	tst.w	lr, #16
 8014f1a:	bf08      	it	eq
 8014f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014f20:	f380 8809 	msr	PSP, r0
 8014f24:	f3bf 8f6f 	isb	sy
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop
 8014f2c:	f3af 8000 	nop.w

08014f30 <pxCurrentTCBConst>:
 8014f30:	20001064 	.word	0x20001064
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014f34:	bf00      	nop
 8014f36:	bf00      	nop

08014f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b082      	sub	sp, #8
 8014f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8014f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f42:	f383 8811 	msr	BASEPRI, r3
 8014f46:	f3bf 8f6f 	isb	sy
 8014f4a:	f3bf 8f4f 	dsb	sy
 8014f4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014f50:	f7ff f864 	bl	801401c <xTaskIncrementTick>
 8014f54:	4603      	mov	r3, r0
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d003      	beq.n	8014f62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014f5a:	4b06      	ldr	r3, [pc, #24]	; (8014f74 <SysTick_Handler+0x3c>)
 8014f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f60:	601a      	str	r2, [r3, #0]
 8014f62:	2300      	movs	r3, #0
 8014f64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014f6c:	bf00      	nop
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	e000ed04 	.word	0xe000ed04

08014f78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014f78:	b480      	push	{r7}
 8014f7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014f7c:	4b0b      	ldr	r3, [pc, #44]	; (8014fac <vPortSetupTimerInterrupt+0x34>)
 8014f7e:	2200      	movs	r2, #0
 8014f80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014f82:	4b0b      	ldr	r3, [pc, #44]	; (8014fb0 <vPortSetupTimerInterrupt+0x38>)
 8014f84:	2200      	movs	r2, #0
 8014f86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014f88:	4b0a      	ldr	r3, [pc, #40]	; (8014fb4 <vPortSetupTimerInterrupt+0x3c>)
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	4a0a      	ldr	r2, [pc, #40]	; (8014fb8 <vPortSetupTimerInterrupt+0x40>)
 8014f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8014f92:	099b      	lsrs	r3, r3, #6
 8014f94:	4a09      	ldr	r2, [pc, #36]	; (8014fbc <vPortSetupTimerInterrupt+0x44>)
 8014f96:	3b01      	subs	r3, #1
 8014f98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014f9a:	4b04      	ldr	r3, [pc, #16]	; (8014fac <vPortSetupTimerInterrupt+0x34>)
 8014f9c:	2207      	movs	r2, #7
 8014f9e:	601a      	str	r2, [r3, #0]
}
 8014fa0:	bf00      	nop
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	e000e010 	.word	0xe000e010
 8014fb0:	e000e018 	.word	0xe000e018
 8014fb4:	20000888 	.word	0x20000888
 8014fb8:	10624dd3 	.word	0x10624dd3
 8014fbc:	e000e014 	.word	0xe000e014

08014fc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014fc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014fd0 <vPortEnableVFP+0x10>
 8014fc4:	6801      	ldr	r1, [r0, #0]
 8014fc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014fca:	6001      	str	r1, [r0, #0]
 8014fcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014fce:	bf00      	nop
 8014fd0:	e000ed88 	.word	0xe000ed88

08014fd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b085      	sub	sp, #20
 8014fd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014fda:	f3ef 8305 	mrs	r3, IPSR
 8014fde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	2b0f      	cmp	r3, #15
 8014fe4:	d913      	bls.n	801500e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014fe6:	4a16      	ldr	r2, [pc, #88]	; (8015040 <vPortValidateInterruptPriority+0x6c>)
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	4413      	add	r3, r2
 8014fec:	781b      	ldrb	r3, [r3, #0]
 8014fee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014ff0:	4b14      	ldr	r3, [pc, #80]	; (8015044 <vPortValidateInterruptPriority+0x70>)
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	7afa      	ldrb	r2, [r7, #11]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d209      	bcs.n	801500e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ffe:	f383 8811 	msr	BASEPRI, r3
 8015002:	f3bf 8f6f 	isb	sy
 8015006:	f3bf 8f4f 	dsb	sy
 801500a:	607b      	str	r3, [r7, #4]
 801500c:	e7fe      	b.n	801500c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801500e:	4b0e      	ldr	r3, [pc, #56]	; (8015048 <vPortValidateInterruptPriority+0x74>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015016:	4b0d      	ldr	r3, [pc, #52]	; (801504c <vPortValidateInterruptPriority+0x78>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	429a      	cmp	r2, r3
 801501c:	d909      	bls.n	8015032 <vPortValidateInterruptPriority+0x5e>
 801501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015022:	f383 8811 	msr	BASEPRI, r3
 8015026:	f3bf 8f6f 	isb	sy
 801502a:	f3bf 8f4f 	dsb	sy
 801502e:	603b      	str	r3, [r7, #0]
 8015030:	e7fe      	b.n	8015030 <vPortValidateInterruptPriority+0x5c>
	}
 8015032:	bf00      	nop
 8015034:	3714      	adds	r7, #20
 8015036:	46bd      	mov	sp, r7
 8015038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503c:	4770      	bx	lr
 801503e:	bf00      	nop
 8015040:	e000e3f0 	.word	0xe000e3f0
 8015044:	20001190 	.word	0x20001190
 8015048:	e000ed0c 	.word	0xe000ed0c
 801504c:	20001194 	.word	0x20001194

08015050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b08a      	sub	sp, #40	; 0x28
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015058:	2300      	movs	r3, #0
 801505a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801505c:	f7fe ff34 	bl	8013ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015060:	4b57      	ldr	r3, [pc, #348]	; (80151c0 <pvPortMalloc+0x170>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d101      	bne.n	801506c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015068:	f000 f90c 	bl	8015284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801506c:	4b55      	ldr	r3, [pc, #340]	; (80151c4 <pvPortMalloc+0x174>)
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	4013      	ands	r3, r2
 8015074:	2b00      	cmp	r3, #0
 8015076:	f040 808c 	bne.w	8015192 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d01c      	beq.n	80150ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8015080:	2208      	movs	r2, #8
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	4413      	add	r3, r2
 8015086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f003 0307 	and.w	r3, r3, #7
 801508e:	2b00      	cmp	r3, #0
 8015090:	d013      	beq.n	80150ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	f023 0307 	bic.w	r3, r3, #7
 8015098:	3308      	adds	r3, #8
 801509a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f003 0307 	and.w	r3, r3, #7
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d009      	beq.n	80150ba <pvPortMalloc+0x6a>
 80150a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150aa:	f383 8811 	msr	BASEPRI, r3
 80150ae:	f3bf 8f6f 	isb	sy
 80150b2:	f3bf 8f4f 	dsb	sy
 80150b6:	617b      	str	r3, [r7, #20]
 80150b8:	e7fe      	b.n	80150b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d068      	beq.n	8015192 <pvPortMalloc+0x142>
 80150c0:	4b41      	ldr	r3, [pc, #260]	; (80151c8 <pvPortMalloc+0x178>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d863      	bhi.n	8015192 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80150ca:	4b40      	ldr	r3, [pc, #256]	; (80151cc <pvPortMalloc+0x17c>)
 80150cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80150ce:	4b3f      	ldr	r3, [pc, #252]	; (80151cc <pvPortMalloc+0x17c>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80150d4:	e004      	b.n	80150e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80150d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80150da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80150e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e2:	685b      	ldr	r3, [r3, #4]
 80150e4:	687a      	ldr	r2, [r7, #4]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d903      	bls.n	80150f2 <pvPortMalloc+0xa2>
 80150ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d1f1      	bne.n	80150d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80150f2:	4b33      	ldr	r3, [pc, #204]	; (80151c0 <pvPortMalloc+0x170>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d04a      	beq.n	8015192 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80150fc:	6a3b      	ldr	r3, [r7, #32]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2208      	movs	r2, #8
 8015102:	4413      	add	r3, r2
 8015104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015108:	681a      	ldr	r2, [r3, #0]
 801510a:	6a3b      	ldr	r3, [r7, #32]
 801510c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015110:	685a      	ldr	r2, [r3, #4]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	1ad2      	subs	r2, r2, r3
 8015116:	2308      	movs	r3, #8
 8015118:	005b      	lsls	r3, r3, #1
 801511a:	429a      	cmp	r2, r3
 801511c:	d91e      	bls.n	801515c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801511e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	4413      	add	r3, r2
 8015124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015126:	69bb      	ldr	r3, [r7, #24]
 8015128:	f003 0307 	and.w	r3, r3, #7
 801512c:	2b00      	cmp	r3, #0
 801512e:	d009      	beq.n	8015144 <pvPortMalloc+0xf4>
 8015130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015134:	f383 8811 	msr	BASEPRI, r3
 8015138:	f3bf 8f6f 	isb	sy
 801513c:	f3bf 8f4f 	dsb	sy
 8015140:	613b      	str	r3, [r7, #16]
 8015142:	e7fe      	b.n	8015142 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015146:	685a      	ldr	r2, [r3, #4]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	1ad2      	subs	r2, r2, r3
 801514c:	69bb      	ldr	r3, [r7, #24]
 801514e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015156:	69b8      	ldr	r0, [r7, #24]
 8015158:	f000 f8f6 	bl	8015348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801515c:	4b1a      	ldr	r3, [pc, #104]	; (80151c8 <pvPortMalloc+0x178>)
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	1ad3      	subs	r3, r2, r3
 8015166:	4a18      	ldr	r2, [pc, #96]	; (80151c8 <pvPortMalloc+0x178>)
 8015168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801516a:	4b17      	ldr	r3, [pc, #92]	; (80151c8 <pvPortMalloc+0x178>)
 801516c:	681a      	ldr	r2, [r3, #0]
 801516e:	4b18      	ldr	r3, [pc, #96]	; (80151d0 <pvPortMalloc+0x180>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	429a      	cmp	r2, r3
 8015174:	d203      	bcs.n	801517e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015176:	4b14      	ldr	r3, [pc, #80]	; (80151c8 <pvPortMalloc+0x178>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	4a15      	ldr	r2, [pc, #84]	; (80151d0 <pvPortMalloc+0x180>)
 801517c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015180:	685a      	ldr	r2, [r3, #4]
 8015182:	4b10      	ldr	r3, [pc, #64]	; (80151c4 <pvPortMalloc+0x174>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	431a      	orrs	r2, r3
 8015188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518e:	2200      	movs	r2, #0
 8015190:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015192:	f7fe fea7 	bl	8013ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	f003 0307 	and.w	r3, r3, #7
 801519c:	2b00      	cmp	r3, #0
 801519e:	d009      	beq.n	80151b4 <pvPortMalloc+0x164>
 80151a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151a4:	f383 8811 	msr	BASEPRI, r3
 80151a8:	f3bf 8f6f 	isb	sy
 80151ac:	f3bf 8f4f 	dsb	sy
 80151b0:	60fb      	str	r3, [r7, #12]
 80151b2:	e7fe      	b.n	80151b2 <pvPortMalloc+0x162>
	return pvReturn;
 80151b4:	69fb      	ldr	r3, [r7, #28]
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3728      	adds	r7, #40	; 0x28
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}
 80151be:	bf00      	nop
 80151c0:	20004da0 	.word	0x20004da0
 80151c4:	20004dac 	.word	0x20004dac
 80151c8:	20004da4 	.word	0x20004da4
 80151cc:	20004d98 	.word	0x20004d98
 80151d0:	20004da8 	.word	0x20004da8

080151d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d046      	beq.n	8015274 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80151e6:	2308      	movs	r3, #8
 80151e8:	425b      	negs	r3, r3
 80151ea:	697a      	ldr	r2, [r7, #20]
 80151ec:	4413      	add	r3, r2
 80151ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	685a      	ldr	r2, [r3, #4]
 80151f8:	4b20      	ldr	r3, [pc, #128]	; (801527c <vPortFree+0xa8>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	4013      	ands	r3, r2
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d109      	bne.n	8015216 <vPortFree+0x42>
 8015202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015206:	f383 8811 	msr	BASEPRI, r3
 801520a:	f3bf 8f6f 	isb	sy
 801520e:	f3bf 8f4f 	dsb	sy
 8015212:	60fb      	str	r3, [r7, #12]
 8015214:	e7fe      	b.n	8015214 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d009      	beq.n	8015232 <vPortFree+0x5e>
 801521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015222:	f383 8811 	msr	BASEPRI, r3
 8015226:	f3bf 8f6f 	isb	sy
 801522a:	f3bf 8f4f 	dsb	sy
 801522e:	60bb      	str	r3, [r7, #8]
 8015230:	e7fe      	b.n	8015230 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	685a      	ldr	r2, [r3, #4]
 8015236:	4b11      	ldr	r3, [pc, #68]	; (801527c <vPortFree+0xa8>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4013      	ands	r3, r2
 801523c:	2b00      	cmp	r3, #0
 801523e:	d019      	beq.n	8015274 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d115      	bne.n	8015274 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	685a      	ldr	r2, [r3, #4]
 801524c:	4b0b      	ldr	r3, [pc, #44]	; (801527c <vPortFree+0xa8>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	43db      	mvns	r3, r3
 8015252:	401a      	ands	r2, r3
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015258:	f7fe fe36 	bl	8013ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	685a      	ldr	r2, [r3, #4]
 8015260:	4b07      	ldr	r3, [pc, #28]	; (8015280 <vPortFree+0xac>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	4413      	add	r3, r2
 8015266:	4a06      	ldr	r2, [pc, #24]	; (8015280 <vPortFree+0xac>)
 8015268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801526a:	6938      	ldr	r0, [r7, #16]
 801526c:	f000 f86c 	bl	8015348 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015270:	f7fe fe38 	bl	8013ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015274:	bf00      	nop
 8015276:	3718      	adds	r7, #24
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	20004dac 	.word	0x20004dac
 8015280:	20004da4 	.word	0x20004da4

08015284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015284:	b480      	push	{r7}
 8015286:	b085      	sub	sp, #20
 8015288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801528a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801528e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015290:	4b27      	ldr	r3, [pc, #156]	; (8015330 <prvHeapInit+0xac>)
 8015292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	f003 0307 	and.w	r3, r3, #7
 801529a:	2b00      	cmp	r3, #0
 801529c:	d00c      	beq.n	80152b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	3307      	adds	r3, #7
 80152a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f023 0307 	bic.w	r3, r3, #7
 80152aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80152ac:	68ba      	ldr	r2, [r7, #8]
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	1ad3      	subs	r3, r2, r3
 80152b2:	4a1f      	ldr	r2, [pc, #124]	; (8015330 <prvHeapInit+0xac>)
 80152b4:	4413      	add	r3, r2
 80152b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80152bc:	4a1d      	ldr	r2, [pc, #116]	; (8015334 <prvHeapInit+0xb0>)
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80152c2:	4b1c      	ldr	r3, [pc, #112]	; (8015334 <prvHeapInit+0xb0>)
 80152c4:	2200      	movs	r2, #0
 80152c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	68ba      	ldr	r2, [r7, #8]
 80152cc:	4413      	add	r3, r2
 80152ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80152d0:	2208      	movs	r2, #8
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	1a9b      	subs	r3, r3, r2
 80152d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f023 0307 	bic.w	r3, r3, #7
 80152de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	4a15      	ldr	r2, [pc, #84]	; (8015338 <prvHeapInit+0xb4>)
 80152e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80152e6:	4b14      	ldr	r3, [pc, #80]	; (8015338 <prvHeapInit+0xb4>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	2200      	movs	r2, #0
 80152ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80152ee:	4b12      	ldr	r3, [pc, #72]	; (8015338 <prvHeapInit+0xb4>)
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	2200      	movs	r2, #0
 80152f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	68fa      	ldr	r2, [r7, #12]
 80152fe:	1ad2      	subs	r2, r2, r3
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015304:	4b0c      	ldr	r3, [pc, #48]	; (8015338 <prvHeapInit+0xb4>)
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	4a0a      	ldr	r2, [pc, #40]	; (801533c <prvHeapInit+0xb8>)
 8015312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	4a09      	ldr	r2, [pc, #36]	; (8015340 <prvHeapInit+0xbc>)
 801531a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801531c:	4b09      	ldr	r3, [pc, #36]	; (8015344 <prvHeapInit+0xc0>)
 801531e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015322:	601a      	str	r2, [r3, #0]
}
 8015324:	bf00      	nop
 8015326:	3714      	adds	r7, #20
 8015328:	46bd      	mov	sp, r7
 801532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532e:	4770      	bx	lr
 8015330:	20001198 	.word	0x20001198
 8015334:	20004d98 	.word	0x20004d98
 8015338:	20004da0 	.word	0x20004da0
 801533c:	20004da8 	.word	0x20004da8
 8015340:	20004da4 	.word	0x20004da4
 8015344:	20004dac 	.word	0x20004dac

08015348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015348:	b480      	push	{r7}
 801534a:	b085      	sub	sp, #20
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015350:	4b28      	ldr	r3, [pc, #160]	; (80153f4 <prvInsertBlockIntoFreeList+0xac>)
 8015352:	60fb      	str	r3, [r7, #12]
 8015354:	e002      	b.n	801535c <prvInsertBlockIntoFreeList+0x14>
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	60fb      	str	r3, [r7, #12]
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	429a      	cmp	r2, r3
 8015364:	d8f7      	bhi.n	8015356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	68ba      	ldr	r2, [r7, #8]
 8015370:	4413      	add	r3, r2
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	429a      	cmp	r2, r3
 8015376:	d108      	bne.n	801538a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	685a      	ldr	r2, [r3, #4]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	685b      	ldr	r3, [r3, #4]
 8015380:	441a      	add	r2, r3
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	685b      	ldr	r3, [r3, #4]
 8015392:	68ba      	ldr	r2, [r7, #8]
 8015394:	441a      	add	r2, r3
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	429a      	cmp	r2, r3
 801539c:	d118      	bne.n	80153d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	681a      	ldr	r2, [r3, #0]
 80153a2:	4b15      	ldr	r3, [pc, #84]	; (80153f8 <prvInsertBlockIntoFreeList+0xb0>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d00d      	beq.n	80153c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	685a      	ldr	r2, [r3, #4]
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	685b      	ldr	r3, [r3, #4]
 80153b4:	441a      	add	r2, r3
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	681a      	ldr	r2, [r3, #0]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	601a      	str	r2, [r3, #0]
 80153c4:	e008      	b.n	80153d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80153c6:	4b0c      	ldr	r3, [pc, #48]	; (80153f8 <prvInsertBlockIntoFreeList+0xb0>)
 80153c8:	681a      	ldr	r2, [r3, #0]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	601a      	str	r2, [r3, #0]
 80153ce:	e003      	b.n	80153d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80153d8:	68fa      	ldr	r2, [r7, #12]
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	429a      	cmp	r2, r3
 80153de:	d002      	beq.n	80153e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80153e6:	bf00      	nop
 80153e8:	3714      	adds	r7, #20
 80153ea:	46bd      	mov	sp, r7
 80153ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f0:	4770      	bx	lr
 80153f2:	bf00      	nop
 80153f4:	20004d98 	.word	0x20004d98
 80153f8:	20004da0 	.word	0x20004da0

080153fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015400:	2200      	movs	r2, #0
 8015402:	4912      	ldr	r1, [pc, #72]	; (801544c <MX_USB_DEVICE_Init+0x50>)
 8015404:	4812      	ldr	r0, [pc, #72]	; (8015450 <MX_USB_DEVICE_Init+0x54>)
 8015406:	f7fc f89d 	bl	8011544 <USBD_Init>
 801540a:	4603      	mov	r3, r0
 801540c:	2b00      	cmp	r3, #0
 801540e:	d001      	beq.n	8015414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015410:	f7ef fa14 	bl	800483c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015414:	490f      	ldr	r1, [pc, #60]	; (8015454 <MX_USB_DEVICE_Init+0x58>)
 8015416:	480e      	ldr	r0, [pc, #56]	; (8015450 <MX_USB_DEVICE_Init+0x54>)
 8015418:	f7fc f8ca 	bl	80115b0 <USBD_RegisterClass>
 801541c:	4603      	mov	r3, r0
 801541e:	2b00      	cmp	r3, #0
 8015420:	d001      	beq.n	8015426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015422:	f7ef fa0b 	bl	800483c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015426:	490c      	ldr	r1, [pc, #48]	; (8015458 <MX_USB_DEVICE_Init+0x5c>)
 8015428:	4809      	ldr	r0, [pc, #36]	; (8015450 <MX_USB_DEVICE_Init+0x54>)
 801542a:	f7fb ffef 	bl	801140c <USBD_CDC_RegisterInterface>
 801542e:	4603      	mov	r3, r0
 8015430:	2b00      	cmp	r3, #0
 8015432:	d001      	beq.n	8015438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015434:	f7ef fa02 	bl	800483c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015438:	4805      	ldr	r0, [pc, #20]	; (8015450 <MX_USB_DEVICE_Init+0x54>)
 801543a:	f7fc f8da 	bl	80115f2 <USBD_Start>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d001      	beq.n	8015448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015444:	f7ef f9fa 	bl	800483c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015448:	bf00      	nop
 801544a:	bd80      	pop	{r7, pc}
 801544c:	200009bc 	.word	0x200009bc
 8015450:	2000bce4 	.word	0x2000bce4
 8015454:	200008a0 	.word	0x200008a0
 8015458:	200009a8 	.word	0x200009a8

0801545c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015460:	2200      	movs	r2, #0
 8015462:	4905      	ldr	r1, [pc, #20]	; (8015478 <CDC_Init_FS+0x1c>)
 8015464:	4805      	ldr	r0, [pc, #20]	; (801547c <CDC_Init_FS+0x20>)
 8015466:	f7fb ffe6 	bl	8011436 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801546a:	4905      	ldr	r1, [pc, #20]	; (8015480 <CDC_Init_FS+0x24>)
 801546c:	4803      	ldr	r0, [pc, #12]	; (801547c <CDC_Init_FS+0x20>)
 801546e:	f7fb fffb 	bl	8011468 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015474:	4618      	mov	r0, r3
 8015476:	bd80      	pop	{r7, pc}
 8015478:	2000c1b4 	.word	0x2000c1b4
 801547c:	2000bce4 	.word	0x2000bce4
 8015480:	2000bfb4 	.word	0x2000bfb4

08015484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015484:	b480      	push	{r7}
 8015486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801548a:	4618      	mov	r0, r3
 801548c:	46bd      	mov	sp, r7
 801548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015492:	4770      	bx	lr

08015494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015494:	b480      	push	{r7}
 8015496:	b083      	sub	sp, #12
 8015498:	af00      	add	r7, sp, #0
 801549a:	4603      	mov	r3, r0
 801549c:	6039      	str	r1, [r7, #0]
 801549e:	71fb      	strb	r3, [r7, #7]
 80154a0:	4613      	mov	r3, r2
 80154a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80154a4:	79fb      	ldrb	r3, [r7, #7]
 80154a6:	2b23      	cmp	r3, #35	; 0x23
 80154a8:	f200 808c 	bhi.w	80155c4 <CDC_Control_FS+0x130>
 80154ac:	a201      	add	r2, pc, #4	; (adr r2, 80154b4 <CDC_Control_FS+0x20>)
 80154ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154b2:	bf00      	nop
 80154b4:	080155c5 	.word	0x080155c5
 80154b8:	080155c5 	.word	0x080155c5
 80154bc:	080155c5 	.word	0x080155c5
 80154c0:	080155c5 	.word	0x080155c5
 80154c4:	080155c5 	.word	0x080155c5
 80154c8:	080155c5 	.word	0x080155c5
 80154cc:	080155c5 	.word	0x080155c5
 80154d0:	080155c5 	.word	0x080155c5
 80154d4:	080155c5 	.word	0x080155c5
 80154d8:	080155c5 	.word	0x080155c5
 80154dc:	080155c5 	.word	0x080155c5
 80154e0:	080155c5 	.word	0x080155c5
 80154e4:	080155c5 	.word	0x080155c5
 80154e8:	080155c5 	.word	0x080155c5
 80154ec:	080155c5 	.word	0x080155c5
 80154f0:	080155c5 	.word	0x080155c5
 80154f4:	080155c5 	.word	0x080155c5
 80154f8:	080155c5 	.word	0x080155c5
 80154fc:	080155c5 	.word	0x080155c5
 8015500:	080155c5 	.word	0x080155c5
 8015504:	080155c5 	.word	0x080155c5
 8015508:	080155c5 	.word	0x080155c5
 801550c:	080155c5 	.word	0x080155c5
 8015510:	080155c5 	.word	0x080155c5
 8015514:	080155c5 	.word	0x080155c5
 8015518:	080155c5 	.word	0x080155c5
 801551c:	080155c5 	.word	0x080155c5
 8015520:	080155c5 	.word	0x080155c5
 8015524:	080155c5 	.word	0x080155c5
 8015528:	080155c5 	.word	0x080155c5
 801552c:	080155c5 	.word	0x080155c5
 8015530:	080155c5 	.word	0x080155c5
 8015534:	08015545 	.word	0x08015545
 8015538:	0801557f 	.word	0x0801557f
 801553c:	080155c5 	.word	0x080155c5
 8015540:	080155c5 	.word	0x080155c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	781a      	ldrb	r2, [r3, #0]
 8015548:	4b22      	ldr	r3, [pc, #136]	; (80155d4 <CDC_Control_FS+0x140>)
 801554a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	785a      	ldrb	r2, [r3, #1]
 8015550:	4b20      	ldr	r3, [pc, #128]	; (80155d4 <CDC_Control_FS+0x140>)
 8015552:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	789a      	ldrb	r2, [r3, #2]
 8015558:	4b1e      	ldr	r3, [pc, #120]	; (80155d4 <CDC_Control_FS+0x140>)
 801555a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	78da      	ldrb	r2, [r3, #3]
 8015560:	4b1c      	ldr	r3, [pc, #112]	; (80155d4 <CDC_Control_FS+0x140>)
 8015562:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	791a      	ldrb	r2, [r3, #4]
 8015568:	4b1a      	ldr	r3, [pc, #104]	; (80155d4 <CDC_Control_FS+0x140>)
 801556a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	795a      	ldrb	r2, [r3, #5]
 8015570:	4b18      	ldr	r3, [pc, #96]	; (80155d4 <CDC_Control_FS+0x140>)
 8015572:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	799a      	ldrb	r2, [r3, #6]
 8015578:	4b16      	ldr	r3, [pc, #88]	; (80155d4 <CDC_Control_FS+0x140>)
 801557a:	719a      	strb	r2, [r3, #6]
    	break;
 801557c:	e023      	b.n	80155c6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801557e:	4b15      	ldr	r3, [pc, #84]	; (80155d4 <CDC_Control_FS+0x140>)
 8015580:	781a      	ldrb	r2, [r3, #0]
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	3301      	adds	r3, #1
 801558a:	4a12      	ldr	r2, [pc, #72]	; (80155d4 <CDC_Control_FS+0x140>)
 801558c:	7852      	ldrb	r2, [r2, #1]
 801558e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	3302      	adds	r3, #2
 8015594:	4a0f      	ldr	r2, [pc, #60]	; (80155d4 <CDC_Control_FS+0x140>)
 8015596:	7892      	ldrb	r2, [r2, #2]
 8015598:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	3303      	adds	r3, #3
 801559e:	4a0d      	ldr	r2, [pc, #52]	; (80155d4 <CDC_Control_FS+0x140>)
 80155a0:	78d2      	ldrb	r2, [r2, #3]
 80155a2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	3304      	adds	r3, #4
 80155a8:	4a0a      	ldr	r2, [pc, #40]	; (80155d4 <CDC_Control_FS+0x140>)
 80155aa:	7912      	ldrb	r2, [r2, #4]
 80155ac:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	3305      	adds	r3, #5
 80155b2:	4a08      	ldr	r2, [pc, #32]	; (80155d4 <CDC_Control_FS+0x140>)
 80155b4:	7952      	ldrb	r2, [r2, #5]
 80155b6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	3306      	adds	r3, #6
 80155bc:	4a05      	ldr	r2, [pc, #20]	; (80155d4 <CDC_Control_FS+0x140>)
 80155be:	7992      	ldrb	r2, [r2, #6]
 80155c0:	701a      	strb	r2, [r3, #0]
    break;
 80155c2:	e000      	b.n	80155c6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80155c4:	bf00      	nop
  }

  return (USBD_OK);
 80155c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	370c      	adds	r7, #12
 80155cc:	46bd      	mov	sp, r7
 80155ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d2:	4770      	bx	lr
 80155d4:	2000c3b4 	.word	0x2000c3b4

080155d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	b29b      	uxth	r3, r3
 80155e8:	461a      	mov	r2, r3
 80155ea:	6879      	ldr	r1, [r7, #4]
 80155ec:	4807      	ldr	r0, [pc, #28]	; (801560c <CDC_Receive_FS+0x34>)
 80155ee:	f7ef f99c 	bl	800492a <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80155f2:	6879      	ldr	r1, [r7, #4]
 80155f4:	4806      	ldr	r0, [pc, #24]	; (8015610 <CDC_Receive_FS+0x38>)
 80155f6:	f7fb ff37 	bl	8011468 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80155fa:	4805      	ldr	r0, [pc, #20]	; (8015610 <CDC_Receive_FS+0x38>)
 80155fc:	f7fb ff78 	bl	80114f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015600:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015602:	4618      	mov	r0, r3
 8015604:	3708      	adds	r7, #8
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}
 801560a:	bf00      	nop
 801560c:	20000064 	.word	0x20000064
 8015610:	2000bce4 	.word	0x2000bce4

08015614 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b084      	sub	sp, #16
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
 801561c:	460b      	mov	r3, r1
 801561e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015620:	2300      	movs	r3, #0
 8015622:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015624:	4b0d      	ldr	r3, [pc, #52]	; (801565c <CDC_Transmit_FS+0x48>)
 8015626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801562a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015632:	2b00      	cmp	r3, #0
 8015634:	d001      	beq.n	801563a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015636:	2301      	movs	r3, #1
 8015638:	e00b      	b.n	8015652 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801563a:	887b      	ldrh	r3, [r7, #2]
 801563c:	461a      	mov	r2, r3
 801563e:	6879      	ldr	r1, [r7, #4]
 8015640:	4806      	ldr	r0, [pc, #24]	; (801565c <CDC_Transmit_FS+0x48>)
 8015642:	f7fb fef8 	bl	8011436 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015646:	4805      	ldr	r0, [pc, #20]	; (801565c <CDC_Transmit_FS+0x48>)
 8015648:	f7fb ff22 	bl	8011490 <USBD_CDC_TransmitPacket>
 801564c:	4603      	mov	r3, r0
 801564e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015650:	7bfb      	ldrb	r3, [r7, #15]
}
 8015652:	4618      	mov	r0, r3
 8015654:	3710      	adds	r7, #16
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	2000bce4 	.word	0x2000bce4

08015660 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015660:	b480      	push	{r7}
 8015662:	b087      	sub	sp, #28
 8015664:	af00      	add	r7, sp, #0
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	60b9      	str	r1, [r7, #8]
 801566a:	4613      	mov	r3, r2
 801566c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801566e:	2300      	movs	r3, #0
 8015670:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015676:	4618      	mov	r0, r3
 8015678:	371c      	adds	r7, #28
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr
	...

08015684 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015684:	b480      	push	{r7}
 8015686:	b083      	sub	sp, #12
 8015688:	af00      	add	r7, sp, #0
 801568a:	4603      	mov	r3, r0
 801568c:	6039      	str	r1, [r7, #0]
 801568e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	2212      	movs	r2, #18
 8015694:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015696:	4b03      	ldr	r3, [pc, #12]	; (80156a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015698:	4618      	mov	r0, r3
 801569a:	370c      	adds	r7, #12
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr
 80156a4:	200009d8 	.word	0x200009d8

080156a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156a8:	b480      	push	{r7}
 80156aa:	b083      	sub	sp, #12
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	4603      	mov	r3, r0
 80156b0:	6039      	str	r1, [r7, #0]
 80156b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	2204      	movs	r2, #4
 80156b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80156ba:	4b03      	ldr	r3, [pc, #12]	; (80156c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80156bc:	4618      	mov	r0, r3
 80156be:	370c      	adds	r7, #12
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr
 80156c8:	200009ec 	.word	0x200009ec

080156cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	4603      	mov	r3, r0
 80156d4:	6039      	str	r1, [r7, #0]
 80156d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80156d8:	79fb      	ldrb	r3, [r7, #7]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d105      	bne.n	80156ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80156de:	683a      	ldr	r2, [r7, #0]
 80156e0:	4907      	ldr	r1, [pc, #28]	; (8015700 <USBD_FS_ProductStrDescriptor+0x34>)
 80156e2:	4808      	ldr	r0, [pc, #32]	; (8015704 <USBD_FS_ProductStrDescriptor+0x38>)
 80156e4:	f7fc ff53 	bl	801258e <USBD_GetString>
 80156e8:	e004      	b.n	80156f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80156ea:	683a      	ldr	r2, [r7, #0]
 80156ec:	4904      	ldr	r1, [pc, #16]	; (8015700 <USBD_FS_ProductStrDescriptor+0x34>)
 80156ee:	4805      	ldr	r0, [pc, #20]	; (8015704 <USBD_FS_ProductStrDescriptor+0x38>)
 80156f0:	f7fc ff4d 	bl	801258e <USBD_GetString>
  }
  return USBD_StrDesc;
 80156f4:	4b02      	ldr	r3, [pc, #8]	; (8015700 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3708      	adds	r7, #8
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
 80156fe:	bf00      	nop
 8015700:	2000c3bc 	.word	0x2000c3bc
 8015704:	0801b65c 	.word	0x0801b65c

08015708 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
 801570e:	4603      	mov	r3, r0
 8015710:	6039      	str	r1, [r7, #0]
 8015712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015714:	683a      	ldr	r2, [r7, #0]
 8015716:	4904      	ldr	r1, [pc, #16]	; (8015728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015718:	4804      	ldr	r0, [pc, #16]	; (801572c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801571a:	f7fc ff38 	bl	801258e <USBD_GetString>
  return USBD_StrDesc;
 801571e:	4b02      	ldr	r3, [pc, #8]	; (8015728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015720:	4618      	mov	r0, r3
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}
 8015728:	2000c3bc 	.word	0x2000c3bc
 801572c:	0801b674 	.word	0x0801b674

08015730 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	4603      	mov	r3, r0
 8015738:	6039      	str	r1, [r7, #0]
 801573a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	221a      	movs	r2, #26
 8015740:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015742:	f000 f843 	bl	80157cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015746:	4b02      	ldr	r3, [pc, #8]	; (8015750 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015748:	4618      	mov	r0, r3
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	200009f0 	.word	0x200009f0

08015754 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	4603      	mov	r3, r0
 801575c:	6039      	str	r1, [r7, #0]
 801575e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015760:	79fb      	ldrb	r3, [r7, #7]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d105      	bne.n	8015772 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	4907      	ldr	r1, [pc, #28]	; (8015788 <USBD_FS_ConfigStrDescriptor+0x34>)
 801576a:	4808      	ldr	r0, [pc, #32]	; (801578c <USBD_FS_ConfigStrDescriptor+0x38>)
 801576c:	f7fc ff0f 	bl	801258e <USBD_GetString>
 8015770:	e004      	b.n	801577c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015772:	683a      	ldr	r2, [r7, #0]
 8015774:	4904      	ldr	r1, [pc, #16]	; (8015788 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015776:	4805      	ldr	r0, [pc, #20]	; (801578c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015778:	f7fc ff09 	bl	801258e <USBD_GetString>
  }
  return USBD_StrDesc;
 801577c:	4b02      	ldr	r3, [pc, #8]	; (8015788 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801577e:	4618      	mov	r0, r3
 8015780:	3708      	adds	r7, #8
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	2000c3bc 	.word	0x2000c3bc
 801578c:	0801b688 	.word	0x0801b688

08015790 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	4603      	mov	r3, r0
 8015798:	6039      	str	r1, [r7, #0]
 801579a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801579c:	79fb      	ldrb	r3, [r7, #7]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d105      	bne.n	80157ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80157a2:	683a      	ldr	r2, [r7, #0]
 80157a4:	4907      	ldr	r1, [pc, #28]	; (80157c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80157a6:	4808      	ldr	r0, [pc, #32]	; (80157c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80157a8:	f7fc fef1 	bl	801258e <USBD_GetString>
 80157ac:	e004      	b.n	80157b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80157ae:	683a      	ldr	r2, [r7, #0]
 80157b0:	4904      	ldr	r1, [pc, #16]	; (80157c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80157b2:	4805      	ldr	r0, [pc, #20]	; (80157c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80157b4:	f7fc feeb 	bl	801258e <USBD_GetString>
  }
  return USBD_StrDesc;
 80157b8:	4b02      	ldr	r3, [pc, #8]	; (80157c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3708      	adds	r7, #8
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	2000c3bc 	.word	0x2000c3bc
 80157c8:	0801b694 	.word	0x0801b694

080157cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80157d2:	4b0f      	ldr	r3, [pc, #60]	; (8015810 <Get_SerialNum+0x44>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80157d8:	4b0e      	ldr	r3, [pc, #56]	; (8015814 <Get_SerialNum+0x48>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80157de:	4b0e      	ldr	r3, [pc, #56]	; (8015818 <Get_SerialNum+0x4c>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80157e4:	68fa      	ldr	r2, [r7, #12]
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	4413      	add	r3, r2
 80157ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d009      	beq.n	8015806 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80157f2:	2208      	movs	r2, #8
 80157f4:	4909      	ldr	r1, [pc, #36]	; (801581c <Get_SerialNum+0x50>)
 80157f6:	68f8      	ldr	r0, [r7, #12]
 80157f8:	f000 f814 	bl	8015824 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80157fc:	2204      	movs	r2, #4
 80157fe:	4908      	ldr	r1, [pc, #32]	; (8015820 <Get_SerialNum+0x54>)
 8015800:	68b8      	ldr	r0, [r7, #8]
 8015802:	f000 f80f 	bl	8015824 <IntToUnicode>
  }
}
 8015806:	bf00      	nop
 8015808:	3710      	adds	r7, #16
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	1fff7a10 	.word	0x1fff7a10
 8015814:	1fff7a14 	.word	0x1fff7a14
 8015818:	1fff7a18 	.word	0x1fff7a18
 801581c:	200009f2 	.word	0x200009f2
 8015820:	20000a02 	.word	0x20000a02

08015824 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015824:	b480      	push	{r7}
 8015826:	b087      	sub	sp, #28
 8015828:	af00      	add	r7, sp, #0
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	60b9      	str	r1, [r7, #8]
 801582e:	4613      	mov	r3, r2
 8015830:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015832:	2300      	movs	r3, #0
 8015834:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015836:	2300      	movs	r3, #0
 8015838:	75fb      	strb	r3, [r7, #23]
 801583a:	e027      	b.n	801588c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	0f1b      	lsrs	r3, r3, #28
 8015840:	2b09      	cmp	r3, #9
 8015842:	d80b      	bhi.n	801585c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	0f1b      	lsrs	r3, r3, #28
 8015848:	b2da      	uxtb	r2, r3
 801584a:	7dfb      	ldrb	r3, [r7, #23]
 801584c:	005b      	lsls	r3, r3, #1
 801584e:	4619      	mov	r1, r3
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	440b      	add	r3, r1
 8015854:	3230      	adds	r2, #48	; 0x30
 8015856:	b2d2      	uxtb	r2, r2
 8015858:	701a      	strb	r2, [r3, #0]
 801585a:	e00a      	b.n	8015872 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	0f1b      	lsrs	r3, r3, #28
 8015860:	b2da      	uxtb	r2, r3
 8015862:	7dfb      	ldrb	r3, [r7, #23]
 8015864:	005b      	lsls	r3, r3, #1
 8015866:	4619      	mov	r1, r3
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	440b      	add	r3, r1
 801586c:	3237      	adds	r2, #55	; 0x37
 801586e:	b2d2      	uxtb	r2, r2
 8015870:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	011b      	lsls	r3, r3, #4
 8015876:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015878:	7dfb      	ldrb	r3, [r7, #23]
 801587a:	005b      	lsls	r3, r3, #1
 801587c:	3301      	adds	r3, #1
 801587e:	68ba      	ldr	r2, [r7, #8]
 8015880:	4413      	add	r3, r2
 8015882:	2200      	movs	r2, #0
 8015884:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015886:	7dfb      	ldrb	r3, [r7, #23]
 8015888:	3301      	adds	r3, #1
 801588a:	75fb      	strb	r3, [r7, #23]
 801588c:	7dfa      	ldrb	r2, [r7, #23]
 801588e:	79fb      	ldrb	r3, [r7, #7]
 8015890:	429a      	cmp	r2, r3
 8015892:	d3d3      	bcc.n	801583c <IntToUnicode+0x18>
  }
}
 8015894:	bf00      	nop
 8015896:	371c      	adds	r7, #28
 8015898:	46bd      	mov	sp, r7
 801589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589e:	4770      	bx	lr

080158a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b08a      	sub	sp, #40	; 0x28
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80158a8:	f107 0314 	add.w	r3, r7, #20
 80158ac:	2200      	movs	r2, #0
 80158ae:	601a      	str	r2, [r3, #0]
 80158b0:	605a      	str	r2, [r3, #4]
 80158b2:	609a      	str	r2, [r3, #8]
 80158b4:	60da      	str	r2, [r3, #12]
 80158b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80158c0:	d13a      	bne.n	8015938 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80158c2:	2300      	movs	r3, #0
 80158c4:	613b      	str	r3, [r7, #16]
 80158c6:	4b1e      	ldr	r3, [pc, #120]	; (8015940 <HAL_PCD_MspInit+0xa0>)
 80158c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158ca:	4a1d      	ldr	r2, [pc, #116]	; (8015940 <HAL_PCD_MspInit+0xa0>)
 80158cc:	f043 0301 	orr.w	r3, r3, #1
 80158d0:	6313      	str	r3, [r2, #48]	; 0x30
 80158d2:	4b1b      	ldr	r3, [pc, #108]	; (8015940 <HAL_PCD_MspInit+0xa0>)
 80158d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158d6:	f003 0301 	and.w	r3, r3, #1
 80158da:	613b      	str	r3, [r7, #16]
 80158dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80158de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80158e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80158e4:	2302      	movs	r3, #2
 80158e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158e8:	2300      	movs	r3, #0
 80158ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80158ec:	2303      	movs	r3, #3
 80158ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80158f0:	230a      	movs	r3, #10
 80158f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80158f4:	f107 0314 	add.w	r3, r7, #20
 80158f8:	4619      	mov	r1, r3
 80158fa:	4812      	ldr	r0, [pc, #72]	; (8015944 <HAL_PCD_MspInit+0xa4>)
 80158fc:	f7f6 fbd4 	bl	800c0a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015900:	4b0f      	ldr	r3, [pc, #60]	; (8015940 <HAL_PCD_MspInit+0xa0>)
 8015902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015904:	4a0e      	ldr	r2, [pc, #56]	; (8015940 <HAL_PCD_MspInit+0xa0>)
 8015906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801590a:	6353      	str	r3, [r2, #52]	; 0x34
 801590c:	2300      	movs	r3, #0
 801590e:	60fb      	str	r3, [r7, #12]
 8015910:	4b0b      	ldr	r3, [pc, #44]	; (8015940 <HAL_PCD_MspInit+0xa0>)
 8015912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015914:	4a0a      	ldr	r2, [pc, #40]	; (8015940 <HAL_PCD_MspInit+0xa0>)
 8015916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801591a:	6453      	str	r3, [r2, #68]	; 0x44
 801591c:	4b08      	ldr	r3, [pc, #32]	; (8015940 <HAL_PCD_MspInit+0xa0>)
 801591e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015924:	60fb      	str	r3, [r7, #12]
 8015926:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015928:	2200      	movs	r2, #0
 801592a:	2105      	movs	r1, #5
 801592c:	2043      	movs	r0, #67	; 0x43
 801592e:	f7f5 fff3 	bl	800b918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015932:	2043      	movs	r0, #67	; 0x43
 8015934:	f7f6 f80c 	bl	800b950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015938:	bf00      	nop
 801593a:	3728      	adds	r7, #40	; 0x28
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	40023800 	.word	0x40023800
 8015944:	40020000 	.word	0x40020000

08015948 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801595c:	4619      	mov	r1, r3
 801595e:	4610      	mov	r0, r2
 8015960:	f7fb fe92 	bl	8011688 <USBD_LL_SetupStage>
}
 8015964:	bf00      	nop
 8015966:	3708      	adds	r7, #8
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b082      	sub	sp, #8
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	460b      	mov	r3, r1
 8015976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801597e:	78fa      	ldrb	r2, [r7, #3]
 8015980:	6879      	ldr	r1, [r7, #4]
 8015982:	4613      	mov	r3, r2
 8015984:	00db      	lsls	r3, r3, #3
 8015986:	1a9b      	subs	r3, r3, r2
 8015988:	009b      	lsls	r3, r3, #2
 801598a:	440b      	add	r3, r1
 801598c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	78fb      	ldrb	r3, [r7, #3]
 8015994:	4619      	mov	r1, r3
 8015996:	f7fb feca 	bl	801172e <USBD_LL_DataOutStage>
}
 801599a:	bf00      	nop
 801599c:	3708      	adds	r7, #8
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}

080159a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159a2:	b580      	push	{r7, lr}
 80159a4:	b082      	sub	sp, #8
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
 80159aa:	460b      	mov	r3, r1
 80159ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80159b4:	78fa      	ldrb	r2, [r7, #3]
 80159b6:	6879      	ldr	r1, [r7, #4]
 80159b8:	4613      	mov	r3, r2
 80159ba:	00db      	lsls	r3, r3, #3
 80159bc:	1a9b      	subs	r3, r3, r2
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	440b      	add	r3, r1
 80159c2:	3348      	adds	r3, #72	; 0x48
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	78fb      	ldrb	r3, [r7, #3]
 80159c8:	4619      	mov	r1, r3
 80159ca:	f7fb ff13 	bl	80117f4 <USBD_LL_DataInStage>
}
 80159ce:	bf00      	nop
 80159d0:	3708      	adds	r7, #8
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}

080159d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159d6:	b580      	push	{r7, lr}
 80159d8:	b082      	sub	sp, #8
 80159da:	af00      	add	r7, sp, #0
 80159dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7fc f817 	bl	8011a18 <USBD_LL_SOF>
}
 80159ea:	bf00      	nop
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}

080159f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159f2:	b580      	push	{r7, lr}
 80159f4:	b084      	sub	sp, #16
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80159fa:	2301      	movs	r3, #1
 80159fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d102      	bne.n	8015a0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015a06:	2300      	movs	r3, #0
 8015a08:	73fb      	strb	r3, [r7, #15]
 8015a0a:	e008      	b.n	8015a1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	68db      	ldr	r3, [r3, #12]
 8015a10:	2b02      	cmp	r3, #2
 8015a12:	d102      	bne.n	8015a1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015a14:	2301      	movs	r3, #1
 8015a16:	73fb      	strb	r3, [r7, #15]
 8015a18:	e001      	b.n	8015a1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015a1a:	f7ee ff0f 	bl	800483c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a24:	7bfa      	ldrb	r2, [r7, #15]
 8015a26:	4611      	mov	r1, r2
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7fb ffba 	bl	80119a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7fb ff73 	bl	8011920 <USBD_LL_Reset>
}
 8015a3a:	bf00      	nop
 8015a3c:	3710      	adds	r7, #16
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
	...

08015a44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b082      	sub	sp, #8
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7fb ffb5 	bl	80119c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	6812      	ldr	r2, [r2, #0]
 8015a66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015a6a:	f043 0301 	orr.w	r3, r3, #1
 8015a6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	6a1b      	ldr	r3, [r3, #32]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d005      	beq.n	8015a84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015a78:	4b04      	ldr	r3, [pc, #16]	; (8015a8c <HAL_PCD_SuspendCallback+0x48>)
 8015a7a:	691b      	ldr	r3, [r3, #16]
 8015a7c:	4a03      	ldr	r2, [pc, #12]	; (8015a8c <HAL_PCD_SuspendCallback+0x48>)
 8015a7e:	f043 0306 	orr.w	r3, r3, #6
 8015a82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015a84:	bf00      	nop
 8015a86:	3708      	adds	r7, #8
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	e000ed00 	.word	0xe000ed00

08015a90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b082      	sub	sp, #8
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7fb ffa4 	bl	80119ec <USBD_LL_Resume>
}
 8015aa4:	bf00      	nop
 8015aa6:	3708      	adds	r7, #8
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}

08015aac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b082      	sub	sp, #8
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	460b      	mov	r3, r1
 8015ab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015abe:	78fa      	ldrb	r2, [r7, #3]
 8015ac0:	4611      	mov	r1, r2
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7fb ffcf 	bl	8011a66 <USBD_LL_IsoOUTIncomplete>
}
 8015ac8:	bf00      	nop
 8015aca:	3708      	adds	r7, #8
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}

08015ad0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	460b      	mov	r3, r1
 8015ada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ae2:	78fa      	ldrb	r2, [r7, #3]
 8015ae4:	4611      	mov	r1, r2
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7fb ffb0 	bl	8011a4c <USBD_LL_IsoINIncomplete>
}
 8015aec:	bf00      	nop
 8015aee:	3708      	adds	r7, #8
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7fb ffbc 	bl	8011a80 <USBD_LL_DevConnected>
}
 8015b08:	bf00      	nop
 8015b0a:	3708      	adds	r7, #8
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f7fb ffb9 	bl	8011a96 <USBD_LL_DevDisconnected>
}
 8015b24:	bf00      	nop
 8015b26:	3708      	adds	r7, #8
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}

08015b2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b082      	sub	sp, #8
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d13c      	bne.n	8015bb6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015b3c:	4a20      	ldr	r2, [pc, #128]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	4a1e      	ldr	r2, [pc, #120]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015b4c:	4b1c      	ldr	r3, [pc, #112]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015b52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015b54:	4b1a      	ldr	r3, [pc, #104]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b56:	2204      	movs	r2, #4
 8015b58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015b5a:	4b19      	ldr	r3, [pc, #100]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b5c:	2202      	movs	r2, #2
 8015b5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015b60:	4b17      	ldr	r3, [pc, #92]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b62:	2200      	movs	r2, #0
 8015b64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015b66:	4b16      	ldr	r3, [pc, #88]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b68:	2202      	movs	r2, #2
 8015b6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015b6c:	4b14      	ldr	r3, [pc, #80]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b6e:	2200      	movs	r2, #0
 8015b70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015b72:	4b13      	ldr	r3, [pc, #76]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b74:	2200      	movs	r2, #0
 8015b76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015b78:	4b11      	ldr	r3, [pc, #68]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015b7e:	4b10      	ldr	r3, [pc, #64]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b80:	2200      	movs	r2, #0
 8015b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015b84:	4b0e      	ldr	r3, [pc, #56]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b86:	2200      	movs	r2, #0
 8015b88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015b8a:	480d      	ldr	r0, [pc, #52]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b8c:	f7f6 fc96 	bl	800c4bc <HAL_PCD_Init>
 8015b90:	4603      	mov	r3, r0
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d001      	beq.n	8015b9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015b96:	f7ee fe51 	bl	800483c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015b9a:	2180      	movs	r1, #128	; 0x80
 8015b9c:	4808      	ldr	r0, [pc, #32]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015b9e:	f7f7 fdf4 	bl	800d78a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015ba2:	2240      	movs	r2, #64	; 0x40
 8015ba4:	2100      	movs	r1, #0
 8015ba6:	4806      	ldr	r0, [pc, #24]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015ba8:	f7f7 fda8 	bl	800d6fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015bac:	2280      	movs	r2, #128	; 0x80
 8015bae:	2101      	movs	r1, #1
 8015bb0:	4803      	ldr	r0, [pc, #12]	; (8015bc0 <USBD_LL_Init+0x94>)
 8015bb2:	f7f7 fda3 	bl	800d6fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015bb6:	2300      	movs	r3, #0
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3708      	adds	r7, #8
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	2000c5bc 	.word	0x2000c5bc

08015bc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7f6 fd8b 	bl	800c6f6 <HAL_PCD_Start>
 8015be0:	4603      	mov	r3, r0
 8015be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015be4:	7bfb      	ldrb	r3, [r7, #15]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f000 f92a 	bl	8015e40 <USBD_Get_USB_Status>
 8015bec:	4603      	mov	r3, r0
 8015bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3710      	adds	r7, #16
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}

08015bfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015bfa:	b580      	push	{r7, lr}
 8015bfc:	b084      	sub	sp, #16
 8015bfe:	af00      	add	r7, sp, #0
 8015c00:	6078      	str	r0, [r7, #4]
 8015c02:	4608      	mov	r0, r1
 8015c04:	4611      	mov	r1, r2
 8015c06:	461a      	mov	r2, r3
 8015c08:	4603      	mov	r3, r0
 8015c0a:	70fb      	strb	r3, [r7, #3]
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	70bb      	strb	r3, [r7, #2]
 8015c10:	4613      	mov	r3, r2
 8015c12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c14:	2300      	movs	r3, #0
 8015c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c22:	78bb      	ldrb	r3, [r7, #2]
 8015c24:	883a      	ldrh	r2, [r7, #0]
 8015c26:	78f9      	ldrb	r1, [r7, #3]
 8015c28:	f7f7 f96f 	bl	800cf0a <HAL_PCD_EP_Open>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c30:	7bfb      	ldrb	r3, [r7, #15]
 8015c32:	4618      	mov	r0, r3
 8015c34:	f000 f904 	bl	8015e40 <USBD_Get_USB_Status>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3710      	adds	r7, #16
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}

08015c46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c46:	b580      	push	{r7, lr}
 8015c48:	b084      	sub	sp, #16
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	6078      	str	r0, [r7, #4]
 8015c4e:	460b      	mov	r3, r1
 8015c50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c52:	2300      	movs	r3, #0
 8015c54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c56:	2300      	movs	r3, #0
 8015c58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c60:	78fa      	ldrb	r2, [r7, #3]
 8015c62:	4611      	mov	r1, r2
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7f7 f9b8 	bl	800cfda <HAL_PCD_EP_Close>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c6e:	7bfb      	ldrb	r3, [r7, #15]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f000 f8e5 	bl	8015e40 <USBD_Get_USB_Status>
 8015c76:	4603      	mov	r3, r0
 8015c78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3710      	adds	r7, #16
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}

08015c84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c90:	2300      	movs	r3, #0
 8015c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c94:	2300      	movs	r3, #0
 8015c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c9e:	78fa      	ldrb	r2, [r7, #3]
 8015ca0:	4611      	mov	r1, r2
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7f7 fa90 	bl	800d1c8 <HAL_PCD_EP_SetStall>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cac:	7bfb      	ldrb	r3, [r7, #15]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f000 f8c6 	bl	8015e40 <USBD_Get_USB_Status>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3710      	adds	r7, #16
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}

08015cc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cc2:	b580      	push	{r7, lr}
 8015cc4:	b084      	sub	sp, #16
 8015cc6:	af00      	add	r7, sp, #0
 8015cc8:	6078      	str	r0, [r7, #4]
 8015cca:	460b      	mov	r3, r1
 8015ccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015cdc:	78fa      	ldrb	r2, [r7, #3]
 8015cde:	4611      	mov	r1, r2
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f7 fad5 	bl	800d290 <HAL_PCD_EP_ClrStall>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cea:	7bfb      	ldrb	r3, [r7, #15]
 8015cec:	4618      	mov	r0, r3
 8015cee:	f000 f8a7 	bl	8015e40 <USBD_Get_USB_Status>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3710      	adds	r7, #16
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d00:	b480      	push	{r7}
 8015d02:	b085      	sub	sp, #20
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	460b      	mov	r3, r1
 8015d0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	da0b      	bge.n	8015d34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015d1c:	78fb      	ldrb	r3, [r7, #3]
 8015d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d22:	68f9      	ldr	r1, [r7, #12]
 8015d24:	4613      	mov	r3, r2
 8015d26:	00db      	lsls	r3, r3, #3
 8015d28:	1a9b      	subs	r3, r3, r2
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	440b      	add	r3, r1
 8015d2e:	333e      	adds	r3, #62	; 0x3e
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	e00b      	b.n	8015d4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015d34:	78fb      	ldrb	r3, [r7, #3]
 8015d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d3a:	68f9      	ldr	r1, [r7, #12]
 8015d3c:	4613      	mov	r3, r2
 8015d3e:	00db      	lsls	r3, r3, #3
 8015d40:	1a9b      	subs	r3, r3, r2
 8015d42:	009b      	lsls	r3, r3, #2
 8015d44:	440b      	add	r3, r1
 8015d46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015d4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3714      	adds	r7, #20
 8015d50:	46bd      	mov	sp, r7
 8015d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d56:	4770      	bx	lr

08015d58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b084      	sub	sp, #16
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	460b      	mov	r3, r1
 8015d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d64:	2300      	movs	r3, #0
 8015d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d72:	78fa      	ldrb	r2, [r7, #3]
 8015d74:	4611      	mov	r1, r2
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7f7 f8a2 	bl	800cec0 <HAL_PCD_SetAddress>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d80:	7bfb      	ldrb	r3, [r7, #15]
 8015d82:	4618      	mov	r0, r3
 8015d84:	f000 f85c 	bl	8015e40 <USBD_Get_USB_Status>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}

08015d96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015d96:	b580      	push	{r7, lr}
 8015d98:	b086      	sub	sp, #24
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	60f8      	str	r0, [r7, #12]
 8015d9e:	607a      	str	r2, [r7, #4]
 8015da0:	603b      	str	r3, [r7, #0]
 8015da2:	460b      	mov	r3, r1
 8015da4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015da6:	2300      	movs	r3, #0
 8015da8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015daa:	2300      	movs	r3, #0
 8015dac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015db4:	7af9      	ldrb	r1, [r7, #11]
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	687a      	ldr	r2, [r7, #4]
 8015dba:	f7f7 f9bb 	bl	800d134 <HAL_PCD_EP_Transmit>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dc2:	7dfb      	ldrb	r3, [r7, #23]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f000 f83b 	bl	8015e40 <USBD_Get_USB_Status>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015dce:	7dbb      	ldrb	r3, [r7, #22]
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3718      	adds	r7, #24
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}

08015dd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b086      	sub	sp, #24
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	60f8      	str	r0, [r7, #12]
 8015de0:	607a      	str	r2, [r7, #4]
 8015de2:	603b      	str	r3, [r7, #0]
 8015de4:	460b      	mov	r3, r1
 8015de6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015de8:	2300      	movs	r3, #0
 8015dea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dec:	2300      	movs	r3, #0
 8015dee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015df6:	7af9      	ldrb	r1, [r7, #11]
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	f7f7 f937 	bl	800d06e <HAL_PCD_EP_Receive>
 8015e00:	4603      	mov	r3, r0
 8015e02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e04:	7dfb      	ldrb	r3, [r7, #23]
 8015e06:	4618      	mov	r0, r3
 8015e08:	f000 f81a 	bl	8015e40 <USBD_Get_USB_Status>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e10:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3718      	adds	r7, #24
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}

08015e1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e1a:	b580      	push	{r7, lr}
 8015e1c:	b082      	sub	sp, #8
 8015e1e:	af00      	add	r7, sp, #0
 8015e20:	6078      	str	r0, [r7, #4]
 8015e22:	460b      	mov	r3, r1
 8015e24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e2c:	78fa      	ldrb	r2, [r7, #3]
 8015e2e:	4611      	mov	r1, r2
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7f7 f967 	bl	800d104 <HAL_PCD_EP_GetRxCount>
 8015e36:	4603      	mov	r3, r0
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3708      	adds	r7, #8
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015e40:	b480      	push	{r7}
 8015e42:	b085      	sub	sp, #20
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	4603      	mov	r3, r0
 8015e48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015e4e:	79fb      	ldrb	r3, [r7, #7]
 8015e50:	2b03      	cmp	r3, #3
 8015e52:	d817      	bhi.n	8015e84 <USBD_Get_USB_Status+0x44>
 8015e54:	a201      	add	r2, pc, #4	; (adr r2, 8015e5c <USBD_Get_USB_Status+0x1c>)
 8015e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e5a:	bf00      	nop
 8015e5c:	08015e6d 	.word	0x08015e6d
 8015e60:	08015e73 	.word	0x08015e73
 8015e64:	08015e79 	.word	0x08015e79
 8015e68:	08015e7f 	.word	0x08015e7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8015e70:	e00b      	b.n	8015e8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015e72:	2303      	movs	r3, #3
 8015e74:	73fb      	strb	r3, [r7, #15]
    break;
 8015e76:	e008      	b.n	8015e8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8015e7c:	e005      	b.n	8015e8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015e7e:	2303      	movs	r3, #3
 8015e80:	73fb      	strb	r3, [r7, #15]
    break;
 8015e82:	e002      	b.n	8015e8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015e84:	2303      	movs	r3, #3
 8015e86:	73fb      	strb	r3, [r7, #15]
    break;
 8015e88:	bf00      	nop
  }
  return usb_status;
 8015e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	3714      	adds	r7, #20
 8015e90:	46bd      	mov	sp, r7
 8015e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e96:	4770      	bx	lr

08015e98 <__errno>:
 8015e98:	4b01      	ldr	r3, [pc, #4]	; (8015ea0 <__errno+0x8>)
 8015e9a:	6818      	ldr	r0, [r3, #0]
 8015e9c:	4770      	bx	lr
 8015e9e:	bf00      	nop
 8015ea0:	20000a0c 	.word	0x20000a0c

08015ea4 <__libc_init_array>:
 8015ea4:	b570      	push	{r4, r5, r6, lr}
 8015ea6:	4e0d      	ldr	r6, [pc, #52]	; (8015edc <__libc_init_array+0x38>)
 8015ea8:	4c0d      	ldr	r4, [pc, #52]	; (8015ee0 <__libc_init_array+0x3c>)
 8015eaa:	1ba4      	subs	r4, r4, r6
 8015eac:	10a4      	asrs	r4, r4, #2
 8015eae:	2500      	movs	r5, #0
 8015eb0:	42a5      	cmp	r5, r4
 8015eb2:	d109      	bne.n	8015ec8 <__libc_init_array+0x24>
 8015eb4:	4e0b      	ldr	r6, [pc, #44]	; (8015ee4 <__libc_init_array+0x40>)
 8015eb6:	4c0c      	ldr	r4, [pc, #48]	; (8015ee8 <__libc_init_array+0x44>)
 8015eb8:	f005 fa8c 	bl	801b3d4 <_init>
 8015ebc:	1ba4      	subs	r4, r4, r6
 8015ebe:	10a4      	asrs	r4, r4, #2
 8015ec0:	2500      	movs	r5, #0
 8015ec2:	42a5      	cmp	r5, r4
 8015ec4:	d105      	bne.n	8015ed2 <__libc_init_array+0x2e>
 8015ec6:	bd70      	pop	{r4, r5, r6, pc}
 8015ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ecc:	4798      	blx	r3
 8015ece:	3501      	adds	r5, #1
 8015ed0:	e7ee      	b.n	8015eb0 <__libc_init_array+0xc>
 8015ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ed6:	4798      	blx	r3
 8015ed8:	3501      	adds	r5, #1
 8015eda:	e7f2      	b.n	8015ec2 <__libc_init_array+0x1e>
 8015edc:	0801bba8 	.word	0x0801bba8
 8015ee0:	0801bba8 	.word	0x0801bba8
 8015ee4:	0801bba8 	.word	0x0801bba8
 8015ee8:	0801bbac 	.word	0x0801bbac

08015eec <malloc>:
 8015eec:	4b02      	ldr	r3, [pc, #8]	; (8015ef8 <malloc+0xc>)
 8015eee:	4601      	mov	r1, r0
 8015ef0:	6818      	ldr	r0, [r3, #0]
 8015ef2:	f000 b885 	b.w	8016000 <_malloc_r>
 8015ef6:	bf00      	nop
 8015ef8:	20000a0c 	.word	0x20000a0c

08015efc <free>:
 8015efc:	4b02      	ldr	r3, [pc, #8]	; (8015f08 <free+0xc>)
 8015efe:	4601      	mov	r1, r0
 8015f00:	6818      	ldr	r0, [r3, #0]
 8015f02:	f000 b82f 	b.w	8015f64 <_free_r>
 8015f06:	bf00      	nop
 8015f08:	20000a0c 	.word	0x20000a0c

08015f0c <memcpy>:
 8015f0c:	b510      	push	{r4, lr}
 8015f0e:	1e43      	subs	r3, r0, #1
 8015f10:	440a      	add	r2, r1
 8015f12:	4291      	cmp	r1, r2
 8015f14:	d100      	bne.n	8015f18 <memcpy+0xc>
 8015f16:	bd10      	pop	{r4, pc}
 8015f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f20:	e7f7      	b.n	8015f12 <memcpy+0x6>

08015f22 <memmove>:
 8015f22:	4288      	cmp	r0, r1
 8015f24:	b510      	push	{r4, lr}
 8015f26:	eb01 0302 	add.w	r3, r1, r2
 8015f2a:	d807      	bhi.n	8015f3c <memmove+0x1a>
 8015f2c:	1e42      	subs	r2, r0, #1
 8015f2e:	4299      	cmp	r1, r3
 8015f30:	d00a      	beq.n	8015f48 <memmove+0x26>
 8015f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f36:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015f3a:	e7f8      	b.n	8015f2e <memmove+0xc>
 8015f3c:	4283      	cmp	r3, r0
 8015f3e:	d9f5      	bls.n	8015f2c <memmove+0xa>
 8015f40:	1881      	adds	r1, r0, r2
 8015f42:	1ad2      	subs	r2, r2, r3
 8015f44:	42d3      	cmn	r3, r2
 8015f46:	d100      	bne.n	8015f4a <memmove+0x28>
 8015f48:	bd10      	pop	{r4, pc}
 8015f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015f4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015f52:	e7f7      	b.n	8015f44 <memmove+0x22>

08015f54 <memset>:
 8015f54:	4402      	add	r2, r0
 8015f56:	4603      	mov	r3, r0
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	d100      	bne.n	8015f5e <memset+0xa>
 8015f5c:	4770      	bx	lr
 8015f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8015f62:	e7f9      	b.n	8015f58 <memset+0x4>

08015f64 <_free_r>:
 8015f64:	b538      	push	{r3, r4, r5, lr}
 8015f66:	4605      	mov	r5, r0
 8015f68:	2900      	cmp	r1, #0
 8015f6a:	d045      	beq.n	8015ff8 <_free_r+0x94>
 8015f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f70:	1f0c      	subs	r4, r1, #4
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	bfb8      	it	lt
 8015f76:	18e4      	addlt	r4, r4, r3
 8015f78:	f002 ff86 	bl	8018e88 <__malloc_lock>
 8015f7c:	4a1f      	ldr	r2, [pc, #124]	; (8015ffc <_free_r+0x98>)
 8015f7e:	6813      	ldr	r3, [r2, #0]
 8015f80:	4610      	mov	r0, r2
 8015f82:	b933      	cbnz	r3, 8015f92 <_free_r+0x2e>
 8015f84:	6063      	str	r3, [r4, #4]
 8015f86:	6014      	str	r4, [r2, #0]
 8015f88:	4628      	mov	r0, r5
 8015f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f8e:	f002 bf7c 	b.w	8018e8a <__malloc_unlock>
 8015f92:	42a3      	cmp	r3, r4
 8015f94:	d90c      	bls.n	8015fb0 <_free_r+0x4c>
 8015f96:	6821      	ldr	r1, [r4, #0]
 8015f98:	1862      	adds	r2, r4, r1
 8015f9a:	4293      	cmp	r3, r2
 8015f9c:	bf04      	itt	eq
 8015f9e:	681a      	ldreq	r2, [r3, #0]
 8015fa0:	685b      	ldreq	r3, [r3, #4]
 8015fa2:	6063      	str	r3, [r4, #4]
 8015fa4:	bf04      	itt	eq
 8015fa6:	1852      	addeq	r2, r2, r1
 8015fa8:	6022      	streq	r2, [r4, #0]
 8015faa:	6004      	str	r4, [r0, #0]
 8015fac:	e7ec      	b.n	8015f88 <_free_r+0x24>
 8015fae:	4613      	mov	r3, r2
 8015fb0:	685a      	ldr	r2, [r3, #4]
 8015fb2:	b10a      	cbz	r2, 8015fb8 <_free_r+0x54>
 8015fb4:	42a2      	cmp	r2, r4
 8015fb6:	d9fa      	bls.n	8015fae <_free_r+0x4a>
 8015fb8:	6819      	ldr	r1, [r3, #0]
 8015fba:	1858      	adds	r0, r3, r1
 8015fbc:	42a0      	cmp	r0, r4
 8015fbe:	d10b      	bne.n	8015fd8 <_free_r+0x74>
 8015fc0:	6820      	ldr	r0, [r4, #0]
 8015fc2:	4401      	add	r1, r0
 8015fc4:	1858      	adds	r0, r3, r1
 8015fc6:	4282      	cmp	r2, r0
 8015fc8:	6019      	str	r1, [r3, #0]
 8015fca:	d1dd      	bne.n	8015f88 <_free_r+0x24>
 8015fcc:	6810      	ldr	r0, [r2, #0]
 8015fce:	6852      	ldr	r2, [r2, #4]
 8015fd0:	605a      	str	r2, [r3, #4]
 8015fd2:	4401      	add	r1, r0
 8015fd4:	6019      	str	r1, [r3, #0]
 8015fd6:	e7d7      	b.n	8015f88 <_free_r+0x24>
 8015fd8:	d902      	bls.n	8015fe0 <_free_r+0x7c>
 8015fda:	230c      	movs	r3, #12
 8015fdc:	602b      	str	r3, [r5, #0]
 8015fde:	e7d3      	b.n	8015f88 <_free_r+0x24>
 8015fe0:	6820      	ldr	r0, [r4, #0]
 8015fe2:	1821      	adds	r1, r4, r0
 8015fe4:	428a      	cmp	r2, r1
 8015fe6:	bf04      	itt	eq
 8015fe8:	6811      	ldreq	r1, [r2, #0]
 8015fea:	6852      	ldreq	r2, [r2, #4]
 8015fec:	6062      	str	r2, [r4, #4]
 8015fee:	bf04      	itt	eq
 8015ff0:	1809      	addeq	r1, r1, r0
 8015ff2:	6021      	streq	r1, [r4, #0]
 8015ff4:	605c      	str	r4, [r3, #4]
 8015ff6:	e7c7      	b.n	8015f88 <_free_r+0x24>
 8015ff8:	bd38      	pop	{r3, r4, r5, pc}
 8015ffa:	bf00      	nop
 8015ffc:	20004db0 	.word	0x20004db0

08016000 <_malloc_r>:
 8016000:	b570      	push	{r4, r5, r6, lr}
 8016002:	1ccd      	adds	r5, r1, #3
 8016004:	f025 0503 	bic.w	r5, r5, #3
 8016008:	3508      	adds	r5, #8
 801600a:	2d0c      	cmp	r5, #12
 801600c:	bf38      	it	cc
 801600e:	250c      	movcc	r5, #12
 8016010:	2d00      	cmp	r5, #0
 8016012:	4606      	mov	r6, r0
 8016014:	db01      	blt.n	801601a <_malloc_r+0x1a>
 8016016:	42a9      	cmp	r1, r5
 8016018:	d903      	bls.n	8016022 <_malloc_r+0x22>
 801601a:	230c      	movs	r3, #12
 801601c:	6033      	str	r3, [r6, #0]
 801601e:	2000      	movs	r0, #0
 8016020:	bd70      	pop	{r4, r5, r6, pc}
 8016022:	f002 ff31 	bl	8018e88 <__malloc_lock>
 8016026:	4a21      	ldr	r2, [pc, #132]	; (80160ac <_malloc_r+0xac>)
 8016028:	6814      	ldr	r4, [r2, #0]
 801602a:	4621      	mov	r1, r4
 801602c:	b991      	cbnz	r1, 8016054 <_malloc_r+0x54>
 801602e:	4c20      	ldr	r4, [pc, #128]	; (80160b0 <_malloc_r+0xb0>)
 8016030:	6823      	ldr	r3, [r4, #0]
 8016032:	b91b      	cbnz	r3, 801603c <_malloc_r+0x3c>
 8016034:	4630      	mov	r0, r6
 8016036:	f000 fe7b 	bl	8016d30 <_sbrk_r>
 801603a:	6020      	str	r0, [r4, #0]
 801603c:	4629      	mov	r1, r5
 801603e:	4630      	mov	r0, r6
 8016040:	f000 fe76 	bl	8016d30 <_sbrk_r>
 8016044:	1c43      	adds	r3, r0, #1
 8016046:	d124      	bne.n	8016092 <_malloc_r+0x92>
 8016048:	230c      	movs	r3, #12
 801604a:	6033      	str	r3, [r6, #0]
 801604c:	4630      	mov	r0, r6
 801604e:	f002 ff1c 	bl	8018e8a <__malloc_unlock>
 8016052:	e7e4      	b.n	801601e <_malloc_r+0x1e>
 8016054:	680b      	ldr	r3, [r1, #0]
 8016056:	1b5b      	subs	r3, r3, r5
 8016058:	d418      	bmi.n	801608c <_malloc_r+0x8c>
 801605a:	2b0b      	cmp	r3, #11
 801605c:	d90f      	bls.n	801607e <_malloc_r+0x7e>
 801605e:	600b      	str	r3, [r1, #0]
 8016060:	50cd      	str	r5, [r1, r3]
 8016062:	18cc      	adds	r4, r1, r3
 8016064:	4630      	mov	r0, r6
 8016066:	f002 ff10 	bl	8018e8a <__malloc_unlock>
 801606a:	f104 000b 	add.w	r0, r4, #11
 801606e:	1d23      	adds	r3, r4, #4
 8016070:	f020 0007 	bic.w	r0, r0, #7
 8016074:	1ac3      	subs	r3, r0, r3
 8016076:	d0d3      	beq.n	8016020 <_malloc_r+0x20>
 8016078:	425a      	negs	r2, r3
 801607a:	50e2      	str	r2, [r4, r3]
 801607c:	e7d0      	b.n	8016020 <_malloc_r+0x20>
 801607e:	428c      	cmp	r4, r1
 8016080:	684b      	ldr	r3, [r1, #4]
 8016082:	bf16      	itet	ne
 8016084:	6063      	strne	r3, [r4, #4]
 8016086:	6013      	streq	r3, [r2, #0]
 8016088:	460c      	movne	r4, r1
 801608a:	e7eb      	b.n	8016064 <_malloc_r+0x64>
 801608c:	460c      	mov	r4, r1
 801608e:	6849      	ldr	r1, [r1, #4]
 8016090:	e7cc      	b.n	801602c <_malloc_r+0x2c>
 8016092:	1cc4      	adds	r4, r0, #3
 8016094:	f024 0403 	bic.w	r4, r4, #3
 8016098:	42a0      	cmp	r0, r4
 801609a:	d005      	beq.n	80160a8 <_malloc_r+0xa8>
 801609c:	1a21      	subs	r1, r4, r0
 801609e:	4630      	mov	r0, r6
 80160a0:	f000 fe46 	bl	8016d30 <_sbrk_r>
 80160a4:	3001      	adds	r0, #1
 80160a6:	d0cf      	beq.n	8016048 <_malloc_r+0x48>
 80160a8:	6025      	str	r5, [r4, #0]
 80160aa:	e7db      	b.n	8016064 <_malloc_r+0x64>
 80160ac:	20004db0 	.word	0x20004db0
 80160b0:	20004db4 	.word	0x20004db4

080160b4 <__cvt>:
 80160b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160b8:	ec55 4b10 	vmov	r4, r5, d0
 80160bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80160be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80160c2:	2d00      	cmp	r5, #0
 80160c4:	460e      	mov	r6, r1
 80160c6:	4691      	mov	r9, r2
 80160c8:	4619      	mov	r1, r3
 80160ca:	bfb8      	it	lt
 80160cc:	4622      	movlt	r2, r4
 80160ce:	462b      	mov	r3, r5
 80160d0:	f027 0720 	bic.w	r7, r7, #32
 80160d4:	bfbb      	ittet	lt
 80160d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80160da:	461d      	movlt	r5, r3
 80160dc:	2300      	movge	r3, #0
 80160de:	232d      	movlt	r3, #45	; 0x2d
 80160e0:	bfb8      	it	lt
 80160e2:	4614      	movlt	r4, r2
 80160e4:	2f46      	cmp	r7, #70	; 0x46
 80160e6:	700b      	strb	r3, [r1, #0]
 80160e8:	d004      	beq.n	80160f4 <__cvt+0x40>
 80160ea:	2f45      	cmp	r7, #69	; 0x45
 80160ec:	d100      	bne.n	80160f0 <__cvt+0x3c>
 80160ee:	3601      	adds	r6, #1
 80160f0:	2102      	movs	r1, #2
 80160f2:	e000      	b.n	80160f6 <__cvt+0x42>
 80160f4:	2103      	movs	r1, #3
 80160f6:	ab03      	add	r3, sp, #12
 80160f8:	9301      	str	r3, [sp, #4]
 80160fa:	ab02      	add	r3, sp, #8
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	4632      	mov	r2, r6
 8016100:	4653      	mov	r3, sl
 8016102:	ec45 4b10 	vmov	d0, r4, r5
 8016106:	f001 fdbb 	bl	8017c80 <_dtoa_r>
 801610a:	2f47      	cmp	r7, #71	; 0x47
 801610c:	4680      	mov	r8, r0
 801610e:	d102      	bne.n	8016116 <__cvt+0x62>
 8016110:	f019 0f01 	tst.w	r9, #1
 8016114:	d026      	beq.n	8016164 <__cvt+0xb0>
 8016116:	2f46      	cmp	r7, #70	; 0x46
 8016118:	eb08 0906 	add.w	r9, r8, r6
 801611c:	d111      	bne.n	8016142 <__cvt+0x8e>
 801611e:	f898 3000 	ldrb.w	r3, [r8]
 8016122:	2b30      	cmp	r3, #48	; 0x30
 8016124:	d10a      	bne.n	801613c <__cvt+0x88>
 8016126:	2200      	movs	r2, #0
 8016128:	2300      	movs	r3, #0
 801612a:	4620      	mov	r0, r4
 801612c:	4629      	mov	r1, r5
 801612e:	f7ea fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8016132:	b918      	cbnz	r0, 801613c <__cvt+0x88>
 8016134:	f1c6 0601 	rsb	r6, r6, #1
 8016138:	f8ca 6000 	str.w	r6, [sl]
 801613c:	f8da 3000 	ldr.w	r3, [sl]
 8016140:	4499      	add	r9, r3
 8016142:	2200      	movs	r2, #0
 8016144:	2300      	movs	r3, #0
 8016146:	4620      	mov	r0, r4
 8016148:	4629      	mov	r1, r5
 801614a:	f7ea fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 801614e:	b938      	cbnz	r0, 8016160 <__cvt+0xac>
 8016150:	2230      	movs	r2, #48	; 0x30
 8016152:	9b03      	ldr	r3, [sp, #12]
 8016154:	454b      	cmp	r3, r9
 8016156:	d205      	bcs.n	8016164 <__cvt+0xb0>
 8016158:	1c59      	adds	r1, r3, #1
 801615a:	9103      	str	r1, [sp, #12]
 801615c:	701a      	strb	r2, [r3, #0]
 801615e:	e7f8      	b.n	8016152 <__cvt+0x9e>
 8016160:	f8cd 900c 	str.w	r9, [sp, #12]
 8016164:	9b03      	ldr	r3, [sp, #12]
 8016166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016168:	eba3 0308 	sub.w	r3, r3, r8
 801616c:	4640      	mov	r0, r8
 801616e:	6013      	str	r3, [r2, #0]
 8016170:	b004      	add	sp, #16
 8016172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016176 <__exponent>:
 8016176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016178:	2900      	cmp	r1, #0
 801617a:	4604      	mov	r4, r0
 801617c:	bfba      	itte	lt
 801617e:	4249      	neglt	r1, r1
 8016180:	232d      	movlt	r3, #45	; 0x2d
 8016182:	232b      	movge	r3, #43	; 0x2b
 8016184:	2909      	cmp	r1, #9
 8016186:	f804 2b02 	strb.w	r2, [r4], #2
 801618a:	7043      	strb	r3, [r0, #1]
 801618c:	dd20      	ble.n	80161d0 <__exponent+0x5a>
 801618e:	f10d 0307 	add.w	r3, sp, #7
 8016192:	461f      	mov	r7, r3
 8016194:	260a      	movs	r6, #10
 8016196:	fb91 f5f6 	sdiv	r5, r1, r6
 801619a:	fb06 1115 	mls	r1, r6, r5, r1
 801619e:	3130      	adds	r1, #48	; 0x30
 80161a0:	2d09      	cmp	r5, #9
 80161a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80161a6:	f103 32ff 	add.w	r2, r3, #4294967295
 80161aa:	4629      	mov	r1, r5
 80161ac:	dc09      	bgt.n	80161c2 <__exponent+0x4c>
 80161ae:	3130      	adds	r1, #48	; 0x30
 80161b0:	3b02      	subs	r3, #2
 80161b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80161b6:	42bb      	cmp	r3, r7
 80161b8:	4622      	mov	r2, r4
 80161ba:	d304      	bcc.n	80161c6 <__exponent+0x50>
 80161bc:	1a10      	subs	r0, r2, r0
 80161be:	b003      	add	sp, #12
 80161c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161c2:	4613      	mov	r3, r2
 80161c4:	e7e7      	b.n	8016196 <__exponent+0x20>
 80161c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161ca:	f804 2b01 	strb.w	r2, [r4], #1
 80161ce:	e7f2      	b.n	80161b6 <__exponent+0x40>
 80161d0:	2330      	movs	r3, #48	; 0x30
 80161d2:	4419      	add	r1, r3
 80161d4:	7083      	strb	r3, [r0, #2]
 80161d6:	1d02      	adds	r2, r0, #4
 80161d8:	70c1      	strb	r1, [r0, #3]
 80161da:	e7ef      	b.n	80161bc <__exponent+0x46>

080161dc <_printf_float>:
 80161dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e0:	b08d      	sub	sp, #52	; 0x34
 80161e2:	460c      	mov	r4, r1
 80161e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80161e8:	4616      	mov	r6, r2
 80161ea:	461f      	mov	r7, r3
 80161ec:	4605      	mov	r5, r0
 80161ee:	f002 fe2b 	bl	8018e48 <_localeconv_r>
 80161f2:	6803      	ldr	r3, [r0, #0]
 80161f4:	9304      	str	r3, [sp, #16]
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7e9 ffea 	bl	80001d0 <strlen>
 80161fc:	2300      	movs	r3, #0
 80161fe:	930a      	str	r3, [sp, #40]	; 0x28
 8016200:	f8d8 3000 	ldr.w	r3, [r8]
 8016204:	9005      	str	r0, [sp, #20]
 8016206:	3307      	adds	r3, #7
 8016208:	f023 0307 	bic.w	r3, r3, #7
 801620c:	f103 0208 	add.w	r2, r3, #8
 8016210:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016214:	f8d4 b000 	ldr.w	fp, [r4]
 8016218:	f8c8 2000 	str.w	r2, [r8]
 801621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016220:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016224:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016228:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801622c:	9307      	str	r3, [sp, #28]
 801622e:	f8cd 8018 	str.w	r8, [sp, #24]
 8016232:	f04f 32ff 	mov.w	r2, #4294967295
 8016236:	4ba7      	ldr	r3, [pc, #668]	; (80164d4 <_printf_float+0x2f8>)
 8016238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801623c:	f7ea fc76 	bl	8000b2c <__aeabi_dcmpun>
 8016240:	bb70      	cbnz	r0, 80162a0 <_printf_float+0xc4>
 8016242:	f04f 32ff 	mov.w	r2, #4294967295
 8016246:	4ba3      	ldr	r3, [pc, #652]	; (80164d4 <_printf_float+0x2f8>)
 8016248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801624c:	f7ea fc50 	bl	8000af0 <__aeabi_dcmple>
 8016250:	bb30      	cbnz	r0, 80162a0 <_printf_float+0xc4>
 8016252:	2200      	movs	r2, #0
 8016254:	2300      	movs	r3, #0
 8016256:	4640      	mov	r0, r8
 8016258:	4649      	mov	r1, r9
 801625a:	f7ea fc3f 	bl	8000adc <__aeabi_dcmplt>
 801625e:	b110      	cbz	r0, 8016266 <_printf_float+0x8a>
 8016260:	232d      	movs	r3, #45	; 0x2d
 8016262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016266:	4a9c      	ldr	r2, [pc, #624]	; (80164d8 <_printf_float+0x2fc>)
 8016268:	4b9c      	ldr	r3, [pc, #624]	; (80164dc <_printf_float+0x300>)
 801626a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801626e:	bf8c      	ite	hi
 8016270:	4690      	movhi	r8, r2
 8016272:	4698      	movls	r8, r3
 8016274:	2303      	movs	r3, #3
 8016276:	f02b 0204 	bic.w	r2, fp, #4
 801627a:	6123      	str	r3, [r4, #16]
 801627c:	6022      	str	r2, [r4, #0]
 801627e:	f04f 0900 	mov.w	r9, #0
 8016282:	9700      	str	r7, [sp, #0]
 8016284:	4633      	mov	r3, r6
 8016286:	aa0b      	add	r2, sp, #44	; 0x2c
 8016288:	4621      	mov	r1, r4
 801628a:	4628      	mov	r0, r5
 801628c:	f000 f9e6 	bl	801665c <_printf_common>
 8016290:	3001      	adds	r0, #1
 8016292:	f040 808d 	bne.w	80163b0 <_printf_float+0x1d4>
 8016296:	f04f 30ff 	mov.w	r0, #4294967295
 801629a:	b00d      	add	sp, #52	; 0x34
 801629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a0:	4642      	mov	r2, r8
 80162a2:	464b      	mov	r3, r9
 80162a4:	4640      	mov	r0, r8
 80162a6:	4649      	mov	r1, r9
 80162a8:	f7ea fc40 	bl	8000b2c <__aeabi_dcmpun>
 80162ac:	b110      	cbz	r0, 80162b4 <_printf_float+0xd8>
 80162ae:	4a8c      	ldr	r2, [pc, #560]	; (80164e0 <_printf_float+0x304>)
 80162b0:	4b8c      	ldr	r3, [pc, #560]	; (80164e4 <_printf_float+0x308>)
 80162b2:	e7da      	b.n	801626a <_printf_float+0x8e>
 80162b4:	6861      	ldr	r1, [r4, #4]
 80162b6:	1c4b      	adds	r3, r1, #1
 80162b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80162bc:	a80a      	add	r0, sp, #40	; 0x28
 80162be:	d13e      	bne.n	801633e <_printf_float+0x162>
 80162c0:	2306      	movs	r3, #6
 80162c2:	6063      	str	r3, [r4, #4]
 80162c4:	2300      	movs	r3, #0
 80162c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80162ca:	ab09      	add	r3, sp, #36	; 0x24
 80162cc:	9300      	str	r3, [sp, #0]
 80162ce:	ec49 8b10 	vmov	d0, r8, r9
 80162d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80162d6:	6022      	str	r2, [r4, #0]
 80162d8:	f8cd a004 	str.w	sl, [sp, #4]
 80162dc:	6861      	ldr	r1, [r4, #4]
 80162de:	4628      	mov	r0, r5
 80162e0:	f7ff fee8 	bl	80160b4 <__cvt>
 80162e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80162e8:	2b47      	cmp	r3, #71	; 0x47
 80162ea:	4680      	mov	r8, r0
 80162ec:	d109      	bne.n	8016302 <_printf_float+0x126>
 80162ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162f0:	1cd8      	adds	r0, r3, #3
 80162f2:	db02      	blt.n	80162fa <_printf_float+0x11e>
 80162f4:	6862      	ldr	r2, [r4, #4]
 80162f6:	4293      	cmp	r3, r2
 80162f8:	dd47      	ble.n	801638a <_printf_float+0x1ae>
 80162fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80162fe:	fa5f fa8a 	uxtb.w	sl, sl
 8016302:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016308:	d824      	bhi.n	8016354 <_printf_float+0x178>
 801630a:	3901      	subs	r1, #1
 801630c:	4652      	mov	r2, sl
 801630e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016312:	9109      	str	r1, [sp, #36]	; 0x24
 8016314:	f7ff ff2f 	bl	8016176 <__exponent>
 8016318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801631a:	1813      	adds	r3, r2, r0
 801631c:	2a01      	cmp	r2, #1
 801631e:	4681      	mov	r9, r0
 8016320:	6123      	str	r3, [r4, #16]
 8016322:	dc02      	bgt.n	801632a <_printf_float+0x14e>
 8016324:	6822      	ldr	r2, [r4, #0]
 8016326:	07d1      	lsls	r1, r2, #31
 8016328:	d501      	bpl.n	801632e <_printf_float+0x152>
 801632a:	3301      	adds	r3, #1
 801632c:	6123      	str	r3, [r4, #16]
 801632e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016332:	2b00      	cmp	r3, #0
 8016334:	d0a5      	beq.n	8016282 <_printf_float+0xa6>
 8016336:	232d      	movs	r3, #45	; 0x2d
 8016338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801633c:	e7a1      	b.n	8016282 <_printf_float+0xa6>
 801633e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8016342:	f000 8177 	beq.w	8016634 <_printf_float+0x458>
 8016346:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801634a:	d1bb      	bne.n	80162c4 <_printf_float+0xe8>
 801634c:	2900      	cmp	r1, #0
 801634e:	d1b9      	bne.n	80162c4 <_printf_float+0xe8>
 8016350:	2301      	movs	r3, #1
 8016352:	e7b6      	b.n	80162c2 <_printf_float+0xe6>
 8016354:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016358:	d119      	bne.n	801638e <_printf_float+0x1b2>
 801635a:	2900      	cmp	r1, #0
 801635c:	6863      	ldr	r3, [r4, #4]
 801635e:	dd0c      	ble.n	801637a <_printf_float+0x19e>
 8016360:	6121      	str	r1, [r4, #16]
 8016362:	b913      	cbnz	r3, 801636a <_printf_float+0x18e>
 8016364:	6822      	ldr	r2, [r4, #0]
 8016366:	07d2      	lsls	r2, r2, #31
 8016368:	d502      	bpl.n	8016370 <_printf_float+0x194>
 801636a:	3301      	adds	r3, #1
 801636c:	440b      	add	r3, r1
 801636e:	6123      	str	r3, [r4, #16]
 8016370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016372:	65a3      	str	r3, [r4, #88]	; 0x58
 8016374:	f04f 0900 	mov.w	r9, #0
 8016378:	e7d9      	b.n	801632e <_printf_float+0x152>
 801637a:	b913      	cbnz	r3, 8016382 <_printf_float+0x1a6>
 801637c:	6822      	ldr	r2, [r4, #0]
 801637e:	07d0      	lsls	r0, r2, #31
 8016380:	d501      	bpl.n	8016386 <_printf_float+0x1aa>
 8016382:	3302      	adds	r3, #2
 8016384:	e7f3      	b.n	801636e <_printf_float+0x192>
 8016386:	2301      	movs	r3, #1
 8016388:	e7f1      	b.n	801636e <_printf_float+0x192>
 801638a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801638e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016392:	4293      	cmp	r3, r2
 8016394:	db05      	blt.n	80163a2 <_printf_float+0x1c6>
 8016396:	6822      	ldr	r2, [r4, #0]
 8016398:	6123      	str	r3, [r4, #16]
 801639a:	07d1      	lsls	r1, r2, #31
 801639c:	d5e8      	bpl.n	8016370 <_printf_float+0x194>
 801639e:	3301      	adds	r3, #1
 80163a0:	e7e5      	b.n	801636e <_printf_float+0x192>
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	bfd4      	ite	le
 80163a6:	f1c3 0302 	rsble	r3, r3, #2
 80163aa:	2301      	movgt	r3, #1
 80163ac:	4413      	add	r3, r2
 80163ae:	e7de      	b.n	801636e <_printf_float+0x192>
 80163b0:	6823      	ldr	r3, [r4, #0]
 80163b2:	055a      	lsls	r2, r3, #21
 80163b4:	d407      	bmi.n	80163c6 <_printf_float+0x1ea>
 80163b6:	6923      	ldr	r3, [r4, #16]
 80163b8:	4642      	mov	r2, r8
 80163ba:	4631      	mov	r1, r6
 80163bc:	4628      	mov	r0, r5
 80163be:	47b8      	blx	r7
 80163c0:	3001      	adds	r0, #1
 80163c2:	d12b      	bne.n	801641c <_printf_float+0x240>
 80163c4:	e767      	b.n	8016296 <_printf_float+0xba>
 80163c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80163ca:	f240 80dc 	bls.w	8016586 <_printf_float+0x3aa>
 80163ce:	2200      	movs	r2, #0
 80163d0:	2300      	movs	r3, #0
 80163d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80163d6:	f7ea fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80163da:	2800      	cmp	r0, #0
 80163dc:	d033      	beq.n	8016446 <_printf_float+0x26a>
 80163de:	2301      	movs	r3, #1
 80163e0:	4a41      	ldr	r2, [pc, #260]	; (80164e8 <_printf_float+0x30c>)
 80163e2:	4631      	mov	r1, r6
 80163e4:	4628      	mov	r0, r5
 80163e6:	47b8      	blx	r7
 80163e8:	3001      	adds	r0, #1
 80163ea:	f43f af54 	beq.w	8016296 <_printf_float+0xba>
 80163ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163f2:	429a      	cmp	r2, r3
 80163f4:	db02      	blt.n	80163fc <_printf_float+0x220>
 80163f6:	6823      	ldr	r3, [r4, #0]
 80163f8:	07d8      	lsls	r0, r3, #31
 80163fa:	d50f      	bpl.n	801641c <_printf_float+0x240>
 80163fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016400:	4631      	mov	r1, r6
 8016402:	4628      	mov	r0, r5
 8016404:	47b8      	blx	r7
 8016406:	3001      	adds	r0, #1
 8016408:	f43f af45 	beq.w	8016296 <_printf_float+0xba>
 801640c:	f04f 0800 	mov.w	r8, #0
 8016410:	f104 091a 	add.w	r9, r4, #26
 8016414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016416:	3b01      	subs	r3, #1
 8016418:	4543      	cmp	r3, r8
 801641a:	dc09      	bgt.n	8016430 <_printf_float+0x254>
 801641c:	6823      	ldr	r3, [r4, #0]
 801641e:	079b      	lsls	r3, r3, #30
 8016420:	f100 8103 	bmi.w	801662a <_printf_float+0x44e>
 8016424:	68e0      	ldr	r0, [r4, #12]
 8016426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016428:	4298      	cmp	r0, r3
 801642a:	bfb8      	it	lt
 801642c:	4618      	movlt	r0, r3
 801642e:	e734      	b.n	801629a <_printf_float+0xbe>
 8016430:	2301      	movs	r3, #1
 8016432:	464a      	mov	r2, r9
 8016434:	4631      	mov	r1, r6
 8016436:	4628      	mov	r0, r5
 8016438:	47b8      	blx	r7
 801643a:	3001      	adds	r0, #1
 801643c:	f43f af2b 	beq.w	8016296 <_printf_float+0xba>
 8016440:	f108 0801 	add.w	r8, r8, #1
 8016444:	e7e6      	b.n	8016414 <_printf_float+0x238>
 8016446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016448:	2b00      	cmp	r3, #0
 801644a:	dc2b      	bgt.n	80164a4 <_printf_float+0x2c8>
 801644c:	2301      	movs	r3, #1
 801644e:	4a26      	ldr	r2, [pc, #152]	; (80164e8 <_printf_float+0x30c>)
 8016450:	4631      	mov	r1, r6
 8016452:	4628      	mov	r0, r5
 8016454:	47b8      	blx	r7
 8016456:	3001      	adds	r0, #1
 8016458:	f43f af1d 	beq.w	8016296 <_printf_float+0xba>
 801645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801645e:	b923      	cbnz	r3, 801646a <_printf_float+0x28e>
 8016460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016462:	b913      	cbnz	r3, 801646a <_printf_float+0x28e>
 8016464:	6823      	ldr	r3, [r4, #0]
 8016466:	07d9      	lsls	r1, r3, #31
 8016468:	d5d8      	bpl.n	801641c <_printf_float+0x240>
 801646a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801646e:	4631      	mov	r1, r6
 8016470:	4628      	mov	r0, r5
 8016472:	47b8      	blx	r7
 8016474:	3001      	adds	r0, #1
 8016476:	f43f af0e 	beq.w	8016296 <_printf_float+0xba>
 801647a:	f04f 0900 	mov.w	r9, #0
 801647e:	f104 0a1a 	add.w	sl, r4, #26
 8016482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016484:	425b      	negs	r3, r3
 8016486:	454b      	cmp	r3, r9
 8016488:	dc01      	bgt.n	801648e <_printf_float+0x2b2>
 801648a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801648c:	e794      	b.n	80163b8 <_printf_float+0x1dc>
 801648e:	2301      	movs	r3, #1
 8016490:	4652      	mov	r2, sl
 8016492:	4631      	mov	r1, r6
 8016494:	4628      	mov	r0, r5
 8016496:	47b8      	blx	r7
 8016498:	3001      	adds	r0, #1
 801649a:	f43f aefc 	beq.w	8016296 <_printf_float+0xba>
 801649e:	f109 0901 	add.w	r9, r9, #1
 80164a2:	e7ee      	b.n	8016482 <_printf_float+0x2a6>
 80164a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80164a8:	429a      	cmp	r2, r3
 80164aa:	bfa8      	it	ge
 80164ac:	461a      	movge	r2, r3
 80164ae:	2a00      	cmp	r2, #0
 80164b0:	4691      	mov	r9, r2
 80164b2:	dd07      	ble.n	80164c4 <_printf_float+0x2e8>
 80164b4:	4613      	mov	r3, r2
 80164b6:	4631      	mov	r1, r6
 80164b8:	4642      	mov	r2, r8
 80164ba:	4628      	mov	r0, r5
 80164bc:	47b8      	blx	r7
 80164be:	3001      	adds	r0, #1
 80164c0:	f43f aee9 	beq.w	8016296 <_printf_float+0xba>
 80164c4:	f104 031a 	add.w	r3, r4, #26
 80164c8:	f04f 0b00 	mov.w	fp, #0
 80164cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164d0:	9306      	str	r3, [sp, #24]
 80164d2:	e015      	b.n	8016500 <_printf_float+0x324>
 80164d4:	7fefffff 	.word	0x7fefffff
 80164d8:	0801b6cc 	.word	0x0801b6cc
 80164dc:	0801b6c8 	.word	0x0801b6c8
 80164e0:	0801b6d4 	.word	0x0801b6d4
 80164e4:	0801b6d0 	.word	0x0801b6d0
 80164e8:	0801b6d8 	.word	0x0801b6d8
 80164ec:	2301      	movs	r3, #1
 80164ee:	9a06      	ldr	r2, [sp, #24]
 80164f0:	4631      	mov	r1, r6
 80164f2:	4628      	mov	r0, r5
 80164f4:	47b8      	blx	r7
 80164f6:	3001      	adds	r0, #1
 80164f8:	f43f aecd 	beq.w	8016296 <_printf_float+0xba>
 80164fc:	f10b 0b01 	add.w	fp, fp, #1
 8016500:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016504:	ebaa 0309 	sub.w	r3, sl, r9
 8016508:	455b      	cmp	r3, fp
 801650a:	dcef      	bgt.n	80164ec <_printf_float+0x310>
 801650c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016510:	429a      	cmp	r2, r3
 8016512:	44d0      	add	r8, sl
 8016514:	db15      	blt.n	8016542 <_printf_float+0x366>
 8016516:	6823      	ldr	r3, [r4, #0]
 8016518:	07da      	lsls	r2, r3, #31
 801651a:	d412      	bmi.n	8016542 <_printf_float+0x366>
 801651c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801651e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016520:	eba3 020a 	sub.w	r2, r3, sl
 8016524:	eba3 0a01 	sub.w	sl, r3, r1
 8016528:	4592      	cmp	sl, r2
 801652a:	bfa8      	it	ge
 801652c:	4692      	movge	sl, r2
 801652e:	f1ba 0f00 	cmp.w	sl, #0
 8016532:	dc0e      	bgt.n	8016552 <_printf_float+0x376>
 8016534:	f04f 0800 	mov.w	r8, #0
 8016538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801653c:	f104 091a 	add.w	r9, r4, #26
 8016540:	e019      	b.n	8016576 <_printf_float+0x39a>
 8016542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016546:	4631      	mov	r1, r6
 8016548:	4628      	mov	r0, r5
 801654a:	47b8      	blx	r7
 801654c:	3001      	adds	r0, #1
 801654e:	d1e5      	bne.n	801651c <_printf_float+0x340>
 8016550:	e6a1      	b.n	8016296 <_printf_float+0xba>
 8016552:	4653      	mov	r3, sl
 8016554:	4642      	mov	r2, r8
 8016556:	4631      	mov	r1, r6
 8016558:	4628      	mov	r0, r5
 801655a:	47b8      	blx	r7
 801655c:	3001      	adds	r0, #1
 801655e:	d1e9      	bne.n	8016534 <_printf_float+0x358>
 8016560:	e699      	b.n	8016296 <_printf_float+0xba>
 8016562:	2301      	movs	r3, #1
 8016564:	464a      	mov	r2, r9
 8016566:	4631      	mov	r1, r6
 8016568:	4628      	mov	r0, r5
 801656a:	47b8      	blx	r7
 801656c:	3001      	adds	r0, #1
 801656e:	f43f ae92 	beq.w	8016296 <_printf_float+0xba>
 8016572:	f108 0801 	add.w	r8, r8, #1
 8016576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801657a:	1a9b      	subs	r3, r3, r2
 801657c:	eba3 030a 	sub.w	r3, r3, sl
 8016580:	4543      	cmp	r3, r8
 8016582:	dcee      	bgt.n	8016562 <_printf_float+0x386>
 8016584:	e74a      	b.n	801641c <_printf_float+0x240>
 8016586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016588:	2a01      	cmp	r2, #1
 801658a:	dc01      	bgt.n	8016590 <_printf_float+0x3b4>
 801658c:	07db      	lsls	r3, r3, #31
 801658e:	d53a      	bpl.n	8016606 <_printf_float+0x42a>
 8016590:	2301      	movs	r3, #1
 8016592:	4642      	mov	r2, r8
 8016594:	4631      	mov	r1, r6
 8016596:	4628      	mov	r0, r5
 8016598:	47b8      	blx	r7
 801659a:	3001      	adds	r0, #1
 801659c:	f43f ae7b 	beq.w	8016296 <_printf_float+0xba>
 80165a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165a4:	4631      	mov	r1, r6
 80165a6:	4628      	mov	r0, r5
 80165a8:	47b8      	blx	r7
 80165aa:	3001      	adds	r0, #1
 80165ac:	f108 0801 	add.w	r8, r8, #1
 80165b0:	f43f ae71 	beq.w	8016296 <_printf_float+0xba>
 80165b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165b6:	2200      	movs	r2, #0
 80165b8:	f103 3aff 	add.w	sl, r3, #4294967295
 80165bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80165c0:	2300      	movs	r3, #0
 80165c2:	f7ea fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80165c6:	b9c8      	cbnz	r0, 80165fc <_printf_float+0x420>
 80165c8:	4653      	mov	r3, sl
 80165ca:	4642      	mov	r2, r8
 80165cc:	4631      	mov	r1, r6
 80165ce:	4628      	mov	r0, r5
 80165d0:	47b8      	blx	r7
 80165d2:	3001      	adds	r0, #1
 80165d4:	d10e      	bne.n	80165f4 <_printf_float+0x418>
 80165d6:	e65e      	b.n	8016296 <_printf_float+0xba>
 80165d8:	2301      	movs	r3, #1
 80165da:	4652      	mov	r2, sl
 80165dc:	4631      	mov	r1, r6
 80165de:	4628      	mov	r0, r5
 80165e0:	47b8      	blx	r7
 80165e2:	3001      	adds	r0, #1
 80165e4:	f43f ae57 	beq.w	8016296 <_printf_float+0xba>
 80165e8:	f108 0801 	add.w	r8, r8, #1
 80165ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165ee:	3b01      	subs	r3, #1
 80165f0:	4543      	cmp	r3, r8
 80165f2:	dcf1      	bgt.n	80165d8 <_printf_float+0x3fc>
 80165f4:	464b      	mov	r3, r9
 80165f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80165fa:	e6de      	b.n	80163ba <_printf_float+0x1de>
 80165fc:	f04f 0800 	mov.w	r8, #0
 8016600:	f104 0a1a 	add.w	sl, r4, #26
 8016604:	e7f2      	b.n	80165ec <_printf_float+0x410>
 8016606:	2301      	movs	r3, #1
 8016608:	e7df      	b.n	80165ca <_printf_float+0x3ee>
 801660a:	2301      	movs	r3, #1
 801660c:	464a      	mov	r2, r9
 801660e:	4631      	mov	r1, r6
 8016610:	4628      	mov	r0, r5
 8016612:	47b8      	blx	r7
 8016614:	3001      	adds	r0, #1
 8016616:	f43f ae3e 	beq.w	8016296 <_printf_float+0xba>
 801661a:	f108 0801 	add.w	r8, r8, #1
 801661e:	68e3      	ldr	r3, [r4, #12]
 8016620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016622:	1a9b      	subs	r3, r3, r2
 8016624:	4543      	cmp	r3, r8
 8016626:	dcf0      	bgt.n	801660a <_printf_float+0x42e>
 8016628:	e6fc      	b.n	8016424 <_printf_float+0x248>
 801662a:	f04f 0800 	mov.w	r8, #0
 801662e:	f104 0919 	add.w	r9, r4, #25
 8016632:	e7f4      	b.n	801661e <_printf_float+0x442>
 8016634:	2900      	cmp	r1, #0
 8016636:	f43f ae8b 	beq.w	8016350 <_printf_float+0x174>
 801663a:	2300      	movs	r3, #0
 801663c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016640:	ab09      	add	r3, sp, #36	; 0x24
 8016642:	9300      	str	r3, [sp, #0]
 8016644:	ec49 8b10 	vmov	d0, r8, r9
 8016648:	6022      	str	r2, [r4, #0]
 801664a:	f8cd a004 	str.w	sl, [sp, #4]
 801664e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016652:	4628      	mov	r0, r5
 8016654:	f7ff fd2e 	bl	80160b4 <__cvt>
 8016658:	4680      	mov	r8, r0
 801665a:	e648      	b.n	80162ee <_printf_float+0x112>

0801665c <_printf_common>:
 801665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016660:	4691      	mov	r9, r2
 8016662:	461f      	mov	r7, r3
 8016664:	688a      	ldr	r2, [r1, #8]
 8016666:	690b      	ldr	r3, [r1, #16]
 8016668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801666c:	4293      	cmp	r3, r2
 801666e:	bfb8      	it	lt
 8016670:	4613      	movlt	r3, r2
 8016672:	f8c9 3000 	str.w	r3, [r9]
 8016676:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801667a:	4606      	mov	r6, r0
 801667c:	460c      	mov	r4, r1
 801667e:	b112      	cbz	r2, 8016686 <_printf_common+0x2a>
 8016680:	3301      	adds	r3, #1
 8016682:	f8c9 3000 	str.w	r3, [r9]
 8016686:	6823      	ldr	r3, [r4, #0]
 8016688:	0699      	lsls	r1, r3, #26
 801668a:	bf42      	ittt	mi
 801668c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016690:	3302      	addmi	r3, #2
 8016692:	f8c9 3000 	strmi.w	r3, [r9]
 8016696:	6825      	ldr	r5, [r4, #0]
 8016698:	f015 0506 	ands.w	r5, r5, #6
 801669c:	d107      	bne.n	80166ae <_printf_common+0x52>
 801669e:	f104 0a19 	add.w	sl, r4, #25
 80166a2:	68e3      	ldr	r3, [r4, #12]
 80166a4:	f8d9 2000 	ldr.w	r2, [r9]
 80166a8:	1a9b      	subs	r3, r3, r2
 80166aa:	42ab      	cmp	r3, r5
 80166ac:	dc28      	bgt.n	8016700 <_printf_common+0xa4>
 80166ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80166b2:	6822      	ldr	r2, [r4, #0]
 80166b4:	3300      	adds	r3, #0
 80166b6:	bf18      	it	ne
 80166b8:	2301      	movne	r3, #1
 80166ba:	0692      	lsls	r2, r2, #26
 80166bc:	d42d      	bmi.n	801671a <_printf_common+0xbe>
 80166be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80166c2:	4639      	mov	r1, r7
 80166c4:	4630      	mov	r0, r6
 80166c6:	47c0      	blx	r8
 80166c8:	3001      	adds	r0, #1
 80166ca:	d020      	beq.n	801670e <_printf_common+0xb2>
 80166cc:	6823      	ldr	r3, [r4, #0]
 80166ce:	68e5      	ldr	r5, [r4, #12]
 80166d0:	f8d9 2000 	ldr.w	r2, [r9]
 80166d4:	f003 0306 	and.w	r3, r3, #6
 80166d8:	2b04      	cmp	r3, #4
 80166da:	bf08      	it	eq
 80166dc:	1aad      	subeq	r5, r5, r2
 80166de:	68a3      	ldr	r3, [r4, #8]
 80166e0:	6922      	ldr	r2, [r4, #16]
 80166e2:	bf0c      	ite	eq
 80166e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80166e8:	2500      	movne	r5, #0
 80166ea:	4293      	cmp	r3, r2
 80166ec:	bfc4      	itt	gt
 80166ee:	1a9b      	subgt	r3, r3, r2
 80166f0:	18ed      	addgt	r5, r5, r3
 80166f2:	f04f 0900 	mov.w	r9, #0
 80166f6:	341a      	adds	r4, #26
 80166f8:	454d      	cmp	r5, r9
 80166fa:	d11a      	bne.n	8016732 <_printf_common+0xd6>
 80166fc:	2000      	movs	r0, #0
 80166fe:	e008      	b.n	8016712 <_printf_common+0xb6>
 8016700:	2301      	movs	r3, #1
 8016702:	4652      	mov	r2, sl
 8016704:	4639      	mov	r1, r7
 8016706:	4630      	mov	r0, r6
 8016708:	47c0      	blx	r8
 801670a:	3001      	adds	r0, #1
 801670c:	d103      	bne.n	8016716 <_printf_common+0xba>
 801670e:	f04f 30ff 	mov.w	r0, #4294967295
 8016712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016716:	3501      	adds	r5, #1
 8016718:	e7c3      	b.n	80166a2 <_printf_common+0x46>
 801671a:	18e1      	adds	r1, r4, r3
 801671c:	1c5a      	adds	r2, r3, #1
 801671e:	2030      	movs	r0, #48	; 0x30
 8016720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016724:	4422      	add	r2, r4
 8016726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801672a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801672e:	3302      	adds	r3, #2
 8016730:	e7c5      	b.n	80166be <_printf_common+0x62>
 8016732:	2301      	movs	r3, #1
 8016734:	4622      	mov	r2, r4
 8016736:	4639      	mov	r1, r7
 8016738:	4630      	mov	r0, r6
 801673a:	47c0      	blx	r8
 801673c:	3001      	adds	r0, #1
 801673e:	d0e6      	beq.n	801670e <_printf_common+0xb2>
 8016740:	f109 0901 	add.w	r9, r9, #1
 8016744:	e7d8      	b.n	80166f8 <_printf_common+0x9c>
	...

08016748 <_printf_i>:
 8016748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801674c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016750:	460c      	mov	r4, r1
 8016752:	7e09      	ldrb	r1, [r1, #24]
 8016754:	b085      	sub	sp, #20
 8016756:	296e      	cmp	r1, #110	; 0x6e
 8016758:	4617      	mov	r7, r2
 801675a:	4606      	mov	r6, r0
 801675c:	4698      	mov	r8, r3
 801675e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016760:	f000 80b3 	beq.w	80168ca <_printf_i+0x182>
 8016764:	d822      	bhi.n	80167ac <_printf_i+0x64>
 8016766:	2963      	cmp	r1, #99	; 0x63
 8016768:	d036      	beq.n	80167d8 <_printf_i+0x90>
 801676a:	d80a      	bhi.n	8016782 <_printf_i+0x3a>
 801676c:	2900      	cmp	r1, #0
 801676e:	f000 80b9 	beq.w	80168e4 <_printf_i+0x19c>
 8016772:	2958      	cmp	r1, #88	; 0x58
 8016774:	f000 8083 	beq.w	801687e <_printf_i+0x136>
 8016778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801677c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016780:	e032      	b.n	80167e8 <_printf_i+0xa0>
 8016782:	2964      	cmp	r1, #100	; 0x64
 8016784:	d001      	beq.n	801678a <_printf_i+0x42>
 8016786:	2969      	cmp	r1, #105	; 0x69
 8016788:	d1f6      	bne.n	8016778 <_printf_i+0x30>
 801678a:	6820      	ldr	r0, [r4, #0]
 801678c:	6813      	ldr	r3, [r2, #0]
 801678e:	0605      	lsls	r5, r0, #24
 8016790:	f103 0104 	add.w	r1, r3, #4
 8016794:	d52a      	bpl.n	80167ec <_printf_i+0xa4>
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	6011      	str	r1, [r2, #0]
 801679a:	2b00      	cmp	r3, #0
 801679c:	da03      	bge.n	80167a6 <_printf_i+0x5e>
 801679e:	222d      	movs	r2, #45	; 0x2d
 80167a0:	425b      	negs	r3, r3
 80167a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80167a6:	486f      	ldr	r0, [pc, #444]	; (8016964 <_printf_i+0x21c>)
 80167a8:	220a      	movs	r2, #10
 80167aa:	e039      	b.n	8016820 <_printf_i+0xd8>
 80167ac:	2973      	cmp	r1, #115	; 0x73
 80167ae:	f000 809d 	beq.w	80168ec <_printf_i+0x1a4>
 80167b2:	d808      	bhi.n	80167c6 <_printf_i+0x7e>
 80167b4:	296f      	cmp	r1, #111	; 0x6f
 80167b6:	d020      	beq.n	80167fa <_printf_i+0xb2>
 80167b8:	2970      	cmp	r1, #112	; 0x70
 80167ba:	d1dd      	bne.n	8016778 <_printf_i+0x30>
 80167bc:	6823      	ldr	r3, [r4, #0]
 80167be:	f043 0320 	orr.w	r3, r3, #32
 80167c2:	6023      	str	r3, [r4, #0]
 80167c4:	e003      	b.n	80167ce <_printf_i+0x86>
 80167c6:	2975      	cmp	r1, #117	; 0x75
 80167c8:	d017      	beq.n	80167fa <_printf_i+0xb2>
 80167ca:	2978      	cmp	r1, #120	; 0x78
 80167cc:	d1d4      	bne.n	8016778 <_printf_i+0x30>
 80167ce:	2378      	movs	r3, #120	; 0x78
 80167d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80167d4:	4864      	ldr	r0, [pc, #400]	; (8016968 <_printf_i+0x220>)
 80167d6:	e055      	b.n	8016884 <_printf_i+0x13c>
 80167d8:	6813      	ldr	r3, [r2, #0]
 80167da:	1d19      	adds	r1, r3, #4
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	6011      	str	r1, [r2, #0]
 80167e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167e8:	2301      	movs	r3, #1
 80167ea:	e08c      	b.n	8016906 <_printf_i+0x1be>
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	6011      	str	r1, [r2, #0]
 80167f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80167f4:	bf18      	it	ne
 80167f6:	b21b      	sxthne	r3, r3
 80167f8:	e7cf      	b.n	801679a <_printf_i+0x52>
 80167fa:	6813      	ldr	r3, [r2, #0]
 80167fc:	6825      	ldr	r5, [r4, #0]
 80167fe:	1d18      	adds	r0, r3, #4
 8016800:	6010      	str	r0, [r2, #0]
 8016802:	0628      	lsls	r0, r5, #24
 8016804:	d501      	bpl.n	801680a <_printf_i+0xc2>
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	e002      	b.n	8016810 <_printf_i+0xc8>
 801680a:	0668      	lsls	r0, r5, #25
 801680c:	d5fb      	bpl.n	8016806 <_printf_i+0xbe>
 801680e:	881b      	ldrh	r3, [r3, #0]
 8016810:	4854      	ldr	r0, [pc, #336]	; (8016964 <_printf_i+0x21c>)
 8016812:	296f      	cmp	r1, #111	; 0x6f
 8016814:	bf14      	ite	ne
 8016816:	220a      	movne	r2, #10
 8016818:	2208      	moveq	r2, #8
 801681a:	2100      	movs	r1, #0
 801681c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016820:	6865      	ldr	r5, [r4, #4]
 8016822:	60a5      	str	r5, [r4, #8]
 8016824:	2d00      	cmp	r5, #0
 8016826:	f2c0 8095 	blt.w	8016954 <_printf_i+0x20c>
 801682a:	6821      	ldr	r1, [r4, #0]
 801682c:	f021 0104 	bic.w	r1, r1, #4
 8016830:	6021      	str	r1, [r4, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d13d      	bne.n	80168b2 <_printf_i+0x16a>
 8016836:	2d00      	cmp	r5, #0
 8016838:	f040 808e 	bne.w	8016958 <_printf_i+0x210>
 801683c:	4665      	mov	r5, ip
 801683e:	2a08      	cmp	r2, #8
 8016840:	d10b      	bne.n	801685a <_printf_i+0x112>
 8016842:	6823      	ldr	r3, [r4, #0]
 8016844:	07db      	lsls	r3, r3, #31
 8016846:	d508      	bpl.n	801685a <_printf_i+0x112>
 8016848:	6923      	ldr	r3, [r4, #16]
 801684a:	6862      	ldr	r2, [r4, #4]
 801684c:	429a      	cmp	r2, r3
 801684e:	bfde      	ittt	le
 8016850:	2330      	movle	r3, #48	; 0x30
 8016852:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016856:	f105 35ff 	addle.w	r5, r5, #4294967295
 801685a:	ebac 0305 	sub.w	r3, ip, r5
 801685e:	6123      	str	r3, [r4, #16]
 8016860:	f8cd 8000 	str.w	r8, [sp]
 8016864:	463b      	mov	r3, r7
 8016866:	aa03      	add	r2, sp, #12
 8016868:	4621      	mov	r1, r4
 801686a:	4630      	mov	r0, r6
 801686c:	f7ff fef6 	bl	801665c <_printf_common>
 8016870:	3001      	adds	r0, #1
 8016872:	d14d      	bne.n	8016910 <_printf_i+0x1c8>
 8016874:	f04f 30ff 	mov.w	r0, #4294967295
 8016878:	b005      	add	sp, #20
 801687a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801687e:	4839      	ldr	r0, [pc, #228]	; (8016964 <_printf_i+0x21c>)
 8016880:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016884:	6813      	ldr	r3, [r2, #0]
 8016886:	6821      	ldr	r1, [r4, #0]
 8016888:	1d1d      	adds	r5, r3, #4
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	6015      	str	r5, [r2, #0]
 801688e:	060a      	lsls	r2, r1, #24
 8016890:	d50b      	bpl.n	80168aa <_printf_i+0x162>
 8016892:	07ca      	lsls	r2, r1, #31
 8016894:	bf44      	itt	mi
 8016896:	f041 0120 	orrmi.w	r1, r1, #32
 801689a:	6021      	strmi	r1, [r4, #0]
 801689c:	b91b      	cbnz	r3, 80168a6 <_printf_i+0x15e>
 801689e:	6822      	ldr	r2, [r4, #0]
 80168a0:	f022 0220 	bic.w	r2, r2, #32
 80168a4:	6022      	str	r2, [r4, #0]
 80168a6:	2210      	movs	r2, #16
 80168a8:	e7b7      	b.n	801681a <_printf_i+0xd2>
 80168aa:	064d      	lsls	r5, r1, #25
 80168ac:	bf48      	it	mi
 80168ae:	b29b      	uxthmi	r3, r3
 80168b0:	e7ef      	b.n	8016892 <_printf_i+0x14a>
 80168b2:	4665      	mov	r5, ip
 80168b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80168b8:	fb02 3311 	mls	r3, r2, r1, r3
 80168bc:	5cc3      	ldrb	r3, [r0, r3]
 80168be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80168c2:	460b      	mov	r3, r1
 80168c4:	2900      	cmp	r1, #0
 80168c6:	d1f5      	bne.n	80168b4 <_printf_i+0x16c>
 80168c8:	e7b9      	b.n	801683e <_printf_i+0xf6>
 80168ca:	6813      	ldr	r3, [r2, #0]
 80168cc:	6825      	ldr	r5, [r4, #0]
 80168ce:	6961      	ldr	r1, [r4, #20]
 80168d0:	1d18      	adds	r0, r3, #4
 80168d2:	6010      	str	r0, [r2, #0]
 80168d4:	0628      	lsls	r0, r5, #24
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	d501      	bpl.n	80168de <_printf_i+0x196>
 80168da:	6019      	str	r1, [r3, #0]
 80168dc:	e002      	b.n	80168e4 <_printf_i+0x19c>
 80168de:	066a      	lsls	r2, r5, #25
 80168e0:	d5fb      	bpl.n	80168da <_printf_i+0x192>
 80168e2:	8019      	strh	r1, [r3, #0]
 80168e4:	2300      	movs	r3, #0
 80168e6:	6123      	str	r3, [r4, #16]
 80168e8:	4665      	mov	r5, ip
 80168ea:	e7b9      	b.n	8016860 <_printf_i+0x118>
 80168ec:	6813      	ldr	r3, [r2, #0]
 80168ee:	1d19      	adds	r1, r3, #4
 80168f0:	6011      	str	r1, [r2, #0]
 80168f2:	681d      	ldr	r5, [r3, #0]
 80168f4:	6862      	ldr	r2, [r4, #4]
 80168f6:	2100      	movs	r1, #0
 80168f8:	4628      	mov	r0, r5
 80168fa:	f7e9 fc71 	bl	80001e0 <memchr>
 80168fe:	b108      	cbz	r0, 8016904 <_printf_i+0x1bc>
 8016900:	1b40      	subs	r0, r0, r5
 8016902:	6060      	str	r0, [r4, #4]
 8016904:	6863      	ldr	r3, [r4, #4]
 8016906:	6123      	str	r3, [r4, #16]
 8016908:	2300      	movs	r3, #0
 801690a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801690e:	e7a7      	b.n	8016860 <_printf_i+0x118>
 8016910:	6923      	ldr	r3, [r4, #16]
 8016912:	462a      	mov	r2, r5
 8016914:	4639      	mov	r1, r7
 8016916:	4630      	mov	r0, r6
 8016918:	47c0      	blx	r8
 801691a:	3001      	adds	r0, #1
 801691c:	d0aa      	beq.n	8016874 <_printf_i+0x12c>
 801691e:	6823      	ldr	r3, [r4, #0]
 8016920:	079b      	lsls	r3, r3, #30
 8016922:	d413      	bmi.n	801694c <_printf_i+0x204>
 8016924:	68e0      	ldr	r0, [r4, #12]
 8016926:	9b03      	ldr	r3, [sp, #12]
 8016928:	4298      	cmp	r0, r3
 801692a:	bfb8      	it	lt
 801692c:	4618      	movlt	r0, r3
 801692e:	e7a3      	b.n	8016878 <_printf_i+0x130>
 8016930:	2301      	movs	r3, #1
 8016932:	464a      	mov	r2, r9
 8016934:	4639      	mov	r1, r7
 8016936:	4630      	mov	r0, r6
 8016938:	47c0      	blx	r8
 801693a:	3001      	adds	r0, #1
 801693c:	d09a      	beq.n	8016874 <_printf_i+0x12c>
 801693e:	3501      	adds	r5, #1
 8016940:	68e3      	ldr	r3, [r4, #12]
 8016942:	9a03      	ldr	r2, [sp, #12]
 8016944:	1a9b      	subs	r3, r3, r2
 8016946:	42ab      	cmp	r3, r5
 8016948:	dcf2      	bgt.n	8016930 <_printf_i+0x1e8>
 801694a:	e7eb      	b.n	8016924 <_printf_i+0x1dc>
 801694c:	2500      	movs	r5, #0
 801694e:	f104 0919 	add.w	r9, r4, #25
 8016952:	e7f5      	b.n	8016940 <_printf_i+0x1f8>
 8016954:	2b00      	cmp	r3, #0
 8016956:	d1ac      	bne.n	80168b2 <_printf_i+0x16a>
 8016958:	7803      	ldrb	r3, [r0, #0]
 801695a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801695e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016962:	e76c      	b.n	801683e <_printf_i+0xf6>
 8016964:	0801b6da 	.word	0x0801b6da
 8016968:	0801b6eb 	.word	0x0801b6eb

0801696c <_scanf_float>:
 801696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016970:	469a      	mov	sl, r3
 8016972:	688b      	ldr	r3, [r1, #8]
 8016974:	4616      	mov	r6, r2
 8016976:	1e5a      	subs	r2, r3, #1
 8016978:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801697c:	b087      	sub	sp, #28
 801697e:	bf83      	ittte	hi
 8016980:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016984:	189b      	addhi	r3, r3, r2
 8016986:	9301      	strhi	r3, [sp, #4]
 8016988:	2300      	movls	r3, #0
 801698a:	bf86      	itte	hi
 801698c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016990:	608b      	strhi	r3, [r1, #8]
 8016992:	9301      	strls	r3, [sp, #4]
 8016994:	680b      	ldr	r3, [r1, #0]
 8016996:	4688      	mov	r8, r1
 8016998:	f04f 0b00 	mov.w	fp, #0
 801699c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80169a0:	f848 3b1c 	str.w	r3, [r8], #28
 80169a4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80169a8:	4607      	mov	r7, r0
 80169aa:	460c      	mov	r4, r1
 80169ac:	4645      	mov	r5, r8
 80169ae:	465a      	mov	r2, fp
 80169b0:	46d9      	mov	r9, fp
 80169b2:	f8cd b008 	str.w	fp, [sp, #8]
 80169b6:	68a1      	ldr	r1, [r4, #8]
 80169b8:	b181      	cbz	r1, 80169dc <_scanf_float+0x70>
 80169ba:	6833      	ldr	r3, [r6, #0]
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	2b49      	cmp	r3, #73	; 0x49
 80169c0:	d071      	beq.n	8016aa6 <_scanf_float+0x13a>
 80169c2:	d84d      	bhi.n	8016a60 <_scanf_float+0xf4>
 80169c4:	2b39      	cmp	r3, #57	; 0x39
 80169c6:	d840      	bhi.n	8016a4a <_scanf_float+0xde>
 80169c8:	2b31      	cmp	r3, #49	; 0x31
 80169ca:	f080 8088 	bcs.w	8016ade <_scanf_float+0x172>
 80169ce:	2b2d      	cmp	r3, #45	; 0x2d
 80169d0:	f000 8090 	beq.w	8016af4 <_scanf_float+0x188>
 80169d4:	d815      	bhi.n	8016a02 <_scanf_float+0x96>
 80169d6:	2b2b      	cmp	r3, #43	; 0x2b
 80169d8:	f000 808c 	beq.w	8016af4 <_scanf_float+0x188>
 80169dc:	f1b9 0f00 	cmp.w	r9, #0
 80169e0:	d003      	beq.n	80169ea <_scanf_float+0x7e>
 80169e2:	6823      	ldr	r3, [r4, #0]
 80169e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80169e8:	6023      	str	r3, [r4, #0]
 80169ea:	3a01      	subs	r2, #1
 80169ec:	2a01      	cmp	r2, #1
 80169ee:	f200 80ea 	bhi.w	8016bc6 <_scanf_float+0x25a>
 80169f2:	4545      	cmp	r5, r8
 80169f4:	f200 80dc 	bhi.w	8016bb0 <_scanf_float+0x244>
 80169f8:	2601      	movs	r6, #1
 80169fa:	4630      	mov	r0, r6
 80169fc:	b007      	add	sp, #28
 80169fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a02:	2b2e      	cmp	r3, #46	; 0x2e
 8016a04:	f000 809f 	beq.w	8016b46 <_scanf_float+0x1da>
 8016a08:	2b30      	cmp	r3, #48	; 0x30
 8016a0a:	d1e7      	bne.n	80169dc <_scanf_float+0x70>
 8016a0c:	6820      	ldr	r0, [r4, #0]
 8016a0e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016a12:	d064      	beq.n	8016ade <_scanf_float+0x172>
 8016a14:	9b01      	ldr	r3, [sp, #4]
 8016a16:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016a1a:	6020      	str	r0, [r4, #0]
 8016a1c:	f109 0901 	add.w	r9, r9, #1
 8016a20:	b11b      	cbz	r3, 8016a2a <_scanf_float+0xbe>
 8016a22:	3b01      	subs	r3, #1
 8016a24:	3101      	adds	r1, #1
 8016a26:	9301      	str	r3, [sp, #4]
 8016a28:	60a1      	str	r1, [r4, #8]
 8016a2a:	68a3      	ldr	r3, [r4, #8]
 8016a2c:	3b01      	subs	r3, #1
 8016a2e:	60a3      	str	r3, [r4, #8]
 8016a30:	6923      	ldr	r3, [r4, #16]
 8016a32:	3301      	adds	r3, #1
 8016a34:	6123      	str	r3, [r4, #16]
 8016a36:	6873      	ldr	r3, [r6, #4]
 8016a38:	3b01      	subs	r3, #1
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	6073      	str	r3, [r6, #4]
 8016a3e:	f340 80ac 	ble.w	8016b9a <_scanf_float+0x22e>
 8016a42:	6833      	ldr	r3, [r6, #0]
 8016a44:	3301      	adds	r3, #1
 8016a46:	6033      	str	r3, [r6, #0]
 8016a48:	e7b5      	b.n	80169b6 <_scanf_float+0x4a>
 8016a4a:	2b45      	cmp	r3, #69	; 0x45
 8016a4c:	f000 8085 	beq.w	8016b5a <_scanf_float+0x1ee>
 8016a50:	2b46      	cmp	r3, #70	; 0x46
 8016a52:	d06a      	beq.n	8016b2a <_scanf_float+0x1be>
 8016a54:	2b41      	cmp	r3, #65	; 0x41
 8016a56:	d1c1      	bne.n	80169dc <_scanf_float+0x70>
 8016a58:	2a01      	cmp	r2, #1
 8016a5a:	d1bf      	bne.n	80169dc <_scanf_float+0x70>
 8016a5c:	2202      	movs	r2, #2
 8016a5e:	e046      	b.n	8016aee <_scanf_float+0x182>
 8016a60:	2b65      	cmp	r3, #101	; 0x65
 8016a62:	d07a      	beq.n	8016b5a <_scanf_float+0x1ee>
 8016a64:	d818      	bhi.n	8016a98 <_scanf_float+0x12c>
 8016a66:	2b54      	cmp	r3, #84	; 0x54
 8016a68:	d066      	beq.n	8016b38 <_scanf_float+0x1cc>
 8016a6a:	d811      	bhi.n	8016a90 <_scanf_float+0x124>
 8016a6c:	2b4e      	cmp	r3, #78	; 0x4e
 8016a6e:	d1b5      	bne.n	80169dc <_scanf_float+0x70>
 8016a70:	2a00      	cmp	r2, #0
 8016a72:	d146      	bne.n	8016b02 <_scanf_float+0x196>
 8016a74:	f1b9 0f00 	cmp.w	r9, #0
 8016a78:	d145      	bne.n	8016b06 <_scanf_float+0x19a>
 8016a7a:	6821      	ldr	r1, [r4, #0]
 8016a7c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016a80:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016a84:	d13f      	bne.n	8016b06 <_scanf_float+0x19a>
 8016a86:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016a8a:	6021      	str	r1, [r4, #0]
 8016a8c:	2201      	movs	r2, #1
 8016a8e:	e02e      	b.n	8016aee <_scanf_float+0x182>
 8016a90:	2b59      	cmp	r3, #89	; 0x59
 8016a92:	d01e      	beq.n	8016ad2 <_scanf_float+0x166>
 8016a94:	2b61      	cmp	r3, #97	; 0x61
 8016a96:	e7de      	b.n	8016a56 <_scanf_float+0xea>
 8016a98:	2b6e      	cmp	r3, #110	; 0x6e
 8016a9a:	d0e9      	beq.n	8016a70 <_scanf_float+0x104>
 8016a9c:	d815      	bhi.n	8016aca <_scanf_float+0x15e>
 8016a9e:	2b66      	cmp	r3, #102	; 0x66
 8016aa0:	d043      	beq.n	8016b2a <_scanf_float+0x1be>
 8016aa2:	2b69      	cmp	r3, #105	; 0x69
 8016aa4:	d19a      	bne.n	80169dc <_scanf_float+0x70>
 8016aa6:	f1bb 0f00 	cmp.w	fp, #0
 8016aaa:	d138      	bne.n	8016b1e <_scanf_float+0x1b2>
 8016aac:	f1b9 0f00 	cmp.w	r9, #0
 8016ab0:	d197      	bne.n	80169e2 <_scanf_float+0x76>
 8016ab2:	6821      	ldr	r1, [r4, #0]
 8016ab4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016ab8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016abc:	d195      	bne.n	80169ea <_scanf_float+0x7e>
 8016abe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016ac2:	6021      	str	r1, [r4, #0]
 8016ac4:	f04f 0b01 	mov.w	fp, #1
 8016ac8:	e011      	b.n	8016aee <_scanf_float+0x182>
 8016aca:	2b74      	cmp	r3, #116	; 0x74
 8016acc:	d034      	beq.n	8016b38 <_scanf_float+0x1cc>
 8016ace:	2b79      	cmp	r3, #121	; 0x79
 8016ad0:	d184      	bne.n	80169dc <_scanf_float+0x70>
 8016ad2:	f1bb 0f07 	cmp.w	fp, #7
 8016ad6:	d181      	bne.n	80169dc <_scanf_float+0x70>
 8016ad8:	f04f 0b08 	mov.w	fp, #8
 8016adc:	e007      	b.n	8016aee <_scanf_float+0x182>
 8016ade:	eb12 0f0b 	cmn.w	r2, fp
 8016ae2:	f47f af7b 	bne.w	80169dc <_scanf_float+0x70>
 8016ae6:	6821      	ldr	r1, [r4, #0]
 8016ae8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016aec:	6021      	str	r1, [r4, #0]
 8016aee:	702b      	strb	r3, [r5, #0]
 8016af0:	3501      	adds	r5, #1
 8016af2:	e79a      	b.n	8016a2a <_scanf_float+0xbe>
 8016af4:	6821      	ldr	r1, [r4, #0]
 8016af6:	0608      	lsls	r0, r1, #24
 8016af8:	f57f af70 	bpl.w	80169dc <_scanf_float+0x70>
 8016afc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016b00:	e7f4      	b.n	8016aec <_scanf_float+0x180>
 8016b02:	2a02      	cmp	r2, #2
 8016b04:	d047      	beq.n	8016b96 <_scanf_float+0x22a>
 8016b06:	f1bb 0f01 	cmp.w	fp, #1
 8016b0a:	d003      	beq.n	8016b14 <_scanf_float+0x1a8>
 8016b0c:	f1bb 0f04 	cmp.w	fp, #4
 8016b10:	f47f af64 	bne.w	80169dc <_scanf_float+0x70>
 8016b14:	f10b 0b01 	add.w	fp, fp, #1
 8016b18:	fa5f fb8b 	uxtb.w	fp, fp
 8016b1c:	e7e7      	b.n	8016aee <_scanf_float+0x182>
 8016b1e:	f1bb 0f03 	cmp.w	fp, #3
 8016b22:	d0f7      	beq.n	8016b14 <_scanf_float+0x1a8>
 8016b24:	f1bb 0f05 	cmp.w	fp, #5
 8016b28:	e7f2      	b.n	8016b10 <_scanf_float+0x1a4>
 8016b2a:	f1bb 0f02 	cmp.w	fp, #2
 8016b2e:	f47f af55 	bne.w	80169dc <_scanf_float+0x70>
 8016b32:	f04f 0b03 	mov.w	fp, #3
 8016b36:	e7da      	b.n	8016aee <_scanf_float+0x182>
 8016b38:	f1bb 0f06 	cmp.w	fp, #6
 8016b3c:	f47f af4e 	bne.w	80169dc <_scanf_float+0x70>
 8016b40:	f04f 0b07 	mov.w	fp, #7
 8016b44:	e7d3      	b.n	8016aee <_scanf_float+0x182>
 8016b46:	6821      	ldr	r1, [r4, #0]
 8016b48:	0588      	lsls	r0, r1, #22
 8016b4a:	f57f af47 	bpl.w	80169dc <_scanf_float+0x70>
 8016b4e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016b52:	6021      	str	r1, [r4, #0]
 8016b54:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b58:	e7c9      	b.n	8016aee <_scanf_float+0x182>
 8016b5a:	6821      	ldr	r1, [r4, #0]
 8016b5c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016b60:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016b64:	d006      	beq.n	8016b74 <_scanf_float+0x208>
 8016b66:	0548      	lsls	r0, r1, #21
 8016b68:	f57f af38 	bpl.w	80169dc <_scanf_float+0x70>
 8016b6c:	f1b9 0f00 	cmp.w	r9, #0
 8016b70:	f43f af3b 	beq.w	80169ea <_scanf_float+0x7e>
 8016b74:	0588      	lsls	r0, r1, #22
 8016b76:	bf58      	it	pl
 8016b78:	9802      	ldrpl	r0, [sp, #8]
 8016b7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016b7e:	bf58      	it	pl
 8016b80:	eba9 0000 	subpl.w	r0, r9, r0
 8016b84:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016b88:	bf58      	it	pl
 8016b8a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016b8e:	6021      	str	r1, [r4, #0]
 8016b90:	f04f 0900 	mov.w	r9, #0
 8016b94:	e7ab      	b.n	8016aee <_scanf_float+0x182>
 8016b96:	2203      	movs	r2, #3
 8016b98:	e7a9      	b.n	8016aee <_scanf_float+0x182>
 8016b9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b9e:	9205      	str	r2, [sp, #20]
 8016ba0:	4631      	mov	r1, r6
 8016ba2:	4638      	mov	r0, r7
 8016ba4:	4798      	blx	r3
 8016ba6:	9a05      	ldr	r2, [sp, #20]
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	f43f af04 	beq.w	80169b6 <_scanf_float+0x4a>
 8016bae:	e715      	b.n	80169dc <_scanf_float+0x70>
 8016bb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bb4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016bb8:	4632      	mov	r2, r6
 8016bba:	4638      	mov	r0, r7
 8016bbc:	4798      	blx	r3
 8016bbe:	6923      	ldr	r3, [r4, #16]
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	6123      	str	r3, [r4, #16]
 8016bc4:	e715      	b.n	80169f2 <_scanf_float+0x86>
 8016bc6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016bca:	2b06      	cmp	r3, #6
 8016bcc:	d80a      	bhi.n	8016be4 <_scanf_float+0x278>
 8016bce:	f1bb 0f02 	cmp.w	fp, #2
 8016bd2:	d968      	bls.n	8016ca6 <_scanf_float+0x33a>
 8016bd4:	f1ab 0b03 	sub.w	fp, fp, #3
 8016bd8:	fa5f fb8b 	uxtb.w	fp, fp
 8016bdc:	eba5 0b0b 	sub.w	fp, r5, fp
 8016be0:	455d      	cmp	r5, fp
 8016be2:	d14b      	bne.n	8016c7c <_scanf_float+0x310>
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	05da      	lsls	r2, r3, #23
 8016be8:	d51f      	bpl.n	8016c2a <_scanf_float+0x2be>
 8016bea:	055b      	lsls	r3, r3, #21
 8016bec:	d468      	bmi.n	8016cc0 <_scanf_float+0x354>
 8016bee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016bf2:	6923      	ldr	r3, [r4, #16]
 8016bf4:	2965      	cmp	r1, #101	; 0x65
 8016bf6:	f103 33ff 	add.w	r3, r3, #4294967295
 8016bfa:	f105 3bff 	add.w	fp, r5, #4294967295
 8016bfe:	6123      	str	r3, [r4, #16]
 8016c00:	d00d      	beq.n	8016c1e <_scanf_float+0x2b2>
 8016c02:	2945      	cmp	r1, #69	; 0x45
 8016c04:	d00b      	beq.n	8016c1e <_scanf_float+0x2b2>
 8016c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c0a:	4632      	mov	r2, r6
 8016c0c:	4638      	mov	r0, r7
 8016c0e:	4798      	blx	r3
 8016c10:	6923      	ldr	r3, [r4, #16]
 8016c12:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016c16:	3b01      	subs	r3, #1
 8016c18:	f1a5 0b02 	sub.w	fp, r5, #2
 8016c1c:	6123      	str	r3, [r4, #16]
 8016c1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c22:	4632      	mov	r2, r6
 8016c24:	4638      	mov	r0, r7
 8016c26:	4798      	blx	r3
 8016c28:	465d      	mov	r5, fp
 8016c2a:	6826      	ldr	r6, [r4, #0]
 8016c2c:	f016 0610 	ands.w	r6, r6, #16
 8016c30:	d17a      	bne.n	8016d28 <_scanf_float+0x3bc>
 8016c32:	702e      	strb	r6, [r5, #0]
 8016c34:	6823      	ldr	r3, [r4, #0]
 8016c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c3e:	d142      	bne.n	8016cc6 <_scanf_float+0x35a>
 8016c40:	9b02      	ldr	r3, [sp, #8]
 8016c42:	eba9 0303 	sub.w	r3, r9, r3
 8016c46:	425a      	negs	r2, r3
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d149      	bne.n	8016ce0 <_scanf_float+0x374>
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	4641      	mov	r1, r8
 8016c50:	4638      	mov	r0, r7
 8016c52:	f000 fee9 	bl	8017a28 <_strtod_r>
 8016c56:	6825      	ldr	r5, [r4, #0]
 8016c58:	f8da 3000 	ldr.w	r3, [sl]
 8016c5c:	f015 0f02 	tst.w	r5, #2
 8016c60:	f103 0204 	add.w	r2, r3, #4
 8016c64:	ec59 8b10 	vmov	r8, r9, d0
 8016c68:	f8ca 2000 	str.w	r2, [sl]
 8016c6c:	d043      	beq.n	8016cf6 <_scanf_float+0x38a>
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	e9c3 8900 	strd	r8, r9, [r3]
 8016c74:	68e3      	ldr	r3, [r4, #12]
 8016c76:	3301      	adds	r3, #1
 8016c78:	60e3      	str	r3, [r4, #12]
 8016c7a:	e6be      	b.n	80169fa <_scanf_float+0x8e>
 8016c7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c84:	4632      	mov	r2, r6
 8016c86:	4638      	mov	r0, r7
 8016c88:	4798      	blx	r3
 8016c8a:	6923      	ldr	r3, [r4, #16]
 8016c8c:	3b01      	subs	r3, #1
 8016c8e:	6123      	str	r3, [r4, #16]
 8016c90:	e7a6      	b.n	8016be0 <_scanf_float+0x274>
 8016c92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c96:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c9a:	4632      	mov	r2, r6
 8016c9c:	4638      	mov	r0, r7
 8016c9e:	4798      	blx	r3
 8016ca0:	6923      	ldr	r3, [r4, #16]
 8016ca2:	3b01      	subs	r3, #1
 8016ca4:	6123      	str	r3, [r4, #16]
 8016ca6:	4545      	cmp	r5, r8
 8016ca8:	d8f3      	bhi.n	8016c92 <_scanf_float+0x326>
 8016caa:	e6a5      	b.n	80169f8 <_scanf_float+0x8c>
 8016cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016cb4:	4632      	mov	r2, r6
 8016cb6:	4638      	mov	r0, r7
 8016cb8:	4798      	blx	r3
 8016cba:	6923      	ldr	r3, [r4, #16]
 8016cbc:	3b01      	subs	r3, #1
 8016cbe:	6123      	str	r3, [r4, #16]
 8016cc0:	4545      	cmp	r5, r8
 8016cc2:	d8f3      	bhi.n	8016cac <_scanf_float+0x340>
 8016cc4:	e698      	b.n	80169f8 <_scanf_float+0x8c>
 8016cc6:	9b03      	ldr	r3, [sp, #12]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d0bf      	beq.n	8016c4c <_scanf_float+0x2e0>
 8016ccc:	9904      	ldr	r1, [sp, #16]
 8016cce:	230a      	movs	r3, #10
 8016cd0:	4632      	mov	r2, r6
 8016cd2:	3101      	adds	r1, #1
 8016cd4:	4638      	mov	r0, r7
 8016cd6:	f000 ff33 	bl	8017b40 <_strtol_r>
 8016cda:	9b03      	ldr	r3, [sp, #12]
 8016cdc:	9d04      	ldr	r5, [sp, #16]
 8016cde:	1ac2      	subs	r2, r0, r3
 8016ce0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016ce4:	429d      	cmp	r5, r3
 8016ce6:	bf28      	it	cs
 8016ce8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016cec:	490f      	ldr	r1, [pc, #60]	; (8016d2c <_scanf_float+0x3c0>)
 8016cee:	4628      	mov	r0, r5
 8016cf0:	f000 f868 	bl	8016dc4 <siprintf>
 8016cf4:	e7aa      	b.n	8016c4c <_scanf_float+0x2e0>
 8016cf6:	f015 0504 	ands.w	r5, r5, #4
 8016cfa:	d1b8      	bne.n	8016c6e <_scanf_float+0x302>
 8016cfc:	681f      	ldr	r7, [r3, #0]
 8016cfe:	ee10 2a10 	vmov	r2, s0
 8016d02:	464b      	mov	r3, r9
 8016d04:	ee10 0a10 	vmov	r0, s0
 8016d08:	4649      	mov	r1, r9
 8016d0a:	f7e9 ff0f 	bl	8000b2c <__aeabi_dcmpun>
 8016d0e:	b128      	cbz	r0, 8016d1c <_scanf_float+0x3b0>
 8016d10:	4628      	mov	r0, r5
 8016d12:	f000 f81d 	bl	8016d50 <nanf>
 8016d16:	ed87 0a00 	vstr	s0, [r7]
 8016d1a:	e7ab      	b.n	8016c74 <_scanf_float+0x308>
 8016d1c:	4640      	mov	r0, r8
 8016d1e:	4649      	mov	r1, r9
 8016d20:	f7e9 ff62 	bl	8000be8 <__aeabi_d2f>
 8016d24:	6038      	str	r0, [r7, #0]
 8016d26:	e7a5      	b.n	8016c74 <_scanf_float+0x308>
 8016d28:	2600      	movs	r6, #0
 8016d2a:	e666      	b.n	80169fa <_scanf_float+0x8e>
 8016d2c:	0801b6fc 	.word	0x0801b6fc

08016d30 <_sbrk_r>:
 8016d30:	b538      	push	{r3, r4, r5, lr}
 8016d32:	4c06      	ldr	r4, [pc, #24]	; (8016d4c <_sbrk_r+0x1c>)
 8016d34:	2300      	movs	r3, #0
 8016d36:	4605      	mov	r5, r0
 8016d38:	4608      	mov	r0, r1
 8016d3a:	6023      	str	r3, [r4, #0]
 8016d3c:	f7f4 fad0 	bl	800b2e0 <_sbrk>
 8016d40:	1c43      	adds	r3, r0, #1
 8016d42:	d102      	bne.n	8016d4a <_sbrk_r+0x1a>
 8016d44:	6823      	ldr	r3, [r4, #0]
 8016d46:	b103      	cbz	r3, 8016d4a <_sbrk_r+0x1a>
 8016d48:	602b      	str	r3, [r5, #0]
 8016d4a:	bd38      	pop	{r3, r4, r5, pc}
 8016d4c:	2000c9c4 	.word	0x2000c9c4

08016d50 <nanf>:
 8016d50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016d58 <nanf+0x8>
 8016d54:	4770      	bx	lr
 8016d56:	bf00      	nop
 8016d58:	7fc00000 	.word	0x7fc00000

08016d5c <sniprintf>:
 8016d5c:	b40c      	push	{r2, r3}
 8016d5e:	b530      	push	{r4, r5, lr}
 8016d60:	4b17      	ldr	r3, [pc, #92]	; (8016dc0 <sniprintf+0x64>)
 8016d62:	1e0c      	subs	r4, r1, #0
 8016d64:	b09d      	sub	sp, #116	; 0x74
 8016d66:	681d      	ldr	r5, [r3, #0]
 8016d68:	da08      	bge.n	8016d7c <sniprintf+0x20>
 8016d6a:	238b      	movs	r3, #139	; 0x8b
 8016d6c:	602b      	str	r3, [r5, #0]
 8016d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8016d72:	b01d      	add	sp, #116	; 0x74
 8016d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d78:	b002      	add	sp, #8
 8016d7a:	4770      	bx	lr
 8016d7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016d80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016d84:	bf14      	ite	ne
 8016d86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016d8a:	4623      	moveq	r3, r4
 8016d8c:	9304      	str	r3, [sp, #16]
 8016d8e:	9307      	str	r3, [sp, #28]
 8016d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d94:	9002      	str	r0, [sp, #8]
 8016d96:	9006      	str	r0, [sp, #24]
 8016d98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016d9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016d9e:	ab21      	add	r3, sp, #132	; 0x84
 8016da0:	a902      	add	r1, sp, #8
 8016da2:	4628      	mov	r0, r5
 8016da4:	9301      	str	r3, [sp, #4]
 8016da6:	f002 fcd9 	bl	801975c <_svfiprintf_r>
 8016daa:	1c43      	adds	r3, r0, #1
 8016dac:	bfbc      	itt	lt
 8016dae:	238b      	movlt	r3, #139	; 0x8b
 8016db0:	602b      	strlt	r3, [r5, #0]
 8016db2:	2c00      	cmp	r4, #0
 8016db4:	d0dd      	beq.n	8016d72 <sniprintf+0x16>
 8016db6:	9b02      	ldr	r3, [sp, #8]
 8016db8:	2200      	movs	r2, #0
 8016dba:	701a      	strb	r2, [r3, #0]
 8016dbc:	e7d9      	b.n	8016d72 <sniprintf+0x16>
 8016dbe:	bf00      	nop
 8016dc0:	20000a0c 	.word	0x20000a0c

08016dc4 <siprintf>:
 8016dc4:	b40e      	push	{r1, r2, r3}
 8016dc6:	b500      	push	{lr}
 8016dc8:	b09c      	sub	sp, #112	; 0x70
 8016dca:	ab1d      	add	r3, sp, #116	; 0x74
 8016dcc:	9002      	str	r0, [sp, #8]
 8016dce:	9006      	str	r0, [sp, #24]
 8016dd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016dd4:	4809      	ldr	r0, [pc, #36]	; (8016dfc <siprintf+0x38>)
 8016dd6:	9107      	str	r1, [sp, #28]
 8016dd8:	9104      	str	r1, [sp, #16]
 8016dda:	4909      	ldr	r1, [pc, #36]	; (8016e00 <siprintf+0x3c>)
 8016ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016de0:	9105      	str	r1, [sp, #20]
 8016de2:	6800      	ldr	r0, [r0, #0]
 8016de4:	9301      	str	r3, [sp, #4]
 8016de6:	a902      	add	r1, sp, #8
 8016de8:	f002 fcb8 	bl	801975c <_svfiprintf_r>
 8016dec:	9b02      	ldr	r3, [sp, #8]
 8016dee:	2200      	movs	r2, #0
 8016df0:	701a      	strb	r2, [r3, #0]
 8016df2:	b01c      	add	sp, #112	; 0x70
 8016df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016df8:	b003      	add	sp, #12
 8016dfa:	4770      	bx	lr
 8016dfc:	20000a0c 	.word	0x20000a0c
 8016e00:	ffff0208 	.word	0xffff0208

08016e04 <sulp>:
 8016e04:	b570      	push	{r4, r5, r6, lr}
 8016e06:	4604      	mov	r4, r0
 8016e08:	460d      	mov	r5, r1
 8016e0a:	ec45 4b10 	vmov	d0, r4, r5
 8016e0e:	4616      	mov	r6, r2
 8016e10:	f002 fb08 	bl	8019424 <__ulp>
 8016e14:	ec51 0b10 	vmov	r0, r1, d0
 8016e18:	b17e      	cbz	r6, 8016e3a <sulp+0x36>
 8016e1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	dd09      	ble.n	8016e3a <sulp+0x36>
 8016e26:	051b      	lsls	r3, r3, #20
 8016e28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016e2c:	2400      	movs	r4, #0
 8016e2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016e32:	4622      	mov	r2, r4
 8016e34:	462b      	mov	r3, r5
 8016e36:	f7e9 fbdf 	bl	80005f8 <__aeabi_dmul>
 8016e3a:	bd70      	pop	{r4, r5, r6, pc}
 8016e3c:	0000      	movs	r0, r0
	...

08016e40 <_strtod_l>:
 8016e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e44:	461f      	mov	r7, r3
 8016e46:	b0a1      	sub	sp, #132	; 0x84
 8016e48:	2300      	movs	r3, #0
 8016e4a:	4681      	mov	r9, r0
 8016e4c:	4638      	mov	r0, r7
 8016e4e:	460e      	mov	r6, r1
 8016e50:	9217      	str	r2, [sp, #92]	; 0x5c
 8016e52:	931c      	str	r3, [sp, #112]	; 0x70
 8016e54:	f001 fff5 	bl	8018e42 <__localeconv_l>
 8016e58:	4680      	mov	r8, r0
 8016e5a:	6800      	ldr	r0, [r0, #0]
 8016e5c:	f7e9 f9b8 	bl	80001d0 <strlen>
 8016e60:	f04f 0a00 	mov.w	sl, #0
 8016e64:	4604      	mov	r4, r0
 8016e66:	f04f 0b00 	mov.w	fp, #0
 8016e6a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e6e:	781a      	ldrb	r2, [r3, #0]
 8016e70:	2a0d      	cmp	r2, #13
 8016e72:	d832      	bhi.n	8016eda <_strtod_l+0x9a>
 8016e74:	2a09      	cmp	r2, #9
 8016e76:	d236      	bcs.n	8016ee6 <_strtod_l+0xa6>
 8016e78:	2a00      	cmp	r2, #0
 8016e7a:	d03e      	beq.n	8016efa <_strtod_l+0xba>
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8016e80:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016e82:	782b      	ldrb	r3, [r5, #0]
 8016e84:	2b30      	cmp	r3, #48	; 0x30
 8016e86:	f040 80ac 	bne.w	8016fe2 <_strtod_l+0x1a2>
 8016e8a:	786b      	ldrb	r3, [r5, #1]
 8016e8c:	2b58      	cmp	r3, #88	; 0x58
 8016e8e:	d001      	beq.n	8016e94 <_strtod_l+0x54>
 8016e90:	2b78      	cmp	r3, #120	; 0x78
 8016e92:	d167      	bne.n	8016f64 <_strtod_l+0x124>
 8016e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e96:	9301      	str	r3, [sp, #4]
 8016e98:	ab1c      	add	r3, sp, #112	; 0x70
 8016e9a:	9300      	str	r3, [sp, #0]
 8016e9c:	9702      	str	r7, [sp, #8]
 8016e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8016ea0:	4a88      	ldr	r2, [pc, #544]	; (80170c4 <_strtod_l+0x284>)
 8016ea2:	a91b      	add	r1, sp, #108	; 0x6c
 8016ea4:	4648      	mov	r0, r9
 8016ea6:	f001 fcf2 	bl	801888e <__gethex>
 8016eaa:	f010 0407 	ands.w	r4, r0, #7
 8016eae:	4606      	mov	r6, r0
 8016eb0:	d005      	beq.n	8016ebe <_strtod_l+0x7e>
 8016eb2:	2c06      	cmp	r4, #6
 8016eb4:	d12b      	bne.n	8016f0e <_strtod_l+0xce>
 8016eb6:	3501      	adds	r5, #1
 8016eb8:	2300      	movs	r3, #0
 8016eba:	951b      	str	r5, [sp, #108]	; 0x6c
 8016ebc:	930d      	str	r3, [sp, #52]	; 0x34
 8016ebe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	f040 859a 	bne.w	80179fa <_strtod_l+0xbba>
 8016ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ec8:	b1e3      	cbz	r3, 8016f04 <_strtod_l+0xc4>
 8016eca:	4652      	mov	r2, sl
 8016ecc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016ed0:	ec43 2b10 	vmov	d0, r2, r3
 8016ed4:	b021      	add	sp, #132	; 0x84
 8016ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eda:	2a2b      	cmp	r2, #43	; 0x2b
 8016edc:	d015      	beq.n	8016f0a <_strtod_l+0xca>
 8016ede:	2a2d      	cmp	r2, #45	; 0x2d
 8016ee0:	d004      	beq.n	8016eec <_strtod_l+0xac>
 8016ee2:	2a20      	cmp	r2, #32
 8016ee4:	d1ca      	bne.n	8016e7c <_strtod_l+0x3c>
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016eea:	e7bf      	b.n	8016e6c <_strtod_l+0x2c>
 8016eec:	2201      	movs	r2, #1
 8016eee:	920d      	str	r2, [sp, #52]	; 0x34
 8016ef0:	1c5a      	adds	r2, r3, #1
 8016ef2:	921b      	str	r2, [sp, #108]	; 0x6c
 8016ef4:	785b      	ldrb	r3, [r3, #1]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d1c2      	bne.n	8016e80 <_strtod_l+0x40>
 8016efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016efc:	961b      	str	r6, [sp, #108]	; 0x6c
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	f040 8579 	bne.w	80179f6 <_strtod_l+0xbb6>
 8016f04:	4652      	mov	r2, sl
 8016f06:	465b      	mov	r3, fp
 8016f08:	e7e2      	b.n	8016ed0 <_strtod_l+0x90>
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	e7ef      	b.n	8016eee <_strtod_l+0xae>
 8016f0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016f10:	b13a      	cbz	r2, 8016f22 <_strtod_l+0xe2>
 8016f12:	2135      	movs	r1, #53	; 0x35
 8016f14:	a81e      	add	r0, sp, #120	; 0x78
 8016f16:	f002 fb7d 	bl	8019614 <__copybits>
 8016f1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f1c:	4648      	mov	r0, r9
 8016f1e:	f001 ffe9 	bl	8018ef4 <_Bfree>
 8016f22:	3c01      	subs	r4, #1
 8016f24:	2c04      	cmp	r4, #4
 8016f26:	d806      	bhi.n	8016f36 <_strtod_l+0xf6>
 8016f28:	e8df f004 	tbb	[pc, r4]
 8016f2c:	1714030a 	.word	0x1714030a
 8016f30:	0a          	.byte	0x0a
 8016f31:	00          	.byte	0x00
 8016f32:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016f36:	0730      	lsls	r0, r6, #28
 8016f38:	d5c1      	bpl.n	8016ebe <_strtod_l+0x7e>
 8016f3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016f3e:	e7be      	b.n	8016ebe <_strtod_l+0x7e>
 8016f40:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016f44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016f46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016f4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016f4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016f52:	e7f0      	b.n	8016f36 <_strtod_l+0xf6>
 8016f54:	f8df b170 	ldr.w	fp, [pc, #368]	; 80170c8 <_strtod_l+0x288>
 8016f58:	e7ed      	b.n	8016f36 <_strtod_l+0xf6>
 8016f5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016f5e:	f04f 3aff 	mov.w	sl, #4294967295
 8016f62:	e7e8      	b.n	8016f36 <_strtod_l+0xf6>
 8016f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f66:	1c5a      	adds	r2, r3, #1
 8016f68:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f6a:	785b      	ldrb	r3, [r3, #1]
 8016f6c:	2b30      	cmp	r3, #48	; 0x30
 8016f6e:	d0f9      	beq.n	8016f64 <_strtod_l+0x124>
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d0a4      	beq.n	8016ebe <_strtod_l+0x7e>
 8016f74:	2301      	movs	r3, #1
 8016f76:	2500      	movs	r5, #0
 8016f78:	9306      	str	r3, [sp, #24]
 8016f7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f7c:	9308      	str	r3, [sp, #32]
 8016f7e:	9507      	str	r5, [sp, #28]
 8016f80:	9505      	str	r5, [sp, #20]
 8016f82:	220a      	movs	r2, #10
 8016f84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016f86:	7807      	ldrb	r7, [r0, #0]
 8016f88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016f8c:	b2d9      	uxtb	r1, r3
 8016f8e:	2909      	cmp	r1, #9
 8016f90:	d929      	bls.n	8016fe6 <_strtod_l+0x1a6>
 8016f92:	4622      	mov	r2, r4
 8016f94:	f8d8 1000 	ldr.w	r1, [r8]
 8016f98:	f002 fcd8 	bl	801994c <strncmp>
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	d031      	beq.n	8017004 <_strtod_l+0x1c4>
 8016fa0:	2000      	movs	r0, #0
 8016fa2:	9c05      	ldr	r4, [sp, #20]
 8016fa4:	9004      	str	r0, [sp, #16]
 8016fa6:	463b      	mov	r3, r7
 8016fa8:	4602      	mov	r2, r0
 8016faa:	2b65      	cmp	r3, #101	; 0x65
 8016fac:	d001      	beq.n	8016fb2 <_strtod_l+0x172>
 8016fae:	2b45      	cmp	r3, #69	; 0x45
 8016fb0:	d114      	bne.n	8016fdc <_strtod_l+0x19c>
 8016fb2:	b924      	cbnz	r4, 8016fbe <_strtod_l+0x17e>
 8016fb4:	b910      	cbnz	r0, 8016fbc <_strtod_l+0x17c>
 8016fb6:	9b06      	ldr	r3, [sp, #24]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d09e      	beq.n	8016efa <_strtod_l+0xba>
 8016fbc:	2400      	movs	r4, #0
 8016fbe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016fc0:	1c73      	adds	r3, r6, #1
 8016fc2:	931b      	str	r3, [sp, #108]	; 0x6c
 8016fc4:	7873      	ldrb	r3, [r6, #1]
 8016fc6:	2b2b      	cmp	r3, #43	; 0x2b
 8016fc8:	d078      	beq.n	80170bc <_strtod_l+0x27c>
 8016fca:	2b2d      	cmp	r3, #45	; 0x2d
 8016fcc:	d070      	beq.n	80170b0 <_strtod_l+0x270>
 8016fce:	f04f 0c00 	mov.w	ip, #0
 8016fd2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016fd6:	2f09      	cmp	r7, #9
 8016fd8:	d97c      	bls.n	80170d4 <_strtod_l+0x294>
 8016fda:	961b      	str	r6, [sp, #108]	; 0x6c
 8016fdc:	f04f 0e00 	mov.w	lr, #0
 8016fe0:	e09a      	b.n	8017118 <_strtod_l+0x2d8>
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	e7c7      	b.n	8016f76 <_strtod_l+0x136>
 8016fe6:	9905      	ldr	r1, [sp, #20]
 8016fe8:	2908      	cmp	r1, #8
 8016fea:	bfdd      	ittte	le
 8016fec:	9907      	ldrle	r1, [sp, #28]
 8016fee:	fb02 3301 	mlale	r3, r2, r1, r3
 8016ff2:	9307      	strle	r3, [sp, #28]
 8016ff4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016ff8:	9b05      	ldr	r3, [sp, #20]
 8016ffa:	3001      	adds	r0, #1
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	9305      	str	r3, [sp, #20]
 8017000:	901b      	str	r0, [sp, #108]	; 0x6c
 8017002:	e7bf      	b.n	8016f84 <_strtod_l+0x144>
 8017004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017006:	191a      	adds	r2, r3, r4
 8017008:	921b      	str	r2, [sp, #108]	; 0x6c
 801700a:	9a05      	ldr	r2, [sp, #20]
 801700c:	5d1b      	ldrb	r3, [r3, r4]
 801700e:	2a00      	cmp	r2, #0
 8017010:	d037      	beq.n	8017082 <_strtod_l+0x242>
 8017012:	9c05      	ldr	r4, [sp, #20]
 8017014:	4602      	mov	r2, r0
 8017016:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801701a:	2909      	cmp	r1, #9
 801701c:	d913      	bls.n	8017046 <_strtod_l+0x206>
 801701e:	2101      	movs	r1, #1
 8017020:	9104      	str	r1, [sp, #16]
 8017022:	e7c2      	b.n	8016faa <_strtod_l+0x16a>
 8017024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017026:	1c5a      	adds	r2, r3, #1
 8017028:	921b      	str	r2, [sp, #108]	; 0x6c
 801702a:	785b      	ldrb	r3, [r3, #1]
 801702c:	3001      	adds	r0, #1
 801702e:	2b30      	cmp	r3, #48	; 0x30
 8017030:	d0f8      	beq.n	8017024 <_strtod_l+0x1e4>
 8017032:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017036:	2a08      	cmp	r2, #8
 8017038:	f200 84e4 	bhi.w	8017a04 <_strtod_l+0xbc4>
 801703c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801703e:	9208      	str	r2, [sp, #32]
 8017040:	4602      	mov	r2, r0
 8017042:	2000      	movs	r0, #0
 8017044:	4604      	mov	r4, r0
 8017046:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801704a:	f100 0101 	add.w	r1, r0, #1
 801704e:	d012      	beq.n	8017076 <_strtod_l+0x236>
 8017050:	440a      	add	r2, r1
 8017052:	eb00 0c04 	add.w	ip, r0, r4
 8017056:	4621      	mov	r1, r4
 8017058:	270a      	movs	r7, #10
 801705a:	458c      	cmp	ip, r1
 801705c:	d113      	bne.n	8017086 <_strtod_l+0x246>
 801705e:	1821      	adds	r1, r4, r0
 8017060:	2908      	cmp	r1, #8
 8017062:	f104 0401 	add.w	r4, r4, #1
 8017066:	4404      	add	r4, r0
 8017068:	dc19      	bgt.n	801709e <_strtod_l+0x25e>
 801706a:	9b07      	ldr	r3, [sp, #28]
 801706c:	210a      	movs	r1, #10
 801706e:	fb01 e303 	mla	r3, r1, r3, lr
 8017072:	9307      	str	r3, [sp, #28]
 8017074:	2100      	movs	r1, #0
 8017076:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017078:	1c58      	adds	r0, r3, #1
 801707a:	901b      	str	r0, [sp, #108]	; 0x6c
 801707c:	785b      	ldrb	r3, [r3, #1]
 801707e:	4608      	mov	r0, r1
 8017080:	e7c9      	b.n	8017016 <_strtod_l+0x1d6>
 8017082:	9805      	ldr	r0, [sp, #20]
 8017084:	e7d3      	b.n	801702e <_strtod_l+0x1ee>
 8017086:	2908      	cmp	r1, #8
 8017088:	f101 0101 	add.w	r1, r1, #1
 801708c:	dc03      	bgt.n	8017096 <_strtod_l+0x256>
 801708e:	9b07      	ldr	r3, [sp, #28]
 8017090:	437b      	muls	r3, r7
 8017092:	9307      	str	r3, [sp, #28]
 8017094:	e7e1      	b.n	801705a <_strtod_l+0x21a>
 8017096:	2910      	cmp	r1, #16
 8017098:	bfd8      	it	le
 801709a:	437d      	mulle	r5, r7
 801709c:	e7dd      	b.n	801705a <_strtod_l+0x21a>
 801709e:	2c10      	cmp	r4, #16
 80170a0:	bfdc      	itt	le
 80170a2:	210a      	movle	r1, #10
 80170a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80170a8:	e7e4      	b.n	8017074 <_strtod_l+0x234>
 80170aa:	2301      	movs	r3, #1
 80170ac:	9304      	str	r3, [sp, #16]
 80170ae:	e781      	b.n	8016fb4 <_strtod_l+0x174>
 80170b0:	f04f 0c01 	mov.w	ip, #1
 80170b4:	1cb3      	adds	r3, r6, #2
 80170b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80170b8:	78b3      	ldrb	r3, [r6, #2]
 80170ba:	e78a      	b.n	8016fd2 <_strtod_l+0x192>
 80170bc:	f04f 0c00 	mov.w	ip, #0
 80170c0:	e7f8      	b.n	80170b4 <_strtod_l+0x274>
 80170c2:	bf00      	nop
 80170c4:	0801b704 	.word	0x0801b704
 80170c8:	7ff00000 	.word	0x7ff00000
 80170cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170ce:	1c5f      	adds	r7, r3, #1
 80170d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80170d2:	785b      	ldrb	r3, [r3, #1]
 80170d4:	2b30      	cmp	r3, #48	; 0x30
 80170d6:	d0f9      	beq.n	80170cc <_strtod_l+0x28c>
 80170d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80170dc:	2f08      	cmp	r7, #8
 80170de:	f63f af7d 	bhi.w	8016fdc <_strtod_l+0x19c>
 80170e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80170e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170e8:	930a      	str	r3, [sp, #40]	; 0x28
 80170ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170ec:	1c5f      	adds	r7, r3, #1
 80170ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80170f0:	785b      	ldrb	r3, [r3, #1]
 80170f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80170f6:	f1b8 0f09 	cmp.w	r8, #9
 80170fa:	d937      	bls.n	801716c <_strtod_l+0x32c>
 80170fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80170fe:	1a7f      	subs	r7, r7, r1
 8017100:	2f08      	cmp	r7, #8
 8017102:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017106:	dc37      	bgt.n	8017178 <_strtod_l+0x338>
 8017108:	45be      	cmp	lr, r7
 801710a:	bfa8      	it	ge
 801710c:	46be      	movge	lr, r7
 801710e:	f1bc 0f00 	cmp.w	ip, #0
 8017112:	d001      	beq.n	8017118 <_strtod_l+0x2d8>
 8017114:	f1ce 0e00 	rsb	lr, lr, #0
 8017118:	2c00      	cmp	r4, #0
 801711a:	d151      	bne.n	80171c0 <_strtod_l+0x380>
 801711c:	2800      	cmp	r0, #0
 801711e:	f47f aece 	bne.w	8016ebe <_strtod_l+0x7e>
 8017122:	9a06      	ldr	r2, [sp, #24]
 8017124:	2a00      	cmp	r2, #0
 8017126:	f47f aeca 	bne.w	8016ebe <_strtod_l+0x7e>
 801712a:	9a04      	ldr	r2, [sp, #16]
 801712c:	2a00      	cmp	r2, #0
 801712e:	f47f aee4 	bne.w	8016efa <_strtod_l+0xba>
 8017132:	2b4e      	cmp	r3, #78	; 0x4e
 8017134:	d027      	beq.n	8017186 <_strtod_l+0x346>
 8017136:	dc21      	bgt.n	801717c <_strtod_l+0x33c>
 8017138:	2b49      	cmp	r3, #73	; 0x49
 801713a:	f47f aede 	bne.w	8016efa <_strtod_l+0xba>
 801713e:	49a0      	ldr	r1, [pc, #640]	; (80173c0 <_strtod_l+0x580>)
 8017140:	a81b      	add	r0, sp, #108	; 0x6c
 8017142:	f001 fdd7 	bl	8018cf4 <__match>
 8017146:	2800      	cmp	r0, #0
 8017148:	f43f aed7 	beq.w	8016efa <_strtod_l+0xba>
 801714c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801714e:	499d      	ldr	r1, [pc, #628]	; (80173c4 <_strtod_l+0x584>)
 8017150:	3b01      	subs	r3, #1
 8017152:	a81b      	add	r0, sp, #108	; 0x6c
 8017154:	931b      	str	r3, [sp, #108]	; 0x6c
 8017156:	f001 fdcd 	bl	8018cf4 <__match>
 801715a:	b910      	cbnz	r0, 8017162 <_strtod_l+0x322>
 801715c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801715e:	3301      	adds	r3, #1
 8017160:	931b      	str	r3, [sp, #108]	; 0x6c
 8017162:	f8df b274 	ldr.w	fp, [pc, #628]	; 80173d8 <_strtod_l+0x598>
 8017166:	f04f 0a00 	mov.w	sl, #0
 801716a:	e6a8      	b.n	8016ebe <_strtod_l+0x7e>
 801716c:	210a      	movs	r1, #10
 801716e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017172:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017176:	e7b8      	b.n	80170ea <_strtod_l+0x2aa>
 8017178:	46be      	mov	lr, r7
 801717a:	e7c8      	b.n	801710e <_strtod_l+0x2ce>
 801717c:	2b69      	cmp	r3, #105	; 0x69
 801717e:	d0de      	beq.n	801713e <_strtod_l+0x2fe>
 8017180:	2b6e      	cmp	r3, #110	; 0x6e
 8017182:	f47f aeba 	bne.w	8016efa <_strtod_l+0xba>
 8017186:	4990      	ldr	r1, [pc, #576]	; (80173c8 <_strtod_l+0x588>)
 8017188:	a81b      	add	r0, sp, #108	; 0x6c
 801718a:	f001 fdb3 	bl	8018cf4 <__match>
 801718e:	2800      	cmp	r0, #0
 8017190:	f43f aeb3 	beq.w	8016efa <_strtod_l+0xba>
 8017194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	2b28      	cmp	r3, #40	; 0x28
 801719a:	d10e      	bne.n	80171ba <_strtod_l+0x37a>
 801719c:	aa1e      	add	r2, sp, #120	; 0x78
 801719e:	498b      	ldr	r1, [pc, #556]	; (80173cc <_strtod_l+0x58c>)
 80171a0:	a81b      	add	r0, sp, #108	; 0x6c
 80171a2:	f001 fdbb 	bl	8018d1c <__hexnan>
 80171a6:	2805      	cmp	r0, #5
 80171a8:	d107      	bne.n	80171ba <_strtod_l+0x37a>
 80171aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80171ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80171b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80171b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80171b8:	e681      	b.n	8016ebe <_strtod_l+0x7e>
 80171ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80173e0 <_strtod_l+0x5a0>
 80171be:	e7d2      	b.n	8017166 <_strtod_l+0x326>
 80171c0:	ebae 0302 	sub.w	r3, lr, r2
 80171c4:	9306      	str	r3, [sp, #24]
 80171c6:	9b05      	ldr	r3, [sp, #20]
 80171c8:	9807      	ldr	r0, [sp, #28]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	bf08      	it	eq
 80171ce:	4623      	moveq	r3, r4
 80171d0:	2c10      	cmp	r4, #16
 80171d2:	9305      	str	r3, [sp, #20]
 80171d4:	46a0      	mov	r8, r4
 80171d6:	bfa8      	it	ge
 80171d8:	f04f 0810 	movge.w	r8, #16
 80171dc:	f7e9 f992 	bl	8000504 <__aeabi_ui2d>
 80171e0:	2c09      	cmp	r4, #9
 80171e2:	4682      	mov	sl, r0
 80171e4:	468b      	mov	fp, r1
 80171e6:	dc13      	bgt.n	8017210 <_strtod_l+0x3d0>
 80171e8:	9b06      	ldr	r3, [sp, #24]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	f43f ae67 	beq.w	8016ebe <_strtod_l+0x7e>
 80171f0:	9b06      	ldr	r3, [sp, #24]
 80171f2:	dd7a      	ble.n	80172ea <_strtod_l+0x4aa>
 80171f4:	2b16      	cmp	r3, #22
 80171f6:	dc61      	bgt.n	80172bc <_strtod_l+0x47c>
 80171f8:	4a75      	ldr	r2, [pc, #468]	; (80173d0 <_strtod_l+0x590>)
 80171fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80171fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8017202:	4652      	mov	r2, sl
 8017204:	465b      	mov	r3, fp
 8017206:	f7e9 f9f7 	bl	80005f8 <__aeabi_dmul>
 801720a:	4682      	mov	sl, r0
 801720c:	468b      	mov	fp, r1
 801720e:	e656      	b.n	8016ebe <_strtod_l+0x7e>
 8017210:	4b6f      	ldr	r3, [pc, #444]	; (80173d0 <_strtod_l+0x590>)
 8017212:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017216:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801721a:	f7e9 f9ed 	bl	80005f8 <__aeabi_dmul>
 801721e:	4606      	mov	r6, r0
 8017220:	4628      	mov	r0, r5
 8017222:	460f      	mov	r7, r1
 8017224:	f7e9 f96e 	bl	8000504 <__aeabi_ui2d>
 8017228:	4602      	mov	r2, r0
 801722a:	460b      	mov	r3, r1
 801722c:	4630      	mov	r0, r6
 801722e:	4639      	mov	r1, r7
 8017230:	f7e9 f82c 	bl	800028c <__adddf3>
 8017234:	2c0f      	cmp	r4, #15
 8017236:	4682      	mov	sl, r0
 8017238:	468b      	mov	fp, r1
 801723a:	ddd5      	ble.n	80171e8 <_strtod_l+0x3a8>
 801723c:	9b06      	ldr	r3, [sp, #24]
 801723e:	eba4 0808 	sub.w	r8, r4, r8
 8017242:	4498      	add	r8, r3
 8017244:	f1b8 0f00 	cmp.w	r8, #0
 8017248:	f340 8096 	ble.w	8017378 <_strtod_l+0x538>
 801724c:	f018 030f 	ands.w	r3, r8, #15
 8017250:	d00a      	beq.n	8017268 <_strtod_l+0x428>
 8017252:	495f      	ldr	r1, [pc, #380]	; (80173d0 <_strtod_l+0x590>)
 8017254:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017258:	4652      	mov	r2, sl
 801725a:	465b      	mov	r3, fp
 801725c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017260:	f7e9 f9ca 	bl	80005f8 <__aeabi_dmul>
 8017264:	4682      	mov	sl, r0
 8017266:	468b      	mov	fp, r1
 8017268:	f038 080f 	bics.w	r8, r8, #15
 801726c:	d073      	beq.n	8017356 <_strtod_l+0x516>
 801726e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017272:	dd47      	ble.n	8017304 <_strtod_l+0x4c4>
 8017274:	2400      	movs	r4, #0
 8017276:	46a0      	mov	r8, r4
 8017278:	9407      	str	r4, [sp, #28]
 801727a:	9405      	str	r4, [sp, #20]
 801727c:	2322      	movs	r3, #34	; 0x22
 801727e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80173d8 <_strtod_l+0x598>
 8017282:	f8c9 3000 	str.w	r3, [r9]
 8017286:	f04f 0a00 	mov.w	sl, #0
 801728a:	9b07      	ldr	r3, [sp, #28]
 801728c:	2b00      	cmp	r3, #0
 801728e:	f43f ae16 	beq.w	8016ebe <_strtod_l+0x7e>
 8017292:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017294:	4648      	mov	r0, r9
 8017296:	f001 fe2d 	bl	8018ef4 <_Bfree>
 801729a:	9905      	ldr	r1, [sp, #20]
 801729c:	4648      	mov	r0, r9
 801729e:	f001 fe29 	bl	8018ef4 <_Bfree>
 80172a2:	4641      	mov	r1, r8
 80172a4:	4648      	mov	r0, r9
 80172a6:	f001 fe25 	bl	8018ef4 <_Bfree>
 80172aa:	9907      	ldr	r1, [sp, #28]
 80172ac:	4648      	mov	r0, r9
 80172ae:	f001 fe21 	bl	8018ef4 <_Bfree>
 80172b2:	4621      	mov	r1, r4
 80172b4:	4648      	mov	r0, r9
 80172b6:	f001 fe1d 	bl	8018ef4 <_Bfree>
 80172ba:	e600      	b.n	8016ebe <_strtod_l+0x7e>
 80172bc:	9a06      	ldr	r2, [sp, #24]
 80172be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80172c2:	4293      	cmp	r3, r2
 80172c4:	dbba      	blt.n	801723c <_strtod_l+0x3fc>
 80172c6:	4d42      	ldr	r5, [pc, #264]	; (80173d0 <_strtod_l+0x590>)
 80172c8:	f1c4 040f 	rsb	r4, r4, #15
 80172cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80172d0:	4652      	mov	r2, sl
 80172d2:	465b      	mov	r3, fp
 80172d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80172d8:	f7e9 f98e 	bl	80005f8 <__aeabi_dmul>
 80172dc:	9b06      	ldr	r3, [sp, #24]
 80172de:	1b1c      	subs	r4, r3, r4
 80172e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80172e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80172e8:	e78d      	b.n	8017206 <_strtod_l+0x3c6>
 80172ea:	f113 0f16 	cmn.w	r3, #22
 80172ee:	dba5      	blt.n	801723c <_strtod_l+0x3fc>
 80172f0:	4a37      	ldr	r2, [pc, #220]	; (80173d0 <_strtod_l+0x590>)
 80172f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80172f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80172fa:	4650      	mov	r0, sl
 80172fc:	4659      	mov	r1, fp
 80172fe:	f7e9 faa5 	bl	800084c <__aeabi_ddiv>
 8017302:	e782      	b.n	801720a <_strtod_l+0x3ca>
 8017304:	2300      	movs	r3, #0
 8017306:	4e33      	ldr	r6, [pc, #204]	; (80173d4 <_strtod_l+0x594>)
 8017308:	ea4f 1828 	mov.w	r8, r8, asr #4
 801730c:	4650      	mov	r0, sl
 801730e:	4659      	mov	r1, fp
 8017310:	461d      	mov	r5, r3
 8017312:	f1b8 0f01 	cmp.w	r8, #1
 8017316:	dc21      	bgt.n	801735c <_strtod_l+0x51c>
 8017318:	b10b      	cbz	r3, 801731e <_strtod_l+0x4de>
 801731a:	4682      	mov	sl, r0
 801731c:	468b      	mov	fp, r1
 801731e:	4b2d      	ldr	r3, [pc, #180]	; (80173d4 <_strtod_l+0x594>)
 8017320:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017324:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017328:	4652      	mov	r2, sl
 801732a:	465b      	mov	r3, fp
 801732c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017330:	f7e9 f962 	bl	80005f8 <__aeabi_dmul>
 8017334:	4b28      	ldr	r3, [pc, #160]	; (80173d8 <_strtod_l+0x598>)
 8017336:	460a      	mov	r2, r1
 8017338:	400b      	ands	r3, r1
 801733a:	4928      	ldr	r1, [pc, #160]	; (80173dc <_strtod_l+0x59c>)
 801733c:	428b      	cmp	r3, r1
 801733e:	4682      	mov	sl, r0
 8017340:	d898      	bhi.n	8017274 <_strtod_l+0x434>
 8017342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017346:	428b      	cmp	r3, r1
 8017348:	bf86      	itte	hi
 801734a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80173e4 <_strtod_l+0x5a4>
 801734e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017352:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017356:	2300      	movs	r3, #0
 8017358:	9304      	str	r3, [sp, #16]
 801735a:	e077      	b.n	801744c <_strtod_l+0x60c>
 801735c:	f018 0f01 	tst.w	r8, #1
 8017360:	d006      	beq.n	8017370 <_strtod_l+0x530>
 8017362:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8017366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801736a:	f7e9 f945 	bl	80005f8 <__aeabi_dmul>
 801736e:	2301      	movs	r3, #1
 8017370:	3501      	adds	r5, #1
 8017372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017376:	e7cc      	b.n	8017312 <_strtod_l+0x4d2>
 8017378:	d0ed      	beq.n	8017356 <_strtod_l+0x516>
 801737a:	f1c8 0800 	rsb	r8, r8, #0
 801737e:	f018 020f 	ands.w	r2, r8, #15
 8017382:	d00a      	beq.n	801739a <_strtod_l+0x55a>
 8017384:	4b12      	ldr	r3, [pc, #72]	; (80173d0 <_strtod_l+0x590>)
 8017386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801738a:	4650      	mov	r0, sl
 801738c:	4659      	mov	r1, fp
 801738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017392:	f7e9 fa5b 	bl	800084c <__aeabi_ddiv>
 8017396:	4682      	mov	sl, r0
 8017398:	468b      	mov	fp, r1
 801739a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801739e:	d0da      	beq.n	8017356 <_strtod_l+0x516>
 80173a0:	f1b8 0f1f 	cmp.w	r8, #31
 80173a4:	dd20      	ble.n	80173e8 <_strtod_l+0x5a8>
 80173a6:	2400      	movs	r4, #0
 80173a8:	46a0      	mov	r8, r4
 80173aa:	9407      	str	r4, [sp, #28]
 80173ac:	9405      	str	r4, [sp, #20]
 80173ae:	2322      	movs	r3, #34	; 0x22
 80173b0:	f04f 0a00 	mov.w	sl, #0
 80173b4:	f04f 0b00 	mov.w	fp, #0
 80173b8:	f8c9 3000 	str.w	r3, [r9]
 80173bc:	e765      	b.n	801728a <_strtod_l+0x44a>
 80173be:	bf00      	nop
 80173c0:	0801b6cd 	.word	0x0801b6cd
 80173c4:	0801b75b 	.word	0x0801b75b
 80173c8:	0801b6d5 	.word	0x0801b6d5
 80173cc:	0801b718 	.word	0x0801b718
 80173d0:	0801b798 	.word	0x0801b798
 80173d4:	0801b770 	.word	0x0801b770
 80173d8:	7ff00000 	.word	0x7ff00000
 80173dc:	7ca00000 	.word	0x7ca00000
 80173e0:	fff80000 	.word	0xfff80000
 80173e4:	7fefffff 	.word	0x7fefffff
 80173e8:	f018 0310 	ands.w	r3, r8, #16
 80173ec:	bf18      	it	ne
 80173ee:	236a      	movne	r3, #106	; 0x6a
 80173f0:	4da0      	ldr	r5, [pc, #640]	; (8017674 <_strtod_l+0x834>)
 80173f2:	9304      	str	r3, [sp, #16]
 80173f4:	4650      	mov	r0, sl
 80173f6:	4659      	mov	r1, fp
 80173f8:	2300      	movs	r3, #0
 80173fa:	f1b8 0f00 	cmp.w	r8, #0
 80173fe:	f300 810a 	bgt.w	8017616 <_strtod_l+0x7d6>
 8017402:	b10b      	cbz	r3, 8017408 <_strtod_l+0x5c8>
 8017404:	4682      	mov	sl, r0
 8017406:	468b      	mov	fp, r1
 8017408:	9b04      	ldr	r3, [sp, #16]
 801740a:	b1bb      	cbz	r3, 801743c <_strtod_l+0x5fc>
 801740c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017410:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017414:	2b00      	cmp	r3, #0
 8017416:	4659      	mov	r1, fp
 8017418:	dd10      	ble.n	801743c <_strtod_l+0x5fc>
 801741a:	2b1f      	cmp	r3, #31
 801741c:	f340 8107 	ble.w	801762e <_strtod_l+0x7ee>
 8017420:	2b34      	cmp	r3, #52	; 0x34
 8017422:	bfde      	ittt	le
 8017424:	3b20      	suble	r3, #32
 8017426:	f04f 32ff 	movle.w	r2, #4294967295
 801742a:	fa02 f303 	lslle.w	r3, r2, r3
 801742e:	f04f 0a00 	mov.w	sl, #0
 8017432:	bfcc      	ite	gt
 8017434:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017438:	ea03 0b01 	andle.w	fp, r3, r1
 801743c:	2200      	movs	r2, #0
 801743e:	2300      	movs	r3, #0
 8017440:	4650      	mov	r0, sl
 8017442:	4659      	mov	r1, fp
 8017444:	f7e9 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8017448:	2800      	cmp	r0, #0
 801744a:	d1ac      	bne.n	80173a6 <_strtod_l+0x566>
 801744c:	9b07      	ldr	r3, [sp, #28]
 801744e:	9300      	str	r3, [sp, #0]
 8017450:	9a05      	ldr	r2, [sp, #20]
 8017452:	9908      	ldr	r1, [sp, #32]
 8017454:	4623      	mov	r3, r4
 8017456:	4648      	mov	r0, r9
 8017458:	f001 fd9e 	bl	8018f98 <__s2b>
 801745c:	9007      	str	r0, [sp, #28]
 801745e:	2800      	cmp	r0, #0
 8017460:	f43f af08 	beq.w	8017274 <_strtod_l+0x434>
 8017464:	9a06      	ldr	r2, [sp, #24]
 8017466:	9b06      	ldr	r3, [sp, #24]
 8017468:	2a00      	cmp	r2, #0
 801746a:	f1c3 0300 	rsb	r3, r3, #0
 801746e:	bfa8      	it	ge
 8017470:	2300      	movge	r3, #0
 8017472:	930e      	str	r3, [sp, #56]	; 0x38
 8017474:	2400      	movs	r4, #0
 8017476:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801747a:	9316      	str	r3, [sp, #88]	; 0x58
 801747c:	46a0      	mov	r8, r4
 801747e:	9b07      	ldr	r3, [sp, #28]
 8017480:	4648      	mov	r0, r9
 8017482:	6859      	ldr	r1, [r3, #4]
 8017484:	f001 fd02 	bl	8018e8c <_Balloc>
 8017488:	9005      	str	r0, [sp, #20]
 801748a:	2800      	cmp	r0, #0
 801748c:	f43f aef6 	beq.w	801727c <_strtod_l+0x43c>
 8017490:	9b07      	ldr	r3, [sp, #28]
 8017492:	691a      	ldr	r2, [r3, #16]
 8017494:	3202      	adds	r2, #2
 8017496:	f103 010c 	add.w	r1, r3, #12
 801749a:	0092      	lsls	r2, r2, #2
 801749c:	300c      	adds	r0, #12
 801749e:	f7fe fd35 	bl	8015f0c <memcpy>
 80174a2:	aa1e      	add	r2, sp, #120	; 0x78
 80174a4:	a91d      	add	r1, sp, #116	; 0x74
 80174a6:	ec4b ab10 	vmov	d0, sl, fp
 80174aa:	4648      	mov	r0, r9
 80174ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80174b0:	f002 f82e 	bl	8019510 <__d2b>
 80174b4:	901c      	str	r0, [sp, #112]	; 0x70
 80174b6:	2800      	cmp	r0, #0
 80174b8:	f43f aee0 	beq.w	801727c <_strtod_l+0x43c>
 80174bc:	2101      	movs	r1, #1
 80174be:	4648      	mov	r0, r9
 80174c0:	f001 fdf6 	bl	80190b0 <__i2b>
 80174c4:	4680      	mov	r8, r0
 80174c6:	2800      	cmp	r0, #0
 80174c8:	f43f aed8 	beq.w	801727c <_strtod_l+0x43c>
 80174cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80174ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80174d0:	2e00      	cmp	r6, #0
 80174d2:	bfab      	itete	ge
 80174d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80174d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80174d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80174da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80174dc:	bfac      	ite	ge
 80174de:	18f7      	addge	r7, r6, r3
 80174e0:	1b9d      	sublt	r5, r3, r6
 80174e2:	9b04      	ldr	r3, [sp, #16]
 80174e4:	1af6      	subs	r6, r6, r3
 80174e6:	4416      	add	r6, r2
 80174e8:	4b63      	ldr	r3, [pc, #396]	; (8017678 <_strtod_l+0x838>)
 80174ea:	3e01      	subs	r6, #1
 80174ec:	429e      	cmp	r6, r3
 80174ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80174f2:	f280 80af 	bge.w	8017654 <_strtod_l+0x814>
 80174f6:	1b9b      	subs	r3, r3, r6
 80174f8:	2b1f      	cmp	r3, #31
 80174fa:	eba2 0203 	sub.w	r2, r2, r3
 80174fe:	f04f 0101 	mov.w	r1, #1
 8017502:	f300 809b 	bgt.w	801763c <_strtod_l+0x7fc>
 8017506:	fa01 f303 	lsl.w	r3, r1, r3
 801750a:	930f      	str	r3, [sp, #60]	; 0x3c
 801750c:	2300      	movs	r3, #0
 801750e:	930a      	str	r3, [sp, #40]	; 0x28
 8017510:	18be      	adds	r6, r7, r2
 8017512:	9b04      	ldr	r3, [sp, #16]
 8017514:	42b7      	cmp	r7, r6
 8017516:	4415      	add	r5, r2
 8017518:	441d      	add	r5, r3
 801751a:	463b      	mov	r3, r7
 801751c:	bfa8      	it	ge
 801751e:	4633      	movge	r3, r6
 8017520:	42ab      	cmp	r3, r5
 8017522:	bfa8      	it	ge
 8017524:	462b      	movge	r3, r5
 8017526:	2b00      	cmp	r3, #0
 8017528:	bfc2      	ittt	gt
 801752a:	1af6      	subgt	r6, r6, r3
 801752c:	1aed      	subgt	r5, r5, r3
 801752e:	1aff      	subgt	r7, r7, r3
 8017530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017532:	b1bb      	cbz	r3, 8017564 <_strtod_l+0x724>
 8017534:	4641      	mov	r1, r8
 8017536:	461a      	mov	r2, r3
 8017538:	4648      	mov	r0, r9
 801753a:	f001 fe59 	bl	80191f0 <__pow5mult>
 801753e:	4680      	mov	r8, r0
 8017540:	2800      	cmp	r0, #0
 8017542:	f43f ae9b 	beq.w	801727c <_strtod_l+0x43c>
 8017546:	4601      	mov	r1, r0
 8017548:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801754a:	4648      	mov	r0, r9
 801754c:	f001 fdb9 	bl	80190c2 <__multiply>
 8017550:	900c      	str	r0, [sp, #48]	; 0x30
 8017552:	2800      	cmp	r0, #0
 8017554:	f43f ae92 	beq.w	801727c <_strtod_l+0x43c>
 8017558:	991c      	ldr	r1, [sp, #112]	; 0x70
 801755a:	4648      	mov	r0, r9
 801755c:	f001 fcca 	bl	8018ef4 <_Bfree>
 8017560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017562:	931c      	str	r3, [sp, #112]	; 0x70
 8017564:	2e00      	cmp	r6, #0
 8017566:	dc7a      	bgt.n	801765e <_strtod_l+0x81e>
 8017568:	9b06      	ldr	r3, [sp, #24]
 801756a:	2b00      	cmp	r3, #0
 801756c:	dd08      	ble.n	8017580 <_strtod_l+0x740>
 801756e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017570:	9905      	ldr	r1, [sp, #20]
 8017572:	4648      	mov	r0, r9
 8017574:	f001 fe3c 	bl	80191f0 <__pow5mult>
 8017578:	9005      	str	r0, [sp, #20]
 801757a:	2800      	cmp	r0, #0
 801757c:	f43f ae7e 	beq.w	801727c <_strtod_l+0x43c>
 8017580:	2d00      	cmp	r5, #0
 8017582:	dd08      	ble.n	8017596 <_strtod_l+0x756>
 8017584:	462a      	mov	r2, r5
 8017586:	9905      	ldr	r1, [sp, #20]
 8017588:	4648      	mov	r0, r9
 801758a:	f001 fe7f 	bl	801928c <__lshift>
 801758e:	9005      	str	r0, [sp, #20]
 8017590:	2800      	cmp	r0, #0
 8017592:	f43f ae73 	beq.w	801727c <_strtod_l+0x43c>
 8017596:	2f00      	cmp	r7, #0
 8017598:	dd08      	ble.n	80175ac <_strtod_l+0x76c>
 801759a:	4641      	mov	r1, r8
 801759c:	463a      	mov	r2, r7
 801759e:	4648      	mov	r0, r9
 80175a0:	f001 fe74 	bl	801928c <__lshift>
 80175a4:	4680      	mov	r8, r0
 80175a6:	2800      	cmp	r0, #0
 80175a8:	f43f ae68 	beq.w	801727c <_strtod_l+0x43c>
 80175ac:	9a05      	ldr	r2, [sp, #20]
 80175ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80175b0:	4648      	mov	r0, r9
 80175b2:	f001 fed9 	bl	8019368 <__mdiff>
 80175b6:	4604      	mov	r4, r0
 80175b8:	2800      	cmp	r0, #0
 80175ba:	f43f ae5f 	beq.w	801727c <_strtod_l+0x43c>
 80175be:	68c3      	ldr	r3, [r0, #12]
 80175c0:	930c      	str	r3, [sp, #48]	; 0x30
 80175c2:	2300      	movs	r3, #0
 80175c4:	60c3      	str	r3, [r0, #12]
 80175c6:	4641      	mov	r1, r8
 80175c8:	f001 feb4 	bl	8019334 <__mcmp>
 80175cc:	2800      	cmp	r0, #0
 80175ce:	da55      	bge.n	801767c <_strtod_l+0x83c>
 80175d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175d2:	b9e3      	cbnz	r3, 801760e <_strtod_l+0x7ce>
 80175d4:	f1ba 0f00 	cmp.w	sl, #0
 80175d8:	d119      	bne.n	801760e <_strtod_l+0x7ce>
 80175da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80175de:	b9b3      	cbnz	r3, 801760e <_strtod_l+0x7ce>
 80175e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80175e4:	0d1b      	lsrs	r3, r3, #20
 80175e6:	051b      	lsls	r3, r3, #20
 80175e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80175ec:	d90f      	bls.n	801760e <_strtod_l+0x7ce>
 80175ee:	6963      	ldr	r3, [r4, #20]
 80175f0:	b913      	cbnz	r3, 80175f8 <_strtod_l+0x7b8>
 80175f2:	6923      	ldr	r3, [r4, #16]
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	dd0a      	ble.n	801760e <_strtod_l+0x7ce>
 80175f8:	4621      	mov	r1, r4
 80175fa:	2201      	movs	r2, #1
 80175fc:	4648      	mov	r0, r9
 80175fe:	f001 fe45 	bl	801928c <__lshift>
 8017602:	4641      	mov	r1, r8
 8017604:	4604      	mov	r4, r0
 8017606:	f001 fe95 	bl	8019334 <__mcmp>
 801760a:	2800      	cmp	r0, #0
 801760c:	dc67      	bgt.n	80176de <_strtod_l+0x89e>
 801760e:	9b04      	ldr	r3, [sp, #16]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d171      	bne.n	80176f8 <_strtod_l+0x8b8>
 8017614:	e63d      	b.n	8017292 <_strtod_l+0x452>
 8017616:	f018 0f01 	tst.w	r8, #1
 801761a:	d004      	beq.n	8017626 <_strtod_l+0x7e6>
 801761c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017620:	f7e8 ffea 	bl	80005f8 <__aeabi_dmul>
 8017624:	2301      	movs	r3, #1
 8017626:	ea4f 0868 	mov.w	r8, r8, asr #1
 801762a:	3508      	adds	r5, #8
 801762c:	e6e5      	b.n	80173fa <_strtod_l+0x5ba>
 801762e:	f04f 32ff 	mov.w	r2, #4294967295
 8017632:	fa02 f303 	lsl.w	r3, r2, r3
 8017636:	ea03 0a0a 	and.w	sl, r3, sl
 801763a:	e6ff      	b.n	801743c <_strtod_l+0x5fc>
 801763c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017640:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017644:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017648:	36e2      	adds	r6, #226	; 0xe2
 801764a:	fa01 f306 	lsl.w	r3, r1, r6
 801764e:	930a      	str	r3, [sp, #40]	; 0x28
 8017650:	910f      	str	r1, [sp, #60]	; 0x3c
 8017652:	e75d      	b.n	8017510 <_strtod_l+0x6d0>
 8017654:	2300      	movs	r3, #0
 8017656:	930a      	str	r3, [sp, #40]	; 0x28
 8017658:	2301      	movs	r3, #1
 801765a:	930f      	str	r3, [sp, #60]	; 0x3c
 801765c:	e758      	b.n	8017510 <_strtod_l+0x6d0>
 801765e:	4632      	mov	r2, r6
 8017660:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017662:	4648      	mov	r0, r9
 8017664:	f001 fe12 	bl	801928c <__lshift>
 8017668:	901c      	str	r0, [sp, #112]	; 0x70
 801766a:	2800      	cmp	r0, #0
 801766c:	f47f af7c 	bne.w	8017568 <_strtod_l+0x728>
 8017670:	e604      	b.n	801727c <_strtod_l+0x43c>
 8017672:	bf00      	nop
 8017674:	0801b730 	.word	0x0801b730
 8017678:	fffffc02 	.word	0xfffffc02
 801767c:	465d      	mov	r5, fp
 801767e:	f040 8086 	bne.w	801778e <_strtod_l+0x94e>
 8017682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017684:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017688:	b32a      	cbz	r2, 80176d6 <_strtod_l+0x896>
 801768a:	4aaf      	ldr	r2, [pc, #700]	; (8017948 <_strtod_l+0xb08>)
 801768c:	4293      	cmp	r3, r2
 801768e:	d153      	bne.n	8017738 <_strtod_l+0x8f8>
 8017690:	9b04      	ldr	r3, [sp, #16]
 8017692:	4650      	mov	r0, sl
 8017694:	b1d3      	cbz	r3, 80176cc <_strtod_l+0x88c>
 8017696:	4aad      	ldr	r2, [pc, #692]	; (801794c <_strtod_l+0xb0c>)
 8017698:	402a      	ands	r2, r5
 801769a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801769e:	f04f 31ff 	mov.w	r1, #4294967295
 80176a2:	d816      	bhi.n	80176d2 <_strtod_l+0x892>
 80176a4:	0d12      	lsrs	r2, r2, #20
 80176a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80176aa:	fa01 f303 	lsl.w	r3, r1, r3
 80176ae:	4298      	cmp	r0, r3
 80176b0:	d142      	bne.n	8017738 <_strtod_l+0x8f8>
 80176b2:	4ba7      	ldr	r3, [pc, #668]	; (8017950 <_strtod_l+0xb10>)
 80176b4:	429d      	cmp	r5, r3
 80176b6:	d102      	bne.n	80176be <_strtod_l+0x87e>
 80176b8:	3001      	adds	r0, #1
 80176ba:	f43f addf 	beq.w	801727c <_strtod_l+0x43c>
 80176be:	4ba3      	ldr	r3, [pc, #652]	; (801794c <_strtod_l+0xb0c>)
 80176c0:	402b      	ands	r3, r5
 80176c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80176c6:	f04f 0a00 	mov.w	sl, #0
 80176ca:	e7a0      	b.n	801760e <_strtod_l+0x7ce>
 80176cc:	f04f 33ff 	mov.w	r3, #4294967295
 80176d0:	e7ed      	b.n	80176ae <_strtod_l+0x86e>
 80176d2:	460b      	mov	r3, r1
 80176d4:	e7eb      	b.n	80176ae <_strtod_l+0x86e>
 80176d6:	bb7b      	cbnz	r3, 8017738 <_strtod_l+0x8f8>
 80176d8:	f1ba 0f00 	cmp.w	sl, #0
 80176dc:	d12c      	bne.n	8017738 <_strtod_l+0x8f8>
 80176de:	9904      	ldr	r1, [sp, #16]
 80176e0:	4a9a      	ldr	r2, [pc, #616]	; (801794c <_strtod_l+0xb0c>)
 80176e2:	465b      	mov	r3, fp
 80176e4:	b1f1      	cbz	r1, 8017724 <_strtod_l+0x8e4>
 80176e6:	ea02 010b 	and.w	r1, r2, fp
 80176ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80176ee:	dc19      	bgt.n	8017724 <_strtod_l+0x8e4>
 80176f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80176f4:	f77f ae5b 	ble.w	80173ae <_strtod_l+0x56e>
 80176f8:	4a96      	ldr	r2, [pc, #600]	; (8017954 <_strtod_l+0xb14>)
 80176fa:	2300      	movs	r3, #0
 80176fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017700:	4650      	mov	r0, sl
 8017702:	4659      	mov	r1, fp
 8017704:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017708:	f7e8 ff76 	bl	80005f8 <__aeabi_dmul>
 801770c:	4682      	mov	sl, r0
 801770e:	468b      	mov	fp, r1
 8017710:	2900      	cmp	r1, #0
 8017712:	f47f adbe 	bne.w	8017292 <_strtod_l+0x452>
 8017716:	2800      	cmp	r0, #0
 8017718:	f47f adbb 	bne.w	8017292 <_strtod_l+0x452>
 801771c:	2322      	movs	r3, #34	; 0x22
 801771e:	f8c9 3000 	str.w	r3, [r9]
 8017722:	e5b6      	b.n	8017292 <_strtod_l+0x452>
 8017724:	4013      	ands	r3, r2
 8017726:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801772a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801772e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017732:	f04f 3aff 	mov.w	sl, #4294967295
 8017736:	e76a      	b.n	801760e <_strtod_l+0x7ce>
 8017738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801773a:	b193      	cbz	r3, 8017762 <_strtod_l+0x922>
 801773c:	422b      	tst	r3, r5
 801773e:	f43f af66 	beq.w	801760e <_strtod_l+0x7ce>
 8017742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017744:	9a04      	ldr	r2, [sp, #16]
 8017746:	4650      	mov	r0, sl
 8017748:	4659      	mov	r1, fp
 801774a:	b173      	cbz	r3, 801776a <_strtod_l+0x92a>
 801774c:	f7ff fb5a 	bl	8016e04 <sulp>
 8017750:	4602      	mov	r2, r0
 8017752:	460b      	mov	r3, r1
 8017754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017758:	f7e8 fd98 	bl	800028c <__adddf3>
 801775c:	4682      	mov	sl, r0
 801775e:	468b      	mov	fp, r1
 8017760:	e755      	b.n	801760e <_strtod_l+0x7ce>
 8017762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017764:	ea13 0f0a 	tst.w	r3, sl
 8017768:	e7e9      	b.n	801773e <_strtod_l+0x8fe>
 801776a:	f7ff fb4b 	bl	8016e04 <sulp>
 801776e:	4602      	mov	r2, r0
 8017770:	460b      	mov	r3, r1
 8017772:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017776:	f7e8 fd87 	bl	8000288 <__aeabi_dsub>
 801777a:	2200      	movs	r2, #0
 801777c:	2300      	movs	r3, #0
 801777e:	4682      	mov	sl, r0
 8017780:	468b      	mov	fp, r1
 8017782:	f7e9 f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8017786:	2800      	cmp	r0, #0
 8017788:	f47f ae11 	bne.w	80173ae <_strtod_l+0x56e>
 801778c:	e73f      	b.n	801760e <_strtod_l+0x7ce>
 801778e:	4641      	mov	r1, r8
 8017790:	4620      	mov	r0, r4
 8017792:	f001 ff0c 	bl	80195ae <__ratio>
 8017796:	ec57 6b10 	vmov	r6, r7, d0
 801779a:	2200      	movs	r2, #0
 801779c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80177a0:	ee10 0a10 	vmov	r0, s0
 80177a4:	4639      	mov	r1, r7
 80177a6:	f7e9 f9a3 	bl	8000af0 <__aeabi_dcmple>
 80177aa:	2800      	cmp	r0, #0
 80177ac:	d077      	beq.n	801789e <_strtod_l+0xa5e>
 80177ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d04a      	beq.n	801784a <_strtod_l+0xa0a>
 80177b4:	4b68      	ldr	r3, [pc, #416]	; (8017958 <_strtod_l+0xb18>)
 80177b6:	2200      	movs	r2, #0
 80177b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80177bc:	4f66      	ldr	r7, [pc, #408]	; (8017958 <_strtod_l+0xb18>)
 80177be:	2600      	movs	r6, #0
 80177c0:	4b62      	ldr	r3, [pc, #392]	; (801794c <_strtod_l+0xb0c>)
 80177c2:	402b      	ands	r3, r5
 80177c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80177c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177c8:	4b64      	ldr	r3, [pc, #400]	; (801795c <_strtod_l+0xb1c>)
 80177ca:	429a      	cmp	r2, r3
 80177cc:	f040 80ce 	bne.w	801796c <_strtod_l+0xb2c>
 80177d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80177d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80177d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80177dc:	ec4b ab10 	vmov	d0, sl, fp
 80177e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80177e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80177e8:	f001 fe1c 	bl	8019424 <__ulp>
 80177ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80177f0:	ec53 2b10 	vmov	r2, r3, d0
 80177f4:	f7e8 ff00 	bl	80005f8 <__aeabi_dmul>
 80177f8:	4652      	mov	r2, sl
 80177fa:	465b      	mov	r3, fp
 80177fc:	f7e8 fd46 	bl	800028c <__adddf3>
 8017800:	460b      	mov	r3, r1
 8017802:	4952      	ldr	r1, [pc, #328]	; (801794c <_strtod_l+0xb0c>)
 8017804:	4a56      	ldr	r2, [pc, #344]	; (8017960 <_strtod_l+0xb20>)
 8017806:	4019      	ands	r1, r3
 8017808:	4291      	cmp	r1, r2
 801780a:	4682      	mov	sl, r0
 801780c:	d95b      	bls.n	80178c6 <_strtod_l+0xa86>
 801780e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017810:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017814:	4293      	cmp	r3, r2
 8017816:	d103      	bne.n	8017820 <_strtod_l+0x9e0>
 8017818:	9b08      	ldr	r3, [sp, #32]
 801781a:	3301      	adds	r3, #1
 801781c:	f43f ad2e 	beq.w	801727c <_strtod_l+0x43c>
 8017820:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017950 <_strtod_l+0xb10>
 8017824:	f04f 3aff 	mov.w	sl, #4294967295
 8017828:	991c      	ldr	r1, [sp, #112]	; 0x70
 801782a:	4648      	mov	r0, r9
 801782c:	f001 fb62 	bl	8018ef4 <_Bfree>
 8017830:	9905      	ldr	r1, [sp, #20]
 8017832:	4648      	mov	r0, r9
 8017834:	f001 fb5e 	bl	8018ef4 <_Bfree>
 8017838:	4641      	mov	r1, r8
 801783a:	4648      	mov	r0, r9
 801783c:	f001 fb5a 	bl	8018ef4 <_Bfree>
 8017840:	4621      	mov	r1, r4
 8017842:	4648      	mov	r0, r9
 8017844:	f001 fb56 	bl	8018ef4 <_Bfree>
 8017848:	e619      	b.n	801747e <_strtod_l+0x63e>
 801784a:	f1ba 0f00 	cmp.w	sl, #0
 801784e:	d11a      	bne.n	8017886 <_strtod_l+0xa46>
 8017850:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017854:	b9eb      	cbnz	r3, 8017892 <_strtod_l+0xa52>
 8017856:	2200      	movs	r2, #0
 8017858:	4b3f      	ldr	r3, [pc, #252]	; (8017958 <_strtod_l+0xb18>)
 801785a:	4630      	mov	r0, r6
 801785c:	4639      	mov	r1, r7
 801785e:	f7e9 f93d 	bl	8000adc <__aeabi_dcmplt>
 8017862:	b9c8      	cbnz	r0, 8017898 <_strtod_l+0xa58>
 8017864:	4630      	mov	r0, r6
 8017866:	4639      	mov	r1, r7
 8017868:	2200      	movs	r2, #0
 801786a:	4b3e      	ldr	r3, [pc, #248]	; (8017964 <_strtod_l+0xb24>)
 801786c:	f7e8 fec4 	bl	80005f8 <__aeabi_dmul>
 8017870:	4606      	mov	r6, r0
 8017872:	460f      	mov	r7, r1
 8017874:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017878:	9618      	str	r6, [sp, #96]	; 0x60
 801787a:	9319      	str	r3, [sp, #100]	; 0x64
 801787c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017880:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017884:	e79c      	b.n	80177c0 <_strtod_l+0x980>
 8017886:	f1ba 0f01 	cmp.w	sl, #1
 801788a:	d102      	bne.n	8017892 <_strtod_l+0xa52>
 801788c:	2d00      	cmp	r5, #0
 801788e:	f43f ad8e 	beq.w	80173ae <_strtod_l+0x56e>
 8017892:	2200      	movs	r2, #0
 8017894:	4b34      	ldr	r3, [pc, #208]	; (8017968 <_strtod_l+0xb28>)
 8017896:	e78f      	b.n	80177b8 <_strtod_l+0x978>
 8017898:	2600      	movs	r6, #0
 801789a:	4f32      	ldr	r7, [pc, #200]	; (8017964 <_strtod_l+0xb24>)
 801789c:	e7ea      	b.n	8017874 <_strtod_l+0xa34>
 801789e:	4b31      	ldr	r3, [pc, #196]	; (8017964 <_strtod_l+0xb24>)
 80178a0:	4630      	mov	r0, r6
 80178a2:	4639      	mov	r1, r7
 80178a4:	2200      	movs	r2, #0
 80178a6:	f7e8 fea7 	bl	80005f8 <__aeabi_dmul>
 80178aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178ac:	4606      	mov	r6, r0
 80178ae:	460f      	mov	r7, r1
 80178b0:	b933      	cbnz	r3, 80178c0 <_strtod_l+0xa80>
 80178b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80178b6:	9010      	str	r0, [sp, #64]	; 0x40
 80178b8:	9311      	str	r3, [sp, #68]	; 0x44
 80178ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80178be:	e7df      	b.n	8017880 <_strtod_l+0xa40>
 80178c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80178c4:	e7f9      	b.n	80178ba <_strtod_l+0xa7a>
 80178c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80178ca:	9b04      	ldr	r3, [sp, #16]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d1ab      	bne.n	8017828 <_strtod_l+0x9e8>
 80178d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80178d4:	0d1b      	lsrs	r3, r3, #20
 80178d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178d8:	051b      	lsls	r3, r3, #20
 80178da:	429a      	cmp	r2, r3
 80178dc:	465d      	mov	r5, fp
 80178de:	d1a3      	bne.n	8017828 <_strtod_l+0x9e8>
 80178e0:	4639      	mov	r1, r7
 80178e2:	4630      	mov	r0, r6
 80178e4:	f7e9 f938 	bl	8000b58 <__aeabi_d2iz>
 80178e8:	f7e8 fe1c 	bl	8000524 <__aeabi_i2d>
 80178ec:	460b      	mov	r3, r1
 80178ee:	4602      	mov	r2, r0
 80178f0:	4639      	mov	r1, r7
 80178f2:	4630      	mov	r0, r6
 80178f4:	f7e8 fcc8 	bl	8000288 <__aeabi_dsub>
 80178f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178fa:	4606      	mov	r6, r0
 80178fc:	460f      	mov	r7, r1
 80178fe:	b933      	cbnz	r3, 801790e <_strtod_l+0xace>
 8017900:	f1ba 0f00 	cmp.w	sl, #0
 8017904:	d103      	bne.n	801790e <_strtod_l+0xace>
 8017906:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801790a:	2d00      	cmp	r5, #0
 801790c:	d06d      	beq.n	80179ea <_strtod_l+0xbaa>
 801790e:	a30a      	add	r3, pc, #40	; (adr r3, 8017938 <_strtod_l+0xaf8>)
 8017910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017914:	4630      	mov	r0, r6
 8017916:	4639      	mov	r1, r7
 8017918:	f7e9 f8e0 	bl	8000adc <__aeabi_dcmplt>
 801791c:	2800      	cmp	r0, #0
 801791e:	f47f acb8 	bne.w	8017292 <_strtod_l+0x452>
 8017922:	a307      	add	r3, pc, #28	; (adr r3, 8017940 <_strtod_l+0xb00>)
 8017924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017928:	4630      	mov	r0, r6
 801792a:	4639      	mov	r1, r7
 801792c:	f7e9 f8f4 	bl	8000b18 <__aeabi_dcmpgt>
 8017930:	2800      	cmp	r0, #0
 8017932:	f43f af79 	beq.w	8017828 <_strtod_l+0x9e8>
 8017936:	e4ac      	b.n	8017292 <_strtod_l+0x452>
 8017938:	94a03595 	.word	0x94a03595
 801793c:	3fdfffff 	.word	0x3fdfffff
 8017940:	35afe535 	.word	0x35afe535
 8017944:	3fe00000 	.word	0x3fe00000
 8017948:	000fffff 	.word	0x000fffff
 801794c:	7ff00000 	.word	0x7ff00000
 8017950:	7fefffff 	.word	0x7fefffff
 8017954:	39500000 	.word	0x39500000
 8017958:	3ff00000 	.word	0x3ff00000
 801795c:	7fe00000 	.word	0x7fe00000
 8017960:	7c9fffff 	.word	0x7c9fffff
 8017964:	3fe00000 	.word	0x3fe00000
 8017968:	bff00000 	.word	0xbff00000
 801796c:	9b04      	ldr	r3, [sp, #16]
 801796e:	b333      	cbz	r3, 80179be <_strtod_l+0xb7e>
 8017970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017972:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017976:	d822      	bhi.n	80179be <_strtod_l+0xb7e>
 8017978:	a327      	add	r3, pc, #156	; (adr r3, 8017a18 <_strtod_l+0xbd8>)
 801797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801797e:	4630      	mov	r0, r6
 8017980:	4639      	mov	r1, r7
 8017982:	f7e9 f8b5 	bl	8000af0 <__aeabi_dcmple>
 8017986:	b1a0      	cbz	r0, 80179b2 <_strtod_l+0xb72>
 8017988:	4639      	mov	r1, r7
 801798a:	4630      	mov	r0, r6
 801798c:	f7e9 f90c 	bl	8000ba8 <__aeabi_d2uiz>
 8017990:	2800      	cmp	r0, #0
 8017992:	bf08      	it	eq
 8017994:	2001      	moveq	r0, #1
 8017996:	f7e8 fdb5 	bl	8000504 <__aeabi_ui2d>
 801799a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801799c:	4606      	mov	r6, r0
 801799e:	460f      	mov	r7, r1
 80179a0:	bb03      	cbnz	r3, 80179e4 <_strtod_l+0xba4>
 80179a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80179a6:	9012      	str	r0, [sp, #72]	; 0x48
 80179a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80179aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80179ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80179b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80179b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80179ba:	1a9b      	subs	r3, r3, r2
 80179bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80179be:	ed9d 0b08 	vldr	d0, [sp, #32]
 80179c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80179c6:	f001 fd2d 	bl	8019424 <__ulp>
 80179ca:	4650      	mov	r0, sl
 80179cc:	ec53 2b10 	vmov	r2, r3, d0
 80179d0:	4659      	mov	r1, fp
 80179d2:	f7e8 fe11 	bl	80005f8 <__aeabi_dmul>
 80179d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80179da:	f7e8 fc57 	bl	800028c <__adddf3>
 80179de:	4682      	mov	sl, r0
 80179e0:	468b      	mov	fp, r1
 80179e2:	e772      	b.n	80178ca <_strtod_l+0xa8a>
 80179e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80179e8:	e7df      	b.n	80179aa <_strtod_l+0xb6a>
 80179ea:	a30d      	add	r3, pc, #52	; (adr r3, 8017a20 <_strtod_l+0xbe0>)
 80179ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f0:	f7e9 f874 	bl	8000adc <__aeabi_dcmplt>
 80179f4:	e79c      	b.n	8017930 <_strtod_l+0xaf0>
 80179f6:	2300      	movs	r3, #0
 80179f8:	930d      	str	r3, [sp, #52]	; 0x34
 80179fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80179fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80179fe:	6013      	str	r3, [r2, #0]
 8017a00:	f7ff ba61 	b.w	8016ec6 <_strtod_l+0x86>
 8017a04:	2b65      	cmp	r3, #101	; 0x65
 8017a06:	f04f 0200 	mov.w	r2, #0
 8017a0a:	f43f ab4e 	beq.w	80170aa <_strtod_l+0x26a>
 8017a0e:	2101      	movs	r1, #1
 8017a10:	4614      	mov	r4, r2
 8017a12:	9104      	str	r1, [sp, #16]
 8017a14:	f7ff bacb 	b.w	8016fae <_strtod_l+0x16e>
 8017a18:	ffc00000 	.word	0xffc00000
 8017a1c:	41dfffff 	.word	0x41dfffff
 8017a20:	94a03595 	.word	0x94a03595
 8017a24:	3fcfffff 	.word	0x3fcfffff

08017a28 <_strtod_r>:
 8017a28:	4b05      	ldr	r3, [pc, #20]	; (8017a40 <_strtod_r+0x18>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	b410      	push	{r4}
 8017a2e:	6a1b      	ldr	r3, [r3, #32]
 8017a30:	4c04      	ldr	r4, [pc, #16]	; (8017a44 <_strtod_r+0x1c>)
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	bf08      	it	eq
 8017a36:	4623      	moveq	r3, r4
 8017a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a3c:	f7ff ba00 	b.w	8016e40 <_strtod_l>
 8017a40:	20000a0c 	.word	0x20000a0c
 8017a44:	20000a70 	.word	0x20000a70

08017a48 <_strtol_l.isra.0>:
 8017a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a4c:	4680      	mov	r8, r0
 8017a4e:	4689      	mov	r9, r1
 8017a50:	4692      	mov	sl, r2
 8017a52:	461e      	mov	r6, r3
 8017a54:	460f      	mov	r7, r1
 8017a56:	463d      	mov	r5, r7
 8017a58:	9808      	ldr	r0, [sp, #32]
 8017a5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a5e:	f001 f9ed 	bl	8018e3c <__locale_ctype_ptr_l>
 8017a62:	4420      	add	r0, r4
 8017a64:	7843      	ldrb	r3, [r0, #1]
 8017a66:	f013 0308 	ands.w	r3, r3, #8
 8017a6a:	d132      	bne.n	8017ad2 <_strtol_l.isra.0+0x8a>
 8017a6c:	2c2d      	cmp	r4, #45	; 0x2d
 8017a6e:	d132      	bne.n	8017ad6 <_strtol_l.isra.0+0x8e>
 8017a70:	787c      	ldrb	r4, [r7, #1]
 8017a72:	1cbd      	adds	r5, r7, #2
 8017a74:	2201      	movs	r2, #1
 8017a76:	2e00      	cmp	r6, #0
 8017a78:	d05d      	beq.n	8017b36 <_strtol_l.isra.0+0xee>
 8017a7a:	2e10      	cmp	r6, #16
 8017a7c:	d109      	bne.n	8017a92 <_strtol_l.isra.0+0x4a>
 8017a7e:	2c30      	cmp	r4, #48	; 0x30
 8017a80:	d107      	bne.n	8017a92 <_strtol_l.isra.0+0x4a>
 8017a82:	782b      	ldrb	r3, [r5, #0]
 8017a84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017a88:	2b58      	cmp	r3, #88	; 0x58
 8017a8a:	d14f      	bne.n	8017b2c <_strtol_l.isra.0+0xe4>
 8017a8c:	786c      	ldrb	r4, [r5, #1]
 8017a8e:	2610      	movs	r6, #16
 8017a90:	3502      	adds	r5, #2
 8017a92:	2a00      	cmp	r2, #0
 8017a94:	bf14      	ite	ne
 8017a96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017a9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017a9e:	2700      	movs	r7, #0
 8017aa0:	fbb1 fcf6 	udiv	ip, r1, r6
 8017aa4:	4638      	mov	r0, r7
 8017aa6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017aaa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017aae:	2b09      	cmp	r3, #9
 8017ab0:	d817      	bhi.n	8017ae2 <_strtol_l.isra.0+0x9a>
 8017ab2:	461c      	mov	r4, r3
 8017ab4:	42a6      	cmp	r6, r4
 8017ab6:	dd23      	ble.n	8017b00 <_strtol_l.isra.0+0xb8>
 8017ab8:	1c7b      	adds	r3, r7, #1
 8017aba:	d007      	beq.n	8017acc <_strtol_l.isra.0+0x84>
 8017abc:	4584      	cmp	ip, r0
 8017abe:	d31c      	bcc.n	8017afa <_strtol_l.isra.0+0xb2>
 8017ac0:	d101      	bne.n	8017ac6 <_strtol_l.isra.0+0x7e>
 8017ac2:	45a6      	cmp	lr, r4
 8017ac4:	db19      	blt.n	8017afa <_strtol_l.isra.0+0xb2>
 8017ac6:	fb00 4006 	mla	r0, r0, r6, r4
 8017aca:	2701      	movs	r7, #1
 8017acc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ad0:	e7eb      	b.n	8017aaa <_strtol_l.isra.0+0x62>
 8017ad2:	462f      	mov	r7, r5
 8017ad4:	e7bf      	b.n	8017a56 <_strtol_l.isra.0+0xe>
 8017ad6:	2c2b      	cmp	r4, #43	; 0x2b
 8017ad8:	bf04      	itt	eq
 8017ada:	1cbd      	addeq	r5, r7, #2
 8017adc:	787c      	ldrbeq	r4, [r7, #1]
 8017ade:	461a      	mov	r2, r3
 8017ae0:	e7c9      	b.n	8017a76 <_strtol_l.isra.0+0x2e>
 8017ae2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017ae6:	2b19      	cmp	r3, #25
 8017ae8:	d801      	bhi.n	8017aee <_strtol_l.isra.0+0xa6>
 8017aea:	3c37      	subs	r4, #55	; 0x37
 8017aec:	e7e2      	b.n	8017ab4 <_strtol_l.isra.0+0x6c>
 8017aee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017af2:	2b19      	cmp	r3, #25
 8017af4:	d804      	bhi.n	8017b00 <_strtol_l.isra.0+0xb8>
 8017af6:	3c57      	subs	r4, #87	; 0x57
 8017af8:	e7dc      	b.n	8017ab4 <_strtol_l.isra.0+0x6c>
 8017afa:	f04f 37ff 	mov.w	r7, #4294967295
 8017afe:	e7e5      	b.n	8017acc <_strtol_l.isra.0+0x84>
 8017b00:	1c7b      	adds	r3, r7, #1
 8017b02:	d108      	bne.n	8017b16 <_strtol_l.isra.0+0xce>
 8017b04:	2322      	movs	r3, #34	; 0x22
 8017b06:	f8c8 3000 	str.w	r3, [r8]
 8017b0a:	4608      	mov	r0, r1
 8017b0c:	f1ba 0f00 	cmp.w	sl, #0
 8017b10:	d107      	bne.n	8017b22 <_strtol_l.isra.0+0xda>
 8017b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b16:	b102      	cbz	r2, 8017b1a <_strtol_l.isra.0+0xd2>
 8017b18:	4240      	negs	r0, r0
 8017b1a:	f1ba 0f00 	cmp.w	sl, #0
 8017b1e:	d0f8      	beq.n	8017b12 <_strtol_l.isra.0+0xca>
 8017b20:	b10f      	cbz	r7, 8017b26 <_strtol_l.isra.0+0xde>
 8017b22:	f105 39ff 	add.w	r9, r5, #4294967295
 8017b26:	f8ca 9000 	str.w	r9, [sl]
 8017b2a:	e7f2      	b.n	8017b12 <_strtol_l.isra.0+0xca>
 8017b2c:	2430      	movs	r4, #48	; 0x30
 8017b2e:	2e00      	cmp	r6, #0
 8017b30:	d1af      	bne.n	8017a92 <_strtol_l.isra.0+0x4a>
 8017b32:	2608      	movs	r6, #8
 8017b34:	e7ad      	b.n	8017a92 <_strtol_l.isra.0+0x4a>
 8017b36:	2c30      	cmp	r4, #48	; 0x30
 8017b38:	d0a3      	beq.n	8017a82 <_strtol_l.isra.0+0x3a>
 8017b3a:	260a      	movs	r6, #10
 8017b3c:	e7a9      	b.n	8017a92 <_strtol_l.isra.0+0x4a>
	...

08017b40 <_strtol_r>:
 8017b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b42:	4c06      	ldr	r4, [pc, #24]	; (8017b5c <_strtol_r+0x1c>)
 8017b44:	4d06      	ldr	r5, [pc, #24]	; (8017b60 <_strtol_r+0x20>)
 8017b46:	6824      	ldr	r4, [r4, #0]
 8017b48:	6a24      	ldr	r4, [r4, #32]
 8017b4a:	2c00      	cmp	r4, #0
 8017b4c:	bf08      	it	eq
 8017b4e:	462c      	moveq	r4, r5
 8017b50:	9400      	str	r4, [sp, #0]
 8017b52:	f7ff ff79 	bl	8017a48 <_strtol_l.isra.0>
 8017b56:	b003      	add	sp, #12
 8017b58:	bd30      	pop	{r4, r5, pc}
 8017b5a:	bf00      	nop
 8017b5c:	20000a0c 	.word	0x20000a0c
 8017b60:	20000a70 	.word	0x20000a70

08017b64 <quorem>:
 8017b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b68:	6903      	ldr	r3, [r0, #16]
 8017b6a:	690c      	ldr	r4, [r1, #16]
 8017b6c:	42a3      	cmp	r3, r4
 8017b6e:	4680      	mov	r8, r0
 8017b70:	f2c0 8082 	blt.w	8017c78 <quorem+0x114>
 8017b74:	3c01      	subs	r4, #1
 8017b76:	f101 0714 	add.w	r7, r1, #20
 8017b7a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017b7e:	f100 0614 	add.w	r6, r0, #20
 8017b82:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017b86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017b8a:	eb06 030c 	add.w	r3, r6, ip
 8017b8e:	3501      	adds	r5, #1
 8017b90:	eb07 090c 	add.w	r9, r7, ip
 8017b94:	9301      	str	r3, [sp, #4]
 8017b96:	fbb0 f5f5 	udiv	r5, r0, r5
 8017b9a:	b395      	cbz	r5, 8017c02 <quorem+0x9e>
 8017b9c:	f04f 0a00 	mov.w	sl, #0
 8017ba0:	4638      	mov	r0, r7
 8017ba2:	46b6      	mov	lr, r6
 8017ba4:	46d3      	mov	fp, sl
 8017ba6:	f850 2b04 	ldr.w	r2, [r0], #4
 8017baa:	b293      	uxth	r3, r2
 8017bac:	fb05 a303 	mla	r3, r5, r3, sl
 8017bb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	ebab 0303 	sub.w	r3, fp, r3
 8017bba:	0c12      	lsrs	r2, r2, #16
 8017bbc:	f8de b000 	ldr.w	fp, [lr]
 8017bc0:	fb05 a202 	mla	r2, r5, r2, sl
 8017bc4:	fa13 f38b 	uxtah	r3, r3, fp
 8017bc8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017bcc:	fa1f fb82 	uxth.w	fp, r2
 8017bd0:	f8de 2000 	ldr.w	r2, [lr]
 8017bd4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017bd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017bdc:	b29b      	uxth	r3, r3
 8017bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017be2:	4581      	cmp	r9, r0
 8017be4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017be8:	f84e 3b04 	str.w	r3, [lr], #4
 8017bec:	d2db      	bcs.n	8017ba6 <quorem+0x42>
 8017bee:	f856 300c 	ldr.w	r3, [r6, ip]
 8017bf2:	b933      	cbnz	r3, 8017c02 <quorem+0x9e>
 8017bf4:	9b01      	ldr	r3, [sp, #4]
 8017bf6:	3b04      	subs	r3, #4
 8017bf8:	429e      	cmp	r6, r3
 8017bfa:	461a      	mov	r2, r3
 8017bfc:	d330      	bcc.n	8017c60 <quorem+0xfc>
 8017bfe:	f8c8 4010 	str.w	r4, [r8, #16]
 8017c02:	4640      	mov	r0, r8
 8017c04:	f001 fb96 	bl	8019334 <__mcmp>
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	db25      	blt.n	8017c58 <quorem+0xf4>
 8017c0c:	3501      	adds	r5, #1
 8017c0e:	4630      	mov	r0, r6
 8017c10:	f04f 0c00 	mov.w	ip, #0
 8017c14:	f857 2b04 	ldr.w	r2, [r7], #4
 8017c18:	f8d0 e000 	ldr.w	lr, [r0]
 8017c1c:	b293      	uxth	r3, r2
 8017c1e:	ebac 0303 	sub.w	r3, ip, r3
 8017c22:	0c12      	lsrs	r2, r2, #16
 8017c24:	fa13 f38e 	uxtah	r3, r3, lr
 8017c28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c36:	45b9      	cmp	r9, r7
 8017c38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017c3c:	f840 3b04 	str.w	r3, [r0], #4
 8017c40:	d2e8      	bcs.n	8017c14 <quorem+0xb0>
 8017c42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017c46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017c4a:	b92a      	cbnz	r2, 8017c58 <quorem+0xf4>
 8017c4c:	3b04      	subs	r3, #4
 8017c4e:	429e      	cmp	r6, r3
 8017c50:	461a      	mov	r2, r3
 8017c52:	d30b      	bcc.n	8017c6c <quorem+0x108>
 8017c54:	f8c8 4010 	str.w	r4, [r8, #16]
 8017c58:	4628      	mov	r0, r5
 8017c5a:	b003      	add	sp, #12
 8017c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c60:	6812      	ldr	r2, [r2, #0]
 8017c62:	3b04      	subs	r3, #4
 8017c64:	2a00      	cmp	r2, #0
 8017c66:	d1ca      	bne.n	8017bfe <quorem+0x9a>
 8017c68:	3c01      	subs	r4, #1
 8017c6a:	e7c5      	b.n	8017bf8 <quorem+0x94>
 8017c6c:	6812      	ldr	r2, [r2, #0]
 8017c6e:	3b04      	subs	r3, #4
 8017c70:	2a00      	cmp	r2, #0
 8017c72:	d1ef      	bne.n	8017c54 <quorem+0xf0>
 8017c74:	3c01      	subs	r4, #1
 8017c76:	e7ea      	b.n	8017c4e <quorem+0xea>
 8017c78:	2000      	movs	r0, #0
 8017c7a:	e7ee      	b.n	8017c5a <quorem+0xf6>
 8017c7c:	0000      	movs	r0, r0
	...

08017c80 <_dtoa_r>:
 8017c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c84:	ec57 6b10 	vmov	r6, r7, d0
 8017c88:	b097      	sub	sp, #92	; 0x5c
 8017c8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017c8c:	9106      	str	r1, [sp, #24]
 8017c8e:	4604      	mov	r4, r0
 8017c90:	920b      	str	r2, [sp, #44]	; 0x2c
 8017c92:	9312      	str	r3, [sp, #72]	; 0x48
 8017c94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017c98:	e9cd 6700 	strd	r6, r7, [sp]
 8017c9c:	b93d      	cbnz	r5, 8017cae <_dtoa_r+0x2e>
 8017c9e:	2010      	movs	r0, #16
 8017ca0:	f7fe f924 	bl	8015eec <malloc>
 8017ca4:	6260      	str	r0, [r4, #36]	; 0x24
 8017ca6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017caa:	6005      	str	r5, [r0, #0]
 8017cac:	60c5      	str	r5, [r0, #12]
 8017cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017cb0:	6819      	ldr	r1, [r3, #0]
 8017cb2:	b151      	cbz	r1, 8017cca <_dtoa_r+0x4a>
 8017cb4:	685a      	ldr	r2, [r3, #4]
 8017cb6:	604a      	str	r2, [r1, #4]
 8017cb8:	2301      	movs	r3, #1
 8017cba:	4093      	lsls	r3, r2
 8017cbc:	608b      	str	r3, [r1, #8]
 8017cbe:	4620      	mov	r0, r4
 8017cc0:	f001 f918 	bl	8018ef4 <_Bfree>
 8017cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	601a      	str	r2, [r3, #0]
 8017cca:	1e3b      	subs	r3, r7, #0
 8017ccc:	bfbb      	ittet	lt
 8017cce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017cd2:	9301      	strlt	r3, [sp, #4]
 8017cd4:	2300      	movge	r3, #0
 8017cd6:	2201      	movlt	r2, #1
 8017cd8:	bfac      	ite	ge
 8017cda:	f8c8 3000 	strge.w	r3, [r8]
 8017cde:	f8c8 2000 	strlt.w	r2, [r8]
 8017ce2:	4baf      	ldr	r3, [pc, #700]	; (8017fa0 <_dtoa_r+0x320>)
 8017ce4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017ce8:	ea33 0308 	bics.w	r3, r3, r8
 8017cec:	d114      	bne.n	8017d18 <_dtoa_r+0x98>
 8017cee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8017cf4:	6013      	str	r3, [r2, #0]
 8017cf6:	9b00      	ldr	r3, [sp, #0]
 8017cf8:	b923      	cbnz	r3, 8017d04 <_dtoa_r+0x84>
 8017cfa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017cfe:	2800      	cmp	r0, #0
 8017d00:	f000 8542 	beq.w	8018788 <_dtoa_r+0xb08>
 8017d04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017fb4 <_dtoa_r+0x334>
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	f000 8544 	beq.w	8018798 <_dtoa_r+0xb18>
 8017d10:	f10b 0303 	add.w	r3, fp, #3
 8017d14:	f000 bd3e 	b.w	8018794 <_dtoa_r+0xb14>
 8017d18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	2300      	movs	r3, #0
 8017d20:	4630      	mov	r0, r6
 8017d22:	4639      	mov	r1, r7
 8017d24:	f7e8 fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8017d28:	4681      	mov	r9, r0
 8017d2a:	b168      	cbz	r0, 8017d48 <_dtoa_r+0xc8>
 8017d2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d2e:	2301      	movs	r3, #1
 8017d30:	6013      	str	r3, [r2, #0]
 8017d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	f000 8524 	beq.w	8018782 <_dtoa_r+0xb02>
 8017d3a:	4b9a      	ldr	r3, [pc, #616]	; (8017fa4 <_dtoa_r+0x324>)
 8017d3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017d3e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017d42:	6013      	str	r3, [r2, #0]
 8017d44:	f000 bd28 	b.w	8018798 <_dtoa_r+0xb18>
 8017d48:	aa14      	add	r2, sp, #80	; 0x50
 8017d4a:	a915      	add	r1, sp, #84	; 0x54
 8017d4c:	ec47 6b10 	vmov	d0, r6, r7
 8017d50:	4620      	mov	r0, r4
 8017d52:	f001 fbdd 	bl	8019510 <__d2b>
 8017d56:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017d5a:	9004      	str	r0, [sp, #16]
 8017d5c:	2d00      	cmp	r5, #0
 8017d5e:	d07c      	beq.n	8017e5a <_dtoa_r+0x1da>
 8017d60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017d64:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017d68:	46b2      	mov	sl, r6
 8017d6a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017d72:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017d76:	2200      	movs	r2, #0
 8017d78:	4b8b      	ldr	r3, [pc, #556]	; (8017fa8 <_dtoa_r+0x328>)
 8017d7a:	4650      	mov	r0, sl
 8017d7c:	4659      	mov	r1, fp
 8017d7e:	f7e8 fa83 	bl	8000288 <__aeabi_dsub>
 8017d82:	a381      	add	r3, pc, #516	; (adr r3, 8017f88 <_dtoa_r+0x308>)
 8017d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d88:	f7e8 fc36 	bl	80005f8 <__aeabi_dmul>
 8017d8c:	a380      	add	r3, pc, #512	; (adr r3, 8017f90 <_dtoa_r+0x310>)
 8017d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d92:	f7e8 fa7b 	bl	800028c <__adddf3>
 8017d96:	4606      	mov	r6, r0
 8017d98:	4628      	mov	r0, r5
 8017d9a:	460f      	mov	r7, r1
 8017d9c:	f7e8 fbc2 	bl	8000524 <__aeabi_i2d>
 8017da0:	a37d      	add	r3, pc, #500	; (adr r3, 8017f98 <_dtoa_r+0x318>)
 8017da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017da6:	f7e8 fc27 	bl	80005f8 <__aeabi_dmul>
 8017daa:	4602      	mov	r2, r0
 8017dac:	460b      	mov	r3, r1
 8017dae:	4630      	mov	r0, r6
 8017db0:	4639      	mov	r1, r7
 8017db2:	f7e8 fa6b 	bl	800028c <__adddf3>
 8017db6:	4606      	mov	r6, r0
 8017db8:	460f      	mov	r7, r1
 8017dba:	f7e8 fecd 	bl	8000b58 <__aeabi_d2iz>
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	4682      	mov	sl, r0
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	4630      	mov	r0, r6
 8017dc6:	4639      	mov	r1, r7
 8017dc8:	f7e8 fe88 	bl	8000adc <__aeabi_dcmplt>
 8017dcc:	b148      	cbz	r0, 8017de2 <_dtoa_r+0x162>
 8017dce:	4650      	mov	r0, sl
 8017dd0:	f7e8 fba8 	bl	8000524 <__aeabi_i2d>
 8017dd4:	4632      	mov	r2, r6
 8017dd6:	463b      	mov	r3, r7
 8017dd8:	f7e8 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8017ddc:	b908      	cbnz	r0, 8017de2 <_dtoa_r+0x162>
 8017dde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017de2:	f1ba 0f16 	cmp.w	sl, #22
 8017de6:	d859      	bhi.n	8017e9c <_dtoa_r+0x21c>
 8017de8:	4970      	ldr	r1, [pc, #448]	; (8017fac <_dtoa_r+0x32c>)
 8017dea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017df6:	f7e8 fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 8017dfa:	2800      	cmp	r0, #0
 8017dfc:	d050      	beq.n	8017ea0 <_dtoa_r+0x220>
 8017dfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e02:	2300      	movs	r3, #0
 8017e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e08:	1b5d      	subs	r5, r3, r5
 8017e0a:	f1b5 0801 	subs.w	r8, r5, #1
 8017e0e:	bf49      	itett	mi
 8017e10:	f1c5 0301 	rsbmi	r3, r5, #1
 8017e14:	2300      	movpl	r3, #0
 8017e16:	9305      	strmi	r3, [sp, #20]
 8017e18:	f04f 0800 	movmi.w	r8, #0
 8017e1c:	bf58      	it	pl
 8017e1e:	9305      	strpl	r3, [sp, #20]
 8017e20:	f1ba 0f00 	cmp.w	sl, #0
 8017e24:	db3e      	blt.n	8017ea4 <_dtoa_r+0x224>
 8017e26:	2300      	movs	r3, #0
 8017e28:	44d0      	add	r8, sl
 8017e2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017e2e:	9307      	str	r3, [sp, #28]
 8017e30:	9b06      	ldr	r3, [sp, #24]
 8017e32:	2b09      	cmp	r3, #9
 8017e34:	f200 8090 	bhi.w	8017f58 <_dtoa_r+0x2d8>
 8017e38:	2b05      	cmp	r3, #5
 8017e3a:	bfc4      	itt	gt
 8017e3c:	3b04      	subgt	r3, #4
 8017e3e:	9306      	strgt	r3, [sp, #24]
 8017e40:	9b06      	ldr	r3, [sp, #24]
 8017e42:	f1a3 0302 	sub.w	r3, r3, #2
 8017e46:	bfcc      	ite	gt
 8017e48:	2500      	movgt	r5, #0
 8017e4a:	2501      	movle	r5, #1
 8017e4c:	2b03      	cmp	r3, #3
 8017e4e:	f200 808f 	bhi.w	8017f70 <_dtoa_r+0x2f0>
 8017e52:	e8df f003 	tbb	[pc, r3]
 8017e56:	7f7d      	.short	0x7f7d
 8017e58:	7131      	.short	0x7131
 8017e5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017e5e:	441d      	add	r5, r3
 8017e60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017e64:	2820      	cmp	r0, #32
 8017e66:	dd13      	ble.n	8017e90 <_dtoa_r+0x210>
 8017e68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017e6c:	9b00      	ldr	r3, [sp, #0]
 8017e6e:	fa08 f800 	lsl.w	r8, r8, r0
 8017e72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017e76:	fa23 f000 	lsr.w	r0, r3, r0
 8017e7a:	ea48 0000 	orr.w	r0, r8, r0
 8017e7e:	f7e8 fb41 	bl	8000504 <__aeabi_ui2d>
 8017e82:	2301      	movs	r3, #1
 8017e84:	4682      	mov	sl, r0
 8017e86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017e8a:	3d01      	subs	r5, #1
 8017e8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017e8e:	e772      	b.n	8017d76 <_dtoa_r+0xf6>
 8017e90:	9b00      	ldr	r3, [sp, #0]
 8017e92:	f1c0 0020 	rsb	r0, r0, #32
 8017e96:	fa03 f000 	lsl.w	r0, r3, r0
 8017e9a:	e7f0      	b.n	8017e7e <_dtoa_r+0x1fe>
 8017e9c:	2301      	movs	r3, #1
 8017e9e:	e7b1      	b.n	8017e04 <_dtoa_r+0x184>
 8017ea0:	900f      	str	r0, [sp, #60]	; 0x3c
 8017ea2:	e7b0      	b.n	8017e06 <_dtoa_r+0x186>
 8017ea4:	9b05      	ldr	r3, [sp, #20]
 8017ea6:	eba3 030a 	sub.w	r3, r3, sl
 8017eaa:	9305      	str	r3, [sp, #20]
 8017eac:	f1ca 0300 	rsb	r3, sl, #0
 8017eb0:	9307      	str	r3, [sp, #28]
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	930e      	str	r3, [sp, #56]	; 0x38
 8017eb6:	e7bb      	b.n	8017e30 <_dtoa_r+0x1b0>
 8017eb8:	2301      	movs	r3, #1
 8017eba:	930a      	str	r3, [sp, #40]	; 0x28
 8017ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	dd59      	ble.n	8017f76 <_dtoa_r+0x2f6>
 8017ec2:	9302      	str	r3, [sp, #8]
 8017ec4:	4699      	mov	r9, r3
 8017ec6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017ec8:	2200      	movs	r2, #0
 8017eca:	6072      	str	r2, [r6, #4]
 8017ecc:	2204      	movs	r2, #4
 8017ece:	f102 0014 	add.w	r0, r2, #20
 8017ed2:	4298      	cmp	r0, r3
 8017ed4:	6871      	ldr	r1, [r6, #4]
 8017ed6:	d953      	bls.n	8017f80 <_dtoa_r+0x300>
 8017ed8:	4620      	mov	r0, r4
 8017eda:	f000 ffd7 	bl	8018e8c <_Balloc>
 8017ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ee0:	6030      	str	r0, [r6, #0]
 8017ee2:	f1b9 0f0e 	cmp.w	r9, #14
 8017ee6:	f8d3 b000 	ldr.w	fp, [r3]
 8017eea:	f200 80e6 	bhi.w	80180ba <_dtoa_r+0x43a>
 8017eee:	2d00      	cmp	r5, #0
 8017ef0:	f000 80e3 	beq.w	80180ba <_dtoa_r+0x43a>
 8017ef4:	ed9d 7b00 	vldr	d7, [sp]
 8017ef8:	f1ba 0f00 	cmp.w	sl, #0
 8017efc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017f00:	dd74      	ble.n	8017fec <_dtoa_r+0x36c>
 8017f02:	4a2a      	ldr	r2, [pc, #168]	; (8017fac <_dtoa_r+0x32c>)
 8017f04:	f00a 030f 	and.w	r3, sl, #15
 8017f08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017f0c:	ed93 7b00 	vldr	d7, [r3]
 8017f10:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017f14:	06f0      	lsls	r0, r6, #27
 8017f16:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017f1a:	d565      	bpl.n	8017fe8 <_dtoa_r+0x368>
 8017f1c:	4b24      	ldr	r3, [pc, #144]	; (8017fb0 <_dtoa_r+0x330>)
 8017f1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017f22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017f26:	f7e8 fc91 	bl	800084c <__aeabi_ddiv>
 8017f2a:	e9cd 0100 	strd	r0, r1, [sp]
 8017f2e:	f006 060f 	and.w	r6, r6, #15
 8017f32:	2503      	movs	r5, #3
 8017f34:	4f1e      	ldr	r7, [pc, #120]	; (8017fb0 <_dtoa_r+0x330>)
 8017f36:	e04c      	b.n	8017fd2 <_dtoa_r+0x352>
 8017f38:	2301      	movs	r3, #1
 8017f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8017f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f3e:	4453      	add	r3, sl
 8017f40:	f103 0901 	add.w	r9, r3, #1
 8017f44:	9302      	str	r3, [sp, #8]
 8017f46:	464b      	mov	r3, r9
 8017f48:	2b01      	cmp	r3, #1
 8017f4a:	bfb8      	it	lt
 8017f4c:	2301      	movlt	r3, #1
 8017f4e:	e7ba      	b.n	8017ec6 <_dtoa_r+0x246>
 8017f50:	2300      	movs	r3, #0
 8017f52:	e7b2      	b.n	8017eba <_dtoa_r+0x23a>
 8017f54:	2300      	movs	r3, #0
 8017f56:	e7f0      	b.n	8017f3a <_dtoa_r+0x2ba>
 8017f58:	2501      	movs	r5, #1
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	9306      	str	r3, [sp, #24]
 8017f5e:	950a      	str	r5, [sp, #40]	; 0x28
 8017f60:	f04f 33ff 	mov.w	r3, #4294967295
 8017f64:	9302      	str	r3, [sp, #8]
 8017f66:	4699      	mov	r9, r3
 8017f68:	2200      	movs	r2, #0
 8017f6a:	2312      	movs	r3, #18
 8017f6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8017f6e:	e7aa      	b.n	8017ec6 <_dtoa_r+0x246>
 8017f70:	2301      	movs	r3, #1
 8017f72:	930a      	str	r3, [sp, #40]	; 0x28
 8017f74:	e7f4      	b.n	8017f60 <_dtoa_r+0x2e0>
 8017f76:	2301      	movs	r3, #1
 8017f78:	9302      	str	r3, [sp, #8]
 8017f7a:	4699      	mov	r9, r3
 8017f7c:	461a      	mov	r2, r3
 8017f7e:	e7f5      	b.n	8017f6c <_dtoa_r+0x2ec>
 8017f80:	3101      	adds	r1, #1
 8017f82:	6071      	str	r1, [r6, #4]
 8017f84:	0052      	lsls	r2, r2, #1
 8017f86:	e7a2      	b.n	8017ece <_dtoa_r+0x24e>
 8017f88:	636f4361 	.word	0x636f4361
 8017f8c:	3fd287a7 	.word	0x3fd287a7
 8017f90:	8b60c8b3 	.word	0x8b60c8b3
 8017f94:	3fc68a28 	.word	0x3fc68a28
 8017f98:	509f79fb 	.word	0x509f79fb
 8017f9c:	3fd34413 	.word	0x3fd34413
 8017fa0:	7ff00000 	.word	0x7ff00000
 8017fa4:	0801b6d9 	.word	0x0801b6d9
 8017fa8:	3ff80000 	.word	0x3ff80000
 8017fac:	0801b798 	.word	0x0801b798
 8017fb0:	0801b770 	.word	0x0801b770
 8017fb4:	0801b761 	.word	0x0801b761
 8017fb8:	07f1      	lsls	r1, r6, #31
 8017fba:	d508      	bpl.n	8017fce <_dtoa_r+0x34e>
 8017fbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017fc4:	f7e8 fb18 	bl	80005f8 <__aeabi_dmul>
 8017fc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017fcc:	3501      	adds	r5, #1
 8017fce:	1076      	asrs	r6, r6, #1
 8017fd0:	3708      	adds	r7, #8
 8017fd2:	2e00      	cmp	r6, #0
 8017fd4:	d1f0      	bne.n	8017fb8 <_dtoa_r+0x338>
 8017fd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017fda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017fde:	f7e8 fc35 	bl	800084c <__aeabi_ddiv>
 8017fe2:	e9cd 0100 	strd	r0, r1, [sp]
 8017fe6:	e01a      	b.n	801801e <_dtoa_r+0x39e>
 8017fe8:	2502      	movs	r5, #2
 8017fea:	e7a3      	b.n	8017f34 <_dtoa_r+0x2b4>
 8017fec:	f000 80a0 	beq.w	8018130 <_dtoa_r+0x4b0>
 8017ff0:	f1ca 0600 	rsb	r6, sl, #0
 8017ff4:	4b9f      	ldr	r3, [pc, #636]	; (8018274 <_dtoa_r+0x5f4>)
 8017ff6:	4fa0      	ldr	r7, [pc, #640]	; (8018278 <_dtoa_r+0x5f8>)
 8017ff8:	f006 020f 	and.w	r2, r6, #15
 8017ffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018008:	f7e8 faf6 	bl	80005f8 <__aeabi_dmul>
 801800c:	e9cd 0100 	strd	r0, r1, [sp]
 8018010:	1136      	asrs	r6, r6, #4
 8018012:	2300      	movs	r3, #0
 8018014:	2502      	movs	r5, #2
 8018016:	2e00      	cmp	r6, #0
 8018018:	d17f      	bne.n	801811a <_dtoa_r+0x49a>
 801801a:	2b00      	cmp	r3, #0
 801801c:	d1e1      	bne.n	8017fe2 <_dtoa_r+0x362>
 801801e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018020:	2b00      	cmp	r3, #0
 8018022:	f000 8087 	beq.w	8018134 <_dtoa_r+0x4b4>
 8018026:	e9dd 6700 	ldrd	r6, r7, [sp]
 801802a:	2200      	movs	r2, #0
 801802c:	4b93      	ldr	r3, [pc, #588]	; (801827c <_dtoa_r+0x5fc>)
 801802e:	4630      	mov	r0, r6
 8018030:	4639      	mov	r1, r7
 8018032:	f7e8 fd53 	bl	8000adc <__aeabi_dcmplt>
 8018036:	2800      	cmp	r0, #0
 8018038:	d07c      	beq.n	8018134 <_dtoa_r+0x4b4>
 801803a:	f1b9 0f00 	cmp.w	r9, #0
 801803e:	d079      	beq.n	8018134 <_dtoa_r+0x4b4>
 8018040:	9b02      	ldr	r3, [sp, #8]
 8018042:	2b00      	cmp	r3, #0
 8018044:	dd35      	ble.n	80180b2 <_dtoa_r+0x432>
 8018046:	f10a 33ff 	add.w	r3, sl, #4294967295
 801804a:	9308      	str	r3, [sp, #32]
 801804c:	4639      	mov	r1, r7
 801804e:	2200      	movs	r2, #0
 8018050:	4b8b      	ldr	r3, [pc, #556]	; (8018280 <_dtoa_r+0x600>)
 8018052:	4630      	mov	r0, r6
 8018054:	f7e8 fad0 	bl	80005f8 <__aeabi_dmul>
 8018058:	e9cd 0100 	strd	r0, r1, [sp]
 801805c:	9f02      	ldr	r7, [sp, #8]
 801805e:	3501      	adds	r5, #1
 8018060:	4628      	mov	r0, r5
 8018062:	f7e8 fa5f 	bl	8000524 <__aeabi_i2d>
 8018066:	e9dd 2300 	ldrd	r2, r3, [sp]
 801806a:	f7e8 fac5 	bl	80005f8 <__aeabi_dmul>
 801806e:	2200      	movs	r2, #0
 8018070:	4b84      	ldr	r3, [pc, #528]	; (8018284 <_dtoa_r+0x604>)
 8018072:	f7e8 f90b 	bl	800028c <__adddf3>
 8018076:	4605      	mov	r5, r0
 8018078:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801807c:	2f00      	cmp	r7, #0
 801807e:	d15d      	bne.n	801813c <_dtoa_r+0x4bc>
 8018080:	2200      	movs	r2, #0
 8018082:	4b81      	ldr	r3, [pc, #516]	; (8018288 <_dtoa_r+0x608>)
 8018084:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018088:	f7e8 f8fe 	bl	8000288 <__aeabi_dsub>
 801808c:	462a      	mov	r2, r5
 801808e:	4633      	mov	r3, r6
 8018090:	e9cd 0100 	strd	r0, r1, [sp]
 8018094:	f7e8 fd40 	bl	8000b18 <__aeabi_dcmpgt>
 8018098:	2800      	cmp	r0, #0
 801809a:	f040 8288 	bne.w	80185ae <_dtoa_r+0x92e>
 801809e:	462a      	mov	r2, r5
 80180a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80180a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180a8:	f7e8 fd18 	bl	8000adc <__aeabi_dcmplt>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	f040 827c 	bne.w	80185aa <_dtoa_r+0x92a>
 80180b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80180b6:	e9cd 2300 	strd	r2, r3, [sp]
 80180ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180bc:	2b00      	cmp	r3, #0
 80180be:	f2c0 8150 	blt.w	8018362 <_dtoa_r+0x6e2>
 80180c2:	f1ba 0f0e 	cmp.w	sl, #14
 80180c6:	f300 814c 	bgt.w	8018362 <_dtoa_r+0x6e2>
 80180ca:	4b6a      	ldr	r3, [pc, #424]	; (8018274 <_dtoa_r+0x5f4>)
 80180cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80180d0:	ed93 7b00 	vldr	d7, [r3]
 80180d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80180dc:	f280 80d8 	bge.w	8018290 <_dtoa_r+0x610>
 80180e0:	f1b9 0f00 	cmp.w	r9, #0
 80180e4:	f300 80d4 	bgt.w	8018290 <_dtoa_r+0x610>
 80180e8:	f040 825e 	bne.w	80185a8 <_dtoa_r+0x928>
 80180ec:	2200      	movs	r2, #0
 80180ee:	4b66      	ldr	r3, [pc, #408]	; (8018288 <_dtoa_r+0x608>)
 80180f0:	ec51 0b17 	vmov	r0, r1, d7
 80180f4:	f7e8 fa80 	bl	80005f8 <__aeabi_dmul>
 80180f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80180fc:	f7e8 fd02 	bl	8000b04 <__aeabi_dcmpge>
 8018100:	464f      	mov	r7, r9
 8018102:	464e      	mov	r6, r9
 8018104:	2800      	cmp	r0, #0
 8018106:	f040 8234 	bne.w	8018572 <_dtoa_r+0x8f2>
 801810a:	2331      	movs	r3, #49	; 0x31
 801810c:	f10b 0501 	add.w	r5, fp, #1
 8018110:	f88b 3000 	strb.w	r3, [fp]
 8018114:	f10a 0a01 	add.w	sl, sl, #1
 8018118:	e22f      	b.n	801857a <_dtoa_r+0x8fa>
 801811a:	07f2      	lsls	r2, r6, #31
 801811c:	d505      	bpl.n	801812a <_dtoa_r+0x4aa>
 801811e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018122:	f7e8 fa69 	bl	80005f8 <__aeabi_dmul>
 8018126:	3501      	adds	r5, #1
 8018128:	2301      	movs	r3, #1
 801812a:	1076      	asrs	r6, r6, #1
 801812c:	3708      	adds	r7, #8
 801812e:	e772      	b.n	8018016 <_dtoa_r+0x396>
 8018130:	2502      	movs	r5, #2
 8018132:	e774      	b.n	801801e <_dtoa_r+0x39e>
 8018134:	f8cd a020 	str.w	sl, [sp, #32]
 8018138:	464f      	mov	r7, r9
 801813a:	e791      	b.n	8018060 <_dtoa_r+0x3e0>
 801813c:	4b4d      	ldr	r3, [pc, #308]	; (8018274 <_dtoa_r+0x5f4>)
 801813e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018142:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8018146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018148:	2b00      	cmp	r3, #0
 801814a:	d047      	beq.n	80181dc <_dtoa_r+0x55c>
 801814c:	4602      	mov	r2, r0
 801814e:	460b      	mov	r3, r1
 8018150:	2000      	movs	r0, #0
 8018152:	494e      	ldr	r1, [pc, #312]	; (801828c <_dtoa_r+0x60c>)
 8018154:	f7e8 fb7a 	bl	800084c <__aeabi_ddiv>
 8018158:	462a      	mov	r2, r5
 801815a:	4633      	mov	r3, r6
 801815c:	f7e8 f894 	bl	8000288 <__aeabi_dsub>
 8018160:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018164:	465d      	mov	r5, fp
 8018166:	e9dd 0100 	ldrd	r0, r1, [sp]
 801816a:	f7e8 fcf5 	bl	8000b58 <__aeabi_d2iz>
 801816e:	4606      	mov	r6, r0
 8018170:	f7e8 f9d8 	bl	8000524 <__aeabi_i2d>
 8018174:	4602      	mov	r2, r0
 8018176:	460b      	mov	r3, r1
 8018178:	e9dd 0100 	ldrd	r0, r1, [sp]
 801817c:	f7e8 f884 	bl	8000288 <__aeabi_dsub>
 8018180:	3630      	adds	r6, #48	; 0x30
 8018182:	f805 6b01 	strb.w	r6, [r5], #1
 8018186:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801818a:	e9cd 0100 	strd	r0, r1, [sp]
 801818e:	f7e8 fca5 	bl	8000adc <__aeabi_dcmplt>
 8018192:	2800      	cmp	r0, #0
 8018194:	d163      	bne.n	801825e <_dtoa_r+0x5de>
 8018196:	e9dd 2300 	ldrd	r2, r3, [sp]
 801819a:	2000      	movs	r0, #0
 801819c:	4937      	ldr	r1, [pc, #220]	; (801827c <_dtoa_r+0x5fc>)
 801819e:	f7e8 f873 	bl	8000288 <__aeabi_dsub>
 80181a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80181a6:	f7e8 fc99 	bl	8000adc <__aeabi_dcmplt>
 80181aa:	2800      	cmp	r0, #0
 80181ac:	f040 80b7 	bne.w	801831e <_dtoa_r+0x69e>
 80181b0:	eba5 030b 	sub.w	r3, r5, fp
 80181b4:	429f      	cmp	r7, r3
 80181b6:	f77f af7c 	ble.w	80180b2 <_dtoa_r+0x432>
 80181ba:	2200      	movs	r2, #0
 80181bc:	4b30      	ldr	r3, [pc, #192]	; (8018280 <_dtoa_r+0x600>)
 80181be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80181c2:	f7e8 fa19 	bl	80005f8 <__aeabi_dmul>
 80181c6:	2200      	movs	r2, #0
 80181c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80181cc:	4b2c      	ldr	r3, [pc, #176]	; (8018280 <_dtoa_r+0x600>)
 80181ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80181d2:	f7e8 fa11 	bl	80005f8 <__aeabi_dmul>
 80181d6:	e9cd 0100 	strd	r0, r1, [sp]
 80181da:	e7c4      	b.n	8018166 <_dtoa_r+0x4e6>
 80181dc:	462a      	mov	r2, r5
 80181de:	4633      	mov	r3, r6
 80181e0:	f7e8 fa0a 	bl	80005f8 <__aeabi_dmul>
 80181e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80181e8:	eb0b 0507 	add.w	r5, fp, r7
 80181ec:	465e      	mov	r6, fp
 80181ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80181f2:	f7e8 fcb1 	bl	8000b58 <__aeabi_d2iz>
 80181f6:	4607      	mov	r7, r0
 80181f8:	f7e8 f994 	bl	8000524 <__aeabi_i2d>
 80181fc:	3730      	adds	r7, #48	; 0x30
 80181fe:	4602      	mov	r2, r0
 8018200:	460b      	mov	r3, r1
 8018202:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018206:	f7e8 f83f 	bl	8000288 <__aeabi_dsub>
 801820a:	f806 7b01 	strb.w	r7, [r6], #1
 801820e:	42ae      	cmp	r6, r5
 8018210:	e9cd 0100 	strd	r0, r1, [sp]
 8018214:	f04f 0200 	mov.w	r2, #0
 8018218:	d126      	bne.n	8018268 <_dtoa_r+0x5e8>
 801821a:	4b1c      	ldr	r3, [pc, #112]	; (801828c <_dtoa_r+0x60c>)
 801821c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018220:	f7e8 f834 	bl	800028c <__adddf3>
 8018224:	4602      	mov	r2, r0
 8018226:	460b      	mov	r3, r1
 8018228:	e9dd 0100 	ldrd	r0, r1, [sp]
 801822c:	f7e8 fc74 	bl	8000b18 <__aeabi_dcmpgt>
 8018230:	2800      	cmp	r0, #0
 8018232:	d174      	bne.n	801831e <_dtoa_r+0x69e>
 8018234:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018238:	2000      	movs	r0, #0
 801823a:	4914      	ldr	r1, [pc, #80]	; (801828c <_dtoa_r+0x60c>)
 801823c:	f7e8 f824 	bl	8000288 <__aeabi_dsub>
 8018240:	4602      	mov	r2, r0
 8018242:	460b      	mov	r3, r1
 8018244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018248:	f7e8 fc48 	bl	8000adc <__aeabi_dcmplt>
 801824c:	2800      	cmp	r0, #0
 801824e:	f43f af30 	beq.w	80180b2 <_dtoa_r+0x432>
 8018252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018256:	2b30      	cmp	r3, #48	; 0x30
 8018258:	f105 32ff 	add.w	r2, r5, #4294967295
 801825c:	d002      	beq.n	8018264 <_dtoa_r+0x5e4>
 801825e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018262:	e04a      	b.n	80182fa <_dtoa_r+0x67a>
 8018264:	4615      	mov	r5, r2
 8018266:	e7f4      	b.n	8018252 <_dtoa_r+0x5d2>
 8018268:	4b05      	ldr	r3, [pc, #20]	; (8018280 <_dtoa_r+0x600>)
 801826a:	f7e8 f9c5 	bl	80005f8 <__aeabi_dmul>
 801826e:	e9cd 0100 	strd	r0, r1, [sp]
 8018272:	e7bc      	b.n	80181ee <_dtoa_r+0x56e>
 8018274:	0801b798 	.word	0x0801b798
 8018278:	0801b770 	.word	0x0801b770
 801827c:	3ff00000 	.word	0x3ff00000
 8018280:	40240000 	.word	0x40240000
 8018284:	401c0000 	.word	0x401c0000
 8018288:	40140000 	.word	0x40140000
 801828c:	3fe00000 	.word	0x3fe00000
 8018290:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018294:	465d      	mov	r5, fp
 8018296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801829a:	4630      	mov	r0, r6
 801829c:	4639      	mov	r1, r7
 801829e:	f7e8 fad5 	bl	800084c <__aeabi_ddiv>
 80182a2:	f7e8 fc59 	bl	8000b58 <__aeabi_d2iz>
 80182a6:	4680      	mov	r8, r0
 80182a8:	f7e8 f93c 	bl	8000524 <__aeabi_i2d>
 80182ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80182b0:	f7e8 f9a2 	bl	80005f8 <__aeabi_dmul>
 80182b4:	4602      	mov	r2, r0
 80182b6:	460b      	mov	r3, r1
 80182b8:	4630      	mov	r0, r6
 80182ba:	4639      	mov	r1, r7
 80182bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80182c0:	f7e7 ffe2 	bl	8000288 <__aeabi_dsub>
 80182c4:	f805 6b01 	strb.w	r6, [r5], #1
 80182c8:	eba5 060b 	sub.w	r6, r5, fp
 80182cc:	45b1      	cmp	r9, r6
 80182ce:	4602      	mov	r2, r0
 80182d0:	460b      	mov	r3, r1
 80182d2:	d139      	bne.n	8018348 <_dtoa_r+0x6c8>
 80182d4:	f7e7 ffda 	bl	800028c <__adddf3>
 80182d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80182dc:	4606      	mov	r6, r0
 80182de:	460f      	mov	r7, r1
 80182e0:	f7e8 fc1a 	bl	8000b18 <__aeabi_dcmpgt>
 80182e4:	b9c8      	cbnz	r0, 801831a <_dtoa_r+0x69a>
 80182e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80182ea:	4630      	mov	r0, r6
 80182ec:	4639      	mov	r1, r7
 80182ee:	f7e8 fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80182f2:	b110      	cbz	r0, 80182fa <_dtoa_r+0x67a>
 80182f4:	f018 0f01 	tst.w	r8, #1
 80182f8:	d10f      	bne.n	801831a <_dtoa_r+0x69a>
 80182fa:	9904      	ldr	r1, [sp, #16]
 80182fc:	4620      	mov	r0, r4
 80182fe:	f000 fdf9 	bl	8018ef4 <_Bfree>
 8018302:	2300      	movs	r3, #0
 8018304:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018306:	702b      	strb	r3, [r5, #0]
 8018308:	f10a 0301 	add.w	r3, sl, #1
 801830c:	6013      	str	r3, [r2, #0]
 801830e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018310:	2b00      	cmp	r3, #0
 8018312:	f000 8241 	beq.w	8018798 <_dtoa_r+0xb18>
 8018316:	601d      	str	r5, [r3, #0]
 8018318:	e23e      	b.n	8018798 <_dtoa_r+0xb18>
 801831a:	f8cd a020 	str.w	sl, [sp, #32]
 801831e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018322:	2a39      	cmp	r2, #57	; 0x39
 8018324:	f105 33ff 	add.w	r3, r5, #4294967295
 8018328:	d108      	bne.n	801833c <_dtoa_r+0x6bc>
 801832a:	459b      	cmp	fp, r3
 801832c:	d10a      	bne.n	8018344 <_dtoa_r+0x6c4>
 801832e:	9b08      	ldr	r3, [sp, #32]
 8018330:	3301      	adds	r3, #1
 8018332:	9308      	str	r3, [sp, #32]
 8018334:	2330      	movs	r3, #48	; 0x30
 8018336:	f88b 3000 	strb.w	r3, [fp]
 801833a:	465b      	mov	r3, fp
 801833c:	781a      	ldrb	r2, [r3, #0]
 801833e:	3201      	adds	r2, #1
 8018340:	701a      	strb	r2, [r3, #0]
 8018342:	e78c      	b.n	801825e <_dtoa_r+0x5de>
 8018344:	461d      	mov	r5, r3
 8018346:	e7ea      	b.n	801831e <_dtoa_r+0x69e>
 8018348:	2200      	movs	r2, #0
 801834a:	4b9b      	ldr	r3, [pc, #620]	; (80185b8 <_dtoa_r+0x938>)
 801834c:	f7e8 f954 	bl	80005f8 <__aeabi_dmul>
 8018350:	2200      	movs	r2, #0
 8018352:	2300      	movs	r3, #0
 8018354:	4606      	mov	r6, r0
 8018356:	460f      	mov	r7, r1
 8018358:	f7e8 fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 801835c:	2800      	cmp	r0, #0
 801835e:	d09a      	beq.n	8018296 <_dtoa_r+0x616>
 8018360:	e7cb      	b.n	80182fa <_dtoa_r+0x67a>
 8018362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018364:	2a00      	cmp	r2, #0
 8018366:	f000 808b 	beq.w	8018480 <_dtoa_r+0x800>
 801836a:	9a06      	ldr	r2, [sp, #24]
 801836c:	2a01      	cmp	r2, #1
 801836e:	dc6e      	bgt.n	801844e <_dtoa_r+0x7ce>
 8018370:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018372:	2a00      	cmp	r2, #0
 8018374:	d067      	beq.n	8018446 <_dtoa_r+0x7c6>
 8018376:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801837a:	9f07      	ldr	r7, [sp, #28]
 801837c:	9d05      	ldr	r5, [sp, #20]
 801837e:	9a05      	ldr	r2, [sp, #20]
 8018380:	2101      	movs	r1, #1
 8018382:	441a      	add	r2, r3
 8018384:	4620      	mov	r0, r4
 8018386:	9205      	str	r2, [sp, #20]
 8018388:	4498      	add	r8, r3
 801838a:	f000 fe91 	bl	80190b0 <__i2b>
 801838e:	4606      	mov	r6, r0
 8018390:	2d00      	cmp	r5, #0
 8018392:	dd0c      	ble.n	80183ae <_dtoa_r+0x72e>
 8018394:	f1b8 0f00 	cmp.w	r8, #0
 8018398:	dd09      	ble.n	80183ae <_dtoa_r+0x72e>
 801839a:	4545      	cmp	r5, r8
 801839c:	9a05      	ldr	r2, [sp, #20]
 801839e:	462b      	mov	r3, r5
 80183a0:	bfa8      	it	ge
 80183a2:	4643      	movge	r3, r8
 80183a4:	1ad2      	subs	r2, r2, r3
 80183a6:	9205      	str	r2, [sp, #20]
 80183a8:	1aed      	subs	r5, r5, r3
 80183aa:	eba8 0803 	sub.w	r8, r8, r3
 80183ae:	9b07      	ldr	r3, [sp, #28]
 80183b0:	b1eb      	cbz	r3, 80183ee <_dtoa_r+0x76e>
 80183b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d067      	beq.n	8018488 <_dtoa_r+0x808>
 80183b8:	b18f      	cbz	r7, 80183de <_dtoa_r+0x75e>
 80183ba:	4631      	mov	r1, r6
 80183bc:	463a      	mov	r2, r7
 80183be:	4620      	mov	r0, r4
 80183c0:	f000 ff16 	bl	80191f0 <__pow5mult>
 80183c4:	9a04      	ldr	r2, [sp, #16]
 80183c6:	4601      	mov	r1, r0
 80183c8:	4606      	mov	r6, r0
 80183ca:	4620      	mov	r0, r4
 80183cc:	f000 fe79 	bl	80190c2 <__multiply>
 80183d0:	9904      	ldr	r1, [sp, #16]
 80183d2:	9008      	str	r0, [sp, #32]
 80183d4:	4620      	mov	r0, r4
 80183d6:	f000 fd8d 	bl	8018ef4 <_Bfree>
 80183da:	9b08      	ldr	r3, [sp, #32]
 80183dc:	9304      	str	r3, [sp, #16]
 80183de:	9b07      	ldr	r3, [sp, #28]
 80183e0:	1bda      	subs	r2, r3, r7
 80183e2:	d004      	beq.n	80183ee <_dtoa_r+0x76e>
 80183e4:	9904      	ldr	r1, [sp, #16]
 80183e6:	4620      	mov	r0, r4
 80183e8:	f000 ff02 	bl	80191f0 <__pow5mult>
 80183ec:	9004      	str	r0, [sp, #16]
 80183ee:	2101      	movs	r1, #1
 80183f0:	4620      	mov	r0, r4
 80183f2:	f000 fe5d 	bl	80190b0 <__i2b>
 80183f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183f8:	4607      	mov	r7, r0
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	f000 81d0 	beq.w	80187a0 <_dtoa_r+0xb20>
 8018400:	461a      	mov	r2, r3
 8018402:	4601      	mov	r1, r0
 8018404:	4620      	mov	r0, r4
 8018406:	f000 fef3 	bl	80191f0 <__pow5mult>
 801840a:	9b06      	ldr	r3, [sp, #24]
 801840c:	2b01      	cmp	r3, #1
 801840e:	4607      	mov	r7, r0
 8018410:	dc40      	bgt.n	8018494 <_dtoa_r+0x814>
 8018412:	9b00      	ldr	r3, [sp, #0]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d139      	bne.n	801848c <_dtoa_r+0x80c>
 8018418:	9b01      	ldr	r3, [sp, #4]
 801841a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801841e:	2b00      	cmp	r3, #0
 8018420:	d136      	bne.n	8018490 <_dtoa_r+0x810>
 8018422:	9b01      	ldr	r3, [sp, #4]
 8018424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018428:	0d1b      	lsrs	r3, r3, #20
 801842a:	051b      	lsls	r3, r3, #20
 801842c:	b12b      	cbz	r3, 801843a <_dtoa_r+0x7ba>
 801842e:	9b05      	ldr	r3, [sp, #20]
 8018430:	3301      	adds	r3, #1
 8018432:	9305      	str	r3, [sp, #20]
 8018434:	f108 0801 	add.w	r8, r8, #1
 8018438:	2301      	movs	r3, #1
 801843a:	9307      	str	r3, [sp, #28]
 801843c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801843e:	2b00      	cmp	r3, #0
 8018440:	d12a      	bne.n	8018498 <_dtoa_r+0x818>
 8018442:	2001      	movs	r0, #1
 8018444:	e030      	b.n	80184a8 <_dtoa_r+0x828>
 8018446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018448:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801844c:	e795      	b.n	801837a <_dtoa_r+0x6fa>
 801844e:	9b07      	ldr	r3, [sp, #28]
 8018450:	f109 37ff 	add.w	r7, r9, #4294967295
 8018454:	42bb      	cmp	r3, r7
 8018456:	bfbf      	itttt	lt
 8018458:	9b07      	ldrlt	r3, [sp, #28]
 801845a:	9707      	strlt	r7, [sp, #28]
 801845c:	1afa      	sublt	r2, r7, r3
 801845e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018460:	bfbb      	ittet	lt
 8018462:	189b      	addlt	r3, r3, r2
 8018464:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018466:	1bdf      	subge	r7, r3, r7
 8018468:	2700      	movlt	r7, #0
 801846a:	f1b9 0f00 	cmp.w	r9, #0
 801846e:	bfb5      	itete	lt
 8018470:	9b05      	ldrlt	r3, [sp, #20]
 8018472:	9d05      	ldrge	r5, [sp, #20]
 8018474:	eba3 0509 	sublt.w	r5, r3, r9
 8018478:	464b      	movge	r3, r9
 801847a:	bfb8      	it	lt
 801847c:	2300      	movlt	r3, #0
 801847e:	e77e      	b.n	801837e <_dtoa_r+0x6fe>
 8018480:	9f07      	ldr	r7, [sp, #28]
 8018482:	9d05      	ldr	r5, [sp, #20]
 8018484:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018486:	e783      	b.n	8018390 <_dtoa_r+0x710>
 8018488:	9a07      	ldr	r2, [sp, #28]
 801848a:	e7ab      	b.n	80183e4 <_dtoa_r+0x764>
 801848c:	2300      	movs	r3, #0
 801848e:	e7d4      	b.n	801843a <_dtoa_r+0x7ba>
 8018490:	9b00      	ldr	r3, [sp, #0]
 8018492:	e7d2      	b.n	801843a <_dtoa_r+0x7ba>
 8018494:	2300      	movs	r3, #0
 8018496:	9307      	str	r3, [sp, #28]
 8018498:	693b      	ldr	r3, [r7, #16]
 801849a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801849e:	6918      	ldr	r0, [r3, #16]
 80184a0:	f000 fdb8 	bl	8019014 <__hi0bits>
 80184a4:	f1c0 0020 	rsb	r0, r0, #32
 80184a8:	4440      	add	r0, r8
 80184aa:	f010 001f 	ands.w	r0, r0, #31
 80184ae:	d047      	beq.n	8018540 <_dtoa_r+0x8c0>
 80184b0:	f1c0 0320 	rsb	r3, r0, #32
 80184b4:	2b04      	cmp	r3, #4
 80184b6:	dd3b      	ble.n	8018530 <_dtoa_r+0x8b0>
 80184b8:	9b05      	ldr	r3, [sp, #20]
 80184ba:	f1c0 001c 	rsb	r0, r0, #28
 80184be:	4403      	add	r3, r0
 80184c0:	9305      	str	r3, [sp, #20]
 80184c2:	4405      	add	r5, r0
 80184c4:	4480      	add	r8, r0
 80184c6:	9b05      	ldr	r3, [sp, #20]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	dd05      	ble.n	80184d8 <_dtoa_r+0x858>
 80184cc:	461a      	mov	r2, r3
 80184ce:	9904      	ldr	r1, [sp, #16]
 80184d0:	4620      	mov	r0, r4
 80184d2:	f000 fedb 	bl	801928c <__lshift>
 80184d6:	9004      	str	r0, [sp, #16]
 80184d8:	f1b8 0f00 	cmp.w	r8, #0
 80184dc:	dd05      	ble.n	80184ea <_dtoa_r+0x86a>
 80184de:	4639      	mov	r1, r7
 80184e0:	4642      	mov	r2, r8
 80184e2:	4620      	mov	r0, r4
 80184e4:	f000 fed2 	bl	801928c <__lshift>
 80184e8:	4607      	mov	r7, r0
 80184ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80184ec:	b353      	cbz	r3, 8018544 <_dtoa_r+0x8c4>
 80184ee:	4639      	mov	r1, r7
 80184f0:	9804      	ldr	r0, [sp, #16]
 80184f2:	f000 ff1f 	bl	8019334 <__mcmp>
 80184f6:	2800      	cmp	r0, #0
 80184f8:	da24      	bge.n	8018544 <_dtoa_r+0x8c4>
 80184fa:	2300      	movs	r3, #0
 80184fc:	220a      	movs	r2, #10
 80184fe:	9904      	ldr	r1, [sp, #16]
 8018500:	4620      	mov	r0, r4
 8018502:	f000 fd0e 	bl	8018f22 <__multadd>
 8018506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018508:	9004      	str	r0, [sp, #16]
 801850a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801850e:	2b00      	cmp	r3, #0
 8018510:	f000 814d 	beq.w	80187ae <_dtoa_r+0xb2e>
 8018514:	2300      	movs	r3, #0
 8018516:	4631      	mov	r1, r6
 8018518:	220a      	movs	r2, #10
 801851a:	4620      	mov	r0, r4
 801851c:	f000 fd01 	bl	8018f22 <__multadd>
 8018520:	9b02      	ldr	r3, [sp, #8]
 8018522:	2b00      	cmp	r3, #0
 8018524:	4606      	mov	r6, r0
 8018526:	dc4f      	bgt.n	80185c8 <_dtoa_r+0x948>
 8018528:	9b06      	ldr	r3, [sp, #24]
 801852a:	2b02      	cmp	r3, #2
 801852c:	dd4c      	ble.n	80185c8 <_dtoa_r+0x948>
 801852e:	e011      	b.n	8018554 <_dtoa_r+0x8d4>
 8018530:	d0c9      	beq.n	80184c6 <_dtoa_r+0x846>
 8018532:	9a05      	ldr	r2, [sp, #20]
 8018534:	331c      	adds	r3, #28
 8018536:	441a      	add	r2, r3
 8018538:	9205      	str	r2, [sp, #20]
 801853a:	441d      	add	r5, r3
 801853c:	4498      	add	r8, r3
 801853e:	e7c2      	b.n	80184c6 <_dtoa_r+0x846>
 8018540:	4603      	mov	r3, r0
 8018542:	e7f6      	b.n	8018532 <_dtoa_r+0x8b2>
 8018544:	f1b9 0f00 	cmp.w	r9, #0
 8018548:	dc38      	bgt.n	80185bc <_dtoa_r+0x93c>
 801854a:	9b06      	ldr	r3, [sp, #24]
 801854c:	2b02      	cmp	r3, #2
 801854e:	dd35      	ble.n	80185bc <_dtoa_r+0x93c>
 8018550:	f8cd 9008 	str.w	r9, [sp, #8]
 8018554:	9b02      	ldr	r3, [sp, #8]
 8018556:	b963      	cbnz	r3, 8018572 <_dtoa_r+0x8f2>
 8018558:	4639      	mov	r1, r7
 801855a:	2205      	movs	r2, #5
 801855c:	4620      	mov	r0, r4
 801855e:	f000 fce0 	bl	8018f22 <__multadd>
 8018562:	4601      	mov	r1, r0
 8018564:	4607      	mov	r7, r0
 8018566:	9804      	ldr	r0, [sp, #16]
 8018568:	f000 fee4 	bl	8019334 <__mcmp>
 801856c:	2800      	cmp	r0, #0
 801856e:	f73f adcc 	bgt.w	801810a <_dtoa_r+0x48a>
 8018572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018574:	465d      	mov	r5, fp
 8018576:	ea6f 0a03 	mvn.w	sl, r3
 801857a:	f04f 0900 	mov.w	r9, #0
 801857e:	4639      	mov	r1, r7
 8018580:	4620      	mov	r0, r4
 8018582:	f000 fcb7 	bl	8018ef4 <_Bfree>
 8018586:	2e00      	cmp	r6, #0
 8018588:	f43f aeb7 	beq.w	80182fa <_dtoa_r+0x67a>
 801858c:	f1b9 0f00 	cmp.w	r9, #0
 8018590:	d005      	beq.n	801859e <_dtoa_r+0x91e>
 8018592:	45b1      	cmp	r9, r6
 8018594:	d003      	beq.n	801859e <_dtoa_r+0x91e>
 8018596:	4649      	mov	r1, r9
 8018598:	4620      	mov	r0, r4
 801859a:	f000 fcab 	bl	8018ef4 <_Bfree>
 801859e:	4631      	mov	r1, r6
 80185a0:	4620      	mov	r0, r4
 80185a2:	f000 fca7 	bl	8018ef4 <_Bfree>
 80185a6:	e6a8      	b.n	80182fa <_dtoa_r+0x67a>
 80185a8:	2700      	movs	r7, #0
 80185aa:	463e      	mov	r6, r7
 80185ac:	e7e1      	b.n	8018572 <_dtoa_r+0x8f2>
 80185ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80185b2:	463e      	mov	r6, r7
 80185b4:	e5a9      	b.n	801810a <_dtoa_r+0x48a>
 80185b6:	bf00      	nop
 80185b8:	40240000 	.word	0x40240000
 80185bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185be:	f8cd 9008 	str.w	r9, [sp, #8]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	f000 80fa 	beq.w	80187bc <_dtoa_r+0xb3c>
 80185c8:	2d00      	cmp	r5, #0
 80185ca:	dd05      	ble.n	80185d8 <_dtoa_r+0x958>
 80185cc:	4631      	mov	r1, r6
 80185ce:	462a      	mov	r2, r5
 80185d0:	4620      	mov	r0, r4
 80185d2:	f000 fe5b 	bl	801928c <__lshift>
 80185d6:	4606      	mov	r6, r0
 80185d8:	9b07      	ldr	r3, [sp, #28]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d04c      	beq.n	8018678 <_dtoa_r+0x9f8>
 80185de:	6871      	ldr	r1, [r6, #4]
 80185e0:	4620      	mov	r0, r4
 80185e2:	f000 fc53 	bl	8018e8c <_Balloc>
 80185e6:	6932      	ldr	r2, [r6, #16]
 80185e8:	3202      	adds	r2, #2
 80185ea:	4605      	mov	r5, r0
 80185ec:	0092      	lsls	r2, r2, #2
 80185ee:	f106 010c 	add.w	r1, r6, #12
 80185f2:	300c      	adds	r0, #12
 80185f4:	f7fd fc8a 	bl	8015f0c <memcpy>
 80185f8:	2201      	movs	r2, #1
 80185fa:	4629      	mov	r1, r5
 80185fc:	4620      	mov	r0, r4
 80185fe:	f000 fe45 	bl	801928c <__lshift>
 8018602:	9b00      	ldr	r3, [sp, #0]
 8018604:	f8cd b014 	str.w	fp, [sp, #20]
 8018608:	f003 0301 	and.w	r3, r3, #1
 801860c:	46b1      	mov	r9, r6
 801860e:	9307      	str	r3, [sp, #28]
 8018610:	4606      	mov	r6, r0
 8018612:	4639      	mov	r1, r7
 8018614:	9804      	ldr	r0, [sp, #16]
 8018616:	f7ff faa5 	bl	8017b64 <quorem>
 801861a:	4649      	mov	r1, r9
 801861c:	4605      	mov	r5, r0
 801861e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018622:	9804      	ldr	r0, [sp, #16]
 8018624:	f000 fe86 	bl	8019334 <__mcmp>
 8018628:	4632      	mov	r2, r6
 801862a:	9000      	str	r0, [sp, #0]
 801862c:	4639      	mov	r1, r7
 801862e:	4620      	mov	r0, r4
 8018630:	f000 fe9a 	bl	8019368 <__mdiff>
 8018634:	68c3      	ldr	r3, [r0, #12]
 8018636:	4602      	mov	r2, r0
 8018638:	bb03      	cbnz	r3, 801867c <_dtoa_r+0x9fc>
 801863a:	4601      	mov	r1, r0
 801863c:	9008      	str	r0, [sp, #32]
 801863e:	9804      	ldr	r0, [sp, #16]
 8018640:	f000 fe78 	bl	8019334 <__mcmp>
 8018644:	9a08      	ldr	r2, [sp, #32]
 8018646:	4603      	mov	r3, r0
 8018648:	4611      	mov	r1, r2
 801864a:	4620      	mov	r0, r4
 801864c:	9308      	str	r3, [sp, #32]
 801864e:	f000 fc51 	bl	8018ef4 <_Bfree>
 8018652:	9b08      	ldr	r3, [sp, #32]
 8018654:	b9a3      	cbnz	r3, 8018680 <_dtoa_r+0xa00>
 8018656:	9a06      	ldr	r2, [sp, #24]
 8018658:	b992      	cbnz	r2, 8018680 <_dtoa_r+0xa00>
 801865a:	9a07      	ldr	r2, [sp, #28]
 801865c:	b982      	cbnz	r2, 8018680 <_dtoa_r+0xa00>
 801865e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018662:	d029      	beq.n	80186b8 <_dtoa_r+0xa38>
 8018664:	9b00      	ldr	r3, [sp, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	dd01      	ble.n	801866e <_dtoa_r+0x9ee>
 801866a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801866e:	9b05      	ldr	r3, [sp, #20]
 8018670:	1c5d      	adds	r5, r3, #1
 8018672:	f883 8000 	strb.w	r8, [r3]
 8018676:	e782      	b.n	801857e <_dtoa_r+0x8fe>
 8018678:	4630      	mov	r0, r6
 801867a:	e7c2      	b.n	8018602 <_dtoa_r+0x982>
 801867c:	2301      	movs	r3, #1
 801867e:	e7e3      	b.n	8018648 <_dtoa_r+0x9c8>
 8018680:	9a00      	ldr	r2, [sp, #0]
 8018682:	2a00      	cmp	r2, #0
 8018684:	db04      	blt.n	8018690 <_dtoa_r+0xa10>
 8018686:	d125      	bne.n	80186d4 <_dtoa_r+0xa54>
 8018688:	9a06      	ldr	r2, [sp, #24]
 801868a:	bb1a      	cbnz	r2, 80186d4 <_dtoa_r+0xa54>
 801868c:	9a07      	ldr	r2, [sp, #28]
 801868e:	bb0a      	cbnz	r2, 80186d4 <_dtoa_r+0xa54>
 8018690:	2b00      	cmp	r3, #0
 8018692:	ddec      	ble.n	801866e <_dtoa_r+0x9ee>
 8018694:	2201      	movs	r2, #1
 8018696:	9904      	ldr	r1, [sp, #16]
 8018698:	4620      	mov	r0, r4
 801869a:	f000 fdf7 	bl	801928c <__lshift>
 801869e:	4639      	mov	r1, r7
 80186a0:	9004      	str	r0, [sp, #16]
 80186a2:	f000 fe47 	bl	8019334 <__mcmp>
 80186a6:	2800      	cmp	r0, #0
 80186a8:	dc03      	bgt.n	80186b2 <_dtoa_r+0xa32>
 80186aa:	d1e0      	bne.n	801866e <_dtoa_r+0x9ee>
 80186ac:	f018 0f01 	tst.w	r8, #1
 80186b0:	d0dd      	beq.n	801866e <_dtoa_r+0x9ee>
 80186b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80186b6:	d1d8      	bne.n	801866a <_dtoa_r+0x9ea>
 80186b8:	9b05      	ldr	r3, [sp, #20]
 80186ba:	9a05      	ldr	r2, [sp, #20]
 80186bc:	1c5d      	adds	r5, r3, #1
 80186be:	2339      	movs	r3, #57	; 0x39
 80186c0:	7013      	strb	r3, [r2, #0]
 80186c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80186c6:	2b39      	cmp	r3, #57	; 0x39
 80186c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80186cc:	d04f      	beq.n	801876e <_dtoa_r+0xaee>
 80186ce:	3301      	adds	r3, #1
 80186d0:	7013      	strb	r3, [r2, #0]
 80186d2:	e754      	b.n	801857e <_dtoa_r+0x8fe>
 80186d4:	9a05      	ldr	r2, [sp, #20]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	f102 0501 	add.w	r5, r2, #1
 80186dc:	dd06      	ble.n	80186ec <_dtoa_r+0xa6c>
 80186de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80186e2:	d0e9      	beq.n	80186b8 <_dtoa_r+0xa38>
 80186e4:	f108 0801 	add.w	r8, r8, #1
 80186e8:	9b05      	ldr	r3, [sp, #20]
 80186ea:	e7c2      	b.n	8018672 <_dtoa_r+0x9f2>
 80186ec:	9a02      	ldr	r2, [sp, #8]
 80186ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80186f2:	eba5 030b 	sub.w	r3, r5, fp
 80186f6:	4293      	cmp	r3, r2
 80186f8:	d021      	beq.n	801873e <_dtoa_r+0xabe>
 80186fa:	2300      	movs	r3, #0
 80186fc:	220a      	movs	r2, #10
 80186fe:	9904      	ldr	r1, [sp, #16]
 8018700:	4620      	mov	r0, r4
 8018702:	f000 fc0e 	bl	8018f22 <__multadd>
 8018706:	45b1      	cmp	r9, r6
 8018708:	9004      	str	r0, [sp, #16]
 801870a:	f04f 0300 	mov.w	r3, #0
 801870e:	f04f 020a 	mov.w	r2, #10
 8018712:	4649      	mov	r1, r9
 8018714:	4620      	mov	r0, r4
 8018716:	d105      	bne.n	8018724 <_dtoa_r+0xaa4>
 8018718:	f000 fc03 	bl	8018f22 <__multadd>
 801871c:	4681      	mov	r9, r0
 801871e:	4606      	mov	r6, r0
 8018720:	9505      	str	r5, [sp, #20]
 8018722:	e776      	b.n	8018612 <_dtoa_r+0x992>
 8018724:	f000 fbfd 	bl	8018f22 <__multadd>
 8018728:	4631      	mov	r1, r6
 801872a:	4681      	mov	r9, r0
 801872c:	2300      	movs	r3, #0
 801872e:	220a      	movs	r2, #10
 8018730:	4620      	mov	r0, r4
 8018732:	f000 fbf6 	bl	8018f22 <__multadd>
 8018736:	4606      	mov	r6, r0
 8018738:	e7f2      	b.n	8018720 <_dtoa_r+0xaa0>
 801873a:	f04f 0900 	mov.w	r9, #0
 801873e:	2201      	movs	r2, #1
 8018740:	9904      	ldr	r1, [sp, #16]
 8018742:	4620      	mov	r0, r4
 8018744:	f000 fda2 	bl	801928c <__lshift>
 8018748:	4639      	mov	r1, r7
 801874a:	9004      	str	r0, [sp, #16]
 801874c:	f000 fdf2 	bl	8019334 <__mcmp>
 8018750:	2800      	cmp	r0, #0
 8018752:	dcb6      	bgt.n	80186c2 <_dtoa_r+0xa42>
 8018754:	d102      	bne.n	801875c <_dtoa_r+0xadc>
 8018756:	f018 0f01 	tst.w	r8, #1
 801875a:	d1b2      	bne.n	80186c2 <_dtoa_r+0xa42>
 801875c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018760:	2b30      	cmp	r3, #48	; 0x30
 8018762:	f105 32ff 	add.w	r2, r5, #4294967295
 8018766:	f47f af0a 	bne.w	801857e <_dtoa_r+0x8fe>
 801876a:	4615      	mov	r5, r2
 801876c:	e7f6      	b.n	801875c <_dtoa_r+0xadc>
 801876e:	4593      	cmp	fp, r2
 8018770:	d105      	bne.n	801877e <_dtoa_r+0xafe>
 8018772:	2331      	movs	r3, #49	; 0x31
 8018774:	f10a 0a01 	add.w	sl, sl, #1
 8018778:	f88b 3000 	strb.w	r3, [fp]
 801877c:	e6ff      	b.n	801857e <_dtoa_r+0x8fe>
 801877e:	4615      	mov	r5, r2
 8018780:	e79f      	b.n	80186c2 <_dtoa_r+0xa42>
 8018782:	f8df b064 	ldr.w	fp, [pc, #100]	; 80187e8 <_dtoa_r+0xb68>
 8018786:	e007      	b.n	8018798 <_dtoa_r+0xb18>
 8018788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801878a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80187ec <_dtoa_r+0xb6c>
 801878e:	b11b      	cbz	r3, 8018798 <_dtoa_r+0xb18>
 8018790:	f10b 0308 	add.w	r3, fp, #8
 8018794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018796:	6013      	str	r3, [r2, #0]
 8018798:	4658      	mov	r0, fp
 801879a:	b017      	add	sp, #92	; 0x5c
 801879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187a0:	9b06      	ldr	r3, [sp, #24]
 80187a2:	2b01      	cmp	r3, #1
 80187a4:	f77f ae35 	ble.w	8018412 <_dtoa_r+0x792>
 80187a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187aa:	9307      	str	r3, [sp, #28]
 80187ac:	e649      	b.n	8018442 <_dtoa_r+0x7c2>
 80187ae:	9b02      	ldr	r3, [sp, #8]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	dc03      	bgt.n	80187bc <_dtoa_r+0xb3c>
 80187b4:	9b06      	ldr	r3, [sp, #24]
 80187b6:	2b02      	cmp	r3, #2
 80187b8:	f73f aecc 	bgt.w	8018554 <_dtoa_r+0x8d4>
 80187bc:	465d      	mov	r5, fp
 80187be:	4639      	mov	r1, r7
 80187c0:	9804      	ldr	r0, [sp, #16]
 80187c2:	f7ff f9cf 	bl	8017b64 <quorem>
 80187c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80187ca:	f805 8b01 	strb.w	r8, [r5], #1
 80187ce:	9a02      	ldr	r2, [sp, #8]
 80187d0:	eba5 030b 	sub.w	r3, r5, fp
 80187d4:	429a      	cmp	r2, r3
 80187d6:	ddb0      	ble.n	801873a <_dtoa_r+0xaba>
 80187d8:	2300      	movs	r3, #0
 80187da:	220a      	movs	r2, #10
 80187dc:	9904      	ldr	r1, [sp, #16]
 80187de:	4620      	mov	r0, r4
 80187e0:	f000 fb9f 	bl	8018f22 <__multadd>
 80187e4:	9004      	str	r0, [sp, #16]
 80187e6:	e7ea      	b.n	80187be <_dtoa_r+0xb3e>
 80187e8:	0801b6d8 	.word	0x0801b6d8
 80187ec:	0801b758 	.word	0x0801b758

080187f0 <rshift>:
 80187f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187f2:	6906      	ldr	r6, [r0, #16]
 80187f4:	114b      	asrs	r3, r1, #5
 80187f6:	429e      	cmp	r6, r3
 80187f8:	f100 0414 	add.w	r4, r0, #20
 80187fc:	dd30      	ble.n	8018860 <rshift+0x70>
 80187fe:	f011 011f 	ands.w	r1, r1, #31
 8018802:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018806:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801880a:	d108      	bne.n	801881e <rshift+0x2e>
 801880c:	4621      	mov	r1, r4
 801880e:	42b2      	cmp	r2, r6
 8018810:	460b      	mov	r3, r1
 8018812:	d211      	bcs.n	8018838 <rshift+0x48>
 8018814:	f852 3b04 	ldr.w	r3, [r2], #4
 8018818:	f841 3b04 	str.w	r3, [r1], #4
 801881c:	e7f7      	b.n	801880e <rshift+0x1e>
 801881e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018822:	f1c1 0c20 	rsb	ip, r1, #32
 8018826:	40cd      	lsrs	r5, r1
 8018828:	3204      	adds	r2, #4
 801882a:	4623      	mov	r3, r4
 801882c:	42b2      	cmp	r2, r6
 801882e:	4617      	mov	r7, r2
 8018830:	d30c      	bcc.n	801884c <rshift+0x5c>
 8018832:	601d      	str	r5, [r3, #0]
 8018834:	b105      	cbz	r5, 8018838 <rshift+0x48>
 8018836:	3304      	adds	r3, #4
 8018838:	1b1a      	subs	r2, r3, r4
 801883a:	42a3      	cmp	r3, r4
 801883c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018840:	bf08      	it	eq
 8018842:	2300      	moveq	r3, #0
 8018844:	6102      	str	r2, [r0, #16]
 8018846:	bf08      	it	eq
 8018848:	6143      	streq	r3, [r0, #20]
 801884a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801884c:	683f      	ldr	r7, [r7, #0]
 801884e:	fa07 f70c 	lsl.w	r7, r7, ip
 8018852:	433d      	orrs	r5, r7
 8018854:	f843 5b04 	str.w	r5, [r3], #4
 8018858:	f852 5b04 	ldr.w	r5, [r2], #4
 801885c:	40cd      	lsrs	r5, r1
 801885e:	e7e5      	b.n	801882c <rshift+0x3c>
 8018860:	4623      	mov	r3, r4
 8018862:	e7e9      	b.n	8018838 <rshift+0x48>

08018864 <__hexdig_fun>:
 8018864:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018868:	2b09      	cmp	r3, #9
 801886a:	d802      	bhi.n	8018872 <__hexdig_fun+0xe>
 801886c:	3820      	subs	r0, #32
 801886e:	b2c0      	uxtb	r0, r0
 8018870:	4770      	bx	lr
 8018872:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018876:	2b05      	cmp	r3, #5
 8018878:	d801      	bhi.n	801887e <__hexdig_fun+0x1a>
 801887a:	3847      	subs	r0, #71	; 0x47
 801887c:	e7f7      	b.n	801886e <__hexdig_fun+0xa>
 801887e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018882:	2b05      	cmp	r3, #5
 8018884:	d801      	bhi.n	801888a <__hexdig_fun+0x26>
 8018886:	3827      	subs	r0, #39	; 0x27
 8018888:	e7f1      	b.n	801886e <__hexdig_fun+0xa>
 801888a:	2000      	movs	r0, #0
 801888c:	4770      	bx	lr

0801888e <__gethex>:
 801888e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018892:	b08b      	sub	sp, #44	; 0x2c
 8018894:	468a      	mov	sl, r1
 8018896:	9002      	str	r0, [sp, #8]
 8018898:	9816      	ldr	r0, [sp, #88]	; 0x58
 801889a:	9306      	str	r3, [sp, #24]
 801889c:	4690      	mov	r8, r2
 801889e:	f000 fad0 	bl	8018e42 <__localeconv_l>
 80188a2:	6803      	ldr	r3, [r0, #0]
 80188a4:	9303      	str	r3, [sp, #12]
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7e7 fc92 	bl	80001d0 <strlen>
 80188ac:	9b03      	ldr	r3, [sp, #12]
 80188ae:	9001      	str	r0, [sp, #4]
 80188b0:	4403      	add	r3, r0
 80188b2:	f04f 0b00 	mov.w	fp, #0
 80188b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80188ba:	9307      	str	r3, [sp, #28]
 80188bc:	f8da 3000 	ldr.w	r3, [sl]
 80188c0:	3302      	adds	r3, #2
 80188c2:	461f      	mov	r7, r3
 80188c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80188c8:	2830      	cmp	r0, #48	; 0x30
 80188ca:	d06c      	beq.n	80189a6 <__gethex+0x118>
 80188cc:	f7ff ffca 	bl	8018864 <__hexdig_fun>
 80188d0:	4604      	mov	r4, r0
 80188d2:	2800      	cmp	r0, #0
 80188d4:	d16a      	bne.n	80189ac <__gethex+0x11e>
 80188d6:	9a01      	ldr	r2, [sp, #4]
 80188d8:	9903      	ldr	r1, [sp, #12]
 80188da:	4638      	mov	r0, r7
 80188dc:	f001 f836 	bl	801994c <strncmp>
 80188e0:	2800      	cmp	r0, #0
 80188e2:	d166      	bne.n	80189b2 <__gethex+0x124>
 80188e4:	9b01      	ldr	r3, [sp, #4]
 80188e6:	5cf8      	ldrb	r0, [r7, r3]
 80188e8:	18fe      	adds	r6, r7, r3
 80188ea:	f7ff ffbb 	bl	8018864 <__hexdig_fun>
 80188ee:	2800      	cmp	r0, #0
 80188f0:	d062      	beq.n	80189b8 <__gethex+0x12a>
 80188f2:	4633      	mov	r3, r6
 80188f4:	7818      	ldrb	r0, [r3, #0]
 80188f6:	2830      	cmp	r0, #48	; 0x30
 80188f8:	461f      	mov	r7, r3
 80188fa:	f103 0301 	add.w	r3, r3, #1
 80188fe:	d0f9      	beq.n	80188f4 <__gethex+0x66>
 8018900:	f7ff ffb0 	bl	8018864 <__hexdig_fun>
 8018904:	fab0 f580 	clz	r5, r0
 8018908:	096d      	lsrs	r5, r5, #5
 801890a:	4634      	mov	r4, r6
 801890c:	f04f 0b01 	mov.w	fp, #1
 8018910:	463a      	mov	r2, r7
 8018912:	4616      	mov	r6, r2
 8018914:	3201      	adds	r2, #1
 8018916:	7830      	ldrb	r0, [r6, #0]
 8018918:	f7ff ffa4 	bl	8018864 <__hexdig_fun>
 801891c:	2800      	cmp	r0, #0
 801891e:	d1f8      	bne.n	8018912 <__gethex+0x84>
 8018920:	9a01      	ldr	r2, [sp, #4]
 8018922:	9903      	ldr	r1, [sp, #12]
 8018924:	4630      	mov	r0, r6
 8018926:	f001 f811 	bl	801994c <strncmp>
 801892a:	b950      	cbnz	r0, 8018942 <__gethex+0xb4>
 801892c:	b954      	cbnz	r4, 8018944 <__gethex+0xb6>
 801892e:	9b01      	ldr	r3, [sp, #4]
 8018930:	18f4      	adds	r4, r6, r3
 8018932:	4622      	mov	r2, r4
 8018934:	4616      	mov	r6, r2
 8018936:	3201      	adds	r2, #1
 8018938:	7830      	ldrb	r0, [r6, #0]
 801893a:	f7ff ff93 	bl	8018864 <__hexdig_fun>
 801893e:	2800      	cmp	r0, #0
 8018940:	d1f8      	bne.n	8018934 <__gethex+0xa6>
 8018942:	b10c      	cbz	r4, 8018948 <__gethex+0xba>
 8018944:	1ba4      	subs	r4, r4, r6
 8018946:	00a4      	lsls	r4, r4, #2
 8018948:	7833      	ldrb	r3, [r6, #0]
 801894a:	2b50      	cmp	r3, #80	; 0x50
 801894c:	d001      	beq.n	8018952 <__gethex+0xc4>
 801894e:	2b70      	cmp	r3, #112	; 0x70
 8018950:	d140      	bne.n	80189d4 <__gethex+0x146>
 8018952:	7873      	ldrb	r3, [r6, #1]
 8018954:	2b2b      	cmp	r3, #43	; 0x2b
 8018956:	d031      	beq.n	80189bc <__gethex+0x12e>
 8018958:	2b2d      	cmp	r3, #45	; 0x2d
 801895a:	d033      	beq.n	80189c4 <__gethex+0x136>
 801895c:	1c71      	adds	r1, r6, #1
 801895e:	f04f 0900 	mov.w	r9, #0
 8018962:	7808      	ldrb	r0, [r1, #0]
 8018964:	f7ff ff7e 	bl	8018864 <__hexdig_fun>
 8018968:	1e43      	subs	r3, r0, #1
 801896a:	b2db      	uxtb	r3, r3
 801896c:	2b18      	cmp	r3, #24
 801896e:	d831      	bhi.n	80189d4 <__gethex+0x146>
 8018970:	f1a0 0210 	sub.w	r2, r0, #16
 8018974:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018978:	f7ff ff74 	bl	8018864 <__hexdig_fun>
 801897c:	1e43      	subs	r3, r0, #1
 801897e:	b2db      	uxtb	r3, r3
 8018980:	2b18      	cmp	r3, #24
 8018982:	d922      	bls.n	80189ca <__gethex+0x13c>
 8018984:	f1b9 0f00 	cmp.w	r9, #0
 8018988:	d000      	beq.n	801898c <__gethex+0xfe>
 801898a:	4252      	negs	r2, r2
 801898c:	4414      	add	r4, r2
 801898e:	f8ca 1000 	str.w	r1, [sl]
 8018992:	b30d      	cbz	r5, 80189d8 <__gethex+0x14a>
 8018994:	f1bb 0f00 	cmp.w	fp, #0
 8018998:	bf0c      	ite	eq
 801899a:	2706      	moveq	r7, #6
 801899c:	2700      	movne	r7, #0
 801899e:	4638      	mov	r0, r7
 80189a0:	b00b      	add	sp, #44	; 0x2c
 80189a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189a6:	f10b 0b01 	add.w	fp, fp, #1
 80189aa:	e78a      	b.n	80188c2 <__gethex+0x34>
 80189ac:	2500      	movs	r5, #0
 80189ae:	462c      	mov	r4, r5
 80189b0:	e7ae      	b.n	8018910 <__gethex+0x82>
 80189b2:	463e      	mov	r6, r7
 80189b4:	2501      	movs	r5, #1
 80189b6:	e7c7      	b.n	8018948 <__gethex+0xba>
 80189b8:	4604      	mov	r4, r0
 80189ba:	e7fb      	b.n	80189b4 <__gethex+0x126>
 80189bc:	f04f 0900 	mov.w	r9, #0
 80189c0:	1cb1      	adds	r1, r6, #2
 80189c2:	e7ce      	b.n	8018962 <__gethex+0xd4>
 80189c4:	f04f 0901 	mov.w	r9, #1
 80189c8:	e7fa      	b.n	80189c0 <__gethex+0x132>
 80189ca:	230a      	movs	r3, #10
 80189cc:	fb03 0202 	mla	r2, r3, r2, r0
 80189d0:	3a10      	subs	r2, #16
 80189d2:	e7cf      	b.n	8018974 <__gethex+0xe6>
 80189d4:	4631      	mov	r1, r6
 80189d6:	e7da      	b.n	801898e <__gethex+0x100>
 80189d8:	1bf3      	subs	r3, r6, r7
 80189da:	3b01      	subs	r3, #1
 80189dc:	4629      	mov	r1, r5
 80189de:	2b07      	cmp	r3, #7
 80189e0:	dc49      	bgt.n	8018a76 <__gethex+0x1e8>
 80189e2:	9802      	ldr	r0, [sp, #8]
 80189e4:	f000 fa52 	bl	8018e8c <_Balloc>
 80189e8:	9b01      	ldr	r3, [sp, #4]
 80189ea:	f100 0914 	add.w	r9, r0, #20
 80189ee:	f04f 0b00 	mov.w	fp, #0
 80189f2:	f1c3 0301 	rsb	r3, r3, #1
 80189f6:	4605      	mov	r5, r0
 80189f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80189fc:	46da      	mov	sl, fp
 80189fe:	9308      	str	r3, [sp, #32]
 8018a00:	42b7      	cmp	r7, r6
 8018a02:	d33b      	bcc.n	8018a7c <__gethex+0x1ee>
 8018a04:	9804      	ldr	r0, [sp, #16]
 8018a06:	f840 ab04 	str.w	sl, [r0], #4
 8018a0a:	eba0 0009 	sub.w	r0, r0, r9
 8018a0e:	1080      	asrs	r0, r0, #2
 8018a10:	6128      	str	r0, [r5, #16]
 8018a12:	0147      	lsls	r7, r0, #5
 8018a14:	4650      	mov	r0, sl
 8018a16:	f000 fafd 	bl	8019014 <__hi0bits>
 8018a1a:	f8d8 6000 	ldr.w	r6, [r8]
 8018a1e:	1a3f      	subs	r7, r7, r0
 8018a20:	42b7      	cmp	r7, r6
 8018a22:	dd64      	ble.n	8018aee <__gethex+0x260>
 8018a24:	1bbf      	subs	r7, r7, r6
 8018a26:	4639      	mov	r1, r7
 8018a28:	4628      	mov	r0, r5
 8018a2a:	f000 fe0d 	bl	8019648 <__any_on>
 8018a2e:	4682      	mov	sl, r0
 8018a30:	b178      	cbz	r0, 8018a52 <__gethex+0x1c4>
 8018a32:	1e7b      	subs	r3, r7, #1
 8018a34:	1159      	asrs	r1, r3, #5
 8018a36:	f003 021f 	and.w	r2, r3, #31
 8018a3a:	f04f 0a01 	mov.w	sl, #1
 8018a3e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018a42:	fa0a f202 	lsl.w	r2, sl, r2
 8018a46:	420a      	tst	r2, r1
 8018a48:	d003      	beq.n	8018a52 <__gethex+0x1c4>
 8018a4a:	4553      	cmp	r3, sl
 8018a4c:	dc46      	bgt.n	8018adc <__gethex+0x24e>
 8018a4e:	f04f 0a02 	mov.w	sl, #2
 8018a52:	4639      	mov	r1, r7
 8018a54:	4628      	mov	r0, r5
 8018a56:	f7ff fecb 	bl	80187f0 <rshift>
 8018a5a:	443c      	add	r4, r7
 8018a5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a60:	42a3      	cmp	r3, r4
 8018a62:	da52      	bge.n	8018b0a <__gethex+0x27c>
 8018a64:	4629      	mov	r1, r5
 8018a66:	9802      	ldr	r0, [sp, #8]
 8018a68:	f000 fa44 	bl	8018ef4 <_Bfree>
 8018a6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a6e:	2300      	movs	r3, #0
 8018a70:	6013      	str	r3, [r2, #0]
 8018a72:	27a3      	movs	r7, #163	; 0xa3
 8018a74:	e793      	b.n	801899e <__gethex+0x110>
 8018a76:	3101      	adds	r1, #1
 8018a78:	105b      	asrs	r3, r3, #1
 8018a7a:	e7b0      	b.n	80189de <__gethex+0x150>
 8018a7c:	1e73      	subs	r3, r6, #1
 8018a7e:	9305      	str	r3, [sp, #20]
 8018a80:	9a07      	ldr	r2, [sp, #28]
 8018a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018a86:	4293      	cmp	r3, r2
 8018a88:	d018      	beq.n	8018abc <__gethex+0x22e>
 8018a8a:	f1bb 0f20 	cmp.w	fp, #32
 8018a8e:	d107      	bne.n	8018aa0 <__gethex+0x212>
 8018a90:	9b04      	ldr	r3, [sp, #16]
 8018a92:	f8c3 a000 	str.w	sl, [r3]
 8018a96:	3304      	adds	r3, #4
 8018a98:	f04f 0a00 	mov.w	sl, #0
 8018a9c:	9304      	str	r3, [sp, #16]
 8018a9e:	46d3      	mov	fp, sl
 8018aa0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018aa4:	f7ff fede 	bl	8018864 <__hexdig_fun>
 8018aa8:	f000 000f 	and.w	r0, r0, #15
 8018aac:	fa00 f00b 	lsl.w	r0, r0, fp
 8018ab0:	ea4a 0a00 	orr.w	sl, sl, r0
 8018ab4:	f10b 0b04 	add.w	fp, fp, #4
 8018ab8:	9b05      	ldr	r3, [sp, #20]
 8018aba:	e00d      	b.n	8018ad8 <__gethex+0x24a>
 8018abc:	9b05      	ldr	r3, [sp, #20]
 8018abe:	9a08      	ldr	r2, [sp, #32]
 8018ac0:	4413      	add	r3, r2
 8018ac2:	42bb      	cmp	r3, r7
 8018ac4:	d3e1      	bcc.n	8018a8a <__gethex+0x1fc>
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	9a01      	ldr	r2, [sp, #4]
 8018aca:	9903      	ldr	r1, [sp, #12]
 8018acc:	9309      	str	r3, [sp, #36]	; 0x24
 8018ace:	f000 ff3d 	bl	801994c <strncmp>
 8018ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ad4:	2800      	cmp	r0, #0
 8018ad6:	d1d8      	bne.n	8018a8a <__gethex+0x1fc>
 8018ad8:	461e      	mov	r6, r3
 8018ada:	e791      	b.n	8018a00 <__gethex+0x172>
 8018adc:	1eb9      	subs	r1, r7, #2
 8018ade:	4628      	mov	r0, r5
 8018ae0:	f000 fdb2 	bl	8019648 <__any_on>
 8018ae4:	2800      	cmp	r0, #0
 8018ae6:	d0b2      	beq.n	8018a4e <__gethex+0x1c0>
 8018ae8:	f04f 0a03 	mov.w	sl, #3
 8018aec:	e7b1      	b.n	8018a52 <__gethex+0x1c4>
 8018aee:	da09      	bge.n	8018b04 <__gethex+0x276>
 8018af0:	1bf7      	subs	r7, r6, r7
 8018af2:	4629      	mov	r1, r5
 8018af4:	463a      	mov	r2, r7
 8018af6:	9802      	ldr	r0, [sp, #8]
 8018af8:	f000 fbc8 	bl	801928c <__lshift>
 8018afc:	1be4      	subs	r4, r4, r7
 8018afe:	4605      	mov	r5, r0
 8018b00:	f100 0914 	add.w	r9, r0, #20
 8018b04:	f04f 0a00 	mov.w	sl, #0
 8018b08:	e7a8      	b.n	8018a5c <__gethex+0x1ce>
 8018b0a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018b0e:	42a0      	cmp	r0, r4
 8018b10:	dd6a      	ble.n	8018be8 <__gethex+0x35a>
 8018b12:	1b04      	subs	r4, r0, r4
 8018b14:	42a6      	cmp	r6, r4
 8018b16:	dc2e      	bgt.n	8018b76 <__gethex+0x2e8>
 8018b18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b1c:	2b02      	cmp	r3, #2
 8018b1e:	d022      	beq.n	8018b66 <__gethex+0x2d8>
 8018b20:	2b03      	cmp	r3, #3
 8018b22:	d024      	beq.n	8018b6e <__gethex+0x2e0>
 8018b24:	2b01      	cmp	r3, #1
 8018b26:	d115      	bne.n	8018b54 <__gethex+0x2c6>
 8018b28:	42a6      	cmp	r6, r4
 8018b2a:	d113      	bne.n	8018b54 <__gethex+0x2c6>
 8018b2c:	2e01      	cmp	r6, #1
 8018b2e:	dc0b      	bgt.n	8018b48 <__gethex+0x2ba>
 8018b30:	9a06      	ldr	r2, [sp, #24]
 8018b32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018b36:	6013      	str	r3, [r2, #0]
 8018b38:	2301      	movs	r3, #1
 8018b3a:	612b      	str	r3, [r5, #16]
 8018b3c:	f8c9 3000 	str.w	r3, [r9]
 8018b40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b42:	2762      	movs	r7, #98	; 0x62
 8018b44:	601d      	str	r5, [r3, #0]
 8018b46:	e72a      	b.n	801899e <__gethex+0x110>
 8018b48:	1e71      	subs	r1, r6, #1
 8018b4a:	4628      	mov	r0, r5
 8018b4c:	f000 fd7c 	bl	8019648 <__any_on>
 8018b50:	2800      	cmp	r0, #0
 8018b52:	d1ed      	bne.n	8018b30 <__gethex+0x2a2>
 8018b54:	4629      	mov	r1, r5
 8018b56:	9802      	ldr	r0, [sp, #8]
 8018b58:	f000 f9cc 	bl	8018ef4 <_Bfree>
 8018b5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018b5e:	2300      	movs	r3, #0
 8018b60:	6013      	str	r3, [r2, #0]
 8018b62:	2750      	movs	r7, #80	; 0x50
 8018b64:	e71b      	b.n	801899e <__gethex+0x110>
 8018b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d0e1      	beq.n	8018b30 <__gethex+0x2a2>
 8018b6c:	e7f2      	b.n	8018b54 <__gethex+0x2c6>
 8018b6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d1dd      	bne.n	8018b30 <__gethex+0x2a2>
 8018b74:	e7ee      	b.n	8018b54 <__gethex+0x2c6>
 8018b76:	1e67      	subs	r7, r4, #1
 8018b78:	f1ba 0f00 	cmp.w	sl, #0
 8018b7c:	d131      	bne.n	8018be2 <__gethex+0x354>
 8018b7e:	b127      	cbz	r7, 8018b8a <__gethex+0x2fc>
 8018b80:	4639      	mov	r1, r7
 8018b82:	4628      	mov	r0, r5
 8018b84:	f000 fd60 	bl	8019648 <__any_on>
 8018b88:	4682      	mov	sl, r0
 8018b8a:	117a      	asrs	r2, r7, #5
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	f007 071f 	and.w	r7, r7, #31
 8018b92:	fa03 f707 	lsl.w	r7, r3, r7
 8018b96:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018b9a:	4621      	mov	r1, r4
 8018b9c:	421f      	tst	r7, r3
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	bf18      	it	ne
 8018ba2:	f04a 0a02 	orrne.w	sl, sl, #2
 8018ba6:	1b36      	subs	r6, r6, r4
 8018ba8:	f7ff fe22 	bl	80187f0 <rshift>
 8018bac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018bb0:	2702      	movs	r7, #2
 8018bb2:	f1ba 0f00 	cmp.w	sl, #0
 8018bb6:	d048      	beq.n	8018c4a <__gethex+0x3bc>
 8018bb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018bbc:	2b02      	cmp	r3, #2
 8018bbe:	d015      	beq.n	8018bec <__gethex+0x35e>
 8018bc0:	2b03      	cmp	r3, #3
 8018bc2:	d017      	beq.n	8018bf4 <__gethex+0x366>
 8018bc4:	2b01      	cmp	r3, #1
 8018bc6:	d109      	bne.n	8018bdc <__gethex+0x34e>
 8018bc8:	f01a 0f02 	tst.w	sl, #2
 8018bcc:	d006      	beq.n	8018bdc <__gethex+0x34e>
 8018bce:	f8d9 3000 	ldr.w	r3, [r9]
 8018bd2:	ea4a 0a03 	orr.w	sl, sl, r3
 8018bd6:	f01a 0f01 	tst.w	sl, #1
 8018bda:	d10e      	bne.n	8018bfa <__gethex+0x36c>
 8018bdc:	f047 0710 	orr.w	r7, r7, #16
 8018be0:	e033      	b.n	8018c4a <__gethex+0x3bc>
 8018be2:	f04f 0a01 	mov.w	sl, #1
 8018be6:	e7d0      	b.n	8018b8a <__gethex+0x2fc>
 8018be8:	2701      	movs	r7, #1
 8018bea:	e7e2      	b.n	8018bb2 <__gethex+0x324>
 8018bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bee:	f1c3 0301 	rsb	r3, r3, #1
 8018bf2:	9315      	str	r3, [sp, #84]	; 0x54
 8018bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d0f0      	beq.n	8018bdc <__gethex+0x34e>
 8018bfa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018bfe:	f105 0314 	add.w	r3, r5, #20
 8018c02:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018c06:	eb03 010a 	add.w	r1, r3, sl
 8018c0a:	f04f 0c00 	mov.w	ip, #0
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018c18:	d01c      	beq.n	8018c54 <__gethex+0x3c6>
 8018c1a:	3201      	adds	r2, #1
 8018c1c:	6002      	str	r2, [r0, #0]
 8018c1e:	2f02      	cmp	r7, #2
 8018c20:	f105 0314 	add.w	r3, r5, #20
 8018c24:	d138      	bne.n	8018c98 <__gethex+0x40a>
 8018c26:	f8d8 2000 	ldr.w	r2, [r8]
 8018c2a:	3a01      	subs	r2, #1
 8018c2c:	42b2      	cmp	r2, r6
 8018c2e:	d10a      	bne.n	8018c46 <__gethex+0x3b8>
 8018c30:	1171      	asrs	r1, r6, #5
 8018c32:	2201      	movs	r2, #1
 8018c34:	f006 061f 	and.w	r6, r6, #31
 8018c38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c3c:	fa02 f606 	lsl.w	r6, r2, r6
 8018c40:	421e      	tst	r6, r3
 8018c42:	bf18      	it	ne
 8018c44:	4617      	movne	r7, r2
 8018c46:	f047 0720 	orr.w	r7, r7, #32
 8018c4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c4c:	601d      	str	r5, [r3, #0]
 8018c4e:	9b06      	ldr	r3, [sp, #24]
 8018c50:	601c      	str	r4, [r3, #0]
 8018c52:	e6a4      	b.n	801899e <__gethex+0x110>
 8018c54:	4299      	cmp	r1, r3
 8018c56:	f843 cc04 	str.w	ip, [r3, #-4]
 8018c5a:	d8d8      	bhi.n	8018c0e <__gethex+0x380>
 8018c5c:	68ab      	ldr	r3, [r5, #8]
 8018c5e:	4599      	cmp	r9, r3
 8018c60:	db12      	blt.n	8018c88 <__gethex+0x3fa>
 8018c62:	6869      	ldr	r1, [r5, #4]
 8018c64:	9802      	ldr	r0, [sp, #8]
 8018c66:	3101      	adds	r1, #1
 8018c68:	f000 f910 	bl	8018e8c <_Balloc>
 8018c6c:	692a      	ldr	r2, [r5, #16]
 8018c6e:	3202      	adds	r2, #2
 8018c70:	f105 010c 	add.w	r1, r5, #12
 8018c74:	4683      	mov	fp, r0
 8018c76:	0092      	lsls	r2, r2, #2
 8018c78:	300c      	adds	r0, #12
 8018c7a:	f7fd f947 	bl	8015f0c <memcpy>
 8018c7e:	4629      	mov	r1, r5
 8018c80:	9802      	ldr	r0, [sp, #8]
 8018c82:	f000 f937 	bl	8018ef4 <_Bfree>
 8018c86:	465d      	mov	r5, fp
 8018c88:	692b      	ldr	r3, [r5, #16]
 8018c8a:	1c5a      	adds	r2, r3, #1
 8018c8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018c90:	612a      	str	r2, [r5, #16]
 8018c92:	2201      	movs	r2, #1
 8018c94:	615a      	str	r2, [r3, #20]
 8018c96:	e7c2      	b.n	8018c1e <__gethex+0x390>
 8018c98:	692a      	ldr	r2, [r5, #16]
 8018c9a:	454a      	cmp	r2, r9
 8018c9c:	dd0b      	ble.n	8018cb6 <__gethex+0x428>
 8018c9e:	2101      	movs	r1, #1
 8018ca0:	4628      	mov	r0, r5
 8018ca2:	f7ff fda5 	bl	80187f0 <rshift>
 8018ca6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018caa:	3401      	adds	r4, #1
 8018cac:	42a3      	cmp	r3, r4
 8018cae:	f6ff aed9 	blt.w	8018a64 <__gethex+0x1d6>
 8018cb2:	2701      	movs	r7, #1
 8018cb4:	e7c7      	b.n	8018c46 <__gethex+0x3b8>
 8018cb6:	f016 061f 	ands.w	r6, r6, #31
 8018cba:	d0fa      	beq.n	8018cb2 <__gethex+0x424>
 8018cbc:	449a      	add	sl, r3
 8018cbe:	f1c6 0620 	rsb	r6, r6, #32
 8018cc2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018cc6:	f000 f9a5 	bl	8019014 <__hi0bits>
 8018cca:	42b0      	cmp	r0, r6
 8018ccc:	dbe7      	blt.n	8018c9e <__gethex+0x410>
 8018cce:	e7f0      	b.n	8018cb2 <__gethex+0x424>

08018cd0 <L_shift>:
 8018cd0:	f1c2 0208 	rsb	r2, r2, #8
 8018cd4:	0092      	lsls	r2, r2, #2
 8018cd6:	b570      	push	{r4, r5, r6, lr}
 8018cd8:	f1c2 0620 	rsb	r6, r2, #32
 8018cdc:	6843      	ldr	r3, [r0, #4]
 8018cde:	6804      	ldr	r4, [r0, #0]
 8018ce0:	fa03 f506 	lsl.w	r5, r3, r6
 8018ce4:	432c      	orrs	r4, r5
 8018ce6:	40d3      	lsrs	r3, r2
 8018ce8:	6004      	str	r4, [r0, #0]
 8018cea:	f840 3f04 	str.w	r3, [r0, #4]!
 8018cee:	4288      	cmp	r0, r1
 8018cf0:	d3f4      	bcc.n	8018cdc <L_shift+0xc>
 8018cf2:	bd70      	pop	{r4, r5, r6, pc}

08018cf4 <__match>:
 8018cf4:	b530      	push	{r4, r5, lr}
 8018cf6:	6803      	ldr	r3, [r0, #0]
 8018cf8:	3301      	adds	r3, #1
 8018cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018cfe:	b914      	cbnz	r4, 8018d06 <__match+0x12>
 8018d00:	6003      	str	r3, [r0, #0]
 8018d02:	2001      	movs	r0, #1
 8018d04:	bd30      	pop	{r4, r5, pc}
 8018d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018d0e:	2d19      	cmp	r5, #25
 8018d10:	bf98      	it	ls
 8018d12:	3220      	addls	r2, #32
 8018d14:	42a2      	cmp	r2, r4
 8018d16:	d0f0      	beq.n	8018cfa <__match+0x6>
 8018d18:	2000      	movs	r0, #0
 8018d1a:	e7f3      	b.n	8018d04 <__match+0x10>

08018d1c <__hexnan>:
 8018d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d20:	680b      	ldr	r3, [r1, #0]
 8018d22:	6801      	ldr	r1, [r0, #0]
 8018d24:	115f      	asrs	r7, r3, #5
 8018d26:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018d2a:	f013 031f 	ands.w	r3, r3, #31
 8018d2e:	b087      	sub	sp, #28
 8018d30:	bf18      	it	ne
 8018d32:	3704      	addne	r7, #4
 8018d34:	2500      	movs	r5, #0
 8018d36:	1f3e      	subs	r6, r7, #4
 8018d38:	4682      	mov	sl, r0
 8018d3a:	4690      	mov	r8, r2
 8018d3c:	9301      	str	r3, [sp, #4]
 8018d3e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018d42:	46b1      	mov	r9, r6
 8018d44:	4634      	mov	r4, r6
 8018d46:	9502      	str	r5, [sp, #8]
 8018d48:	46ab      	mov	fp, r5
 8018d4a:	784a      	ldrb	r2, [r1, #1]
 8018d4c:	1c4b      	adds	r3, r1, #1
 8018d4e:	9303      	str	r3, [sp, #12]
 8018d50:	b342      	cbz	r2, 8018da4 <__hexnan+0x88>
 8018d52:	4610      	mov	r0, r2
 8018d54:	9105      	str	r1, [sp, #20]
 8018d56:	9204      	str	r2, [sp, #16]
 8018d58:	f7ff fd84 	bl	8018864 <__hexdig_fun>
 8018d5c:	2800      	cmp	r0, #0
 8018d5e:	d143      	bne.n	8018de8 <__hexnan+0xcc>
 8018d60:	9a04      	ldr	r2, [sp, #16]
 8018d62:	9905      	ldr	r1, [sp, #20]
 8018d64:	2a20      	cmp	r2, #32
 8018d66:	d818      	bhi.n	8018d9a <__hexnan+0x7e>
 8018d68:	9b02      	ldr	r3, [sp, #8]
 8018d6a:	459b      	cmp	fp, r3
 8018d6c:	dd13      	ble.n	8018d96 <__hexnan+0x7a>
 8018d6e:	454c      	cmp	r4, r9
 8018d70:	d206      	bcs.n	8018d80 <__hexnan+0x64>
 8018d72:	2d07      	cmp	r5, #7
 8018d74:	dc04      	bgt.n	8018d80 <__hexnan+0x64>
 8018d76:	462a      	mov	r2, r5
 8018d78:	4649      	mov	r1, r9
 8018d7a:	4620      	mov	r0, r4
 8018d7c:	f7ff ffa8 	bl	8018cd0 <L_shift>
 8018d80:	4544      	cmp	r4, r8
 8018d82:	d944      	bls.n	8018e0e <__hexnan+0xf2>
 8018d84:	2300      	movs	r3, #0
 8018d86:	f1a4 0904 	sub.w	r9, r4, #4
 8018d8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d8e:	f8cd b008 	str.w	fp, [sp, #8]
 8018d92:	464c      	mov	r4, r9
 8018d94:	461d      	mov	r5, r3
 8018d96:	9903      	ldr	r1, [sp, #12]
 8018d98:	e7d7      	b.n	8018d4a <__hexnan+0x2e>
 8018d9a:	2a29      	cmp	r2, #41	; 0x29
 8018d9c:	d14a      	bne.n	8018e34 <__hexnan+0x118>
 8018d9e:	3102      	adds	r1, #2
 8018da0:	f8ca 1000 	str.w	r1, [sl]
 8018da4:	f1bb 0f00 	cmp.w	fp, #0
 8018da8:	d044      	beq.n	8018e34 <__hexnan+0x118>
 8018daa:	454c      	cmp	r4, r9
 8018dac:	d206      	bcs.n	8018dbc <__hexnan+0xa0>
 8018dae:	2d07      	cmp	r5, #7
 8018db0:	dc04      	bgt.n	8018dbc <__hexnan+0xa0>
 8018db2:	462a      	mov	r2, r5
 8018db4:	4649      	mov	r1, r9
 8018db6:	4620      	mov	r0, r4
 8018db8:	f7ff ff8a 	bl	8018cd0 <L_shift>
 8018dbc:	4544      	cmp	r4, r8
 8018dbe:	d928      	bls.n	8018e12 <__hexnan+0xf6>
 8018dc0:	4643      	mov	r3, r8
 8018dc2:	f854 2b04 	ldr.w	r2, [r4], #4
 8018dc6:	f843 2b04 	str.w	r2, [r3], #4
 8018dca:	42a6      	cmp	r6, r4
 8018dcc:	d2f9      	bcs.n	8018dc2 <__hexnan+0xa6>
 8018dce:	2200      	movs	r2, #0
 8018dd0:	f843 2b04 	str.w	r2, [r3], #4
 8018dd4:	429e      	cmp	r6, r3
 8018dd6:	d2fb      	bcs.n	8018dd0 <__hexnan+0xb4>
 8018dd8:	6833      	ldr	r3, [r6, #0]
 8018dda:	b91b      	cbnz	r3, 8018de4 <__hexnan+0xc8>
 8018ddc:	4546      	cmp	r6, r8
 8018dde:	d127      	bne.n	8018e30 <__hexnan+0x114>
 8018de0:	2301      	movs	r3, #1
 8018de2:	6033      	str	r3, [r6, #0]
 8018de4:	2005      	movs	r0, #5
 8018de6:	e026      	b.n	8018e36 <__hexnan+0x11a>
 8018de8:	3501      	adds	r5, #1
 8018dea:	2d08      	cmp	r5, #8
 8018dec:	f10b 0b01 	add.w	fp, fp, #1
 8018df0:	dd06      	ble.n	8018e00 <__hexnan+0xe4>
 8018df2:	4544      	cmp	r4, r8
 8018df4:	d9cf      	bls.n	8018d96 <__hexnan+0x7a>
 8018df6:	2300      	movs	r3, #0
 8018df8:	f844 3c04 	str.w	r3, [r4, #-4]
 8018dfc:	2501      	movs	r5, #1
 8018dfe:	3c04      	subs	r4, #4
 8018e00:	6822      	ldr	r2, [r4, #0]
 8018e02:	f000 000f 	and.w	r0, r0, #15
 8018e06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018e0a:	6020      	str	r0, [r4, #0]
 8018e0c:	e7c3      	b.n	8018d96 <__hexnan+0x7a>
 8018e0e:	2508      	movs	r5, #8
 8018e10:	e7c1      	b.n	8018d96 <__hexnan+0x7a>
 8018e12:	9b01      	ldr	r3, [sp, #4]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d0df      	beq.n	8018dd8 <__hexnan+0xbc>
 8018e18:	f04f 32ff 	mov.w	r2, #4294967295
 8018e1c:	f1c3 0320 	rsb	r3, r3, #32
 8018e20:	fa22 f303 	lsr.w	r3, r2, r3
 8018e24:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018e28:	401a      	ands	r2, r3
 8018e2a:	f847 2c04 	str.w	r2, [r7, #-4]
 8018e2e:	e7d3      	b.n	8018dd8 <__hexnan+0xbc>
 8018e30:	3e04      	subs	r6, #4
 8018e32:	e7d1      	b.n	8018dd8 <__hexnan+0xbc>
 8018e34:	2004      	movs	r0, #4
 8018e36:	b007      	add	sp, #28
 8018e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e3c <__locale_ctype_ptr_l>:
 8018e3c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018e40:	4770      	bx	lr

08018e42 <__localeconv_l>:
 8018e42:	30f0      	adds	r0, #240	; 0xf0
 8018e44:	4770      	bx	lr
	...

08018e48 <_localeconv_r>:
 8018e48:	4b04      	ldr	r3, [pc, #16]	; (8018e5c <_localeconv_r+0x14>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	6a18      	ldr	r0, [r3, #32]
 8018e4e:	4b04      	ldr	r3, [pc, #16]	; (8018e60 <_localeconv_r+0x18>)
 8018e50:	2800      	cmp	r0, #0
 8018e52:	bf08      	it	eq
 8018e54:	4618      	moveq	r0, r3
 8018e56:	30f0      	adds	r0, #240	; 0xf0
 8018e58:	4770      	bx	lr
 8018e5a:	bf00      	nop
 8018e5c:	20000a0c 	.word	0x20000a0c
 8018e60:	20000a70 	.word	0x20000a70

08018e64 <__ascii_mbtowc>:
 8018e64:	b082      	sub	sp, #8
 8018e66:	b901      	cbnz	r1, 8018e6a <__ascii_mbtowc+0x6>
 8018e68:	a901      	add	r1, sp, #4
 8018e6a:	b142      	cbz	r2, 8018e7e <__ascii_mbtowc+0x1a>
 8018e6c:	b14b      	cbz	r3, 8018e82 <__ascii_mbtowc+0x1e>
 8018e6e:	7813      	ldrb	r3, [r2, #0]
 8018e70:	600b      	str	r3, [r1, #0]
 8018e72:	7812      	ldrb	r2, [r2, #0]
 8018e74:	1c10      	adds	r0, r2, #0
 8018e76:	bf18      	it	ne
 8018e78:	2001      	movne	r0, #1
 8018e7a:	b002      	add	sp, #8
 8018e7c:	4770      	bx	lr
 8018e7e:	4610      	mov	r0, r2
 8018e80:	e7fb      	b.n	8018e7a <__ascii_mbtowc+0x16>
 8018e82:	f06f 0001 	mvn.w	r0, #1
 8018e86:	e7f8      	b.n	8018e7a <__ascii_mbtowc+0x16>

08018e88 <__malloc_lock>:
 8018e88:	4770      	bx	lr

08018e8a <__malloc_unlock>:
 8018e8a:	4770      	bx	lr

08018e8c <_Balloc>:
 8018e8c:	b570      	push	{r4, r5, r6, lr}
 8018e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018e90:	4604      	mov	r4, r0
 8018e92:	460e      	mov	r6, r1
 8018e94:	b93d      	cbnz	r5, 8018ea6 <_Balloc+0x1a>
 8018e96:	2010      	movs	r0, #16
 8018e98:	f7fd f828 	bl	8015eec <malloc>
 8018e9c:	6260      	str	r0, [r4, #36]	; 0x24
 8018e9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018ea2:	6005      	str	r5, [r0, #0]
 8018ea4:	60c5      	str	r5, [r0, #12]
 8018ea6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018ea8:	68eb      	ldr	r3, [r5, #12]
 8018eaa:	b183      	cbz	r3, 8018ece <_Balloc+0x42>
 8018eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018eae:	68db      	ldr	r3, [r3, #12]
 8018eb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018eb4:	b9b8      	cbnz	r0, 8018ee6 <_Balloc+0x5a>
 8018eb6:	2101      	movs	r1, #1
 8018eb8:	fa01 f506 	lsl.w	r5, r1, r6
 8018ebc:	1d6a      	adds	r2, r5, #5
 8018ebe:	0092      	lsls	r2, r2, #2
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f000 fbe2 	bl	801968a <_calloc_r>
 8018ec6:	b160      	cbz	r0, 8018ee2 <_Balloc+0x56>
 8018ec8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018ecc:	e00e      	b.n	8018eec <_Balloc+0x60>
 8018ece:	2221      	movs	r2, #33	; 0x21
 8018ed0:	2104      	movs	r1, #4
 8018ed2:	4620      	mov	r0, r4
 8018ed4:	f000 fbd9 	bl	801968a <_calloc_r>
 8018ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018eda:	60e8      	str	r0, [r5, #12]
 8018edc:	68db      	ldr	r3, [r3, #12]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d1e4      	bne.n	8018eac <_Balloc+0x20>
 8018ee2:	2000      	movs	r0, #0
 8018ee4:	bd70      	pop	{r4, r5, r6, pc}
 8018ee6:	6802      	ldr	r2, [r0, #0]
 8018ee8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018eec:	2300      	movs	r3, #0
 8018eee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ef2:	e7f7      	b.n	8018ee4 <_Balloc+0x58>

08018ef4 <_Bfree>:
 8018ef4:	b570      	push	{r4, r5, r6, lr}
 8018ef6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018ef8:	4606      	mov	r6, r0
 8018efa:	460d      	mov	r5, r1
 8018efc:	b93c      	cbnz	r4, 8018f0e <_Bfree+0x1a>
 8018efe:	2010      	movs	r0, #16
 8018f00:	f7fc fff4 	bl	8015eec <malloc>
 8018f04:	6270      	str	r0, [r6, #36]	; 0x24
 8018f06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f0a:	6004      	str	r4, [r0, #0]
 8018f0c:	60c4      	str	r4, [r0, #12]
 8018f0e:	b13d      	cbz	r5, 8018f20 <_Bfree+0x2c>
 8018f10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018f12:	686a      	ldr	r2, [r5, #4]
 8018f14:	68db      	ldr	r3, [r3, #12]
 8018f16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f1a:	6029      	str	r1, [r5, #0]
 8018f1c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018f20:	bd70      	pop	{r4, r5, r6, pc}

08018f22 <__multadd>:
 8018f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f26:	690d      	ldr	r5, [r1, #16]
 8018f28:	461f      	mov	r7, r3
 8018f2a:	4606      	mov	r6, r0
 8018f2c:	460c      	mov	r4, r1
 8018f2e:	f101 0c14 	add.w	ip, r1, #20
 8018f32:	2300      	movs	r3, #0
 8018f34:	f8dc 0000 	ldr.w	r0, [ip]
 8018f38:	b281      	uxth	r1, r0
 8018f3a:	fb02 7101 	mla	r1, r2, r1, r7
 8018f3e:	0c0f      	lsrs	r7, r1, #16
 8018f40:	0c00      	lsrs	r0, r0, #16
 8018f42:	fb02 7000 	mla	r0, r2, r0, r7
 8018f46:	b289      	uxth	r1, r1
 8018f48:	3301      	adds	r3, #1
 8018f4a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018f4e:	429d      	cmp	r5, r3
 8018f50:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018f54:	f84c 1b04 	str.w	r1, [ip], #4
 8018f58:	dcec      	bgt.n	8018f34 <__multadd+0x12>
 8018f5a:	b1d7      	cbz	r7, 8018f92 <__multadd+0x70>
 8018f5c:	68a3      	ldr	r3, [r4, #8]
 8018f5e:	42ab      	cmp	r3, r5
 8018f60:	dc12      	bgt.n	8018f88 <__multadd+0x66>
 8018f62:	6861      	ldr	r1, [r4, #4]
 8018f64:	4630      	mov	r0, r6
 8018f66:	3101      	adds	r1, #1
 8018f68:	f7ff ff90 	bl	8018e8c <_Balloc>
 8018f6c:	6922      	ldr	r2, [r4, #16]
 8018f6e:	3202      	adds	r2, #2
 8018f70:	f104 010c 	add.w	r1, r4, #12
 8018f74:	4680      	mov	r8, r0
 8018f76:	0092      	lsls	r2, r2, #2
 8018f78:	300c      	adds	r0, #12
 8018f7a:	f7fc ffc7 	bl	8015f0c <memcpy>
 8018f7e:	4621      	mov	r1, r4
 8018f80:	4630      	mov	r0, r6
 8018f82:	f7ff ffb7 	bl	8018ef4 <_Bfree>
 8018f86:	4644      	mov	r4, r8
 8018f88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f8c:	3501      	adds	r5, #1
 8018f8e:	615f      	str	r7, [r3, #20]
 8018f90:	6125      	str	r5, [r4, #16]
 8018f92:	4620      	mov	r0, r4
 8018f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f98 <__s2b>:
 8018f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f9c:	460c      	mov	r4, r1
 8018f9e:	4615      	mov	r5, r2
 8018fa0:	461f      	mov	r7, r3
 8018fa2:	2209      	movs	r2, #9
 8018fa4:	3308      	adds	r3, #8
 8018fa6:	4606      	mov	r6, r0
 8018fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018fac:	2100      	movs	r1, #0
 8018fae:	2201      	movs	r2, #1
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	db20      	blt.n	8018ff6 <__s2b+0x5e>
 8018fb4:	4630      	mov	r0, r6
 8018fb6:	f7ff ff69 	bl	8018e8c <_Balloc>
 8018fba:	9b08      	ldr	r3, [sp, #32]
 8018fbc:	6143      	str	r3, [r0, #20]
 8018fbe:	2d09      	cmp	r5, #9
 8018fc0:	f04f 0301 	mov.w	r3, #1
 8018fc4:	6103      	str	r3, [r0, #16]
 8018fc6:	dd19      	ble.n	8018ffc <__s2b+0x64>
 8018fc8:	f104 0809 	add.w	r8, r4, #9
 8018fcc:	46c1      	mov	r9, r8
 8018fce:	442c      	add	r4, r5
 8018fd0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018fd4:	4601      	mov	r1, r0
 8018fd6:	3b30      	subs	r3, #48	; 0x30
 8018fd8:	220a      	movs	r2, #10
 8018fda:	4630      	mov	r0, r6
 8018fdc:	f7ff ffa1 	bl	8018f22 <__multadd>
 8018fe0:	45a1      	cmp	r9, r4
 8018fe2:	d1f5      	bne.n	8018fd0 <__s2b+0x38>
 8018fe4:	eb08 0405 	add.w	r4, r8, r5
 8018fe8:	3c08      	subs	r4, #8
 8018fea:	1b2d      	subs	r5, r5, r4
 8018fec:	1963      	adds	r3, r4, r5
 8018fee:	42bb      	cmp	r3, r7
 8018ff0:	db07      	blt.n	8019002 <__s2b+0x6a>
 8018ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ff6:	0052      	lsls	r2, r2, #1
 8018ff8:	3101      	adds	r1, #1
 8018ffa:	e7d9      	b.n	8018fb0 <__s2b+0x18>
 8018ffc:	340a      	adds	r4, #10
 8018ffe:	2509      	movs	r5, #9
 8019000:	e7f3      	b.n	8018fea <__s2b+0x52>
 8019002:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019006:	4601      	mov	r1, r0
 8019008:	3b30      	subs	r3, #48	; 0x30
 801900a:	220a      	movs	r2, #10
 801900c:	4630      	mov	r0, r6
 801900e:	f7ff ff88 	bl	8018f22 <__multadd>
 8019012:	e7eb      	b.n	8018fec <__s2b+0x54>

08019014 <__hi0bits>:
 8019014:	0c02      	lsrs	r2, r0, #16
 8019016:	0412      	lsls	r2, r2, #16
 8019018:	4603      	mov	r3, r0
 801901a:	b9b2      	cbnz	r2, 801904a <__hi0bits+0x36>
 801901c:	0403      	lsls	r3, r0, #16
 801901e:	2010      	movs	r0, #16
 8019020:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019024:	bf04      	itt	eq
 8019026:	021b      	lsleq	r3, r3, #8
 8019028:	3008      	addeq	r0, #8
 801902a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801902e:	bf04      	itt	eq
 8019030:	011b      	lsleq	r3, r3, #4
 8019032:	3004      	addeq	r0, #4
 8019034:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019038:	bf04      	itt	eq
 801903a:	009b      	lsleq	r3, r3, #2
 801903c:	3002      	addeq	r0, #2
 801903e:	2b00      	cmp	r3, #0
 8019040:	db06      	blt.n	8019050 <__hi0bits+0x3c>
 8019042:	005b      	lsls	r3, r3, #1
 8019044:	d503      	bpl.n	801904e <__hi0bits+0x3a>
 8019046:	3001      	adds	r0, #1
 8019048:	4770      	bx	lr
 801904a:	2000      	movs	r0, #0
 801904c:	e7e8      	b.n	8019020 <__hi0bits+0xc>
 801904e:	2020      	movs	r0, #32
 8019050:	4770      	bx	lr

08019052 <__lo0bits>:
 8019052:	6803      	ldr	r3, [r0, #0]
 8019054:	f013 0207 	ands.w	r2, r3, #7
 8019058:	4601      	mov	r1, r0
 801905a:	d00b      	beq.n	8019074 <__lo0bits+0x22>
 801905c:	07da      	lsls	r2, r3, #31
 801905e:	d423      	bmi.n	80190a8 <__lo0bits+0x56>
 8019060:	0798      	lsls	r0, r3, #30
 8019062:	bf49      	itett	mi
 8019064:	085b      	lsrmi	r3, r3, #1
 8019066:	089b      	lsrpl	r3, r3, #2
 8019068:	2001      	movmi	r0, #1
 801906a:	600b      	strmi	r3, [r1, #0]
 801906c:	bf5c      	itt	pl
 801906e:	600b      	strpl	r3, [r1, #0]
 8019070:	2002      	movpl	r0, #2
 8019072:	4770      	bx	lr
 8019074:	b298      	uxth	r0, r3
 8019076:	b9a8      	cbnz	r0, 80190a4 <__lo0bits+0x52>
 8019078:	0c1b      	lsrs	r3, r3, #16
 801907a:	2010      	movs	r0, #16
 801907c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019080:	bf04      	itt	eq
 8019082:	0a1b      	lsreq	r3, r3, #8
 8019084:	3008      	addeq	r0, #8
 8019086:	071a      	lsls	r2, r3, #28
 8019088:	bf04      	itt	eq
 801908a:	091b      	lsreq	r3, r3, #4
 801908c:	3004      	addeq	r0, #4
 801908e:	079a      	lsls	r2, r3, #30
 8019090:	bf04      	itt	eq
 8019092:	089b      	lsreq	r3, r3, #2
 8019094:	3002      	addeq	r0, #2
 8019096:	07da      	lsls	r2, r3, #31
 8019098:	d402      	bmi.n	80190a0 <__lo0bits+0x4e>
 801909a:	085b      	lsrs	r3, r3, #1
 801909c:	d006      	beq.n	80190ac <__lo0bits+0x5a>
 801909e:	3001      	adds	r0, #1
 80190a0:	600b      	str	r3, [r1, #0]
 80190a2:	4770      	bx	lr
 80190a4:	4610      	mov	r0, r2
 80190a6:	e7e9      	b.n	801907c <__lo0bits+0x2a>
 80190a8:	2000      	movs	r0, #0
 80190aa:	4770      	bx	lr
 80190ac:	2020      	movs	r0, #32
 80190ae:	4770      	bx	lr

080190b0 <__i2b>:
 80190b0:	b510      	push	{r4, lr}
 80190b2:	460c      	mov	r4, r1
 80190b4:	2101      	movs	r1, #1
 80190b6:	f7ff fee9 	bl	8018e8c <_Balloc>
 80190ba:	2201      	movs	r2, #1
 80190bc:	6144      	str	r4, [r0, #20]
 80190be:	6102      	str	r2, [r0, #16]
 80190c0:	bd10      	pop	{r4, pc}

080190c2 <__multiply>:
 80190c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190c6:	4614      	mov	r4, r2
 80190c8:	690a      	ldr	r2, [r1, #16]
 80190ca:	6923      	ldr	r3, [r4, #16]
 80190cc:	429a      	cmp	r2, r3
 80190ce:	bfb8      	it	lt
 80190d0:	460b      	movlt	r3, r1
 80190d2:	4688      	mov	r8, r1
 80190d4:	bfbc      	itt	lt
 80190d6:	46a0      	movlt	r8, r4
 80190d8:	461c      	movlt	r4, r3
 80190da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80190de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80190e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80190e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80190ea:	eb07 0609 	add.w	r6, r7, r9
 80190ee:	42b3      	cmp	r3, r6
 80190f0:	bfb8      	it	lt
 80190f2:	3101      	addlt	r1, #1
 80190f4:	f7ff feca 	bl	8018e8c <_Balloc>
 80190f8:	f100 0514 	add.w	r5, r0, #20
 80190fc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019100:	462b      	mov	r3, r5
 8019102:	2200      	movs	r2, #0
 8019104:	4573      	cmp	r3, lr
 8019106:	d316      	bcc.n	8019136 <__multiply+0x74>
 8019108:	f104 0214 	add.w	r2, r4, #20
 801910c:	f108 0114 	add.w	r1, r8, #20
 8019110:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8019114:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8019118:	9300      	str	r3, [sp, #0]
 801911a:	9b00      	ldr	r3, [sp, #0]
 801911c:	9201      	str	r2, [sp, #4]
 801911e:	4293      	cmp	r3, r2
 8019120:	d80c      	bhi.n	801913c <__multiply+0x7a>
 8019122:	2e00      	cmp	r6, #0
 8019124:	dd03      	ble.n	801912e <__multiply+0x6c>
 8019126:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801912a:	2b00      	cmp	r3, #0
 801912c:	d05d      	beq.n	80191ea <__multiply+0x128>
 801912e:	6106      	str	r6, [r0, #16]
 8019130:	b003      	add	sp, #12
 8019132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019136:	f843 2b04 	str.w	r2, [r3], #4
 801913a:	e7e3      	b.n	8019104 <__multiply+0x42>
 801913c:	f8b2 b000 	ldrh.w	fp, [r2]
 8019140:	f1bb 0f00 	cmp.w	fp, #0
 8019144:	d023      	beq.n	801918e <__multiply+0xcc>
 8019146:	4689      	mov	r9, r1
 8019148:	46ac      	mov	ip, r5
 801914a:	f04f 0800 	mov.w	r8, #0
 801914e:	f859 4b04 	ldr.w	r4, [r9], #4
 8019152:	f8dc a000 	ldr.w	sl, [ip]
 8019156:	b2a3      	uxth	r3, r4
 8019158:	fa1f fa8a 	uxth.w	sl, sl
 801915c:	fb0b a303 	mla	r3, fp, r3, sl
 8019160:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019164:	f8dc 4000 	ldr.w	r4, [ip]
 8019168:	4443      	add	r3, r8
 801916a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801916e:	fb0b 840a 	mla	r4, fp, sl, r8
 8019172:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8019176:	46e2      	mov	sl, ip
 8019178:	b29b      	uxth	r3, r3
 801917a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801917e:	454f      	cmp	r7, r9
 8019180:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019184:	f84a 3b04 	str.w	r3, [sl], #4
 8019188:	d82b      	bhi.n	80191e2 <__multiply+0x120>
 801918a:	f8cc 8004 	str.w	r8, [ip, #4]
 801918e:	9b01      	ldr	r3, [sp, #4]
 8019190:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8019194:	3204      	adds	r2, #4
 8019196:	f1ba 0f00 	cmp.w	sl, #0
 801919a:	d020      	beq.n	80191de <__multiply+0x11c>
 801919c:	682b      	ldr	r3, [r5, #0]
 801919e:	4689      	mov	r9, r1
 80191a0:	46a8      	mov	r8, r5
 80191a2:	f04f 0b00 	mov.w	fp, #0
 80191a6:	f8b9 c000 	ldrh.w	ip, [r9]
 80191aa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80191ae:	fb0a 440c 	mla	r4, sl, ip, r4
 80191b2:	445c      	add	r4, fp
 80191b4:	46c4      	mov	ip, r8
 80191b6:	b29b      	uxth	r3, r3
 80191b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80191bc:	f84c 3b04 	str.w	r3, [ip], #4
 80191c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80191c4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80191c8:	0c1b      	lsrs	r3, r3, #16
 80191ca:	fb0a b303 	mla	r3, sl, r3, fp
 80191ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80191d2:	454f      	cmp	r7, r9
 80191d4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80191d8:	d805      	bhi.n	80191e6 <__multiply+0x124>
 80191da:	f8c8 3004 	str.w	r3, [r8, #4]
 80191de:	3504      	adds	r5, #4
 80191e0:	e79b      	b.n	801911a <__multiply+0x58>
 80191e2:	46d4      	mov	ip, sl
 80191e4:	e7b3      	b.n	801914e <__multiply+0x8c>
 80191e6:	46e0      	mov	r8, ip
 80191e8:	e7dd      	b.n	80191a6 <__multiply+0xe4>
 80191ea:	3e01      	subs	r6, #1
 80191ec:	e799      	b.n	8019122 <__multiply+0x60>
	...

080191f0 <__pow5mult>:
 80191f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191f4:	4615      	mov	r5, r2
 80191f6:	f012 0203 	ands.w	r2, r2, #3
 80191fa:	4606      	mov	r6, r0
 80191fc:	460f      	mov	r7, r1
 80191fe:	d007      	beq.n	8019210 <__pow5mult+0x20>
 8019200:	3a01      	subs	r2, #1
 8019202:	4c21      	ldr	r4, [pc, #132]	; (8019288 <__pow5mult+0x98>)
 8019204:	2300      	movs	r3, #0
 8019206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801920a:	f7ff fe8a 	bl	8018f22 <__multadd>
 801920e:	4607      	mov	r7, r0
 8019210:	10ad      	asrs	r5, r5, #2
 8019212:	d035      	beq.n	8019280 <__pow5mult+0x90>
 8019214:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019216:	b93c      	cbnz	r4, 8019228 <__pow5mult+0x38>
 8019218:	2010      	movs	r0, #16
 801921a:	f7fc fe67 	bl	8015eec <malloc>
 801921e:	6270      	str	r0, [r6, #36]	; 0x24
 8019220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019224:	6004      	str	r4, [r0, #0]
 8019226:	60c4      	str	r4, [r0, #12]
 8019228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801922c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019230:	b94c      	cbnz	r4, 8019246 <__pow5mult+0x56>
 8019232:	f240 2171 	movw	r1, #625	; 0x271
 8019236:	4630      	mov	r0, r6
 8019238:	f7ff ff3a 	bl	80190b0 <__i2b>
 801923c:	2300      	movs	r3, #0
 801923e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019242:	4604      	mov	r4, r0
 8019244:	6003      	str	r3, [r0, #0]
 8019246:	f04f 0800 	mov.w	r8, #0
 801924a:	07eb      	lsls	r3, r5, #31
 801924c:	d50a      	bpl.n	8019264 <__pow5mult+0x74>
 801924e:	4639      	mov	r1, r7
 8019250:	4622      	mov	r2, r4
 8019252:	4630      	mov	r0, r6
 8019254:	f7ff ff35 	bl	80190c2 <__multiply>
 8019258:	4639      	mov	r1, r7
 801925a:	4681      	mov	r9, r0
 801925c:	4630      	mov	r0, r6
 801925e:	f7ff fe49 	bl	8018ef4 <_Bfree>
 8019262:	464f      	mov	r7, r9
 8019264:	106d      	asrs	r5, r5, #1
 8019266:	d00b      	beq.n	8019280 <__pow5mult+0x90>
 8019268:	6820      	ldr	r0, [r4, #0]
 801926a:	b938      	cbnz	r0, 801927c <__pow5mult+0x8c>
 801926c:	4622      	mov	r2, r4
 801926e:	4621      	mov	r1, r4
 8019270:	4630      	mov	r0, r6
 8019272:	f7ff ff26 	bl	80190c2 <__multiply>
 8019276:	6020      	str	r0, [r4, #0]
 8019278:	f8c0 8000 	str.w	r8, [r0]
 801927c:	4604      	mov	r4, r0
 801927e:	e7e4      	b.n	801924a <__pow5mult+0x5a>
 8019280:	4638      	mov	r0, r7
 8019282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019286:	bf00      	nop
 8019288:	0801b860 	.word	0x0801b860

0801928c <__lshift>:
 801928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019290:	460c      	mov	r4, r1
 8019292:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019296:	6923      	ldr	r3, [r4, #16]
 8019298:	6849      	ldr	r1, [r1, #4]
 801929a:	eb0a 0903 	add.w	r9, sl, r3
 801929e:	68a3      	ldr	r3, [r4, #8]
 80192a0:	4607      	mov	r7, r0
 80192a2:	4616      	mov	r6, r2
 80192a4:	f109 0501 	add.w	r5, r9, #1
 80192a8:	42ab      	cmp	r3, r5
 80192aa:	db32      	blt.n	8019312 <__lshift+0x86>
 80192ac:	4638      	mov	r0, r7
 80192ae:	f7ff fded 	bl	8018e8c <_Balloc>
 80192b2:	2300      	movs	r3, #0
 80192b4:	4680      	mov	r8, r0
 80192b6:	f100 0114 	add.w	r1, r0, #20
 80192ba:	461a      	mov	r2, r3
 80192bc:	4553      	cmp	r3, sl
 80192be:	db2b      	blt.n	8019318 <__lshift+0x8c>
 80192c0:	6920      	ldr	r0, [r4, #16]
 80192c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80192c6:	f104 0314 	add.w	r3, r4, #20
 80192ca:	f016 021f 	ands.w	r2, r6, #31
 80192ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80192d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80192d6:	d025      	beq.n	8019324 <__lshift+0x98>
 80192d8:	f1c2 0e20 	rsb	lr, r2, #32
 80192dc:	2000      	movs	r0, #0
 80192de:	681e      	ldr	r6, [r3, #0]
 80192e0:	468a      	mov	sl, r1
 80192e2:	4096      	lsls	r6, r2
 80192e4:	4330      	orrs	r0, r6
 80192e6:	f84a 0b04 	str.w	r0, [sl], #4
 80192ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80192ee:	459c      	cmp	ip, r3
 80192f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80192f4:	d814      	bhi.n	8019320 <__lshift+0x94>
 80192f6:	6048      	str	r0, [r1, #4]
 80192f8:	b108      	cbz	r0, 80192fe <__lshift+0x72>
 80192fa:	f109 0502 	add.w	r5, r9, #2
 80192fe:	3d01      	subs	r5, #1
 8019300:	4638      	mov	r0, r7
 8019302:	f8c8 5010 	str.w	r5, [r8, #16]
 8019306:	4621      	mov	r1, r4
 8019308:	f7ff fdf4 	bl	8018ef4 <_Bfree>
 801930c:	4640      	mov	r0, r8
 801930e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019312:	3101      	adds	r1, #1
 8019314:	005b      	lsls	r3, r3, #1
 8019316:	e7c7      	b.n	80192a8 <__lshift+0x1c>
 8019318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801931c:	3301      	adds	r3, #1
 801931e:	e7cd      	b.n	80192bc <__lshift+0x30>
 8019320:	4651      	mov	r1, sl
 8019322:	e7dc      	b.n	80192de <__lshift+0x52>
 8019324:	3904      	subs	r1, #4
 8019326:	f853 2b04 	ldr.w	r2, [r3], #4
 801932a:	f841 2f04 	str.w	r2, [r1, #4]!
 801932e:	459c      	cmp	ip, r3
 8019330:	d8f9      	bhi.n	8019326 <__lshift+0x9a>
 8019332:	e7e4      	b.n	80192fe <__lshift+0x72>

08019334 <__mcmp>:
 8019334:	6903      	ldr	r3, [r0, #16]
 8019336:	690a      	ldr	r2, [r1, #16]
 8019338:	1a9b      	subs	r3, r3, r2
 801933a:	b530      	push	{r4, r5, lr}
 801933c:	d10c      	bne.n	8019358 <__mcmp+0x24>
 801933e:	0092      	lsls	r2, r2, #2
 8019340:	3014      	adds	r0, #20
 8019342:	3114      	adds	r1, #20
 8019344:	1884      	adds	r4, r0, r2
 8019346:	4411      	add	r1, r2
 8019348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801934c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019350:	4295      	cmp	r5, r2
 8019352:	d003      	beq.n	801935c <__mcmp+0x28>
 8019354:	d305      	bcc.n	8019362 <__mcmp+0x2e>
 8019356:	2301      	movs	r3, #1
 8019358:	4618      	mov	r0, r3
 801935a:	bd30      	pop	{r4, r5, pc}
 801935c:	42a0      	cmp	r0, r4
 801935e:	d3f3      	bcc.n	8019348 <__mcmp+0x14>
 8019360:	e7fa      	b.n	8019358 <__mcmp+0x24>
 8019362:	f04f 33ff 	mov.w	r3, #4294967295
 8019366:	e7f7      	b.n	8019358 <__mcmp+0x24>

08019368 <__mdiff>:
 8019368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801936c:	460d      	mov	r5, r1
 801936e:	4607      	mov	r7, r0
 8019370:	4611      	mov	r1, r2
 8019372:	4628      	mov	r0, r5
 8019374:	4614      	mov	r4, r2
 8019376:	f7ff ffdd 	bl	8019334 <__mcmp>
 801937a:	1e06      	subs	r6, r0, #0
 801937c:	d108      	bne.n	8019390 <__mdiff+0x28>
 801937e:	4631      	mov	r1, r6
 8019380:	4638      	mov	r0, r7
 8019382:	f7ff fd83 	bl	8018e8c <_Balloc>
 8019386:	2301      	movs	r3, #1
 8019388:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801938c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019390:	bfa4      	itt	ge
 8019392:	4623      	movge	r3, r4
 8019394:	462c      	movge	r4, r5
 8019396:	4638      	mov	r0, r7
 8019398:	6861      	ldr	r1, [r4, #4]
 801939a:	bfa6      	itte	ge
 801939c:	461d      	movge	r5, r3
 801939e:	2600      	movge	r6, #0
 80193a0:	2601      	movlt	r6, #1
 80193a2:	f7ff fd73 	bl	8018e8c <_Balloc>
 80193a6:	692b      	ldr	r3, [r5, #16]
 80193a8:	60c6      	str	r6, [r0, #12]
 80193aa:	6926      	ldr	r6, [r4, #16]
 80193ac:	f105 0914 	add.w	r9, r5, #20
 80193b0:	f104 0214 	add.w	r2, r4, #20
 80193b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80193b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80193bc:	f100 0514 	add.w	r5, r0, #20
 80193c0:	f04f 0e00 	mov.w	lr, #0
 80193c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80193c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80193cc:	fa1e f18a 	uxtah	r1, lr, sl
 80193d0:	b2a3      	uxth	r3, r4
 80193d2:	1ac9      	subs	r1, r1, r3
 80193d4:	0c23      	lsrs	r3, r4, #16
 80193d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80193da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80193de:	b289      	uxth	r1, r1
 80193e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80193e4:	45c8      	cmp	r8, r9
 80193e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80193ea:	4694      	mov	ip, r2
 80193ec:	f845 3b04 	str.w	r3, [r5], #4
 80193f0:	d8e8      	bhi.n	80193c4 <__mdiff+0x5c>
 80193f2:	45bc      	cmp	ip, r7
 80193f4:	d304      	bcc.n	8019400 <__mdiff+0x98>
 80193f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80193fa:	b183      	cbz	r3, 801941e <__mdiff+0xb6>
 80193fc:	6106      	str	r6, [r0, #16]
 80193fe:	e7c5      	b.n	801938c <__mdiff+0x24>
 8019400:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019404:	fa1e f381 	uxtah	r3, lr, r1
 8019408:	141a      	asrs	r2, r3, #16
 801940a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801940e:	b29b      	uxth	r3, r3
 8019410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019414:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019418:	f845 3b04 	str.w	r3, [r5], #4
 801941c:	e7e9      	b.n	80193f2 <__mdiff+0x8a>
 801941e:	3e01      	subs	r6, #1
 8019420:	e7e9      	b.n	80193f6 <__mdiff+0x8e>
	...

08019424 <__ulp>:
 8019424:	4b12      	ldr	r3, [pc, #72]	; (8019470 <__ulp+0x4c>)
 8019426:	ee10 2a90 	vmov	r2, s1
 801942a:	401a      	ands	r2, r3
 801942c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019430:	2b00      	cmp	r3, #0
 8019432:	dd04      	ble.n	801943e <__ulp+0x1a>
 8019434:	2000      	movs	r0, #0
 8019436:	4619      	mov	r1, r3
 8019438:	ec41 0b10 	vmov	d0, r0, r1
 801943c:	4770      	bx	lr
 801943e:	425b      	negs	r3, r3
 8019440:	151b      	asrs	r3, r3, #20
 8019442:	2b13      	cmp	r3, #19
 8019444:	f04f 0000 	mov.w	r0, #0
 8019448:	f04f 0100 	mov.w	r1, #0
 801944c:	dc04      	bgt.n	8019458 <__ulp+0x34>
 801944e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019452:	fa42 f103 	asr.w	r1, r2, r3
 8019456:	e7ef      	b.n	8019438 <__ulp+0x14>
 8019458:	3b14      	subs	r3, #20
 801945a:	2b1e      	cmp	r3, #30
 801945c:	f04f 0201 	mov.w	r2, #1
 8019460:	bfda      	itte	le
 8019462:	f1c3 031f 	rsble	r3, r3, #31
 8019466:	fa02 f303 	lslle.w	r3, r2, r3
 801946a:	4613      	movgt	r3, r2
 801946c:	4618      	mov	r0, r3
 801946e:	e7e3      	b.n	8019438 <__ulp+0x14>
 8019470:	7ff00000 	.word	0x7ff00000

08019474 <__b2d>:
 8019474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019476:	6905      	ldr	r5, [r0, #16]
 8019478:	f100 0714 	add.w	r7, r0, #20
 801947c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019480:	1f2e      	subs	r6, r5, #4
 8019482:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019486:	4620      	mov	r0, r4
 8019488:	f7ff fdc4 	bl	8019014 <__hi0bits>
 801948c:	f1c0 0320 	rsb	r3, r0, #32
 8019490:	280a      	cmp	r0, #10
 8019492:	600b      	str	r3, [r1, #0]
 8019494:	f8df c074 	ldr.w	ip, [pc, #116]	; 801950c <__b2d+0x98>
 8019498:	dc14      	bgt.n	80194c4 <__b2d+0x50>
 801949a:	f1c0 0e0b 	rsb	lr, r0, #11
 801949e:	fa24 f10e 	lsr.w	r1, r4, lr
 80194a2:	42b7      	cmp	r7, r6
 80194a4:	ea41 030c 	orr.w	r3, r1, ip
 80194a8:	bf34      	ite	cc
 80194aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80194ae:	2100      	movcs	r1, #0
 80194b0:	3015      	adds	r0, #21
 80194b2:	fa04 f000 	lsl.w	r0, r4, r0
 80194b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80194ba:	ea40 0201 	orr.w	r2, r0, r1
 80194be:	ec43 2b10 	vmov	d0, r2, r3
 80194c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194c4:	42b7      	cmp	r7, r6
 80194c6:	bf3a      	itte	cc
 80194c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80194cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80194d0:	2100      	movcs	r1, #0
 80194d2:	380b      	subs	r0, #11
 80194d4:	d015      	beq.n	8019502 <__b2d+0x8e>
 80194d6:	4084      	lsls	r4, r0
 80194d8:	f1c0 0520 	rsb	r5, r0, #32
 80194dc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80194e0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80194e4:	42be      	cmp	r6, r7
 80194e6:	fa21 fc05 	lsr.w	ip, r1, r5
 80194ea:	ea44 030c 	orr.w	r3, r4, ip
 80194ee:	bf8c      	ite	hi
 80194f0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80194f4:	2400      	movls	r4, #0
 80194f6:	fa01 f000 	lsl.w	r0, r1, r0
 80194fa:	40ec      	lsrs	r4, r5
 80194fc:	ea40 0204 	orr.w	r2, r0, r4
 8019500:	e7dd      	b.n	80194be <__b2d+0x4a>
 8019502:	ea44 030c 	orr.w	r3, r4, ip
 8019506:	460a      	mov	r2, r1
 8019508:	e7d9      	b.n	80194be <__b2d+0x4a>
 801950a:	bf00      	nop
 801950c:	3ff00000 	.word	0x3ff00000

08019510 <__d2b>:
 8019510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019514:	460e      	mov	r6, r1
 8019516:	2101      	movs	r1, #1
 8019518:	ec59 8b10 	vmov	r8, r9, d0
 801951c:	4615      	mov	r5, r2
 801951e:	f7ff fcb5 	bl	8018e8c <_Balloc>
 8019522:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019526:	4607      	mov	r7, r0
 8019528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801952c:	bb34      	cbnz	r4, 801957c <__d2b+0x6c>
 801952e:	9301      	str	r3, [sp, #4]
 8019530:	f1b8 0300 	subs.w	r3, r8, #0
 8019534:	d027      	beq.n	8019586 <__d2b+0x76>
 8019536:	a802      	add	r0, sp, #8
 8019538:	f840 3d08 	str.w	r3, [r0, #-8]!
 801953c:	f7ff fd89 	bl	8019052 <__lo0bits>
 8019540:	9900      	ldr	r1, [sp, #0]
 8019542:	b1f0      	cbz	r0, 8019582 <__d2b+0x72>
 8019544:	9a01      	ldr	r2, [sp, #4]
 8019546:	f1c0 0320 	rsb	r3, r0, #32
 801954a:	fa02 f303 	lsl.w	r3, r2, r3
 801954e:	430b      	orrs	r3, r1
 8019550:	40c2      	lsrs	r2, r0
 8019552:	617b      	str	r3, [r7, #20]
 8019554:	9201      	str	r2, [sp, #4]
 8019556:	9b01      	ldr	r3, [sp, #4]
 8019558:	61bb      	str	r3, [r7, #24]
 801955a:	2b00      	cmp	r3, #0
 801955c:	bf14      	ite	ne
 801955e:	2102      	movne	r1, #2
 8019560:	2101      	moveq	r1, #1
 8019562:	6139      	str	r1, [r7, #16]
 8019564:	b1c4      	cbz	r4, 8019598 <__d2b+0x88>
 8019566:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801956a:	4404      	add	r4, r0
 801956c:	6034      	str	r4, [r6, #0]
 801956e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019572:	6028      	str	r0, [r5, #0]
 8019574:	4638      	mov	r0, r7
 8019576:	b003      	add	sp, #12
 8019578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801957c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019580:	e7d5      	b.n	801952e <__d2b+0x1e>
 8019582:	6179      	str	r1, [r7, #20]
 8019584:	e7e7      	b.n	8019556 <__d2b+0x46>
 8019586:	a801      	add	r0, sp, #4
 8019588:	f7ff fd63 	bl	8019052 <__lo0bits>
 801958c:	9b01      	ldr	r3, [sp, #4]
 801958e:	617b      	str	r3, [r7, #20]
 8019590:	2101      	movs	r1, #1
 8019592:	6139      	str	r1, [r7, #16]
 8019594:	3020      	adds	r0, #32
 8019596:	e7e5      	b.n	8019564 <__d2b+0x54>
 8019598:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801959c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80195a0:	6030      	str	r0, [r6, #0]
 80195a2:	6918      	ldr	r0, [r3, #16]
 80195a4:	f7ff fd36 	bl	8019014 <__hi0bits>
 80195a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80195ac:	e7e1      	b.n	8019572 <__d2b+0x62>

080195ae <__ratio>:
 80195ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b2:	4688      	mov	r8, r1
 80195b4:	4669      	mov	r1, sp
 80195b6:	4681      	mov	r9, r0
 80195b8:	f7ff ff5c 	bl	8019474 <__b2d>
 80195bc:	a901      	add	r1, sp, #4
 80195be:	4640      	mov	r0, r8
 80195c0:	ec57 6b10 	vmov	r6, r7, d0
 80195c4:	f7ff ff56 	bl	8019474 <__b2d>
 80195c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80195cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80195d0:	eba3 0c02 	sub.w	ip, r3, r2
 80195d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80195d8:	1a9b      	subs	r3, r3, r2
 80195da:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80195de:	ec5b ab10 	vmov	sl, fp, d0
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	bfce      	itee	gt
 80195e6:	463a      	movgt	r2, r7
 80195e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80195ec:	465a      	movle	r2, fp
 80195ee:	4659      	mov	r1, fp
 80195f0:	463d      	mov	r5, r7
 80195f2:	bfd4      	ite	le
 80195f4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80195f8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80195fc:	4630      	mov	r0, r6
 80195fe:	ee10 2a10 	vmov	r2, s0
 8019602:	460b      	mov	r3, r1
 8019604:	4629      	mov	r1, r5
 8019606:	f7e7 f921 	bl	800084c <__aeabi_ddiv>
 801960a:	ec41 0b10 	vmov	d0, r0, r1
 801960e:	b003      	add	sp, #12
 8019610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019614 <__copybits>:
 8019614:	3901      	subs	r1, #1
 8019616:	b510      	push	{r4, lr}
 8019618:	1149      	asrs	r1, r1, #5
 801961a:	6914      	ldr	r4, [r2, #16]
 801961c:	3101      	adds	r1, #1
 801961e:	f102 0314 	add.w	r3, r2, #20
 8019622:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019626:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801962a:	42a3      	cmp	r3, r4
 801962c:	4602      	mov	r2, r0
 801962e:	d303      	bcc.n	8019638 <__copybits+0x24>
 8019630:	2300      	movs	r3, #0
 8019632:	428a      	cmp	r2, r1
 8019634:	d305      	bcc.n	8019642 <__copybits+0x2e>
 8019636:	bd10      	pop	{r4, pc}
 8019638:	f853 2b04 	ldr.w	r2, [r3], #4
 801963c:	f840 2b04 	str.w	r2, [r0], #4
 8019640:	e7f3      	b.n	801962a <__copybits+0x16>
 8019642:	f842 3b04 	str.w	r3, [r2], #4
 8019646:	e7f4      	b.n	8019632 <__copybits+0x1e>

08019648 <__any_on>:
 8019648:	f100 0214 	add.w	r2, r0, #20
 801964c:	6900      	ldr	r0, [r0, #16]
 801964e:	114b      	asrs	r3, r1, #5
 8019650:	4298      	cmp	r0, r3
 8019652:	b510      	push	{r4, lr}
 8019654:	db11      	blt.n	801967a <__any_on+0x32>
 8019656:	dd0a      	ble.n	801966e <__any_on+0x26>
 8019658:	f011 011f 	ands.w	r1, r1, #31
 801965c:	d007      	beq.n	801966e <__any_on+0x26>
 801965e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019662:	fa24 f001 	lsr.w	r0, r4, r1
 8019666:	fa00 f101 	lsl.w	r1, r0, r1
 801966a:	428c      	cmp	r4, r1
 801966c:	d10b      	bne.n	8019686 <__any_on+0x3e>
 801966e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019672:	4293      	cmp	r3, r2
 8019674:	d803      	bhi.n	801967e <__any_on+0x36>
 8019676:	2000      	movs	r0, #0
 8019678:	bd10      	pop	{r4, pc}
 801967a:	4603      	mov	r3, r0
 801967c:	e7f7      	b.n	801966e <__any_on+0x26>
 801967e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019682:	2900      	cmp	r1, #0
 8019684:	d0f5      	beq.n	8019672 <__any_on+0x2a>
 8019686:	2001      	movs	r0, #1
 8019688:	e7f6      	b.n	8019678 <__any_on+0x30>

0801968a <_calloc_r>:
 801968a:	b538      	push	{r3, r4, r5, lr}
 801968c:	fb02 f401 	mul.w	r4, r2, r1
 8019690:	4621      	mov	r1, r4
 8019692:	f7fc fcb5 	bl	8016000 <_malloc_r>
 8019696:	4605      	mov	r5, r0
 8019698:	b118      	cbz	r0, 80196a2 <_calloc_r+0x18>
 801969a:	4622      	mov	r2, r4
 801969c:	2100      	movs	r1, #0
 801969e:	f7fc fc59 	bl	8015f54 <memset>
 80196a2:	4628      	mov	r0, r5
 80196a4:	bd38      	pop	{r3, r4, r5, pc}

080196a6 <__ssputs_r>:
 80196a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196aa:	688e      	ldr	r6, [r1, #8]
 80196ac:	429e      	cmp	r6, r3
 80196ae:	4682      	mov	sl, r0
 80196b0:	460c      	mov	r4, r1
 80196b2:	4690      	mov	r8, r2
 80196b4:	4699      	mov	r9, r3
 80196b6:	d837      	bhi.n	8019728 <__ssputs_r+0x82>
 80196b8:	898a      	ldrh	r2, [r1, #12]
 80196ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80196be:	d031      	beq.n	8019724 <__ssputs_r+0x7e>
 80196c0:	6825      	ldr	r5, [r4, #0]
 80196c2:	6909      	ldr	r1, [r1, #16]
 80196c4:	1a6f      	subs	r7, r5, r1
 80196c6:	6965      	ldr	r5, [r4, #20]
 80196c8:	2302      	movs	r3, #2
 80196ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80196ce:	fb95 f5f3 	sdiv	r5, r5, r3
 80196d2:	f109 0301 	add.w	r3, r9, #1
 80196d6:	443b      	add	r3, r7
 80196d8:	429d      	cmp	r5, r3
 80196da:	bf38      	it	cc
 80196dc:	461d      	movcc	r5, r3
 80196de:	0553      	lsls	r3, r2, #21
 80196e0:	d530      	bpl.n	8019744 <__ssputs_r+0x9e>
 80196e2:	4629      	mov	r1, r5
 80196e4:	f7fc fc8c 	bl	8016000 <_malloc_r>
 80196e8:	4606      	mov	r6, r0
 80196ea:	b950      	cbnz	r0, 8019702 <__ssputs_r+0x5c>
 80196ec:	230c      	movs	r3, #12
 80196ee:	f8ca 3000 	str.w	r3, [sl]
 80196f2:	89a3      	ldrh	r3, [r4, #12]
 80196f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196f8:	81a3      	strh	r3, [r4, #12]
 80196fa:	f04f 30ff 	mov.w	r0, #4294967295
 80196fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019702:	463a      	mov	r2, r7
 8019704:	6921      	ldr	r1, [r4, #16]
 8019706:	f7fc fc01 	bl	8015f0c <memcpy>
 801970a:	89a3      	ldrh	r3, [r4, #12]
 801970c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019714:	81a3      	strh	r3, [r4, #12]
 8019716:	6126      	str	r6, [r4, #16]
 8019718:	6165      	str	r5, [r4, #20]
 801971a:	443e      	add	r6, r7
 801971c:	1bed      	subs	r5, r5, r7
 801971e:	6026      	str	r6, [r4, #0]
 8019720:	60a5      	str	r5, [r4, #8]
 8019722:	464e      	mov	r6, r9
 8019724:	454e      	cmp	r6, r9
 8019726:	d900      	bls.n	801972a <__ssputs_r+0x84>
 8019728:	464e      	mov	r6, r9
 801972a:	4632      	mov	r2, r6
 801972c:	4641      	mov	r1, r8
 801972e:	6820      	ldr	r0, [r4, #0]
 8019730:	f7fc fbf7 	bl	8015f22 <memmove>
 8019734:	68a3      	ldr	r3, [r4, #8]
 8019736:	1b9b      	subs	r3, r3, r6
 8019738:	60a3      	str	r3, [r4, #8]
 801973a:	6823      	ldr	r3, [r4, #0]
 801973c:	441e      	add	r6, r3
 801973e:	6026      	str	r6, [r4, #0]
 8019740:	2000      	movs	r0, #0
 8019742:	e7dc      	b.n	80196fe <__ssputs_r+0x58>
 8019744:	462a      	mov	r2, r5
 8019746:	f000 f920 	bl	801998a <_realloc_r>
 801974a:	4606      	mov	r6, r0
 801974c:	2800      	cmp	r0, #0
 801974e:	d1e2      	bne.n	8019716 <__ssputs_r+0x70>
 8019750:	6921      	ldr	r1, [r4, #16]
 8019752:	4650      	mov	r0, sl
 8019754:	f7fc fc06 	bl	8015f64 <_free_r>
 8019758:	e7c8      	b.n	80196ec <__ssputs_r+0x46>
	...

0801975c <_svfiprintf_r>:
 801975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019760:	461d      	mov	r5, r3
 8019762:	898b      	ldrh	r3, [r1, #12]
 8019764:	061f      	lsls	r7, r3, #24
 8019766:	b09d      	sub	sp, #116	; 0x74
 8019768:	4680      	mov	r8, r0
 801976a:	460c      	mov	r4, r1
 801976c:	4616      	mov	r6, r2
 801976e:	d50f      	bpl.n	8019790 <_svfiprintf_r+0x34>
 8019770:	690b      	ldr	r3, [r1, #16]
 8019772:	b96b      	cbnz	r3, 8019790 <_svfiprintf_r+0x34>
 8019774:	2140      	movs	r1, #64	; 0x40
 8019776:	f7fc fc43 	bl	8016000 <_malloc_r>
 801977a:	6020      	str	r0, [r4, #0]
 801977c:	6120      	str	r0, [r4, #16]
 801977e:	b928      	cbnz	r0, 801978c <_svfiprintf_r+0x30>
 8019780:	230c      	movs	r3, #12
 8019782:	f8c8 3000 	str.w	r3, [r8]
 8019786:	f04f 30ff 	mov.w	r0, #4294967295
 801978a:	e0c8      	b.n	801991e <_svfiprintf_r+0x1c2>
 801978c:	2340      	movs	r3, #64	; 0x40
 801978e:	6163      	str	r3, [r4, #20]
 8019790:	2300      	movs	r3, #0
 8019792:	9309      	str	r3, [sp, #36]	; 0x24
 8019794:	2320      	movs	r3, #32
 8019796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801979a:	2330      	movs	r3, #48	; 0x30
 801979c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80197a0:	9503      	str	r5, [sp, #12]
 80197a2:	f04f 0b01 	mov.w	fp, #1
 80197a6:	4637      	mov	r7, r6
 80197a8:	463d      	mov	r5, r7
 80197aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80197ae:	b10b      	cbz	r3, 80197b4 <_svfiprintf_r+0x58>
 80197b0:	2b25      	cmp	r3, #37	; 0x25
 80197b2:	d13e      	bne.n	8019832 <_svfiprintf_r+0xd6>
 80197b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80197b8:	d00b      	beq.n	80197d2 <_svfiprintf_r+0x76>
 80197ba:	4653      	mov	r3, sl
 80197bc:	4632      	mov	r2, r6
 80197be:	4621      	mov	r1, r4
 80197c0:	4640      	mov	r0, r8
 80197c2:	f7ff ff70 	bl	80196a6 <__ssputs_r>
 80197c6:	3001      	adds	r0, #1
 80197c8:	f000 80a4 	beq.w	8019914 <_svfiprintf_r+0x1b8>
 80197cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197ce:	4453      	add	r3, sl
 80197d0:	9309      	str	r3, [sp, #36]	; 0x24
 80197d2:	783b      	ldrb	r3, [r7, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	f000 809d 	beq.w	8019914 <_svfiprintf_r+0x1b8>
 80197da:	2300      	movs	r3, #0
 80197dc:	f04f 32ff 	mov.w	r2, #4294967295
 80197e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80197e4:	9304      	str	r3, [sp, #16]
 80197e6:	9307      	str	r3, [sp, #28]
 80197e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80197ec:	931a      	str	r3, [sp, #104]	; 0x68
 80197ee:	462f      	mov	r7, r5
 80197f0:	2205      	movs	r2, #5
 80197f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80197f6:	4850      	ldr	r0, [pc, #320]	; (8019938 <_svfiprintf_r+0x1dc>)
 80197f8:	f7e6 fcf2 	bl	80001e0 <memchr>
 80197fc:	9b04      	ldr	r3, [sp, #16]
 80197fe:	b9d0      	cbnz	r0, 8019836 <_svfiprintf_r+0xda>
 8019800:	06d9      	lsls	r1, r3, #27
 8019802:	bf44      	itt	mi
 8019804:	2220      	movmi	r2, #32
 8019806:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801980a:	071a      	lsls	r2, r3, #28
 801980c:	bf44      	itt	mi
 801980e:	222b      	movmi	r2, #43	; 0x2b
 8019810:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019814:	782a      	ldrb	r2, [r5, #0]
 8019816:	2a2a      	cmp	r2, #42	; 0x2a
 8019818:	d015      	beq.n	8019846 <_svfiprintf_r+0xea>
 801981a:	9a07      	ldr	r2, [sp, #28]
 801981c:	462f      	mov	r7, r5
 801981e:	2000      	movs	r0, #0
 8019820:	250a      	movs	r5, #10
 8019822:	4639      	mov	r1, r7
 8019824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019828:	3b30      	subs	r3, #48	; 0x30
 801982a:	2b09      	cmp	r3, #9
 801982c:	d94d      	bls.n	80198ca <_svfiprintf_r+0x16e>
 801982e:	b1b8      	cbz	r0, 8019860 <_svfiprintf_r+0x104>
 8019830:	e00f      	b.n	8019852 <_svfiprintf_r+0xf6>
 8019832:	462f      	mov	r7, r5
 8019834:	e7b8      	b.n	80197a8 <_svfiprintf_r+0x4c>
 8019836:	4a40      	ldr	r2, [pc, #256]	; (8019938 <_svfiprintf_r+0x1dc>)
 8019838:	1a80      	subs	r0, r0, r2
 801983a:	fa0b f000 	lsl.w	r0, fp, r0
 801983e:	4318      	orrs	r0, r3
 8019840:	9004      	str	r0, [sp, #16]
 8019842:	463d      	mov	r5, r7
 8019844:	e7d3      	b.n	80197ee <_svfiprintf_r+0x92>
 8019846:	9a03      	ldr	r2, [sp, #12]
 8019848:	1d11      	adds	r1, r2, #4
 801984a:	6812      	ldr	r2, [r2, #0]
 801984c:	9103      	str	r1, [sp, #12]
 801984e:	2a00      	cmp	r2, #0
 8019850:	db01      	blt.n	8019856 <_svfiprintf_r+0xfa>
 8019852:	9207      	str	r2, [sp, #28]
 8019854:	e004      	b.n	8019860 <_svfiprintf_r+0x104>
 8019856:	4252      	negs	r2, r2
 8019858:	f043 0302 	orr.w	r3, r3, #2
 801985c:	9207      	str	r2, [sp, #28]
 801985e:	9304      	str	r3, [sp, #16]
 8019860:	783b      	ldrb	r3, [r7, #0]
 8019862:	2b2e      	cmp	r3, #46	; 0x2e
 8019864:	d10c      	bne.n	8019880 <_svfiprintf_r+0x124>
 8019866:	787b      	ldrb	r3, [r7, #1]
 8019868:	2b2a      	cmp	r3, #42	; 0x2a
 801986a:	d133      	bne.n	80198d4 <_svfiprintf_r+0x178>
 801986c:	9b03      	ldr	r3, [sp, #12]
 801986e:	1d1a      	adds	r2, r3, #4
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	9203      	str	r2, [sp, #12]
 8019874:	2b00      	cmp	r3, #0
 8019876:	bfb8      	it	lt
 8019878:	f04f 33ff 	movlt.w	r3, #4294967295
 801987c:	3702      	adds	r7, #2
 801987e:	9305      	str	r3, [sp, #20]
 8019880:	4d2e      	ldr	r5, [pc, #184]	; (801993c <_svfiprintf_r+0x1e0>)
 8019882:	7839      	ldrb	r1, [r7, #0]
 8019884:	2203      	movs	r2, #3
 8019886:	4628      	mov	r0, r5
 8019888:	f7e6 fcaa 	bl	80001e0 <memchr>
 801988c:	b138      	cbz	r0, 801989e <_svfiprintf_r+0x142>
 801988e:	2340      	movs	r3, #64	; 0x40
 8019890:	1b40      	subs	r0, r0, r5
 8019892:	fa03 f000 	lsl.w	r0, r3, r0
 8019896:	9b04      	ldr	r3, [sp, #16]
 8019898:	4303      	orrs	r3, r0
 801989a:	3701      	adds	r7, #1
 801989c:	9304      	str	r3, [sp, #16]
 801989e:	7839      	ldrb	r1, [r7, #0]
 80198a0:	4827      	ldr	r0, [pc, #156]	; (8019940 <_svfiprintf_r+0x1e4>)
 80198a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80198a6:	2206      	movs	r2, #6
 80198a8:	1c7e      	adds	r6, r7, #1
 80198aa:	f7e6 fc99 	bl	80001e0 <memchr>
 80198ae:	2800      	cmp	r0, #0
 80198b0:	d038      	beq.n	8019924 <_svfiprintf_r+0x1c8>
 80198b2:	4b24      	ldr	r3, [pc, #144]	; (8019944 <_svfiprintf_r+0x1e8>)
 80198b4:	bb13      	cbnz	r3, 80198fc <_svfiprintf_r+0x1a0>
 80198b6:	9b03      	ldr	r3, [sp, #12]
 80198b8:	3307      	adds	r3, #7
 80198ba:	f023 0307 	bic.w	r3, r3, #7
 80198be:	3308      	adds	r3, #8
 80198c0:	9303      	str	r3, [sp, #12]
 80198c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c4:	444b      	add	r3, r9
 80198c6:	9309      	str	r3, [sp, #36]	; 0x24
 80198c8:	e76d      	b.n	80197a6 <_svfiprintf_r+0x4a>
 80198ca:	fb05 3202 	mla	r2, r5, r2, r3
 80198ce:	2001      	movs	r0, #1
 80198d0:	460f      	mov	r7, r1
 80198d2:	e7a6      	b.n	8019822 <_svfiprintf_r+0xc6>
 80198d4:	2300      	movs	r3, #0
 80198d6:	3701      	adds	r7, #1
 80198d8:	9305      	str	r3, [sp, #20]
 80198da:	4619      	mov	r1, r3
 80198dc:	250a      	movs	r5, #10
 80198de:	4638      	mov	r0, r7
 80198e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80198e4:	3a30      	subs	r2, #48	; 0x30
 80198e6:	2a09      	cmp	r2, #9
 80198e8:	d903      	bls.n	80198f2 <_svfiprintf_r+0x196>
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d0c8      	beq.n	8019880 <_svfiprintf_r+0x124>
 80198ee:	9105      	str	r1, [sp, #20]
 80198f0:	e7c6      	b.n	8019880 <_svfiprintf_r+0x124>
 80198f2:	fb05 2101 	mla	r1, r5, r1, r2
 80198f6:	2301      	movs	r3, #1
 80198f8:	4607      	mov	r7, r0
 80198fa:	e7f0      	b.n	80198de <_svfiprintf_r+0x182>
 80198fc:	ab03      	add	r3, sp, #12
 80198fe:	9300      	str	r3, [sp, #0]
 8019900:	4622      	mov	r2, r4
 8019902:	4b11      	ldr	r3, [pc, #68]	; (8019948 <_svfiprintf_r+0x1ec>)
 8019904:	a904      	add	r1, sp, #16
 8019906:	4640      	mov	r0, r8
 8019908:	f7fc fc68 	bl	80161dc <_printf_float>
 801990c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019910:	4681      	mov	r9, r0
 8019912:	d1d6      	bne.n	80198c2 <_svfiprintf_r+0x166>
 8019914:	89a3      	ldrh	r3, [r4, #12]
 8019916:	065b      	lsls	r3, r3, #25
 8019918:	f53f af35 	bmi.w	8019786 <_svfiprintf_r+0x2a>
 801991c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801991e:	b01d      	add	sp, #116	; 0x74
 8019920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019924:	ab03      	add	r3, sp, #12
 8019926:	9300      	str	r3, [sp, #0]
 8019928:	4622      	mov	r2, r4
 801992a:	4b07      	ldr	r3, [pc, #28]	; (8019948 <_svfiprintf_r+0x1ec>)
 801992c:	a904      	add	r1, sp, #16
 801992e:	4640      	mov	r0, r8
 8019930:	f7fc ff0a 	bl	8016748 <_printf_i>
 8019934:	e7ea      	b.n	801990c <_svfiprintf_r+0x1b0>
 8019936:	bf00      	nop
 8019938:	0801b86c 	.word	0x0801b86c
 801993c:	0801b872 	.word	0x0801b872
 8019940:	0801b876 	.word	0x0801b876
 8019944:	080161dd 	.word	0x080161dd
 8019948:	080196a7 	.word	0x080196a7

0801994c <strncmp>:
 801994c:	b510      	push	{r4, lr}
 801994e:	b16a      	cbz	r2, 801996c <strncmp+0x20>
 8019950:	3901      	subs	r1, #1
 8019952:	1884      	adds	r4, r0, r2
 8019954:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019958:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801995c:	4293      	cmp	r3, r2
 801995e:	d103      	bne.n	8019968 <strncmp+0x1c>
 8019960:	42a0      	cmp	r0, r4
 8019962:	d001      	beq.n	8019968 <strncmp+0x1c>
 8019964:	2b00      	cmp	r3, #0
 8019966:	d1f5      	bne.n	8019954 <strncmp+0x8>
 8019968:	1a98      	subs	r0, r3, r2
 801996a:	bd10      	pop	{r4, pc}
 801996c:	4610      	mov	r0, r2
 801996e:	e7fc      	b.n	801996a <strncmp+0x1e>

08019970 <__ascii_wctomb>:
 8019970:	b149      	cbz	r1, 8019986 <__ascii_wctomb+0x16>
 8019972:	2aff      	cmp	r2, #255	; 0xff
 8019974:	bf85      	ittet	hi
 8019976:	238a      	movhi	r3, #138	; 0x8a
 8019978:	6003      	strhi	r3, [r0, #0]
 801997a:	700a      	strbls	r2, [r1, #0]
 801997c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019980:	bf98      	it	ls
 8019982:	2001      	movls	r0, #1
 8019984:	4770      	bx	lr
 8019986:	4608      	mov	r0, r1
 8019988:	4770      	bx	lr

0801998a <_realloc_r>:
 801998a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801998c:	4607      	mov	r7, r0
 801998e:	4614      	mov	r4, r2
 8019990:	460e      	mov	r6, r1
 8019992:	b921      	cbnz	r1, 801999e <_realloc_r+0x14>
 8019994:	4611      	mov	r1, r2
 8019996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801999a:	f7fc bb31 	b.w	8016000 <_malloc_r>
 801999e:	b922      	cbnz	r2, 80199aa <_realloc_r+0x20>
 80199a0:	f7fc fae0 	bl	8015f64 <_free_r>
 80199a4:	4625      	mov	r5, r4
 80199a6:	4628      	mov	r0, r5
 80199a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199aa:	f000 f814 	bl	80199d6 <_malloc_usable_size_r>
 80199ae:	42a0      	cmp	r0, r4
 80199b0:	d20f      	bcs.n	80199d2 <_realloc_r+0x48>
 80199b2:	4621      	mov	r1, r4
 80199b4:	4638      	mov	r0, r7
 80199b6:	f7fc fb23 	bl	8016000 <_malloc_r>
 80199ba:	4605      	mov	r5, r0
 80199bc:	2800      	cmp	r0, #0
 80199be:	d0f2      	beq.n	80199a6 <_realloc_r+0x1c>
 80199c0:	4631      	mov	r1, r6
 80199c2:	4622      	mov	r2, r4
 80199c4:	f7fc faa2 	bl	8015f0c <memcpy>
 80199c8:	4631      	mov	r1, r6
 80199ca:	4638      	mov	r0, r7
 80199cc:	f7fc faca 	bl	8015f64 <_free_r>
 80199d0:	e7e9      	b.n	80199a6 <_realloc_r+0x1c>
 80199d2:	4635      	mov	r5, r6
 80199d4:	e7e7      	b.n	80199a6 <_realloc_r+0x1c>

080199d6 <_malloc_usable_size_r>:
 80199d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199da:	1f18      	subs	r0, r3, #4
 80199dc:	2b00      	cmp	r3, #0
 80199de:	bfbc      	itt	lt
 80199e0:	580b      	ldrlt	r3, [r1, r0]
 80199e2:	18c0      	addlt	r0, r0, r3
 80199e4:	4770      	bx	lr
	...

080199e8 <ceil>:
 80199e8:	ec51 0b10 	vmov	r0, r1, d0
 80199ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80199f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80199f8:	2e13      	cmp	r6, #19
 80199fa:	460c      	mov	r4, r1
 80199fc:	ee10 5a10 	vmov	r5, s0
 8019a00:	4680      	mov	r8, r0
 8019a02:	dc30      	bgt.n	8019a66 <ceil+0x7e>
 8019a04:	2e00      	cmp	r6, #0
 8019a06:	da12      	bge.n	8019a2e <ceil+0x46>
 8019a08:	a333      	add	r3, pc, #204	; (adr r3, 8019ad8 <ceil+0xf0>)
 8019a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a0e:	f7e6 fc3d 	bl	800028c <__adddf3>
 8019a12:	2200      	movs	r2, #0
 8019a14:	2300      	movs	r3, #0
 8019a16:	f7e7 f87f 	bl	8000b18 <__aeabi_dcmpgt>
 8019a1a:	b128      	cbz	r0, 8019a28 <ceil+0x40>
 8019a1c:	2c00      	cmp	r4, #0
 8019a1e:	db55      	blt.n	8019acc <ceil+0xe4>
 8019a20:	432c      	orrs	r4, r5
 8019a22:	d057      	beq.n	8019ad4 <ceil+0xec>
 8019a24:	4c2e      	ldr	r4, [pc, #184]	; (8019ae0 <ceil+0xf8>)
 8019a26:	2500      	movs	r5, #0
 8019a28:	4621      	mov	r1, r4
 8019a2a:	4628      	mov	r0, r5
 8019a2c:	e025      	b.n	8019a7a <ceil+0x92>
 8019a2e:	4f2d      	ldr	r7, [pc, #180]	; (8019ae4 <ceil+0xfc>)
 8019a30:	4137      	asrs	r7, r6
 8019a32:	ea01 0307 	and.w	r3, r1, r7
 8019a36:	4303      	orrs	r3, r0
 8019a38:	d01f      	beq.n	8019a7a <ceil+0x92>
 8019a3a:	a327      	add	r3, pc, #156	; (adr r3, 8019ad8 <ceil+0xf0>)
 8019a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a40:	f7e6 fc24 	bl	800028c <__adddf3>
 8019a44:	2200      	movs	r2, #0
 8019a46:	2300      	movs	r3, #0
 8019a48:	f7e7 f866 	bl	8000b18 <__aeabi_dcmpgt>
 8019a4c:	2800      	cmp	r0, #0
 8019a4e:	d0eb      	beq.n	8019a28 <ceil+0x40>
 8019a50:	2c00      	cmp	r4, #0
 8019a52:	bfc2      	ittt	gt
 8019a54:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019a58:	fa43 f606 	asrgt.w	r6, r3, r6
 8019a5c:	19a4      	addgt	r4, r4, r6
 8019a5e:	ea24 0407 	bic.w	r4, r4, r7
 8019a62:	2500      	movs	r5, #0
 8019a64:	e7e0      	b.n	8019a28 <ceil+0x40>
 8019a66:	2e33      	cmp	r6, #51	; 0x33
 8019a68:	dd0b      	ble.n	8019a82 <ceil+0x9a>
 8019a6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019a6e:	d104      	bne.n	8019a7a <ceil+0x92>
 8019a70:	ee10 2a10 	vmov	r2, s0
 8019a74:	460b      	mov	r3, r1
 8019a76:	f7e6 fc09 	bl	800028c <__adddf3>
 8019a7a:	ec41 0b10 	vmov	d0, r0, r1
 8019a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a82:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019a86:	f04f 33ff 	mov.w	r3, #4294967295
 8019a8a:	fa23 f707 	lsr.w	r7, r3, r7
 8019a8e:	4207      	tst	r7, r0
 8019a90:	d0f3      	beq.n	8019a7a <ceil+0x92>
 8019a92:	a311      	add	r3, pc, #68	; (adr r3, 8019ad8 <ceil+0xf0>)
 8019a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a98:	f7e6 fbf8 	bl	800028c <__adddf3>
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	f7e7 f83a 	bl	8000b18 <__aeabi_dcmpgt>
 8019aa4:	2800      	cmp	r0, #0
 8019aa6:	d0bf      	beq.n	8019a28 <ceil+0x40>
 8019aa8:	2c00      	cmp	r4, #0
 8019aaa:	dd02      	ble.n	8019ab2 <ceil+0xca>
 8019aac:	2e14      	cmp	r6, #20
 8019aae:	d103      	bne.n	8019ab8 <ceil+0xd0>
 8019ab0:	3401      	adds	r4, #1
 8019ab2:	ea25 0507 	bic.w	r5, r5, r7
 8019ab6:	e7b7      	b.n	8019a28 <ceil+0x40>
 8019ab8:	2301      	movs	r3, #1
 8019aba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019abe:	fa03 f606 	lsl.w	r6, r3, r6
 8019ac2:	4435      	add	r5, r6
 8019ac4:	4545      	cmp	r5, r8
 8019ac6:	bf38      	it	cc
 8019ac8:	18e4      	addcc	r4, r4, r3
 8019aca:	e7f2      	b.n	8019ab2 <ceil+0xca>
 8019acc:	2500      	movs	r5, #0
 8019ace:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019ad2:	e7a9      	b.n	8019a28 <ceil+0x40>
 8019ad4:	4625      	mov	r5, r4
 8019ad6:	e7a7      	b.n	8019a28 <ceil+0x40>
 8019ad8:	8800759c 	.word	0x8800759c
 8019adc:	7e37e43c 	.word	0x7e37e43c
 8019ae0:	3ff00000 	.word	0x3ff00000
 8019ae4:	000fffff 	.word	0x000fffff

08019ae8 <cos>:
 8019ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019aea:	ec51 0b10 	vmov	r0, r1, d0
 8019aee:	4a1e      	ldr	r2, [pc, #120]	; (8019b68 <cos+0x80>)
 8019af0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019af4:	4293      	cmp	r3, r2
 8019af6:	dc06      	bgt.n	8019b06 <cos+0x1e>
 8019af8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019b60 <cos+0x78>
 8019afc:	f000 fcec 	bl	801a4d8 <__kernel_cos>
 8019b00:	ec51 0b10 	vmov	r0, r1, d0
 8019b04:	e007      	b.n	8019b16 <cos+0x2e>
 8019b06:	4a19      	ldr	r2, [pc, #100]	; (8019b6c <cos+0x84>)
 8019b08:	4293      	cmp	r3, r2
 8019b0a:	dd09      	ble.n	8019b20 <cos+0x38>
 8019b0c:	ee10 2a10 	vmov	r2, s0
 8019b10:	460b      	mov	r3, r1
 8019b12:	f7e6 fbb9 	bl	8000288 <__aeabi_dsub>
 8019b16:	ec41 0b10 	vmov	d0, r0, r1
 8019b1a:	b005      	add	sp, #20
 8019b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b20:	4668      	mov	r0, sp
 8019b22:	f000 fa35 	bl	8019f90 <__ieee754_rem_pio2>
 8019b26:	f000 0003 	and.w	r0, r0, #3
 8019b2a:	2801      	cmp	r0, #1
 8019b2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b30:	ed9d 0b00 	vldr	d0, [sp]
 8019b34:	d007      	beq.n	8019b46 <cos+0x5e>
 8019b36:	2802      	cmp	r0, #2
 8019b38:	d00e      	beq.n	8019b58 <cos+0x70>
 8019b3a:	2800      	cmp	r0, #0
 8019b3c:	d0de      	beq.n	8019afc <cos+0x14>
 8019b3e:	2001      	movs	r0, #1
 8019b40:	f001 f8d2 	bl	801ace8 <__kernel_sin>
 8019b44:	e7dc      	b.n	8019b00 <cos+0x18>
 8019b46:	f001 f8cf 	bl	801ace8 <__kernel_sin>
 8019b4a:	ec53 2b10 	vmov	r2, r3, d0
 8019b4e:	ee10 0a10 	vmov	r0, s0
 8019b52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019b56:	e7de      	b.n	8019b16 <cos+0x2e>
 8019b58:	f000 fcbe 	bl	801a4d8 <__kernel_cos>
 8019b5c:	e7f5      	b.n	8019b4a <cos+0x62>
 8019b5e:	bf00      	nop
	...
 8019b68:	3fe921fb 	.word	0x3fe921fb
 8019b6c:	7fefffff 	.word	0x7fefffff

08019b70 <round>:
 8019b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b72:	ec57 6b10 	vmov	r6, r7, d0
 8019b76:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8019b7a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8019b7e:	2c13      	cmp	r4, #19
 8019b80:	463b      	mov	r3, r7
 8019b82:	463d      	mov	r5, r7
 8019b84:	dc17      	bgt.n	8019bb6 <round+0x46>
 8019b86:	2c00      	cmp	r4, #0
 8019b88:	da09      	bge.n	8019b9e <round+0x2e>
 8019b8a:	3401      	adds	r4, #1
 8019b8c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019b90:	d103      	bne.n	8019b9a <round+0x2a>
 8019b92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019b96:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	e02c      	b.n	8019bf8 <round+0x88>
 8019b9e:	4a18      	ldr	r2, [pc, #96]	; (8019c00 <round+0x90>)
 8019ba0:	4122      	asrs	r2, r4
 8019ba2:	4217      	tst	r7, r2
 8019ba4:	d100      	bne.n	8019ba8 <round+0x38>
 8019ba6:	b19e      	cbz	r6, 8019bd0 <round+0x60>
 8019ba8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019bac:	4123      	asrs	r3, r4
 8019bae:	442b      	add	r3, r5
 8019bb0:	ea23 0302 	bic.w	r3, r3, r2
 8019bb4:	e7f1      	b.n	8019b9a <round+0x2a>
 8019bb6:	2c33      	cmp	r4, #51	; 0x33
 8019bb8:	dd0d      	ble.n	8019bd6 <round+0x66>
 8019bba:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019bbe:	d107      	bne.n	8019bd0 <round+0x60>
 8019bc0:	4630      	mov	r0, r6
 8019bc2:	4639      	mov	r1, r7
 8019bc4:	ee10 2a10 	vmov	r2, s0
 8019bc8:	f7e6 fb60 	bl	800028c <__adddf3>
 8019bcc:	4606      	mov	r6, r0
 8019bce:	460f      	mov	r7, r1
 8019bd0:	ec47 6b10 	vmov	d0, r6, r7
 8019bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8019bda:	f04f 30ff 	mov.w	r0, #4294967295
 8019bde:	40d0      	lsrs	r0, r2
 8019be0:	4206      	tst	r6, r0
 8019be2:	d0f5      	beq.n	8019bd0 <round+0x60>
 8019be4:	2201      	movs	r2, #1
 8019be6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019bea:	fa02 f404 	lsl.w	r4, r2, r4
 8019bee:	1931      	adds	r1, r6, r4
 8019bf0:	bf28      	it	cs
 8019bf2:	189b      	addcs	r3, r3, r2
 8019bf4:	ea21 0100 	bic.w	r1, r1, r0
 8019bf8:	461f      	mov	r7, r3
 8019bfa:	460e      	mov	r6, r1
 8019bfc:	e7e8      	b.n	8019bd0 <round+0x60>
 8019bfe:	bf00      	nop
 8019c00:	000fffff 	.word	0x000fffff
 8019c04:	00000000 	.word	0x00000000

08019c08 <sin>:
 8019c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c0a:	ec51 0b10 	vmov	r0, r1, d0
 8019c0e:	4a20      	ldr	r2, [pc, #128]	; (8019c90 <sin+0x88>)
 8019c10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019c14:	4293      	cmp	r3, r2
 8019c16:	dc07      	bgt.n	8019c28 <sin+0x20>
 8019c18:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019c88 <sin+0x80>
 8019c1c:	2000      	movs	r0, #0
 8019c1e:	f001 f863 	bl	801ace8 <__kernel_sin>
 8019c22:	ec51 0b10 	vmov	r0, r1, d0
 8019c26:	e007      	b.n	8019c38 <sin+0x30>
 8019c28:	4a1a      	ldr	r2, [pc, #104]	; (8019c94 <sin+0x8c>)
 8019c2a:	4293      	cmp	r3, r2
 8019c2c:	dd09      	ble.n	8019c42 <sin+0x3a>
 8019c2e:	ee10 2a10 	vmov	r2, s0
 8019c32:	460b      	mov	r3, r1
 8019c34:	f7e6 fb28 	bl	8000288 <__aeabi_dsub>
 8019c38:	ec41 0b10 	vmov	d0, r0, r1
 8019c3c:	b005      	add	sp, #20
 8019c3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c42:	4668      	mov	r0, sp
 8019c44:	f000 f9a4 	bl	8019f90 <__ieee754_rem_pio2>
 8019c48:	f000 0003 	and.w	r0, r0, #3
 8019c4c:	2801      	cmp	r0, #1
 8019c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019c52:	ed9d 0b00 	vldr	d0, [sp]
 8019c56:	d004      	beq.n	8019c62 <sin+0x5a>
 8019c58:	2802      	cmp	r0, #2
 8019c5a:	d005      	beq.n	8019c68 <sin+0x60>
 8019c5c:	b970      	cbnz	r0, 8019c7c <sin+0x74>
 8019c5e:	2001      	movs	r0, #1
 8019c60:	e7dd      	b.n	8019c1e <sin+0x16>
 8019c62:	f000 fc39 	bl	801a4d8 <__kernel_cos>
 8019c66:	e7dc      	b.n	8019c22 <sin+0x1a>
 8019c68:	2001      	movs	r0, #1
 8019c6a:	f001 f83d 	bl	801ace8 <__kernel_sin>
 8019c6e:	ec53 2b10 	vmov	r2, r3, d0
 8019c72:	ee10 0a10 	vmov	r0, s0
 8019c76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019c7a:	e7dd      	b.n	8019c38 <sin+0x30>
 8019c7c:	f000 fc2c 	bl	801a4d8 <__kernel_cos>
 8019c80:	e7f5      	b.n	8019c6e <sin+0x66>
 8019c82:	bf00      	nop
 8019c84:	f3af 8000 	nop.w
	...
 8019c90:	3fe921fb 	.word	0x3fe921fb
 8019c94:	7fefffff 	.word	0x7fefffff

08019c98 <ceilf>:
 8019c98:	ee10 3a10 	vmov	r3, s0
 8019c9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019ca0:	0dca      	lsrs	r2, r1, #23
 8019ca2:	3a7f      	subs	r2, #127	; 0x7f
 8019ca4:	2a16      	cmp	r2, #22
 8019ca6:	dc2a      	bgt.n	8019cfe <ceilf+0x66>
 8019ca8:	2a00      	cmp	r2, #0
 8019caa:	da11      	bge.n	8019cd0 <ceilf+0x38>
 8019cac:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019d10 <ceilf+0x78>
 8019cb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019cb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cbc:	dd05      	ble.n	8019cca <ceilf+0x32>
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	db23      	blt.n	8019d0a <ceilf+0x72>
 8019cc2:	2900      	cmp	r1, #0
 8019cc4:	bf18      	it	ne
 8019cc6:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019cca:	ee00 3a10 	vmov	s0, r3
 8019cce:	4770      	bx	lr
 8019cd0:	4910      	ldr	r1, [pc, #64]	; (8019d14 <ceilf+0x7c>)
 8019cd2:	4111      	asrs	r1, r2
 8019cd4:	420b      	tst	r3, r1
 8019cd6:	d0fa      	beq.n	8019cce <ceilf+0x36>
 8019cd8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019d10 <ceilf+0x78>
 8019cdc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019ce0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ce8:	ddef      	ble.n	8019cca <ceilf+0x32>
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	bfc2      	ittt	gt
 8019cee:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019cf2:	fa40 f202 	asrgt.w	r2, r0, r2
 8019cf6:	189b      	addgt	r3, r3, r2
 8019cf8:	ea23 0301 	bic.w	r3, r3, r1
 8019cfc:	e7e5      	b.n	8019cca <ceilf+0x32>
 8019cfe:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019d02:	d3e4      	bcc.n	8019cce <ceilf+0x36>
 8019d04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019d08:	4770      	bx	lr
 8019d0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019d0e:	e7dc      	b.n	8019cca <ceilf+0x32>
 8019d10:	7149f2ca 	.word	0x7149f2ca
 8019d14:	007fffff 	.word	0x007fffff

08019d18 <atan2>:
 8019d18:	f000 b85a 	b.w	8019dd0 <__ieee754_atan2>

08019d1c <sqrt>:
 8019d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d20:	ed2d 8b02 	vpush	{d8}
 8019d24:	b08b      	sub	sp, #44	; 0x2c
 8019d26:	ec55 4b10 	vmov	r4, r5, d0
 8019d2a:	f000 fb23 	bl	801a374 <__ieee754_sqrt>
 8019d2e:	4b26      	ldr	r3, [pc, #152]	; (8019dc8 <sqrt+0xac>)
 8019d30:	eeb0 8a40 	vmov.f32	s16, s0
 8019d34:	eef0 8a60 	vmov.f32	s17, s1
 8019d38:	f993 6000 	ldrsb.w	r6, [r3]
 8019d3c:	1c73      	adds	r3, r6, #1
 8019d3e:	d02a      	beq.n	8019d96 <sqrt+0x7a>
 8019d40:	4622      	mov	r2, r4
 8019d42:	462b      	mov	r3, r5
 8019d44:	4620      	mov	r0, r4
 8019d46:	4629      	mov	r1, r5
 8019d48:	f7e6 fef0 	bl	8000b2c <__aeabi_dcmpun>
 8019d4c:	4607      	mov	r7, r0
 8019d4e:	bb10      	cbnz	r0, 8019d96 <sqrt+0x7a>
 8019d50:	f04f 0800 	mov.w	r8, #0
 8019d54:	f04f 0900 	mov.w	r9, #0
 8019d58:	4642      	mov	r2, r8
 8019d5a:	464b      	mov	r3, r9
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	4629      	mov	r1, r5
 8019d60:	f7e6 febc 	bl	8000adc <__aeabi_dcmplt>
 8019d64:	b1b8      	cbz	r0, 8019d96 <sqrt+0x7a>
 8019d66:	2301      	movs	r3, #1
 8019d68:	9300      	str	r3, [sp, #0]
 8019d6a:	4b18      	ldr	r3, [pc, #96]	; (8019dcc <sqrt+0xb0>)
 8019d6c:	9301      	str	r3, [sp, #4]
 8019d6e:	9708      	str	r7, [sp, #32]
 8019d70:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019d74:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019d78:	b9b6      	cbnz	r6, 8019da8 <sqrt+0x8c>
 8019d7a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8019d7e:	4668      	mov	r0, sp
 8019d80:	f001 fa9e 	bl	801b2c0 <matherr>
 8019d84:	b1d0      	cbz	r0, 8019dbc <sqrt+0xa0>
 8019d86:	9b08      	ldr	r3, [sp, #32]
 8019d88:	b11b      	cbz	r3, 8019d92 <sqrt+0x76>
 8019d8a:	f7fc f885 	bl	8015e98 <__errno>
 8019d8e:	9b08      	ldr	r3, [sp, #32]
 8019d90:	6003      	str	r3, [r0, #0]
 8019d92:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019d96:	eeb0 0a48 	vmov.f32	s0, s16
 8019d9a:	eef0 0a68 	vmov.f32	s1, s17
 8019d9e:	b00b      	add	sp, #44	; 0x2c
 8019da0:	ecbd 8b02 	vpop	{d8}
 8019da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019da8:	4642      	mov	r2, r8
 8019daa:	464b      	mov	r3, r9
 8019dac:	4640      	mov	r0, r8
 8019dae:	4649      	mov	r1, r9
 8019db0:	f7e6 fd4c 	bl	800084c <__aeabi_ddiv>
 8019db4:	2e02      	cmp	r6, #2
 8019db6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019dba:	d1e0      	bne.n	8019d7e <sqrt+0x62>
 8019dbc:	f7fc f86c 	bl	8015e98 <__errno>
 8019dc0:	2321      	movs	r3, #33	; 0x21
 8019dc2:	6003      	str	r3, [r0, #0]
 8019dc4:	e7df      	b.n	8019d86 <sqrt+0x6a>
 8019dc6:	bf00      	nop
 8019dc8:	20000bdc 	.word	0x20000bdc
 8019dcc:	0801b97e 	.word	0x0801b97e

08019dd0 <__ieee754_atan2>:
 8019dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019dd4:	ec57 6b11 	vmov	r6, r7, d1
 8019dd8:	4273      	negs	r3, r6
 8019dda:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019dde:	4333      	orrs	r3, r6
 8019de0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019f88 <__ieee754_atan2+0x1b8>
 8019de4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019de8:	4573      	cmp	r3, lr
 8019dea:	ec51 0b10 	vmov	r0, r1, d0
 8019dee:	ee11 8a10 	vmov	r8, s2
 8019df2:	d80a      	bhi.n	8019e0a <__ieee754_atan2+0x3a>
 8019df4:	4244      	negs	r4, r0
 8019df6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019dfa:	4304      	orrs	r4, r0
 8019dfc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019e00:	4574      	cmp	r4, lr
 8019e02:	468c      	mov	ip, r1
 8019e04:	ee10 9a10 	vmov	r9, s0
 8019e08:	d907      	bls.n	8019e1a <__ieee754_atan2+0x4a>
 8019e0a:	4632      	mov	r2, r6
 8019e0c:	463b      	mov	r3, r7
 8019e0e:	f7e6 fa3d 	bl	800028c <__adddf3>
 8019e12:	ec41 0b10 	vmov	d0, r0, r1
 8019e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019e1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019e22:	4334      	orrs	r4, r6
 8019e24:	d103      	bne.n	8019e2e <__ieee754_atan2+0x5e>
 8019e26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e2a:	f001 b819 	b.w	801ae60 <atan>
 8019e2e:	17bc      	asrs	r4, r7, #30
 8019e30:	f004 0402 	and.w	r4, r4, #2
 8019e34:	ea53 0909 	orrs.w	r9, r3, r9
 8019e38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019e3c:	d107      	bne.n	8019e4e <__ieee754_atan2+0x7e>
 8019e3e:	2c02      	cmp	r4, #2
 8019e40:	d073      	beq.n	8019f2a <__ieee754_atan2+0x15a>
 8019e42:	2c03      	cmp	r4, #3
 8019e44:	d1e5      	bne.n	8019e12 <__ieee754_atan2+0x42>
 8019e46:	a13e      	add	r1, pc, #248	; (adr r1, 8019f40 <__ieee754_atan2+0x170>)
 8019e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e4c:	e7e1      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019e4e:	ea52 0808 	orrs.w	r8, r2, r8
 8019e52:	d106      	bne.n	8019e62 <__ieee754_atan2+0x92>
 8019e54:	f1bc 0f00 	cmp.w	ip, #0
 8019e58:	da6b      	bge.n	8019f32 <__ieee754_atan2+0x162>
 8019e5a:	a13b      	add	r1, pc, #236	; (adr r1, 8019f48 <__ieee754_atan2+0x178>)
 8019e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e60:	e7d7      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019e62:	4572      	cmp	r2, lr
 8019e64:	d120      	bne.n	8019ea8 <__ieee754_atan2+0xd8>
 8019e66:	4293      	cmp	r3, r2
 8019e68:	d111      	bne.n	8019e8e <__ieee754_atan2+0xbe>
 8019e6a:	2c02      	cmp	r4, #2
 8019e6c:	d007      	beq.n	8019e7e <__ieee754_atan2+0xae>
 8019e6e:	2c03      	cmp	r4, #3
 8019e70:	d009      	beq.n	8019e86 <__ieee754_atan2+0xb6>
 8019e72:	2c01      	cmp	r4, #1
 8019e74:	d155      	bne.n	8019f22 <__ieee754_atan2+0x152>
 8019e76:	a136      	add	r1, pc, #216	; (adr r1, 8019f50 <__ieee754_atan2+0x180>)
 8019e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e7c:	e7c9      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019e7e:	a136      	add	r1, pc, #216	; (adr r1, 8019f58 <__ieee754_atan2+0x188>)
 8019e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e84:	e7c5      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019e86:	a136      	add	r1, pc, #216	; (adr r1, 8019f60 <__ieee754_atan2+0x190>)
 8019e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e8c:	e7c1      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019e8e:	2c02      	cmp	r4, #2
 8019e90:	d04b      	beq.n	8019f2a <__ieee754_atan2+0x15a>
 8019e92:	2c03      	cmp	r4, #3
 8019e94:	d0d7      	beq.n	8019e46 <__ieee754_atan2+0x76>
 8019e96:	2c01      	cmp	r4, #1
 8019e98:	f04f 0000 	mov.w	r0, #0
 8019e9c:	d102      	bne.n	8019ea4 <__ieee754_atan2+0xd4>
 8019e9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019ea2:	e7b6      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019ea4:	2100      	movs	r1, #0
 8019ea6:	e7b4      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019ea8:	4573      	cmp	r3, lr
 8019eaa:	d0d3      	beq.n	8019e54 <__ieee754_atan2+0x84>
 8019eac:	1a9b      	subs	r3, r3, r2
 8019eae:	151b      	asrs	r3, r3, #20
 8019eb0:	2b3c      	cmp	r3, #60	; 0x3c
 8019eb2:	dc1e      	bgt.n	8019ef2 <__ieee754_atan2+0x122>
 8019eb4:	2f00      	cmp	r7, #0
 8019eb6:	da01      	bge.n	8019ebc <__ieee754_atan2+0xec>
 8019eb8:	333c      	adds	r3, #60	; 0x3c
 8019eba:	db1e      	blt.n	8019efa <__ieee754_atan2+0x12a>
 8019ebc:	4632      	mov	r2, r6
 8019ebe:	463b      	mov	r3, r7
 8019ec0:	f7e6 fcc4 	bl	800084c <__aeabi_ddiv>
 8019ec4:	ec41 0b10 	vmov	d0, r0, r1
 8019ec8:	f001 f96a 	bl	801b1a0 <fabs>
 8019ecc:	f000 ffc8 	bl	801ae60 <atan>
 8019ed0:	ec51 0b10 	vmov	r0, r1, d0
 8019ed4:	2c01      	cmp	r4, #1
 8019ed6:	d013      	beq.n	8019f00 <__ieee754_atan2+0x130>
 8019ed8:	2c02      	cmp	r4, #2
 8019eda:	d015      	beq.n	8019f08 <__ieee754_atan2+0x138>
 8019edc:	2c00      	cmp	r4, #0
 8019ede:	d098      	beq.n	8019e12 <__ieee754_atan2+0x42>
 8019ee0:	a321      	add	r3, pc, #132	; (adr r3, 8019f68 <__ieee754_atan2+0x198>)
 8019ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee6:	f7e6 f9cf 	bl	8000288 <__aeabi_dsub>
 8019eea:	a321      	add	r3, pc, #132	; (adr r3, 8019f70 <__ieee754_atan2+0x1a0>)
 8019eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ef0:	e014      	b.n	8019f1c <__ieee754_atan2+0x14c>
 8019ef2:	a121      	add	r1, pc, #132	; (adr r1, 8019f78 <__ieee754_atan2+0x1a8>)
 8019ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ef8:	e7ec      	b.n	8019ed4 <__ieee754_atan2+0x104>
 8019efa:	2000      	movs	r0, #0
 8019efc:	2100      	movs	r1, #0
 8019efe:	e7e9      	b.n	8019ed4 <__ieee754_atan2+0x104>
 8019f00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019f04:	4619      	mov	r1, r3
 8019f06:	e784      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019f08:	a317      	add	r3, pc, #92	; (adr r3, 8019f68 <__ieee754_atan2+0x198>)
 8019f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f0e:	f7e6 f9bb 	bl	8000288 <__aeabi_dsub>
 8019f12:	4602      	mov	r2, r0
 8019f14:	460b      	mov	r3, r1
 8019f16:	a116      	add	r1, pc, #88	; (adr r1, 8019f70 <__ieee754_atan2+0x1a0>)
 8019f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f1c:	f7e6 f9b4 	bl	8000288 <__aeabi_dsub>
 8019f20:	e777      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019f22:	a117      	add	r1, pc, #92	; (adr r1, 8019f80 <__ieee754_atan2+0x1b0>)
 8019f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f28:	e773      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019f2a:	a111      	add	r1, pc, #68	; (adr r1, 8019f70 <__ieee754_atan2+0x1a0>)
 8019f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f30:	e76f      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019f32:	a111      	add	r1, pc, #68	; (adr r1, 8019f78 <__ieee754_atan2+0x1a8>)
 8019f34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f38:	e76b      	b.n	8019e12 <__ieee754_atan2+0x42>
 8019f3a:	bf00      	nop
 8019f3c:	f3af 8000 	nop.w
 8019f40:	54442d18 	.word	0x54442d18
 8019f44:	c00921fb 	.word	0xc00921fb
 8019f48:	54442d18 	.word	0x54442d18
 8019f4c:	bff921fb 	.word	0xbff921fb
 8019f50:	54442d18 	.word	0x54442d18
 8019f54:	bfe921fb 	.word	0xbfe921fb
 8019f58:	7f3321d2 	.word	0x7f3321d2
 8019f5c:	4002d97c 	.word	0x4002d97c
 8019f60:	7f3321d2 	.word	0x7f3321d2
 8019f64:	c002d97c 	.word	0xc002d97c
 8019f68:	33145c07 	.word	0x33145c07
 8019f6c:	3ca1a626 	.word	0x3ca1a626
 8019f70:	54442d18 	.word	0x54442d18
 8019f74:	400921fb 	.word	0x400921fb
 8019f78:	54442d18 	.word	0x54442d18
 8019f7c:	3ff921fb 	.word	0x3ff921fb
 8019f80:	54442d18 	.word	0x54442d18
 8019f84:	3fe921fb 	.word	0x3fe921fb
 8019f88:	7ff00000 	.word	0x7ff00000
 8019f8c:	00000000 	.word	0x00000000

08019f90 <__ieee754_rem_pio2>:
 8019f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f94:	ec57 6b10 	vmov	r6, r7, d0
 8019f98:	4bc3      	ldr	r3, [pc, #780]	; (801a2a8 <__ieee754_rem_pio2+0x318>)
 8019f9a:	b08d      	sub	sp, #52	; 0x34
 8019f9c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019fa0:	4598      	cmp	r8, r3
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	9704      	str	r7, [sp, #16]
 8019fa6:	dc07      	bgt.n	8019fb8 <__ieee754_rem_pio2+0x28>
 8019fa8:	2200      	movs	r2, #0
 8019faa:	2300      	movs	r3, #0
 8019fac:	ed84 0b00 	vstr	d0, [r4]
 8019fb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019fb4:	2500      	movs	r5, #0
 8019fb6:	e027      	b.n	801a008 <__ieee754_rem_pio2+0x78>
 8019fb8:	4bbc      	ldr	r3, [pc, #752]	; (801a2ac <__ieee754_rem_pio2+0x31c>)
 8019fba:	4598      	cmp	r8, r3
 8019fbc:	dc75      	bgt.n	801a0aa <__ieee754_rem_pio2+0x11a>
 8019fbe:	9b04      	ldr	r3, [sp, #16]
 8019fc0:	4dbb      	ldr	r5, [pc, #748]	; (801a2b0 <__ieee754_rem_pio2+0x320>)
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	ee10 0a10 	vmov	r0, s0
 8019fc8:	a3a9      	add	r3, pc, #676	; (adr r3, 801a270 <__ieee754_rem_pio2+0x2e0>)
 8019fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fce:	4639      	mov	r1, r7
 8019fd0:	dd36      	ble.n	801a040 <__ieee754_rem_pio2+0xb0>
 8019fd2:	f7e6 f959 	bl	8000288 <__aeabi_dsub>
 8019fd6:	45a8      	cmp	r8, r5
 8019fd8:	4606      	mov	r6, r0
 8019fda:	460f      	mov	r7, r1
 8019fdc:	d018      	beq.n	801a010 <__ieee754_rem_pio2+0x80>
 8019fde:	a3a6      	add	r3, pc, #664	; (adr r3, 801a278 <__ieee754_rem_pio2+0x2e8>)
 8019fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe4:	f7e6 f950 	bl	8000288 <__aeabi_dsub>
 8019fe8:	4602      	mov	r2, r0
 8019fea:	460b      	mov	r3, r1
 8019fec:	e9c4 2300 	strd	r2, r3, [r4]
 8019ff0:	4630      	mov	r0, r6
 8019ff2:	4639      	mov	r1, r7
 8019ff4:	f7e6 f948 	bl	8000288 <__aeabi_dsub>
 8019ff8:	a39f      	add	r3, pc, #636	; (adr r3, 801a278 <__ieee754_rem_pio2+0x2e8>)
 8019ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ffe:	f7e6 f943 	bl	8000288 <__aeabi_dsub>
 801a002:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a006:	2501      	movs	r5, #1
 801a008:	4628      	mov	r0, r5
 801a00a:	b00d      	add	sp, #52	; 0x34
 801a00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a010:	a39b      	add	r3, pc, #620	; (adr r3, 801a280 <__ieee754_rem_pio2+0x2f0>)
 801a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a016:	f7e6 f937 	bl	8000288 <__aeabi_dsub>
 801a01a:	a39b      	add	r3, pc, #620	; (adr r3, 801a288 <__ieee754_rem_pio2+0x2f8>)
 801a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a020:	4606      	mov	r6, r0
 801a022:	460f      	mov	r7, r1
 801a024:	f7e6 f930 	bl	8000288 <__aeabi_dsub>
 801a028:	4602      	mov	r2, r0
 801a02a:	460b      	mov	r3, r1
 801a02c:	e9c4 2300 	strd	r2, r3, [r4]
 801a030:	4630      	mov	r0, r6
 801a032:	4639      	mov	r1, r7
 801a034:	f7e6 f928 	bl	8000288 <__aeabi_dsub>
 801a038:	a393      	add	r3, pc, #588	; (adr r3, 801a288 <__ieee754_rem_pio2+0x2f8>)
 801a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a03e:	e7de      	b.n	8019ffe <__ieee754_rem_pio2+0x6e>
 801a040:	f7e6 f924 	bl	800028c <__adddf3>
 801a044:	45a8      	cmp	r8, r5
 801a046:	4606      	mov	r6, r0
 801a048:	460f      	mov	r7, r1
 801a04a:	d016      	beq.n	801a07a <__ieee754_rem_pio2+0xea>
 801a04c:	a38a      	add	r3, pc, #552	; (adr r3, 801a278 <__ieee754_rem_pio2+0x2e8>)
 801a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a052:	f7e6 f91b 	bl	800028c <__adddf3>
 801a056:	4602      	mov	r2, r0
 801a058:	460b      	mov	r3, r1
 801a05a:	e9c4 2300 	strd	r2, r3, [r4]
 801a05e:	4630      	mov	r0, r6
 801a060:	4639      	mov	r1, r7
 801a062:	f7e6 f911 	bl	8000288 <__aeabi_dsub>
 801a066:	a384      	add	r3, pc, #528	; (adr r3, 801a278 <__ieee754_rem_pio2+0x2e8>)
 801a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a06c:	f7e6 f90e 	bl	800028c <__adddf3>
 801a070:	f04f 35ff 	mov.w	r5, #4294967295
 801a074:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a078:	e7c6      	b.n	801a008 <__ieee754_rem_pio2+0x78>
 801a07a:	a381      	add	r3, pc, #516	; (adr r3, 801a280 <__ieee754_rem_pio2+0x2f0>)
 801a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a080:	f7e6 f904 	bl	800028c <__adddf3>
 801a084:	a380      	add	r3, pc, #512	; (adr r3, 801a288 <__ieee754_rem_pio2+0x2f8>)
 801a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a08a:	4606      	mov	r6, r0
 801a08c:	460f      	mov	r7, r1
 801a08e:	f7e6 f8fd 	bl	800028c <__adddf3>
 801a092:	4602      	mov	r2, r0
 801a094:	460b      	mov	r3, r1
 801a096:	e9c4 2300 	strd	r2, r3, [r4]
 801a09a:	4630      	mov	r0, r6
 801a09c:	4639      	mov	r1, r7
 801a09e:	f7e6 f8f3 	bl	8000288 <__aeabi_dsub>
 801a0a2:	a379      	add	r3, pc, #484	; (adr r3, 801a288 <__ieee754_rem_pio2+0x2f8>)
 801a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0a8:	e7e0      	b.n	801a06c <__ieee754_rem_pio2+0xdc>
 801a0aa:	4b82      	ldr	r3, [pc, #520]	; (801a2b4 <__ieee754_rem_pio2+0x324>)
 801a0ac:	4598      	cmp	r8, r3
 801a0ae:	f300 80d0 	bgt.w	801a252 <__ieee754_rem_pio2+0x2c2>
 801a0b2:	f001 f875 	bl	801b1a0 <fabs>
 801a0b6:	ec57 6b10 	vmov	r6, r7, d0
 801a0ba:	ee10 0a10 	vmov	r0, s0
 801a0be:	a374      	add	r3, pc, #464	; (adr r3, 801a290 <__ieee754_rem_pio2+0x300>)
 801a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0c4:	4639      	mov	r1, r7
 801a0c6:	f7e6 fa97 	bl	80005f8 <__aeabi_dmul>
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	4b7a      	ldr	r3, [pc, #488]	; (801a2b8 <__ieee754_rem_pio2+0x328>)
 801a0ce:	f7e6 f8dd 	bl	800028c <__adddf3>
 801a0d2:	f7e6 fd41 	bl	8000b58 <__aeabi_d2iz>
 801a0d6:	4605      	mov	r5, r0
 801a0d8:	f7e6 fa24 	bl	8000524 <__aeabi_i2d>
 801a0dc:	a364      	add	r3, pc, #400	; (adr r3, 801a270 <__ieee754_rem_pio2+0x2e0>)
 801a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a0e6:	f7e6 fa87 	bl	80005f8 <__aeabi_dmul>
 801a0ea:	4602      	mov	r2, r0
 801a0ec:	460b      	mov	r3, r1
 801a0ee:	4630      	mov	r0, r6
 801a0f0:	4639      	mov	r1, r7
 801a0f2:	f7e6 f8c9 	bl	8000288 <__aeabi_dsub>
 801a0f6:	a360      	add	r3, pc, #384	; (adr r3, 801a278 <__ieee754_rem_pio2+0x2e8>)
 801a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0fc:	4682      	mov	sl, r0
 801a0fe:	468b      	mov	fp, r1
 801a100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a104:	f7e6 fa78 	bl	80005f8 <__aeabi_dmul>
 801a108:	2d1f      	cmp	r5, #31
 801a10a:	4606      	mov	r6, r0
 801a10c:	460f      	mov	r7, r1
 801a10e:	dc0c      	bgt.n	801a12a <__ieee754_rem_pio2+0x19a>
 801a110:	1e6a      	subs	r2, r5, #1
 801a112:	4b6a      	ldr	r3, [pc, #424]	; (801a2bc <__ieee754_rem_pio2+0x32c>)
 801a114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a118:	4543      	cmp	r3, r8
 801a11a:	d006      	beq.n	801a12a <__ieee754_rem_pio2+0x19a>
 801a11c:	4632      	mov	r2, r6
 801a11e:	463b      	mov	r3, r7
 801a120:	4650      	mov	r0, sl
 801a122:	4659      	mov	r1, fp
 801a124:	f7e6 f8b0 	bl	8000288 <__aeabi_dsub>
 801a128:	e00e      	b.n	801a148 <__ieee754_rem_pio2+0x1b8>
 801a12a:	4632      	mov	r2, r6
 801a12c:	463b      	mov	r3, r7
 801a12e:	4650      	mov	r0, sl
 801a130:	4659      	mov	r1, fp
 801a132:	f7e6 f8a9 	bl	8000288 <__aeabi_dsub>
 801a136:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a13a:	9305      	str	r3, [sp, #20]
 801a13c:	9a05      	ldr	r2, [sp, #20]
 801a13e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a142:	1ad3      	subs	r3, r2, r3
 801a144:	2b10      	cmp	r3, #16
 801a146:	dc02      	bgt.n	801a14e <__ieee754_rem_pio2+0x1be>
 801a148:	e9c4 0100 	strd	r0, r1, [r4]
 801a14c:	e039      	b.n	801a1c2 <__ieee754_rem_pio2+0x232>
 801a14e:	a34c      	add	r3, pc, #304	; (adr r3, 801a280 <__ieee754_rem_pio2+0x2f0>)
 801a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a158:	f7e6 fa4e 	bl	80005f8 <__aeabi_dmul>
 801a15c:	4606      	mov	r6, r0
 801a15e:	460f      	mov	r7, r1
 801a160:	4602      	mov	r2, r0
 801a162:	460b      	mov	r3, r1
 801a164:	4650      	mov	r0, sl
 801a166:	4659      	mov	r1, fp
 801a168:	f7e6 f88e 	bl	8000288 <__aeabi_dsub>
 801a16c:	4602      	mov	r2, r0
 801a16e:	460b      	mov	r3, r1
 801a170:	4680      	mov	r8, r0
 801a172:	4689      	mov	r9, r1
 801a174:	4650      	mov	r0, sl
 801a176:	4659      	mov	r1, fp
 801a178:	f7e6 f886 	bl	8000288 <__aeabi_dsub>
 801a17c:	4632      	mov	r2, r6
 801a17e:	463b      	mov	r3, r7
 801a180:	f7e6 f882 	bl	8000288 <__aeabi_dsub>
 801a184:	a340      	add	r3, pc, #256	; (adr r3, 801a288 <__ieee754_rem_pio2+0x2f8>)
 801a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a18a:	4606      	mov	r6, r0
 801a18c:	460f      	mov	r7, r1
 801a18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a192:	f7e6 fa31 	bl	80005f8 <__aeabi_dmul>
 801a196:	4632      	mov	r2, r6
 801a198:	463b      	mov	r3, r7
 801a19a:	f7e6 f875 	bl	8000288 <__aeabi_dsub>
 801a19e:	4602      	mov	r2, r0
 801a1a0:	460b      	mov	r3, r1
 801a1a2:	4606      	mov	r6, r0
 801a1a4:	460f      	mov	r7, r1
 801a1a6:	4640      	mov	r0, r8
 801a1a8:	4649      	mov	r1, r9
 801a1aa:	f7e6 f86d 	bl	8000288 <__aeabi_dsub>
 801a1ae:	9a05      	ldr	r2, [sp, #20]
 801a1b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a1b4:	1ad3      	subs	r3, r2, r3
 801a1b6:	2b31      	cmp	r3, #49	; 0x31
 801a1b8:	dc20      	bgt.n	801a1fc <__ieee754_rem_pio2+0x26c>
 801a1ba:	e9c4 0100 	strd	r0, r1, [r4]
 801a1be:	46c2      	mov	sl, r8
 801a1c0:	46cb      	mov	fp, r9
 801a1c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a1c6:	4650      	mov	r0, sl
 801a1c8:	4642      	mov	r2, r8
 801a1ca:	464b      	mov	r3, r9
 801a1cc:	4659      	mov	r1, fp
 801a1ce:	f7e6 f85b 	bl	8000288 <__aeabi_dsub>
 801a1d2:	463b      	mov	r3, r7
 801a1d4:	4632      	mov	r2, r6
 801a1d6:	f7e6 f857 	bl	8000288 <__aeabi_dsub>
 801a1da:	9b04      	ldr	r3, [sp, #16]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a1e2:	f6bf af11 	bge.w	801a008 <__ieee754_rem_pio2+0x78>
 801a1e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a1ea:	6063      	str	r3, [r4, #4]
 801a1ec:	f8c4 8000 	str.w	r8, [r4]
 801a1f0:	60a0      	str	r0, [r4, #8]
 801a1f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a1f6:	60e3      	str	r3, [r4, #12]
 801a1f8:	426d      	negs	r5, r5
 801a1fa:	e705      	b.n	801a008 <__ieee754_rem_pio2+0x78>
 801a1fc:	a326      	add	r3, pc, #152	; (adr r3, 801a298 <__ieee754_rem_pio2+0x308>)
 801a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a206:	f7e6 f9f7 	bl	80005f8 <__aeabi_dmul>
 801a20a:	4606      	mov	r6, r0
 801a20c:	460f      	mov	r7, r1
 801a20e:	4602      	mov	r2, r0
 801a210:	460b      	mov	r3, r1
 801a212:	4640      	mov	r0, r8
 801a214:	4649      	mov	r1, r9
 801a216:	f7e6 f837 	bl	8000288 <__aeabi_dsub>
 801a21a:	4602      	mov	r2, r0
 801a21c:	460b      	mov	r3, r1
 801a21e:	4682      	mov	sl, r0
 801a220:	468b      	mov	fp, r1
 801a222:	4640      	mov	r0, r8
 801a224:	4649      	mov	r1, r9
 801a226:	f7e6 f82f 	bl	8000288 <__aeabi_dsub>
 801a22a:	4632      	mov	r2, r6
 801a22c:	463b      	mov	r3, r7
 801a22e:	f7e6 f82b 	bl	8000288 <__aeabi_dsub>
 801a232:	a31b      	add	r3, pc, #108	; (adr r3, 801a2a0 <__ieee754_rem_pio2+0x310>)
 801a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a238:	4606      	mov	r6, r0
 801a23a:	460f      	mov	r7, r1
 801a23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a240:	f7e6 f9da 	bl	80005f8 <__aeabi_dmul>
 801a244:	4632      	mov	r2, r6
 801a246:	463b      	mov	r3, r7
 801a248:	f7e6 f81e 	bl	8000288 <__aeabi_dsub>
 801a24c:	4606      	mov	r6, r0
 801a24e:	460f      	mov	r7, r1
 801a250:	e764      	b.n	801a11c <__ieee754_rem_pio2+0x18c>
 801a252:	4b1b      	ldr	r3, [pc, #108]	; (801a2c0 <__ieee754_rem_pio2+0x330>)
 801a254:	4598      	cmp	r8, r3
 801a256:	dd35      	ble.n	801a2c4 <__ieee754_rem_pio2+0x334>
 801a258:	ee10 2a10 	vmov	r2, s0
 801a25c:	463b      	mov	r3, r7
 801a25e:	4630      	mov	r0, r6
 801a260:	4639      	mov	r1, r7
 801a262:	f7e6 f811 	bl	8000288 <__aeabi_dsub>
 801a266:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a26a:	e9c4 0100 	strd	r0, r1, [r4]
 801a26e:	e6a1      	b.n	8019fb4 <__ieee754_rem_pio2+0x24>
 801a270:	54400000 	.word	0x54400000
 801a274:	3ff921fb 	.word	0x3ff921fb
 801a278:	1a626331 	.word	0x1a626331
 801a27c:	3dd0b461 	.word	0x3dd0b461
 801a280:	1a600000 	.word	0x1a600000
 801a284:	3dd0b461 	.word	0x3dd0b461
 801a288:	2e037073 	.word	0x2e037073
 801a28c:	3ba3198a 	.word	0x3ba3198a
 801a290:	6dc9c883 	.word	0x6dc9c883
 801a294:	3fe45f30 	.word	0x3fe45f30
 801a298:	2e000000 	.word	0x2e000000
 801a29c:	3ba3198a 	.word	0x3ba3198a
 801a2a0:	252049c1 	.word	0x252049c1
 801a2a4:	397b839a 	.word	0x397b839a
 801a2a8:	3fe921fb 	.word	0x3fe921fb
 801a2ac:	4002d97b 	.word	0x4002d97b
 801a2b0:	3ff921fb 	.word	0x3ff921fb
 801a2b4:	413921fb 	.word	0x413921fb
 801a2b8:	3fe00000 	.word	0x3fe00000
 801a2bc:	0801b984 	.word	0x0801b984
 801a2c0:	7fefffff 	.word	0x7fefffff
 801a2c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a2c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a2cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a2d0:	4630      	mov	r0, r6
 801a2d2:	460f      	mov	r7, r1
 801a2d4:	f7e6 fc40 	bl	8000b58 <__aeabi_d2iz>
 801a2d8:	f7e6 f924 	bl	8000524 <__aeabi_i2d>
 801a2dc:	4602      	mov	r2, r0
 801a2de:	460b      	mov	r3, r1
 801a2e0:	4630      	mov	r0, r6
 801a2e2:	4639      	mov	r1, r7
 801a2e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a2e8:	f7e5 ffce 	bl	8000288 <__aeabi_dsub>
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	4b1f      	ldr	r3, [pc, #124]	; (801a36c <__ieee754_rem_pio2+0x3dc>)
 801a2f0:	f7e6 f982 	bl	80005f8 <__aeabi_dmul>
 801a2f4:	460f      	mov	r7, r1
 801a2f6:	4606      	mov	r6, r0
 801a2f8:	f7e6 fc2e 	bl	8000b58 <__aeabi_d2iz>
 801a2fc:	f7e6 f912 	bl	8000524 <__aeabi_i2d>
 801a300:	4602      	mov	r2, r0
 801a302:	460b      	mov	r3, r1
 801a304:	4630      	mov	r0, r6
 801a306:	4639      	mov	r1, r7
 801a308:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a30c:	f7e5 ffbc 	bl	8000288 <__aeabi_dsub>
 801a310:	2200      	movs	r2, #0
 801a312:	4b16      	ldr	r3, [pc, #88]	; (801a36c <__ieee754_rem_pio2+0x3dc>)
 801a314:	f7e6 f970 	bl	80005f8 <__aeabi_dmul>
 801a318:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a31c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a320:	f04f 0803 	mov.w	r8, #3
 801a324:	2600      	movs	r6, #0
 801a326:	2700      	movs	r7, #0
 801a328:	4632      	mov	r2, r6
 801a32a:	463b      	mov	r3, r7
 801a32c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a330:	f108 3aff 	add.w	sl, r8, #4294967295
 801a334:	f7e6 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 801a338:	b9b0      	cbnz	r0, 801a368 <__ieee754_rem_pio2+0x3d8>
 801a33a:	4b0d      	ldr	r3, [pc, #52]	; (801a370 <__ieee754_rem_pio2+0x3e0>)
 801a33c:	9301      	str	r3, [sp, #4]
 801a33e:	2302      	movs	r3, #2
 801a340:	9300      	str	r3, [sp, #0]
 801a342:	462a      	mov	r2, r5
 801a344:	4643      	mov	r3, r8
 801a346:	4621      	mov	r1, r4
 801a348:	a806      	add	r0, sp, #24
 801a34a:	f000 f98d 	bl	801a668 <__kernel_rem_pio2>
 801a34e:	9b04      	ldr	r3, [sp, #16]
 801a350:	2b00      	cmp	r3, #0
 801a352:	4605      	mov	r5, r0
 801a354:	f6bf ae58 	bge.w	801a008 <__ieee754_rem_pio2+0x78>
 801a358:	6863      	ldr	r3, [r4, #4]
 801a35a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a35e:	6063      	str	r3, [r4, #4]
 801a360:	68e3      	ldr	r3, [r4, #12]
 801a362:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a366:	e746      	b.n	801a1f6 <__ieee754_rem_pio2+0x266>
 801a368:	46d0      	mov	r8, sl
 801a36a:	e7dd      	b.n	801a328 <__ieee754_rem_pio2+0x398>
 801a36c:	41700000 	.word	0x41700000
 801a370:	0801ba04 	.word	0x0801ba04

0801a374 <__ieee754_sqrt>:
 801a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a378:	4955      	ldr	r1, [pc, #340]	; (801a4d0 <__ieee754_sqrt+0x15c>)
 801a37a:	ec55 4b10 	vmov	r4, r5, d0
 801a37e:	43a9      	bics	r1, r5
 801a380:	462b      	mov	r3, r5
 801a382:	462a      	mov	r2, r5
 801a384:	d112      	bne.n	801a3ac <__ieee754_sqrt+0x38>
 801a386:	ee10 2a10 	vmov	r2, s0
 801a38a:	ee10 0a10 	vmov	r0, s0
 801a38e:	4629      	mov	r1, r5
 801a390:	f7e6 f932 	bl	80005f8 <__aeabi_dmul>
 801a394:	4602      	mov	r2, r0
 801a396:	460b      	mov	r3, r1
 801a398:	4620      	mov	r0, r4
 801a39a:	4629      	mov	r1, r5
 801a39c:	f7e5 ff76 	bl	800028c <__adddf3>
 801a3a0:	4604      	mov	r4, r0
 801a3a2:	460d      	mov	r5, r1
 801a3a4:	ec45 4b10 	vmov	d0, r4, r5
 801a3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3ac:	2d00      	cmp	r5, #0
 801a3ae:	ee10 0a10 	vmov	r0, s0
 801a3b2:	4621      	mov	r1, r4
 801a3b4:	dc0f      	bgt.n	801a3d6 <__ieee754_sqrt+0x62>
 801a3b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a3ba:	4330      	orrs	r0, r6
 801a3bc:	d0f2      	beq.n	801a3a4 <__ieee754_sqrt+0x30>
 801a3be:	b155      	cbz	r5, 801a3d6 <__ieee754_sqrt+0x62>
 801a3c0:	ee10 2a10 	vmov	r2, s0
 801a3c4:	4620      	mov	r0, r4
 801a3c6:	4629      	mov	r1, r5
 801a3c8:	f7e5 ff5e 	bl	8000288 <__aeabi_dsub>
 801a3cc:	4602      	mov	r2, r0
 801a3ce:	460b      	mov	r3, r1
 801a3d0:	f7e6 fa3c 	bl	800084c <__aeabi_ddiv>
 801a3d4:	e7e4      	b.n	801a3a0 <__ieee754_sqrt+0x2c>
 801a3d6:	151b      	asrs	r3, r3, #20
 801a3d8:	d073      	beq.n	801a4c2 <__ieee754_sqrt+0x14e>
 801a3da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a3de:	07dd      	lsls	r5, r3, #31
 801a3e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a3e4:	bf48      	it	mi
 801a3e6:	0fc8      	lsrmi	r0, r1, #31
 801a3e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a3ec:	bf44      	itt	mi
 801a3ee:	0049      	lslmi	r1, r1, #1
 801a3f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a3f4:	2500      	movs	r5, #0
 801a3f6:	1058      	asrs	r0, r3, #1
 801a3f8:	0fcb      	lsrs	r3, r1, #31
 801a3fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a3fe:	0049      	lsls	r1, r1, #1
 801a400:	2316      	movs	r3, #22
 801a402:	462c      	mov	r4, r5
 801a404:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a408:	19a7      	adds	r7, r4, r6
 801a40a:	4297      	cmp	r7, r2
 801a40c:	bfde      	ittt	le
 801a40e:	19bc      	addle	r4, r7, r6
 801a410:	1bd2      	suble	r2, r2, r7
 801a412:	19ad      	addle	r5, r5, r6
 801a414:	0fcf      	lsrs	r7, r1, #31
 801a416:	3b01      	subs	r3, #1
 801a418:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a41c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a420:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a424:	d1f0      	bne.n	801a408 <__ieee754_sqrt+0x94>
 801a426:	f04f 0c20 	mov.w	ip, #32
 801a42a:	469e      	mov	lr, r3
 801a42c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a430:	42a2      	cmp	r2, r4
 801a432:	eb06 070e 	add.w	r7, r6, lr
 801a436:	dc02      	bgt.n	801a43e <__ieee754_sqrt+0xca>
 801a438:	d112      	bne.n	801a460 <__ieee754_sqrt+0xec>
 801a43a:	428f      	cmp	r7, r1
 801a43c:	d810      	bhi.n	801a460 <__ieee754_sqrt+0xec>
 801a43e:	2f00      	cmp	r7, #0
 801a440:	eb07 0e06 	add.w	lr, r7, r6
 801a444:	da42      	bge.n	801a4cc <__ieee754_sqrt+0x158>
 801a446:	f1be 0f00 	cmp.w	lr, #0
 801a44a:	db3f      	blt.n	801a4cc <__ieee754_sqrt+0x158>
 801a44c:	f104 0801 	add.w	r8, r4, #1
 801a450:	1b12      	subs	r2, r2, r4
 801a452:	428f      	cmp	r7, r1
 801a454:	bf88      	it	hi
 801a456:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a45a:	1bc9      	subs	r1, r1, r7
 801a45c:	4433      	add	r3, r6
 801a45e:	4644      	mov	r4, r8
 801a460:	0052      	lsls	r2, r2, #1
 801a462:	f1bc 0c01 	subs.w	ip, ip, #1
 801a466:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a46a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a46e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a472:	d1dd      	bne.n	801a430 <__ieee754_sqrt+0xbc>
 801a474:	430a      	orrs	r2, r1
 801a476:	d006      	beq.n	801a486 <__ieee754_sqrt+0x112>
 801a478:	1c5c      	adds	r4, r3, #1
 801a47a:	bf13      	iteet	ne
 801a47c:	3301      	addne	r3, #1
 801a47e:	3501      	addeq	r5, #1
 801a480:	4663      	moveq	r3, ip
 801a482:	f023 0301 	bicne.w	r3, r3, #1
 801a486:	106a      	asrs	r2, r5, #1
 801a488:	085b      	lsrs	r3, r3, #1
 801a48a:	07e9      	lsls	r1, r5, #31
 801a48c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a490:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a494:	bf48      	it	mi
 801a496:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a49a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a49e:	461c      	mov	r4, r3
 801a4a0:	e780      	b.n	801a3a4 <__ieee754_sqrt+0x30>
 801a4a2:	0aca      	lsrs	r2, r1, #11
 801a4a4:	3815      	subs	r0, #21
 801a4a6:	0549      	lsls	r1, r1, #21
 801a4a8:	2a00      	cmp	r2, #0
 801a4aa:	d0fa      	beq.n	801a4a2 <__ieee754_sqrt+0x12e>
 801a4ac:	02d6      	lsls	r6, r2, #11
 801a4ae:	d50a      	bpl.n	801a4c6 <__ieee754_sqrt+0x152>
 801a4b0:	f1c3 0420 	rsb	r4, r3, #32
 801a4b4:	fa21 f404 	lsr.w	r4, r1, r4
 801a4b8:	1e5d      	subs	r5, r3, #1
 801a4ba:	4099      	lsls	r1, r3
 801a4bc:	4322      	orrs	r2, r4
 801a4be:	1b43      	subs	r3, r0, r5
 801a4c0:	e78b      	b.n	801a3da <__ieee754_sqrt+0x66>
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	e7f0      	b.n	801a4a8 <__ieee754_sqrt+0x134>
 801a4c6:	0052      	lsls	r2, r2, #1
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	e7ef      	b.n	801a4ac <__ieee754_sqrt+0x138>
 801a4cc:	46a0      	mov	r8, r4
 801a4ce:	e7bf      	b.n	801a450 <__ieee754_sqrt+0xdc>
 801a4d0:	7ff00000 	.word	0x7ff00000
 801a4d4:	00000000 	.word	0x00000000

0801a4d8 <__kernel_cos>:
 801a4d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4dc:	ec59 8b10 	vmov	r8, r9, d0
 801a4e0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a4e4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a4e8:	ed2d 8b02 	vpush	{d8}
 801a4ec:	eeb0 8a41 	vmov.f32	s16, s2
 801a4f0:	eef0 8a61 	vmov.f32	s17, s3
 801a4f4:	da07      	bge.n	801a506 <__kernel_cos+0x2e>
 801a4f6:	ee10 0a10 	vmov	r0, s0
 801a4fa:	4649      	mov	r1, r9
 801a4fc:	f7e6 fb2c 	bl	8000b58 <__aeabi_d2iz>
 801a500:	2800      	cmp	r0, #0
 801a502:	f000 8089 	beq.w	801a618 <__kernel_cos+0x140>
 801a506:	4642      	mov	r2, r8
 801a508:	464b      	mov	r3, r9
 801a50a:	4640      	mov	r0, r8
 801a50c:	4649      	mov	r1, r9
 801a50e:	f7e6 f873 	bl	80005f8 <__aeabi_dmul>
 801a512:	2200      	movs	r2, #0
 801a514:	4b4e      	ldr	r3, [pc, #312]	; (801a650 <__kernel_cos+0x178>)
 801a516:	4604      	mov	r4, r0
 801a518:	460d      	mov	r5, r1
 801a51a:	f7e6 f86d 	bl	80005f8 <__aeabi_dmul>
 801a51e:	a340      	add	r3, pc, #256	; (adr r3, 801a620 <__kernel_cos+0x148>)
 801a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a524:	4682      	mov	sl, r0
 801a526:	468b      	mov	fp, r1
 801a528:	4620      	mov	r0, r4
 801a52a:	4629      	mov	r1, r5
 801a52c:	f7e6 f864 	bl	80005f8 <__aeabi_dmul>
 801a530:	a33d      	add	r3, pc, #244	; (adr r3, 801a628 <__kernel_cos+0x150>)
 801a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a536:	f7e5 fea9 	bl	800028c <__adddf3>
 801a53a:	4622      	mov	r2, r4
 801a53c:	462b      	mov	r3, r5
 801a53e:	f7e6 f85b 	bl	80005f8 <__aeabi_dmul>
 801a542:	a33b      	add	r3, pc, #236	; (adr r3, 801a630 <__kernel_cos+0x158>)
 801a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a548:	f7e5 fe9e 	bl	8000288 <__aeabi_dsub>
 801a54c:	4622      	mov	r2, r4
 801a54e:	462b      	mov	r3, r5
 801a550:	f7e6 f852 	bl	80005f8 <__aeabi_dmul>
 801a554:	a338      	add	r3, pc, #224	; (adr r3, 801a638 <__kernel_cos+0x160>)
 801a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55a:	f7e5 fe97 	bl	800028c <__adddf3>
 801a55e:	4622      	mov	r2, r4
 801a560:	462b      	mov	r3, r5
 801a562:	f7e6 f849 	bl	80005f8 <__aeabi_dmul>
 801a566:	a336      	add	r3, pc, #216	; (adr r3, 801a640 <__kernel_cos+0x168>)
 801a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a56c:	f7e5 fe8c 	bl	8000288 <__aeabi_dsub>
 801a570:	4622      	mov	r2, r4
 801a572:	462b      	mov	r3, r5
 801a574:	f7e6 f840 	bl	80005f8 <__aeabi_dmul>
 801a578:	a333      	add	r3, pc, #204	; (adr r3, 801a648 <__kernel_cos+0x170>)
 801a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a57e:	f7e5 fe85 	bl	800028c <__adddf3>
 801a582:	4622      	mov	r2, r4
 801a584:	462b      	mov	r3, r5
 801a586:	f7e6 f837 	bl	80005f8 <__aeabi_dmul>
 801a58a:	4622      	mov	r2, r4
 801a58c:	462b      	mov	r3, r5
 801a58e:	f7e6 f833 	bl	80005f8 <__aeabi_dmul>
 801a592:	ec53 2b18 	vmov	r2, r3, d8
 801a596:	4604      	mov	r4, r0
 801a598:	460d      	mov	r5, r1
 801a59a:	4640      	mov	r0, r8
 801a59c:	4649      	mov	r1, r9
 801a59e:	f7e6 f82b 	bl	80005f8 <__aeabi_dmul>
 801a5a2:	460b      	mov	r3, r1
 801a5a4:	4602      	mov	r2, r0
 801a5a6:	4629      	mov	r1, r5
 801a5a8:	4620      	mov	r0, r4
 801a5aa:	f7e5 fe6d 	bl	8000288 <__aeabi_dsub>
 801a5ae:	4b29      	ldr	r3, [pc, #164]	; (801a654 <__kernel_cos+0x17c>)
 801a5b0:	429e      	cmp	r6, r3
 801a5b2:	4680      	mov	r8, r0
 801a5b4:	4689      	mov	r9, r1
 801a5b6:	dc11      	bgt.n	801a5dc <__kernel_cos+0x104>
 801a5b8:	4602      	mov	r2, r0
 801a5ba:	460b      	mov	r3, r1
 801a5bc:	4650      	mov	r0, sl
 801a5be:	4659      	mov	r1, fp
 801a5c0:	f7e5 fe62 	bl	8000288 <__aeabi_dsub>
 801a5c4:	460b      	mov	r3, r1
 801a5c6:	4924      	ldr	r1, [pc, #144]	; (801a658 <__kernel_cos+0x180>)
 801a5c8:	4602      	mov	r2, r0
 801a5ca:	2000      	movs	r0, #0
 801a5cc:	f7e5 fe5c 	bl	8000288 <__aeabi_dsub>
 801a5d0:	ecbd 8b02 	vpop	{d8}
 801a5d4:	ec41 0b10 	vmov	d0, r0, r1
 801a5d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5dc:	4b1f      	ldr	r3, [pc, #124]	; (801a65c <__kernel_cos+0x184>)
 801a5de:	491e      	ldr	r1, [pc, #120]	; (801a658 <__kernel_cos+0x180>)
 801a5e0:	429e      	cmp	r6, r3
 801a5e2:	bfcc      	ite	gt
 801a5e4:	4d1e      	ldrgt	r5, [pc, #120]	; (801a660 <__kernel_cos+0x188>)
 801a5e6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a5ea:	2400      	movs	r4, #0
 801a5ec:	4622      	mov	r2, r4
 801a5ee:	462b      	mov	r3, r5
 801a5f0:	2000      	movs	r0, #0
 801a5f2:	f7e5 fe49 	bl	8000288 <__aeabi_dsub>
 801a5f6:	4622      	mov	r2, r4
 801a5f8:	4606      	mov	r6, r0
 801a5fa:	460f      	mov	r7, r1
 801a5fc:	462b      	mov	r3, r5
 801a5fe:	4650      	mov	r0, sl
 801a600:	4659      	mov	r1, fp
 801a602:	f7e5 fe41 	bl	8000288 <__aeabi_dsub>
 801a606:	4642      	mov	r2, r8
 801a608:	464b      	mov	r3, r9
 801a60a:	f7e5 fe3d 	bl	8000288 <__aeabi_dsub>
 801a60e:	4602      	mov	r2, r0
 801a610:	460b      	mov	r3, r1
 801a612:	4630      	mov	r0, r6
 801a614:	4639      	mov	r1, r7
 801a616:	e7d9      	b.n	801a5cc <__kernel_cos+0xf4>
 801a618:	2000      	movs	r0, #0
 801a61a:	490f      	ldr	r1, [pc, #60]	; (801a658 <__kernel_cos+0x180>)
 801a61c:	e7d8      	b.n	801a5d0 <__kernel_cos+0xf8>
 801a61e:	bf00      	nop
 801a620:	be8838d4 	.word	0xbe8838d4
 801a624:	bda8fae9 	.word	0xbda8fae9
 801a628:	bdb4b1c4 	.word	0xbdb4b1c4
 801a62c:	3e21ee9e 	.word	0x3e21ee9e
 801a630:	809c52ad 	.word	0x809c52ad
 801a634:	3e927e4f 	.word	0x3e927e4f
 801a638:	19cb1590 	.word	0x19cb1590
 801a63c:	3efa01a0 	.word	0x3efa01a0
 801a640:	16c15177 	.word	0x16c15177
 801a644:	3f56c16c 	.word	0x3f56c16c
 801a648:	5555554c 	.word	0x5555554c
 801a64c:	3fa55555 	.word	0x3fa55555
 801a650:	3fe00000 	.word	0x3fe00000
 801a654:	3fd33332 	.word	0x3fd33332
 801a658:	3ff00000 	.word	0x3ff00000
 801a65c:	3fe90000 	.word	0x3fe90000
 801a660:	3fd20000 	.word	0x3fd20000
 801a664:	00000000 	.word	0x00000000

0801a668 <__kernel_rem_pio2>:
 801a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a66c:	ed2d 8b02 	vpush	{d8}
 801a670:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a674:	1ed4      	subs	r4, r2, #3
 801a676:	9308      	str	r3, [sp, #32]
 801a678:	9101      	str	r1, [sp, #4]
 801a67a:	4bc5      	ldr	r3, [pc, #788]	; (801a990 <__kernel_rem_pio2+0x328>)
 801a67c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a67e:	9009      	str	r0, [sp, #36]	; 0x24
 801a680:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a684:	9304      	str	r3, [sp, #16]
 801a686:	9b08      	ldr	r3, [sp, #32]
 801a688:	3b01      	subs	r3, #1
 801a68a:	9307      	str	r3, [sp, #28]
 801a68c:	2318      	movs	r3, #24
 801a68e:	fb94 f4f3 	sdiv	r4, r4, r3
 801a692:	f06f 0317 	mvn.w	r3, #23
 801a696:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a69a:	fb04 3303 	mla	r3, r4, r3, r3
 801a69e:	eb03 0a02 	add.w	sl, r3, r2
 801a6a2:	9b04      	ldr	r3, [sp, #16]
 801a6a4:	9a07      	ldr	r2, [sp, #28]
 801a6a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a980 <__kernel_rem_pio2+0x318>
 801a6aa:	eb03 0802 	add.w	r8, r3, r2
 801a6ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a6b0:	1aa7      	subs	r7, r4, r2
 801a6b2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a6b6:	ae22      	add	r6, sp, #136	; 0x88
 801a6b8:	2500      	movs	r5, #0
 801a6ba:	4545      	cmp	r5, r8
 801a6bc:	dd13      	ble.n	801a6e6 <__kernel_rem_pio2+0x7e>
 801a6be:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a980 <__kernel_rem_pio2+0x318>
 801a6c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a6c6:	2600      	movs	r6, #0
 801a6c8:	9b04      	ldr	r3, [sp, #16]
 801a6ca:	429e      	cmp	r6, r3
 801a6cc:	dc32      	bgt.n	801a734 <__kernel_rem_pio2+0xcc>
 801a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6d0:	9302      	str	r3, [sp, #8]
 801a6d2:	9b08      	ldr	r3, [sp, #32]
 801a6d4:	199d      	adds	r5, r3, r6
 801a6d6:	ab22      	add	r3, sp, #136	; 0x88
 801a6d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a6dc:	9306      	str	r3, [sp, #24]
 801a6de:	ec59 8b18 	vmov	r8, r9, d8
 801a6e2:	2700      	movs	r7, #0
 801a6e4:	e01f      	b.n	801a726 <__kernel_rem_pio2+0xbe>
 801a6e6:	42ef      	cmn	r7, r5
 801a6e8:	d407      	bmi.n	801a6fa <__kernel_rem_pio2+0x92>
 801a6ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a6ee:	f7e5 ff19 	bl	8000524 <__aeabi_i2d>
 801a6f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a6f6:	3501      	adds	r5, #1
 801a6f8:	e7df      	b.n	801a6ba <__kernel_rem_pio2+0x52>
 801a6fa:	ec51 0b18 	vmov	r0, r1, d8
 801a6fe:	e7f8      	b.n	801a6f2 <__kernel_rem_pio2+0x8a>
 801a700:	9906      	ldr	r1, [sp, #24]
 801a702:	9d02      	ldr	r5, [sp, #8]
 801a704:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a708:	9106      	str	r1, [sp, #24]
 801a70a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a70e:	9502      	str	r5, [sp, #8]
 801a710:	f7e5 ff72 	bl	80005f8 <__aeabi_dmul>
 801a714:	4602      	mov	r2, r0
 801a716:	460b      	mov	r3, r1
 801a718:	4640      	mov	r0, r8
 801a71a:	4649      	mov	r1, r9
 801a71c:	f7e5 fdb6 	bl	800028c <__adddf3>
 801a720:	3701      	adds	r7, #1
 801a722:	4680      	mov	r8, r0
 801a724:	4689      	mov	r9, r1
 801a726:	9b07      	ldr	r3, [sp, #28]
 801a728:	429f      	cmp	r7, r3
 801a72a:	dde9      	ble.n	801a700 <__kernel_rem_pio2+0x98>
 801a72c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a730:	3601      	adds	r6, #1
 801a732:	e7c9      	b.n	801a6c8 <__kernel_rem_pio2+0x60>
 801a734:	9b04      	ldr	r3, [sp, #16]
 801a736:	aa0e      	add	r2, sp, #56	; 0x38
 801a738:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a73c:	930c      	str	r3, [sp, #48]	; 0x30
 801a73e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a740:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a744:	9c04      	ldr	r4, [sp, #16]
 801a746:	930b      	str	r3, [sp, #44]	; 0x2c
 801a748:	ab9a      	add	r3, sp, #616	; 0x268
 801a74a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a74e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a752:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a756:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a75a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a75e:	ab9a      	add	r3, sp, #616	; 0x268
 801a760:	445b      	add	r3, fp
 801a762:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a766:	2500      	movs	r5, #0
 801a768:	1b63      	subs	r3, r4, r5
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	dc78      	bgt.n	801a860 <__kernel_rem_pio2+0x1f8>
 801a76e:	4650      	mov	r0, sl
 801a770:	ec49 8b10 	vmov	d0, r8, r9
 801a774:	f000 fda8 	bl	801b2c8 <scalbn>
 801a778:	ec57 6b10 	vmov	r6, r7, d0
 801a77c:	2200      	movs	r2, #0
 801a77e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a782:	ee10 0a10 	vmov	r0, s0
 801a786:	4639      	mov	r1, r7
 801a788:	f7e5 ff36 	bl	80005f8 <__aeabi_dmul>
 801a78c:	ec41 0b10 	vmov	d0, r0, r1
 801a790:	f000 fd12 	bl	801b1b8 <floor>
 801a794:	2200      	movs	r2, #0
 801a796:	ec51 0b10 	vmov	r0, r1, d0
 801a79a:	4b7e      	ldr	r3, [pc, #504]	; (801a994 <__kernel_rem_pio2+0x32c>)
 801a79c:	f7e5 ff2c 	bl	80005f8 <__aeabi_dmul>
 801a7a0:	4602      	mov	r2, r0
 801a7a2:	460b      	mov	r3, r1
 801a7a4:	4630      	mov	r0, r6
 801a7a6:	4639      	mov	r1, r7
 801a7a8:	f7e5 fd6e 	bl	8000288 <__aeabi_dsub>
 801a7ac:	460f      	mov	r7, r1
 801a7ae:	4606      	mov	r6, r0
 801a7b0:	f7e6 f9d2 	bl	8000b58 <__aeabi_d2iz>
 801a7b4:	9006      	str	r0, [sp, #24]
 801a7b6:	f7e5 feb5 	bl	8000524 <__aeabi_i2d>
 801a7ba:	4602      	mov	r2, r0
 801a7bc:	460b      	mov	r3, r1
 801a7be:	4630      	mov	r0, r6
 801a7c0:	4639      	mov	r1, r7
 801a7c2:	f7e5 fd61 	bl	8000288 <__aeabi_dsub>
 801a7c6:	f1ba 0f00 	cmp.w	sl, #0
 801a7ca:	4606      	mov	r6, r0
 801a7cc:	460f      	mov	r7, r1
 801a7ce:	dd6c      	ble.n	801a8aa <__kernel_rem_pio2+0x242>
 801a7d0:	1e62      	subs	r2, r4, #1
 801a7d2:	ab0e      	add	r3, sp, #56	; 0x38
 801a7d4:	f1ca 0118 	rsb	r1, sl, #24
 801a7d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a7dc:	9d06      	ldr	r5, [sp, #24]
 801a7de:	fa40 f301 	asr.w	r3, r0, r1
 801a7e2:	441d      	add	r5, r3
 801a7e4:	408b      	lsls	r3, r1
 801a7e6:	1ac0      	subs	r0, r0, r3
 801a7e8:	ab0e      	add	r3, sp, #56	; 0x38
 801a7ea:	9506      	str	r5, [sp, #24]
 801a7ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a7f0:	f1ca 0317 	rsb	r3, sl, #23
 801a7f4:	fa40 f303 	asr.w	r3, r0, r3
 801a7f8:	9302      	str	r3, [sp, #8]
 801a7fa:	9b02      	ldr	r3, [sp, #8]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	dd62      	ble.n	801a8c6 <__kernel_rem_pio2+0x25e>
 801a800:	9b06      	ldr	r3, [sp, #24]
 801a802:	2200      	movs	r2, #0
 801a804:	3301      	adds	r3, #1
 801a806:	9306      	str	r3, [sp, #24]
 801a808:	4615      	mov	r5, r2
 801a80a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a80e:	4294      	cmp	r4, r2
 801a810:	f300 8095 	bgt.w	801a93e <__kernel_rem_pio2+0x2d6>
 801a814:	f1ba 0f00 	cmp.w	sl, #0
 801a818:	dd07      	ble.n	801a82a <__kernel_rem_pio2+0x1c2>
 801a81a:	f1ba 0f01 	cmp.w	sl, #1
 801a81e:	f000 80a2 	beq.w	801a966 <__kernel_rem_pio2+0x2fe>
 801a822:	f1ba 0f02 	cmp.w	sl, #2
 801a826:	f000 80c1 	beq.w	801a9ac <__kernel_rem_pio2+0x344>
 801a82a:	9b02      	ldr	r3, [sp, #8]
 801a82c:	2b02      	cmp	r3, #2
 801a82e:	d14a      	bne.n	801a8c6 <__kernel_rem_pio2+0x25e>
 801a830:	4632      	mov	r2, r6
 801a832:	463b      	mov	r3, r7
 801a834:	2000      	movs	r0, #0
 801a836:	4958      	ldr	r1, [pc, #352]	; (801a998 <__kernel_rem_pio2+0x330>)
 801a838:	f7e5 fd26 	bl	8000288 <__aeabi_dsub>
 801a83c:	4606      	mov	r6, r0
 801a83e:	460f      	mov	r7, r1
 801a840:	2d00      	cmp	r5, #0
 801a842:	d040      	beq.n	801a8c6 <__kernel_rem_pio2+0x25e>
 801a844:	4650      	mov	r0, sl
 801a846:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a988 <__kernel_rem_pio2+0x320>
 801a84a:	f000 fd3d 	bl	801b2c8 <scalbn>
 801a84e:	4630      	mov	r0, r6
 801a850:	4639      	mov	r1, r7
 801a852:	ec53 2b10 	vmov	r2, r3, d0
 801a856:	f7e5 fd17 	bl	8000288 <__aeabi_dsub>
 801a85a:	4606      	mov	r6, r0
 801a85c:	460f      	mov	r7, r1
 801a85e:	e032      	b.n	801a8c6 <__kernel_rem_pio2+0x25e>
 801a860:	2200      	movs	r2, #0
 801a862:	4b4e      	ldr	r3, [pc, #312]	; (801a99c <__kernel_rem_pio2+0x334>)
 801a864:	4640      	mov	r0, r8
 801a866:	4649      	mov	r1, r9
 801a868:	f7e5 fec6 	bl	80005f8 <__aeabi_dmul>
 801a86c:	f7e6 f974 	bl	8000b58 <__aeabi_d2iz>
 801a870:	f7e5 fe58 	bl	8000524 <__aeabi_i2d>
 801a874:	2200      	movs	r2, #0
 801a876:	4b4a      	ldr	r3, [pc, #296]	; (801a9a0 <__kernel_rem_pio2+0x338>)
 801a878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a87c:	f7e5 febc 	bl	80005f8 <__aeabi_dmul>
 801a880:	4602      	mov	r2, r0
 801a882:	460b      	mov	r3, r1
 801a884:	4640      	mov	r0, r8
 801a886:	4649      	mov	r1, r9
 801a888:	f7e5 fcfe 	bl	8000288 <__aeabi_dsub>
 801a88c:	f7e6 f964 	bl	8000b58 <__aeabi_d2iz>
 801a890:	ab0e      	add	r3, sp, #56	; 0x38
 801a892:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a896:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a89a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a89e:	f7e5 fcf5 	bl	800028c <__adddf3>
 801a8a2:	3501      	adds	r5, #1
 801a8a4:	4680      	mov	r8, r0
 801a8a6:	4689      	mov	r9, r1
 801a8a8:	e75e      	b.n	801a768 <__kernel_rem_pio2+0x100>
 801a8aa:	d105      	bne.n	801a8b8 <__kernel_rem_pio2+0x250>
 801a8ac:	1e63      	subs	r3, r4, #1
 801a8ae:	aa0e      	add	r2, sp, #56	; 0x38
 801a8b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a8b4:	15c3      	asrs	r3, r0, #23
 801a8b6:	e79f      	b.n	801a7f8 <__kernel_rem_pio2+0x190>
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	4b3a      	ldr	r3, [pc, #232]	; (801a9a4 <__kernel_rem_pio2+0x33c>)
 801a8bc:	f7e6 f922 	bl	8000b04 <__aeabi_dcmpge>
 801a8c0:	2800      	cmp	r0, #0
 801a8c2:	d139      	bne.n	801a938 <__kernel_rem_pio2+0x2d0>
 801a8c4:	9002      	str	r0, [sp, #8]
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	2300      	movs	r3, #0
 801a8ca:	4630      	mov	r0, r6
 801a8cc:	4639      	mov	r1, r7
 801a8ce:	f7e6 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 801a8d2:	2800      	cmp	r0, #0
 801a8d4:	f000 80c7 	beq.w	801aa66 <__kernel_rem_pio2+0x3fe>
 801a8d8:	1e65      	subs	r5, r4, #1
 801a8da:	462b      	mov	r3, r5
 801a8dc:	2200      	movs	r2, #0
 801a8de:	9904      	ldr	r1, [sp, #16]
 801a8e0:	428b      	cmp	r3, r1
 801a8e2:	da6a      	bge.n	801a9ba <__kernel_rem_pio2+0x352>
 801a8e4:	2a00      	cmp	r2, #0
 801a8e6:	f000 8088 	beq.w	801a9fa <__kernel_rem_pio2+0x392>
 801a8ea:	ab0e      	add	r3, sp, #56	; 0x38
 801a8ec:	f1aa 0a18 	sub.w	sl, sl, #24
 801a8f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	f000 80b4 	beq.w	801aa62 <__kernel_rem_pio2+0x3fa>
 801a8fa:	4650      	mov	r0, sl
 801a8fc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a988 <__kernel_rem_pio2+0x320>
 801a900:	f000 fce2 	bl	801b2c8 <scalbn>
 801a904:	00ec      	lsls	r4, r5, #3
 801a906:	ab72      	add	r3, sp, #456	; 0x1c8
 801a908:	191e      	adds	r6, r3, r4
 801a90a:	ec59 8b10 	vmov	r8, r9, d0
 801a90e:	f106 0a08 	add.w	sl, r6, #8
 801a912:	462f      	mov	r7, r5
 801a914:	2f00      	cmp	r7, #0
 801a916:	f280 80df 	bge.w	801aad8 <__kernel_rem_pio2+0x470>
 801a91a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a980 <__kernel_rem_pio2+0x318>
 801a91e:	f04f 0a00 	mov.w	sl, #0
 801a922:	eba5 030a 	sub.w	r3, r5, sl
 801a926:	2b00      	cmp	r3, #0
 801a928:	f2c0 810a 	blt.w	801ab40 <__kernel_rem_pio2+0x4d8>
 801a92c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a9a8 <__kernel_rem_pio2+0x340>
 801a930:	ec59 8b18 	vmov	r8, r9, d8
 801a934:	2700      	movs	r7, #0
 801a936:	e0f5      	b.n	801ab24 <__kernel_rem_pio2+0x4bc>
 801a938:	2302      	movs	r3, #2
 801a93a:	9302      	str	r3, [sp, #8]
 801a93c:	e760      	b.n	801a800 <__kernel_rem_pio2+0x198>
 801a93e:	ab0e      	add	r3, sp, #56	; 0x38
 801a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a944:	b94d      	cbnz	r5, 801a95a <__kernel_rem_pio2+0x2f2>
 801a946:	b12b      	cbz	r3, 801a954 <__kernel_rem_pio2+0x2ec>
 801a948:	a80e      	add	r0, sp, #56	; 0x38
 801a94a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a94e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a952:	2301      	movs	r3, #1
 801a954:	3201      	adds	r2, #1
 801a956:	461d      	mov	r5, r3
 801a958:	e759      	b.n	801a80e <__kernel_rem_pio2+0x1a6>
 801a95a:	a80e      	add	r0, sp, #56	; 0x38
 801a95c:	1acb      	subs	r3, r1, r3
 801a95e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a962:	462b      	mov	r3, r5
 801a964:	e7f6      	b.n	801a954 <__kernel_rem_pio2+0x2ec>
 801a966:	1e62      	subs	r2, r4, #1
 801a968:	ab0e      	add	r3, sp, #56	; 0x38
 801a96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a96e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a972:	a90e      	add	r1, sp, #56	; 0x38
 801a974:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a978:	e757      	b.n	801a82a <__kernel_rem_pio2+0x1c2>
 801a97a:	bf00      	nop
 801a97c:	f3af 8000 	nop.w
	...
 801a98c:	3ff00000 	.word	0x3ff00000
 801a990:	0801bb50 	.word	0x0801bb50
 801a994:	40200000 	.word	0x40200000
 801a998:	3ff00000 	.word	0x3ff00000
 801a99c:	3e700000 	.word	0x3e700000
 801a9a0:	41700000 	.word	0x41700000
 801a9a4:	3fe00000 	.word	0x3fe00000
 801a9a8:	0801bb10 	.word	0x0801bb10
 801a9ac:	1e62      	subs	r2, r4, #1
 801a9ae:	ab0e      	add	r3, sp, #56	; 0x38
 801a9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a9b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a9b8:	e7db      	b.n	801a972 <__kernel_rem_pio2+0x30a>
 801a9ba:	a90e      	add	r1, sp, #56	; 0x38
 801a9bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a9c0:	3b01      	subs	r3, #1
 801a9c2:	430a      	orrs	r2, r1
 801a9c4:	e78b      	b.n	801a8de <__kernel_rem_pio2+0x276>
 801a9c6:	3301      	adds	r3, #1
 801a9c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a9cc:	2900      	cmp	r1, #0
 801a9ce:	d0fa      	beq.n	801a9c6 <__kernel_rem_pio2+0x35e>
 801a9d0:	9a08      	ldr	r2, [sp, #32]
 801a9d2:	4422      	add	r2, r4
 801a9d4:	00d2      	lsls	r2, r2, #3
 801a9d6:	a922      	add	r1, sp, #136	; 0x88
 801a9d8:	18e3      	adds	r3, r4, r3
 801a9da:	9206      	str	r2, [sp, #24]
 801a9dc:	440a      	add	r2, r1
 801a9de:	9302      	str	r3, [sp, #8]
 801a9e0:	f10b 0108 	add.w	r1, fp, #8
 801a9e4:	f102 0308 	add.w	r3, r2, #8
 801a9e8:	1c66      	adds	r6, r4, #1
 801a9ea:	910a      	str	r1, [sp, #40]	; 0x28
 801a9ec:	2500      	movs	r5, #0
 801a9ee:	930d      	str	r3, [sp, #52]	; 0x34
 801a9f0:	9b02      	ldr	r3, [sp, #8]
 801a9f2:	42b3      	cmp	r3, r6
 801a9f4:	da04      	bge.n	801aa00 <__kernel_rem_pio2+0x398>
 801a9f6:	461c      	mov	r4, r3
 801a9f8:	e6a6      	b.n	801a748 <__kernel_rem_pio2+0xe0>
 801a9fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9fc:	2301      	movs	r3, #1
 801a9fe:	e7e3      	b.n	801a9c8 <__kernel_rem_pio2+0x360>
 801aa00:	9b06      	ldr	r3, [sp, #24]
 801aa02:	18ef      	adds	r7, r5, r3
 801aa04:	ab22      	add	r3, sp, #136	; 0x88
 801aa06:	441f      	add	r7, r3
 801aa08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa0a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801aa0e:	f7e5 fd89 	bl	8000524 <__aeabi_i2d>
 801aa12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa14:	461c      	mov	r4, r3
 801aa16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa18:	e9c7 0100 	strd	r0, r1, [r7]
 801aa1c:	eb03 0b05 	add.w	fp, r3, r5
 801aa20:	2700      	movs	r7, #0
 801aa22:	f04f 0800 	mov.w	r8, #0
 801aa26:	f04f 0900 	mov.w	r9, #0
 801aa2a:	9b07      	ldr	r3, [sp, #28]
 801aa2c:	429f      	cmp	r7, r3
 801aa2e:	dd08      	ble.n	801aa42 <__kernel_rem_pio2+0x3da>
 801aa30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa32:	aa72      	add	r2, sp, #456	; 0x1c8
 801aa34:	18eb      	adds	r3, r5, r3
 801aa36:	4413      	add	r3, r2
 801aa38:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801aa3c:	3601      	adds	r6, #1
 801aa3e:	3508      	adds	r5, #8
 801aa40:	e7d6      	b.n	801a9f0 <__kernel_rem_pio2+0x388>
 801aa42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801aa46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801aa4a:	f7e5 fdd5 	bl	80005f8 <__aeabi_dmul>
 801aa4e:	4602      	mov	r2, r0
 801aa50:	460b      	mov	r3, r1
 801aa52:	4640      	mov	r0, r8
 801aa54:	4649      	mov	r1, r9
 801aa56:	f7e5 fc19 	bl	800028c <__adddf3>
 801aa5a:	3701      	adds	r7, #1
 801aa5c:	4680      	mov	r8, r0
 801aa5e:	4689      	mov	r9, r1
 801aa60:	e7e3      	b.n	801aa2a <__kernel_rem_pio2+0x3c2>
 801aa62:	3d01      	subs	r5, #1
 801aa64:	e741      	b.n	801a8ea <__kernel_rem_pio2+0x282>
 801aa66:	f1ca 0000 	rsb	r0, sl, #0
 801aa6a:	ec47 6b10 	vmov	d0, r6, r7
 801aa6e:	f000 fc2b 	bl	801b2c8 <scalbn>
 801aa72:	ec57 6b10 	vmov	r6, r7, d0
 801aa76:	2200      	movs	r2, #0
 801aa78:	4b99      	ldr	r3, [pc, #612]	; (801ace0 <__kernel_rem_pio2+0x678>)
 801aa7a:	ee10 0a10 	vmov	r0, s0
 801aa7e:	4639      	mov	r1, r7
 801aa80:	f7e6 f840 	bl	8000b04 <__aeabi_dcmpge>
 801aa84:	b1f8      	cbz	r0, 801aac6 <__kernel_rem_pio2+0x45e>
 801aa86:	2200      	movs	r2, #0
 801aa88:	4b96      	ldr	r3, [pc, #600]	; (801ace4 <__kernel_rem_pio2+0x67c>)
 801aa8a:	4630      	mov	r0, r6
 801aa8c:	4639      	mov	r1, r7
 801aa8e:	f7e5 fdb3 	bl	80005f8 <__aeabi_dmul>
 801aa92:	f7e6 f861 	bl	8000b58 <__aeabi_d2iz>
 801aa96:	4680      	mov	r8, r0
 801aa98:	f7e5 fd44 	bl	8000524 <__aeabi_i2d>
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	4b90      	ldr	r3, [pc, #576]	; (801ace0 <__kernel_rem_pio2+0x678>)
 801aaa0:	f7e5 fdaa 	bl	80005f8 <__aeabi_dmul>
 801aaa4:	460b      	mov	r3, r1
 801aaa6:	4602      	mov	r2, r0
 801aaa8:	4639      	mov	r1, r7
 801aaaa:	4630      	mov	r0, r6
 801aaac:	f7e5 fbec 	bl	8000288 <__aeabi_dsub>
 801aab0:	f7e6 f852 	bl	8000b58 <__aeabi_d2iz>
 801aab4:	1c65      	adds	r5, r4, #1
 801aab6:	ab0e      	add	r3, sp, #56	; 0x38
 801aab8:	f10a 0a18 	add.w	sl, sl, #24
 801aabc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801aac0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801aac4:	e719      	b.n	801a8fa <__kernel_rem_pio2+0x292>
 801aac6:	4630      	mov	r0, r6
 801aac8:	4639      	mov	r1, r7
 801aaca:	f7e6 f845 	bl	8000b58 <__aeabi_d2iz>
 801aace:	ab0e      	add	r3, sp, #56	; 0x38
 801aad0:	4625      	mov	r5, r4
 801aad2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801aad6:	e710      	b.n	801a8fa <__kernel_rem_pio2+0x292>
 801aad8:	ab0e      	add	r3, sp, #56	; 0x38
 801aada:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801aade:	f7e5 fd21 	bl	8000524 <__aeabi_i2d>
 801aae2:	4642      	mov	r2, r8
 801aae4:	464b      	mov	r3, r9
 801aae6:	f7e5 fd87 	bl	80005f8 <__aeabi_dmul>
 801aaea:	2200      	movs	r2, #0
 801aaec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801aaf0:	4b7c      	ldr	r3, [pc, #496]	; (801ace4 <__kernel_rem_pio2+0x67c>)
 801aaf2:	4640      	mov	r0, r8
 801aaf4:	4649      	mov	r1, r9
 801aaf6:	f7e5 fd7f 	bl	80005f8 <__aeabi_dmul>
 801aafa:	3f01      	subs	r7, #1
 801aafc:	4680      	mov	r8, r0
 801aafe:	4689      	mov	r9, r1
 801ab00:	e708      	b.n	801a914 <__kernel_rem_pio2+0x2ac>
 801ab02:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab0a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801ab0e:	f7e5 fd73 	bl	80005f8 <__aeabi_dmul>
 801ab12:	4602      	mov	r2, r0
 801ab14:	460b      	mov	r3, r1
 801ab16:	4640      	mov	r0, r8
 801ab18:	4649      	mov	r1, r9
 801ab1a:	f7e5 fbb7 	bl	800028c <__adddf3>
 801ab1e:	3701      	adds	r7, #1
 801ab20:	4680      	mov	r8, r0
 801ab22:	4689      	mov	r9, r1
 801ab24:	9b04      	ldr	r3, [sp, #16]
 801ab26:	429f      	cmp	r7, r3
 801ab28:	dc01      	bgt.n	801ab2e <__kernel_rem_pio2+0x4c6>
 801ab2a:	45ba      	cmp	sl, r7
 801ab2c:	dae9      	bge.n	801ab02 <__kernel_rem_pio2+0x49a>
 801ab2e:	ab4a      	add	r3, sp, #296	; 0x128
 801ab30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ab34:	e9c3 8900 	strd	r8, r9, [r3]
 801ab38:	f10a 0a01 	add.w	sl, sl, #1
 801ab3c:	3e08      	subs	r6, #8
 801ab3e:	e6f0      	b.n	801a922 <__kernel_rem_pio2+0x2ba>
 801ab40:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801ab42:	2b03      	cmp	r3, #3
 801ab44:	d85b      	bhi.n	801abfe <__kernel_rem_pio2+0x596>
 801ab46:	e8df f003 	tbb	[pc, r3]
 801ab4a:	264a      	.short	0x264a
 801ab4c:	0226      	.short	0x0226
 801ab4e:	ab9a      	add	r3, sp, #616	; 0x268
 801ab50:	441c      	add	r4, r3
 801ab52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ab56:	46a2      	mov	sl, r4
 801ab58:	46ab      	mov	fp, r5
 801ab5a:	f1bb 0f00 	cmp.w	fp, #0
 801ab5e:	dc6c      	bgt.n	801ac3a <__kernel_rem_pio2+0x5d2>
 801ab60:	46a2      	mov	sl, r4
 801ab62:	46ab      	mov	fp, r5
 801ab64:	f1bb 0f01 	cmp.w	fp, #1
 801ab68:	f300 8086 	bgt.w	801ac78 <__kernel_rem_pio2+0x610>
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	2100      	movs	r1, #0
 801ab70:	2d01      	cmp	r5, #1
 801ab72:	f300 80a0 	bgt.w	801acb6 <__kernel_rem_pio2+0x64e>
 801ab76:	9b02      	ldr	r3, [sp, #8]
 801ab78:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801ab7c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	f040 809e 	bne.w	801acc2 <__kernel_rem_pio2+0x65a>
 801ab86:	9b01      	ldr	r3, [sp, #4]
 801ab88:	e9c3 7800 	strd	r7, r8, [r3]
 801ab8c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ab90:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ab94:	e033      	b.n	801abfe <__kernel_rem_pio2+0x596>
 801ab96:	3408      	adds	r4, #8
 801ab98:	ab4a      	add	r3, sp, #296	; 0x128
 801ab9a:	441c      	add	r4, r3
 801ab9c:	462e      	mov	r6, r5
 801ab9e:	2000      	movs	r0, #0
 801aba0:	2100      	movs	r1, #0
 801aba2:	2e00      	cmp	r6, #0
 801aba4:	da3a      	bge.n	801ac1c <__kernel_rem_pio2+0x5b4>
 801aba6:	9b02      	ldr	r3, [sp, #8]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d03d      	beq.n	801ac28 <__kernel_rem_pio2+0x5c0>
 801abac:	4602      	mov	r2, r0
 801abae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801abb2:	9c01      	ldr	r4, [sp, #4]
 801abb4:	e9c4 2300 	strd	r2, r3, [r4]
 801abb8:	4602      	mov	r2, r0
 801abba:	460b      	mov	r3, r1
 801abbc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801abc0:	f7e5 fb62 	bl	8000288 <__aeabi_dsub>
 801abc4:	ae4c      	add	r6, sp, #304	; 0x130
 801abc6:	2401      	movs	r4, #1
 801abc8:	42a5      	cmp	r5, r4
 801abca:	da30      	bge.n	801ac2e <__kernel_rem_pio2+0x5c6>
 801abcc:	9b02      	ldr	r3, [sp, #8]
 801abce:	b113      	cbz	r3, 801abd6 <__kernel_rem_pio2+0x56e>
 801abd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801abd4:	4619      	mov	r1, r3
 801abd6:	9b01      	ldr	r3, [sp, #4]
 801abd8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801abdc:	e00f      	b.n	801abfe <__kernel_rem_pio2+0x596>
 801abde:	ab9a      	add	r3, sp, #616	; 0x268
 801abe0:	441c      	add	r4, r3
 801abe2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801abe6:	2000      	movs	r0, #0
 801abe8:	2100      	movs	r1, #0
 801abea:	2d00      	cmp	r5, #0
 801abec:	da10      	bge.n	801ac10 <__kernel_rem_pio2+0x5a8>
 801abee:	9b02      	ldr	r3, [sp, #8]
 801abf0:	b113      	cbz	r3, 801abf8 <__kernel_rem_pio2+0x590>
 801abf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801abf6:	4619      	mov	r1, r3
 801abf8:	9b01      	ldr	r3, [sp, #4]
 801abfa:	e9c3 0100 	strd	r0, r1, [r3]
 801abfe:	9b06      	ldr	r3, [sp, #24]
 801ac00:	f003 0007 	and.w	r0, r3, #7
 801ac04:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801ac08:	ecbd 8b02 	vpop	{d8}
 801ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac10:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ac14:	f7e5 fb3a 	bl	800028c <__adddf3>
 801ac18:	3d01      	subs	r5, #1
 801ac1a:	e7e6      	b.n	801abea <__kernel_rem_pio2+0x582>
 801ac1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ac20:	f7e5 fb34 	bl	800028c <__adddf3>
 801ac24:	3e01      	subs	r6, #1
 801ac26:	e7bc      	b.n	801aba2 <__kernel_rem_pio2+0x53a>
 801ac28:	4602      	mov	r2, r0
 801ac2a:	460b      	mov	r3, r1
 801ac2c:	e7c1      	b.n	801abb2 <__kernel_rem_pio2+0x54a>
 801ac2e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801ac32:	f7e5 fb2b 	bl	800028c <__adddf3>
 801ac36:	3401      	adds	r4, #1
 801ac38:	e7c6      	b.n	801abc8 <__kernel_rem_pio2+0x560>
 801ac3a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801ac3e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ac42:	4640      	mov	r0, r8
 801ac44:	ec53 2b17 	vmov	r2, r3, d7
 801ac48:	4649      	mov	r1, r9
 801ac4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ac4e:	f7e5 fb1d 	bl	800028c <__adddf3>
 801ac52:	4602      	mov	r2, r0
 801ac54:	460b      	mov	r3, r1
 801ac56:	4606      	mov	r6, r0
 801ac58:	460f      	mov	r7, r1
 801ac5a:	4640      	mov	r0, r8
 801ac5c:	4649      	mov	r1, r9
 801ac5e:	f7e5 fb13 	bl	8000288 <__aeabi_dsub>
 801ac62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac66:	f7e5 fb11 	bl	800028c <__adddf3>
 801ac6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ac6e:	e9ca 0100 	strd	r0, r1, [sl]
 801ac72:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801ac76:	e770      	b.n	801ab5a <__kernel_rem_pio2+0x4f2>
 801ac78:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801ac7c:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ac80:	4630      	mov	r0, r6
 801ac82:	ec53 2b17 	vmov	r2, r3, d7
 801ac86:	4639      	mov	r1, r7
 801ac88:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ac8c:	f7e5 fafe 	bl	800028c <__adddf3>
 801ac90:	4602      	mov	r2, r0
 801ac92:	460b      	mov	r3, r1
 801ac94:	4680      	mov	r8, r0
 801ac96:	4689      	mov	r9, r1
 801ac98:	4630      	mov	r0, r6
 801ac9a:	4639      	mov	r1, r7
 801ac9c:	f7e5 faf4 	bl	8000288 <__aeabi_dsub>
 801aca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aca4:	f7e5 faf2 	bl	800028c <__adddf3>
 801aca8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801acac:	e9ca 0100 	strd	r0, r1, [sl]
 801acb0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801acb4:	e756      	b.n	801ab64 <__kernel_rem_pio2+0x4fc>
 801acb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801acba:	f7e5 fae7 	bl	800028c <__adddf3>
 801acbe:	3d01      	subs	r5, #1
 801acc0:	e756      	b.n	801ab70 <__kernel_rem_pio2+0x508>
 801acc2:	9b01      	ldr	r3, [sp, #4]
 801acc4:	9a01      	ldr	r2, [sp, #4]
 801acc6:	601f      	str	r7, [r3, #0]
 801acc8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801accc:	605c      	str	r4, [r3, #4]
 801acce:	609d      	str	r5, [r3, #8]
 801acd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801acd4:	60d3      	str	r3, [r2, #12]
 801acd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801acda:	6110      	str	r0, [r2, #16]
 801acdc:	6153      	str	r3, [r2, #20]
 801acde:	e78e      	b.n	801abfe <__kernel_rem_pio2+0x596>
 801ace0:	41700000 	.word	0x41700000
 801ace4:	3e700000 	.word	0x3e700000

0801ace8 <__kernel_sin>:
 801ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acec:	ec55 4b10 	vmov	r4, r5, d0
 801acf0:	b085      	sub	sp, #20
 801acf2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801acf6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801acfa:	ed8d 1b00 	vstr	d1, [sp]
 801acfe:	9002      	str	r0, [sp, #8]
 801ad00:	da06      	bge.n	801ad10 <__kernel_sin+0x28>
 801ad02:	ee10 0a10 	vmov	r0, s0
 801ad06:	4629      	mov	r1, r5
 801ad08:	f7e5 ff26 	bl	8000b58 <__aeabi_d2iz>
 801ad0c:	2800      	cmp	r0, #0
 801ad0e:	d051      	beq.n	801adb4 <__kernel_sin+0xcc>
 801ad10:	4622      	mov	r2, r4
 801ad12:	462b      	mov	r3, r5
 801ad14:	4620      	mov	r0, r4
 801ad16:	4629      	mov	r1, r5
 801ad18:	f7e5 fc6e 	bl	80005f8 <__aeabi_dmul>
 801ad1c:	4682      	mov	sl, r0
 801ad1e:	468b      	mov	fp, r1
 801ad20:	4602      	mov	r2, r0
 801ad22:	460b      	mov	r3, r1
 801ad24:	4620      	mov	r0, r4
 801ad26:	4629      	mov	r1, r5
 801ad28:	f7e5 fc66 	bl	80005f8 <__aeabi_dmul>
 801ad2c:	a341      	add	r3, pc, #260	; (adr r3, 801ae34 <__kernel_sin+0x14c>)
 801ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad32:	4680      	mov	r8, r0
 801ad34:	4689      	mov	r9, r1
 801ad36:	4650      	mov	r0, sl
 801ad38:	4659      	mov	r1, fp
 801ad3a:	f7e5 fc5d 	bl	80005f8 <__aeabi_dmul>
 801ad3e:	a33f      	add	r3, pc, #252	; (adr r3, 801ae3c <__kernel_sin+0x154>)
 801ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad44:	f7e5 faa0 	bl	8000288 <__aeabi_dsub>
 801ad48:	4652      	mov	r2, sl
 801ad4a:	465b      	mov	r3, fp
 801ad4c:	f7e5 fc54 	bl	80005f8 <__aeabi_dmul>
 801ad50:	a33c      	add	r3, pc, #240	; (adr r3, 801ae44 <__kernel_sin+0x15c>)
 801ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad56:	f7e5 fa99 	bl	800028c <__adddf3>
 801ad5a:	4652      	mov	r2, sl
 801ad5c:	465b      	mov	r3, fp
 801ad5e:	f7e5 fc4b 	bl	80005f8 <__aeabi_dmul>
 801ad62:	a33a      	add	r3, pc, #232	; (adr r3, 801ae4c <__kernel_sin+0x164>)
 801ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad68:	f7e5 fa8e 	bl	8000288 <__aeabi_dsub>
 801ad6c:	4652      	mov	r2, sl
 801ad6e:	465b      	mov	r3, fp
 801ad70:	f7e5 fc42 	bl	80005f8 <__aeabi_dmul>
 801ad74:	a337      	add	r3, pc, #220	; (adr r3, 801ae54 <__kernel_sin+0x16c>)
 801ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad7a:	f7e5 fa87 	bl	800028c <__adddf3>
 801ad7e:	9b02      	ldr	r3, [sp, #8]
 801ad80:	4606      	mov	r6, r0
 801ad82:	460f      	mov	r7, r1
 801ad84:	b9db      	cbnz	r3, 801adbe <__kernel_sin+0xd6>
 801ad86:	4602      	mov	r2, r0
 801ad88:	460b      	mov	r3, r1
 801ad8a:	4650      	mov	r0, sl
 801ad8c:	4659      	mov	r1, fp
 801ad8e:	f7e5 fc33 	bl	80005f8 <__aeabi_dmul>
 801ad92:	a325      	add	r3, pc, #148	; (adr r3, 801ae28 <__kernel_sin+0x140>)
 801ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad98:	f7e5 fa76 	bl	8000288 <__aeabi_dsub>
 801ad9c:	4642      	mov	r2, r8
 801ad9e:	464b      	mov	r3, r9
 801ada0:	f7e5 fc2a 	bl	80005f8 <__aeabi_dmul>
 801ada4:	4602      	mov	r2, r0
 801ada6:	460b      	mov	r3, r1
 801ada8:	4620      	mov	r0, r4
 801adaa:	4629      	mov	r1, r5
 801adac:	f7e5 fa6e 	bl	800028c <__adddf3>
 801adb0:	4604      	mov	r4, r0
 801adb2:	460d      	mov	r5, r1
 801adb4:	ec45 4b10 	vmov	d0, r4, r5
 801adb8:	b005      	add	sp, #20
 801adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adbe:	2200      	movs	r2, #0
 801adc0:	4b1b      	ldr	r3, [pc, #108]	; (801ae30 <__kernel_sin+0x148>)
 801adc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801adc6:	f7e5 fc17 	bl	80005f8 <__aeabi_dmul>
 801adca:	4632      	mov	r2, r6
 801adcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801add0:	463b      	mov	r3, r7
 801add2:	4640      	mov	r0, r8
 801add4:	4649      	mov	r1, r9
 801add6:	f7e5 fc0f 	bl	80005f8 <__aeabi_dmul>
 801adda:	4602      	mov	r2, r0
 801addc:	460b      	mov	r3, r1
 801adde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ade2:	f7e5 fa51 	bl	8000288 <__aeabi_dsub>
 801ade6:	4652      	mov	r2, sl
 801ade8:	465b      	mov	r3, fp
 801adea:	f7e5 fc05 	bl	80005f8 <__aeabi_dmul>
 801adee:	e9dd 2300 	ldrd	r2, r3, [sp]
 801adf2:	f7e5 fa49 	bl	8000288 <__aeabi_dsub>
 801adf6:	a30c      	add	r3, pc, #48	; (adr r3, 801ae28 <__kernel_sin+0x140>)
 801adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adfc:	4606      	mov	r6, r0
 801adfe:	460f      	mov	r7, r1
 801ae00:	4640      	mov	r0, r8
 801ae02:	4649      	mov	r1, r9
 801ae04:	f7e5 fbf8 	bl	80005f8 <__aeabi_dmul>
 801ae08:	4602      	mov	r2, r0
 801ae0a:	460b      	mov	r3, r1
 801ae0c:	4630      	mov	r0, r6
 801ae0e:	4639      	mov	r1, r7
 801ae10:	f7e5 fa3c 	bl	800028c <__adddf3>
 801ae14:	4602      	mov	r2, r0
 801ae16:	460b      	mov	r3, r1
 801ae18:	4620      	mov	r0, r4
 801ae1a:	4629      	mov	r1, r5
 801ae1c:	f7e5 fa34 	bl	8000288 <__aeabi_dsub>
 801ae20:	e7c6      	b.n	801adb0 <__kernel_sin+0xc8>
 801ae22:	bf00      	nop
 801ae24:	f3af 8000 	nop.w
 801ae28:	55555549 	.word	0x55555549
 801ae2c:	3fc55555 	.word	0x3fc55555
 801ae30:	3fe00000 	.word	0x3fe00000
 801ae34:	5acfd57c 	.word	0x5acfd57c
 801ae38:	3de5d93a 	.word	0x3de5d93a
 801ae3c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ae40:	3e5ae5e6 	.word	0x3e5ae5e6
 801ae44:	57b1fe7d 	.word	0x57b1fe7d
 801ae48:	3ec71de3 	.word	0x3ec71de3
 801ae4c:	19c161d5 	.word	0x19c161d5
 801ae50:	3f2a01a0 	.word	0x3f2a01a0
 801ae54:	1110f8a6 	.word	0x1110f8a6
 801ae58:	3f811111 	.word	0x3f811111
 801ae5c:	00000000 	.word	0x00000000

0801ae60 <atan>:
 801ae60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae64:	ec55 4b10 	vmov	r4, r5, d0
 801ae68:	4bc3      	ldr	r3, [pc, #780]	; (801b178 <atan+0x318>)
 801ae6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ae6e:	429e      	cmp	r6, r3
 801ae70:	46ab      	mov	fp, r5
 801ae72:	dd18      	ble.n	801aea6 <atan+0x46>
 801ae74:	4bc1      	ldr	r3, [pc, #772]	; (801b17c <atan+0x31c>)
 801ae76:	429e      	cmp	r6, r3
 801ae78:	dc01      	bgt.n	801ae7e <atan+0x1e>
 801ae7a:	d109      	bne.n	801ae90 <atan+0x30>
 801ae7c:	b144      	cbz	r4, 801ae90 <atan+0x30>
 801ae7e:	4622      	mov	r2, r4
 801ae80:	462b      	mov	r3, r5
 801ae82:	4620      	mov	r0, r4
 801ae84:	4629      	mov	r1, r5
 801ae86:	f7e5 fa01 	bl	800028c <__adddf3>
 801ae8a:	4604      	mov	r4, r0
 801ae8c:	460d      	mov	r5, r1
 801ae8e:	e006      	b.n	801ae9e <atan+0x3e>
 801ae90:	f1bb 0f00 	cmp.w	fp, #0
 801ae94:	f340 8131 	ble.w	801b0fa <atan+0x29a>
 801ae98:	a59b      	add	r5, pc, #620	; (adr r5, 801b108 <atan+0x2a8>)
 801ae9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ae9e:	ec45 4b10 	vmov	d0, r4, r5
 801aea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea6:	4bb6      	ldr	r3, [pc, #728]	; (801b180 <atan+0x320>)
 801aea8:	429e      	cmp	r6, r3
 801aeaa:	dc14      	bgt.n	801aed6 <atan+0x76>
 801aeac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801aeb0:	429e      	cmp	r6, r3
 801aeb2:	dc0d      	bgt.n	801aed0 <atan+0x70>
 801aeb4:	a396      	add	r3, pc, #600	; (adr r3, 801b110 <atan+0x2b0>)
 801aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeba:	ee10 0a10 	vmov	r0, s0
 801aebe:	4629      	mov	r1, r5
 801aec0:	f7e5 f9e4 	bl	800028c <__adddf3>
 801aec4:	2200      	movs	r2, #0
 801aec6:	4baf      	ldr	r3, [pc, #700]	; (801b184 <atan+0x324>)
 801aec8:	f7e5 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 801aecc:	2800      	cmp	r0, #0
 801aece:	d1e6      	bne.n	801ae9e <atan+0x3e>
 801aed0:	f04f 3aff 	mov.w	sl, #4294967295
 801aed4:	e02b      	b.n	801af2e <atan+0xce>
 801aed6:	f000 f963 	bl	801b1a0 <fabs>
 801aeda:	4bab      	ldr	r3, [pc, #684]	; (801b188 <atan+0x328>)
 801aedc:	429e      	cmp	r6, r3
 801aede:	ec55 4b10 	vmov	r4, r5, d0
 801aee2:	f300 80bf 	bgt.w	801b064 <atan+0x204>
 801aee6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801aeea:	429e      	cmp	r6, r3
 801aeec:	f300 80a0 	bgt.w	801b030 <atan+0x1d0>
 801aef0:	ee10 2a10 	vmov	r2, s0
 801aef4:	ee10 0a10 	vmov	r0, s0
 801aef8:	462b      	mov	r3, r5
 801aefa:	4629      	mov	r1, r5
 801aefc:	f7e5 f9c6 	bl	800028c <__adddf3>
 801af00:	2200      	movs	r2, #0
 801af02:	4ba0      	ldr	r3, [pc, #640]	; (801b184 <atan+0x324>)
 801af04:	f7e5 f9c0 	bl	8000288 <__aeabi_dsub>
 801af08:	2200      	movs	r2, #0
 801af0a:	4606      	mov	r6, r0
 801af0c:	460f      	mov	r7, r1
 801af0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801af12:	4620      	mov	r0, r4
 801af14:	4629      	mov	r1, r5
 801af16:	f7e5 f9b9 	bl	800028c <__adddf3>
 801af1a:	4602      	mov	r2, r0
 801af1c:	460b      	mov	r3, r1
 801af1e:	4630      	mov	r0, r6
 801af20:	4639      	mov	r1, r7
 801af22:	f7e5 fc93 	bl	800084c <__aeabi_ddiv>
 801af26:	f04f 0a00 	mov.w	sl, #0
 801af2a:	4604      	mov	r4, r0
 801af2c:	460d      	mov	r5, r1
 801af2e:	4622      	mov	r2, r4
 801af30:	462b      	mov	r3, r5
 801af32:	4620      	mov	r0, r4
 801af34:	4629      	mov	r1, r5
 801af36:	f7e5 fb5f 	bl	80005f8 <__aeabi_dmul>
 801af3a:	4602      	mov	r2, r0
 801af3c:	460b      	mov	r3, r1
 801af3e:	4680      	mov	r8, r0
 801af40:	4689      	mov	r9, r1
 801af42:	f7e5 fb59 	bl	80005f8 <__aeabi_dmul>
 801af46:	a374      	add	r3, pc, #464	; (adr r3, 801b118 <atan+0x2b8>)
 801af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af4c:	4606      	mov	r6, r0
 801af4e:	460f      	mov	r7, r1
 801af50:	f7e5 fb52 	bl	80005f8 <__aeabi_dmul>
 801af54:	a372      	add	r3, pc, #456	; (adr r3, 801b120 <atan+0x2c0>)
 801af56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af5a:	f7e5 f997 	bl	800028c <__adddf3>
 801af5e:	4632      	mov	r2, r6
 801af60:	463b      	mov	r3, r7
 801af62:	f7e5 fb49 	bl	80005f8 <__aeabi_dmul>
 801af66:	a370      	add	r3, pc, #448	; (adr r3, 801b128 <atan+0x2c8>)
 801af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af6c:	f7e5 f98e 	bl	800028c <__adddf3>
 801af70:	4632      	mov	r2, r6
 801af72:	463b      	mov	r3, r7
 801af74:	f7e5 fb40 	bl	80005f8 <__aeabi_dmul>
 801af78:	a36d      	add	r3, pc, #436	; (adr r3, 801b130 <atan+0x2d0>)
 801af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af7e:	f7e5 f985 	bl	800028c <__adddf3>
 801af82:	4632      	mov	r2, r6
 801af84:	463b      	mov	r3, r7
 801af86:	f7e5 fb37 	bl	80005f8 <__aeabi_dmul>
 801af8a:	a36b      	add	r3, pc, #428	; (adr r3, 801b138 <atan+0x2d8>)
 801af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af90:	f7e5 f97c 	bl	800028c <__adddf3>
 801af94:	4632      	mov	r2, r6
 801af96:	463b      	mov	r3, r7
 801af98:	f7e5 fb2e 	bl	80005f8 <__aeabi_dmul>
 801af9c:	a368      	add	r3, pc, #416	; (adr r3, 801b140 <atan+0x2e0>)
 801af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa2:	f7e5 f973 	bl	800028c <__adddf3>
 801afa6:	4642      	mov	r2, r8
 801afa8:	464b      	mov	r3, r9
 801afaa:	f7e5 fb25 	bl	80005f8 <__aeabi_dmul>
 801afae:	a366      	add	r3, pc, #408	; (adr r3, 801b148 <atan+0x2e8>)
 801afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afb4:	4680      	mov	r8, r0
 801afb6:	4689      	mov	r9, r1
 801afb8:	4630      	mov	r0, r6
 801afba:	4639      	mov	r1, r7
 801afbc:	f7e5 fb1c 	bl	80005f8 <__aeabi_dmul>
 801afc0:	a363      	add	r3, pc, #396	; (adr r3, 801b150 <atan+0x2f0>)
 801afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc6:	f7e5 f95f 	bl	8000288 <__aeabi_dsub>
 801afca:	4632      	mov	r2, r6
 801afcc:	463b      	mov	r3, r7
 801afce:	f7e5 fb13 	bl	80005f8 <__aeabi_dmul>
 801afd2:	a361      	add	r3, pc, #388	; (adr r3, 801b158 <atan+0x2f8>)
 801afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd8:	f7e5 f956 	bl	8000288 <__aeabi_dsub>
 801afdc:	4632      	mov	r2, r6
 801afde:	463b      	mov	r3, r7
 801afe0:	f7e5 fb0a 	bl	80005f8 <__aeabi_dmul>
 801afe4:	a35e      	add	r3, pc, #376	; (adr r3, 801b160 <atan+0x300>)
 801afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afea:	f7e5 f94d 	bl	8000288 <__aeabi_dsub>
 801afee:	4632      	mov	r2, r6
 801aff0:	463b      	mov	r3, r7
 801aff2:	f7e5 fb01 	bl	80005f8 <__aeabi_dmul>
 801aff6:	a35c      	add	r3, pc, #368	; (adr r3, 801b168 <atan+0x308>)
 801aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801affc:	f7e5 f944 	bl	8000288 <__aeabi_dsub>
 801b000:	4632      	mov	r2, r6
 801b002:	463b      	mov	r3, r7
 801b004:	f7e5 faf8 	bl	80005f8 <__aeabi_dmul>
 801b008:	4602      	mov	r2, r0
 801b00a:	460b      	mov	r3, r1
 801b00c:	4640      	mov	r0, r8
 801b00e:	4649      	mov	r1, r9
 801b010:	f7e5 f93c 	bl	800028c <__adddf3>
 801b014:	4622      	mov	r2, r4
 801b016:	462b      	mov	r3, r5
 801b018:	f7e5 faee 	bl	80005f8 <__aeabi_dmul>
 801b01c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b020:	4602      	mov	r2, r0
 801b022:	460b      	mov	r3, r1
 801b024:	d14b      	bne.n	801b0be <atan+0x25e>
 801b026:	4620      	mov	r0, r4
 801b028:	4629      	mov	r1, r5
 801b02a:	f7e5 f92d 	bl	8000288 <__aeabi_dsub>
 801b02e:	e72c      	b.n	801ae8a <atan+0x2a>
 801b030:	ee10 0a10 	vmov	r0, s0
 801b034:	2200      	movs	r2, #0
 801b036:	4b53      	ldr	r3, [pc, #332]	; (801b184 <atan+0x324>)
 801b038:	4629      	mov	r1, r5
 801b03a:	f7e5 f925 	bl	8000288 <__aeabi_dsub>
 801b03e:	2200      	movs	r2, #0
 801b040:	4606      	mov	r6, r0
 801b042:	460f      	mov	r7, r1
 801b044:	4b4f      	ldr	r3, [pc, #316]	; (801b184 <atan+0x324>)
 801b046:	4620      	mov	r0, r4
 801b048:	4629      	mov	r1, r5
 801b04a:	f7e5 f91f 	bl	800028c <__adddf3>
 801b04e:	4602      	mov	r2, r0
 801b050:	460b      	mov	r3, r1
 801b052:	4630      	mov	r0, r6
 801b054:	4639      	mov	r1, r7
 801b056:	f7e5 fbf9 	bl	800084c <__aeabi_ddiv>
 801b05a:	f04f 0a01 	mov.w	sl, #1
 801b05e:	4604      	mov	r4, r0
 801b060:	460d      	mov	r5, r1
 801b062:	e764      	b.n	801af2e <atan+0xce>
 801b064:	4b49      	ldr	r3, [pc, #292]	; (801b18c <atan+0x32c>)
 801b066:	429e      	cmp	r6, r3
 801b068:	dc1d      	bgt.n	801b0a6 <atan+0x246>
 801b06a:	ee10 0a10 	vmov	r0, s0
 801b06e:	2200      	movs	r2, #0
 801b070:	4b47      	ldr	r3, [pc, #284]	; (801b190 <atan+0x330>)
 801b072:	4629      	mov	r1, r5
 801b074:	f7e5 f908 	bl	8000288 <__aeabi_dsub>
 801b078:	2200      	movs	r2, #0
 801b07a:	4606      	mov	r6, r0
 801b07c:	460f      	mov	r7, r1
 801b07e:	4b44      	ldr	r3, [pc, #272]	; (801b190 <atan+0x330>)
 801b080:	4620      	mov	r0, r4
 801b082:	4629      	mov	r1, r5
 801b084:	f7e5 fab8 	bl	80005f8 <__aeabi_dmul>
 801b088:	2200      	movs	r2, #0
 801b08a:	4b3e      	ldr	r3, [pc, #248]	; (801b184 <atan+0x324>)
 801b08c:	f7e5 f8fe 	bl	800028c <__adddf3>
 801b090:	4602      	mov	r2, r0
 801b092:	460b      	mov	r3, r1
 801b094:	4630      	mov	r0, r6
 801b096:	4639      	mov	r1, r7
 801b098:	f7e5 fbd8 	bl	800084c <__aeabi_ddiv>
 801b09c:	f04f 0a02 	mov.w	sl, #2
 801b0a0:	4604      	mov	r4, r0
 801b0a2:	460d      	mov	r5, r1
 801b0a4:	e743      	b.n	801af2e <atan+0xce>
 801b0a6:	462b      	mov	r3, r5
 801b0a8:	ee10 2a10 	vmov	r2, s0
 801b0ac:	2000      	movs	r0, #0
 801b0ae:	4939      	ldr	r1, [pc, #228]	; (801b194 <atan+0x334>)
 801b0b0:	f7e5 fbcc 	bl	800084c <__aeabi_ddiv>
 801b0b4:	f04f 0a03 	mov.w	sl, #3
 801b0b8:	4604      	mov	r4, r0
 801b0ba:	460d      	mov	r5, r1
 801b0bc:	e737      	b.n	801af2e <atan+0xce>
 801b0be:	4b36      	ldr	r3, [pc, #216]	; (801b198 <atan+0x338>)
 801b0c0:	4e36      	ldr	r6, [pc, #216]	; (801b19c <atan+0x33c>)
 801b0c2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801b0c6:	4456      	add	r6, sl
 801b0c8:	449a      	add	sl, r3
 801b0ca:	e9da 2300 	ldrd	r2, r3, [sl]
 801b0ce:	f7e5 f8db 	bl	8000288 <__aeabi_dsub>
 801b0d2:	4622      	mov	r2, r4
 801b0d4:	462b      	mov	r3, r5
 801b0d6:	f7e5 f8d7 	bl	8000288 <__aeabi_dsub>
 801b0da:	4602      	mov	r2, r0
 801b0dc:	460b      	mov	r3, r1
 801b0de:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b0e2:	f7e5 f8d1 	bl	8000288 <__aeabi_dsub>
 801b0e6:	f1bb 0f00 	cmp.w	fp, #0
 801b0ea:	4604      	mov	r4, r0
 801b0ec:	460d      	mov	r5, r1
 801b0ee:	f6bf aed6 	bge.w	801ae9e <atan+0x3e>
 801b0f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b0f6:	461d      	mov	r5, r3
 801b0f8:	e6d1      	b.n	801ae9e <atan+0x3e>
 801b0fa:	a51d      	add	r5, pc, #116	; (adr r5, 801b170 <atan+0x310>)
 801b0fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b100:	e6cd      	b.n	801ae9e <atan+0x3e>
 801b102:	bf00      	nop
 801b104:	f3af 8000 	nop.w
 801b108:	54442d18 	.word	0x54442d18
 801b10c:	3ff921fb 	.word	0x3ff921fb
 801b110:	8800759c 	.word	0x8800759c
 801b114:	7e37e43c 	.word	0x7e37e43c
 801b118:	e322da11 	.word	0xe322da11
 801b11c:	3f90ad3a 	.word	0x3f90ad3a
 801b120:	24760deb 	.word	0x24760deb
 801b124:	3fa97b4b 	.word	0x3fa97b4b
 801b128:	a0d03d51 	.word	0xa0d03d51
 801b12c:	3fb10d66 	.word	0x3fb10d66
 801b130:	c54c206e 	.word	0xc54c206e
 801b134:	3fb745cd 	.word	0x3fb745cd
 801b138:	920083ff 	.word	0x920083ff
 801b13c:	3fc24924 	.word	0x3fc24924
 801b140:	5555550d 	.word	0x5555550d
 801b144:	3fd55555 	.word	0x3fd55555
 801b148:	2c6a6c2f 	.word	0x2c6a6c2f
 801b14c:	bfa2b444 	.word	0xbfa2b444
 801b150:	52defd9a 	.word	0x52defd9a
 801b154:	3fadde2d 	.word	0x3fadde2d
 801b158:	af749a6d 	.word	0xaf749a6d
 801b15c:	3fb3b0f2 	.word	0x3fb3b0f2
 801b160:	fe231671 	.word	0xfe231671
 801b164:	3fbc71c6 	.word	0x3fbc71c6
 801b168:	9998ebc4 	.word	0x9998ebc4
 801b16c:	3fc99999 	.word	0x3fc99999
 801b170:	54442d18 	.word	0x54442d18
 801b174:	bff921fb 	.word	0xbff921fb
 801b178:	440fffff 	.word	0x440fffff
 801b17c:	7ff00000 	.word	0x7ff00000
 801b180:	3fdbffff 	.word	0x3fdbffff
 801b184:	3ff00000 	.word	0x3ff00000
 801b188:	3ff2ffff 	.word	0x3ff2ffff
 801b18c:	40037fff 	.word	0x40037fff
 801b190:	3ff80000 	.word	0x3ff80000
 801b194:	bff00000 	.word	0xbff00000
 801b198:	0801bb80 	.word	0x0801bb80
 801b19c:	0801bb60 	.word	0x0801bb60

0801b1a0 <fabs>:
 801b1a0:	ec51 0b10 	vmov	r0, r1, d0
 801b1a4:	ee10 2a10 	vmov	r2, s0
 801b1a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b1ac:	ec43 2b10 	vmov	d0, r2, r3
 801b1b0:	4770      	bx	lr
 801b1b2:	0000      	movs	r0, r0
 801b1b4:	0000      	movs	r0, r0
	...

0801b1b8 <floor>:
 801b1b8:	ec51 0b10 	vmov	r0, r1, d0
 801b1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b1c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b1c8:	2e13      	cmp	r6, #19
 801b1ca:	460c      	mov	r4, r1
 801b1cc:	ee10 5a10 	vmov	r5, s0
 801b1d0:	4680      	mov	r8, r0
 801b1d2:	dc34      	bgt.n	801b23e <floor+0x86>
 801b1d4:	2e00      	cmp	r6, #0
 801b1d6:	da16      	bge.n	801b206 <floor+0x4e>
 801b1d8:	a335      	add	r3, pc, #212	; (adr r3, 801b2b0 <floor+0xf8>)
 801b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1de:	f7e5 f855 	bl	800028c <__adddf3>
 801b1e2:	2200      	movs	r2, #0
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	f7e5 fc97 	bl	8000b18 <__aeabi_dcmpgt>
 801b1ea:	b148      	cbz	r0, 801b200 <floor+0x48>
 801b1ec:	2c00      	cmp	r4, #0
 801b1ee:	da59      	bge.n	801b2a4 <floor+0xec>
 801b1f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b1f4:	4a30      	ldr	r2, [pc, #192]	; (801b2b8 <floor+0x100>)
 801b1f6:	432b      	orrs	r3, r5
 801b1f8:	2500      	movs	r5, #0
 801b1fa:	42ab      	cmp	r3, r5
 801b1fc:	bf18      	it	ne
 801b1fe:	4614      	movne	r4, r2
 801b200:	4621      	mov	r1, r4
 801b202:	4628      	mov	r0, r5
 801b204:	e025      	b.n	801b252 <floor+0x9a>
 801b206:	4f2d      	ldr	r7, [pc, #180]	; (801b2bc <floor+0x104>)
 801b208:	4137      	asrs	r7, r6
 801b20a:	ea01 0307 	and.w	r3, r1, r7
 801b20e:	4303      	orrs	r3, r0
 801b210:	d01f      	beq.n	801b252 <floor+0x9a>
 801b212:	a327      	add	r3, pc, #156	; (adr r3, 801b2b0 <floor+0xf8>)
 801b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b218:	f7e5 f838 	bl	800028c <__adddf3>
 801b21c:	2200      	movs	r2, #0
 801b21e:	2300      	movs	r3, #0
 801b220:	f7e5 fc7a 	bl	8000b18 <__aeabi_dcmpgt>
 801b224:	2800      	cmp	r0, #0
 801b226:	d0eb      	beq.n	801b200 <floor+0x48>
 801b228:	2c00      	cmp	r4, #0
 801b22a:	bfbe      	ittt	lt
 801b22c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b230:	fa43 f606 	asrlt.w	r6, r3, r6
 801b234:	19a4      	addlt	r4, r4, r6
 801b236:	ea24 0407 	bic.w	r4, r4, r7
 801b23a:	2500      	movs	r5, #0
 801b23c:	e7e0      	b.n	801b200 <floor+0x48>
 801b23e:	2e33      	cmp	r6, #51	; 0x33
 801b240:	dd0b      	ble.n	801b25a <floor+0xa2>
 801b242:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b246:	d104      	bne.n	801b252 <floor+0x9a>
 801b248:	ee10 2a10 	vmov	r2, s0
 801b24c:	460b      	mov	r3, r1
 801b24e:	f7e5 f81d 	bl	800028c <__adddf3>
 801b252:	ec41 0b10 	vmov	d0, r0, r1
 801b256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b25a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b25e:	f04f 33ff 	mov.w	r3, #4294967295
 801b262:	fa23 f707 	lsr.w	r7, r3, r7
 801b266:	4207      	tst	r7, r0
 801b268:	d0f3      	beq.n	801b252 <floor+0x9a>
 801b26a:	a311      	add	r3, pc, #68	; (adr r3, 801b2b0 <floor+0xf8>)
 801b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b270:	f7e5 f80c 	bl	800028c <__adddf3>
 801b274:	2200      	movs	r2, #0
 801b276:	2300      	movs	r3, #0
 801b278:	f7e5 fc4e 	bl	8000b18 <__aeabi_dcmpgt>
 801b27c:	2800      	cmp	r0, #0
 801b27e:	d0bf      	beq.n	801b200 <floor+0x48>
 801b280:	2c00      	cmp	r4, #0
 801b282:	da02      	bge.n	801b28a <floor+0xd2>
 801b284:	2e14      	cmp	r6, #20
 801b286:	d103      	bne.n	801b290 <floor+0xd8>
 801b288:	3401      	adds	r4, #1
 801b28a:	ea25 0507 	bic.w	r5, r5, r7
 801b28e:	e7b7      	b.n	801b200 <floor+0x48>
 801b290:	2301      	movs	r3, #1
 801b292:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b296:	fa03 f606 	lsl.w	r6, r3, r6
 801b29a:	4435      	add	r5, r6
 801b29c:	4545      	cmp	r5, r8
 801b29e:	bf38      	it	cc
 801b2a0:	18e4      	addcc	r4, r4, r3
 801b2a2:	e7f2      	b.n	801b28a <floor+0xd2>
 801b2a4:	2500      	movs	r5, #0
 801b2a6:	462c      	mov	r4, r5
 801b2a8:	e7aa      	b.n	801b200 <floor+0x48>
 801b2aa:	bf00      	nop
 801b2ac:	f3af 8000 	nop.w
 801b2b0:	8800759c 	.word	0x8800759c
 801b2b4:	7e37e43c 	.word	0x7e37e43c
 801b2b8:	bff00000 	.word	0xbff00000
 801b2bc:	000fffff 	.word	0x000fffff

0801b2c0 <matherr>:
 801b2c0:	2000      	movs	r0, #0
 801b2c2:	4770      	bx	lr
 801b2c4:	0000      	movs	r0, r0
	...

0801b2c8 <scalbn>:
 801b2c8:	b570      	push	{r4, r5, r6, lr}
 801b2ca:	ec55 4b10 	vmov	r4, r5, d0
 801b2ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b2d2:	4606      	mov	r6, r0
 801b2d4:	462b      	mov	r3, r5
 801b2d6:	b9aa      	cbnz	r2, 801b304 <scalbn+0x3c>
 801b2d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b2dc:	4323      	orrs	r3, r4
 801b2de:	d03b      	beq.n	801b358 <scalbn+0x90>
 801b2e0:	4b31      	ldr	r3, [pc, #196]	; (801b3a8 <scalbn+0xe0>)
 801b2e2:	4629      	mov	r1, r5
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	ee10 0a10 	vmov	r0, s0
 801b2ea:	f7e5 f985 	bl	80005f8 <__aeabi_dmul>
 801b2ee:	4b2f      	ldr	r3, [pc, #188]	; (801b3ac <scalbn+0xe4>)
 801b2f0:	429e      	cmp	r6, r3
 801b2f2:	4604      	mov	r4, r0
 801b2f4:	460d      	mov	r5, r1
 801b2f6:	da12      	bge.n	801b31e <scalbn+0x56>
 801b2f8:	a327      	add	r3, pc, #156	; (adr r3, 801b398 <scalbn+0xd0>)
 801b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2fe:	f7e5 f97b 	bl	80005f8 <__aeabi_dmul>
 801b302:	e009      	b.n	801b318 <scalbn+0x50>
 801b304:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b308:	428a      	cmp	r2, r1
 801b30a:	d10c      	bne.n	801b326 <scalbn+0x5e>
 801b30c:	ee10 2a10 	vmov	r2, s0
 801b310:	4620      	mov	r0, r4
 801b312:	4629      	mov	r1, r5
 801b314:	f7e4 ffba 	bl	800028c <__adddf3>
 801b318:	4604      	mov	r4, r0
 801b31a:	460d      	mov	r5, r1
 801b31c:	e01c      	b.n	801b358 <scalbn+0x90>
 801b31e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b322:	460b      	mov	r3, r1
 801b324:	3a36      	subs	r2, #54	; 0x36
 801b326:	4432      	add	r2, r6
 801b328:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b32c:	428a      	cmp	r2, r1
 801b32e:	dd0b      	ble.n	801b348 <scalbn+0x80>
 801b330:	ec45 4b11 	vmov	d1, r4, r5
 801b334:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b3a0 <scalbn+0xd8>
 801b338:	f000 f83c 	bl	801b3b4 <copysign>
 801b33c:	a318      	add	r3, pc, #96	; (adr r3, 801b3a0 <scalbn+0xd8>)
 801b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b342:	ec51 0b10 	vmov	r0, r1, d0
 801b346:	e7da      	b.n	801b2fe <scalbn+0x36>
 801b348:	2a00      	cmp	r2, #0
 801b34a:	dd08      	ble.n	801b35e <scalbn+0x96>
 801b34c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b358:	ec45 4b10 	vmov	d0, r4, r5
 801b35c:	bd70      	pop	{r4, r5, r6, pc}
 801b35e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b362:	da0d      	bge.n	801b380 <scalbn+0xb8>
 801b364:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b368:	429e      	cmp	r6, r3
 801b36a:	ec45 4b11 	vmov	d1, r4, r5
 801b36e:	dce1      	bgt.n	801b334 <scalbn+0x6c>
 801b370:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b398 <scalbn+0xd0>
 801b374:	f000 f81e 	bl	801b3b4 <copysign>
 801b378:	a307      	add	r3, pc, #28	; (adr r3, 801b398 <scalbn+0xd0>)
 801b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b37e:	e7e0      	b.n	801b342 <scalbn+0x7a>
 801b380:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b384:	3236      	adds	r2, #54	; 0x36
 801b386:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b38a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b38e:	4620      	mov	r0, r4
 801b390:	4629      	mov	r1, r5
 801b392:	2200      	movs	r2, #0
 801b394:	4b06      	ldr	r3, [pc, #24]	; (801b3b0 <scalbn+0xe8>)
 801b396:	e7b2      	b.n	801b2fe <scalbn+0x36>
 801b398:	c2f8f359 	.word	0xc2f8f359
 801b39c:	01a56e1f 	.word	0x01a56e1f
 801b3a0:	8800759c 	.word	0x8800759c
 801b3a4:	7e37e43c 	.word	0x7e37e43c
 801b3a8:	43500000 	.word	0x43500000
 801b3ac:	ffff3cb0 	.word	0xffff3cb0
 801b3b0:	3c900000 	.word	0x3c900000

0801b3b4 <copysign>:
 801b3b4:	ec51 0b10 	vmov	r0, r1, d0
 801b3b8:	ee11 0a90 	vmov	r0, s3
 801b3bc:	ee10 2a10 	vmov	r2, s0
 801b3c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b3c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b3c8:	ea41 0300 	orr.w	r3, r1, r0
 801b3cc:	ec43 2b10 	vmov	d0, r2, r3
 801b3d0:	4770      	bx	lr
	...

0801b3d4 <_init>:
 801b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3d6:	bf00      	nop
 801b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3da:	bc08      	pop	{r3}
 801b3dc:	469e      	mov	lr, r3
 801b3de:	4770      	bx	lr

0801b3e0 <_fini>:
 801b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3e2:	bf00      	nop
 801b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3e6:	bc08      	pop	{r3}
 801b3e8:	469e      	mov	lr, r3
 801b3ea:	4770      	bx	lr
