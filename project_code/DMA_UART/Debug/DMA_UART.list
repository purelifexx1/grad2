
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c5dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  0801c770  0801c770  0002c770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d160  0801d160  000343e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801d160  0801d160  0002d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d168  0801d168  000343e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d168  0801d168  0002d168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d16c  0801d16c  0002d16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000043e8  20000000  0801d170  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d79c  200043e8  08021558  000343e8  2**3
                  ALLOC
 10 ._user_heap_stack 000063c4  20011b84  08021558  00041b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000343e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003592f  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000715d  00000000  00000000  00069d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  00070ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  00072d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aef0  00000000  00000000  00074988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002936d  00000000  00000000  0009f878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df17f  00000000  00000000  000c8be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a7d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096bc  00000000  00000000  001a7db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200043e8 	.word	0x200043e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c754 	.word	0x0801c754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200043ec 	.word	0x200043ec
 80001cc:	0801c754 	.word	0x0801c754

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <packetRead>:
extern SCARA_LSPB_Clutch_TypeDef  gcode_clutch_configure[200];
Position_DataType position_type;
SCARA_Gcode_Cor_TypeDef	Gcode_Cor[1000];
uint16_t point_counter = 0, current_clutch_index = 0;
Robot_CommandTypedef pnp_move_option;
Robot_CommandTypedef 	packetRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    duty_cmd->id_command = message[1];
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
    switch(protocol_id) 
 8001016:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <packetRead+0x38>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8240 	beq.w	80014a4 <packetRead+0x4b4>
 8001024:	f001 b816 	b.w	8002054 <packetRead+0x1064>
    {
        // reserved for Gcode file transfer
        case FILE_TRANSMISION:
        {
        	temp_pointer = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
        	uint16_t timeout_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	867b      	strh	r3, [r7, #50]	; 0x32
        	do {
        		Gcode_Packet_Command_TypeDef move_type 	= message[temp_pointer] & 0x0f;
 8001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	763b      	strb	r3, [r7, #24]
				switch (move_type){
 800103e:	7e3b      	ldrb	r3, [r7, #24]
 8001040:	2b05      	cmp	r3, #5
 8001042:	f200 821e 	bhi.w	8001482 <packetRead+0x492>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <packetRead+0x5c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001065 	.word	0x08001065
 8001050:	080011ad 	.word	0x080011ad
 8001054:	080011ad 	.word	0x080011ad
 8001058:	08001325 	.word	0x08001325
 800105c:	08001325 	.word	0x08001325
 8001060:	0800112f 	.word	0x0800112f
				case FIRST_PACKET:{
					Gcode_Mode = message[temp_pointer++] >> 4 & 0x0f;
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	637a      	str	r2, [r7, #52]	; 0x34
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b9e      	ldr	r3, [pc, #632]	; (80012f8 <packetRead+0x308>)
 800107e:	701a      	strb	r2, [r3, #0]
					if(Gcode_Mode == GCODE_LINEAR){
 8001080:	4b9d      	ldr	r3, [pc, #628]	; (80012f8 <packetRead+0x308>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b08      	cmp	r3, #8
 8001086:	d113      	bne.n	80010b0 <packetRead+0xc0>
						bezier_wc = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa47 	bl	8000524 <__aeabi_i2d>
 8001096:	a396      	add	r3, pc, #600	; (adr r3, 80012f0 <packetRead+0x300>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff faac 	bl	80005f8 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4995      	ldr	r1, [pc, #596]	; (80012fc <packetRead+0x30c>)
 80010a6:	e9c1 2300 	strd	r2, r3, [r1]
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	3304      	adds	r3, #4
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
					}
					down_z_height = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4413      	add	r3, r2
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa33 	bl	8000524 <__aeabi_i2d>
 80010be:	a38c      	add	r3, pc, #560	; (adr r3, 80012f0 <packetRead+0x300>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fa98 	bl	80005f8 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	498c      	ldr	r1, [pc, #560]	; (8001300 <packetRead+0x310>)
 80010ce:	e9c1 2300 	strd	r2, r3, [r1]
 80010d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d4:	3304      	adds	r3, #4
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
					up_z_height   = (double)B2I(temp_pointer)*COR_INVERSE_SCALE; temp_pointer+=4;
 80010d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa1f 	bl	8000524 <__aeabi_i2d>
 80010e6:	a382      	add	r3, pc, #520	; (adr r3, 80012f0 <packetRead+0x300>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa84 	bl	80005f8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4983      	ldr	r1, [pc, #524]	; (8001304 <packetRead+0x314>)
 80010f6:	e9c1 2300 	strd	r2, r3, [r1]
 80010fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fc:	3304      	adds	r3, #4
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
					total_num_of_point = B2I(temp_pointer);						 temp_pointer+=4;
 8001100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <packetRead+0x318>)
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110e:	3304      	adds	r3, #4
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
					point_counter = 0;
 8001112:	4b7e      	ldr	r3, [pc, #504]	; (800130c <packetRead+0x31c>)
 8001114:	2200      	movs	r2, #0
 8001116:	801a      	strh	r2, [r3, #0]
					current_clutch_index = 0;
 8001118:	4b7d      	ldr	r3, [pc, #500]	; (8001310 <packetRead+0x320>)
 800111a:	2200      	movs	r2, #0
 800111c:	801a      	strh	r2, [r3, #0]
					pre_clutch_index = -1;
 800111e:	4b7d      	ldr	r3, [pc, #500]	; (8001314 <packetRead+0x324>)
 8001120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001124:	801a      	strh	r2, [r3, #0]
					pre_height = UP_Z;
 8001126:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <packetRead+0x328>)
 8001128:	2206      	movs	r2, #6
 800112a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800112c:	e1a9      	b.n	8001482 <packetRead+0x492>
				case CLUTCH_HEADER_TYPE:{
					temp_pointer++;
 800112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001130:	3301      	adds	r3, #1
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].total_s     = B2I(temp_pointer); temp_pointer+=4;
 8001134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	4a75      	ldr	r2, [pc, #468]	; (8001310 <packetRead+0x320>)
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	4610      	mov	r0, r2
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4976      	ldr	r1, [pc, #472]	; (800131c <packetRead+0x32c>)
 8001144:	4603      	mov	r3, r0
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4403      	add	r3, r0
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001152:	3304      	adds	r3, #4
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].veloc 	     = B2I(temp_pointer); temp_pointer+=4;
 8001156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	4a6c      	ldr	r2, [pc, #432]	; (8001310 <packetRead+0x320>)
 800115e:	8812      	ldrh	r2, [r2, #0]
 8001160:	4610      	mov	r0, r2
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	496d      	ldr	r1, [pc, #436]	; (800131c <packetRead+0x32c>)
 8001166:	4603      	mov	r3, r0
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4403      	add	r3, r0
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3304      	adds	r3, #4
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001176:	3304      	adds	r3, #4
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
					gcode_clutch_configure[current_clutch_index].Depth_Feed  = B2I(temp_pointer); temp_pointer+=4;
 800117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	4a63      	ldr	r2, [pc, #396]	; (8001310 <packetRead+0x320>)
 8001182:	8812      	ldrh	r2, [r2, #0]
 8001184:	4610      	mov	r0, r2
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4964      	ldr	r1, [pc, #400]	; (800131c <packetRead+0x32c>)
 800118a:	4603      	mov	r3, r0
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4403      	add	r3, r0
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	3308      	adds	r3, #8
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119a:	3304      	adds	r3, #4
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
					current_clutch_index++;
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <packetRead+0x320>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b5a      	ldr	r3, [pc, #360]	; (8001310 <packetRead+0x320>)
 80011a8:	801a      	strh	r2, [r3, #0]
				}
				break;
 80011aa:	e16a      	b.n	8001482 <packetRead+0x492>
				case BEZIER_TYPE:
				case LINEAR_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 80011ac:	4b57      	ldr	r3, [pc, #348]	; (800130c <packetRead+0x31c>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4a5b      	ldr	r2, [pc, #364]	; (8001320 <packetRead+0x330>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	331a      	adds	r3, #26
 80011c0:	7e3a      	ldrb	r2, [r7, #24]
 80011c2:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 80011c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	637a      	str	r2, [r7, #52]	; 0x34
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4a4d      	ldr	r2, [pc, #308]	; (800130c <packetRead+0x31c>)
 80011d8:	8812      	ldrh	r2, [r2, #0]
 80011da:	4611      	mov	r1, r2
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	b2d8      	uxtb	r0, r3
 80011e2:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <packetRead+0x330>)
 80011e4:	460b      	mov	r3, r1
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	1a5b      	subs	r3, r3, r1
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	331b      	adds	r3, #27
 80011f0:	4602      	mov	r2, r0
 80011f2:	701a      	strb	r2, [r3, #0]
					if(move_type == BEZIER_TYPE){
 80011f4:	7e3b      	ldrb	r3, [r7, #24]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d111      	bne.n	800121e <packetRead+0x22e>
						Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 80011fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	4a42      	ldr	r2, [pc, #264]	; (800130c <packetRead+0x31c>)
 8001202:	8812      	ldrh	r2, [r2, #0]
 8001204:	4610      	mov	r0, r2
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4945      	ldr	r1, [pc, #276]	; (8001320 <packetRead+0x330>)
 800120a:	4603      	mov	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a1b      	subs	r3, r3, r0
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	330c      	adds	r3, #12
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121a:	3304      	adds	r3, #4
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
					}
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 800121e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	4a39      	ldr	r2, [pc, #228]	; (800130c <packetRead+0x31c>)
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	4610      	mov	r0, r2
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	493c      	ldr	r1, [pc, #240]	; (8001320 <packetRead+0x330>)
 800122e:	4603      	mov	r3, r0
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	1a1b      	subs	r3, r3, r0
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123c:	3304      	adds	r3, #4
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 8001240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4413      	add	r3, r2
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <packetRead+0x31c>)
 8001248:	8812      	ldrh	r2, [r2, #0]
 800124a:	4610      	mov	r0, r2
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4934      	ldr	r1, [pc, #208]	; (8001320 <packetRead+0x330>)
 8001250:	4603      	mov	r3, r0
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a1b      	subs	r3, r3, r0
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	3304      	adds	r3, #4
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001260:	3304      	adds	r3, #4
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
					if(Gcode_Mode == GCODE_LINEAR){
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <packetRead+0x308>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d112      	bne.n	8001292 <packetRead+0x2a2>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 800126c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	4a26      	ldr	r2, [pc, #152]	; (800130c <packetRead+0x31c>)
 8001274:	8812      	ldrh	r2, [r2, #0]
 8001276:	4610      	mov	r0, r2
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4929      	ldr	r1, [pc, #164]	; (8001320 <packetRead+0x330>)
 800127c:	4603      	mov	r3, r0
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	1a1b      	subs	r3, r3, r0
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3308      	adds	r3, #8
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128c:	3304      	adds	r3, #4
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
 8001290:	e025      	b.n	80012de <packetRead+0x2ee>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <packetRead+0x308>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b09      	cmp	r3, #9
 8001298:	d121      	bne.n	80012de <packetRead+0x2ee>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <packetRead+0x320>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <packetRead+0x31c>)
 80012a0:	8812      	ldrh	r2, [r2, #0]
 80012a2:	4611      	mov	r1, r2
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b298      	uxth	r0, r3
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <packetRead+0x330>)
 80012aa:	460b      	mov	r3, r1
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	1a5b      	subs	r3, r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3318      	adds	r3, #24
 80012b6:	4602      	mov	r2, r0
 80012b8:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 80012ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <packetRead+0x31c>)
 80012c2:	8812      	ldrh	r2, [r2, #0]
 80012c4:	4610      	mov	r0, r2
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4915      	ldr	r1, [pc, #84]	; (8001320 <packetRead+0x330>)
 80012ca:	4603      	mov	r3, r0
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	1a1b      	subs	r3, r3, r0
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	3314      	adds	r3, #20
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012da:	3304      	adds	r3, #4
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
					}
					point_counter++;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <packetRead+0x31c>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <packetRead+0x31c>)
 80012e8:	801a      	strh	r2, [r3, #0]
				}
				break;
 80012ea:	e0ca      	b.n	8001482 <packetRead+0x492>
 80012ec:	f3af 8000 	nop.w
 80012f0:	a0000000 	.word	0xa0000000
 80012f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80012f8:	200085c8 	.word	0x200085c8
 80012fc:	20008fb8 	.word	0x20008fb8
 8001300:	20008f38 	.word	0x20008f38
 8001304:	200085c0 	.word	0x200085c0
 8001308:	20008fa8 	.word	0x20008fa8
 800130c:	20004404 	.word	0x20004404
 8001310:	20004406 	.word	0x20004406
 8001314:	2000fd2a 	.word	0x2000fd2a
 8001318:	20008f80 	.word	0x20008f80
 800131c:	200085d8 	.word	0x200085d8
 8001320:	20008fc0 	.word	0x20008fc0
				case ARC_CW_TYPE:
				case ARC_AW_TYPE:{
					Gcode_Cor[point_counter].configure.type_define[0] = move_type;
 8001324:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <packetRead+0x564>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	4a8b      	ldr	r2, [pc, #556]	; (8001558 <packetRead+0x568>)
 800132c:	460b      	mov	r3, r1
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a5b      	subs	r3, r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	331a      	adds	r3, #26
 8001338:	7e3a      	ldrb	r2, [r7, #24]
 800133a:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].configure.type_define[1] = message[temp_pointer++] >> 4 & 0x0f;
 800133c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	637a      	str	r2, [r7, #52]	; 0x34
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4a81      	ldr	r2, [pc, #516]	; (8001554 <packetRead+0x564>)
 8001350:	8812      	ldrh	r2, [r2, #0]
 8001352:	4611      	mov	r1, r2
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	b2d8      	uxtb	r0, r3
 800135a:	4a7f      	ldr	r2, [pc, #508]	; (8001558 <packetRead+0x568>)
 800135c:	460b      	mov	r3, r1
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	1a5b      	subs	r3, r3, r1
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	331b      	adds	r3, #27
 8001368:	4602      	mov	r2, r0
 800136a:	701a      	strb	r2, [r3, #0]
					Gcode_Cor[point_counter].X = B2I(temp_pointer);	temp_pointer+=4;
 800136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4413      	add	r3, r2
 8001372:	4a78      	ldr	r2, [pc, #480]	; (8001554 <packetRead+0x564>)
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	4610      	mov	r0, r2
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4977      	ldr	r1, [pc, #476]	; (8001558 <packetRead+0x568>)
 800137c:	4603      	mov	r3, r0
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	1a1b      	subs	r3, r3, r0
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	3304      	adds	r3, #4
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].Y = B2I(temp_pointer);	temp_pointer+=4;
 800138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	4a6f      	ldr	r2, [pc, #444]	; (8001554 <packetRead+0x564>)
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	4610      	mov	r0, r2
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	496e      	ldr	r1, [pc, #440]	; (8001558 <packetRead+0x568>)
 800139e:	4603      	mov	r3, r0
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	1a1b      	subs	r3, r3, r0
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3304      	adds	r3, #4
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	3304      	adds	r3, #4
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
					if(Gcode_Mode == GCODE_LINEAR){
 80013b2:	4b6a      	ldr	r3, [pc, #424]	; (800155c <packetRead+0x56c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d112      	bne.n	80013e0 <packetRead+0x3f0>
						Gcode_Cor[point_counter].F = B2I(temp_pointer);	temp_pointer+=4;
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	4a64      	ldr	r2, [pc, #400]	; (8001554 <packetRead+0x564>)
 80013c2:	8812      	ldrh	r2, [r2, #0]
 80013c4:	4610      	mov	r0, r2
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4963      	ldr	r1, [pc, #396]	; (8001558 <packetRead+0x568>)
 80013ca:	4603      	mov	r3, r0
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	1a1b      	subs	r3, r3, r0
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	3308      	adds	r3, #8
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013da:	3304      	adds	r3, #4
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
 80013de:	e025      	b.n	800142c <packetRead+0x43c>
					}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 80013e0:	4b5e      	ldr	r3, [pc, #376]	; (800155c <packetRead+0x56c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	d121      	bne.n	800142c <packetRead+0x43c>
						Gcode_Cor[point_counter].configure.clutch_index = current_clutch_index - 1;
 80013e8:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <packetRead+0x570>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	4a59      	ldr	r2, [pc, #356]	; (8001554 <packetRead+0x564>)
 80013ee:	8812      	ldrh	r2, [r2, #0]
 80013f0:	4611      	mov	r1, r2
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b298      	uxth	r0, r3
 80013f6:	4a58      	ldr	r2, [pc, #352]	; (8001558 <packetRead+0x568>)
 80013f8:	460b      	mov	r3, r1
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a5b      	subs	r3, r3, r1
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3318      	adds	r3, #24
 8001404:	4602      	mov	r2, r0
 8001406:	801a      	strh	r2, [r3, #0]
						Gcode_Cor[point_counter].T = B2I(temp_pointer);	temp_pointer+=4;
 8001408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	4a51      	ldr	r2, [pc, #324]	; (8001554 <packetRead+0x564>)
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	4610      	mov	r0, r2
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4950      	ldr	r1, [pc, #320]	; (8001558 <packetRead+0x568>)
 8001418:	4603      	mov	r3, r0
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	1a1b      	subs	r3, r3, r0
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3314      	adds	r3, #20
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001428:	3304      	adds	r3, #4
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
					}
					Gcode_Cor[point_counter].I = B2I(temp_pointer);	temp_pointer+=4;
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	4a48      	ldr	r2, [pc, #288]	; (8001554 <packetRead+0x564>)
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	4610      	mov	r0, r2
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4947      	ldr	r1, [pc, #284]	; (8001558 <packetRead+0x568>)
 800143c:	4603      	mov	r3, r0
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a1b      	subs	r3, r3, r0
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144c:	3304      	adds	r3, #4
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
					Gcode_Cor[point_counter].J = B2I(temp_pointer);	temp_pointer+=4;
 8001450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	4a3f      	ldr	r2, [pc, #252]	; (8001554 <packetRead+0x564>)
 8001458:	8812      	ldrh	r2, [r2, #0]
 800145a:	4610      	mov	r0, r2
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	493e      	ldr	r1, [pc, #248]	; (8001558 <packetRead+0x568>)
 8001460:	4603      	mov	r3, r0
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	1a1b      	subs	r3, r3, r0
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3310      	adds	r3, #16
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001470:	3304      	adds	r3, #4
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
					point_counter++;
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <packetRead+0x564>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b35      	ldr	r3, [pc, #212]	; (8001554 <packetRead+0x564>)
 800147e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001480:	bf00      	nop
				}
				if(timeout_value++ == 0xffff) break;
 8001482:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	867a      	strh	r2, [r7, #50]	; 0x32
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	4293      	cmp	r3, r2
 800148e:	d005      	beq.n	800149c <packetRead+0x4ac>
        	}while(temp_pointer < length);
 8001490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	f6ff adcb 	blt.w	8001030 <packetRead+0x40>
 800149a:	e000      	b.n	800149e <packetRead+0x4ae>
				if(timeout_value++ == 0xffff) break;
 800149c:	bf00      	nop
        	return CMD_GCODE;
 800149e:	231a      	movs	r3, #26
 80014a0:	f000 bdd9 	b.w	8002056 <packetRead+0x1066>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
        	Robot_CommandTypedef command_id = message[1];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            switch(command_id)
 80014ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014b0:	2b19      	cmp	r3, #25
 80014b2:	f200 85cd 	bhi.w	8002050 <packetRead+0x1060>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <packetRead+0x4cc>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	08001525 	.word	0x08001525
 80014c0:	0800153d 	.word	0x0800153d
 80014c4:	08001569 	.word	0x08001569
 80014c8:	08001631 	.word	0x08001631
 80014cc:	0800187d 	.word	0x0800187d
 80014d0:	08001631 	.word	0x08001631
 80014d4:	08001aed 	.word	0x08001aed
 80014d8:	08001af1 	.word	0x08001af1
 80014dc:	08002051 	.word	0x08002051
 80014e0:	08001b11 	.word	0x08001b11
 80014e4:	08001b3d 	.word	0x08001b3d
 80014e8:	08001b9f 	.word	0x08001b9f
 80014ec:	08001c6d 	.word	0x08001c6d
 80014f0:	08002021 	.word	0x08002021
 80014f4:	08002031 	.word	0x08002031
 80014f8:	08002051 	.word	0x08002051
 80014fc:	08002051 	.word	0x08002051
 8001500:	08001f5d 	.word	0x08001f5d
 8001504:	08002041 	.word	0x08002041
 8001508:	08002011 	.word	0x08002011
 800150c:	08001c0b 	.word	0x08001c0b
 8001510:	08001c35 	.word	0x08001c35
 8001514:	08002051 	.word	0x08002051
 8001518:	08002051 	.word	0x08002051
 800151c:	08001ca7 	.word	0x08001ca7
 8001520:	08001d7d 	.word	0x08001d7d
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 8001536:	2300      	movs	r3, #0
 8001538:	f000 bd8d 	b.w	8002056 <packetRead+0x1066>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 800154e:	2301      	movs	r3, #1
 8001550:	f000 bd81 	b.w	8002056 <packetRead+0x1066>
 8001554:	20004404 	.word	0x20004404
 8001558:	20008fc0 	.word	0x20008fc0
 800155c:	200085c8 	.word	0x200085c8
 8001560:	20004406 	.word	0x20004406
 8001564:	358637bd 	.word	0x358637bd
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d15d      	bne.n	800162a <packetRead+0x63a>
						temp_pointer = -2;
 800156e:	f06f 0301 	mvn.w	r3, #1
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->v_factor = B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001576:	3304      	adds	r3, #4
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
 800157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8001564 <packetRead+0x574>
 800158e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001592:	ee17 0a90 	vmov	r0, s15
 8001596:	f7fe ffd7 	bl	8000548 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						duty_cmd->a_factor = B2I(temp_pointer)*COR_INVERSE_SCALE;
 80015a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 8001564 <packetRead+0x574>
 80015b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015bc:	ee17 0a90 	vmov	r0, s15
 80015c0:	f7fe ffc2 	bl	8000548 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4ba6      	ldr	r3, [pc, #664]	; (8001870 <packetRead+0x880>)
 80015d6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4ba4      	ldr	r3, [pc, #656]	; (8001874 <packetRead+0x884>)
 80015e2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4ba2      	ldr	r3, [pc, #648]	; (8001878 <packetRead+0x888>)
 80015ee:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 80015f2:	6839      	ldr	r1, [r7, #0]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2202      	movs	r2, #2
 8001616:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2201      	movs	r2, #1
 800161c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 8001624:	2302      	movs	r3, #2
 8001626:	f000 bd16 	b.w	8002056 <packetRead+0x1066>
                        return CMD_ERROR;
 800162a:	2316      	movs	r3, #22
 800162c:	f000 bd13 	b.w	8002056 <packetRead+0x1066>

                case CMD_MOVE_JOINT:
                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b1d      	cmp	r3, #29
 8001634:	f040 8109 	bne.w	800184a <packetRead+0x85a>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 8001638:	f06f 0301 	mvn.w	r3, #1
 800163c:	637b      	str	r3, [r7, #52]	; 0x34

						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001640:	3304      	adds	r3, #4
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
 8001644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4413      	add	r3, r2
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff69 	bl	8000524 <__aeabi_i2d>
 8001652:	a385      	add	r3, pc, #532	; (adr r3, 8001868 <packetRead+0x878>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffce 	bl	80005f8 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	6839      	ldr	r1, [r7, #0]
 8001662:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	3304      	adds	r3, #4
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
 800166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff55 	bl	8000524 <__aeabi_i2d>
 800167a:	a37b      	add	r3, pc, #492	; (adr r3, 8001868 <packetRead+0x878>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ffba 	bl	80005f8 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						duty_cmd->target_point.z = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001690:	3304      	adds	r3, #4
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff41 	bl	8000524 <__aeabi_i2d>
 80016a2:	a371      	add	r3, pc, #452	; (adr r3, 8001868 <packetRead+0x878>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ffa6 	bl	80005f8 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	3304      	adds	r3, #4
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
 80016bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff2d 	bl	8000524 <__aeabi_i2d>
 80016ca:	a367      	add	r3, pc, #412	; (adr r3, 8001868 <packetRead+0x878>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff92 	bl	80005f8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->v_factor = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	3304      	adds	r3, #4
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_i2d>
 80016f2:	a35d      	add	r3, pc, #372	; (adr r3, 8001868 <packetRead+0x878>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff7e 	bl	80005f8 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	3304      	adds	r3, #4
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
 800170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	767b      	strb	r3, [r7, #25]

						if(mode_init == DUTY_MODE_INIT_QVA){
 8001716:	7e7b      	ldrb	r3, [r7, #25]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d117      	bne.n	800174c <packetRead+0x75c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	3301      	adds	r3, #1
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fef7 	bl	8000524 <__aeabi_i2d>
 8001736:	a34c      	add	r3, pc, #304	; (adr r3, 8001868 <packetRead+0x878>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe ff5c 	bl	80005f8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 800174a:	e053      	b.n	80017f4 <packetRead+0x804>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 800174c:	7e7b      	ldrb	r3, [r7, #25]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d117      	bne.n	8001782 <packetRead+0x792>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175a:	3301      	adds	r3, #1
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fedc 	bl	8000524 <__aeabi_i2d>
 800176c:	a33e      	add	r3, pc, #248	; (adr r3, 8001868 <packetRead+0x878>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe ff41 	bl	80005f8 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001780:	e038      	b.n	80017f4 <packetRead+0x804>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001782:	7e7b      	ldrb	r3, [r7, #25]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d117      	bne.n	80017b8 <packetRead+0x7c8>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2203      	movs	r2, #3
 800178c:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 800178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001790:	3301      	adds	r3, #1
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
 8001794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fec1 	bl	8000524 <__aeabi_i2d>
 80017a2:	a331      	add	r3, pc, #196	; (adr r3, 8001868 <packetRead+0x878>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7fe ff26 	bl	80005f8 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80017b6:	e01d      	b.n	80017f4 <packetRead+0x804>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 80017b8:	7e7b      	ldrb	r3, [r7, #25]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d117      	bne.n	80017ee <packetRead+0x7fe>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2202      	movs	r2, #2
 80017c2:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80017c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c6:	3301      	adds	r3, #1
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fea6 	bl	8000524 <__aeabi_i2d>
 80017d8:	a323      	add	r3, pc, #140	; (adr r3, 8001868 <packetRead+0x878>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe ff0b 	bl	80005f8 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 80017ec:	e002      	b.n	80017f4 <packetRead+0x804>
						}else{
							return CMD_ERROR;
 80017ee:	2316      	movs	r3, #22
 80017f0:	f000 bc31 	b.w	8002056 <packetRead+0x1066>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80017f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f6:	3304      	adds	r3, #4
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
 80017fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	781a      	ldrb	r2, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	3301      	adds	r3, #1
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	741a      	strb	r2, [r3, #16]
						if(command_id == CMD_MOVE_LINE){
 8001818:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800181c:	2b03      	cmp	r3, #3
 800181e:	d106      	bne.n	800182e <packetRead+0x83e>
							duty_cmd->path_type = DUTY_PATH_LINE;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	739a      	strb	r2, [r3, #14]
							duty_cmd->space_type = DUTY_SPACE_TASK;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	735a      	strb	r2, [r3, #13]
 800182c:	e010      	b.n	8001850 <packetRead+0x860>
						}else if(command_id == CMD_MOVE_JOINT){
 800182e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001832:	2b05      	cmp	r3, #5
 8001834:	d106      	bne.n	8001844 <packetRead+0x854>
							duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	73da      	strb	r2, [r3, #15]
							duty_cmd->space_type = DUTY_SPACE_JOINT;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	735a      	strb	r2, [r3, #13]
 8001842:	e005      	b.n	8001850 <packetRead+0x860>
						}else{
							return CMD_ERROR;
 8001844:	2316      	movs	r3, #22
 8001846:	f000 bc06 	b.w	8002056 <packetRead+0x1066>
						}

					}else{
						return CMD_ERROR;
 800184a:	2316      	movs	r3, #22
 800184c:	f000 bc03 	b.w	8002056 <packetRead+0x1066>
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2202      	movs	r2, #2
 8001854:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
					return command_id;
 8001862:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001866:	e3f6      	b.n	8002056 <packetRead+0x1066>
 8001868:	a0000000 	.word	0xa0000000
 800186c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001870:	406f4000 	.word	0x406f4000
 8001874:	c0690000 	.word	0xc0690000
 8001878:	405e0000 	.word	0x405e0000
				break;


				// Move circle
                case CMD_MOVE_CIRCLE:{
                	if(length == 34){ // 7 int32_t number + 4 byte number + 2 define byte
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b22      	cmp	r3, #34	; 0x22
 8001880:	f040 8132 	bne.w	8001ae8 <packetRead+0xaf8>
                		uint8_t mode_init, arc_type;
                		temp_pointer = -2;
 8001884:	f06f 0301 	mvn.w	r3, #1
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
                		duty_cmd->target_point.x      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800188a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188c:	3304      	adds	r3, #4
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
 8001890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe43 	bl	8000524 <__aeabi_i2d>
 800189e:	f20f 43c8 	addw	r3, pc, #1224	; 0x4c8
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
                		duty_cmd->target_point.y      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b6:	3304      	adds	r3, #4
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe2e 	bl	8000524 <__aeabi_i2d>
 80018c8:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe fe92 	bl	80005f8 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	6839      	ldr	r1, [r7, #0]
 80018da:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                		duty_cmd->sub_point.x 	      = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	3304      	adds	r3, #4
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe19 	bl	8000524 <__aeabi_i2d>
 80018f2:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fe7d 	bl	80005f8 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
                		duty_cmd->sub_point.y         = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	3304      	adds	r3, #4
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
 800190e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe04 	bl	8000524 <__aeabi_i2d>
 800191c:	f20f 4348 	addw	r3, pc, #1096	; 0x448
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe68 	bl	80005f8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                		duty_cmd->target_point.roll   = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001934:	3304      	adds	r3, #4
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
 8001938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fdef 	bl	8000524 <__aeabi_i2d>
 8001946:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe53 	bl	80005f8 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                		duty_cmd->v_factor			  = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	3304      	adds	r3, #4
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
 8001962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdda 	bl	8000524 <__aeabi_i2d>
 8001970:	a3fd      	add	r3, pc, #1012	; (adr r3, 8001d68 <packetRead+0xd78>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fe3f 	bl	80005f8 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
                		arc_type = message[temp_pointer+=4];
 8001984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001986:	3304      	adds	r3, #4
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	76fb      	strb	r3, [r7, #27]
                		if(arc_type == ARC_AW_TYPE){
 8001994:	7efb      	ldrb	r3, [r7, #27]
 8001996:	2b04      	cmp	r3, #4
 8001998:	d103      	bne.n	80019a2 <packetRead+0x9b2>
                			duty_cmd->arc_dir = 1;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	e009      	b.n	80019b6 <packetRead+0x9c6>
                		}else if(arc_type == ARC_CW_TYPE){
 80019a2:	7efb      	ldrb	r3, [r7, #27]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d104      	bne.n	80019b2 <packetRead+0x9c2>
                			duty_cmd->arc_dir = -1;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f04f 32ff 	mov.w	r2, #4294967295
 80019ae:	615a      	str	r2, [r3, #20]
 80019b0:	e001      	b.n	80019b6 <packetRead+0x9c6>
                		}else{
                			return CMD_ERROR;
 80019b2:	2316      	movs	r3, #22
 80019b4:	e34f      	b.n	8002056 <packetRead+0x1066>
                		}
                		mode_init = message[temp_pointer+=1];
 80019b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b8:	3301      	adds	r3, #1
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
 80019bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	76bb      	strb	r3, [r7, #26]
						if(mode_init == DUTY_MODE_INIT_QVA){
 80019c6:	7ebb      	ldrb	r3, [r7, #26]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d117      	bne.n	80019fc <packetRead+0xa0c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 80019d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d4:	3301      	adds	r3, #1
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd9f 	bl	8000524 <__aeabi_i2d>
 80019e6:	a3e0      	add	r3, pc, #896	; (adr r3, 8001d68 <packetRead+0xd78>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe04 	bl	80005f8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80019fa:	e052      	b.n	8001aa2 <packetRead+0xab2>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80019fc:	7ebb      	ldrb	r3, [r7, #26]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d117      	bne.n	8001a32 <packetRead+0xa42>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd84 	bl	8000524 <__aeabi_i2d>
 8001a1c:	a3d2      	add	r3, pc, #840	; (adr r3, 8001d68 <packetRead+0xd78>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fde9 	bl	80005f8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a30:	e037      	b.n	8001aa2 <packetRead+0xab2>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 8001a32:	7ebb      	ldrb	r3, [r7, #26]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d117      	bne.n	8001a68 <packetRead+0xa78>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a40:	3301      	adds	r3, #1
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd69 	bl	8000524 <__aeabi_i2d>
 8001a52:	a3c5      	add	r3, pc, #788	; (adr r3, 8001d68 <packetRead+0xd78>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdce 	bl	80005f8 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a66:	e01c      	b.n	8001aa2 <packetRead+0xab2>
						}else if(mode_init == DUTY_MODE_INIT_QV){
 8001a68:	7ebb      	ldrb	r3, [r7, #26]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d117      	bne.n	8001a9e <packetRead+0xaae>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2202      	movs	r2, #2
 8001a72:	745a      	strb	r2, [r3, #17]
							duty_cmd->v_factor = (double)B2I(temp_pointer+=1)*COR_INVERSE_SCALE;
 8001a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a76:	3301      	adds	r3, #1
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd4e 	bl	8000524 <__aeabi_i2d>
 8001a88:	a3b7      	add	r3, pc, #732	; (adr r3, 8001d68 <packetRead+0xd78>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8001a9c:	e001      	b.n	8001aa2 <packetRead+0xab2>
						}else{
							return CMD_ERROR;
 8001a9e:	2316      	movs	r3, #22
 8001aa0:	e2d9      	b.n	8002056 <packetRead+0x1066>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	735a      	strb	r2, [r3, #13]
                	}else{
                		return CMD_ERROR;
                	}
                	duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_CIRCLE;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	e2b6      	b.n	8002056 <packetRead+0x1066>
                		return CMD_ERROR;
 8001ae8:	2316      	movs	r3, #22
 8001aea:	e2b4      	b.n	8002056 <packetRead+0x1066>
                break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001aec:	2306      	movs	r3, #6
 8001aee:	e2b2      	b.n	8002056 <packetRead+0x1066>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d10a      	bne.n	8001b0c <packetRead+0xb1c>
						temp_pointer = 2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->arc_dir = message[temp_pointer];
 8001afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001b08:	2307      	movs	r3, #7
 8001b0a:	e2a4      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 8001b0c:	2316      	movs	r3, #22
 8001b0e:	e2a2      	b.n	8002056 <packetRead+0x1066>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d110      	bne.n	8001b38 <packetRead+0xb48>
						temp_pointer = 2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
						position_type = message[temp_pointer];
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	4b93      	ldr	r3, [pc, #588]	; (8001d70 <packetRead+0xd80>)
 8001b24:	701a      	strb	r2, [r3, #0]
						uint8_t lala[2] = {12, 24};
 8001b26:	f641 030c 	movw	r3, #6156	; 0x180c
 8001b2a:	82bb      	strh	r3, [r7, #20]
						uint16_t tes = *(uint16_t*)lala;
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	83bb      	strh	r3, [r7, #28]
						return CMD_READ_POSITION;
 8001b34:	2309      	movs	r3, #9
 8001b36:	e28e      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 8001b38:	2316      	movs	r3, #22
 8001b3a:	e28c      	b.n	8002056 <packetRead+0x1066>
				break;			

				// Setting
				case CMD_TEST_METHOD_SETTING:
				{
					if (length == 6){ // 4 byte configure + 2 byte define
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d12b      	bne.n	8001b9a <packetRead+0xbaa>
						temp_pointer = 2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
						test_value_array[0] = message[temp_pointer++];
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	637a      	str	r2, [r7, #52]	; 0x34
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b25a      	sxtb	r2, r3
 8001b56:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <packetRead+0xd84>)
 8001b58:	701a      	strb	r2, [r3, #0]
						test_value_array[1] = message[temp_pointer++];
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	637a      	str	r2, [r7, #52]	; 0x34
 8001b60:	461a      	mov	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b25a      	sxtb	r2, r3
 8001b6a:	4b82      	ldr	r3, [pc, #520]	; (8001d74 <packetRead+0xd84>)
 8001b6c:	705a      	strb	r2, [r3, #1]
						test_value_array[2] = message[temp_pointer++];
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	637a      	str	r2, [r7, #52]	; 0x34
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b25a      	sxtb	r2, r3
 8001b7e:	4b7d      	ldr	r3, [pc, #500]	; (8001d74 <packetRead+0xd84>)
 8001b80:	709a      	strb	r2, [r3, #2]
						test_value_array[3] = message[temp_pointer++];
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	637a      	str	r2, [r7, #52]	; 0x34
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b25a      	sxtb	r2, r3
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <packetRead+0xd84>)
 8001b94:	70da      	strb	r2, [r3, #3]
						return CMD_TEST_METHOD_SETTING;
 8001b96:	230a      	movs	r3, #10
 8001b98:	e25d      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 8001b9a:	2316      	movs	r3, #22
 8001b9c:	e25b      	b.n	8002056 <packetRead+0x1066>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d130      	bne.n	8001c06 <packetRead+0xc16>
						uint8_t method;
						temp_pointer = 2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
						method = message[temp_pointer];
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	77bb      	strb	r3, [r7, #30]
						if (SCARA_METHOD_MANUAL == method) {
 8001bb2:	7fbb      	ldrb	r3, [r7, #30]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d103      	bne.n	8001bc0 <packetRead+0xbd0>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	705a      	strb	r2, [r3, #1]
 8001bbe:	e01d      	b.n	8001bfc <packetRead+0xc0c>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001bc0:	7fbb      	ldrb	r3, [r7, #30]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d103      	bne.n	8001bce <packetRead+0xbde>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	705a      	strb	r2, [r3, #1]
 8001bcc:	e016      	b.n	8001bfc <packetRead+0xc0c>
						} else if (SCARA_METHOD_GCODE == method) {
 8001bce:	7fbb      	ldrb	r3, [r7, #30]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d103      	bne.n	8001bdc <packetRead+0xbec>
							duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	705a      	strb	r2, [r3, #1]
 8001bda:	e00f      	b.n	8001bfc <packetRead+0xc0c>
						}else if(SCARA_METHOD_TEST == method){
 8001bdc:	7fbb      	ldrb	r3, [r7, #30]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d103      	bne.n	8001bea <packetRead+0xbfa>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2203      	movs	r2, #3
 8001be6:	705a      	strb	r2, [r3, #1]
 8001be8:	e008      	b.n	8001bfc <packetRead+0xc0c>
						}else if(SCARA_METHOD_PICK_AND_PLACE == method){
 8001bea:	7fbb      	ldrb	r3, [r7, #30]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d103      	bne.n	8001bf8 <packetRead+0xc08>
							duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	705a      	strb	r2, [r3, #1]
 8001bf6:	e001      	b.n	8001bfc <packetRead+0xc0c>
						}else {
							return CMD_ERROR;
 8001bf8:	2316      	movs	r3, #22
 8001bfa:	e22c      	b.n	8002056 <packetRead+0x1066>
						}
						duty_cmd->change_method = TRUE;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001c02:	230b      	movs	r3, #11
 8001c04:	e227      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 8001c06:	2316      	movs	r3, #22
 8001c08:	e225      	b.n	8002056 <packetRead+0x1066>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d10f      	bne.n	8001c30 <packetRead+0xc40>
						int temp_pointer = 2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001c2c:	2314      	movs	r3, #20
 8001c2e:	e212      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 8001c30:	2316      	movs	r3, #22
 8001c32:	e210      	b.n	8002056 <packetRead+0x1066>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d116      	bne.n	8001c68 <packetRead+0xc78>
						int temp_pointer = 2;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
						int32_t speed = (int32_t)message[temp_pointer];
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dd02      	ble.n	8001c54 <packetRead+0xc64>
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	2b0e      	cmp	r3, #14
 8001c52:	dd01      	ble.n	8001c58 <packetRead+0xc68>
							return CMD_ERROR;
 8001c54:	2316      	movs	r3, #22
 8001c56:	e1fe      	b.n	8002056 <packetRead+0x1066>
						}
						duty_cmd->key_speed = speed;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c5c:	605a      	str	r2, [r3, #4]
						current_key_speed1 = speed;
 8001c5e:	4a46      	ldr	r2, [pc, #280]	; (8001d78 <packetRead+0xd88>)
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	6013      	str	r3, [r2, #0]
						return CMD_KEY_SPEED;
 8001c64:	2315      	movs	r3, #21
 8001c66:	e1f6      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 8001c68:	2316      	movs	r3, #22
 8001c6a:	e1f4      	b.n	8002056 <packetRead+0x1066>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d117      	bne.n	8001ca2 <packetRead+0xcb2>
						int temp_pointer = 2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	623b      	str	r3, [r7, #32]
						uint8_t test_key = message[temp_pointer];
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	77fb      	strb	r3, [r7, #31]
						if(test_key < 0 || test_key > 8){
 8001c80:	7ffb      	ldrb	r3, [r7, #31]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d901      	bls.n	8001c8a <packetRead+0xc9a>
							return CMD_ERROR;
 8001c86:	2316      	movs	r3, #22
 8001c88:	e1e5      	b.n	8002056 <packetRead+0x1066>
						}
						duty_cmd->test_key = test_key;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	7ffa      	ldrb	r2, [r7, #31]
 8001c8e:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2203      	movs	r2, #3
 8001c96:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	e1d9      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 8001ca2:	2316      	movs	r3, #22
 8001ca4:	e1d7      	b.n	8002056 <packetRead+0x1066>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 15){ // 3 int32_t number + 1 byte object type + 2 define byte
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d15b      	bne.n	8001d64 <packetRead+0xd74>
						temp_pointer = -2;
 8001cac:	f06f 0301 	mvn.w	r3, #1
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
						duty_cmd->target_point.x = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc2f 	bl	8000524 <__aeabi_i2d>
 8001cc6:	a328      	add	r3, pc, #160	; (adr r3, 8001d68 <packetRead+0xd78>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fc94 	bl	80005f8 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
						duty_cmd->target_point.y = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	3304      	adds	r3, #4
 8001cde:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fc1b 	bl	8000524 <__aeabi_i2d>
 8001cee:	a31e      	add	r3, pc, #120	; (adr r3, 8001d68 <packetRead+0xd78>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fc80 	bl	80005f8 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
						//duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
						duty_cmd->target_point.roll = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d04:	3304      	adds	r3, #4
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
 8001d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc07 	bl	8000524 <__aeabi_i2d>
 8001d16:	a314      	add	r3, pc, #80	; (adr r3, 8001d68 <packetRead+0xd78>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fc6c 	bl	80005f8 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4413      	add	r3, r2
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fbdd 	bl	8000504 <__aeabi_ui2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2204      	movs	r2, #4
 8001d58:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 8001d60:	2318      	movs	r3, #24
 8001d62:	e178      	b.n	8002056 <packetRead+0x1066>
						return CMD_ERROR;
 8001d64:	2316      	movs	r3, #22
 8001d66:	e176      	b.n	8002056 <packetRead+0x1066>
 8001d68:	a0000000 	.word	0xa0000000
 8001d6c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d70:	2000fd28 	.word	0x2000fd28
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000060 	.word	0x20000060
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 47) { // 11 int32_t number + 1 byte move type + 2 define byte
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b2f      	cmp	r3, #47	; 0x2f
 8001d80:	f040 80ea 	bne.w	8001f58 <packetRead+0xf68>
						temp_pointer = -2;
 8001d84:	f06f 0301 	mvn.w	r3, #1
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
						conveyor_speed           = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbc3 	bl	8000524 <__aeabi_i2d>
 8001d9e:	a3b0      	add	r3, pc, #704	; (adr r3, 8002060 <packetRead+0x1070>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc28 	bl	80005f8 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	49ae      	ldr	r1, [pc, #696]	; (8002068 <packetRead+0x1078>)
 8001dae:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db4:	3304      	adds	r3, #4
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
 8001db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbaf 	bl	8000524 <__aeabi_i2d>
 8001dc6:	a3a6      	add	r3, pc, #664	; (adr r3, 8002060 <packetRead+0x1070>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc14 	bl	80005f8 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	49a5      	ldr	r1, [pc, #660]	; (800206c <packetRead+0x107c>)
 8001dd6:	e9c1 2300 	strd	r2, r3, [r1]
						PUT_DOWN_TIME_ON_OBJECT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	3304      	adds	r3, #4
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb9b 	bl	8000524 <__aeabi_i2d>
 8001dee:	a39c      	add	r3, pc, #624	; (adr r3, 8002060 <packetRead+0x1070>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fc00 	bl	80005f8 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	499c      	ldr	r1, [pc, #624]	; (8002070 <packetRead+0x1080>)
 8001dfe:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	3304      	adds	r3, #4
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb87 	bl	8000524 <__aeabi_i2d>
 8001e16:	a392      	add	r3, pc, #584	; (adr r3, 8002060 <packetRead+0x1070>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fbec 	bl	80005f8 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4993      	ldr	r1, [pc, #588]	; (8002074 <packetRead+0x1084>)
 8001e26:	e9c1 2300 	strd	r2, r3, [r1]
						PICK_UP_TIME_ON_SLOT	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb73 	bl	8000524 <__aeabi_i2d>
 8001e3e:	a388      	add	r3, pc, #544	; (adr r3, 8002060 <packetRead+0x1070>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fbd8 	bl	80005f8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	498a      	ldr	r1, [pc, #552]	; (8002078 <packetRead+0x1088>)
 8001e4e:	e9c1 2300 	strd	r2, r3, [r1]
						MOVE_TIME 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	3304      	adds	r3, #4
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb5f 	bl	8000524 <__aeabi_i2d>
 8001e66:	a37e      	add	r3, pc, #504	; (adr r3, 8002060 <packetRead+0x1070>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4981      	ldr	r1, [pc, #516]	; (800207c <packetRead+0x108c>)
 8001e76:	e9c1 2300 	strd	r2, r3, [r1]
						ATTACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb4b 	bl	8000524 <__aeabi_i2d>
 8001e8e:	a374      	add	r3, pc, #464	; (adr r3, 8002060 <packetRead+0x1070>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fbb0 	bl	80005f8 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4978      	ldr	r1, [pc, #480]	; (8002080 <packetRead+0x1090>)
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
						DETACH_TIME 			 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb37 	bl	8000524 <__aeabi_i2d>
 8001eb6:	a36a      	add	r3, pc, #424	; (adr r3, 8002060 <packetRead+0x1070>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fb9c 	bl	80005f8 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	496f      	ldr	r1, [pc, #444]	; (8002084 <packetRead+0x1094>)
 8001ec6:	e9c1 2300 	strd	r2, r3, [r1]
						UP_HEIGHT 				 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ecc:	3304      	adds	r3, #4
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb23 	bl	8000524 <__aeabi_i2d>
 8001ede:	a360      	add	r3, pc, #384	; (adr r3, 8002060 <packetRead+0x1070>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fb88 	bl	80005f8 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4966      	ldr	r1, [pc, #408]	; (8002088 <packetRead+0x1098>)
 8001eee:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_OBJECT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb0f 	bl	8000524 <__aeabi_i2d>
 8001f06:	a356      	add	r3, pc, #344	; (adr r3, 8002060 <packetRead+0x1070>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	495d      	ldr	r1, [pc, #372]	; (800208c <packetRead+0x109c>)
 8001f16:	e9c1 2300 	strd	r2, r3, [r1]
						DOWN_HEIGHT_ON_SLOT 	 = (double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4413      	add	r3, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fafb 	bl	8000524 <__aeabi_i2d>
 8001f2e:	a34c      	add	r3, pc, #304	; (adr r3, 8002060 <packetRead+0x1070>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4954      	ldr	r1, [pc, #336]	; (8002090 <packetRead+0x10a0>)
 8001f3e:	e9c1 2300 	strd	r2, r3, [r1]
						pnp_move_option 		 = message[temp_pointer+=4];
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	3304      	adds	r3, #4
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <packetRead+0x10a4>)
 8001f52:	701a      	strb	r2, [r3, #0]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001f54:	2319      	movs	r3, #25
 8001f56:	e07e      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 8001f58:	2316      	movs	r3, #22
 8001f5a:	e07c      	b.n	8002056 <packetRead+0x1066>
					}
				}
				break;
				case CMD_GCODE_CONFIGURE:
				{
					if(length == 18) { // 4 int32_t number + 2 define byte
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	d154      	bne.n	800200c <packetRead+0x101c>
						temp_pointer = -2;
 8001f62:	f06f 0301 	mvn.w	r3, #1
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
						offset_x = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fad4 	bl	8000524 <__aeabi_i2d>
 8001f7c:	a338      	add	r3, pc, #224	; (adr r3, 8002060 <packetRead+0x1070>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb39 	bl	80005f8 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4943      	ldr	r1, [pc, #268]	; (8002098 <packetRead+0x10a8>)
 8001f8c:	e9c1 2300 	strd	r2, r3, [r1]
						offset_y = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	3304      	adds	r3, #4
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fac0 	bl	8000524 <__aeabi_i2d>
 8001fa4:	a32e      	add	r3, pc, #184	; (adr r3, 8002060 <packetRead+0x1070>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fb25 	bl	80005f8 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	493a      	ldr	r1, [pc, #232]	; (800209c <packetRead+0x10ac>)
 8001fb4:	e9c1 2300 	strd	r2, r3, [r1]
						offset_z = 	(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fba:	3304      	adds	r3, #4
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe faac 	bl	8000524 <__aeabi_i2d>
 8001fcc:	a324      	add	r3, pc, #144	; (adr r3, 8002060 <packetRead+0x1070>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	f7fe fb11 	bl	80005f8 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4931      	ldr	r1, [pc, #196]	; (80020a0 <packetRead+0x10b0>)
 8001fdc:	e9c1 2300 	strd	r2, r3, [r1]
						roll_angle =(double)B2I(temp_pointer+=4)*COR_INVERSE_SCALE;
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa98 	bl	8000524 <__aeabi_i2d>
 8001ff4:	a31a      	add	r3, pc, #104	; (adr r3, 8002060 <packetRead+0x1070>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe fafd 	bl	80005f8 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4928      	ldr	r1, [pc, #160]	; (80020a4 <packetRead+0x10b4>)
 8002004:	e9c1 2300 	strd	r2, r3, [r1]
						return CMD_GCODE_CONFIGURE;
 8002008:	2311      	movs	r3, #17
 800200a:	e024      	b.n	8002056 <packetRead+0x1066>
					}else{
						return CMD_ERROR;
 800200c:	2316      	movs	r3, #22
 800200e:	e022      	b.n	8002056 <packetRead+0x1066>
					}
				}
				break;
				case CMD_GCODE_RUN:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RUN;
 800201c:	2313      	movs	r3, #19
 800201e:	e01a      	b.n	8002056 <packetRead+0x1066>
				}
				break;
				case CMD_GCODE_STOP:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2202      	movs	r2, #2
 8002024:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_STOP;
 800202c:	230d      	movs	r3, #13
 800202e:	e012      	b.n	8002056 <packetRead+0x1066>
				}
				break;
				case CMD_GCODE_PAUSE:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_PAUSE;
 800203c:	230e      	movs	r3, #14
 800203e:	e00a      	b.n	8002056 <packetRead+0x1066>
				}
				break;
				case CMD_GCODE_RESUME:
				{
					duty_cmd->robot_method = SCARA_METHOD_GCODE;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2202      	movs	r2, #2
 8002044:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
					return CMD_GCODE_RESUME;
 800204c:	2312      	movs	r3, #18
 800204e:	e002      	b.n	8002056 <packetRead+0x1066>
				}
				break;
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8002050:	2316      	movs	r3, #22
 8002052:	e000      	b.n	8002056 <packetRead+0x1066>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8002054:	2317      	movs	r3, #23
        }
    }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3738      	adds	r7, #56	; 0x38
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	a0000000 	.word	0xa0000000
 8002064:	3eb0c6f7 	.word	0x3eb0c6f7
 8002068:	20000058 	.word	0x20000058
 800206c:	20000008 	.word	0x20000008
 8002070:	20000010 	.word	0x20000010
 8002074:	20000018 	.word	0x20000018
 8002078:	20000020 	.word	0x20000020
 800207c:	20000028 	.word	0x20000028
 8002080:	20000030 	.word	0x20000030
 8002084:	20000038 	.word	0x20000038
 8002088:	20000040 	.word	0x20000040
 800208c:	20000048 	.word	0x20000048
 8002090:	20000050 	.word	0x20000050
 8002094:	20000064 	.word	0x20000064
 8002098:	20008fa0 	.word	0x20008fa0
 800209c:	2000fd40 	.word	0x2000fd40
 80020a0:	2000fd30 	.word	0x2000fd30
 80020a4:	20008f98 	.word	0x20008f98

080020a8 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 80020a8:	b082      	sub	sp, #8
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b0e2      	sub	sp, #392	; 0x188
 80020ae:	af2e      	add	r7, sp, #184	; 0xb8
 80020b0:	4601      	mov	r1, r0
 80020b2:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80020b6:	e880 000c 	stmia.w	r0, {r2, r3}
 80020ba:	460b      	mov	r3, r1
 80020bc:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b1a      	cmp	r3, #26
 80020c2:	f200 815e 	bhi.w	8002382 <commandReply+0x2da>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <commandReply+0x24>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	08002139 	.word	0x08002139
 80020d0:	08002139 	.word	0x08002139
 80020d4:	08002139 	.word	0x08002139
 80020d8:	08002139 	.word	0x08002139
 80020dc:	08002139 	.word	0x08002139
 80020e0:	08002139 	.word	0x08002139
 80020e4:	08002139 	.word	0x08002139
 80020e8:	08002141 	.word	0x08002141
 80020ec:	080021bb 	.word	0x080021bb
 80020f0:	080021ef 	.word	0x080021ef
 80020f4:	08002285 	.word	0x08002285
 80020f8:	080022af 	.word	0x080022af
 80020fc:	08002139 	.word	0x08002139
 8002100:	08002311 	.word	0x08002311
 8002104:	08002311 	.word	0x08002311
 8002108:	08002311 	.word	0x08002311
 800210c:	08002311 	.word	0x08002311
 8002110:	080022ef 	.word	0x080022ef
 8002114:	08002311 	.word	0x08002311
 8002118:	08002311 	.word	0x08002311
 800211c:	08002319 	.word	0x08002319
 8002120:	08002321 	.word	0x08002321
 8002124:	08002361 	.word	0x08002361
 8002128:	08002383 	.word	0x08002383
 800212c:	08002139 	.word	0x08002139
 8002130:	080022a7 	.word	0x080022a7
 8002134:	080022b7 	.word	0x080022b7
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8002138:	2309      	movs	r3, #9
 800213a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800213e:	e130      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.arc_dir) {
 8002140:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002144:	2b01      	cmp	r3, #1
 8002146:	d110      	bne.n	800216a <commandReply+0xc2>
				scaraSetOutput(1);
 8002148:	2001      	movs	r0, #1
 800214a:	f008 fd05 	bl	800ab58 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 800214e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1c59      	adds	r1, r3, #1
 8002156:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800215a:	6011      	str	r1, [r2, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002162:	4413      	add	r3, r2
 8002164:	220d      	movs	r2, #13
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e023      	b.n	80021b2 <commandReply+0x10a>
			} else if (0 == duty_cmd.arc_dir) {
 800216a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800216e:	2b00      	cmp	r3, #0
 8002170:	d110      	bne.n	8002194 <commandReply+0xec>
				scaraSetOutput(0);
 8002172:	2000      	movs	r0, #0
 8002174:	f008 fcf0 	bl	800ab58 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8002178:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002184:	6011      	str	r1, [r2, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800218c:	4413      	add	r3, r2
 800218e:	220e      	movs	r2, #14
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e00e      	b.n	80021b2 <commandReply+0x10a>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 8002194:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80021a0:	6011      	str	r1, [r2, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80021a8:	4413      	add	r3, r2
 80021aa:	220f      	movs	r2, #15
 80021ac:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80021ae:	2307      	movs	r3, #7
 80021b0:	e0f9      	b.n	80023a6 <commandReply+0x2fe>
			}
			ret = RPD_OK;
 80021b2:	2308      	movs	r3, #8
 80021b4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 80021b8:	e0f3      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80021ba:	f008 fd2f 	bl	800ac1c <scaraGetMode>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 80021c4:	f008 fd42 	bl	800ac4c <scaraGetDutyState>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021ce:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d107      	bne.n	80021e6 <commandReply+0x13e>
 80021d6:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <commandReply+0x13e>
				ret = RPD_IDLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 80021e4:	e0dd      	b.n	80023a2 <commandReply+0x2fa>
				ret = RPD_BUSY;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80021ec:	e0d9      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80021ee:	4b71      	ldr	r3, [pc, #452]	; (80023b4 <commandReply+0x30c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <commandReply+0x156>
 80021f6:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <commandReply+0x30c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d113      	bne.n	8002226 <commandReply+0x17e>
				lowlayer_readTruePosition(&position);
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	4618      	mov	r0, r3
 8002204:	f004 f848 	bl	8006298 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	4618      	mov	r0, r3
 800220e:	f003 f91f 	bl	8005450 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8002212:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <commandReply+0x30c>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d11e      	bne.n	8002258 <commandReply+0x1b0>
					scaraUpdatePosition(&position);
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	4618      	mov	r0, r3
 8002220:	f008 fcec 	bl	800abfc <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8002224:	e018      	b.n	8002258 <commandReply+0x1b0>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <commandReply+0x30c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d105      	bne.n	800223a <commandReply+0x192>
				scaraGetPosition(&position);
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	4618      	mov	r0, r3
 8002234:	f008 fcd2 	bl	800abdc <scaraGetPosition>
 8002238:	e00e      	b.n	8002258 <commandReply+0x1b0>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 800223a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c59      	adds	r1, r3, #1
 8002242:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002246:	6011      	str	r1, [r2, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800224e:	4413      	add	r3, r2
 8002250:	2210      	movs	r2, #16
 8002252:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8002254:	2307      	movs	r3, #7
 8002256:	e0a6      	b.n	80023a6 <commandReply+0x2fe>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 8002258:	4668      	mov	r0, sp
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	22b8      	movs	r2, #184	; 0xb8
 8002260:	4619      	mov	r1, r3
 8002262:	f014 f92d 	bl	80164c0 <memcpy>
 8002266:	f107 0308 	add.w	r3, r7, #8
 800226a:	cb0c      	ldmia	r3, {r2, r3}
 800226c:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8002270:	f008 fd1e 	bl	800acb0 <scaraPosition_packaging>
 8002274:	4602      	mov	r2, r0
 8002276:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800227a:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 800227c:	2302      	movs	r3, #2
 800227e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8002282:	e08e      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_TEST_METHOD_SETTING:
		detail[(*detail_length)++] = TEST_VALUE_SETTING;
 8002284:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002290:	6011      	str	r1, [r2, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002298:	4413      	add	r3, r2
 800229a:	2211      	movs	r2, #17
 800229c:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 800229e:	2308      	movs	r3, #8
 80022a0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022a4:	e07d      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 80022a6:	2308      	movs	r3, #8
 80022a8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022ac:	e079      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 80022ae:	2309      	movs	r3, #9
 80022b0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80022b4:	e075      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_GCODE:{
		if(point_counter == total_num_of_point){
 80022b6:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <commandReply+0x310>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <commandReply+0x314>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d110      	bne.n	80022e6 <commandReply+0x23e>
			detail[(*detail_length)++] = GCODE_TRANSFER_FINISH;
 80022c4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1c59      	adds	r1, r3, #1
 80022cc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022d0:	6011      	str	r1, [r2, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80022d8:	4413      	add	r3, r2
 80022da:	221e      	movs	r2, #30
 80022dc:	701a      	strb	r2, [r3, #0]
			ret = RPD_OK;
 80022de:	2308      	movs	r3, #8
 80022e0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}else{
			ret = RPD_TRANSFER;
		}
	}
	break;
 80022e4:	e05d      	b.n	80023a2 <commandReply+0x2fa>
			ret = RPD_TRANSFER;
 80022e6:	230a      	movs	r3, #10
 80022e8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	break;
 80022ec:	e059      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_GCODE_CONFIGURE:
	{
		detail[(*detail_length)++] = GCODE_OFFSET_CONFIGURE;
 80022ee:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	1c59      	adds	r1, r3, #1
 80022f6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80022fa:	6011      	str	r1, [r2, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002302:	4413      	add	r3, r2
 8002304:	221f      	movs	r2, #31
 8002306:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002308:	2308      	movs	r3, #8
 800230a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	break;
 800230e:	e048      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_GCODE_PAUSE:
	case CMD_JOB_PUSH_MOVE_LINE:
	case CMD_JOB_PUSH_MOVE_JOINT:
	case CMD_GCODE_RESUME:
	case CMD_GCODE_RUN:
		ret = RPD_DUTY;
 8002310:	2309      	movs	r3, #9
 8002312:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8002316:	e044      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8002318:	2309      	movs	r3, #9
 800231a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800231e:	e040      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_KEY_SPEED:{
		detail[(*detail_length)++] = MANUAL_SPEED;
 8002320:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c59      	adds	r1, r3, #1
 8002328:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800232c:	6011      	str	r1, [r2, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002334:	4413      	add	r3, r2
 8002336:	2216      	movs	r2, #22
 8002338:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 800233a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800233e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	1c59      	adds	r1, r3, #1
 8002346:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800234a:	6011      	str	r1, [r2, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002352:	4413      	add	r3, r2
 8002354:	b2c2      	uxtb	r2, r0
 8002356:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8002358:	2308      	movs	r3, #8
 800235a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 800235e:	e020      	b.n	80023a2 <commandReply+0x2fa>
	case CMD_ERROR:{
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8002360:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	1c59      	adds	r1, r3, #1
 8002368:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800236c:	6011      	str	r1, [r2, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002374:	4413      	add	r3, r2
 8002376:	2215      	movs	r2, #21
 8002378:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800237a:	2307      	movs	r3, #7
 800237c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
		break;
 8002380:	e00f      	b.n	80023a2 <commandReply+0x2fa>
	default:
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8002382:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1c59      	adds	r1, r3, #1
 800238a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800238e:	6011      	str	r1, [r2, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002396:	4413      	add	r3, r2
 8002398:	2217      	movs	r2, #23
 800239a:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800239c:	2307      	movs	r3, #7
 800239e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	return ret;
 80023a2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	37d0      	adds	r7, #208	; 0xd0
 80023aa:	46bd      	mov	sp, r7
 80023ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023b0:	b002      	add	sp, #8
 80023b2:	4770      	bx	lr
 80023b4:	2000fd28 	.word	0x2000fd28
 80023b8:	20004404 	.word	0x20004404
 80023bc:	20008fa8 	.word	0x20008fa8

080023c0 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	617a      	str	r2, [r7, #20]
 80023da:	461a      	mov	r2, r3
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	4413      	add	r3, r2
 80023e0:	2228      	movs	r2, #40	; 0x28
 80023e2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	617a      	str	r2, [r7, #20]
 80023ea:	461a      	mov	r2, r3
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	4413      	add	r3, r2
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	617a      	str	r2, [r7, #20]
 80023fa:	461a      	mov	r2, r3
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	4413      	add	r3, r2
 8002400:	2202      	movs	r2, #2
 8002402:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	617a      	str	r2, [r7, #20]
 800240a:	461a      	mov	r2, r3
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	4413      	add	r3, r2
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	617a      	str	r2, [r7, #20]
 800241a:	461a      	mov	r2, r3
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	4413      	add	r3, r2
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00c      	beq.n	8002446 <commandRespond1+0x86>
		memcpy(&respond[out_length], detail, detail_length);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	6a3a      	ldr	r2, [r7, #32]
 8002430:	4413      	add	r3, r2
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	f014 f842 	bl	80164c0 <memcpy>
		out_length += detail_length;
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	4413      	add	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e007      	b.n	8002456 <commandRespond1+0x96>
	}else{
		respond[out_length++] = NONE;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	617a      	str	r2, [r7, #20]
 800244c:	461a      	mov	r2, r3
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	4413      	add	r3, r2
 8002452:	2225      	movs	r2, #37	; 0x25
 8002454:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x7d;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	617a      	str	r2, [r7, #20]
 800245c:	461a      	mov	r2, r3
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	4413      	add	r3, r2
 8002462:	227d      	movs	r2, #125	; 0x7d
 8002464:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = 0x29;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	617a      	str	r2, [r7, #20]
 800246c:	461a      	mov	r2, r3
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	4413      	add	r3, r2
 8002472:	2229      	movs	r2, #41	; 0x29
 8002474:	701a      	strb	r2, [r3, #0]
	respond[1] = out_length - 2;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	3301      	adds	r3, #1
 800247e:	3a02      	subs	r2, #2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
	return out_length;
 8002484:	697b      	ldr	r3, [r7, #20]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b096      	sub	sp, #88	; 0x58
 8002494:	af02      	add	r7, sp, #8
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 800249c:	887a      	ldrh	r2, [r7, #2]
 800249e:	f107 0008 	add.w	r0, r7, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <LOG_REPORT+0x78>)
 80024aa:	213f      	movs	r1, #63	; 0x3f
 80024ac:	f014 ff72 	bl	8017394 <sniprintf>
 80024b0:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80024b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d101      	bne.n	80024be <LOG_REPORT+0x2e>
		return FALSE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e01f      	b.n	80024fe <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80024be:	f107 0308 	add.w	r3, r7, #8
 80024c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024c4:	4619      	mov	r1, r3
 80024c6:	4811      	ldr	r0, [pc, #68]	; (800250c <LOG_REPORT+0x7c>)
 80024c8:	f003 fc06 	bl	8005cd8 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80024cc:	4810      	ldr	r0, [pc, #64]	; (8002510 <LOG_REPORT+0x80>)
 80024ce:	f009 ff4d 	bl	800c36c <HAL_DMA_GetState>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d101      	bne.n	80024dc <LOG_REPORT+0x4c>
		return TRUE;
 80024d8:	2301      	movs	r3, #1
 80024da:	e010      	b.n	80024fe <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80024dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <LOG_REPORT+0x84>)
 80024e2:	480a      	ldr	r0, [pc, #40]	; (800250c <LOG_REPORT+0x7c>)
 80024e4:	f003 fc20 	bl	8005d28 <ringBuff_PopArray>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80024ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024f2:	461a      	mov	r2, r3
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <LOG_REPORT+0x84>)
 80024f6:	4808      	ldr	r0, [pc, #32]	; (8002518 <LOG_REPORT+0x88>)
 80024f8:	f00c fcd4 	bl	800eea4 <HAL_UART_Transmit_DMA>
	return TRUE;
 80024fc:	2301      	movs	r3, #1
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3750      	adds	r7, #80	; 0x50
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	0801c770 	.word	0x0801c770
 800250c:	20002074 	.word	0x20002074
 8002510:	20010e30 	.word	0x20010e30
 8002514:	2000fd60 	.word	0x2000fd60
 8002518:	20010df0 	.word	0x20010df0

0800251c <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_length, uint8_t*data_packet) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]

	int32_t data_length = in_length - 3;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3b03      	subs	r3, #3
 800252c:	617b      	str	r3, [r7, #20]
	uint16_t packet_length = *(uint16_t*)(&message_buff[1]);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002534:	827b      	strh	r3, [r7, #18]
	//check packet length
	if(packet_length == data_length && backup_available == 0){
 8002536:	8a7b      	ldrh	r3, [r7, #18]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	429a      	cmp	r2, r3
 800253c:	d119      	bne.n	8002572 <unPackPayload+0x56>
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <unPackPayload+0xd8>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <unPackPayload+0x56>
		// check minimum lenght
		if (in_length < MIN_MESSAGE_LENGHT) {
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b03      	cmp	r3, #3
 800254a:	dc02      	bgt.n	8002552 <unPackPayload+0x36>
			return -1;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
 8002550:	e04c      	b.n	80025ec <unPackPayload+0xd0>
		}

		// check start char
		if(message_buff[0] != START_CHAR){
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b28      	cmp	r3, #40	; 0x28
 8002558:	d002      	beq.n	8002560 <unPackPayload+0x44>
			return -1;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	e045      	b.n	80025ec <unPackPayload+0xd0>
		}
		memcpy(data_packet, &message_buff[3], data_length - RECEIVE_END_LENGTH);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1cd9      	adds	r1, r3, #3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3b02      	subs	r3, #2
 8002568:	461a      	mov	r2, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f013 ffa8 	bl	80164c0 <memcpy>
 8002570:	e03a      	b.n	80025e8 <unPackPayload+0xcc>
	}else if(packet_length != data_length && backup_available == 0){
 8002572:	8a7b      	ldrh	r3, [r7, #18]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	429a      	cmp	r2, r3
 8002578:	d01b      	beq.n	80025b2 <unPackPayload+0x96>
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <unPackPayload+0xd8>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d117      	bne.n	80025b2 <unPackPayload+0x96>
		// check start char
		if(message_buff[0] != START_CHAR){
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b28      	cmp	r3, #40	; 0x28
 8002588:	d002      	beq.n	8002590 <unPackPayload+0x74>
			return -1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e02d      	b.n	80025ec <unPackPayload+0xd0>
		}
		backup_available = 1;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <unPackPayload+0xd8>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
		memcpy(data_packet, &message_buff[3], data_length);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3303      	adds	r3, #3
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4619      	mov	r1, r3
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f013 ff8e 	bl	80164c0 <memcpy>
		backup_length = data_length;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <unPackPayload+0xdc>)
 80025aa:	801a      	strh	r2, [r3, #0]
		return - 1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
 80025b0:	e01c      	b.n	80025ec <unPackPayload+0xd0>
	}else if(backup_available == 1){
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <unPackPayload+0xd8>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d113      	bne.n	80025e2 <unPackPayload+0xc6>
		backup_available = 0;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <unPackPayload+0xd8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
		memcpy(&data_packet[backup_length], message_buff, in_length);
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <unPackPayload+0xdc>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f013 ff76 	bl	80164c0 <memcpy>
		data_length = backup_length + in_length;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <unPackPayload+0xdc>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4413      	add	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e002      	b.n	80025e8 <unPackPayload+0xcc>
	}else{
		return - 1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	e001      	b.n	80025ec <unPackPayload+0xd0>
	}


	return data_length - RECEIVE_END_LENGTH;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3b02      	subs	r3, #2
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000fe60 	.word	0x2000fe60
 80025f8:	2000fe62 	.word	0x2000fe62

080025fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_DMA_Init+0x3c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <MX_DMA_Init+0x3c>)
 800260c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_DMA_Init+0x3c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2105      	movs	r1, #5
 8002622:	200f      	movs	r0, #15
 8002624:	f009 fbc6 	bl	800bdb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002628:	200f      	movs	r0, #15
 800262a:	f009 fbdf 	bl	800bdec <HAL_NVIC_EnableIRQ>

}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800

0800263c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <vApplicationGetIdleTaskMemory+0x2c>)
 800264c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <vApplicationGetIdleTaskMemory+0x30>)
 8002652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	20004408 	.word	0x20004408
 800266c:	2000445c 	.word	0x2000445c

08002670 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b094      	sub	sp, #80	; 0x50
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8002676:	2300      	movs	r3, #0
 8002678:	64bb      	str	r3, [r7, #72]	; 0x48
 800267a:	2300      	movs	r3, #0
 800267c:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 800267e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002682:	4618      	mov	r0, r3
 8002684:	f010 fc1a 	bl	8012ebc <osMutexCreate>
 8002688:	4603      	mov	r3, r0
 800268a:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <MX_FREERTOS_Init+0x90>)
 800268c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 800268e:	2301      	movs	r3, #1
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
 8002692:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002698:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800269c:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 800269e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f010 fd21 	bl	80130ec <osMailCreate>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4a15      	ldr	r2, [pc, #84]	; (8002704 <MX_FREERTOS_Init+0x94>)
 80026ae:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2060);
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <MX_FREERTOS_Init+0x98>)
 80026b2:	f107 041c 	add.w	r4, r7, #28
 80026b6:	461d      	mov	r5, r3
 80026b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f010 fb09 	bl	8012ce2 <osThreadCreate>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <MX_FREERTOS_Init+0x9c>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_FREERTOS_Init+0xa0>)
 80026d8:	463c      	mov	r4, r7
 80026da:	461d      	mov	r5, r3
 80026dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 80026e8:	463b      	mov	r3, r7
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f010 faf8 	bl	8012ce2 <osThreadCreate>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <MX_FREERTOS_Init+0xa4>)
 80026f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80026f8:	bf00      	nop
 80026fa:	3750      	adds	r7, #80	; 0x50
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002700:	2000fe68 	.word	0x2000fe68
 8002704:	2000fe6c 	.word	0x2000fe6c
 8002708:	0801c7ac 	.word	0x0801c7ac
 800270c:	2000fe64 	.word	0x2000fe64
 8002710:	0801c7c8 	.word	0x0801c7c8
 8002714:	2000fe70 	.word	0x2000fe70

08002718 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	f5ad 5d8f 	sub.w	sp, sp, #4576	; 0x11e0
 800271e:	b087      	sub	sp, #28
 8002720:	af6c      	add	r7, sp, #432	; 0x1b0
 8002722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002726:	3b0c      	subs	r3, #12
 8002728:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800272a:	f013 f93f 	bl	80159ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 800272e:	2201      	movs	r2, #1
 8002730:	2110      	movs	r1, #16
 8002732:	48d3      	ldr	r0, [pc, #844]	; (8002a80 <StartDefaultTask+0x368>)
 8002734:	f00a f8a4 	bl	800c880 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002738:	2300      	movs	r3, #0
 800273a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800273e:	f102 0207 	add.w	r2, r2, #7
 8002742:	7013      	strb	r3, [r2, #0]
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package Object[8];
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800274a:	f102 0206 	add.w	r2, r2, #6
 800274e:	7013      	strb	r3, [r2, #0]
  uint8_t object_head_pointer = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002756:	f102 0205 	add.w	r2, r2, #5
 800275a:	7013      	strb	r3, [r2, #0]
  double state_time = 0;
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002768:	f101 0118 	add.w	r1, r1, #24
 800276c:	e9c1 2300 	strd	r2, r3, [r1]
  int run_point = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002776:	f102 0214 	add.w	r2, r2, #20
 800277a:	6013      	str	r3, [r2, #0]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 800277c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002780:	4ac0      	ldr	r2, [pc, #768]	; (8002a84 <StartDefaultTask+0x36c>)
 8002782:	4618      	mov	r0, r3
 8002784:	4611      	mov	r1, r2
 8002786:	2390      	movs	r3, #144	; 0x90
 8002788:	461a      	mov	r2, r3
 800278a:	f013 fe99 	bl	80164c0 <memcpy>
  		{257.2121f, -76.9947f, 0.0f} ,
  		{258.221f, -47.1851f, 0.0f} ,
		{260.695f, -17.075f, 0.0f} ,
		{260.4f, 13.66f, 0.0f}
  };
  const double placement_spacing = -20.0f;
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4bbd      	ldr	r3, [pc, #756]	; (8002a88 <StartDefaultTask+0x370>)
 8002794:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002798:	f101 0108 	add.w	r1, r1, #8
 800279c:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t Slot_Placement[NUM_OF_OBJECT] = {
 80027a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027a4:	3b08      	subs	r3, #8
 80027a6:	4ab9      	ldr	r2, [pc, #740]	; (8002a8c <StartDefaultTask+0x374>)
 80027a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027ac:	6018      	str	r0, [r3, #0]
 80027ae:	3304      	adds	r3, #4
 80027b0:	8019      	strh	r1, [r3, #0]
		  0, 0, 0, 0, 0, 0
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80027b2:	21eb      	movs	r1, #235	; 0xeb
 80027b4:	48b6      	ldr	r0, [pc, #728]	; (8002a90 <StartDefaultTask+0x378>)
 80027b6:	f7ff fe6b 	bl	8002490 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80027ba:	f008 fa3b 	bl	800ac34 <scaraGetMethod>
 80027be:	4603      	mov	r3, r0
 80027c0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027c4:	f102 021f 	add.w	r2, r2, #31
 80027c8:	7013      	strb	r3, [r2, #0]
  current_mode	 = scaraGetMode();
 80027ca:	f008 fa27 	bl	800ac1c <scaraGetMode>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027d4:	f102 021e 	add.w	r2, r2, #30
 80027d8:	7013      	strb	r3, [r2, #0]
  current_duty_state	 = scaraGetDutyState();
 80027da:	f008 fa37 	bl	800ac4c <scaraGetDutyState>
 80027de:	4603      	mov	r3, r0
 80027e0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80027e4:	f102 021d 	add.w	r2, r2, #29
 80027e8:	7013      	strb	r3, [r2, #0]

  // Start up robot
  scaraStartup();
 80027ea:	f004 fa71 	bl	8006cd0 <scaraStartup>
  osDelay(10);
 80027ee:	200a      	movs	r0, #10
 80027f0:	f010 fac3 	bl	8012d7a <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 80027f4:	49a7      	ldr	r1, [pc, #668]	; (8002a94 <StartDefaultTask+0x37c>)
 80027f6:	a39a      	add	r3, pc, #616	; (adr r3, 8002a60 <StartDefaultTask+0x348>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8002800:	49a4      	ldr	r1, [pc, #656]	; (8002a94 <StartDefaultTask+0x37c>)
 8002802:	a399      	add	r3, pc, #612	; (adr r3, 8002a68 <StartDefaultTask+0x350>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  positionNext.D3 = 0.034999;
 800280c:	49a1      	ldr	r1, [pc, #644]	; (8002a94 <StartDefaultTask+0x37c>)
 800280e:	a398      	add	r3, pc, #608	; (adr r3, 8002a70 <StartDefaultTask+0x358>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 8002818:	499e      	ldr	r1, [pc, #632]	; (8002a94 <StartDefaultTask+0x37c>)
 800281a:	a397      	add	r3, pc, #604	; (adr r3, 8002a78 <StartDefaultTask+0x360>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
  positionNext.t = 0;
 8002824:	499b      	ldr	r1, [pc, #620]	; (8002a94 <StartDefaultTask+0x37c>)
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  kinematicForward(&positionNext);
 8002832:	4898      	ldr	r0, [pc, #608]	; (8002a94 <StartDefaultTask+0x37c>)
 8002834:	f002 fe0c 	bl	8005450 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8002838:	4897      	ldr	r0, [pc, #604]	; (8002a98 <StartDefaultTask+0x380>)
 800283a:	f00b ff02 	bl	800e642 <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	f04f 32ff 	mov.w	r2, #4294967295
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f010 faeb 	bl	8012e24 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 800284e:	2300      	movs	r3, #0
 8002850:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002854:	f102 0204 	add.w	r2, r2, #4
 8002858:	6013      	str	r3, [r2, #0]
	  respond_packed_lenght = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002860:	6013      	str	r3, [r2, #0]
	  infor_lenght			= 0;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
	  infor_packed_lenght	= 0;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 3ff8 	str.w	r3, [r7, #4088]	; 0xff8
	  task_usb_lenght		= 0;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
	  usb_lenght			= 0;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
	  total_respond_length  = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002880:	6013      	str	r3, [r2, #0]
	  detail_ptr 			= 0;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002888:	4a84      	ldr	r2, [pc, #528]	; (8002a9c <StartDefaultTask+0x384>)
 800288a:	4b85      	ldr	r3, [pc, #532]	; (8002aa0 <StartDefaultTask+0x388>)
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	23c0      	movs	r3, #192	; 0xc0
 8002892:	461a      	mov	r2, r3
 8002894:	f013 fe14 	bl	80164c0 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002898:	4a81      	ldr	r2, [pc, #516]	; (8002aa0 <StartDefaultTask+0x388>)
 800289a:	4b7e      	ldr	r3, [pc, #504]	; (8002a94 <StartDefaultTask+0x37c>)
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	23c0      	movs	r3, #192	; 0xc0
 80028a2:	461a      	mov	r2, r3
 80028a4:	f013 fe0c 	bl	80164c0 <memcpy>

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80028a8:	4b7e      	ldr	r3, [pc, #504]	; (8002aa4 <StartDefaultTask+0x38c>)
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	f607 73c4 	addw	r3, r7, #4036	; 0xfc4
 80028b0:	2200      	movs	r2, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f010 fcc6 	bl	8013244 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80028b8:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	; 0xfc4
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d119      	bne.n	80028f4 <StartDefaultTask+0x1dc>
		   dataMail = ret_mail.value.p;
 80028c0:	f8d7 3fc8 	ldr.w	r3, [r7, #4040]	; 0xfc8
 80028c4:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80028c8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80028cc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80028d0:	f8d7 1fe8 	ldr.w	r1, [r7, #4072]	; 0xfe8
 80028d4:	4618      	mov	r0, r3
 80028d6:	f013 fdf3 	bl	80164c0 <memcpy>
		   isNewDuty = TRUE;
 80028da:	2301      	movs	r3, #1
 80028dc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80028e0:	f102 0207 	add.w	r2, r2, #7
 80028e4:	7013      	strb	r3, [r2, #0]
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80028e6:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <StartDefaultTask+0x38c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8d7 1fe8 	ldr.w	r1, [r7, #4072]	; 0xfe8
 80028ee:	4618      	mov	r0, r3
 80028f0:	f010 fd1c 	bl	801332c <osMailFree>
	  }
	  if(isNewDuty) {
 80028f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80028f8:	f103 0307 	add.w	r3, r3, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8485 	beq.w	800320e <StartDefaultTask+0xaf6>
		  if (duty_cmd.change_method == TRUE) {
 8002904:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	f040 8145 	bne.w	8002b9a <StartDefaultTask+0x482>
			  //vPortFree(Gcode_Cor);
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002910:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d132      	bne.n	8002980 <StartDefaultTask+0x268>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 800291a:	2300      	movs	r3, #0
 800291c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002920:	f102 021f 	add.w	r2, r2, #31
 8002924:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002926:	2300      	movs	r3, #0
 8002928:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800292c:	f102 021d 	add.w	r2, r2, #29
 8002930:	7013      	strb	r3, [r2, #0]
				detail_array[0] = MANUAL_METHOD;
 8002932:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002936:	2218      	movs	r2, #24
 8002938:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800293a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002944:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	2008      	movs	r0, #8
 8002956:	f7ff fd33 	bl	80023c0 <commandRespond1>
 800295a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800295e:	f103 0304 	add.w	r3, r3, #4
 8002962:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002964:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800296e:	f103 0304 	add.w	r3, r3, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4413      	add	r3, r2
 8002976:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	f000 bc41 	b.w	8003202 <StartDefaultTask+0xaea>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002980:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d132      	bne.n	80029f0 <StartDefaultTask+0x2d8>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 800298a:	2301      	movs	r3, #1
 800298c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002990:	f102 021f 	add.w	r2, r2, #31
 8002994:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002996:	2300      	movs	r3, #0
 8002998:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800299c:	f102 021d 	add.w	r2, r2, #29
 80029a0:	7013      	strb	r3, [r2, #0]
				detail_array[0] = SEMI_AUTO_METHOD;
 80029a2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80029a6:	2219      	movs	r2, #25
 80029a8:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029aa:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80029ae:	6899      	ldr	r1, [r3, #8]
 80029b0:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80029b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2301      	movs	r3, #1
 80029c4:	2008      	movs	r0, #8
 80029c6:	f7ff fcfb 	bl	80023c0 <commandRespond1>
 80029ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029ce:	f103 0304 	add.w	r3, r3, #4
 80029d2:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 80029d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029de:	f103 0304 	add.w	r3, r3, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	f000 bc09 	b.w	8003202 <StartDefaultTask+0xaea>
			  } else if (SCARA_METHOD_GCODE == duty_cmd.robot_method) {
 80029f0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d156      	bne.n	8002aa8 <StartDefaultTask+0x390>
//				  Gcode_Cor = pvPortMalloc(total_num_of_point*sizeof(SCARA_Gcode_Cor_TypeDef));
//					if(Gcode_Cor == NULL){
//					  int t =2;
//					}
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a00:	f102 021d 	add.w	r2, r2, #29
 8002a04:	7013      	strb	r3, [r2, #0]
				  current_method = SCARA_METHOD_GCODE;
 8002a06:	2302      	movs	r3, #2
 8002a08:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a0c:	f102 021f 	add.w	r2, r2, #31
 8002a10:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = GCODE_METHOD;
 8002a12:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002a16:	221a      	movs	r2, #26
 8002a18:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002a1a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002a24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	2008      	movs	r0, #8
 8002a36:	f7ff fcc3 	bl	80023c0 <commandRespond1>
 8002a3a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a3e:	f103 0304 	add.w	r3, r3, #4
 8002a42:	6018      	str	r0, [r3, #0]
				total_respond_length += respond_lenght;
 8002a44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a4e:	f103 0304 	add.w	r3, r3, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	e3d1      	b.n	8003202 <StartDefaultTask+0xaea>
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000
 8002a64:	bff7b904 	.word	0xbff7b904
 8002a68:	80000000 	.word	0x80000000
 8002a6c:	4002d893 	.word	0x4002d893
 8002a70:	90c91080 	.word	0x90c91080
 8002a74:	3fa1eb63 	.word	0x3fa1eb63
 8002a78:	cec41dd2 	.word	0xcec41dd2
 8002a7c:	4007ba14 	.word	0x4007ba14
 8002a80:	40020400 	.word	0x40020400
 8002a84:	0801c8c8 	.word	0x0801c8c8
 8002a88:	c0340000 	.word	0xc0340000
 8002a8c:	0801c958 	.word	0x0801c958
 8002a90:	0801c7e4 	.word	0x0801c7e4
 8002a94:	20010c70 	.word	0x20010c70
 8002a98:	20010db0 	.word	0x20010db0
 8002a9c:	20010970 	.word	0x20010970
 8002aa0:	20010af0 	.word	0x20010af0
 8002aa4:	2000fe6c 	.word	0x2000fe6c
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8002aa8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d13b      	bne.n	8002b2a <StartDefaultTask+0x412>
				  test_value[0] = 0;
 8002ab2:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8002aba:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002abe:	2200      	movs	r2, #0
 8002ac0:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8002ac2:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8002aca:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ace:	2200      	movs	r2, #0
 8002ad0:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ad8:	f102 021f 	add.w	r2, r2, #31
 8002adc:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = TEST_METHOD;
 8002ade:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002ae2:	221b      	movs	r2, #27
 8002ae4:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ae6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002af0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2301      	movs	r3, #1
 8002b00:	2008      	movs	r0, #8
 8002b02:	f7ff fc5d 	bl	80023c0 <commandRespond1>
 8002b06:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002b0a:	f103 0304 	add.w	r3, r3, #4
 8002b0e:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002b10:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002b1a:	f103 0304 	add.w	r3, r3, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	e36b      	b.n	8003202 <StartDefaultTask+0xaea>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8002b2a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	f040 8366 	bne.w	8003202 <StartDefaultTask+0xaea>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8002b36:	2304      	movs	r3, #4
 8002b38:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b3c:	f102 021f 	add.w	r2, r2, #31
 8002b40:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b48:	f102 021d 	add.w	r2, r2, #29
 8002b4c:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8002b4e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002b52:	221c      	movs	r2, #28
 8002b54:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b56:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002b60:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	2008      	movs	r0, #8
 8002b72:	f7ff fc25 	bl	80023c0 <commandRespond1>
 8002b76:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002b7a:	f103 0304 	add.w	r3, r3, #4
 8002b7e:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8002b80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002b8a:	f103 0304 	add.w	r3, r3, #4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e333      	b.n	8003202 <StartDefaultTask+0xaea>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002b9a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ba4:	f102 021f 	add.w	r2, r2, #31
 8002ba8:	7812      	ldrb	r2, [r2, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f040 8300 	bne.w	80031b0 <StartDefaultTask+0xa98>
				  	  switch( duty_cmd.robot_method) {
 8002bb0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	f200 82f4 	bhi.w	80031a4 <StartDefaultTask+0xa8c>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <StartDefaultTask+0x4ac>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002bd9 	.word	0x08002bd9
 8002bc8:	08002c5f 	.word	0x08002c5f
 8002bcc:	08003025 	.word	0x08003025
 8002bd0:	08002eb3 	.word	0x08002eb3
 8002bd4:	080030db 	.word	0x080030db
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002bd8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002bdc:	f103 031b 	add.w	r3, r3, #27
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <StartDefaultTask+0x4fc>
				  			  current_key = duty_cmd.keyboard;
 8002be6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002bea:	78db      	ldrb	r3, [r3, #3]
 8002bec:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bf0:	f102 021a 	add.w	r2, r2, #26
 8002bf4:	7013      	strb	r3, [r2, #0]
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002bfc:	f102 021b 	add.w	r2, r2, #27
 8002c00:	7013      	strb	r3, [r2, #0]
				  			  current_key_speed = duty_cmd.key_speed;
 8002c02:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c0c:	f102 0214 	add.w	r2, r2, #20
 8002c10:	6013      	str	r3, [r2, #0]
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002c12:	e2f3      	b.n	80031fc <StartDefaultTask+0xae4>
				  		  } else if (current_key == duty_cmd.keyboard
 8002c14:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c18:	78db      	ldrb	r3, [r3, #3]
 8002c1a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c1e:	f102 021a 	add.w	r2, r2, #26
 8002c22:	7812      	ldrb	r2, [r2, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f040 82e9 	bne.w	80031fc <StartDefaultTask+0xae4>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002c2a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c2e:	f103 031b 	add.w	r3, r3, #27
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	f040 82e1 	bne.w	80031fc <StartDefaultTask+0xae4>
									  && current_key_speed == duty_cmd.key_speed) {
 8002c3a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c44:	f102 0214 	add.w	r2, r2, #20
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	f040 82d6 	bne.w	80031fc <StartDefaultTask+0xae4>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002c50:	2301      	movs	r3, #1
 8002c52:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c56:	f102 021b 	add.w	r2, r2, #27
 8002c5a:	7013      	strb	r3, [r2, #0]
				  	  break;
 8002c5c:	e2ce      	b.n	80031fc <StartDefaultTask+0xae4>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002c5e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c62:	789b      	ldrb	r3, [r3, #2]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	f000 80a4 	beq.w	8002db2 <StartDefaultTask+0x69a>
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	f300 811a 	bgt.w	8002ea4 <StartDefaultTask+0x78c>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <StartDefaultTask+0x562>
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d031      	beq.n	8002cdc <StartDefaultTask+0x5c4>
 8002c78:	e114      	b.n	8002ea4 <StartDefaultTask+0x78c>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c80:	f102 021e 	add.w	r2, r2, #30
 8002c84:	7013      	strb	r3, [r2, #0]
								detail_array[0] = STOP_NOW;
 8002c86:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002c8e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002c98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	2008      	movs	r0, #8
 8002caa:	f7ff fb89 	bl	80023c0 <commandRespond1>
 8002cae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002cb2:	f103 0304 	add.w	r3, r3, #4
 8002cb6:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8002cb8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002cc2:	f103 0304 	add.w	r3, r3, #4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002cce:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002cd0:	f240 1165 	movw	r1, #357	; 0x165
 8002cd4:	48cd      	ldr	r0, [pc, #820]	; (800300c <StartDefaultTask+0x8f4>)
 8002cd6:	f7ff fbdb 	bl	8002490 <LOG_REPORT>
							  }
							  break;
 8002cda:	e0e9      	b.n	8002eb0 <StartDefaultTask+0x798>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002cdc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ce0:	f103 031e 	add.w	r3, r3, #30
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d138      	bne.n	8002d5c <StartDefaultTask+0x644>
 8002cea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002cee:	f103 031d 	add.w	r3, r3, #29
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d131      	bne.n	8002d5c <StartDefaultTask+0x644>
									  current_mode = SCARA_MODE_SCAN;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002cfe:	f102 021e 	add.w	r2, r2, #30
 8002d02:	7013      	strb	r3, [r2, #0]
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002d0a:	f102 021c 	add.w	r2, r2, #28
 8002d0e:	7013      	strb	r3, [r2, #0]
									detail_array[0] = START_SCAN;
 8002d10:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002d14:	2221      	movs	r2, #33	; 0x21
 8002d16:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d18:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002d22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2301      	movs	r3, #1
 8002d32:	2008      	movs	r0, #8
 8002d34:	f7ff fb44 	bl	80023c0 <commandRespond1>
 8002d38:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002d3c:	f103 0304 	add.w	r3, r3, #4
 8002d40:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002d42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002d4c:	f103 0304 	add.w	r3, r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002d58:	6013      	str	r3, [r2, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002d5a:	e0a9      	b.n	8002eb0 <StartDefaultTask+0x798>
									detail_array[0] = BUSY;
 8002d5c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002d60:	2222      	movs	r2, #34	; 0x22
 8002d62:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002d64:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002d6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	2007      	movs	r0, #7
 8002d80:	f7ff fb1e 	bl	80023c0 <commandRespond1>
 8002d84:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002d88:	f103 0304 	add.w	r3, r3, #4
 8002d8c:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002d8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002d98:	f103 0304 	add.w	r3, r3, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002da4:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002da6:	f240 1179 	movw	r1, #377	; 0x179
 8002daa:	4899      	ldr	r0, [pc, #612]	; (8003010 <StartDefaultTask+0x8f8>)
 8002dac:	f7ff fb70 	bl	8002490 <LOG_REPORT>
							  break;
 8002db0:	e07e      	b.n	8002eb0 <StartDefaultTask+0x798>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002db2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002db6:	f103 031e 	add.w	r3, r3, #30
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d145      	bne.n	8002e4c <StartDefaultTask+0x734>
 8002dc0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002dc4:	f103 031d 	add.w	r3, r3, #29
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d13e      	bne.n	8002e4c <StartDefaultTask+0x734>
									  scaraSetScanFlag();
 8002dce:	f007 feb7 	bl	800ab40 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 8002dd2:	f007 ff47 	bl	800ac64 <scaraIsScanLimit>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <StartDefaultTask+0x6de>
										  current_mode	 = SCARA_MODE_DUTY;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002de2:	f102 021e 	add.w	r2, r2, #30
 8002de6:	7013      	strb	r3, [r2, #0]
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002dee:	f102 021d 	add.w	r2, r2, #29
 8002df2:	7013      	strb	r3, [r2, #0]
									  if (scaraIsScanLimit()) {
 8002df4:	e055      	b.n	8002ea2 <StartDefaultTask+0x78a>
									  } else {
										detail_array[0] = NOT_SCAN;
 8002df6:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002dfa:	2223      	movs	r2, #35	; 0x23
 8002dfc:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002dfe:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002e08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2301      	movs	r3, #1
 8002e18:	2007      	movs	r0, #7
 8002e1a:	f7ff fad1 	bl	80023c0 <commandRespond1>
 8002e1e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e22:	f103 0304 	add.w	r3, r3, #4
 8002e26:	6018      	str	r0, [r3, #0]
										total_respond_length += respond_lenght;
 8002e28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e32:	f103 0304 	add.w	r3, r3, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002e3e:	6013      	str	r3, [r2, #0]
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002e40:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002e44:	4873      	ldr	r0, [pc, #460]	; (8003014 <StartDefaultTask+0x8fc>)
 8002e46:	f7ff fb23 	bl	8002490 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002e4a:	e02a      	b.n	8002ea2 <StartDefaultTask+0x78a>
									  }
								  } else {
									detail_array[0] = BUSY;
 8002e4c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8002e50:	2222      	movs	r2, #34	; 0x22
 8002e52:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002e54:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8002e5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	2007      	movs	r0, #7
 8002e70:	f7ff faa6 	bl	80023c0 <commandRespond1>
 8002e74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e78:	f103 0304 	add.w	r3, r3, #4
 8002e7c:	6018      	str	r0, [r3, #0]
									total_respond_length += respond_lenght;
 8002e7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e88:	f103 0304 	add.w	r3, r3, #4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002e94:	6013      	str	r3, [r2, #0]
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002e96:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8002e9a:	485f      	ldr	r0, [pc, #380]	; (8003018 <StartDefaultTask+0x900>)
 8002e9c:	f7ff faf8 	bl	8002490 <LOG_REPORT>
								  }
							  }
							  break;
 8002ea0:	e006      	b.n	8002eb0 <StartDefaultTask+0x798>
 8002ea2:	e005      	b.n	8002eb0 <StartDefaultTask+0x798>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002ea4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002ea8:	485c      	ldr	r0, [pc, #368]	; (800301c <StartDefaultTask+0x904>)
 8002eaa:	f7ff faf1 	bl	8002490 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002eae:	e1a8      	b.n	8003202 <StartDefaultTask+0xaea>
 8002eb0:	e1a7      	b.n	8003202 <StartDefaultTask+0xaea>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002eb2:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 8002eba:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002ec2:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 8002eca:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002ece:	2200      	movs	r2, #0
 8002ed0:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 8002ed2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002ed6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002eda:	2b07      	cmp	r3, #7
 8002edc:	f200 8094 	bhi.w	8003008 <StartDefaultTask+0x8f0>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <StartDefaultTask+0x7d0>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f09 	.word	0x08002f09
 8002eec:	08002f25 	.word	0x08002f25
 8002ef0:	08002f49 	.word	0x08002f49
 8002ef4:	08002f65 	.word	0x08002f65
 8002ef8:	08002f89 	.word	0x08002f89
 8002efc:	08002fa5 	.word	0x08002fa5
 8002f00:	08002fc9 	.word	0x08002fc9
 8002f04:	08002fe5 	.word	0x08002fe5
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[0];
 8002f08:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f0c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b42      	ldr	r3, [pc, #264]	; (8003020 <StartDefaultTask+0x908>)
 8002f18:	f993 1000 	ldrsb.w	r1, [r3]
 8002f1c:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f20:	5499      	strb	r1, [r3, r2]
						  break;
 8002f22:	e072      	b.n	800300a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[0];
 8002f24:	4b3e      	ldr	r3, [pc, #248]	; (8003020 <StartDefaultTask+0x908>)
 8002f26:	f993 3000 	ldrsb.w	r3, [r3]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	b2d9      	uxtb	r1, r3
 8002f30:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f34:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	b249      	sxtb	r1, r1
 8002f40:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f44:	5499      	strb	r1, [r3, r2]
						  break;
 8002f46:	e060      	b.n	800300a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[1];
 8002f48:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f4c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b32      	ldr	r3, [pc, #200]	; (8003020 <StartDefaultTask+0x908>)
 8002f58:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002f5c:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f60:	5499      	strb	r1, [r3, r2]
						  break;
 8002f62:	e052      	b.n	800300a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[1];
 8002f64:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <StartDefaultTask+0x908>)
 8002f66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	425b      	negs	r3, r3
 8002f6e:	b2d9      	uxtb	r1, r3
 8002f70:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f74:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	b249      	sxtb	r1, r1
 8002f80:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002f84:	5499      	strb	r1, [r3, r2]
						  break;
 8002f86:	e040      	b.n	800300a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[2];
 8002f88:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002f8c:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <StartDefaultTask+0x908>)
 8002f98:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002f9c:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002fa0:	5499      	strb	r1, [r3, r2]
						  break;
 8002fa2:	e032      	b.n	800300a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[2];
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <StartDefaultTask+0x908>)
 8002fa6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	425b      	negs	r3, r3
 8002fae:	b2d9      	uxtb	r1, r3
 8002fb0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002fb4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	b249      	sxtb	r1, r1
 8002fc0:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002fc4:	5499      	strb	r1, [r3, r2]
						  break;
 8002fc6:	e020      	b.n	800300a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = test_value_array[3];
 8002fc8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002fcc:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <StartDefaultTask+0x908>)
 8002fd8:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8002fdc:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8002fe0:	5499      	strb	r1, [r3, r2]
						  break;
 8002fe2:	e012      	b.n	800300a <StartDefaultTask+0x8f2>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -test_value_array[3];
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <StartDefaultTask+0x908>)
 8002fe6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	425b      	negs	r3, r3
 8002fee:	b2d9      	uxtb	r1, r3
 8002ff0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8002ff4:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	b249      	sxtb	r1, r1
 8003000:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003004:	5499      	strb	r1, [r3, r2]
						  break;						  
 8003006:	e000      	b.n	800300a <StartDefaultTask+0x8f2>
						  default:
							  break;
 8003008:	bf00      	nop
						  }
					  }
					  break;
 800300a:	e0fa      	b.n	8003202 <StartDefaultTask+0xaea>
 800300c:	0801c804 	.word	0x0801c804
 8003010:	0801c814 	.word	0x0801c814
 8003014:	0801c824 	.word	0x0801c824
 8003018:	0801c838 	.word	0x0801c838
 800301c:	0801c848 	.word	0x0801c848
 8003020:	20000000 	.word	0x20000000
				  	  case SCARA_METHOD_GCODE:
				  	  {
				  		  if(current_duty_state == SCARA_DUTY_STATE_READY && duty_cmd.id_command == CMD_GCODE_RUN){
 8003024:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003028:	f103 031d 	add.w	r3, r3, #29
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d120      	bne.n	8003074 <StartDefaultTask+0x95c>
 8003032:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b13      	cmp	r3, #19
 800303a:	d11b      	bne.n	8003074 <StartDefaultTask+0x95c>
				  			  if(Gcode_Mode == GCODE_LINEAR){
 800303c:	4bc2      	ldr	r3, [pc, #776]	; (8003348 <StartDefaultTask+0xc30>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d106      	bne.n	8003052 <StartDefaultTask+0x93a>
				  				run_point = 1;
 8003044:	2301      	movs	r3, #1
 8003046:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800304a:	f102 0214 	add.w	r2, r2, #20
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e009      	b.n	8003066 <StartDefaultTask+0x94e>
				  			  }else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8003052:	4bbd      	ldr	r3, [pc, #756]	; (8003348 <StartDefaultTask+0xc30>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b09      	cmp	r3, #9
 8003058:	d105      	bne.n	8003066 <StartDefaultTask+0x94e>
				  				run_point = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003060:	f102 0214 	add.w	r2, r2, #20
 8003064:	6013      	str	r3, [r2, #0]
				  			  }

				  			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003066:	2304      	movs	r3, #4
 8003068:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800306c:	f102 021d 	add.w	r2, r2, #29
 8003070:	7013      	strb	r3, [r2, #0]
 8003072:	e031      	b.n	80030d8 <StartDefaultTask+0x9c0>
				  		  }else if(current_duty_state == SCARA_DUTY_STATE_INIT && duty_cmd.id_command == CMD_GCODE_RESUME){
 8003074:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003078:	f103 031d 	add.w	r3, r3, #29
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d111      	bne.n	80030a6 <StartDefaultTask+0x98e>
 8003082:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b12      	cmp	r3, #18
 800308a:	d10c      	bne.n	80030a6 <StartDefaultTask+0x98e>
				  			  lowlayer_readTruePosition(&positionCurrent);
 800308c:	48af      	ldr	r0, [pc, #700]	; (800334c <StartDefaultTask+0xc34>)
 800308e:	f003 f903 	bl	8006298 <lowlayer_readTruePosition>
				  			  kinematicForward(&positionCurrent);
 8003092:	48ae      	ldr	r0, [pc, #696]	; (800334c <StartDefaultTask+0xc34>)
 8003094:	f002 f9dc 	bl	8005450 <kinematicForward>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 8003098:	2301      	movs	r3, #1
 800309a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800309e:	f102 021d 	add.w	r2, r2, #29
 80030a2:	7013      	strb	r3, [r2, #0]
 80030a4:	e018      	b.n	80030d8 <StartDefaultTask+0x9c0>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_STOP){
 80030a6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b0d      	cmp	r3, #13
 80030ae:	d106      	bne.n	80030be <StartDefaultTask+0x9a6>
				  			  current_duty_state = SCARA_DUTY_STATE_READY;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030b6:	f102 021d 	add.w	r2, r2, #29
 80030ba:	7013      	strb	r3, [r2, #0]
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
				  		  }
				  	  }
				  	  break;
 80030bc:	e0a0      	b.n	8003200 <StartDefaultTask+0xae8>
				  		  }else if(duty_cmd.id_command == CMD_GCODE_PAUSE){
 80030be:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b0e      	cmp	r3, #14
 80030c6:	f040 809b 	bne.w	8003200 <StartDefaultTask+0xae8>
				  			  current_duty_state = SCARA_DUTY_STATE_INIT;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030d0:	f102 021d 	add.w	r2, r2, #29
 80030d4:	7013      	strb	r3, [r2, #0]
				  	  break;
 80030d6:	e093      	b.n	8003200 <StartDefaultTask+0xae8>
 80030d8:	e092      	b.n	8003200 <StartDefaultTask+0xae8>
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 80030da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030de:	f103 0305 	add.w	r3, r3, #5
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80030e8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	18d0      	adds	r0, r2, r3
 80030f2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80030f6:	3328      	adds	r3, #40	; 0x28
 80030f8:	22c0      	movs	r2, #192	; 0xc0
 80030fa:	4619      	mov	r1, r3
 80030fc:	f013 f9e0 	bl	80164c0 <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 8003100:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003104:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003108:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800310c:	f101 0105 	add.w	r1, r1, #5
 8003110:	780c      	ldrb	r4, [r1, #0]
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f7fd fd47 	bl	8000ba8 <__aeabi_d2uiz>
 800311a:	4603      	mov	r3, r0
 800311c:	b299      	uxth	r1, r3
 800311e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003122:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8003126:	fb03 f304 	mul.w	r3, r3, r4
 800312a:	4413      	add	r3, r2
 800312c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003130:	460a      	mov	r2, r1
 8003132:	801a      	strh	r2, [r3, #0]
				  		  object_head_pointer = (object_head_pointer+1)%8;
 8003134:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003138:	f103 0305 	add.w	r3, r3, #5
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	3301      	adds	r3, #1
 8003140:	425a      	negs	r2, r3
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	f002 0207 	and.w	r2, r2, #7
 800314a:	bf58      	it	pl
 800314c:	4253      	negpl	r3, r2
 800314e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003152:	f102 0205 	add.w	r2, r2, #5
 8003156:	7013      	strb	r3, [r2, #0]
				  		  detail_array[0] = OBJECT_DETECTED;
 8003158:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800315c:	221d      	movs	r2, #29
 800315e:	701a      	strb	r2, [r3, #0]
						  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003160:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800316a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4413      	add	r3, r2
 8003172:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2301      	movs	r3, #1
 800317a:	2008      	movs	r0, #8
 800317c:	f7ff f920 	bl	80023c0 <commandRespond1>
 8003180:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003184:	f103 0304 	add.w	r3, r3, #4
 8003188:	6018      	str	r0, [r3, #0]
						  total_respond_length += respond_lenght;
 800318a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003194:	f103 0304 	add.w	r3, r3, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4413      	add	r3, r2
 800319c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80031a0:	6013      	str	r3, [r2, #0]
				  	  }
				  	  break;
 80031a2:	e02e      	b.n	8003202 <StartDefaultTask+0xaea>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80031a4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80031a8:	4869      	ldr	r0, [pc, #420]	; (8003350 <StartDefaultTask+0xc38>)
 80031aa:	f7ff f971 	bl	8002490 <LOG_REPORT>
 80031ae:	e028      	b.n	8003202 <StartDefaultTask+0xaea>
				  	  }
				  	  }
			  	  } else {
					detail_array[0] = INCORRECT_METHOD;
 80031b0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80031b4:	2224      	movs	r2, #36	; 0x24
 80031b6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80031b8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80031c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4413      	add	r3, r2
 80031ca:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2301      	movs	r3, #1
 80031d2:	2007      	movs	r0, #7
 80031d4:	f7ff f8f4 	bl	80023c0 <commandRespond1>
 80031d8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80031dc:	f103 0304 	add.w	r3, r3, #4
 80031e0:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80031e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80031ec:	f103 0304 	add.w	r3, r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e002      	b.n	8003202 <StartDefaultTask+0xaea>
				  	  break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <StartDefaultTask+0xaea>
				  	  break;
 8003200:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8003202:	2300      	movs	r3, #0
 8003204:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003208:	f102 0207 	add.w	r2, r2, #7
 800320c:	7013      	strb	r3, [r2, #0]
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 800320e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003212:	f103 031f 	add.w	r3, r3, #31
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b04      	cmp	r3, #4
 800321a:	f201 818d 	bhi.w	8004538 <StartDefaultTask+0x1e20>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <StartDefaultTask+0xb0c>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003239 	.word	0x08003239
 8003228:	08003463 	.word	0x08003463
 800322c:	0800393d 	.word	0x0800393d
 8003230:	08003cc1 	.word	0x08003cc1
 8003234:	08003ce9 	.word	0x08003ce9
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8003238:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800323c:	f103 031b 	add.w	r3, r3, #27
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b03      	cmp	r3, #3
 8003244:	f201 8175 	bhi.w	8004532 <StartDefaultTask+0x1e1a>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <StartDefaultTask+0xb38>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	0800345d 	.word	0x0800345d
 8003254:	08003261 	.word	0x08003261
 8003258:	080032f7 	.word	0x080032f7
 800325c:	08003419 	.word	0x08003419
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed1) == SCARA_STATUS_OK) {
 8003260:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <StartDefaultTask+0xc3c>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003268:	f103 031a 	add.w	r3, r3, #26
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f007 fe0d 	bl	800ae90 <scaraKeyInit1>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d135      	bne.n	80032e8 <StartDefaultTask+0xbd0>
				  run_time = 0;
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003288:	f101 0108 	add.w	r1, r1, #8
 800328c:	e9c1 2300 	strd	r2, r3, [r1]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8003290:	2302      	movs	r3, #2
 8003292:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003296:	f102 021b 	add.w	r2, r2, #27
 800329a:	7013      	strb	r3, [r2, #0]
					detail_array[0] = NONE;
 800329c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80032a0:	2225      	movs	r2, #37	; 0x25
 80032a2:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80032a4:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80032ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2301      	movs	r3, #1
 80032be:	2003      	movs	r0, #3
 80032c0:	f7ff f87e 	bl	80023c0 <commandRespond1>
 80032c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80032c8:	f103 0304 	add.w	r3, r3, #4
 80032cc:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80032ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80032d8:	f103 0304 	add.w	r3, r3, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80032e4:	6013      	str	r3, [r2, #0]
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 80032e6:	e0ba      	b.n	800345e <StartDefaultTask+0xd46>
				  current_key_state = SCARA_KEY_STATE_READY;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80032ee:	f102 021b 	add.w	r2, r2, #27
 80032f2:	7013      	strb	r3, [r2, #0]
		  break;
 80032f4:	e0b3      	b.n	800345e <StartDefaultTask+0xd46>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80032f6:	a312      	add	r3, pc, #72	; (adr r3, 8003340 <StartDefaultTask+0xc28>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003300:	f101 0108 	add.w	r1, r1, #8
 8003304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003308:	f7fc ffc0 	bl	800028c <__adddf3>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003314:	f101 0108 	add.w	r1, r1, #8
 8003318:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 800331c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003320:	f103 0308 	add.w	r3, r3, #8
 8003324:	ed93 0b00 	vldr	d0, [r3]
 8003328:	f007 fca8 	bl	800ac7c <scaraIsFinish>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <StartDefaultTask+0xc40>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8003332:	2303      	movs	r3, #3
 8003334:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003338:	f102 021b 	add.w	r2, r2, #27
 800333c:	7013      	strb	r3, [r2, #0]
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 800333e:	e08e      	b.n	800345e <StartDefaultTask+0xd46>
 8003340:	40000000 	.word	0x40000000
 8003344:	3f847ae1 	.word	0x3f847ae1
 8003348:	200085c8 	.word	0x200085c8
 800334c:	20010af0 	.word	0x20010af0
 8003350:	0801c85c 	.word	0x0801c85c
 8003354:	20000060 	.word	0x20000060
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 8003358:	4cd4      	ldr	r4, [pc, #848]	; (80036ac <StartDefaultTask+0xf94>)
 800335a:	4668      	mov	r0, sp
 800335c:	f104 0308 	add.w	r3, r4, #8
 8003360:	22b8      	movs	r2, #184	; 0xb8
 8003362:	4619      	mov	r1, r3
 8003364:	f013 f8ac 	bl	80164c0 <memcpy>
 8003368:	e894 000c 	ldmia.w	r4, {r2, r3}
 800336c:	48d0      	ldr	r0, [pc, #832]	; (80036b0 <StartDefaultTask+0xf98>)
 800336e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003372:	f101 0108 	add.w	r1, r1, #8
 8003376:	ed91 0b00 	vldr	d0, [r1]
 800337a:	f006 fccd 	bl	8009d18 <scaraFlowDuty>
 800337e:	4603      	mov	r3, r0
 8003380:	f887 3fd1 	strb.w	r3, [r7, #4049]	; 0xfd1
				  if ( SCARA_STATUS_OK == status) {
 8003384:	f897 3fd1 	ldrb.w	r3, [r7, #4049]	; 0xfd1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d113      	bne.n	80033b4 <StartDefaultTask+0xc9c>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800338c:	4cc7      	ldr	r4, [pc, #796]	; (80036ac <StartDefaultTask+0xf94>)
 800338e:	4ac8      	ldr	r2, [pc, #800]	; (80036b0 <StartDefaultTask+0xf98>)
 8003390:	ab2c      	add	r3, sp, #176	; 0xb0
 8003392:	4611      	mov	r1, r2
 8003394:	22c0      	movs	r2, #192	; 0xc0
 8003396:	4618      	mov	r0, r3
 8003398:	f013 f892 	bl	80164c0 <memcpy>
 800339c:	4668      	mov	r0, sp
 800339e:	f104 0310 	add.w	r3, r4, #16
 80033a2:	22b0      	movs	r2, #176	; 0xb0
 80033a4:	4619      	mov	r1, r3
 80033a6:	f013 f88b 	bl	80164c0 <memcpy>
 80033aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033ae:	f003 f903 	bl	80065b8 <lowlayer_computeAndWritePulse>
		  break;
 80033b2:	e054      	b.n	800345e <StartDefaultTask+0xd46>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033ba:	f102 021b 	add.w	r2, r2, #27
 80033be:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status;
 80033c0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80033c4:	f897 2fd1 	ldrb.w	r2, [r7, #4049]	; 0xfd1
 80033c8:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80033ca:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80033ce:	6899      	ldr	r1, [r3, #8]
 80033d0:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80033d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	2301      	movs	r3, #1
 80033e4:	2006      	movs	r0, #6
 80033e6:	f7fe ffeb 	bl	80023c0 <commandRespond1>
 80033ea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80033ee:	f103 0304 	add.w	r3, r3, #4
 80033f2:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 80033f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80033fe:	f103 0304 	add.w	r3, r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4413      	add	r3, r2
 8003406:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800340a:	6013      	str	r3, [r2, #0]
					  LOG_REPORT("STOP KEY", __LINE__);
 800340c:	f240 2116 	movw	r1, #534	; 0x216
 8003410:	48a8      	ldr	r0, [pc, #672]	; (80036b4 <StartDefaultTask+0xf9c>)
 8003412:	f7ff f83d 	bl	8002490 <LOG_REPORT>
		  break;
 8003416:	e022      	b.n	800345e <StartDefaultTask+0xd46>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 8003418:	48a5      	ldr	r0, [pc, #660]	; (80036b0 <StartDefaultTask+0xf98>)
 800341a:	f002 ff3d 	bl	8006298 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 800341e:	48a4      	ldr	r0, [pc, #656]	; (80036b0 <StartDefaultTask+0xf98>)
 8003420:	f002 f816 	bl	8005450 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 8003424:	2300      	movs	r3, #0
 8003426:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800342a:	f102 021b 	add.w	r2, r2, #27
 800342e:	7013      	strb	r3, [r2, #0]
			  positionNext.t = 0;
 8003430:	499f      	ldr	r1, [pc, #636]	; (80036b0 <StartDefaultTask+0xf98>)
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			  positionNext.total_time = 0;
 800343e:	499c      	ldr	r1, [pc, #624]	; (80036b0 <StartDefaultTask+0xf98>)
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  positionNext.q = 0;
 800344c:	4998      	ldr	r1, [pc, #608]	; (80036b0 <StartDefaultTask+0xf98>)
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  break;
 800345a:	e000      	b.n	800345e <StartDefaultTask+0xd46>
		  break;
 800345c:	bf00      	nop
		  }
	  }
	  break;
 800345e:	f001 b868 	b.w	8004532 <StartDefaultTask+0x1e1a>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8003462:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003466:	f103 031e 	add.w	r3, r3, #30
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b02      	cmp	r3, #2
 800346e:	f000 808d 	beq.w	800358c <StartDefaultTask+0xe74>
 8003472:	2b02      	cmp	r3, #2
 8003474:	f300 825a 	bgt.w	800392c <StartDefaultTask+0x1214>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <StartDefaultTask+0xd6a>
 800347c:	2b01      	cmp	r3, #1
 800347e:	d00d      	beq.n	800349c <StartDefaultTask+0xd84>
 8003480:	e254      	b.n	800392c <StartDefaultTask+0x1214>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8003482:	2302      	movs	r3, #2
 8003484:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003488:	f102 021e 	add.w	r2, r2, #30
 800348c:	7013      	strb	r3, [r2, #0]
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800348e:	2300      	movs	r3, #0
 8003490:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003494:	f102 021d 	add.w	r2, r2, #29
 8003498:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 800349a:	e24d      	b.n	8003938 <StartDefaultTask+0x1220>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800349c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80034a0:	f103 031c 	add.w	r3, r3, #28
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d866      	bhi.n	8003578 <StartDefaultTask+0xe60>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <StartDefaultTask+0xd98>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034d3 	.word	0x080034d3
 80034b8:	080034eb 	.word	0x080034eb
 80034bc:	08003505 	.word	0x08003505
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80034c0:	f002 fce4 	bl	8005e8c <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034ca:	f102 021c 	add.w	r2, r2, #28
 80034ce:	7013      	strb	r3, [r2, #0]
					  }
					  break;
 80034d0:	e05b      	b.n	800358a <StartDefaultTask+0xe72>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80034d2:	f002 fd0d 	bl	8005ef0 <lowlayer_scanFlow>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d053      	beq.n	8003584 <StartDefaultTask+0xe6c>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80034dc:	2302      	movs	r3, #2
 80034de:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034e2:	f102 021c 	add.w	r2, r2, #28
 80034e6:	7013      	strb	r3, [r2, #0]
						  }
					  }
					  break;
 80034e8:	e04c      	b.n	8003584 <StartDefaultTask+0xe6c>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80034ea:	4871      	ldr	r0, [pc, #452]	; (80036b0 <StartDefaultTask+0xf98>)
 80034ec:	f002 fe58 	bl	80061a0 <lowlayer_goToSoftLimit>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d048      	beq.n	8003588 <StartDefaultTask+0xe70>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80034fc:	f102 021c 	add.w	r2, r2, #28
 8003500:	7013      	strb	r3, [r2, #0]
							}
					  }
					  break;
 8003502:	e041      	b.n	8003588 <StartDefaultTask+0xe70>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  //lowlayer_readSetPosition(&positionNext);
						  lowlayer_readTruePosition(&positionNext);
 8003504:	486a      	ldr	r0, [pc, #424]	; (80036b0 <StartDefaultTask+0xf98>)
 8003506:	f002 fec7 	bl	8006298 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 800350a:	4869      	ldr	r0, [pc, #420]	; (80036b0 <StartDefaultTask+0xf98>)
 800350c:	f001 ffa0 	bl	8005450 <kinematicForward>
						  current_mode 	= SCARA_MODE_DUTY;
 8003510:	2302      	movs	r3, #2
 8003512:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003516:	f102 021e 	add.w	r2, r2, #30
 800351a:	7013      	strb	r3, [r2, #0]
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800351c:	2300      	movs	r3, #0
 800351e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003522:	f102 021d 	add.w	r2, r2, #29
 8003526:	7013      	strb	r3, [r2, #0]
						  scaraSetScanFlag();
 8003528:	f007 fb0a 	bl	800ab40 <scaraSetScanFlag>

						detail_array[0] = NONE;
 800352c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003530:	2225      	movs	r2, #37	; 0x25
 8003532:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003534:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003538:	6899      	ldr	r1, [r3, #8]
 800353a:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800353e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4413      	add	r3, r2
 8003546:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2301      	movs	r3, #1
 800354e:	2005      	movs	r0, #5
 8003550:	f7fe ff36 	bl	80023c0 <commandRespond1>
 8003554:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003558:	f103 0304 	add.w	r3, r3, #4
 800355c:	6018      	str	r0, [r3, #0]
						total_respond_length += respond_lenght;
 800355e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003568:	f103 0304 	add.w	r3, r3, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4413      	add	r3, r2
 8003570:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003574:	6013      	str	r3, [r2, #0]
					  }
					  break;
 8003576:	e008      	b.n	800358a <StartDefaultTask+0xe72>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8003578:	f240 215a 	movw	r1, #602	; 0x25a
 800357c:	484e      	ldr	r0, [pc, #312]	; (80036b8 <StartDefaultTask+0xfa0>)
 800357e:	f7fe ff87 	bl	8002490 <LOG_REPORT>
						  while(1);
 8003582:	e7fe      	b.n	8003582 <StartDefaultTask+0xe6a>
					  break;
 8003584:	bf00      	nop
 8003586:	e1d7      	b.n	8003938 <StartDefaultTask+0x1220>
					  break;
 8003588:	bf00      	nop
					  }
				  }

			  }
			  break;
 800358a:	e1d5      	b.n	8003938 <StartDefaultTask+0x1220>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 800358c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003590:	f103 031d 	add.w	r3, r3, #29
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b03      	cmp	r3, #3
 8003598:	f200 81c0 	bhi.w	800391c <StartDefaultTask+0x1204>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <StartDefaultTask+0xe8c>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	08003929 	.word	0x08003929
 80035a8:	080035b5 	.word	0x080035b5
 80035ac:	08003785 	.word	0x08003785
 80035b0:	0800388f 	.word	0x0800388f

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80035b4:	f507 6460 	add.w	r4, r7, #3584	; 0xe00
 80035b8:	4668      	mov	r0, sp
 80035ba:	f104 0310 	add.w	r3, r4, #16
 80035be:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80035c2:	4619      	mov	r1, r3
 80035c4:	f012 ff7c 	bl	80164c0 <memcpy>
 80035c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035cc:	f003 fb8c 	bl	8006ce8 <scaraInitDuty>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 3fd3 	strb.w	r3, [r7, #4051]	; 0xfd3
						  if ( SCARA_STATUS_OK == status1) {
 80035d6:	f897 3fd3 	ldrb.w	r3, [r7, #4051]	; 0xfd3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 80a0 	bne.w	8003720 <StartDefaultTask+0x1008>
							  status2 = scaraTestDuty();
 80035e0:	f007 fa32 	bl	800aa48 <scaraTestDuty>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 3fd2 	strb.w	r3, [r7, #4050]	; 0xfd2
							  if (SCARA_STATUS_OK == status2) {
 80035ea:	f897 3fd2 	ldrb.w	r3, [r7, #4050]	; 0xfd2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d164      	bne.n	80036bc <StartDefaultTask+0xfa4>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 80035f2:	2302      	movs	r3, #2
 80035f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80035f8:	f102 021d 	add.w	r2, r2, #29
 80035fc:	7013      	strb	r3, [r2, #0]
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800360a:	f101 0108 	add.w	r1, r1, #8
 800360e:	e9c1 2300 	strd	r2, r3, [r1]
							  // Respond
							  detail_array[0] = status1;
 8003612:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003616:	f897 2fd3 	ldrb.w	r2, [r7, #4051]	; 0xfd3
 800361a:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800361c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003626:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4413      	add	r3, r2
 800362e:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2301      	movs	r3, #1
 8003636:	2008      	movs	r0, #8
 8003638:	f7fe fec2 	bl	80023c0 <commandRespond1>
 800363c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003640:	f103 0304 	add.w	r3, r3, #4
 8003644:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 8003646:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003650:	f103 0304 	add.w	r3, r3, #4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4413      	add	r3, r2
 8003658:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800365c:	6013      	str	r3, [r2, #0]
							  detail_array[0] = NONE;
 800365e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003662:	2225      	movs	r2, #37	; 0x25
 8003664:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003666:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003670:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4413      	add	r3, r2
 8003678:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2301      	movs	r3, #1
 8003680:	2003      	movs	r0, #3
 8003682:	f7fe fe9d 	bl	80023c0 <commandRespond1>
 8003686:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800368a:	f103 0304 	add.w	r3, r3, #4
 800368e:	6018      	str	r0, [r3, #0]
							  total_respond_length += respond_lenght;
 8003690:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800369a:	f103 0304 	add.w	r3, r3, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80036a6:	6013      	str	r3, [r2, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 80036a8:	e13f      	b.n	800392a <StartDefaultTask+0x1212>
 80036aa:	bf00      	nop
 80036ac:	20010af0 	.word	0x20010af0
 80036b0:	20010c70 	.word	0x20010c70
 80036b4:	0801c874 	.word	0x0801c874
 80036b8:	0801c880 	.word	0x0801c880
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80036bc:	2300      	movs	r3, #0
 80036be:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036c2:	f102 021d 	add.w	r2, r2, #29
 80036c6:	7013      	strb	r3, [r2, #0]
								  LOG_REPORT("TEST FAIL", __LINE__);
 80036c8:	f240 2182 	movw	r1, #642	; 0x282
 80036cc:	48c0      	ldr	r0, [pc, #768]	; (80039d0 <StartDefaultTask+0x12b8>)
 80036ce:	f7fe fedf 	bl	8002490 <LOG_REPORT>
								detail_array[0] = status2;
 80036d2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80036d6:	f897 2fd2 	ldrb.w	r2, [r7, #4050]	; 0xfd2
 80036da:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80036dc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80036e0:	6899      	ldr	r1, [r3, #8]
 80036e2:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80036e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2301      	movs	r3, #1
 80036f6:	2007      	movs	r0, #7
 80036f8:	f7fe fe62 	bl	80023c0 <commandRespond1>
 80036fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003700:	f103 0304 	add.w	r3, r3, #4
 8003704:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 8003706:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003710:	f103 0304 	add.w	r3, r3, #4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4413      	add	r3, r2
 8003718:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800371c:	6013      	str	r3, [r2, #0]
				  break;
 800371e:	e104      	b.n	800392a <StartDefaultTask+0x1212>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8003720:	2300      	movs	r3, #0
 8003722:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003726:	f102 021d 	add.w	r2, r2, #29
 800372a:	7013      	strb	r3, [r2, #0]
							detail_array[0] = status1;
 800372c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003730:	f897 2fd3 	ldrb.w	r2, [r7, #4051]	; 0xfd3
 8003734:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003736:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800373a:	6899      	ldr	r1, [r3, #8]
 800373c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003740:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2301      	movs	r3, #1
 8003750:	2007      	movs	r0, #7
 8003752:	f7fe fe35 	bl	80023c0 <commandRespond1>
 8003756:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800375a:	f103 0304 	add.w	r3, r3, #4
 800375e:	6018      	str	r0, [r3, #0]
							total_respond_length += respond_lenght;
 8003760:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800376a:	f103 0304 	add.w	r3, r3, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4413      	add	r3, r2
 8003772:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003776:	6013      	str	r3, [r2, #0]
							  LOG_REPORT("INIT FAIL", __LINE__);
 8003778:	f240 218d 	movw	r1, #653	; 0x28d
 800377c:	4895      	ldr	r0, [pc, #596]	; (80039d4 <StartDefaultTask+0x12bc>)
 800377e:	f7fe fe87 	bl	8002490 <LOG_REPORT>
				  break;
 8003782:	e0d2      	b.n	800392a <StartDefaultTask+0x1212>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8003784:	a390      	add	r3, pc, #576	; (adr r3, 80039c8 <StartDefaultTask+0x12b0>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800378e:	f101 0108 	add.w	r1, r1, #8
 8003792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003796:	f7fc fd79 	bl	800028c <__adddf3>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80037a2:	f101 0108 	add.w	r1, r1, #8
 80037a6:	e9c1 2300 	strd	r2, r3, [r1]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80037aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80037ae:	f103 0308 	add.w	r3, r3, #8
 80037b2:	ed93 0b00 	vldr	d0, [r3]
 80037b6:	f007 fa61 	bl	800ac7c <scaraIsFinish>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <StartDefaultTask+0x10b6>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80037c0:	2303      	movs	r3, #3
 80037c2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80037c6:	f102 021d 	add.w	r2, r2, #29
 80037ca:	7013      	strb	r3, [r2, #0]
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80037cc:	e0ad      	b.n	800392a <StartDefaultTask+0x1212>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80037ce:	4c82      	ldr	r4, [pc, #520]	; (80039d8 <StartDefaultTask+0x12c0>)
 80037d0:	4668      	mov	r0, sp
 80037d2:	f104 0308 	add.w	r3, r4, #8
 80037d6:	22b8      	movs	r2, #184	; 0xb8
 80037d8:	4619      	mov	r1, r3
 80037da:	f012 fe71 	bl	80164c0 <memcpy>
 80037de:	e894 000c 	ldmia.w	r4, {r2, r3}
 80037e2:	487e      	ldr	r0, [pc, #504]	; (80039dc <StartDefaultTask+0x12c4>)
 80037e4:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80037e8:	f101 0108 	add.w	r1, r1, #8
 80037ec:	ed91 0b00 	vldr	d0, [r1]
 80037f0:	f006 fa92 	bl	8009d18 <scaraFlowDuty>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3fd4 	strb.w	r3, [r7, #4052]	; 0xfd4
							  if ( SCARA_STATUS_OK == status) {
 80037fa:	f897 3fd4 	ldrb.w	r3, [r7, #4052]	; 0xfd4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d113      	bne.n	800382a <StartDefaultTask+0x1112>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003802:	4c75      	ldr	r4, [pc, #468]	; (80039d8 <StartDefaultTask+0x12c0>)
 8003804:	4a75      	ldr	r2, [pc, #468]	; (80039dc <StartDefaultTask+0x12c4>)
 8003806:	ab2c      	add	r3, sp, #176	; 0xb0
 8003808:	4611      	mov	r1, r2
 800380a:	22c0      	movs	r2, #192	; 0xc0
 800380c:	4618      	mov	r0, r3
 800380e:	f012 fe57 	bl	80164c0 <memcpy>
 8003812:	4668      	mov	r0, sp
 8003814:	f104 0310 	add.w	r3, r4, #16
 8003818:	22b0      	movs	r2, #176	; 0xb0
 800381a:	4619      	mov	r1, r3
 800381c:	f012 fe50 	bl	80164c0 <memcpy>
 8003820:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003824:	f002 fec8 	bl	80065b8 <lowlayer_computeAndWritePulse>
				  break;
 8003828:	e07f      	b.n	800392a <StartDefaultTask+0x1212>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800382a:	2303      	movs	r3, #3
 800382c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003830:	f102 021d 	add.w	r2, r2, #29
 8003834:	7013      	strb	r3, [r2, #0]
								detail_array[0] = status;
 8003836:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800383a:	f897 2fd4 	ldrb.w	r2, [r7, #4052]	; 0xfd4
 800383e:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003840:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 800384a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4413      	add	r3, r2
 8003852:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2301      	movs	r3, #1
 800385a:	2006      	movs	r0, #6
 800385c:	f7fe fdb0 	bl	80023c0 <commandRespond1>
 8003860:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003864:	f103 0304 	add.w	r3, r3, #4
 8003868:	6018      	str	r0, [r3, #0]
								total_respond_length += respond_lenght;
 800386a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003874:	f103 0304 	add.w	r3, r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4413      	add	r3, r2
 800387c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003880:	6013      	str	r3, [r2, #0]
								  LOG_REPORT("STOP DUTY", __LINE__);
 8003882:	f240 21a5 	movw	r1, #677	; 0x2a5
 8003886:	4856      	ldr	r0, [pc, #344]	; (80039e0 <StartDefaultTask+0x12c8>)
 8003888:	f7fe fe02 	bl	8002490 <LOG_REPORT>
				  break;
 800388c:	e04d      	b.n	800392a <StartDefaultTask+0x1212>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 800388e:	4853      	ldr	r0, [pc, #332]	; (80039dc <StartDefaultTask+0x12c4>)
 8003890:	f002 fd02 	bl	8006298 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 8003894:	4851      	ldr	r0, [pc, #324]	; (80039dc <StartDefaultTask+0x12c4>)
 8003896:	f001 fddb 	bl	8005450 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800389a:	2300      	movs	r3, #0
 800389c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80038a0:	f102 021d 	add.w	r2, r2, #29
 80038a4:	7013      	strb	r3, [r2, #0]
						  positionNext.t = 0;
 80038a6:	494d      	ldr	r1, [pc, #308]	; (80039dc <StartDefaultTask+0x12c4>)
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
						  positionNext.total_time = 0;
 80038b4:	4949      	ldr	r1, [pc, #292]	; (80039dc <StartDefaultTask+0x12c4>)
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
						  positionNext.q = 0;
 80038c2:	4946      	ldr	r1, [pc, #280]	; (80039dc <StartDefaultTask+0x12c4>)
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9c1 2300 	strd	r2, r3, [r1]
						  // Done Inform

					detail_array[0] = NONE;
 80038d0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80038d4:	2225      	movs	r2, #37	; 0x25
 80038d6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80038d8:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80038dc:	6899      	ldr	r1, [r3, #8]
 80038de:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80038e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4413      	add	r3, r2
 80038ea:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2301      	movs	r3, #1
 80038f2:	2005      	movs	r0, #5
 80038f4:	f7fe fd64 	bl	80023c0 <commandRespond1>
 80038f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80038fc:	f103 0304 	add.w	r3, r3, #4
 8003900:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8003902:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800390c:	f103 0304 	add.w	r3, r3, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4413      	add	r3, r2
 8003914:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003918:	6013      	str	r3, [r2, #0]
					  }
				  break;
 800391a:	e006      	b.n	800392a <StartDefaultTask+0x1212>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800391c:	f240 21bd 	movw	r1, #701	; 0x2bd
 8003920:	4830      	ldr	r0, [pc, #192]	; (80039e4 <StartDefaultTask+0x12cc>)
 8003922:	f7fe fdb5 	bl	8002490 <LOG_REPORT>
						  while(1);
 8003926:	e7fe      	b.n	8003926 <StartDefaultTask+0x120e>
				  break;
 8003928:	bf00      	nop
					  }
				  }

			  }
			  break;
 800392a:	e005      	b.n	8003938 <StartDefaultTask+0x1220>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 800392c:	f240 21c7 	movw	r1, #711	; 0x2c7
 8003930:	482d      	ldr	r0, [pc, #180]	; (80039e8 <StartDefaultTask+0x12d0>)
 8003932:	f7fe fdad 	bl	8002490 <LOG_REPORT>
				  while(1);
 8003936:	e7fe      	b.n	8003936 <StartDefaultTask+0x121e>
			  }
		  }
	  }
	  break;
 8003938:	f000 bdfe 	b.w	8004538 <StartDefaultTask+0x1e20>

	  case SCARA_METHOD_GCODE:
	  {
		  switch (current_duty_state)
 800393c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003940:	f103 031d 	add.w	r3, r3, #29
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b04      	cmp	r3, #4
 8003948:	f200 81b7 	bhi.w	8003cba <StartDefaultTask+0x15a2>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <StartDefaultTask+0x123c>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003cbb 	.word	0x08003cbb
 8003958:	08003cbb 	.word	0x08003cbb
 800395c:	08003af1 	.word	0x08003af1
 8003960:	08003cbb 	.word	0x08003cbb
 8003964:	08003969 	.word	0x08003969
		  case SCARA_DUTY_STATE_INIT:{

		  }
		  break;
		  case SCARA_DUTY_STATE_OPERATION:{
			  update_gcode_point(&duty_cmd, run_point);
 8003968:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800396c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003970:	f102 0214 	add.w	r2, r2, #20
 8003974:	6811      	ldr	r1, [r2, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 ffd2 	bl	8004920 <update_gcode_point>
			  SCARA_StatusTypeDef status;
			  status = scaraInitDuty(duty_cmd);
 800397c:	f507 6460 	add.w	r4, r7, #3584	; 0xe00
 8003980:	4668      	mov	r0, sp
 8003982:	f104 0310 	add.w	r3, r4, #16
 8003986:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800398a:	4619      	mov	r1, r3
 800398c:	f012 fd98 	bl	80164c0 <memcpy>
 8003990:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003994:	f003 f9a8 	bl	8006ce8 <scaraInitDuty>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 3fd6 	strb.w	r3, [r7, #4054]	; 0xfd6
			  if(status == SCARA_STATUS_OK){
 800399e:	f897 3fd6 	ldrb.w	r3, [r7, #4054]	; 0xfd6
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d177      	bne.n	8003a96 <StartDefaultTask+0x137e>
				  if(duty_cmd.trajec_type == DUTY_TRAJECTORY_LINEAR){
 80039a6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80039aa:	7c1b      	ldrb	r3, [r3, #16]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d11d      	bne.n	80039ec <StartDefaultTask+0x12d4>
					  run_time = 0;
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80039bc:	f101 0108 	add.w	r1, r1, #8
 80039c0:	e9c1 2300 	strd	r2, r3, [r1]
 80039c4:	e020      	b.n	8003a08 <StartDefaultTask+0x12f0>
 80039c6:	bf00      	nop
 80039c8:	40000000 	.word	0x40000000
 80039cc:	3f847ae1 	.word	0x3f847ae1
 80039d0:	0801c890 	.word	0x0801c890
 80039d4:	0801c89c 	.word	0x0801c89c
 80039d8:	20010af0 	.word	0x20010af0
 80039dc:	20010c70 	.word	0x20010c70
 80039e0:	0801c8a8 	.word	0x0801c8a8
 80039e4:	0801c880 	.word	0x0801c880
 80039e8:	0801c8b4 	.word	0x0801c8b4
				  }else if(duty_cmd.trajec_type == DUTY_TRAJECTORY_GCODE_LSPB){
 80039ec:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80039f0:	7c1b      	ldrb	r3, [r3, #16]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d108      	bne.n	8003a08 <StartDefaultTask+0x12f0>
					  run_time = last_T;
 80039f6:	4bc8      	ldr	r3, [pc, #800]	; (8003d18 <StartDefaultTask+0x1600>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003a00:	f101 0108 	add.w	r1, r1, #8
 8003a04:	e9c1 2300 	strd	r2, r3, [r1]
				  }
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a0e:	f102 021d 	add.w	r2, r2, #29
 8003a12:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = (uint8_t)((run_point+1) * 100.0f / total_num_of_point );
 8003a14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a18:	f103 0314 	add.w	r3, r3, #20
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a28:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8003d1c <StartDefaultTask+0x1604>
 8003a2c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003a30:	4bbb      	ldr	r3, [pc, #748]	; (8003d20 <StartDefaultTask+0x1608>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a44:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a48:	793b      	ldrb	r3, [r7, #4]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003a50:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RDP_GCODE_PROCESS, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003a52:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003a56:	6899      	ldr	r1, [r3, #8]
 8003a58:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003a5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	200b      	movs	r0, #11
 8003a6e:	f7fe fca7 	bl	80023c0 <commandRespond1>
 8003a72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a76:	f103 0304 	add.w	r3, r3, #4
 8003a7a:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003a7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a86:	f103 0304 	add.w	r3, r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e02c      	b.n	8003af0 <StartDefaultTask+0x13d8>
			  }else{
				  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003a96:	2303      	movs	r3, #3
 8003a98:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003a9c:	f102 021d 	add.w	r2, r2, #29
 8003aa0:	7013      	strb	r3, [r2, #0]
				  detail_array[0] = status;
 8003aa2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003aa6:	f897 2fd6 	ldrb.w	r2, [r7, #4054]	; 0xfd6
 8003aaa:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003aac:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003ab6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4413      	add	r3, r2
 8003abe:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	2007      	movs	r0, #7
 8003ac8:	f7fe fc7a 	bl	80023c0 <commandRespond1>
 8003acc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003ad0:	f103 0304 	add.w	r3, r3, #4
 8003ad4:	6018      	str	r0, [r3, #0]
				  total_respond_length += respond_lenght;
 8003ad6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003ae0:	f103 0304 	add.w	r3, r3, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003aec:	6013      	str	r3, [r2, #0]
				  break;
 8003aee:	e0e5      	b.n	8003cbc <StartDefaultTask+0x15a4>
			  }
		  }
		  //break;

		  case SCARA_DUTY_STATE_FLOW:{
			  run_time += T_SAMPLING;
 8003af0:	a387      	add	r3, pc, #540	; (adr r3, 8003d10 <StartDefaultTask+0x15f8>)
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003afa:	f101 0108 	add.w	r1, r1, #8
 8003afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b02:	f7fc fbc3 	bl	800028c <__adddf3>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003b0e:	f101 0108 	add.w	r1, r1, #8
 8003b12:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8003b16:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003b1a:	f103 0308 	add.w	r3, r3, #8
 8003b1e:	ed93 0b00 	vldr	d0, [r3]
 8003b22:	f007 f8ab 	bl	800ac7c <scaraIsFinish>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d06b      	beq.n	8003c04 <StartDefaultTask+0x14ec>
				if(run_point >= total_num_of_point-1){
 8003b2c:	4b7c      	ldr	r3, [pc, #496]	; (8003d20 <StartDefaultTask+0x1608>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003b36:	f102 0214 	add.w	r2, r2, #20
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	db0c      	blt.n	8003b5a <StartDefaultTask+0x1442>
					current_duty_state = SCARA_DUTY_STATE_READY;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003b46:	f102 021d 	add.w	r2, r2, #29
 8003b4a:	7013      	strb	r3, [r2, #0]
					lowlayer_readTruePosition(&positionNext);
 8003b4c:	4875      	ldr	r0, [pc, #468]	; (8003d24 <StartDefaultTask+0x160c>)
 8003b4e:	f002 fba3 	bl	8006298 <lowlayer_readTruePosition>
				    kinematicForward(&positionNext);
 8003b52:	4874      	ldr	r0, [pc, #464]	; (8003d24 <StartDefaultTask+0x160c>)
 8003b54:	f001 fc7c 	bl	8005450 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8003b58:	e0b0      	b.n	8003cbc <StartDefaultTask+0x15a4>
					if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8003b5a:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <StartDefaultTask+0x1610>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b09      	cmp	r3, #9
 8003b60:	d11a      	bne.n	8003b98 <StartDefaultTask+0x1480>
						accumulate_update(Gcode_Cor[run_point++]);
 8003b62:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b66:	f103 0314 	add.w	r3, r3, #20
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	1c53      	adds	r3, r2, #1
 8003b6e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003b72:	f101 0114 	add.w	r1, r1, #20
 8003b76:	600b      	str	r3, [r1, #0]
 8003b78:	496c      	ldr	r1, [pc, #432]	; (8003d2c <StartDefaultTask+0x1614>)
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	466c      	mov	r4, sp
 8003b86:	f103 0210 	add.w	r2, r3, #16
 8003b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b92:	f001 fb6d 	bl	8005270 <accumulate_update>
 8003b96:	e025      	b.n	8003be4 <StartDefaultTask+0x14cc>
					}else if(Gcode_Cor[run_point].configure.type_define[0] == BEZIER_TYPE){
 8003b98:	4964      	ldr	r1, [pc, #400]	; (8003d2c <StartDefaultTask+0x1614>)
 8003b9a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b9e:	f103 0314 	add.w	r3, r3, #20
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	331a      	adds	r3, #26
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d10b      	bne.n	8003bce <StartDefaultTask+0x14b6>
						run_point+=2;
 8003bb6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003bba:	f103 0314 	add.w	r3, r3, #20
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bc6:	f102 0214 	add.w	r2, r2, #20
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e00a      	b.n	8003be4 <StartDefaultTask+0x14cc>
						run_point++;
 8003bce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003bd2:	f103 0314 	add.w	r3, r3, #20
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003bde:	f102 0214 	add.w	r2, r2, #20
 8003be2:	6013      	str	r3, [r2, #0]
					current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003be4:	2304      	movs	r3, #4
 8003be6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003bea:	f102 021d 	add.w	r2, r2, #29
 8003bee:	7013      	strb	r3, [r2, #0]
					memcpy(&positionNext, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8003bf0:	4a4c      	ldr	r2, [pc, #304]	; (8003d24 <StartDefaultTask+0x160c>)
 8003bf2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	3328      	adds	r3, #40	; 0x28
 8003bfa:	22c0      	movs	r2, #192	; 0xc0
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f012 fc5f 	bl	80164c0 <memcpy>
		  break;
 8003c02:	e05b      	b.n	8003cbc <StartDefaultTask+0x15a4>
				SCARA_StatusTypeDef status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003c04:	4c4a      	ldr	r4, [pc, #296]	; (8003d30 <StartDefaultTask+0x1618>)
 8003c06:	4668      	mov	r0, sp
 8003c08:	f104 0308 	add.w	r3, r4, #8
 8003c0c:	22b8      	movs	r2, #184	; 0xb8
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f012 fc56 	bl	80164c0 <memcpy>
 8003c14:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003c18:	4842      	ldr	r0, [pc, #264]	; (8003d24 <StartDefaultTask+0x160c>)
 8003c1a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003c1e:	f101 0108 	add.w	r1, r1, #8
 8003c22:	ed91 0b00 	vldr	d0, [r1]
 8003c26:	f006 f877 	bl	8009d18 <scaraFlowDuty>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 3fd5 	strb.w	r3, [r7, #4053]	; 0xfd5
				if ( SCARA_STATUS_OK == status) {
 8003c30:	f897 3fd5 	ldrb.w	r3, [r7, #4053]	; 0xfd5
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d113      	bne.n	8003c60 <StartDefaultTask+0x1548>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003c38:	4c3d      	ldr	r4, [pc, #244]	; (8003d30 <StartDefaultTask+0x1618>)
 8003c3a:	4a3a      	ldr	r2, [pc, #232]	; (8003d24 <StartDefaultTask+0x160c>)
 8003c3c:	ab2c      	add	r3, sp, #176	; 0xb0
 8003c3e:	4611      	mov	r1, r2
 8003c40:	22c0      	movs	r2, #192	; 0xc0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f012 fc3c 	bl	80164c0 <memcpy>
 8003c48:	4668      	mov	r0, sp
 8003c4a:	f104 0310 	add.w	r3, r4, #16
 8003c4e:	22b0      	movs	r2, #176	; 0xb0
 8003c50:	4619      	mov	r1, r3
 8003c52:	f012 fc35 	bl	80164c0 <memcpy>
 8003c56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c5a:	f002 fcad 	bl	80065b8 <lowlayer_computeAndWritePulse>
		  break;
 8003c5e:	e02d      	b.n	8003cbc <StartDefaultTask+0x15a4>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8003c60:	2303      	movs	r3, #3
 8003c62:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003c66:	f102 021d 	add.w	r2, r2, #29
 8003c6a:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 8003c6c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003c70:	f897 2fd5 	ldrb.w	r2, [r7, #4053]	; 0xfd5
 8003c74:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003c76:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003c7a:	6899      	ldr	r1, [r3, #8]
 8003c7c:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8003c80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	2301      	movs	r3, #1
 8003c90:	2007      	movs	r0, #7
 8003c92:	f7fe fb95 	bl	80023c0 <commandRespond1>
 8003c96:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c9a:	f103 0304 	add.w	r3, r3, #4
 8003c9e:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 8003ca0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003caa:	f103 0304 	add.w	r3, r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003cb6:	6013      	str	r3, [r2, #0]
		  break;
 8003cb8:	e000      	b.n	8003cbc <StartDefaultTask+0x15a4>

		  }
		  break;
		  
		  default:
			  break;
 8003cba:	bf00      	nop
		  }
	  }

	  break;
 8003cbc:	f000 bc3c 	b.w	8004538 <StartDefaultTask+0x1e20>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8003cc0:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003cc4:	f993 0000 	ldrsb.w	r0, [r3]
 8003cc8:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003ccc:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003cd0:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003cd4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003cd8:	f607 53fc 	addw	r3, r7, #3580	; 0xdfc
 8003cdc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ce0:	f002 fe12 	bl	8006908 <lowlayer_writePulse>
	  }
	  break;
 8003ce4:	f000 bc28 	b.w	8004538 <StartDefaultTask+0x1e20>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8003ce8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003cec:	f103 031d 	add.w	r3, r3, #29
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	f200 841e 	bhi.w	8004536 <StartDefaultTask+0x1e1e>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <StartDefaultTask+0x15e8>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	080043a9 	.word	0x080043a9
 8003d08:	08004527 	.word	0x08004527
 8003d0c:	08003d85 	.word	0x08003d85
 8003d10:	40000000 	.word	0x40000000
 8003d14:	3f847ae1 	.word	0x3f847ae1
 8003d18:	2000fd38 	.word	0x2000fd38
 8003d1c:	42c80000 	.word	0x42c80000
 8003d20:	20008fa8 	.word	0x20008fa8
 8003d24:	20010c70 	.word	0x20010c70
 8003d28:	200085c8 	.word	0x200085c8
 8003d2c:	20008fc0 	.word	0x20008fc0
 8003d30:	20010af0 	.word	0x20010af0
		  case SCARA_DUTY_STATE_INIT:{
			  HAL_TIM_Base_Start(&htim2);
 8003d34:	488e      	ldr	r0, [pc, #568]	; (8003f70 <StartDefaultTask+0x1858>)
 8003d36:	f00a fc60 	bl	800e5fa <HAL_TIM_Base_Start>
			  object_tail_pointer = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003d40:	f102 0206 	add.w	r2, r2, #6
 8003d44:	7013      	strb	r3, [r2, #0]
			  object_head_pointer = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003d4c:	f102 0205 	add.w	r2, r2, #5
 8003d50:	7013      	strb	r3, [r2, #0]
			  operation_state = SCARA_MOVE_TO_TARGET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003d58:	f102 0207 	add.w	r2, r2, #7
 8003d5c:	7013      	strb	r3, [r2, #0]
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8003d5e:	2304      	movs	r3, #4
 8003d60:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003d64:	f102 021d 	add.w	r2, r2, #29
 8003d68:	7013      	strb	r3, [r2, #0]
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8003d6a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003d6e:	2204      	movs	r2, #4
 8003d70:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8003d72:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003d76:	2200      	movs	r2, #0
 8003d78:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8003d7a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003d7e:	2200      	movs	r2, #0
 8003d80:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8003d82:	e3d5      	b.n	8004530 <StartDefaultTask+0x1e18>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8003d84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003d88:	f103 0306 	add.w	r3, r3, #6
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003d92:	f103 0305 	add.w	r3, r3, #5
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	f000 83c6 	beq.w	800452a <StartDefaultTask+0x1e12>
				  switch(operation_state){
 8003d9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003da2:	f103 0307 	add.w	r3, r3, #7
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b07      	cmp	r3, #7
 8003daa:	f200 81ea 	bhi.w	8004182 <StartDefaultTask+0x1a6a>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <StartDefaultTask+0x169c>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dd5 	.word	0x08003dd5
 8003db8:	08003ee7 	.word	0x08003ee7
 8003dbc:	08003f1f 	.word	0x08003f1f
 8003dc0:	08003f39 	.word	0x08003f39
 8003dc4:	08003f95 	.word	0x08003f95
 8003dc8:	080040f9 	.word	0x080040f9
 8003dcc:	08004131 	.word	0x08004131
 8003dd0:	0800414b 	.word	0x0800414b
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME_ON_OBJECT + ATTACH_TIME;
 8003dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003de0:	f103 0306 	add.w	r3, r3, #6
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8003dea:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8003dee:	fb00 f303 	mul.w	r3, r0, r3
 8003df2:	440b      	add	r3, r1
 8003df4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e06:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003f74 <StartDefaultTask+0x185c>
 8003e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e0e:	ee17 0a90 	vmov	r0, s15
 8003e12:	f7fc fb99 	bl	8000548 <__aeabi_f2d>
 8003e16:	4b58      	ldr	r3, [pc, #352]	; (8003f78 <StartDefaultTask+0x1860>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc fa36 	bl	800028c <__adddf3>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	4b54      	ldr	r3, [pc, #336]	; (8003f7c <StartDefaultTask+0x1864>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fa2d 	bl	800028c <__adddf3>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <StartDefaultTask+0x1868>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f7fc fa24 	bl	800028c <__adddf3>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	f607 71d8 	addw	r1, r7, #4056	; 0xfd8
 8003e4c:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y -= wait_time*conveyor_speed;
 8003e50:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003e54:	f103 0306 	add.w	r3, r3, #6
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003e5e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	3350      	adds	r3, #80	; 0x50
 8003e6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e6e:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <StartDefaultTask+0x186c>)
 8003e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e74:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f7fc fbbc 	bl	80005f8 <__aeabi_dmul>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003e88:	f101 0106 	add.w	r1, r1, #6
 8003e8c:	780e      	ldrb	r6, [r1, #0]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	f7fc f9f9 	bl	8000288 <__aeabi_dsub>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003e9e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003ea2:	fb01 f106 	mul.w	r1, r1, r6
 8003ea6:	4401      	add	r1, r0
 8003ea8:	3150      	adds	r1, #80	; 0x50
 8003eaa:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003eae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003eb2:	f103 0306 	add.w	r3, r3, #6
 8003eb6:	7819      	ldrb	r1, [r3, #0]
 8003eb8:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <StartDefaultTask+0x1870>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003ec2:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003ec6:	fb04 f101 	mul.w	r1, r4, r1
 8003eca:	4401      	add	r1, r0
 8003ecc:	3158      	adds	r1, #88	; 0x58
 8003ece:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 8003ed2:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <StartDefaultTask+0x1860>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003edc:	f101 0118 	add.w	r1, r1, #24
 8003ee0:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003ee4:	e14d      	b.n	8004182 <StartDefaultTask+0x1a6a>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8003ee6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003eea:	f103 0306 	add.w	r3, r3, #6
 8003eee:	7819      	ldrb	r1, [r3, #0]
 8003ef0:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <StartDefaultTask+0x1874>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003efa:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003efe:	fb04 f101 	mul.w	r1, r4, r1
 8003f02:	4401      	add	r1, r0
 8003f04:	3158      	adds	r1, #88	; 0x58
 8003f06:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_OBJECT;
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <StartDefaultTask+0x1864>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f14:	f101 0118 	add.w	r1, r1, #24
 8003f18:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f1c:	e131      	b.n	8004182 <StartDefaultTask+0x1a6a>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8003f1e:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <StartDefaultTask+0x1868>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f28:	f101 0118 	add.w	r1, r1, #24
 8003f2c:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(1);
 8003f30:	2001      	movs	r0, #1
 8003f32:	f006 fe11 	bl	800ab58 <scaraSetOutput>
					  }
					  break;
 8003f36:	e124      	b.n	8004182 <StartDefaultTask+0x1a6a>
					  case SCARA_MOVE_UP_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8003f38:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003f3c:	f103 0306 	add.w	r3, r3, #6
 8003f40:	7819      	ldrb	r1, [r3, #0]
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <StartDefaultTask+0x1870>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003f4c:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8003f50:	fb04 f101 	mul.w	r1, r4, r1
 8003f54:	4401      	add	r1, r0
 8003f56:	3158      	adds	r1, #88	; 0x58
 8003f58:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PICK_UP_TIME_ON_OBJECT;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <StartDefaultTask+0x1878>)
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003f66:	f101 0118 	add.w	r1, r1, #24
 8003f6a:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8003f6e:	e108      	b.n	8004182 <StartDefaultTask+0x1a6a>
 8003f70:	20010d70 	.word	0x20010d70
 8003f74:	399c09bf 	.word	0x399c09bf
 8003f78:	20000028 	.word	0x20000028
 8003f7c:	20000010 	.word	0x20000010
 8003f80:	20000030 	.word	0x20000030
 8003f84:	20000058 	.word	0x20000058
 8003f88:	20000040 	.word	0x20000040
 8003f8c:	20000048 	.word	0x20000048
 8003f90:	20000018 	.word	0x20000018
					  case SCARA_MOVE_TO_SLOT :{
						  ObjectType current_type = Object[object_tail_pointer].object_position.object_type;
 8003f94:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003f98:	f103 0306 	add.w	r3, r3, #6
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003fa2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	33b8      	adds	r3, #184	; 0xb8
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f887 3fe7 	strb.w	r3, [r7, #4071]	; 0xfe7
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[current_type].posx + Slot_Placement[current_type]*placement_spacing;
 8003fb4:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8003fb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	440b      	add	r3, r1
 8003fc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003fca:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8003fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fd2:	3b08      	subs	r3, #8
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc faa4 	bl	8000524 <__aeabi_i2d>
 8003fdc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fe0:	f103 0308 	add.w	r3, r3, #8
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f7fc fb06 	bl	80005f8 <__aeabi_dmul>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8003ff4:	f101 0106 	add.w	r1, r1, #6
 8003ff8:	780e      	ldrb	r6, [r1, #0]
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	f7fc f945 	bl	800028c <__adddf3>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800400a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800400e:	fb01 f106 	mul.w	r1, r1, r6
 8004012:	4401      	add	r1, r0
 8004014:	3148      	adds	r1, #72	; 0x48
 8004016:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[current_type].posy;
 800401a:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 800401e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004022:	f103 0306 	add.w	r3, r3, #6
 8004026:	7819      	ldrb	r1, [r3, #0]
 8004028:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4403      	add	r3, r0
 8004036:	3308      	adds	r3, #8
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004040:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8004044:	fb04 f101 	mul.w	r1, r4, r1
 8004048:	4401      	add	r1, r0
 800404a:	3150      	adds	r1, #80	; 0x50
 800404c:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.roll = SLot_Cordinate[current_type].roll;
 8004050:	f897 2fe7 	ldrb.w	r2, [r7, #4071]	; 0xfe7
 8004054:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004058:	f103 0306 	add.w	r3, r3, #6
 800405c:	7819      	ldrb	r1, [r3, #0]
 800405e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4403      	add	r3, r0
 800406c:	3310      	adds	r3, #16
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004076:	f44f 74c4 	mov.w	r4, #392	; 0x188
 800407a:	fb04 f101 	mul.w	r1, r4, r1
 800407e:	4401      	add	r1, r0
 8004080:	3160      	adds	r1, #96	; 0x60
 8004082:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8004086:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800408a:	f103 0306 	add.w	r3, r3, #6
 800408e:	7819      	ldrb	r1, [r3, #0]
 8004090:	4bbd      	ldr	r3, [pc, #756]	; (8004388 <StartDefaultTask+0x1c70>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800409a:	f44f 74c4 	mov.w	r4, #392	; 0x188
 800409e:	fb04 f101 	mul.w	r1, r4, r1
 80040a2:	4401      	add	r1, r0
 80040a4:	3158      	adds	r1, #88	; 0x58
 80040a6:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = MOVE_TIME;
 80040aa:	4bb8      	ldr	r3, [pc, #736]	; (800438c <StartDefaultTask+0x1c74>)
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80040b4:	f101 0118 	add.w	r1, r1, #24
 80040b8:	e9c1 2300 	strd	r2, r3, [r1]
						  Slot_Placement[Object[object_tail_pointer].object_position.object_type] = (current_type + 1)%2;
 80040bc:	f897 3fe7 	ldrb.w	r3, [r7, #4071]	; 0xfe7
 80040c0:	3301      	adds	r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	bfb8      	it	lt
 80040ca:	425b      	neglt	r3, r3
 80040cc:	4618      	mov	r0, r3
 80040ce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80040d2:	f103 0306 	add.w	r3, r3, #6
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80040dc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	33b8      	adds	r3, #184	; 0xb8
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	b2c1      	uxtb	r1, r0
 80040ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040f2:	3b08      	subs	r3, #8
 80040f4:	5499      	strb	r1, [r3, r2]
					  }
					  break;
 80040f6:	e044      	b.n	8004182 <StartDefaultTask+0x1a6a>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 80040f8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80040fc:	f103 0306 	add.w	r3, r3, #6
 8004100:	7819      	ldrb	r1, [r3, #0]
 8004102:	4ba3      	ldr	r3, [pc, #652]	; (8004390 <StartDefaultTask+0x1c78>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800410c:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8004110:	fb04 f101 	mul.w	r1, r4, r1
 8004114:	4401      	add	r1, r0
 8004116:	3158      	adds	r1, #88	; 0x58
 8004118:	e9c1 2300 	strd	r2, r3, [r1]
						  state_time = PUT_DOWN_TIME_ON_SLOT;
 800411c:	4b9d      	ldr	r3, [pc, #628]	; (8004394 <StartDefaultTask+0x1c7c>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004126:	f101 0118 	add.w	r1, r1, #24
 800412a:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 800412e:	e028      	b.n	8004182 <StartDefaultTask+0x1a6a>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8004130:	4b99      	ldr	r3, [pc, #612]	; (8004398 <StartDefaultTask+0x1c80>)
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800413a:	f101 0118 	add.w	r1, r1, #24
 800413e:	e9c1 2300 	strd	r2, r3, [r1]
						  scaraSetOutput(0);
 8004142:	2000      	movs	r0, #0
 8004144:	f006 fd08 	bl	800ab58 <scaraSetOutput>
					  }
					  break;
 8004148:	e01b      	b.n	8004182 <StartDefaultTask+0x1a6a>
					  case SCARA_MOVE_UP_ON_SLOT:{
						  state_time = PICK_UP_TIME_ON_SLOT;
 800414a:	4b94      	ldr	r3, [pc, #592]	; (800439c <StartDefaultTask+0x1c84>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004154:	f101 0118 	add.w	r1, r1, #24
 8004158:	e9c1 2300 	strd	r2, r3, [r1]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 800415c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004160:	f103 0306 	add.w	r3, r3, #6
 8004164:	7819      	ldrb	r1, [r3, #0]
 8004166:	4b88      	ldr	r3, [pc, #544]	; (8004388 <StartDefaultTask+0x1c70>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8004170:	f44f 74c4 	mov.w	r4, #392	; 0x188
 8004174:	fb04 f101 	mul.w	r1, r4, r1
 8004178:	4401      	add	r1, r0
 800417a:	3158      	adds	r1, #88	; 0x58
 800417c:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  break;
 8004180:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8004182:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004186:	f103 0306 	add.w	r3, r3, #6
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8004190:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	18d1      	adds	r1, r2, r3
 800419a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800419e:	3328      	adds	r3, #40	; 0x28
 80041a0:	22c0      	movs	r2, #192	; 0xc0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f012 f98c 	bl	80164c0 <memcpy>
				  duty_cmd.time_total = state_time;
 80041a8:	f507 6160 	add.w	r1, r7, #3584	; 0xe00
 80041ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041b0:	f103 0318 	add.w	r3, r3, #24
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
				  SCARA_StatusTypeDef status1;
				  duty_cmd.v_factor = 0;
 80041bc:	f507 6160 	add.w	r1, r7, #3584	; 0xe00
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				  duty_cmd.coordinate_type = DUTY_COORDINATES_ABS;
 80041cc:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80041d0:	2200      	movs	r2, #0
 80041d2:	731a      	strb	r2, [r3, #12]
				  if(operation_state == SCARA_ATTACH || operation_state == SCARA_RELEASE){
 80041d4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80041d8:	f103 0307 	add.w	r3, r3, #7
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d006      	beq.n	80041f0 <StartDefaultTask+0x1ad8>
 80041e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80041e6:	f103 0307 	add.w	r3, r3, #7
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b06      	cmp	r3, #6
 80041ee:	d106      	bne.n	80041fe <StartDefaultTask+0x1ae6>
					  status1 = SCARA_STATUS_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041f6:	f102 0213 	add.w	r2, r2, #19
 80041fa:	7013      	strb	r3, [r2, #0]
 80041fc:	e065      	b.n	80042ca <StartDefaultTask+0x1bb2>
				  }else{
					  if(operation_state == SCARA_MOVE_DOWN_ON_OBJECT || operation_state == SCARA_MOVE_DOWN_ON_SLOT || operation_state == SCARA_MOVE_UP_ON_OBJECT || operation_state == SCARA_MOVE_UP_ON_SLOT){
 80041fe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004202:	f103 0307 	add.w	r3, r3, #7
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d014      	beq.n	8004236 <StartDefaultTask+0x1b1e>
 800420c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004210:	f103 0307 	add.w	r3, r3, #7
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b05      	cmp	r3, #5
 8004218:	d00d      	beq.n	8004236 <StartDefaultTask+0x1b1e>
 800421a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800421e:	f103 0307 	add.w	r3, r3, #7
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d006      	beq.n	8004236 <StartDefaultTask+0x1b1e>
 8004228:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800422c:	f103 0307 	add.w	r3, r3, #7
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b07      	cmp	r3, #7
 8004234:	d110      	bne.n	8004258 <StartDefaultTask+0x1b40>
						  duty_cmd.path_type = DUTY_PATH_LINE;
 8004236:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800423a:	2200      	movs	r2, #0
 800423c:	739a      	strb	r2, [r3, #14]
						  duty_cmd.space_type = DUTY_SPACE_TASK;
 800423e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004242:	2200      	movs	r2, #0
 8004244:	735a      	strb	r2, [r3, #13]
						  duty_cmd.trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004246:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800424a:	2202      	movs	r2, #2
 800424c:	741a      	strb	r2, [r3, #16]
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QT;
 800424e:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004252:	2203      	movs	r2, #3
 8004254:	745a      	strb	r2, [r3, #17]
 8004256:	e024      	b.n	80042a2 <StartDefaultTask+0x1b8a>
					  }else{
						  duty_cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 8004258:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800425c:	2201      	movs	r2, #1
 800425e:	745a      	strb	r2, [r3, #17]
						  if(pnp_move_option == CMD_MOVE_LINE){
 8004260:	4b4f      	ldr	r3, [pc, #316]	; (80043a0 <StartDefaultTask+0x1c88>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d10c      	bne.n	8004282 <StartDefaultTask+0x1b6a>
							  duty_cmd.path_type = DUTY_PATH_LINE;
 8004268:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800426c:	2200      	movs	r2, #0
 800426e:	739a      	strb	r2, [r3, #14]
							  duty_cmd.space_type = DUTY_SPACE_TASK;
 8004270:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004274:	2200      	movs	r2, #0
 8004276:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_SCURVE;
 8004278:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800427c:	2201      	movs	r2, #1
 800427e:	741a      	strb	r2, [r3, #16]
 8004280:	e00f      	b.n	80042a2 <StartDefaultTask+0x1b8a>
						  }else if(pnp_move_option == CMD_MOVE_JOINT){
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <StartDefaultTask+0x1c88>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b05      	cmp	r3, #5
 8004288:	d10b      	bne.n	80042a2 <StartDefaultTask+0x1b8a>
							  duty_cmd.joint_type = DUTY_JOINT_4DOF;
 800428a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800428e:	2201      	movs	r2, #1
 8004290:	73da      	strb	r2, [r3, #15]
							  duty_cmd.space_type = DUTY_SPACE_JOINT;
 8004292:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004296:	2201      	movs	r2, #1
 8004298:	735a      	strb	r2, [r3, #13]
							  duty_cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800429a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800429e:	2200      	movs	r2, #0
 80042a0:	741a      	strb	r2, [r3, #16]
						  }

					  }
					  status1 = scaraInitDuty(duty_cmd);
 80042a2:	f507 6460 	add.w	r4, r7, #3584	; 0xe00
 80042a6:	4668      	mov	r0, sp
 80042a8:	f104 0310 	add.w	r3, r4, #16
 80042ac:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80042b0:	4619      	mov	r1, r3
 80042b2:	f012 f905 	bl	80164c0 <memcpy>
 80042b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042ba:	f002 fd15 	bl	8006ce8 <scaraInitDuty>
 80042be:	4603      	mov	r3, r0
 80042c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80042c4:	f102 0213 	add.w	r2, r2, #19
 80042c8:	7013      	strb	r3, [r2, #0]
				  }
				  if ( SCARA_STATUS_OK == status1) {
 80042ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80042ce:	f103 0313 	add.w	r3, r3, #19
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d110      	bne.n	80042fa <StartDefaultTask+0x1be2>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 80042d8:	2302      	movs	r3, #2
 80042da:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80042de:	f102 021d 	add.w	r2, r2, #29
 80042e2:	7013      	strb	r3, [r2, #0]
				  	run_time = 0;
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80042f0:	f101 0108 	add.w	r1, r1, #8
 80042f4:	e9c1 2300 	strd	r2, r3, [r1]
 80042f8:	e056      	b.n	80043a8 <StartDefaultTask+0x1c90>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 80042fa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042fe:	f103 0306 	add.w	r3, r3, #6
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	425a      	negs	r2, r3
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	f002 0207 	and.w	r2, r2, #7
 8004310:	bf58      	it	pl
 8004312:	4253      	negpl	r3, r2
 8004314:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004318:	f102 0206 	add.w	r2, r2, #6
 800431c:	7013      	strb	r3, [r2, #0]
					operation_state = SCARA_MOVE_TO_TARGET;
 800431e:	2300      	movs	r3, #0
 8004320:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004324:	f102 0207 	add.w	r2, r2, #7
 8004328:	7013      	strb	r3, [r2, #0]
					detail_array[0] = status1;
 800432a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800432e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004332:	f102 0213 	add.w	r2, r2, #19
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800433a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800433e:	6899      	ldr	r1, [r3, #8]
 8004340:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 8004344:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4413      	add	r3, r2
 800434c:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2301      	movs	r3, #1
 8004354:	2007      	movs	r0, #7
 8004356:	f7fe f833 	bl	80023c0 <commandRespond1>
 800435a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800435e:	f103 0304 	add.w	r3, r3, #4
 8004362:	6018      	str	r0, [r3, #0]
					total_respond_length += respond_lenght;
 8004364:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800436e:	f103 0304 	add.w	r3, r3, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4413      	add	r3, r2
 8004376:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800437a:	6013      	str	r3, [r2, #0]
					LOG_REPORT("INIT FAIL", __LINE__);
 800437c:	f240 3191 	movw	r1, #913	; 0x391
 8004380:	4808      	ldr	r0, [pc, #32]	; (80043a4 <StartDefaultTask+0x1c8c>)
 8004382:	f7fe f885 	bl	8002490 <LOG_REPORT>
					break;
 8004386:	e0d3      	b.n	8004530 <StartDefaultTask+0x1e18>
 8004388:	20000040 	.word	0x20000040
 800438c:	20000028 	.word	0x20000028
 8004390:	20000050 	.word	0x20000050
 8004394:	20000008 	.word	0x20000008
 8004398:	20000038 	.word	0x20000038
 800439c:	20000020 	.word	0x20000020
 80043a0:	20000064 	.word	0x20000064
 80043a4:	0801c89c 	.word	0x0801c89c


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80043a8:	a37b      	add	r3, pc, #492	; (adr r3, 8004598 <StartDefaultTask+0x1e80>)
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80043b2:	f101 0108 	add.w	r1, r1, #8
 80043b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043ba:	f7fb ff67 	bl	800028c <__adddf3>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80043c6:	f101 0108 	add.w	r1, r1, #8
 80043ca:	e9c1 2300 	strd	r2, r3, [r1]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80043ce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80043d2:	f103 0308 	add.w	r3, r3, #8
 80043d6:	ed93 0b00 	vldr	d0, [r3]
 80043da:	f006 fc4f 	bl	800ac7c <scaraIsFinish>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d037      	beq.n	8004454 <StartDefaultTask+0x1d3c>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80043e4:	2304      	movs	r3, #4
 80043e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80043ea:	f102 021d 	add.w	r2, r2, #29
 80043ee:	7013      	strb	r3, [r2, #0]
				if(operation_state == SCARA_MOVE_UP_ON_SLOT){
 80043f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80043f4:	f103 0307 	add.w	r3, r3, #7
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b07      	cmp	r3, #7
 80043fc:	d118      	bne.n	8004430 <StartDefaultTask+0x1d18>
					operation_state = SCARA_MOVE_TO_TARGET;
 80043fe:	2300      	movs	r3, #0
 8004400:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004404:	f102 0207 	add.w	r2, r2, #7
 8004408:	7013      	strb	r3, [r2, #0]
					object_tail_pointer = (object_tail_pointer+1)%8;
 800440a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800440e:	f103 0306 	add.w	r3, r3, #6
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	425a      	negs	r2, r3
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	f002 0207 	and.w	r2, r2, #7
 8004420:	bf58      	it	pl
 8004422:	4253      	negpl	r3, r2
 8004424:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004428:	f102 0206 	add.w	r2, r2, #6
 800442c:	7013      	strb	r3, [r2, #0]
 800442e:	e00a      	b.n	8004446 <StartDefaultTask+0x1d2e>
				}else{
					operation_state += 1; //next state
 8004430:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004434:	f103 0307 	add.w	r3, r3, #7
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	3301      	adds	r3, #1
 800443c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004440:	f102 0207 	add.w	r2, r2, #7
 8004444:	7013      	strb	r3, [r2, #0]
				}
				lowlayer_readTruePosition(&positionNext);
 8004446:	4852      	ldr	r0, [pc, #328]	; (8004590 <StartDefaultTask+0x1e78>)
 8004448:	f001 ff26 	bl	8006298 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 800444c:	4850      	ldr	r0, [pc, #320]	; (8004590 <StartDefaultTask+0x1e78>)
 800444e:	f000 ffff 	bl	8005450 <kinematicForward>
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
					  total_respond_length += respond_lenght;
				  }
			  }
		  }
		  break;
 8004452:	e06c      	b.n	800452e <StartDefaultTask+0x1e16>
			  } else if(operation_state != SCARA_ATTACH && operation_state != SCARA_RELEASE){
 8004454:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004458:	f103 0307 	add.w	r3, r3, #7
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d065      	beq.n	800452e <StartDefaultTask+0x1e16>
 8004462:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004466:	f103 0307 	add.w	r3, r3, #7
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b06      	cmp	r3, #6
 800446e:	d05e      	beq.n	800452e <StartDefaultTask+0x1e16>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8004470:	4c48      	ldr	r4, [pc, #288]	; (8004594 <StartDefaultTask+0x1e7c>)
 8004472:	4668      	mov	r0, sp
 8004474:	f104 0308 	add.w	r3, r4, #8
 8004478:	22b8      	movs	r2, #184	; 0xb8
 800447a:	4619      	mov	r1, r3
 800447c:	f012 f820 	bl	80164c0 <memcpy>
 8004480:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004484:	4842      	ldr	r0, [pc, #264]	; (8004590 <StartDefaultTask+0x1e78>)
 8004486:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800448a:	f101 0108 	add.w	r1, r1, #8
 800448e:	ed91 0b00 	vldr	d0, [r1]
 8004492:	f005 fc41 	bl	8009d18 <scaraFlowDuty>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 3fd7 	strb.w	r3, [r7, #4055]	; 0xfd7
				if ( SCARA_STATUS_OK == status) {
 800449c:	f897 3fd7 	ldrb.w	r3, [r7, #4055]	; 0xfd7
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d113      	bne.n	80044cc <StartDefaultTask+0x1db4>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80044a4:	4c3b      	ldr	r4, [pc, #236]	; (8004594 <StartDefaultTask+0x1e7c>)
 80044a6:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <StartDefaultTask+0x1e78>)
 80044a8:	ab2c      	add	r3, sp, #176	; 0xb0
 80044aa:	4611      	mov	r1, r2
 80044ac:	22c0      	movs	r2, #192	; 0xc0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f012 f806 	bl	80164c0 <memcpy>
 80044b4:	4668      	mov	r0, sp
 80044b6:	f104 0310 	add.w	r3, r4, #16
 80044ba:	22b0      	movs	r2, #176	; 0xb0
 80044bc:	4619      	mov	r1, r3
 80044be:	f011 ffff 	bl	80164c0 <memcpy>
 80044c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044c6:	f002 f877 	bl	80065b8 <lowlayer_computeAndWritePulse>
		  break;
 80044ca:	e030      	b.n	800452e <StartDefaultTask+0x1e16>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80044cc:	2303      	movs	r3, #3
 80044ce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80044d2:	f102 021d 	add.w	r2, r2, #29
 80044d6:	7013      	strb	r3, [r2, #0]
					  detail_array[0] = status;
 80044d8:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80044dc:	f897 2fd7 	ldrb.w	r2, [r7, #4055]	; 0xfd7
 80044e0:	701a      	strb	r2, [r3, #0]
					  respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80044e2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	f607 52d4 	addw	r2, r7, #3540	; 0xdd4
 80044ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4413      	add	r3, r2
 80044f4:	f507 6253 	add.w	r2, r7, #3376	; 0xd30
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2301      	movs	r3, #1
 80044fc:	2007      	movs	r0, #7
 80044fe:	f7fd ff5f 	bl	80023c0 <commandRespond1>
 8004502:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004506:	f103 0304 	add.w	r3, r3, #4
 800450a:	6018      	str	r0, [r3, #0]
					  total_respond_length += respond_lenght;
 800450c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004516:	f103 0304 	add.w	r3, r3, #4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4413      	add	r3, r2
 800451e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004522:	6013      	str	r3, [r2, #0]
		  break;
 8004524:	e003      	b.n	800452e <StartDefaultTask+0x1e16>

		  case SCARA_DUTY_STATE_FINISH:

			  //error
			  //free(Object);
		  break;
 8004526:	bf00      	nop
 8004528:	e005      	b.n	8004536 <StartDefaultTask+0x1e1e>
				  break;
 800452a:	bf00      	nop
 800452c:	e003      	b.n	8004536 <StartDefaultTask+0x1e1e>
		  break;
 800452e:	bf00      	nop
		  }
	  }
	  break;
 8004530:	e001      	b.n	8004536 <StartDefaultTask+0x1e1e>
	  break;
 8004532:	bf00      	nop
 8004534:	e000      	b.n	8004538 <StartDefaultTask+0x1e20>
	  break;
 8004536:	bf00      	nop

	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	if(total_respond_length > 0){
 8004538:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	dd09      	ble.n	8004556 <StartDefaultTask+0x1e3e>
		CDC_Transmit_FS(respond, total_respond_length);
 8004542:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	b29a      	uxth	r2, r3
 800454a:	f607 53d4 	addw	r3, r7, #3540	; 0xdd4
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f011 fb37 	bl	8015bc4 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8004556:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800455a:	f103 031f 	add.w	r3, r3, #31
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f006 fb2b 	bl	800abbc <scaraSetMethod>
	  scaraSetMode(current_mode);
 8004566:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800456a:	f103 031e 	add.w	r3, r3, #30
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f006 fb13 	bl	800ab9c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8004576:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800457a:	f103 031d 	add.w	r3, r3, #29
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f006 fafb 	bl	800ab7c <scaraSetDutyState>

    osDelay(1);
 8004586:	2001      	movs	r0, #1
 8004588:	f00e fbf7 	bl	8012d7a <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 800458c:	f7fe b957 	b.w	800283e <StartDefaultTask+0x126>
 8004590:	20010c70 	.word	0x20010c70
 8004594:	20010af0 	.word	0x20010af0
 8004598:	40000000 	.word	0x40000000
 800459c:	3f847ae1 	.word	0x3f847ae1

080045a0 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 80045a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a2:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 80045a6:	af70      	add	r7, sp, #448	; 0x1c0
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	//int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 80045ac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80045b0:	2201      	movs	r2, #1
 80045b2:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 80045b4:	4964      	ldr	r1, [pc, #400]	; (8004748 <Start_USB_RX_Task+0x1a8>)
 80045b6:	4865      	ldr	r0, [pc, #404]	; (800474c <Start_USB_RX_Task+0x1ac>)
 80045b8:	f001 fbd7 	bl	8005d6a <ringBuff_DistanceOf>
 80045bc:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		  if (distance != -1) {
 80045c0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d0f4      	beq.n	80045b4 <Start_USB_RX_Task+0x14>
 80045ca:	466b      	mov	r3, sp
 80045cc:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 80045ce:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80045d2:	1c5c      	adds	r4, r3, #1
 80045d4:	1e63      	subs	r3, r4, #1
 80045d6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80045da:	4623      	mov	r3, r4
 80045dc:	4618      	mov	r0, r3
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	00cb      	lsls	r3, r1, #3
 80045ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80045f0:	00c2      	lsls	r2, r0, #3
 80045f2:	4623      	mov	r3, r4
 80045f4:	4618      	mov	r0, r3
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	00cb      	lsls	r3, r1, #3
 8004604:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004608:	00c2      	lsls	r2, r0, #3
 800460a:	4623      	mov	r3, r4
 800460c:	3307      	adds	r3, #7
 800460e:	08db      	lsrs	r3, r3, #3
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	ebad 0d03 	sub.w	sp, sp, r3
 8004616:	ab70      	add	r3, sp, #448	; 0x1c0
 8004618:	3300      	adds	r3, #0
 800461a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 800461e:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8004622:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004626:	3301      	adds	r3, #1
 8004628:	461a      	mov	r2, r3
 800462a:	4848      	ldr	r0, [pc, #288]	; (800474c <Start_USB_RX_Task+0x1ac>)
 800462c:	f001 fb7c 	bl	8005d28 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1, data_packet);
 8004630:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8004634:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8004638:	3301      	adds	r3, #1
 800463a:	f107 020c 	add.w	r2, r7, #12
 800463e:	4619      	mov	r1, r3
 8004640:	f7fd ff6c 	bl	800251c <unPackPayload>
 8004644:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc

			  if( -1 == ret) {
 8004648:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d077      	beq.n	8004742 <Start_USB_RX_Task+0x1a2>
				  //LOG_REPORT("UNPACK FAIL", __LINE__);
			  } else {
				  //LOG_REPORT((char*) temp, __LINE__);
				  cmd_type = packetRead(data_packet, ret, &id_command, &duty_cmd);
 8004652:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004656:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 800465a:	f107 000c 	add.w	r0, r7, #12
 800465e:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8004662:	f7fc fcc5 	bl	8000ff0 <packetRead>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
				  memset(detail, 0, sizeof(detail));
 800466c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004670:	2287      	movs	r2, #135	; 0x87
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f011 ff4b 	bl	8016510 <memset>
				  detail_length = 0;
 800467a:	f107 0308 	add.w	r3, r7, #8
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8004682:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8004686:	f897 53fb 	ldrb.w	r5, [r7, #1019]	; 0x3fb
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	936f      	str	r3, [sp, #444]	; 0x1bc
 8004690:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004694:	936e      	str	r3, [sp, #440]	; 0x1b8
 8004696:	4668      	mov	r0, sp
 8004698:	f104 0308 	add.w	r3, r4, #8
 800469c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80046a0:	4619      	mov	r1, r3
 80046a2:	f011 ff0d 	bl	80164c0 <memcpy>
 80046a6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80046aa:	4628      	mov	r0, r5
 80046ac:	f7fd fcfc 	bl	80020a8 <commandReply>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				  //LOG_REPORT("tail", usb_rx_ringbuff.tail);
				  if ( RPD_DUTY == rpd_type) {
 80046b6:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80046ba:	2b09      	cmp	r3, #9
 80046bc:	d123      	bne.n	8004706 <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					  // Wait allocate
					  while (dataMail == NULL) {
 80046c4:	e008      	b.n	80046d8 <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 80046c6:	4b22      	ldr	r3, [pc, #136]	; (8004750 <Start_USB_RX_Task+0x1b0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f04f 31ff 	mov.w	r1, #4294967295
 80046ce:	4618      	mov	r0, r3
 80046d0:	f00e fd64 	bl	801319c <osMailAlloc>
 80046d4:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					  while (dataMail == NULL) {
 80046d8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f2      	beq.n	80046c6 <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80046e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80046e4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80046e8:	4619      	mov	r1, r3
 80046ea:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 80046ee:	f011 fee7 	bl	80164c0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <Start_USB_RX_Task+0x1b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 80046fa:	4618      	mov	r0, r3
 80046fc:	f00e fd64 	bl	80131c8 <osMailPut>
 8004700:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
 8004704:	e01d      	b.n	8004742 <Start_USB_RX_Task+0x1a2>
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else if(rpd_type == RPD_TRANSFER){
 8004706:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 800470a:	2b0a      	cmp	r3, #10
 800470c:	d019      	beq.n	8004742 <Start_USB_RX_Task+0x1a2>

				  }else {
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 800470e:	f897 13fb 	ldrb.w	r1, [r7, #1019]	; 0x3fb
 8004712:	f107 0308 	add.w	r3, r7, #8
 8004716:	681c      	ldr	r4, [r3, #0]
 8004718:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800471c:	f897 03fa 	ldrb.w	r0, [r7, #1018]	; 0x3fa
 8004720:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	4623      	mov	r3, r4
 8004728:	f7fd fe4a 	bl	80023c0 <commandRespond1>
 800472c:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  CDC_Transmit_FS(respond, respond_lenght);
 8004730:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8004734:	b29a      	uxth	r2, r3
 8004736:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f011 fa41 	bl	8015bc4 <CDC_Transmit_FS>
 8004742:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, RECEIVE_END);
 8004744:	e736      	b.n	80045b4 <Start_USB_RX_Task+0x14>
 8004746:	bf00      	nop
 8004748:	0801c960 	.word	0x0801c960
 800474c:	20000068 	.word	0x20000068
 8004750:	2000fe6c 	.word	0x2000fe6c

08004754 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	b292      	uxth	r2, r2
 8004764:	801a      	strh	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	611a      	str	r2, [r3, #16]
 80047a0:	615a      	str	r2, [r3, #20]
 80047a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 80047a4:	4b27      	ldr	r3, [pc, #156]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80047aa:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047ae:	4a26      	ldr	r2, [pc, #152]	; (8004848 <MX_FSMC_Init+0xbc>)
 80047b0:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80047b2:	4b24      	ldr	r3, [pc, #144]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047ba:	2202      	movs	r2, #2
 80047bc:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 80047be:	4b21      	ldr	r3, [pc, #132]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047c0:	2208      	movs	r2, #8
 80047c2:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80047c4:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047c6:	2210      	movs	r2, #16
 80047c8:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80047ca:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80047d0:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80047d6:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047d8:	2200      	movs	r2, #0
 80047da:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047de:	2200      	movs	r2, #0
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80047e2:	4b18      	ldr	r3, [pc, #96]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047e8:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80047ea:	4b16      	ldr	r3, [pc, #88]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80047f0:	4b14      	ldr	r3, [pc, #80]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80047f6:	4b13      	ldr	r3, [pc, #76]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <MX_FSMC_Init+0xb8>)
 80047fe:	2200      	movs	r2, #0
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <MX_FSMC_Init+0xb8>)
 8004804:	2200      	movs	r2, #0
 8004806:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004808:	230f      	movs	r3, #15
 800480a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800480c:	230f      	movs	r3, #15
 800480e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8004810:	23ff      	movs	r3, #255	; 0xff
 8004812:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8004814:	230f      	movs	r3, #15
 8004816:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004818:	2310      	movs	r3, #16
 800481a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800481c:	2311      	movs	r3, #17
 800481e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	2200      	movs	r2, #0
 8004828:	4619      	mov	r1, r3
 800482a:	4806      	ldr	r0, [pc, #24]	; (8004844 <MX_FSMC_Init+0xb8>)
 800482c:	f008 f842 	bl	800c8b4 <HAL_NOR_Init>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004836:	f001 f9bd 	bl	8005bb4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800483a:	bf00      	nop
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	2000fe78 	.word	0x2000fe78
 8004848:	a0000104 	.word	0xa0000104

0800484c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	60da      	str	r2, [r3, #12]
 800485e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004860:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_FSMC_MspInit+0xa8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d140      	bne.n	80048ea <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8004868:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <HAL_FSMC_MspInit+0xa8>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <HAL_FSMC_MspInit+0xac>)
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <HAL_FSMC_MspInit+0xac>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6393      	str	r3, [r2, #56]	; 0x38
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_FSMC_MspInit+0xac>)
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800488a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800488e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004890:	2302      	movs	r3, #2
 8004892:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004898:	2303      	movs	r3, #3
 800489a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800489c:	230c      	movs	r3, #12
 800489e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048a0:	1d3b      	adds	r3, r7, #4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4815      	ldr	r0, [pc, #84]	; (80048fc <HAL_FSMC_MspInit+0xb0>)
 80048a6:	f007 fe4f 	bl	800c548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80048aa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80048ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b0:	2302      	movs	r3, #2
 80048b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b8:	2303      	movs	r3, #3
 80048ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80048bc:	230c      	movs	r3, #12
 80048be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048c0:	1d3b      	adds	r3, r7, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	480e      	ldr	r0, [pc, #56]	; (8004900 <HAL_FSMC_MspInit+0xb4>)
 80048c6:	f007 fe3f 	bl	800c548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	2302      	movs	r3, #2
 80048d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d6:	2303      	movs	r3, #3
 80048d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80048da:	230c      	movs	r3, #12
 80048dc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048de:	1d3b      	adds	r3, r7, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4808      	ldr	r0, [pc, #32]	; (8004904 <HAL_FSMC_MspInit+0xb8>)
 80048e4:	f007 fe30 	bl	800c548 <HAL_GPIO_Init>
 80048e8:	e000      	b.n	80048ec <HAL_FSMC_MspInit+0xa0>
    return;
 80048ea:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	2000485c 	.word	0x2000485c
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40021000 	.word	0x40021000
 8004900:	40020c00 	.word	0x40020c00
 8004904:	40020400 	.word	0x40020400

08004908 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8004910:	f7ff ff9c 	bl	800484c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	0000      	movs	r0, r0
	...

08004920 <update_gcode_point>:
extern int16_t 							pre_clutch_index;
extern Gcode_Packet_Command_TypeDef 	pre_height;
extern Gcode_Packet_Command_TypeDef 	Gcode_Mode;
extern SCARA_Gcode_Cor_TypeDef			Gcode_Cor[1000];
void update_gcode_point(DUTY_Command_TypeDef *duty_cmd, int32_t run_point)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	if(Gcode_Cor[run_point].configure.type_define[0] == BEZIER_TYPE){
 800492a:	49b3      	ldr	r1, [pc, #716]	; (8004bf8 <update_gcode_point+0x2d8>)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	331a      	adds	r3, #26
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b02      	cmp	r3, #2
 800493e:	f040 816f 	bne.w	8004c20 <update_gcode_point+0x300>
		duty_cmd->target_point.x = (double)Gcode_Cor[run_point + 1].X * COR_INVERSE_SCALE + offset_x;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	49ac      	ldr	r1, [pc, #688]	; (8004bf8 <update_gcode_point+0x2d8>)
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fb fde5 	bl	8000524 <__aeabi_i2d>
 800495a:	a3a5      	add	r3, pc, #660	; (adr r3, 8004bf0 <update_gcode_point+0x2d0>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fe4a 	bl	80005f8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	4ba3      	ldr	r3, [pc, #652]	; (8004bfc <update_gcode_point+0x2dc>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb fc8b 	bl	800028c <__adddf3>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		duty_cmd->target_point.y = (double)Gcode_Cor[run_point + 1].Y * COR_INVERSE_SCALE + offset_y;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	499c      	ldr	r1, [pc, #624]	; (8004bf8 <update_gcode_point+0x2d8>)
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	3304      	adds	r3, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7fb fdc5 	bl	8000524 <__aeabi_i2d>
 800499a:	a395      	add	r3, pc, #596	; (adr r3, 8004bf0 <update_gcode_point+0x2d0>)
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f7fb fe2a 	bl	80005f8 <__aeabi_dmul>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	4b94      	ldr	r3, [pc, #592]	; (8004c00 <update_gcode_point+0x2e0>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f7fb fc6b 	bl	800028c <__adddf3>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 80049c0:	498d      	ldr	r1, [pc, #564]	; (8004bf8 <update_gcode_point+0x2d8>)
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	331b      	adds	r3, #27
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d10d      	bne.n	80049f2 <update_gcode_point+0xd2>
		  duty_cmd->target_point.z = up_z_height + offset_z;
 80049d6:	4b8b      	ldr	r3, [pc, #556]	; (8004c04 <update_gcode_point+0x2e4>)
 80049d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049dc:	4b8a      	ldr	r3, [pc, #552]	; (8004c08 <update_gcode_point+0x2e8>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fc53 	bl	800028c <__adddf3>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80049f0:	e00c      	b.n	8004a0c <update_gcode_point+0xec>
		}else{
		  duty_cmd->target_point.z = down_z_height + offset_z;
 80049f2:	4b86      	ldr	r3, [pc, #536]	; (8004c0c <update_gcode_point+0x2ec>)
 80049f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049f8:	4b83      	ldr	r3, [pc, #524]	; (8004c08 <update_gcode_point+0x2e8>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fb fc45 	bl	800028c <__adddf3>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
		}
		duty_cmd->target_point.roll = roll_angle;
 8004a0c:	4b80      	ldr	r3, [pc, #512]	; (8004c10 <update_gcode_point+0x2f0>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		duty_cmd->space_type = DUTY_SPACE_TASK;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	735a      	strb	r2, [r3, #13]
		duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	731a      	strb	r2, [r3, #12]
		duty_cmd->path_type = DUTY_PATH_BEZIER_CURVE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	739a      	strb	r2, [r3, #14]
		duty_cmd->trajec_type = DUTY_TRAJECTORY_BEZIER_CURVE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	741a      	strb	r2, [r3, #16]
		double feedrate = (double)Gcode_Cor[run_point].F * COR_INVERSE_SCALE;
 8004a30:	4971      	ldr	r1, [pc, #452]	; (8004bf8 <update_gcode_point+0x2d8>)
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3308      	adds	r3, #8
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fd6e 	bl	8000524 <__aeabi_i2d>
 8004a48:	a369      	add	r3, pc, #420	; (adr r3, 8004bf0 <update_gcode_point+0x2d0>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb fdd3 	bl	80005f8 <__aeabi_dmul>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double distance = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004a5a:	4967      	ldr	r1, [pc, #412]	; (8004bf8 <update_gcode_point+0x2d8>)
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	330c      	adds	r3, #12
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fb fd59 	bl	8000524 <__aeabi_i2d>
 8004a72:	a35f      	add	r3, pc, #380	; (adr r3, 8004bf0 <update_gcode_point+0x2d0>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fdbe 	bl	80005f8 <__aeabi_dmul>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	e9c7 2302 	strd	r2, r3, [r7, #8]
		duty_cmd->time_total = distance/feedrate;
 8004a84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a8c:	f7fb fede 	bl	800084c <__aeabi_ddiv>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	e9c1 2308 	strd	r2, r3, [r1, #32]
		bezier_x_coeffs[0] = (double)Gcode_Cor[run_point-1].X * COR_INVERSE_SCALE + offset_x;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	1e5a      	subs	r2, r3, #1
 8004a9e:	4956      	ldr	r1, [pc, #344]	; (8004bf8 <update_gcode_point+0x2d8>)
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fb fd39 	bl	8000524 <__aeabi_i2d>
 8004ab2:	a34f      	add	r3, pc, #316	; (adr r3, 8004bf0 <update_gcode_point+0x2d0>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fd9e 	bl	80005f8 <__aeabi_dmul>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4b4d      	ldr	r3, [pc, #308]	; (8004bfc <update_gcode_point+0x2dc>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fbdf 	bl	800028c <__adddf3>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4950      	ldr	r1, [pc, #320]	; (8004c14 <update_gcode_point+0x2f4>)
 8004ad4:	e9c1 2300 	strd	r2, r3, [r1]
		bezier_x_coeffs[1] = ((double)Gcode_Cor[run_point].X * COR_INVERSE_SCALE + offset_x)*2.0*bezier_wc;
 8004ad8:	4947      	ldr	r1, [pc, #284]	; (8004bf8 <update_gcode_point+0x2d8>)
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fb fd1b 	bl	8000524 <__aeabi_i2d>
 8004aee:	a340      	add	r3, pc, #256	; (adr r3, 8004bf0 <update_gcode_point+0x2d0>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb fd80 	bl	80005f8 <__aeabi_dmul>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	4b3e      	ldr	r3, [pc, #248]	; (8004bfc <update_gcode_point+0x2dc>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fbc1 	bl	800028c <__adddf3>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	f7fb fbb9 	bl	800028c <__adddf3>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <update_gcode_point+0x2f8>)
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	f7fb fd66 	bl	80005f8 <__aeabi_dmul>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4938      	ldr	r1, [pc, #224]	; (8004c14 <update_gcode_point+0x2f4>)
 8004b32:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bezier_x_coeffs[2] = duty_cmd->target_point.x;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004b3c:	4935      	ldr	r1, [pc, #212]	; (8004c14 <update_gcode_point+0x2f4>)
 8004b3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		bezier_y_coeffs[0] = (double)Gcode_Cor[run_point-1].Y * COR_INVERSE_SCALE + offset_y;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	1e5a      	subs	r2, r3, #1
 8004b46:	492c      	ldr	r1, [pc, #176]	; (8004bf8 <update_gcode_point+0x2d8>)
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	3304      	adds	r3, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fb fce4 	bl	8000524 <__aeabi_i2d>
 8004b5c:	a324      	add	r3, pc, #144	; (adr r3, 8004bf0 <update_gcode_point+0x2d0>)
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	f7fb fd49 	bl	80005f8 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <update_gcode_point+0x2e0>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f7fb fb8a 	bl	800028c <__adddf3>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4927      	ldr	r1, [pc, #156]	; (8004c1c <update_gcode_point+0x2fc>)
 8004b7e:	e9c1 2300 	strd	r2, r3, [r1]
		bezier_y_coeffs[1] = ((double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y)*2.0*bezier_wc;
 8004b82:	491d      	ldr	r1, [pc, #116]	; (8004bf8 <update_gcode_point+0x2d8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	3304      	adds	r3, #4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fb fcc5 	bl	8000524 <__aeabi_i2d>
 8004b9a:	a315      	add	r3, pc, #84	; (adr r3, 8004bf0 <update_gcode_point+0x2d0>)
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f7fb fd2a 	bl	80005f8 <__aeabi_dmul>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <update_gcode_point+0x2e0>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f7fb fb6b 	bl	800028c <__adddf3>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	f7fb fb63 	bl	800028c <__adddf3>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <update_gcode_point+0x2f8>)
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f7fb fd10 	bl	80005f8 <__aeabi_dmul>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	490f      	ldr	r1, [pc, #60]	; (8004c1c <update_gcode_point+0x2fc>)
 8004bde:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bezier_y_coeffs[2] = duty_cmd->target_point.y;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004be8:	490c      	ldr	r1, [pc, #48]	; (8004c1c <update_gcode_point+0x2fc>)
 8004bea:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
		}
	}


}
 8004bee:	e1fd      	b.n	8004fec <update_gcode_point+0x6cc>
 8004bf0:	a0000000 	.word	0xa0000000
 8004bf4:	3eb0c6f7 	.word	0x3eb0c6f7
 8004bf8:	20008fc0 	.word	0x20008fc0
 8004bfc:	20008fa0 	.word	0x20008fa0
 8004c00:	2000fd40 	.word	0x2000fd40
 8004c04:	200085c0 	.word	0x200085c0
 8004c08:	2000fd30 	.word	0x2000fd30
 8004c0c:	20008f38 	.word	0x20008f38
 8004c10:	20008f98 	.word	0x20008f98
 8004c14:	20008f68 	.word	0x20008f68
 8004c18:	20008fb8 	.word	0x20008fb8
 8004c1c:	2000fd48 	.word	0x2000fd48
		duty_cmd->target_point.x = (double)Gcode_Cor[run_point].X * COR_INVERSE_SCALE + offset_x;
 8004c20:	499d      	ldr	r1, [pc, #628]	; (8004e98 <update_gcode_point+0x578>)
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fb fc77 	bl	8000524 <__aeabi_i2d>
 8004c36:	a396      	add	r3, pc, #600	; (adr r3, 8004e90 <update_gcode_point+0x570>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f7fb fcdc 	bl	80005f8 <__aeabi_dmul>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4610      	mov	r0, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	4b94      	ldr	r3, [pc, #592]	; (8004e9c <update_gcode_point+0x57c>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fb1d 	bl	800028c <__adddf3>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		duty_cmd->target_point.y = (double)Gcode_Cor[run_point].Y * COR_INVERSE_SCALE + offset_y;
 8004c5c:	498e      	ldr	r1, [pc, #568]	; (8004e98 <update_gcode_point+0x578>)
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fb fc58 	bl	8000524 <__aeabi_i2d>
 8004c74:	a386      	add	r3, pc, #536	; (adr r3, 8004e90 <update_gcode_point+0x570>)
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f7fb fcbd 	bl	80005f8 <__aeabi_dmul>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	4b86      	ldr	r3, [pc, #536]	; (8004ea0 <update_gcode_point+0x580>)
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f7fb fafe 	bl	800028c <__adddf3>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		if(Gcode_Cor[run_point].configure.type_define[1] == UP_Z){
 8004c9a:	497f      	ldr	r1, [pc, #508]	; (8004e98 <update_gcode_point+0x578>)
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	331b      	adds	r3, #27
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b06      	cmp	r3, #6
 8004cae:	d10d      	bne.n	8004ccc <update_gcode_point+0x3ac>
		  duty_cmd->target_point.z = up_z_height + offset_z;
 8004cb0:	4b7c      	ldr	r3, [pc, #496]	; (8004ea4 <update_gcode_point+0x584>)
 8004cb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cb6:	4b7c      	ldr	r3, [pc, #496]	; (8004ea8 <update_gcode_point+0x588>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f7fb fae6 	bl	800028c <__adddf3>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004cca:	e00c      	b.n	8004ce6 <update_gcode_point+0x3c6>
		  duty_cmd->target_point.z = down_z_height + offset_z;
 8004ccc:	4b77      	ldr	r3, [pc, #476]	; (8004eac <update_gcode_point+0x58c>)
 8004cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cd2:	4b75      	ldr	r3, [pc, #468]	; (8004ea8 <update_gcode_point+0x588>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f7fb fad8 	bl	800028c <__adddf3>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
		duty_cmd->target_point.roll = roll_angle;
 8004ce6:	4b72      	ldr	r3, [pc, #456]	; (8004eb0 <update_gcode_point+0x590>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		duty_cmd->space_type = DUTY_SPACE_TASK;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	735a      	strb	r2, [r3, #13]
		duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	731a      	strb	r2, [r3, #12]
		if(Gcode_Cor[run_point].configure.type_define[0] == LINEAR_TYPE){
 8004cfe:	4966      	ldr	r1, [pc, #408]	; (8004e98 <update_gcode_point+0x578>)
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	331a      	adds	r3, #26
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d103      	bne.n	8004d1c <update_gcode_point+0x3fc>
		  duty_cmd->path_type = DUTY_PATH_LINE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	739a      	strb	r2, [r3, #14]
 8004d1a:	e07b      	b.n	8004e14 <update_gcode_point+0x4f4>
		}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_AW_TYPE){
 8004d1c:	495e      	ldr	r1, [pc, #376]	; (8004e98 <update_gcode_point+0x578>)
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	331a      	adds	r3, #26
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d132      	bne.n	8004d98 <update_gcode_point+0x478>
		  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004d32:	4959      	ldr	r1, [pc, #356]	; (8004e98 <update_gcode_point+0x578>)
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	330c      	adds	r3, #12
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fb fbed 	bl	8000524 <__aeabi_i2d>
 8004d4a:	a351      	add	r3, pc, #324	; (adr r3, 8004e90 <update_gcode_point+0x570>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f7fb fc52 	bl	80005f8 <__aeabi_dmul>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * COR_INVERSE_SCALE;
 8004d5e:	494e      	ldr	r1, [pc, #312]	; (8004e98 <update_gcode_point+0x578>)
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	4613      	mov	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	3310      	adds	r3, #16
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fbd7 	bl	8000524 <__aeabi_i2d>
 8004d76:	a346      	add	r3, pc, #280	; (adr r3, 8004e90 <update_gcode_point+0x570>)
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f7fb fc3c 	bl	80005f8 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = 1;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	615a      	str	r2, [r3, #20]
 8004d96:	e03d      	b.n	8004e14 <update_gcode_point+0x4f4>
		}else if(Gcode_Cor[run_point].configure.type_define[0] == ARC_CW_TYPE){
 8004d98:	493f      	ldr	r1, [pc, #252]	; (8004e98 <update_gcode_point+0x578>)
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	331a      	adds	r3, #26
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d132      	bne.n	8004e14 <update_gcode_point+0x4f4>
		  duty_cmd->sub_point.x = (double)Gcode_Cor[run_point].I * COR_INVERSE_SCALE;
 8004dae:	493a      	ldr	r1, [pc, #232]	; (8004e98 <update_gcode_point+0x578>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fb fbaf 	bl	8000524 <__aeabi_i2d>
 8004dc6:	a332      	add	r3, pc, #200	; (adr r3, 8004e90 <update_gcode_point+0x570>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f7fb fc14 	bl	80005f8 <__aeabi_dmul>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
		  duty_cmd->sub_point.y = (double)Gcode_Cor[run_point].J * COR_INVERSE_SCALE;
 8004dda:	492f      	ldr	r1, [pc, #188]	; (8004e98 <update_gcode_point+0x578>)
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	4613      	mov	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	3310      	adds	r3, #16
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb fb99 	bl	8000524 <__aeabi_i2d>
 8004df2:	a327      	add	r3, pc, #156	; (adr r3, 8004e90 <update_gcode_point+0x570>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb fbfe 	bl	80005f8 <__aeabi_dmul>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
		  duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	739a      	strb	r2, [r3, #14]
		  duty_cmd->arc_dir = -1;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e12:	615a      	str	r2, [r3, #20]
		if(Gcode_Mode == GCODE_LINEAR){
 8004e14:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <update_gcode_point+0x594>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d14f      	bne.n	8004ebc <update_gcode_point+0x59c>
			duty_cmd->v_factor = (double)Gcode_Cor[run_point].F * COR_INVERSE_SCALE / V_MOVE_MAX;
 8004e1c:	491e      	ldr	r1, [pc, #120]	; (8004e98 <update_gcode_point+0x578>)
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb fb78 	bl	8000524 <__aeabi_i2d>
 8004e34:	a316      	add	r3, pc, #88	; (adr r3, 8004e90 <update_gcode_point+0x570>)
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f7fb fbdd 	bl	80005f8 <__aeabi_dmul>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <update_gcode_point+0x598>)
 8004e4c:	f7fb fcfe 	bl	800084c <__aeabi_ddiv>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			if(run_point == 1){
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10d      	bne.n	8004e7c <update_gcode_point+0x55c>
				duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	741a      	strb	r2, [r3, #16]
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total = 0;
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004e7a:	e0b7      	b.n	8004fec <update_gcode_point+0x6cc>
				duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	741a      	strb	r2, [r3, #16]
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	745a      	strb	r2, [r3, #17]
}
 8004e88:	e0b0      	b.n	8004fec <update_gcode_point+0x6cc>
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w
 8004e90:	a0000000 	.word	0xa0000000
 8004e94:	3eb0c6f7 	.word	0x3eb0c6f7
 8004e98:	20008fc0 	.word	0x20008fc0
 8004e9c:	20008fa0 	.word	0x20008fa0
 8004ea0:	2000fd40 	.word	0x2000fd40
 8004ea4:	200085c0 	.word	0x200085c0
 8004ea8:	2000fd30 	.word	0x2000fd30
 8004eac:	20008f38 	.word	0x20008f38
 8004eb0:	20008f98 	.word	0x20008f98
 8004eb4:	200085c8 	.word	0x200085c8
 8004eb8:	40877000 	.word	0x40877000
		}else if(Gcode_Mode == GCODE_SMOOTH_LSPB){
 8004ebc:	4b50      	ldr	r3, [pc, #320]	; (8005000 <update_gcode_point+0x6e0>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b09      	cmp	r3, #9
 8004ec2:	f040 8093 	bne.w	8004fec <update_gcode_point+0x6cc>
			if(Gcode_Cor[run_point].configure.type_define[1] == pre_height){
 8004ec6:	494f      	ldr	r1, [pc, #316]	; (8005004 <update_gcode_point+0x6e4>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	331b      	adds	r3, #27
 8004ed6:	781a      	ldrb	r2, [r3, #0]
 8004ed8:	4b4b      	ldr	r3, [pc, #300]	; (8005008 <update_gcode_point+0x6e8>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d14c      	bne.n	8004f7a <update_gcode_point+0x65a>
				if(Gcode_Cor[run_point].configure.clutch_index != pre_clutch_index){
 8004ee0:	4948      	ldr	r1, [pc, #288]	; (8005004 <update_gcode_point+0x6e4>)
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	3318      	adds	r3, #24
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b45      	ldr	r3, [pc, #276]	; (800500c <update_gcode_point+0x6ec>)
 8004ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d01f      	beq.n	8004f3e <update_gcode_point+0x61e>
					LSPB_calculation(gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index]);
 8004efe:	4941      	ldr	r1, [pc, #260]	; (8005004 <update_gcode_point+0x6e4>)
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3318      	adds	r3, #24
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	4a3f      	ldr	r2, [pc, #252]	; (8005010 <update_gcode_point+0x6f0>)
 8004f14:	460b      	mov	r3, r1
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	440b      	add	r3, r1
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f22:	f000 f87d 	bl	8005020 <LSPB_calculation>
					pre_clutch_index = Gcode_Cor[run_point].configure.clutch_index;
 8004f26:	4937      	ldr	r1, [pc, #220]	; (8005004 <update_gcode_point+0x6e4>)
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3318      	adds	r3, #24
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b21a      	sxth	r2, r3
 8004f3a:	4b34      	ldr	r3, [pc, #208]	; (800500c <update_gcode_point+0x6ec>)
 8004f3c:	801a      	strh	r2, [r3, #0]
				duty_cmd->trajec_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2203      	movs	r2, #3
 8004f42:	741a      	strb	r2, [r3, #16]
				duty_cmd->time_total = (double)(Gcode_Cor[run_point].T*COR_INVERSE_SCALE);
 8004f44:	492f      	ldr	r1, [pc, #188]	; (8005004 <update_gcode_point+0x6e4>)
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	3314      	adds	r3, #20
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005014 <update_gcode_point+0x6f4>
 8004f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f66:	ee17 0a90 	vmov	r0, s15
 8004f6a:	f7fb faed 	bl	8000548 <__aeabi_f2d>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004f78:	e038      	b.n	8004fec <update_gcode_point+0x6cc>
				duty_cmd->trajec_type = DUTY_TRAJECTORY_LINEAR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	741a      	strb	r2, [r3, #16]
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QV;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	745a      	strb	r2, [r3, #17]
				duty_cmd->v_factor = (double)gcode_clutch_configure[Gcode_Cor[run_point].configure.clutch_index].Depth_Feed*COR_INVERSE_SCALE/V_MOVE_MAX;
 8004f86:	491f      	ldr	r1, [pc, #124]	; (8005004 <update_gcode_point+0x6e4>)
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	3318      	adds	r3, #24
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <update_gcode_point+0x6f0>)
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	440b      	add	r3, r1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fb faba 	bl	8000524 <__aeabi_i2d>
 8004fb0:	a311      	add	r3, pc, #68	; (adr r3, 8004ff8 <update_gcode_point+0x6d8>)
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	f7fb fb1f 	bl	80005f8 <__aeabi_dmul>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <update_gcode_point+0x6f8>)
 8004fc8:	f7fb fc40 	bl	800084c <__aeabi_ddiv>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
				pre_height = Gcode_Cor[run_point].configure.type_define[1];
 8004fd6:	490b      	ldr	r1, [pc, #44]	; (8005004 <update_gcode_point+0x6e4>)
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	331b      	adds	r3, #27
 8004fe6:	781a      	ldrb	r2, [r3, #0]
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <update_gcode_point+0x6e8>)
 8004fea:	701a      	strb	r2, [r3, #0]
}
 8004fec:	bf00      	nop
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	a0000000 	.word	0xa0000000
 8004ffc:	3eb0c6f7 	.word	0x3eb0c6f7
 8005000:	200085c8 	.word	0x200085c8
 8005004:	20008fc0 	.word	0x20008fc0
 8005008:	20008f80 	.word	0x20008f80
 800500c:	2000fd2a 	.word	0x2000fd2a
 8005010:	200085d8 	.word	0x200085d8
 8005014:	358637bd 	.word	0x358637bd
 8005018:	40877000 	.word	0x40877000
 800501c:	00000000 	.word	0x00000000

08005020 <LSPB_calculation>:
void LSPB_calculation(SCARA_LSPB_Clutch_TypeDef configure)
{
 8005020:	b5b0      	push	{r4, r5, r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af00      	add	r7, sp, #0
 8005026:	1d3b      	adds	r3, r7, #4
 8005028:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	double accel = 0;
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_s = (double)configure.total_s*COR_INVERSE_SCALE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb fa72 	bl	8000524 <__aeabi_i2d>
 8005040:	a388      	add	r3, pc, #544	; (adr r3, 8005264 <LSPB_calculation+0x244>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f7fb fad7 	bl	80005f8 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double veloc   = (double)configure.veloc*COR_INVERSE_SCALE;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4618      	mov	r0, r3
 8005056:	f7fb fa65 	bl	8000524 <__aeabi_i2d>
 800505a:	a382      	add	r3, pc, #520	; (adr r3, 8005264 <LSPB_calculation+0x244>)
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f7fb faca 	bl	80005f8 <__aeabi_dmul>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	e9c7 2304 	strd	r2, r3, [r7, #16]
	time_move = 1.2*total_s/veloc;
 800506c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8005070:	4b71      	ldr	r3, [pc, #452]	; (8005238 <LSPB_calculation+0x218>)
 8005072:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005076:	f7fb fabf 	bl	80005f8 <__aeabi_dmul>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005086:	f7fb fbe1 	bl	800084c <__aeabi_ddiv>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	496b      	ldr	r1, [pc, #428]	; (800523c <LSPB_calculation+0x21c>)
 8005090:	e9c1 2300 	strd	r2, r3, [r1]
	time_acc = time_move - total_s/veloc;
 8005094:	4b69      	ldr	r3, [pc, #420]	; (800523c <LSPB_calculation+0x21c>)
 8005096:	e9d3 4500 	ldrd	r4, r5, [r3]
 800509a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800509e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050a2:	f7fb fbd3 	bl	800084c <__aeabi_ddiv>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4620      	mov	r0, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7fb f8eb 	bl	8000288 <__aeabi_dsub>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4962      	ldr	r1, [pc, #392]	; (8005240 <LSPB_calculation+0x220>)
 80050b8:	e9c1 2300 	strd	r2, r3, [r1]
	time_dec = time_move - time_acc;
 80050bc:	4b5f      	ldr	r3, [pc, #380]	; (800523c <LSPB_calculation+0x21c>)
 80050be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050c2:	4b5f      	ldr	r3, [pc, #380]	; (8005240 <LSPB_calculation+0x220>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb f8de 	bl	8000288 <__aeabi_dsub>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	495c      	ldr	r1, [pc, #368]	; (8005244 <LSPB_calculation+0x224>)
 80050d2:	e9c1 2300 	strd	r2, r3, [r1]
	accel = veloc / time_acc;
 80050d6:	4b5a      	ldr	r3, [pc, #360]	; (8005240 <LSPB_calculation+0x220>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050e0:	f7fb fbb4 	bl	800084c <__aeabi_ddiv>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	acc0 = 0.5*accel;
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	4b55      	ldr	r3, [pc, #340]	; (8005248 <LSPB_calculation+0x228>)
 80050f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050f6:	f7fb fa7f 	bl	80005f8 <__aeabi_dmul>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4953      	ldr	r1, [pc, #332]	; (800524c <LSPB_calculation+0x22c>)
 8005100:	e9c1 2300 	strd	r2, r3, [r1]
	constant[0] = veloc;
 8005104:	4952      	ldr	r1, [pc, #328]	; (8005250 <LSPB_calculation+0x230>)
 8005106:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800510a:	e9c1 2300 	strd	r2, r3, [r1]
	constant[1] = -0.5*time_acc*veloc;
 800510e:	4b4c      	ldr	r3, [pc, #304]	; (8005240 <LSPB_calculation+0x220>)
 8005110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	4b4e      	ldr	r3, [pc, #312]	; (8005254 <LSPB_calculation+0x234>)
 800511a:	f7fb fa6d 	bl	80005f8 <__aeabi_dmul>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4610      	mov	r0, r2
 8005124:	4619      	mov	r1, r3
 8005126:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800512a:	f7fb fa65 	bl	80005f8 <__aeabi_dmul>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4947      	ldr	r1, [pc, #284]	; (8005250 <LSPB_calculation+0x230>)
 8005134:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[0] 	= -0.5*accel;
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	4b45      	ldr	r3, [pc, #276]	; (8005254 <LSPB_calculation+0x234>)
 800513e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005142:	f7fb fa59 	bl	80005f8 <__aeabi_dmul>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4943      	ldr	r1, [pc, #268]	; (8005258 <LSPB_calculation+0x238>)
 800514c:	e9c1 2300 	strd	r2, r3, [r1]
    deacc[1]	= veloc + accel*time_dec;
 8005150:	4b3c      	ldr	r3, [pc, #240]	; (8005244 <LSPB_calculation+0x224>)
 8005152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800515a:	f7fb fa4d 	bl	80005f8 <__aeabi_dmul>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4610      	mov	r0, r2
 8005164:	4619      	mov	r1, r3
 8005166:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800516a:	f7fb f88f 	bl	800028c <__adddf3>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4939      	ldr	r1, [pc, #228]	; (8005258 <LSPB_calculation+0x238>)
 8005174:	e9c1 2302 	strd	r2, r3, [r1, #8]
    deacc[2]    = total_s - time_move*(2*veloc + 2*accel*time_dec - accel*time_move)/2;
 8005178:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	f7fb f884 	bl	800028c <__adddf3>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	f7fb f87a 	bl	800028c <__adddf3>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	4b28      	ldr	r3, [pc, #160]	; (8005244 <LSPB_calculation+0x224>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb fa27 	bl	80005f8 <__aeabi_dmul>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4620      	mov	r0, r4
 80051b0:	4629      	mov	r1, r5
 80051b2:	f7fb f86b 	bl	800028c <__adddf3>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4614      	mov	r4, r2
 80051bc:	461d      	mov	r5, r3
 80051be:	4b1f      	ldr	r3, [pc, #124]	; (800523c <LSPB_calculation+0x21c>)
 80051c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051c8:	f7fb fa16 	bl	80005f8 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fb f858 	bl	8000288 <__aeabi_dsub>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4610      	mov	r0, r2
 80051de:	4619      	mov	r1, r3
 80051e0:	4b16      	ldr	r3, [pc, #88]	; (800523c <LSPB_calculation+0x21c>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f7fb fa07 	bl	80005f8 <__aeabi_dmul>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051fa:	f7fb fb27 	bl	800084c <__aeabi_ddiv>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005206:	f7fb f83f 	bl	8000288 <__aeabi_dsub>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4912      	ldr	r1, [pc, #72]	; (8005258 <LSPB_calculation+0x238>)
 8005210:	e9c1 2304 	strd	r2, r3, [r1, #16]
    accumulate_s = 0;
 8005214:	4911      	ldr	r1, [pc, #68]	; (800525c <LSPB_calculation+0x23c>)
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	e9c1 2300 	strd	r2, r3, [r1]
    last_T = 0;
 8005222:	490f      	ldr	r1, [pc, #60]	; (8005260 <LSPB_calculation+0x240>)
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005230:	bf00      	nop
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bdb0      	pop	{r4, r5, r7, pc}
 8005238:	3ff33333 	.word	0x3ff33333
 800523c:	20008fb0 	.word	0x20008fb0
 8005240:	20008f40 	.word	0x20008f40
 8005244:	20008f60 	.word	0x20008f60
 8005248:	3fe00000 	.word	0x3fe00000
 800524c:	2000fd20 	.word	0x2000fd20
 8005250:	20008f88 	.word	0x20008f88
 8005254:	bfe00000 	.word	0xbfe00000
 8005258:	20008f48 	.word	0x20008f48
 800525c:	200085d0 	.word	0x200085d0
 8005260:	2000fd38 	.word	0x2000fd38
 8005264:	a0000000 	.word	0xa0000000
 8005268:	3eb0c6f7 	.word	0x3eb0c6f7
 800526c:	00000000 	.word	0x00000000

08005270 <accumulate_update>:
void accumulate_update(SCARA_Gcode_Cor_TypeDef gcode_point){
 8005270:	b084      	sub	sp, #16
 8005272:	b580      	push	{r7, lr}
 8005274:	af00      	add	r7, sp, #0
 8005276:	f107 0c08 	add.w	ip, r7, #8
 800527a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scaraFlowGCODE(&accumulate_s, (double)gcode_point.T*COR_INVERSE_SCALE);
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4618      	mov	r0, r3
 8005282:	f7fb f94f 	bl	8000524 <__aeabi_i2d>
 8005286:	a312      	add	r3, pc, #72	; (adr r3, 80052d0 <accumulate_update+0x60>)
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	f7fb f9b4 	bl	80005f8 <__aeabi_dmul>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	ec43 2b17 	vmov	d7, r2, r3
 8005298:	eeb0 0a47 	vmov.f32	s0, s14
 800529c:	eef0 0a67 	vmov.f32	s1, s15
 80052a0:	480d      	ldr	r0, [pc, #52]	; (80052d8 <accumulate_update+0x68>)
 80052a2:	f003 fea1 	bl	8008fe8 <scaraFlowGCODE>
	last_T = (double)gcode_point.T*COR_INVERSE_SCALE;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fb f93b 	bl	8000524 <__aeabi_i2d>
 80052ae:	a308      	add	r3, pc, #32	; (adr r3, 80052d0 <accumulate_update+0x60>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fb f9a0 	bl	80005f8 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4907      	ldr	r1, [pc, #28]	; (80052dc <accumulate_update+0x6c>)
 80052be:	e9c1 2300 	strd	r2, r3, [r1]
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ca:	b004      	add	sp, #16
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	a0000000 	.word	0xa0000000
 80052d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80052d8:	200085d0 	.word	0x200085d0
 80052dc:	2000fd38 	.word	0x2000fd38

080052e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e6:	f107 0314 	add.w	r3, r7, #20
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	605a      	str	r2, [r3, #4]
 80052f0:	609a      	str	r2, [r3, #8]
 80052f2:	60da      	str	r2, [r3, #12]
 80052f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	4b51      	ldr	r3, [pc, #324]	; (8005440 <MX_GPIO_Init+0x160>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a50      	ldr	r2, [pc, #320]	; (8005440 <MX_GPIO_Init+0x160>)
 8005300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b4e      	ldr	r3, [pc, #312]	; (8005440 <MX_GPIO_Init+0x160>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	4b4a      	ldr	r3, [pc, #296]	; (8005440 <MX_GPIO_Init+0x160>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	4a49      	ldr	r2, [pc, #292]	; (8005440 <MX_GPIO_Init+0x160>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6313      	str	r3, [r2, #48]	; 0x30
 8005322:	4b47      	ldr	r3, [pc, #284]	; (8005440 <MX_GPIO_Init+0x160>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	4b43      	ldr	r3, [pc, #268]	; (8005440 <MX_GPIO_Init+0x160>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	4a42      	ldr	r2, [pc, #264]	; (8005440 <MX_GPIO_Init+0x160>)
 8005338:	f043 0310 	orr.w	r3, r3, #16
 800533c:	6313      	str	r3, [r2, #48]	; 0x30
 800533e:	4b40      	ldr	r3, [pc, #256]	; (8005440 <MX_GPIO_Init+0x160>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	4b3c      	ldr	r3, [pc, #240]	; (8005440 <MX_GPIO_Init+0x160>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	4a3b      	ldr	r2, [pc, #236]	; (8005440 <MX_GPIO_Init+0x160>)
 8005354:	f043 0302 	orr.w	r3, r3, #2
 8005358:	6313      	str	r3, [r2, #48]	; 0x30
 800535a:	4b39      	ldr	r3, [pc, #228]	; (8005440 <MX_GPIO_Init+0x160>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4b35      	ldr	r3, [pc, #212]	; (8005440 <MX_GPIO_Init+0x160>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	4a34      	ldr	r2, [pc, #208]	; (8005440 <MX_GPIO_Init+0x160>)
 8005370:	f043 0308 	orr.w	r3, r3, #8
 8005374:	6313      	str	r3, [r2, #48]	; 0x30
 8005376:	4b32      	ldr	r3, [pc, #200]	; (8005440 <MX_GPIO_Init+0x160>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8005382:	2200      	movs	r2, #0
 8005384:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8005388:	482e      	ldr	r0, [pc, #184]	; (8005444 <MX_GPIO_Init+0x164>)
 800538a:	f007 fa79 	bl	800c880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800538e:	2200      	movs	r2, #0
 8005390:	f641 0148 	movw	r1, #6216	; 0x1848
 8005394:	482c      	ldr	r0, [pc, #176]	; (8005448 <MX_GPIO_Init+0x168>)
 8005396:	f007 fa73 	bl	800c880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800539a:	2200      	movs	r2, #0
 800539c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80053a0:	482a      	ldr	r0, [pc, #168]	; (800544c <MX_GPIO_Init+0x16c>)
 80053a2:	f007 fa6d 	bl	800c880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 80053a6:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 80053aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ac:	2301      	movs	r3, #1
 80053ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b4:	2300      	movs	r3, #0
 80053b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b8:	f107 0314 	add.w	r3, r7, #20
 80053bc:	4619      	mov	r1, r3
 80053be:	4821      	ldr	r0, [pc, #132]	; (8005444 <MX_GPIO_Init+0x164>)
 80053c0:	f007 f8c2 	bl	800c548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 80053c4:	f640 0348 	movw	r3, #2120	; 0x848
 80053c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ca:	2301      	movs	r3, #1
 80053cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d2:	2300      	movs	r3, #0
 80053d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053d6:	f107 0314 	add.w	r3, r7, #20
 80053da:	4619      	mov	r1, r3
 80053dc:	481a      	ldr	r0, [pc, #104]	; (8005448 <MX_GPIO_Init+0x168>)
 80053de:	f007 f8b3 	bl	800c548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 80053e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053e8:	2301      	movs	r3, #1
 80053ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f0:	2303      	movs	r3, #3
 80053f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	4619      	mov	r1, r3
 80053fa:	4813      	ldr	r0, [pc, #76]	; (8005448 <MX_GPIO_Init+0x168>)
 80053fc:	f007 f8a4 	bl	800c548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8005400:	f242 0304 	movw	r3, #8196	; 0x2004
 8005404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005406:	2300      	movs	r3, #0
 8005408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800540a:	2301      	movs	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800540e:	f107 0314 	add.w	r3, r7, #20
 8005412:	4619      	mov	r1, r3
 8005414:	480c      	ldr	r0, [pc, #48]	; (8005448 <MX_GPIO_Init+0x168>)
 8005416:	f007 f897 	bl	800c548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 800541a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800541e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005420:	2301      	movs	r3, #1
 8005422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005428:	2300      	movs	r3, #0
 800542a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800542c:	f107 0314 	add.w	r3, r7, #20
 8005430:	4619      	mov	r1, r3
 8005432:	4806      	ldr	r0, [pc, #24]	; (800544c <MX_GPIO_Init+0x16c>)
 8005434:	f007 f888 	bl	800c548 <HAL_GPIO_Init>

}
 8005438:	bf00      	nop
 800543a:	3728      	adds	r7, #40	; 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40023800 	.word	0x40023800
 8005444:	40020400 	.word	0x40020400
 8005448:	40020c00 	.word	0x40020c00
 800544c:	40020000 	.word	0x40020000

08005450 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8005450:	b5b0      	push	{r4, r5, r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800545e:	eeb0 0a47 	vmov.f32	s0, s14
 8005462:	eef0 0a67 	vmov.f32	s1, s15
 8005466:	f015 fd0b 	bl	801ae80 <cos>
 800546a:	ec51 0b10 	vmov	r0, r1, d0
 800546e:	a382      	add	r3, pc, #520	; (adr r3, 8005678 <kinematicForward+0x228>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	f7fb f8c0 	bl	80005f8 <__aeabi_dmul>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4614      	mov	r4, r2
 800547e:	461d      	mov	r5, r3
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800548c:	f7fa fefe 	bl	800028c <__adddf3>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	ec43 2b17 	vmov	d7, r2, r3
 8005498:	eeb0 0a47 	vmov.f32	s0, s14
 800549c:	eef0 0a67 	vmov.f32	s1, s15
 80054a0:	f015 fcee 	bl	801ae80 <cos>
 80054a4:	ec51 0b10 	vmov	r0, r1, d0
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	4b78      	ldr	r3, [pc, #480]	; (8005690 <kinematicForward+0x240>)
 80054ae:	f7fb f8a3 	bl	80005f8 <__aeabi_dmul>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fa fee7 	bl	800028c <__adddf3>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4614      	mov	r4, r2
 80054c4:	461d      	mov	r5, r3
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80054d2:	f7fa fedb 	bl	800028c <__adddf3>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80054e4:	f7fa fed0 	bl	8000288 <__aeabi_dsub>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	ec43 2b17 	vmov	d7, r2, r3
 80054f0:	eeb0 0a47 	vmov.f32	s0, s14
 80054f4:	eef0 0a67 	vmov.f32	s1, s15
 80054f8:	f015 fcc2 	bl	801ae80 <cos>
 80054fc:	ec51 0b10 	vmov	r0, r1, d0
 8005500:	a35b      	add	r3, pc, #364	; (adr r3, 8005670 <kinematicForward+0x220>)
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f7fb f877 	bl	80005f8 <__aeabi_dmul>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
	x =   a1*cos(pnt->Theta1)
 800550e:	4620      	mov	r0, r4
 8005510:	4629      	mov	r1, r5
 8005512:	f7fa febb 	bl	800028c <__adddf3>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005524:	eeb0 0a47 	vmov.f32	s0, s14
 8005528:	eef0 0a67 	vmov.f32	s1, s15
 800552c:	f015 fd40 	bl	801afb0 <sin>
 8005530:	ec51 0b10 	vmov	r0, r1, d0
 8005534:	a350      	add	r3, pc, #320	; (adr r3, 8005678 <kinematicForward+0x228>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fb f85d 	bl	80005f8 <__aeabi_dmul>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4614      	mov	r4, r2
 8005544:	461d      	mov	r5, r3
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005552:	f7fa fe9b 	bl	800028c <__adddf3>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	ec43 2b17 	vmov	d7, r2, r3
 800555e:	eeb0 0a47 	vmov.f32	s0, s14
 8005562:	eef0 0a67 	vmov.f32	s1, s15
 8005566:	f015 fd23 	bl	801afb0 <sin>
 800556a:	ec51 0b10 	vmov	r0, r1, d0
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	4b47      	ldr	r3, [pc, #284]	; (8005690 <kinematicForward+0x240>)
 8005574:	f7fb f840 	bl	80005f8 <__aeabi_dmul>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4620      	mov	r0, r4
 800557e:	4629      	mov	r1, r5
 8005580:	f7fa fe84 	bl	800028c <__adddf3>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4614      	mov	r4, r2
 800558a:	461d      	mov	r5, r3
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8005598:	f7fa fe78 	bl	800028c <__adddf3>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80055aa:	f7fa fe6d 	bl	8000288 <__aeabi_dsub>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	ec43 2b17 	vmov	d7, r2, r3
 80055b6:	eeb0 0a47 	vmov.f32	s0, s14
 80055ba:	eef0 0a67 	vmov.f32	s1, s15
 80055be:	f015 fcf7 	bl	801afb0 <sin>
 80055c2:	ec51 0b10 	vmov	r0, r1, d0
 80055c6:	a32a      	add	r3, pc, #168	; (adr r3, 8005670 <kinematicForward+0x220>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f7fb f814 	bl	80005f8 <__aeabi_dmul>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
	y =   a1*sin(pnt->Theta1)
 80055d4:	4620      	mov	r0, r4
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7fa fe58 	bl	800028c <__adddf3>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80055ea:	a125      	add	r1, pc, #148	; (adr r1, 8005680 <kinematicForward+0x230>)
 80055ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055f0:	f7fa fe4a 	bl	8000288 <__aeabi_dsub>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4610      	mov	r0, r2
 80055fa:	4619      	mov	r1, r3
 80055fc:	a322      	add	r3, pc, #136	; (adr r3, 8005688 <kinematicForward+0x238>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fa fe41 	bl	8000288 <__aeabi_dsub>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800561a:	f7fa fe37 	bl	800028c <__adddf3>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4610      	mov	r0, r2
 8005624:	4619      	mov	r1, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800562c:	f7fa fe2c 	bl	8000288 <__aeabi_dsub>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pnt->x = x;
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800563e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pnt->y = y;
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005648:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pnt->z = z;
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005652:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pnt->roll = roll;
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800565c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return TRUE;
 8005660:	2301      	movs	r3, #1
}
 8005662:	4618      	mov	r0, r3
 8005664:	3728      	adds	r7, #40	; 0x28
 8005666:	46bd      	mov	sp, r7
 8005668:	bdb0      	pop	{r4, r5, r7, pc}
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w
 8005670:	80000000 	.word	0x80000000
 8005674:	40402e14 	.word	0x40402e14
 8005678:	00000000 	.word	0x00000000
 800567c:	4068a000 	.word	0x4068a000
 8005680:	00000000 	.word	0x00000000
 8005684:	406a6000 	.word	0x406a6000
 8005688:	e0000000 	.word	0xe0000000
 800568c:	40536b22 	.word	0x40536b22
 8005690:	40640000 	.word	0x40640000
 8005694:	00000000 	.word	0x00000000

08005698 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8005698:	b082      	sub	sp, #8
 800569a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800569e:	b0a0      	sub	sp, #128	; 0x80
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80056a8:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80056b2:	a1f0      	add	r1, pc, #960	; (adr r1, 8005a74 <kinematicInverse+0x3dc>)
 80056b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056b8:	f7fa fde6 	bl	8000288 <__aeabi_dsub>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80056d0:	eeb0 0a47 	vmov.f32	s0, s14
 80056d4:	eef0 0a67 	vmov.f32	s1, s15
 80056d8:	f015 fbd2 	bl	801ae80 <cos>
 80056dc:	ec51 0b10 	vmov	r0, r1, d0
 80056e0:	a3e6      	add	r3, pc, #920	; (adr r3, 8005a7c <kinematicInverse+0x3e4>)
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f7fa ff87 	bl	80005f8 <__aeabi_dmul>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4650      	mov	r0, sl
 80056f0:	4659      	mov	r1, fp
 80056f2:	f7fa fdc9 	bl	8000288 <__aeabi_dsub>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800570a:	eeb0 0a47 	vmov.f32	s0, s14
 800570e:	eef0 0a67 	vmov.f32	s1, s15
 8005712:	f015 fc4d 	bl	801afb0 <sin>
 8005716:	ec51 0b10 	vmov	r0, r1, d0
 800571a:	a3d8      	add	r3, pc, #864	; (adr r3, 8005a7c <kinematicInverse+0x3e4>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fa ff6a 	bl	80005f8 <__aeabi_dmul>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4650      	mov	r0, sl
 800572a:	4659      	mov	r1, fp
 800572c:	f7fa fdac 	bl	8000288 <__aeabi_dsub>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8005738:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800573c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005740:	f7fa ff5a 	bl	80005f8 <__aeabi_dmul>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4692      	mov	sl, r2
 800574a:	469b      	mov	fp, r3
 800574c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005750:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005754:	f7fa ff50 	bl	80005f8 <__aeabi_dmul>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4650      	mov	r0, sl
 800575e:	4659      	mov	r1, fp
 8005760:	f7fa fd94 	bl	800028c <__adddf3>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	a3c5      	add	r3, pc, #788	; (adr r3, 8005a84 <kinematicInverse+0x3ec>)
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f7fa fd89 	bl	8000288 <__aeabi_dsub>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4610      	mov	r0, r2
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	4bb9      	ldr	r3, [pc, #740]	; (8005a68 <kinematicInverse+0x3d0>)
 8005784:	f7fa fd80 	bl	8000288 <__aeabi_dsub>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	a3b1      	add	r3, pc, #708	; (adr r3, 8005a58 <kinematicInverse+0x3c0>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fb f859 	bl	800084c <__aeabi_ddiv>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 80057a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057aa:	f7fa ff25 	bl	80005f8 <__aeabi_dmul>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	49ad      	ldr	r1, [pc, #692]	; (8005a6c <kinematicInverse+0x3d4>)
 80057b8:	f7fa fd66 	bl	8000288 <__aeabi_dsub>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80057d0:	f7fb f984 	bl	8000adc <__aeabi_dcmplt>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <kinematicInverse+0x146>
		return FALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	e134      	b.n	8005a48 <kinematicInverse+0x3b0>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80057de:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80057e2:	f015 fc7d 	bl	801b0e0 <sqrt>
 80057e6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80057ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80057f6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80057fa:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80057fe:	f015 fc6d 	bl	801b0dc <atan2>
 8005802:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8005806:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800580a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800580e:	f015 fc65 	bl	801b0dc <atan2>
 8005812:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8005816:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800581a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800581e:	f7fa fd33 	bl	8000288 <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4614      	mov	r4, r2
 8005828:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800582c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005830:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005834:	f7fa fd28 	bl	8000288 <__aeabi_dsub>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4690      	mov	r8, r2
 800583e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005842:	4642      	mov	r2, r8
 8005844:	464b      	mov	r3, r9
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fb f951 	bl	8000af0 <__aeabi_dcmple>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8005854:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005858:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 800585c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005860:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005864:	e007      	b.n	8005876 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8005866:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800586a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800586e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005872:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	4b7d      	ldr	r3, [pc, #500]	; (8005a70 <kinematicInverse+0x3d8>)
 800587c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005880:	f7fa feba 	bl	80005f8 <__aeabi_dmul>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	a374      	add	r3, pc, #464	; (adr r3, 8005a60 <kinematicInverse+0x3c8>)
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f7fa fcfb 	bl	800028c <__adddf3>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4610      	mov	r0, r2
 800589c:	4619      	mov	r1, r3
 800589e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058a2:	f7fa fea9 	bl	80005f8 <__aeabi_dmul>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4614      	mov	r4, r2
 80058ac:	461d      	mov	r5, r3
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	4b6f      	ldr	r3, [pc, #444]	; (8005a70 <kinematicInverse+0x3d8>)
 80058b4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80058b8:	f7fa fe9e 	bl	80005f8 <__aeabi_dmul>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80058c8:	f7fa fe96 	bl	80005f8 <__aeabi_dmul>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4620      	mov	r0, r4
 80058d2:	4629      	mov	r1, r5
 80058d4:	f7fa fcd8 	bl	8000288 <__aeabi_dsub>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4614      	mov	r4, r2
 80058de:	461d      	mov	r5, r3
 80058e0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80058e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058e8:	f7fa fe86 	bl	80005f8 <__aeabi_dmul>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4690      	mov	r8, r2
 80058f2:	4699      	mov	r9, r3
 80058f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058f8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80058fc:	f7fa fe7c 	bl	80005f8 <__aeabi_dmul>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4640      	mov	r0, r8
 8005906:	4649      	mov	r1, r9
 8005908:	f7fa fcc0 	bl	800028c <__adddf3>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4620      	mov	r0, r4
 8005912:	4629      	mov	r1, r5
 8005914:	f7fa ff9a 	bl	800084c <__aeabi_ddiv>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	4b52      	ldr	r3, [pc, #328]	; (8005a70 <kinematicInverse+0x3d8>)
 8005926:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800592a:	f7fa fe65 	bl	80005f8 <__aeabi_dmul>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	a34a      	add	r3, pc, #296	; (adr r3, 8005a60 <kinematicInverse+0x3c8>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa fca6 	bl	800028c <__adddf3>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800594c:	f7fa fe54 	bl	80005f8 <__aeabi_dmul>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4614      	mov	r4, r2
 8005956:	461d      	mov	r5, r3
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	4b44      	ldr	r3, [pc, #272]	; (8005a70 <kinematicInverse+0x3d8>)
 800595e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005962:	f7fa fe49 	bl	80005f8 <__aeabi_dmul>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005972:	f7fa fe41 	bl	80005f8 <__aeabi_dmul>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
 800597e:	f7fa fc85 	bl	800028c <__adddf3>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4614      	mov	r4, r2
 8005988:	461d      	mov	r5, r3
 800598a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800598e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005992:	f7fa fe31 	bl	80005f8 <__aeabi_dmul>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4690      	mov	r8, r2
 800599c:	4699      	mov	r9, r3
 800599e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059a6:	f7fa fe27 	bl	80005f8 <__aeabi_dmul>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4640      	mov	r0, r8
 80059b0:	4649      	mov	r1, r9
 80059b2:	f7fa fc6b 	bl	800028c <__adddf3>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fa ff45 	bl	800084c <__aeabi_ddiv>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	theta1 = atan2(s1,c1);
 80059ca:	ed97 1b06 	vldr	d1, [r7, #24]
 80059ce:	ed97 0b08 	vldr	d0, [r7, #32]
 80059d2:	f015 fb83 	bl	801b0dc <atan2>
 80059d6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80059da:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80059de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059e2:	f7fa fc53 	bl	800028c <__adddf3>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80059f4:	f7fa fc48 	bl	8000288 <__aeabi_dsub>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8005a00:	ed97 3b02 	vldr	d3, [r7, #8]
 8005a04:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8005a08:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8005a0c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005a10:	f004 ff92 	bl	800a938 <scaraCheckWorkSpace4>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <kinematicInverse+0x386>
		return FALSE; // Over workspace !!!
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e014      	b.n	8005a48 <kinematicInverse+0x3b0>
	}
	pnt->Theta1 = theta1;
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a24:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pnt->Theta2 = theta2;
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005a2e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	pnt->D3		= d3;
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005a38:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pnt->Theta4 = theta4;
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a42:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return TRUE; // All is well
 8005a46:	2301      	movs	r3, #1
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3780      	adds	r7, #128	; 0x80
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a52:	b002      	add	sp, #8
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	00000000 	.word	0x00000000
 8005a5c:	40eec800 	.word	0x40eec800
 8005a60:	00000000 	.word	0x00000000
 8005a64:	4068a000 	.word	0x4068a000
 8005a68:	40d90000 	.word	0x40d90000
 8005a6c:	3ff00000 	.word	0x3ff00000
 8005a70:	40640000 	.word	0x40640000
 8005a74:	80000000 	.word	0x80000000
 8005a78:	4060aa6e 	.word	0x4060aa6e
 8005a7c:	80000000 	.word	0x80000000
 8005a80:	40402e14 	.word	0x40402e14
 8005a84:	00000000 	.word	0x00000000
 8005a88:	40e2f320 	.word	0x40e2f320

08005a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a90:	f006 f872 	bl	800bb78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a94:	f000 f812 	bl	8005abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a98:	f7ff fc22 	bl	80052e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005a9c:	f7fc fdae 	bl	80025fc <MX_DMA_Init>
  MX_UART4_Init();
 8005aa0:	f005 ff6c 	bl	800b97c <MX_UART4_Init>
  MX_FSMC_Init();
 8005aa4:	f7fe fe72 	bl	800478c <MX_FSMC_Init>
  MX_TIM7_Init();
 8005aa8:	f005 fef6 	bl	800b898 <MX_TIM7_Init>
  MX_TIM2_Init();
 8005aac:	f005 fea6 	bl	800b7fc <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8005ab0:	f7fc fdde 	bl	8002670 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8005ab4:	f00d f90e 	bl	8012cd4 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8005ab8:	e7fe      	b.n	8005ab8 <main+0x2c>
	...

08005abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b094      	sub	sp, #80	; 0x50
 8005ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ac2:	f107 0320 	add.w	r3, r7, #32
 8005ac6:	2230      	movs	r2, #48	; 0x30
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f010 fd20 	bl	8016510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	4b28      	ldr	r3, [pc, #160]	; (8005b88 <SystemClock_Config+0xcc>)
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	4a27      	ldr	r2, [pc, #156]	; (8005b88 <SystemClock_Config+0xcc>)
 8005aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aee:	6413      	str	r3, [r2, #64]	; 0x40
 8005af0:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <SystemClock_Config+0xcc>)
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005afc:	2300      	movs	r3, #0
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <SystemClock_Config+0xd0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a21      	ldr	r2, [pc, #132]	; (8005b8c <SystemClock_Config+0xd0>)
 8005b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	4b1f      	ldr	r3, [pc, #124]	; (8005b8c <SystemClock_Config+0xd0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b22:	2302      	movs	r3, #2
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005b30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005b34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b36:	2302      	movs	r3, #2
 8005b38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005b3a:	2307      	movs	r3, #7
 8005b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b3e:	f107 0320 	add.w	r3, r7, #32
 8005b42:	4618      	mov	r0, r3
 8005b44:	f008 f890 	bl	800dc68 <HAL_RCC_OscConfig>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005b4e:	f000 f831 	bl	8005bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b52:	230f      	movs	r3, #15
 8005b54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b56:	2302      	movs	r3, #2
 8005b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005b5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005b62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005b6a:	f107 030c 	add.w	r3, r7, #12
 8005b6e:	2105      	movs	r1, #5
 8005b70:	4618      	mov	r0, r3
 8005b72:	f008 fae9 	bl	800e148 <HAL_RCC_ClockConfig>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005b7c:	f000 f81a 	bl	8005bb4 <Error_Handler>
  }
}
 8005b80:	bf00      	nop
 8005b82:	3750      	adds	r7, #80	; 0x50
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	40007000 	.word	0x40007000

08005b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a04      	ldr	r2, [pc, #16]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005ba2:	f006 f80b 	bl	800bbbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40001000 	.word	0x40001000

08005bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005bb8:	bf00      	nop
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <ringBuff_PushChar+0x1e>
		return FALSE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e02e      	b.n	8005c3e <ringBuff_PushChar+0x7c>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	78f9      	ldrb	r1, [r7, #3]
 8005bec:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	425a      	negs	r2, r3
 8005bfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bfe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005c02:	bf58      	it	pl
 8005c04:	4253      	negpl	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005c0c:	6013      	str	r3, [r2, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d105      	bne.n	8005c30 <ringBuff_PushChar+0x6e>
				ringbuff->isFull_Flag = TRUE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isEmpty_Flag = FALSE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c36:	3309      	adds	r3, #9
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005c3c:	2301      	movs	r3, #1
	}
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c5a:	3309      	adds	r3, #9
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <ringBuff_PopChar+0x1c>
		return FALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e032      	b.n	8005ccc <ringBuff_PopChar+0x82>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	5cd2      	ldrb	r2, [r2, r3]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c7e:	3304      	adds	r3, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	4259      	negs	r1, r3
 8005c86:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005c8a:	f3c1 030c 	ubfx	r3, r1, #0, #13
 8005c8e:	bf58      	it	pl
 8005c90:	425a      	negpl	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c98:	3304      	adds	r3, #4
 8005c9a:	601a      	str	r2, [r3, #0]
			if (ringbuff->head == ringbuff->tail) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005caa:	3304      	adds	r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d105      	bne.n	8005cbe <ringBuff_PopChar+0x74>
				ringbuff->isEmpty_Flag = TRUE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cb8:	3309      	adds	r3, #9
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
			}
			ringbuff->isFull_Flag = FALSE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
			return TRUE;
 8005cca:	2301      	movs	r3, #1
	}
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	82fb      	strh	r3, [r7, #22]
 8005ce8:	e011      	b.n	8005d0e <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8005cea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff ff63 	bl	8005bc2 <ringBuff_PushChar>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8005d02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3301      	adds	r3, #1
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	82fb      	strh	r3, [r7, #22]
 8005d0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	dce8      	bgt.n	8005cea <ringBuff_PushArray+0x12>
 8005d18:	e000      	b.n	8005d1c <ringBuff_PushArray+0x44>
			break;
 8005d1a:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8005d1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e00c      	b.n	8005d54 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	4413      	add	r3, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff ff81 	bl	8005c4a <ringBuff_PopChar>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	3301      	adds	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	dbee      	blt.n	8005d3a <ringBuff_PopArray+0x12>
 8005d5c:	e000      	b.n	8005d60 <ringBuff_PopArray+0x38>
			break;
 8005d5e:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8005d60:	697b      	ldr	r3, [r7, #20]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, const char* cmp_char) {
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b088      	sub	sp, #32
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
	int32_t index = ringbuff->tail;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	61fb      	str	r3, [r7, #28]
	int32_t distance = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
	int32_t sync_state = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
	int32_t head_ptr = ringbuff->head;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
	int32_t number_of_state = strlen(cmp_char);
 8005d92:	6838      	ldr	r0, [r7, #0]
 8005d94:	f7fa fa1c 	bl	80001d0 <strlen>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	60bb      	str	r3, [r7, #8]
	if (ringbuff->isFull_Flag) {
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005da2:	3308      	adds	r3, #8
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d066      	beq.n	8005e78 <ringBuff_DistanceOf+0x10e>
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	e030      	b.n	8005e12 <ringBuff_DistanceOf+0xa8>
	            if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	440b      	add	r3, r1
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d103      	bne.n	8005dcc <ringBuff_DistanceOf+0x62>
	                sync_state++;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	e00c      	b.n	8005de6 <ringBuff_DistanceOf+0x7c>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	781a      	ldrb	r2, [r3, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d102      	bne.n	8005de2 <ringBuff_DistanceOf+0x78>
	                sync_state = 1;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e001      	b.n	8005de6 <ringBuff_DistanceOf+0x7c>
	            }else{
	                sync_state = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d101      	bne.n	8005df2 <ringBuff_DistanceOf+0x88>
	                return distance;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	e048      	b.n	8005e84 <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	3301      	adds	r3, #1
 8005df6:	61bb      	str	r3, [r7, #24]
	    for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3301      	adds	r3, #1
 8005e02:	425a      	negs	r2, r3
 8005e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e08:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005e0c:	bf58      	it	pl
 8005e0e:	4253      	negpl	r3, r2
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e18:	dbca      	blt.n	8005db0 <ringBuff_DistanceOf+0x46>
 8005e1a:	e031      	b.n	8005e80 <ringBuff_DistanceOf+0x116>
	        }
	} else {
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
	        if(ringbuff->Array[index] == cmp_char[sync_state]){
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	781a      	ldrb	r2, [r3, #0]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	440b      	add	r3, r1
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d103      	bne.n	8005e38 <ringBuff_DistanceOf+0xce>
	                //LOG_REPORT("dis1", ringbuff->.tail);
	                sync_state++;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	3301      	adds	r3, #1
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e00c      	b.n	8005e52 <ringBuff_DistanceOf+0xe8>
	            }else if(ringbuff->Array[index] == cmp_char[0]){
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d102      	bne.n	8005e4e <ringBuff_DistanceOf+0xe4>
	                sync_state = 1;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e001      	b.n	8005e52 <ringBuff_DistanceOf+0xe8>
	            }else{
	                sync_state = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
	            }
	            if(sync_state == number_of_state){
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d101      	bne.n	8005e5e <ringBuff_DistanceOf+0xf4>
	                //LOG_REPORT("dis", distance);
	                return distance;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	e012      	b.n	8005e84 <ringBuff_DistanceOf+0x11a>
	            }
	//				if ( cmp_char == ringbuff->.Array[index]) {
	//					return distance;
	//				}
	            distance++;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61bb      	str	r3, [r7, #24]
	    for ( ; (index != head_ptr); index = (index + 1) % RINGBUFFER_SIZE) {
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	3301      	adds	r3, #1
 8005e68:	425a      	negs	r2, r3
 8005e6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e6e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005e72:	bf58      	it	pl
 8005e74:	4253      	negpl	r3, r2
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d1cd      	bne.n	8005e1c <ringBuff_DistanceOf+0xb2>
	        }
	    //LOG_REPORT("hai", 2);
	}

	return -1;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 8005e90:	f000 fdfe 	bl	8006a90 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <lowlayer_scanReset+0x4c>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <lowlayer_scanReset+0x4c>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8005ea0:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <lowlayer_scanReset+0x4c>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <lowlayer_scanReset+0x4c>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <lowlayer_scanReset+0x50>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <lowlayer_scanReset+0x50>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8005eb8:	4b08      	ldr	r3, [pc, #32]	; (8005edc <lowlayer_scanReset+0x50>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8005ebe:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <lowlayer_scanReset+0x54>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8005ec4:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <lowlayer_scanReset+0x58>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2108      	movs	r1, #8
 8005ece:	4806      	ldr	r0, [pc, #24]	; (8005ee8 <lowlayer_scanReset+0x5c>)
 8005ed0:	f006 fcd6 	bl	800c880 <HAL_GPIO_WritePin>
}
 8005ed4:	bf00      	nop
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	2000fec8 	.word	0x2000fec8
 8005edc:	2000fedc 	.word	0x2000fedc
 8005ee0:	2000fed8 	.word	0x2000fed8
 8005ee4:	2000fef8 	.word	0x2000fef8
 8005ee8:	40020c00 	.word	0x40020c00
 8005eec:	00000000 	.word	0x00000000

08005ef0 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8005efa:	f000 fe87 	bl	8006c0c <lowlayer_updateLimit>
	if (state_scan < 4) {
 8005efe:	4b96      	ldr	r3, [pc, #600]	; (8006158 <lowlayer_scanFlow+0x268>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d837      	bhi.n	8005f76 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8005f06:	4b94      	ldr	r3, [pc, #592]	; (8006158 <lowlayer_scanFlow+0x268>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f1c3 0303 	rsb	r3, r3, #3
 8005f0e:	4a93      	ldr	r2, [pc, #588]	; (800615c <lowlayer_scanFlow+0x26c>)
 8005f10:	5cd3      	ldrb	r3, [r2, r3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d121      	bne.n	8005f5a <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8005f16:	4b90      	ldr	r3, [pc, #576]	; (8006158 <lowlayer_scanFlow+0x268>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	f1c3 0203 	rsb	r2, r3, #3
 8005f1e:	4b8e      	ldr	r3, [pc, #568]	; (8006158 <lowlayer_scanFlow+0x268>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f1c3 0303 	rsb	r3, r3, #3
 8005f26:	498e      	ldr	r1, [pc, #568]	; (8006160 <lowlayer_scanFlow+0x270>)
 8005f28:	568a      	ldrsb	r2, [r1, r2]
 8005f2a:	f107 0108 	add.w	r1, r7, #8
 8005f2e:	440b      	add	r3, r1
 8005f30:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8005f34:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	425b      	negs	r3, r3
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	b258      	sxtb	r0, r3
 8005f40:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8005f44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	425b      	negs	r3, r3
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	b25a      	sxtb	r2, r3
 8005f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f54:	f000 fcd8 	bl	8006908 <lowlayer_writePulse>
 8005f58:	e00b      	b.n	8005f72 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8005f5a:	4b7f      	ldr	r3, [pc, #508]	; (8006158 <lowlayer_scanFlow+0x268>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	4b7d      	ldr	r3, [pc, #500]	; (8006158 <lowlayer_scanFlow+0x268>)
 8005f64:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8005f66:	2300      	movs	r3, #0
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f000 fccb 	bl	8006908 <lowlayer_writePulse>
		}

		return FALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e0d2      	b.n	800611c <lowlayer_scanFlow+0x22c>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8005f76:	2201      	movs	r2, #1
 8005f78:	2108      	movs	r1, #8
 8005f7a:	487a      	ldr	r0, [pc, #488]	; (8006164 <lowlayer_scanFlow+0x274>)
 8005f7c:	f006 fc80 	bl	800c880 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8005f80:	f000 fe28 	bl	8006bd4 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8005f84:	2300      	movs	r3, #0
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f000 fcbc 	bl	8006908 <lowlayer_writePulse>
		scan_flag = 1;
 8005f90:	4b75      	ldr	r3, [pc, #468]	; (8006168 <lowlayer_scanFlow+0x278>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8005f96:	4b75      	ldr	r3, [pc, #468]	; (800616c <lowlayer_scanFlow+0x27c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a75      	ldr	r2, [pc, #468]	; (8006170 <lowlayer_scanFlow+0x280>)
 8005f9c:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8005f9e:	4b73      	ldr	r3, [pc, #460]	; (800616c <lowlayer_scanFlow+0x27c>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4a73      	ldr	r2, [pc, #460]	; (8006170 <lowlayer_scanFlow+0x280>)
 8005fa4:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8005fa6:	4b71      	ldr	r3, [pc, #452]	; (800616c <lowlayer_scanFlow+0x27c>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	4a71      	ldr	r2, [pc, #452]	; (8006170 <lowlayer_scanFlow+0x280>)
 8005fac:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8005fae:	4b71      	ldr	r3, [pc, #452]	; (8006174 <lowlayer_scanFlow+0x284>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	4a71      	ldr	r2, [pc, #452]	; (8006178 <lowlayer_scanFlow+0x288>)
 8005fb4:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8005fb6:	4b6e      	ldr	r3, [pc, #440]	; (8006170 <lowlayer_scanFlow+0x280>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	486f      	ldr	r0, [pc, #444]	; (800617c <lowlayer_scanFlow+0x28c>)
 8005fc0:	f7fc fa66 	bl	8002490 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8005fc4:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <lowlayer_scanFlow+0x280>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4619      	mov	r1, r3
 8005fcc:	486c      	ldr	r0, [pc, #432]	; (8006180 <lowlayer_scanFlow+0x290>)
 8005fce:	f7fc fa5f 	bl	8002490 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8005fd2:	4b67      	ldr	r3, [pc, #412]	; (8006170 <lowlayer_scanFlow+0x280>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	4619      	mov	r1, r3
 8005fda:	486a      	ldr	r0, [pc, #424]	; (8006184 <lowlayer_scanFlow+0x294>)
 8005fdc:	f7fc fa58 	bl	8002490 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8005fe0:	4b65      	ldr	r3, [pc, #404]	; (8006178 <lowlayer_scanFlow+0x288>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4867      	ldr	r0, [pc, #412]	; (8006188 <lowlayer_scanFlow+0x298>)
 8005fea:	f7fc fa51 	bl	8002490 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8005fee:	4b60      	ldr	r3, [pc, #384]	; (8006170 <lowlayer_scanFlow+0x280>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ffa:	ee17 0a90 	vmov	r0, s15
 8005ffe:	f7fa faa3 	bl	8000548 <__aeabi_f2d>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	f7fa f941 	bl	800028c <__adddf3>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4610      	mov	r0, r2
 8006010:	4619      	mov	r1, r3
 8006012:	a345      	add	r3, pc, #276	; (adr r3, 8006128 <lowlayer_scanFlow+0x238>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa faee 	bl	80005f8 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4610      	mov	r0, r2
 8006022:	4619      	mov	r1, r3
 8006024:	a342      	add	r3, pc, #264	; (adr r3, 8006130 <lowlayer_scanFlow+0x240>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f7fa fc0f 	bl	800084c <__aeabi_ddiv>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	a141      	add	r1, pc, #260	; (adr r1, 8006138 <lowlayer_scanFlow+0x248>)
 8006034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006038:	f7fa f926 	bl	8000288 <__aeabi_dsub>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8006040:	4952      	ldr	r1, [pc, #328]	; (800618c <lowlayer_scanFlow+0x29c>)
 8006042:	e9c1 2300 	strd	r2, r3, [r1]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8006046:	4b4a      	ldr	r3, [pc, #296]	; (8006170 <lowlayer_scanFlow+0x280>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006052:	ee17 0a90 	vmov	r0, s15
 8006056:	f7fa fa77 	bl	8000548 <__aeabi_f2d>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	f7fa f915 	bl	800028c <__adddf3>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4610      	mov	r0, r2
 8006068:	4619      	mov	r1, r3
 800606a:	a32f      	add	r3, pc, #188	; (adr r3, 8006128 <lowlayer_scanFlow+0x238>)
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	4b43      	ldr	r3, [pc, #268]	; (8006190 <lowlayer_scanFlow+0x2a0>)
 8006082:	f7fa fbe3 	bl	800084c <__aeabi_ddiv>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	a12d      	add	r1, pc, #180	; (adr r1, 8006140 <lowlayer_scanFlow+0x250>)
 800608c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006090:	f7fa f8fa 	bl	8000288 <__aeabi_dsub>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8006098:	493c      	ldr	r1, [pc, #240]	; (800618c <lowlayer_scanFlow+0x29c>)
 800609a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 800609e:	4b34      	ldr	r3, [pc, #208]	; (8006170 <lowlayer_scanFlow+0x280>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060aa:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8006194 <lowlayer_scanFlow+0x2a4>
 80060ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060b2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006198 <lowlayer_scanFlow+0x2a8>
 80060b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060ba:	ee17 0a90 	vmov	r0, s15
 80060be:	f7fa fa43 	bl	8000548 <__aeabi_f2d>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 80060c6:	4931      	ldr	r1, [pc, #196]	; (800618c <lowlayer_scanFlow+0x29c>)
 80060c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 80060cc:	4b2a      	ldr	r3, [pc, #168]	; (8006178 <lowlayer_scanFlow+0x288>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fa fa27 	bl	8000524 <__aeabi_i2d>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	f7fa f8d7 	bl	800028c <__adddf3>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	a310      	add	r3, pc, #64	; (adr r3, 8006128 <lowlayer_scanFlow+0x238>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa fa84 	bl	80005f8 <__aeabi_dmul>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4610      	mov	r0, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	a313      	add	r3, pc, #76	; (adr r3, 8006148 <lowlayer_scanFlow+0x258>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa fba5 	bl	800084c <__aeabi_ddiv>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	a112      	add	r1, pc, #72	; (adr r1, 8006150 <lowlayer_scanFlow+0x260>)
 8006108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800610c:	f7fa f8bc 	bl	8000288 <__aeabi_dsub>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8006114:	491d      	ldr	r1, [pc, #116]	; (800618c <lowlayer_scanFlow+0x29c>)
 8006116:	e9c1 2306 	strd	r2, r3, [r1, #24]

		return TRUE;
 800611a:	2301      	movs	r3, #1
	}
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	f3af 8000 	nop.w
 8006128:	60000000 	.word	0x60000000
 800612c:	400921fb 	.word	0x400921fb
 8006130:	00000000 	.word	0x00000000
 8006134:	40f38800 	.word	0x40f38800
 8006138:	40000000 	.word	0x40000000
 800613c:	bff9f17a 	.word	0xbff9f17a
 8006140:	80000000 	.word	0x80000000
 8006144:	40039716 	.word	0x40039716
 8006148:	a0000000 	.word	0xa0000000
 800614c:	40d3bca1 	.word	0x40d3bca1
 8006150:	a0000000 	.word	0xa0000000
 8006154:	4008330d 	.word	0x4008330d
 8006158:	2000fef8 	.word	0x2000fef8
 800615c:	2000fee8 	.word	0x2000fee8
 8006160:	0801ca3c 	.word	0x0801ca3c
 8006164:	40020c00 	.word	0x40020c00
 8006168:	2000fed8 	.word	0x2000fed8
 800616c:	2000feec 	.word	0x2000feec
 8006170:	2000ff20 	.word	0x2000ff20
 8006174:	2000fec8 	.word	0x2000fec8
 8006178:	2000fefc 	.word	0x2000fefc
 800617c:	0801c964 	.word	0x0801c964
 8006180:	0801c978 	.word	0x0801c978
 8006184:	0801c98c 	.word	0x0801c98c
 8006188:	0801c9a0 	.word	0x0801c9a0
 800618c:	2000ff00 	.word	0x2000ff00
 8006190:	40ff4000 	.word	0x40ff4000
 8006194:	4426aaab 	.word	0x4426aaab
 8006198:	400f1aa0 	.word	0x400f1aa0
 800619c:	00000000 	.word	0x00000000

080061a0 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 80061a8:	2300      	movs	r3, #0
 80061aa:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f94d 	bl	8006450 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80061bc:	a330      	add	r3, pc, #192	; (adr r3, 8006280 <lowlayer_goToSoftLimit+0xe0>)
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f7fa fc8b 	bl	8000adc <__aeabi_dcmplt>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 80061cc:	2303      	movs	r3, #3
 80061ce:	723b      	strb	r3, [r7, #8]
		check++;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	3301      	adds	r3, #1
 80061d4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80061dc:	a32a      	add	r3, pc, #168	; (adr r3, 8006288 <lowlayer_goToSoftLimit+0xe8>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f7fa fc99 	bl	8000b18 <__aeabi_dcmpgt>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 80061ec:	2305      	movs	r3, #5
 80061ee:	727b      	strb	r3, [r7, #9]
		check++;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	3301      	adds	r3, #1
 80061f4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	f7fa fc6a 	bl	8000adc <__aeabi_dcmplt>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 800620e:	2305      	movs	r3, #5
 8006210:	72bb      	strb	r3, [r7, #10]
		check++;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	3301      	adds	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800621e:	a31c      	add	r3, pc, #112	; (adr r3, 8006290 <lowlayer_goToSoftLimit+0xf0>)
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f7fa fc78 	bl	8000b18 <__aeabi_dcmpgt>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 800622e:	230a      	movs	r3, #10
 8006230:	72fb      	strb	r3, [r7, #11]
		check++;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	3301      	adds	r3, #1
 8006236:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d013      	beq.n	8006266 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 800623e:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8006242:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	425b      	negs	r3, r3
 800624a:	b2db      	uxtb	r3, r3
 800624c:	b259      	sxtb	r1, r3
 800624e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8006252:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	425b      	negs	r3, r3
 800625a:	b2db      	uxtb	r3, r3
 800625c:	b25b      	sxtb	r3, r3
 800625e:	f000 fb53 	bl	8006908 <lowlayer_writePulse>
		return FALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	e006      	b.n	8006274 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8006266:	2300      	movs	r3, #0
 8006268:	2200      	movs	r2, #0
 800626a:	2100      	movs	r1, #0
 800626c:	2000      	movs	r0, #0
 800626e:	f000 fb4b 	bl	8006908 <lowlayer_writePulse>
		return TRUE;
 8006272:	2301      	movs	r3, #1
	}
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	f3af 8000 	nop.w
 8006280:	daaaaaab 	.word	0xdaaaaaab
 8006284:	bff7bc89 	.word	0xbff7bc89
 8006288:	88000000 	.word	0x88000000
 800628c:	4002d97c 	.word	0x4002d97c
 8006290:	daaaaaab 	.word	0xdaaaaaab
 8006294:	4007bc89 	.word	0x4007bc89

08006298 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 80062a0:	f000 fc7c 	bl	8006b9c <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 80062a4:	4b62      	ldr	r3, [pc, #392]	; (8006430 <lowlayer_readTruePosition+0x198>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b62      	ldr	r3, [pc, #392]	; (8006434 <lowlayer_readTruePosition+0x19c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b6:	ee17 0a90 	vmov	r0, s15
 80062ba:	f7fa f945 	bl	8000548 <__aeabi_f2d>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	f7f9 ffe3 	bl	800028c <__adddf3>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4610      	mov	r0, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	a34c      	add	r3, pc, #304	; (adr r3, 8006400 <lowlayer_readTruePosition+0x168>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa f990 	bl	80005f8 <__aeabi_dmul>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4610      	mov	r0, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	a349      	add	r3, pc, #292	; (adr r3, 8006408 <lowlayer_readTruePosition+0x170>)
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f7fa fab1 	bl	800084c <__aeabi_ddiv>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	a347      	add	r3, pc, #284	; (adr r3, 8006410 <lowlayer_readTruePosition+0x178>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f7f9 ffc6 	bl	8000288 <__aeabi_dsub>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
	true->Theta1 = HARD_LIM0_NEG
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8006306:	4b4a      	ldr	r3, [pc, #296]	; (8006430 <lowlayer_readTruePosition+0x198>)
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	4b4a      	ldr	r3, [pc, #296]	; (8006434 <lowlayer_readTruePosition+0x19c>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006318:	ee17 0a90 	vmov	r0, s15
 800631c:	f7fa f914 	bl	8000548 <__aeabi_f2d>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	f7f9 ffb2 	bl	800028c <__adddf3>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4610      	mov	r0, r2
 800632e:	4619      	mov	r1, r3
 8006330:	a333      	add	r3, pc, #204	; (adr r3, 8006400 <lowlayer_readTruePosition+0x168>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f7fa f95f 	bl	80005f8 <__aeabi_dmul>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <lowlayer_readTruePosition+0x1a0>)
 8006348:	f7fa fa80 	bl	800084c <__aeabi_ddiv>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4610      	mov	r0, r2
 8006352:	4619      	mov	r1, r3
 8006354:	a330      	add	r3, pc, #192	; (adr r3, 8006418 <lowlayer_readTruePosition+0x180>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f7f9 ff97 	bl	800028c <__adddf3>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
	true->Theta2 = HARD_LIM1_POS
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8006368:	4b31      	ldr	r3, [pc, #196]	; (8006430 <lowlayer_readTruePosition+0x198>)
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	4b31      	ldr	r3, [pc, #196]	; (8006434 <lowlayer_readTruePosition+0x19c>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637a:	eeb1 7a67 	vneg.f32	s14, s15
 800637e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800643c <lowlayer_readTruePosition+0x1a4>
 8006382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006386:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006440 <lowlayer_readTruePosition+0x1a8>
 800638a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800638e:	ee17 0a90 	vmov	r0, s15
 8006392:	f7fa f8d9 	bl	8000548 <__aeabi_f2d>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
	true->D3	 = HARD_LIM2_NEG
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 80063a0:	4b28      	ldr	r3, [pc, #160]	; (8006444 <lowlayer_readTruePosition+0x1ac>)
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	4b28      	ldr	r3, [pc, #160]	; (8006448 <lowlayer_readTruePosition+0x1b0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa f8ba 	bl	8000524 <__aeabi_i2d>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	f7f9 ff6a 	bl	800028c <__adddf3>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4610      	mov	r0, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	a30f      	add	r3, pc, #60	; (adr r3, 8006400 <lowlayer_readTruePosition+0x168>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f7fa f917 	bl	80005f8 <__aeabi_dmul>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4610      	mov	r0, r2
 80063d0:	4619      	mov	r1, r3
 80063d2:	a313      	add	r3, pc, #76	; (adr r3, 8006420 <lowlayer_readTruePosition+0x188>)
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f7fa fa38 	bl	800084c <__aeabi_ddiv>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4610      	mov	r0, r2
 80063e2:	4619      	mov	r1, r3
 80063e4:	a310      	add	r3, pc, #64	; (adr r3, 8006428 <lowlayer_readTruePosition+0x190>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 ff4f 	bl	800028c <__adddf3>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
	true->Theta4 = HARD_LIM3_POS
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	60000000 	.word	0x60000000
 8006404:	400921fb 	.word	0x400921fb
 8006408:	00000000 	.word	0x00000000
 800640c:	40f38800 	.word	0x40f38800
 8006410:	40000000 	.word	0x40000000
 8006414:	3ff9f17a 	.word	0x3ff9f17a
 8006418:	80000000 	.word	0x80000000
 800641c:	40039716 	.word	0x40039716
 8006420:	a0000000 	.word	0xa0000000
 8006424:	40d3bca1 	.word	0x40d3bca1
 8006428:	a0000000 	.word	0xa0000000
 800642c:	4008330d 	.word	0x4008330d
 8006430:	2000fedc 	.word	0x2000fedc
 8006434:	2000ff20 	.word	0x2000ff20
 8006438:	40ff4000 	.word	0x40ff4000
 800643c:	4426aaab 	.word	0x4426aaab
 8006440:	400f1aa0 	.word	0x400f1aa0
 8006444:	2000fec8 	.word	0x2000fec8
 8006448:	2000fefc 	.word	0x2000fefc
 800644c:	00000000 	.word	0x00000000

08006450 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8006450:	b5b0      	push	{r4, r5, r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8006458:	4b53      	ldr	r3, [pc, #332]	; (80065a8 <lowlayer_readSetPosition+0x158>)
 800645a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800645e:	4b53      	ldr	r3, [pc, #332]	; (80065ac <lowlayer_readSetPosition+0x15c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f7fa f85e 	bl	8000524 <__aeabi_i2d>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	f7f9 ff0e 	bl	800028c <__adddf3>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	a345      	add	r3, pc, #276	; (adr r3, 8006590 <lowlayer_readSetPosition+0x140>)
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	f7fa f8bb 	bl	80005f8 <__aeabi_dmul>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4610      	mov	r0, r2
 8006488:	4619      	mov	r1, r3
 800648a:	a343      	add	r3, pc, #268	; (adr r3, 8006598 <lowlayer_readSetPosition+0x148>)
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f7fa f9dc 	bl	800084c <__aeabi_ddiv>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4620      	mov	r0, r4
 800649a:	4629      	mov	r1, r5
 800649c:	f7f9 fef6 	bl	800028c <__adddf3>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 80064aa:	4b3f      	ldr	r3, [pc, #252]	; (80065a8 <lowlayer_readSetPosition+0x158>)
 80064ac:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80064b0:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <lowlayer_readSetPosition+0x15c>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fa f835 	bl	8000524 <__aeabi_i2d>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	f7f9 fee5 	bl	800028c <__adddf3>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	a331      	add	r3, pc, #196	; (adr r3, 8006590 <lowlayer_readSetPosition+0x140>)
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f7fa f892 	bl	80005f8 <__aeabi_dmul>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4610      	mov	r0, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <lowlayer_readSetPosition+0x160>)
 80064e2:	f7fa f9b3 	bl	800084c <__aeabi_ddiv>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4620      	mov	r0, r4
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7f9 fecd 	bl	800028c <__adddf3>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80064fc:	4b2a      	ldr	r3, [pc, #168]	; (80065a8 <lowlayer_readSetPosition+0x158>)
 80064fe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006502:	4b2a      	ldr	r3, [pc, #168]	; (80065ac <lowlayer_readSetPosition+0x15c>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800650e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80065b4 <lowlayer_readSetPosition+0x164>
 8006512:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006516:	ee16 0a90 	vmov	r0, s13
 800651a:	f7fa f815 	bl	8000548 <__aeabi_f2d>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4620      	mov	r0, r4
 8006524:	4629      	mov	r1, r5
 8006526:	f7f9 feb1 	bl	800028c <__adddf3>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8006534:	4b1c      	ldr	r3, [pc, #112]	; (80065a8 <lowlayer_readSetPosition+0x158>)
 8006536:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800653a:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <lowlayer_readSetPosition+0x15c>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	4618      	mov	r0, r3
 8006540:	f7f9 fff0 	bl	8000524 <__aeabi_i2d>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	f7f9 fea0 	bl	800028c <__adddf3>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4610      	mov	r0, r2
 8006552:	4619      	mov	r1, r3
 8006554:	a30e      	add	r3, pc, #56	; (adr r3, 8006590 <lowlayer_readSetPosition+0x140>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7fa f84d 	bl	80005f8 <__aeabi_dmul>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	a30e      	add	r3, pc, #56	; (adr r3, 80065a0 <lowlayer_readSetPosition+0x150>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f7fa f96e 	bl	800084c <__aeabi_ddiv>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	f7f9 fe88 	bl	800028c <__adddf3>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bdb0      	pop	{r4, r5, r7, pc}
 800658e:	bf00      	nop
 8006590:	60000000 	.word	0x60000000
 8006594:	400921fb 	.word	0x400921fb
 8006598:	00000000 	.word	0x00000000
 800659c:	40d38800 	.word	0x40d38800
 80065a0:	a0000000 	.word	0xa0000000
 80065a4:	40d3bca1 	.word	0x40d3bca1
 80065a8:	2000ff00 	.word	0x2000ff00
 80065ac:	2000fec8 	.word	0x2000fec8
 80065b0:	40df4000 	.word	0x40df4000
 80065b4:	42c80000 	.word	0x42c80000

080065b8 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 80065b8:	b084      	sub	sp, #16
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b092      	sub	sp, #72	; 0x48
 80065be:	af00      	add	r7, sp, #0
 80065c0:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80065c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80065c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80065cc:	a3c6      	add	r3, pc, #792	; (adr r3, 80068e8 <lowlayer_computeAndWritePulse+0x330>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7f9 fe5b 	bl	800028c <__adddf3>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4610      	mov	r0, r2
 80065dc:	4619      	mov	r1, r3
 80065de:	a3c4      	add	r3, pc, #784	; (adr r3, 80068f0 <lowlayer_computeAndWritePulse+0x338>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f7fa f808 	bl	80005f8 <__aeabi_dmul>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4610      	mov	r0, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	a3b7      	add	r3, pc, #732	; (adr r3, 80068d0 <lowlayer_computeAndWritePulse+0x318>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7fa f929 	bl	800084c <__aeabi_ddiv>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	ec43 2b17 	vmov	d7, r2, r3
 8006602:	eeb0 0a47 	vmov.f32	s0, s14
 8006606:	eef0 0a67 	vmov.f32	s1, s15
 800660a:	f014 fc89 	bl	801af20 <round>
 800660e:	ec53 2b10 	vmov	r2, r3, d0
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	f7fa fac7 	bl	8000ba8 <__aeabi_d2uiz>
 800661a:	4603      	mov	r3, r0
 800661c:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800661e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006622:	a3b5      	add	r3, pc, #724	; (adr r3, 80068f8 <lowlayer_computeAndWritePulse+0x340>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f7f9 fe30 	bl	800028c <__adddf3>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4610      	mov	r0, r2
 8006632:	4619      	mov	r1, r3
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	4bb1      	ldr	r3, [pc, #708]	; (8006900 <lowlayer_computeAndWritePulse+0x348>)
 800663a:	f7f9 ffdd 	bl	80005f8 <__aeabi_dmul>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4610      	mov	r0, r2
 8006644:	4619      	mov	r1, r3
 8006646:	a3a2      	add	r3, pc, #648	; (adr r3, 80068d0 <lowlayer_computeAndWritePulse+0x318>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f7fa f8fe 	bl	800084c <__aeabi_ddiv>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	ec43 2b17 	vmov	d7, r2, r3
 8006658:	eeb0 0a47 	vmov.f32	s0, s14
 800665c:	eef0 0a67 	vmov.f32	s1, s15
 8006660:	f014 fc5e 	bl	801af20 <round>
 8006664:	ec53 2b10 	vmov	r2, r3, d0
 8006668:	4610      	mov	r0, r2
 800666a:	4619      	mov	r1, r3
 800666c:	f7fa fa9c 	bl	8000ba8 <__aeabi_d2uiz>
 8006670:	4603      	mov	r3, r0
 8006672:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8006674:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	4ba1      	ldr	r3, [pc, #644]	; (8006904 <lowlayer_computeAndWritePulse+0x34c>)
 800667e:	f7f9 ffbb 	bl	80005f8 <__aeabi_dmul>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	ec43 2b17 	vmov	d7, r2, r3
 800668a:	eeb0 0a47 	vmov.f32	s0, s14
 800668e:	eef0 0a67 	vmov.f32	s1, s15
 8006692:	f014 fc45 	bl	801af20 <round>
 8006696:	ec53 2b10 	vmov	r2, r3, d0
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	f7fa fa83 	bl	8000ba8 <__aeabi_d2uiz>
 80066a2:	4603      	mov	r3, r0
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80066a6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80066aa:	a38b      	add	r3, pc, #556	; (adr r3, 80068d8 <lowlayer_computeAndWritePulse+0x320>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 fdec 	bl	800028c <__adddf3>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4610      	mov	r0, r2
 80066ba:	4619      	mov	r1, r3
 80066bc:	a388      	add	r3, pc, #544	; (adr r3, 80068e0 <lowlayer_computeAndWritePulse+0x328>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f7f9 ff99 	bl	80005f8 <__aeabi_dmul>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4610      	mov	r0, r2
 80066cc:	4619      	mov	r1, r3
 80066ce:	a380      	add	r3, pc, #512	; (adr r3, 80068d0 <lowlayer_computeAndWritePulse+0x318>)
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	f7fa f8ba 	bl	800084c <__aeabi_ddiv>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	ec43 2b17 	vmov	d7, r2, r3
 80066e0:	eeb0 0a47 	vmov.f32	s0, s14
 80066e4:	eef0 0a67 	vmov.f32	s1, s15
 80066e8:	f014 fc1a 	bl	801af20 <round>
 80066ec:	ec53 2b10 	vmov	r2, r3, d0
 80066f0:	4610      	mov	r0, r2
 80066f2:	4619      	mov	r1, r3
 80066f4:	f7fa fa58 	bl	8000ba8 <__aeabi_d2uiz>
 80066f8:	4603      	mov	r3, r0
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80066fc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006700:	a379      	add	r3, pc, #484	; (adr r3, 80068e8 <lowlayer_computeAndWritePulse+0x330>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 fdc1 	bl	800028c <__adddf3>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	a377      	add	r3, pc, #476	; (adr r3, 80068f0 <lowlayer_computeAndWritePulse+0x338>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 ff6e 	bl	80005f8 <__aeabi_dmul>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4610      	mov	r0, r2
 8006722:	4619      	mov	r1, r3
 8006724:	a36a      	add	r3, pc, #424	; (adr r3, 80068d0 <lowlayer_computeAndWritePulse+0x318>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f7fa f88f 	bl	800084c <__aeabi_ddiv>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	ec43 2b17 	vmov	d7, r2, r3
 8006736:	eeb0 0a47 	vmov.f32	s0, s14
 800673a:	eef0 0a67 	vmov.f32	s1, s15
 800673e:	f014 fbef 	bl	801af20 <round>
 8006742:	ec53 2b10 	vmov	r2, r3, d0
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	f7fa fa2d 	bl	8000ba8 <__aeabi_d2uiz>
 800674e:	4603      	mov	r3, r0
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8006752:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006756:	a368      	add	r3, pc, #416	; (adr r3, 80068f8 <lowlayer_computeAndWritePulse+0x340>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f7f9 fd96 	bl	800028c <__adddf3>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4610      	mov	r0, r2
 8006766:	4619      	mov	r1, r3
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	4b64      	ldr	r3, [pc, #400]	; (8006900 <lowlayer_computeAndWritePulse+0x348>)
 800676e:	f7f9 ff43 	bl	80005f8 <__aeabi_dmul>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4610      	mov	r0, r2
 8006778:	4619      	mov	r1, r3
 800677a:	a355      	add	r3, pc, #340	; (adr r3, 80068d0 <lowlayer_computeAndWritePulse+0x318>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f7fa f864 	bl	800084c <__aeabi_ddiv>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	ec43 2b17 	vmov	d7, r2, r3
 800678c:	eeb0 0a47 	vmov.f32	s0, s14
 8006790:	eef0 0a67 	vmov.f32	s1, s15
 8006794:	f014 fbc4 	bl	801af20 <round>
 8006798:	ec53 2b10 	vmov	r2, r3, d0
 800679c:	4610      	mov	r0, r2
 800679e:	4619      	mov	r1, r3
 80067a0:	f7fa fa02 	bl	8000ba8 <__aeabi_d2uiz>
 80067a4:	4603      	mov	r3, r0
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80067a8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	4b54      	ldr	r3, [pc, #336]	; (8006904 <lowlayer_computeAndWritePulse+0x34c>)
 80067b2:	f7f9 ff21 	bl	80005f8 <__aeabi_dmul>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	ec43 2b17 	vmov	d7, r2, r3
 80067be:	eeb0 0a47 	vmov.f32	s0, s14
 80067c2:	eef0 0a67 	vmov.f32	s1, s15
 80067c6:	f014 fbab 	bl	801af20 <round>
 80067ca:	ec53 2b10 	vmov	r2, r3, d0
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	f7fa f9e9 	bl	8000ba8 <__aeabi_d2uiz>
 80067d6:	4603      	mov	r3, r0
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80067da:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80067de:	a33e      	add	r3, pc, #248	; (adr r3, 80068d8 <lowlayer_computeAndWritePulse+0x320>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fd52 	bl	800028c <__adddf3>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4610      	mov	r0, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	a33b      	add	r3, pc, #236	; (adr r3, 80068e0 <lowlayer_computeAndWritePulse+0x328>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f7f9 feff 	bl	80005f8 <__aeabi_dmul>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	a333      	add	r3, pc, #204	; (adr r3, 80068d0 <lowlayer_computeAndWritePulse+0x318>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f7fa f820 	bl	800084c <__aeabi_ddiv>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	ec43 2b17 	vmov	d7, r2, r3
 8006814:	eeb0 0a47 	vmov.f32	s0, s14
 8006818:	eef0 0a67 	vmov.f32	s1, s15
 800681c:	f014 fb80 	bl	801af20 <round>
 8006820:	ec53 2b10 	vmov	r2, r3, d0
 8006824:	4610      	mov	r0, r2
 8006826:	4619      	mov	r1, r3
 8006828:	f7fa f9be 	bl	8000ba8 <__aeabi_d2uiz>
 800682c:	4603      	mov	r3, r0
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8006830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	461a      	mov	r2, r3
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8006840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	461a      	mov	r2, r3
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8006850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	461a      	mov	r2, r3
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8006860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	461a      	mov	r2, r3
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (abs(delta_var0) > 127
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	2b00      	cmp	r3, #0
 8006874:	bfb8      	it	lt
 8006876:	425b      	neglt	r3, r3
 8006878:	2b7f      	cmp	r3, #127	; 0x7f
 800687a:	dc11      	bgt.n	80068a0 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var1) > 127
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	bfb8      	it	lt
 8006882:	425b      	neglt	r3, r3
 8006884:	2b7f      	cmp	r3, #127	; 0x7f
 8006886:	dc0b      	bgt.n	80068a0 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var2) > 127
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfb8      	it	lt
 800688e:	425b      	neglt	r3, r3
 8006890:	2b7f      	cmp	r3, #127	; 0x7f
 8006892:	dc05      	bgt.n	80068a0 <lowlayer_computeAndWritePulse+0x2e8>
		|| abs(delta_var3) > 127) {
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfb8      	it	lt
 800689a:	425b      	neglt	r3, r3
 800689c:	2b7f      	cmp	r3, #127	; 0x7f
 800689e:	dd01      	ble.n	80068a4 <lowlayer_computeAndWritePulse+0x2ec>
		return FALSE;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e00c      	b.n	80068be <lowlayer_computeAndWritePulse+0x306>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 80068a4:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80068a8:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80068ac:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80068b0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80068b4:	f000 f828 	bl	8006908 <lowlayer_writePulse>
 80068b8:	4603      	mov	r3, r0
 80068ba:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80068bc:	79fb      	ldrb	r3, [r7, #7]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3748      	adds	r7, #72	; 0x48
 80068c2:	46bd      	mov	sp, r7
 80068c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068c8:	b004      	add	sp, #16
 80068ca:	4770      	bx	lr
 80068cc:	f3af 8000 	nop.w
 80068d0:	60000000 	.word	0x60000000
 80068d4:	401921fb 	.word	0x401921fb
 80068d8:	daaaaaab 	.word	0xdaaaaaab
 80068dc:	4007bc89 	.word	0x4007bc89
 80068e0:	a0000000 	.word	0xa0000000
 80068e4:	40d3bca1 	.word	0x40d3bca1
 80068e8:	daaaaaab 	.word	0xdaaaaaab
 80068ec:	3ff7bc89 	.word	0x3ff7bc89
 80068f0:	00000000 	.word	0x00000000
 80068f4:	40d38800 	.word	0x40d38800
 80068f8:	88000000 	.word	0x88000000
 80068fc:	4002d97c 	.word	0x4002d97c
 8006900:	40df4000 	.word	0x40df4000
 8006904:	40590000 	.word	0x40590000

08006908 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4623      	mov	r3, r4
 8006918:	71fb      	strb	r3, [r7, #7]
 800691a:	4603      	mov	r3, r0
 800691c:	71bb      	strb	r3, [r7, #6]
 800691e:	460b      	mov	r3, r1
 8006920:	717b      	strb	r3, [r7, #5]
 8006922:	4613      	mov	r3, r2
 8006924:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8006926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800692a:	2b00      	cmp	r3, #0
 800692c:	da06      	bge.n	800693c <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	425b      	negs	r3, r3
 8006932:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	425b      	negs	r3, r3
 8006938:	75fb      	strb	r3, [r7, #23]
 800693a:	e006      	b.n	800694a <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006946:	b25b      	sxtb	r3, r3
 8006948:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 800694a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	da06      	bge.n	8006960 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8006952:	79bb      	ldrb	r3, [r7, #6]
 8006954:	425b      	negs	r3, r3
 8006956:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8006958:	79bb      	ldrb	r3, [r7, #6]
 800695a:	425b      	negs	r3, r3
 800695c:	75bb      	strb	r3, [r7, #22]
 800695e:	e006      	b.n	800696e <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8006960:	79bb      	ldrb	r3, [r7, #6]
 8006962:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8006964:	79bb      	ldrb	r3, [r7, #6]
 8006966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800696a:	b25b      	sxtb	r3, r3
 800696c:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 800696e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da0b      	bge.n	800698e <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8006976:	797b      	ldrb	r3, [r7, #5]
 8006978:	425b      	negs	r3, r3
 800697a:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 800697c:	797b      	ldrb	r3, [r7, #5]
 800697e:	425b      	negs	r3, r3
 8006980:	b2db      	uxtb	r3, r3
 8006982:	b25b      	sxtb	r3, r3
 8006984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006988:	b25b      	sxtb	r3, r3
 800698a:	757b      	strb	r3, [r7, #21]
 800698c:	e003      	b.n	8006996 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 800698e:	797b      	ldrb	r3, [r7, #5]
 8006990:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8006992:	797b      	ldrb	r3, [r7, #5]
 8006994:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8006996:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	da06      	bge.n	80069ac <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 800699e:	793b      	ldrb	r3, [r7, #4]
 80069a0:	425b      	negs	r3, r3
 80069a2:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 80069a4:	793b      	ldrb	r3, [r7, #4]
 80069a6:	425b      	negs	r3, r3
 80069a8:	753b      	strb	r3, [r7, #20]
 80069aa:	e006      	b.n	80069ba <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80069ac:	793b      	ldrb	r3, [r7, #4]
 80069ae:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80069b0:	793b      	ldrb	r3, [r7, #4]
 80069b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069b6:	b25b      	sxtb	r3, r3
 80069b8:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80069ba:	7cfb      	ldrb	r3, [r7, #19]
 80069bc:	2b4b      	cmp	r3, #75	; 0x4b
 80069be:	d808      	bhi.n	80069d2 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80069c0:	7cbb      	ldrb	r3, [r7, #18]
 80069c2:	2b78      	cmp	r3, #120	; 0x78
 80069c4:	d805      	bhi.n	80069d2 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80069c6:	7c7b      	ldrb	r3, [r7, #17]
 80069c8:	2b7d      	cmp	r3, #125	; 0x7d
 80069ca:	d802      	bhi.n	80069d2 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80069cc:	7c3b      	ldrb	r3, [r7, #16]
 80069ce:	2b65      	cmp	r3, #101	; 0x65
 80069d0:	d901      	bls.n	80069d6 <lowlayer_writePulse+0xce>
		return FALSE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	e04b      	b.n	8006a6e <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80069d6:	2200      	movs	r2, #0
 80069d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069dc:	4826      	ldr	r0, [pc, #152]	; (8006a78 <lowlayer_writePulse+0x170>)
 80069de:	f005 ff4f 	bl	800c880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80069e2:	2200      	movs	r2, #0
 80069e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069e8:	4824      	ldr	r0, [pc, #144]	; (8006a7c <lowlayer_writePulse+0x174>)
 80069ea:	f005 ff49 	bl	800c880 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	4619      	mov	r1, r3
 80069f2:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80069f6:	f7fd fead 	bl	8004754 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80069fa:	7dbb      	ldrb	r3, [r7, #22]
 80069fc:	4619      	mov	r1, r3
 80069fe:	4820      	ldr	r0, [pc, #128]	; (8006a80 <lowlayer_writePulse+0x178>)
 8006a00:	f7fd fea8 	bl	8004754 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8006a04:	7d7b      	ldrb	r3, [r7, #21]
 8006a06:	4619      	mov	r1, r3
 8006a08:	481e      	ldr	r0, [pc, #120]	; (8006a84 <lowlayer_writePulse+0x17c>)
 8006a0a:	f7fd fea3 	bl	8004754 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8006a0e:	7d3b      	ldrb	r3, [r7, #20]
 8006a10:	4619      	mov	r1, r3
 8006a12:	481d      	ldr	r0, [pc, #116]	; (8006a88 <lowlayer_writePulse+0x180>)
 8006a14:	f7fd fe9e 	bl	8004754 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8006a18:	2364      	movs	r3, #100	; 0x64
 8006a1a:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8006a1c:	bf00      	nop
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	73fa      	strb	r2, [r7, #15]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1fa      	bne.n	8006a1e <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a2e:	4813      	ldr	r0, [pc, #76]	; (8006a7c <lowlayer_writePulse+0x174>)
 8006a30:	f005 ff26 	bl	800c880 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8006a34:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <lowlayer_writePulse+0x184>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	4a13      	ldr	r2, [pc, #76]	; (8006a8c <lowlayer_writePulse+0x184>)
 8006a40:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <lowlayer_writePulse+0x184>)
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4a0f      	ldr	r2, [pc, #60]	; (8006a8c <lowlayer_writePulse+0x184>)
 8006a4e:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8006a50:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <lowlayer_writePulse+0x184>)
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006a58:	4413      	add	r3, r2
 8006a5a:	4a0c      	ldr	r2, [pc, #48]	; (8006a8c <lowlayer_writePulse+0x184>)
 8006a5c:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <lowlayer_writePulse+0x184>)
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006a66:	4413      	add	r3, r2
 8006a68:	4a08      	ldr	r2, [pc, #32]	; (8006a8c <lowlayer_writePulse+0x184>)
 8006a6a:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8006a6c:	2301      	movs	r3, #1
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd90      	pop	{r4, r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40020000 	.word	0x40020000
 8006a7c:	40020c00 	.word	0x40020c00
 8006a80:	60000002 	.word	0x60000002
 8006a84:	60000004 	.word	0x60000004
 8006a88:	60000006 	.word	0x60000006
 8006a8c:	2000fec8 	.word	0x2000fec8

08006a90 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8006a96:	2364      	movs	r3, #100	; 0x64
 8006a98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006aa0:	4809      	ldr	r0, [pc, #36]	; (8006ac8 <lowlayer_resetEncoder+0x38>)
 8006aa2:	f005 feed 	bl	800c880 <HAL_GPIO_WritePin>
	while (delay--);
 8006aa6:	bf00      	nop
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	1e5a      	subs	r2, r3, #1
 8006aac:	71fa      	strb	r2, [r7, #7]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1fa      	bne.n	8006aa8 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ab8:	4803      	ldr	r0, [pc, #12]	; (8006ac8 <lowlayer_resetEncoder+0x38>)
 8006aba:	f005 fee1 	bl	800c880 <HAL_GPIO_WritePin>
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40020c00 	.word	0x40020c00

08006acc <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8006ad2:	4805      	ldr	r0, [pc, #20]	; (8006ae8 <lowlayer_readLimitSwitch+0x1c>)
 8006ad4:	f7fd fe4d 	bl	8004772 <FSMC_Read>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	b2db      	uxtb	r3, r3
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	60000020 	.word	0x60000020

08006aec <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d81c      	bhi.n	8006b36 <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006b02:	3310      	adds	r3, #16
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd fe33 	bl	8004772 <FSMC_Read>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006b16:	3310      	adds	r3, #16
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	3302      	adds	r3, #2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fd fe28 	bl	8004772 <FSMC_Read>
 8006b22:	4603      	mov	r3, r0
 8006b24:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006b26:	893b      	ldrh	r3, [r7, #8]
 8006b28:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	041a      	lsls	r2, r3, #16
 8006b2e:	897b      	ldrh	r3, [r7, #10]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e001      	b.n	8006b3a <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d81c      	bhi.n	8006b8e <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006b5a:	3318      	adds	r3, #24
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fd fe07 	bl	8004772 <FSMC_Read>
 8006b64:	4603      	mov	r3, r0
 8006b66:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006b6e:	3318      	adds	r3, #24
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	3302      	adds	r3, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fd fdfc 	bl	8004772 <FSMC_Read>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8006b7e:	893b      	ldrh	r3, [r7, #8]
 8006b80:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	041a      	lsls	r2, r3, #16
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	e001      	b.n	8006b92 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8006b9c:	b590      	push	{r4, r7, lr}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	71fb      	strb	r3, [r7, #7]
 8006ba6:	e00b      	b.n	8006bc0 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8006ba8:	79fc      	ldrb	r4, [r7, #7]
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff ff9d 	bl	8006aec <lowlayer_readEncoder>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <lowlayer_updateEncoder+0x34>)
 8006bb6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	71fb      	strb	r3, [r7, #7]
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d9f0      	bls.n	8006ba8 <lowlayer_updateEncoder+0xc>
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd90      	pop	{r4, r7, pc}
 8006bd0:	2000fedc 	.word	0x2000fedc

08006bd4 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8006bda:	2300      	movs	r3, #0
 8006bdc:	71fb      	strb	r3, [r7, #7]
 8006bde:	e00b      	b.n	8006bf8 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8006be0:	79fc      	ldrb	r4, [r7, #7]
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff ffad 	bl	8006b44 <lowlayer_readCapture>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4a06      	ldr	r2, [pc, #24]	; (8006c08 <lowlayer_updateCapture+0x34>)
 8006bee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	71fb      	strb	r3, [r7, #7]
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d9f0      	bls.n	8006be0 <lowlayer_updateCapture+0xc>
	}
}
 8006bfe:	bf00      	nop
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd90      	pop	{r4, r7, pc}
 8006c08:	2000feec 	.word	0x2000feec

08006c0c <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8006c12:	f7ff ff5b 	bl	8006acc <lowlayer_readLimitSwitch>
 8006c16:	4603      	mov	r3, r0
 8006c18:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	71fb      	strb	r3, [r7, #7]
 8006c1e:	e00d      	b.n	8006c3c <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8006c20:	79ba      	ldrb	r2, [r7, #6]
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	fa42 f303 	asr.w	r3, r2, r3
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	f002 0201 	and.w	r2, r2, #1
 8006c30:	b2d1      	uxtb	r1, r2
 8006c32:	4a06      	ldr	r2, [pc, #24]	; (8006c4c <lowlayer_updateLimit+0x40>)
 8006c34:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	71fb      	strb	r3, [r7, #7]
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d9ee      	bls.n	8006c20 <lowlayer_updateLimit+0x14>
	}
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	2000fee8 	.word	0x2000fee8

08006c50 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8006c60:	2201      	movs	r2, #1
 8006c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c66:	4807      	ldr	r0, [pc, #28]	; (8006c84 <lowlayer_setOutput+0x34>)
 8006c68:	f005 fe0a 	bl	800c880 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8006c6c:	e005      	b.n	8006c7a <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c74:	4803      	ldr	r0, [pc, #12]	; (8006c84 <lowlayer_setOutput+0x34>)
 8006c76:	f005 fe03 	bl	800c880 <HAL_GPIO_WritePin>
}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40020400 	.word	0x40020400

08006c88 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	2140      	movs	r1, #64	; 0x40
 8006c90:	4802      	ldr	r0, [pc, #8]	; (8006c9c <lowlayer_CPLD_Init+0x14>)
 8006c92:	f005 fdf5 	bl	800c880 <HAL_GPIO_WritePin>
}
 8006c96:	bf00      	nop
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40020c00 	.word	0x40020c00

08006ca0 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006caa:	4808      	ldr	r0, [pc, #32]	; (8006ccc <lowlayer_stepMotorInit+0x2c>)
 8006cac:	f005 fde8 	bl	800c880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cb6:	4805      	ldr	r0, [pc, #20]	; (8006ccc <lowlayer_stepMotorInit+0x2c>)
 8006cb8:	f005 fde2 	bl	800c880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cc2:	4802      	ldr	r0, [pc, #8]	; (8006ccc <lowlayer_stepMotorInit+0x2c>)
 8006cc4:	f005 fddc 	bl	800c880 <HAL_GPIO_WritePin>
}
 8006cc8:	bf00      	nop
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40020000 	.word	0x40020000

08006cd0 <scaraStartup>:
//SCARA_Gcode_Cor_TypeDef		Gcode_Cor[125];

Trajectory_TargetTypeDef	joint_taget[4] = {  TRAJECTORY_J0, TRAJECTORY_J1,
												TRAJECTORY_J2, TRAJECTORY_J3};

void				scaraStartup(void) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8006cd4:	f7ff ffd8 	bl	8006c88 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8006cd8:	f7ff ffe2 	bl	8006ca0 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8006cdc:	f7ff fed8 	bl	8006a90 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8006ce0:	bf00      	nop
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	0000      	movs	r0, r0
	...

08006ce8 <scaraInitDuty>:
	return SCARA_STATUS_OK;
	
}

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8006ce8:	b084      	sub	sp, #16
 8006cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cec:	ed2d 8b02 	vpush	{d8}
 8006cf0:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8006cf4:	af90      	add	r7, sp, #576	; 0x240
 8006cf6:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8006cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 8006cfe:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 839a 	bne.w	800743c <scaraInitDuty+0x754>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8006d08:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006d0c:	a395      	add	r3, pc, #596	; (adr r3, 8006f64 <scaraInitDuty+0x27c>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fc71 	bl	80005f8 <__aeabi_dmul>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	4b8b      	ldr	r3, [pc, #556]	; (8006f50 <scaraInitDuty+0x268>)
 8006d24:	f7f9 fd92 	bl	800084c <__aeabi_ddiv>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006d30:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d134      	bne.n	8006da2 <scaraInitDuty+0xba>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8006d38:	4b86      	ldr	r3, [pc, #536]	; (8006f54 <scaraInitDuty+0x26c>)
 8006d3a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006d3e:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006d42:	f7f9 faa3 	bl	800028c <__adddf3>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	f107 0108 	add.w	r1, r7, #8
 8006d4e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8006d52:	4b80      	ldr	r3, [pc, #512]	; (8006f54 <scaraInitDuty+0x26c>)
 8006d54:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006d58:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006d5c:	f7f9 fa96 	bl	800028c <__adddf3>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	f107 0108 	add.w	r1, r7, #8
 8006d68:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8006d6c:	4b79      	ldr	r3, [pc, #484]	; (8006f54 <scaraInitDuty+0x26c>)
 8006d6e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8006d72:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006d76:	f7f9 fa89 	bl	800028c <__adddf3>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	f107 0108 	add.w	r1, r7, #8
 8006d82:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8006d86:	4b73      	ldr	r3, [pc, #460]	; (8006f54 <scaraInitDuty+0x26c>)
 8006d88:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006d8c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006d90:	f7f9 fa7c 	bl	800028c <__adddf3>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	f107 0108 	add.w	r1, r7, #8
 8006d9c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006da0:	e01f      	b.n	8006de2 <scaraInitDuty+0xfa>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8006da2:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d118      	bne.n	8006ddc <scaraInitDuty+0xf4>
			target_point.x 		= command.target_point.x;
 8006daa:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006dae:	f107 0108 	add.w	r1, r7, #8
 8006db2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8006db6:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8006dba:	f107 0108 	add.w	r1, r7, #8
 8006dbe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8006dc2:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006dc6:	f107 0108 	add.w	r1, r7, #8
 8006dca:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8006dce:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8006dd2:	f107 0108 	add.w	r1, r7, #8
 8006dd6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006dda:	e002      	b.n	8006de2 <scaraInitDuty+0xfa>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8006ddc:	230c      	movs	r3, #12
 8006dde:	f000 bed7 	b.w	8007b90 <scaraInitDuty+0xea8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006dea:	4b5a      	ldr	r3, [pc, #360]	; (8006f54 <scaraInitDuty+0x26c>)
 8006dec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006df0:	f7f9 fa4a 	bl	8000288 <__aeabi_dsub>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		dir_angle = 1;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if ( angle_s < 0) {
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006e0e:	f7f9 fe65 	bl	8000adc <__aeabi_dcmplt>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <scaraInitDuty+0x136>
			dir_angle = -1;
 8006e18:	23ff      	movs	r3, #255	; 0xff
 8006e1a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
//		if(positionCurrent.roll + angle_s < -3.14 || positionCurrent.roll + angle_s > 3.14){
//			dir_angle = -dir_angle;
//			angle_s = (2*PI - fabs(angle_s))*dir_angle;
//		}

		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8006e1e:	4b4e      	ldr	r3, [pc, #312]	; (8006f58 <scaraInitDuty+0x270>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8006e24:	4b4b      	ldr	r3, [pc, #300]	; (8006f54 <scaraInitDuty+0x26c>)
 8006e26:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006e2a:	494b      	ldr	r1, [pc, #300]	; (8006f58 <scaraInitDuty+0x270>)
 8006e2c:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8006e30:	e9c1 2300 	strd	r2, r3, [r1]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8006e34:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d120      	bne.n	8006e7e <scaraInitDuty+0x196>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8006e3c:	4b46      	ldr	r3, [pc, #280]	; (8006f58 <scaraInitDuty+0x270>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8006e42:	4c44      	ldr	r4, [pc, #272]	; (8006f54 <scaraInitDuty+0x26c>)
 8006e44:	f107 0208 	add.w	r2, r7, #8
 8006e48:	ab2e      	add	r3, sp, #184	; 0xb8
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	22c0      	movs	r2, #192	; 0xc0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f00f fb36 	bl	80164c0 <memcpy>
 8006e54:	4668      	mov	r0, sp
 8006e56:	f104 0308 	add.w	r3, r4, #8
 8006e5a:	22b8      	movs	r2, #184	; 0xb8
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	f00f fb2f 	bl	80164c0 <memcpy>
 8006e62:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006e66:	483d      	ldr	r0, [pc, #244]	; (8006f5c <scaraInitDuty+0x274>)
 8006e68:	f000 fea6 	bl	8007bb8 <scaraInitLine>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8006e72:	4b39      	ldr	r3, [pc, #228]	; (8006f58 <scaraInitDuty+0x270>)
 8006e74:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006e78:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006e7c:	e060      	b.n	8006f40 <scaraInitDuty+0x258>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8006e7e:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d14c      	bne.n	8006f20 <scaraInitDuty+0x238>
			SCARA_PositionTypeDef	center_point;
			target_point.z = positionCurrent.z;
 8006e86:	4b33      	ldr	r3, [pc, #204]	; (8006f54 <scaraInitDuty+0x26c>)
 8006e88:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

			center_point.x 		= positionCurrent.x + command.sub_point.x;
 8006e94:	4b2f      	ldr	r3, [pc, #188]	; (8006f54 <scaraInitDuty+0x26c>)
 8006e96:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006e9a:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8006e9e:	f7f9 f9f5 	bl	800028c <__adddf3>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			center_point.y 		= positionCurrent.y + command.sub_point.y;
 8006eaa:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <scaraInitDuty+0x26c>)
 8006eac:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006eb0:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006eb4:	f7f9 f9ea 	bl	800028c <__adddf3>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			center_point.z 		= positionCurrent.z;
 8006ec0:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <scaraInitDuty+0x26c>)
 8006ec2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006ec6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8006eca:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <scaraInitDuty+0x270>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8006ed0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006ed4:	4c1f      	ldr	r4, [pc, #124]	; (8006f54 <scaraInitDuty+0x26c>)
 8006ed6:	938e      	str	r3, [sp, #568]	; 0x238
 8006ed8:	a85e      	add	r0, sp, #376	; 0x178
 8006eda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ede:	22c0      	movs	r2, #192	; 0xc0
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f00f faed 	bl	80164c0 <memcpy>
 8006ee6:	f107 0208 	add.w	r2, r7, #8
 8006eea:	ab2e      	add	r3, sp, #184	; 0xb8
 8006eec:	4611      	mov	r1, r2
 8006eee:	22c0      	movs	r2, #192	; 0xc0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f00f fae5 	bl	80164c0 <memcpy>
 8006ef6:	4668      	mov	r0, sp
 8006ef8:	f104 0308 	add.w	r3, r4, #8
 8006efc:	22b8      	movs	r2, #184	; 0xb8
 8006efe:	4619      	mov	r1, r3
 8006f00:	f00f fade 	bl	80164c0 <memcpy>
 8006f04:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006f08:	4815      	ldr	r0, [pc, #84]	; (8006f60 <scaraInitDuty+0x278>)
 8006f0a:	f000 ff09 	bl	8007d20 <scaraInitCircle>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.arc_dir );
			total_s = myDUTY.task.path.circle.total_s;
 8006f14:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <scaraInitDuty+0x270>)
 8006f16:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8006f1a:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8006f1e:	e00f      	b.n	8006f40 <scaraInitDuty+0x258>

		}else if(DUTY_PATH_BEZIER_CURVE == command.path_type){
 8006f20:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d108      	bne.n	8006f3a <scaraInitDuty+0x252>
			myDUTY.task.path.path_type = DUTY_PATH_BEZIER_CURVE;
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <scaraInitDuty+0x270>)
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	721a      	strb	r2, [r3, #8]
			myDUTY.task.path.line.z0 = command.target_point.z;
 8006f2e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8006f32:	4909      	ldr	r1, [pc, #36]	; (8006f58 <scaraInitDuty+0x270>)
 8006f34:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8006f38:	e002      	b.n	8006f40 <scaraInitDuty+0x258>
		}else {
			return SCARA_STATUS_ERROR_TASK;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	f000 be28 	b.w	8007b90 <scaraInitDuty+0xea8>
		}

		if ( SCARA_STATUS_OK != status) {
 8006f40:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d011      	beq.n	8006f6c <scaraInitDuty+0x284>
			return status;
 8006f48:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8006f4c:	f000 be20 	b.w	8007b90 <scaraInitDuty+0xea8>
 8006f50:	40668000 	.word	0x40668000
 8006f54:	20010af0 	.word	0x20010af0
 8006f58:	2000ff30 	.word	0x2000ff30
 8006f5c:	2000ff40 	.word	0x2000ff40
 8006f60:	2000ffb0 	.word	0x2000ffb0
 8006f64:	60000000 	.word	0x60000000
 8006f68:	400921fb 	.word	0x400921fb
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8006f6c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f040 80a7 	bne.w	80070c4 <scaraInitDuty+0x3dc>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006f76:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d14d      	bne.n	800701a <scaraInitDuty+0x332>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006f7e:	4bcd      	ldr	r3, [pc, #820]	; (80072b4 <scaraInitDuty+0x5cc>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8006f86:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006f8a:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 8006f8e:	eeb0 2a46 	vmov.f32	s4, s12
 8006f92:	eef0 2a66 	vmov.f32	s5, s13
 8006f96:	eeb0 1a47 	vmov.f32	s2, s14
 8006f9a:	eef0 1a67 	vmov.f32	s3, s15
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8006fa4:	2104      	movs	r1, #4
 8006fa6:	48c4      	ldr	r0, [pc, #784]	; (80072b8 <scaraInitDuty+0x5d0>)
 8006fa8:	f001 f8b6 	bl	8008118 <scaraInitLSPB1>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8006fb2:	4ac0      	ldr	r2, [pc, #768]	; (80072b4 <scaraInitDuty+0x5cc>)
 8006fb4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8006fb8:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8006fbc:	4bbd      	ldr	r3, [pc, #756]	; (80072b4 <scaraInitDuty+0x5cc>)
 8006fbe:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006fc2:	49bc      	ldr	r1, [pc, #752]	; (80072b4 <scaraInitDuty+0x5cc>)
 8006fc4:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8006fc8:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8006fcc:	4bb9      	ldr	r3, [pc, #740]	; (80072b4 <scaraInitDuty+0x5cc>)
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8006fd4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7f9 faa3 	bl	8000524 <__aeabi_i2d>
 8006fde:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006fe2:	f7f9 fb09 	bl	80005f8 <__aeabi_dmul>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	ec43 2b16 	vmov	d6, r2, r3
 8006fee:	4bb1      	ldr	r3, [pc, #708]	; (80072b4 <scaraInitDuty+0x5cc>)
 8006ff0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006ff4:	ed93 7b00 	vldr	d7, [r3]
 8006ff8:	eeb0 1a47 	vmov.f32	s2, s14
 8006ffc:	eef0 1a67 	vmov.f32	s3, s15
 8007000:	2203      	movs	r2, #3
 8007002:	eeb0 0a46 	vmov.f32	s0, s12
 8007006:	eef0 0a66 	vmov.f32	s1, s13
 800700a:	2105      	movs	r1, #5
 800700c:	48ab      	ldr	r0, [pc, #684]	; (80072bc <scaraInitDuty+0x5d4>)
 800700e:	f001 f835 	bl	800807c <scaraInitLinear>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007018:	e201      	b.n	800741e <scaraInitDuty+0x736>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800701a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d14d      	bne.n	80070be <scaraInitDuty+0x3d6>
				//myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8007022:	4ba4      	ldr	r3, [pc, #656]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800702a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800702e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8007032:	eeb0 2a46 	vmov.f32	s4, s12
 8007036:	eef0 2a66 	vmov.f32	s5, s13
 800703a:	eeb0 1a47 	vmov.f32	s2, s14
 800703e:	eef0 1a67 	vmov.f32	s3, s15
 8007042:	2200      	movs	r2, #0
 8007044:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8007048:	2104      	movs	r1, #4
 800704a:	489b      	ldr	r0, [pc, #620]	; (80072b8 <scaraInitDuty+0x5d0>)
 800704c:	f001 f864 	bl	8008118 <scaraInitLSPB1>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007056:	4a97      	ldr	r2, [pc, #604]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007058:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800705c:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
				myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8007060:	4b94      	ldr	r3, [pc, #592]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007062:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8007066:	4993      	ldr	r1, [pc, #588]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007068:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 800706c:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007070:	4b90      	ldr	r3, [pc, #576]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007072:	2202      	movs	r2, #2
 8007074:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 8007078:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800707c:	4618      	mov	r0, r3
 800707e:	f7f9 fa51 	bl	8000524 <__aeabi_i2d>
 8007082:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007086:	f7f9 fab7 	bl	80005f8 <__aeabi_dmul>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	ec43 2b16 	vmov	d6, r2, r3
 8007092:	4b88      	ldr	r3, [pc, #544]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007094:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007098:	ed93 7b00 	vldr	d7, [r3]
 800709c:	eeb0 1a47 	vmov.f32	s2, s14
 80070a0:	eef0 1a67 	vmov.f32	s3, s15
 80070a4:	2203      	movs	r2, #3
 80070a6:	eeb0 0a46 	vmov.f32	s0, s12
 80070aa:	eef0 0a66 	vmov.f32	s1, s13
 80070ae:	2105      	movs	r1, #5
 80070b0:	4882      	ldr	r0, [pc, #520]	; (80072bc <scaraInitDuty+0x5d4>)
 80070b2:	f000 ffe3 	bl	800807c <scaraInitLinear>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80070bc:	e1af      	b.n	800741e <scaraInitDuty+0x736>

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 80070be:	2308      	movs	r3, #8
 80070c0:	f000 bd66 	b.w	8007b90 <scaraInitDuty+0xea8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 80070c4:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f040 80a7 	bne.w	800721c <scaraInitDuty+0x534>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80070ce:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d14d      	bne.n	8007172 <scaraInitDuty+0x48a>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80070d6:	4b77      	ldr	r3, [pc, #476]	; (80072b4 <scaraInitDuty+0x5cc>)
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80070de:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80070e2:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 80070e6:	eeb0 2a46 	vmov.f32	s4, s12
 80070ea:	eef0 2a66 	vmov.f32	s5, s13
 80070ee:	eeb0 1a47 	vmov.f32	s2, s14
 80070f2:	eef0 1a67 	vmov.f32	s3, s15
 80070f6:	2201      	movs	r2, #1
 80070f8:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80070fc:	2104      	movs	r1, #4
 80070fe:	4870      	ldr	r0, [pc, #448]	; (80072c0 <scaraInitDuty+0x5d8>)
 8007100:	f001 face 	bl	80086a0 <scaraInitScurve1>
 8007104:	4603      	mov	r3, r0
 8007106:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 800710a:	4a6a      	ldr	r2, [pc, #424]	; (80072b4 <scaraInitDuty+0x5cc>)
 800710c:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8007110:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8007114:	4b67      	ldr	r3, [pc, #412]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007116:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 800711a:	4966      	ldr	r1, [pc, #408]	; (80072b4 <scaraInitDuty+0x5cc>)
 800711c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007120:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007124:	4b63      	ldr	r3, [pc, #396]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007126:	2202      	movs	r2, #2
 8007128:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 800712c:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007130:	4618      	mov	r0, r3
 8007132:	f7f9 f9f7 	bl	8000524 <__aeabi_i2d>
 8007136:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800713a:	f7f9 fa5d 	bl	80005f8 <__aeabi_dmul>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	ec43 2b16 	vmov	d6, r2, r3
 8007146:	4b5b      	ldr	r3, [pc, #364]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007148:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800714c:	ed93 7b00 	vldr	d7, [r3]
 8007150:	eeb0 1a47 	vmov.f32	s2, s14
 8007154:	eef0 1a67 	vmov.f32	s3, s15
 8007158:	2203      	movs	r2, #3
 800715a:	eeb0 0a46 	vmov.f32	s0, s12
 800715e:	eef0 0a66 	vmov.f32	s1, s13
 8007162:	2105      	movs	r1, #5
 8007164:	4855      	ldr	r0, [pc, #340]	; (80072bc <scaraInitDuty+0x5d4>)
 8007166:	f000 ff89 	bl	800807c <scaraInitLinear>
 800716a:	4603      	mov	r3, r0
 800716c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007170:	e155      	b.n	800741e <scaraInitDuty+0x736>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8007172:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d14d      	bne.n	8007216 <scaraInitDuty+0x52e>
				//myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800717a:	4b4e      	ldr	r3, [pc, #312]	; (80072b4 <scaraInitDuty+0x5cc>)
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve1(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8007182:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007186:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800718a:	eeb0 2a46 	vmov.f32	s4, s12
 800718e:	eef0 2a66 	vmov.f32	s5, s13
 8007192:	eeb0 1a47 	vmov.f32	s2, s14
 8007196:	eef0 1a67 	vmov.f32	s3, s15
 800719a:	2200      	movs	r2, #0
 800719c:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80071a0:	2104      	movs	r1, #4
 80071a2:	4847      	ldr	r0, [pc, #284]	; (80072c0 <scaraInitDuty+0x5d8>)
 80071a4:	f001 fa7c 	bl	80086a0 <scaraInitScurve1>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				//myDUTY.task.trajectory_3d.lspb.Tf might change at this point,
				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80071ae:	4a41      	ldr	r2, [pc, #260]	; (80072b4 <scaraInitDuty+0x5cc>)
 80071b0:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80071b4:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				//myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
				myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 80071b8:	4b3e      	ldr	r3, [pc, #248]	; (80072b4 <scaraInitDuty+0x5cc>)
 80071ba:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 80071be:	493d      	ldr	r1, [pc, #244]	; (80072b4 <scaraInitDuty+0x5cc>)
 80071c0:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80071c4:	e9c1 2300 	strd	r2, r3, [r1]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80071c8:	4b3a      	ldr	r3, [pc, #232]	; (80072b4 <scaraInitDuty+0x5cc>)
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80071d0:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7f9 f9a5 	bl	8000524 <__aeabi_i2d>
 80071da:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80071de:	f7f9 fa0b 	bl	80005f8 <__aeabi_dmul>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	ec43 2b16 	vmov	d6, r2, r3
 80071ea:	4b32      	ldr	r3, [pc, #200]	; (80072b4 <scaraInitDuty+0x5cc>)
 80071ec:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80071f0:	ed93 7b00 	vldr	d7, [r3]
 80071f4:	eeb0 1a47 	vmov.f32	s2, s14
 80071f8:	eef0 1a67 	vmov.f32	s3, s15
 80071fc:	2203      	movs	r2, #3
 80071fe:	eeb0 0a46 	vmov.f32	s0, s12
 8007202:	eef0 0a66 	vmov.f32	s1, s13
 8007206:	2105      	movs	r1, #5
 8007208:	482c      	ldr	r0, [pc, #176]	; (80072bc <scaraInitDuty+0x5d4>)
 800720a:	f000 ff37 	bl	800807c <scaraInitLinear>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007214:	e103      	b.n	800741e <scaraInitDuty+0x736>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007216:	2308      	movs	r3, #8
 8007218:	f000 bcba 	b.w	8007b90 <scaraInitDuty+0xea8>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 800721c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007220:	2b02      	cmp	r3, #2
 8007222:	d17c      	bne.n	800731e <scaraInitDuty+0x636>
			//myDUTY.time_total = command.time_total;
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8007224:	4a23      	ldr	r2, [pc, #140]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007226:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800722a:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800722e:	4b21      	ldr	r3, [pc, #132]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007230:	2202      	movs	r2, #2
 8007232:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8007236:	4b1f      	ldr	r3, [pc, #124]	; (80072b4 <scaraInitDuty+0x5cc>)
 8007238:	2202      	movs	r2, #2
 800723a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			if(command.modeInit_type == DUTY_MODE_INIT_QT){
 800723e:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007242:	2b03      	cmp	r3, #3
 8007244:	d118      	bne.n	8007278 <scaraInitDuty+0x590>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QT, command.time_total);
 8007246:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007254:	607b      	str	r3, [r7, #4]
 8007256:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800725a:	eeb0 1a47 	vmov.f32	s2, s14
 800725e:	eef0 1a67 	vmov.f32	s3, s15
 8007262:	2203      	movs	r2, #3
 8007264:	ed97 0b00 	vldr	d0, [r7]
 8007268:	2104      	movs	r1, #4
 800726a:	4816      	ldr	r0, [pc, #88]	; (80072c4 <scaraInitDuty+0x5dc>)
 800726c:	f000 ff06 	bl	800807c <scaraInitLinear>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8007276:	e027      	b.n	80072c8 <scaraInitDuty+0x5e0>
			}else if(command.modeInit_type == DUTY_MODE_INIT_QV){
 8007278:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800727c:	2b02      	cmp	r3, #2
 800727e:	d116      	bne.n	80072ae <scaraInitDuty+0x5c6>
				status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, fabs(total_s), DUTY_MODE_INIT_QV, command.v_factor);
 8007280:	f8d7 51a0 	ldr.w	r5, [r7, #416]	; 0x1a0
 8007284:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007288:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800728c:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8007290:	eeb0 1a47 	vmov.f32	s2, s14
 8007294:	eef0 1a67 	vmov.f32	s3, s15
 8007298:	2202      	movs	r2, #2
 800729a:	ec46 5b10 	vmov	d0, r5, r6
 800729e:	2104      	movs	r1, #4
 80072a0:	4808      	ldr	r0, [pc, #32]	; (80072c4 <scaraInitDuty+0x5dc>)
 80072a2:	f000 feeb 	bl	800807c <scaraInitLinear>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80072ac:	e00c      	b.n	80072c8 <scaraInitDuty+0x5e0>
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80072ae:	2308      	movs	r3, #8
 80072b0:	f000 bc6e 	b.w	8007b90 <scaraInitDuty+0xea8>
 80072b4:	2000ff30 	.word	0x2000ff30
 80072b8:	20010048 	.word	0x20010048
 80072bc:	20010318 	.word	0x20010318
 80072c0:	200100c8 	.word	0x200100c8
 80072c4:	20010198 	.word	0x20010198
			}
			myDUTY.time_total = myDUTY.task.trajectory_3d.linear.Tf;
 80072c8:	4bab      	ldr	r3, [pc, #684]	; (8007578 <scaraInitDuty+0x890>)
 80072ca:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 80072ce:	49aa      	ldr	r1, [pc, #680]	; (8007578 <scaraInitDuty+0x890>)
 80072d0:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80072d4:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80072d8:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80072dc:	4618      	mov	r0, r3
 80072de:	f7f9 f921 	bl	8000524 <__aeabi_i2d>
 80072e2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80072e6:	f7f9 f987 	bl	80005f8 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	ec43 2b16 	vmov	d6, r2, r3
 80072f2:	4ba1      	ldr	r3, [pc, #644]	; (8007578 <scaraInitDuty+0x890>)
 80072f4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80072f8:	ed93 7b00 	vldr	d7, [r3]
 80072fc:	eeb0 1a47 	vmov.f32	s2, s14
 8007300:	eef0 1a67 	vmov.f32	s3, s15
 8007304:	2203      	movs	r2, #3
 8007306:	eeb0 0a46 	vmov.f32	s0, s12
 800730a:	eef0 0a66 	vmov.f32	s1, s13
 800730e:	2105      	movs	r1, #5
 8007310:	489a      	ldr	r0, [pc, #616]	; (800757c <scaraInitDuty+0x894>)
 8007312:	f000 feb3 	bl	800807c <scaraInitLinear>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 800731c:	e07f      	b.n	800741e <scaraInitDuty+0x736>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == command.trajec_type){
 800731e:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8007322:	2b03      	cmp	r3, #3
 8007324:	d13f      	bne.n	80073a6 <scaraInitDuty+0x6be>
			status1 = SCARA_STATUS_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 800732c:	4a92      	ldr	r2, [pc, #584]	; (8007578 <scaraInitDuty+0x890>)
 800732e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8007332:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_GCODE_LSPB;
 8007336:	4b90      	ldr	r3, [pc, #576]	; (8007578 <scaraInitDuty+0x890>)
 8007338:	2203      	movs	r2, #3
 800733a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800733e:	4b8e      	ldr	r3, [pc, #568]	; (8007578 <scaraInitDuty+0x890>)
 8007340:	2202      	movs	r2, #2
 8007342:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			myDUTY.time_total = command.time_total;
 8007346:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800734a:	498b      	ldr	r1, [pc, #556]	; (8007578 <scaraInitDuty+0x890>)
 800734c:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007350:	e9c1 2300 	strd	r2, r3, [r1]
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total - last_T);
 8007354:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007358:	4618      	mov	r0, r3
 800735a:	f7f9 f8e3 	bl	8000524 <__aeabi_i2d>
 800735e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007362:	f7f9 f949 	bl	80005f8 <__aeabi_dmul>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	ec43 2b18 	vmov	d8, r2, r3
 800736e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8007372:	4b83      	ldr	r3, [pc, #524]	; (8007580 <scaraInitDuty+0x898>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff86 	bl	8000288 <__aeabi_dsub>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	ec43 2b17 	vmov	d7, r2, r3
 8007384:	eeb0 1a47 	vmov.f32	s2, s14
 8007388:	eef0 1a67 	vmov.f32	s3, s15
 800738c:	2203      	movs	r2, #3
 800738e:	eeb0 0a48 	vmov.f32	s0, s16
 8007392:	eef0 0a68 	vmov.f32	s1, s17
 8007396:	2105      	movs	r1, #5
 8007398:	4878      	ldr	r0, [pc, #480]	; (800757c <scaraInitDuty+0x894>)
 800739a:	f000 fe6f 	bl	800807c <scaraInitLinear>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80073a4:	e03b      	b.n	800741e <scaraInitDuty+0x736>
		}else if(DUTY_TRAJECTORY_BEZIER_CURVE == command.trajec_type){
 80073a6:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d135      	bne.n	800741a <scaraInitDuty+0x732>
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80073ae:	4a72      	ldr	r2, [pc, #456]	; (8007578 <scaraInitDuty+0x890>)
 80073b0:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80073b4:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_BEZIER_CURVE;
 80073b8:	4b6f      	ldr	r3, [pc, #444]	; (8007578 <scaraInitDuty+0x890>)
 80073ba:	2204      	movs	r2, #4
 80073bc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.time_total = command.time_total;
 80073c0:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80073c4:	496c      	ldr	r1, [pc, #432]	; (8007578 <scaraInitDuty+0x890>)
 80073c6:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80073ca:	e9c1 2300 	strd	r2, r3, [r1]
			status1 = SCARA_STATUS_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, myDUTY.time_total);
 80073d4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80073d8:	4618      	mov	r0, r3
 80073da:	f7f9 f8a3 	bl	8000524 <__aeabi_i2d>
 80073de:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80073e2:	f7f9 f909 	bl	80005f8 <__aeabi_dmul>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	ec43 2b16 	vmov	d6, r2, r3
 80073ee:	4b62      	ldr	r3, [pc, #392]	; (8007578 <scaraInitDuty+0x890>)
 80073f0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80073f4:	ed93 7b00 	vldr	d7, [r3]
 80073f8:	eeb0 1a47 	vmov.f32	s2, s14
 80073fc:	eef0 1a67 	vmov.f32	s3, s15
 8007400:	2203      	movs	r2, #3
 8007402:	eeb0 0a46 	vmov.f32	s0, s12
 8007406:	eef0 0a66 	vmov.f32	s1, s13
 800740a:	2105      	movs	r1, #5
 800740c:	485b      	ldr	r0, [pc, #364]	; (800757c <scaraInitDuty+0x894>)
 800740e:	f000 fe35 	bl	800807c <scaraInitLinear>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007418:	e001      	b.n	800741e <scaraInitDuty+0x736>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800741a:	2305      	movs	r3, #5
 800741c:	e3b8      	b.n	8007b90 <scaraInitDuty+0xea8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 800741e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <scaraInitDuty+0x744>
			return status1;
 8007426:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800742a:	e3b1      	b.n	8007b90 <scaraInitDuty+0xea8>
		}
		if ( SCARA_STATUS_OK != status2) {
 800742c:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 837f 	beq.w	8007b34 <scaraInitDuty+0xe4c>
			return status2;
 8007436:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800743a:	e3a9      	b.n	8007b90 <scaraInitDuty+0xea8>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 800743c:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8007440:	2b01      	cmp	r3, #1
 8007442:	f040 8375 	bne.w	8007b30 <scaraInitDuty+0xe48>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8007446:	4b4c      	ldr	r3, [pc, #304]	; (8007578 <scaraInitDuty+0x890>)
 8007448:	2201      	movs	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 800744c:	4b4d      	ldr	r3, [pc, #308]	; (8007584 <scaraInitDuty+0x89c>)
 800744e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007452:	4949      	ldr	r1, [pc, #292]	; (8007578 <scaraInitDuty+0x890>)
 8007454:	f601 2118 	addw	r1, r1, #2584	; 0xa18
 8007458:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 800745c:	4b49      	ldr	r3, [pc, #292]	; (8007584 <scaraInitDuty+0x89c>)
 800745e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007462:	4945      	ldr	r1, [pc, #276]	; (8007578 <scaraInitDuty+0x890>)
 8007464:	f501 6122 	add.w	r1, r1, #2592	; 0xa20
 8007468:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 800746c:	4b45      	ldr	r3, [pc, #276]	; (8007584 <scaraInitDuty+0x89c>)
 800746e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007472:	4941      	ldr	r1, [pc, #260]	; (8007578 <scaraInitDuty+0x890>)
 8007474:	f601 2128 	addw	r1, r1, #2600	; 0xa28
 8007478:	e9c1 2300 	strd	r2, r3, [r1]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 800747c:	4b41      	ldr	r3, [pc, #260]	; (8007584 <scaraInitDuty+0x89c>)
 800747e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007482:	493d      	ldr	r1, [pc, #244]	; (8007578 <scaraInitDuty+0x890>)
 8007484:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8007488:	e9c1 2300 	strd	r2, r3, [r1]

		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 800748c:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8007490:	a337      	add	r3, pc, #220	; (adr r3, 8007570 <scaraInitDuty+0x888>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f9 f8af 	bl	80005f8 <__aeabi_dmul>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4610      	mov	r0, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	4b38      	ldr	r3, [pc, #224]	; (8007588 <scaraInitDuty+0x8a0>)
 80074a8:	f7f9 f9d0 	bl	800084c <__aeabi_ddiv>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80074b4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d12c      	bne.n	8007516 <scaraInitDuty+0x82e>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80074bc:	4b31      	ldr	r3, [pc, #196]	; (8007584 <scaraInitDuty+0x89c>)
 80074be:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80074c2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80074c6:	f7f8 fee1 	bl	800028c <__adddf3>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80074d2:	4b2c      	ldr	r3, [pc, #176]	; (8007584 <scaraInitDuty+0x89c>)
 80074d4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80074d8:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80074dc:	f7f8 fed6 	bl	800028c <__adddf3>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80074e8:	4b26      	ldr	r3, [pc, #152]	; (8007584 <scaraInitDuty+0x89c>)
 80074ea:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80074ee:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80074f2:	f7f8 fecb 	bl	800028c <__adddf3>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80074fe:	4b21      	ldr	r3, [pc, #132]	; (8007584 <scaraInitDuty+0x89c>)
 8007500:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007504:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007508:	f7f8 fec0 	bl	800028c <__adddf3>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 8007514:	e016      	b.n	8007544 <scaraInitDuty+0x85c>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8007516:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800751a:	2b00      	cmp	r3, #0
 800751c:	d110      	bne.n	8007540 <scaraInitDuty+0x858>
			target_point.x 		= command.target_point.x;
 800751e:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8007522:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			target_point.y 		= command.target_point.y;
 8007526:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800752a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			target_point.z 		= command.target_point.z;
 800752e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007532:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			target_point.roll	= command.target_point.roll;
 8007536:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800753a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
 800753e:	e001      	b.n	8007544 <scaraInitDuty+0x85c>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8007540:	230c      	movs	r3, #12
 8007542:	e325      	b.n	8007b90 <scaraInitDuty+0xea8>
		}

		if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8007544:	4c0f      	ldr	r4, [pc, #60]	; (8007584 <scaraInitDuty+0x89c>)
 8007546:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 800754a:	4668      	mov	r0, sp
 800754c:	f104 0308 	add.w	r3, r4, #8
 8007550:	22b8      	movs	r2, #184	; 0xb8
 8007552:	4619      	mov	r1, r3
 8007554:	f00e ffb4 	bl	80164c0 <memcpy>
 8007558:	e894 000c 	ldmia.w	r4, {r2, r3}
 800755c:	4628      	mov	r0, r5
 800755e:	f7fe f89b 	bl	8005698 <kinematicInverse>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d111      	bne.n	800758c <scaraInitDuty+0x8a4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8007568:	2307      	movs	r3, #7
 800756a:	e311      	b.n	8007b90 <scaraInitDuty+0xea8>
 800756c:	f3af 8000 	nop.w
 8007570:	60000000 	.word	0x60000000
 8007574:	400921fb 	.word	0x400921fb
 8007578:	2000ff30 	.word	0x2000ff30
 800757c:	20010318 	.word	0x20010318
 8007580:	2000fd38 	.word	0x2000fd38
 8007584:	20010af0 	.word	0x20010af0
 8007588:	40668000 	.word	0x40668000
		}
		// Trajectory 4 profile
		double q[4];
		q[0] = target_point.Theta1 - positionCurrent.Theta1;
 800758c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007590:	4bc4      	ldr	r3, [pc, #784]	; (80078a4 <scaraInitDuty+0xbbc>)
 8007592:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007596:	f7f8 fe77 	bl	8000288 <__aeabi_dsub>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	f107 0108 	add.w	r1, r7, #8
 80075a2:	e9c1 2300 	strd	r2, r3, [r1]
		q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80075a6:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80075aa:	4bbe      	ldr	r3, [pc, #760]	; (80078a4 <scaraInitDuty+0xbbc>)
 80075ac:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80075b0:	f7f8 fe6a 	bl	8000288 <__aeabi_dsub>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	f107 0108 	add.w	r1, r7, #8
 80075bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		q[2] = target_point.D3 	   - positionCurrent.D3;
 80075c0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80075c4:	4bb7      	ldr	r3, [pc, #732]	; (80078a4 <scaraInitDuty+0xbbc>)
 80075c6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80075ca:	f7f8 fe5d 	bl	8000288 <__aeabi_dsub>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	f107 0108 	add.w	r1, r7, #8
 80075d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		q[3] = target_point.Theta4 - positionCurrent.Theta4;
 80075da:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80075de:	4bb1      	ldr	r3, [pc, #708]	; (80078a4 <scaraInitDuty+0xbbc>)
 80075e0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80075e4:	f7f8 fe50 	bl	8000288 <__aeabi_dsub>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80075f4:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f040 8146 	bne.w	800788a <scaraInitDuty+0xba2>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80075fe:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007602:	2b01      	cmp	r3, #1
 8007604:	d161      	bne.n	80076ca <scaraInitDuty+0x9e2>
				for ( uint8_t i = 0; i < 4; i++) {
 8007606:	2300      	movs	r3, #0
 8007608:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800760c:	e051      	b.n	80076b2 <scaraInitDuty+0x9ca>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800760e:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007612:	49a5      	ldr	r1, [pc, #660]	; (80078a8 <scaraInitDuty+0xbc0>)
 8007614:	4613      	mov	r3, r2
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	01db      	lsls	r3, r3, #7
 800761c:	440b      	add	r3, r1
 800761e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8007626:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 800762a:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 800762e:	4c9e      	ldr	r4, [pc, #632]	; (80078a8 <scaraInitDuty+0xbc0>)
 8007630:	4613      	mov	r3, r2
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	4413      	add	r3, r2
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	4423      	add	r3, r4
 800763a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800763e:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB1(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8007642:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8007646:	4613      	mov	r3, r2
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	4413      	add	r3, r2
 800764c:	01db      	lsls	r3, r3, #7
 800764e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007652:	4a95      	ldr	r2, [pc, #596]	; (80078a8 <scaraInitDuty+0xbc0>)
 8007654:	1898      	adds	r0, r3, r2
 8007656:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800765a:	4a94      	ldr	r2, [pc, #592]	; (80078ac <scaraInitDuty+0xbc4>)
 800765c:	5cd1      	ldrb	r1, [r2, r3]
 800765e:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007662:	f107 0208 	add.w	r2, r7, #8
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	4413      	add	r3, r2
 800766a:	ed93 7b00 	vldr	d7, [r3]
 800766e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007672:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 8007676:	eeb0 2a45 	vmov.f32	s4, s10
 800767a:	eef0 2a65 	vmov.f32	s5, s11
 800767e:	eeb0 1a46 	vmov.f32	s2, s12
 8007682:	eef0 1a66 	vmov.f32	s3, s13
 8007686:	2201      	movs	r2, #1
 8007688:	eeb0 0a47 	vmov.f32	s0, s14
 800768c:	eef0 0a67 	vmov.f32	s1, s15
 8007690:	f000 fd42 	bl	8008118 <scaraInitLSPB1>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 800769a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <scaraInitDuty+0x9c0>
						return status1;
 80076a2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80076a6:	e273      	b.n	8007b90 <scaraInitDuty+0xea8>
				for ( uint8_t i = 0; i < 4; i++) {
 80076a8:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80076ac:	3301      	adds	r3, #1
 80076ae:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80076b2:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d9a9      	bls.n	800760e <scaraInitDuty+0x926>
					}
				}
				myDUTY.time_total = command.time_total;
 80076ba:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80076be:	497a      	ldr	r1, [pc, #488]	; (80078a8 <scaraInitDuty+0xbc0>)
 80076c0:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80076c4:	e9c1 2300 	strd	r2, r3, [r1]
 80076c8:	e234      	b.n	8007b34 <scaraInitDuty+0xe4c>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80076ca:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 80d9 	bne.w	8007886 <scaraInitDuty+0xb9e>
				for ( uint8_t i = 0; i < 4; i++) {
 80076d4:	2300      	movs	r3, #0
 80076d6:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80076da:	e03c      	b.n	8007756 <scaraInitDuty+0xa6e>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80076dc:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 80076e0:	4971      	ldr	r1, [pc, #452]	; (80078a8 <scaraInitDuty+0xbc0>)
 80076e2:	4613      	mov	r3, r2
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4413      	add	r3, r2
 80076e8:	01db      	lsls	r3, r3, #7
 80076ea:	440b      	add	r3, r1
 80076ec:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80076f4:	f897 219d 	ldrb.w	r2, [r7, #413]	; 0x19d
 80076f8:	4613      	mov	r3, r2
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4413      	add	r3, r2
 80076fe:	01db      	lsls	r3, r3, #7
 8007700:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007704:	4a68      	ldr	r2, [pc, #416]	; (80078a8 <scaraInitDuty+0xbc0>)
 8007706:	1898      	adds	r0, r3, r2
 8007708:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800770c:	4a67      	ldr	r2, [pc, #412]	; (80078ac <scaraInitDuty+0xbc4>)
 800770e:	5cd1      	ldrb	r1, [r2, r3]
 8007710:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007714:	f107 0208 	add.w	r2, r7, #8
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4413      	add	r3, r2
 800771c:	ed93 7b00 	vldr	d7, [r3]
 8007720:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007724:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007728:	eeb0 2a45 	vmov.f32	s4, s10
 800772c:	eef0 2a65 	vmov.f32	s5, s11
 8007730:	eeb0 1a46 	vmov.f32	s2, s12
 8007734:	eef0 1a66 	vmov.f32	s3, s13
 8007738:	2200      	movs	r2, #0
 800773a:	eeb0 0a47 	vmov.f32	s0, s14
 800773e:	eef0 0a67 	vmov.f32	s1, s15
 8007742:	f001 ff01 	bl	8009548 <scaraInitLSPB>
 8007746:	4603      	mov	r3, r0
 8007748:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 800774c:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8007750:	3301      	adds	r3, #1
 8007752:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007756:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800775a:	2b03      	cmp	r3, #3
 800775c:	d9be      	bls.n	80076dc <scaraInitDuty+0x9f4>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 800775e:	4b52      	ldr	r3, [pc, #328]	; (80078a8 <scaraInitDuty+0xbc0>)
 8007760:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007770:	2300      	movs	r3, #0
 8007772:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007776:	e02b      	b.n	80077d0 <scaraInitDuty+0xae8>
					if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8007778:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 800777c:	494a      	ldr	r1, [pc, #296]	; (80078a8 <scaraInitDuty+0xbc0>)
 800777e:	4613      	mov	r3, r2
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4413      	add	r3, r2
 8007784:	01db      	lsls	r3, r3, #7
 8007786:	440b      	add	r3, r1
 8007788:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800778c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007790:	4b45      	ldr	r3, [pc, #276]	; (80078a8 <scaraInitDuty+0xbc0>)
 8007792:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f9 f9bd 	bl	8000b18 <__aeabi_dcmpgt>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d010      	beq.n	80077c6 <scaraInitDuty+0xade>
						myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80077a4:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
 80077a8:	493f      	ldr	r1, [pc, #252]	; (80078a8 <scaraInitDuty+0xbc0>)
 80077aa:	4613      	mov	r3, r2
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	4413      	add	r3, r2
 80077b0:	01db      	lsls	r3, r3, #7
 80077b2:	440b      	add	r3, r1
 80077b4:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	493a      	ldr	r1, [pc, #232]	; (80078a8 <scaraInitDuty+0xbc0>)
 80077be:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 80077c2:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 80077c6:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80077ca:	3301      	adds	r3, #1
 80077cc:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 80077d0:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d9cf      	bls.n	8007778 <scaraInitDuty+0xa90>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 80077d8:	2300      	movs	r3, #0
 80077da:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 80077de:	e04d      	b.n	800787c <scaraInitDuty+0xb94>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80077e0:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80077e4:	4930      	ldr	r1, [pc, #192]	; (80078a8 <scaraInitDuty+0xbc0>)
 80077e6:	4613      	mov	r3, r2
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	01db      	lsls	r3, r3, #7
 80077ee:	440b      	add	r3, r1
 80077f0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80077f8:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 80077fc:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <scaraInitDuty+0xbc0>)
 80077fe:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007806:	4c28      	ldr	r4, [pc, #160]	; (80078a8 <scaraInitDuty+0xbc0>)
 8007808:	4613      	mov	r3, r2
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	4413      	add	r3, r2
 800780e:	01db      	lsls	r3, r3, #7
 8007810:	4423      	add	r3, r4
 8007812:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8007816:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800781a:	f897 219b 	ldrb.w	r2, [r7, #411]	; 0x19b
 800781e:	4613      	mov	r3, r2
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	4413      	add	r3, r2
 8007824:	01db      	lsls	r3, r3, #7
 8007826:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800782a:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <scaraInitDuty+0xbc0>)
 800782c:	1898      	adds	r0, r3, r2
 800782e:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007832:	4a1e      	ldr	r2, [pc, #120]	; (80078ac <scaraInitDuty+0xbc4>)
 8007834:	5cd1      	ldrb	r1, [r2, r3]
 8007836:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800783a:	f107 0208 	add.w	r2, r7, #8
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	4413      	add	r3, r2
 8007842:	ed93 7b00 	vldr	d7, [r3]
 8007846:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800784a:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800784e:	eeb0 2a45 	vmov.f32	s4, s10
 8007852:	eef0 2a65 	vmov.f32	s5, s11
 8007856:	eeb0 1a46 	vmov.f32	s2, s12
 800785a:	eef0 1a66 	vmov.f32	s3, s13
 800785e:	2201      	movs	r2, #1
 8007860:	eeb0 0a47 	vmov.f32	s0, s14
 8007864:	eef0 0a67 	vmov.f32	s1, s15
 8007868:	f001 fe6e 	bl	8009548 <scaraInitLSPB>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007872:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007876:	3301      	adds	r3, #1
 8007878:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800787c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007880:	2b03      	cmp	r3, #3
 8007882:	d9ad      	bls.n	80077e0 <scaraInitDuty+0xaf8>
 8007884:	e156      	b.n	8007b34 <scaraInitDuty+0xe4c>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007886:	2308      	movs	r3, #8
 8007888:	e182      	b.n	8007b90 <scaraInitDuty+0xea8>
			}
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800788a:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800788e:	2b01      	cmp	r3, #1
 8007890:	f040 814c 	bne.w	8007b2c <scaraInitDuty+0xe44>
			// Mode Init Time
			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8007894:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007898:	2b01      	cmp	r3, #1
 800789a:	d167      	bne.n	800796c <scaraInitDuty+0xc84>
				for ( uint8_t i = 0; i < 4; i++) {
 800789c:	2300      	movs	r3, #0
 800789e:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 80078a2:	e057      	b.n	8007954 <scaraInitDuty+0xc6c>
 80078a4:	20010af0 	.word	0x20010af0
 80078a8:	2000ff30 	.word	0x2000ff30
 80078ac:	20004088 	.word	0x20004088
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80078b0:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80078b4:	49bb      	ldr	r1, [pc, #748]	; (8007ba4 <scaraInitDuty+0xebc>)
 80078b6:	4613      	mov	r3, r2
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	4413      	add	r3, r2
 80078bc:	01db      	lsls	r3, r3, #7
 80078be:	440b      	add	r3, r1
 80078c0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80078c4:	2201      	movs	r2, #1
 80078c6:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80078c8:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80078cc:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 80078d0:	4cb4      	ldr	r4, [pc, #720]	; (8007ba4 <scaraInitDuty+0xebc>)
 80078d2:	4613      	mov	r3, r2
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	4413      	add	r3, r2
 80078d8:	01db      	lsls	r3, r3, #7
 80078da:	4423      	add	r3, r4
 80078dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e0:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve1(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80078e4:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 80078e8:	4613      	mov	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	4413      	add	r3, r2
 80078ee:	01db      	lsls	r3, r3, #7
 80078f0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80078f4:	4aab      	ldr	r2, [pc, #684]	; (8007ba4 <scaraInitDuty+0xebc>)
 80078f6:	1898      	adds	r0, r3, r2
 80078f8:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 80078fc:	4aaa      	ldr	r2, [pc, #680]	; (8007ba8 <scaraInitDuty+0xec0>)
 80078fe:	5cd1      	ldrb	r1, [r2, r3]
 8007900:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007904:	f107 0208 	add.w	r2, r7, #8
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	4413      	add	r3, r2
 800790c:	ed93 7b00 	vldr	d7, [r3]
 8007910:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007914:	ed97 5b7c 	vldr	d5, [r7, #496]	; 0x1f0
 8007918:	eeb0 2a45 	vmov.f32	s4, s10
 800791c:	eef0 2a65 	vmov.f32	s5, s11
 8007920:	eeb0 1a46 	vmov.f32	s2, s12
 8007924:	eef0 1a66 	vmov.f32	s3, s13
 8007928:	2201      	movs	r2, #1
 800792a:	eeb0 0a47 	vmov.f32	s0, s14
 800792e:	eef0 0a67 	vmov.f32	s1, s15
 8007932:	f000 feb5 	bl	80086a0 <scaraInitScurve1>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);
					if(status1 != SCARA_STATUS_OK){
 800793c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <scaraInitDuty+0xc62>
						return status1;
 8007944:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007948:	e122      	b.n	8007b90 <scaraInitDuty+0xea8>
				for ( uint8_t i = 0; i < 4; i++) {
 800794a:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800794e:	3301      	adds	r3, #1
 8007950:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007954:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007958:	2b03      	cmp	r3, #3
 800795a:	d9a9      	bls.n	80078b0 <scaraInitDuty+0xbc8>
					}
				}
				myDUTY.time_total = command.time_total;
 800795c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8007960:	4990      	ldr	r1, [pc, #576]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007962:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007966:	e9c1 2300 	strd	r2, r3, [r1]
 800796a:	e0e3      	b.n	8007b34 <scaraInitDuty+0xe4c>
			// Mode Init Acc
			} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800796c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8007970:	2b00      	cmp	r3, #0
 8007972:	f040 80d9 	bne.w	8007b28 <scaraInitDuty+0xe40>
				for ( uint8_t i = 0; i < 4; i++) {
 8007976:	2300      	movs	r3, #0
 8007978:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 800797c:	e03c      	b.n	80079f8 <scaraInitDuty+0xd10>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800797e:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 8007982:	4988      	ldr	r1, [pc, #544]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007984:	4613      	mov	r3, r2
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	4413      	add	r3, r2
 800798a:	01db      	lsls	r3, r3, #7
 800798c:	440b      	add	r3, r1
 800798e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007992:	2201      	movs	r2, #1
 8007994:	701a      	strb	r2, [r3, #0]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007996:	f897 2199 	ldrb.w	r2, [r7, #409]	; 0x199
 800799a:	4613      	mov	r3, r2
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	4413      	add	r3, r2
 80079a0:	01db      	lsls	r3, r3, #7
 80079a2:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80079a6:	4a7f      	ldr	r2, [pc, #508]	; (8007ba4 <scaraInitDuty+0xebc>)
 80079a8:	1898      	adds	r0, r3, r2
 80079aa:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80079ae:	4a7e      	ldr	r2, [pc, #504]	; (8007ba8 <scaraInitDuty+0xec0>)
 80079b0:	5cd1      	ldrb	r1, [r2, r3]
 80079b2:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80079b6:	f107 0208 	add.w	r2, r7, #8
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	4413      	add	r3, r2
 80079be:	ed93 7b00 	vldr	d7, [r3]
 80079c2:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80079c6:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80079ca:	eeb0 2a45 	vmov.f32	s4, s10
 80079ce:	eef0 2a65 	vmov.f32	s5, s11
 80079d2:	eeb0 1a46 	vmov.f32	s2, s12
 80079d6:	eef0 1a66 	vmov.f32	s3, s13
 80079da:	2200      	movs	r2, #0
 80079dc:	eeb0 0a47 	vmov.f32	s0, s14
 80079e0:	eef0 0a67 	vmov.f32	s1, s15
 80079e4:	f002 f982 	bl	8009cec <scaraInitScurve>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 80079ee:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80079f2:	3301      	adds	r3, #1
 80079f4:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 80079f8:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d9be      	bls.n	800797e <scaraInitDuty+0xc96>
										q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				}
				myDUTY.time_total = 0;
 8007a00:	4b68      	ldr	r3, [pc, #416]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007a02:	f603 2138 	addw	r1, r3, #2616	; 0xa38
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007a12:	2300      	movs	r3, #0
 8007a14:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007a18:	e02b      	b.n	8007a72 <scaraInitDuty+0xd8a>
					if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8007a1a:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007a1e:	4961      	ldr	r1, [pc, #388]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007a20:	4613      	mov	r3, r2
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	4413      	add	r3, r2
 8007a26:	01db      	lsls	r3, r3, #7
 8007a28:	440b      	add	r3, r1
 8007a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a32:	4b5c      	ldr	r3, [pc, #368]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007a34:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f7f9 f86c 	bl	8000b18 <__aeabi_dcmpgt>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d010      	beq.n	8007a68 <scaraInitDuty+0xd80>
						myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8007a46:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8007a4a:	4956      	ldr	r1, [pc, #344]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	4413      	add	r3, r2
 8007a52:	01db      	lsls	r3, r3, #7
 8007a54:	440b      	add	r3, r1
 8007a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	4951      	ldr	r1, [pc, #324]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007a60:	f601 2138 	addw	r1, r1, #2616	; 0xa38
 8007a64:	e9c1 2300 	strd	r2, r3, [r1]
				for ( uint8_t i = 0; i < 4; i++) {
 8007a68:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 8007a72:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d9cf      	bls.n	8007a1a <scaraInitDuty+0xd32>
					}
				}
				for ( uint8_t i = 0; i < 4; i++) {
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007a80:	e04d      	b.n	8007b1e <scaraInitDuty+0xe36>
					myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8007a82:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007a86:	4947      	ldr	r1, [pc, #284]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007a88:	4613      	mov	r3, r2
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	4413      	add	r3, r2
 8007a8e:	01db      	lsls	r3, r3, #7
 8007a90:	440b      	add	r3, r1
 8007a92:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007a96:	2201      	movs	r2, #1
 8007a98:	701a      	strb	r2, [r3, #0]
					myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8007a9a:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007a9e:	4b41      	ldr	r3, [pc, #260]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007aa0:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007aa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007aa8:	4c3e      	ldr	r4, [pc, #248]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007aaa:	4613      	mov	r3, r2
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	4413      	add	r3, r2
 8007ab0:	01db      	lsls	r3, r3, #7
 8007ab2:	4423      	add	r3, r4
 8007ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab8:	e9c3 0100 	strd	r0, r1, [r3]
					status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8007abc:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	01db      	lsls	r3, r3, #7
 8007ac8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007acc:	4a35      	ldr	r2, [pc, #212]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007ace:	1898      	adds	r0, r3, r2
 8007ad0:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007ad4:	4a34      	ldr	r2, [pc, #208]	; (8007ba8 <scaraInitDuty+0xec0>)
 8007ad6:	5cd1      	ldrb	r1, [r2, r3]
 8007ad8:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007adc:	f107 0208 	add.w	r2, r7, #8
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	ed93 7b00 	vldr	d7, [r3]
 8007ae8:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8007aec:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8007af0:	eeb0 2a45 	vmov.f32	s4, s10
 8007af4:	eef0 2a65 	vmov.f32	s5, s11
 8007af8:	eeb0 1a46 	vmov.f32	s2, s12
 8007afc:	eef0 1a66 	vmov.f32	s3, s13
 8007b00:	2201      	movs	r2, #1
 8007b02:	eeb0 0a47 	vmov.f32	s0, s14
 8007b06:	eef0 0a67 	vmov.f32	s1, s15
 8007b0a:	f002 f8ef 	bl	8009cec <scaraInitScurve>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for ( uint8_t i = 0; i < 4; i++) {
 8007b14:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8007b1e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d9ad      	bls.n	8007a82 <scaraInitDuty+0xd9a>
 8007b26:	e005      	b.n	8007b34 <scaraInitDuty+0xe4c>
										q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				}

			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8007b28:	2308      	movs	r3, #8
 8007b2a:	e031      	b.n	8007b90 <scaraInitDuty+0xea8>
			}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8007b2c:	2305      	movs	r3, #5
 8007b2e:	e02f      	b.n	8007b90 <scaraInitDuty+0xea8>
			}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007b30:	2302      	movs	r3, #2
 8007b32:	e02d      	b.n	8007b90 <scaraInitDuty+0xea8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8007b34:	491d      	ldr	r1, [pc, #116]	; (8007bac <scaraInitDuty+0xec4>)
 8007b36:	f04f 0200 	mov.w	r2, #0
 8007b3a:	f04f 0300 	mov.w	r3, #0
 8007b3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8007b42:	4b18      	ldr	r3, [pc, #96]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007b44:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	4917      	ldr	r1, [pc, #92]	; (8007bac <scaraInitDuty+0xec4>)
 8007b4e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionNext.t = 0;
 8007b52:	4917      	ldr	r1, [pc, #92]	; (8007bb0 <scaraInitDuty+0xec8>)
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8007b60:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007b62:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	4911      	ldr	r1, [pc, #68]	; (8007bb0 <scaraInitDuty+0xec8>)
 8007b6c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	positionTrue.t = 0;
 8007b70:	4910      	ldr	r1, [pc, #64]	; (8007bb4 <scaraInitDuty+0xecc>)
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8007b7e:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <scaraInitDuty+0xebc>)
 8007b80:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	490a      	ldr	r1, [pc, #40]	; (8007bb4 <scaraInitDuty+0xecc>)
 8007b8a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return SCARA_STATUS_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8007b96:	46bd      	mov	sp, r7
 8007b98:	ecbd 8b02 	vpop	{d8}
 8007b9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ba0:	b004      	add	sp, #16
 8007ba2:	4770      	bx	lr
 8007ba4:	2000ff30 	.word	0x2000ff30
 8007ba8:	20004088 	.word	0x20004088
 8007bac:	20010af0 	.word	0x20010af0
 8007bb0:	20010c70 	.word	0x20010c70
 8007bb4:	20010bb0 	.word	0x20010bb0

08007bb8 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8007bb8:	b082      	sub	sp, #8
 8007bba:	b5b0      	push	{r4, r5, r7, lr}
 8007bbc:	b0b0      	sub	sp, #192	; 0xc0
 8007bbe:	af2e      	add	r7, sp, #184	; 0xb8
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	f107 0118 	add.w	r1, r7, #24
 8007bc6:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8007bca:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8007bce:	4668      	mov	r0, sp
 8007bd0:	f107 0320 	add.w	r3, r7, #32
 8007bd4:	22b8      	movs	r2, #184	; 0xb8
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	f00e fc72 	bl	80164c0 <memcpy>
 8007bdc:	f107 0318 	add.w	r3, r7, #24
 8007be0:	cb0c      	ldmia	r3, {r2, r3}
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7fd fd58 	bl	8005698 <kinematicInverse>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007bee:	2307      	movs	r3, #7
 8007bf0:	e08e      	b.n	8007d10 <scaraInitLine+0x158>
	}
	// Init line params
	line->x1 = end.x;
 8007bf2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	line->y1 = end.y;
 8007bfc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8007c00:	6879      	ldr	r1, [r7, #4]
 8007c02:	e9c1 2306 	strd	r2, r3, [r1, #24]
	line->z1 = end.z;
 8007c06:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	line->x0 = start.x;
 8007c10:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	e9c1 2300 	strd	r2, r3, [r1]
	line->y0 = start.y;
 8007c1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	e9c1 2304 	strd	r2, r3, [r1, #16]
	line->z0 = start.z;
 8007c24:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	line->denta_x = end.x  -  start.x;
 8007c2e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8007c32:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007c36:	f7f8 fb27 	bl	8000288 <__aeabi_dsub>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8007c44:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007c48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007c4c:	f7f8 fb1c 	bl	8000288 <__aeabi_dsub>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8007c5a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8007c5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007c62:	f7f8 fb11 	bl	8000288 <__aeabi_dsub>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007c7c:	f7f8 fcbc 	bl	80005f8 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4614      	mov	r4, r2
 8007c86:	461d      	mov	r5, r3
			       +(line->denta_y)*(line->denta_y)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007c94:	f7f8 fcb0 	bl	80005f8 <__aeabi_dmul>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f7f8 faf4 	bl	800028c <__adddf3>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4614      	mov	r4, r2
 8007caa:	461d      	mov	r5, r3
				   +(line->denta_z)*(line->denta_z));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007cb8:	f7f8 fc9e 	bl	80005f8 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	f7f8 fae2 	bl	800028c <__adddf3>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	ec43 2b17 	vmov	d7, r2, r3
 8007cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8007cd4:	eef0 0a67 	vmov.f32	s1, s15
 8007cd8:	f013 fa02 	bl	801b0e0 <sqrt>
 8007cdc:	eeb0 7a40 	vmov.f32	s14, s0
 8007ce0:	eef0 7a60 	vmov.f32	s15, s1
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = line->y0;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	line->z_current = line->z0;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return SCARA_STATUS_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007d1a:	b002      	add	sp, #8
 8007d1c:	4770      	bx	lr
	...

08007d20 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8007d20:	b082      	sub	sp, #8
 8007d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d26:	b0c5      	sub	sp, #276	; 0x114
 8007d28:	af2e      	add	r7, sp, #184	; 0xb8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007d30:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8007d34:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8007d38:	4668      	mov	r0, sp
 8007d3a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007d3e:	22b8      	movs	r2, #184	; 0xb8
 8007d40:	4619      	mov	r1, r3
 8007d42:	f00e fbbd 	bl	80164c0 <memcpy>
 8007d46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d4a:	cb0c      	ldmia	r3, {r2, r3}
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7fd fca3 	bl	8005698 <kinematicInverse>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007d58:	2307      	movs	r3, #7
 8007d5a:	e17b      	b.n	8008054 <scaraInitCircle+0x334>
	}

//	if( 1 != dir && -1 != dir) {
//		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
//	}
	if(dir != 1 && dir != -1){
 8007d5c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d006      	beq.n	8007d72 <scaraInitCircle+0x52>
 8007d64:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d001      	beq.n	8007d72 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8007d6e:	2306      	movs	r3, #6
 8007d70:	e170      	b.n	8008054 <scaraInitCircle+0x334>
	}

	double x_start, y_start, x_stop, y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	x_start = start.x - center.x;
 8007d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d76:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007d7a:	f7f8 fa85 	bl	8000288 <__aeabi_dsub>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	y_start = start.y - center.y;
 8007d86:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007d8a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007d8e:	f7f8 fa7b 	bl	8000288 <__aeabi_dsub>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	x_stop  = end.x  - center.x;
 8007d9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007d9e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8007da2:	f7f8 fa71 	bl	8000288 <__aeabi_dsub>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	y_stop  = end.y  - center.y;
 8007dae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007db2:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8007db6:	f7f8 fa67 	bl	8000288 <__aeabi_dsub>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	r1 = sqrt(x_start*x_start + y_start*y_start);
 8007dc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007dc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007dca:	f7f8 fc15 	bl	80005f8 <__aeabi_dmul>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4692      	mov	sl, r2
 8007dd4:	469b      	mov	fp, r3
 8007dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dda:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007dde:	f7f8 fc0b 	bl	80005f8 <__aeabi_dmul>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4650      	mov	r0, sl
 8007de8:	4659      	mov	r1, fp
 8007dea:	f7f8 fa4f 	bl	800028c <__adddf3>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	ec43 2b17 	vmov	d7, r2, r3
 8007df6:	eeb0 0a47 	vmov.f32	s0, s14
 8007dfa:	eef0 0a67 	vmov.f32	s1, s15
 8007dfe:	f013 f96f 	bl	801b0e0 <sqrt>
 8007e02:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	r2 = sqrt(x_stop*x_stop + y_stop*y_stop);
 8007e06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007e0e:	f7f8 fbf3 	bl	80005f8 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4692      	mov	sl, r2
 8007e18:	469b      	mov	fp, r3
 8007e1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e1e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e22:	f7f8 fbe9 	bl	80005f8 <__aeabi_dmul>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	f7f8 fa2d 	bl	800028c <__adddf3>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	ec43 2b17 	vmov	d7, r2, r3
 8007e3a:	eeb0 0a47 	vmov.f32	s0, s14
 8007e3e:	eef0 0a67 	vmov.f32	s1, s15
 8007e42:	f013 f94d 	bl	801b0e0 <sqrt>
 8007e46:	ed87 0b08 	vstr	d0, [r7, #32]

	if( 1.0 < fabs(r1 - r2)) {
 8007e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e52:	f7f8 fa19 	bl	8000288 <__aeabi_dsub>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4690      	mov	r8, r2
 8007e5c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	4b84      	ldr	r3, [pc, #528]	; (8008078 <scaraInitCircle+0x358>)
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 fe55 	bl	8000b18 <__aeabi_dcmpgt>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8007e74:	2306      	movs	r3, #6
 8007e76:	e0ed      	b.n	8008054 <scaraInitCircle+0x334>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8007e78:	a37b      	add	r3, pc, #492	; (adr r3, 8008068 <scaraInitCircle+0x348>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e82:	f7f8 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d109      	bne.n	8007ea0 <scaraInitCircle+0x180>
 8007e8c:	a376      	add	r3, pc, #472	; (adr r3, 8008068 <scaraInitCircle+0x348>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e96:	f7f8 fe21 	bl	8000adc <__aeabi_dcmplt>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	e0d7      	b.n	8008054 <scaraInitCircle+0x334>
	}

	angle_start = atan2(y_start, x_start);
 8007ea4:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8007ea8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8007eac:	f013 f916 	bl	801b0dc <atan2>
 8007eb0:	ed87 0b06 	vstr	d0, [r7, #24]
	angle_stop  = atan2(y_stop, x_stop);
 8007eb4:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8007eb8:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007ebc:	f013 f90e 	bl	801b0dc <atan2>
 8007ec0:	ed87 0b04 	vstr	d0, [r7, #16]
	delta_angle = angle_stop - angle_start;
 8007ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ecc:	f7f8 f9dc 	bl	8000288 <__aeabi_dsub>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (delta_angle < 0 && dir > 0) {
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ee4:	f7f8 fdfa 	bl	8000adc <__aeabi_dcmplt>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d015      	beq.n	8007f1a <scaraInitCircle+0x1fa>
 8007eee:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dd11      	ble.n	8007f1a <scaraInitCircle+0x1fa>
		delta_angle = 2*PI - fabs(delta_angle); //this state mean that the arc radius is over 180
 8007ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f00:	607b      	str	r3, [r7, #4]
 8007f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f06:	a15a      	add	r1, pc, #360	; (adr r1, 8008070 <scaraInitCircle+0x350>)
 8007f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f0c:	f7f8 f9bc 	bl	8000288 <__aeabi_dsub>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8007f18:	e01d      	b.n	8007f56 <scaraInitCircle+0x236>
	}else if(delta_angle > 0 && dir < 0){
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f26:	f7f8 fdf7 	bl	8000b18 <__aeabi_dcmpgt>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d012      	beq.n	8007f56 <scaraInitCircle+0x236>
 8007f30:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	da0e      	bge.n	8007f56 <scaraInitCircle+0x236>
		delta_angle = 2*PI - fabs(delta_angle);
 8007f38:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8007f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f3c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007f40:	4622      	mov	r2, r4
 8007f42:	462b      	mov	r3, r5
 8007f44:	a14a      	add	r1, pc, #296	; (adr r1, 8008070 <scaraInitCircle+0x350>)
 8007f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f4a:	f7f8 f99d 	bl	8000288 <__aeabi_dsub>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}
	if(delta_angle*dir < 0){
 8007f56:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8007f5a:	f7f8 fae3 	bl	8000524 <__aeabi_i2d>
 8007f5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f62:	f7f8 fb49 	bl	80005f8 <__aeabi_dmul>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	f7f8 fdb1 	bl	8000adc <__aeabi_dcmplt>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <scaraInitCircle+0x26c>
		delta_angle = fabs(delta_angle);
 8007f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f82:	653b      	str	r3, [r7, #80]	; 0x50
 8007f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f8a:	657b      	str	r3, [r7, #84]	; 0x54

//	if ( 0 > dir) {
//		delta_angle = 2*PI - delta_angle;
//	}
	// Init circle params
	circle->dir = dir;
 8007f8c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007f90:	b25a      	sxtb	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	circle->angle_start = angle_start;
 8007fa0:	68f9      	ldr	r1, [r7, #12]
 8007fa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fa6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	circle->angle_stop  = angle_stop;
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fb0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle->total_angle = delta_angle;
 8007fb4:	68f9      	ldr	r1, [r7, #12]
 8007fb6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fba:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8007fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007fc6:	f7f8 fb17 	bl	80005f8 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	circle->x0 = start.x;
 8007fd4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8007fd8:	68f9      	ldr	r1, [r7, #12]
 8007fda:	e9c1 2308 	strd	r2, r3, [r1, #32]
	circle->y0 = start.y;
 8007fde:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	circle->x1 = end.x;
 8007fe8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8007fec:	68f9      	ldr	r1, [r7, #12]
 8007fee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	circle->y1 = end.y;
 8007ff2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8007ff6:	68f9      	ldr	r1, [r7, #12]
 8007ff8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	circle->xi = center.x;
 8007ffc:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8008000:	68f9      	ldr	r1, [r7, #12]
 8008002:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	circle->yi = center.y;
 8008006:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800800a:	68f9      	ldr	r1, [r7, #12]
 800800c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	circle->z0 = start.z;
 8008010:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008014:	68f9      	ldr	r1, [r7, #12]
 8008016:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	circle->z1 = start.z;
 800801a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	circle->zi = start.z;
 8008024:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008028:	68f9      	ldr	r1, [r7, #12]
 800802a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	circle->x_current = circle->x0;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008034:	68f9      	ldr	r1, [r7, #12]
 8008036:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->y0;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008040:	68f9      	ldr	r1, [r7, #12]
 8008042:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->z0;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800804c:	68f9      	ldr	r1, [r7, #12]
 800804e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	375c      	adds	r7, #92	; 0x5c
 8008058:	46bd      	mov	sp, r7
 800805a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805e:	b002      	add	sp, #8
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	f3af 8000 	nop.w
 8008068:	9999999a 	.word	0x9999999a
 800806c:	3fb99999 	.word	0x3fb99999
 8008070:	60000000 	.word	0x60000000
 8008074:	401921fb 	.word	0x401921fb
 8008078:	3ff00000 	.word	0x3ff00000

0800807c <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double additional_factor)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6178      	str	r0, [r7, #20]
 8008084:	460b      	mov	r3, r1
 8008086:	ed87 0b02 	vstr	d0, [r7, #8]
 800808a:	ed87 1b00 	vstr	d1, [r7]
 800808e:	74fb      	strb	r3, [r7, #19]
 8008090:	4613      	mov	r3, r2
 8008092:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8008094:	7cfb      	ldrb	r3, [r7, #19]
 8008096:	2b04      	cmp	r3, #4
 8008098:	d004      	beq.n	80080a4 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 800809a:	7cfb      	ldrb	r3, [r7, #19]
 800809c:	2b05      	cmp	r3, #5
 800809e:	d001      	beq.n	80080a4 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 80080a0:	2306      	movs	r3, #6
 80080a2:	e032      	b.n	800810a <scaraInitLinear+0x8e>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 80080a4:	7cbb      	ldrb	r3, [r7, #18]
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d110      	bne.n	80080cc <scaraInitLinear+0x50>
		linear->constant_v = total_s / additional_factor;
 80080aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080b2:	f7f8 fbcb 	bl	800084c <__aeabi_ddiv>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	6979      	ldr	r1, [r7, #20]
 80080bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = additional_factor;
 80080c0:	6979      	ldr	r1, [r7, #20]
 80080c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80080ca:	e01d      	b.n	8008108 <scaraInitLinear+0x8c>
		//linear->number_of_sample = ceilf(additional_factor / T_SAMPLING); // ceiling
	}else if(modeinit == DUTY_MODE_INIT_QV){
 80080cc:	7cbb      	ldrb	r3, [r7, #18]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d118      	bne.n	8008104 <scaraInitLinear+0x88>
		linear->constant_v = additional_factor * V_MOVE_MAX;
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <scaraInitLinear+0x98>)
 80080d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080dc:	f7f8 fa8c 	bl	80005f8 <__aeabi_dmul>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	6979      	ldr	r1, [r7, #20]
 80080e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		linear->Tf = total_s / linear->constant_v;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80080f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080f4:	f7f8 fbaa 	bl	800084c <__aeabi_ddiv>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	6979      	ldr	r1, [r7, #20]
 80080fe:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8008102:	e001      	b.n	8008108 <scaraInitLinear+0x8c>
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008104:	2306      	movs	r3, #6
 8008106:	e000      	b.n	800810a <scaraInitLinear+0x8e>
	}

	return SCARA_STATUS_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	40877000 	.word	0x40877000

08008118 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8008118:	b5b0      	push	{r4, r5, r7, lr}
 800811a:	b096      	sub	sp, #88	; 0x58
 800811c:	af00      	add	r7, sp, #0
 800811e:	61f8      	str	r0, [r7, #28]
 8008120:	460b      	mov	r3, r1
 8008122:	ed87 0b04 	vstr	d0, [r7, #16]
 8008126:	ed87 1b02 	vstr	d1, [r7, #8]
 800812a:	ed87 2b00 	vstr	d2, [r7]
 800812e:	76fb      	strb	r3, [r7, #27]
 8008130:	4613      	mov	r3, r2
 8008132:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008140:	f7f8 fccc 	bl	8000adc <__aeabi_dcmplt>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <scaraInitLSPB1+0x46>
		total_s = -total_s;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008154:	617b      	str	r3, [r7, #20]
		lspb->dir= -1;
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	22ff      	movs	r2, #255	; 0xff
 800815a:	701a      	strb	r2, [r3, #0]
 800815c:	e002      	b.n	8008164 <scaraInitLSPB1+0x4c>
	}else{
		lspb->dir= 1;
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	2201      	movs	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 8008164:	7efb      	ldrb	r3, [r7, #27]
 8008166:	2b04      	cmp	r3, #4
 8008168:	d12c      	bne.n	80081c4 <scaraInitLSPB1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800816a:	7ebb      	ldrb	r3, [r7, #26]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d10f      	bne.n	8008190 <scaraInitLSPB1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 8008170:	f04f 0200 	mov.w	r2, #0
 8008174:	4b98      	ldr	r3, [pc, #608]	; (80083d8 <scaraInitLSPB1+0x2c0>)
 8008176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800817a:	f7f8 fa3d 	bl	80005f8 <__aeabi_dmul>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8008186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800818e:	e073      	b.n	8008278 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008190:	7ebb      	ldrb	r3, [r7, #26]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d170      	bne.n	8008278 <scaraInitLSPB1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 8008196:	f04f 0200 	mov.w	r2, #0
 800819a:	4b90      	ldr	r3, [pc, #576]	; (80083dc <scaraInitLSPB1+0x2c4>)
 800819c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a0:	f7f8 fa2a 	bl	80005f8 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	4b89      	ldr	r3, [pc, #548]	; (80083d8 <scaraInitLSPB1+0x2c0>)
 80081b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081b6:	f7f8 fa1f 	bl	80005f8 <__aeabi_dmul>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80081c2:	e059      	b.n	8008278 <scaraInitLSPB1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 80081c4:	7efb      	ldrb	r3, [r7, #27]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d112      	bne.n	80081f0 <scaraInitLSPB1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80081ca:	7ebb      	ldrb	r3, [r7, #26]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d153      	bne.n	8008278 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 80081d0:	a373      	add	r3, pc, #460	; (adr r3, 80083a0 <scaraInitLSPB1+0x288>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081da:	f7f8 fa0d 	bl	80005f8 <__aeabi_dmul>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 80081e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80081ee:	e043      	b.n	8008278 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J1){
 80081f0:	7efb      	ldrb	r3, [r7, #27]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d112      	bne.n	800821c <scaraInitLSPB1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80081f6:	7ebb      	ldrb	r3, [r7, #26]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d13d      	bne.n	8008278 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 80081fc:	a368      	add	r3, pc, #416	; (adr r3, 80083a0 <scaraInitLSPB1+0x288>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008206:	f7f8 f9f7 	bl	80005f8 <__aeabi_dmul>
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 8008212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008216:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800821a:	e02d      	b.n	8008278 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J2){
 800821c:	7efb      	ldrb	r3, [r7, #27]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d112      	bne.n	8008248 <scaraInitLSPB1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008222:	7ebb      	ldrb	r3, [r7, #26]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d127      	bne.n	8008278 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 8008228:	a35f      	add	r3, pc, #380	; (adr r3, 80083a8 <scaraInitLSPB1+0x290>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008232:	f7f8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800823e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008242:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008246:	e017      	b.n	8008278 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else if(target == TRAJECTORY_J3){
 8008248:	7efb      	ldrb	r3, [r7, #27]
 800824a:	2b03      	cmp	r3, #3
 800824c:	d112      	bne.n	8008274 <scaraInitLSPB1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800824e:	7ebb      	ldrb	r3, [r7, #26]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d111      	bne.n	8008278 <scaraInitLSPB1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 8008254:	a356      	add	r3, pc, #344	; (adr r3, 80083b0 <scaraInitLSPB1+0x298>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800825e:	f7f8 f9cb 	bl	80005f8 <__aeabi_dmul>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			tf = additional_factor;
 800826a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008272:	e001      	b.n	8008278 <scaraInitLSPB1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){

		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8008274:	2306      	movs	r3, #6
 8008276:	e201      	b.n	800867c <scaraInitLSPB1+0x564>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008278:	7ebb      	ldrb	r3, [r7, #26]
 800827a:	2b01      	cmp	r3, #1
 800827c:	f040 80f2 	bne.w	8008464 <scaraInitLSPB1+0x34c>
		if(tf < 0.1 && v_design > 3){ //check if time valid or not
 8008280:	a34d      	add	r3, pc, #308	; (adr r3, 80083b8 <scaraInitLSPB1+0x2a0>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800828a:	f7f8 fc27 	bl	8000adc <__aeabi_dcmplt>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01d      	beq.n	80082d0 <scaraInitLSPB1+0x1b8>
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	4b51      	ldr	r3, [pc, #324]	; (80083e0 <scaraInitLSPB1+0x2c8>)
 800829a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800829e:	f7f8 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d013      	beq.n	80082d0 <scaraInitLSPB1+0x1b8>
			tf = 1.5*total_s/v_design;
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	4b4d      	ldr	r3, [pc, #308]	; (80083e4 <scaraInitLSPB1+0x2cc>)
 80082ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082b2:	f7f8 f9a1 	bl	80005f8 <__aeabi_dmul>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4610      	mov	r0, r2
 80082bc:	4619      	mov	r1, r3
 80082be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082c2:	f7f8 fac3 	bl	800084c <__aeabi_ddiv>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80082ce:	e0a4      	b.n	800841a <scaraInitLSPB1+0x302>
			//return SCARA_STATUS_ERROR_OVER_VELOC;
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 80082d0:	a339      	add	r3, pc, #228	; (adr r3, 80083b8 <scaraInitLSPB1+0x2a0>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082da:	f7f8 fbff 	bl	8000adc <__aeabi_dcmplt>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01d      	beq.n	8008320 <scaraInitLSPB1+0x208>
 80082e4:	a336      	add	r3, pc, #216	; (adr r3, 80083c0 <scaraInitLSPB1+0x2a8>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80082ee:	f7f8 fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d013      	beq.n	8008320 <scaraInitLSPB1+0x208>
			v_design = 1.5*total_s/tf;
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	4b39      	ldr	r3, [pc, #228]	; (80083e4 <scaraInitLSPB1+0x2cc>)
 80082fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008302:	f7f8 f979 	bl	80005f8 <__aeabi_dmul>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4610      	mov	r0, r2
 800830c:	4619      	mov	r1, r3
 800830e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008312:	f7f8 fa9b 	bl	800084c <__aeabi_ddiv>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800831e:	e07c      	b.n	800841a <scaraInitLSPB1+0x302>
		}else if(v_design < 0.1 && tf < 0.1){
 8008320:	a325      	add	r3, pc, #148	; (adr r3, 80083b8 <scaraInitLSPB1+0x2a0>)
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800832a:	f7f8 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <scaraInitLSPB1+0x234>
 8008334:	a320      	add	r3, pc, #128	; (adr r3, 80083b8 <scaraInitLSPB1+0x2a0>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800833e:	f7f8 fbcd 	bl	8000adc <__aeabi_dcmplt>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <scaraInitLSPB1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 8008348:	2309      	movs	r3, #9
 800834a:	e197      	b.n	800867c <scaraInitLSPB1+0x564>
		}
		else{
			if(tf < 0.001){
 800834c:	a31e      	add	r3, pc, #120	; (adr r3, 80083c8 <scaraInitLSPB1+0x2b0>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008356:	f7f8 fbc1 	bl	8000adc <__aeabi_dcmplt>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <scaraInitLSPB1+0x24c>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8008360:	2309      	movs	r3, #9
 8008362:	e18b      	b.n	800867c <scaraInitLSPB1+0x564>
			}else{
				v_lim = total_s/tf;
 8008364:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008368:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800836c:	f7f8 fa6e 	bl	800084c <__aeabi_ddiv>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			}
			if(v_design < 1.1*v_lim){ //the accelaration part is too large
 8008378:	a315      	add	r3, pc, #84	; (adr r3, 80083d0 <scaraInitLSPB1+0x2b8>)
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008382:	f7f8 f939 	bl	80005f8 <__aeabi_dmul>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800838e:	f7f8 fba5 	bl	8000adc <__aeabi_dcmplt>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d027      	beq.n	80083e8 <scaraInitLSPB1+0x2d0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008398:	230a      	movs	r3, #10
 800839a:	e16f      	b.n	800867c <scaraInitLSPB1+0x564>
 800839c:	f3af 8000 	nop.w
 80083a0:	14000000 	.word	0x14000000
 80083a4:	4000f6f0 	.word	0x4000f6f0
 80083a8:	00000000 	.word	0x00000000
 80083ac:	405c2000 	.word	0x405c2000
 80083b0:	6b259425 	.word	0x6b259425
 80083b4:	40069b91 	.word	0x40069b91
 80083b8:	9999999a 	.word	0x9999999a
 80083bc:	3fb99999 	.word	0x3fb99999
 80083c0:	33333333 	.word	0x33333333
 80083c4:	3fc33333 	.word	0x3fc33333
 80083c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80083cc:	3f50624d 	.word	0x3f50624d
 80083d0:	9999999a 	.word	0x9999999a
 80083d4:	3ff19999 	.word	0x3ff19999
 80083d8:	40877000 	.word	0x40877000
 80083dc:	407f4000 	.word	0x407f4000
 80083e0:	40080000 	.word	0x40080000
 80083e4:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 80083e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	f7f7 ff4c 	bl	800028c <__adddf3>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083fc:	f7f8 fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d009      	beq.n	800841a <scaraInitLSPB1+0x302>
				v_design = 2*v_lim;
 8008406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	f7f7 ff3d 	bl	800028c <__adddf3>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 800841a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800841e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008422:	f7f8 fa13 	bl	800084c <__aeabi_ddiv>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800842e:	f7f7 ff2b 	bl	8000288 <__aeabi_dsub>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		a_design = v_design/ta;
 800843a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800843e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008442:	f7f8 fa03 	bl	800084c <__aeabi_ddiv>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		td = tf - ta;
 800844e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008452:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008456:	f7f7 ff17 	bl	8000288 <__aeabi_dsub>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8008462:	e0a9      	b.n	80085b8 <scaraInitLSPB1+0x4a0>

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008464:	7ebb      	ldrb	r3, [r7, #26]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 80a6 	bne.w	80085b8 <scaraInitLSPB1+0x4a0>
		//check qva condition
		if(total_s*a_design > v_design*v_design){ //condition for ta smaller than td
 800846c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008470:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008474:	f7f8 f8c0 	bl	80005f8 <__aeabi_dmul>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4614      	mov	r4, r2
 800847e:	461d      	mov	r5, r3
 8008480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008484:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008488:	f7f8 f8b6 	bl	80005f8 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4620      	mov	r0, r4
 8008492:	4629      	mov	r1, r5
 8008494:	f7f8 fb40 	bl	8000b18 <__aeabi_dcmpgt>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d058      	beq.n	8008550 <scaraInitLSPB1+0x438>
			if(total_s/v_design < 0.3){ //td too small
 800849e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084a6:	f7f8 f9d1 	bl	800084c <__aeabi_ddiv>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4610      	mov	r0, r2
 80084b0:	4619      	mov	r1, r3
 80084b2:	a375      	add	r3, pc, #468	; (adr r3, 8008688 <scaraInitLSPB1+0x570>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f7f8 fb10 	bl	8000adc <__aeabi_dcmplt>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <scaraInitLSPB1+0x3c0>
				//recalculate v_design
				v_design = total_s/0.3;
 80084c2:	a371      	add	r3, pc, #452	; (adr r3, 8008688 <scaraInitLSPB1+0x570>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084cc:	f7f8 f9be 	bl	800084c <__aeabi_ddiv>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.1){ //ta is too small
 80084d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084e0:	f7f8 f9b4 	bl	800084c <__aeabi_ddiv>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4610      	mov	r0, r2
 80084ea:	4619      	mov	r1, r3
 80084ec:	a368      	add	r3, pc, #416	; (adr r3, 8008690 <scaraInitLSPB1+0x578>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f7f8 faf3 	bl	8000adc <__aeabi_dcmplt>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <scaraInitLSPB1+0x3fa>
				//recalculate a_design
				a_design = v_design/0.1;
 80084fc:	a364      	add	r3, pc, #400	; (adr r3, 8008690 <scaraInitLSPB1+0x578>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008506:	f7f8 f9a1 	bl	800084c <__aeabi_ddiv>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8008512:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008516:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800851a:	f7f8 f997 	bl	800084c <__aeabi_ddiv>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = total_s/v_design;
 8008526:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800852a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800852e:	f7f8 f98d 	bl	800084c <__aeabi_ddiv>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			tf = ta + td;
 800853a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800853e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008542:	f7f7 fea3 	bl	800028c <__adddf3>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800854e:	e033      	b.n	80085b8 <scaraInitLSPB1+0x4a0>
//				td = total_s/v_design;
//				tf = ta + td;
//			}

		}else{
			tf = 2*total_s/v_design;
 8008550:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	f7f7 fe98 	bl	800028c <__adddf3>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4610      	mov	r0, r2
 8008562:	4619      	mov	r1, r3
 8008564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008568:	f7f8 f970 	bl	800084c <__aeabi_ddiv>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			ta = tf/2;
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800857c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008580:	f7f8 f964 	bl	800084c <__aeabi_ddiv>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			td = tf/2;
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008594:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008598:	f7f8 f958 	bl	800084c <__aeabi_ddiv>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			a_design = v_design/ta;
 80085a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80085ac:	f7f8 f94e 	bl	800084c <__aeabi_ddiv>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80085b8:	a337      	add	r3, pc, #220	; (adr r3, 8008698 <scaraInitLSPB1+0x580>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80085c2:	f7f8 f943 	bl	800084c <__aeabi_ddiv>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4610      	mov	r0, r2
 80085cc:	4619      	mov	r1, r3
 80085ce:	f7f8 fb0b 	bl	8000be8 <__aeabi_d2f>
 80085d2:	4603      	mov	r3, r0
 80085d4:	ee00 3a10 	vmov	s0, r3
 80085d8:	f012 fd3e 	bl	801b058 <ceilf>
 80085dc:	eef0 7a40 	vmov.f32	s15, s0
 80085e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e4:	ee17 3a90 	vmov	r3, s15
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params

	 lspb->s0 = 0;
 80085ea:	69f9      	ldr	r1, [r7, #28]
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = total_s;
 80085f8:	69f9      	ldr	r1, [r7, #28]
 80085fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80085fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8008602:	69f9      	ldr	r1, [r7, #28]
 8008604:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008608:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 800860c:	69f9      	ldr	r1, [r7, #28]
 800860e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008612:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8008616:	69f9      	ldr	r1, [r7, #28]
 8008618:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800861c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8008620:	69f9      	ldr	r1, [r7, #28]
 8008622:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008626:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 800862a:	69f9      	ldr	r1, [r7, #28]
 800862c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008630:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_design;
 8008634:	69f9      	ldr	r1, [r7, #28]
 8008636:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800863a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = 0;
 800863e:	69f9      	ldr	r1, [r7, #28]
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	f04f 0300 	mov.w	r3, #0
 8008648:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = 0;
 800864c:	69f9      	ldr	r1, [r7, #28]
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865e:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800866c:	f7f7 fe0c 	bl	8000288 <__aeabi_dsub>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	69f9      	ldr	r1, [r7, #28]
 8008676:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3758      	adds	r7, #88	; 0x58
 8008680:	46bd      	mov	sp, r7
 8008682:	bdb0      	pop	{r4, r5, r7, pc}
 8008684:	f3af 8000 	nop.w
 8008688:	33333333 	.word	0x33333333
 800868c:	3fd33333 	.word	0x3fd33333
 8008690:	9999999a 	.word	0x9999999a
 8008694:	3fb99999 	.word	0x3fb99999
 8008698:	40000000 	.word	0x40000000
 800869c:	3f847ae1 	.word	0x3f847ae1

080086a0 <scaraInitScurve1>:
												Trajectory_TargetTypeDef target,
												double total_s,
												ModeInitTypeDef modeinit,
												double v_factor,
												double additional_factor)
{
 80086a0:	b5b0      	push	{r4, r5, r7, lr}
 80086a2:	b094      	sub	sp, #80	; 0x50
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	61f8      	str	r0, [r7, #28]
 80086a8:	460b      	mov	r3, r1
 80086aa:	ed87 0b04 	vstr	d0, [r7, #16]
 80086ae:	ed87 1b02 	vstr	d1, [r7, #8]
 80086b2:	ed87 2b00 	vstr	d2, [r7]
 80086b6:	76fb      	strb	r3, [r7, #27]
 80086b8:	4613      	mov	r3, r2
 80086ba:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	if(total_s < 0){
 80086bc:	f04f 0200 	mov.w	r2, #0
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086c8:	f7f8 fa08 	bl	8000adc <__aeabi_dcmplt>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d009      	beq.n	80086e6 <scaraInitScurve1+0x46>
		total_s = -total_s;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80086dc:	617b      	str	r3, [r7, #20]
		scurve->dir= -1;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	e002      	b.n	80086ec <scaraInitScurve1+0x4c>
	}else{
		scurve->dir= 1;
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	2201      	movs	r2, #1
 80086ea:	701a      	strb	r2, [r3, #0]
	}
	if(target == TRAJECTORY_3D){
 80086ec:	7efb      	ldrb	r3, [r7, #27]
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d12c      	bne.n	800874c <scaraInitScurve1+0xac>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80086f2:	7ebb      	ldrb	r3, [r7, #26]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d10f      	bne.n	8008718 <scaraInitScurve1+0x78>
			v_design = V_MOVE_MAX*v_factor;
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	4b90      	ldr	r3, [pc, #576]	; (8008940 <scaraInitScurve1+0x2a0>)
 80086fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008702:	f7f7 ff79 	bl	80005f8 <__aeabi_dmul>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800870e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008712:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008716:	e073      	b.n	8008800 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008718:	7ebb      	ldrb	r3, [r7, #26]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d170      	bne.n	8008800 <scaraInitScurve1+0x160>
			a_design = A_MOVE_MAX*additional_factor;
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	4b88      	ldr	r3, [pc, #544]	; (8008944 <scaraInitScurve1+0x2a4>)
 8008724:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			v_design = V_MOVE_MAX*v_factor;
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	4b81      	ldr	r3, [pc, #516]	; (8008940 <scaraInitScurve1+0x2a0>)
 800873a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800873e:	f7f7 ff5b 	bl	80005f8 <__aeabi_dmul>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800874a:	e059      	b.n	8008800 <scaraInitScurve1+0x160>
		}
	}else if(target == TRAJECTORY_J0){
 800874c:	7efb      	ldrb	r3, [r7, #27]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d112      	bne.n	8008778 <scaraInitScurve1+0xd8>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8008752:	7ebb      	ldrb	r3, [r7, #26]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d153      	bne.n	8008800 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J0*v_factor;
 8008758:	a36d      	add	r3, pc, #436	; (adr r3, 8008910 <scaraInitScurve1+0x270>)
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008762:	f7f7 ff49 	bl	80005f8 <__aeabi_dmul>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800876e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008772:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008776:	e043      	b.n	8008800 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J1){
 8008778:	7efb      	ldrb	r3, [r7, #27]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d112      	bne.n	80087a4 <scaraInitScurve1+0x104>
		if(modeinit == DUTY_MODE_INIT_QVT){
 800877e:	7ebb      	ldrb	r3, [r7, #26]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d13d      	bne.n	8008800 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J1*v_factor;
 8008784:	a362      	add	r3, pc, #392	; (adr r3, 8008910 <scaraInitScurve1+0x270>)
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800878e:	f7f7 ff33 	bl	80005f8 <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 800879a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800879e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80087a2:	e02d      	b.n	8008800 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J2){
 80087a4:	7efb      	ldrb	r3, [r7, #27]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d112      	bne.n	80087d0 <scaraInitScurve1+0x130>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80087aa:	7ebb      	ldrb	r3, [r7, #26]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d127      	bne.n	8008800 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J2*v_factor;
 80087b0:	a359      	add	r3, pc, #356	; (adr r3, 8008918 <scaraInitScurve1+0x278>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087ba:	f7f7 ff1d 	bl	80005f8 <__aeabi_dmul>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80087c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80087ce:	e017      	b.n	8008800 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else if(target == TRAJECTORY_J3){
 80087d0:	7efb      	ldrb	r3, [r7, #27]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d112      	bne.n	80087fc <scaraInitScurve1+0x15c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 80087d6:	7ebb      	ldrb	r3, [r7, #26]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d111      	bne.n	8008800 <scaraInitScurve1+0x160>
			v_design = V_DESIGN_J3*v_factor;
 80087dc:	a350      	add	r3, pc, #320	; (adr r3, 8008920 <scaraInitScurve1+0x280>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087e6:	f7f7 ff07 	bl	80005f8 <__aeabi_dmul>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tf = additional_factor;
 80087f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80087fa:	e001      	b.n	8008800 <scaraInitScurve1+0x160>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
	
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 80087fc:	2306      	movs	r3, #6
 80087fe:	e24c      	b.n	8008c9a <scaraInitScurve1+0x5fa>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8008800:	7ebb      	ldrb	r3, [r7, #26]
 8008802:	2b01      	cmp	r3, #1
 8008804:	f040 80fc 	bne.w	8008a00 <scaraInitScurve1+0x360>
		if(tf < 0.1 && v_design > 7.5){ //check if time valid or not
 8008808:	a347      	add	r3, pc, #284	; (adr r3, 8008928 <scaraInitScurve1+0x288>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008812:	f7f8 f963 	bl	8000adc <__aeabi_dcmplt>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01d      	beq.n	8008858 <scaraInitScurve1+0x1b8>
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	4b49      	ldr	r3, [pc, #292]	; (8008948 <scaraInitScurve1+0x2a8>)
 8008822:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008826:	f7f8 f977 	bl	8000b18 <__aeabi_dcmpgt>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d013      	beq.n	8008858 <scaraInitScurve1+0x1b8>
			tf = 1.5*total_s/v_design;
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	4b45      	ldr	r3, [pc, #276]	; (800894c <scaraInitScurve1+0x2ac>)
 8008836:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800883a:	f7f7 fedd 	bl	80005f8 <__aeabi_dmul>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800884a:	f7f7 ffff 	bl	800084c <__aeabi_ddiv>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008856:	e094      	b.n	8008982 <scaraInitScurve1+0x2e2>
		}else if(v_design < 0.1 && tf > 0.15){ //check if velocity valid or not
 8008858:	a333      	add	r3, pc, #204	; (adr r3, 8008928 <scaraInitScurve1+0x288>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008862:	f7f8 f93b 	bl	8000adc <__aeabi_dcmplt>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01d      	beq.n	80088a8 <scaraInitScurve1+0x208>
 800886c:	a330      	add	r3, pc, #192	; (adr r3, 8008930 <scaraInitScurve1+0x290>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008876:	f7f8 f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d013      	beq.n	80088a8 <scaraInitScurve1+0x208>
			v_design = 1.5*total_s/tf;
 8008880:	f04f 0200 	mov.w	r2, #0
 8008884:	4b31      	ldr	r3, [pc, #196]	; (800894c <scaraInitScurve1+0x2ac>)
 8008886:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800888a:	f7f7 feb5 	bl	80005f8 <__aeabi_dmul>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4610      	mov	r0, r2
 8008894:	4619      	mov	r1, r3
 8008896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800889a:	f7f7 ffd7 	bl	800084c <__aeabi_ddiv>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80088a6:	e06c      	b.n	8008982 <scaraInitScurve1+0x2e2>
		}else if(tf < 0.1 && v_design < 0.1){
 80088a8:	a31f      	add	r3, pc, #124	; (adr r3, 8008928 <scaraInitScurve1+0x288>)
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80088b2:	f7f8 f913 	bl	8000adc <__aeabi_dcmplt>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <scaraInitScurve1+0x234>
 80088bc:	a31a      	add	r3, pc, #104	; (adr r3, 8008928 <scaraInitScurve1+0x288>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088c6:	f7f8 f909 	bl	8000adc <__aeabi_dcmplt>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <scaraInitScurve1+0x234>
			return SCARA_STATUS_ERROR_OVER_VELOC;
 80088d0:	2309      	movs	r3, #9
 80088d2:	e1e2      	b.n	8008c9a <scaraInitScurve1+0x5fa>
		}else{
			v_lim = total_s/tf;
 80088d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088dc:	f7f7 ffb6 	bl	800084c <__aeabi_ddiv>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if(v_design < 1.1*v_lim){ // the accelaration part is too large
 80088e8:	a313      	add	r3, pc, #76	; (adr r3, 8008938 <scaraInitScurve1+0x298>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80088f2:	f7f7 fe81 	bl	80005f8 <__aeabi_dmul>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80088fe:	f7f8 f8ed 	bl	8000adc <__aeabi_dcmplt>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d023      	beq.n	8008950 <scaraInitScurve1+0x2b0>
				return SCARA_STATUS_ERROR_OVER_ACCEL;
 8008908:	230a      	movs	r3, #10
 800890a:	e1c6      	b.n	8008c9a <scaraInitScurve1+0x5fa>
 800890c:	f3af 8000 	nop.w
 8008910:	14000000 	.word	0x14000000
 8008914:	4000f6f0 	.word	0x4000f6f0
 8008918:	00000000 	.word	0x00000000
 800891c:	405c2000 	.word	0x405c2000
 8008920:	6b259425 	.word	0x6b259425
 8008924:	40069b91 	.word	0x40069b91
 8008928:	9999999a 	.word	0x9999999a
 800892c:	3fb99999 	.word	0x3fb99999
 8008930:	33333333 	.word	0x33333333
 8008934:	3fc33333 	.word	0x3fc33333
 8008938:	9999999a 	.word	0x9999999a
 800893c:	3ff19999 	.word	0x3ff19999
 8008940:	40877000 	.word	0x40877000
 8008944:	407f4000 	.word	0x407f4000
 8008948:	401e0000 	.word	0x401e0000
 800894c:	3ff80000 	.word	0x3ff80000
			}else if(v_design > 2*v_lim){
 8008950:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	f7f7 fc98 	bl	800028c <__adddf3>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008964:	f7f8 f8d8 	bl	8000b18 <__aeabi_dcmpgt>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d009      	beq.n	8008982 <scaraInitScurve1+0x2e2>
				v_design = 2*v_lim;
 800896e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	f7f7 fc89 	bl	800028c <__adddf3>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}else{
	
			}
		}
		a_design = 2*v_design*v_design/(v_design*tf - total_s);
 8008982:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	f7f7 fc7f 	bl	800028c <__adddf3>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800899a:	f7f7 fe2d 	bl	80005f8 <__aeabi_dmul>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4614      	mov	r4, r2
 80089a4:	461d      	mov	r5, r3
 80089a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089ae:	f7f7 fe23 	bl	80005f8 <__aeabi_dmul>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089be:	f7f7 fc63 	bl	8000288 <__aeabi_dsub>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f7 ff3f 	bl	800084c <__aeabi_ddiv>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		ta = v_design/a_design;		
 80089d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089de:	f7f7 ff35 	bl	800084c <__aeabi_ddiv>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		td = tf - ta;
 80089ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80089f2:	f7f7 fc49 	bl	8000288 <__aeabi_dsub>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80089fe:	e0be      	b.n	8008b7e <scaraInitScurve1+0x4de>
	
	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8008a00:	7ebb      	ldrb	r3, [r7, #26]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 80bb 	bne.w	8008b7e <scaraInitScurve1+0x4de>
		//check qva condition
		if(total_s*a_design > 2*v_design*v_design){ //condition for ta smaller than tc
 8008a08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a10:	f7f7 fdf2 	bl	80005f8 <__aeabi_dmul>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4614      	mov	r4, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	f7f7 fc32 	bl	800028c <__adddf3>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4619      	mov	r1, r3
 8008a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a34:	f7f7 fde0 	bl	80005f8 <__aeabi_dmul>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f7f8 f86a 	bl	8000b18 <__aeabi_dcmpgt>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d05e      	beq.n	8008b08 <scaraInitScurve1+0x468>
			if(total_s/v_design < 0.3){ //tc too small
 8008a4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a52:	f7f7 fefb 	bl	800084c <__aeabi_ddiv>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	a395      	add	r3, pc, #596	; (adr r3, 8008cb4 <scaraInitScurve1+0x614>)
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f7f8 f83a 	bl	8000adc <__aeabi_dcmplt>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <scaraInitScurve1+0x3e4>
				//recalculate v_design
				v_design = total_s/0.3;
 8008a6e:	a391      	add	r3, pc, #580	; (adr r3, 8008cb4 <scaraInitScurve1+0x614>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a78:	f7f7 fee8 	bl	800084c <__aeabi_ddiv>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			if(v_design/a_design < 0.1){ //ta is too small
 8008a84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a88:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a8c:	f7f7 fede 	bl	800084c <__aeabi_ddiv>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4610      	mov	r0, r2
 8008a96:	4619      	mov	r1, r3
 8008a98:	a388      	add	r3, pc, #544	; (adr r3, 8008cbc <scaraInitScurve1+0x61c>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f8 f81d 	bl	8000adc <__aeabi_dcmplt>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <scaraInitScurve1+0x41e>
				//recalculate a_design
				a_design = v_design/0.1;
 8008aa8:	a384      	add	r3, pc, #528	; (adr r3, 8008cbc <scaraInitScurve1+0x61c>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008ab2:	f7f7 fecb 	bl	800084c <__aeabi_ddiv>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}
			ta = v_design/a_design;
 8008abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ac2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008ac6:	f7f7 fec1 	bl	800084c <__aeabi_ddiv>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = total_s/v_design + ta;
 8008ad2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ad6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ada:	f7f7 feb7 	bl	800084c <__aeabi_ddiv>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008ae6:	f7f7 fbd1 	bl	800028c <__adddf3>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			tf = ta + td;
 8008af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008af6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008afa:	f7f7 fbc7 	bl	800028c <__adddf3>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008b06:	e03a      	b.n	8008b7e <scaraInitScurve1+0x4de>
//				td = total_s/v_design;
//				tf = ta + td;
//			}
	
		}else{
			tf = 2*total_s/v_design;
 8008b08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	f7f7 fbbc 	bl	800028c <__adddf3>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4610      	mov	r0, r2
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b20:	f7f7 fe94 	bl	800084c <__aeabi_ddiv>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	e9c7 2308 	strd	r2, r3, [r7, #32]
			ta = tf/4;
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	4b5d      	ldr	r3, [pc, #372]	; (8008ca8 <scaraInitScurve1+0x608>)
 8008b32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b36:	f7f7 fe89 	bl	800084c <__aeabi_ddiv>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			td = 3*tf/4;
 8008b42:	f04f 0200 	mov.w	r2, #0
 8008b46:	4b59      	ldr	r3, [pc, #356]	; (8008cac <scaraInitScurve1+0x60c>)
 8008b48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b4c:	f7f7 fd54 	bl	80005f8 <__aeabi_dmul>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4610      	mov	r0, r2
 8008b56:	4619      	mov	r1, r3
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	4b52      	ldr	r3, [pc, #328]	; (8008ca8 <scaraInitScurve1+0x608>)
 8008b5e:	f7f7 fe75 	bl	800084c <__aeabi_ddiv>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			a_design = v_design/ta;
 8008b6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b72:	f7f7 fe6b 	bl	800084c <__aeabi_ddiv>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
	}
	//no_sample = ceilf(tf / T_SAMPLING); // ceiling
	 // Init lspb params
	
	scurve->Ta = ta;
 8008b7e:	69f9      	ldr	r1, [r7, #28]
 8008b80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b84:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	scurve->Tf = tf;
 8008b88:	69f9      	ldr	r1, [r7, #28]
 8008b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b8e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	scurve->Td = td;
 8008b92:	69f9      	ldr	r1, [r7, #28]
 8008b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b98:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	scurve->a_design = a_design;
 8008b9c:	69f9      	ldr	r1, [r7, #28]
 8008b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ba2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	scurve->v_design = v_design;
 8008ba6:	69f9      	ldr	r1, [r7, #28]
 8008ba8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	scurve->v_lim = v_lim;
 8008bb0:	69f9      	ldr	r1, [r7, #28]
 8008bb2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bb6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	scurve->total_s = total_s;
 8008bba:	69f9      	ldr	r1, [r7, #28]
 8008bbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008bc0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	scurve->a_current = 0;
 8008bc4:	69f9      	ldr	r1, [r7, #28]
 8008bc6:	f04f 0200 	mov.w	r2, #0
 8008bca:	f04f 0300 	mov.w	r3, #0
 8008bce:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	scurve->v_current = 0;
 8008bd2:	69f9      	ldr	r1, [r7, #28]
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	scurve->s_current = 0;
 8008be0:	69f9      	ldr	r1, [r7, #28]
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	//define duplicate value when calculating scurve flow
	scurve->k_1        = v_design/(6*ta*ta);
 8008bee:	f04f 0200 	mov.w	r2, #0
 8008bf2:	4b2f      	ldr	r3, [pc, #188]	; (8008cb0 <scaraInitScurve1+0x610>)
 8008bf4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008bf8:	f7f7 fcfe 	bl	80005f8 <__aeabi_dmul>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4610      	mov	r0, r2
 8008c02:	4619      	mov	r1, r3
 8008c04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c08:	f7f7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008c14:	f7f7 fe1a 	bl	800084c <__aeabi_ddiv>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	69f9      	ldr	r1, [r7, #28]
 8008c1e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	scurve->k_2		   = 2*ta*ta*ta;
 8008c22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	f7f7 fb2f 	bl	800028c <__adddf3>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4610      	mov	r0, r2
 8008c34:	4619      	mov	r1, r3
 8008c36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c3a:	f7f7 fcdd 	bl	80005f8 <__aeabi_dmul>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4610      	mov	r0, r2
 8008c44:	4619      	mov	r1, r3
 8008c46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c4a:	f7f7 fcd5 	bl	80005f8 <__aeabi_dmul>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	69f9      	ldr	r1, [r7, #28]
 8008c54:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	scurve->k_3        = 6*ta;
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	4b14      	ldr	r3, [pc, #80]	; (8008cb0 <scaraInitScurve1+0x610>)
 8008c5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c62:	f7f7 fcc9 	bl	80005f8 <__aeabi_dmul>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	69f9      	ldr	r1, [r7, #28]
 8008c6c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	scurve->k_4        = 6*ta*ta;
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <scaraInitScurve1+0x610>)
 8008c76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c7a:	f7f7 fcbd 	bl	80005f8 <__aeabi_dmul>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c8a:	f7f7 fcb5 	bl	80005f8 <__aeabi_dmul>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	69f9      	ldr	r1, [r7, #28]
 8008c94:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	return SCARA_STATUS_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3750      	adds	r7, #80	; 0x50
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	f3af 8000 	nop.w
 8008ca8:	40100000 	.word	0x40100000
 8008cac:	40080000 	.word	0x40080000
 8008cb0:	40180000 	.word	0x40180000
 8008cb4:	33333333 	.word	0x33333333
 8008cb8:	3fd33333 	.word	0x3fd33333
 8008cbc:	9999999a 	.word	0x9999999a
 8008cc0:	3fb99999 	.word	0x3fb99999

08008cc4 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008cc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008cc8:	b08a      	sub	sp, #40	; 0x28
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008cd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008ce2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008cec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	f04f 0300 	mov.w	r3, #0
 8008cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cfc:	f7f7 ff02 	bl	8000b04 <__aeabi_dcmpge>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d05b      	beq.n	8008dbe <scaraFlowLSPB1+0xfa>
 8008d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d0e:	f7f7 feef 	bl	8000af0 <__aeabi_dcmple>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d052      	beq.n	8008dbe <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008d1e:	68f9      	ldr	r1, [r7, #12]
 8008d20:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d34:	f7f7 fc60 	bl	80005f8 <__aeabi_dmul>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	4629      	mov	r1, r5
 8008d40:	f7f7 faa4 	bl	800028c <__adddf3>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	68f9      	ldr	r1, [r7, #12]
 8008d4a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d5e:	f7f7 fc4b 	bl	80005f8 <__aeabi_dmul>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fa8f 	bl	800028c <__adddf3>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4614      	mov	r4, r2
 8008d74:	461d      	mov	r5, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008d7c:	f04f 0200 	mov.w	r2, #0
 8008d80:	4b98      	ldr	r3, [pc, #608]	; (8008fe4 <scaraFlowLSPB1+0x320>)
 8008d82:	f7f7 fc39 	bl	80005f8 <__aeabi_dmul>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d92:	f7f7 fc31 	bl	80005f8 <__aeabi_dmul>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da2:	f7f7 fc29 	bl	80005f8 <__aeabi_dmul>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4620      	mov	r0, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7f7 fa6d 	bl	800028c <__adddf3>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008dbc:	e10b      	b.n	8008fd6 <scaraFlowLSPB1+0x312>
	// Constant velocity
	} else if (ta < time && time <= td) {
 8008dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008dc6:	f7f7 fe89 	bl	8000adc <__aeabi_dcmplt>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d054      	beq.n	8008e7a <scaraFlowLSPB1+0x1b6>
 8008dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dd8:	f7f7 fe8a 	bl	8000af0 <__aeabi_dcmple>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d04b      	beq.n	8008e7a <scaraFlowLSPB1+0x1b6>
		lspb->a_current		=	0;
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008e08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e0c:	f7f7 fbf4 	bl	80005f8 <__aeabi_dmul>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4610      	mov	r0, r2
 8008e16:	4619      	mov	r1, r3
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	4b71      	ldr	r3, [pc, #452]	; (8008fe4 <scaraFlowLSPB1+0x320>)
 8008e1e:	f7f7 fbeb 	bl	80005f8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fa2f 	bl	800028c <__adddf3>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4690      	mov	r8, r2
 8008e34:	4699      	mov	r9, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	4b68      	ldr	r3, [pc, #416]	; (8008fe4 <scaraFlowLSPB1+0x320>)
 8008e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e46:	f7f7 fbd7 	bl	80005f8 <__aeabi_dmul>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e52:	f7f7 fa19 	bl	8000288 <__aeabi_dsub>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f7f7 fbcb 	bl	80005f8 <__aeabi_dmul>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4640      	mov	r0, r8
 8008e68:	4649      	mov	r1, r9
 8008e6a:	f7f7 fa0f 	bl	800028c <__adddf3>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	68f9      	ldr	r1, [r7, #12]
 8008e74:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008e78:	e0ad      	b.n	8008fd6 <scaraFlowLSPB1+0x312>
	// Decelerate
	} else if (td < time && time <= tf) {
 8008e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e82:	f7f7 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 8090 	beq.w	8008fae <scaraFlowLSPB1+0x2ea>
 8008e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e96:	f7f7 fe2b 	bl	8000af0 <__aeabi_dcmple>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 8086 	beq.w	8008fae <scaraFlowLSPB1+0x2ea>
		lspb->a_current		=	-lspb->a_design;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ec8:	f7f7 f9de 	bl	8000288 <__aeabi_dsub>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4620      	mov	r0, r4
 8008ede:	4629      	mov	r1, r5
 8008ee0:	f7f7 f9d4 	bl	800028c <__adddf3>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	68f9      	ldr	r1, [r7, #12]
 8008eea:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008efe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f02:	f7f7 f9c1 	bl	8000288 <__aeabi_dsub>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	f7f7 fb73 	bl	80005f8 <__aeabi_dmul>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7f7 f9b5 	bl	8000288 <__aeabi_dsub>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4614      	mov	r4, r2
 8008f24:	461d      	mov	r5, r3
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008f32:	f7f7 f9a9 	bl	8000288 <__aeabi_dsub>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4690      	mov	r8, r2
 8008f3c:	4699      	mov	r9, r3
 8008f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f46:	f7f7 f99f 	bl	8000288 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 fb51 	bl	80005f8 <__aeabi_dmul>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4690      	mov	r8, r2
 8008f5c:	4699      	mov	r9, r3
 8008f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f66:	f7f7 f98f 	bl	8000288 <__aeabi_dsub>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4690      	mov	r8, r2
 8008f7c:	4699      	mov	r9, r3
 8008f7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	f7f7 f981 	bl	800028c <__adddf3>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 fc5b 	bl	800084c <__aeabi_ddiv>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	f7f7 f973 	bl	8000288 <__aeabi_dsub>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8008fac:	e013      	b.n	8008fd6 <scaraFlowLSPB1+0x312>
	} else {
		lspb->a_current 	=	0;
 8008fae:	68f9      	ldr	r1, [r7, #12]
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	f04f 0300 	mov.w	r3, #0
 8008fb8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		lspb->v_current		=	0;
 8008fbc:	68f9      	ldr	r1, [r7, #12]
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	f04f 0300 	mov.w	r3, #0
 8008fc6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008fd0:	68f9      	ldr	r1, [r7, #12]
 8008fd2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3728      	adds	r7, #40	; 0x28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008fe2:	bf00      	nop
 8008fe4:	3fe00000 	.word	0x3fe00000

08008fe8 <scaraFlowGCODE>:
SCARA_StatusTypeDef	scaraFlowGCODE(double *s, double time)
{
 8008fe8:	b5b0      	push	{r4, r5, r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	ed87 0b00 	vstr	d0, [r7]
	if ( 0.0f <= time && time <= time_acc) {
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	f04f 0300 	mov.w	r3, #0
 8008ffc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009000:	f7f7 fd80 	bl	8000b04 <__aeabi_dcmpge>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01e      	beq.n	8009048 <scaraFlowGCODE+0x60>
 800900a:	4b5f      	ldr	r3, [pc, #380]	; (8009188 <scaraFlowGCODE+0x1a0>)
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009014:	f7f7 fd6c 	bl	8000af0 <__aeabi_dcmple>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d014      	beq.n	8009048 <scaraFlowGCODE+0x60>
		*s = acc0*time*time;
 800901e:	4b5b      	ldr	r3, [pc, #364]	; (800918c <scaraFlowGCODE+0x1a4>)
 8009020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009028:	f7f7 fae6 	bl	80005f8 <__aeabi_dmul>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4610      	mov	r0, r2
 8009032:	4619      	mov	r1, r3
 8009034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009038:	f7f7 fade 	bl	80005f8 <__aeabi_dmul>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	68f9      	ldr	r1, [r7, #12]
 8009042:	e9c1 2300 	strd	r2, r3, [r1]
 8009046:	e09a      	b.n	800917e <scaraFlowGCODE+0x196>
	// Constant velocity
	} else if (time_acc < time && time <= time_dec) {
 8009048:	4b4f      	ldr	r3, [pc, #316]	; (8009188 <scaraFlowGCODE+0x1a0>)
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009052:	f7f7 fd61 	bl	8000b18 <__aeabi_dcmpgt>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d01f      	beq.n	800909c <scaraFlowGCODE+0xb4>
 800905c:	4b4c      	ldr	r3, [pc, #304]	; (8009190 <scaraFlowGCODE+0x1a8>)
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009066:	f7f7 fd43 	bl	8000af0 <__aeabi_dcmple>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d015      	beq.n	800909c <scaraFlowGCODE+0xb4>
		*s = constant[0]*time + constant[1];
 8009070:	4b48      	ldr	r3, [pc, #288]	; (8009194 <scaraFlowGCODE+0x1ac>)
 8009072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800907a:	f7f7 fabd 	bl	80005f8 <__aeabi_dmul>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4610      	mov	r0, r2
 8009084:	4619      	mov	r1, r3
 8009086:	4b43      	ldr	r3, [pc, #268]	; (8009194 <scaraFlowGCODE+0x1ac>)
 8009088:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800908c:	f7f7 f8fe 	bl	800028c <__adddf3>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	68f9      	ldr	r1, [r7, #12]
 8009096:	e9c1 2300 	strd	r2, r3, [r1]
 800909a:	e070      	b.n	800917e <scaraFlowGCODE+0x196>
	// Decelerate
	} else if (time_dec < time && time <= time_move) {
 800909c:	4b3c      	ldr	r3, [pc, #240]	; (8009190 <scaraFlowGCODE+0x1a8>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090a6:	f7f7 fd37 	bl	8000b18 <__aeabi_dcmpgt>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d038      	beq.n	8009122 <scaraFlowGCODE+0x13a>
 80090b0:	4b39      	ldr	r3, [pc, #228]	; (8009198 <scaraFlowGCODE+0x1b0>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ba:	f7f7 fd19 	bl	8000af0 <__aeabi_dcmple>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d02e      	beq.n	8009122 <scaraFlowGCODE+0x13a>
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 80090c4:	4b35      	ldr	r3, [pc, #212]	; (800919c <scaraFlowGCODE+0x1b4>)
 80090c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ce:	f7f7 fa93 	bl	80005f8 <__aeabi_dmul>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4610      	mov	r0, r2
 80090d8:	4619      	mov	r1, r3
 80090da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090de:	f7f7 fa8b 	bl	80005f8 <__aeabi_dmul>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4614      	mov	r4, r2
 80090e8:	461d      	mov	r5, r3
 80090ea:	4b2c      	ldr	r3, [pc, #176]	; (800919c <scaraFlowGCODE+0x1b4>)
 80090ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80090f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f4:	f7f7 fa80 	bl	80005f8 <__aeabi_dmul>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4620      	mov	r0, r4
 80090fe:	4629      	mov	r1, r5
 8009100:	f7f7 f8c4 	bl	800028c <__adddf3>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4610      	mov	r0, r2
 800910a:	4619      	mov	r1, r3
 800910c:	4b23      	ldr	r3, [pc, #140]	; (800919c <scaraFlowGCODE+0x1b4>)
 800910e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009112:	f7f7 f8bb 	bl	800028c <__adddf3>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	68f9      	ldr	r1, [r7, #12]
 800911c:	e9c1 2300 	strd	r2, r3, [r1]
 8009120:	e02d      	b.n	800917e <scaraFlowGCODE+0x196>
	} else {
		*s = deacc[0]*time*time + deacc[1]*time + deacc[2];
 8009122:	4b1e      	ldr	r3, [pc, #120]	; (800919c <scaraFlowGCODE+0x1b4>)
 8009124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800912c:	f7f7 fa64 	bl	80005f8 <__aeabi_dmul>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4610      	mov	r0, r2
 8009136:	4619      	mov	r1, r3
 8009138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800913c:	f7f7 fa5c 	bl	80005f8 <__aeabi_dmul>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4614      	mov	r4, r2
 8009146:	461d      	mov	r5, r3
 8009148:	4b14      	ldr	r3, [pc, #80]	; (800919c <scaraFlowGCODE+0x1b4>)
 800914a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800914e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009152:	f7f7 fa51 	bl	80005f8 <__aeabi_dmul>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4620      	mov	r0, r4
 800915c:	4629      	mov	r1, r5
 800915e:	f7f7 f895 	bl	800028c <__adddf3>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4610      	mov	r0, r2
 8009168:	4619      	mov	r1, r3
 800916a:	4b0c      	ldr	r3, [pc, #48]	; (800919c <scaraFlowGCODE+0x1b4>)
 800916c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009170:	f7f7 f88c 	bl	800028c <__adddf3>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	68f9      	ldr	r1, [r7, #12]
 800917a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return SCARA_STATUS_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bdb0      	pop	{r4, r5, r7, pc}
 8009188:	20008f40 	.word	0x20008f40
 800918c:	2000fd20 	.word	0x2000fd20
 8009190:	20008f60 	.word	0x20008f60
 8009194:	20008f88 	.word	0x20008f88
 8009198:	20008fb0 	.word	0x20008fb0
 800919c:	20008f48 	.word	0x20008f48

080091a0 <scaraFLowScurve1>:
SCARA_StatusTypeDef	scaraFLowScurve1(Trajectory_Scurve_TypeDef *scurve, double t)
{
 80091a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80091a4:	b08c      	sub	sp, #48	; 0x30
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta, vc;
	tf = scurve->Tf;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80091b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	ta = scurve->Ta;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80091be:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = scurve->Td;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80091c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vc = scurve->v_design;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80091d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ( 0.0f <= t && t <= ta) {
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091e2:	f7f7 fc8f 	bl	8000b04 <__aeabi_dcmpge>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d025      	beq.n	8009238 <scaraFLowScurve1+0x98>
 80091ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091f4:	f7f7 fc7c 	bl	8000af0 <__aeabi_dcmple>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d01c      	beq.n	8009238 <scaraFLowScurve1+0x98>
//		lspb->a_current		=	(time*vc)/ta*ta;
//		lspb->v_current		=	(time*time*vc)/(2*ta*ta);
		scurve->s_current	=	t*t*t*scurve->k_1;
 80091fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009202:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009206:	f7f7 f9f7 	bl	80005f8 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4610      	mov	r0, r2
 8009210:	4619      	mov	r1, r3
 8009212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009228:	f7f7 f9e6 	bl	80005f8 <__aeabi_dmul>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	68f9      	ldr	r1, [r7, #12]
 8009232:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009236:	e17c      	b.n	8009532 <scaraFLowScurve1+0x392>
	// Constant velocity
	} else if (ta < t && t <= 2*ta) {
 8009238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009240:	f7f7 fc4c 	bl	8000adc <__aeabi_dcmplt>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d061      	beq.n	800930e <scaraFLowScurve1+0x16e>
 800924a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	f7f7 f81b 	bl	800028c <__adddf3>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800925e:	f7f7 fc47 	bl	8000af0 <__aeabi_dcmple>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d052      	beq.n	800930e <scaraFLowScurve1+0x16e>
//		scurve->a_current   =	-(vc*(time - 2*ta))/(ta*ta);
//		scurve->v_current   =	vc/2 - (vc*(time - ta)*(time - 3*ta))/(2*ta*ta);
		scurve->s_current   =	-(t*t*t - t*t*scurve->k_3 + t*scurve->k_4 - scurve->k_2)*scurve->k_1;
 8009268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800926c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009270:	f7f7 f9c2 	bl	80005f8 <__aeabi_dmul>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4610      	mov	r0, r2
 800927a:	4619      	mov	r1, r3
 800927c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009280:	f7f7 f9ba 	bl	80005f8 <__aeabi_dmul>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4690      	mov	r8, r2
 800928a:	4699      	mov	r9, r3
 800928c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009294:	f7f7 f9b0 	bl	80005f8 <__aeabi_dmul>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4610      	mov	r0, r2
 800929e:	4619      	mov	r1, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80092a6:	f7f7 f9a7 	bl	80005f8 <__aeabi_dmul>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4640      	mov	r0, r8
 80092b0:	4649      	mov	r1, r9
 80092b2:	f7f6 ffe9 	bl	8000288 <__aeabi_dsub>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4690      	mov	r8, r2
 80092bc:	4699      	mov	r9, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80092c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c8:	f7f7 f996 	bl	80005f8 <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4640      	mov	r0, r8
 80092d2:	4649      	mov	r1, r9
 80092d4:	f7f6 ffda 	bl	800028c <__adddf3>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4610      	mov	r0, r2
 80092de:	4619      	mov	r1, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80092e6:	f7f6 ffcf 	bl	8000288 <__aeabi_dsub>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4614      	mov	r4, r2
 80092f0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80092fa:	4620      	mov	r0, r4
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f7 f97b 	bl	80005f8 <__aeabi_dmul>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 800930c:	e111      	b.n	8009532 <scaraFLowScurve1+0x392>
	// Decelerate
	} else if (2*ta < t && t <= td - ta) {
 800930e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	f7f6 ffb9 	bl	800028c <__adddf3>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009322:	f7f7 fbf9 	bl	8000b18 <__aeabi_dcmpgt>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d022      	beq.n	8009372 <scaraFLowScurve1+0x1d2>
 800932c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009330:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009334:	f7f6 ffa8 	bl	8000288 <__aeabi_dsub>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009340:	f7f7 fbd6 	bl	8000af0 <__aeabi_dcmple>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d013      	beq.n	8009372 <scaraFLowScurve1+0x1d2>
//		scurve->a_current   =	0;
//		scurve->v_current   =	v_design;
		scurve->s_current   =	vc*(t - ta);
 800934a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800934e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009352:	f7f6 ff99 	bl	8000288 <__aeabi_dsub>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4610      	mov	r0, r2
 800935c:	4619      	mov	r1, r3
 800935e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009362:	f7f7 f949 	bl	80005f8 <__aeabi_dmul>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009370:	e0df      	b.n	8009532 <scaraFLowScurve1+0x392>
	} else if(td-ta < t && t <= td){
 8009372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800937a:	f7f6 ff85 	bl	8000288 <__aeabi_dsub>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009386:	f7f7 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8081 	beq.w	8009494 <scaraFLowScurve1+0x2f4>
 8009392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800939a:	f7f7 fba9 	bl	8000af0 <__aeabi_dcmple>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d077      	beq.n	8009494 <scaraFLowScurve1+0x2f4>
//		scurve->a_current 	=	-(vc*(t - td + ta))/ta^2;
//		scurve->v_current   =	vc/2 - (vc*(t + ta - tf)*(t + 3*ta - tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s - (ta*vc)/3 - vc*(t - tf) - (t-tf)*(t-tf)*(t + scurve->k_3 - tf)*scurve->k_1;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 80093aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80093b2:	f7f7 f921 	bl	80005f8 <__aeabi_dmul>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4610      	mov	r0, r2
 80093bc:	4619      	mov	r1, r3
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	4b5f      	ldr	r3, [pc, #380]	; (8009540 <scaraFLowScurve1+0x3a0>)
 80093c4:	f7f7 fa42 	bl	800084c <__aeabi_ddiv>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f6 ff5a 	bl	8000288 <__aeabi_dsub>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4614      	mov	r4, r2
 80093da:	461d      	mov	r5, r3
 80093dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093e4:	f7f6 ff50 	bl	8000288 <__aeabi_dsub>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4610      	mov	r0, r2
 80093ee:	4619      	mov	r1, r3
 80093f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093f4:	f7f7 f900 	bl	80005f8 <__aeabi_dmul>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f6 ff42 	bl	8000288 <__aeabi_dsub>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4614      	mov	r4, r2
 800940a:	461d      	mov	r5, r3
 800940c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009414:	f7f6 ff38 	bl	8000288 <__aeabi_dsub>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4690      	mov	r8, r2
 800941e:	4699      	mov	r9, r3
 8009420:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009428:	f7f6 ff2e 	bl	8000288 <__aeabi_dsub>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	f7f7 f8e0 	bl	80005f8 <__aeabi_dmul>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4690      	mov	r8, r2
 800943e:	4699      	mov	r9, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	f7f6 ff1f 	bl	800028c <__adddf3>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4610      	mov	r0, r2
 8009454:	4619      	mov	r1, r3
 8009456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800945a:	f7f6 ff15 	bl	8000288 <__aeabi_dsub>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4640      	mov	r0, r8
 8009464:	4649      	mov	r1, r9
 8009466:	f7f7 f8c7 	bl	80005f8 <__aeabi_dmul>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4610      	mov	r0, r2
 8009470:	4619      	mov	r1, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009478:	f7f7 f8be 	bl	80005f8 <__aeabi_dmul>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f6 ff00 	bl	8000288 <__aeabi_dsub>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	68f9      	ldr	r1, [r7, #12]
 800948e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8009492:	e04e      	b.n	8009532 <scaraFLowScurve1+0x392>
	} else if(td < t && t <= tf){
 8009494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009498:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800949c:	f7f7 fb1e 	bl	8000adc <__aeabi_dcmplt>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d045      	beq.n	8009532 <scaraFLowScurve1+0x392>
 80094a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ae:	f7f7 fb1f 	bl	8000af0 <__aeabi_dcmple>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d03c      	beq.n	8009532 <scaraFLowScurve1+0x392>
//		scurve->a_current 	=	-(vc*(ta - t + td))/(ta*ta);
//		scurve->v_current   =	(vc*(t - tf)*(t-tf))/(2*ta*ta);
		scurve->s_current   =	scurve->total_s + (t-tf)*(t-tf)*(t-tf)*scurve->k_1;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 80094be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094c6:	f7f6 fedf 	bl	8000288 <__aeabi_dsub>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4690      	mov	r8, r2
 80094d0:	4699      	mov	r9, r3
 80094d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094da:	f7f6 fed5 	bl	8000288 <__aeabi_dsub>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4640      	mov	r0, r8
 80094e4:	4649      	mov	r1, r9
 80094e6:	f7f7 f887 	bl	80005f8 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4690      	mov	r8, r2
 80094f0:	4699      	mov	r9, r3
 80094f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094fa:	f7f6 fec5 	bl	8000288 <__aeabi_dsub>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f7 f877 	bl	80005f8 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4610      	mov	r0, r2
 8009510:	4619      	mov	r1, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009518:	f7f7 f86e 	bl	80005f8 <__aeabi_dmul>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4620      	mov	r0, r4
 8009522:	4629      	mov	r1, r5
 8009524:	f7f6 feb2 	bl	800028c <__adddf3>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	68f9      	ldr	r1, [r7, #12]
 800952e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	}

	return SCARA_STATUS_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3730      	adds	r7, #48	; 0x30
 8009538:	46bd      	mov	sp, r7
 800953a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800953e:	bf00      	nop
 8009540:	40080000 	.word	0x40080000
 8009544:	00000000 	.word	0x00000000

08009548 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800954c:	b0ac      	sub	sp, #176	; 0xb0
 800954e:	af00      	add	r7, sp, #0
 8009550:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009552:	460b      	mov	r3, r1
 8009554:	ed87 0b08 	vstr	d0, [r7, #32]
 8009558:	ed87 1b06 	vstr	d1, [r7, #24]
 800955c:	ed87 2b04 	vstr	d2, [r7, #16]
 8009560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009564:	4613      	mov	r3, r2
 8009566:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 800956a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800956e:	2b04      	cmp	r3, #4
 8009570:	d118      	bne.n	80095a4 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8009572:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800957e:	f7f7 f83b 	bl	80005f8 <__aeabi_dmul>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 800958a:	f20f 7338 	addw	r3, pc, #1848	; 0x738
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009596:	f7f7 f82f 	bl	80005f8 <__aeabi_dmul>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80095a2:	e092      	b.n	80096ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80095a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095a8:	2b05      	cmp	r3, #5
 80095aa:	d118      	bne.n	80095de <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80095ac:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095b8:	f7f7 f81e 	bl	80005f8 <__aeabi_dmul>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80095c4:	f20f 7304 	addw	r3, pc, #1796	; 0x704
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095d0:	f7f7 f812 	bl	80005f8 <__aeabi_dmul>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80095dc:	e075      	b.n	80096ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80095de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d118      	bne.n	8009618 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80095e6:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095f2:	f7f7 f801 	bl	80005f8 <__aeabi_dmul>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80095fe:	f20f 63cc 	addw	r3, pc, #1740	; 0x6cc
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800960a:	f7f6 fff5 	bl	80005f8 <__aeabi_dmul>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009616:	e058      	b.n	80096ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8009618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800961c:	2b01      	cmp	r3, #1
 800961e:	d118      	bne.n	8009652 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8009620:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800962c:	f7f6 ffe4 	bl	80005f8 <__aeabi_dmul>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8009638:	f20f 6390 	addw	r3, pc, #1680	; 0x690
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009644:	f7f6 ffd8 	bl	80005f8 <__aeabi_dmul>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8009650:	e03b      	b.n	80096ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8009652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009656:	2b02      	cmp	r3, #2
 8009658:	d118      	bne.n	800968c <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 800965a:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009666:	f7f6 ffc7 	bl	80005f8 <__aeabi_dmul>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8009672:	f20f 6350 	addw	r3, pc, #1616	; 0x650
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800967e:	f7f6 ffbb 	bl	80005f8 <__aeabi_dmul>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800968a:	e01e      	b.n	80096ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 800968c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009690:	2b03      	cmp	r3, #3
 8009692:	d118      	bne.n	80096c6 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8009694:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096a0:	f7f6 ffaa 	bl	80005f8 <__aeabi_dmul>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80096ac:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80096b8:	f7f6 ff9e 	bl	80005f8 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80096c4:	e001      	b.n	80096ca <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80096c6:	2306      	movs	r3, #6
 80096c8:	e2ef      	b.n	8009caa <scaraInitLSPB+0x762>
	 }

	 q0 = 0;
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	f04f 0300 	mov.w	r3, #0
 80096d2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	 q1 = total_s;
 80096d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096da:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	 v0 = 0;
 80096de:	f04f 0200 	mov.w	r2, #0
 80096e2:	f04f 0300 	mov.w	r3, #0
 80096e6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	 v1 = 0;
 80096ea:	f04f 0200 	mov.w	r2, #0
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80096f6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80096fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80096fe:	f7f7 f9f7 	bl	8000af0 <__aeabi_dcmple>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8009708:	2301      	movs	r3, #1
 800970a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800970e:	e00c      	b.n	800972a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8009710:	23ff      	movs	r3, #255	; 0xff
 8009712:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8009716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800971a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800971e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009722:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 800972a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800972e:	2b01      	cmp	r3, #1
 8009730:	f040 809b 	bne.w	800986a <scaraInitLSPB+0x322>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8009734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009736:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800973a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 800973e:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800974a:	f7f7 f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d07e      	beq.n	8009852 <scaraInitLSPB+0x30a>
			 v_lower 	= (q1 - q0) / tf;
 8009754:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009758:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800975c:	f7f6 fd94 	bl	8000288 <__aeabi_dsub>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4610      	mov	r0, r2
 8009766:	4619      	mov	r1, r3
 8009768:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800976c:	f7f7 f86e 	bl	800084c <__aeabi_ddiv>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8009778:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800977c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009780:	f7f6 fd82 	bl	8000288 <__aeabi_dsub>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4610      	mov	r0, r2
 800978a:	4619      	mov	r1, r3
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	f7f6 fd7c 	bl	800028c <__adddf3>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4610      	mov	r0, r2
 800979a:	4619      	mov	r1, r3
 800979c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80097a0:	f7f7 f854 	bl	800084c <__aeabi_ddiv>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80097ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80097b0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80097b4:	f7f7 f992 	bl	8000adc <__aeabi_dcmplt>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <scaraInitLSPB+0x27a>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80097be:	2309      	movs	r3, #9
 80097c0:	e273      	b.n	8009caa <scaraInitLSPB+0x762>
			 } else {
				 if ( v_upper <= v_design) {
 80097c2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80097c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097ca:	f7f7 f991 	bl	8000af0 <__aeabi_dcmple>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <scaraInitLSPB+0x294>
					 v_design = v_upper;
 80097d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097d8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80097dc:	f20f 5304 	addw	r3, pc, #1284	; 0x504
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80097e8:	f7f7 f996 	bl	8000b18 <__aeabi_dcmpgt>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d018      	beq.n	8009824 <scaraInitLSPB+0x2dc>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80097f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80097f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80097fa:	f7f6 fd45 	bl	8000288 <__aeabi_dsub>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800980a:	f7f7 f81f 	bl	800084c <__aeabi_ddiv>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009816:	f7f6 fd37 	bl	8000288 <__aeabi_dsub>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8009822:	e00b      	b.n	800983c <scaraInitLSPB+0x2f4>
				 } else {
					 tc_upper = tf / 2;
 8009824:	f04f 0200 	mov.w	r2, #0
 8009828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800982c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009830:	f7f7 f80c 	bl	800084c <__aeabi_ddiv>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 800983c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009840:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009844:	f7f7 f802 	bl	800084c <__aeabi_ddiv>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8009850:	e00b      	b.n	800986a <scaraInitLSPB+0x322>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8009852:	f04f 0200 	mov.w	r2, #0
 8009856:	f04f 0300 	mov.w	r3, #0
 800985a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			 a_design = 0;
 800985e:	f04f 0200 	mov.w	r2, #0
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 800986a:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009876:	f7f7 f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8196 	beq.w	8009bae <scaraInitLSPB+0x666>
 8009882:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800988e:	f7f7 f943 	bl	8000b18 <__aeabi_dcmpgt>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 818a 	beq.w	8009bae <scaraInitLSPB+0x666>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800989a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800989e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80098a2:	f7f6 fcf1 	bl	8000288 <__aeabi_dsub>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4614      	mov	r4, r2
 80098ac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80098b0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80098b4:	4620      	mov	r0, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f6 fe9e 	bl	80005f8 <__aeabi_dmul>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80098c4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80098c8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80098cc:	f7f6 fe94 	bl	80005f8 <__aeabi_dmul>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	e9c7 2300 	strd	r2, r3, [r7]
 80098d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098dc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80098e0:	f7f6 fe8a 	bl	80005f8 <__aeabi_dmul>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4614      	mov	r4, r2
 80098ea:	461d      	mov	r5, r3
 80098ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80098f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80098f4:	f7f6 fe80 	bl	80005f8 <__aeabi_dmul>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4620      	mov	r0, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	f7f6 fcc4 	bl	800028c <__adddf3>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4610      	mov	r0, r2
 800990a:	4619      	mov	r1, r3
 800990c:	f04f 0200 	mov.w	r2, #0
 8009910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009914:	f7f6 ff9a 	bl	800084c <__aeabi_ddiv>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009920:	f7f6 fcb2 	bl	8000288 <__aeabi_dsub>
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800992c:	f7f7 f8e0 	bl	8000af0 <__aeabi_dcmple>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d075      	beq.n	8009a22 <scaraInitLSPB+0x4da>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8009936:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800993a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800993e:	f7f6 fca3 	bl	8000288 <__aeabi_dsub>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	4692      	mov	sl, r2
 8009948:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800994c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009950:	4650      	mov	r0, sl
 8009952:	4659      	mov	r1, fp
 8009954:	f7f6 fe50 	bl	80005f8 <__aeabi_dmul>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	4614      	mov	r4, r2
 800995e:	461d      	mov	r5, r3
 8009960:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009964:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009968:	f7f6 fe46 	bl	80005f8 <__aeabi_dmul>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4690      	mov	r8, r2
 8009972:	4699      	mov	r9, r3
 8009974:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009978:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800997c:	f7f6 fe3c 	bl	80005f8 <__aeabi_dmul>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4640      	mov	r0, r8
 8009986:	4649      	mov	r1, r9
 8009988:	f7f6 fc80 	bl	800028c <__adddf3>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4610      	mov	r0, r2
 8009992:	4619      	mov	r1, r3
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800999c:	f7f6 ff56 	bl	800084c <__aeabi_ddiv>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f6 fc70 	bl	800028c <__adddf3>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	ec43 2b17 	vmov	d7, r2, r3
 80099b4:	eeb0 0a47 	vmov.f32	s0, s14
 80099b8:	eef0 0a67 	vmov.f32	s1, s15
 80099bc:	f011 fb90 	bl	801b0e0 <sqrt>
 80099c0:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80099c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80099cc:	f7f6 fc5c 	bl	8000288 <__aeabi_dsub>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4610      	mov	r0, r2
 80099d6:	4619      	mov	r1, r3
 80099d8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80099dc:	f7f6 ff36 	bl	800084c <__aeabi_ddiv>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80099e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80099ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80099f0:	f7f6 fc4a 	bl	8000288 <__aeabi_dsub>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4610      	mov	r0, r2
 80099fa:	4619      	mov	r1, r3
 80099fc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a00:	f7f6 ff24 	bl	800084c <__aeabi_ddiv>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= ta + td;
 8009a0c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009a10:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009a14:	f7f6 fc3a 	bl	800028c <__adddf3>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009a20:	e0e3      	b.n	8009bea <scaraInitLSPB+0x6a2>
		 } else {
			 v_lim	= v_design;
 8009a22:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009a26:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8009a2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a2e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a32:	f7f6 fc29 	bl	8000288 <__aeabi_dsub>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a42:	f7f6 ff03 	bl	800084c <__aeabi_ddiv>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8009a4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a52:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a56:	f7f6 fc17 	bl	8000288 <__aeabi_dsub>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4610      	mov	r0, r2
 8009a60:	4619      	mov	r1, r3
 8009a62:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a66:	f7f6 fef1 	bl	800084c <__aeabi_ddiv>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009a72:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009a76:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009a7a:	f7f6 fc05 	bl	8000288 <__aeabi_dsub>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4690      	mov	r8, r2
 8009a84:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8009a88:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4649      	mov	r1, r9
 8009a90:	f7f6 fedc 	bl	800084c <__aeabi_ddiv>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4614      	mov	r4, r2
 8009a9a:	461d      	mov	r5, r3
 8009a9c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	f7f6 fbf2 	bl	800028c <__adddf3>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ab0:	f7f6 fecc 	bl	800084c <__aeabi_ddiv>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4690      	mov	r8, r2
 8009aba:	4699      	mov	r9, r3
 8009abc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009ac0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009ac4:	f7f6 fec2 	bl	800084c <__aeabi_ddiv>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	f04f 0000 	mov.w	r0, #0
 8009ad0:	497b      	ldr	r1, [pc, #492]	; (8009cc0 <scaraInitLSPB+0x778>)
 8009ad2:	f7f6 fbd9 	bl	8000288 <__aeabi_dsub>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4690      	mov	r8, r2
 8009ae8:	4699      	mov	r9, r3
 8009aea:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009aee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009af2:	f7f6 feab 	bl	800084c <__aeabi_ddiv>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	f04f 0000 	mov.w	r0, #0
 8009afe:	4970      	ldr	r1, [pc, #448]	; (8009cc0 <scaraInitLSPB+0x778>)
 8009b00:	f7f6 fbc2 	bl	8000288 <__aeabi_dsub>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4640      	mov	r0, r8
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	f7f6 fd74 	bl	80005f8 <__aeabi_dmul>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4620      	mov	r0, r4
 8009b16:	4629      	mov	r1, r5
 8009b18:	f7f6 fbb8 	bl	800028c <__adddf3>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4614      	mov	r4, r2
 8009b22:	461d      	mov	r5, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8009b24:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	f7f6 fbae 	bl	800028c <__adddf3>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b38:	f7f6 fe88 	bl	800084c <__aeabi_ddiv>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4690      	mov	r8, r2
 8009b42:	4699      	mov	r9, r3
 8009b44:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b48:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009b4c:	f7f6 fe7e 	bl	800084c <__aeabi_ddiv>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	f04f 0000 	mov.w	r0, #0
 8009b58:	4959      	ldr	r1, [pc, #356]	; (8009cc0 <scaraInitLSPB+0x778>)
 8009b5a:	f7f6 fb95 	bl	8000288 <__aeabi_dsub>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4640      	mov	r0, r8
 8009b64:	4649      	mov	r1, r9
 8009b66:	f7f6 fd47 	bl	80005f8 <__aeabi_dmul>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4690      	mov	r8, r2
 8009b70:	4699      	mov	r9, r3
 8009b72:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009b7a:	f7f6 fe67 	bl	800084c <__aeabi_ddiv>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	f04f 0000 	mov.w	r0, #0
 8009b86:	494e      	ldr	r1, [pc, #312]	; (8009cc0 <scaraInitLSPB+0x778>)
 8009b88:	f7f6 fb7e 	bl	8000288 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4640      	mov	r0, r8
 8009b92:	4649      	mov	r1, r9
 8009b94:	f7f6 fd30 	bl	80005f8 <__aeabi_dmul>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f6 fb74 	bl	800028c <__adddf3>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8009bac:	e01d      	b.n	8009bea <scaraInitLSPB+0x6a2>
		 }
	 } else {
		 v_lim	= 0;
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	f04f 0300 	mov.w	r3, #0
 8009bb6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		 ta = tf/2;
 8009bba:	f04f 0200 	mov.w	r2, #0
 8009bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bc2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009bc6:	f7f6 fe41 	bl	800084c <__aeabi_ddiv>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		 td = tf/2;
 8009bd2:	f04f 0200 	mov.w	r2, #0
 8009bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bda:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009bde:	f7f6 fe35 	bl	800084c <__aeabi_ddiv>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8009bea:	a333      	add	r3, pc, #204	; (adr r3, 8009cb8 <scaraInitLSPB+0x770>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009bf4:	f7f6 fe2a 	bl	800084c <__aeabi_ddiv>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4619      	mov	r1, r3
 8009c00:	f7f6 fff2 	bl	8000be8 <__aeabi_d2f>
 8009c04:	4603      	mov	r3, r0
 8009c06:	ee00 3a10 	vmov	s0, r3
 8009c0a:	f011 fa25 	bl	801b058 <ceilf>
 8009c0e:	eef0 7a40 	vmov.f32	s15, s0
 8009c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c16:	ee17 3a90 	vmov	r3, s15
 8009c1a:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009c22:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8009c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009c2a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 lspb->s1 = q1;
 8009c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c30:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009c34:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 lspb->Ta = ta;
 8009c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c3a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009c3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 lspb->Td = td;
 8009c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c44:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009c48:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 lspb->Tf = tf;
 8009c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c4e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009c52:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 lspb->a_design = a_design;
 8009c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c58:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009c5c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 lspb->v_design = v_design;
 8009c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c62:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009c66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8009c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c6c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009c70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 lspb->v0 = v0;
 8009c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 lspb->v1 = v1;
 8009c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c84:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 lspb->num_of_sampling = no_sample;
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c8c:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009c9a:	f7f6 faf5 	bl	8000288 <__aeabi_dsub>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ca4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	37b0      	adds	r7, #176	; 0xb0
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cb4:	f3af 8000 	nop.w
 8009cb8:	40000000 	.word	0x40000000
 8009cbc:	3f847ae1 	.word	0x3f847ae1
 8009cc0:	3ff00000 	.word	0x3ff00000
 8009cc4:	00000000 	.word	0x00000000
 8009cc8:	405c2000 	.word	0x405c2000
 8009ccc:	14000000 	.word	0x14000000
 8009cd0:	4000f6f0 	.word	0x4000f6f0
 8009cd4:	6b259425 	.word	0x6b259425
 8009cd8:	40069b91 	.word	0x40069b91
 8009cdc:	d2f1a9fc 	.word	0xd2f1a9fc
 8009ce0:	3f50624d 	.word	0x3f50624d
 8009ce4:	9abcaf48 	.word	0x9abcaf48
 8009ce8:	3e7ad7f2 	.word	0x3e7ad7f2

08009cec <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8009cec:	b480      	push	{r7}
 8009cee:	b089      	sub	sp, #36	; 0x24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	61f8      	str	r0, [r7, #28]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	ed87 0b04 	vstr	d0, [r7, #16]
 8009cfa:	ed87 1b02 	vstr	d1, [r7, #8]
 8009cfe:	ed87 2b00 	vstr	d2, [r7]
 8009d02:	76fb      	strb	r3, [r7, #27]
 8009d04:	4613      	mov	r3, r2
 8009d06:	76bb      	strb	r3, [r7, #26]
//	 scurve->s_1 = s_1;
//	 scurve->s_2 = s_2;
//	 scurve->s_3 = s_3;
//	 scurve->s_4 = s_4;

	 return SCARA_STATUS_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3724      	adds	r7, #36	; 0x24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
	...

08009d18 <scaraFlowDuty>:
}

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8009d18:	b082      	sub	sp, #8
 8009d1a:	b5b0      	push	{r4, r5, r7, lr}
 8009d1c:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009d20:	af2e      	add	r7, sp, #184	; 0xb8
 8009d22:	f107 0108 	add.w	r1, r7, #8
 8009d26:	ed81 0b00 	vstr	d0, [r1]
 8009d2a:	1d39      	adds	r1, r7, #4
 8009d2c:	6008      	str	r0, [r1, #0]
 8009d2e:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8009d32:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8009d36:	f107 0118 	add.w	r1, r7, #24
 8009d3a:	f107 0308 	add.w	r3, r7, #8
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8009d46:	4ba8      	ldr	r3, [pc, #672]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f040 81f1 	bne.w	800a132 <scaraFlowDuty+0x41a>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009d50:	4ba5      	ldr	r3, [pc, #660]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009d52:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d12b      	bne.n	8009db2 <scaraFlowDuty+0x9a>

			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	ed93 0b00 	vldr	d0, [r3]
 8009d62:	48a2      	ldr	r0, [pc, #648]	; (8009fec <scaraFlowDuty+0x2d4>)
 8009d64:	f7fe ffae 	bl	8008cc4 <scaraFlowLSPB1>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009d6e:	4b9e      	ldr	r3, [pc, #632]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009d70:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8009d74:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009d78:	4b9b      	ldr	r3, [pc, #620]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009d7a:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8009d7e:	f107 0110 	add.w	r1, r7, #16
 8009d82:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009d86:	4b98      	ldr	r3, [pc, #608]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009d88:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009da0:	4b91      	ldr	r3, [pc, #580]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009da2:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009da6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009db0:	e0c8      	b.n	8009f44 <scaraFlowDuty+0x22c>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8009db2:	4b8d      	ldr	r3, [pc, #564]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009db4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d126      	bne.n	8009e0a <scaraFlowDuty+0xf2>

			status1 = scaraFLowScurve1(&(myDUTY.task.trajectory_3d.scurve), time);
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	ed93 0b00 	vldr	d0, [r3]
 8009dc4:	488a      	ldr	r0, [pc, #552]	; (8009ff0 <scaraFlowDuty+0x2d8>)
 8009dc6:	f7ff f9eb 	bl	80091a0 <scaraFLowScurve1>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			//v = myDUTY.task.trajectory_3d.lspb.v_current;
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8009dd0:	4b85      	ldr	r3, [pc, #532]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009dd2:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8009dd6:	f107 0110 	add.w	r1, r7, #16
 8009dda:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009dde:	4b82      	ldr	r3, [pc, #520]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009de0:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009de4:	f107 0108 	add.w	r1, r7, #8
 8009de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dec:	f7f6 fc04 	bl	80005f8 <__aeabi_dmul>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009df8:	4b7b      	ldr	r3, [pc, #492]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009dfa:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009dfe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status2 = SCARA_STATUS_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009e08:	e09c      	b.n	8009f44 <scaraFlowDuty+0x22c>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8009e0a:	4b77      	ldr	r3, [pc, #476]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009e0c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d127      	bne.n	8009e64 <scaraFlowDuty+0x14c>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 8009e14:	4b74      	ldr	r3, [pc, #464]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009e16:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	; 0x270
 8009e1a:	f107 0308 	add.w	r3, r7, #8
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f7f6 fbe9 	bl	80005f8 <__aeabi_dmul>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	f107 0110 	add.w	r1, r7, #16
 8009e2e:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009e32:	4b6d      	ldr	r3, [pc, #436]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009e34:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009e38:	f107 0108 	add.w	r1, r7, #8
 8009e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e40:	f7f6 fbda 	bl	80005f8 <__aeabi_dmul>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009e4c:	4b66      	ldr	r3, [pc, #408]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009e4e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009e52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009e62:	e06f      	b.n	8009f44 <scaraFlowDuty+0x22c>
		}else if(DUTY_TRAJECTORY_GCODE_LSPB == myDUTY.task.trajectory_3d.trajectory_type){
 8009e64:	4b60      	ldr	r3, [pc, #384]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009e66:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d139      	bne.n	8009ee2 <scaraFlowDuty+0x1ca>
			scaraFlowGCODE(&s, time);
 8009e6e:	f107 0308 	add.w	r3, r7, #8
 8009e72:	f107 0210 	add.w	r2, r7, #16
 8009e76:	ed93 0b00 	vldr	d0, [r3]
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f7ff f8b4 	bl	8008fe8 <scaraFlowGCODE>
			s -= accumulate_s;
 8009e80:	f107 0310 	add.w	r3, r7, #16
 8009e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e88:	4b5a      	ldr	r3, [pc, #360]	; (8009ff4 <scaraFlowDuty+0x2dc>)
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f7f6 f9fb 	bl	8000288 <__aeabi_dsub>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	f107 0110 	add.w	r1, r7, #16
 8009e9a:	e9c1 2300 	strd	r2, r3, [r1]
			//LOG_REPORT1("s watcher:", s, time);
			angle = myDUTY.task.trajectory_roll.linear.constant_v*(time - last_T);
 8009e9e:	4b52      	ldr	r3, [pc, #328]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009ea0:	e9d3 45fc 	ldrd	r4, r5, [r3, #1008]	; 0x3f0
 8009ea4:	4b54      	ldr	r3, [pc, #336]	; (8009ff8 <scaraFlowDuty+0x2e0>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f107 0108 	add.w	r1, r7, #8
 8009eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb2:	f7f6 f9e9 	bl	8000288 <__aeabi_dsub>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4620      	mov	r0, r4
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	f7f6 fb9b 	bl	80005f8 <__aeabi_dmul>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009eca:	4b47      	ldr	r3, [pc, #284]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009ecc:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009ed0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009ee0:	e030      	b.n	8009f44 <scaraFlowDuty+0x22c>

		}else if(DUTY_TRAJECTORY_BEZIER_CURVE == myDUTY.task.trajectory_3d.trajectory_type){
 8009ee2:	4b41      	ldr	r3, [pc, #260]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009ee4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d129      	bne.n	8009f40 <scaraFlowDuty+0x228>
			s = time/myDUTY.time_total;
 8009eec:	4b3e      	ldr	r3, [pc, #248]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009eee:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f107 0108 	add.w	r1, r7, #8
 8009efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009efe:	f7f6 fca5 	bl	800084c <__aeabi_ddiv>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	f107 0110 	add.w	r1, r7, #16
 8009f0a:	e9c1 2300 	strd	r2, r3, [r1]
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 8009f0e:	4b36      	ldr	r3, [pc, #216]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009f10:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8009f14:	f107 0108 	add.w	r1, r7, #8
 8009f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f1c:	f7f6 fb6c 	bl	80005f8 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 8009f28:	4b2f      	ldr	r3, [pc, #188]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009f2a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8009f2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			status1 = SCARA_STATUS_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8009f3e:	e001      	b.n	8009f44 <scaraFlowDuty+0x22c>
		}else{
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8009f40:	2305      	movs	r3, #5
 8009f42:	e2de      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}

		if ( SCARA_STATUS_OK != status1) {
 8009f44:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <scaraFlowDuty+0x23a>
			return status1;
 8009f4c:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8009f50:	e2d7      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009f52:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <scaraFlowDuty+0x248>
			return status2;
 8009f5a:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8009f5e:	e2d0      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009f60:	4b21      	ldr	r3, [pc, #132]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009f62:	7a1b      	ldrb	r3, [r3, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d11d      	bne.n	8009fa4 <scaraFlowDuty+0x28c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8009f68:	f107 0310 	add.w	r3, r7, #16
 8009f6c:	ed93 7b00 	vldr	d7, [r3]
 8009f70:	eeb0 0a47 	vmov.f32	s0, s14
 8009f74:	eef0 0a67 	vmov.f32	s1, s15
 8009f78:	4820      	ldr	r0, [pc, #128]	; (8009ffc <scaraFlowDuty+0x2e4>)
 8009f7a:	f000 fad5 	bl	800a528 <scaraFlowLine>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 8009f84:	4b18      	ldr	r3, [pc, #96]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009f86:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009f8a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.line.y_current;
 8009f8e:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009f90:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009f94:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z_current;
 8009f98:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009f9a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009f9e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009fa2:	e053      	b.n	800a04c <scaraFlowDuty+0x334>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8009fa4:	4b10      	ldr	r3, [pc, #64]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009fa6:	7a1b      	ldrb	r3, [r3, #8]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d12b      	bne.n	800a004 <scaraFlowDuty+0x2ec>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8009fac:	f107 0310 	add.w	r3, r7, #16
 8009fb0:	ed93 7b00 	vldr	d7, [r3]
 8009fb4:	eeb0 0a47 	vmov.f32	s0, s14
 8009fb8:	eef0 0a67 	vmov.f32	s1, s15
 8009fbc:	4810      	ldr	r0, [pc, #64]	; (800a000 <scaraFlowDuty+0x2e8>)
 8009fbe:	f000 fc33 	bl	800a828 <scaraFlowCircle>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 8009fc8:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009fca:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8009fce:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 8009fd2:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009fd4:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8009fd8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.circle.z_current;
 8009fdc:	4b02      	ldr	r3, [pc, #8]	; (8009fe8 <scaraFlowDuty+0x2d0>)
 8009fde:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8009fe2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8009fe6:	e031      	b.n	800a04c <scaraFlowDuty+0x334>
 8009fe8:	2000ff30 	.word	0x2000ff30
 8009fec:	20010048 	.word	0x20010048
 8009ff0:	200100c8 	.word	0x200100c8
 8009ff4:	200085d0 	.word	0x200085d0
 8009ff8:	2000fd38 	.word	0x2000fd38
 8009ffc:	2000ff40 	.word	0x2000ff40
 800a000:	2000ffb0 	.word	0x2000ffb0
		} else if(DUTY_PATH_BEZIER_CURVE == myDUTY.task.path.path_type){
 800a004:	4b8b      	ldr	r3, [pc, #556]	; (800a234 <scaraFlowDuty+0x51c>)
 800a006:	7a1b      	ldrb	r3, [r3, #8]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d11d      	bne.n	800a048 <scaraFlowDuty+0x330>
			status1 = scaraFlowBezierCurve(&(myDUTY.task.path.line), s);
 800a00c:	f107 0310 	add.w	r3, r7, #16
 800a010:	ed93 7b00 	vldr	d7, [r3]
 800a014:	eeb0 0a47 	vmov.f32	s0, s14
 800a018:	eef0 0a67 	vmov.f32	s1, s15
 800a01c:	4886      	ldr	r0, [pc, #536]	; (800a238 <scaraFlowDuty+0x520>)
 800a01e:	f000 fb0b 	bl	800a638 <scaraFlowBezierCurve>
 800a022:	4603      	mov	r3, r0
 800a024:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 800a028:	4b82      	ldr	r3, [pc, #520]	; (800a234 <scaraFlowDuty+0x51c>)
 800a02a:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 800a02e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			y = myDUTY.task.path.circle.y_current;
 800a032:	4b80      	ldr	r3, [pc, #512]	; (800a234 <scaraFlowDuty+0x51c>)
 800a034:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 800a038:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			z = myDUTY.task.path.line.z0;
 800a03c:	4b7d      	ldr	r3, [pc, #500]	; (800a234 <scaraFlowDuty+0x51c>)
 800a03e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800a042:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 800a046:	e001      	b.n	800a04c <scaraFlowDuty+0x334>
		}else {
			return SCARA_STATUS_ERROR_TASK;
 800a048:	2303      	movs	r3, #3
 800a04a:	e25a      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}

		positionCompute.x 		= x;
 800a04c:	f107 0118 	add.w	r1, r7, #24
 800a050:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a054:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		positionCompute.y		= y;
 800a058:	f107 0118 	add.w	r1, r7, #24
 800a05c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800a060:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		positionCompute.z 		= z;
 800a064:	f107 0118 	add.w	r1, r7, #24
 800a068:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800a06c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 800a070:	4b70      	ldr	r3, [pc, #448]	; (800a234 <scaraFlowDuty+0x51c>)
 800a072:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800a076:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a07a:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f6 fa50 	bl	8000524 <__aeabi_i2d>
 800a084:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a088:	f7f6 fab6 	bl	80005f8 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4620      	mov	r0, r4
 800a092:	4629      	mov	r1, r5
 800a094:	f7f6 f8fa 	bl	800028c <__adddf3>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	f107 0118 	add.w	r1, r7, #24
 800a0a0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		positionCompute.q		= s;
 800a0a4:	f107 0310 	add.w	r3, r7, #16
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f107 0118 	add.w	r1, r7, #24
 800a0b0:	e9c1 2300 	strd	r2, r3, [r1]
		positionCompute.q_roll  = angle;
 800a0b4:	f107 0118 	add.w	r1, r7, #24
 800a0b8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a0bc:	e9c1 2302 	strd	r2, r3, [r1, #8]

		positionCompute.v_3d    = v;
 800a0c0:	f107 0118 	add.w	r1, r7, #24
 800a0c4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a0c8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800a0cc:	f107 0118 	add.w	r1, r7, #24
 800a0d0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a0d4:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800a0d8:	4b56      	ldr	r3, [pc, #344]	; (800a234 <scaraFlowDuty+0x51c>)
 800a0da:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f107 0118 	add.w	r1, r7, #24
 800a0e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a0ea:	f107 0118 	add.w	r1, r7, #24
 800a0ee:	f107 0308 	add.w	r3, r7, #8
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a0fa:	f107 0418 	add.w	r4, r7, #24
 800a0fe:	4668      	mov	r0, sp
 800a100:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a104:	22b8      	movs	r2, #184	; 0xb8
 800a106:	4619      	mov	r1, r3
 800a108:	f00c f9da 	bl	80164c0 <memcpy>
 800a10c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800a110:	cb0c      	ldmia	r3, {r2, r3}
 800a112:	4620      	mov	r0, r4
 800a114:	f7fb fac0 	bl	8005698 <kinematicInverse>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <scaraFlowDuty+0x40a>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a11e:	2307      	movs	r3, #7
 800a120:	e1ef      	b.n	800a502 <scaraFlowDuty+0x7ea>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a122:	f107 0118 	add.w	r1, r7, #24
 800a126:	1d3b      	adds	r3, r7, #4
 800a128:	22c0      	movs	r2, #192	; 0xc0
 800a12a:	6818      	ldr	r0, [r3, #0]
 800a12c:	f00c f9c8 	bl	80164c0 <memcpy>
 800a130:	e1e6      	b.n	800a500 <scaraFlowDuty+0x7e8>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a132:	4b40      	ldr	r3, [pc, #256]	; (800a234 <scaraFlowDuty+0x51c>)
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b01      	cmp	r3, #1
 800a138:	f040 81e0 	bne.w	800a4fc <scaraFlowDuty+0x7e4>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a13c:	4b3d      	ldr	r3, [pc, #244]	; (800a234 <scaraFlowDuty+0x51c>)
 800a13e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 8082 	bne.w	800a24c <scaraFlowDuty+0x534>
			status1 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[0].lspb), time);
 800a148:	f107 0308 	add.w	r3, r7, #8
 800a14c:	ed93 0b00 	vldr	d0, [r3]
 800a150:	483a      	ldr	r0, [pc, #232]	; (800a23c <scaraFlowDuty+0x524>)
 800a152:	f7fe fdb7 	bl	8008cc4 <scaraFlowLSPB1>
 800a156:	4603      	mov	r3, r0
 800a158:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[1].lspb), time);
 800a15c:	f107 0308 	add.w	r3, r7, #8
 800a160:	ed93 0b00 	vldr	d0, [r3]
 800a164:	4836      	ldr	r0, [pc, #216]	; (800a240 <scaraFlowDuty+0x528>)
 800a166:	f7fe fdad 	bl	8008cc4 <scaraFlowLSPB1>
 800a16a:	4603      	mov	r3, r0
 800a16c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[2].lspb), time);
 800a170:	f107 0308 	add.w	r3, r7, #8
 800a174:	ed93 0b00 	vldr	d0, [r3]
 800a178:	4832      	ldr	r0, [pc, #200]	; (800a244 <scaraFlowDuty+0x52c>)
 800a17a:	f7fe fda3 	bl	8008cc4 <scaraFlowLSPB1>
 800a17e:	4603      	mov	r3, r0
 800a180:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB1(&(myDUTY.joint.trajectory[3].lspb), time);
 800a184:	f107 0308 	add.w	r3, r7, #8
 800a188:	ed93 0b00 	vldr	d0, [r3]
 800a18c:	482e      	ldr	r0, [pc, #184]	; (800a248 <scaraFlowDuty+0x530>)
 800a18e:	f7fe fd99 	bl	8008cc4 <scaraFlowLSPB1>
 800a192:	4603      	mov	r3, r0
 800a194:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a198:	4b26      	ldr	r3, [pc, #152]	; (800a234 <scaraFlowDuty+0x51c>)
 800a19a:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800a19e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a1a2:	4b24      	ldr	r3, [pc, #144]	; (800a234 <scaraFlowDuty+0x51c>)
 800a1a4:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 800a1a8:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a1ac:	4b21      	ldr	r3, [pc, #132]	; (800a234 <scaraFlowDuty+0x51c>)
 800a1ae:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 800a1b2:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a1b6:	4b1f      	ldr	r3, [pc, #124]	; (800a234 <scaraFlowDuty+0x51c>)
 800a1b8:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 800a1bc:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a1c0:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <scaraFlowDuty+0x51c>)
 800a1c2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a1ce:	4b19      	ldr	r3, [pc, #100]	; (800a234 <scaraFlowDuty+0x51c>)
 800a1d0:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a1dc:	4b15      	ldr	r3, [pc, #84]	; (800a234 <scaraFlowDuty+0x51c>)
 800a1de:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a1ea:	4b12      	ldr	r3, [pc, #72]	; (800a234 <scaraFlowDuty+0x51c>)
 800a1ec:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a1f8:	4b0e      	ldr	r3, [pc, #56]	; (800a234 <scaraFlowDuty+0x51c>)
 800a1fa:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a206:	4b0b      	ldr	r3, [pc, #44]	; (800a234 <scaraFlowDuty+0x51c>)
 800a208:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a214:	4b07      	ldr	r3, [pc, #28]	; (800a234 <scaraFlowDuty+0x51c>)
 800a216:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a222:	4b04      	ldr	r3, [pc, #16]	; (800a234 <scaraFlowDuty+0x51c>)
 800a224:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800a230:	e06c      	b.n	800a30c <scaraFlowDuty+0x5f4>
 800a232:	bf00      	nop
 800a234:	2000ff30 	.word	0x2000ff30
 800a238:	2000ff40 	.word	0x2000ff40
 800a23c:	20010350 	.word	0x20010350
 800a240:	200104d0 	.word	0x200104d0
 800a244:	20010650 	.word	0x20010650
 800a248:	200107d0 	.word	0x200107d0

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800a24c:	4bb1      	ldr	r3, [pc, #708]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a24e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a252:	2b01      	cmp	r3, #1
 800a254:	d158      	bne.n	800a308 <scaraFlowDuty+0x5f0>
			status1 = scaraFLowScurve1(&(myDUTY.joint.trajectory[0].scurve), time);
 800a256:	f107 0308 	add.w	r3, r7, #8
 800a25a:	ed93 0b00 	vldr	d0, [r3]
 800a25e:	48ae      	ldr	r0, [pc, #696]	; (800a518 <scaraFlowDuty+0x800>)
 800a260:	f7fe ff9e 	bl	80091a0 <scaraFLowScurve1>
 800a264:	4603      	mov	r3, r0
 800a266:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve1(&(myDUTY.joint.trajectory[1].scurve), time);
 800a26a:	f107 0308 	add.w	r3, r7, #8
 800a26e:	ed93 0b00 	vldr	d0, [r3]
 800a272:	48aa      	ldr	r0, [pc, #680]	; (800a51c <scaraFlowDuty+0x804>)
 800a274:	f7fe ff94 	bl	80091a0 <scaraFLowScurve1>
 800a278:	4603      	mov	r3, r0
 800a27a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve1(&(myDUTY.joint.trajectory[2].scurve), time);
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	ed93 0b00 	vldr	d0, [r3]
 800a286:	48a6      	ldr	r0, [pc, #664]	; (800a520 <scaraFlowDuty+0x808>)
 800a288:	f7fe ff8a 	bl	80091a0 <scaraFLowScurve1>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve1(&(myDUTY.joint.trajectory[3].scurve), time);
 800a292:	f107 0308 	add.w	r3, r7, #8
 800a296:	ed93 0b00 	vldr	d0, [r3]
 800a29a:	48a2      	ldr	r0, [pc, #648]	; (800a524 <scaraFlowDuty+0x80c>)
 800a29c:	f7fe ff80 	bl	80091a0 <scaraFLowScurve1>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 800a2a6:	4b9b      	ldr	r3, [pc, #620]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a2a8:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800a2ac:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 800a2b0:	4b98      	ldr	r3, [pc, #608]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a2b2:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800a2b6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800a2ba:	4b96      	ldr	r3, [pc, #600]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a2bc:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 800a2c0:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 800a2c4:	4b93      	ldr	r3, [pc, #588]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a2c6:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800a2ca:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 800a2ce:	4b91      	ldr	r3, [pc, #580]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a2d0:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 800a2dc:	4b8d      	ldr	r3, [pc, #564]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a2de:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 800a2ea:	4b8a      	ldr	r3, [pc, #552]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a2ec:	f603 0368 	addw	r3, r3, #2152	; 0x868
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800a2f8:	4b86      	ldr	r3, [pc, #536]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a2fa:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 800a306:	e001      	b.n	800a30c <scaraFlowDuty+0x5f4>
//			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
//			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
//			v3 = myDUTY.joint.trajectory[3].scurve.v_current;

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800a308:	2305      	movs	r3, #5
 800a30a:	e0fa      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800a30c:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <scaraFlowDuty+0x602>
			return status1;
 800a314:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800a318:	e0f3      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a31a:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d002      	beq.n	800a328 <scaraFlowDuty+0x610>
			return status2;
 800a322:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 800a326:	e0ec      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}
		if ( SCARA_STATUS_OK != status3) {
 800a328:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <scaraFlowDuty+0x61e>
			return status3;
 800a330:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800a334:	e0e5      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a336:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <scaraFlowDuty+0x62c>
			return status4;
 800a33e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800a342:	e0de      	b.n	800a502 <scaraFlowDuty+0x7ea>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800a344:	4b73      	ldr	r3, [pc, #460]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a346:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800a34a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a34e:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800a352:	4618      	mov	r0, r3
 800a354:	f7f6 f8e6 	bl	8000524 <__aeabi_i2d>
 800a358:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a35c:	f7f6 f94c 	bl	80005f8 <__aeabi_dmul>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4620      	mov	r0, r4
 800a366:	4629      	mov	r1, r5
 800a368:	f7f5 ff90 	bl	800028c <__adddf3>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	f107 0118 	add.w	r1, r7, #24
 800a374:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 800a378:	4b66      	ldr	r3, [pc, #408]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a37a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800a37e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a382:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800a386:	4618      	mov	r0, r3
 800a388:	f7f6 f8cc 	bl	8000524 <__aeabi_i2d>
 800a38c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a390:	f7f6 f932 	bl	80005f8 <__aeabi_dmul>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4620      	mov	r0, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	f7f5 ff76 	bl	800028c <__adddf3>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	f107 0118 	add.w	r1, r7, #24
 800a3a8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 800a3ac:	4b59      	ldr	r3, [pc, #356]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a3ae:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a3b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a3b6:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f6 f8b2 	bl	8000524 <__aeabi_i2d>
 800a3c0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a3c4:	f7f6 f918 	bl	80005f8 <__aeabi_dmul>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7f5 ff5c 	bl	800028c <__adddf3>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	f107 0118 	add.w	r1, r7, #24
 800a3dc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 800a3e0:	4b4c      	ldr	r3, [pc, #304]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a3e2:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800a3e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a3ea:	f997 30e4 	ldrsb.w	r3, [r7, #228]	; 0xe4
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7f6 f898 	bl	8000524 <__aeabi_i2d>
 800a3f4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a3f8:	f7f6 f8fe 	bl	80005f8 <__aeabi_dmul>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4620      	mov	r0, r4
 800a402:	4629      	mov	r1, r5
 800a404:	f7f5 ff42 	bl	800028c <__adddf3>
 800a408:	4602      	mov	r2, r0
 800a40a:	460b      	mov	r3, r1
 800a40c:	f107 0118 	add.w	r1, r7, #24
 800a410:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a414:	f107 0118 	add.w	r1, r7, #24
 800a418:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800a41c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a420:	f107 0118 	add.w	r1, r7, #24
 800a424:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a428:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a42c:	f107 0118 	add.w	r1, r7, #24
 800a430:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a434:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a438:	f107 0118 	add.w	r1, r7, #24
 800a43c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a440:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a444:	f107 0118 	add.w	r1, r7, #24
 800a448:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a44c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		positionCompute.q_theta2 = s1;
 800a450:	f107 0118 	add.w	r1, r7, #24
 800a454:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800a458:	e9c1 2306 	strd	r2, r3, [r1, #24]
		positionCompute.q_d3	 = s2;
 800a45c:	f107 0118 	add.w	r1, r7, #24
 800a460:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800a464:	e9c1 2308 	strd	r2, r3, [r1, #32]
		positionCompute.q_theta4 = s3;
 800a468:	f107 0118 	add.w	r1, r7, #24
 800a46c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800a470:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a474:	4b27      	ldr	r3, [pc, #156]	; (800a514 <scaraFlowDuty+0x7fc>)
 800a476:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f107 0118 	add.w	r1, r7, #24
 800a482:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		positionCompute.t		= time;
 800a486:	f107 0118 	add.w	r1, r7, #24
 800a48a:	f107 0308 	add.w	r3, r7, #8
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a496:	f107 0318 	add.w	r3, r7, #24
 800a49a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a49e:	f107 0318 	add.w	r3, r7, #24
 800a4a2:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a4a6:	f107 0318 	add.w	r3, r7, #24
 800a4aa:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a4ae:	f107 0318 	add.w	r3, r7, #24
 800a4b2:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a4b6:	eeb0 3a44 	vmov.f32	s6, s8
 800a4ba:	eef0 3a64 	vmov.f32	s7, s9
 800a4be:	eeb0 2a45 	vmov.f32	s4, s10
 800a4c2:	eef0 2a65 	vmov.f32	s5, s11
 800a4c6:	eeb0 1a46 	vmov.f32	s2, s12
 800a4ca:	eef0 1a66 	vmov.f32	s3, s13
 800a4ce:	eeb0 0a47 	vmov.f32	s0, s14
 800a4d2:	eef0 0a67 	vmov.f32	s1, s15
 800a4d6:	f000 fa2f 	bl	800a938 <scaraCheckWorkSpace4>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <scaraFlowDuty+0x7cc>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a4e0:	2307      	movs	r3, #7
 800a4e2:	e00e      	b.n	800a502 <scaraFlowDuty+0x7ea>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a4e4:	f107 0118 	add.w	r1, r7, #24
 800a4e8:	1d3b      	adds	r3, r7, #4
 800a4ea:	22c0      	movs	r2, #192	; 0xc0
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	f00b ffe7 	bl	80164c0 <memcpy>
		}
		kinematicForward(pos_Next);
 800a4f2:	1d3b      	adds	r3, r7, #4
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	f7fa ffab 	bl	8005450 <kinematicForward>
 800a4fa:	e001      	b.n	800a500 <scaraFlowDuty+0x7e8>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	e000      	b.n	800a502 <scaraFlowDuty+0x7ea>
	}

	return SCARA_STATUS_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a508:	46bd      	mov	sp, r7
 800a50a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a50e:	b002      	add	sp, #8
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	2000ff30 	.word	0x2000ff30
 800a518:	200103d0 	.word	0x200103d0
 800a51c:	20010550 	.word	0x20010550
 800a520:	200106d0 	.word	0x200106d0
 800a524:	20010850 	.word	0x20010850

0800a528 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 800a528:	b5b0      	push	{r4, r5, r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a53a:	a33d      	add	r3, pc, #244	; (adr r3, 800a630 <scaraFlowLine+0x108>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f7f6 faea 	bl	8000b18 <__aeabi_dcmpgt>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d05a      	beq.n	800a600 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800a556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a55a:	f7f6 f84d 	bl	80005f8 <__aeabi_dmul>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4610      	mov	r0, r2
 800a564:	4619      	mov	r1, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a56c:	f7f6 f96e 	bl	800084c <__aeabi_ddiv>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4620      	mov	r0, r4
 800a576:	4629      	mov	r1, r5
 800a578:	f7f5 fe88 	bl	800028c <__adddf3>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	68f9      	ldr	r1, [r7, #12]
 800a582:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800a592:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a596:	f7f6 f82f 	bl	80005f8 <__aeabi_dmul>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4610      	mov	r0, r2
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a5a8:	f7f6 f950 	bl	800084c <__aeabi_ddiv>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	f7f5 fe6a 	bl	800028c <__adddf3>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	68f9      	ldr	r1, [r7, #12]
 800a5be:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a5ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5d2:	f7f6 f811 	bl	80005f8 <__aeabi_dmul>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4610      	mov	r0, r2
 800a5dc:	4619      	mov	r1, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a5e4:	f7f6 f932 	bl	800084c <__aeabi_ddiv>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f7f5 fe4c 	bl	800028c <__adddf3>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	68f9      	ldr	r1, [r7, #12]
 800a5fa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800a5fe:	e011      	b.n	800a624 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		line->y_current = line->y1;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a612:	68f9      	ldr	r1, [r7, #12]
 800a614:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		line->z_current = line->z1;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a61e:	68f9      	ldr	r1, [r7, #12]
 800a620:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bdb0      	pop	{r4, r5, r7, pc}
 800a62e:	bf00      	nop
 800a630:	47ae147b 	.word	0x47ae147b
 800a634:	3f847ae1 	.word	0x3f847ae1

0800a638 <scaraFlowBezierCurve>:
SCARA_StatusTypeDef	scaraFlowBezierCurve	(Path_Line_TypeDef *line, double s) {
 800a638:	b5b0      	push	{r4, r5, r7, lr}
 800a63a:	b08a      	sub	sp, #40	; 0x28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	ed87 0b00 	vstr	d0, [r7]
	double a,b,c;
	a = (1-s)*(1-s);
 800a644:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a648:	f04f 0000 	mov.w	r0, #0
 800a64c:	4972      	ldr	r1, [pc, #456]	; (800a818 <scaraFlowBezierCurve+0x1e0>)
 800a64e:	f7f5 fe1b 	bl	8000288 <__aeabi_dsub>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	4614      	mov	r4, r2
 800a658:	461d      	mov	r5, r3
 800a65a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a65e:	f04f 0000 	mov.w	r0, #0
 800a662:	496d      	ldr	r1, [pc, #436]	; (800a818 <scaraFlowBezierCurve+0x1e0>)
 800a664:	f7f5 fe10 	bl	8000288 <__aeabi_dsub>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = s*(1-s);
 800a67c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a680:	f04f 0000 	mov.w	r0, #0
 800a684:	4964      	ldr	r1, [pc, #400]	; (800a818 <scaraFlowBezierCurve+0x1e0>)
 800a686:	f7f5 fdff 	bl	8000288 <__aeabi_dsub>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a692:	f7f5 ffb1 	bl	80005f8 <__aeabi_dmul>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	c = s*s;
 800a69e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6a6:	f7f5 ffa7 	bl	80005f8 <__aeabi_dmul>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	line->x_current = (a*bezier_x_coeffs[0] + b*bezier_x_coeffs[1] + c*bezier_x_coeffs[2])/(a + 2*bezier_wc*b+c);
 800a6b2:	4b5a      	ldr	r3, [pc, #360]	; (800a81c <scaraFlowBezierCurve+0x1e4>)
 800a6b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6bc:	f7f5 ff9c 	bl	80005f8 <__aeabi_dmul>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	461d      	mov	r5, r3
 800a6c8:	4b54      	ldr	r3, [pc, #336]	; (800a81c <scaraFlowBezierCurve+0x1e4>)
 800a6ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a6ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4620      	mov	r0, r4
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f7f5 fdd5 	bl	800028c <__adddf3>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4614      	mov	r4, r2
 800a6e8:	461d      	mov	r5, r3
 800a6ea:	4b4c      	ldr	r3, [pc, #304]	; (800a81c <scaraFlowBezierCurve+0x1e4>)
 800a6ec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a6f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f5 fdc4 	bl	800028c <__adddf3>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4614      	mov	r4, r2
 800a70a:	461d      	mov	r5, r3
 800a70c:	4b44      	ldr	r3, [pc, #272]	; (800a820 <scaraFlowBezierCurve+0x1e8>)
 800a70e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	f7f5 fdb9 	bl	800028c <__adddf3>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4610      	mov	r0, r2
 800a720:	4619      	mov	r1, r3
 800a722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a726:	f7f5 ff67 	bl	80005f8 <__aeabi_dmul>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4610      	mov	r0, r2
 800a730:	4619      	mov	r1, r3
 800a732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a736:	f7f5 fda9 	bl	800028c <__adddf3>
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	4610      	mov	r0, r2
 800a740:	4619      	mov	r1, r3
 800a742:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a746:	f7f5 fda1 	bl	800028c <__adddf3>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	4620      	mov	r0, r4
 800a750:	4629      	mov	r1, r5
 800a752:	f7f6 f87b 	bl	800084c <__aeabi_ddiv>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	68f9      	ldr	r1, [r7, #12]
 800a75c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	line->y_current = (a*bezier_y_coeffs[0] + b*bezier_y_coeffs[1] + c*bezier_y_coeffs[2])/(a + 2*bezier_wc*b+c);
 800a760:	4b30      	ldr	r3, [pc, #192]	; (800a824 <scaraFlowBezierCurve+0x1ec>)
 800a762:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a76a:	f7f5 ff45 	bl	80005f8 <__aeabi_dmul>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4614      	mov	r4, r2
 800a774:	461d      	mov	r5, r3
 800a776:	4b2b      	ldr	r3, [pc, #172]	; (800a824 <scaraFlowBezierCurve+0x1ec>)
 800a778:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a77c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a780:	f7f5 ff3a 	bl	80005f8 <__aeabi_dmul>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4620      	mov	r0, r4
 800a78a:	4629      	mov	r1, r5
 800a78c:	f7f5 fd7e 	bl	800028c <__adddf3>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	4614      	mov	r4, r2
 800a796:	461d      	mov	r5, r3
 800a798:	4b22      	ldr	r3, [pc, #136]	; (800a824 <scaraFlowBezierCurve+0x1ec>)
 800a79a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a79e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a7a2:	f7f5 ff29 	bl	80005f8 <__aeabi_dmul>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	f7f5 fd6d 	bl	800028c <__adddf3>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4614      	mov	r4, r2
 800a7b8:	461d      	mov	r5, r3
 800a7ba:	4b19      	ldr	r3, [pc, #100]	; (800a820 <scaraFlowBezierCurve+0x1e8>)
 800a7bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	f7f5 fd62 	bl	800028c <__adddf3>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7d4:	f7f5 ff10 	bl	80005f8 <__aeabi_dmul>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4610      	mov	r0, r2
 800a7de:	4619      	mov	r1, r3
 800a7e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7e4:	f7f5 fd52 	bl	800028c <__adddf3>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a7f4:	f7f5 fd4a 	bl	800028c <__adddf3>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4629      	mov	r1, r5
 800a800:	f7f6 f824 	bl	800084c <__aeabi_ddiv>
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	68f9      	ldr	r1, [r7, #12]
 800a80a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	return SCARA_STATUS_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3728      	adds	r7, #40	; 0x28
 800a814:	46bd      	mov	sp, r7
 800a816:	bdb0      	pop	{r4, r5, r7, pc}
 800a818:	3ff00000 	.word	0x3ff00000
 800a81c:	20008f68 	.word	0x20008f68
 800a820:	20008fb8 	.word	0x20008fb8
 800a824:	2000fd48 	.word	0x2000fd48

0800a828 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 800a828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a82c:	b086      	sub	sp, #24
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a83c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a840:	f7f6 f804 	bl	800084c <__aeabi_ddiv>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	e9c7 2304 	strd	r2, r3, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f993 3000 	ldrsb.w	r3, [r3]
 800a864:	4618      	mov	r0, r3
 800a866:	f7f5 fe5d 	bl	8000524 <__aeabi_i2d>
 800a86a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a86e:	f7f5 fec3 	bl	80005f8 <__aeabi_dmul>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	4650      	mov	r0, sl
 800a878:	4659      	mov	r1, fp
 800a87a:	f7f5 fd07 	bl	800028c <__adddf3>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	ec43 2b17 	vmov	d7, r2, r3
 800a886:	eeb0 0a47 	vmov.f32	s0, s14
 800a88a:	eef0 0a67 	vmov.f32	s1, s15
 800a88e:	f010 faf7 	bl	801ae80 <cos>
 800a892:	ec53 2b10 	vmov	r2, r3, d0
 800a896:	4640      	mov	r0, r8
 800a898:	4649      	mov	r1, r9
 800a89a:	f7f5 fead 	bl	80005f8 <__aeabi_dmul>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	f7f5 fcf1 	bl	800028c <__adddf3>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f993 3000 	ldrsb.w	r3, [r3]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7f5 fe29 	bl	8000524 <__aeabi_i2d>
 800a8d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a8d6:	f7f5 fe8f 	bl	80005f8 <__aeabi_dmul>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4650      	mov	r0, sl
 800a8e0:	4659      	mov	r1, fp
 800a8e2:	f7f5 fcd3 	bl	800028c <__adddf3>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	ec43 2b17 	vmov	d7, r2, r3
 800a8ee:	eeb0 0a47 	vmov.f32	s0, s14
 800a8f2:	eef0 0a67 	vmov.f32	s1, s15
 800a8f6:	f010 fb5b 	bl	801afb0 <sin>
 800a8fa:	ec53 2b10 	vmov	r2, r3, d0
 800a8fe:	4640      	mov	r0, r8
 800a900:	4649      	mov	r1, r9
 800a902:	f7f5 fe79 	bl	80005f8 <__aeabi_dmul>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4620      	mov	r0, r4
 800a90c:	4629      	mov	r1, r5
 800a90e:	f7f5 fcbd 	bl	800028c <__adddf3>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	68f9      	ldr	r1, [r7, #12]
 800a918:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800a922:	68f9      	ldr	r1, [r7, #12]
 800a924:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

	return SCARA_STATUS_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a934:	0000      	movs	r0, r0
	...

0800a938 <scaraCheckWorkSpace4>:

	 return SCARA_STATUS_OK;
}

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	ed87 0b06 	vstr	d0, [r7, #24]
 800a942:	ed87 1b04 	vstr	d1, [r7, #16]
 800a946:	ed87 2b02 	vstr	d2, [r7, #8]
 800a94a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 800a94e:	a335      	add	r3, pc, #212	; (adr r3, 800aa24 <scaraCheckWorkSpace4+0xec>)
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a958:	f7f6 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d109      	bne.n	800a976 <scaraCheckWorkSpace4+0x3e>
 800a962:	a332      	add	r3, pc, #200	; (adr r3, 800aa2c <scaraCheckWorkSpace4+0xf4>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a96c:	f7f6 f8d4 	bl	8000b18 <__aeabi_dcmpgt>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a976:	2307      	movs	r3, #7
 800a978:	e043      	b.n	800aa02 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 800a97a:	a32e      	add	r3, pc, #184	; (adr r3, 800aa34 <scaraCheckWorkSpace4+0xfc>)
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a984:	f7f6 f8aa 	bl	8000adc <__aeabi_dcmplt>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <scaraCheckWorkSpace4+0x6a>
 800a98e:	a32b      	add	r3, pc, #172	; (adr r3, 800aa3c <scaraCheckWorkSpace4+0x104>)
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a998:	f7f6 f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a9a2:	2307      	movs	r3, #7
 800a9a4:	e02d      	b.n	800aa02 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a9a6:	f04f 0200 	mov.w	r2, #0
 800a9aa:	f04f 0300 	mov.w	r3, #0
 800a9ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9b2:	f7f6 f893 	bl	8000adc <__aeabi_dcmplt>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d109      	bne.n	800a9d0 <scaraCheckWorkSpace4+0x98>
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	4b17      	ldr	r3, [pc, #92]	; (800aa20 <scaraCheckWorkSpace4+0xe8>)
 800a9c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9c6:	f7f6 f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a9d0:	2307      	movs	r3, #7
 800a9d2:	e016      	b.n	800aa02 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a9d4:	a30e      	add	r3, pc, #56	; (adr r3, 800aa10 <scaraCheckWorkSpace4+0xd8>)
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9de:	f7f6 f87d 	bl	8000adc <__aeabi_dcmplt>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d109      	bne.n	800a9fc <scaraCheckWorkSpace4+0xc4>
 800a9e8:	a30b      	add	r3, pc, #44	; (adr r3, 800aa18 <scaraCheckWorkSpace4+0xe0>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9f2:	f7f6 f891 	bl	8000b18 <__aeabi_dcmpgt>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a9fc:	2307      	movs	r3, #7
 800a9fe:	e000      	b.n	800aa02 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	f3af 8000 	nop.w
 800aa10:	a7777778 	.word	0xa7777778
 800aa14:	c0088956 	.word	0xc0088956
 800aa18:	a7777778 	.word	0xa7777778
 800aa1c:	40088956 	.word	0x40088956
 800aa20:	40590000 	.word	0x40590000
 800aa24:	74444445 	.word	0x74444445
 800aa28:	bff95623 	.word	0xbff95623
 800aa2c:	74444445 	.word	0x74444445
 800aa30:	3ff95623 	.word	0x3ff95623
 800aa34:	54cccccd 	.word	0x54cccccd
 800aa38:	c003a649 	.word	0xc003a649
 800aa3c:	54cccccd 	.word	0x54cccccd
 800aa40:	4003a649 	.word	0x4003a649
 800aa44:	00000000 	.word	0x00000000

0800aa48 <scaraTestDuty>:
	}
}


/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800aa48:	b5b0      	push	{r4, r5, r7, lr}
 800aa4a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800aa4e:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800aa50:	f04f 0200 	mov.w	r2, #0
 800aa54:	f04f 0300 	mov.w	r3, #0
 800aa58:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800aa5c:	463b      	mov	r3, r7
 800aa5e:	4a36      	ldr	r2, [pc, #216]	; (800ab38 <scaraTestDuty+0xf0>)
 800aa60:	4618      	mov	r0, r3
 800aa62:	4611      	mov	r1, r2
 800aa64:	23c0      	movs	r3, #192	; 0xc0
 800aa66:	461a      	mov	r2, r3
 800aa68:	f00b fd2a 	bl	80164c0 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800aa6c:	4b33      	ldr	r3, [pc, #204]	; (800ab3c <scaraTestDuty+0xf4>)
 800aa6e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800aa72:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa76:	a32e      	add	r3, pc, #184	; (adr r3, 800ab30 <scaraTestDuty+0xe8>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f7f5 fee6 	bl	800084c <__aeabi_ddiv>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	ec43 2b17 	vmov	d7, r2, r3
 800aa88:	eeb0 0a47 	vmov.f32	s0, s14
 800aa8c:	eef0 0a67 	vmov.f32	s1, s15
 800aa90:	f010 f972 	bl	801ad78 <ceil>
 800aa94:	ec53 2b10 	vmov	r2, r3, d0
 800aa98:	4610      	mov	r0, r2
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	f7f6 f85c 	bl	8000b58 <__aeabi_d2iz>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800aaac:	e032      	b.n	800ab14 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800aaae:	a320      	add	r3, pc, #128	; (adr r3, 800ab30 <scaraTestDuty+0xe8>)
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800aab8:	f7f5 fbe8 	bl	800028c <__adddf3>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800aac4:	463c      	mov	r4, r7
 800aac6:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800aaca:	4668      	mov	r0, sp
 800aacc:	f104 0308 	add.w	r3, r4, #8
 800aad0:	22b8      	movs	r2, #184	; 0xb8
 800aad2:	4619      	mov	r1, r3
 800aad4:	f00b fcf4 	bl	80164c0 <memcpy>
 800aad8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800aadc:	4628      	mov	r0, r5
 800aade:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800aae2:	f7ff f919 	bl	8009d18 <scaraFlowDuty>
 800aae6:	4603      	mov	r3, r0
 800aae8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800aaec:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <scaraTestDuty+0xb2>
			return status;
 800aaf4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800aaf8:	e013      	b.n	800ab22 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800aafa:	463a      	mov	r2, r7
 800aafc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800ab00:	4611      	mov	r1, r2
 800ab02:	22c0      	movs	r2, #192	; 0xc0
 800ab04:	4618      	mov	r0, r3
 800ab06:	f00b fcdb 	bl	80164c0 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800ab0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ab0e:	3301      	adds	r3, #1
 800ab10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800ab14:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ab18:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	dbc6      	blt.n	800aaae <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab2c:	f3af 8000 	nop.w
 800ab30:	40000000 	.word	0x40000000
 800ab34:	3f847ae1 	.word	0x3f847ae1
 800ab38:	20010af0 	.word	0x20010af0
 800ab3c:	2000ff30 	.word	0x2000ff30

0800ab40 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800ab40:	b480      	push	{r7}
 800ab42:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800ab44:	4b03      	ldr	r3, [pc, #12]	; (800ab54 <scaraSetScanFlag+0x14>)
 800ab46:	2201      	movs	r2, #1
 800ab48:	70da      	strb	r2, [r3, #3]
}
 800ab4a:	bf00      	nop
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	20004080 	.word	0x20004080

0800ab58 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800ab62:	4a05      	ldr	r2, [pc, #20]	; (800ab78 <scaraSetOutput+0x20>)
 800ab64:	79fb      	ldrb	r3, [r7, #7]
 800ab66:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800ab68:	79fb      	ldrb	r3, [r7, #7]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fc f870 	bl	8006c50 <lowlayer_setOutput>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20004080 	.word	0x20004080

0800ab7c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800ab86:	4a04      	ldr	r2, [pc, #16]	; (800ab98 <scaraSetDutyState+0x1c>)
 800ab88:	79fb      	ldrb	r3, [r7, #7]
 800ab8a:	7093      	strb	r3, [r2, #2]
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	20004080 	.word	0x20004080

0800ab9c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800aba6:	4a04      	ldr	r2, [pc, #16]	; (800abb8 <scaraSetMode+0x1c>)
 800aba8:	79fb      	ldrb	r3, [r7, #7]
 800abaa:	7053      	strb	r3, [r2, #1]
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20004080 	.word	0x20004080

0800abbc <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800abc6:	4a04      	ldr	r2, [pc, #16]	; (800abd8 <scaraSetMethod+0x1c>)
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	7013      	strb	r3, [r2, #0]
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	20004080 	.word	0x20004080

0800abdc <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800abe4:	22c0      	movs	r2, #192	; 0xc0
 800abe6:	4904      	ldr	r1, [pc, #16]	; (800abf8 <scaraGetPosition+0x1c>)
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f00b fc69 	bl	80164c0 <memcpy>
}
 800abee:	bf00      	nop
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20010af0 	.word	0x20010af0

0800abfc <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800ac04:	22c0      	movs	r2, #192	; 0xc0
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	4803      	ldr	r0, [pc, #12]	; (800ac18 <scaraUpdatePosition+0x1c>)
 800ac0a:	f00b fc59 	bl	80164c0 <memcpy>
}
 800ac0e:	bf00      	nop
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20010c70 	.word	0x20010c70

0800ac1c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800ac20:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <scaraGetMode+0x14>)
 800ac22:	785b      	ldrb	r3, [r3, #1]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	20004080 	.word	0x20004080

0800ac34 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800ac38:	4b03      	ldr	r3, [pc, #12]	; (800ac48 <scaraGetMethod+0x14>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20004080 	.word	0x20004080

0800ac4c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800ac4c:	b480      	push	{r7}
 800ac4e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800ac50:	4b03      	ldr	r3, [pc, #12]	; (800ac60 <scaraGetDutyState+0x14>)
 800ac52:	789b      	ldrb	r3, [r3, #2]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	20004080 	.word	0x20004080

0800ac64 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800ac64:	b480      	push	{r7}
 800ac66:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800ac68:	4b03      	ldr	r3, [pc, #12]	; (800ac78 <scaraIsScanLimit+0x14>)
 800ac6a:	78db      	ldrb	r3, [r3, #3]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	20004080 	.word	0x20004080

0800ac7c <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800ac86:	4b09      	ldr	r3, [pc, #36]	; (800acac <scaraIsFinish+0x30>)
 800ac88:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac94:	f7f5 ff40 	bl	8000b18 <__aeabi_dcmpgt>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <scaraIsFinish+0x26>
		return TRUE;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <scaraIsFinish+0x28>
	} else {
		return FALSE;
 800aca2:	2300      	movs	r3, #0
	}
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	2000ff30 	.word	0x2000ff30

0800acb0 <scaraPosition_packaging>:


int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800acb0:	b082      	sub	sp, #8
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	f107 0118 	add.w	r1, r7, #24
 800acbe:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800acc2:	f06f 0303 	mvn.w	r3, #3
 800acc6:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800acc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800accc:	a35c      	add	r3, pc, #368	; (adr r3, 800ae40 <scaraPosition_packaging+0x190>)
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	f7f5 fc91 	bl	80005f8 <__aeabi_dmul>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4610      	mov	r0, r2
 800acdc:	4619      	mov	r1, r3
 800acde:	f7f5 ff3b 	bl	8000b58 <__aeabi_d2iz>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3304      	adds	r3, #4
 800ace6:	60fb      	str	r3, [r7, #12]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	4619      	mov	r1, r3
 800acf0:	f000 f8aa 	bl	800ae48 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800acf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800acf8:	a351      	add	r3, pc, #324	; (adr r3, 800ae40 <scaraPosition_packaging+0x190>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	f7f5 fc7b 	bl	80005f8 <__aeabi_dmul>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4610      	mov	r0, r2
 800ad08:	4619      	mov	r1, r3
 800ad0a:	f7f5 ff25 	bl	8000b58 <__aeabi_d2iz>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	3304      	adds	r3, #4
 800ad12:	60fb      	str	r3, [r7, #12]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	4413      	add	r3, r2
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	f000 f894 	bl	800ae48 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ad20:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800ad24:	a346      	add	r3, pc, #280	; (adr r3, 800ae40 <scaraPosition_packaging+0x190>)
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	f7f5 fc65 	bl	80005f8 <__aeabi_dmul>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4610      	mov	r0, r2
 800ad34:	4619      	mov	r1, r3
 800ad36:	f7f5 ff0f 	bl	8000b58 <__aeabi_d2iz>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	60fb      	str	r3, [r7, #12]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	4413      	add	r3, r2
 800ad46:	4619      	mov	r1, r3
 800ad48:	f000 f87e 	bl	800ae48 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ad4c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800ad50:	a33b      	add	r3, pc, #236	; (adr r3, 800ae40 <scaraPosition_packaging+0x190>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	f7f5 fc4f 	bl	80005f8 <__aeabi_dmul>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4619      	mov	r1, r3
 800ad62:	f7f5 fef9 	bl	8000b58 <__aeabi_d2iz>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	60fb      	str	r3, [r7, #12]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	4413      	add	r3, r2
 800ad72:	4619      	mov	r1, r3
 800ad74:	f000 f868 	bl	800ae48 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ad78:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad7c:	a330      	add	r3, pc, #192	; (adr r3, 800ae40 <scaraPosition_packaging+0x190>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	f7f5 fc39 	bl	80005f8 <__aeabi_dmul>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	f7f5 fee3 	bl	8000b58 <__aeabi_d2iz>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3304      	adds	r3, #4
 800ad96:	60fb      	str	r3, [r7, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	4619      	mov	r1, r3
 800ada0:	f000 f852 	bl	800ae48 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800ada4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800ada8:	a325      	add	r3, pc, #148	; (adr r3, 800ae40 <scaraPosition_packaging+0x190>)
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	f7f5 fc23 	bl	80005f8 <__aeabi_dmul>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	4610      	mov	r0, r2
 800adb8:	4619      	mov	r1, r3
 800adba:	f7f5 fecd 	bl	8000b58 <__aeabi_d2iz>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3304      	adds	r3, #4
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	4619      	mov	r1, r3
 800adcc:	f000 f83c 	bl	800ae48 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800add0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800add4:	a31a      	add	r3, pc, #104	; (adr r3, 800ae40 <scaraPosition_packaging+0x190>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f7f5 fc0d 	bl	80005f8 <__aeabi_dmul>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4610      	mov	r0, r2
 800ade4:	4619      	mov	r1, r3
 800ade6:	f7f5 feb7 	bl	8000b58 <__aeabi_d2iz>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3304      	adds	r3, #4
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	4413      	add	r3, r2
 800adf6:	4619      	mov	r1, r3
 800adf8:	f000 f826 	bl	800ae48 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800adfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ae00:	a30f      	add	r3, pc, #60	; (adr r3, 800ae40 <scaraPosition_packaging+0x190>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	f7f5 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4610      	mov	r0, r2
 800ae10:	4619      	mov	r1, r3
 800ae12:	f7f5 fea1 	bl	8000b58 <__aeabi_d2iz>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	4413      	add	r3, r2
 800ae22:	4619      	mov	r1, r3
 800ae24:	f000 f810 	bl	800ae48 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3304      	adds	r3, #4
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae36:	b002      	add	sp, #8
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	f3af 8000 	nop.w
 800ae40:	00000000 	.word	0x00000000
 800ae44:	412e8480 	.word	0x412e8480

0800ae48 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	121a      	asrs	r2, r3, #8
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	b2d2      	uxtb	r2, r2
 800ae64:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	141a      	asrs	r2, r3, #16
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	3302      	adds	r3, #2
 800ae6e:	b2d2      	uxtb	r2, r2
 800ae70:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	161a      	asrs	r2, r3, #24
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	3303      	adds	r3, #3
 800ae7a:	b2d2      	uxtb	r2, r2
 800ae7c:	701a      	strb	r2, [r3, #0]
}
 800ae7e:	bf00      	nop
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	0000      	movs	r0, r0
 800ae8c:	0000      	movs	r0, r0
	...

0800ae90 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800ae90:	b590      	push	{r4, r7, lr}
 800ae92:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800ae96:	af6c      	add	r7, sp, #432	; 0x1b0
 800ae98:	4602      	mov	r2, r0
 800ae9a:	463b      	mov	r3, r7
 800ae9c:	6019      	str	r1, [r3, #0]
 800ae9e:	1dfb      	adds	r3, r7, #7
 800aea0:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800aea2:	f107 0308 	add.w	r3, r7, #8
 800aea6:	2201      	movs	r2, #1
 800aea8:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800aeaa:	f107 0308 	add.w	r3, r7, #8
 800aeae:	2200      	movs	r2, #0
 800aeb0:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800aeb2:	f107 0308 	add.w	r3, r7, #8
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800aeba:	f04f 0200 	mov.w	r2, #0
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800aec6:	463b      	mov	r3, r7
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dd03      	ble.n	800aed6 <scaraKeyInit1+0x46>
 800aece:	463b      	mov	r3, r7
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b0e      	cmp	r3, #14
 800aed4:	dd01      	ble.n	800aeda <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800aed6:	2306      	movs	r3, #6
 800aed8:	e2c0      	b.n	800b45c <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800aeda:	1dfb      	adds	r3, r7, #7
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b07      	cmp	r3, #7
 800aee0:	f200 8298 	bhi.w	800b414 <scaraKeyInit1+0x584>
 800aee4:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <scaraKeyInit1+0x5c>)
 800aee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeea:	bf00      	nop
 800aeec:	0800af0d 	.word	0x0800af0d
 800aef0:	0800afaf 	.word	0x0800afaf
 800aef4:	0800b055 	.word	0x0800b055
 800aef8:	0800b0f3 	.word	0x0800b0f3
 800aefc:	0800b195 	.word	0x0800b195
 800af00:	0800b233 	.word	0x0800b233
 800af04:	0800b2d5 	.word	0x0800b2d5
 800af08:	0800b373 	.word	0x0800b373
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800af0c:	f107 0108 	add.w	r1, r7, #8
 800af10:	f04f 0200 	mov.w	r2, #0
 800af14:	f04f 0300 	mov.w	r3, #0
 800af18:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800af1c:	f107 0308 	add.w	r3, r7, #8
 800af20:	2200      	movs	r2, #0
 800af22:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800af24:	f107 0308 	add.w	r3, r7, #8
 800af28:	2200      	movs	r2, #0
 800af2a:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*SHIFT_KEY_S;
 800af2c:	463b      	mov	r3, r7
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	4618      	mov	r0, r3
 800af38:	f7f5 faf4 	bl	8000524 <__aeabi_i2d>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	f107 0108 	add.w	r1, r7, #8
 800af44:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800af48:	f107 0108 	add.w	r1, r7, #8
 800af4c:	f04f 0200 	mov.w	r2, #0
 800af50:	f04f 0300 	mov.w	r3, #0
 800af54:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	f04f 0300 	mov.w	r3, #0
 800af64:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800af68:	f107 0108 	add.w	r1, r7, #8
 800af6c:	f04f 0200 	mov.w	r2, #0
 800af70:	f04f 0300 	mov.w	r3, #0
 800af74:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800af78:	463b      	mov	r3, r7
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	f7f5 fad2 	bl	8000524 <__aeabi_i2d>
 800af80:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 fb36 	bl	80005f8 <__aeabi_dmul>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4610      	mov	r0, r2
 800af92:	4619      	mov	r1, r3
 800af94:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f7f5 f976 	bl	800028c <__adddf3>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	f107 0108 	add.w	r1, r7, #8
 800afa8:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800afac:	e232      	b.n	800b414 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800afae:	f107 0108 	add.w	r1, r7, #8
 800afb2:	f04f 0200 	mov.w	r2, #0
 800afb6:	f04f 0300 	mov.w	r3, #0
 800afba:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800afbe:	f107 0308 	add.w	r3, r7, #8
 800afc2:	2200      	movs	r2, #0
 800afc4:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800afc6:	f107 0308 	add.w	r3, r7, #8
 800afca:	2200      	movs	r2, #0
 800afcc:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*SHIFT_KEY_S;
 800afce:	463b      	mov	r3, r7
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	4613      	mov	r3, r2
 800afd4:	079b      	lsls	r3, r3, #30
 800afd6:	1a9b      	subs	r3, r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	1a9b      	subs	r3, r3, r2
 800afdc:	4618      	mov	r0, r3
 800afde:	f7f5 faa1 	bl	8000524 <__aeabi_i2d>
 800afe2:	4602      	mov	r2, r0
 800afe4:	460b      	mov	r3, r1
 800afe6:	f107 0108 	add.w	r1, r7, #8
 800afea:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800afee:	f107 0108 	add.w	r1, r7, #8
 800aff2:	f04f 0200 	mov.w	r2, #0
 800aff6:	f04f 0300 	mov.w	r3, #0
 800affa:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800affe:	f107 0108 	add.w	r1, r7, #8
 800b002:	f04f 0200 	mov.w	r2, #0
 800b006:	f04f 0300 	mov.w	r3, #0
 800b00a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b00e:	f107 0108 	add.w	r1, r7, #8
 800b012:	f04f 0200 	mov.w	r2, #0
 800b016:	f04f 0300 	mov.w	r3, #0
 800b01a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b01e:	463b      	mov	r3, r7
 800b020:	6818      	ldr	r0, [r3, #0]
 800b022:	f7f5 fa7f 	bl	8000524 <__aeabi_i2d>
 800b026:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7f5 fae3 	bl	80005f8 <__aeabi_dmul>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4610      	mov	r0, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f7f5 f923 	bl	800028c <__adddf3>
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	f107 0108 	add.w	r1, r7, #8
 800b04e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b052:	e1df      	b.n	800b414 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800b054:	f107 0108 	add.w	r1, r7, #8
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	f04f 0300 	mov.w	r3, #0
 800b060:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b064:	f107 0308 	add.w	r3, r7, #8
 800b068:	2200      	movs	r2, #0
 800b06a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b06c:	f107 0308 	add.w	r3, r7, #8
 800b070:	2200      	movs	r2, #0
 800b072:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b074:	f107 0108 	add.w	r1, r7, #8
 800b078:	f04f 0200 	mov.w	r2, #0
 800b07c:	f04f 0300 	mov.w	r3, #0
 800b080:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= speed*SHIFT_KEY_S;
 800b084:	463b      	mov	r3, r7
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	4613      	mov	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4413      	add	r3, r2
 800b08e:	4618      	mov	r0, r3
 800b090:	f7f5 fa48 	bl	8000524 <__aeabi_i2d>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	f107 0108 	add.w	r1, r7, #8
 800b09c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b0a0:	f107 0108 	add.w	r1, r7, #8
 800b0a4:	f04f 0200 	mov.w	r2, #0
 800b0a8:	f04f 0300 	mov.w	r3, #0
 800b0ac:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b0b0:	f107 0108 	add.w	r1, r7, #8
 800b0b4:	f04f 0200 	mov.w	r2, #0
 800b0b8:	f04f 0300 	mov.w	r3, #0
 800b0bc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b0c0:	463b      	mov	r3, r7
 800b0c2:	6818      	ldr	r0, [r3, #0]
 800b0c4:	f7f5 fa2e 	bl	8000524 <__aeabi_i2d>
 800b0c8:	a3e7      	add	r3, pc, #924	; (adr r3, 800b468 <scaraKeyInit1+0x5d8>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f7f5 fa93 	bl	80005f8 <__aeabi_dmul>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	4619      	mov	r1, r3
 800b0da:	a3e5      	add	r3, pc, #916	; (adr r3, 800b470 <scaraKeyInit1+0x5e0>)
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f7f5 f8d4 	bl	800028c <__adddf3>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	f107 0108 	add.w	r1, r7, #8
 800b0ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b0f0:	e190      	b.n	800b414 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800b0f2:	f107 0108 	add.w	r1, r7, #8
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	f04f 0300 	mov.w	r3, #0
 800b0fe:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b102:	f107 0308 	add.w	r3, r7, #8
 800b106:	2200      	movs	r2, #0
 800b108:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b10a:	f107 0308 	add.w	r3, r7, #8
 800b10e:	2200      	movs	r2, #0
 800b110:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b112:	f107 0108 	add.w	r1, r7, #8
 800b116:	f04f 0200 	mov.w	r2, #0
 800b11a:	f04f 0300 	mov.w	r3, #0
 800b11e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= -speed*SHIFT_KEY_S;
 800b122:	463b      	mov	r3, r7
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	4613      	mov	r3, r2
 800b128:	079b      	lsls	r3, r3, #30
 800b12a:	1a9b      	subs	r3, r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	4618      	mov	r0, r3
 800b132:	f7f5 f9f7 	bl	8000524 <__aeabi_i2d>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	f107 0108 	add.w	r1, r7, #8
 800b13e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b142:	f107 0108 	add.w	r1, r7, #8
 800b146:	f04f 0200 	mov.w	r2, #0
 800b14a:	f04f 0300 	mov.w	r3, #0
 800b14e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b152:	f107 0108 	add.w	r1, r7, #8
 800b156:	f04f 0200 	mov.w	r2, #0
 800b15a:	f04f 0300 	mov.w	r3, #0
 800b15e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b162:	463b      	mov	r3, r7
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f7f5 f9dd 	bl	8000524 <__aeabi_i2d>
 800b16a:	a3bf      	add	r3, pc, #764	; (adr r3, 800b468 <scaraKeyInit1+0x5d8>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f7f5 fa42 	bl	80005f8 <__aeabi_dmul>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4610      	mov	r0, r2
 800b17a:	4619      	mov	r1, r3
 800b17c:	a3bc      	add	r3, pc, #752	; (adr r3, 800b470 <scaraKeyInit1+0x5e0>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f7f5 f883 	bl	800028c <__adddf3>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	f107 0108 	add.w	r1, r7, #8
 800b18e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b192:	e13f      	b.n	800b414 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800b194:	f107 0108 	add.w	r1, r7, #8
 800b198:	f04f 0200 	mov.w	r2, #0
 800b19c:	f04f 0300 	mov.w	r3, #0
 800b1a0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b1a4:	f107 0308 	add.w	r3, r7, #8
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b1ac:	f107 0308 	add.w	r3, r7, #8
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b1b4:	f107 0108 	add.w	r1, r7, #8
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	f04f 0300 	mov.w	r3, #0
 800b1c0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b1c4:	f107 0108 	add.w	r1, r7, #8
 800b1c8:	f04f 0200 	mov.w	r2, #0
 800b1cc:	f04f 0300 	mov.w	r3, #0
 800b1d0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= speed*SHIFT_KEY_S;
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f5 f9a0 	bl	8000524 <__aeabi_i2d>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	f107 0108 	add.w	r1, r7, #8
 800b1ec:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b1f0:	f107 0108 	add.w	r1, r7, #8
 800b1f4:	f04f 0200 	mov.w	r2, #0
 800b1f8:	f04f 0300 	mov.w	r3, #0
 800b1fc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b200:	463b      	mov	r3, r7
 800b202:	6818      	ldr	r0, [r3, #0]
 800b204:	f7f5 f98e 	bl	8000524 <__aeabi_i2d>
 800b208:	a397      	add	r3, pc, #604	; (adr r3, 800b468 <scaraKeyInit1+0x5d8>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	f7f5 f9f3 	bl	80005f8 <__aeabi_dmul>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4610      	mov	r0, r2
 800b218:	4619      	mov	r1, r3
 800b21a:	a395      	add	r3, pc, #596	; (adr r3, 800b470 <scaraKeyInit1+0x5e0>)
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	f7f5 f834 	bl	800028c <__adddf3>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	f107 0108 	add.w	r1, r7, #8
 800b22c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b230:	e0f0      	b.n	800b414 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800b232:	f107 0108 	add.w	r1, r7, #8
 800b236:	f04f 0200 	mov.w	r2, #0
 800b23a:	f04f 0300 	mov.w	r3, #0
 800b23e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b242:	f107 0308 	add.w	r3, r7, #8
 800b246:	2200      	movs	r2, #0
 800b248:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b24a:	f107 0308 	add.w	r3, r7, #8
 800b24e:	2200      	movs	r2, #0
 800b250:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b252:	f107 0108 	add.w	r1, r7, #8
 800b256:	f04f 0200 	mov.w	r2, #0
 800b25a:	f04f 0300 	mov.w	r3, #0
 800b25e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b262:	f107 0108 	add.w	r1, r7, #8
 800b266:	f04f 0200 	mov.w	r2, #0
 800b26a:	f04f 0300 	mov.w	r3, #0
 800b26e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= -speed*SHIFT_KEY_S;
 800b272:	463b      	mov	r3, r7
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	4613      	mov	r3, r2
 800b278:	079b      	lsls	r3, r3, #30
 800b27a:	1a9b      	subs	r3, r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	4618      	mov	r0, r3
 800b282:	f7f5 f94f 	bl	8000524 <__aeabi_i2d>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	f107 0108 	add.w	r1, r7, #8
 800b28e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800b292:	f107 0108 	add.w	r1, r7, #8
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	f04f 0300 	mov.w	r3, #0
 800b29e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b2a2:	463b      	mov	r3, r7
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f7f5 f93d 	bl	8000524 <__aeabi_i2d>
 800b2aa:	a36f      	add	r3, pc, #444	; (adr r3, 800b468 <scaraKeyInit1+0x5d8>)
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	f7f5 f9a2 	bl	80005f8 <__aeabi_dmul>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	a36c      	add	r3, pc, #432	; (adr r3, 800b470 <scaraKeyInit1+0x5e0>)
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	f7f4 ffe3 	bl	800028c <__adddf3>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	f107 0108 	add.w	r1, r7, #8
 800b2ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b2d2:	e09f      	b.n	800b414 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800b2d4:	f107 0108 	add.w	r1, r7, #8
 800b2d8:	f04f 0200 	mov.w	r2, #0
 800b2dc:	f04f 0300 	mov.w	r3, #0
 800b2e0:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b2e4:	f107 0308 	add.w	r3, r7, #8
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b2ec:	f107 0308 	add.w	r3, r7, #8
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	f04f 0200 	mov.w	r2, #0
 800b2fc:	f04f 0300 	mov.w	r3, #0
 800b300:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b304:	f107 0108 	add.w	r1, r7, #8
 800b308:	f04f 0200 	mov.w	r2, #0
 800b30c:	f04f 0300 	mov.w	r3, #0
 800b310:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b314:	f107 0108 	add.w	r1, r7, #8
 800b318:	f04f 0200 	mov.w	r2, #0
 800b31c:	f04f 0300 	mov.w	r3, #0
 800b320:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= speed*SHIFT_KEY_S;
 800b324:	463b      	mov	r3, r7
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7f5 f8f8 	bl	8000524 <__aeabi_i2d>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	f107 0108 	add.w	r1, r7, #8
 800b33c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b340:	463b      	mov	r3, r7
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	f7f5 f8ee 	bl	8000524 <__aeabi_i2d>
 800b348:	a347      	add	r3, pc, #284	; (adr r3, 800b468 <scaraKeyInit1+0x5d8>)
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7f5 f953 	bl	80005f8 <__aeabi_dmul>
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	4610      	mov	r0, r2
 800b358:	4619      	mov	r1, r3
 800b35a:	a345      	add	r3, pc, #276	; (adr r3, 800b470 <scaraKeyInit1+0x5e0>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f4 ff94 	bl	800028c <__adddf3>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b370:	e050      	b.n	800b414 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800b372:	f107 0108 	add.w	r1, r7, #8
 800b376:	f04f 0200 	mov.w	r2, #0
 800b37a:	f04f 0300 	mov.w	r3, #0
 800b37e:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800b382:	f107 0308 	add.w	r3, r7, #8
 800b386:	2200      	movs	r2, #0
 800b388:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800b38a:	f107 0308 	add.w	r3, r7, #8
 800b38e:	2200      	movs	r2, #0
 800b390:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800b392:	f107 0108 	add.w	r1, r7, #8
 800b396:	f04f 0200 	mov.w	r2, #0
 800b39a:	f04f 0300 	mov.w	r3, #0
 800b39e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800b3a2:	f107 0108 	add.w	r1, r7, #8
 800b3a6:	f04f 0200 	mov.w	r2, #0
 800b3aa:	f04f 0300 	mov.w	r3, #0
 800b3ae:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800b3b2:	f107 0108 	add.w	r1, r7, #8
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	f04f 0300 	mov.w	r3, #0
 800b3be:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			cmd.target_point.roll 	= -speed*SHIFT_KEY_S;
 800b3c2:	463b      	mov	r3, r7
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	079b      	lsls	r3, r3, #30
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	1a9b      	subs	r3, r3, r2
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7f5 f8a7 	bl	8000524 <__aeabi_i2d>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	f107 0108 	add.w	r1, r7, #8
 800b3de:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*SHIFT_KEY_TIME;
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	6818      	ldr	r0, [r3, #0]
 800b3e6:	f7f5 f89d 	bl	8000524 <__aeabi_i2d>
 800b3ea:	a31f      	add	r3, pc, #124	; (adr r3, 800b468 <scaraKeyInit1+0x5d8>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f5 f902 	bl	80005f8 <__aeabi_dmul>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	a31c      	add	r3, pc, #112	; (adr r3, 800b470 <scaraKeyInit1+0x5e0>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f4 ff43 	bl	800028c <__adddf3>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	f107 0108 	add.w	r1, r7, #8
 800b40e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		break;
 800b412:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800b414:	f107 0408 	add.w	r4, r7, #8
 800b418:	4668      	mov	r0, sp
 800b41a:	f104 0310 	add.w	r3, r4, #16
 800b41e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800b422:	4619      	mov	r1, r3
 800b424:	f00b f84c 	bl	80164c0 <memcpy>
 800b428:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b42c:	f7fb fc5c 	bl	8006ce8 <scaraInitDuty>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800b436:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10b      	bne.n	800b456 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800b43e:	f7ff fb03 	bl	800aa48 <scaraTestDuty>
 800b442:	4603      	mov	r3, r0
 800b444:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800b448:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d005      	beq.n	800b45c <scaraKeyInit1+0x5cc>
			return status;
 800b450:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b454:	e002      	b.n	800b45c <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800b456:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800b45a:	e7ff      	b.n	800b45c <scaraKeyInit1+0x5cc>
	}
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800b462:	46bd      	mov	sp, r7
 800b464:	bd90      	pop	{r4, r7, pc}
 800b466:	bf00      	nop
 800b468:	9999999a 	.word	0x9999999a
 800b46c:	3fa99999 	.word	0x3fa99999
 800b470:	9999999a 	.word	0x9999999a
 800b474:	3fe99999 	.word	0x3fe99999

0800b478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b47e:	2300      	movs	r3, #0
 800b480:	607b      	str	r3, [r7, #4]
 800b482:	4b12      	ldr	r3, [pc, #72]	; (800b4cc <HAL_MspInit+0x54>)
 800b484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b486:	4a11      	ldr	r2, [pc, #68]	; (800b4cc <HAL_MspInit+0x54>)
 800b488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b48c:	6453      	str	r3, [r2, #68]	; 0x44
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <HAL_MspInit+0x54>)
 800b490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b496:	607b      	str	r3, [r7, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b49a:	2300      	movs	r3, #0
 800b49c:	603b      	str	r3, [r7, #0]
 800b49e:	4b0b      	ldr	r3, [pc, #44]	; (800b4cc <HAL_MspInit+0x54>)
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a2:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <HAL_MspInit+0x54>)
 800b4a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b4aa:	4b08      	ldr	r3, [pc, #32]	; (800b4cc <HAL_MspInit+0x54>)
 800b4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4b2:	603b      	str	r3, [r7, #0]
 800b4b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	210f      	movs	r1, #15
 800b4ba:	f06f 0001 	mvn.w	r0, #1
 800b4be:	f000 fc79 	bl	800bdb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	40023800 	.word	0x40023800

0800b4d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08c      	sub	sp, #48	; 0x30
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	2036      	movs	r0, #54	; 0x36
 800b4e6:	f000 fc65 	bl	800bdb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b4ea:	2036      	movs	r0, #54	; 0x36
 800b4ec:	f000 fc7e 	bl	800bdec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	4b1f      	ldr	r3, [pc, #124]	; (800b574 <HAL_InitTick+0xa4>)
 800b4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f8:	4a1e      	ldr	r2, [pc, #120]	; (800b574 <HAL_InitTick+0xa4>)
 800b4fa:	f043 0310 	orr.w	r3, r3, #16
 800b4fe:	6413      	str	r3, [r2, #64]	; 0x40
 800b500:	4b1c      	ldr	r3, [pc, #112]	; (800b574 <HAL_InitTick+0xa4>)
 800b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b504:	f003 0310 	and.w	r3, r3, #16
 800b508:	60fb      	str	r3, [r7, #12]
 800b50a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b50c:	f107 0210 	add.w	r2, r7, #16
 800b510:	f107 0314 	add.w	r3, r7, #20
 800b514:	4611      	mov	r1, r2
 800b516:	4618      	mov	r0, r3
 800b518:	f003 f812 	bl	800e540 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b51c:	f002 ffe8 	bl	800e4f0 <HAL_RCC_GetPCLK1Freq>
 800b520:	4603      	mov	r3, r0
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b528:	4a13      	ldr	r2, [pc, #76]	; (800b578 <HAL_InitTick+0xa8>)
 800b52a:	fba2 2303 	umull	r2, r3, r2, r3
 800b52e:	0c9b      	lsrs	r3, r3, #18
 800b530:	3b01      	subs	r3, #1
 800b532:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b534:	4b11      	ldr	r3, [pc, #68]	; (800b57c <HAL_InitTick+0xac>)
 800b536:	4a12      	ldr	r2, [pc, #72]	; (800b580 <HAL_InitTick+0xb0>)
 800b538:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b53a:	4b10      	ldr	r3, [pc, #64]	; (800b57c <HAL_InitTick+0xac>)
 800b53c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b540:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b542:	4a0e      	ldr	r2, [pc, #56]	; (800b57c <HAL_InitTick+0xac>)
 800b544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b546:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b548:	4b0c      	ldr	r3, [pc, #48]	; (800b57c <HAL_InitTick+0xac>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b54e:	4b0b      	ldr	r3, [pc, #44]	; (800b57c <HAL_InitTick+0xac>)
 800b550:	2200      	movs	r2, #0
 800b552:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b554:	4809      	ldr	r0, [pc, #36]	; (800b57c <HAL_InitTick+0xac>)
 800b556:	f003 f825 	bl	800e5a4 <HAL_TIM_Base_Init>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d104      	bne.n	800b56a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b560:	4806      	ldr	r0, [pc, #24]	; (800b57c <HAL_InitTick+0xac>)
 800b562:	f003 f86e 	bl	800e642 <HAL_TIM_Base_Start_IT>
 800b566:	4603      	mov	r3, r0
 800b568:	e000      	b.n	800b56c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3730      	adds	r7, #48	; 0x30
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	40023800 	.word	0x40023800
 800b578:	431bde83 	.word	0x431bde83
 800b57c:	20010d30 	.word	0x20010d30
 800b580:	40001000 	.word	0x40001000

0800b584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b588:	bf00      	nop
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
	...

0800b594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800b598:	2162      	movs	r1, #98	; 0x62
 800b59a:	4802      	ldr	r0, [pc, #8]	; (800b5a4 <HardFault_Handler+0x10>)
 800b59c:	f7f6 ff78 	bl	8002490 <LOG_REPORT>
 800b5a0:	e7fa      	b.n	800b598 <HardFault_Handler+0x4>
 800b5a2:	bf00      	nop
 800b5a4:	0801c9b0 	.word	0x0801c9b0

0800b5a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800b5ac:	2172      	movs	r1, #114	; 0x72
 800b5ae:	4802      	ldr	r0, [pc, #8]	; (800b5b8 <MemManage_Handler+0x10>)
 800b5b0:	f7f6 ff6e 	bl	8002490 <LOG_REPORT>
 800b5b4:	e7fa      	b.n	800b5ac <MemManage_Handler+0x4>
 800b5b6:	bf00      	nop
 800b5b8:	0801c9c8 	.word	0x0801c9c8

0800b5bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800b5c0:	2182      	movs	r1, #130	; 0x82
 800b5c2:	4802      	ldr	r0, [pc, #8]	; (800b5cc <BusFault_Handler+0x10>)
 800b5c4:	f7f6 ff64 	bl	8002490 <LOG_REPORT>
 800b5c8:	e7fa      	b.n	800b5c0 <BusFault_Handler+0x4>
 800b5ca:	bf00      	nop
 800b5cc:	0801c9dc 	.word	0x0801c9dc

0800b5d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b5d4:	e7fe      	b.n	800b5d4 <UsageFault_Handler+0x4>

0800b5d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b5da:	bf00      	nop
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800b5e8:	4802      	ldr	r0, [pc, #8]	; (800b5f4 <DMA1_Stream4_IRQHandler+0x10>)
 800b5ea:	f000 fd35 	bl	800c058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b5ee:	bf00      	nop
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20010e30 	.word	0x20010e30

0800b5f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b5fc:	4802      	ldr	r0, [pc, #8]	; (800b608 <UART4_IRQHandler+0x10>)
 800b5fe:	f003 fcbd 	bl	800ef7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b602:	bf00      	nop
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20010df0 	.word	0x20010df0

0800b60c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b610:	4802      	ldr	r0, [pc, #8]	; (800b61c <TIM6_DAC_IRQHandler+0x10>)
 800b612:	f003 f83a 	bl	800e68a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b616:	bf00      	nop
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20010d30 	.word	0x20010d30

0800b620 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800b624:	4b05      	ldr	r3, [pc, #20]	; (800b63c <TIM7_IRQHandler+0x1c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2101      	movs	r1, #1
 800b62a:	4618      	mov	r0, r3
 800b62c:	f007 fbba 	bl	8012da4 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b630:	4803      	ldr	r0, [pc, #12]	; (800b640 <TIM7_IRQHandler+0x20>)
 800b632:	f003 f82a 	bl	800e68a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800b636:	bf00      	nop
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	2000fe64 	.word	0x2000fe64
 800b640:	20010db0 	.word	0x20010db0

0800b644 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b648:	4802      	ldr	r0, [pc, #8]	; (800b654 <OTG_FS_IRQHandler+0x10>)
 800b64a:	f001 fad9 	bl	800cc00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b64e:	bf00      	nop
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	2001176c 	.word	0x2001176c

0800b658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b658:	b480      	push	{r7}
 800b65a:	af00      	add	r7, sp, #0
	return 1;
 800b65c:	2301      	movs	r3, #1
}
 800b65e:	4618      	mov	r0, r3
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <_kill>:

int _kill(int pid, int sig)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b672:	f00a feeb 	bl	801644c <__errno>
 800b676:	4603      	mov	r3, r0
 800b678:	2216      	movs	r2, #22
 800b67a:	601a      	str	r2, [r3, #0]
	return -1;
 800b67c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b680:	4618      	mov	r0, r3
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <_exit>:

void _exit (int status)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b690:	f04f 31ff 	mov.w	r1, #4294967295
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff ffe7 	bl	800b668 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b69a:	e7fe      	b.n	800b69a <_exit+0x12>

0800b69c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	e00a      	b.n	800b6c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b6ae:	f3af 8000 	nop.w
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	1c5a      	adds	r2, r3, #1
 800b6b8:	60ba      	str	r2, [r7, #8]
 800b6ba:	b2ca      	uxtb	r2, r1
 800b6bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	617b      	str	r3, [r7, #20]
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	dbf0      	blt.n	800b6ae <_read+0x12>
	}

return len;
 800b6cc:	687b      	ldr	r3, [r7, #4]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b086      	sub	sp, #24
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]
 800b6e6:	e009      	b.n	800b6fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	60ba      	str	r2, [r7, #8]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	dbf1      	blt.n	800b6e8 <_write+0x12>
	}
	return len;
 800b704:	687b      	ldr	r3, [r7, #4]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <_close>:

int _close(int file)
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
	return -1;
 800b716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b726:	b480      	push	{r7}
 800b728:	b083      	sub	sp, #12
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b736:	605a      	str	r2, [r3, #4]
	return 0;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <_isatty>:

int _isatty(int file)
{
 800b746:	b480      	push	{r7}
 800b748:	b083      	sub	sp, #12
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
	return 1;
 800b74e:	2301      	movs	r3, #1
}
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
	return 0;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3714      	adds	r7, #20
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
	...

0800b778 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b780:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <_sbrk+0x50>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <_sbrk+0x16>
		heap_end = &end;
 800b788:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <_sbrk+0x50>)
 800b78a:	4a10      	ldr	r2, [pc, #64]	; (800b7cc <_sbrk+0x54>)
 800b78c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b78e:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <_sbrk+0x50>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b794:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <_sbrk+0x50>)
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4413      	add	r3, r2
 800b79c:	466a      	mov	r2, sp
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d907      	bls.n	800b7b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b7a2:	f00a fe53 	bl	801644c <__errno>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	220c      	movs	r2, #12
 800b7aa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b0:	e006      	b.n	800b7c0 <_sbrk+0x48>
	}

	heap_end += incr;
 800b7b2:	4b05      	ldr	r3, [pc, #20]	; (800b7c8 <_sbrk+0x50>)
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	4a03      	ldr	r2, [pc, #12]	; (800b7c8 <_sbrk+0x50>)
 800b7bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b7be:	68fb      	ldr	r3, [r7, #12]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	20004860 	.word	0x20004860
 800b7cc:	20011b88 	.word	0x20011b88

0800b7d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b7d4:	4b08      	ldr	r3, [pc, #32]	; (800b7f8 <SystemInit+0x28>)
 800b7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7da:	4a07      	ldr	r2, [pc, #28]	; (800b7f8 <SystemInit+0x28>)
 800b7dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b7e4:	4b04      	ldr	r3, [pc, #16]	; (800b7f8 <SystemInit+0x28>)
 800b7e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b7ea:	609a      	str	r2, [r3, #8]
#endif
}
 800b7ec:	bf00      	nop
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	e000ed00 	.word	0xe000ed00

0800b7fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b802:	f107 0308 	add.w	r3, r7, #8
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	605a      	str	r2, [r3, #4]
 800b80c:	609a      	str	r2, [r3, #8]
 800b80e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b810:	463b      	mov	r3, r7
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800b818:	4b1e      	ldr	r3, [pc, #120]	; (800b894 <MX_TIM2_Init+0x98>)
 800b81a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b81e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800b820:	4b1c      	ldr	r3, [pc, #112]	; (800b894 <MX_TIM2_Init+0x98>)
 800b822:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b826:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b828:	4b1a      	ldr	r3, [pc, #104]	; (800b894 <MX_TIM2_Init+0x98>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800b82e:	4b19      	ldr	r3, [pc, #100]	; (800b894 <MX_TIM2_Init+0x98>)
 800b830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b834:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b836:	4b17      	ldr	r3, [pc, #92]	; (800b894 <MX_TIM2_Init+0x98>)
 800b838:	2200      	movs	r2, #0
 800b83a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b83c:	4b15      	ldr	r3, [pc, #84]	; (800b894 <MX_TIM2_Init+0x98>)
 800b83e:	2200      	movs	r2, #0
 800b840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b842:	4814      	ldr	r0, [pc, #80]	; (800b894 <MX_TIM2_Init+0x98>)
 800b844:	f002 feae 	bl	800e5a4 <HAL_TIM_Base_Init>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b84e:	f7fa f9b1 	bl	8005bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b858:	f107 0308 	add.w	r3, r7, #8
 800b85c:	4619      	mov	r1, r3
 800b85e:	480d      	ldr	r0, [pc, #52]	; (800b894 <MX_TIM2_Init+0x98>)
 800b860:	f003 f81b 	bl	800e89a <HAL_TIM_ConfigClockSource>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d001      	beq.n	800b86e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b86a:	f7fa f9a3 	bl	8005bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b86e:	2300      	movs	r3, #0
 800b870:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b872:	2300      	movs	r3, #0
 800b874:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b876:	463b      	mov	r3, r7
 800b878:	4619      	mov	r1, r3
 800b87a:	4806      	ldr	r0, [pc, #24]	; (800b894 <MX_TIM2_Init+0x98>)
 800b87c:	f003 fa34 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b886:	f7fa f995 	bl	8005bb4 <Error_Handler>
  }

}
 800b88a:	bf00      	nop
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	20010d70 	.word	0x20010d70

0800b898 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b89e:	463b      	mov	r3, r7
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
 800b8a4:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b8a6:	4b15      	ldr	r3, [pc, #84]	; (800b8fc <MX_TIM7_Init+0x64>)
 800b8a8:	4a15      	ldr	r2, [pc, #84]	; (800b900 <MX_TIM7_Init+0x68>)
 800b8aa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b8ac:	4b13      	ldr	r3, [pc, #76]	; (800b8fc <MX_TIM7_Init+0x64>)
 800b8ae:	2253      	movs	r2, #83	; 0x53
 800b8b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b8b2:	4b12      	ldr	r3, [pc, #72]	; (800b8fc <MX_TIM7_Init+0x64>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b8b8:	4b10      	ldr	r3, [pc, #64]	; (800b8fc <MX_TIM7_Init+0x64>)
 800b8ba:	f242 720f 	movw	r2, #9999	; 0x270f
 800b8be:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b8c0:	4b0e      	ldr	r3, [pc, #56]	; (800b8fc <MX_TIM7_Init+0x64>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b8c6:	480d      	ldr	r0, [pc, #52]	; (800b8fc <MX_TIM7_Init+0x64>)
 800b8c8:	f002 fe6c 	bl	800e5a4 <HAL_TIM_Base_Init>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b8d2:	f7fa f96f 	bl	8005bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b8de:	463b      	mov	r3, r7
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4806      	ldr	r0, [pc, #24]	; (800b8fc <MX_TIM7_Init+0x64>)
 800b8e4:	f003 fa00 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b8ee:	f7fa f961 	bl	8005bb4 <Error_Handler>
  }

}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20010db0 	.word	0x20010db0
 800b900:	40001400 	.word	0x40001400

0800b904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b914:	d10e      	bne.n	800b934 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b916:	2300      	movs	r3, #0
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	4b16      	ldr	r3, [pc, #88]	; (800b974 <HAL_TIM_Base_MspInit+0x70>)
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	4a15      	ldr	r2, [pc, #84]	; (800b974 <HAL_TIM_Base_MspInit+0x70>)
 800b920:	f043 0301 	orr.w	r3, r3, #1
 800b924:	6413      	str	r3, [r2, #64]	; 0x40
 800b926:	4b13      	ldr	r3, [pc, #76]	; (800b974 <HAL_TIM_Base_MspInit+0x70>)
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b932:	e01a      	b.n	800b96a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a0f      	ldr	r2, [pc, #60]	; (800b978 <HAL_TIM_Base_MspInit+0x74>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d115      	bne.n	800b96a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b93e:	2300      	movs	r3, #0
 800b940:	60bb      	str	r3, [r7, #8]
 800b942:	4b0c      	ldr	r3, [pc, #48]	; (800b974 <HAL_TIM_Base_MspInit+0x70>)
 800b944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b946:	4a0b      	ldr	r2, [pc, #44]	; (800b974 <HAL_TIM_Base_MspInit+0x70>)
 800b948:	f043 0320 	orr.w	r3, r3, #32
 800b94c:	6413      	str	r3, [r2, #64]	; 0x40
 800b94e:	4b09      	ldr	r3, [pc, #36]	; (800b974 <HAL_TIM_Base_MspInit+0x70>)
 800b950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b952:	f003 0320 	and.w	r3, r3, #32
 800b956:	60bb      	str	r3, [r7, #8]
 800b958:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b95a:	2200      	movs	r2, #0
 800b95c:	2105      	movs	r1, #5
 800b95e:	2037      	movs	r0, #55	; 0x37
 800b960:	f000 fa28 	bl	800bdb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b964:	2037      	movs	r0, #55	; 0x37
 800b966:	f000 fa41 	bl	800bdec <HAL_NVIC_EnableIRQ>
}
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	40023800 	.word	0x40023800
 800b978:	40001400 	.word	0x40001400

0800b97c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b980:	4b11      	ldr	r3, [pc, #68]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b982:	4a12      	ldr	r2, [pc, #72]	; (800b9cc <MX_UART4_Init+0x50>)
 800b984:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b986:	4b10      	ldr	r3, [pc, #64]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b98c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b98e:	4b0e      	ldr	r3, [pc, #56]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b990:	2200      	movs	r2, #0
 800b992:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b994:	4b0c      	ldr	r3, [pc, #48]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b996:	2200      	movs	r2, #0
 800b998:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b99a:	4b0b      	ldr	r3, [pc, #44]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b9a0:	4b09      	ldr	r3, [pc, #36]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b9a2:	220c      	movs	r2, #12
 800b9a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b9a6:	4b08      	ldr	r3, [pc, #32]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b9ac:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b9b2:	4805      	ldr	r0, [pc, #20]	; (800b9c8 <MX_UART4_Init+0x4c>)
 800b9b4:	f003 fa28 	bl	800ee08 <HAL_UART_Init>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b9be:	f7fa f8f9 	bl	8005bb4 <Error_Handler>
  }

}
 800b9c2:	bf00      	nop
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20010df0 	.word	0x20010df0
 800b9cc:	40004c00 	.word	0x40004c00

0800b9d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b08a      	sub	sp, #40	; 0x28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9d8:	f107 0314 	add.w	r3, r7, #20
 800b9dc:	2200      	movs	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	605a      	str	r2, [r3, #4]
 800b9e2:	609a      	str	r2, [r3, #8]
 800b9e4:	60da      	str	r2, [r3, #12]
 800b9e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a34      	ldr	r2, [pc, #208]	; (800bac0 <HAL_UART_MspInit+0xf0>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d161      	bne.n	800bab6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	613b      	str	r3, [r7, #16]
 800b9f6:	4b33      	ldr	r3, [pc, #204]	; (800bac4 <HAL_UART_MspInit+0xf4>)
 800b9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fa:	4a32      	ldr	r2, [pc, #200]	; (800bac4 <HAL_UART_MspInit+0xf4>)
 800b9fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba00:	6413      	str	r3, [r2, #64]	; 0x40
 800ba02:	4b30      	ldr	r3, [pc, #192]	; (800bac4 <HAL_UART_MspInit+0xf4>)
 800ba04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba0a:	613b      	str	r3, [r7, #16]
 800ba0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	4b2c      	ldr	r3, [pc, #176]	; (800bac4 <HAL_UART_MspInit+0xf4>)
 800ba14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba16:	4a2b      	ldr	r2, [pc, #172]	; (800bac4 <HAL_UART_MspInit+0xf4>)
 800ba18:	f043 0301 	orr.w	r3, r3, #1
 800ba1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ba1e:	4b29      	ldr	r3, [pc, #164]	; (800bac4 <HAL_UART_MspInit+0xf4>)
 800ba20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba2e:	2302      	movs	r3, #2
 800ba30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ba32:	2301      	movs	r3, #1
 800ba34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba36:	2303      	movs	r3, #3
 800ba38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800ba3a:	2308      	movs	r3, #8
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba3e:	f107 0314 	add.w	r3, r7, #20
 800ba42:	4619      	mov	r1, r3
 800ba44:	4820      	ldr	r0, [pc, #128]	; (800bac8 <HAL_UART_MspInit+0xf8>)
 800ba46:	f000 fd7f 	bl	800c548 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800ba4a:	4b20      	ldr	r3, [pc, #128]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba4c:	4a20      	ldr	r2, [pc, #128]	; (800bad0 <HAL_UART_MspInit+0x100>)
 800ba4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800ba50:	4b1e      	ldr	r3, [pc, #120]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ba56:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ba58:	4b1c      	ldr	r3, [pc, #112]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba5a:	2240      	movs	r2, #64	; 0x40
 800ba5c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ba5e:	4b1b      	ldr	r3, [pc, #108]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ba64:	4b19      	ldr	r3, [pc, #100]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ba6a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba6c:	4b17      	ldr	r3, [pc, #92]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba72:	4b16      	ldr	r3, [pc, #88]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800ba78:	4b14      	ldr	r3, [pc, #80]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ba7e:	4b13      	ldr	r3, [pc, #76]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ba84:	4b11      	ldr	r3, [pc, #68]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800ba8a:	4810      	ldr	r0, [pc, #64]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba8c:	f000 f9bc 	bl	800be08 <HAL_DMA_Init>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800ba96:	f7fa f88d 	bl	8005bb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a0b      	ldr	r2, [pc, #44]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800ba9e:	631a      	str	r2, [r3, #48]	; 0x30
 800baa0:	4a0a      	ldr	r2, [pc, #40]	; (800bacc <HAL_UART_MspInit+0xfc>)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800baa6:	2200      	movs	r2, #0
 800baa8:	2105      	movs	r1, #5
 800baaa:	2034      	movs	r0, #52	; 0x34
 800baac:	f000 f982 	bl	800bdb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800bab0:	2034      	movs	r0, #52	; 0x34
 800bab2:	f000 f99b 	bl	800bdec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800bab6:	bf00      	nop
 800bab8:	3728      	adds	r7, #40	; 0x28
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	40004c00 	.word	0x40004c00
 800bac4:	40023800 	.word	0x40023800
 800bac8:	40020000 	.word	0x40020000
 800bacc:	20010e30 	.word	0x20010e30
 800bad0:	40026070 	.word	0x40026070

0800bad4 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a0c      	ldr	r2, [pc, #48]	; (800bb14 <HAL_UART_TxCpltCallback+0x40>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d112      	bne.n	800bb0c <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800bae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baea:	490b      	ldr	r1, [pc, #44]	; (800bb18 <HAL_UART_TxCpltCallback+0x44>)
 800baec:	480b      	ldr	r0, [pc, #44]	; (800bb1c <HAL_UART_TxCpltCallback+0x48>)
 800baee:	f7fa f91b 	bl	8005d28 <ringBuff_PopArray>
 800baf2:	4603      	mov	r3, r0
 800baf4:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800baf6:	89fb      	ldrh	r3, [r7, #14]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d006      	beq.n	800bb0a <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800bafc:	89fb      	ldrh	r3, [r7, #14]
 800bafe:	461a      	mov	r2, r3
 800bb00:	4905      	ldr	r1, [pc, #20]	; (800bb18 <HAL_UART_TxCpltCallback+0x44>)
 800bb02:	4807      	ldr	r0, [pc, #28]	; (800bb20 <HAL_UART_TxCpltCallback+0x4c>)
 800bb04:	f003 f9ce 	bl	800eea4 <HAL_UART_Transmit_DMA>
 800bb08:	e000      	b.n	800bb0c <HAL_UART_TxCpltCallback+0x38>
			return;
 800bb0a:	bf00      	nop
	}
}
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	40004c00 	.word	0x40004c00
 800bb18:	2000fd60 	.word	0x2000fd60
 800bb1c:	20002074 	.word	0x20002074
 800bb20:	20010df0 	.word	0x20010df0

0800bb24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800bb24:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bb28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bb2a:	e003      	b.n	800bb34 <LoopCopyDataInit>

0800bb2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bb2c:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bb2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bb30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bb32:	3104      	adds	r1, #4

0800bb34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bb34:	480b      	ldr	r0, [pc, #44]	; (800bb64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bb36:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bb38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bb3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bb3c:	d3f6      	bcc.n	800bb2c <CopyDataInit>
  ldr  r2, =_sbss
 800bb3e:	4a0b      	ldr	r2, [pc, #44]	; (800bb6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bb40:	e002      	b.n	800bb48 <LoopFillZerobss>

0800bb42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bb42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bb44:	f842 3b04 	str.w	r3, [r2], #4

0800bb48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bb48:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bb4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bb4c:	d3f9      	bcc.n	800bb42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bb4e:	f7ff fe3f 	bl	800b7d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bb52:	f00a fc81 	bl	8016458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb56:	f7f9 ff99 	bl	8005a8c <main>
  bx  lr    
 800bb5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bb5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bb60:	0801d170 	.word	0x0801d170
  ldr  r0, =_sdata
 800bb64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bb68:	200043e8 	.word	0x200043e8
  ldr  r2, =_sbss
 800bb6c:	200043e8 	.word	0x200043e8
  ldr  r3, = _ebss
 800bb70:	20011b84 	.word	0x20011b84

0800bb74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb74:	e7fe      	b.n	800bb74 <ADC_IRQHandler>
	...

0800bb78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bb7c:	4b0e      	ldr	r3, [pc, #56]	; (800bbb8 <HAL_Init+0x40>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0d      	ldr	r2, [pc, #52]	; (800bbb8 <HAL_Init+0x40>)
 800bb82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bb88:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <HAL_Init+0x40>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a0a      	ldr	r2, [pc, #40]	; (800bbb8 <HAL_Init+0x40>)
 800bb8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bb94:	4b08      	ldr	r3, [pc, #32]	; (800bbb8 <HAL_Init+0x40>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a07      	ldr	r2, [pc, #28]	; (800bbb8 <HAL_Init+0x40>)
 800bb9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bba0:	2003      	movs	r0, #3
 800bba2:	f000 f8fc 	bl	800bd9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bba6:	2000      	movs	r0, #0
 800bba8:	f7ff fc92 	bl	800b4d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bbac:	f7ff fc64 	bl	800b478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	40023c00 	.word	0x40023c00

0800bbbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bbc0:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <HAL_IncTick+0x20>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	4b06      	ldr	r3, [pc, #24]	; (800bbe0 <HAL_IncTick+0x24>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4413      	add	r3, r2
 800bbcc:	4a04      	ldr	r2, [pc, #16]	; (800bbe0 <HAL_IncTick+0x24>)
 800bbce:	6013      	str	r3, [r2, #0]
}
 800bbd0:	bf00      	nop
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	20004094 	.word	0x20004094
 800bbe0:	20010e90 	.word	0x20010e90

0800bbe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	af00      	add	r7, sp, #0
  return uwTick;
 800bbe8:	4b03      	ldr	r3, [pc, #12]	; (800bbf8 <HAL_GetTick+0x14>)
 800bbea:	681b      	ldr	r3, [r3, #0]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	20010e90 	.word	0x20010e90

0800bbfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc04:	f7ff ffee 	bl	800bbe4 <HAL_GetTick>
 800bc08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc14:	d005      	beq.n	800bc22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bc16:	4b0a      	ldr	r3, [pc, #40]	; (800bc40 <HAL_Delay+0x44>)
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4413      	add	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bc22:	bf00      	nop
 800bc24:	f7ff ffde 	bl	800bbe4 <HAL_GetTick>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d8f7      	bhi.n	800bc24 <HAL_Delay+0x28>
  {
  }
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	20004094 	.word	0x20004094

0800bc44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f003 0307 	and.w	r3, r3, #7
 800bc52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bc54:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <__NVIC_SetPriorityGrouping+0x44>)
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bc60:	4013      	ands	r3, r2
 800bc62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bc6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bc70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bc76:	4a04      	ldr	r2, [pc, #16]	; (800bc88 <__NVIC_SetPriorityGrouping+0x44>)
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	60d3      	str	r3, [r2, #12]
}
 800bc7c:	bf00      	nop
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	e000ed00 	.word	0xe000ed00

0800bc8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc90:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <__NVIC_GetPriorityGrouping+0x18>)
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	0a1b      	lsrs	r3, r3, #8
 800bc96:	f003 0307 	and.w	r3, r3, #7
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	e000ed00 	.word	0xe000ed00

0800bca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	db0b      	blt.n	800bcd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	f003 021f 	and.w	r2, r3, #31
 800bcc0:	4907      	ldr	r1, [pc, #28]	; (800bce0 <__NVIC_EnableIRQ+0x38>)
 800bcc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcc6:	095b      	lsrs	r3, r3, #5
 800bcc8:	2001      	movs	r0, #1
 800bcca:	fa00 f202 	lsl.w	r2, r0, r2
 800bcce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bcd2:	bf00      	nop
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	e000e100 	.word	0xe000e100

0800bce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	db0a      	blt.n	800bd0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	490c      	ldr	r1, [pc, #48]	; (800bd30 <__NVIC_SetPriority+0x4c>)
 800bcfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd02:	0112      	lsls	r2, r2, #4
 800bd04:	b2d2      	uxtb	r2, r2
 800bd06:	440b      	add	r3, r1
 800bd08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bd0c:	e00a      	b.n	800bd24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	4908      	ldr	r1, [pc, #32]	; (800bd34 <__NVIC_SetPriority+0x50>)
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	f003 030f 	and.w	r3, r3, #15
 800bd1a:	3b04      	subs	r3, #4
 800bd1c:	0112      	lsls	r2, r2, #4
 800bd1e:	b2d2      	uxtb	r2, r2
 800bd20:	440b      	add	r3, r1
 800bd22:	761a      	strb	r2, [r3, #24]
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	e000e100 	.word	0xe000e100
 800bd34:	e000ed00 	.word	0xe000ed00

0800bd38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b089      	sub	sp, #36	; 0x24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	f1c3 0307 	rsb	r3, r3, #7
 800bd52:	2b04      	cmp	r3, #4
 800bd54:	bf28      	it	cs
 800bd56:	2304      	movcs	r3, #4
 800bd58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	2b06      	cmp	r3, #6
 800bd60:	d902      	bls.n	800bd68 <NVIC_EncodePriority+0x30>
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	3b03      	subs	r3, #3
 800bd66:	e000      	b.n	800bd6a <NVIC_EncodePriority+0x32>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	fa02 f303 	lsl.w	r3, r2, r3
 800bd76:	43da      	mvns	r2, r3
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	401a      	ands	r2, r3
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd80:	f04f 31ff 	mov.w	r1, #4294967295
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	fa01 f303 	lsl.w	r3, r1, r3
 800bd8a:	43d9      	mvns	r1, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd90:	4313      	orrs	r3, r2
         );
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3724      	adds	r7, #36	; 0x24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff ff4c 	bl	800bc44 <__NVIC_SetPriorityGrouping>
}
 800bdac:	bf00      	nop
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bdc6:	f7ff ff61 	bl	800bc8c <__NVIC_GetPriorityGrouping>
 800bdca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	68b9      	ldr	r1, [r7, #8]
 800bdd0:	6978      	ldr	r0, [r7, #20]
 800bdd2:	f7ff ffb1 	bl	800bd38 <NVIC_EncodePriority>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bddc:	4611      	mov	r1, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff ff80 	bl	800bce4 <__NVIC_SetPriority>
}
 800bde4:	bf00      	nop
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bdf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff ff54 	bl	800bca8 <__NVIC_EnableIRQ>
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800be10:	2300      	movs	r3, #0
 800be12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800be14:	f7ff fee6 	bl	800bbe4 <HAL_GetTick>
 800be18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e099      	b.n	800bf58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2202      	movs	r2, #2
 800be30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f022 0201 	bic.w	r2, r2, #1
 800be42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800be44:	e00f      	b.n	800be66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800be46:	f7ff fecd 	bl	800bbe4 <HAL_GetTick>
 800be4a:	4602      	mov	r2, r0
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	2b05      	cmp	r3, #5
 800be52:	d908      	bls.n	800be66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2220      	movs	r2, #32
 800be58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2203      	movs	r2, #3
 800be5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800be62:	2303      	movs	r3, #3
 800be64:	e078      	b.n	800bf58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0301 	and.w	r3, r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e8      	bne.n	800be46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	4b38      	ldr	r3, [pc, #224]	; (800bf60 <HAL_DMA_Init+0x158>)
 800be80:	4013      	ands	r3, r2
 800be82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800be92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	699b      	ldr	r3, [r3, #24]
 800bea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800beaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800beb2:	697a      	ldr	r2, [r7, #20]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebc:	2b04      	cmp	r3, #4
 800bebe:	d107      	bne.n	800bed0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec8:	4313      	orrs	r3, r2
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	4313      	orrs	r3, r2
 800bece:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f023 0307 	bic.w	r3, r3, #7
 800bee6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	4313      	orrs	r3, r2
 800bef0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d117      	bne.n	800bf2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00e      	beq.n	800bf2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fa9f 	bl	800c450 <DMA_CheckFifoParam>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d008      	beq.n	800bf2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2240      	movs	r2, #64	; 0x40
 800bf1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bf26:	2301      	movs	r3, #1
 800bf28:	e016      	b.n	800bf58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fa56 	bl	800c3e4 <DMA_CalcBaseAndBitshift>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf40:	223f      	movs	r2, #63	; 0x3f
 800bf42:	409a      	lsls	r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3718      	adds	r7, #24
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	f010803f 	.word	0xf010803f

0800bf64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
 800bf70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d101      	bne.n	800bf8a <HAL_DMA_Start_IT+0x26>
 800bf86:	2302      	movs	r3, #2
 800bf88:	e040      	b.n	800c00c <HAL_DMA_Start_IT+0xa8>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d12f      	bne.n	800bffe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	68b9      	ldr	r1, [r7, #8]
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f000 f9e8 	bl	800c388 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfbc:	223f      	movs	r2, #63	; 0x3f
 800bfbe:	409a      	lsls	r2, r3
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f042 0216 	orr.w	r2, r2, #22
 800bfd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d007      	beq.n	800bfec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f042 0208 	orr.w	r2, r2, #8
 800bfea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f042 0201 	orr.w	r2, r2, #1
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	e005      	b.n	800c00a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c006:	2302      	movs	r3, #2
 800c008:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b02      	cmp	r3, #2
 800c026:	d004      	beq.n	800c032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2280      	movs	r2, #128	; 0x80
 800c02c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	e00c      	b.n	800c04c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2205      	movs	r2, #5
 800c036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f022 0201 	bic.w	r2, r2, #1
 800c048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c060:	2300      	movs	r3, #0
 800c062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c064:	4b92      	ldr	r3, [pc, #584]	; (800c2b0 <HAL_DMA_IRQHandler+0x258>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a92      	ldr	r2, [pc, #584]	; (800c2b4 <HAL_DMA_IRQHandler+0x25c>)
 800c06a:	fba2 2303 	umull	r2, r3, r2, r3
 800c06e:	0a9b      	lsrs	r3, r3, #10
 800c070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c082:	2208      	movs	r2, #8
 800c084:	409a      	lsls	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4013      	ands	r3, r2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d01a      	beq.n	800c0c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d013      	beq.n	800c0c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f022 0204 	bic.w	r2, r2, #4
 800c0aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0b0:	2208      	movs	r2, #8
 800c0b2:	409a      	lsls	r2, r3
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0bc:	f043 0201 	orr.w	r2, r3, #1
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	409a      	lsls	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d012      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	695b      	ldr	r3, [r3, #20]
 800c0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00b      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	409a      	lsls	r2, r3
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f2:	f043 0202 	orr.w	r2, r3, #2
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0fe:	2204      	movs	r2, #4
 800c100:	409a      	lsls	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	4013      	ands	r3, r2
 800c106:	2b00      	cmp	r3, #0
 800c108:	d012      	beq.n	800c130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 0302 	and.w	r3, r3, #2
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00b      	beq.n	800c130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c11c:	2204      	movs	r2, #4
 800c11e:	409a      	lsls	r2, r3
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c128:	f043 0204 	orr.w	r2, r3, #4
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c134:	2210      	movs	r2, #16
 800c136:	409a      	lsls	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4013      	ands	r3, r2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d043      	beq.n	800c1c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 0308 	and.w	r3, r3, #8
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d03c      	beq.n	800c1c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c152:	2210      	movs	r2, #16
 800c154:	409a      	lsls	r2, r3
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d018      	beq.n	800c19a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c172:	2b00      	cmp	r3, #0
 800c174:	d108      	bne.n	800c188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d024      	beq.n	800c1c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	4798      	blx	r3
 800c186:	e01f      	b.n	800c1c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d01b      	beq.n	800c1c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	4798      	blx	r3
 800c198:	e016      	b.n	800c1c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d107      	bne.n	800c1b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f022 0208 	bic.w	r2, r2, #8
 800c1b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d003      	beq.n	800c1c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1cc:	2220      	movs	r2, #32
 800c1ce:	409a      	lsls	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 808e 	beq.w	800c2f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 0310 	and.w	r3, r3, #16
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 8086 	beq.w	800c2f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	409a      	lsls	r2, r3
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b05      	cmp	r3, #5
 800c200:	d136      	bne.n	800c270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f022 0216 	bic.w	r2, r2, #22
 800c210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	695a      	ldr	r2, [r3, #20]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	d103      	bne.n	800c232 <HAL_DMA_IRQHandler+0x1da>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d007      	beq.n	800c242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f022 0208 	bic.w	r2, r2, #8
 800c240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c246:	223f      	movs	r2, #63	; 0x3f
 800c248:	409a      	lsls	r2, r3
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2201      	movs	r2, #1
 800c25a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c262:	2b00      	cmp	r3, #0
 800c264:	d07d      	beq.n	800c362 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	4798      	blx	r3
        }
        return;
 800c26e:	e078      	b.n	800c362 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d01c      	beq.n	800c2b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d108      	bne.n	800c29e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c290:	2b00      	cmp	r3, #0
 800c292:	d030      	beq.n	800c2f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	4798      	blx	r3
 800c29c:	e02b      	b.n	800c2f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d027      	beq.n	800c2f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	4798      	blx	r3
 800c2ae:	e022      	b.n	800c2f6 <HAL_DMA_IRQHandler+0x29e>
 800c2b0:	2000408c 	.word	0x2000408c
 800c2b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10f      	bne.n	800c2e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f022 0210 	bic.w	r2, r2, #16
 800c2d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d032      	beq.n	800c364 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d022      	beq.n	800c350 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2205      	movs	r2, #5
 800c30e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f022 0201 	bic.w	r2, r2, #1
 800c320:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	3301      	adds	r3, #1
 800c326:	60bb      	str	r3, [r7, #8]
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d307      	bcc.n	800c33e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1f2      	bne.n	800c322 <HAL_DMA_IRQHandler+0x2ca>
 800c33c:	e000      	b.n	800c340 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c33e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c354:	2b00      	cmp	r3, #0
 800c356:	d005      	beq.n	800c364 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	4798      	blx	r3
 800c360:	e000      	b.n	800c364 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c362:	bf00      	nop
    }
  }
}
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop

0800c36c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c37a:	b2db      	uxtb	r3, r3
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c3a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	2b40      	cmp	r3, #64	; 0x40
 800c3b4:	d108      	bne.n	800c3c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c3c6:	e007      	b.n	800c3d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	60da      	str	r2, [r3, #12]
}
 800c3d8:	bf00      	nop
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	3b10      	subs	r3, #16
 800c3f4:	4a14      	ldr	r2, [pc, #80]	; (800c448 <DMA_CalcBaseAndBitshift+0x64>)
 800c3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3fa:	091b      	lsrs	r3, r3, #4
 800c3fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c3fe:	4a13      	ldr	r2, [pc, #76]	; (800c44c <DMA_CalcBaseAndBitshift+0x68>)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4413      	add	r3, r2
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d909      	bls.n	800c426 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c41a:	f023 0303 	bic.w	r3, r3, #3
 800c41e:	1d1a      	adds	r2, r3, #4
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	659a      	str	r2, [r3, #88]	; 0x58
 800c424:	e007      	b.n	800c436 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	aaaaaaab 	.word	0xaaaaaaab
 800c44c:	0801ca58 	.word	0x0801ca58

0800c450 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c458:	2300      	movs	r3, #0
 800c45a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c460:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d11f      	bne.n	800c4aa <DMA_CheckFifoParam+0x5a>
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	2b03      	cmp	r3, #3
 800c46e:	d856      	bhi.n	800c51e <DMA_CheckFifoParam+0xce>
 800c470:	a201      	add	r2, pc, #4	; (adr r2, 800c478 <DMA_CheckFifoParam+0x28>)
 800c472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c476:	bf00      	nop
 800c478:	0800c489 	.word	0x0800c489
 800c47c:	0800c49b 	.word	0x0800c49b
 800c480:	0800c489 	.word	0x0800c489
 800c484:	0800c51f 	.word	0x0800c51f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d046      	beq.n	800c522 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c498:	e043      	b.n	800c522 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c4a2:	d140      	bne.n	800c526 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c4a8:	e03d      	b.n	800c526 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4b2:	d121      	bne.n	800c4f8 <DMA_CheckFifoParam+0xa8>
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d837      	bhi.n	800c52a <DMA_CheckFifoParam+0xda>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <DMA_CheckFifoParam+0x70>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c4d1 	.word	0x0800c4d1
 800c4c4:	0800c4d7 	.word	0x0800c4d7
 800c4c8:	0800c4d1 	.word	0x0800c4d1
 800c4cc:	0800c4e9 	.word	0x0800c4e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d4:	e030      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d025      	beq.n	800c52e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c4e6:	e022      	b.n	800c52e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c4f0:	d11f      	bne.n	800c532 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c4f6:	e01c      	b.n	800c532 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d903      	bls.n	800c506 <DMA_CheckFifoParam+0xb6>
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b03      	cmp	r3, #3
 800c502:	d003      	beq.n	800c50c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c504:	e018      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	73fb      	strb	r3, [r7, #15]
      break;
 800c50a:	e015      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00e      	beq.n	800c536 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	73fb      	strb	r3, [r7, #15]
      break;
 800c51c:	e00b      	b.n	800c536 <DMA_CheckFifoParam+0xe6>
      break;
 800c51e:	bf00      	nop
 800c520:	e00a      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
      break;
 800c522:	bf00      	nop
 800c524:	e008      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
      break;
 800c526:	bf00      	nop
 800c528:	e006      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
      break;
 800c52a:	bf00      	nop
 800c52c:	e004      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
      break;
 800c52e:	bf00      	nop
 800c530:	e002      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
      break;   
 800c532:	bf00      	nop
 800c534:	e000      	b.n	800c538 <DMA_CheckFifoParam+0xe8>
      break;
 800c536:	bf00      	nop
    }
  } 
  
  return status; 
 800c538:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop

0800c548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c548:	b480      	push	{r7}
 800c54a:	b089      	sub	sp, #36	; 0x24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c552:	2300      	movs	r3, #0
 800c554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c556:	2300      	movs	r3, #0
 800c558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c55a:	2300      	movs	r3, #0
 800c55c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c55e:	2300      	movs	r3, #0
 800c560:	61fb      	str	r3, [r7, #28]
 800c562:	e16b      	b.n	800c83c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c564:	2201      	movs	r2, #1
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	fa02 f303 	lsl.w	r3, r2, r3
 800c56c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	4013      	ands	r3, r2
 800c576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	f040 815a 	bne.w	800c836 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d00b      	beq.n	800c5a2 <HAL_GPIO_Init+0x5a>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d007      	beq.n	800c5a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c596:	2b11      	cmp	r3, #17
 800c598:	d003      	beq.n	800c5a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	2b12      	cmp	r3, #18
 800c5a0:	d130      	bne.n	800c604 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	005b      	lsls	r3, r3, #1
 800c5ac:	2203      	movs	r2, #3
 800c5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b2:	43db      	mvns	r3, r3
 800c5b4:	69ba      	ldr	r2, [r7, #24]
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	68da      	ldr	r2, [r3, #12]
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	69ba      	ldr	r2, [r7, #24]
 800c5d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c5d8:	2201      	movs	r2, #1
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e0:	43db      	mvns	r3, r3
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	091b      	lsrs	r3, r3, #4
 800c5ee:	f003 0201 	and.w	r2, r3, #1
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f8:	69ba      	ldr	r2, [r7, #24]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	69ba      	ldr	r2, [r7, #24]
 800c602:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	2203      	movs	r2, #3
 800c610:	fa02 f303 	lsl.w	r3, r2, r3
 800c614:	43db      	mvns	r3, r3
 800c616:	69ba      	ldr	r2, [r7, #24]
 800c618:	4013      	ands	r3, r2
 800c61a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	689a      	ldr	r2, [r3, #8]
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	005b      	lsls	r3, r3, #1
 800c624:	fa02 f303 	lsl.w	r3, r2, r3
 800c628:	69ba      	ldr	r2, [r7, #24]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	69ba      	ldr	r2, [r7, #24]
 800c632:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d003      	beq.n	800c644 <HAL_GPIO_Init+0xfc>
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	2b12      	cmp	r3, #18
 800c642:	d123      	bne.n	800c68c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	08da      	lsrs	r2, r3, #3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3208      	adds	r2, #8
 800c64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	f003 0307 	and.w	r3, r3, #7
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	220f      	movs	r2, #15
 800c65c:	fa02 f303 	lsl.w	r3, r2, r3
 800c660:	43db      	mvns	r3, r3
 800c662:	69ba      	ldr	r2, [r7, #24]
 800c664:	4013      	ands	r3, r2
 800c666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	691a      	ldr	r2, [r3, #16]
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	f003 0307 	and.w	r3, r3, #7
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	fa02 f303 	lsl.w	r3, r2, r3
 800c678:	69ba      	ldr	r2, [r7, #24]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	08da      	lsrs	r2, r3, #3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3208      	adds	r2, #8
 800c686:	69b9      	ldr	r1, [r7, #24]
 800c688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	2203      	movs	r2, #3
 800c698:	fa02 f303 	lsl.w	r3, r2, r3
 800c69c:	43db      	mvns	r3, r3
 800c69e:	69ba      	ldr	r2, [r7, #24]
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	f003 0203 	and.w	r2, r3, #3
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	005b      	lsls	r3, r3, #1
 800c6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b4:	69ba      	ldr	r2, [r7, #24]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 80b4 	beq.w	800c836 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	4b60      	ldr	r3, [pc, #384]	; (800c854 <HAL_GPIO_Init+0x30c>)
 800c6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d6:	4a5f      	ldr	r2, [pc, #380]	; (800c854 <HAL_GPIO_Init+0x30c>)
 800c6d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6dc:	6453      	str	r3, [r2, #68]	; 0x44
 800c6de:	4b5d      	ldr	r3, [pc, #372]	; (800c854 <HAL_GPIO_Init+0x30c>)
 800c6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c6ea:	4a5b      	ldr	r2, [pc, #364]	; (800c858 <HAL_GPIO_Init+0x310>)
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	089b      	lsrs	r3, r3, #2
 800c6f0:	3302      	adds	r3, #2
 800c6f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	220f      	movs	r2, #15
 800c702:	fa02 f303 	lsl.w	r3, r2, r3
 800c706:	43db      	mvns	r3, r3
 800c708:	69ba      	ldr	r2, [r7, #24]
 800c70a:	4013      	ands	r3, r2
 800c70c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a52      	ldr	r2, [pc, #328]	; (800c85c <HAL_GPIO_Init+0x314>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d02b      	beq.n	800c76e <HAL_GPIO_Init+0x226>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a51      	ldr	r2, [pc, #324]	; (800c860 <HAL_GPIO_Init+0x318>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d025      	beq.n	800c76a <HAL_GPIO_Init+0x222>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a50      	ldr	r2, [pc, #320]	; (800c864 <HAL_GPIO_Init+0x31c>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d01f      	beq.n	800c766 <HAL_GPIO_Init+0x21e>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a4f      	ldr	r2, [pc, #316]	; (800c868 <HAL_GPIO_Init+0x320>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d019      	beq.n	800c762 <HAL_GPIO_Init+0x21a>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a4e      	ldr	r2, [pc, #312]	; (800c86c <HAL_GPIO_Init+0x324>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d013      	beq.n	800c75e <HAL_GPIO_Init+0x216>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a4d      	ldr	r2, [pc, #308]	; (800c870 <HAL_GPIO_Init+0x328>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d00d      	beq.n	800c75a <HAL_GPIO_Init+0x212>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a4c      	ldr	r2, [pc, #304]	; (800c874 <HAL_GPIO_Init+0x32c>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d007      	beq.n	800c756 <HAL_GPIO_Init+0x20e>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a4b      	ldr	r2, [pc, #300]	; (800c878 <HAL_GPIO_Init+0x330>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d101      	bne.n	800c752 <HAL_GPIO_Init+0x20a>
 800c74e:	2307      	movs	r3, #7
 800c750:	e00e      	b.n	800c770 <HAL_GPIO_Init+0x228>
 800c752:	2308      	movs	r3, #8
 800c754:	e00c      	b.n	800c770 <HAL_GPIO_Init+0x228>
 800c756:	2306      	movs	r3, #6
 800c758:	e00a      	b.n	800c770 <HAL_GPIO_Init+0x228>
 800c75a:	2305      	movs	r3, #5
 800c75c:	e008      	b.n	800c770 <HAL_GPIO_Init+0x228>
 800c75e:	2304      	movs	r3, #4
 800c760:	e006      	b.n	800c770 <HAL_GPIO_Init+0x228>
 800c762:	2303      	movs	r3, #3
 800c764:	e004      	b.n	800c770 <HAL_GPIO_Init+0x228>
 800c766:	2302      	movs	r3, #2
 800c768:	e002      	b.n	800c770 <HAL_GPIO_Init+0x228>
 800c76a:	2301      	movs	r3, #1
 800c76c:	e000      	b.n	800c770 <HAL_GPIO_Init+0x228>
 800c76e:	2300      	movs	r3, #0
 800c770:	69fa      	ldr	r2, [r7, #28]
 800c772:	f002 0203 	and.w	r2, r2, #3
 800c776:	0092      	lsls	r2, r2, #2
 800c778:	4093      	lsls	r3, r2
 800c77a:	69ba      	ldr	r2, [r7, #24]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c780:	4935      	ldr	r1, [pc, #212]	; (800c858 <HAL_GPIO_Init+0x310>)
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	089b      	lsrs	r3, r3, #2
 800c786:	3302      	adds	r3, #2
 800c788:	69ba      	ldr	r2, [r7, #24]
 800c78a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c78e:	4b3b      	ldr	r3, [pc, #236]	; (800c87c <HAL_GPIO_Init+0x334>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	43db      	mvns	r3, r3
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	4013      	ands	r3, r2
 800c79c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d003      	beq.n	800c7b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c7aa:	69ba      	ldr	r2, [r7, #24]
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c7b2:	4a32      	ldr	r2, [pc, #200]	; (800c87c <HAL_GPIO_Init+0x334>)
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c7b8:	4b30      	ldr	r3, [pc, #192]	; (800c87c <HAL_GPIO_Init+0x334>)
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	43db      	mvns	r3, r3
 800c7c2:	69ba      	ldr	r2, [r7, #24]
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d003      	beq.n	800c7dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c7d4:	69ba      	ldr	r2, [r7, #24]
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c7dc:	4a27      	ldr	r2, [pc, #156]	; (800c87c <HAL_GPIO_Init+0x334>)
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c7e2:	4b26      	ldr	r3, [pc, #152]	; (800c87c <HAL_GPIO_Init+0x334>)
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	43db      	mvns	r3, r3
 800c7ec:	69ba      	ldr	r2, [r7, #24]
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d003      	beq.n	800c806 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c7fe:	69ba      	ldr	r2, [r7, #24]
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	4313      	orrs	r3, r2
 800c804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c806:	4a1d      	ldr	r2, [pc, #116]	; (800c87c <HAL_GPIO_Init+0x334>)
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c80c:	4b1b      	ldr	r3, [pc, #108]	; (800c87c <HAL_GPIO_Init+0x334>)
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	43db      	mvns	r3, r3
 800c816:	69ba      	ldr	r2, [r7, #24]
 800c818:	4013      	ands	r3, r2
 800c81a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c828:	69ba      	ldr	r2, [r7, #24]
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c830:	4a12      	ldr	r2, [pc, #72]	; (800c87c <HAL_GPIO_Init+0x334>)
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	3301      	adds	r3, #1
 800c83a:	61fb      	str	r3, [r7, #28]
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	2b0f      	cmp	r3, #15
 800c840:	f67f ae90 	bls.w	800c564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	3724      	adds	r7, #36	; 0x24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	40023800 	.word	0x40023800
 800c858:	40013800 	.word	0x40013800
 800c85c:	40020000 	.word	0x40020000
 800c860:	40020400 	.word	0x40020400
 800c864:	40020800 	.word	0x40020800
 800c868:	40020c00 	.word	0x40020c00
 800c86c:	40021000 	.word	0x40021000
 800c870:	40021400 	.word	0x40021400
 800c874:	40021800 	.word	0x40021800
 800c878:	40021c00 	.word	0x40021c00
 800c87c:	40013c00 	.word	0x40013c00

0800c880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	807b      	strh	r3, [r7, #2]
 800c88c:	4613      	mov	r3, r2
 800c88e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c890:	787b      	ldrb	r3, [r7, #1]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c896:	887a      	ldrh	r2, [r7, #2]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c89c:	e003      	b.n	800c8a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c89e:	887b      	ldrh	r3, [r7, #2]
 800c8a0:	041a      	lsls	r2, r3, #16
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	619a      	str	r2, [r3, #24]
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
	...

0800c8b4 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d101      	bne.n	800c8ca <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e043      	b.n	800c952 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7f8 f812 	bl	8004908 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	f003 f9b6 	bl	800fc60 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6818      	ldr	r0, [r3, #0]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	68b9      	ldr	r1, [r7, #8]
 800c900:	f003 fa00 	bl	800fd04 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6858      	ldr	r0, [r3, #4]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	689a      	ldr	r2, [r3, #8]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c910:	6879      	ldr	r1, [r7, #4]
 800c912:	f003 fa35 	bl	800fd80 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	6892      	ldr	r2, [r2, #8]
 800c91e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	6892      	ldr	r2, [r2, #8]
 800c92a:	f041 0101 	orr.w	r1, r1, #1
 800c92e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d103      	bne.n	800c942 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c93a:	4b08      	ldr	r3, [pc, #32]	; (800c95c <HAL_NOR_Init+0xa8>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	e002      	b.n	800c948 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c942:	4b06      	ldr	r3, [pc, #24]	; (800c95c <HAL_NOR_Init+0xa8>)
 800c944:	2201      	movs	r2, #1
 800c946:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	20004864 	.word	0x20004864

0800c960 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c962:	b08f      	sub	sp, #60	; 0x3c
 800c964:	af0a      	add	r7, sp, #40	; 0x28
 800c966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	e10f      	b.n	800cb92 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b00      	cmp	r3, #0
 800c982:	d106      	bne.n	800c992 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f009 fa61 	bl	8015e54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2203      	movs	r2, #3
 800c996:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d102      	bne.n	800c9ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f003 fb3a 	bl	801002a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	687e      	ldr	r6, [r7, #4]
 800c9be:	466d      	mov	r5, sp
 800c9c0:	f106 0410 	add.w	r4, r6, #16
 800c9c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c9d0:	e885 0003 	stmia.w	r5, {r0, r1}
 800c9d4:	1d33      	adds	r3, r6, #4
 800c9d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c9d8:	6838      	ldr	r0, [r7, #0]
 800c9da:	f003 fa11 	bl	800fe00 <USB_CoreInit>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d005      	beq.n	800c9f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e0d0      	b.n	800cb92 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f003 fb28 	bl	801004c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	73fb      	strb	r3, [r7, #15]
 800ca00:	e04a      	b.n	800ca98 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ca02:	7bfa      	ldrb	r2, [r7, #15]
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	4613      	mov	r3, r2
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	1a9b      	subs	r3, r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	440b      	add	r3, r1
 800ca10:	333d      	adds	r3, #61	; 0x3d
 800ca12:	2201      	movs	r2, #1
 800ca14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ca16:	7bfa      	ldrb	r2, [r7, #15]
 800ca18:	6879      	ldr	r1, [r7, #4]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	1a9b      	subs	r3, r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	440b      	add	r3, r1
 800ca24:	333c      	adds	r3, #60	; 0x3c
 800ca26:	7bfa      	ldrb	r2, [r7, #15]
 800ca28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ca2a:	7bfa      	ldrb	r2, [r7, #15]
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	b298      	uxth	r0, r3
 800ca30:	6879      	ldr	r1, [r7, #4]
 800ca32:	4613      	mov	r3, r2
 800ca34:	00db      	lsls	r3, r3, #3
 800ca36:	1a9b      	subs	r3, r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	440b      	add	r3, r1
 800ca3c:	3342      	adds	r3, #66	; 0x42
 800ca3e:	4602      	mov	r2, r0
 800ca40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ca42:	7bfa      	ldrb	r2, [r7, #15]
 800ca44:	6879      	ldr	r1, [r7, #4]
 800ca46:	4613      	mov	r3, r2
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	1a9b      	subs	r3, r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	440b      	add	r3, r1
 800ca50:	333f      	adds	r3, #63	; 0x3f
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ca56:	7bfa      	ldrb	r2, [r7, #15]
 800ca58:	6879      	ldr	r1, [r7, #4]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	00db      	lsls	r3, r3, #3
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	440b      	add	r3, r1
 800ca64:	3344      	adds	r3, #68	; 0x44
 800ca66:	2200      	movs	r2, #0
 800ca68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ca6a:	7bfa      	ldrb	r2, [r7, #15]
 800ca6c:	6879      	ldr	r1, [r7, #4]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	1a9b      	subs	r3, r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	440b      	add	r3, r1
 800ca78:	3348      	adds	r3, #72	; 0x48
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ca7e:	7bfa      	ldrb	r2, [r7, #15]
 800ca80:	6879      	ldr	r1, [r7, #4]
 800ca82:	4613      	mov	r3, r2
 800ca84:	00db      	lsls	r3, r3, #3
 800ca86:	1a9b      	subs	r3, r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	440b      	add	r3, r1
 800ca8c:	3350      	adds	r3, #80	; 0x50
 800ca8e:	2200      	movs	r2, #0
 800ca90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	3301      	adds	r3, #1
 800ca96:	73fb      	strb	r3, [r7, #15]
 800ca98:	7bfa      	ldrb	r2, [r7, #15]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d3af      	bcc.n	800ca02 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caa2:	2300      	movs	r3, #0
 800caa4:	73fb      	strb	r3, [r7, #15]
 800caa6:	e044      	b.n	800cb32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800caa8:	7bfa      	ldrb	r2, [r7, #15]
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	4613      	mov	r3, r2
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	440b      	add	r3, r1
 800cab6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800caba:	2200      	movs	r2, #0
 800cabc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cabe:	7bfa      	ldrb	r2, [r7, #15]
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	1a9b      	subs	r3, r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	440b      	add	r3, r1
 800cacc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800cad0:	7bfa      	ldrb	r2, [r7, #15]
 800cad2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cad4:	7bfa      	ldrb	r2, [r7, #15]
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	4613      	mov	r3, r2
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	1a9b      	subs	r3, r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	440b      	add	r3, r1
 800cae2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800caea:	7bfa      	ldrb	r2, [r7, #15]
 800caec:	6879      	ldr	r1, [r7, #4]
 800caee:	4613      	mov	r3, r2
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	1a9b      	subs	r3, r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	440b      	add	r3, r1
 800caf8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cb00:	7bfa      	ldrb	r2, [r7, #15]
 800cb02:	6879      	ldr	r1, [r7, #4]
 800cb04:	4613      	mov	r3, r2
 800cb06:	00db      	lsls	r3, r3, #3
 800cb08:	1a9b      	subs	r3, r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	440b      	add	r3, r1
 800cb0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cb16:	7bfa      	ldrb	r2, [r7, #15]
 800cb18:	6879      	ldr	r1, [r7, #4]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	1a9b      	subs	r3, r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	440b      	add	r3, r1
 800cb24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	73fb      	strb	r3, [r7, #15]
 800cb32:	7bfa      	ldrb	r2, [r7, #15]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d3b5      	bcc.n	800caa8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	603b      	str	r3, [r7, #0]
 800cb42:	687e      	ldr	r6, [r7, #4]
 800cb44:	466d      	mov	r5, sp
 800cb46:	f106 0410 	add.w	r4, r6, #16
 800cb4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb52:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cb56:	e885 0003 	stmia.w	r5, {r0, r1}
 800cb5a:	1d33      	adds	r3, r6, #4
 800cb5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb5e:	6838      	ldr	r0, [r7, #0]
 800cb60:	f003 fa9e 	bl	80100a0 <USB_DevInit>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d005      	beq.n	800cb76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e00d      	b.n	800cb92 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f004 fae6 	bl	801115c <USB_DevDisconnect>

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3714      	adds	r7, #20
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b084      	sub	sp, #16
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d101      	bne.n	800cbb6 <HAL_PCD_Start+0x1c>
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	e020      	b.n	800cbf8 <HAL_PCD_Start+0x5e>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d109      	bne.n	800cbda <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d005      	beq.n	800cbda <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f003 fa12 	bl	8010008 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f004 fa96 	bl	801111a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cc00:	b590      	push	{r4, r7, lr}
 800cc02:	b08d      	sub	sp, #52	; 0x34
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc0e:	6a3b      	ldr	r3, [r7, #32]
 800cc10:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f004 fb54 	bl	80112c4 <USB_GetMode>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f040 839d 	bne.w	800d35e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f004 fab8 	bl	801119e <USB_ReadInterrupts>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f000 8393 	beq.w	800d35c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f004 faaf 	bl	801119e <USB_ReadInterrupts>
 800cc40:	4603      	mov	r3, r0
 800cc42:	f003 0302 	and.w	r3, r3, #2
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d107      	bne.n	800cc5a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	695a      	ldr	r2, [r3, #20]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f002 0202 	and.w	r2, r2, #2
 800cc58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f004 fa9d 	bl	801119e <USB_ReadInterrupts>
 800cc64:	4603      	mov	r3, r0
 800cc66:	f003 0310 	and.w	r3, r3, #16
 800cc6a:	2b10      	cmp	r3, #16
 800cc6c:	d161      	bne.n	800cd32 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	699a      	ldr	r2, [r3, #24]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f022 0210 	bic.w	r2, r2, #16
 800cc7c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800cc7e:	6a3b      	ldr	r3, [r7, #32]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	f003 020f 	and.w	r2, r3, #15
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	1a9b      	subs	r3, r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	4413      	add	r3, r2
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	0c5b      	lsrs	r3, r3, #17
 800cca2:	f003 030f 	and.w	r3, r3, #15
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d124      	bne.n	800ccf4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ccaa:	69ba      	ldr	r2, [r7, #24]
 800ccac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d035      	beq.n	800cd22 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	091b      	lsrs	r3, r3, #4
 800ccbe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ccc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	6a38      	ldr	r0, [r7, #32]
 800ccca:	f004 f903 	bl	8010ed4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	68da      	ldr	r2, [r3, #12]
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	091b      	lsrs	r3, r3, #4
 800ccd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccda:	441a      	add	r2, r3
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	699a      	ldr	r2, [r3, #24]
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	091b      	lsrs	r3, r3, #4
 800cce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccec:	441a      	add	r2, r3
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	619a      	str	r2, [r3, #24]
 800ccf2:	e016      	b.n	800cd22 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	0c5b      	lsrs	r3, r3, #17
 800ccf8:	f003 030f 	and.w	r3, r3, #15
 800ccfc:	2b06      	cmp	r3, #6
 800ccfe:	d110      	bne.n	800cd22 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd06:	2208      	movs	r2, #8
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6a38      	ldr	r0, [r7, #32]
 800cd0c:	f004 f8e2 	bl	8010ed4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	699a      	ldr	r2, [r3, #24]
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	091b      	lsrs	r3, r3, #4
 800cd18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd1c:	441a      	add	r2, r3
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	699a      	ldr	r2, [r3, #24]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f042 0210 	orr.w	r2, r2, #16
 800cd30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f004 fa31 	bl	801119e <USB_ReadInterrupts>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cd46:	d16e      	bne.n	800ce26 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f004 fa37 	bl	80111c4 <USB_ReadDevAllOutEpInterrupt>
 800cd56:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800cd58:	e062      	b.n	800ce20 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	f003 0301 	and.w	r3, r3, #1
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d057      	beq.n	800ce14 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd6a:	b2d2      	uxtb	r2, r2
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f004 fa5c 	bl	801122c <USB_ReadDevOutEPInterrupt>
 800cd74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00c      	beq.n	800cd9a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	015a      	lsls	r2, r3, #5
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	4413      	add	r3, r2
 800cd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	2301      	movs	r3, #1
 800cd90:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800cd92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fdb1 	bl	800d8fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	f003 0308 	and.w	r3, r3, #8
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00c      	beq.n	800cdbe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	015a      	lsls	r2, r3, #5
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	2308      	movs	r3, #8
 800cdb4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800cdb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 feab 	bl	800db14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	f003 0310 	and.w	r3, r3, #16
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d008      	beq.n	800cdda <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	015a      	lsls	r2, r3, #5
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	4413      	add	r3, r2
 800cdd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	2310      	movs	r3, #16
 800cdd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	f003 0320 	and.w	r3, r3, #32
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d008      	beq.n	800cdf6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	015a      	lsls	r2, r3, #5
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	4413      	add	r3, r2
 800cdec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	2320      	movs	r3, #32
 800cdf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d009      	beq.n	800ce14 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	015a      	lsls	r2, r3, #5
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	4413      	add	r3, r2
 800ce08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce16:	3301      	adds	r3, #1
 800ce18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	085b      	lsrs	r3, r3, #1
 800ce1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d199      	bne.n	800cd5a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f004 f9b7 	bl	801119e <USB_ReadInterrupts>
 800ce30:	4603      	mov	r3, r0
 800ce32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ce3a:	f040 80c0 	bne.w	800cfbe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f004 f9d8 	bl	80111f8 <USB_ReadDevAllInEpInterrupt>
 800ce48:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800ce4e:	e0b2      	b.n	800cfb6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	f003 0301 	and.w	r3, r3, #1
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 80a7 	beq.w	800cfaa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce62:	b2d2      	uxtb	r2, r2
 800ce64:	4611      	mov	r1, r2
 800ce66:	4618      	mov	r0, r3
 800ce68:	f004 f9fe 	bl	8011268 <USB_ReadDevInEPInterrupt>
 800ce6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f003 0301 	and.w	r3, r3, #1
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d057      	beq.n	800cf28 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7a:	f003 030f 	and.w	r3, r3, #15
 800ce7e:	2201      	movs	r2, #1
 800ce80:	fa02 f303 	lsl.w	r3, r2, r3
 800ce84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	43db      	mvns	r3, r3
 800ce92:	69f9      	ldr	r1, [r7, #28]
 800ce94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce98:	4013      	ands	r3, r2
 800ce9a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	015a      	lsls	r2, r3, #5
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	4413      	add	r3, r2
 800cea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea8:	461a      	mov	r2, r3
 800ceaa:	2301      	movs	r3, #1
 800ceac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d132      	bne.n	800cf1c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ceb6:	6879      	ldr	r1, [r7, #4]
 800ceb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceba:	4613      	mov	r3, r2
 800cebc:	00db      	lsls	r3, r3, #3
 800cebe:	1a9b      	subs	r3, r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	440b      	add	r3, r1
 800cec4:	3348      	adds	r3, #72	; 0x48
 800cec6:	6819      	ldr	r1, [r3, #0]
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cecc:	4613      	mov	r3, r2
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	1a9b      	subs	r3, r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4403      	add	r3, r0
 800ced6:	3344      	adds	r3, #68	; 0x44
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4419      	add	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee0:	4613      	mov	r3, r2
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	1a9b      	subs	r3, r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4403      	add	r3, r0
 800ceea:	3348      	adds	r3, #72	; 0x48
 800ceec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ceee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d113      	bne.n	800cf1c <HAL_PCD_IRQHandler+0x31c>
 800cef4:	6879      	ldr	r1, [r7, #4]
 800cef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef8:	4613      	mov	r3, r2
 800cefa:	00db      	lsls	r3, r3, #3
 800cefc:	1a9b      	subs	r3, r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	440b      	add	r3, r1
 800cf02:	3350      	adds	r3, #80	; 0x50
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d108      	bne.n	800cf1c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6818      	ldr	r0, [r3, #0]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf14:	461a      	mov	r2, r3
 800cf16:	2101      	movs	r1, #1
 800cf18:	f004 fa06 	bl	8011328 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f009 f817 	bl	8015f56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	f003 0308 	and.w	r3, r3, #8
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d008      	beq.n	800cf44 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	015a      	lsls	r2, r3, #5
 800cf36:	69fb      	ldr	r3, [r7, #28]
 800cf38:	4413      	add	r3, r2
 800cf3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf3e:	461a      	mov	r2, r3
 800cf40:	2308      	movs	r3, #8
 800cf42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	f003 0310 	and.w	r3, r3, #16
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d008      	beq.n	800cf60 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf50:	015a      	lsls	r2, r3, #5
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	4413      	add	r3, r2
 800cf56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	2310      	movs	r3, #16
 800cf5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d008      	beq.n	800cf7c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6c:	015a      	lsls	r2, r3, #5
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	4413      	add	r3, r2
 800cf72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf76:	461a      	mov	r2, r3
 800cf78:	2340      	movs	r3, #64	; 0x40
 800cf7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	f003 0302 	and.w	r3, r3, #2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d008      	beq.n	800cf98 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	015a      	lsls	r2, r3, #5
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf92:	461a      	mov	r2, r3
 800cf94:	2302      	movs	r3, #2
 800cf96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800cfa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fc1b 	bl	800d7e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfac:	3301      	adds	r3, #1
 800cfae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	085b      	lsrs	r3, r3, #1
 800cfb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f47f af49 	bne.w	800ce50 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f004 f8eb 	bl	801119e <USB_ReadInterrupts>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfd2:	d122      	bne.n	800d01a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	69fa      	ldr	r2, [r7, #28]
 800cfde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfe2:	f023 0301 	bic.w	r3, r3, #1
 800cfe6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d108      	bne.n	800d004 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cffa:	2100      	movs	r1, #0
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 fe27 	bl	800dc50 <HAL_PCDEx_LPM_Callback>
 800d002:	e002      	b.n	800d00a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f009 f81d 	bl	8016044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	695a      	ldr	r2, [r3, #20]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4618      	mov	r0, r3
 800d020:	f004 f8bd 	bl	801119e <USB_ReadInterrupts>
 800d024:	4603      	mov	r3, r0
 800d026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d02a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d02e:	d112      	bne.n	800d056 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	f003 0301 	and.w	r3, r3, #1
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d102      	bne.n	800d046 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f008 ffd9 	bl	8015ff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	695a      	ldr	r2, [r3, #20]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800d054:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f004 f89f 	bl	801119e <USB_ReadInterrupts>
 800d060:	4603      	mov	r3, r0
 800d062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d06a:	f040 80c7 	bne.w	800d1fc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	69fa      	ldr	r2, [r7, #28]
 800d078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d07c:	f023 0301 	bic.w	r3, r3, #1
 800d080:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2110      	movs	r1, #16
 800d088:	4618      	mov	r0, r3
 800d08a:	f003 f96d 	bl	8010368 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d08e:	2300      	movs	r3, #0
 800d090:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d092:	e056      	b.n	800d142 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d096:	015a      	lsls	r2, r3, #5
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	4413      	add	r3, r2
 800d09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d0a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	015a      	lsls	r2, r3, #5
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0b8:	0151      	lsls	r1, r2, #5
 800d0ba:	69fa      	ldr	r2, [r7, #28]
 800d0bc:	440a      	add	r2, r1
 800d0be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d0c6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	015a      	lsls	r2, r3, #5
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0d8:	0151      	lsls	r1, r2, #5
 800d0da:	69fa      	ldr	r2, [r7, #28]
 800d0dc:	440a      	add	r2, r1
 800d0de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d0e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	015a      	lsls	r2, r3, #5
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d0fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fe:	015a      	lsls	r2, r3, #5
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	4413      	add	r3, r2
 800d104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d10c:	0151      	lsls	r1, r2, #5
 800d10e:	69fa      	ldr	r2, [r7, #28]
 800d110:	440a      	add	r2, r1
 800d112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d116:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d11a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11e:	015a      	lsls	r2, r3, #5
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	4413      	add	r3, r2
 800d124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d12c:	0151      	lsls	r1, r2, #5
 800d12e:	69fa      	ldr	r2, [r7, #28]
 800d130:	440a      	add	r2, r1
 800d132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d13a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13e:	3301      	adds	r3, #1
 800d140:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d148:	429a      	cmp	r2, r3
 800d14a:	d3a3      	bcc.n	800d094 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d152:	69db      	ldr	r3, [r3, #28]
 800d154:	69fa      	ldr	r2, [r7, #28]
 800d156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d15a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800d15e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d164:	2b00      	cmp	r3, #0
 800d166:	d016      	beq.n	800d196 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d16e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d172:	69fa      	ldr	r2, [r7, #28]
 800d174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d178:	f043 030b 	orr.w	r3, r3, #11
 800d17c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d188:	69fa      	ldr	r2, [r7, #28]
 800d18a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d18e:	f043 030b 	orr.w	r3, r3, #11
 800d192:	6453      	str	r3, [r2, #68]	; 0x44
 800d194:	e015      	b.n	800d1c2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d19c:	695b      	ldr	r3, [r3, #20]
 800d19e:	69fa      	ldr	r2, [r7, #28]
 800d1a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d1a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800d1ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	69fa      	ldr	r2, [r7, #28]
 800d1b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1bc:	f043 030b 	orr.w	r3, r3, #11
 800d1c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	69fa      	ldr	r2, [r7, #28]
 800d1cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d1d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6818      	ldr	r0, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	f004 f89e 	bl	8011328 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	695a      	ldr	r2, [r3, #20]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d1fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4618      	mov	r0, r3
 800d202:	f003 ffcc 	bl	801119e <USB_ReadInterrupts>
 800d206:	4603      	mov	r3, r0
 800d208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d20c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d210:	d124      	bne.n	800d25c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4618      	mov	r0, r3
 800d218:	f004 f862 	bl	80112e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4618      	mov	r0, r3
 800d222:	f003 f902 	bl	801042a <USB_GetDevSpeed>
 800d226:	4603      	mov	r3, r0
 800d228:	461a      	mov	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681c      	ldr	r4, [r3, #0]
 800d232:	f001 f951 	bl	800e4d8 <HAL_RCC_GetHCLKFreq>
 800d236:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	461a      	mov	r2, r3
 800d240:	4620      	mov	r0, r4
 800d242:	f002 fe3f 	bl	800fec4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f008 fead 	bl	8015fa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	695a      	ldr	r2, [r3, #20]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d25a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4618      	mov	r0, r3
 800d262:	f003 ff9c 	bl	801119e <USB_ReadInterrupts>
 800d266:	4603      	mov	r3, r0
 800d268:	f003 0308 	and.w	r3, r3, #8
 800d26c:	2b08      	cmp	r3, #8
 800d26e:	d10a      	bne.n	800d286 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f008 fe8a 	bl	8015f8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	695a      	ldr	r2, [r3, #20]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f002 0208 	and.w	r2, r2, #8
 800d284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f003 ff87 	bl	801119e <USB_ReadInterrupts>
 800d290:	4603      	mov	r3, r0
 800d292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d29a:	d10f      	bne.n	800d2bc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d29c:	2300      	movs	r3, #0
 800d29e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f008 feec 	bl	8016084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	695a      	ldr	r2, [r3, #20]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d2ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f003 ff6c 	bl	801119e <USB_ReadInterrupts>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2d0:	d10f      	bne.n	800d2f2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f008 febf 	bl	8016060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	695a      	ldr	r2, [r3, #20]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800d2f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f003 ff51 	bl	801119e <USB_ReadInterrupts>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d306:	d10a      	bne.n	800d31e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f008 fecd 	bl	80160a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	695a      	ldr	r2, [r3, #20]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800d31c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4618      	mov	r0, r3
 800d324:	f003 ff3b 	bl	801119e <USB_ReadInterrupts>
 800d328:	4603      	mov	r3, r0
 800d32a:	f003 0304 	and.w	r3, r3, #4
 800d32e:	2b04      	cmp	r3, #4
 800d330:	d115      	bne.n	800d35e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	f003 0304 	and.w	r3, r3, #4
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f008 febd 	bl	80160c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6859      	ldr	r1, [r3, #4]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	69ba      	ldr	r2, [r7, #24]
 800d356:	430a      	orrs	r2, r1
 800d358:	605a      	str	r2, [r3, #4]
 800d35a:	e000      	b.n	800d35e <HAL_PCD_IRQHandler+0x75e>
      return;
 800d35c:	bf00      	nop
    }
  }
}
 800d35e:	3734      	adds	r7, #52	; 0x34
 800d360:	46bd      	mov	sp, r7
 800d362:	bd90      	pop	{r4, r7, pc}

0800d364 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d376:	2b01      	cmp	r3, #1
 800d378:	d101      	bne.n	800d37e <HAL_PCD_SetAddress+0x1a>
 800d37a:	2302      	movs	r3, #2
 800d37c:	e013      	b.n	800d3a6 <HAL_PCD_SetAddress+0x42>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2201      	movs	r2, #1
 800d382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	78fa      	ldrb	r2, [r7, #3]
 800d38a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	78fa      	ldrb	r2, [r7, #3]
 800d394:	4611      	mov	r1, r2
 800d396:	4618      	mov	r0, r3
 800d398:	f003 fe99 	bl	80110ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	4603      	mov	r3, r0
 800d3be:	70fb      	strb	r3, [r7, #3]
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	803b      	strh	r3, [r7, #0]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d3cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	da0f      	bge.n	800d3f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	f003 020f 	and.w	r2, r3, #15
 800d3da:	4613      	mov	r3, r2
 800d3dc:	00db      	lsls	r3, r3, #3
 800d3de:	1a9b      	subs	r3, r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	3338      	adds	r3, #56	; 0x38
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	705a      	strb	r2, [r3, #1]
 800d3f2:	e00f      	b.n	800d414 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3f4:	78fb      	ldrb	r3, [r7, #3]
 800d3f6:	f003 020f 	and.w	r2, r3, #15
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	00db      	lsls	r3, r3, #3
 800d3fe:	1a9b      	subs	r3, r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	3304      	adds	r3, #4
 800d40c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d414:	78fb      	ldrb	r3, [r7, #3]
 800d416:	f003 030f 	and.w	r3, r3, #15
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d420:	883a      	ldrh	r2, [r7, #0]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	78ba      	ldrb	r2, [r7, #2]
 800d42a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	785b      	ldrb	r3, [r3, #1]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d004      	beq.n	800d43e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	b29a      	uxth	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d43e:	78bb      	ldrb	r3, [r7, #2]
 800d440:	2b02      	cmp	r3, #2
 800d442:	d102      	bne.n	800d44a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d450:	2b01      	cmp	r3, #1
 800d452:	d101      	bne.n	800d458 <HAL_PCD_EP_Open+0xaa>
 800d454:	2302      	movs	r3, #2
 800d456:	e00e      	b.n	800d476 <HAL_PCD_EP_Open+0xc8>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68f9      	ldr	r1, [r7, #12]
 800d466:	4618      	mov	r0, r3
 800d468:	f003 f804 	bl	8010474 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d474:	7afb      	ldrb	r3, [r7, #11]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	460b      	mov	r3, r1
 800d488:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d48a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	da0f      	bge.n	800d4b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d492:	78fb      	ldrb	r3, [r7, #3]
 800d494:	f003 020f 	and.w	r2, r3, #15
 800d498:	4613      	mov	r3, r2
 800d49a:	00db      	lsls	r3, r3, #3
 800d49c:	1a9b      	subs	r3, r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	3338      	adds	r3, #56	; 0x38
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	705a      	strb	r2, [r3, #1]
 800d4b0:	e00f      	b.n	800d4d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d4b2:	78fb      	ldrb	r3, [r7, #3]
 800d4b4:	f003 020f 	and.w	r2, r3, #15
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	1a9b      	subs	r3, r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d4d2:	78fb      	ldrb	r3, [r7, #3]
 800d4d4:	f003 030f 	and.w	r3, r3, #15
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d101      	bne.n	800d4ec <HAL_PCD_EP_Close+0x6e>
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	e00e      	b.n	800d50a <HAL_PCD_EP_Close+0x8c>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68f9      	ldr	r1, [r7, #12]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f003 f842 	bl	8010584 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
 800d51e:	460b      	mov	r3, r1
 800d520:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d522:	7afb      	ldrb	r3, [r7, #11]
 800d524:	f003 020f 	and.w	r2, r3, #15
 800d528:	4613      	mov	r3, r2
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	1a9b      	subs	r3, r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	4413      	add	r3, r2
 800d538:	3304      	adds	r3, #4
 800d53a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	2200      	movs	r2, #0
 800d54c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	2200      	movs	r2, #0
 800d552:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d554:	7afb      	ldrb	r3, [r7, #11]
 800d556:	f003 030f 	and.w	r3, r3, #15
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	691b      	ldr	r3, [r3, #16]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d102      	bne.n	800d56e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d56e:	7afb      	ldrb	r3, [r7, #11]
 800d570:	f003 030f 	and.w	r3, r3, #15
 800d574:	2b00      	cmp	r3, #0
 800d576:	d109      	bne.n	800d58c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6818      	ldr	r0, [r3, #0]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	691b      	ldr	r3, [r3, #16]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	461a      	mov	r2, r3
 800d584:	6979      	ldr	r1, [r7, #20]
 800d586:	f003 fb1d 	bl	8010bc4 <USB_EP0StartXfer>
 800d58a:	e008      	b.n	800d59e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6818      	ldr	r0, [r3, #0]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	691b      	ldr	r3, [r3, #16]
 800d594:	b2db      	uxtb	r3, r3
 800d596:	461a      	mov	r2, r3
 800d598:	6979      	ldr	r1, [r7, #20]
 800d59a:	f003 f8cf 	bl	801073c <USB_EPStartXfer>
  }

  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3718      	adds	r7, #24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d5b4:	78fb      	ldrb	r3, [r7, #3]
 800d5b6:	f003 020f 	and.w	r2, r3, #15
 800d5ba:	6879      	ldr	r1, [r7, #4]
 800d5bc:	4613      	mov	r3, r2
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	1a9b      	subs	r3, r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	440b      	add	r3, r1
 800d5c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d5ca:	681b      	ldr	r3, [r3, #0]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	607a      	str	r2, [r7, #4]
 800d5e2:	603b      	str	r3, [r7, #0]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d5e8:	7afb      	ldrb	r3, [r7, #11]
 800d5ea:	f003 020f 	and.w	r2, r3, #15
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	1a9b      	subs	r3, r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	3338      	adds	r3, #56	; 0x38
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	3304      	adds	r3, #4
 800d5fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2200      	movs	r2, #0
 800d610:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	2201      	movs	r2, #1
 800d616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d618:	7afb      	ldrb	r3, [r7, #11]
 800d61a:	f003 030f 	and.w	r3, r3, #15
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d102      	bne.n	800d632 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d632:	7afb      	ldrb	r3, [r7, #11]
 800d634:	f003 030f 	and.w	r3, r3, #15
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d109      	bne.n	800d650 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6818      	ldr	r0, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	b2db      	uxtb	r3, r3
 800d646:	461a      	mov	r2, r3
 800d648:	6979      	ldr	r1, [r7, #20]
 800d64a:	f003 fabb 	bl	8010bc4 <USB_EP0StartXfer>
 800d64e:	e008      	b.n	800d662 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6818      	ldr	r0, [r3, #0]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	461a      	mov	r2, r3
 800d65c:	6979      	ldr	r1, [r7, #20]
 800d65e:	f003 f86d 	bl	801073c <USB_EPStartXfer>
  }

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	460b      	mov	r3, r1
 800d676:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d678:	78fb      	ldrb	r3, [r7, #3]
 800d67a:	f003 020f 	and.w	r2, r3, #15
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	429a      	cmp	r2, r3
 800d684:	d901      	bls.n	800d68a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e050      	b.n	800d72c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d68a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	da0f      	bge.n	800d6b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d692:	78fb      	ldrb	r3, [r7, #3]
 800d694:	f003 020f 	and.w	r2, r3, #15
 800d698:	4613      	mov	r3, r2
 800d69a:	00db      	lsls	r3, r3, #3
 800d69c:	1a9b      	subs	r3, r3, r2
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	3338      	adds	r3, #56	; 0x38
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	705a      	strb	r2, [r3, #1]
 800d6b0:	e00d      	b.n	800d6ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d6b2:	78fa      	ldrb	r2, [r7, #3]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	1a9b      	subs	r3, r3, r2
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	f003 030f 	and.w	r3, r3, #15
 800d6da:	b2da      	uxtb	r2, r3
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d101      	bne.n	800d6ee <HAL_PCD_EP_SetStall+0x82>
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	e01e      	b.n	800d72c <HAL_PCD_EP_SetStall+0xc0>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68f9      	ldr	r1, [r7, #12]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f003 fc12 	bl	8010f26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d702:	78fb      	ldrb	r3, [r7, #3]
 800d704:	f003 030f 	and.w	r3, r3, #15
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10a      	bne.n	800d722 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6818      	ldr	r0, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	b2d9      	uxtb	r1, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d71c:	461a      	mov	r2, r3
 800d71e:	f003 fe03 	bl	8011328 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d740:	78fb      	ldrb	r3, [r7, #3]
 800d742:	f003 020f 	and.w	r2, r3, #15
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d901      	bls.n	800d752 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	e042      	b.n	800d7d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d756:	2b00      	cmp	r3, #0
 800d758:	da0f      	bge.n	800d77a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	f003 020f 	and.w	r2, r3, #15
 800d760:	4613      	mov	r3, r2
 800d762:	00db      	lsls	r3, r3, #3
 800d764:	1a9b      	subs	r3, r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	3338      	adds	r3, #56	; 0x38
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	4413      	add	r3, r2
 800d76e:	3304      	adds	r3, #4
 800d770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2201      	movs	r2, #1
 800d776:	705a      	strb	r2, [r3, #1]
 800d778:	e00f      	b.n	800d79a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d77a:	78fb      	ldrb	r3, [r7, #3]
 800d77c:	f003 020f 	and.w	r2, r3, #15
 800d780:	4613      	mov	r3, r2
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	1a9b      	subs	r3, r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	4413      	add	r3, r2
 800d790:	3304      	adds	r3, #4
 800d792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2200      	movs	r2, #0
 800d79e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d7a0:	78fb      	ldrb	r3, [r7, #3]
 800d7a2:	f003 030f 	and.w	r3, r3, #15
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d101      	bne.n	800d7ba <HAL_PCD_EP_ClrStall+0x86>
 800d7b6:	2302      	movs	r3, #2
 800d7b8:	e00e      	b.n	800d7d8 <HAL_PCD_EP_ClrStall+0xa4>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68f9      	ldr	r1, [r7, #12]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f003 fc1a 	bl	8011002 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b08a      	sub	sp, #40	; 0x28
 800d7e4:	af02      	add	r7, sp, #8
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	1a9b      	subs	r3, r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	3338      	adds	r3, #56	; 0x38
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	4413      	add	r3, r2
 800d804:	3304      	adds	r3, #4
 800d806:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	699a      	ldr	r2, [r3, #24]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	695b      	ldr	r3, [r3, #20]
 800d810:	429a      	cmp	r2, r3
 800d812:	d901      	bls.n	800d818 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	e06c      	b.n	800d8f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	695a      	ldr	r2, [r3, #20]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	69fa      	ldr	r2, [r7, #28]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d902      	bls.n	800d834 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	3303      	adds	r3, #3
 800d838:	089b      	lsrs	r3, r3, #2
 800d83a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d83c:	e02b      	b.n	800d896 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	695a      	ldr	r2, [r3, #20]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	699b      	ldr	r3, [r3, #24]
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	689b      	ldr	r3, [r3, #8]
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	429a      	cmp	r2, r3
 800d852:	d902      	bls.n	800d85a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	3303      	adds	r3, #3
 800d85e:	089b      	lsrs	r3, r3, #2
 800d860:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68d9      	ldr	r1, [r3, #12]
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d872:	b2db      	uxtb	r3, r3
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	4603      	mov	r3, r0
 800d878:	6978      	ldr	r0, [r7, #20]
 800d87a:	f003 faf6 	bl	8010e6a <USB_WritePacket>

    ep->xfer_buff  += len;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	68da      	ldr	r2, [r3, #12]
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	441a      	add	r2, r3
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	699a      	ldr	r2, [r3, #24]
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	441a      	add	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	015a      	lsls	r2, r3, #5
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	4413      	add	r3, r2
 800d89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	69ba      	ldr	r2, [r7, #24]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d809      	bhi.n	800d8c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	699a      	ldr	r2, [r3, #24]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d203      	bcs.n	800d8c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	695b      	ldr	r3, [r3, #20]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1be      	bne.n	800d83e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	695a      	ldr	r2, [r3, #20]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	699b      	ldr	r3, [r3, #24]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d811      	bhi.n	800d8f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	f003 030f 	and.w	r3, r3, #15
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	43db      	mvns	r3, r3
 800d8e6:	6939      	ldr	r1, [r7, #16]
 800d8e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	333c      	adds	r3, #60	; 0x3c
 800d914:	3304      	adds	r3, #4
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	015a      	lsls	r2, r3, #5
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	4413      	add	r3, r2
 800d922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	691b      	ldr	r3, [r3, #16]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	f040 80a0 	bne.w	800da74 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	f003 0308 	and.w	r3, r3, #8
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d015      	beq.n	800d96a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	4a72      	ldr	r2, [pc, #456]	; (800db0c <PCD_EP_OutXfrComplete_int+0x210>)
 800d942:	4293      	cmp	r3, r2
 800d944:	f240 80dd 	bls.w	800db02 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f000 80d7 	beq.w	800db02 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d960:	461a      	mov	r2, r3
 800d962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d966:	6093      	str	r3, [r2, #8]
 800d968:	e0cb      	b.n	800db02 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	f003 0320 	and.w	r3, r3, #32
 800d970:	2b00      	cmp	r3, #0
 800d972:	d009      	beq.n	800d988 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	015a      	lsls	r2, r3, #5
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	4413      	add	r3, r2
 800d97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d980:	461a      	mov	r2, r3
 800d982:	2320      	movs	r3, #32
 800d984:	6093      	str	r3, [r2, #8]
 800d986:	e0bc      	b.n	800db02 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f040 80b7 	bne.w	800db02 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	4a5d      	ldr	r2, [pc, #372]	; (800db0c <PCD_EP_OutXfrComplete_int+0x210>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d90f      	bls.n	800d9bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00a      	beq.n	800d9bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	015a      	lsls	r2, r3, #5
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9b8:	6093      	str	r3, [r2, #8]
 800d9ba:	e0a2      	b.n	800db02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	683a      	ldr	r2, [r7, #0]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	1a9b      	subs	r3, r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	440b      	add	r3, r1
 800d9ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d9ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	0159      	lsls	r1, r3, #5
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	440b      	add	r3, r1
 800d9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d9e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	1a9b      	subs	r3, r3, r2
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	4403      	add	r3, r0
 800d9f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d9f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	00db      	lsls	r3, r3, #3
 800da00:	1a9b      	subs	r3, r3, r2
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	440b      	add	r3, r1
 800da06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800da0a:	6819      	ldr	r1, [r3, #0]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	4613      	mov	r3, r2
 800da12:	00db      	lsls	r3, r3, #3
 800da14:	1a9b      	subs	r3, r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4403      	add	r3, r0
 800da1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4419      	add	r1, r3
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	683a      	ldr	r2, [r7, #0]
 800da26:	4613      	mov	r3, r2
 800da28:	00db      	lsls	r3, r3, #3
 800da2a:	1a9b      	subs	r3, r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4403      	add	r3, r0
 800da30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800da34:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d114      	bne.n	800da66 <PCD_EP_OutXfrComplete_int+0x16a>
 800da3c:	6879      	ldr	r1, [r7, #4]
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	4613      	mov	r3, r2
 800da42:	00db      	lsls	r3, r3, #3
 800da44:	1a9b      	subs	r3, r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	440b      	add	r3, r1
 800da4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d108      	bne.n	800da66 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6818      	ldr	r0, [r3, #0]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800da5e:	461a      	mov	r2, r3
 800da60:	2101      	movs	r1, #1
 800da62:	f003 fc61 	bl	8011328 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	4619      	mov	r1, r3
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f008 fa57 	bl	8015f20 <HAL_PCD_DataOutStageCallback>
 800da72:	e046      	b.n	800db02 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	4a26      	ldr	r2, [pc, #152]	; (800db10 <PCD_EP_OutXfrComplete_int+0x214>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d124      	bne.n	800dac6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00a      	beq.n	800da9c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	015a      	lsls	r2, r3, #5
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	4413      	add	r3, r2
 800da8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da92:	461a      	mov	r2, r3
 800da94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da98:	6093      	str	r3, [r2, #8]
 800da9a:	e032      	b.n	800db02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	f003 0320 	and.w	r3, r3, #32
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d008      	beq.n	800dab8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	015a      	lsls	r2, r3, #5
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	4413      	add	r3, r2
 800daae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab2:	461a      	mov	r2, r3
 800dab4:	2320      	movs	r3, #32
 800dab6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f008 fa2e 	bl	8015f20 <HAL_PCD_DataOutStageCallback>
 800dac4:	e01d      	b.n	800db02 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d114      	bne.n	800daf6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800dacc:	6879      	ldr	r1, [r7, #4]
 800dace:	683a      	ldr	r2, [r7, #0]
 800dad0:	4613      	mov	r3, r2
 800dad2:	00db      	lsls	r3, r3, #3
 800dad4:	1a9b      	subs	r3, r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	440b      	add	r3, r1
 800dada:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d108      	bne.n	800daf6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6818      	ldr	r0, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800daee:	461a      	mov	r2, r3
 800daf0:	2100      	movs	r1, #0
 800daf2:	f003 fc19 	bl	8011328 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f008 fa0f 	bl	8015f20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3718      	adds	r7, #24
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	4f54300a 	.word	0x4f54300a
 800db10:	4f54310a 	.word	0x4f54310a

0800db14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	333c      	adds	r3, #60	; 0x3c
 800db2c:	3304      	adds	r3, #4
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	015a      	lsls	r2, r3, #5
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	4413      	add	r3, r2
 800db3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	4a15      	ldr	r2, [pc, #84]	; (800db9c <PCD_EP_OutSetupPacket_int+0x88>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d90e      	bls.n	800db68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800db50:	2b00      	cmp	r3, #0
 800db52:	d009      	beq.n	800db68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db60:	461a      	mov	r2, r3
 800db62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f008 f9c7 	bl	8015efc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	4a0a      	ldr	r2, [pc, #40]	; (800db9c <PCD_EP_OutSetupPacket_int+0x88>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d90c      	bls.n	800db90 <PCD_EP_OutSetupPacket_int+0x7c>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d108      	bne.n	800db90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6818      	ldr	r0, [r3, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800db88:	461a      	mov	r2, r3
 800db8a:	2101      	movs	r1, #1
 800db8c:	f003 fbcc 	bl	8011328 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3718      	adds	r7, #24
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	4f54300a 	.word	0x4f54300a

0800dba0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	70fb      	strb	r3, [r7, #3]
 800dbac:	4613      	mov	r3, r2
 800dbae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800dbb8:	78fb      	ldrb	r3, [r7, #3]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d107      	bne.n	800dbce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800dbbe:	883b      	ldrh	r3, [r7, #0]
 800dbc0:	0419      	lsls	r1, r3, #16
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	430a      	orrs	r2, r1
 800dbca:	629a      	str	r2, [r3, #40]	; 0x28
 800dbcc:	e028      	b.n	800dc20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd4:	0c1b      	lsrs	r3, r3, #16
 800dbd6:	68ba      	ldr	r2, [r7, #8]
 800dbd8:	4413      	add	r3, r2
 800dbda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	73fb      	strb	r3, [r7, #15]
 800dbe0:	e00d      	b.n	800dbfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
 800dbe8:	3340      	adds	r3, #64	; 0x40
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4413      	add	r3, r2
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	0c1b      	lsrs	r3, r3, #16
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	73fb      	strb	r3, [r7, #15]
 800dbfe:	7bfa      	ldrb	r2, [r7, #15]
 800dc00:	78fb      	ldrb	r3, [r7, #3]
 800dc02:	3b01      	subs	r3, #1
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d3ec      	bcc.n	800dbe2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800dc08:	883b      	ldrh	r3, [r7, #0]
 800dc0a:	0418      	lsls	r0, r3, #16
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6819      	ldr	r1, [r3, #0]
 800dc10:	78fb      	ldrb	r3, [r7, #3]
 800dc12:	3b01      	subs	r3, #1
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	4302      	orrs	r2, r0
 800dc18:	3340      	adds	r3, #64	; 0x40
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	440b      	add	r3, r1
 800dc1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800dc2e:	b480      	push	{r7}
 800dc30:	b083      	sub	sp, #12
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	460b      	mov	r3, r1
 800dc38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	887a      	ldrh	r2, [r7, #2]
 800dc40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	e25b      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0301 	and.w	r3, r3, #1
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d075      	beq.n	800dd72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dc86:	4ba3      	ldr	r3, [pc, #652]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	f003 030c 	and.w	r3, r3, #12
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	d00c      	beq.n	800dcac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dc92:	4ba0      	ldr	r3, [pc, #640]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dc9a:	2b08      	cmp	r3, #8
 800dc9c:	d112      	bne.n	800dcc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dc9e:	4b9d      	ldr	r3, [pc, #628]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcaa:	d10b      	bne.n	800dcc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dcac:	4b99      	ldr	r3, [pc, #612]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d05b      	beq.n	800dd70 <HAL_RCC_OscConfig+0x108>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d157      	bne.n	800dd70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e236      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dccc:	d106      	bne.n	800dcdc <HAL_RCC_OscConfig+0x74>
 800dcce:	4b91      	ldr	r3, [pc, #580]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a90      	ldr	r2, [pc, #576]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dcd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dcd8:	6013      	str	r3, [r2, #0]
 800dcda:	e01d      	b.n	800dd18 <HAL_RCC_OscConfig+0xb0>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dce4:	d10c      	bne.n	800dd00 <HAL_RCC_OscConfig+0x98>
 800dce6:	4b8b      	ldr	r3, [pc, #556]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a8a      	ldr	r2, [pc, #552]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dcec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dcf0:	6013      	str	r3, [r2, #0]
 800dcf2:	4b88      	ldr	r3, [pc, #544]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4a87      	ldr	r2, [pc, #540]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dcf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	e00b      	b.n	800dd18 <HAL_RCC_OscConfig+0xb0>
 800dd00:	4b84      	ldr	r3, [pc, #528]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a83      	ldr	r2, [pc, #524]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd0a:	6013      	str	r3, [r2, #0]
 800dd0c:	4b81      	ldr	r3, [pc, #516]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a80      	ldr	r2, [pc, #512]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d013      	beq.n	800dd48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd20:	f7fd ff60 	bl	800bbe4 <HAL_GetTick>
 800dd24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd26:	e008      	b.n	800dd3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dd28:	f7fd ff5c 	bl	800bbe4 <HAL_GetTick>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	2b64      	cmp	r3, #100	; 0x64
 800dd34:	d901      	bls.n	800dd3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dd36:	2303      	movs	r3, #3
 800dd38:	e1fb      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd3a:	4b76      	ldr	r3, [pc, #472]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d0f0      	beq.n	800dd28 <HAL_RCC_OscConfig+0xc0>
 800dd46:	e014      	b.n	800dd72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd48:	f7fd ff4c 	bl	800bbe4 <HAL_GetTick>
 800dd4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dd4e:	e008      	b.n	800dd62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dd50:	f7fd ff48 	bl	800bbe4 <HAL_GetTick>
 800dd54:	4602      	mov	r2, r0
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	2b64      	cmp	r3, #100	; 0x64
 800dd5c:	d901      	bls.n	800dd62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dd5e:	2303      	movs	r3, #3
 800dd60:	e1e7      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dd62:	4b6c      	ldr	r3, [pc, #432]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1f0      	bne.n	800dd50 <HAL_RCC_OscConfig+0xe8>
 800dd6e:	e000      	b.n	800dd72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f003 0302 	and.w	r3, r3, #2
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d063      	beq.n	800de46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dd7e:	4b65      	ldr	r3, [pc, #404]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	f003 030c 	and.w	r3, r3, #12
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00b      	beq.n	800dda2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dd8a:	4b62      	ldr	r3, [pc, #392]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dd92:	2b08      	cmp	r3, #8
 800dd94:	d11c      	bne.n	800ddd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dd96:	4b5f      	ldr	r3, [pc, #380]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d116      	bne.n	800ddd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dda2:	4b5c      	ldr	r3, [pc, #368]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f003 0302 	and.w	r3, r3, #2
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d005      	beq.n	800ddba <HAL_RCC_OscConfig+0x152>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d001      	beq.n	800ddba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e1bb      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddba:	4b56      	ldr	r3, [pc, #344]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	00db      	lsls	r3, r3, #3
 800ddc8:	4952      	ldr	r1, [pc, #328]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ddce:	e03a      	b.n	800de46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d020      	beq.n	800de1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ddd8:	4b4f      	ldr	r3, [pc, #316]	; (800df18 <HAL_RCC_OscConfig+0x2b0>)
 800ddda:	2201      	movs	r2, #1
 800dddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddde:	f7fd ff01 	bl	800bbe4 <HAL_GetTick>
 800dde2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dde4:	e008      	b.n	800ddf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dde6:	f7fd fefd 	bl	800bbe4 <HAL_GetTick>
 800ddea:	4602      	mov	r2, r0
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d901      	bls.n	800ddf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	e19c      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ddf8:	4b46      	ldr	r3, [pc, #280]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 0302 	and.w	r3, r3, #2
 800de00:	2b00      	cmp	r3, #0
 800de02:	d0f0      	beq.n	800dde6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de04:	4b43      	ldr	r3, [pc, #268]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	00db      	lsls	r3, r3, #3
 800de12:	4940      	ldr	r1, [pc, #256]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800de14:	4313      	orrs	r3, r2
 800de16:	600b      	str	r3, [r1, #0]
 800de18:	e015      	b.n	800de46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800de1a:	4b3f      	ldr	r3, [pc, #252]	; (800df18 <HAL_RCC_OscConfig+0x2b0>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de20:	f7fd fee0 	bl	800bbe4 <HAL_GetTick>
 800de24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de26:	e008      	b.n	800de3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800de28:	f7fd fedc 	bl	800bbe4 <HAL_GetTick>
 800de2c:	4602      	mov	r2, r0
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	2b02      	cmp	r3, #2
 800de34:	d901      	bls.n	800de3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800de36:	2303      	movs	r3, #3
 800de38:	e17b      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de3a:	4b36      	ldr	r3, [pc, #216]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f003 0302 	and.w	r3, r3, #2
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1f0      	bne.n	800de28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f003 0308 	and.w	r3, r3, #8
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d030      	beq.n	800deb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d016      	beq.n	800de88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800de5a:	4b30      	ldr	r3, [pc, #192]	; (800df1c <HAL_RCC_OscConfig+0x2b4>)
 800de5c:	2201      	movs	r2, #1
 800de5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de60:	f7fd fec0 	bl	800bbe4 <HAL_GetTick>
 800de64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de66:	e008      	b.n	800de7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800de68:	f7fd febc 	bl	800bbe4 <HAL_GetTick>
 800de6c:	4602      	mov	r2, r0
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	2b02      	cmp	r3, #2
 800de74:	d901      	bls.n	800de7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800de76:	2303      	movs	r3, #3
 800de78:	e15b      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de7a:	4b26      	ldr	r3, [pc, #152]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800de7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de7e:	f003 0302 	and.w	r3, r3, #2
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0f0      	beq.n	800de68 <HAL_RCC_OscConfig+0x200>
 800de86:	e015      	b.n	800deb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800de88:	4b24      	ldr	r3, [pc, #144]	; (800df1c <HAL_RCC_OscConfig+0x2b4>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800de8e:	f7fd fea9 	bl	800bbe4 <HAL_GetTick>
 800de92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800de94:	e008      	b.n	800dea8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800de96:	f7fd fea5 	bl	800bbe4 <HAL_GetTick>
 800de9a:	4602      	mov	r2, r0
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d901      	bls.n	800dea8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dea4:	2303      	movs	r3, #3
 800dea6:	e144      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dea8:	4b1a      	ldr	r3, [pc, #104]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800deaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deac:	f003 0302 	and.w	r3, r3, #2
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1f0      	bne.n	800de96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f003 0304 	and.w	r3, r3, #4
 800debc:	2b00      	cmp	r3, #0
 800debe:	f000 80a0 	beq.w	800e002 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dec2:	2300      	movs	r3, #0
 800dec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dec6:	4b13      	ldr	r3, [pc, #76]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10f      	bne.n	800def2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ded2:	2300      	movs	r3, #0
 800ded4:	60bb      	str	r3, [r7, #8]
 800ded6:	4b0f      	ldr	r3, [pc, #60]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800ded8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deda:	4a0e      	ldr	r2, [pc, #56]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dedc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dee0:	6413      	str	r3, [r2, #64]	; 0x40
 800dee2:	4b0c      	ldr	r3, [pc, #48]	; (800df14 <HAL_RCC_OscConfig+0x2ac>)
 800dee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800deea:	60bb      	str	r3, [r7, #8]
 800deec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800deee:	2301      	movs	r3, #1
 800def0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800def2:	4b0b      	ldr	r3, [pc, #44]	; (800df20 <HAL_RCC_OscConfig+0x2b8>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800defa:	2b00      	cmp	r3, #0
 800defc:	d121      	bne.n	800df42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800defe:	4b08      	ldr	r3, [pc, #32]	; (800df20 <HAL_RCC_OscConfig+0x2b8>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a07      	ldr	r2, [pc, #28]	; (800df20 <HAL_RCC_OscConfig+0x2b8>)
 800df04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800df0a:	f7fd fe6b 	bl	800bbe4 <HAL_GetTick>
 800df0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df10:	e011      	b.n	800df36 <HAL_RCC_OscConfig+0x2ce>
 800df12:	bf00      	nop
 800df14:	40023800 	.word	0x40023800
 800df18:	42470000 	.word	0x42470000
 800df1c:	42470e80 	.word	0x42470e80
 800df20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df24:	f7fd fe5e 	bl	800bbe4 <HAL_GetTick>
 800df28:	4602      	mov	r2, r0
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	1ad3      	subs	r3, r2, r3
 800df2e:	2b02      	cmp	r3, #2
 800df30:	d901      	bls.n	800df36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800df32:	2303      	movs	r3, #3
 800df34:	e0fd      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df36:	4b81      	ldr	r3, [pc, #516]	; (800e13c <HAL_RCC_OscConfig+0x4d4>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d0f0      	beq.n	800df24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d106      	bne.n	800df58 <HAL_RCC_OscConfig+0x2f0>
 800df4a:	4b7d      	ldr	r3, [pc, #500]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df4e:	4a7c      	ldr	r2, [pc, #496]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df50:	f043 0301 	orr.w	r3, r3, #1
 800df54:	6713      	str	r3, [r2, #112]	; 0x70
 800df56:	e01c      	b.n	800df92 <HAL_RCC_OscConfig+0x32a>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	2b05      	cmp	r3, #5
 800df5e:	d10c      	bne.n	800df7a <HAL_RCC_OscConfig+0x312>
 800df60:	4b77      	ldr	r3, [pc, #476]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df64:	4a76      	ldr	r2, [pc, #472]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df66:	f043 0304 	orr.w	r3, r3, #4
 800df6a:	6713      	str	r3, [r2, #112]	; 0x70
 800df6c:	4b74      	ldr	r3, [pc, #464]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df70:	4a73      	ldr	r2, [pc, #460]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df72:	f043 0301 	orr.w	r3, r3, #1
 800df76:	6713      	str	r3, [r2, #112]	; 0x70
 800df78:	e00b      	b.n	800df92 <HAL_RCC_OscConfig+0x32a>
 800df7a:	4b71      	ldr	r3, [pc, #452]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df7e:	4a70      	ldr	r2, [pc, #448]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df80:	f023 0301 	bic.w	r3, r3, #1
 800df84:	6713      	str	r3, [r2, #112]	; 0x70
 800df86:	4b6e      	ldr	r3, [pc, #440]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df8a:	4a6d      	ldr	r2, [pc, #436]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800df8c:	f023 0304 	bic.w	r3, r3, #4
 800df90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d015      	beq.n	800dfc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df9a:	f7fd fe23 	bl	800bbe4 <HAL_GetTick>
 800df9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dfa0:	e00a      	b.n	800dfb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dfa2:	f7fd fe1f 	bl	800bbe4 <HAL_GetTick>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d901      	bls.n	800dfb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e0bc      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dfb8:	4b61      	ldr	r3, [pc, #388]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800dfba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfbc:	f003 0302 	and.w	r3, r3, #2
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d0ee      	beq.n	800dfa2 <HAL_RCC_OscConfig+0x33a>
 800dfc4:	e014      	b.n	800dff0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dfc6:	f7fd fe0d 	bl	800bbe4 <HAL_GetTick>
 800dfca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dfcc:	e00a      	b.n	800dfe4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dfce:	f7fd fe09 	bl	800bbe4 <HAL_GetTick>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d901      	bls.n	800dfe4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800dfe0:	2303      	movs	r3, #3
 800dfe2:	e0a6      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dfe4:	4b56      	ldr	r3, [pc, #344]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800dfe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfe8:	f003 0302 	and.w	r3, r3, #2
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1ee      	bne.n	800dfce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dff0:	7dfb      	ldrb	r3, [r7, #23]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d105      	bne.n	800e002 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dff6:	4b52      	ldr	r3, [pc, #328]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800dff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffa:	4a51      	ldr	r2, [pc, #324]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800dffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e000:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	699b      	ldr	r3, [r3, #24]
 800e006:	2b00      	cmp	r3, #0
 800e008:	f000 8092 	beq.w	800e130 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e00c:	4b4c      	ldr	r3, [pc, #304]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f003 030c 	and.w	r3, r3, #12
 800e014:	2b08      	cmp	r3, #8
 800e016:	d05c      	beq.n	800e0d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d141      	bne.n	800e0a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e020:	4b48      	ldr	r3, [pc, #288]	; (800e144 <HAL_RCC_OscConfig+0x4dc>)
 800e022:	2200      	movs	r2, #0
 800e024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e026:	f7fd fddd 	bl	800bbe4 <HAL_GetTick>
 800e02a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e02c:	e008      	b.n	800e040 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e02e:	f7fd fdd9 	bl	800bbe4 <HAL_GetTick>
 800e032:	4602      	mov	r2, r0
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	2b02      	cmp	r3, #2
 800e03a:	d901      	bls.n	800e040 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e03c:	2303      	movs	r3, #3
 800e03e:	e078      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e040:	4b3f      	ldr	r3, [pc, #252]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1f0      	bne.n	800e02e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	69da      	ldr	r2, [r3, #28]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a1b      	ldr	r3, [r3, #32]
 800e054:	431a      	orrs	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05a:	019b      	lsls	r3, r3, #6
 800e05c:	431a      	orrs	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e062:	085b      	lsrs	r3, r3, #1
 800e064:	3b01      	subs	r3, #1
 800e066:	041b      	lsls	r3, r3, #16
 800e068:	431a      	orrs	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06e:	061b      	lsls	r3, r3, #24
 800e070:	4933      	ldr	r1, [pc, #204]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800e072:	4313      	orrs	r3, r2
 800e074:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e076:	4b33      	ldr	r3, [pc, #204]	; (800e144 <HAL_RCC_OscConfig+0x4dc>)
 800e078:	2201      	movs	r2, #1
 800e07a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e07c:	f7fd fdb2 	bl	800bbe4 <HAL_GetTick>
 800e080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e082:	e008      	b.n	800e096 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e084:	f7fd fdae 	bl	800bbe4 <HAL_GetTick>
 800e088:	4602      	mov	r2, r0
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	1ad3      	subs	r3, r2, r3
 800e08e:	2b02      	cmp	r3, #2
 800e090:	d901      	bls.n	800e096 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e092:	2303      	movs	r3, #3
 800e094:	e04d      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e096:	4b2a      	ldr	r3, [pc, #168]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0f0      	beq.n	800e084 <HAL_RCC_OscConfig+0x41c>
 800e0a2:	e045      	b.n	800e130 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e0a4:	4b27      	ldr	r3, [pc, #156]	; (800e144 <HAL_RCC_OscConfig+0x4dc>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0aa:	f7fd fd9b 	bl	800bbe4 <HAL_GetTick>
 800e0ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e0b0:	e008      	b.n	800e0c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e0b2:	f7fd fd97 	bl	800bbe4 <HAL_GetTick>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	d901      	bls.n	800e0c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e0c0:	2303      	movs	r3, #3
 800e0c2:	e036      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e0c4:	4b1e      	ldr	r3, [pc, #120]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1f0      	bne.n	800e0b2 <HAL_RCC_OscConfig+0x44a>
 800e0d0:	e02e      	b.n	800e130 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	699b      	ldr	r3, [r3, #24]
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d101      	bne.n	800e0de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e029      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e0de:	4b18      	ldr	r3, [pc, #96]	; (800e140 <HAL_RCC_OscConfig+0x4d8>)
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	69db      	ldr	r3, [r3, #28]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d11c      	bne.n	800e12c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d115      	bne.n	800e12c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e106:	4013      	ands	r3, r2
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d10d      	bne.n	800e12c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d106      	bne.n	800e12c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e128:	429a      	cmp	r2, r3
 800e12a:	d001      	beq.n	800e130 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800e12c:	2301      	movs	r3, #1
 800e12e:	e000      	b.n	800e132 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3718      	adds	r7, #24
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	40007000 	.word	0x40007000
 800e140:	40023800 	.word	0x40023800
 800e144:	42470060 	.word	0x42470060

0800e148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d101      	bne.n	800e15c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e158:	2301      	movs	r3, #1
 800e15a:	e0cc      	b.n	800e2f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e15c:	4b68      	ldr	r3, [pc, #416]	; (800e300 <HAL_RCC_ClockConfig+0x1b8>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f003 030f 	and.w	r3, r3, #15
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	429a      	cmp	r2, r3
 800e168:	d90c      	bls.n	800e184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e16a:	4b65      	ldr	r3, [pc, #404]	; (800e300 <HAL_RCC_ClockConfig+0x1b8>)
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	b2d2      	uxtb	r2, r2
 800e170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e172:	4b63      	ldr	r3, [pc, #396]	; (800e300 <HAL_RCC_ClockConfig+0x1b8>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f003 030f 	and.w	r3, r3, #15
 800e17a:	683a      	ldr	r2, [r7, #0]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d001      	beq.n	800e184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	e0b8      	b.n	800e2f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f003 0302 	and.w	r3, r3, #2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d020      	beq.n	800e1d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f003 0304 	and.w	r3, r3, #4
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d005      	beq.n	800e1a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e19c:	4b59      	ldr	r3, [pc, #356]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	4a58      	ldr	r2, [pc, #352]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e1a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e1a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f003 0308 	and.w	r3, r3, #8
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d005      	beq.n	800e1c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e1b4:	4b53      	ldr	r3, [pc, #332]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	4a52      	ldr	r2, [pc, #328]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e1ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e1be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1c0:	4b50      	ldr	r3, [pc, #320]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	494d      	ldr	r1, [pc, #308]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 0301 	and.w	r3, r3, #1
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d044      	beq.n	800e268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d107      	bne.n	800e1f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e1e6:	4b47      	ldr	r3, [pc, #284]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d119      	bne.n	800e226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e07f      	b.n	800e2f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	d003      	beq.n	800e206 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e202:	2b03      	cmp	r3, #3
 800e204:	d107      	bne.n	800e216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e206:	4b3f      	ldr	r3, [pc, #252]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d109      	bne.n	800e226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	e06f      	b.n	800e2f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e216:	4b3b      	ldr	r3, [pc, #236]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f003 0302 	and.w	r3, r3, #2
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	e067      	b.n	800e2f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e226:	4b37      	ldr	r3, [pc, #220]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	f023 0203 	bic.w	r2, r3, #3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	4934      	ldr	r1, [pc, #208]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e234:	4313      	orrs	r3, r2
 800e236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e238:	f7fd fcd4 	bl	800bbe4 <HAL_GetTick>
 800e23c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e23e:	e00a      	b.n	800e256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e240:	f7fd fcd0 	bl	800bbe4 <HAL_GetTick>
 800e244:	4602      	mov	r2, r0
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e24e:	4293      	cmp	r3, r2
 800e250:	d901      	bls.n	800e256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e252:	2303      	movs	r3, #3
 800e254:	e04f      	b.n	800e2f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e256:	4b2b      	ldr	r3, [pc, #172]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	f003 020c 	and.w	r2, r3, #12
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	429a      	cmp	r2, r3
 800e266:	d1eb      	bne.n	800e240 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e268:	4b25      	ldr	r3, [pc, #148]	; (800e300 <HAL_RCC_ClockConfig+0x1b8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 030f 	and.w	r3, r3, #15
 800e270:	683a      	ldr	r2, [r7, #0]
 800e272:	429a      	cmp	r2, r3
 800e274:	d20c      	bcs.n	800e290 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e276:	4b22      	ldr	r3, [pc, #136]	; (800e300 <HAL_RCC_ClockConfig+0x1b8>)
 800e278:	683a      	ldr	r2, [r7, #0]
 800e27a:	b2d2      	uxtb	r2, r2
 800e27c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e27e:	4b20      	ldr	r3, [pc, #128]	; (800e300 <HAL_RCC_ClockConfig+0x1b8>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f003 030f 	and.w	r3, r3, #15
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d001      	beq.n	800e290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	e032      	b.n	800e2f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f003 0304 	and.w	r3, r3, #4
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d008      	beq.n	800e2ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e29c:	4b19      	ldr	r3, [pc, #100]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	4916      	ldr	r1, [pc, #88]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f003 0308 	and.w	r3, r3, #8
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d009      	beq.n	800e2ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e2ba:	4b12      	ldr	r3, [pc, #72]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	00db      	lsls	r3, r3, #3
 800e2c8:	490e      	ldr	r1, [pc, #56]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e2ce:	f000 f821 	bl	800e314 <HAL_RCC_GetSysClockFreq>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	4b0b      	ldr	r3, [pc, #44]	; (800e304 <HAL_RCC_ClockConfig+0x1bc>)
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	091b      	lsrs	r3, r3, #4
 800e2da:	f003 030f 	and.w	r3, r3, #15
 800e2de:	490a      	ldr	r1, [pc, #40]	; (800e308 <HAL_RCC_ClockConfig+0x1c0>)
 800e2e0:	5ccb      	ldrb	r3, [r1, r3]
 800e2e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e2e6:	4a09      	ldr	r2, [pc, #36]	; (800e30c <HAL_RCC_ClockConfig+0x1c4>)
 800e2e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e2ea:	4b09      	ldr	r3, [pc, #36]	; (800e310 <HAL_RCC_ClockConfig+0x1c8>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fd f8ee 	bl	800b4d0 <HAL_InitTick>

  return HAL_OK;
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	40023c00 	.word	0x40023c00
 800e304:	40023800 	.word	0x40023800
 800e308:	0801ca40 	.word	0x0801ca40
 800e30c:	2000408c 	.word	0x2000408c
 800e310:	20004090 	.word	0x20004090

0800e314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e314:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e318:	b084      	sub	sp, #16
 800e31a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e31c:	2300      	movs	r3, #0
 800e31e:	607b      	str	r3, [r7, #4]
 800e320:	2300      	movs	r3, #0
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	2300      	movs	r3, #0
 800e326:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e328:	2300      	movs	r3, #0
 800e32a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e32c:	4b67      	ldr	r3, [pc, #412]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	f003 030c 	and.w	r3, r3, #12
 800e334:	2b08      	cmp	r3, #8
 800e336:	d00d      	beq.n	800e354 <HAL_RCC_GetSysClockFreq+0x40>
 800e338:	2b08      	cmp	r3, #8
 800e33a:	f200 80bd 	bhi.w	800e4b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d002      	beq.n	800e348 <HAL_RCC_GetSysClockFreq+0x34>
 800e342:	2b04      	cmp	r3, #4
 800e344:	d003      	beq.n	800e34e <HAL_RCC_GetSysClockFreq+0x3a>
 800e346:	e0b7      	b.n	800e4b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e348:	4b61      	ldr	r3, [pc, #388]	; (800e4d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e34a:	60bb      	str	r3, [r7, #8]
       break;
 800e34c:	e0b7      	b.n	800e4be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e34e:	4b61      	ldr	r3, [pc, #388]	; (800e4d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800e350:	60bb      	str	r3, [r7, #8]
      break;
 800e352:	e0b4      	b.n	800e4be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e354:	4b5d      	ldr	r3, [pc, #372]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e35c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e35e:	4b5b      	ldr	r3, [pc, #364]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e366:	2b00      	cmp	r3, #0
 800e368:	d04d      	beq.n	800e406 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e36a:	4b58      	ldr	r3, [pc, #352]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	099b      	lsrs	r3, r3, #6
 800e370:	461a      	mov	r2, r3
 800e372:	f04f 0300 	mov.w	r3, #0
 800e376:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e37a:	f04f 0100 	mov.w	r1, #0
 800e37e:	ea02 0800 	and.w	r8, r2, r0
 800e382:	ea03 0901 	and.w	r9, r3, r1
 800e386:	4640      	mov	r0, r8
 800e388:	4649      	mov	r1, r9
 800e38a:	f04f 0200 	mov.w	r2, #0
 800e38e:	f04f 0300 	mov.w	r3, #0
 800e392:	014b      	lsls	r3, r1, #5
 800e394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e398:	0142      	lsls	r2, r0, #5
 800e39a:	4610      	mov	r0, r2
 800e39c:	4619      	mov	r1, r3
 800e39e:	ebb0 0008 	subs.w	r0, r0, r8
 800e3a2:	eb61 0109 	sbc.w	r1, r1, r9
 800e3a6:	f04f 0200 	mov.w	r2, #0
 800e3aa:	f04f 0300 	mov.w	r3, #0
 800e3ae:	018b      	lsls	r3, r1, #6
 800e3b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e3b4:	0182      	lsls	r2, r0, #6
 800e3b6:	1a12      	subs	r2, r2, r0
 800e3b8:	eb63 0301 	sbc.w	r3, r3, r1
 800e3bc:	f04f 0000 	mov.w	r0, #0
 800e3c0:	f04f 0100 	mov.w	r1, #0
 800e3c4:	00d9      	lsls	r1, r3, #3
 800e3c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e3ca:	00d0      	lsls	r0, r2, #3
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	eb12 0208 	adds.w	r2, r2, r8
 800e3d4:	eb43 0309 	adc.w	r3, r3, r9
 800e3d8:	f04f 0000 	mov.w	r0, #0
 800e3dc:	f04f 0100 	mov.w	r1, #0
 800e3e0:	0259      	lsls	r1, r3, #9
 800e3e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e3e6:	0250      	lsls	r0, r2, #9
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	4610      	mov	r0, r2
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	f04f 0300 	mov.w	r3, #0
 800e3f8:	f7f2 fc46 	bl	8000c88 <__aeabi_uldivmod>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	4613      	mov	r3, r2
 800e402:	60fb      	str	r3, [r7, #12]
 800e404:	e04a      	b.n	800e49c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e406:	4b31      	ldr	r3, [pc, #196]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	099b      	lsrs	r3, r3, #6
 800e40c:	461a      	mov	r2, r3
 800e40e:	f04f 0300 	mov.w	r3, #0
 800e412:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e416:	f04f 0100 	mov.w	r1, #0
 800e41a:	ea02 0400 	and.w	r4, r2, r0
 800e41e:	ea03 0501 	and.w	r5, r3, r1
 800e422:	4620      	mov	r0, r4
 800e424:	4629      	mov	r1, r5
 800e426:	f04f 0200 	mov.w	r2, #0
 800e42a:	f04f 0300 	mov.w	r3, #0
 800e42e:	014b      	lsls	r3, r1, #5
 800e430:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e434:	0142      	lsls	r2, r0, #5
 800e436:	4610      	mov	r0, r2
 800e438:	4619      	mov	r1, r3
 800e43a:	1b00      	subs	r0, r0, r4
 800e43c:	eb61 0105 	sbc.w	r1, r1, r5
 800e440:	f04f 0200 	mov.w	r2, #0
 800e444:	f04f 0300 	mov.w	r3, #0
 800e448:	018b      	lsls	r3, r1, #6
 800e44a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e44e:	0182      	lsls	r2, r0, #6
 800e450:	1a12      	subs	r2, r2, r0
 800e452:	eb63 0301 	sbc.w	r3, r3, r1
 800e456:	f04f 0000 	mov.w	r0, #0
 800e45a:	f04f 0100 	mov.w	r1, #0
 800e45e:	00d9      	lsls	r1, r3, #3
 800e460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e464:	00d0      	lsls	r0, r2, #3
 800e466:	4602      	mov	r2, r0
 800e468:	460b      	mov	r3, r1
 800e46a:	1912      	adds	r2, r2, r4
 800e46c:	eb45 0303 	adc.w	r3, r5, r3
 800e470:	f04f 0000 	mov.w	r0, #0
 800e474:	f04f 0100 	mov.w	r1, #0
 800e478:	0299      	lsls	r1, r3, #10
 800e47a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e47e:	0290      	lsls	r0, r2, #10
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	4610      	mov	r0, r2
 800e486:	4619      	mov	r1, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	461a      	mov	r2, r3
 800e48c:	f04f 0300 	mov.w	r3, #0
 800e490:	f7f2 fbfa 	bl	8000c88 <__aeabi_uldivmod>
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	4613      	mov	r3, r2
 800e49a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e49c:	4b0b      	ldr	r3, [pc, #44]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	0c1b      	lsrs	r3, r3, #16
 800e4a2:	f003 0303 	and.w	r3, r3, #3
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4b4:	60bb      	str	r3, [r7, #8]
      break;
 800e4b6:	e002      	b.n	800e4be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e4b8:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e4ba:	60bb      	str	r3, [r7, #8]
      break;
 800e4bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e4be:	68bb      	ldr	r3, [r7, #8]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e4ca:	bf00      	nop
 800e4cc:	40023800 	.word	0x40023800
 800e4d0:	00f42400 	.word	0x00f42400
 800e4d4:	007a1200 	.word	0x007a1200

0800e4d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e4dc:	4b03      	ldr	r3, [pc, #12]	; (800e4ec <HAL_RCC_GetHCLKFreq+0x14>)
 800e4de:	681b      	ldr	r3, [r3, #0]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	2000408c 	.word	0x2000408c

0800e4f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e4f4:	f7ff fff0 	bl	800e4d8 <HAL_RCC_GetHCLKFreq>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	4b05      	ldr	r3, [pc, #20]	; (800e510 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	0a9b      	lsrs	r3, r3, #10
 800e500:	f003 0307 	and.w	r3, r3, #7
 800e504:	4903      	ldr	r1, [pc, #12]	; (800e514 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e506:	5ccb      	ldrb	r3, [r1, r3]
 800e508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	40023800 	.word	0x40023800
 800e514:	0801ca50 	.word	0x0801ca50

0800e518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e51c:	f7ff ffdc 	bl	800e4d8 <HAL_RCC_GetHCLKFreq>
 800e520:	4602      	mov	r2, r0
 800e522:	4b05      	ldr	r3, [pc, #20]	; (800e538 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	0b5b      	lsrs	r3, r3, #13
 800e528:	f003 0307 	and.w	r3, r3, #7
 800e52c:	4903      	ldr	r1, [pc, #12]	; (800e53c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e52e:	5ccb      	ldrb	r3, [r1, r3]
 800e530:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e534:	4618      	mov	r0, r3
 800e536:	bd80      	pop	{r7, pc}
 800e538:	40023800 	.word	0x40023800
 800e53c:	0801ca50 	.word	0x0801ca50

0800e540 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	220f      	movs	r2, #15
 800e54e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e550:	4b12      	ldr	r3, [pc, #72]	; (800e59c <HAL_RCC_GetClockConfig+0x5c>)
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	f003 0203 	and.w	r2, r3, #3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e55c:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <HAL_RCC_GetClockConfig+0x5c>)
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e568:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <HAL_RCC_GetClockConfig+0x5c>)
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e574:	4b09      	ldr	r3, [pc, #36]	; (800e59c <HAL_RCC_GetClockConfig+0x5c>)
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	08db      	lsrs	r3, r3, #3
 800e57a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e582:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <HAL_RCC_GetClockConfig+0x60>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f003 020f 	and.w	r2, r3, #15
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	601a      	str	r2, [r3, #0]
}
 800e58e:	bf00      	nop
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	40023800 	.word	0x40023800
 800e5a0:	40023c00 	.word	0x40023c00

0800e5a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d101      	bne.n	800e5b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e01d      	b.n	800e5f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d106      	bne.n	800e5d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7fd f99a 	bl	800b904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	f000 fa46 	bl	800ea74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e5fa:	b480      	push	{r7}
 800e5fc:	b085      	sub	sp, #20
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2202      	movs	r2, #2
 800e606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	f003 0307 	and.w	r3, r3, #7
 800e614:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2b06      	cmp	r3, #6
 800e61a:	d007      	beq.n	800e62c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f042 0201 	orr.w	r2, r2, #1
 800e62a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3714      	adds	r7, #20
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr

0800e642 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e642:	b480      	push	{r7}
 800e644:	b085      	sub	sp, #20
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68da      	ldr	r2, [r3, #12]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f042 0201 	orr.w	r2, r2, #1
 800e658:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	f003 0307 	and.w	r3, r3, #7
 800e664:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b06      	cmp	r3, #6
 800e66a:	d007      	beq.n	800e67c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f042 0201 	orr.w	r2, r2, #1
 800e67a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3714      	adds	r7, #20
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b082      	sub	sp, #8
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	f003 0302 	and.w	r3, r3, #2
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	d122      	bne.n	800e6e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	f003 0302 	and.w	r3, r3, #2
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d11b      	bne.n	800e6e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f06f 0202 	mvn.w	r2, #2
 800e6b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	f003 0303 	and.w	r3, r3, #3
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d003      	beq.n	800e6d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f9b2 	bl	800ea36 <HAL_TIM_IC_CaptureCallback>
 800e6d2:	e005      	b.n	800e6e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f9a4 	bl	800ea22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 f9b5 	bl	800ea4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	691b      	ldr	r3, [r3, #16]
 800e6ec:	f003 0304 	and.w	r3, r3, #4
 800e6f0:	2b04      	cmp	r3, #4
 800e6f2:	d122      	bne.n	800e73a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	f003 0304 	and.w	r3, r3, #4
 800e6fe:	2b04      	cmp	r3, #4
 800e700:	d11b      	bne.n	800e73a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f06f 0204 	mvn.w	r2, #4
 800e70a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2202      	movs	r2, #2
 800e710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	699b      	ldr	r3, [r3, #24]
 800e718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d003      	beq.n	800e728 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f988 	bl	800ea36 <HAL_TIM_IC_CaptureCallback>
 800e726:	e005      	b.n	800e734 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f97a 	bl	800ea22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f98b 	bl	800ea4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	691b      	ldr	r3, [r3, #16]
 800e740:	f003 0308 	and.w	r3, r3, #8
 800e744:	2b08      	cmp	r3, #8
 800e746:	d122      	bne.n	800e78e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	f003 0308 	and.w	r3, r3, #8
 800e752:	2b08      	cmp	r3, #8
 800e754:	d11b      	bne.n	800e78e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f06f 0208 	mvn.w	r2, #8
 800e75e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2204      	movs	r2, #4
 800e764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	69db      	ldr	r3, [r3, #28]
 800e76c:	f003 0303 	and.w	r3, r3, #3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 f95e 	bl	800ea36 <HAL_TIM_IC_CaptureCallback>
 800e77a:	e005      	b.n	800e788 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f950 	bl	800ea22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 f961 	bl	800ea4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	691b      	ldr	r3, [r3, #16]
 800e794:	f003 0310 	and.w	r3, r3, #16
 800e798:	2b10      	cmp	r3, #16
 800e79a:	d122      	bne.n	800e7e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	f003 0310 	and.w	r3, r3, #16
 800e7a6:	2b10      	cmp	r3, #16
 800e7a8:	d11b      	bne.n	800e7e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f06f 0210 	mvn.w	r2, #16
 800e7b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2208      	movs	r2, #8
 800e7b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	69db      	ldr	r3, [r3, #28]
 800e7c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d003      	beq.n	800e7d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 f934 	bl	800ea36 <HAL_TIM_IC_CaptureCallback>
 800e7ce:	e005      	b.n	800e7dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f926 	bl	800ea22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f937 	bl	800ea4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	691b      	ldr	r3, [r3, #16]
 800e7e8:	f003 0301 	and.w	r3, r3, #1
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d10e      	bne.n	800e80e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d107      	bne.n	800e80e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f06f 0201 	mvn.w	r2, #1
 800e806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7f7 f9c1 	bl	8005b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	691b      	ldr	r3, [r3, #16]
 800e814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e818:	2b80      	cmp	r3, #128	; 0x80
 800e81a:	d10e      	bne.n	800e83a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e826:	2b80      	cmp	r3, #128	; 0x80
 800e828:	d107      	bne.n	800e83a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 fadd 	bl	800edf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e844:	2b40      	cmp	r3, #64	; 0x40
 800e846:	d10e      	bne.n	800e866 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e852:	2b40      	cmp	r3, #64	; 0x40
 800e854:	d107      	bne.n	800e866 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 f8fc 	bl	800ea5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	f003 0320 	and.w	r3, r3, #32
 800e870:	2b20      	cmp	r3, #32
 800e872:	d10e      	bne.n	800e892 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	f003 0320 	and.w	r3, r3, #32
 800e87e:	2b20      	cmp	r3, #32
 800e880:	d107      	bne.n	800e892 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f06f 0220 	mvn.w	r2, #32
 800e88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 faa7 	bl	800ede0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b084      	sub	sp, #16
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
 800e8a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d101      	bne.n	800e8b2 <HAL_TIM_ConfigClockSource+0x18>
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	e0b3      	b.n	800ea1a <HAL_TIM_ConfigClockSource+0x180>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2202      	movs	r2, #2
 800e8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e8d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8d8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8ea:	d03e      	beq.n	800e96a <HAL_TIM_ConfigClockSource+0xd0>
 800e8ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8f0:	f200 8087 	bhi.w	800ea02 <HAL_TIM_ConfigClockSource+0x168>
 800e8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8f8:	f000 8085 	beq.w	800ea06 <HAL_TIM_ConfigClockSource+0x16c>
 800e8fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e900:	d87f      	bhi.n	800ea02 <HAL_TIM_ConfigClockSource+0x168>
 800e902:	2b70      	cmp	r3, #112	; 0x70
 800e904:	d01a      	beq.n	800e93c <HAL_TIM_ConfigClockSource+0xa2>
 800e906:	2b70      	cmp	r3, #112	; 0x70
 800e908:	d87b      	bhi.n	800ea02 <HAL_TIM_ConfigClockSource+0x168>
 800e90a:	2b60      	cmp	r3, #96	; 0x60
 800e90c:	d050      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x116>
 800e90e:	2b60      	cmp	r3, #96	; 0x60
 800e910:	d877      	bhi.n	800ea02 <HAL_TIM_ConfigClockSource+0x168>
 800e912:	2b50      	cmp	r3, #80	; 0x50
 800e914:	d03c      	beq.n	800e990 <HAL_TIM_ConfigClockSource+0xf6>
 800e916:	2b50      	cmp	r3, #80	; 0x50
 800e918:	d873      	bhi.n	800ea02 <HAL_TIM_ConfigClockSource+0x168>
 800e91a:	2b40      	cmp	r3, #64	; 0x40
 800e91c:	d058      	beq.n	800e9d0 <HAL_TIM_ConfigClockSource+0x136>
 800e91e:	2b40      	cmp	r3, #64	; 0x40
 800e920:	d86f      	bhi.n	800ea02 <HAL_TIM_ConfigClockSource+0x168>
 800e922:	2b30      	cmp	r3, #48	; 0x30
 800e924:	d064      	beq.n	800e9f0 <HAL_TIM_ConfigClockSource+0x156>
 800e926:	2b30      	cmp	r3, #48	; 0x30
 800e928:	d86b      	bhi.n	800ea02 <HAL_TIM_ConfigClockSource+0x168>
 800e92a:	2b20      	cmp	r3, #32
 800e92c:	d060      	beq.n	800e9f0 <HAL_TIM_ConfigClockSource+0x156>
 800e92e:	2b20      	cmp	r3, #32
 800e930:	d867      	bhi.n	800ea02 <HAL_TIM_ConfigClockSource+0x168>
 800e932:	2b00      	cmp	r3, #0
 800e934:	d05c      	beq.n	800e9f0 <HAL_TIM_ConfigClockSource+0x156>
 800e936:	2b10      	cmp	r3, #16
 800e938:	d05a      	beq.n	800e9f0 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e93a:	e062      	b.n	800ea02 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6818      	ldr	r0, [r3, #0]
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	6899      	ldr	r1, [r3, #8]
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	685a      	ldr	r2, [r3, #4]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	f000 f9ac 	bl	800eca8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e95e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	609a      	str	r2, [r3, #8]
      break;
 800e968:	e04e      	b.n	800ea08 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6818      	ldr	r0, [r3, #0]
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	6899      	ldr	r1, [r3, #8]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	f000 f995 	bl	800eca8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	689a      	ldr	r2, [r3, #8]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e98c:	609a      	str	r2, [r3, #8]
      break;
 800e98e:	e03b      	b.n	800ea08 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6818      	ldr	r0, [r3, #0]
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	6859      	ldr	r1, [r3, #4]
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	461a      	mov	r2, r3
 800e99e:	f000 f909 	bl	800ebb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2150      	movs	r1, #80	; 0x50
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f000 f962 	bl	800ec72 <TIM_ITRx_SetConfig>
      break;
 800e9ae:	e02b      	b.n	800ea08 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6818      	ldr	r0, [r3, #0]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	6859      	ldr	r1, [r3, #4]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	f000 f928 	bl	800ec12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2160      	movs	r1, #96	; 0x60
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f000 f952 	bl	800ec72 <TIM_ITRx_SetConfig>
      break;
 800e9ce:	e01b      	b.n	800ea08 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6818      	ldr	r0, [r3, #0]
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	6859      	ldr	r1, [r3, #4]
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	461a      	mov	r2, r3
 800e9de:	f000 f8e9 	bl	800ebb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2140      	movs	r1, #64	; 0x40
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 f942 	bl	800ec72 <TIM_ITRx_SetConfig>
      break;
 800e9ee:	e00b      	b.n	800ea08 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	f000 f939 	bl	800ec72 <TIM_ITRx_SetConfig>
      break;
 800ea00:	e002      	b.n	800ea08 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ea02:	bf00      	nop
 800ea04:	e000      	b.n	800ea08 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ea06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea22:	b480      	push	{r7}
 800ea24:	b083      	sub	sp, #12
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ea2a:	bf00      	nop
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ea36:	b480      	push	{r7}
 800ea38:	b083      	sub	sp, #12
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ea3e:	bf00      	nop
 800ea40:	370c      	adds	r7, #12
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	b083      	sub	sp, #12
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ea52:	bf00      	nop
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b083      	sub	sp, #12
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea66:	bf00      	nop
 800ea68:	370c      	adds	r7, #12
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
	...

0800ea74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a40      	ldr	r2, [pc, #256]	; (800eb88 <TIM_Base_SetConfig+0x114>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d013      	beq.n	800eab4 <TIM_Base_SetConfig+0x40>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea92:	d00f      	beq.n	800eab4 <TIM_Base_SetConfig+0x40>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	4a3d      	ldr	r2, [pc, #244]	; (800eb8c <TIM_Base_SetConfig+0x118>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d00b      	beq.n	800eab4 <TIM_Base_SetConfig+0x40>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	4a3c      	ldr	r2, [pc, #240]	; (800eb90 <TIM_Base_SetConfig+0x11c>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d007      	beq.n	800eab4 <TIM_Base_SetConfig+0x40>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4a3b      	ldr	r2, [pc, #236]	; (800eb94 <TIM_Base_SetConfig+0x120>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d003      	beq.n	800eab4 <TIM_Base_SetConfig+0x40>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a3a      	ldr	r2, [pc, #232]	; (800eb98 <TIM_Base_SetConfig+0x124>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d108      	bne.n	800eac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eaba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	4313      	orrs	r3, r2
 800eac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a2f      	ldr	r2, [pc, #188]	; (800eb88 <TIM_Base_SetConfig+0x114>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d02b      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ead4:	d027      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a2c      	ldr	r2, [pc, #176]	; (800eb8c <TIM_Base_SetConfig+0x118>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d023      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4a2b      	ldr	r2, [pc, #172]	; (800eb90 <TIM_Base_SetConfig+0x11c>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d01f      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4a2a      	ldr	r2, [pc, #168]	; (800eb94 <TIM_Base_SetConfig+0x120>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d01b      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a29      	ldr	r2, [pc, #164]	; (800eb98 <TIM_Base_SetConfig+0x124>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d017      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a28      	ldr	r2, [pc, #160]	; (800eb9c <TIM_Base_SetConfig+0x128>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d013      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4a27      	ldr	r2, [pc, #156]	; (800eba0 <TIM_Base_SetConfig+0x12c>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d00f      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4a26      	ldr	r2, [pc, #152]	; (800eba4 <TIM_Base_SetConfig+0x130>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d00b      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4a25      	ldr	r2, [pc, #148]	; (800eba8 <TIM_Base_SetConfig+0x134>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d007      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a24      	ldr	r2, [pc, #144]	; (800ebac <TIM_Base_SetConfig+0x138>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d003      	beq.n	800eb26 <TIM_Base_SetConfig+0xb2>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4a23      	ldr	r2, [pc, #140]	; (800ebb0 <TIM_Base_SetConfig+0x13c>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d108      	bne.n	800eb38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	4313      	orrs	r3, r2
 800eb36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	4313      	orrs	r3, r2
 800eb44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	689a      	ldr	r2, [r3, #8]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a0a      	ldr	r2, [pc, #40]	; (800eb88 <TIM_Base_SetConfig+0x114>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d003      	beq.n	800eb6c <TIM_Base_SetConfig+0xf8>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4a0c      	ldr	r2, [pc, #48]	; (800eb98 <TIM_Base_SetConfig+0x124>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d103      	bne.n	800eb74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	691a      	ldr	r2, [r3, #16]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2201      	movs	r2, #1
 800eb78:	615a      	str	r2, [r3, #20]
}
 800eb7a:	bf00      	nop
 800eb7c:	3714      	adds	r7, #20
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop
 800eb88:	40010000 	.word	0x40010000
 800eb8c:	40000400 	.word	0x40000400
 800eb90:	40000800 	.word	0x40000800
 800eb94:	40000c00 	.word	0x40000c00
 800eb98:	40010400 	.word	0x40010400
 800eb9c:	40014000 	.word	0x40014000
 800eba0:	40014400 	.word	0x40014400
 800eba4:	40014800 	.word	0x40014800
 800eba8:	40001800 	.word	0x40001800
 800ebac:	40001c00 	.word	0x40001c00
 800ebb0:	40002000 	.word	0x40002000

0800ebb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b087      	sub	sp, #28
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6a1b      	ldr	r3, [r3, #32]
 800ebca:	f023 0201 	bic.w	r2, r3, #1
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	699b      	ldr	r3, [r3, #24]
 800ebd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ebde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	011b      	lsls	r3, r3, #4
 800ebe4:	693a      	ldr	r2, [r7, #16]
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	f023 030a 	bic.w	r3, r3, #10
 800ebf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ebf2:	697a      	ldr	r2, [r7, #20]
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	693a      	ldr	r2, [r7, #16]
 800ebfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	697a      	ldr	r2, [r7, #20]
 800ec04:	621a      	str	r2, [r3, #32]
}
 800ec06:	bf00      	nop
 800ec08:	371c      	adds	r7, #28
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec12:	b480      	push	{r7}
 800ec14:	b087      	sub	sp, #28
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	60f8      	str	r0, [r7, #12]
 800ec1a:	60b9      	str	r1, [r7, #8]
 800ec1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	f023 0210 	bic.w	r2, r3, #16
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6a1b      	ldr	r3, [r3, #32]
 800ec34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ec3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	031b      	lsls	r3, r3, #12
 800ec42:	697a      	ldr	r2, [r7, #20]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ec4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	011b      	lsls	r3, r3, #4
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	697a      	ldr	r2, [r7, #20]
 800ec5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	693a      	ldr	r2, [r7, #16]
 800ec64:	621a      	str	r2, [r3, #32]
}
 800ec66:	bf00      	nop
 800ec68:	371c      	adds	r7, #28
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b085      	sub	sp, #20
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec8a:	683a      	ldr	r2, [r7, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	f043 0307 	orr.w	r3, r3, #7
 800ec94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	609a      	str	r2, [r3, #8]
}
 800ec9c:	bf00      	nop
 800ec9e:	3714      	adds	r7, #20
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b087      	sub	sp, #28
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	689b      	ldr	r3, [r3, #8]
 800ecba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ecc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	021a      	lsls	r2, r3, #8
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	431a      	orrs	r2, r3
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	697a      	ldr	r2, [r7, #20]
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	609a      	str	r2, [r3, #8]
}
 800ecdc:	bf00      	nop
 800ecde:	371c      	adds	r7, #28
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d101      	bne.n	800ed00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ecfc:	2302      	movs	r3, #2
 800ecfe:	e05a      	b.n	800edb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2202      	movs	r2, #2
 800ed0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a21      	ldr	r2, [pc, #132]	; (800edc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d022      	beq.n	800ed8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed4c:	d01d      	beq.n	800ed8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a1d      	ldr	r2, [pc, #116]	; (800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d018      	beq.n	800ed8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a1b      	ldr	r2, [pc, #108]	; (800edcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d013      	beq.n	800ed8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a1a      	ldr	r2, [pc, #104]	; (800edd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d00e      	beq.n	800ed8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a18      	ldr	r2, [pc, #96]	; (800edd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d009      	beq.n	800ed8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a17      	ldr	r2, [pc, #92]	; (800edd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d004      	beq.n	800ed8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a15      	ldr	r2, [pc, #84]	; (800eddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d10c      	bne.n	800eda4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	68ba      	ldr	r2, [r7, #8]
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edb4:	2300      	movs	r3, #0
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	40010000 	.word	0x40010000
 800edc8:	40000400 	.word	0x40000400
 800edcc:	40000800 	.word	0x40000800
 800edd0:	40000c00 	.word	0x40000c00
 800edd4:	40010400 	.word	0x40010400
 800edd8:	40014000 	.word	0x40014000
 800eddc:	40001800 	.word	0x40001800

0800ede0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	e03f      	b.n	800ee9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d106      	bne.n	800ee34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f7fc fdce 	bl	800b9d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2224      	movs	r2, #36	; 0x24
 800ee38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68da      	ldr	r2, [r3, #12]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fb6b 	bl	800f528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	691a      	ldr	r2, [r3, #16]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ee60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	695a      	ldr	r2, [r3, #20]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ee70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	68da      	ldr	r2, [r3, #12]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2220      	movs	r2, #32
 800ee8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2220      	movs	r2, #32
 800ee94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ee98:	2300      	movs	r3, #0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
	...

0800eea4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b20      	cmp	r3, #32
 800eebc:	d153      	bne.n	800ef66 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <HAL_UART_Transmit_DMA+0x26>
 800eec4:	88fb      	ldrh	r3, [r7, #6]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d101      	bne.n	800eece <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e04c      	b.n	800ef68 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d101      	bne.n	800eedc <HAL_UART_Transmit_DMA+0x38>
 800eed8:	2302      	movs	r3, #2
 800eeda:	e045      	b.n	800ef68 <HAL_UART_Transmit_DMA+0xc4>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	88fa      	ldrh	r2, [r7, #6]
 800eeee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	88fa      	ldrh	r2, [r7, #6]
 800eef4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2200      	movs	r2, #0
 800eefa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2221      	movs	r2, #33	; 0x21
 800ef00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef08:	4a19      	ldr	r2, [pc, #100]	; (800ef70 <HAL_UART_Transmit_DMA+0xcc>)
 800ef0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef10:	4a18      	ldr	r2, [pc, #96]	; (800ef74 <HAL_UART_Transmit_DMA+0xd0>)
 800ef12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef18:	4a17      	ldr	r2, [pc, #92]	; (800ef78 <HAL_UART_Transmit_DMA+0xd4>)
 800ef1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef20:	2200      	movs	r2, #0
 800ef22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ef24:	f107 0308 	add.w	r3, r7, #8
 800ef28:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	6819      	ldr	r1, [r3, #0]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	3304      	adds	r3, #4
 800ef38:	461a      	mov	r2, r3
 800ef3a:	88fb      	ldrh	r3, [r7, #6]
 800ef3c:	f7fd f812 	bl	800bf64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef48:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	695a      	ldr	r2, [r3, #20]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ef60:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	e000      	b.n	800ef68 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ef66:	2302      	movs	r3, #2
  }
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	0800f1b9 	.word	0x0800f1b9
 800ef74:	0800f20b 	.word	0x0800f20b
 800ef78:	0800f227 	.word	0x0800f227

0800ef7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b088      	sub	sp, #32
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	695b      	ldr	r3, [r3, #20]
 800ef9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800efa0:	2300      	movs	r3, #0
 800efa2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	f003 030f 	and.w	r3, r3, #15
 800efaa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10d      	bne.n	800efce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	f003 0320 	and.w	r3, r3, #32
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d008      	beq.n	800efce <HAL_UART_IRQHandler+0x52>
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	f003 0320 	and.w	r3, r3, #32
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d003      	beq.n	800efce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 fa2d 	bl	800f426 <UART_Receive_IT>
      return;
 800efcc:	e0d0      	b.n	800f170 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 80b0 	beq.w	800f136 <HAL_UART_IRQHandler+0x1ba>
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d105      	bne.n	800efec <HAL_UART_IRQHandler+0x70>
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f000 80a5 	beq.w	800f136 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00a      	beq.n	800f00c <HAL_UART_IRQHandler+0x90>
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800effc:	2b00      	cmp	r3, #0
 800effe:	d005      	beq.n	800f00c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f004:	f043 0201 	orr.w	r2, r3, #1
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	f003 0304 	and.w	r3, r3, #4
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00a      	beq.n	800f02c <HAL_UART_IRQHandler+0xb0>
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d005      	beq.n	800f02c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f024:	f043 0202 	orr.w	r2, r3, #2
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	f003 0302 	and.w	r3, r3, #2
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00a      	beq.n	800f04c <HAL_UART_IRQHandler+0xd0>
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	f003 0301 	and.w	r3, r3, #1
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d005      	beq.n	800f04c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f044:	f043 0204 	orr.w	r2, r3, #4
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	f003 0308 	and.w	r3, r3, #8
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00f      	beq.n	800f076 <HAL_UART_IRQHandler+0xfa>
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	f003 0320 	and.w	r3, r3, #32
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d104      	bne.n	800f06a <HAL_UART_IRQHandler+0xee>
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	f003 0301 	and.w	r3, r3, #1
 800f066:	2b00      	cmp	r3, #0
 800f068:	d005      	beq.n	800f076 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f06e:	f043 0208 	orr.w	r2, r3, #8
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d077      	beq.n	800f16e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	f003 0320 	and.w	r3, r3, #32
 800f084:	2b00      	cmp	r3, #0
 800f086:	d007      	beq.n	800f098 <HAL_UART_IRQHandler+0x11c>
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	f003 0320 	and.w	r3, r3, #32
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d002      	beq.n	800f098 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f9c7 	bl	800f426 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	695b      	ldr	r3, [r3, #20]
 800f09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0a2:	2b40      	cmp	r3, #64	; 0x40
 800f0a4:	bf0c      	ite	eq
 800f0a6:	2301      	moveq	r3, #1
 800f0a8:	2300      	movne	r3, #0
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0b2:	f003 0308 	and.w	r3, r3, #8
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d102      	bne.n	800f0c0 <HAL_UART_IRQHandler+0x144>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d031      	beq.n	800f124 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f000 f910 	bl	800f2e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	695b      	ldr	r3, [r3, #20]
 800f0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0d0:	2b40      	cmp	r3, #64	; 0x40
 800f0d2:	d123      	bne.n	800f11c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	695a      	ldr	r2, [r3, #20]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f0e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d013      	beq.n	800f114 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0f0:	4a21      	ldr	r2, [pc, #132]	; (800f178 <HAL_UART_IRQHandler+0x1fc>)
 800f0f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fc ff8b 	bl	800c014 <HAL_DMA_Abort_IT>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d016      	beq.n	800f132 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f10e:	4610      	mov	r0, r2
 800f110:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f112:	e00e      	b.n	800f132 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 f845 	bl	800f1a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f11a:	e00a      	b.n	800f132 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 f841 	bl	800f1a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f122:	e006      	b.n	800f132 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f000 f83d 	bl	800f1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800f130:	e01d      	b.n	800f16e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f132:	bf00      	nop
    return;
 800f134:	e01b      	b.n	800f16e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d008      	beq.n	800f152 <HAL_UART_IRQHandler+0x1d6>
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f146:	2b00      	cmp	r3, #0
 800f148:	d003      	beq.n	800f152 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 f8fd 	bl	800f34a <UART_Transmit_IT>
    return;
 800f150:	e00e      	b.n	800f170 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d009      	beq.n	800f170 <HAL_UART_IRQHandler+0x1f4>
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f162:	2b00      	cmp	r3, #0
 800f164:	d004      	beq.n	800f170 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 f945 	bl	800f3f6 <UART_EndTransmit_IT>
    return;
 800f16c:	e000      	b.n	800f170 <HAL_UART_IRQHandler+0x1f4>
    return;
 800f16e:	bf00      	nop
  }
}
 800f170:	3720      	adds	r7, #32
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	0800f323 	.word	0x0800f323

0800f17c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f184:	bf00      	nop
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800f198:	bf00      	nop
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f1ac:	bf00      	nop
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d113      	bne.n	800f1fc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	695a      	ldr	r2, [r3, #20]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f1e8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68da      	ldr	r2, [r3, #12]
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1f8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f1fa:	e002      	b.n	800f202 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f7fc fc69 	bl	800bad4 <HAL_UART_TxCpltCallback>
}
 800f202:	bf00      	nop
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b084      	sub	sp, #16
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f216:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	f7ff ffaf 	bl	800f17c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f21e:	bf00      	nop
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b084      	sub	sp, #16
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f22e:	2300      	movs	r3, #0
 800f230:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f236:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	695b      	ldr	r3, [r3, #20]
 800f23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f242:	2b80      	cmp	r3, #128	; 0x80
 800f244:	bf0c      	ite	eq
 800f246:	2301      	moveq	r3, #1
 800f248:	2300      	movne	r3, #0
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f254:	b2db      	uxtb	r3, r3
 800f256:	2b21      	cmp	r3, #33	; 0x21
 800f258:	d108      	bne.n	800f26c <UART_DMAError+0x46>
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d005      	beq.n	800f26c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2200      	movs	r2, #0
 800f264:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f266:	68b8      	ldr	r0, [r7, #8]
 800f268:	f000 f827 	bl	800f2ba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	695b      	ldr	r3, [r3, #20]
 800f272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f276:	2b40      	cmp	r3, #64	; 0x40
 800f278:	bf0c      	ite	eq
 800f27a:	2301      	moveq	r3, #1
 800f27c:	2300      	movne	r3, #0
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	2b22      	cmp	r3, #34	; 0x22
 800f28c:	d108      	bne.n	800f2a0 <UART_DMAError+0x7a>
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d005      	beq.n	800f2a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2200      	movs	r2, #0
 800f298:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f29a:	68b8      	ldr	r0, [r7, #8]
 800f29c:	f000 f823 	bl	800f2e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2a4:	f043 0210 	orr.w	r2, r3, #16
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f2ac:	68b8      	ldr	r0, [r7, #8]
 800f2ae:	f7ff ff79 	bl	800f1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	b083      	sub	sp, #12
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	68da      	ldr	r2, [r3, #12]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f2d0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2220      	movs	r2, #32
 800f2d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800f2da:	bf00      	nop
 800f2dc:	370c      	adds	r7, #12
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr

0800f2e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f2e6:	b480      	push	{r7}
 800f2e8:	b083      	sub	sp, #12
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	68da      	ldr	r2, [r3, #12]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f2fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	695a      	ldr	r2, [r3, #20]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f022 0201 	bic.w	r2, r2, #1
 800f30c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2220      	movs	r2, #32
 800f312:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800f316:	bf00      	nop
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b084      	sub	sp, #16
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f32e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2200      	movs	r2, #0
 800f334:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f7ff ff31 	bl	800f1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f342:	bf00      	nop
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f34a:	b480      	push	{r7}
 800f34c:	b085      	sub	sp, #20
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b21      	cmp	r3, #33	; 0x21
 800f35c:	d144      	bne.n	800f3e8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f366:	d11a      	bne.n	800f39e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6a1b      	ldr	r3, [r3, #32]
 800f36c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	461a      	mov	r2, r3
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f37c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d105      	bne.n	800f392 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6a1b      	ldr	r3, [r3, #32]
 800f38a:	1c9a      	adds	r2, r3, #2
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	621a      	str	r2, [r3, #32]
 800f390:	e00e      	b.n	800f3b0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6a1b      	ldr	r3, [r3, #32]
 800f396:	1c5a      	adds	r2, r3, #1
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	621a      	str	r2, [r3, #32]
 800f39c:	e008      	b.n	800f3b0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a1b      	ldr	r3, [r3, #32]
 800f3a2:	1c59      	adds	r1, r3, #1
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	6211      	str	r1, [r2, #32]
 800f3a8:	781a      	ldrb	r2, [r3, #0]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	3b01      	subs	r3, #1
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10f      	bne.n	800f3e4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68da      	ldr	r2, [r3, #12]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	68da      	ldr	r2, [r3, #12]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f3e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	e000      	b.n	800f3ea <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f3e8:	2302      	movs	r3, #2
  }
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3714      	adds	r7, #20
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b082      	sub	sp, #8
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	68da      	ldr	r2, [r3, #12]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f40c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2220      	movs	r2, #32
 800f412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7fc fb5c 	bl	800bad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b084      	sub	sp, #16
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f434:	b2db      	uxtb	r3, r3
 800f436:	2b22      	cmp	r3, #34	; 0x22
 800f438:	d171      	bne.n	800f51e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f442:	d123      	bne.n	800f48c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f448:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	691b      	ldr	r3, [r3, #16]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10e      	bne.n	800f470 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	b29b      	uxth	r3, r3
 800f45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f45e:	b29a      	uxth	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f468:	1c9a      	adds	r2, r3, #2
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	629a      	str	r2, [r3, #40]	; 0x28
 800f46e:	e029      	b.n	800f4c4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	b29b      	uxth	r3, r3
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f484:	1c5a      	adds	r2, r3, #1
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	629a      	str	r2, [r3, #40]	; 0x28
 800f48a:	e01b      	b.n	800f4c4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	691b      	ldr	r3, [r3, #16]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d10a      	bne.n	800f4aa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	6858      	ldr	r0, [r3, #4]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f49e:	1c59      	adds	r1, r3, #1
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	6291      	str	r1, [r2, #40]	; 0x28
 800f4a4:	b2c2      	uxtb	r2, r0
 800f4a6:	701a      	strb	r2, [r3, #0]
 800f4a8:	e00c      	b.n	800f4c4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b6:	1c58      	adds	r0, r3, #1
 800f4b8:	6879      	ldr	r1, [r7, #4]
 800f4ba:	6288      	str	r0, [r1, #40]	; 0x28
 800f4bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f4c0:	b2d2      	uxtb	r2, r2
 800f4c2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d120      	bne.n	800f51a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	68da      	ldr	r2, [r3, #12]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f022 0220 	bic.w	r2, r2, #32
 800f4e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	68da      	ldr	r2, [r3, #12]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f4f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	695a      	ldr	r2, [r3, #20]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f022 0201 	bic.w	r2, r2, #1
 800f506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2220      	movs	r2, #32
 800f50c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7ff fe3d 	bl	800f190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	e002      	b.n	800f520 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	e000      	b.n	800f520 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f51e:	2302      	movs	r3, #2
  }
}
 800f520:	4618      	mov	r0, r3
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	b0bd      	sub	sp, #244	; 0xf4
 800f52e:	af00      	add	r7, sp, #0
 800f530:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f544:	68d9      	ldr	r1, [r3, #12]
 800f546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	ea40 0301 	orr.w	r3, r0, r1
 800f550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f556:	689a      	ldr	r2, [r3, #8]
 800f558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	431a      	orrs	r2, r3
 800f560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	431a      	orrs	r2, r3
 800f568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f56c:	69db      	ldr	r3, [r3, #28]
 800f56e:	4313      	orrs	r3, r2
 800f570:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800f574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f580:	f021 010c 	bic.w	r1, r1, #12
 800f584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f58e:	430b      	orrs	r3, r1
 800f590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	695b      	ldr	r3, [r3, #20]
 800f59a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5a2:	6999      	ldr	r1, [r3, #24]
 800f5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	ea40 0301 	orr.w	r3, r0, r1
 800f5ae:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5b4:	69db      	ldr	r3, [r3, #28]
 800f5b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5ba:	f040 81a5 	bne.w	800f908 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	4bcd      	ldr	r3, [pc, #820]	; (800f8fc <UART_SetConfig+0x3d4>)
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d006      	beq.n	800f5d8 <UART_SetConfig+0xb0>
 800f5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	4bcb      	ldr	r3, [pc, #812]	; (800f900 <UART_SetConfig+0x3d8>)
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	f040 80cb 	bne.w	800f76e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f5d8:	f7fe ff9e 	bl	800e518 <HAL_RCC_GetPCLK2Freq>
 800f5dc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f5e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5e4:	461c      	mov	r4, r3
 800f5e6:	f04f 0500 	mov.w	r5, #0
 800f5ea:	4622      	mov	r2, r4
 800f5ec:	462b      	mov	r3, r5
 800f5ee:	1891      	adds	r1, r2, r2
 800f5f0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800f5f4:	415b      	adcs	r3, r3
 800f5f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f5fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f5fe:	1912      	adds	r2, r2, r4
 800f600:	eb45 0303 	adc.w	r3, r5, r3
 800f604:	f04f 0000 	mov.w	r0, #0
 800f608:	f04f 0100 	mov.w	r1, #0
 800f60c:	00d9      	lsls	r1, r3, #3
 800f60e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f612:	00d0      	lsls	r0, r2, #3
 800f614:	4602      	mov	r2, r0
 800f616:	460b      	mov	r3, r1
 800f618:	1911      	adds	r1, r2, r4
 800f61a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800f61e:	416b      	adcs	r3, r5
 800f620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	461a      	mov	r2, r3
 800f62c:	f04f 0300 	mov.w	r3, #0
 800f630:	1891      	adds	r1, r2, r2
 800f632:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f636:	415b      	adcs	r3, r3
 800f638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f63c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800f640:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800f644:	f7f1 fb20 	bl	8000c88 <__aeabi_uldivmod>
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4bad      	ldr	r3, [pc, #692]	; (800f904 <UART_SetConfig+0x3dc>)
 800f64e:	fba3 2302 	umull	r2, r3, r3, r2
 800f652:	095b      	lsrs	r3, r3, #5
 800f654:	011e      	lsls	r6, r3, #4
 800f656:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f65a:	461c      	mov	r4, r3
 800f65c:	f04f 0500 	mov.w	r5, #0
 800f660:	4622      	mov	r2, r4
 800f662:	462b      	mov	r3, r5
 800f664:	1891      	adds	r1, r2, r2
 800f666:	67b9      	str	r1, [r7, #120]	; 0x78
 800f668:	415b      	adcs	r3, r3
 800f66a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f66c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f670:	1912      	adds	r2, r2, r4
 800f672:	eb45 0303 	adc.w	r3, r5, r3
 800f676:	f04f 0000 	mov.w	r0, #0
 800f67a:	f04f 0100 	mov.w	r1, #0
 800f67e:	00d9      	lsls	r1, r3, #3
 800f680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f684:	00d0      	lsls	r0, r2, #3
 800f686:	4602      	mov	r2, r0
 800f688:	460b      	mov	r3, r1
 800f68a:	1911      	adds	r1, r2, r4
 800f68c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800f690:	416b      	adcs	r3, r5
 800f692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	461a      	mov	r2, r3
 800f69e:	f04f 0300 	mov.w	r3, #0
 800f6a2:	1891      	adds	r1, r2, r2
 800f6a4:	6739      	str	r1, [r7, #112]	; 0x70
 800f6a6:	415b      	adcs	r3, r3
 800f6a8:	677b      	str	r3, [r7, #116]	; 0x74
 800f6aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800f6ae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800f6b2:	f7f1 fae9 	bl	8000c88 <__aeabi_uldivmod>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	4b92      	ldr	r3, [pc, #584]	; (800f904 <UART_SetConfig+0x3dc>)
 800f6bc:	fba3 1302 	umull	r1, r3, r3, r2
 800f6c0:	095b      	lsrs	r3, r3, #5
 800f6c2:	2164      	movs	r1, #100	; 0x64
 800f6c4:	fb01 f303 	mul.w	r3, r1, r3
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	00db      	lsls	r3, r3, #3
 800f6cc:	3332      	adds	r3, #50	; 0x32
 800f6ce:	4a8d      	ldr	r2, [pc, #564]	; (800f904 <UART_SetConfig+0x3dc>)
 800f6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f6d4:	095b      	lsrs	r3, r3, #5
 800f6d6:	005b      	lsls	r3, r3, #1
 800f6d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f6dc:	441e      	add	r6, r3
 800f6de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f04f 0100 	mov.w	r1, #0
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	1894      	adds	r4, r2, r2
 800f6ee:	66bc      	str	r4, [r7, #104]	; 0x68
 800f6f0:	415b      	adcs	r3, r3
 800f6f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f6f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f6f8:	1812      	adds	r2, r2, r0
 800f6fa:	eb41 0303 	adc.w	r3, r1, r3
 800f6fe:	f04f 0400 	mov.w	r4, #0
 800f702:	f04f 0500 	mov.w	r5, #0
 800f706:	00dd      	lsls	r5, r3, #3
 800f708:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f70c:	00d4      	lsls	r4, r2, #3
 800f70e:	4622      	mov	r2, r4
 800f710:	462b      	mov	r3, r5
 800f712:	1814      	adds	r4, r2, r0
 800f714:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800f718:	414b      	adcs	r3, r1
 800f71a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	461a      	mov	r2, r3
 800f726:	f04f 0300 	mov.w	r3, #0
 800f72a:	1891      	adds	r1, r2, r2
 800f72c:	6639      	str	r1, [r7, #96]	; 0x60
 800f72e:	415b      	adcs	r3, r3
 800f730:	667b      	str	r3, [r7, #100]	; 0x64
 800f732:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800f736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f73a:	f7f1 faa5 	bl	8000c88 <__aeabi_uldivmod>
 800f73e:	4602      	mov	r2, r0
 800f740:	460b      	mov	r3, r1
 800f742:	4b70      	ldr	r3, [pc, #448]	; (800f904 <UART_SetConfig+0x3dc>)
 800f744:	fba3 1302 	umull	r1, r3, r3, r2
 800f748:	095b      	lsrs	r3, r3, #5
 800f74a:	2164      	movs	r1, #100	; 0x64
 800f74c:	fb01 f303 	mul.w	r3, r1, r3
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	00db      	lsls	r3, r3, #3
 800f754:	3332      	adds	r3, #50	; 0x32
 800f756:	4a6b      	ldr	r2, [pc, #428]	; (800f904 <UART_SetConfig+0x3dc>)
 800f758:	fba2 2303 	umull	r2, r3, r2, r3
 800f75c:	095b      	lsrs	r3, r3, #5
 800f75e:	f003 0207 	and.w	r2, r3, #7
 800f762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4432      	add	r2, r6
 800f76a:	609a      	str	r2, [r3, #8]
 800f76c:	e26d      	b.n	800fc4a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f76e:	f7fe febf 	bl	800e4f0 <HAL_RCC_GetPCLK1Freq>
 800f772:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f776:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f77a:	461c      	mov	r4, r3
 800f77c:	f04f 0500 	mov.w	r5, #0
 800f780:	4622      	mov	r2, r4
 800f782:	462b      	mov	r3, r5
 800f784:	1891      	adds	r1, r2, r2
 800f786:	65b9      	str	r1, [r7, #88]	; 0x58
 800f788:	415b      	adcs	r3, r3
 800f78a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f78c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f790:	1912      	adds	r2, r2, r4
 800f792:	eb45 0303 	adc.w	r3, r5, r3
 800f796:	f04f 0000 	mov.w	r0, #0
 800f79a:	f04f 0100 	mov.w	r1, #0
 800f79e:	00d9      	lsls	r1, r3, #3
 800f7a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f7a4:	00d0      	lsls	r0, r2, #3
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	1911      	adds	r1, r2, r4
 800f7ac:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f7b0:	416b      	adcs	r3, r5
 800f7b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	f04f 0300 	mov.w	r3, #0
 800f7c2:	1891      	adds	r1, r2, r2
 800f7c4:	6539      	str	r1, [r7, #80]	; 0x50
 800f7c6:	415b      	adcs	r3, r3
 800f7c8:	657b      	str	r3, [r7, #84]	; 0x54
 800f7ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f7ce:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800f7d2:	f7f1 fa59 	bl	8000c88 <__aeabi_uldivmod>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	4b4a      	ldr	r3, [pc, #296]	; (800f904 <UART_SetConfig+0x3dc>)
 800f7dc:	fba3 2302 	umull	r2, r3, r3, r2
 800f7e0:	095b      	lsrs	r3, r3, #5
 800f7e2:	011e      	lsls	r6, r3, #4
 800f7e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f7e8:	461c      	mov	r4, r3
 800f7ea:	f04f 0500 	mov.w	r5, #0
 800f7ee:	4622      	mov	r2, r4
 800f7f0:	462b      	mov	r3, r5
 800f7f2:	1891      	adds	r1, r2, r2
 800f7f4:	64b9      	str	r1, [r7, #72]	; 0x48
 800f7f6:	415b      	adcs	r3, r3
 800f7f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f7fe:	1912      	adds	r2, r2, r4
 800f800:	eb45 0303 	adc.w	r3, r5, r3
 800f804:	f04f 0000 	mov.w	r0, #0
 800f808:	f04f 0100 	mov.w	r1, #0
 800f80c:	00d9      	lsls	r1, r3, #3
 800f80e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f812:	00d0      	lsls	r0, r2, #3
 800f814:	4602      	mov	r2, r0
 800f816:	460b      	mov	r3, r1
 800f818:	1911      	adds	r1, r2, r4
 800f81a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f81e:	416b      	adcs	r3, r5
 800f820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	461a      	mov	r2, r3
 800f82c:	f04f 0300 	mov.w	r3, #0
 800f830:	1891      	adds	r1, r2, r2
 800f832:	6439      	str	r1, [r7, #64]	; 0x40
 800f834:	415b      	adcs	r3, r3
 800f836:	647b      	str	r3, [r7, #68]	; 0x44
 800f838:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f83c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800f840:	f7f1 fa22 	bl	8000c88 <__aeabi_uldivmod>
 800f844:	4602      	mov	r2, r0
 800f846:	460b      	mov	r3, r1
 800f848:	4b2e      	ldr	r3, [pc, #184]	; (800f904 <UART_SetConfig+0x3dc>)
 800f84a:	fba3 1302 	umull	r1, r3, r3, r2
 800f84e:	095b      	lsrs	r3, r3, #5
 800f850:	2164      	movs	r1, #100	; 0x64
 800f852:	fb01 f303 	mul.w	r3, r1, r3
 800f856:	1ad3      	subs	r3, r2, r3
 800f858:	00db      	lsls	r3, r3, #3
 800f85a:	3332      	adds	r3, #50	; 0x32
 800f85c:	4a29      	ldr	r2, [pc, #164]	; (800f904 <UART_SetConfig+0x3dc>)
 800f85e:	fba2 2303 	umull	r2, r3, r2, r3
 800f862:	095b      	lsrs	r3, r3, #5
 800f864:	005b      	lsls	r3, r3, #1
 800f866:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f86a:	441e      	add	r6, r3
 800f86c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f870:	4618      	mov	r0, r3
 800f872:	f04f 0100 	mov.w	r1, #0
 800f876:	4602      	mov	r2, r0
 800f878:	460b      	mov	r3, r1
 800f87a:	1894      	adds	r4, r2, r2
 800f87c:	63bc      	str	r4, [r7, #56]	; 0x38
 800f87e:	415b      	adcs	r3, r3
 800f880:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f882:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f886:	1812      	adds	r2, r2, r0
 800f888:	eb41 0303 	adc.w	r3, r1, r3
 800f88c:	f04f 0400 	mov.w	r4, #0
 800f890:	f04f 0500 	mov.w	r5, #0
 800f894:	00dd      	lsls	r5, r3, #3
 800f896:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f89a:	00d4      	lsls	r4, r2, #3
 800f89c:	4622      	mov	r2, r4
 800f89e:	462b      	mov	r3, r5
 800f8a0:	1814      	adds	r4, r2, r0
 800f8a2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800f8a6:	414b      	adcs	r3, r1
 800f8a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	f04f 0300 	mov.w	r3, #0
 800f8b8:	1891      	adds	r1, r2, r2
 800f8ba:	6339      	str	r1, [r7, #48]	; 0x30
 800f8bc:	415b      	adcs	r3, r3
 800f8be:	637b      	str	r3, [r7, #52]	; 0x34
 800f8c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f8c4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f8c8:	f7f1 f9de 	bl	8000c88 <__aeabi_uldivmod>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4b0c      	ldr	r3, [pc, #48]	; (800f904 <UART_SetConfig+0x3dc>)
 800f8d2:	fba3 1302 	umull	r1, r3, r3, r2
 800f8d6:	095b      	lsrs	r3, r3, #5
 800f8d8:	2164      	movs	r1, #100	; 0x64
 800f8da:	fb01 f303 	mul.w	r3, r1, r3
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	3332      	adds	r3, #50	; 0x32
 800f8e4:	4a07      	ldr	r2, [pc, #28]	; (800f904 <UART_SetConfig+0x3dc>)
 800f8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8ea:	095b      	lsrs	r3, r3, #5
 800f8ec:	f003 0207 	and.w	r2, r3, #7
 800f8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4432      	add	r2, r6
 800f8f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f8fa:	e1a6      	b.n	800fc4a <UART_SetConfig+0x722>
 800f8fc:	40011000 	.word	0x40011000
 800f900:	40011400 	.word	0x40011400
 800f904:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	4bd1      	ldr	r3, [pc, #836]	; (800fc54 <UART_SetConfig+0x72c>)
 800f910:	429a      	cmp	r2, r3
 800f912:	d006      	beq.n	800f922 <UART_SetConfig+0x3fa>
 800f914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	4bcf      	ldr	r3, [pc, #828]	; (800fc58 <UART_SetConfig+0x730>)
 800f91c:	429a      	cmp	r2, r3
 800f91e:	f040 80ca 	bne.w	800fab6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f922:	f7fe fdf9 	bl	800e518 <HAL_RCC_GetPCLK2Freq>
 800f926:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f92a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f92e:	461c      	mov	r4, r3
 800f930:	f04f 0500 	mov.w	r5, #0
 800f934:	4622      	mov	r2, r4
 800f936:	462b      	mov	r3, r5
 800f938:	1891      	adds	r1, r2, r2
 800f93a:	62b9      	str	r1, [r7, #40]	; 0x28
 800f93c:	415b      	adcs	r3, r3
 800f93e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f944:	1912      	adds	r2, r2, r4
 800f946:	eb45 0303 	adc.w	r3, r5, r3
 800f94a:	f04f 0000 	mov.w	r0, #0
 800f94e:	f04f 0100 	mov.w	r1, #0
 800f952:	00d9      	lsls	r1, r3, #3
 800f954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f958:	00d0      	lsls	r0, r2, #3
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	eb12 0a04 	adds.w	sl, r2, r4
 800f962:	eb43 0b05 	adc.w	fp, r3, r5
 800f966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f04f 0100 	mov.w	r1, #0
 800f972:	f04f 0200 	mov.w	r2, #0
 800f976:	f04f 0300 	mov.w	r3, #0
 800f97a:	008b      	lsls	r3, r1, #2
 800f97c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f980:	0082      	lsls	r2, r0, #2
 800f982:	4650      	mov	r0, sl
 800f984:	4659      	mov	r1, fp
 800f986:	f7f1 f97f 	bl	8000c88 <__aeabi_uldivmod>
 800f98a:	4602      	mov	r2, r0
 800f98c:	460b      	mov	r3, r1
 800f98e:	4bb3      	ldr	r3, [pc, #716]	; (800fc5c <UART_SetConfig+0x734>)
 800f990:	fba3 2302 	umull	r2, r3, r3, r2
 800f994:	095b      	lsrs	r3, r3, #5
 800f996:	011e      	lsls	r6, r3, #4
 800f998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f99c:	4618      	mov	r0, r3
 800f99e:	f04f 0100 	mov.w	r1, #0
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	1894      	adds	r4, r2, r2
 800f9a8:	623c      	str	r4, [r7, #32]
 800f9aa:	415b      	adcs	r3, r3
 800f9ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f9ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f9b2:	1812      	adds	r2, r2, r0
 800f9b4:	eb41 0303 	adc.w	r3, r1, r3
 800f9b8:	f04f 0400 	mov.w	r4, #0
 800f9bc:	f04f 0500 	mov.w	r5, #0
 800f9c0:	00dd      	lsls	r5, r3, #3
 800f9c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f9c6:	00d4      	lsls	r4, r2, #3
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	462b      	mov	r3, r5
 800f9cc:	1814      	adds	r4, r2, r0
 800f9ce:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800f9d2:	414b      	adcs	r3, r1
 800f9d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f9d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f04f 0100 	mov.w	r1, #0
 800f9e4:	f04f 0200 	mov.w	r2, #0
 800f9e8:	f04f 0300 	mov.w	r3, #0
 800f9ec:	008b      	lsls	r3, r1, #2
 800f9ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f9f2:	0082      	lsls	r2, r0, #2
 800f9f4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f9f8:	f7f1 f946 	bl	8000c88 <__aeabi_uldivmod>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	4b96      	ldr	r3, [pc, #600]	; (800fc5c <UART_SetConfig+0x734>)
 800fa02:	fba3 1302 	umull	r1, r3, r3, r2
 800fa06:	095b      	lsrs	r3, r3, #5
 800fa08:	2164      	movs	r1, #100	; 0x64
 800fa0a:	fb01 f303 	mul.w	r3, r1, r3
 800fa0e:	1ad3      	subs	r3, r2, r3
 800fa10:	011b      	lsls	r3, r3, #4
 800fa12:	3332      	adds	r3, #50	; 0x32
 800fa14:	4a91      	ldr	r2, [pc, #580]	; (800fc5c <UART_SetConfig+0x734>)
 800fa16:	fba2 2303 	umull	r2, r3, r2, r3
 800fa1a:	095b      	lsrs	r3, r3, #5
 800fa1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa20:	441e      	add	r6, r3
 800fa22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fa26:	4618      	mov	r0, r3
 800fa28:	f04f 0100 	mov.w	r1, #0
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	1894      	adds	r4, r2, r2
 800fa32:	61bc      	str	r4, [r7, #24]
 800fa34:	415b      	adcs	r3, r3
 800fa36:	61fb      	str	r3, [r7, #28]
 800fa38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fa3c:	1812      	adds	r2, r2, r0
 800fa3e:	eb41 0303 	adc.w	r3, r1, r3
 800fa42:	f04f 0400 	mov.w	r4, #0
 800fa46:	f04f 0500 	mov.w	r5, #0
 800fa4a:	00dd      	lsls	r5, r3, #3
 800fa4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fa50:	00d4      	lsls	r4, r2, #3
 800fa52:	4622      	mov	r2, r4
 800fa54:	462b      	mov	r3, r5
 800fa56:	1814      	adds	r4, r2, r0
 800fa58:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800fa5c:	414b      	adcs	r3, r1
 800fa5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fa62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f04f 0100 	mov.w	r1, #0
 800fa6e:	f04f 0200 	mov.w	r2, #0
 800fa72:	f04f 0300 	mov.w	r3, #0
 800fa76:	008b      	lsls	r3, r1, #2
 800fa78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fa7c:	0082      	lsls	r2, r0, #2
 800fa7e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800fa82:	f7f1 f901 	bl	8000c88 <__aeabi_uldivmod>
 800fa86:	4602      	mov	r2, r0
 800fa88:	460b      	mov	r3, r1
 800fa8a:	4b74      	ldr	r3, [pc, #464]	; (800fc5c <UART_SetConfig+0x734>)
 800fa8c:	fba3 1302 	umull	r1, r3, r3, r2
 800fa90:	095b      	lsrs	r3, r3, #5
 800fa92:	2164      	movs	r1, #100	; 0x64
 800fa94:	fb01 f303 	mul.w	r3, r1, r3
 800fa98:	1ad3      	subs	r3, r2, r3
 800fa9a:	011b      	lsls	r3, r3, #4
 800fa9c:	3332      	adds	r3, #50	; 0x32
 800fa9e:	4a6f      	ldr	r2, [pc, #444]	; (800fc5c <UART_SetConfig+0x734>)
 800faa0:	fba2 2303 	umull	r2, r3, r2, r3
 800faa4:	095b      	lsrs	r3, r3, #5
 800faa6:	f003 020f 	and.w	r2, r3, #15
 800faaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4432      	add	r2, r6
 800fab2:	609a      	str	r2, [r3, #8]
 800fab4:	e0c9      	b.n	800fc4a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fab6:	f7fe fd1b 	bl	800e4f0 <HAL_RCC_GetPCLK1Freq>
 800faba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fabe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fac2:	461c      	mov	r4, r3
 800fac4:	f04f 0500 	mov.w	r5, #0
 800fac8:	4622      	mov	r2, r4
 800faca:	462b      	mov	r3, r5
 800facc:	1891      	adds	r1, r2, r2
 800face:	6139      	str	r1, [r7, #16]
 800fad0:	415b      	adcs	r3, r3
 800fad2:	617b      	str	r3, [r7, #20]
 800fad4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fad8:	1912      	adds	r2, r2, r4
 800fada:	eb45 0303 	adc.w	r3, r5, r3
 800fade:	f04f 0000 	mov.w	r0, #0
 800fae2:	f04f 0100 	mov.w	r1, #0
 800fae6:	00d9      	lsls	r1, r3, #3
 800fae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800faec:	00d0      	lsls	r0, r2, #3
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	eb12 0804 	adds.w	r8, r2, r4
 800faf6:	eb43 0905 	adc.w	r9, r3, r5
 800fafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f04f 0100 	mov.w	r1, #0
 800fb06:	f04f 0200 	mov.w	r2, #0
 800fb0a:	f04f 0300 	mov.w	r3, #0
 800fb0e:	008b      	lsls	r3, r1, #2
 800fb10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fb14:	0082      	lsls	r2, r0, #2
 800fb16:	4640      	mov	r0, r8
 800fb18:	4649      	mov	r1, r9
 800fb1a:	f7f1 f8b5 	bl	8000c88 <__aeabi_uldivmod>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4b4e      	ldr	r3, [pc, #312]	; (800fc5c <UART_SetConfig+0x734>)
 800fb24:	fba3 2302 	umull	r2, r3, r3, r2
 800fb28:	095b      	lsrs	r3, r3, #5
 800fb2a:	011e      	lsls	r6, r3, #4
 800fb2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb30:	4618      	mov	r0, r3
 800fb32:	f04f 0100 	mov.w	r1, #0
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	1894      	adds	r4, r2, r2
 800fb3c:	60bc      	str	r4, [r7, #8]
 800fb3e:	415b      	adcs	r3, r3
 800fb40:	60fb      	str	r3, [r7, #12]
 800fb42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fb46:	1812      	adds	r2, r2, r0
 800fb48:	eb41 0303 	adc.w	r3, r1, r3
 800fb4c:	f04f 0400 	mov.w	r4, #0
 800fb50:	f04f 0500 	mov.w	r5, #0
 800fb54:	00dd      	lsls	r5, r3, #3
 800fb56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fb5a:	00d4      	lsls	r4, r2, #3
 800fb5c:	4622      	mov	r2, r4
 800fb5e:	462b      	mov	r3, r5
 800fb60:	1814      	adds	r4, r2, r0
 800fb62:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800fb66:	414b      	adcs	r3, r1
 800fb68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f04f 0100 	mov.w	r1, #0
 800fb78:	f04f 0200 	mov.w	r2, #0
 800fb7c:	f04f 0300 	mov.w	r3, #0
 800fb80:	008b      	lsls	r3, r1, #2
 800fb82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fb86:	0082      	lsls	r2, r0, #2
 800fb88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800fb8c:	f7f1 f87c 	bl	8000c88 <__aeabi_uldivmod>
 800fb90:	4602      	mov	r2, r0
 800fb92:	460b      	mov	r3, r1
 800fb94:	4b31      	ldr	r3, [pc, #196]	; (800fc5c <UART_SetConfig+0x734>)
 800fb96:	fba3 1302 	umull	r1, r3, r3, r2
 800fb9a:	095b      	lsrs	r3, r3, #5
 800fb9c:	2164      	movs	r1, #100	; 0x64
 800fb9e:	fb01 f303 	mul.w	r3, r1, r3
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	011b      	lsls	r3, r3, #4
 800fba6:	3332      	adds	r3, #50	; 0x32
 800fba8:	4a2c      	ldr	r2, [pc, #176]	; (800fc5c <UART_SetConfig+0x734>)
 800fbaa:	fba2 2303 	umull	r2, r3, r2, r3
 800fbae:	095b      	lsrs	r3, r3, #5
 800fbb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbb4:	441e      	add	r6, r3
 800fbb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f04f 0100 	mov.w	r1, #0
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	1894      	adds	r4, r2, r2
 800fbc6:	603c      	str	r4, [r7, #0]
 800fbc8:	415b      	adcs	r3, r3
 800fbca:	607b      	str	r3, [r7, #4]
 800fbcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbd0:	1812      	adds	r2, r2, r0
 800fbd2:	eb41 0303 	adc.w	r3, r1, r3
 800fbd6:	f04f 0400 	mov.w	r4, #0
 800fbda:	f04f 0500 	mov.w	r5, #0
 800fbde:	00dd      	lsls	r5, r3, #3
 800fbe0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fbe4:	00d4      	lsls	r4, r2, #3
 800fbe6:	4622      	mov	r2, r4
 800fbe8:	462b      	mov	r3, r5
 800fbea:	1814      	adds	r4, r2, r0
 800fbec:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800fbf0:	414b      	adcs	r3, r1
 800fbf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f04f 0100 	mov.w	r1, #0
 800fc02:	f04f 0200 	mov.w	r2, #0
 800fc06:	f04f 0300 	mov.w	r3, #0
 800fc0a:	008b      	lsls	r3, r1, #2
 800fc0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fc10:	0082      	lsls	r2, r0, #2
 800fc12:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800fc16:	f7f1 f837 	bl	8000c88 <__aeabi_uldivmod>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4b0f      	ldr	r3, [pc, #60]	; (800fc5c <UART_SetConfig+0x734>)
 800fc20:	fba3 1302 	umull	r1, r3, r3, r2
 800fc24:	095b      	lsrs	r3, r3, #5
 800fc26:	2164      	movs	r1, #100	; 0x64
 800fc28:	fb01 f303 	mul.w	r3, r1, r3
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	011b      	lsls	r3, r3, #4
 800fc30:	3332      	adds	r3, #50	; 0x32
 800fc32:	4a0a      	ldr	r2, [pc, #40]	; (800fc5c <UART_SetConfig+0x734>)
 800fc34:	fba2 2303 	umull	r2, r3, r2, r3
 800fc38:	095b      	lsrs	r3, r3, #5
 800fc3a:	f003 020f 	and.w	r2, r3, #15
 800fc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4432      	add	r2, r6
 800fc46:	609a      	str	r2, [r3, #8]
}
 800fc48:	e7ff      	b.n	800fc4a <UART_SetConfig+0x722>
 800fc4a:	bf00      	nop
 800fc4c:	37f4      	adds	r7, #244	; 0xf4
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc54:	40011000 	.word	0x40011000
 800fc58:	40011400 	.word	0x40011400
 800fc5c:	51eb851f 	.word	0x51eb851f

0800fc60 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800fc60:	b480      	push	{r7}
 800fc62:	b085      	sub	sp, #20
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc78:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	4b20      	ldr	r3, [pc, #128]	; (800fd00 <FSMC_NORSRAM_Init+0xa0>)
 800fc7e:	4013      	ands	r3, r2
 800fc80:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fc8a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800fc90:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800fc96:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800fc9c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800fca2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800fca8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800fcae:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800fcb4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800fcba:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800fcc0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800fcc6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800fccc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	689b      	ldr	r3, [r3, #8]
 800fcd8:	2b08      	cmp	r3, #8
 800fcda:	d103      	bne.n	800fce4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fce2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	68f9      	ldr	r1, [r7, #12]
 800fcec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3714      	adds	r7, #20
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	fff00080 	.word	0xfff00080

0800fd04 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b087      	sub	sp, #28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800fd10:	2300      	movs	r3, #0
 800fd12:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd1e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800fd26:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fd32:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800fd3a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800fd42:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	691b      	ldr	r3, [r3, #16]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fd4c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	695b      	ldr	r3, [r3, #20]
 800fd52:	3b02      	subs	r3, #2
 800fd54:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800fd56:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	697a      	ldr	r2, [r7, #20]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	1c5a      	adds	r2, r3, #1
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6979      	ldr	r1, [r7, #20]
 800fd6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
	...

0800fd80 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b087      	sub	sp, #28
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]
 800fd8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fd98:	d122      	bne.n	800fde0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fda2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800fda4:	697a      	ldr	r2, [r7, #20]
 800fda6:	4b15      	ldr	r3, [pc, #84]	; (800fdfc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800fda8:	4013      	ands	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fdb6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800fdbe:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800fdc6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800fdcc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800fdce:	697a      	ldr	r2, [r7, #20]
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	687a      	ldr	r2, [r7, #4]
 800fdd8:	6979      	ldr	r1, [r7, #20]
 800fdda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fdde:	e005      	b.n	800fdec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800fde8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	371c      	adds	r7, #28
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop
 800fdfc:	cff00000 	.word	0xcff00000

0800fe00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe00:	b084      	sub	sp, #16
 800fe02:	b580      	push	{r7, lr}
 800fe04:	b084      	sub	sp, #16
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
 800fe0a:	f107 001c 	add.w	r0, r7, #28
 800fe0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fe12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d122      	bne.n	800fe5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	68db      	ldr	r3, [r3, #12]
 800fe28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fe2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fe40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d105      	bne.n	800fe52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f001 fac6 	bl	80113e4 <USB_CoreReset>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	73fb      	strb	r3, [r7, #15]
 800fe5c:	e01a      	b.n	800fe94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f001 faba 	bl	80113e4 <USB_CoreReset>
 800fe70:	4603      	mov	r3, r0
 800fe72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fe74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d106      	bne.n	800fe88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	639a      	str	r2, [r3, #56]	; 0x38
 800fe86:	e005      	b.n	800fe94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d10b      	bne.n	800feb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	f043 0206 	orr.w	r2, r3, #6
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	689b      	ldr	r3, [r3, #8]
 800feaa:	f043 0220 	orr.w	r2, r3, #32
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800feb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3710      	adds	r7, #16
 800feb8:	46bd      	mov	sp, r7
 800feba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800febe:	b004      	add	sp, #16
 800fec0:	4770      	bx	lr
	...

0800fec4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b087      	sub	sp, #28
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	4613      	mov	r3, r2
 800fed0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fed2:	79fb      	ldrb	r3, [r7, #7]
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	d165      	bne.n	800ffa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	4a41      	ldr	r2, [pc, #260]	; (800ffe0 <USB_SetTurnaroundTime+0x11c>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d906      	bls.n	800feee <USB_SetTurnaroundTime+0x2a>
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	4a40      	ldr	r2, [pc, #256]	; (800ffe4 <USB_SetTurnaroundTime+0x120>)
 800fee4:	4293      	cmp	r3, r2
 800fee6:	d202      	bcs.n	800feee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fee8:	230f      	movs	r3, #15
 800feea:	617b      	str	r3, [r7, #20]
 800feec:	e062      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	4a3c      	ldr	r2, [pc, #240]	; (800ffe4 <USB_SetTurnaroundTime+0x120>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d306      	bcc.n	800ff04 <USB_SetTurnaroundTime+0x40>
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	4a3b      	ldr	r2, [pc, #236]	; (800ffe8 <USB_SetTurnaroundTime+0x124>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d202      	bcs.n	800ff04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fefe:	230e      	movs	r3, #14
 800ff00:	617b      	str	r3, [r7, #20]
 800ff02:	e057      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	4a38      	ldr	r2, [pc, #224]	; (800ffe8 <USB_SetTurnaroundTime+0x124>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d306      	bcc.n	800ff1a <USB_SetTurnaroundTime+0x56>
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	4a37      	ldr	r2, [pc, #220]	; (800ffec <USB_SetTurnaroundTime+0x128>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d202      	bcs.n	800ff1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ff14:	230d      	movs	r3, #13
 800ff16:	617b      	str	r3, [r7, #20]
 800ff18:	e04c      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	4a33      	ldr	r2, [pc, #204]	; (800ffec <USB_SetTurnaroundTime+0x128>)
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d306      	bcc.n	800ff30 <USB_SetTurnaroundTime+0x6c>
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	4a32      	ldr	r2, [pc, #200]	; (800fff0 <USB_SetTurnaroundTime+0x12c>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d802      	bhi.n	800ff30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ff2a:	230c      	movs	r3, #12
 800ff2c:	617b      	str	r3, [r7, #20]
 800ff2e:	e041      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	4a2f      	ldr	r2, [pc, #188]	; (800fff0 <USB_SetTurnaroundTime+0x12c>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d906      	bls.n	800ff46 <USB_SetTurnaroundTime+0x82>
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	4a2e      	ldr	r2, [pc, #184]	; (800fff4 <USB_SetTurnaroundTime+0x130>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d802      	bhi.n	800ff46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ff40:	230b      	movs	r3, #11
 800ff42:	617b      	str	r3, [r7, #20]
 800ff44:	e036      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	4a2a      	ldr	r2, [pc, #168]	; (800fff4 <USB_SetTurnaroundTime+0x130>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d906      	bls.n	800ff5c <USB_SetTurnaroundTime+0x98>
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	4a29      	ldr	r2, [pc, #164]	; (800fff8 <USB_SetTurnaroundTime+0x134>)
 800ff52:	4293      	cmp	r3, r2
 800ff54:	d802      	bhi.n	800ff5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ff56:	230a      	movs	r3, #10
 800ff58:	617b      	str	r3, [r7, #20]
 800ff5a:	e02b      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	4a26      	ldr	r2, [pc, #152]	; (800fff8 <USB_SetTurnaroundTime+0x134>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d906      	bls.n	800ff72 <USB_SetTurnaroundTime+0xae>
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	4a25      	ldr	r2, [pc, #148]	; (800fffc <USB_SetTurnaroundTime+0x138>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d202      	bcs.n	800ff72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ff6c:	2309      	movs	r3, #9
 800ff6e:	617b      	str	r3, [r7, #20]
 800ff70:	e020      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	4a21      	ldr	r2, [pc, #132]	; (800fffc <USB_SetTurnaroundTime+0x138>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d306      	bcc.n	800ff88 <USB_SetTurnaroundTime+0xc4>
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	4a20      	ldr	r2, [pc, #128]	; (8010000 <USB_SetTurnaroundTime+0x13c>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d802      	bhi.n	800ff88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ff82:	2308      	movs	r3, #8
 800ff84:	617b      	str	r3, [r7, #20]
 800ff86:	e015      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	4a1d      	ldr	r2, [pc, #116]	; (8010000 <USB_SetTurnaroundTime+0x13c>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d906      	bls.n	800ff9e <USB_SetTurnaroundTime+0xda>
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	4a1c      	ldr	r2, [pc, #112]	; (8010004 <USB_SetTurnaroundTime+0x140>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d202      	bcs.n	800ff9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ff98:	2307      	movs	r3, #7
 800ff9a:	617b      	str	r3, [r7, #20]
 800ff9c:	e00a      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ff9e:	2306      	movs	r3, #6
 800ffa0:	617b      	str	r3, [r7, #20]
 800ffa2:	e007      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ffa4:	79fb      	ldrb	r3, [r7, #7]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d102      	bne.n	800ffb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ffaa:	2309      	movs	r3, #9
 800ffac:	617b      	str	r3, [r7, #20]
 800ffae:	e001      	b.n	800ffb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ffb0:	2309      	movs	r3, #9
 800ffb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	68da      	ldr	r2, [r3, #12]
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	029b      	lsls	r3, r3, #10
 800ffc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ffcc:	431a      	orrs	r2, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	371c      	adds	r7, #28
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr
 800ffe0:	00d8acbf 	.word	0x00d8acbf
 800ffe4:	00e4e1c0 	.word	0x00e4e1c0
 800ffe8:	00f42400 	.word	0x00f42400
 800ffec:	01067380 	.word	0x01067380
 800fff0:	011a499f 	.word	0x011a499f
 800fff4:	01312cff 	.word	0x01312cff
 800fff8:	014ca43f 	.word	0x014ca43f
 800fffc:	016e3600 	.word	0x016e3600
 8010000:	01a6ab1f 	.word	0x01a6ab1f
 8010004:	01e84800 	.word	0x01e84800

08010008 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	f043 0201 	orr.w	r2, r3, #1
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801001c:	2300      	movs	r3, #0
}
 801001e:	4618      	mov	r0, r3
 8010020:	370c      	adds	r7, #12
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr

0801002a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801002a:	b480      	push	{r7}
 801002c:	b083      	sub	sp, #12
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	f023 0201 	bic.w	r2, r3, #1
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	460b      	mov	r3, r1
 8010056:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010064:	78fb      	ldrb	r3, [r7, #3]
 8010066:	2b01      	cmp	r3, #1
 8010068:	d106      	bne.n	8010078 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	60da      	str	r2, [r3, #12]
 8010076:	e00b      	b.n	8010090 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010078:	78fb      	ldrb	r3, [r7, #3]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d106      	bne.n	801008c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	60da      	str	r2, [r3, #12]
 801008a:	e001      	b.n	8010090 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801008c:	2301      	movs	r3, #1
 801008e:	e003      	b.n	8010098 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010090:	2032      	movs	r0, #50	; 0x32
 8010092:	f7fb fdb3 	bl	800bbfc <HAL_Delay>

  return HAL_OK;
 8010096:	2300      	movs	r3, #0
}
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80100a0:	b084      	sub	sp, #16
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b086      	sub	sp, #24
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80100ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80100b2:	2300      	movs	r3, #0
 80100b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80100ba:	2300      	movs	r3, #0
 80100bc:	613b      	str	r3, [r7, #16]
 80100be:	e009      	b.n	80100d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	3340      	adds	r3, #64	; 0x40
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	4413      	add	r3, r2
 80100ca:	2200      	movs	r2, #0
 80100cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	3301      	adds	r3, #1
 80100d2:	613b      	str	r3, [r7, #16]
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	2b0e      	cmp	r3, #14
 80100d8:	d9f2      	bls.n	80100c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80100da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d11c      	bne.n	801011a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	68fa      	ldr	r2, [r7, #12]
 80100ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100ee:	f043 0302 	orr.w	r3, r3, #2
 80100f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010104:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010110:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	639a      	str	r2, [r3, #56]	; 0x38
 8010118:	e00b      	b.n	8010132 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801011e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801012a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010138:	461a      	mov	r2, r3
 801013a:	2300      	movs	r3, #0
 801013c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010144:	4619      	mov	r1, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801014c:	461a      	mov	r2, r3
 801014e:	680b      	ldr	r3, [r1, #0]
 8010150:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010154:	2b01      	cmp	r3, #1
 8010156:	d10c      	bne.n	8010172 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015a:	2b00      	cmp	r3, #0
 801015c:	d104      	bne.n	8010168 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801015e:	2100      	movs	r1, #0
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 f949 	bl	80103f8 <USB_SetDevSpeed>
 8010166:	e008      	b.n	801017a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010168:	2101      	movs	r1, #1
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 f944 	bl	80103f8 <USB_SetDevSpeed>
 8010170:	e003      	b.n	801017a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010172:	2103      	movs	r1, #3
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 f93f 	bl	80103f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801017a:	2110      	movs	r1, #16
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 f8f3 	bl	8010368 <USB_FlushTxFifo>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8010188:	2301      	movs	r3, #1
 801018a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 f911 	bl	80103b4 <USB_FlushRxFifo>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d001      	beq.n	801019c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8010198:	2301      	movs	r3, #1
 801019a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101a2:	461a      	mov	r2, r3
 80101a4:	2300      	movs	r3, #0
 80101a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ae:	461a      	mov	r2, r3
 80101b0:	2300      	movs	r3, #0
 80101b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ba:	461a      	mov	r2, r3
 80101bc:	2300      	movs	r3, #0
 80101be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101c0:	2300      	movs	r3, #0
 80101c2:	613b      	str	r3, [r7, #16]
 80101c4:	e043      	b.n	801024e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	015a      	lsls	r2, r3, #5
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	4413      	add	r3, r2
 80101ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101dc:	d118      	bne.n	8010210 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10a      	bne.n	80101fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	015a      	lsls	r2, r3, #5
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	4413      	add	r3, r2
 80101ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101f0:	461a      	mov	r2, r3
 80101f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80101f6:	6013      	str	r3, [r2, #0]
 80101f8:	e013      	b.n	8010222 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	015a      	lsls	r2, r3, #5
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	4413      	add	r3, r2
 8010202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010206:	461a      	mov	r2, r3
 8010208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801020c:	6013      	str	r3, [r2, #0]
 801020e:	e008      	b.n	8010222 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	015a      	lsls	r2, r3, #5
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	4413      	add	r3, r2
 8010218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801021c:	461a      	mov	r2, r3
 801021e:	2300      	movs	r3, #0
 8010220:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	015a      	lsls	r2, r3, #5
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	4413      	add	r3, r2
 801022a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022e:	461a      	mov	r2, r3
 8010230:	2300      	movs	r3, #0
 8010232:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	015a      	lsls	r2, r3, #5
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	4413      	add	r3, r2
 801023c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010240:	461a      	mov	r2, r3
 8010242:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	3301      	adds	r3, #1
 801024c:	613b      	str	r3, [r7, #16]
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	693a      	ldr	r2, [r7, #16]
 8010252:	429a      	cmp	r2, r3
 8010254:	d3b7      	bcc.n	80101c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010256:	2300      	movs	r3, #0
 8010258:	613b      	str	r3, [r7, #16]
 801025a:	e043      	b.n	80102e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	015a      	lsls	r2, r3, #5
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	4413      	add	r3, r2
 8010264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801026e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010272:	d118      	bne.n	80102a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d10a      	bne.n	8010290 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	015a      	lsls	r2, r3, #5
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	4413      	add	r3, r2
 8010282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010286:	461a      	mov	r2, r3
 8010288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801028c:	6013      	str	r3, [r2, #0]
 801028e:	e013      	b.n	80102b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	015a      	lsls	r2, r3, #5
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	4413      	add	r3, r2
 8010298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801029c:	461a      	mov	r2, r3
 801029e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80102a2:	6013      	str	r3, [r2, #0]
 80102a4:	e008      	b.n	80102b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	015a      	lsls	r2, r3, #5
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	4413      	add	r3, r2
 80102ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102b2:	461a      	mov	r2, r3
 80102b4:	2300      	movs	r3, #0
 80102b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	015a      	lsls	r2, r3, #5
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4413      	add	r3, r2
 80102c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c4:	461a      	mov	r2, r3
 80102c6:	2300      	movs	r3, #0
 80102c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	015a      	lsls	r2, r3, #5
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	4413      	add	r3, r2
 80102d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d6:	461a      	mov	r2, r3
 80102d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80102dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	3301      	adds	r3, #1
 80102e2:	613b      	str	r3, [r7, #16]
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	693a      	ldr	r2, [r7, #16]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d3b7      	bcc.n	801025c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2200      	movs	r2, #0
 8010304:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801030c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	2b00      	cmp	r3, #0
 8010312:	d105      	bne.n	8010320 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	f043 0210 	orr.w	r2, r3, #16
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	699a      	ldr	r2, [r3, #24]
 8010324:	4b0f      	ldr	r3, [pc, #60]	; (8010364 <USB_DevInit+0x2c4>)
 8010326:	4313      	orrs	r3, r2
 8010328:	687a      	ldr	r2, [r7, #4]
 801032a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801032c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032e:	2b00      	cmp	r3, #0
 8010330:	d005      	beq.n	801033e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	699b      	ldr	r3, [r3, #24]
 8010336:	f043 0208 	orr.w	r2, r3, #8
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801033e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010340:	2b01      	cmp	r3, #1
 8010342:	d107      	bne.n	8010354 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801034c:	f043 0304 	orr.w	r3, r3, #4
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010354:	7dfb      	ldrb	r3, [r7, #23]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3718      	adds	r7, #24
 801035a:	46bd      	mov	sp, r7
 801035c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010360:	b004      	add	sp, #16
 8010362:	4770      	bx	lr
 8010364:	803c3800 	.word	0x803c3800

08010368 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010368:	b480      	push	{r7}
 801036a:	b085      	sub	sp, #20
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010372:	2300      	movs	r3, #0
 8010374:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	019b      	lsls	r3, r3, #6
 801037a:	f043 0220 	orr.w	r2, r3, #32
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	3301      	adds	r3, #1
 8010386:	60fb      	str	r3, [r7, #12]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	4a09      	ldr	r2, [pc, #36]	; (80103b0 <USB_FlushTxFifo+0x48>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d901      	bls.n	8010394 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010390:	2303      	movs	r3, #3
 8010392:	e006      	b.n	80103a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	691b      	ldr	r3, [r3, #16]
 8010398:	f003 0320 	and.w	r3, r3, #32
 801039c:	2b20      	cmp	r3, #32
 801039e:	d0f0      	beq.n	8010382 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80103a0:	2300      	movs	r3, #0
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3714      	adds	r7, #20
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	00030d40 	.word	0x00030d40

080103b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b085      	sub	sp, #20
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80103bc:	2300      	movs	r3, #0
 80103be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2210      	movs	r2, #16
 80103c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	3301      	adds	r3, #1
 80103ca:	60fb      	str	r3, [r7, #12]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	4a09      	ldr	r2, [pc, #36]	; (80103f4 <USB_FlushRxFifo+0x40>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d901      	bls.n	80103d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80103d4:	2303      	movs	r3, #3
 80103d6:	e006      	b.n	80103e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	f003 0310 	and.w	r3, r3, #16
 80103e0:	2b10      	cmp	r3, #16
 80103e2:	d0f0      	beq.n	80103c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80103e4:	2300      	movs	r3, #0
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3714      	adds	r7, #20
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	00030d40 	.word	0x00030d40

080103f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	460b      	mov	r3, r1
 8010402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	78fb      	ldrb	r3, [r7, #3]
 8010412:	68f9      	ldr	r1, [r7, #12]
 8010414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010418:	4313      	orrs	r3, r2
 801041a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	3714      	adds	r7, #20
 8010422:	46bd      	mov	sp, r7
 8010424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010428:	4770      	bx	lr

0801042a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801042a:	b480      	push	{r7}
 801042c:	b087      	sub	sp, #28
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	f003 0306 	and.w	r3, r3, #6
 8010442:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d102      	bne.n	8010450 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801044a:	2300      	movs	r3, #0
 801044c:	75fb      	strb	r3, [r7, #23]
 801044e:	e00a      	b.n	8010466 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2b02      	cmp	r3, #2
 8010454:	d002      	beq.n	801045c <USB_GetDevSpeed+0x32>
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2b06      	cmp	r3, #6
 801045a:	d102      	bne.n	8010462 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801045c:	2302      	movs	r3, #2
 801045e:	75fb      	strb	r3, [r7, #23]
 8010460:	e001      	b.n	8010466 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010462:	230f      	movs	r3, #15
 8010464:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010466:	7dfb      	ldrb	r3, [r7, #23]
}
 8010468:	4618      	mov	r0, r3
 801046a:	371c      	adds	r7, #28
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	785b      	ldrb	r3, [r3, #1]
 801048c:	2b01      	cmp	r3, #1
 801048e:	d13a      	bne.n	8010506 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010496:	69da      	ldr	r2, [r3, #28]
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	f003 030f 	and.w	r3, r3, #15
 80104a0:	2101      	movs	r1, #1
 80104a2:	fa01 f303 	lsl.w	r3, r1, r3
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	68f9      	ldr	r1, [r7, #12]
 80104aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104ae:	4313      	orrs	r3, r2
 80104b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	015a      	lsls	r2, r3, #5
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	4413      	add	r3, r2
 80104ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d155      	bne.n	8010574 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	015a      	lsls	r2, r3, #5
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	4413      	add	r3, r2
 80104d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	78db      	ldrb	r3, [r3, #3]
 80104e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	059b      	lsls	r3, r3, #22
 80104ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104ec:	4313      	orrs	r3, r2
 80104ee:	68ba      	ldr	r2, [r7, #8]
 80104f0:	0151      	lsls	r1, r2, #5
 80104f2:	68fa      	ldr	r2, [r7, #12]
 80104f4:	440a      	add	r2, r1
 80104f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010502:	6013      	str	r3, [r2, #0]
 8010504:	e036      	b.n	8010574 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801050c:	69da      	ldr	r2, [r3, #28]
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	f003 030f 	and.w	r3, r3, #15
 8010516:	2101      	movs	r1, #1
 8010518:	fa01 f303 	lsl.w	r3, r1, r3
 801051c:	041b      	lsls	r3, r3, #16
 801051e:	68f9      	ldr	r1, [r7, #12]
 8010520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010524:	4313      	orrs	r3, r2
 8010526:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	015a      	lsls	r2, r3, #5
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	4413      	add	r3, r2
 8010530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801053a:	2b00      	cmp	r3, #0
 801053c:	d11a      	bne.n	8010574 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	015a      	lsls	r2, r3, #5
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	4413      	add	r3, r2
 8010546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	689b      	ldr	r3, [r3, #8]
 8010550:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	78db      	ldrb	r3, [r3, #3]
 8010558:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801055a:	430b      	orrs	r3, r1
 801055c:	4313      	orrs	r3, r2
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	0151      	lsls	r1, r2, #5
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	440a      	add	r2, r1
 8010566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801056e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010572:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3714      	adds	r7, #20
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr
	...

08010584 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	785b      	ldrb	r3, [r3, #1]
 801059c:	2b01      	cmp	r3, #1
 801059e:	d161      	bne.n	8010664 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	015a      	lsls	r2, r3, #5
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	4413      	add	r3, r2
 80105a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80105b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80105b6:	d11f      	bne.n	80105f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	015a      	lsls	r2, r3, #5
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	4413      	add	r3, r2
 80105c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	68ba      	ldr	r2, [r7, #8]
 80105c8:	0151      	lsls	r1, r2, #5
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	440a      	add	r2, r1
 80105ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80105d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	015a      	lsls	r2, r3, #5
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	4413      	add	r3, r2
 80105e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	68ba      	ldr	r2, [r7, #8]
 80105e8:	0151      	lsls	r1, r2, #5
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	440a      	add	r2, r1
 80105ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	f003 030f 	and.w	r3, r3, #15
 8010608:	2101      	movs	r1, #1
 801060a:	fa01 f303 	lsl.w	r3, r1, r3
 801060e:	b29b      	uxth	r3, r3
 8010610:	43db      	mvns	r3, r3
 8010612:	68f9      	ldr	r1, [r7, #12]
 8010614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010618:	4013      	ands	r3, r2
 801061a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010622:	69da      	ldr	r2, [r3, #28]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f003 030f 	and.w	r3, r3, #15
 801062c:	2101      	movs	r1, #1
 801062e:	fa01 f303 	lsl.w	r3, r1, r3
 8010632:	b29b      	uxth	r3, r3
 8010634:	43db      	mvns	r3, r3
 8010636:	68f9      	ldr	r1, [r7, #12]
 8010638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801063c:	4013      	ands	r3, r2
 801063e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	015a      	lsls	r2, r3, #5
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	4413      	add	r3, r2
 8010648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	0159      	lsls	r1, r3, #5
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	440b      	add	r3, r1
 8010656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801065a:	4619      	mov	r1, r3
 801065c:	4b35      	ldr	r3, [pc, #212]	; (8010734 <USB_DeactivateEndpoint+0x1b0>)
 801065e:	4013      	ands	r3, r2
 8010660:	600b      	str	r3, [r1, #0]
 8010662:	e060      	b.n	8010726 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	015a      	lsls	r2, r3, #5
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	4413      	add	r3, r2
 801066c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801067a:	d11f      	bne.n	80106bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	015a      	lsls	r2, r3, #5
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	4413      	add	r3, r2
 8010684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	68ba      	ldr	r2, [r7, #8]
 801068c:	0151      	lsls	r1, r2, #5
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	440a      	add	r2, r1
 8010692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801069a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	015a      	lsls	r2, r3, #5
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	4413      	add	r3, r2
 80106a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	0151      	lsls	r1, r2, #5
 80106ae:	68fa      	ldr	r2, [r7, #12]
 80106b0:	440a      	add	r2, r1
 80106b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	f003 030f 	and.w	r3, r3, #15
 80106cc:	2101      	movs	r1, #1
 80106ce:	fa01 f303 	lsl.w	r3, r1, r3
 80106d2:	041b      	lsls	r3, r3, #16
 80106d4:	43db      	mvns	r3, r3
 80106d6:	68f9      	ldr	r1, [r7, #12]
 80106d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106dc:	4013      	ands	r3, r2
 80106de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106e6:	69da      	ldr	r2, [r3, #28]
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	f003 030f 	and.w	r3, r3, #15
 80106f0:	2101      	movs	r1, #1
 80106f2:	fa01 f303 	lsl.w	r3, r1, r3
 80106f6:	041b      	lsls	r3, r3, #16
 80106f8:	43db      	mvns	r3, r3
 80106fa:	68f9      	ldr	r1, [r7, #12]
 80106fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010700:	4013      	ands	r3, r2
 8010702:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	015a      	lsls	r2, r3, #5
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	4413      	add	r3, r2
 801070c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	0159      	lsls	r1, r3, #5
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	440b      	add	r3, r1
 801071a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801071e:	4619      	mov	r1, r3
 8010720:	4b05      	ldr	r3, [pc, #20]	; (8010738 <USB_DeactivateEndpoint+0x1b4>)
 8010722:	4013      	ands	r3, r2
 8010724:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010726:	2300      	movs	r3, #0
}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr
 8010734:	ec337800 	.word	0xec337800
 8010738:	eff37800 	.word	0xeff37800

0801073c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b08a      	sub	sp, #40	; 0x28
 8010740:	af02      	add	r7, sp, #8
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	4613      	mov	r3, r2
 8010748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	785b      	ldrb	r3, [r3, #1]
 8010758:	2b01      	cmp	r3, #1
 801075a:	f040 815c 	bne.w	8010a16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	695b      	ldr	r3, [r3, #20]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d132      	bne.n	80107cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	015a      	lsls	r2, r3, #5
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	4413      	add	r3, r2
 801076e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010772:	691b      	ldr	r3, [r3, #16]
 8010774:	69ba      	ldr	r2, [r7, #24]
 8010776:	0151      	lsls	r1, r2, #5
 8010778:	69fa      	ldr	r2, [r7, #28]
 801077a:	440a      	add	r2, r1
 801077c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	015a      	lsls	r2, r3, #5
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	4413      	add	r3, r2
 8010792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	69ba      	ldr	r2, [r7, #24]
 801079a:	0151      	lsls	r1, r2, #5
 801079c:	69fa      	ldr	r2, [r7, #28]
 801079e:	440a      	add	r2, r1
 80107a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	015a      	lsls	r2, r3, #5
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	4413      	add	r3, r2
 80107b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107b6:	691b      	ldr	r3, [r3, #16]
 80107b8:	69ba      	ldr	r2, [r7, #24]
 80107ba:	0151      	lsls	r1, r2, #5
 80107bc:	69fa      	ldr	r2, [r7, #28]
 80107be:	440a      	add	r2, r1
 80107c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107c4:	0cdb      	lsrs	r3, r3, #19
 80107c6:	04db      	lsls	r3, r3, #19
 80107c8:	6113      	str	r3, [r2, #16]
 80107ca:	e074      	b.n	80108b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	015a      	lsls	r2, r3, #5
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	4413      	add	r3, r2
 80107d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107d8:	691b      	ldr	r3, [r3, #16]
 80107da:	69ba      	ldr	r2, [r7, #24]
 80107dc:	0151      	lsls	r1, r2, #5
 80107de:	69fa      	ldr	r2, [r7, #28]
 80107e0:	440a      	add	r2, r1
 80107e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107e6:	0cdb      	lsrs	r3, r3, #19
 80107e8:	04db      	lsls	r3, r3, #19
 80107ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	015a      	lsls	r2, r3, #5
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107f8:	691b      	ldr	r3, [r3, #16]
 80107fa:	69ba      	ldr	r2, [r7, #24]
 80107fc:	0151      	lsls	r1, r2, #5
 80107fe:	69fa      	ldr	r2, [r7, #28]
 8010800:	440a      	add	r2, r1
 8010802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010806:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801080a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801080e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801081c:	691a      	ldr	r2, [r3, #16]
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	6959      	ldr	r1, [r3, #20]
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	689b      	ldr	r3, [r3, #8]
 8010826:	440b      	add	r3, r1
 8010828:	1e59      	subs	r1, r3, #1
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010832:	04d9      	lsls	r1, r3, #19
 8010834:	4b9d      	ldr	r3, [pc, #628]	; (8010aac <USB_EPStartXfer+0x370>)
 8010836:	400b      	ands	r3, r1
 8010838:	69b9      	ldr	r1, [r7, #24]
 801083a:	0148      	lsls	r0, r1, #5
 801083c:	69f9      	ldr	r1, [r7, #28]
 801083e:	4401      	add	r1, r0
 8010840:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010844:	4313      	orrs	r3, r2
 8010846:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	015a      	lsls	r2, r3, #5
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	4413      	add	r3, r2
 8010850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010854:	691a      	ldr	r2, [r3, #16]
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	695b      	ldr	r3, [r3, #20]
 801085a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801085e:	69b9      	ldr	r1, [r7, #24]
 8010860:	0148      	lsls	r0, r1, #5
 8010862:	69f9      	ldr	r1, [r7, #28]
 8010864:	4401      	add	r1, r0
 8010866:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801086a:	4313      	orrs	r3, r2
 801086c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	78db      	ldrb	r3, [r3, #3]
 8010872:	2b01      	cmp	r3, #1
 8010874:	d11f      	bne.n	80108b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	015a      	lsls	r2, r3, #5
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	4413      	add	r3, r2
 801087e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010882:	691b      	ldr	r3, [r3, #16]
 8010884:	69ba      	ldr	r2, [r7, #24]
 8010886:	0151      	lsls	r1, r2, #5
 8010888:	69fa      	ldr	r2, [r7, #28]
 801088a:	440a      	add	r2, r1
 801088c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010890:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010894:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	015a      	lsls	r2, r3, #5
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	4413      	add	r3, r2
 801089e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108a2:	691b      	ldr	r3, [r3, #16]
 80108a4:	69ba      	ldr	r2, [r7, #24]
 80108a6:	0151      	lsls	r1, r2, #5
 80108a8:	69fa      	ldr	r2, [r7, #28]
 80108aa:	440a      	add	r2, r1
 80108ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80108b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80108b6:	79fb      	ldrb	r3, [r7, #7]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d14b      	bne.n	8010954 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	691b      	ldr	r3, [r3, #16]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d009      	beq.n	80108d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80108c4:	69bb      	ldr	r3, [r7, #24]
 80108c6:	015a      	lsls	r2, r3, #5
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	4413      	add	r3, r2
 80108cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108d0:	461a      	mov	r2, r3
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	691b      	ldr	r3, [r3, #16]
 80108d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	78db      	ldrb	r3, [r3, #3]
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d128      	bne.n	8010932 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108e6:	689b      	ldr	r3, [r3, #8]
 80108e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d110      	bne.n	8010912 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	015a      	lsls	r2, r3, #5
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	4413      	add	r3, r2
 80108f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	69ba      	ldr	r2, [r7, #24]
 8010900:	0151      	lsls	r1, r2, #5
 8010902:	69fa      	ldr	r2, [r7, #28]
 8010904:	440a      	add	r2, r1
 8010906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801090a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801090e:	6013      	str	r3, [r2, #0]
 8010910:	e00f      	b.n	8010932 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	015a      	lsls	r2, r3, #5
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	4413      	add	r3, r2
 801091a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	69ba      	ldr	r2, [r7, #24]
 8010922:	0151      	lsls	r1, r2, #5
 8010924:	69fa      	ldr	r2, [r7, #28]
 8010926:	440a      	add	r2, r1
 8010928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010930:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	015a      	lsls	r2, r3, #5
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	4413      	add	r3, r2
 801093a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	69ba      	ldr	r2, [r7, #24]
 8010942:	0151      	lsls	r1, r2, #5
 8010944:	69fa      	ldr	r2, [r7, #28]
 8010946:	440a      	add	r2, r1
 8010948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801094c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010950:	6013      	str	r3, [r2, #0]
 8010952:	e12f      	b.n	8010bb4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	015a      	lsls	r2, r3, #5
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	4413      	add	r3, r2
 801095c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	69ba      	ldr	r2, [r7, #24]
 8010964:	0151      	lsls	r1, r2, #5
 8010966:	69fa      	ldr	r2, [r7, #28]
 8010968:	440a      	add	r2, r1
 801096a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801096e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010972:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	78db      	ldrb	r3, [r3, #3]
 8010978:	2b01      	cmp	r3, #1
 801097a:	d015      	beq.n	80109a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	695b      	ldr	r3, [r3, #20]
 8010980:	2b00      	cmp	r3, #0
 8010982:	f000 8117 	beq.w	8010bb4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801098c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	f003 030f 	and.w	r3, r3, #15
 8010996:	2101      	movs	r1, #1
 8010998:	fa01 f303 	lsl.w	r3, r1, r3
 801099c:	69f9      	ldr	r1, [r7, #28]
 801099e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80109a2:	4313      	orrs	r3, r2
 80109a4:	634b      	str	r3, [r1, #52]	; 0x34
 80109a6:	e105      	b.n	8010bb4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d110      	bne.n	80109da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	015a      	lsls	r2, r3, #5
 80109bc:	69fb      	ldr	r3, [r7, #28]
 80109be:	4413      	add	r3, r2
 80109c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	69ba      	ldr	r2, [r7, #24]
 80109c8:	0151      	lsls	r1, r2, #5
 80109ca:	69fa      	ldr	r2, [r7, #28]
 80109cc:	440a      	add	r2, r1
 80109ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80109d6:	6013      	str	r3, [r2, #0]
 80109d8:	e00f      	b.n	80109fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	015a      	lsls	r2, r3, #5
 80109de:	69fb      	ldr	r3, [r7, #28]
 80109e0:	4413      	add	r3, r2
 80109e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	69ba      	ldr	r2, [r7, #24]
 80109ea:	0151      	lsls	r1, r2, #5
 80109ec:	69fa      	ldr	r2, [r7, #28]
 80109ee:	440a      	add	r2, r1
 80109f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80109f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	68d9      	ldr	r1, [r3, #12]
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	781a      	ldrb	r2, [r3, #0]
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	695b      	ldr	r3, [r3, #20]
 8010a06:	b298      	uxth	r0, r3
 8010a08:	79fb      	ldrb	r3, [r7, #7]
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f000 fa2b 	bl	8010e6a <USB_WritePacket>
 8010a14:	e0ce      	b.n	8010bb4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	015a      	lsls	r2, r3, #5
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	69ba      	ldr	r2, [r7, #24]
 8010a26:	0151      	lsls	r1, r2, #5
 8010a28:	69fa      	ldr	r2, [r7, #28]
 8010a2a:	440a      	add	r2, r1
 8010a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a30:	0cdb      	lsrs	r3, r3, #19
 8010a32:	04db      	lsls	r3, r3, #19
 8010a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	015a      	lsls	r2, r3, #5
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a42:	691b      	ldr	r3, [r3, #16]
 8010a44:	69ba      	ldr	r2, [r7, #24]
 8010a46:	0151      	lsls	r1, r2, #5
 8010a48:	69fa      	ldr	r2, [r7, #28]
 8010a4a:	440a      	add	r2, r1
 8010a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010a54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010a58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	695b      	ldr	r3, [r3, #20]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d126      	bne.n	8010ab0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	015a      	lsls	r2, r3, #5
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	4413      	add	r3, r2
 8010a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a6e:	691a      	ldr	r2, [r3, #16]
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a78:	69b9      	ldr	r1, [r7, #24]
 8010a7a:	0148      	lsls	r0, r1, #5
 8010a7c:	69f9      	ldr	r1, [r7, #28]
 8010a7e:	4401      	add	r1, r0
 8010a80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010a84:	4313      	orrs	r3, r2
 8010a86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010a88:	69bb      	ldr	r3, [r7, #24]
 8010a8a:	015a      	lsls	r2, r3, #5
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	4413      	add	r3, r2
 8010a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a94:	691b      	ldr	r3, [r3, #16]
 8010a96:	69ba      	ldr	r2, [r7, #24]
 8010a98:	0151      	lsls	r1, r2, #5
 8010a9a:	69fa      	ldr	r2, [r7, #28]
 8010a9c:	440a      	add	r2, r1
 8010a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010aa6:	6113      	str	r3, [r2, #16]
 8010aa8:	e036      	b.n	8010b18 <USB_EPStartXfer+0x3dc>
 8010aaa:	bf00      	nop
 8010aac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	695a      	ldr	r2, [r3, #20]
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	4413      	add	r3, r2
 8010aba:	1e5a      	subs	r2, r3, #1
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	689b      	ldr	r3, [r3, #8]
 8010ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ac4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	015a      	lsls	r2, r3, #5
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	4413      	add	r3, r2
 8010ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ad2:	691a      	ldr	r2, [r3, #16]
 8010ad4:	8afb      	ldrh	r3, [r7, #22]
 8010ad6:	04d9      	lsls	r1, r3, #19
 8010ad8:	4b39      	ldr	r3, [pc, #228]	; (8010bc0 <USB_EPStartXfer+0x484>)
 8010ada:	400b      	ands	r3, r1
 8010adc:	69b9      	ldr	r1, [r7, #24]
 8010ade:	0148      	lsls	r0, r1, #5
 8010ae0:	69f9      	ldr	r1, [r7, #28]
 8010ae2:	4401      	add	r1, r0
 8010ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010aec:	69bb      	ldr	r3, [r7, #24]
 8010aee:	015a      	lsls	r2, r3, #5
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	4413      	add	r3, r2
 8010af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010af8:	691a      	ldr	r2, [r3, #16]
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	8af9      	ldrh	r1, [r7, #22]
 8010b00:	fb01 f303 	mul.w	r3, r1, r3
 8010b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b08:	69b9      	ldr	r1, [r7, #24]
 8010b0a:	0148      	lsls	r0, r1, #5
 8010b0c:	69f9      	ldr	r1, [r7, #28]
 8010b0e:	4401      	add	r1, r0
 8010b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b14:	4313      	orrs	r3, r2
 8010b16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010b18:	79fb      	ldrb	r3, [r7, #7]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d10d      	bne.n	8010b3a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	68db      	ldr	r3, [r3, #12]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d009      	beq.n	8010b3a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	68d9      	ldr	r1, [r3, #12]
 8010b2a:	69bb      	ldr	r3, [r7, #24]
 8010b2c:	015a      	lsls	r2, r3, #5
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	4413      	add	r3, r2
 8010b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b36:	460a      	mov	r2, r1
 8010b38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	78db      	ldrb	r3, [r3, #3]
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d128      	bne.n	8010b94 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b48:	689b      	ldr	r3, [r3, #8]
 8010b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d110      	bne.n	8010b74 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010b52:	69bb      	ldr	r3, [r7, #24]
 8010b54:	015a      	lsls	r2, r3, #5
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	4413      	add	r3, r2
 8010b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	69ba      	ldr	r2, [r7, #24]
 8010b62:	0151      	lsls	r1, r2, #5
 8010b64:	69fa      	ldr	r2, [r7, #28]
 8010b66:	440a      	add	r2, r1
 8010b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b70:	6013      	str	r3, [r2, #0]
 8010b72:	e00f      	b.n	8010b94 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	015a      	lsls	r2, r3, #5
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	0151      	lsls	r1, r2, #5
 8010b86:	69fa      	ldr	r2, [r7, #28]
 8010b88:	440a      	add	r2, r1
 8010b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010b94:	69bb      	ldr	r3, [r7, #24]
 8010b96:	015a      	lsls	r2, r3, #5
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	69ba      	ldr	r2, [r7, #24]
 8010ba4:	0151      	lsls	r1, r2, #5
 8010ba6:	69fa      	ldr	r2, [r7, #28]
 8010ba8:	440a      	add	r2, r1
 8010baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010bb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3720      	adds	r7, #32
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	1ff80000 	.word	0x1ff80000

08010bc4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b087      	sub	sp, #28
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	4613      	mov	r3, r2
 8010bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	785b      	ldrb	r3, [r3, #1]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	f040 80cd 	bne.w	8010d80 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	695b      	ldr	r3, [r3, #20]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d132      	bne.n	8010c54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	015a      	lsls	r2, r3, #5
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	693a      	ldr	r2, [r7, #16]
 8010bfe:	0151      	lsls	r1, r2, #5
 8010c00:	697a      	ldr	r2, [r7, #20]
 8010c02:	440a      	add	r2, r1
 8010c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	015a      	lsls	r2, r3, #5
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	4413      	add	r3, r2
 8010c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	693a      	ldr	r2, [r7, #16]
 8010c22:	0151      	lsls	r1, r2, #5
 8010c24:	697a      	ldr	r2, [r7, #20]
 8010c26:	440a      	add	r2, r1
 8010c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	015a      	lsls	r2, r3, #5
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	4413      	add	r3, r2
 8010c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c3e:	691b      	ldr	r3, [r3, #16]
 8010c40:	693a      	ldr	r2, [r7, #16]
 8010c42:	0151      	lsls	r1, r2, #5
 8010c44:	697a      	ldr	r2, [r7, #20]
 8010c46:	440a      	add	r2, r1
 8010c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c4c:	0cdb      	lsrs	r3, r3, #19
 8010c4e:	04db      	lsls	r3, r3, #19
 8010c50:	6113      	str	r3, [r2, #16]
 8010c52:	e04e      	b.n	8010cf2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	015a      	lsls	r2, r3, #5
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c60:	691b      	ldr	r3, [r3, #16]
 8010c62:	693a      	ldr	r2, [r7, #16]
 8010c64:	0151      	lsls	r1, r2, #5
 8010c66:	697a      	ldr	r2, [r7, #20]
 8010c68:	440a      	add	r2, r1
 8010c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c6e:	0cdb      	lsrs	r3, r3, #19
 8010c70:	04db      	lsls	r3, r3, #19
 8010c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	015a      	lsls	r2, r3, #5
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c80:	691b      	ldr	r3, [r3, #16]
 8010c82:	693a      	ldr	r2, [r7, #16]
 8010c84:	0151      	lsls	r1, r2, #5
 8010c86:	697a      	ldr	r2, [r7, #20]
 8010c88:	440a      	add	r2, r1
 8010c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	695a      	ldr	r2, [r3, #20]
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	689b      	ldr	r3, [r3, #8]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d903      	bls.n	8010cac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	689a      	ldr	r2, [r3, #8]
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	015a      	lsls	r2, r3, #5
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cb8:	691b      	ldr	r3, [r3, #16]
 8010cba:	693a      	ldr	r2, [r7, #16]
 8010cbc:	0151      	lsls	r1, r2, #5
 8010cbe:	697a      	ldr	r2, [r7, #20]
 8010cc0:	440a      	add	r2, r1
 8010cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	015a      	lsls	r2, r3, #5
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cd8:	691a      	ldr	r2, [r3, #16]
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	695b      	ldr	r3, [r3, #20]
 8010cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010ce2:	6939      	ldr	r1, [r7, #16]
 8010ce4:	0148      	lsls	r0, r1, #5
 8010ce6:	6979      	ldr	r1, [r7, #20]
 8010ce8:	4401      	add	r1, r0
 8010cea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010cf2:	79fb      	ldrb	r3, [r7, #7]
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d11e      	bne.n	8010d36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	691b      	ldr	r3, [r3, #16]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d009      	beq.n	8010d14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	015a      	lsls	r2, r3, #5
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	4413      	add	r3, r2
 8010d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	691b      	ldr	r3, [r3, #16]
 8010d12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	015a      	lsls	r2, r3, #5
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	4413      	add	r3, r2
 8010d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	693a      	ldr	r2, [r7, #16]
 8010d24:	0151      	lsls	r1, r2, #5
 8010d26:	697a      	ldr	r2, [r7, #20]
 8010d28:	440a      	add	r2, r1
 8010d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d32:	6013      	str	r3, [r2, #0]
 8010d34:	e092      	b.n	8010e5c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	015a      	lsls	r2, r3, #5
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	693a      	ldr	r2, [r7, #16]
 8010d46:	0151      	lsls	r1, r2, #5
 8010d48:	697a      	ldr	r2, [r7, #20]
 8010d4a:	440a      	add	r2, r1
 8010d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	695b      	ldr	r3, [r3, #20]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d07e      	beq.n	8010e5c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	f003 030f 	and.w	r3, r3, #15
 8010d6e:	2101      	movs	r1, #1
 8010d70:	fa01 f303 	lsl.w	r3, r1, r3
 8010d74:	6979      	ldr	r1, [r7, #20]
 8010d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d7a:	4313      	orrs	r3, r2
 8010d7c:	634b      	str	r3, [r1, #52]	; 0x34
 8010d7e:	e06d      	b.n	8010e5c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	015a      	lsls	r2, r3, #5
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	4413      	add	r3, r2
 8010d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d8c:	691b      	ldr	r3, [r3, #16]
 8010d8e:	693a      	ldr	r2, [r7, #16]
 8010d90:	0151      	lsls	r1, r2, #5
 8010d92:	697a      	ldr	r2, [r7, #20]
 8010d94:	440a      	add	r2, r1
 8010d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d9a:	0cdb      	lsrs	r3, r3, #19
 8010d9c:	04db      	lsls	r3, r3, #19
 8010d9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	015a      	lsls	r2, r3, #5
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	4413      	add	r3, r2
 8010da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dac:	691b      	ldr	r3, [r3, #16]
 8010dae:	693a      	ldr	r2, [r7, #16]
 8010db0:	0151      	lsls	r1, r2, #5
 8010db2:	697a      	ldr	r2, [r7, #20]
 8010db4:	440a      	add	r2, r1
 8010db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010dbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010dc2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	695b      	ldr	r3, [r3, #20]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d003      	beq.n	8010dd4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	689a      	ldr	r2, [r3, #8]
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	015a      	lsls	r2, r3, #5
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	4413      	add	r3, r2
 8010ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	693a      	ldr	r2, [r7, #16]
 8010de4:	0151      	lsls	r1, r2, #5
 8010de6:	697a      	ldr	r2, [r7, #20]
 8010de8:	440a      	add	r2, r1
 8010dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010df2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	015a      	lsls	r2, r3, #5
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e00:	691a      	ldr	r2, [r3, #16]
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	689b      	ldr	r3, [r3, #8]
 8010e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e0a:	6939      	ldr	r1, [r7, #16]
 8010e0c:	0148      	lsls	r0, r1, #5
 8010e0e:	6979      	ldr	r1, [r7, #20]
 8010e10:	4401      	add	r1, r0
 8010e12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010e16:	4313      	orrs	r3, r2
 8010e18:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010e1a:	79fb      	ldrb	r3, [r7, #7]
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d10d      	bne.n	8010e3c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d009      	beq.n	8010e3c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	68d9      	ldr	r1, [r3, #12]
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	015a      	lsls	r2, r3, #5
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	4413      	add	r3, r2
 8010e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e38:	460a      	mov	r2, r1
 8010e3a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	015a      	lsls	r2, r3, #5
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	4413      	add	r3, r2
 8010e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	693a      	ldr	r2, [r7, #16]
 8010e4c:	0151      	lsls	r1, r2, #5
 8010e4e:	697a      	ldr	r2, [r7, #20]
 8010e50:	440a      	add	r2, r1
 8010e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	371c      	adds	r7, #28
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr

08010e6a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010e6a:	b480      	push	{r7}
 8010e6c:	b089      	sub	sp, #36	; 0x24
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	60f8      	str	r0, [r7, #12]
 8010e72:	60b9      	str	r1, [r7, #8]
 8010e74:	4611      	mov	r1, r2
 8010e76:	461a      	mov	r2, r3
 8010e78:	460b      	mov	r3, r1
 8010e7a:	71fb      	strb	r3, [r7, #7]
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010e88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d11a      	bne.n	8010ec6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010e90:	88bb      	ldrh	r3, [r7, #4]
 8010e92:	3303      	adds	r3, #3
 8010e94:	089b      	lsrs	r3, r3, #2
 8010e96:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010e98:	2300      	movs	r3, #0
 8010e9a:	61bb      	str	r3, [r7, #24]
 8010e9c:	e00f      	b.n	8010ebe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	031a      	lsls	r2, r3, #12
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	4413      	add	r3, r2
 8010ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010eaa:	461a      	mov	r2, r3
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	3304      	adds	r3, #4
 8010eb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	3301      	adds	r3, #1
 8010ebc:	61bb      	str	r3, [r7, #24]
 8010ebe:	69ba      	ldr	r2, [r7, #24]
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d3eb      	bcc.n	8010e9e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010ec6:	2300      	movs	r3, #0
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3724      	adds	r7, #36	; 0x24
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b089      	sub	sp, #36	; 0x24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	4613      	mov	r3, r2
 8010ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010eea:	88fb      	ldrh	r3, [r7, #6]
 8010eec:	3303      	adds	r3, #3
 8010eee:	089b      	lsrs	r3, r3, #2
 8010ef0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	61bb      	str	r3, [r7, #24]
 8010ef6:	e00b      	b.n	8010f10 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	601a      	str	r2, [r3, #0]
    pDest++;
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	3304      	adds	r3, #4
 8010f08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010f0a:	69bb      	ldr	r3, [r7, #24]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	61bb      	str	r3, [r7, #24]
 8010f10:	69ba      	ldr	r2, [r7, #24]
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d3ef      	bcc.n	8010ef8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010f18:	69fb      	ldr	r3, [r7, #28]
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3724      	adds	r7, #36	; 0x24
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr

08010f26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010f26:	b480      	push	{r7}
 8010f28:	b085      	sub	sp, #20
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]
 8010f2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	785b      	ldrb	r3, [r3, #1]
 8010f3e:	2b01      	cmp	r3, #1
 8010f40:	d12c      	bne.n	8010f9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	015a      	lsls	r2, r3, #5
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	4413      	add	r3, r2
 8010f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	db12      	blt.n	8010f7a <USB_EPSetStall+0x54>
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00f      	beq.n	8010f7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	015a      	lsls	r2, r3, #5
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	4413      	add	r3, r2
 8010f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	68ba      	ldr	r2, [r7, #8]
 8010f6a:	0151      	lsls	r1, r2, #5
 8010f6c:	68fa      	ldr	r2, [r7, #12]
 8010f6e:	440a      	add	r2, r1
 8010f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010f78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	015a      	lsls	r2, r3, #5
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	4413      	add	r3, r2
 8010f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	0151      	lsls	r1, r2, #5
 8010f8c:	68fa      	ldr	r2, [r7, #12]
 8010f8e:	440a      	add	r2, r1
 8010f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010f98:	6013      	str	r3, [r2, #0]
 8010f9a:	e02b      	b.n	8010ff4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	015a      	lsls	r2, r3, #5
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	db12      	blt.n	8010fd4 <USB_EPSetStall+0xae>
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d00f      	beq.n	8010fd4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	015a      	lsls	r2, r3, #5
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	4413      	add	r3, r2
 8010fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	0151      	lsls	r1, r2, #5
 8010fc6:	68fa      	ldr	r2, [r7, #12]
 8010fc8:	440a      	add	r2, r1
 8010fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010fd2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	015a      	lsls	r2, r3, #5
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	4413      	add	r3, r2
 8010fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	0151      	lsls	r1, r2, #5
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	440a      	add	r2, r1
 8010fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ff4:	2300      	movs	r3, #0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3714      	adds	r7, #20
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr

08011002 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011002:	b480      	push	{r7}
 8011004:	b085      	sub	sp, #20
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
 801100a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	785b      	ldrb	r3, [r3, #1]
 801101a:	2b01      	cmp	r3, #1
 801101c:	d128      	bne.n	8011070 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	015a      	lsls	r2, r3, #5
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	4413      	add	r3, r2
 8011026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	68ba      	ldr	r2, [r7, #8]
 801102e:	0151      	lsls	r1, r2, #5
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	440a      	add	r2, r1
 8011034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011038:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801103c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	78db      	ldrb	r3, [r3, #3]
 8011042:	2b03      	cmp	r3, #3
 8011044:	d003      	beq.n	801104e <USB_EPClearStall+0x4c>
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	78db      	ldrb	r3, [r3, #3]
 801104a:	2b02      	cmp	r3, #2
 801104c:	d138      	bne.n	80110c0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	015a      	lsls	r2, r3, #5
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	4413      	add	r3, r2
 8011056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	68ba      	ldr	r2, [r7, #8]
 801105e:	0151      	lsls	r1, r2, #5
 8011060:	68fa      	ldr	r2, [r7, #12]
 8011062:	440a      	add	r2, r1
 8011064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801106c:	6013      	str	r3, [r2, #0]
 801106e:	e027      	b.n	80110c0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	015a      	lsls	r2, r3, #5
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	4413      	add	r3, r2
 8011078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	0151      	lsls	r1, r2, #5
 8011082:	68fa      	ldr	r2, [r7, #12]
 8011084:	440a      	add	r2, r1
 8011086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801108a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801108e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	78db      	ldrb	r3, [r3, #3]
 8011094:	2b03      	cmp	r3, #3
 8011096:	d003      	beq.n	80110a0 <USB_EPClearStall+0x9e>
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	78db      	ldrb	r3, [r3, #3]
 801109c:	2b02      	cmp	r3, #2
 801109e:	d10f      	bne.n	80110c0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	015a      	lsls	r2, r3, #5
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	4413      	add	r3, r2
 80110a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	68ba      	ldr	r2, [r7, #8]
 80110b0:	0151      	lsls	r1, r2, #5
 80110b2:	68fa      	ldr	r2, [r7, #12]
 80110b4:	440a      	add	r2, r1
 80110b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80110be:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr

080110ce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80110ce:	b480      	push	{r7}
 80110d0:	b085      	sub	sp, #20
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
 80110d6:	460b      	mov	r3, r1
 80110d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80110ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80110f0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	78fb      	ldrb	r3, [r7, #3]
 80110fc:	011b      	lsls	r3, r3, #4
 80110fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011102:	68f9      	ldr	r1, [r7, #12]
 8011104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011108:	4313      	orrs	r3, r2
 801110a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801110c:	2300      	movs	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3714      	adds	r7, #20
 8011112:	46bd      	mov	sp, r7
 8011114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011118:	4770      	bx	lr

0801111a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801111a:	b480      	push	{r7}
 801111c:	b085      	sub	sp, #20
 801111e:	af00      	add	r7, sp, #0
 8011120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	68fa      	ldr	r2, [r7, #12]
 8011130:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011134:	f023 0303 	bic.w	r3, r3, #3
 8011138:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011148:	f023 0302 	bic.w	r3, r3, #2
 801114c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801114e:	2300      	movs	r3, #0
}
 8011150:	4618      	mov	r0, r3
 8011152:	3714      	adds	r7, #20
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801115c:	b480      	push	{r7}
 801115e:	b085      	sub	sp, #20
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011176:	f023 0303 	bic.w	r3, r3, #3
 801117a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801118a:	f043 0302 	orr.w	r3, r3, #2
 801118e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011190:	2300      	movs	r3, #0
}
 8011192:	4618      	mov	r0, r3
 8011194:	3714      	adds	r7, #20
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr

0801119e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801119e:	b480      	push	{r7}
 80111a0:	b085      	sub	sp, #20
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	695b      	ldr	r3, [r3, #20]
 80111aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	699b      	ldr	r3, [r3, #24]
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	4013      	ands	r3, r2
 80111b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80111b6:	68fb      	ldr	r3, [r7, #12]
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3714      	adds	r7, #20
 80111bc:	46bd      	mov	sp, r7
 80111be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c2:	4770      	bx	lr

080111c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111d6:	699b      	ldr	r3, [r3, #24]
 80111d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111e0:	69db      	ldr	r3, [r3, #28]
 80111e2:	68ba      	ldr	r2, [r7, #8]
 80111e4:	4013      	ands	r3, r2
 80111e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	0c1b      	lsrs	r3, r3, #16
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3714      	adds	r7, #20
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr

080111f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80111f8:	b480      	push	{r7}
 80111fa:	b085      	sub	sp, #20
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801120a:	699b      	ldr	r3, [r3, #24]
 801120c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011214:	69db      	ldr	r3, [r3, #28]
 8011216:	68ba      	ldr	r2, [r7, #8]
 8011218:	4013      	ands	r3, r2
 801121a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	b29b      	uxth	r3, r3
}
 8011220:	4618      	mov	r0, r3
 8011222:	3714      	adds	r7, #20
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801122c:	b480      	push	{r7}
 801122e:	b085      	sub	sp, #20
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	460b      	mov	r3, r1
 8011236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801123c:	78fb      	ldrb	r3, [r7, #3]
 801123e:	015a      	lsls	r2, r3, #5
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	4413      	add	r3, r2
 8011244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011248:	689b      	ldr	r3, [r3, #8]
 801124a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011252:	695b      	ldr	r3, [r3, #20]
 8011254:	68ba      	ldr	r2, [r7, #8]
 8011256:	4013      	ands	r3, r2
 8011258:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801125a:	68bb      	ldr	r3, [r7, #8]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3714      	adds	r7, #20
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011268:	b480      	push	{r7}
 801126a:	b087      	sub	sp, #28
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	460b      	mov	r3, r1
 8011272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801128a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801128c:	78fb      	ldrb	r3, [r7, #3]
 801128e:	f003 030f 	and.w	r3, r3, #15
 8011292:	68fa      	ldr	r2, [r7, #12]
 8011294:	fa22 f303 	lsr.w	r3, r2, r3
 8011298:	01db      	lsls	r3, r3, #7
 801129a:	b2db      	uxtb	r3, r3
 801129c:	693a      	ldr	r2, [r7, #16]
 801129e:	4313      	orrs	r3, r2
 80112a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80112a2:	78fb      	ldrb	r3, [r7, #3]
 80112a4:	015a      	lsls	r2, r3, #5
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	4413      	add	r3, r2
 80112aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112ae:	689b      	ldr	r3, [r3, #8]
 80112b0:	693a      	ldr	r2, [r7, #16]
 80112b2:	4013      	ands	r3, r2
 80112b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80112b6:	68bb      	ldr	r3, [r7, #8]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	371c      	adds	r7, #28
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	695b      	ldr	r3, [r3, #20]
 80112d0:	f003 0301 	and.w	r3, r3, #1
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr

080112e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80112e0:	b480      	push	{r7}
 80112e2:	b085      	sub	sp, #20
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80112fe:	f023 0307 	bic.w	r3, r3, #7
 8011302:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011316:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	3714      	adds	r7, #20
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr
	...

08011328 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011328:	b480      	push	{r7}
 801132a:	b087      	sub	sp, #28
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	460b      	mov	r3, r1
 8011332:	607a      	str	r2, [r7, #4]
 8011334:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	333c      	adds	r3, #60	; 0x3c
 801133e:	3304      	adds	r3, #4
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	4a26      	ldr	r2, [pc, #152]	; (80113e0 <USB_EP0_OutStart+0xb8>)
 8011348:	4293      	cmp	r3, r2
 801134a:	d90a      	bls.n	8011362 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801135c:	d101      	bne.n	8011362 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801135e:	2300      	movs	r3, #0
 8011360:	e037      	b.n	80113d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011368:	461a      	mov	r2, r3
 801136a:	2300      	movs	r3, #0
 801136c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	697a      	ldr	r2, [r7, #20]
 8011378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801137c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011388:	691b      	ldr	r3, [r3, #16]
 801138a:	697a      	ldr	r2, [r7, #20]
 801138c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011390:	f043 0318 	orr.w	r3, r3, #24
 8011394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	697a      	ldr	r2, [r7, #20]
 80113a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80113a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80113aa:	7afb      	ldrb	r3, [r7, #11]
 80113ac:	2b01      	cmp	r3, #1
 80113ae:	d10f      	bne.n	80113d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113b6:	461a      	mov	r2, r3
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	697a      	ldr	r2, [r7, #20]
 80113c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80113ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80113d0:	2300      	movs	r3, #0
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	371c      	adds	r7, #28
 80113d6:	46bd      	mov	sp, r7
 80113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	4f54300a 	.word	0x4f54300a

080113e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b085      	sub	sp, #20
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80113ec:	2300      	movs	r3, #0
 80113ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	3301      	adds	r3, #1
 80113f4:	60fb      	str	r3, [r7, #12]
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	4a13      	ldr	r2, [pc, #76]	; (8011448 <USB_CoreReset+0x64>)
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d901      	bls.n	8011402 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80113fe:	2303      	movs	r3, #3
 8011400:	e01b      	b.n	801143a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	691b      	ldr	r3, [r3, #16]
 8011406:	2b00      	cmp	r3, #0
 8011408:	daf2      	bge.n	80113f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801140a:	2300      	movs	r3, #0
 801140c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	691b      	ldr	r3, [r3, #16]
 8011412:	f043 0201 	orr.w	r2, r3, #1
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	3301      	adds	r3, #1
 801141e:	60fb      	str	r3, [r7, #12]
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	4a09      	ldr	r2, [pc, #36]	; (8011448 <USB_CoreReset+0x64>)
 8011424:	4293      	cmp	r3, r2
 8011426:	d901      	bls.n	801142c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011428:	2303      	movs	r3, #3
 801142a:	e006      	b.n	801143a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	691b      	ldr	r3, [r3, #16]
 8011430:	f003 0301 	and.w	r3, r3, #1
 8011434:	2b01      	cmp	r3, #1
 8011436:	d0f0      	beq.n	801141a <USB_CoreReset+0x36>

  return HAL_OK;
 8011438:	2300      	movs	r3, #0
}
 801143a:	4618      	mov	r0, r3
 801143c:	3714      	adds	r7, #20
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	00030d40 	.word	0x00030d40

0801144c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	460b      	mov	r3, r1
 8011456:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011458:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801145c:	f005 f820 	bl	80164a0 <malloc>
 8011460:	4603      	mov	r3, r0
 8011462:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d105      	bne.n	8011476 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011472:	2302      	movs	r3, #2
 8011474:	e066      	b.n	8011544 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	68fa      	ldr	r2, [r7, #12]
 801147a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	7c1b      	ldrb	r3, [r3, #16]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d119      	bne.n	80114ba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011486:	f44f 7300 	mov.w	r3, #512	; 0x200
 801148a:	2202      	movs	r2, #2
 801148c:	2181      	movs	r1, #129	; 0x81
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f004 fe8d 	bl	80161ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2201      	movs	r2, #1
 8011498:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801149a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801149e:	2202      	movs	r2, #2
 80114a0:	2101      	movs	r1, #1
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f004 fe83 	bl	80161ae <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2201      	movs	r2, #1
 80114ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2210      	movs	r2, #16
 80114b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80114b8:	e016      	b.n	80114e8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80114ba:	2340      	movs	r3, #64	; 0x40
 80114bc:	2202      	movs	r2, #2
 80114be:	2181      	movs	r1, #129	; 0x81
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f004 fe74 	bl	80161ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2201      	movs	r2, #1
 80114ca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80114cc:	2340      	movs	r3, #64	; 0x40
 80114ce:	2202      	movs	r2, #2
 80114d0:	2101      	movs	r1, #1
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f004 fe6b 	bl	80161ae <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2201      	movs	r2, #1
 80114dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2210      	movs	r2, #16
 80114e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80114e8:	2308      	movs	r3, #8
 80114ea:	2203      	movs	r2, #3
 80114ec:	2182      	movs	r1, #130	; 0x82
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f004 fe5d 	bl	80161ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2201      	movs	r2, #1
 80114f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2200      	movs	r2, #0
 801150a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	2200      	movs	r2, #0
 8011512:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	7c1b      	ldrb	r3, [r3, #16]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d109      	bne.n	8011532 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011528:	2101      	movs	r1, #1
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f004 ff2e 	bl	801638c <USBD_LL_PrepareReceive>
 8011530:	e007      	b.n	8011542 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011538:	2340      	movs	r3, #64	; 0x40
 801153a:	2101      	movs	r1, #1
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f004 ff25 	bl	801638c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	3710      	adds	r7, #16
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	460b      	mov	r3, r1
 8011556:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011558:	2300      	movs	r3, #0
 801155a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801155c:	2181      	movs	r1, #129	; 0x81
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f004 fe4b 	bl	80161fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2200      	movs	r2, #0
 8011568:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801156a:	2101      	movs	r1, #1
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f004 fe44 	bl	80161fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801157a:	2182      	movs	r1, #130	; 0x82
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f004 fe3c 	bl	80161fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2200      	movs	r2, #0
 8011586:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011598:	2b00      	cmp	r3, #0
 801159a:	d00e      	beq.n	80115ba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ac:	4618      	mov	r0, r3
 80115ae:	f004 ff7f 	bl	80164b0 <free>
    pdev->pClassData = NULL;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80115ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3710      	adds	r7, #16
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b086      	sub	sp, #24
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115d4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80115d6:	2300      	movs	r3, #0
 80115d8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80115da:	2300      	movs	r3, #0
 80115dc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80115de:	2300      	movs	r3, #0
 80115e0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d03a      	beq.n	8011664 <USBD_CDC_Setup+0xa0>
 80115ee:	2b20      	cmp	r3, #32
 80115f0:	f040 8097 	bne.w	8011722 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	88db      	ldrh	r3, [r3, #6]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d029      	beq.n	8011650 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	b25b      	sxtb	r3, r3
 8011602:	2b00      	cmp	r3, #0
 8011604:	da11      	bge.n	801162a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	683a      	ldr	r2, [r7, #0]
 8011610:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8011612:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011614:	683a      	ldr	r2, [r7, #0]
 8011616:	88d2      	ldrh	r2, [r2, #6]
 8011618:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801161a:	6939      	ldr	r1, [r7, #16]
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	88db      	ldrh	r3, [r3, #6]
 8011620:	461a      	mov	r2, r3
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f001 faac 	bl	8012b80 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8011628:	e082      	b.n	8011730 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	785a      	ldrb	r2, [r3, #1]
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	88db      	ldrh	r3, [r3, #6]
 8011638:	b2da      	uxtb	r2, r3
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011640:	6939      	ldr	r1, [r7, #16]
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	88db      	ldrh	r3, [r3, #6]
 8011646:	461a      	mov	r2, r3
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f001 fac5 	bl	8012bd8 <USBD_CtlPrepareRx>
    break;
 801164e:	e06f      	b.n	8011730 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011656:	689b      	ldr	r3, [r3, #8]
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	7850      	ldrb	r0, [r2, #1]
 801165c:	2200      	movs	r2, #0
 801165e:	6839      	ldr	r1, [r7, #0]
 8011660:	4798      	blx	r3
    break;
 8011662:	e065      	b.n	8011730 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	785b      	ldrb	r3, [r3, #1]
 8011668:	2b0b      	cmp	r3, #11
 801166a:	d84f      	bhi.n	801170c <USBD_CDC_Setup+0x148>
 801166c:	a201      	add	r2, pc, #4	; (adr r2, 8011674 <USBD_CDC_Setup+0xb0>)
 801166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011672:	bf00      	nop
 8011674:	080116a5 	.word	0x080116a5
 8011678:	0801171b 	.word	0x0801171b
 801167c:	0801170d 	.word	0x0801170d
 8011680:	0801170d 	.word	0x0801170d
 8011684:	0801170d 	.word	0x0801170d
 8011688:	0801170d 	.word	0x0801170d
 801168c:	0801170d 	.word	0x0801170d
 8011690:	0801170d 	.word	0x0801170d
 8011694:	0801170d 	.word	0x0801170d
 8011698:	0801170d 	.word	0x0801170d
 801169c:	080116cd 	.word	0x080116cd
 80116a0:	080116f5 	.word	0x080116f5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116aa:	2b03      	cmp	r3, #3
 80116ac:	d107      	bne.n	80116be <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80116ae:	f107 030c 	add.w	r3, r7, #12
 80116b2:	2202      	movs	r2, #2
 80116b4:	4619      	mov	r1, r3
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f001 fa62 	bl	8012b80 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80116bc:	e030      	b.n	8011720 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80116be:	6839      	ldr	r1, [r7, #0]
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f001 f9ec 	bl	8012a9e <USBD_CtlError>
        ret = USBD_FAIL;
 80116c6:	2303      	movs	r3, #3
 80116c8:	75fb      	strb	r3, [r7, #23]
      break;
 80116ca:	e029      	b.n	8011720 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116d2:	2b03      	cmp	r3, #3
 80116d4:	d107      	bne.n	80116e6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80116d6:	f107 030f 	add.w	r3, r7, #15
 80116da:	2201      	movs	r2, #1
 80116dc:	4619      	mov	r1, r3
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f001 fa4e 	bl	8012b80 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80116e4:	e01c      	b.n	8011720 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80116e6:	6839      	ldr	r1, [r7, #0]
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f001 f9d8 	bl	8012a9e <USBD_CtlError>
        ret = USBD_FAIL;
 80116ee:	2303      	movs	r3, #3
 80116f0:	75fb      	strb	r3, [r7, #23]
      break;
 80116f2:	e015      	b.n	8011720 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116fa:	2b03      	cmp	r3, #3
 80116fc:	d00f      	beq.n	801171e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80116fe:	6839      	ldr	r1, [r7, #0]
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f001 f9cc 	bl	8012a9e <USBD_CtlError>
        ret = USBD_FAIL;
 8011706:	2303      	movs	r3, #3
 8011708:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801170a:	e008      	b.n	801171e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 801170c:	6839      	ldr	r1, [r7, #0]
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f001 f9c5 	bl	8012a9e <USBD_CtlError>
      ret = USBD_FAIL;
 8011714:	2303      	movs	r3, #3
 8011716:	75fb      	strb	r3, [r7, #23]
      break;
 8011718:	e002      	b.n	8011720 <USBD_CDC_Setup+0x15c>
      break;
 801171a:	bf00      	nop
 801171c:	e008      	b.n	8011730 <USBD_CDC_Setup+0x16c>
      break;
 801171e:	bf00      	nop
    }
    break;
 8011720:	e006      	b.n	8011730 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8011722:	6839      	ldr	r1, [r7, #0]
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f001 f9ba 	bl	8012a9e <USBD_CtlError>
    ret = USBD_FAIL;
 801172a:	2303      	movs	r3, #3
 801172c:	75fb      	strb	r3, [r7, #23]
    break;
 801172e:	bf00      	nop
  }

  return (uint8_t)ret;
 8011730:	7dfb      	ldrb	r3, [r7, #23]
}
 8011732:	4618      	mov	r0, r3
 8011734:	3718      	adds	r7, #24
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop

0801173c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	460b      	mov	r3, r1
 8011746:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801174e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011756:	2b00      	cmp	r3, #0
 8011758:	d101      	bne.n	801175e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801175a:	2303      	movs	r3, #3
 801175c:	e049      	b.n	80117f2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011764:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011766:	78fa      	ldrb	r2, [r7, #3]
 8011768:	6879      	ldr	r1, [r7, #4]
 801176a:	4613      	mov	r3, r2
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	4413      	add	r3, r2
 8011770:	009b      	lsls	r3, r3, #2
 8011772:	440b      	add	r3, r1
 8011774:	3318      	adds	r3, #24
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d029      	beq.n	80117d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801177c:	78fa      	ldrb	r2, [r7, #3]
 801177e:	6879      	ldr	r1, [r7, #4]
 8011780:	4613      	mov	r3, r2
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	4413      	add	r3, r2
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	440b      	add	r3, r1
 801178a:	3318      	adds	r3, #24
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	78f9      	ldrb	r1, [r7, #3]
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	460b      	mov	r3, r1
 8011794:	00db      	lsls	r3, r3, #3
 8011796:	1a5b      	subs	r3, r3, r1
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	4403      	add	r3, r0
 801179c:	3344      	adds	r3, #68	; 0x44
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80117a4:	fb03 f301 	mul.w	r3, r3, r1
 80117a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d110      	bne.n	80117d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80117ae:	78fa      	ldrb	r2, [r7, #3]
 80117b0:	6879      	ldr	r1, [r7, #4]
 80117b2:	4613      	mov	r3, r2
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	4413      	add	r3, r2
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	440b      	add	r3, r1
 80117bc:	3318      	adds	r3, #24
 80117be:	2200      	movs	r2, #0
 80117c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80117c2:	78f9      	ldrb	r1, [r7, #3]
 80117c4:	2300      	movs	r3, #0
 80117c6:	2200      	movs	r2, #0
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f004 fdbe 	bl	801634a <USBD_LL_Transmit>
 80117ce:	e00f      	b.n	80117f0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	2200      	movs	r2, #0
 80117d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117de:	691b      	ldr	r3, [r3, #16]
 80117e0:	68ba      	ldr	r2, [r7, #8]
 80117e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80117e6:	68ba      	ldr	r2, [r7, #8]
 80117e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80117ec:	78fa      	ldrb	r2, [r7, #3]
 80117ee:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80117f0:	2300      	movs	r3, #0
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}

080117fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80117fa:	b580      	push	{r7, lr}
 80117fc:	b084      	sub	sp, #16
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
 8011802:	460b      	mov	r3, r1
 8011804:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801180c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011814:	2b00      	cmp	r3, #0
 8011816:	d101      	bne.n	801181c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011818:	2303      	movs	r3, #3
 801181a:	e015      	b.n	8011848 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801181c:	78fb      	ldrb	r3, [r7, #3]
 801181e:	4619      	mov	r1, r3
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f004 fdd4 	bl	80163ce <USBD_LL_GetRxDataSize>
 8011826:	4602      	mov	r2, r0
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011842:	4611      	mov	r1, r2
 8011844:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011846:	2300      	movs	r3, #0
}
 8011848:	4618      	mov	r0, r3
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801185e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d015      	beq.n	8011896 <USBD_CDC_EP0_RxReady+0x46>
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011870:	2bff      	cmp	r3, #255	; 0xff
 8011872:	d010      	beq.n	8011896 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801187a:	689b      	ldr	r3, [r3, #8]
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011882:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011884:	68fa      	ldr	r2, [r7, #12]
 8011886:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801188a:	b292      	uxth	r2, r2
 801188c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	22ff      	movs	r2, #255	; 0xff
 8011892:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011896:	2300      	movs	r3, #0
}
 8011898:	4618      	mov	r0, r3
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2243      	movs	r2, #67	; 0x43
 80118ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80118ae:	4b03      	ldr	r3, [pc, #12]	; (80118bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	370c      	adds	r7, #12
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr
 80118bc:	20004120 	.word	0x20004120

080118c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b083      	sub	sp, #12
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2243      	movs	r2, #67	; 0x43
 80118cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80118ce:	4b03      	ldr	r3, [pc, #12]	; (80118dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr
 80118dc:	200040dc 	.word	0x200040dc

080118e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2243      	movs	r2, #67	; 0x43
 80118ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80118ee:	4b03      	ldr	r3, [pc, #12]	; (80118fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	370c      	adds	r7, #12
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr
 80118fc:	20004164 	.word	0x20004164

08011900 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	220a      	movs	r2, #10
 801190c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801190e:	4b03      	ldr	r3, [pc, #12]	; (801191c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011910:	4618      	mov	r0, r3
 8011912:	370c      	adds	r7, #12
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr
 801191c:	20004098 	.word	0x20004098

08011920 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d101      	bne.n	8011934 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011930:	2303      	movs	r3, #3
 8011932:	e004      	b.n	801193e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	683a      	ldr	r2, [r7, #0]
 8011938:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801193c:	2300      	movs	r3, #0
}
 801193e:	4618      	mov	r0, r3
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr

0801194a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801194a:	b480      	push	{r7}
 801194c:	b087      	sub	sp, #28
 801194e:	af00      	add	r7, sp, #0
 8011950:	60f8      	str	r0, [r7, #12]
 8011952:	60b9      	str	r1, [r7, #8]
 8011954:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801195c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	68ba      	ldr	r2, [r7, #8]
 8011962:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	371c      	adds	r7, #28
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801198c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	683a      	ldr	r2, [r7, #0]
 8011992:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011996:	2300      	movs	r3, #0
}
 8011998:	4618      	mov	r0, r3
 801199a:	3714      	adds	r7, #20
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr

080119a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80119b4:	2301      	movs	r3, #1
 80119b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d101      	bne.n	80119c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80119c2:	2303      	movs	r3, #3
 80119c4:	e01a      	b.n	80119fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d114      	bne.n	80119fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	2201      	movs	r2, #1
 80119d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80119ee:	2181      	movs	r1, #129	; 0x81
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f004 fcaa 	bl	801634a <USBD_LL_Transmit>

    ret = USBD_OK;
 80119f6:	2300      	movs	r3, #0
 80119f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80119fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3710      	adds	r7, #16
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d101      	bne.n	8011a22 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011a1e:	2303      	movs	r3, #3
 8011a20:	e016      	b.n	8011a50 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	7c1b      	ldrb	r3, [r3, #16]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d109      	bne.n	8011a3e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a34:	2101      	movs	r1, #1
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f004 fca8 	bl	801638c <USBD_LL_PrepareReceive>
 8011a3c:	e007      	b.n	8011a4e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a44:	2340      	movs	r3, #64	; 0x40
 8011a46:	2101      	movs	r1, #1
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f004 fc9f 	bl	801638c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011a4e:	2300      	movs	r3, #0
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3710      	adds	r7, #16
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b086      	sub	sp, #24
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	4613      	mov	r3, r2
 8011a64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d101      	bne.n	8011a70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011a6c:	2303      	movs	r3, #3
 8011a6e:	e025      	b.n	8011abc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d003      	beq.n	8011a82 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d003      	beq.n	8011a94 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d003      	beq.n	8011aa2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	68ba      	ldr	r2, [r7, #8]
 8011a9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	79fa      	ldrb	r2, [r7, #7]
 8011aae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f004 fb15 	bl	80160e0 <USBD_LL_Init>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3718      	adds	r7, #24
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b084      	sub	sp, #16
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d101      	bne.n	8011adc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011ad8:	2303      	movs	r3, #3
 8011ada:	e010      	b.n	8011afe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	683a      	ldr	r2, [r7, #0]
 8011ae0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aec:	f107 020e 	add.w	r2, r7, #14
 8011af0:	4610      	mov	r0, r2
 8011af2:	4798      	blx	r3
 8011af4:	4602      	mov	r2, r0
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b082      	sub	sp, #8
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f004 fb32 	bl	8016178 <USBD_LL_Start>
 8011b14:	4603      	mov	r3, r0
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3708      	adds	r7, #8
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011b1e:	b480      	push	{r7}
 8011b20:	b083      	sub	sp, #12
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	370c      	adds	r7, #12
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011b40:	2303      	movs	r3, #3
 8011b42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d009      	beq.n	8011b62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	78fa      	ldrb	r2, [r7, #3]
 8011b58:	4611      	mov	r1, r2
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	4798      	blx	r3
 8011b5e:	4603      	mov	r3, r0
 8011b60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3710      	adds	r7, #16
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	460b      	mov	r3, r1
 8011b76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d007      	beq.n	8011b92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	78fa      	ldrb	r2, [r7, #3]
 8011b8c:	4611      	mov	r1, r2
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	4798      	blx	r3
  }

  return USBD_OK;
 8011b92:	2300      	movs	r3, #0
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3708      	adds	r7, #8
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}

08011b9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f000 ff3b 	bl	8012a2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011bd0:	f003 031f 	and.w	r3, r3, #31
 8011bd4:	2b02      	cmp	r3, #2
 8011bd6:	d01a      	beq.n	8011c0e <USBD_LL_SetupStage+0x72>
 8011bd8:	2b02      	cmp	r3, #2
 8011bda:	d822      	bhi.n	8011c22 <USBD_LL_SetupStage+0x86>
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d002      	beq.n	8011be6 <USBD_LL_SetupStage+0x4a>
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d00a      	beq.n	8011bfa <USBD_LL_SetupStage+0x5e>
 8011be4:	e01d      	b.n	8011c22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bec:	4619      	mov	r1, r3
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 fa18 	bl	8012024 <USBD_StdDevReq>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8011bf8:	e020      	b.n	8011c3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c00:	4619      	mov	r1, r3
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 fa7c 	bl	8012100 <USBD_StdItfReq>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8011c0c:	e016      	b.n	8011c3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c14:	4619      	mov	r1, r3
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f000 faba 	bl	8012190 <USBD_StdEPReq>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8011c20:	e00c      	b.n	8011c3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	4619      	mov	r1, r3
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f004 fb01 	bl	8016238 <USBD_LL_StallEP>
 8011c36:	4603      	mov	r3, r0
 8011c38:	73fb      	strb	r3, [r7, #15]
      break;
 8011c3a:	bf00      	nop
  }

  return ret;
 8011c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}

08011c46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b086      	sub	sp, #24
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	60f8      	str	r0, [r7, #12]
 8011c4e:	460b      	mov	r3, r1
 8011c50:	607a      	str	r2, [r7, #4]
 8011c52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011c54:	7afb      	ldrb	r3, [r7, #11]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d137      	bne.n	8011cca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011c60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c68:	2b03      	cmp	r3, #3
 8011c6a:	d14a      	bne.n	8011d02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	689a      	ldr	r2, [r3, #8]
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	68db      	ldr	r3, [r3, #12]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d913      	bls.n	8011ca0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	689a      	ldr	r2, [r3, #8]
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	1ad2      	subs	r2, r2, r3
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	68da      	ldr	r2, [r3, #12]
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	689b      	ldr	r3, [r3, #8]
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	bf28      	it	cs
 8011c92:	4613      	movcs	r3, r2
 8011c94:	461a      	mov	r2, r3
 8011c96:	6879      	ldr	r1, [r7, #4]
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f000 ffba 	bl	8012c12 <USBD_CtlContinueRx>
 8011c9e:	e030      	b.n	8011d02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ca6:	691b      	ldr	r3, [r3, #16]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d00a      	beq.n	8011cc2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011cb2:	2b03      	cmp	r3, #3
 8011cb4:	d105      	bne.n	8011cc2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cbc:	691b      	ldr	r3, [r3, #16]
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011cc2:	68f8      	ldr	r0, [r7, #12]
 8011cc4:	f000 ffb6 	bl	8012c34 <USBD_CtlSendStatus>
 8011cc8:	e01b      	b.n	8011d02 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cd0:	699b      	ldr	r3, [r3, #24]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d013      	beq.n	8011cfe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011cdc:	2b03      	cmp	r3, #3
 8011cde:	d10e      	bne.n	8011cfe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ce6:	699b      	ldr	r3, [r3, #24]
 8011ce8:	7afa      	ldrb	r2, [r7, #11]
 8011cea:	4611      	mov	r1, r2
 8011cec:	68f8      	ldr	r0, [r7, #12]
 8011cee:	4798      	blx	r3
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011cf4:	7dfb      	ldrb	r3, [r7, #23]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d003      	beq.n	8011d02 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011cfa:	7dfb      	ldrb	r3, [r7, #23]
 8011cfc:	e002      	b.n	8011d04 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011cfe:	2303      	movs	r3, #3
 8011d00:	e000      	b.n	8011d04 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011d02:	2300      	movs	r3, #0
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3718      	adds	r7, #24
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b086      	sub	sp, #24
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	460b      	mov	r3, r1
 8011d16:	607a      	str	r2, [r7, #4]
 8011d18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011d1a:	7afb      	ldrb	r3, [r7, #11]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d16a      	bne.n	8011df6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	3314      	adds	r3, #20
 8011d24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d2c:	2b02      	cmp	r3, #2
 8011d2e:	d155      	bne.n	8011ddc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	689a      	ldr	r2, [r3, #8]
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d914      	bls.n	8011d66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	689a      	ldr	r2, [r3, #8]
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	1ad2      	subs	r2, r2, r3
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	689b      	ldr	r3, [r3, #8]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	6879      	ldr	r1, [r7, #4]
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f000 ff2f 	bl	8012bb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d58:	2300      	movs	r3, #0
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	68f8      	ldr	r0, [r7, #12]
 8011d60:	f004 fb14 	bl	801638c <USBD_LL_PrepareReceive>
 8011d64:	e03a      	b.n	8011ddc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	68da      	ldr	r2, [r3, #12]
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	689b      	ldr	r3, [r3, #8]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d11c      	bne.n	8011dac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d316      	bcc.n	8011dac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	685a      	ldr	r2, [r3, #4]
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d20f      	bcs.n	8011dac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	2100      	movs	r1, #0
 8011d90:	68f8      	ldr	r0, [r7, #12]
 8011d92:	f000 ff10 	bl	8012bb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d9e:	2300      	movs	r3, #0
 8011da0:	2200      	movs	r2, #0
 8011da2:	2100      	movs	r1, #0
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f004 faf1 	bl	801638c <USBD_LL_PrepareReceive>
 8011daa:	e017      	b.n	8011ddc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00a      	beq.n	8011dce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011dbe:	2b03      	cmp	r3, #3
 8011dc0:	d105      	bne.n	8011dce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011dce:	2180      	movs	r1, #128	; 0x80
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f004 fa31 	bl	8016238 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f000 ff3f 	bl	8012c5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011de2:	2b01      	cmp	r3, #1
 8011de4:	d123      	bne.n	8011e2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f7ff fe99 	bl	8011b1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2200      	movs	r2, #0
 8011df0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011df4:	e01b      	b.n	8011e2e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dfc:	695b      	ldr	r3, [r3, #20]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d013      	beq.n	8011e2a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011e08:	2b03      	cmp	r3, #3
 8011e0a:	d10e      	bne.n	8011e2a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e12:	695b      	ldr	r3, [r3, #20]
 8011e14:	7afa      	ldrb	r2, [r7, #11]
 8011e16:	4611      	mov	r1, r2
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	4798      	blx	r3
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011e20:	7dfb      	ldrb	r3, [r7, #23]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d003      	beq.n	8011e2e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011e26:	7dfb      	ldrb	r3, [r7, #23]
 8011e28:	e002      	b.n	8011e30 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011e2a:	2303      	movs	r3, #3
 8011e2c:	e000      	b.n	8011e30 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011e2e:	2300      	movs	r3, #0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3718      	adds	r7, #24
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2201      	movs	r2, #1
 8011e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d009      	beq.n	8011e7c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e6e:	685b      	ldr	r3, [r3, #4]
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	6852      	ldr	r2, [r2, #4]
 8011e74:	b2d2      	uxtb	r2, r2
 8011e76:	4611      	mov	r1, r2
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e7c:	2340      	movs	r3, #64	; 0x40
 8011e7e:	2200      	movs	r2, #0
 8011e80:	2100      	movs	r1, #0
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f004 f993 	bl	80161ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2240      	movs	r2, #64	; 0x40
 8011e94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e98:	2340      	movs	r3, #64	; 0x40
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	2180      	movs	r1, #128	; 0x80
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f004 f985 	bl	80161ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2240      	movs	r2, #64	; 0x40
 8011eae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011eba:	b480      	push	{r7}
 8011ebc:	b083      	sub	sp, #12
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	460b      	mov	r3, r1
 8011ec4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	78fa      	ldrb	r2, [r7, #3]
 8011eca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ecc:	2300      	movs	r3, #0
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	370c      	adds	r7, #12
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr

08011eda <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011eda:	b480      	push	{r7}
 8011edc:	b083      	sub	sp, #12
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2204      	movs	r2, #4
 8011ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b083      	sub	sp, #12
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f12:	2b04      	cmp	r3, #4
 8011f14:	d105      	bne.n	8011f22 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011f22:	2300      	movs	r3, #0
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	370c      	adds	r7, #12
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr

08011f30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f3e:	2b03      	cmp	r3, #3
 8011f40:	d10b      	bne.n	8011f5a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f48:	69db      	ldr	r3, [r3, #28]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d005      	beq.n	8011f5a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f54:	69db      	ldr	r3, [r3, #28]
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011f5a:	2300      	movs	r3, #0
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3708      	adds	r7, #8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011f70:	2300      	movs	r3, #0
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	370c      	adds	r7, #12
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011f7e:	b480      	push	{r7}
 8011f80:	b083      	sub	sp, #12
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	460b      	mov	r3, r1
 8011f88:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011f8a:	2300      	movs	r3, #0
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr

08011f98 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b083      	sub	sp, #12
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011fa0:	2300      	movs	r3, #0
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	370c      	adds	r7, #12
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fac:	4770      	bx	lr

08011fae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b082      	sub	sp, #8
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d009      	beq.n	8011fdc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	6852      	ldr	r2, [r2, #4]
 8011fd4:	b2d2      	uxtb	r2, r2
 8011fd6:	4611      	mov	r1, r2
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	4798      	blx	r3
  }

  return USBD_OK;
 8011fdc:	2300      	movs	r3, #0
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3708      	adds	r7, #8
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}

08011fe6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011fe6:	b480      	push	{r7}
 8011fe8:	b087      	sub	sp, #28
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	781b      	ldrb	r3, [r3, #0]
 8011ff6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012004:	8a3b      	ldrh	r3, [r7, #16]
 8012006:	021b      	lsls	r3, r3, #8
 8012008:	b21a      	sxth	r2, r3
 801200a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801200e:	4313      	orrs	r3, r2
 8012010:	b21b      	sxth	r3, r3
 8012012:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012014:	89fb      	ldrh	r3, [r7, #14]
}
 8012016:	4618      	mov	r0, r3
 8012018:	371c      	adds	r7, #28
 801201a:	46bd      	mov	sp, r7
 801201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012020:	4770      	bx	lr
	...

08012024 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b084      	sub	sp, #16
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801202e:	2300      	movs	r3, #0
 8012030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801203a:	2b40      	cmp	r3, #64	; 0x40
 801203c:	d005      	beq.n	801204a <USBD_StdDevReq+0x26>
 801203e:	2b40      	cmp	r3, #64	; 0x40
 8012040:	d853      	bhi.n	80120ea <USBD_StdDevReq+0xc6>
 8012042:	2b00      	cmp	r3, #0
 8012044:	d00b      	beq.n	801205e <USBD_StdDevReq+0x3a>
 8012046:	2b20      	cmp	r3, #32
 8012048:	d14f      	bne.n	80120ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012050:	689b      	ldr	r3, [r3, #8]
 8012052:	6839      	ldr	r1, [r7, #0]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	4798      	blx	r3
 8012058:	4603      	mov	r3, r0
 801205a:	73fb      	strb	r3, [r7, #15]
    break;
 801205c:	e04a      	b.n	80120f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	785b      	ldrb	r3, [r3, #1]
 8012062:	2b09      	cmp	r3, #9
 8012064:	d83b      	bhi.n	80120de <USBD_StdDevReq+0xba>
 8012066:	a201      	add	r2, pc, #4	; (adr r2, 801206c <USBD_StdDevReq+0x48>)
 8012068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801206c:	080120c1 	.word	0x080120c1
 8012070:	080120d5 	.word	0x080120d5
 8012074:	080120df 	.word	0x080120df
 8012078:	080120cb 	.word	0x080120cb
 801207c:	080120df 	.word	0x080120df
 8012080:	0801209f 	.word	0x0801209f
 8012084:	08012095 	.word	0x08012095
 8012088:	080120df 	.word	0x080120df
 801208c:	080120b7 	.word	0x080120b7
 8012090:	080120a9 	.word	0x080120a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8012094:	6839      	ldr	r1, [r7, #0]
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f000 f9d8 	bl	801244c <USBD_GetDescriptor>
      break;
 801209c:	e024      	b.n	80120e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801209e:	6839      	ldr	r1, [r7, #0]
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f000 fb3d 	bl	8012720 <USBD_SetAddress>
      break;
 80120a6:	e01f      	b.n	80120e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80120a8:	6839      	ldr	r1, [r7, #0]
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 fb7c 	bl	80127a8 <USBD_SetConfig>
 80120b0:	4603      	mov	r3, r0
 80120b2:	73fb      	strb	r3, [r7, #15]
      break;
 80120b4:	e018      	b.n	80120e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80120b6:	6839      	ldr	r1, [r7, #0]
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 fc19 	bl	80128f0 <USBD_GetConfig>
      break;
 80120be:	e013      	b.n	80120e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80120c0:	6839      	ldr	r1, [r7, #0]
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 fc49 	bl	801295a <USBD_GetStatus>
      break;
 80120c8:	e00e      	b.n	80120e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80120ca:	6839      	ldr	r1, [r7, #0]
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f000 fc77 	bl	80129c0 <USBD_SetFeature>
      break;
 80120d2:	e009      	b.n	80120e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80120d4:	6839      	ldr	r1, [r7, #0]
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 fc86 	bl	80129e8 <USBD_ClrFeature>
      break;
 80120dc:	e004      	b.n	80120e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80120de:	6839      	ldr	r1, [r7, #0]
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 fcdc 	bl	8012a9e <USBD_CtlError>
      break;
 80120e6:	bf00      	nop
    }
    break;
 80120e8:	e004      	b.n	80120f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80120ea:	6839      	ldr	r1, [r7, #0]
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f000 fcd6 	bl	8012a9e <USBD_CtlError>
    break;
 80120f2:	bf00      	nop
  }

  return ret;
 80120f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3710      	adds	r7, #16
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop

08012100 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b084      	sub	sp, #16
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801210a:	2300      	movs	r3, #0
 801210c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012116:	2b40      	cmp	r3, #64	; 0x40
 8012118:	d005      	beq.n	8012126 <USBD_StdItfReq+0x26>
 801211a:	2b40      	cmp	r3, #64	; 0x40
 801211c:	d82e      	bhi.n	801217c <USBD_StdItfReq+0x7c>
 801211e:	2b00      	cmp	r3, #0
 8012120:	d001      	beq.n	8012126 <USBD_StdItfReq+0x26>
 8012122:	2b20      	cmp	r3, #32
 8012124:	d12a      	bne.n	801217c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801212c:	3b01      	subs	r3, #1
 801212e:	2b02      	cmp	r3, #2
 8012130:	d81d      	bhi.n	801216e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	889b      	ldrh	r3, [r3, #4]
 8012136:	b2db      	uxtb	r3, r3
 8012138:	2b01      	cmp	r3, #1
 801213a:	d813      	bhi.n	8012164 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012142:	689b      	ldr	r3, [r3, #8]
 8012144:	6839      	ldr	r1, [r7, #0]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	4798      	blx	r3
 801214a:	4603      	mov	r3, r0
 801214c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	88db      	ldrh	r3, [r3, #6]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d110      	bne.n	8012178 <USBD_StdItfReq+0x78>
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d10d      	bne.n	8012178 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f000 fd69 	bl	8012c34 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8012162:	e009      	b.n	8012178 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8012164:	6839      	ldr	r1, [r7, #0]
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 fc99 	bl	8012a9e <USBD_CtlError>
      break;
 801216c:	e004      	b.n	8012178 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 801216e:	6839      	ldr	r1, [r7, #0]
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 fc94 	bl	8012a9e <USBD_CtlError>
      break;
 8012176:	e000      	b.n	801217a <USBD_StdItfReq+0x7a>
      break;
 8012178:	bf00      	nop
    }
    break;
 801217a:	e004      	b.n	8012186 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 801217c:	6839      	ldr	r1, [r7, #0]
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 fc8d 	bl	8012a9e <USBD_CtlError>
    break;
 8012184:	bf00      	nop
  }

  return ret;
 8012186:	7bfb      	ldrb	r3, [r7, #15]
}
 8012188:	4618      	mov	r0, r3
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801219a:	2300      	movs	r3, #0
 801219c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	889b      	ldrh	r3, [r3, #4]
 80121a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121ac:	2b40      	cmp	r3, #64	; 0x40
 80121ae:	d007      	beq.n	80121c0 <USBD_StdEPReq+0x30>
 80121b0:	2b40      	cmp	r3, #64	; 0x40
 80121b2:	f200 8140 	bhi.w	8012436 <USBD_StdEPReq+0x2a6>
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d00c      	beq.n	80121d4 <USBD_StdEPReq+0x44>
 80121ba:	2b20      	cmp	r3, #32
 80121bc:	f040 813b 	bne.w	8012436 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121c6:	689b      	ldr	r3, [r3, #8]
 80121c8:	6839      	ldr	r1, [r7, #0]
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	4798      	blx	r3
 80121ce:	4603      	mov	r3, r0
 80121d0:	73fb      	strb	r3, [r7, #15]
    break;
 80121d2:	e135      	b.n	8012440 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	785b      	ldrb	r3, [r3, #1]
 80121d8:	2b03      	cmp	r3, #3
 80121da:	d007      	beq.n	80121ec <USBD_StdEPReq+0x5c>
 80121dc:	2b03      	cmp	r3, #3
 80121de:	f300 8124 	bgt.w	801242a <USBD_StdEPReq+0x29a>
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d07b      	beq.n	80122de <USBD_StdEPReq+0x14e>
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d03b      	beq.n	8012262 <USBD_StdEPReq+0xd2>
 80121ea:	e11e      	b.n	801242a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121f2:	2b02      	cmp	r3, #2
 80121f4:	d002      	beq.n	80121fc <USBD_StdEPReq+0x6c>
 80121f6:	2b03      	cmp	r3, #3
 80121f8:	d016      	beq.n	8012228 <USBD_StdEPReq+0x98>
 80121fa:	e02c      	b.n	8012256 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80121fc:	7bbb      	ldrb	r3, [r7, #14]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00d      	beq.n	801221e <USBD_StdEPReq+0x8e>
 8012202:	7bbb      	ldrb	r3, [r7, #14]
 8012204:	2b80      	cmp	r3, #128	; 0x80
 8012206:	d00a      	beq.n	801221e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012208:	7bbb      	ldrb	r3, [r7, #14]
 801220a:	4619      	mov	r1, r3
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f004 f813 	bl	8016238 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012212:	2180      	movs	r1, #128	; 0x80
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f004 f80f 	bl	8016238 <USBD_LL_StallEP>
 801221a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801221c:	e020      	b.n	8012260 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 801221e:	6839      	ldr	r1, [r7, #0]
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 fc3c 	bl	8012a9e <USBD_CtlError>
        break;
 8012226:	e01b      	b.n	8012260 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	885b      	ldrh	r3, [r3, #2]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10e      	bne.n	801224e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012230:	7bbb      	ldrb	r3, [r7, #14]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d00b      	beq.n	801224e <USBD_StdEPReq+0xbe>
 8012236:	7bbb      	ldrb	r3, [r7, #14]
 8012238:	2b80      	cmp	r3, #128	; 0x80
 801223a:	d008      	beq.n	801224e <USBD_StdEPReq+0xbe>
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	88db      	ldrh	r3, [r3, #6]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d104      	bne.n	801224e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8012244:	7bbb      	ldrb	r3, [r7, #14]
 8012246:	4619      	mov	r1, r3
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f003 fff5 	bl	8016238 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 fcf0 	bl	8012c34 <USBD_CtlSendStatus>

        break;
 8012254:	e004      	b.n	8012260 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8012256:	6839      	ldr	r1, [r7, #0]
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 fc20 	bl	8012a9e <USBD_CtlError>
        break;
 801225e:	bf00      	nop
      }
      break;
 8012260:	e0e8      	b.n	8012434 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012268:	2b02      	cmp	r3, #2
 801226a:	d002      	beq.n	8012272 <USBD_StdEPReq+0xe2>
 801226c:	2b03      	cmp	r3, #3
 801226e:	d016      	beq.n	801229e <USBD_StdEPReq+0x10e>
 8012270:	e02e      	b.n	80122d0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012272:	7bbb      	ldrb	r3, [r7, #14]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00d      	beq.n	8012294 <USBD_StdEPReq+0x104>
 8012278:	7bbb      	ldrb	r3, [r7, #14]
 801227a:	2b80      	cmp	r3, #128	; 0x80
 801227c:	d00a      	beq.n	8012294 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 801227e:	7bbb      	ldrb	r3, [r7, #14]
 8012280:	4619      	mov	r1, r3
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f003 ffd8 	bl	8016238 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012288:	2180      	movs	r1, #128	; 0x80
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f003 ffd4 	bl	8016238 <USBD_LL_StallEP>
 8012290:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012292:	e023      	b.n	80122dc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8012294:	6839      	ldr	r1, [r7, #0]
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f000 fc01 	bl	8012a9e <USBD_CtlError>
        break;
 801229c:	e01e      	b.n	80122dc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	885b      	ldrh	r3, [r3, #2]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d119      	bne.n	80122da <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80122a6:	7bbb      	ldrb	r3, [r7, #14]
 80122a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d004      	beq.n	80122ba <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80122b0:	7bbb      	ldrb	r3, [r7, #14]
 80122b2:	4619      	mov	r1, r3
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f003 ffde 	bl	8016276 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fcba 	bl	8012c34 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122c6:	689b      	ldr	r3, [r3, #8]
 80122c8:	6839      	ldr	r1, [r7, #0]
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	4798      	blx	r3
        }
        break;
 80122ce:	e004      	b.n	80122da <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80122d0:	6839      	ldr	r1, [r7, #0]
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 fbe3 	bl	8012a9e <USBD_CtlError>
        break;
 80122d8:	e000      	b.n	80122dc <USBD_StdEPReq+0x14c>
        break;
 80122da:	bf00      	nop
      }
      break;
 80122dc:	e0aa      	b.n	8012434 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122e4:	2b02      	cmp	r3, #2
 80122e6:	d002      	beq.n	80122ee <USBD_StdEPReq+0x15e>
 80122e8:	2b03      	cmp	r3, #3
 80122ea:	d032      	beq.n	8012352 <USBD_StdEPReq+0x1c2>
 80122ec:	e097      	b.n	801241e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80122ee:	7bbb      	ldrb	r3, [r7, #14]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d007      	beq.n	8012304 <USBD_StdEPReq+0x174>
 80122f4:	7bbb      	ldrb	r3, [r7, #14]
 80122f6:	2b80      	cmp	r3, #128	; 0x80
 80122f8:	d004      	beq.n	8012304 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80122fa:	6839      	ldr	r1, [r7, #0]
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 fbce 	bl	8012a9e <USBD_CtlError>
          break;
 8012302:	e091      	b.n	8012428 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012308:	2b00      	cmp	r3, #0
 801230a:	da0b      	bge.n	8012324 <USBD_StdEPReq+0x194>
 801230c:	7bbb      	ldrb	r3, [r7, #14]
 801230e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012312:	4613      	mov	r3, r2
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	4413      	add	r3, r2
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	3310      	adds	r3, #16
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	4413      	add	r3, r2
 8012320:	3304      	adds	r3, #4
 8012322:	e00b      	b.n	801233c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012324:	7bbb      	ldrb	r3, [r7, #14]
 8012326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801232a:	4613      	mov	r3, r2
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	4413      	add	r3, r2
 8012330:	009b      	lsls	r3, r3, #2
 8012332:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	4413      	add	r3, r2
 801233a:	3304      	adds	r3, #4
 801233c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	2200      	movs	r2, #0
 8012342:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	2202      	movs	r2, #2
 8012348:	4619      	mov	r1, r3
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 fc18 	bl	8012b80 <USBD_CtlSendData>
        break;
 8012350:	e06a      	b.n	8012428 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8012352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012356:	2b00      	cmp	r3, #0
 8012358:	da11      	bge.n	801237e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801235a:	7bbb      	ldrb	r3, [r7, #14]
 801235c:	f003 020f 	and.w	r2, r3, #15
 8012360:	6879      	ldr	r1, [r7, #4]
 8012362:	4613      	mov	r3, r2
 8012364:	009b      	lsls	r3, r3, #2
 8012366:	4413      	add	r3, r2
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	440b      	add	r3, r1
 801236c:	3324      	adds	r3, #36	; 0x24
 801236e:	881b      	ldrh	r3, [r3, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d117      	bne.n	80123a4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8012374:	6839      	ldr	r1, [r7, #0]
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 fb91 	bl	8012a9e <USBD_CtlError>
            break;
 801237c:	e054      	b.n	8012428 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801237e:	7bbb      	ldrb	r3, [r7, #14]
 8012380:	f003 020f 	and.w	r2, r3, #15
 8012384:	6879      	ldr	r1, [r7, #4]
 8012386:	4613      	mov	r3, r2
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	4413      	add	r3, r2
 801238c:	009b      	lsls	r3, r3, #2
 801238e:	440b      	add	r3, r1
 8012390:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d104      	bne.n	80123a4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 801239a:	6839      	ldr	r1, [r7, #0]
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 fb7e 	bl	8012a9e <USBD_CtlError>
            break;
 80123a2:	e041      	b.n	8012428 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	da0b      	bge.n	80123c4 <USBD_StdEPReq+0x234>
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123b2:	4613      	mov	r3, r2
 80123b4:	009b      	lsls	r3, r3, #2
 80123b6:	4413      	add	r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	3310      	adds	r3, #16
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	4413      	add	r3, r2
 80123c0:	3304      	adds	r3, #4
 80123c2:	e00b      	b.n	80123dc <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80123c4:	7bbb      	ldrb	r3, [r7, #14]
 80123c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123ca:	4613      	mov	r3, r2
 80123cc:	009b      	lsls	r3, r3, #2
 80123ce:	4413      	add	r3, r2
 80123d0:	009b      	lsls	r3, r3, #2
 80123d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80123d6:	687a      	ldr	r2, [r7, #4]
 80123d8:	4413      	add	r3, r2
 80123da:	3304      	adds	r3, #4
 80123dc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80123de:	7bbb      	ldrb	r3, [r7, #14]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d002      	beq.n	80123ea <USBD_StdEPReq+0x25a>
 80123e4:	7bbb      	ldrb	r3, [r7, #14]
 80123e6:	2b80      	cmp	r3, #128	; 0x80
 80123e8:	d103      	bne.n	80123f2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2200      	movs	r2, #0
 80123ee:	601a      	str	r2, [r3, #0]
 80123f0:	e00e      	b.n	8012410 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80123f2:	7bbb      	ldrb	r3, [r7, #14]
 80123f4:	4619      	mov	r1, r3
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f003 ff5c 	bl	80162b4 <USBD_LL_IsStallEP>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d003      	beq.n	801240a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	2201      	movs	r2, #1
 8012406:	601a      	str	r2, [r3, #0]
 8012408:	e002      	b.n	8012410 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2200      	movs	r2, #0
 801240e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	2202      	movs	r2, #2
 8012414:	4619      	mov	r1, r3
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 fbb2 	bl	8012b80 <USBD_CtlSendData>
          break;
 801241c:	e004      	b.n	8012428 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f000 fb3c 	bl	8012a9e <USBD_CtlError>
        break;
 8012426:	bf00      	nop
      }
      break;
 8012428:	e004      	b.n	8012434 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 801242a:	6839      	ldr	r1, [r7, #0]
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 fb36 	bl	8012a9e <USBD_CtlError>
      break;
 8012432:	bf00      	nop
    }
    break;
 8012434:	e004      	b.n	8012440 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8012436:	6839      	ldr	r1, [r7, #0]
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f000 fb30 	bl	8012a9e <USBD_CtlError>
    break;
 801243e:	bf00      	nop
  }

  return ret;
 8012440:	7bfb      	ldrb	r3, [r7, #15]
}
 8012442:	4618      	mov	r0, r3
 8012444:	3710      	adds	r7, #16
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
	...

0801244c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012456:	2300      	movs	r3, #0
 8012458:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801245a:	2300      	movs	r3, #0
 801245c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801245e:	2300      	movs	r3, #0
 8012460:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	885b      	ldrh	r3, [r3, #2]
 8012466:	0a1b      	lsrs	r3, r3, #8
 8012468:	b29b      	uxth	r3, r3
 801246a:	3b01      	subs	r3, #1
 801246c:	2b06      	cmp	r3, #6
 801246e:	f200 8128 	bhi.w	80126c2 <USBD_GetDescriptor+0x276>
 8012472:	a201      	add	r2, pc, #4	; (adr r2, 8012478 <USBD_GetDescriptor+0x2c>)
 8012474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012478:	08012495 	.word	0x08012495
 801247c:	080124ad 	.word	0x080124ad
 8012480:	080124ed 	.word	0x080124ed
 8012484:	080126c3 	.word	0x080126c3
 8012488:	080126c3 	.word	0x080126c3
 801248c:	08012663 	.word	0x08012663
 8012490:	0801268f 	.word	0x0801268f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	7c12      	ldrb	r2, [r2, #16]
 80124a0:	f107 0108 	add.w	r1, r7, #8
 80124a4:	4610      	mov	r0, r2
 80124a6:	4798      	blx	r3
 80124a8:	60f8      	str	r0, [r7, #12]
    break;
 80124aa:	e112      	b.n	80126d2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	7c1b      	ldrb	r3, [r3, #16]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d10d      	bne.n	80124d0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124bc:	f107 0208 	add.w	r2, r7, #8
 80124c0:	4610      	mov	r0, r2
 80124c2:	4798      	blx	r3
 80124c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	3301      	adds	r3, #1
 80124ca:	2202      	movs	r2, #2
 80124cc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80124ce:	e100      	b.n	80126d2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d8:	f107 0208 	add.w	r2, r7, #8
 80124dc:	4610      	mov	r0, r2
 80124de:	4798      	blx	r3
 80124e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	3301      	adds	r3, #1
 80124e6:	2202      	movs	r2, #2
 80124e8:	701a      	strb	r2, [r3, #0]
    break;
 80124ea:	e0f2      	b.n	80126d2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	885b      	ldrh	r3, [r3, #2]
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	2b05      	cmp	r3, #5
 80124f4:	f200 80ac 	bhi.w	8012650 <USBD_GetDescriptor+0x204>
 80124f8:	a201      	add	r2, pc, #4	; (adr r2, 8012500 <USBD_GetDescriptor+0xb4>)
 80124fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124fe:	bf00      	nop
 8012500:	08012519 	.word	0x08012519
 8012504:	0801254d 	.word	0x0801254d
 8012508:	08012581 	.word	0x08012581
 801250c:	080125b5 	.word	0x080125b5
 8012510:	080125e9 	.word	0x080125e9
 8012514:	0801261d 	.word	0x0801261d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d00b      	beq.n	801253c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	7c12      	ldrb	r2, [r2, #16]
 8012530:	f107 0108 	add.w	r1, r7, #8
 8012534:	4610      	mov	r0, r2
 8012536:	4798      	blx	r3
 8012538:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801253a:	e091      	b.n	8012660 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801253c:	6839      	ldr	r1, [r7, #0]
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f000 faad 	bl	8012a9e <USBD_CtlError>
        err++;
 8012544:	7afb      	ldrb	r3, [r7, #11]
 8012546:	3301      	adds	r3, #1
 8012548:	72fb      	strb	r3, [r7, #11]
      break;
 801254a:	e089      	b.n	8012660 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012552:	689b      	ldr	r3, [r3, #8]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d00b      	beq.n	8012570 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801255e:	689b      	ldr	r3, [r3, #8]
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	7c12      	ldrb	r2, [r2, #16]
 8012564:	f107 0108 	add.w	r1, r7, #8
 8012568:	4610      	mov	r0, r2
 801256a:	4798      	blx	r3
 801256c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801256e:	e077      	b.n	8012660 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012570:	6839      	ldr	r1, [r7, #0]
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f000 fa93 	bl	8012a9e <USBD_CtlError>
        err++;
 8012578:	7afb      	ldrb	r3, [r7, #11]
 801257a:	3301      	adds	r3, #1
 801257c:	72fb      	strb	r3, [r7, #11]
      break;
 801257e:	e06f      	b.n	8012660 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d00b      	beq.n	80125a4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	7c12      	ldrb	r2, [r2, #16]
 8012598:	f107 0108 	add.w	r1, r7, #8
 801259c:	4610      	mov	r0, r2
 801259e:	4798      	blx	r3
 80125a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125a2:	e05d      	b.n	8012660 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80125a4:	6839      	ldr	r1, [r7, #0]
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f000 fa79 	bl	8012a9e <USBD_CtlError>
        err++;
 80125ac:	7afb      	ldrb	r3, [r7, #11]
 80125ae:	3301      	adds	r3, #1
 80125b0:	72fb      	strb	r3, [r7, #11]
      break;
 80125b2:	e055      	b.n	8012660 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ba:	691b      	ldr	r3, [r3, #16]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d00b      	beq.n	80125d8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125c6:	691b      	ldr	r3, [r3, #16]
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	7c12      	ldrb	r2, [r2, #16]
 80125cc:	f107 0108 	add.w	r1, r7, #8
 80125d0:	4610      	mov	r0, r2
 80125d2:	4798      	blx	r3
 80125d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125d6:	e043      	b.n	8012660 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80125d8:	6839      	ldr	r1, [r7, #0]
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f000 fa5f 	bl	8012a9e <USBD_CtlError>
        err++;
 80125e0:	7afb      	ldrb	r3, [r7, #11]
 80125e2:	3301      	adds	r3, #1
 80125e4:	72fb      	strb	r3, [r7, #11]
      break;
 80125e6:	e03b      	b.n	8012660 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ee:	695b      	ldr	r3, [r3, #20]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d00b      	beq.n	801260c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125fa:	695b      	ldr	r3, [r3, #20]
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	7c12      	ldrb	r2, [r2, #16]
 8012600:	f107 0108 	add.w	r1, r7, #8
 8012604:	4610      	mov	r0, r2
 8012606:	4798      	blx	r3
 8012608:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801260a:	e029      	b.n	8012660 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801260c:	6839      	ldr	r1, [r7, #0]
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	f000 fa45 	bl	8012a9e <USBD_CtlError>
        err++;
 8012614:	7afb      	ldrb	r3, [r7, #11]
 8012616:	3301      	adds	r3, #1
 8012618:	72fb      	strb	r3, [r7, #11]
      break;
 801261a:	e021      	b.n	8012660 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012622:	699b      	ldr	r3, [r3, #24]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00b      	beq.n	8012640 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801262e:	699b      	ldr	r3, [r3, #24]
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	7c12      	ldrb	r2, [r2, #16]
 8012634:	f107 0108 	add.w	r1, r7, #8
 8012638:	4610      	mov	r0, r2
 801263a:	4798      	blx	r3
 801263c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801263e:	e00f      	b.n	8012660 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012640:	6839      	ldr	r1, [r7, #0]
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f000 fa2b 	bl	8012a9e <USBD_CtlError>
        err++;
 8012648:	7afb      	ldrb	r3, [r7, #11]
 801264a:	3301      	adds	r3, #1
 801264c:	72fb      	strb	r3, [r7, #11]
      break;
 801264e:	e007      	b.n	8012660 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012650:	6839      	ldr	r1, [r7, #0]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fa23 	bl	8012a9e <USBD_CtlError>
      err++;
 8012658:	7afb      	ldrb	r3, [r7, #11]
 801265a:	3301      	adds	r3, #1
 801265c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801265e:	bf00      	nop
    }
    break;
 8012660:	e037      	b.n	80126d2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	7c1b      	ldrb	r3, [r3, #16]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d109      	bne.n	801267e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012672:	f107 0208 	add.w	r2, r7, #8
 8012676:	4610      	mov	r0, r2
 8012678:	4798      	blx	r3
 801267a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801267c:	e029      	b.n	80126d2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801267e:	6839      	ldr	r1, [r7, #0]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 fa0c 	bl	8012a9e <USBD_CtlError>
      err++;
 8012686:	7afb      	ldrb	r3, [r7, #11]
 8012688:	3301      	adds	r3, #1
 801268a:	72fb      	strb	r3, [r7, #11]
    break;
 801268c:	e021      	b.n	80126d2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	7c1b      	ldrb	r3, [r3, #16]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d10d      	bne.n	80126b2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801269e:	f107 0208 	add.w	r2, r7, #8
 80126a2:	4610      	mov	r0, r2
 80126a4:	4798      	blx	r3
 80126a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	3301      	adds	r3, #1
 80126ac:	2207      	movs	r2, #7
 80126ae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80126b0:	e00f      	b.n	80126d2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80126b2:	6839      	ldr	r1, [r7, #0]
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f000 f9f2 	bl	8012a9e <USBD_CtlError>
      err++;
 80126ba:	7afb      	ldrb	r3, [r7, #11]
 80126bc:	3301      	adds	r3, #1
 80126be:	72fb      	strb	r3, [r7, #11]
    break;
 80126c0:	e007      	b.n	80126d2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80126c2:	6839      	ldr	r1, [r7, #0]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f000 f9ea 	bl	8012a9e <USBD_CtlError>
    err++;
 80126ca:	7afb      	ldrb	r3, [r7, #11]
 80126cc:	3301      	adds	r3, #1
 80126ce:	72fb      	strb	r3, [r7, #11]
    break;
 80126d0:	bf00      	nop
  }

  if (err != 0U)
 80126d2:	7afb      	ldrb	r3, [r7, #11]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d11e      	bne.n	8012716 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	88db      	ldrh	r3, [r3, #6]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d016      	beq.n	801270e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80126e0:	893b      	ldrh	r3, [r7, #8]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00e      	beq.n	8012704 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	88da      	ldrh	r2, [r3, #6]
 80126ea:	893b      	ldrh	r3, [r7, #8]
 80126ec:	4293      	cmp	r3, r2
 80126ee:	bf28      	it	cs
 80126f0:	4613      	movcs	r3, r2
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80126f6:	893b      	ldrh	r3, [r7, #8]
 80126f8:	461a      	mov	r2, r3
 80126fa:	68f9      	ldr	r1, [r7, #12]
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 fa3f 	bl	8012b80 <USBD_CtlSendData>
 8012702:	e009      	b.n	8012718 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8012704:	6839      	ldr	r1, [r7, #0]
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f000 f9c9 	bl	8012a9e <USBD_CtlError>
 801270c:	e004      	b.n	8012718 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f000 fa90 	bl	8012c34 <USBD_CtlSendStatus>
 8012714:	e000      	b.n	8012718 <USBD_GetDescriptor+0x2cc>
    return;
 8012716:	bf00      	nop
    }
  }
}
 8012718:	3710      	adds	r7, #16
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop

08012720 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	889b      	ldrh	r3, [r3, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d130      	bne.n	8012794 <USBD_SetAddress+0x74>
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	88db      	ldrh	r3, [r3, #6]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d12c      	bne.n	8012794 <USBD_SetAddress+0x74>
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	885b      	ldrh	r3, [r3, #2]
 801273e:	2b7f      	cmp	r3, #127	; 0x7f
 8012740:	d828      	bhi.n	8012794 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	885b      	ldrh	r3, [r3, #2]
 8012746:	b2db      	uxtb	r3, r3
 8012748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801274c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012754:	2b03      	cmp	r3, #3
 8012756:	d104      	bne.n	8012762 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012758:	6839      	ldr	r1, [r7, #0]
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 f99f 	bl	8012a9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012760:	e01d      	b.n	801279e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	7bfa      	ldrb	r2, [r7, #15]
 8012766:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801276a:	7bfb      	ldrb	r3, [r7, #15]
 801276c:	4619      	mov	r1, r3
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f003 fdcc 	bl	801630c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 fa5d 	bl	8012c34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801277a:	7bfb      	ldrb	r3, [r7, #15]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d004      	beq.n	801278a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2202      	movs	r2, #2
 8012784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012788:	e009      	b.n	801279e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2201      	movs	r2, #1
 801278e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012792:	e004      	b.n	801279e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012794:	6839      	ldr	r1, [r7, #0]
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 f981 	bl	8012a9e <USBD_CtlError>
  }
}
 801279c:	bf00      	nop
 801279e:	bf00      	nop
 80127a0:	3710      	adds	r7, #16
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
	...

080127a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b084      	sub	sp, #16
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80127b2:	2300      	movs	r3, #0
 80127b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	885b      	ldrh	r3, [r3, #2]
 80127ba:	b2da      	uxtb	r2, r3
 80127bc:	4b4b      	ldr	r3, [pc, #300]	; (80128ec <USBD_SetConfig+0x144>)
 80127be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80127c0:	4b4a      	ldr	r3, [pc, #296]	; (80128ec <USBD_SetConfig+0x144>)
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	d905      	bls.n	80127d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80127c8:	6839      	ldr	r1, [r7, #0]
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 f967 	bl	8012a9e <USBD_CtlError>
    return USBD_FAIL;
 80127d0:	2303      	movs	r3, #3
 80127d2:	e087      	b.n	80128e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d002      	beq.n	80127e4 <USBD_SetConfig+0x3c>
 80127de:	2b03      	cmp	r3, #3
 80127e0:	d025      	beq.n	801282e <USBD_SetConfig+0x86>
 80127e2:	e071      	b.n	80128c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80127e4:	4b41      	ldr	r3, [pc, #260]	; (80128ec <USBD_SetConfig+0x144>)
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d01c      	beq.n	8012826 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80127ec:	4b3f      	ldr	r3, [pc, #252]	; (80128ec <USBD_SetConfig+0x144>)
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	461a      	mov	r2, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80127f6:	4b3d      	ldr	r3, [pc, #244]	; (80128ec <USBD_SetConfig+0x144>)
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	4619      	mov	r1, r3
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f7ff f999 	bl	8011b34 <USBD_SetClassConfig>
 8012802:	4603      	mov	r3, r0
 8012804:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8012806:	7bfb      	ldrb	r3, [r7, #15]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d004      	beq.n	8012816 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 f945 	bl	8012a9e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012814:	e065      	b.n	80128e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 fa0c 	bl	8012c34 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2203      	movs	r2, #3
 8012820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012824:	e05d      	b.n	80128e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 fa04 	bl	8012c34 <USBD_CtlSendStatus>
    break;
 801282c:	e059      	b.n	80128e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801282e:	4b2f      	ldr	r3, [pc, #188]	; (80128ec <USBD_SetConfig+0x144>)
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d112      	bne.n	801285c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2202      	movs	r2, #2
 801283a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801283e:	4b2b      	ldr	r3, [pc, #172]	; (80128ec <USBD_SetConfig+0x144>)
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	461a      	mov	r2, r3
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012848:	4b28      	ldr	r3, [pc, #160]	; (80128ec <USBD_SetConfig+0x144>)
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	4619      	mov	r1, r3
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f7ff f98c 	bl	8011b6c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f000 f9ed 	bl	8012c34 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801285a:	e042      	b.n	80128e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801285c:	4b23      	ldr	r3, [pc, #140]	; (80128ec <USBD_SetConfig+0x144>)
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	461a      	mov	r2, r3
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	429a      	cmp	r2, r3
 8012868:	d02a      	beq.n	80128c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	b2db      	uxtb	r3, r3
 8012870:	4619      	mov	r1, r3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff f97a 	bl	8011b6c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012878:	4b1c      	ldr	r3, [pc, #112]	; (80128ec <USBD_SetConfig+0x144>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	461a      	mov	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012882:	4b1a      	ldr	r3, [pc, #104]	; (80128ec <USBD_SetConfig+0x144>)
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	4619      	mov	r1, r3
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f7ff f953 	bl	8011b34 <USBD_SetClassConfig>
 801288e:	4603      	mov	r3, r0
 8012890:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8012892:	7bfb      	ldrb	r3, [r7, #15]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00f      	beq.n	80128b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012898:	6839      	ldr	r1, [r7, #0]
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f000 f8ff 	bl	8012a9e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	4619      	mov	r1, r3
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f7ff f95f 	bl	8011b6c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2202      	movs	r2, #2
 80128b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80128b6:	e014      	b.n	80128e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f000 f9bb 	bl	8012c34 <USBD_CtlSendStatus>
    break;
 80128be:	e010      	b.n	80128e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 f9b7 	bl	8012c34 <USBD_CtlSendStatus>
    break;
 80128c6:	e00c      	b.n	80128e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80128c8:	6839      	ldr	r1, [r7, #0]
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 f8e7 	bl	8012a9e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80128d0:	4b06      	ldr	r3, [pc, #24]	; (80128ec <USBD_SetConfig+0x144>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	4619      	mov	r1, r3
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f7ff f948 	bl	8011b6c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80128dc:	2303      	movs	r3, #3
 80128de:	73fb      	strb	r3, [r7, #15]
    break;
 80128e0:	bf00      	nop
  }

  return ret;
 80128e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3710      	adds	r7, #16
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	20004868 	.word	0x20004868

080128f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	88db      	ldrh	r3, [r3, #6]
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d004      	beq.n	801290c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012902:	6839      	ldr	r1, [r7, #0]
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f000 f8ca 	bl	8012a9e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801290a:	e022      	b.n	8012952 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012912:	2b02      	cmp	r3, #2
 8012914:	dc02      	bgt.n	801291c <USBD_GetConfig+0x2c>
 8012916:	2b00      	cmp	r3, #0
 8012918:	dc03      	bgt.n	8012922 <USBD_GetConfig+0x32>
 801291a:	e015      	b.n	8012948 <USBD_GetConfig+0x58>
 801291c:	2b03      	cmp	r3, #3
 801291e:	d00b      	beq.n	8012938 <USBD_GetConfig+0x48>
 8012920:	e012      	b.n	8012948 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2200      	movs	r2, #0
 8012926:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	3308      	adds	r3, #8
 801292c:	2201      	movs	r2, #1
 801292e:	4619      	mov	r1, r3
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f000 f925 	bl	8012b80 <USBD_CtlSendData>
      break;
 8012936:	e00c      	b.n	8012952 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	3304      	adds	r3, #4
 801293c:	2201      	movs	r2, #1
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f000 f91d 	bl	8012b80 <USBD_CtlSendData>
      break;
 8012946:	e004      	b.n	8012952 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8012948:	6839      	ldr	r1, [r7, #0]
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 f8a7 	bl	8012a9e <USBD_CtlError>
      break;
 8012950:	bf00      	nop
}
 8012952:	bf00      	nop
 8012954:	3708      	adds	r7, #8
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801295a:	b580      	push	{r7, lr}
 801295c:	b082      	sub	sp, #8
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
 8012962:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801296a:	3b01      	subs	r3, #1
 801296c:	2b02      	cmp	r3, #2
 801296e:	d81e      	bhi.n	80129ae <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	88db      	ldrh	r3, [r3, #6]
 8012974:	2b02      	cmp	r3, #2
 8012976:	d004      	beq.n	8012982 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012978:	6839      	ldr	r1, [r7, #0]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 f88f 	bl	8012a9e <USBD_CtlError>
      break;
 8012980:	e01a      	b.n	80129b8 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2201      	movs	r2, #1
 8012986:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801298e:	2b00      	cmp	r3, #0
 8012990:	d005      	beq.n	801299e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	f043 0202 	orr.w	r2, r3, #2
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	330c      	adds	r3, #12
 80129a2:	2202      	movs	r2, #2
 80129a4:	4619      	mov	r1, r3
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 f8ea 	bl	8012b80 <USBD_CtlSendData>
    break;
 80129ac:	e004      	b.n	80129b8 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80129ae:	6839      	ldr	r1, [r7, #0]
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f000 f874 	bl	8012a9e <USBD_CtlError>
    break;
 80129b6:	bf00      	nop
  }
}
 80129b8:	bf00      	nop
 80129ba:	3708      	adds	r7, #8
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}

080129c0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	885b      	ldrh	r3, [r3, #2]
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d106      	bne.n	80129e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2201      	movs	r2, #1
 80129d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 f92a 	bl	8012c34 <USBD_CtlSendStatus>
  }
}
 80129e0:	bf00      	nop
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129f8:	3b01      	subs	r3, #1
 80129fa:	2b02      	cmp	r3, #2
 80129fc:	d80b      	bhi.n	8012a16 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	885b      	ldrh	r3, [r3, #2]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d10c      	bne.n	8012a20 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 f910 	bl	8012c34 <USBD_CtlSendStatus>
      }
      break;
 8012a14:	e004      	b.n	8012a20 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012a16:	6839      	ldr	r1, [r7, #0]
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 f840 	bl	8012a9e <USBD_CtlError>
      break;
 8012a1e:	e000      	b.n	8012a22 <USBD_ClrFeature+0x3a>
      break;
 8012a20:	bf00      	nop
  }
}
 8012a22:	bf00      	nop
 8012a24:	3708      	adds	r7, #8
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}

08012a2a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012a2a:	b580      	push	{r7, lr}
 8012a2c:	b084      	sub	sp, #16
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
 8012a32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	781a      	ldrb	r2, [r3, #0]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	3301      	adds	r3, #1
 8012a44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	781a      	ldrb	r2, [r3, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	3301      	adds	r3, #1
 8012a52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012a54:	68f8      	ldr	r0, [r7, #12]
 8012a56:	f7ff fac6 	bl	8011fe6 <SWAPBYTE>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	3301      	adds	r3, #1
 8012a66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012a6e:	68f8      	ldr	r0, [r7, #12]
 8012a70:	f7ff fab9 	bl	8011fe6 <SWAPBYTE>
 8012a74:	4603      	mov	r3, r0
 8012a76:	461a      	mov	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	3301      	adds	r3, #1
 8012a80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	3301      	adds	r3, #1
 8012a86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f7ff faac 	bl	8011fe6 <SWAPBYTE>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	461a      	mov	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	80da      	strh	r2, [r3, #6]
}
 8012a96:	bf00      	nop
 8012a98:	3710      	adds	r7, #16
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b082      	sub	sp, #8
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	6078      	str	r0, [r7, #4]
 8012aa6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012aa8:	2180      	movs	r1, #128	; 0x80
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f003 fbc4 	bl	8016238 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012ab0:	2100      	movs	r1, #0
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f003 fbc0 	bl	8016238 <USBD_LL_StallEP>
}
 8012ab8:	bf00      	nop
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b086      	sub	sp, #24
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012acc:	2300      	movs	r3, #0
 8012ace:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d036      	beq.n	8012b44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012ada:	6938      	ldr	r0, [r7, #16]
 8012adc:	f000 f836 	bl	8012b4c <USBD_GetLen>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	005b      	lsls	r3, r3, #1
 8012ae8:	b29a      	uxth	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012aee:	7dfb      	ldrb	r3, [r7, #23]
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	4413      	add	r3, r2
 8012af4:	687a      	ldr	r2, [r7, #4]
 8012af6:	7812      	ldrb	r2, [r2, #0]
 8012af8:	701a      	strb	r2, [r3, #0]
  idx++;
 8012afa:	7dfb      	ldrb	r3, [r7, #23]
 8012afc:	3301      	adds	r3, #1
 8012afe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012b00:	7dfb      	ldrb	r3, [r7, #23]
 8012b02:	68ba      	ldr	r2, [r7, #8]
 8012b04:	4413      	add	r3, r2
 8012b06:	2203      	movs	r2, #3
 8012b08:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b0a:	7dfb      	ldrb	r3, [r7, #23]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012b10:	e013      	b.n	8012b3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012b12:	7dfb      	ldrb	r3, [r7, #23]
 8012b14:	68ba      	ldr	r2, [r7, #8]
 8012b16:	4413      	add	r3, r2
 8012b18:	693a      	ldr	r2, [r7, #16]
 8012b1a:	7812      	ldrb	r2, [r2, #0]
 8012b1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	3301      	adds	r3, #1
 8012b22:	613b      	str	r3, [r7, #16]
    idx++;
 8012b24:	7dfb      	ldrb	r3, [r7, #23]
 8012b26:	3301      	adds	r3, #1
 8012b28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012b2a:	7dfb      	ldrb	r3, [r7, #23]
 8012b2c:	68ba      	ldr	r2, [r7, #8]
 8012b2e:	4413      	add	r3, r2
 8012b30:	2200      	movs	r2, #0
 8012b32:	701a      	strb	r2, [r3, #0]
    idx++;
 8012b34:	7dfb      	ldrb	r3, [r7, #23]
 8012b36:	3301      	adds	r3, #1
 8012b38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1e7      	bne.n	8012b12 <USBD_GetString+0x52>
 8012b42:	e000      	b.n	8012b46 <USBD_GetString+0x86>
    return;
 8012b44:	bf00      	nop
  }
}
 8012b46:	3718      	adds	r7, #24
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}

08012b4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b085      	sub	sp, #20
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012b54:	2300      	movs	r3, #0
 8012b56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012b5c:	e005      	b.n	8012b6a <USBD_GetLen+0x1e>
  {
    len++;
 8012b5e:	7bfb      	ldrb	r3, [r7, #15]
 8012b60:	3301      	adds	r3, #1
 8012b62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	3301      	adds	r3, #1
 8012b68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d1f5      	bne.n	8012b5e <USBD_GetLen+0x12>
  }

  return len;
 8012b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3714      	adds	r7, #20
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr

08012b80 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2202      	movs	r2, #2
 8012b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	687a      	ldr	r2, [r7, #4]
 8012b98:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	68ba      	ldr	r2, [r7, #8]
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	68f8      	ldr	r0, [r7, #12]
 8012ba8:	f003 fbcf 	bl	801634a <USBD_LL_Transmit>

  return USBD_OK;
 8012bac:	2300      	movs	r3, #0
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3710      	adds	r7, #16
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b084      	sub	sp, #16
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	60f8      	str	r0, [r7, #12]
 8012bbe:	60b9      	str	r1, [r7, #8]
 8012bc0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	68ba      	ldr	r2, [r7, #8]
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	68f8      	ldr	r0, [r7, #12]
 8012bca:	f003 fbbe 	bl	801634a <USBD_LL_Transmit>

  return USBD_OK;
 8012bce:	2300      	movs	r3, #0
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3710      	adds	r7, #16
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2203      	movs	r2, #3
 8012be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	68ba      	ldr	r2, [r7, #8]
 8012c00:	2100      	movs	r1, #0
 8012c02:	68f8      	ldr	r0, [r7, #12]
 8012c04:	f003 fbc2 	bl	801638c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c08:	2300      	movs	r3, #0
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3710      	adds	r7, #16
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}

08012c12 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012c12:	b580      	push	{r7, lr}
 8012c14:	b084      	sub	sp, #16
 8012c16:	af00      	add	r7, sp, #0
 8012c18:	60f8      	str	r0, [r7, #12]
 8012c1a:	60b9      	str	r1, [r7, #8]
 8012c1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	68ba      	ldr	r2, [r7, #8]
 8012c22:	2100      	movs	r1, #0
 8012c24:	68f8      	ldr	r0, [r7, #12]
 8012c26:	f003 fbb1 	bl	801638c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c2a:	2300      	movs	r3, #0
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2204      	movs	r2, #4
 8012c40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012c44:	2300      	movs	r3, #0
 8012c46:	2200      	movs	r2, #0
 8012c48:	2100      	movs	r1, #0
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f003 fb7d 	bl	801634a <USBD_LL_Transmit>

  return USBD_OK;
 8012c50:	2300      	movs	r3, #0
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012c5a:	b580      	push	{r7, lr}
 8012c5c:	b082      	sub	sp, #8
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2205      	movs	r2, #5
 8012c66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	2100      	movs	r1, #0
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f003 fb8b 	bl	801638c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3708      	adds	r7, #8
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b085      	sub	sp, #20
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	4603      	mov	r3, r0
 8012c88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c92:	2b84      	cmp	r3, #132	; 0x84
 8012c94:	d005      	beq.n	8012ca2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012c96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	3303      	adds	r3, #3
 8012ca0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3714      	adds	r7, #20
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr

08012cb0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b083      	sub	sp, #12
 8012cb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cb6:	f3ef 8305 	mrs	r3, IPSR
 8012cba:	607b      	str	r3, [r7, #4]
  return(result);
 8012cbc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	bf14      	ite	ne
 8012cc2:	2301      	movne	r3, #1
 8012cc4:	2300      	moveq	r3, #0
 8012cc6:	b2db      	uxtb	r3, r3
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012cd8:	f001 fb4c 	bl	8014374 <vTaskStartScheduler>
  
  return osOK;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	bd80      	pop	{r7, pc}

08012ce2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce4:	b089      	sub	sp, #36	; 0x24
 8012ce6:	af04      	add	r7, sp, #16
 8012ce8:	6078      	str	r0, [r7, #4]
 8012cea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	695b      	ldr	r3, [r3, #20]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d020      	beq.n	8012d36 <osThreadCreate+0x54>
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	699b      	ldr	r3, [r3, #24]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d01c      	beq.n	8012d36 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	685c      	ldr	r4, [r3, #4]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681d      	ldr	r5, [r3, #0]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	691e      	ldr	r6, [r3, #16]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7ff ffb6 	bl	8012c80 <makeFreeRtosPriority>
 8012d14:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	695b      	ldr	r3, [r3, #20]
 8012d1a:	687a      	ldr	r2, [r7, #4]
 8012d1c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d1e:	9202      	str	r2, [sp, #8]
 8012d20:	9301      	str	r3, [sp, #4]
 8012d22:	9100      	str	r1, [sp, #0]
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	4632      	mov	r2, r6
 8012d28:	4629      	mov	r1, r5
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	f001 f95a 	bl	8013fe4 <xTaskCreateStatic>
 8012d30:	4603      	mov	r3, r0
 8012d32:	60fb      	str	r3, [r7, #12]
 8012d34:	e01c      	b.n	8012d70 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	685c      	ldr	r4, [r3, #4]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d42:	b29e      	uxth	r6, r3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7ff ff98 	bl	8012c80 <makeFreeRtosPriority>
 8012d50:	4602      	mov	r2, r0
 8012d52:	f107 030c 	add.w	r3, r7, #12
 8012d56:	9301      	str	r3, [sp, #4]
 8012d58:	9200      	str	r2, [sp, #0]
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	4632      	mov	r2, r6
 8012d5e:	4629      	mov	r1, r5
 8012d60:	4620      	mov	r0, r4
 8012d62:	f001 f99c 	bl	801409e <xTaskCreate>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d001      	beq.n	8012d70 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	e000      	b.n	8012d72 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012d70:	68fb      	ldr	r3, [r7, #12]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3714      	adds	r7, #20
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012d7a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b084      	sub	sp, #16
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d001      	beq.n	8012d90 <osDelay+0x16>
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	e000      	b.n	8012d92 <osDelay+0x18>
 8012d90:	2301      	movs	r3, #1
 8012d92:	4618      	mov	r0, r3
 8012d94:	f001 faba 	bl	801430c <vTaskDelay>
  
  return osOK;
 8012d98:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3710      	adds	r7, #16
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
	...

08012da4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b086      	sub	sp, #24
 8012da8:	af02      	add	r7, sp, #8
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8012dae:	2300      	movs	r3, #0
 8012db0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8012db2:	2300      	movs	r3, #0
 8012db4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8012db6:	f7ff ff7b 	bl	8012cb0 <inHandlerMode>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d01c      	beq.n	8012dfa <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8012dc0:	6839      	ldr	r1, [r7, #0]
 8012dc2:	f107 0208 	add.w	r2, r7, #8
 8012dc6:	f107 030c 	add.w	r3, r7, #12
 8012dca:	9300      	str	r3, [sp, #0]
 8012dcc:	4613      	mov	r3, r2
 8012dce:	2201      	movs	r2, #1
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f002 f881 	bl	8014ed8 <xTaskGenericNotifyFromISR>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d002      	beq.n	8012de2 <osSignalSet+0x3e>
      return 0x80000000;
 8012ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012de0:	e019      	b.n	8012e16 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d015      	beq.n	8012e14 <osSignalSet+0x70>
 8012de8:	4b0d      	ldr	r3, [pc, #52]	; (8012e20 <osSignalSet+0x7c>)
 8012dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dee:	601a      	str	r2, [r3, #0]
 8012df0:	f3bf 8f4f 	dsb	sy
 8012df4:	f3bf 8f6f 	isb	sy
 8012df8:	e00c      	b.n	8012e14 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012dfa:	6839      	ldr	r1, [r7, #0]
 8012dfc:	f107 0308 	add.w	r3, r7, #8
 8012e00:	2201      	movs	r2, #1
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f001 ffb2 	bl	8014d6c <xTaskGenericNotify>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d002      	beq.n	8012e14 <osSignalSet+0x70>
    return 0x80000000;
 8012e0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e12:	e000      	b.n	8012e16 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8012e14:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	e000ed04 	.word	0xe000ed04

08012e24 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8012e24:	b590      	push	{r4, r7, lr}
 8012e26:	b089      	sub	sp, #36	; 0x24
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8012e30:	2300      	movs	r3, #0
 8012e32:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8012e34:	2300      	movs	r3, #0
 8012e36:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e3e:	d103      	bne.n	8012e48 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8012e40:	f04f 33ff 	mov.w	r3, #4294967295
 8012e44:	61fb      	str	r3, [r7, #28]
 8012e46:	e009      	b.n	8012e5c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d006      	beq.n	8012e5c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d101      	bne.n	8012e5c <osSignalWait+0x38>
      ticks = 1;
 8012e58:	2301      	movs	r3, #1
 8012e5a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8012e5c:	f7ff ff28 	bl	8012cb0 <inHandlerMode>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d002      	beq.n	8012e6c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012e66:	2382      	movs	r3, #130	; 0x82
 8012e68:	613b      	str	r3, [r7, #16]
 8012e6a:	e01b      	b.n	8012ea4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012e6c:	68b9      	ldr	r1, [r7, #8]
 8012e6e:	f107 0310 	add.w	r3, r7, #16
 8012e72:	1d1a      	adds	r2, r3, #4
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	2000      	movs	r0, #0
 8012e78:	f001 ff1e 	bl	8014cb8 <xTaskNotifyWait>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	2b01      	cmp	r3, #1
 8012e80:	d008      	beq.n	8012e94 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8012e82:	69fb      	ldr	r3, [r7, #28]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d102      	bne.n	8012e8e <osSignalWait+0x6a>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	613b      	str	r3, [r7, #16]
 8012e8c:	e00a      	b.n	8012ea4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8012e8e:	2340      	movs	r3, #64	; 0x40
 8012e90:	613b      	str	r3, [r7, #16]
 8012e92:	e007      	b.n	8012ea4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	da02      	bge.n	8012ea0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8012e9a:	2386      	movs	r3, #134	; 0x86
 8012e9c:	613b      	str	r3, [r7, #16]
 8012e9e:	e001      	b.n	8012ea4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8012ea0:	2308      	movs	r3, #8
 8012ea2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	461c      	mov	r4, r3
 8012ea8:	f107 0310 	add.w	r3, r7, #16
 8012eac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012eb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	3724      	adds	r7, #36	; 0x24
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd90      	pop	{r4, r7, pc}

08012ebc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	685b      	ldr	r3, [r3, #4]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d007      	beq.n	8012edc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	2001      	movs	r0, #1
 8012ed4:	f000 fc65 	bl	80137a2 <xQueueCreateMutexStatic>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	e003      	b.n	8012ee4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012edc:	2001      	movs	r0, #1
 8012ede:	f000 fc48 	bl	8013772 <xQueueCreateMutex>
 8012ee2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3708      	adds	r7, #8
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}

08012eec <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b086      	sub	sp, #24
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	3303      	adds	r3, #3
 8012efa:	f023 0303 	bic.w	r3, r3, #3
 8012efe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012f00:	2014      	movs	r0, #20
 8012f02:	f002 fb79 	bl	80155f8 <pvPortMalloc>
 8012f06:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d046      	beq.n	8012f9c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012f16:	68fa      	ldr	r2, [r7, #12]
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	4618      	mov	r0, r3
 8012f28:	f002 fb66 	bl	80155f8 <pvPortMalloc>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	685b      	ldr	r3, [r3, #4]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d02b      	beq.n	8012f92 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	68fa      	ldr	r2, [r7, #12]
 8012f40:	fb02 f303 	mul.w	r3, r2, r3
 8012f44:	4618      	mov	r0, r3
 8012f46:	f002 fb57 	bl	80155f8 <pvPortMalloc>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d011      	beq.n	8012f7c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012f58:	2300      	movs	r3, #0
 8012f5a:	613b      	str	r3, [r7, #16]
 8012f5c:	e008      	b.n	8012f70 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	685a      	ldr	r2, [r3, #4]
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	4413      	add	r3, r2
 8012f66:	2200      	movs	r2, #0
 8012f68:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	613b      	str	r3, [r7, #16]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	693a      	ldr	r2, [r7, #16]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d3f1      	bcc.n	8012f5e <osPoolCreate+0x72>
 8012f7a:	e00f      	b.n	8012f9c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	4618      	mov	r0, r3
 8012f82:	f002 fbfd 	bl	8015780 <vPortFree>
        vPortFree(thePool);
 8012f86:	6978      	ldr	r0, [r7, #20]
 8012f88:	f002 fbfa 	bl	8015780 <vPortFree>
        thePool = NULL;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	617b      	str	r3, [r7, #20]
 8012f90:	e004      	b.n	8012f9c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012f92:	6978      	ldr	r0, [r7, #20]
 8012f94:	f002 fbf4 	bl	8015780 <vPortFree>
      thePool = NULL;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012f9c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3718      	adds	r7, #24
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}

08012fa6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012fa6:	b580      	push	{r7, lr}
 8012fa8:	b08a      	sub	sp, #40	; 0x28
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012fb6:	f7ff fe7b 	bl	8012cb0 <inHandlerMode>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d00e      	beq.n	8012fde <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012fc0:	f3ef 8211 	mrs	r2, BASEPRI
 8012fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc8:	f383 8811 	msr	BASEPRI, r3
 8012fcc:	f3bf 8f6f 	isb	sy
 8012fd0:	f3bf 8f4f 	dsb	sy
 8012fd4:	617a      	str	r2, [r7, #20]
 8012fd6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012fd8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012fda:	627b      	str	r3, [r7, #36]	; 0x24
 8012fdc:	e001      	b.n	8012fe2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012fde:	f002 f9e9 	bl	80153b4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	61fb      	str	r3, [r7, #28]
 8012fe6:	e029      	b.n	801303c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	691a      	ldr	r2, [r3, #16]
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	4413      	add	r3, r2
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	6892      	ldr	r2, [r2, #8]
 8012ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ff8:	fb02 f201 	mul.w	r2, r2, r1
 8012ffc:	1a9b      	subs	r3, r3, r2
 8012ffe:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	685a      	ldr	r2, [r3, #4]
 8013004:	69bb      	ldr	r3, [r7, #24]
 8013006:	4413      	add	r3, r2
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d113      	bne.n	8013036 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	685a      	ldr	r2, [r3, #4]
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	4413      	add	r3, r2
 8013016:	2201      	movs	r2, #1
 8013018:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	4619      	mov	r1, r3
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	69ba      	ldr	r2, [r7, #24]
 8013026:	fb02 f303 	mul.w	r3, r2, r3
 801302a:	440b      	add	r3, r1
 801302c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	69ba      	ldr	r2, [r7, #24]
 8013032:	611a      	str	r2, [r3, #16]
      break;
 8013034:	e007      	b.n	8013046 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8013036:	69fb      	ldr	r3, [r7, #28]
 8013038:	3301      	adds	r3, #1
 801303a:	61fb      	str	r3, [r7, #28]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	689b      	ldr	r3, [r3, #8]
 8013040:	69fa      	ldr	r2, [r7, #28]
 8013042:	429a      	cmp	r2, r3
 8013044:	d3d0      	bcc.n	8012fe8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8013046:	f7ff fe33 	bl	8012cb0 <inHandlerMode>
 801304a:	4603      	mov	r3, r0
 801304c:	2b00      	cmp	r3, #0
 801304e:	d005      	beq.n	801305c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8013050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013052:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801305a:	e001      	b.n	8013060 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 801305c:	f002 f9da 	bl	8015414 <vPortExitCritical>
  }
  
  return p;
 8013060:	6a3b      	ldr	r3, [r7, #32]
}
 8013062:	4618      	mov	r0, r3
 8013064:	3728      	adds	r7, #40	; 0x28
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}

0801306a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801306a:	b480      	push	{r7}
 801306c:	b085      	sub	sp, #20
 801306e:	af00      	add	r7, sp, #0
 8013070:	6078      	str	r0, [r7, #4]
 8013072:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d101      	bne.n	801307e <osPoolFree+0x14>
    return osErrorParameter;
 801307a:	2380      	movs	r3, #128	; 0x80
 801307c:	e030      	b.n	80130e0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d101      	bne.n	8013088 <osPoolFree+0x1e>
    return osErrorParameter;
 8013084:	2380      	movs	r3, #128	; 0x80
 8013086:	e02b      	b.n	80130e0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	683a      	ldr	r2, [r7, #0]
 801308e:	429a      	cmp	r2, r3
 8013090:	d201      	bcs.n	8013096 <osPoolFree+0x2c>
    return osErrorParameter;
 8013092:	2380      	movs	r3, #128	; 0x80
 8013094:	e024      	b.n	80130e0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	6812      	ldr	r2, [r2, #0]
 801309c:	1a9b      	subs	r3, r3, r2
 801309e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	68da      	ldr	r2, [r3, #12]
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80130aa:	fb02 f201 	mul.w	r2, r2, r1
 80130ae:	1a9b      	subs	r3, r3, r2
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d001      	beq.n	80130b8 <osPoolFree+0x4e>
    return osErrorParameter;
 80130b4:	2380      	movs	r3, #128	; 0x80
 80130b6:	e013      	b.n	80130e0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	68db      	ldr	r3, [r3, #12]
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	fbb2 f3f3 	udiv	r3, r2, r3
 80130c2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	689b      	ldr	r3, [r3, #8]
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d301      	bcc.n	80130d2 <osPoolFree+0x68>
    return osErrorParameter;
 80130ce:	2380      	movs	r3, #128	; 0x80
 80130d0:	e006      	b.n	80130e0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	685a      	ldr	r2, [r3, #4]
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	4413      	add	r3, r2
 80130da:	2200      	movs	r2, #0
 80130dc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80130de:	2300      	movs	r3, #0
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3714      	adds	r7, #20
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80130ec:	b590      	push	{r4, r7, lr}
 80130ee:	b087      	sub	sp, #28
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	60fb      	str	r3, [r7, #12]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	613b      	str	r3, [r7, #16]
 8013102:	2300      	movs	r3, #0
 8013104:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	689c      	ldr	r4, [r3, #8]
 801310a:	200c      	movs	r0, #12
 801310c:	f002 fa74 	bl	80155f8 <pvPortMalloc>
 8013110:	4603      	mov	r3, r0
 8013112:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	689b      	ldr	r3, [r3, #8]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d101      	bne.n	8013122 <osMailCreate+0x36>
    return NULL;
 801311e:	2300      	movs	r3, #0
 8013120:	e038      	b.n	8013194 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	689b      	ldr	r3, [r3, #8]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	687a      	ldr	r2, [r7, #4]
 801312a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6818      	ldr	r0, [r3, #0]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	689b      	ldr	r3, [r3, #8]
 8013134:	681c      	ldr	r4, [r3, #0]
 8013136:	2200      	movs	r2, #0
 8013138:	2104      	movs	r1, #4
 801313a:	f000 faa1 	bl	8013680 <xQueueGenericCreate>
 801313e:	4603      	mov	r3, r0
 8013140:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	685b      	ldr	r3, [r3, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d107      	bne.n	801315e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	689b      	ldr	r3, [r3, #8]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	4618      	mov	r0, r3
 8013156:	f002 fb13 	bl	8015780 <vPortFree>
    return NULL;
 801315a:	2300      	movs	r3, #0
 801315c:	e01a      	b.n	8013194 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	689b      	ldr	r3, [r3, #8]
 8013162:	681c      	ldr	r4, [r3, #0]
 8013164:	f107 030c 	add.w	r3, r7, #12
 8013168:	4618      	mov	r0, r3
 801316a:	f7ff febf 	bl	8012eec <osPoolCreate>
 801316e:	4603      	mov	r3, r0
 8013170:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	689b      	ldr	r3, [r3, #8]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	689b      	ldr	r3, [r3, #8]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d107      	bne.n	801318e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	689b      	ldr	r3, [r3, #8]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4618      	mov	r0, r3
 8013186:	f002 fafb 	bl	8015780 <vPortFree>
    return NULL;
 801318a:	2300      	movs	r3, #0
 801318c:	e002      	b.n	8013194 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	689b      	ldr	r3, [r3, #8]
 8013192:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8013194:	4618      	mov	r0, r3
 8013196:	371c      	adds	r7, #28
 8013198:	46bd      	mov	sp, r7
 801319a:	bd90      	pop	{r4, r7, pc}

0801319c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d101      	bne.n	80131b0 <osMailAlloc+0x14>
    return NULL;
 80131ac:	2300      	movs	r3, #0
 80131ae:	e006      	b.n	80131be <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	689b      	ldr	r3, [r3, #8]
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7ff fef6 	bl	8012fa6 <osPoolAlloc>
 80131ba:	60f8      	str	r0, [r7, #12]
  
  return p;
 80131bc:	68fb      	ldr	r3, [r7, #12]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3710      	adds	r7, #16
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
	...

080131c8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d101      	bne.n	80131dc <osMailPut+0x14>
    return osErrorParameter;
 80131d8:	2380      	movs	r3, #128	; 0x80
 80131da:	e02c      	b.n	8013236 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80131dc:	2300      	movs	r3, #0
 80131de:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80131e0:	f7ff fd66 	bl	8012cb0 <inHandlerMode>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d018      	beq.n	801321c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6858      	ldr	r0, [r3, #4]
 80131ee:	f107 020c 	add.w	r2, r7, #12
 80131f2:	4639      	mov	r1, r7
 80131f4:	2300      	movs	r3, #0
 80131f6:	f000 fbed 	bl	80139d4 <xQueueGenericSendFromISR>
 80131fa:	4603      	mov	r3, r0
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d001      	beq.n	8013204 <osMailPut+0x3c>
      return osErrorOS;
 8013200:	23ff      	movs	r3, #255	; 0xff
 8013202:	e018      	b.n	8013236 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d014      	beq.n	8013234 <osMailPut+0x6c>
 801320a:	4b0d      	ldr	r3, [pc, #52]	; (8013240 <osMailPut+0x78>)
 801320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013210:	601a      	str	r2, [r3, #0]
 8013212:	f3bf 8f4f 	dsb	sy
 8013216:	f3bf 8f6f 	isb	sy
 801321a:	e00b      	b.n	8013234 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6858      	ldr	r0, [r3, #4]
 8013220:	4639      	mov	r1, r7
 8013222:	2300      	movs	r3, #0
 8013224:	2200      	movs	r2, #0
 8013226:	f000 fad7 	bl	80137d8 <xQueueGenericSend>
 801322a:	4603      	mov	r3, r0
 801322c:	2b01      	cmp	r3, #1
 801322e:	d001      	beq.n	8013234 <osMailPut+0x6c>
      return osErrorOS;
 8013230:	23ff      	movs	r3, #255	; 0xff
 8013232:	e000      	b.n	8013236 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8013234:	2300      	movs	r3, #0
}
 8013236:	4618      	mov	r0, r3
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	e000ed04 	.word	0xe000ed04

08013244 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8013244:	b590      	push	{r4, r7, lr}
 8013246:	b08b      	sub	sp, #44	; 0x2c
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d10a      	bne.n	8013270 <osMailGet+0x2c>
    event.status = osErrorParameter;
 801325a:	2380      	movs	r3, #128	; 0x80
 801325c:	617b      	str	r3, [r7, #20]
    return event;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	461c      	mov	r4, r3
 8013262:	f107 0314 	add.w	r3, r7, #20
 8013266:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801326a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801326e:	e056      	b.n	801331e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013270:	2300      	movs	r3, #0
 8013272:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8013274:	2300      	movs	r3, #0
 8013276:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801327e:	d103      	bne.n	8013288 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8013280:	f04f 33ff 	mov.w	r3, #4294967295
 8013284:	627b      	str	r3, [r7, #36]	; 0x24
 8013286:	e009      	b.n	801329c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d006      	beq.n	801329c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8013292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013294:	2b00      	cmp	r3, #0
 8013296:	d101      	bne.n	801329c <osMailGet+0x58>
      ticks = 1;
 8013298:	2301      	movs	r3, #1
 801329a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801329c:	f7ff fd08 	bl	8012cb0 <inHandlerMode>
 80132a0:	4603      	mov	r3, r0
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d01d      	beq.n	80132e2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	6858      	ldr	r0, [r3, #4]
 80132aa:	f107 0220 	add.w	r2, r7, #32
 80132ae:	f107 0314 	add.w	r3, r7, #20
 80132b2:	3304      	adds	r3, #4
 80132b4:	4619      	mov	r1, r3
 80132b6:	f000 fd05 	bl	8013cc4 <xQueueReceiveFromISR>
 80132ba:	4603      	mov	r3, r0
 80132bc:	2b01      	cmp	r3, #1
 80132be:	d102      	bne.n	80132c6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80132c0:	2320      	movs	r3, #32
 80132c2:	617b      	str	r3, [r7, #20]
 80132c4:	e001      	b.n	80132ca <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80132c6:	2300      	movs	r3, #0
 80132c8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80132ca:	6a3b      	ldr	r3, [r7, #32]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d01e      	beq.n	801330e <osMailGet+0xca>
 80132d0:	4b15      	ldr	r3, [pc, #84]	; (8013328 <osMailGet+0xe4>)
 80132d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132d6:	601a      	str	r2, [r3, #0]
 80132d8:	f3bf 8f4f 	dsb	sy
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	e015      	b.n	801330e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	6858      	ldr	r0, [r3, #4]
 80132e6:	f107 0314 	add.w	r3, r7, #20
 80132ea:	3304      	adds	r3, #4
 80132ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132ee:	4619      	mov	r1, r3
 80132f0:	f000 fc08 	bl	8013b04 <xQueueReceive>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d102      	bne.n	8013300 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80132fa:	2320      	movs	r3, #32
 80132fc:	617b      	str	r3, [r7, #20]
 80132fe:	e006      	b.n	801330e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8013300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013302:	2b00      	cmp	r3, #0
 8013304:	d101      	bne.n	801330a <osMailGet+0xc6>
 8013306:	2300      	movs	r3, #0
 8013308:	e000      	b.n	801330c <osMailGet+0xc8>
 801330a:	2340      	movs	r3, #64	; 0x40
 801330c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	461c      	mov	r4, r3
 8013312:	f107 0314 	add.w	r3, r7, #20
 8013316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801331a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801331e:	68f8      	ldr	r0, [r7, #12]
 8013320:	372c      	adds	r7, #44	; 0x2c
 8013322:	46bd      	mov	sp, r7
 8013324:	bd90      	pop	{r4, r7, pc}
 8013326:	bf00      	nop
 8013328:	e000ed04 	.word	0xe000ed04

0801332c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d101      	bne.n	8013340 <osMailFree+0x14>
    return osErrorParameter;
 801333c:	2380      	movs	r3, #128	; 0x80
 801333e:	e006      	b.n	801334e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	689b      	ldr	r3, [r3, #8]
 8013344:	6839      	ldr	r1, [r7, #0]
 8013346:	4618      	mov	r0, r3
 8013348:	f7ff fe8f 	bl	801306a <osPoolFree>
 801334c:	4603      	mov	r3, r0
}
 801334e:	4618      	mov	r0, r3
 8013350:	3708      	adds	r7, #8
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013356:	b480      	push	{r7}
 8013358:	b083      	sub	sp, #12
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f103 0208 	add.w	r2, r3, #8
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f04f 32ff 	mov.w	r2, #4294967295
 801336e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f103 0208 	add.w	r2, r3, #8
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f103 0208 	add.w	r2, r3, #8
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2200      	movs	r2, #0
 8013388:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801338a:	bf00      	nop
 801338c:	370c      	adds	r7, #12
 801338e:	46bd      	mov	sp, r7
 8013390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013394:	4770      	bx	lr

08013396 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013396:	b480      	push	{r7}
 8013398:	b083      	sub	sp, #12
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2200      	movs	r2, #0
 80133a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80133a4:	bf00      	nop
 80133a6:	370c      	adds	r7, #12
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr

080133b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80133b0:	b480      	push	{r7}
 80133b2:	b085      	sub	sp, #20
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	68fa      	ldr	r2, [r7, #12]
 80133c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	689a      	ldr	r2, [r3, #8]
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	689b      	ldr	r3, [r3, #8]
 80133d2:	683a      	ldr	r2, [r7, #0]
 80133d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	683a      	ldr	r2, [r7, #0]
 80133da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	1c5a      	adds	r2, r3, #1
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	601a      	str	r2, [r3, #0]
}
 80133ec:	bf00      	nop
 80133ee:	3714      	adds	r7, #20
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	4770      	bx	lr

080133f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80133f8:	b480      	push	{r7}
 80133fa:	b085      	sub	sp, #20
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801340e:	d103      	bne.n	8013418 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	691b      	ldr	r3, [r3, #16]
 8013414:	60fb      	str	r3, [r7, #12]
 8013416:	e00c      	b.n	8013432 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3308      	adds	r3, #8
 801341c:	60fb      	str	r3, [r7, #12]
 801341e:	e002      	b.n	8013426 <vListInsert+0x2e>
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	60fb      	str	r3, [r7, #12]
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	68ba      	ldr	r2, [r7, #8]
 801342e:	429a      	cmp	r2, r3
 8013430:	d2f6      	bcs.n	8013420 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	685a      	ldr	r2, [r3, #4]
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	685b      	ldr	r3, [r3, #4]
 801343e:	683a      	ldr	r2, [r7, #0]
 8013440:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	68fa      	ldr	r2, [r7, #12]
 8013446:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	683a      	ldr	r2, [r7, #0]
 801344c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	687a      	ldr	r2, [r7, #4]
 8013452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	1c5a      	adds	r2, r3, #1
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	601a      	str	r2, [r3, #0]
}
 801345e:	bf00      	nop
 8013460:	3714      	adds	r7, #20
 8013462:	46bd      	mov	sp, r7
 8013464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013468:	4770      	bx	lr

0801346a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801346a:	b480      	push	{r7}
 801346c:	b085      	sub	sp, #20
 801346e:	af00      	add	r7, sp, #0
 8013470:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	691b      	ldr	r3, [r3, #16]
 8013476:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	687a      	ldr	r2, [r7, #4]
 801347e:	6892      	ldr	r2, [r2, #8]
 8013480:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	6852      	ldr	r2, [r2, #4]
 801348a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	685b      	ldr	r3, [r3, #4]
 8013490:	687a      	ldr	r2, [r7, #4]
 8013492:	429a      	cmp	r2, r3
 8013494:	d103      	bne.n	801349e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	689a      	ldr	r2, [r3, #8]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2200      	movs	r2, #0
 80134a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	1e5a      	subs	r2, r3, #1
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3714      	adds	r7, #20
 80134b6:	46bd      	mov	sp, r7
 80134b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134bc:	4770      	bx	lr
	...

080134c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d10a      	bne.n	80134ea <xQueueGenericReset+0x2a>
	__asm volatile
 80134d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d8:	f383 8811 	msr	BASEPRI, r3
 80134dc:	f3bf 8f6f 	isb	sy
 80134e0:	f3bf 8f4f 	dsb	sy
 80134e4:	60bb      	str	r3, [r7, #8]
}
 80134e6:	bf00      	nop
 80134e8:	e7fe      	b.n	80134e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80134ea:	f001 ff63 	bl	80153b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681a      	ldr	r2, [r3, #0]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134f6:	68f9      	ldr	r1, [r7, #12]
 80134f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80134fa:	fb01 f303 	mul.w	r3, r1, r3
 80134fe:	441a      	add	r2, r3
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2200      	movs	r2, #0
 8013508:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681a      	ldr	r2, [r3, #0]
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801351a:	3b01      	subs	r3, #1
 801351c:	68f9      	ldr	r1, [r7, #12]
 801351e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013520:	fb01 f303 	mul.w	r3, r1, r3
 8013524:	441a      	add	r2, r3
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	22ff      	movs	r2, #255	; 0xff
 801352e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	22ff      	movs	r2, #255	; 0xff
 8013536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d114      	bne.n	801356a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d01a      	beq.n	801357e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	3310      	adds	r3, #16
 801354c:	4618      	mov	r0, r3
 801354e:	f001 f953 	bl	80147f8 <xTaskRemoveFromEventList>
 8013552:	4603      	mov	r3, r0
 8013554:	2b00      	cmp	r3, #0
 8013556:	d012      	beq.n	801357e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013558:	4b0c      	ldr	r3, [pc, #48]	; (801358c <xQueueGenericReset+0xcc>)
 801355a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801355e:	601a      	str	r2, [r3, #0]
 8013560:	f3bf 8f4f 	dsb	sy
 8013564:	f3bf 8f6f 	isb	sy
 8013568:	e009      	b.n	801357e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	3310      	adds	r3, #16
 801356e:	4618      	mov	r0, r3
 8013570:	f7ff fef1 	bl	8013356 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	3324      	adds	r3, #36	; 0x24
 8013578:	4618      	mov	r0, r3
 801357a:	f7ff feec 	bl	8013356 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801357e:	f001 ff49 	bl	8015414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013582:	2301      	movs	r3, #1
}
 8013584:	4618      	mov	r0, r3
 8013586:	3710      	adds	r7, #16
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	e000ed04 	.word	0xe000ed04

08013590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013590:	b580      	push	{r7, lr}
 8013592:	b08e      	sub	sp, #56	; 0x38
 8013594:	af02      	add	r7, sp, #8
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	607a      	str	r2, [r7, #4]
 801359c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d10a      	bne.n	80135ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80135a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a8:	f383 8811 	msr	BASEPRI, r3
 80135ac:	f3bf 8f6f 	isb	sy
 80135b0:	f3bf 8f4f 	dsb	sy
 80135b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80135b6:	bf00      	nop
 80135b8:	e7fe      	b.n	80135b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d10a      	bne.n	80135d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80135c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c4:	f383 8811 	msr	BASEPRI, r3
 80135c8:	f3bf 8f6f 	isb	sy
 80135cc:	f3bf 8f4f 	dsb	sy
 80135d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80135d2:	bf00      	nop
 80135d4:	e7fe      	b.n	80135d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d002      	beq.n	80135e2 <xQueueGenericCreateStatic+0x52>
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d001      	beq.n	80135e6 <xQueueGenericCreateStatic+0x56>
 80135e2:	2301      	movs	r3, #1
 80135e4:	e000      	b.n	80135e8 <xQueueGenericCreateStatic+0x58>
 80135e6:	2300      	movs	r3, #0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d10a      	bne.n	8013602 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80135ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f0:	f383 8811 	msr	BASEPRI, r3
 80135f4:	f3bf 8f6f 	isb	sy
 80135f8:	f3bf 8f4f 	dsb	sy
 80135fc:	623b      	str	r3, [r7, #32]
}
 80135fe:	bf00      	nop
 8013600:	e7fe      	b.n	8013600 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d102      	bne.n	801360e <xQueueGenericCreateStatic+0x7e>
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <xQueueGenericCreateStatic+0x82>
 801360e:	2301      	movs	r3, #1
 8013610:	e000      	b.n	8013614 <xQueueGenericCreateStatic+0x84>
 8013612:	2300      	movs	r3, #0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d10a      	bne.n	801362e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361c:	f383 8811 	msr	BASEPRI, r3
 8013620:	f3bf 8f6f 	isb	sy
 8013624:	f3bf 8f4f 	dsb	sy
 8013628:	61fb      	str	r3, [r7, #28]
}
 801362a:	bf00      	nop
 801362c:	e7fe      	b.n	801362c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801362e:	2348      	movs	r3, #72	; 0x48
 8013630:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	2b48      	cmp	r3, #72	; 0x48
 8013636:	d00a      	beq.n	801364e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801363c:	f383 8811 	msr	BASEPRI, r3
 8013640:	f3bf 8f6f 	isb	sy
 8013644:	f3bf 8f4f 	dsb	sy
 8013648:	61bb      	str	r3, [r7, #24]
}
 801364a:	bf00      	nop
 801364c:	e7fe      	b.n	801364c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801364e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00d      	beq.n	8013676 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365c:	2201      	movs	r2, #1
 801365e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013662:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013668:	9300      	str	r3, [sp, #0]
 801366a:	4613      	mov	r3, r2
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	68b9      	ldr	r1, [r7, #8]
 8013670:	68f8      	ldr	r0, [r7, #12]
 8013672:	f000 f845 	bl	8013700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013678:	4618      	mov	r0, r3
 801367a:	3730      	adds	r7, #48	; 0x30
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}

08013680 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013680:	b580      	push	{r7, lr}
 8013682:	b08a      	sub	sp, #40	; 0x28
 8013684:	af02      	add	r7, sp, #8
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	4613      	mov	r3, r2
 801368c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d10a      	bne.n	80136aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8013694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013698:	f383 8811 	msr	BASEPRI, r3
 801369c:	f3bf 8f6f 	isb	sy
 80136a0:	f3bf 8f4f 	dsb	sy
 80136a4:	613b      	str	r3, [r7, #16]
}
 80136a6:	bf00      	nop
 80136a8:	e7fe      	b.n	80136a8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d102      	bne.n	80136b6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80136b0:	2300      	movs	r3, #0
 80136b2:	61fb      	str	r3, [r7, #28]
 80136b4:	e004      	b.n	80136c0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	68ba      	ldr	r2, [r7, #8]
 80136ba:	fb02 f303 	mul.w	r3, r2, r3
 80136be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	3348      	adds	r3, #72	; 0x48
 80136c4:	4618      	mov	r0, r3
 80136c6:	f001 ff97 	bl	80155f8 <pvPortMalloc>
 80136ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d011      	beq.n	80136f6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	3348      	adds	r3, #72	; 0x48
 80136da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	2200      	movs	r2, #0
 80136e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80136e4:	79fa      	ldrb	r2, [r7, #7]
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	9300      	str	r3, [sp, #0]
 80136ea:	4613      	mov	r3, r2
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	68b9      	ldr	r1, [r7, #8]
 80136f0:	68f8      	ldr	r0, [r7, #12]
 80136f2:	f000 f805 	bl	8013700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80136f6:	69bb      	ldr	r3, [r7, #24]
	}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3720      	adds	r7, #32
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
 801370c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d103      	bne.n	801371c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013714:	69bb      	ldr	r3, [r7, #24]
 8013716:	69ba      	ldr	r2, [r7, #24]
 8013718:	601a      	str	r2, [r3, #0]
 801371a:	e002      	b.n	8013722 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	68fa      	ldr	r2, [r7, #12]
 8013726:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	68ba      	ldr	r2, [r7, #8]
 801372c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801372e:	2101      	movs	r1, #1
 8013730:	69b8      	ldr	r0, [r7, #24]
 8013732:	f7ff fec5 	bl	80134c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013736:	bf00      	nop
 8013738:	3710      	adds	r7, #16
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801373e:	b580      	push	{r7, lr}
 8013740:	b082      	sub	sp, #8
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d00e      	beq.n	801376a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2200      	movs	r2, #0
 8013750:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2200      	movs	r2, #0
 8013756:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801375e:	2300      	movs	r3, #0
 8013760:	2200      	movs	r2, #0
 8013762:	2100      	movs	r1, #0
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f000 f837 	bl	80137d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801376a:	bf00      	nop
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}

08013772 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013772:	b580      	push	{r7, lr}
 8013774:	b086      	sub	sp, #24
 8013776:	af00      	add	r7, sp, #0
 8013778:	4603      	mov	r3, r0
 801377a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801377c:	2301      	movs	r3, #1
 801377e:	617b      	str	r3, [r7, #20]
 8013780:	2300      	movs	r3, #0
 8013782:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013784:	79fb      	ldrb	r3, [r7, #7]
 8013786:	461a      	mov	r2, r3
 8013788:	6939      	ldr	r1, [r7, #16]
 801378a:	6978      	ldr	r0, [r7, #20]
 801378c:	f7ff ff78 	bl	8013680 <xQueueGenericCreate>
 8013790:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013792:	68f8      	ldr	r0, [r7, #12]
 8013794:	f7ff ffd3 	bl	801373e <prvInitialiseMutex>

		return xNewQueue;
 8013798:	68fb      	ldr	r3, [r7, #12]
	}
 801379a:	4618      	mov	r0, r3
 801379c:	3718      	adds	r7, #24
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80137a2:	b580      	push	{r7, lr}
 80137a4:	b088      	sub	sp, #32
 80137a6:	af02      	add	r7, sp, #8
 80137a8:	4603      	mov	r3, r0
 80137aa:	6039      	str	r1, [r7, #0]
 80137ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80137ae:	2301      	movs	r3, #1
 80137b0:	617b      	str	r3, [r7, #20]
 80137b2:	2300      	movs	r3, #0
 80137b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80137b6:	79fb      	ldrb	r3, [r7, #7]
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	2200      	movs	r2, #0
 80137be:	6939      	ldr	r1, [r7, #16]
 80137c0:	6978      	ldr	r0, [r7, #20]
 80137c2:	f7ff fee5 	bl	8013590 <xQueueGenericCreateStatic>
 80137c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80137c8:	68f8      	ldr	r0, [r7, #12]
 80137ca:	f7ff ffb8 	bl	801373e <prvInitialiseMutex>

		return xNewQueue;
 80137ce:	68fb      	ldr	r3, [r7, #12]
	}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3718      	adds	r7, #24
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b08e      	sub	sp, #56	; 0x38
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
 80137e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80137e6:	2300      	movs	r3, #0
 80137e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80137ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d10a      	bne.n	801380a <xQueueGenericSend+0x32>
	__asm volatile
 80137f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f8:	f383 8811 	msr	BASEPRI, r3
 80137fc:	f3bf 8f6f 	isb	sy
 8013800:	f3bf 8f4f 	dsb	sy
 8013804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013806:	bf00      	nop
 8013808:	e7fe      	b.n	8013808 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d103      	bne.n	8013818 <xQueueGenericSend+0x40>
 8013810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013814:	2b00      	cmp	r3, #0
 8013816:	d101      	bne.n	801381c <xQueueGenericSend+0x44>
 8013818:	2301      	movs	r3, #1
 801381a:	e000      	b.n	801381e <xQueueGenericSend+0x46>
 801381c:	2300      	movs	r3, #0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d10a      	bne.n	8013838 <xQueueGenericSend+0x60>
	__asm volatile
 8013822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013826:	f383 8811 	msr	BASEPRI, r3
 801382a:	f3bf 8f6f 	isb	sy
 801382e:	f3bf 8f4f 	dsb	sy
 8013832:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013834:	bf00      	nop
 8013836:	e7fe      	b.n	8013836 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	2b02      	cmp	r3, #2
 801383c:	d103      	bne.n	8013846 <xQueueGenericSend+0x6e>
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013842:	2b01      	cmp	r3, #1
 8013844:	d101      	bne.n	801384a <xQueueGenericSend+0x72>
 8013846:	2301      	movs	r3, #1
 8013848:	e000      	b.n	801384c <xQueueGenericSend+0x74>
 801384a:	2300      	movs	r3, #0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10a      	bne.n	8013866 <xQueueGenericSend+0x8e>
	__asm volatile
 8013850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	623b      	str	r3, [r7, #32]
}
 8013862:	bf00      	nop
 8013864:	e7fe      	b.n	8013864 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013866:	f001 f983 	bl	8014b70 <xTaskGetSchedulerState>
 801386a:	4603      	mov	r3, r0
 801386c:	2b00      	cmp	r3, #0
 801386e:	d102      	bne.n	8013876 <xQueueGenericSend+0x9e>
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d101      	bne.n	801387a <xQueueGenericSend+0xa2>
 8013876:	2301      	movs	r3, #1
 8013878:	e000      	b.n	801387c <xQueueGenericSend+0xa4>
 801387a:	2300      	movs	r3, #0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d10a      	bne.n	8013896 <xQueueGenericSend+0xbe>
	__asm volatile
 8013880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013884:	f383 8811 	msr	BASEPRI, r3
 8013888:	f3bf 8f6f 	isb	sy
 801388c:	f3bf 8f4f 	dsb	sy
 8013890:	61fb      	str	r3, [r7, #28]
}
 8013892:	bf00      	nop
 8013894:	e7fe      	b.n	8013894 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013896:	f001 fd8d 	bl	80153b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d302      	bcc.n	80138ac <xQueueGenericSend+0xd4>
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	2b02      	cmp	r3, #2
 80138aa:	d129      	bne.n	8013900 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138ac:	683a      	ldr	r2, [r7, #0]
 80138ae:	68b9      	ldr	r1, [r7, #8]
 80138b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138b2:	f000 fa87 	bl	8013dc4 <prvCopyDataToQueue>
 80138b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d010      	beq.n	80138e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c2:	3324      	adds	r3, #36	; 0x24
 80138c4:	4618      	mov	r0, r3
 80138c6:	f000 ff97 	bl	80147f8 <xTaskRemoveFromEventList>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d013      	beq.n	80138f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80138d0:	4b3f      	ldr	r3, [pc, #252]	; (80139d0 <xQueueGenericSend+0x1f8>)
 80138d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138d6:	601a      	str	r2, [r3, #0]
 80138d8:	f3bf 8f4f 	dsb	sy
 80138dc:	f3bf 8f6f 	isb	sy
 80138e0:	e00a      	b.n	80138f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80138e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d007      	beq.n	80138f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80138e8:	4b39      	ldr	r3, [pc, #228]	; (80139d0 <xQueueGenericSend+0x1f8>)
 80138ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ee:	601a      	str	r2, [r3, #0]
 80138f0:	f3bf 8f4f 	dsb	sy
 80138f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80138f8:	f001 fd8c 	bl	8015414 <vPortExitCritical>
				return pdPASS;
 80138fc:	2301      	movs	r3, #1
 80138fe:	e063      	b.n	80139c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d103      	bne.n	801390e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013906:	f001 fd85 	bl	8015414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801390a:	2300      	movs	r3, #0
 801390c:	e05c      	b.n	80139c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801390e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013910:	2b00      	cmp	r3, #0
 8013912:	d106      	bne.n	8013922 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013914:	f107 0314 	add.w	r3, r7, #20
 8013918:	4618      	mov	r0, r3
 801391a:	f000 ffcf 	bl	80148bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801391e:	2301      	movs	r3, #1
 8013920:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013922:	f001 fd77 	bl	8015414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013926:	f000 fd85 	bl	8014434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801392a:	f001 fd43 	bl	80153b4 <vPortEnterCritical>
 801392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013934:	b25b      	sxtb	r3, r3
 8013936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393a:	d103      	bne.n	8013944 <xQueueGenericSend+0x16c>
 801393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393e:	2200      	movs	r2, #0
 8013940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801394a:	b25b      	sxtb	r3, r3
 801394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013950:	d103      	bne.n	801395a <xQueueGenericSend+0x182>
 8013952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013954:	2200      	movs	r2, #0
 8013956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801395a:	f001 fd5b 	bl	8015414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801395e:	1d3a      	adds	r2, r7, #4
 8013960:	f107 0314 	add.w	r3, r7, #20
 8013964:	4611      	mov	r1, r2
 8013966:	4618      	mov	r0, r3
 8013968:	f000 ffbe 	bl	80148e8 <xTaskCheckForTimeOut>
 801396c:	4603      	mov	r3, r0
 801396e:	2b00      	cmp	r3, #0
 8013970:	d124      	bne.n	80139bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013974:	f000 fb1e 	bl	8013fb4 <prvIsQueueFull>
 8013978:	4603      	mov	r3, r0
 801397a:	2b00      	cmp	r3, #0
 801397c:	d018      	beq.n	80139b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013980:	3310      	adds	r3, #16
 8013982:	687a      	ldr	r2, [r7, #4]
 8013984:	4611      	mov	r1, r2
 8013986:	4618      	mov	r0, r3
 8013988:	f000 ff12 	bl	80147b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801398c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801398e:	f000 faa9 	bl	8013ee4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013992:	f000 fd5d 	bl	8014450 <xTaskResumeAll>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	f47f af7c 	bne.w	8013896 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801399e:	4b0c      	ldr	r3, [pc, #48]	; (80139d0 <xQueueGenericSend+0x1f8>)
 80139a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139a4:	601a      	str	r2, [r3, #0]
 80139a6:	f3bf 8f4f 	dsb	sy
 80139aa:	f3bf 8f6f 	isb	sy
 80139ae:	e772      	b.n	8013896 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80139b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139b2:	f000 fa97 	bl	8013ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139b6:	f000 fd4b 	bl	8014450 <xTaskResumeAll>
 80139ba:	e76c      	b.n	8013896 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80139bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139be:	f000 fa91 	bl	8013ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139c2:	f000 fd45 	bl	8014450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80139c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3738      	adds	r7, #56	; 0x38
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}
 80139d0:	e000ed04 	.word	0xe000ed04

080139d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b08e      	sub	sp, #56	; 0x38
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]
 80139e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80139e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d10a      	bne.n	8013a02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80139ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f0:	f383 8811 	msr	BASEPRI, r3
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80139fe:	bf00      	nop
 8013a00:	e7fe      	b.n	8013a00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d103      	bne.n	8013a10 <xQueueGenericSendFromISR+0x3c>
 8013a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d101      	bne.n	8013a14 <xQueueGenericSendFromISR+0x40>
 8013a10:	2301      	movs	r3, #1
 8013a12:	e000      	b.n	8013a16 <xQueueGenericSendFromISR+0x42>
 8013a14:	2300      	movs	r3, #0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d10a      	bne.n	8013a30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a1e:	f383 8811 	msr	BASEPRI, r3
 8013a22:	f3bf 8f6f 	isb	sy
 8013a26:	f3bf 8f4f 	dsb	sy
 8013a2a:	623b      	str	r3, [r7, #32]
}
 8013a2c:	bf00      	nop
 8013a2e:	e7fe      	b.n	8013a2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	2b02      	cmp	r3, #2
 8013a34:	d103      	bne.n	8013a3e <xQueueGenericSendFromISR+0x6a>
 8013a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d101      	bne.n	8013a42 <xQueueGenericSendFromISR+0x6e>
 8013a3e:	2301      	movs	r3, #1
 8013a40:	e000      	b.n	8013a44 <xQueueGenericSendFromISR+0x70>
 8013a42:	2300      	movs	r3, #0
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d10a      	bne.n	8013a5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a4c:	f383 8811 	msr	BASEPRI, r3
 8013a50:	f3bf 8f6f 	isb	sy
 8013a54:	f3bf 8f4f 	dsb	sy
 8013a58:	61fb      	str	r3, [r7, #28]
}
 8013a5a:	bf00      	nop
 8013a5c:	e7fe      	b.n	8013a5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a5e:	f001 fd8b 	bl	8015578 <vPortValidateInterruptPriority>
	__asm volatile
 8013a62:	f3ef 8211 	mrs	r2, BASEPRI
 8013a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6a:	f383 8811 	msr	BASEPRI, r3
 8013a6e:	f3bf 8f6f 	isb	sy
 8013a72:	f3bf 8f4f 	dsb	sy
 8013a76:	61ba      	str	r2, [r7, #24]
 8013a78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013a7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d302      	bcc.n	8013a90 <xQueueGenericSendFromISR+0xbc>
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	2b02      	cmp	r3, #2
 8013a8e:	d12c      	bne.n	8013aea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a9a:	683a      	ldr	r2, [r7, #0]
 8013a9c:	68b9      	ldr	r1, [r7, #8]
 8013a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013aa0:	f000 f990 	bl	8013dc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013aa4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aac:	d112      	bne.n	8013ad4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d016      	beq.n	8013ae4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab8:	3324      	adds	r3, #36	; 0x24
 8013aba:	4618      	mov	r0, r3
 8013abc:	f000 fe9c 	bl	80147f8 <xTaskRemoveFromEventList>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00e      	beq.n	8013ae4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00b      	beq.n	8013ae4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2201      	movs	r2, #1
 8013ad0:	601a      	str	r2, [r3, #0]
 8013ad2:	e007      	b.n	8013ae4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013ad4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013ad8:	3301      	adds	r3, #1
 8013ada:	b2db      	uxtb	r3, r3
 8013adc:	b25a      	sxtb	r2, r3
 8013ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013ae8:	e001      	b.n	8013aee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013aea:	2300      	movs	r3, #0
 8013aec:	637b      	str	r3, [r7, #52]	; 0x34
 8013aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	f383 8811 	msr	BASEPRI, r3
}
 8013af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013afc:	4618      	mov	r0, r3
 8013afe:	3738      	adds	r7, #56	; 0x38
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}

08013b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b08c      	sub	sp, #48	; 0x30
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013b10:	2300      	movs	r3, #0
 8013b12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d10a      	bne.n	8013b34 <xQueueReceive+0x30>
	__asm volatile
 8013b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b22:	f383 8811 	msr	BASEPRI, r3
 8013b26:	f3bf 8f6f 	isb	sy
 8013b2a:	f3bf 8f4f 	dsb	sy
 8013b2e:	623b      	str	r3, [r7, #32]
}
 8013b30:	bf00      	nop
 8013b32:	e7fe      	b.n	8013b32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d103      	bne.n	8013b42 <xQueueReceive+0x3e>
 8013b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d101      	bne.n	8013b46 <xQueueReceive+0x42>
 8013b42:	2301      	movs	r3, #1
 8013b44:	e000      	b.n	8013b48 <xQueueReceive+0x44>
 8013b46:	2300      	movs	r3, #0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10a      	bne.n	8013b62 <xQueueReceive+0x5e>
	__asm volatile
 8013b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b50:	f383 8811 	msr	BASEPRI, r3
 8013b54:	f3bf 8f6f 	isb	sy
 8013b58:	f3bf 8f4f 	dsb	sy
 8013b5c:	61fb      	str	r3, [r7, #28]
}
 8013b5e:	bf00      	nop
 8013b60:	e7fe      	b.n	8013b60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b62:	f001 f805 	bl	8014b70 <xTaskGetSchedulerState>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d102      	bne.n	8013b72 <xQueueReceive+0x6e>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d101      	bne.n	8013b76 <xQueueReceive+0x72>
 8013b72:	2301      	movs	r3, #1
 8013b74:	e000      	b.n	8013b78 <xQueueReceive+0x74>
 8013b76:	2300      	movs	r3, #0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d10a      	bne.n	8013b92 <xQueueReceive+0x8e>
	__asm volatile
 8013b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b80:	f383 8811 	msr	BASEPRI, r3
 8013b84:	f3bf 8f6f 	isb	sy
 8013b88:	f3bf 8f4f 	dsb	sy
 8013b8c:	61bb      	str	r3, [r7, #24]
}
 8013b8e:	bf00      	nop
 8013b90:	e7fe      	b.n	8013b90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013b92:	f001 fc0f 	bl	80153b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d01f      	beq.n	8013be2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013ba2:	68b9      	ldr	r1, [r7, #8]
 8013ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ba6:	f000 f977 	bl	8013e98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bac:	1e5a      	subs	r2, r3, #1
 8013bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb4:	691b      	ldr	r3, [r3, #16]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00f      	beq.n	8013bda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bbc:	3310      	adds	r3, #16
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f000 fe1a 	bl	80147f8 <xTaskRemoveFromEventList>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d007      	beq.n	8013bda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013bca:	4b3d      	ldr	r3, [pc, #244]	; (8013cc0 <xQueueReceive+0x1bc>)
 8013bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bd0:	601a      	str	r2, [r3, #0]
 8013bd2:	f3bf 8f4f 	dsb	sy
 8013bd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013bda:	f001 fc1b 	bl	8015414 <vPortExitCritical>
				return pdPASS;
 8013bde:	2301      	movs	r3, #1
 8013be0:	e069      	b.n	8013cb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d103      	bne.n	8013bf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013be8:	f001 fc14 	bl	8015414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013bec:	2300      	movs	r3, #0
 8013bee:	e062      	b.n	8013cb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d106      	bne.n	8013c04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013bf6:	f107 0310 	add.w	r3, r7, #16
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f000 fe5e 	bl	80148bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c00:	2301      	movs	r3, #1
 8013c02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013c04:	f001 fc06 	bl	8015414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013c08:	f000 fc14 	bl	8014434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013c0c:	f001 fbd2 	bl	80153b4 <vPortEnterCritical>
 8013c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c16:	b25b      	sxtb	r3, r3
 8013c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c1c:	d103      	bne.n	8013c26 <xQueueReceive+0x122>
 8013c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c20:	2200      	movs	r2, #0
 8013c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c2c:	b25b      	sxtb	r3, r3
 8013c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c32:	d103      	bne.n	8013c3c <xQueueReceive+0x138>
 8013c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c36:	2200      	movs	r2, #0
 8013c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c3c:	f001 fbea 	bl	8015414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c40:	1d3a      	adds	r2, r7, #4
 8013c42:	f107 0310 	add.w	r3, r7, #16
 8013c46:	4611      	mov	r1, r2
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f000 fe4d 	bl	80148e8 <xTaskCheckForTimeOut>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d123      	bne.n	8013c9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c56:	f000 f997 	bl	8013f88 <prvIsQueueEmpty>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d017      	beq.n	8013c90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c62:	3324      	adds	r3, #36	; 0x24
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	4611      	mov	r1, r2
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f000 fda1 	bl	80147b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c70:	f000 f938 	bl	8013ee4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c74:	f000 fbec 	bl	8014450 <xTaskResumeAll>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d189      	bne.n	8013b92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013c7e:	4b10      	ldr	r3, [pc, #64]	; (8013cc0 <xQueueReceive+0x1bc>)
 8013c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c84:	601a      	str	r2, [r3, #0]
 8013c86:	f3bf 8f4f 	dsb	sy
 8013c8a:	f3bf 8f6f 	isb	sy
 8013c8e:	e780      	b.n	8013b92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c92:	f000 f927 	bl	8013ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013c96:	f000 fbdb 	bl	8014450 <xTaskResumeAll>
 8013c9a:	e77a      	b.n	8013b92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c9e:	f000 f921 	bl	8013ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ca2:	f000 fbd5 	bl	8014450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ca8:	f000 f96e 	bl	8013f88 <prvIsQueueEmpty>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	f43f af6f 	beq.w	8013b92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013cb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3730      	adds	r7, #48	; 0x30
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	e000ed04 	.word	0xe000ed04

08013cc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b08e      	sub	sp, #56	; 0x38
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d10a      	bne.n	8013cf0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cde:	f383 8811 	msr	BASEPRI, r3
 8013ce2:	f3bf 8f6f 	isb	sy
 8013ce6:	f3bf 8f4f 	dsb	sy
 8013cea:	623b      	str	r3, [r7, #32]
}
 8013cec:	bf00      	nop
 8013cee:	e7fe      	b.n	8013cee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d103      	bne.n	8013cfe <xQueueReceiveFromISR+0x3a>
 8013cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d101      	bne.n	8013d02 <xQueueReceiveFromISR+0x3e>
 8013cfe:	2301      	movs	r3, #1
 8013d00:	e000      	b.n	8013d04 <xQueueReceiveFromISR+0x40>
 8013d02:	2300      	movs	r3, #0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d10a      	bne.n	8013d1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d0c:	f383 8811 	msr	BASEPRI, r3
 8013d10:	f3bf 8f6f 	isb	sy
 8013d14:	f3bf 8f4f 	dsb	sy
 8013d18:	61fb      	str	r3, [r7, #28]
}
 8013d1a:	bf00      	nop
 8013d1c:	e7fe      	b.n	8013d1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d1e:	f001 fc2b 	bl	8015578 <vPortValidateInterruptPriority>
	__asm volatile
 8013d22:	f3ef 8211 	mrs	r2, BASEPRI
 8013d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d2a:	f383 8811 	msr	BASEPRI, r3
 8013d2e:	f3bf 8f6f 	isb	sy
 8013d32:	f3bf 8f4f 	dsb	sy
 8013d36:	61ba      	str	r2, [r7, #24]
 8013d38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013d3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d02f      	beq.n	8013daa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013d54:	68b9      	ldr	r1, [r7, #8]
 8013d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d58:	f000 f89e 	bl	8013e98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5e:	1e5a      	subs	r2, r3, #1
 8013d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d6c:	d112      	bne.n	8013d94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d70:	691b      	ldr	r3, [r3, #16]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d016      	beq.n	8013da4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d78:	3310      	adds	r3, #16
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f000 fd3c 	bl	80147f8 <xTaskRemoveFromEventList>
 8013d80:	4603      	mov	r3, r0
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d00e      	beq.n	8013da4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d00b      	beq.n	8013da4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2201      	movs	r2, #1
 8013d90:	601a      	str	r2, [r3, #0]
 8013d92:	e007      	b.n	8013da4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d98:	3301      	adds	r3, #1
 8013d9a:	b2db      	uxtb	r3, r3
 8013d9c:	b25a      	sxtb	r2, r3
 8013d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013da4:	2301      	movs	r3, #1
 8013da6:	637b      	str	r3, [r7, #52]	; 0x34
 8013da8:	e001      	b.n	8013dae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013daa:	2300      	movs	r3, #0
 8013dac:	637b      	str	r3, [r7, #52]	; 0x34
 8013dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	f383 8811 	msr	BASEPRI, r3
}
 8013db8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3738      	adds	r7, #56	; 0x38
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b086      	sub	sp, #24
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d10d      	bne.n	8013dfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d14d      	bne.n	8013e86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	689b      	ldr	r3, [r3, #8]
 8013dee:	4618      	mov	r0, r3
 8013df0:	f000 fedc 	bl	8014bac <xTaskPriorityDisinherit>
 8013df4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	609a      	str	r2, [r3, #8]
 8013dfc:	e043      	b.n	8013e86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d119      	bne.n	8013e38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	6858      	ldr	r0, [r3, #4]
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	68b9      	ldr	r1, [r7, #8]
 8013e10:	f002 fb56 	bl	80164c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	685a      	ldr	r2, [r3, #4]
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e1c:	441a      	add	r2, r3
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	685a      	ldr	r2, [r3, #4]
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	689b      	ldr	r3, [r3, #8]
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d32b      	bcc.n	8013e86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	605a      	str	r2, [r3, #4]
 8013e36:	e026      	b.n	8013e86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	68d8      	ldr	r0, [r3, #12]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e40:	461a      	mov	r2, r3
 8013e42:	68b9      	ldr	r1, [r7, #8]
 8013e44:	f002 fb3c 	bl	80164c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	68da      	ldr	r2, [r3, #12]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e50:	425b      	negs	r3, r3
 8013e52:	441a      	add	r2, r3
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	68da      	ldr	r2, [r3, #12]
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d207      	bcs.n	8013e74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	689a      	ldr	r2, [r3, #8]
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e6c:	425b      	negs	r3, r3
 8013e6e:	441a      	add	r2, r3
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2b02      	cmp	r3, #2
 8013e78:	d105      	bne.n	8013e86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e7a:	693b      	ldr	r3, [r7, #16]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d002      	beq.n	8013e86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013e80:	693b      	ldr	r3, [r7, #16]
 8013e82:	3b01      	subs	r3, #1
 8013e84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	1c5a      	adds	r2, r3, #1
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013e8e:	697b      	ldr	r3, [r7, #20]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3718      	adds	r7, #24
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d018      	beq.n	8013edc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	68da      	ldr	r2, [r3, #12]
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eb2:	441a      	add	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	68da      	ldr	r2, [r3, #12]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	689b      	ldr	r3, [r3, #8]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d303      	bcc.n	8013ecc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	68d9      	ldr	r1, [r3, #12]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	6838      	ldr	r0, [r7, #0]
 8013ed8:	f002 faf2 	bl	80164c0 <memcpy>
	}
}
 8013edc:	bf00      	nop
 8013ede:	3708      	adds	r7, #8
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}

08013ee4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013eec:	f001 fa62 	bl	80153b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ef6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ef8:	e011      	b.n	8013f1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d012      	beq.n	8013f28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	3324      	adds	r3, #36	; 0x24
 8013f06:	4618      	mov	r0, r3
 8013f08:	f000 fc76 	bl	80147f8 <xTaskRemoveFromEventList>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d001      	beq.n	8013f16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013f12:	f000 fd4b 	bl	80149ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013f16:	7bfb      	ldrb	r3, [r7, #15]
 8013f18:	3b01      	subs	r3, #1
 8013f1a:	b2db      	uxtb	r3, r3
 8013f1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	dce9      	bgt.n	8013efa <prvUnlockQueue+0x16>
 8013f26:	e000      	b.n	8013f2a <prvUnlockQueue+0x46>
					break;
 8013f28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	22ff      	movs	r2, #255	; 0xff
 8013f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013f32:	f001 fa6f 	bl	8015414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013f36:	f001 fa3d 	bl	80153b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f42:	e011      	b.n	8013f68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	691b      	ldr	r3, [r3, #16]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d012      	beq.n	8013f72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	3310      	adds	r3, #16
 8013f50:	4618      	mov	r0, r3
 8013f52:	f000 fc51 	bl	80147f8 <xTaskRemoveFromEventList>
 8013f56:	4603      	mov	r3, r0
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d001      	beq.n	8013f60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013f5c:	f000 fd26 	bl	80149ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013f60:	7bbb      	ldrb	r3, [r7, #14]
 8013f62:	3b01      	subs	r3, #1
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	dce9      	bgt.n	8013f44 <prvUnlockQueue+0x60>
 8013f70:	e000      	b.n	8013f74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013f72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	22ff      	movs	r2, #255	; 0xff
 8013f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013f7c:	f001 fa4a 	bl	8015414 <vPortExitCritical>
}
 8013f80:	bf00      	nop
 8013f82:	3710      	adds	r7, #16
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f90:	f001 fa10 	bl	80153b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d102      	bne.n	8013fa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	60fb      	str	r3, [r7, #12]
 8013fa0:	e001      	b.n	8013fa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013fa6:	f001 fa35 	bl	8015414 <vPortExitCritical>

	return xReturn;
 8013faa:	68fb      	ldr	r3, [r7, #12]
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3710      	adds	r7, #16
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013fbc:	f001 f9fa 	bl	80153b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d102      	bne.n	8013fd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	60fb      	str	r3, [r7, #12]
 8013fd0:	e001      	b.n	8013fd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013fd6:	f001 fa1d 	bl	8015414 <vPortExitCritical>

	return xReturn;
 8013fda:	68fb      	ldr	r3, [r7, #12]
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3710      	adds	r7, #16
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b08e      	sub	sp, #56	; 0x38
 8013fe8:	af04      	add	r7, sp, #16
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	607a      	str	r2, [r7, #4]
 8013ff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d10a      	bne.n	801400e <xTaskCreateStatic+0x2a>
	__asm volatile
 8013ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffc:	f383 8811 	msr	BASEPRI, r3
 8014000:	f3bf 8f6f 	isb	sy
 8014004:	f3bf 8f4f 	dsb	sy
 8014008:	623b      	str	r3, [r7, #32]
}
 801400a:	bf00      	nop
 801400c:	e7fe      	b.n	801400c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014010:	2b00      	cmp	r3, #0
 8014012:	d10a      	bne.n	801402a <xTaskCreateStatic+0x46>
	__asm volatile
 8014014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014018:	f383 8811 	msr	BASEPRI, r3
 801401c:	f3bf 8f6f 	isb	sy
 8014020:	f3bf 8f4f 	dsb	sy
 8014024:	61fb      	str	r3, [r7, #28]
}
 8014026:	bf00      	nop
 8014028:	e7fe      	b.n	8014028 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801402a:	2354      	movs	r3, #84	; 0x54
 801402c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801402e:	693b      	ldr	r3, [r7, #16]
 8014030:	2b54      	cmp	r3, #84	; 0x54
 8014032:	d00a      	beq.n	801404a <xTaskCreateStatic+0x66>
	__asm volatile
 8014034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014038:	f383 8811 	msr	BASEPRI, r3
 801403c:	f3bf 8f6f 	isb	sy
 8014040:	f3bf 8f4f 	dsb	sy
 8014044:	61bb      	str	r3, [r7, #24]
}
 8014046:	bf00      	nop
 8014048:	e7fe      	b.n	8014048 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801404a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404e:	2b00      	cmp	r3, #0
 8014050:	d01e      	beq.n	8014090 <xTaskCreateStatic+0xac>
 8014052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014054:	2b00      	cmp	r3, #0
 8014056:	d01b      	beq.n	8014090 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801405a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014060:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	2202      	movs	r2, #2
 8014066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801406a:	2300      	movs	r3, #0
 801406c:	9303      	str	r3, [sp, #12]
 801406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014070:	9302      	str	r3, [sp, #8]
 8014072:	f107 0314 	add.w	r3, r7, #20
 8014076:	9301      	str	r3, [sp, #4]
 8014078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407a:	9300      	str	r3, [sp, #0]
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	68b9      	ldr	r1, [r7, #8]
 8014082:	68f8      	ldr	r0, [r7, #12]
 8014084:	f000 f850 	bl	8014128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801408a:	f000 f8d5 	bl	8014238 <prvAddNewTaskToReadyList>
 801408e:	e001      	b.n	8014094 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014090:	2300      	movs	r3, #0
 8014092:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014094:	697b      	ldr	r3, [r7, #20]
	}
 8014096:	4618      	mov	r0, r3
 8014098:	3728      	adds	r7, #40	; 0x28
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}

0801409e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801409e:	b580      	push	{r7, lr}
 80140a0:	b08c      	sub	sp, #48	; 0x30
 80140a2:	af04      	add	r7, sp, #16
 80140a4:	60f8      	str	r0, [r7, #12]
 80140a6:	60b9      	str	r1, [r7, #8]
 80140a8:	603b      	str	r3, [r7, #0]
 80140aa:	4613      	mov	r3, r2
 80140ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80140ae:	88fb      	ldrh	r3, [r7, #6]
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	4618      	mov	r0, r3
 80140b4:	f001 faa0 	bl	80155f8 <pvPortMalloc>
 80140b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d00e      	beq.n	80140de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80140c0:	2054      	movs	r0, #84	; 0x54
 80140c2:	f001 fa99 	bl	80155f8 <pvPortMalloc>
 80140c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80140c8:	69fb      	ldr	r3, [r7, #28]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d003      	beq.n	80140d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	697a      	ldr	r2, [r7, #20]
 80140d2:	631a      	str	r2, [r3, #48]	; 0x30
 80140d4:	e005      	b.n	80140e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80140d6:	6978      	ldr	r0, [r7, #20]
 80140d8:	f001 fb52 	bl	8015780 <vPortFree>
 80140dc:	e001      	b.n	80140e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80140de:	2300      	movs	r3, #0
 80140e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80140e2:	69fb      	ldr	r3, [r7, #28]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d017      	beq.n	8014118 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80140e8:	69fb      	ldr	r3, [r7, #28]
 80140ea:	2200      	movs	r2, #0
 80140ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80140f0:	88fa      	ldrh	r2, [r7, #6]
 80140f2:	2300      	movs	r3, #0
 80140f4:	9303      	str	r3, [sp, #12]
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	9302      	str	r3, [sp, #8]
 80140fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fc:	9301      	str	r3, [sp, #4]
 80140fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	68b9      	ldr	r1, [r7, #8]
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	f000 f80e 	bl	8014128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801410c:	69f8      	ldr	r0, [r7, #28]
 801410e:	f000 f893 	bl	8014238 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014112:	2301      	movs	r3, #1
 8014114:	61bb      	str	r3, [r7, #24]
 8014116:	e002      	b.n	801411e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014118:	f04f 33ff 	mov.w	r3, #4294967295
 801411c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801411e:	69bb      	ldr	r3, [r7, #24]
	}
 8014120:	4618      	mov	r0, r3
 8014122:	3720      	adds	r7, #32
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b088      	sub	sp, #32
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
 8014134:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014140:	3b01      	subs	r3, #1
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	4413      	add	r3, r2
 8014146:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	f023 0307 	bic.w	r3, r3, #7
 801414e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	f003 0307 	and.w	r3, r3, #7
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00a      	beq.n	8014170 <prvInitialiseNewTask+0x48>
	__asm volatile
 801415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801415e:	f383 8811 	msr	BASEPRI, r3
 8014162:	f3bf 8f6f 	isb	sy
 8014166:	f3bf 8f4f 	dsb	sy
 801416a:	617b      	str	r3, [r7, #20]
}
 801416c:	bf00      	nop
 801416e:	e7fe      	b.n	801416e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d01f      	beq.n	80141b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014176:	2300      	movs	r3, #0
 8014178:	61fb      	str	r3, [r7, #28]
 801417a:	e012      	b.n	80141a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801417c:	68ba      	ldr	r2, [r7, #8]
 801417e:	69fb      	ldr	r3, [r7, #28]
 8014180:	4413      	add	r3, r2
 8014182:	7819      	ldrb	r1, [r3, #0]
 8014184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014186:	69fb      	ldr	r3, [r7, #28]
 8014188:	4413      	add	r3, r2
 801418a:	3334      	adds	r3, #52	; 0x34
 801418c:	460a      	mov	r2, r1
 801418e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014190:	68ba      	ldr	r2, [r7, #8]
 8014192:	69fb      	ldr	r3, [r7, #28]
 8014194:	4413      	add	r3, r2
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d006      	beq.n	80141aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	3301      	adds	r3, #1
 80141a0:	61fb      	str	r3, [r7, #28]
 80141a2:	69fb      	ldr	r3, [r7, #28]
 80141a4:	2b0f      	cmp	r3, #15
 80141a6:	d9e9      	bls.n	801417c <prvInitialiseNewTask+0x54>
 80141a8:	e000      	b.n	80141ac <prvInitialiseNewTask+0x84>
			{
				break;
 80141aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80141ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ae:	2200      	movs	r2, #0
 80141b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80141b4:	e003      	b.n	80141be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80141b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b8:	2200      	movs	r2, #0
 80141ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80141be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c0:	2b06      	cmp	r3, #6
 80141c2:	d901      	bls.n	80141c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80141c4:	2306      	movs	r3, #6
 80141c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80141c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80141ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80141d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d6:	2200      	movs	r2, #0
 80141d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80141da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141dc:	3304      	adds	r3, #4
 80141de:	4618      	mov	r0, r3
 80141e0:	f7ff f8d9 	bl	8013396 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80141e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e6:	3318      	adds	r3, #24
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7ff f8d4 	bl	8013396 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80141ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f6:	f1c3 0207 	rsb	r2, r3, #7
 80141fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80141fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014202:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014206:	2200      	movs	r2, #0
 8014208:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801420c:	2200      	movs	r2, #0
 801420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014212:	683a      	ldr	r2, [r7, #0]
 8014214:	68f9      	ldr	r1, [r7, #12]
 8014216:	69b8      	ldr	r0, [r7, #24]
 8014218:	f000 ff9e 	bl	8015158 <pxPortInitialiseStack>
 801421c:	4602      	mov	r2, r0
 801421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014220:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014224:	2b00      	cmp	r3, #0
 8014226:	d002      	beq.n	801422e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801422c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801422e:	bf00      	nop
 8014230:	3720      	adds	r7, #32
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
	...

08014238 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014240:	f001 f8b8 	bl	80153b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014244:	4b2a      	ldr	r3, [pc, #168]	; (80142f0 <prvAddNewTaskToReadyList+0xb8>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	3301      	adds	r3, #1
 801424a:	4a29      	ldr	r2, [pc, #164]	; (80142f0 <prvAddNewTaskToReadyList+0xb8>)
 801424c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801424e:	4b29      	ldr	r3, [pc, #164]	; (80142f4 <prvAddNewTaskToReadyList+0xbc>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d109      	bne.n	801426a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014256:	4a27      	ldr	r2, [pc, #156]	; (80142f4 <prvAddNewTaskToReadyList+0xbc>)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801425c:	4b24      	ldr	r3, [pc, #144]	; (80142f0 <prvAddNewTaskToReadyList+0xb8>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	2b01      	cmp	r3, #1
 8014262:	d110      	bne.n	8014286 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014264:	f000 fbc6 	bl	80149f4 <prvInitialiseTaskLists>
 8014268:	e00d      	b.n	8014286 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801426a:	4b23      	ldr	r3, [pc, #140]	; (80142f8 <prvAddNewTaskToReadyList+0xc0>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d109      	bne.n	8014286 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014272:	4b20      	ldr	r3, [pc, #128]	; (80142f4 <prvAddNewTaskToReadyList+0xbc>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427c:	429a      	cmp	r2, r3
 801427e:	d802      	bhi.n	8014286 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014280:	4a1c      	ldr	r2, [pc, #112]	; (80142f4 <prvAddNewTaskToReadyList+0xbc>)
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014286:	4b1d      	ldr	r3, [pc, #116]	; (80142fc <prvAddNewTaskToReadyList+0xc4>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	3301      	adds	r3, #1
 801428c:	4a1b      	ldr	r2, [pc, #108]	; (80142fc <prvAddNewTaskToReadyList+0xc4>)
 801428e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014294:	2201      	movs	r2, #1
 8014296:	409a      	lsls	r2, r3
 8014298:	4b19      	ldr	r3, [pc, #100]	; (8014300 <prvAddNewTaskToReadyList+0xc8>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	4313      	orrs	r3, r2
 801429e:	4a18      	ldr	r2, [pc, #96]	; (8014300 <prvAddNewTaskToReadyList+0xc8>)
 80142a0:	6013      	str	r3, [r2, #0]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142a6:	4613      	mov	r3, r2
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	4413      	add	r3, r2
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	4a15      	ldr	r2, [pc, #84]	; (8014304 <prvAddNewTaskToReadyList+0xcc>)
 80142b0:	441a      	add	r2, r3
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	3304      	adds	r3, #4
 80142b6:	4619      	mov	r1, r3
 80142b8:	4610      	mov	r0, r2
 80142ba:	f7ff f879 	bl	80133b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80142be:	f001 f8a9 	bl	8015414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80142c2:	4b0d      	ldr	r3, [pc, #52]	; (80142f8 <prvAddNewTaskToReadyList+0xc0>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d00e      	beq.n	80142e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80142ca:	4b0a      	ldr	r3, [pc, #40]	; (80142f4 <prvAddNewTaskToReadyList+0xbc>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d207      	bcs.n	80142e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80142d8:	4b0b      	ldr	r3, [pc, #44]	; (8014308 <prvAddNewTaskToReadyList+0xd0>)
 80142da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142de:	601a      	str	r2, [r3, #0]
 80142e0:	f3bf 8f4f 	dsb	sy
 80142e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142e8:	bf00      	nop
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	2000496c 	.word	0x2000496c
 80142f4:	2000486c 	.word	0x2000486c
 80142f8:	20004978 	.word	0x20004978
 80142fc:	20004988 	.word	0x20004988
 8014300:	20004974 	.word	0x20004974
 8014304:	20004870 	.word	0x20004870
 8014308:	e000ed04 	.word	0xe000ed04

0801430c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014314:	2300      	movs	r3, #0
 8014316:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d017      	beq.n	801434e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801431e:	4b13      	ldr	r3, [pc, #76]	; (801436c <vTaskDelay+0x60>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00a      	beq.n	801433c <vTaskDelay+0x30>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	60bb      	str	r3, [r7, #8]
}
 8014338:	bf00      	nop
 801433a:	e7fe      	b.n	801433a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801433c:	f000 f87a 	bl	8014434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014340:	2100      	movs	r1, #0
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f000 fea2 	bl	801508c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014348:	f000 f882 	bl	8014450 <xTaskResumeAll>
 801434c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d107      	bne.n	8014364 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014354:	4b06      	ldr	r3, [pc, #24]	; (8014370 <vTaskDelay+0x64>)
 8014356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801435a:	601a      	str	r2, [r3, #0]
 801435c:	f3bf 8f4f 	dsb	sy
 8014360:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014364:	bf00      	nop
 8014366:	3710      	adds	r7, #16
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	20004994 	.word	0x20004994
 8014370:	e000ed04 	.word	0xe000ed04

08014374 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b08a      	sub	sp, #40	; 0x28
 8014378:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801437a:	2300      	movs	r3, #0
 801437c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801437e:	2300      	movs	r3, #0
 8014380:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014382:	463a      	mov	r2, r7
 8014384:	1d39      	adds	r1, r7, #4
 8014386:	f107 0308 	add.w	r3, r7, #8
 801438a:	4618      	mov	r0, r3
 801438c:	f7ee f956 	bl	800263c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014390:	6839      	ldr	r1, [r7, #0]
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	68ba      	ldr	r2, [r7, #8]
 8014396:	9202      	str	r2, [sp, #8]
 8014398:	9301      	str	r3, [sp, #4]
 801439a:	2300      	movs	r3, #0
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	2300      	movs	r3, #0
 80143a0:	460a      	mov	r2, r1
 80143a2:	491e      	ldr	r1, [pc, #120]	; (801441c <vTaskStartScheduler+0xa8>)
 80143a4:	481e      	ldr	r0, [pc, #120]	; (8014420 <vTaskStartScheduler+0xac>)
 80143a6:	f7ff fe1d 	bl	8013fe4 <xTaskCreateStatic>
 80143aa:	4603      	mov	r3, r0
 80143ac:	4a1d      	ldr	r2, [pc, #116]	; (8014424 <vTaskStartScheduler+0xb0>)
 80143ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80143b0:	4b1c      	ldr	r3, [pc, #112]	; (8014424 <vTaskStartScheduler+0xb0>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d002      	beq.n	80143be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80143b8:	2301      	movs	r3, #1
 80143ba:	617b      	str	r3, [r7, #20]
 80143bc:	e001      	b.n	80143c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80143be:	2300      	movs	r3, #0
 80143c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	d116      	bne.n	80143f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80143c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143cc:	f383 8811 	msr	BASEPRI, r3
 80143d0:	f3bf 8f6f 	isb	sy
 80143d4:	f3bf 8f4f 	dsb	sy
 80143d8:	613b      	str	r3, [r7, #16]
}
 80143da:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80143dc:	4b12      	ldr	r3, [pc, #72]	; (8014428 <vTaskStartScheduler+0xb4>)
 80143de:	f04f 32ff 	mov.w	r2, #4294967295
 80143e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80143e4:	4b11      	ldr	r3, [pc, #68]	; (801442c <vTaskStartScheduler+0xb8>)
 80143e6:	2201      	movs	r2, #1
 80143e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80143ea:	4b11      	ldr	r3, [pc, #68]	; (8014430 <vTaskStartScheduler+0xbc>)
 80143ec:	2200      	movs	r2, #0
 80143ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80143f0:	f000 ff3e 	bl	8015270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80143f4:	e00e      	b.n	8014414 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143fc:	d10a      	bne.n	8014414 <vTaskStartScheduler+0xa0>
	__asm volatile
 80143fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014402:	f383 8811 	msr	BASEPRI, r3
 8014406:	f3bf 8f6f 	isb	sy
 801440a:	f3bf 8f4f 	dsb	sy
 801440e:	60fb      	str	r3, [r7, #12]
}
 8014410:	bf00      	nop
 8014412:	e7fe      	b.n	8014412 <vTaskStartScheduler+0x9e>
}
 8014414:	bf00      	nop
 8014416:	3718      	adds	r7, #24
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}
 801441c:	0801c9ec 	.word	0x0801c9ec
 8014420:	080149c5 	.word	0x080149c5
 8014424:	20004990 	.word	0x20004990
 8014428:	2000498c 	.word	0x2000498c
 801442c:	20004978 	.word	0x20004978
 8014430:	20004970 	.word	0x20004970

08014434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014434:	b480      	push	{r7}
 8014436:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014438:	4b04      	ldr	r3, [pc, #16]	; (801444c <vTaskSuspendAll+0x18>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	3301      	adds	r3, #1
 801443e:	4a03      	ldr	r2, [pc, #12]	; (801444c <vTaskSuspendAll+0x18>)
 8014440:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014442:	bf00      	nop
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	20004994 	.word	0x20004994

08014450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014456:	2300      	movs	r3, #0
 8014458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801445a:	2300      	movs	r3, #0
 801445c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801445e:	4b41      	ldr	r3, [pc, #260]	; (8014564 <xTaskResumeAll+0x114>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d10a      	bne.n	801447c <xTaskResumeAll+0x2c>
	__asm volatile
 8014466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801446a:	f383 8811 	msr	BASEPRI, r3
 801446e:	f3bf 8f6f 	isb	sy
 8014472:	f3bf 8f4f 	dsb	sy
 8014476:	603b      	str	r3, [r7, #0]
}
 8014478:	bf00      	nop
 801447a:	e7fe      	b.n	801447a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801447c:	f000 ff9a 	bl	80153b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014480:	4b38      	ldr	r3, [pc, #224]	; (8014564 <xTaskResumeAll+0x114>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	3b01      	subs	r3, #1
 8014486:	4a37      	ldr	r2, [pc, #220]	; (8014564 <xTaskResumeAll+0x114>)
 8014488:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801448a:	4b36      	ldr	r3, [pc, #216]	; (8014564 <xTaskResumeAll+0x114>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d161      	bne.n	8014556 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014492:	4b35      	ldr	r3, [pc, #212]	; (8014568 <xTaskResumeAll+0x118>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d05d      	beq.n	8014556 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801449a:	e02e      	b.n	80144fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801449c:	4b33      	ldr	r3, [pc, #204]	; (801456c <xTaskResumeAll+0x11c>)
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	3318      	adds	r3, #24
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fe ffde 	bl	801346a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	3304      	adds	r3, #4
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7fe ffd9 	bl	801346a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144bc:	2201      	movs	r2, #1
 80144be:	409a      	lsls	r2, r3
 80144c0:	4b2b      	ldr	r3, [pc, #172]	; (8014570 <xTaskResumeAll+0x120>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	4313      	orrs	r3, r2
 80144c6:	4a2a      	ldr	r2, [pc, #168]	; (8014570 <xTaskResumeAll+0x120>)
 80144c8:	6013      	str	r3, [r2, #0]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ce:	4613      	mov	r3, r2
 80144d0:	009b      	lsls	r3, r3, #2
 80144d2:	4413      	add	r3, r2
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	4a27      	ldr	r2, [pc, #156]	; (8014574 <xTaskResumeAll+0x124>)
 80144d8:	441a      	add	r2, r3
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	3304      	adds	r3, #4
 80144de:	4619      	mov	r1, r3
 80144e0:	4610      	mov	r0, r2
 80144e2:	f7fe ff65 	bl	80133b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ea:	4b23      	ldr	r3, [pc, #140]	; (8014578 <xTaskResumeAll+0x128>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d302      	bcc.n	80144fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80144f4:	4b21      	ldr	r3, [pc, #132]	; (801457c <xTaskResumeAll+0x12c>)
 80144f6:	2201      	movs	r2, #1
 80144f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80144fa:	4b1c      	ldr	r3, [pc, #112]	; (801456c <xTaskResumeAll+0x11c>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d1cc      	bne.n	801449c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d001      	beq.n	801450c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014508:	f000 fb12 	bl	8014b30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801450c:	4b1c      	ldr	r3, [pc, #112]	; (8014580 <xTaskResumeAll+0x130>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d010      	beq.n	801453a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014518:	f000 f836 	bl	8014588 <xTaskIncrementTick>
 801451c:	4603      	mov	r3, r0
 801451e:	2b00      	cmp	r3, #0
 8014520:	d002      	beq.n	8014528 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8014522:	4b16      	ldr	r3, [pc, #88]	; (801457c <xTaskResumeAll+0x12c>)
 8014524:	2201      	movs	r2, #1
 8014526:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	3b01      	subs	r3, #1
 801452c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d1f1      	bne.n	8014518 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8014534:	4b12      	ldr	r3, [pc, #72]	; (8014580 <xTaskResumeAll+0x130>)
 8014536:	2200      	movs	r2, #0
 8014538:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801453a:	4b10      	ldr	r3, [pc, #64]	; (801457c <xTaskResumeAll+0x12c>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d009      	beq.n	8014556 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014542:	2301      	movs	r3, #1
 8014544:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014546:	4b0f      	ldr	r3, [pc, #60]	; (8014584 <xTaskResumeAll+0x134>)
 8014548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801454c:	601a      	str	r2, [r3, #0]
 801454e:	f3bf 8f4f 	dsb	sy
 8014552:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014556:	f000 ff5d 	bl	8015414 <vPortExitCritical>

	return xAlreadyYielded;
 801455a:	68bb      	ldr	r3, [r7, #8]
}
 801455c:	4618      	mov	r0, r3
 801455e:	3710      	adds	r7, #16
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}
 8014564:	20004994 	.word	0x20004994
 8014568:	2000496c 	.word	0x2000496c
 801456c:	2000492c 	.word	0x2000492c
 8014570:	20004974 	.word	0x20004974
 8014574:	20004870 	.word	0x20004870
 8014578:	2000486c 	.word	0x2000486c
 801457c:	20004980 	.word	0x20004980
 8014580:	2000497c 	.word	0x2000497c
 8014584:	e000ed04 	.word	0xe000ed04

08014588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b086      	sub	sp, #24
 801458c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801458e:	2300      	movs	r3, #0
 8014590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014592:	4b4e      	ldr	r3, [pc, #312]	; (80146cc <xTaskIncrementTick+0x144>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	f040 8088 	bne.w	80146ac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801459c:	4b4c      	ldr	r3, [pc, #304]	; (80146d0 <xTaskIncrementTick+0x148>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	3301      	adds	r3, #1
 80145a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80145a4:	4a4a      	ldr	r2, [pc, #296]	; (80146d0 <xTaskIncrementTick+0x148>)
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d120      	bne.n	80145f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80145b0:	4b48      	ldr	r3, [pc, #288]	; (80146d4 <xTaskIncrementTick+0x14c>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d00a      	beq.n	80145d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80145ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145be:	f383 8811 	msr	BASEPRI, r3
 80145c2:	f3bf 8f6f 	isb	sy
 80145c6:	f3bf 8f4f 	dsb	sy
 80145ca:	603b      	str	r3, [r7, #0]
}
 80145cc:	bf00      	nop
 80145ce:	e7fe      	b.n	80145ce <xTaskIncrementTick+0x46>
 80145d0:	4b40      	ldr	r3, [pc, #256]	; (80146d4 <xTaskIncrementTick+0x14c>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	60fb      	str	r3, [r7, #12]
 80145d6:	4b40      	ldr	r3, [pc, #256]	; (80146d8 <xTaskIncrementTick+0x150>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	4a3e      	ldr	r2, [pc, #248]	; (80146d4 <xTaskIncrementTick+0x14c>)
 80145dc:	6013      	str	r3, [r2, #0]
 80145de:	4a3e      	ldr	r2, [pc, #248]	; (80146d8 <xTaskIncrementTick+0x150>)
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	6013      	str	r3, [r2, #0]
 80145e4:	4b3d      	ldr	r3, [pc, #244]	; (80146dc <xTaskIncrementTick+0x154>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	3301      	adds	r3, #1
 80145ea:	4a3c      	ldr	r2, [pc, #240]	; (80146dc <xTaskIncrementTick+0x154>)
 80145ec:	6013      	str	r3, [r2, #0]
 80145ee:	f000 fa9f 	bl	8014b30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80145f2:	4b3b      	ldr	r3, [pc, #236]	; (80146e0 <xTaskIncrementTick+0x158>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	693a      	ldr	r2, [r7, #16]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d348      	bcc.n	801468e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145fc:	4b35      	ldr	r3, [pc, #212]	; (80146d4 <xTaskIncrementTick+0x14c>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d104      	bne.n	8014610 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014606:	4b36      	ldr	r3, [pc, #216]	; (80146e0 <xTaskIncrementTick+0x158>)
 8014608:	f04f 32ff 	mov.w	r2, #4294967295
 801460c:	601a      	str	r2, [r3, #0]
					break;
 801460e:	e03e      	b.n	801468e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014610:	4b30      	ldr	r3, [pc, #192]	; (80146d4 <xTaskIncrementTick+0x14c>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	68db      	ldr	r3, [r3, #12]
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014620:	693a      	ldr	r2, [r7, #16]
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	429a      	cmp	r2, r3
 8014626:	d203      	bcs.n	8014630 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014628:	4a2d      	ldr	r2, [pc, #180]	; (80146e0 <xTaskIncrementTick+0x158>)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801462e:	e02e      	b.n	801468e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	3304      	adds	r3, #4
 8014634:	4618      	mov	r0, r3
 8014636:	f7fe ff18 	bl	801346a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801463e:	2b00      	cmp	r3, #0
 8014640:	d004      	beq.n	801464c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	3318      	adds	r3, #24
 8014646:	4618      	mov	r0, r3
 8014648:	f7fe ff0f 	bl	801346a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014650:	2201      	movs	r2, #1
 8014652:	409a      	lsls	r2, r3
 8014654:	4b23      	ldr	r3, [pc, #140]	; (80146e4 <xTaskIncrementTick+0x15c>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	4313      	orrs	r3, r2
 801465a:	4a22      	ldr	r2, [pc, #136]	; (80146e4 <xTaskIncrementTick+0x15c>)
 801465c:	6013      	str	r3, [r2, #0]
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014662:	4613      	mov	r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	4413      	add	r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	4a1f      	ldr	r2, [pc, #124]	; (80146e8 <xTaskIncrementTick+0x160>)
 801466c:	441a      	add	r2, r3
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	3304      	adds	r3, #4
 8014672:	4619      	mov	r1, r3
 8014674:	4610      	mov	r0, r2
 8014676:	f7fe fe9b 	bl	80133b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801467e:	4b1b      	ldr	r3, [pc, #108]	; (80146ec <xTaskIncrementTick+0x164>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014684:	429a      	cmp	r2, r3
 8014686:	d3b9      	bcc.n	80145fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014688:	2301      	movs	r3, #1
 801468a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801468c:	e7b6      	b.n	80145fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801468e:	4b17      	ldr	r3, [pc, #92]	; (80146ec <xTaskIncrementTick+0x164>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014694:	4914      	ldr	r1, [pc, #80]	; (80146e8 <xTaskIncrementTick+0x160>)
 8014696:	4613      	mov	r3, r2
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	4413      	add	r3, r2
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	440b      	add	r3, r1
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b01      	cmp	r3, #1
 80146a4:	d907      	bls.n	80146b6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80146a6:	2301      	movs	r3, #1
 80146a8:	617b      	str	r3, [r7, #20]
 80146aa:	e004      	b.n	80146b6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80146ac:	4b10      	ldr	r3, [pc, #64]	; (80146f0 <xTaskIncrementTick+0x168>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	3301      	adds	r3, #1
 80146b2:	4a0f      	ldr	r2, [pc, #60]	; (80146f0 <xTaskIncrementTick+0x168>)
 80146b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80146b6:	4b0f      	ldr	r3, [pc, #60]	; (80146f4 <xTaskIncrementTick+0x16c>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d001      	beq.n	80146c2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80146be:	2301      	movs	r3, #1
 80146c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80146c2:	697b      	ldr	r3, [r7, #20]
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	20004994 	.word	0x20004994
 80146d0:	20004970 	.word	0x20004970
 80146d4:	20004924 	.word	0x20004924
 80146d8:	20004928 	.word	0x20004928
 80146dc:	20004984 	.word	0x20004984
 80146e0:	2000498c 	.word	0x2000498c
 80146e4:	20004974 	.word	0x20004974
 80146e8:	20004870 	.word	0x20004870
 80146ec:	2000486c 	.word	0x2000486c
 80146f0:	2000497c 	.word	0x2000497c
 80146f4:	20004980 	.word	0x20004980

080146f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80146f8:	b480      	push	{r7}
 80146fa:	b087      	sub	sp, #28
 80146fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80146fe:	4b27      	ldr	r3, [pc, #156]	; (801479c <vTaskSwitchContext+0xa4>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d003      	beq.n	801470e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014706:	4b26      	ldr	r3, [pc, #152]	; (80147a0 <vTaskSwitchContext+0xa8>)
 8014708:	2201      	movs	r2, #1
 801470a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801470c:	e03f      	b.n	801478e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801470e:	4b24      	ldr	r3, [pc, #144]	; (80147a0 <vTaskSwitchContext+0xa8>)
 8014710:	2200      	movs	r2, #0
 8014712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014714:	4b23      	ldr	r3, [pc, #140]	; (80147a4 <vTaskSwitchContext+0xac>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	fab3 f383 	clz	r3, r3
 8014720:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014722:	7afb      	ldrb	r3, [r7, #11]
 8014724:	f1c3 031f 	rsb	r3, r3, #31
 8014728:	617b      	str	r3, [r7, #20]
 801472a:	491f      	ldr	r1, [pc, #124]	; (80147a8 <vTaskSwitchContext+0xb0>)
 801472c:	697a      	ldr	r2, [r7, #20]
 801472e:	4613      	mov	r3, r2
 8014730:	009b      	lsls	r3, r3, #2
 8014732:	4413      	add	r3, r2
 8014734:	009b      	lsls	r3, r3, #2
 8014736:	440b      	add	r3, r1
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d10a      	bne.n	8014754 <vTaskSwitchContext+0x5c>
	__asm volatile
 801473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014742:	f383 8811 	msr	BASEPRI, r3
 8014746:	f3bf 8f6f 	isb	sy
 801474a:	f3bf 8f4f 	dsb	sy
 801474e:	607b      	str	r3, [r7, #4]
}
 8014750:	bf00      	nop
 8014752:	e7fe      	b.n	8014752 <vTaskSwitchContext+0x5a>
 8014754:	697a      	ldr	r2, [r7, #20]
 8014756:	4613      	mov	r3, r2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	4413      	add	r3, r2
 801475c:	009b      	lsls	r3, r3, #2
 801475e:	4a12      	ldr	r2, [pc, #72]	; (80147a8 <vTaskSwitchContext+0xb0>)
 8014760:	4413      	add	r3, r2
 8014762:	613b      	str	r3, [r7, #16]
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	685a      	ldr	r2, [r3, #4]
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	605a      	str	r2, [r3, #4]
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	685a      	ldr	r2, [r3, #4]
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	3308      	adds	r3, #8
 8014776:	429a      	cmp	r2, r3
 8014778:	d104      	bne.n	8014784 <vTaskSwitchContext+0x8c>
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	685a      	ldr	r2, [r3, #4]
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	605a      	str	r2, [r3, #4]
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	4a08      	ldr	r2, [pc, #32]	; (80147ac <vTaskSwitchContext+0xb4>)
 801478c:	6013      	str	r3, [r2, #0]
}
 801478e:	bf00      	nop
 8014790:	371c      	adds	r7, #28
 8014792:	46bd      	mov	sp, r7
 8014794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop
 801479c:	20004994 	.word	0x20004994
 80147a0:	20004980 	.word	0x20004980
 80147a4:	20004974 	.word	0x20004974
 80147a8:	20004870 	.word	0x20004870
 80147ac:	2000486c 	.word	0x2000486c

080147b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d10a      	bne.n	80147d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80147c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c4:	f383 8811 	msr	BASEPRI, r3
 80147c8:	f3bf 8f6f 	isb	sy
 80147cc:	f3bf 8f4f 	dsb	sy
 80147d0:	60fb      	str	r3, [r7, #12]
}
 80147d2:	bf00      	nop
 80147d4:	e7fe      	b.n	80147d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80147d6:	4b07      	ldr	r3, [pc, #28]	; (80147f4 <vTaskPlaceOnEventList+0x44>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	3318      	adds	r3, #24
 80147dc:	4619      	mov	r1, r3
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f7fe fe0a 	bl	80133f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147e4:	2101      	movs	r1, #1
 80147e6:	6838      	ldr	r0, [r7, #0]
 80147e8:	f000 fc50 	bl	801508c <prvAddCurrentTaskToDelayedList>
}
 80147ec:	bf00      	nop
 80147ee:	3710      	adds	r7, #16
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	2000486c 	.word	0x2000486c

080147f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b086      	sub	sp, #24
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	68db      	ldr	r3, [r3, #12]
 8014806:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10a      	bne.n	8014824 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014812:	f383 8811 	msr	BASEPRI, r3
 8014816:	f3bf 8f6f 	isb	sy
 801481a:	f3bf 8f4f 	dsb	sy
 801481e:	60fb      	str	r3, [r7, #12]
}
 8014820:	bf00      	nop
 8014822:	e7fe      	b.n	8014822 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	3318      	adds	r3, #24
 8014828:	4618      	mov	r0, r3
 801482a:	f7fe fe1e 	bl	801346a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801482e:	4b1d      	ldr	r3, [pc, #116]	; (80148a4 <xTaskRemoveFromEventList+0xac>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d11c      	bne.n	8014870 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	3304      	adds	r3, #4
 801483a:	4618      	mov	r0, r3
 801483c:	f7fe fe15 	bl	801346a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014844:	2201      	movs	r2, #1
 8014846:	409a      	lsls	r2, r3
 8014848:	4b17      	ldr	r3, [pc, #92]	; (80148a8 <xTaskRemoveFromEventList+0xb0>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	4313      	orrs	r3, r2
 801484e:	4a16      	ldr	r2, [pc, #88]	; (80148a8 <xTaskRemoveFromEventList+0xb0>)
 8014850:	6013      	str	r3, [r2, #0]
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014856:	4613      	mov	r3, r2
 8014858:	009b      	lsls	r3, r3, #2
 801485a:	4413      	add	r3, r2
 801485c:	009b      	lsls	r3, r3, #2
 801485e:	4a13      	ldr	r2, [pc, #76]	; (80148ac <xTaskRemoveFromEventList+0xb4>)
 8014860:	441a      	add	r2, r3
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	3304      	adds	r3, #4
 8014866:	4619      	mov	r1, r3
 8014868:	4610      	mov	r0, r2
 801486a:	f7fe fda1 	bl	80133b0 <vListInsertEnd>
 801486e:	e005      	b.n	801487c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	3318      	adds	r3, #24
 8014874:	4619      	mov	r1, r3
 8014876:	480e      	ldr	r0, [pc, #56]	; (80148b0 <xTaskRemoveFromEventList+0xb8>)
 8014878:	f7fe fd9a 	bl	80133b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014880:	4b0c      	ldr	r3, [pc, #48]	; (80148b4 <xTaskRemoveFromEventList+0xbc>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014886:	429a      	cmp	r2, r3
 8014888:	d905      	bls.n	8014896 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801488a:	2301      	movs	r3, #1
 801488c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801488e:	4b0a      	ldr	r3, [pc, #40]	; (80148b8 <xTaskRemoveFromEventList+0xc0>)
 8014890:	2201      	movs	r2, #1
 8014892:	601a      	str	r2, [r3, #0]
 8014894:	e001      	b.n	801489a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8014896:	2300      	movs	r3, #0
 8014898:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801489a:	697b      	ldr	r3, [r7, #20]
}
 801489c:	4618      	mov	r0, r3
 801489e:	3718      	adds	r7, #24
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}
 80148a4:	20004994 	.word	0x20004994
 80148a8:	20004974 	.word	0x20004974
 80148ac:	20004870 	.word	0x20004870
 80148b0:	2000492c 	.word	0x2000492c
 80148b4:	2000486c 	.word	0x2000486c
 80148b8:	20004980 	.word	0x20004980

080148bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80148bc:	b480      	push	{r7}
 80148be:	b083      	sub	sp, #12
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80148c4:	4b06      	ldr	r3, [pc, #24]	; (80148e0 <vTaskInternalSetTimeOutState+0x24>)
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80148cc:	4b05      	ldr	r3, [pc, #20]	; (80148e4 <vTaskInternalSetTimeOutState+0x28>)
 80148ce:	681a      	ldr	r2, [r3, #0]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	605a      	str	r2, [r3, #4]
}
 80148d4:	bf00      	nop
 80148d6:	370c      	adds	r7, #12
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr
 80148e0:	20004984 	.word	0x20004984
 80148e4:	20004970 	.word	0x20004970

080148e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b088      	sub	sp, #32
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d10a      	bne.n	801490e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80148f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fc:	f383 8811 	msr	BASEPRI, r3
 8014900:	f3bf 8f6f 	isb	sy
 8014904:	f3bf 8f4f 	dsb	sy
 8014908:	613b      	str	r3, [r7, #16]
}
 801490a:	bf00      	nop
 801490c:	e7fe      	b.n	801490c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d10a      	bne.n	801492a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014918:	f383 8811 	msr	BASEPRI, r3
 801491c:	f3bf 8f6f 	isb	sy
 8014920:	f3bf 8f4f 	dsb	sy
 8014924:	60fb      	str	r3, [r7, #12]
}
 8014926:	bf00      	nop
 8014928:	e7fe      	b.n	8014928 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801492a:	f000 fd43 	bl	80153b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801492e:	4b1d      	ldr	r3, [pc, #116]	; (80149a4 <xTaskCheckForTimeOut+0xbc>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	69ba      	ldr	r2, [r7, #24]
 801493a:	1ad3      	subs	r3, r2, r3
 801493c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014946:	d102      	bne.n	801494e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014948:	2300      	movs	r3, #0
 801494a:	61fb      	str	r3, [r7, #28]
 801494c:	e023      	b.n	8014996 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	4b15      	ldr	r3, [pc, #84]	; (80149a8 <xTaskCheckForTimeOut+0xc0>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	429a      	cmp	r2, r3
 8014958:	d007      	beq.n	801496a <xTaskCheckForTimeOut+0x82>
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	69ba      	ldr	r2, [r7, #24]
 8014960:	429a      	cmp	r2, r3
 8014962:	d302      	bcc.n	801496a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014964:	2301      	movs	r3, #1
 8014966:	61fb      	str	r3, [r7, #28]
 8014968:	e015      	b.n	8014996 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	697a      	ldr	r2, [r7, #20]
 8014970:	429a      	cmp	r2, r3
 8014972:	d20b      	bcs.n	801498c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	681a      	ldr	r2, [r3, #0]
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	1ad2      	subs	r2, r2, r3
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f7ff ff9b 	bl	80148bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014986:	2300      	movs	r3, #0
 8014988:	61fb      	str	r3, [r7, #28]
 801498a:	e004      	b.n	8014996 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	2200      	movs	r2, #0
 8014990:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014992:	2301      	movs	r3, #1
 8014994:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014996:	f000 fd3d 	bl	8015414 <vPortExitCritical>

	return xReturn;
 801499a:	69fb      	ldr	r3, [r7, #28]
}
 801499c:	4618      	mov	r0, r3
 801499e:	3720      	adds	r7, #32
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	20004970 	.word	0x20004970
 80149a8:	20004984 	.word	0x20004984

080149ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80149ac:	b480      	push	{r7}
 80149ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80149b0:	4b03      	ldr	r3, [pc, #12]	; (80149c0 <vTaskMissedYield+0x14>)
 80149b2:	2201      	movs	r2, #1
 80149b4:	601a      	str	r2, [r3, #0]
}
 80149b6:	bf00      	nop
 80149b8:	46bd      	mov	sp, r7
 80149ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149be:	4770      	bx	lr
 80149c0:	20004980 	.word	0x20004980

080149c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b082      	sub	sp, #8
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80149cc:	f000 f852 	bl	8014a74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80149d0:	4b06      	ldr	r3, [pc, #24]	; (80149ec <prvIdleTask+0x28>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d9f9      	bls.n	80149cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80149d8:	4b05      	ldr	r3, [pc, #20]	; (80149f0 <prvIdleTask+0x2c>)
 80149da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149de:	601a      	str	r2, [r3, #0]
 80149e0:	f3bf 8f4f 	dsb	sy
 80149e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80149e8:	e7f0      	b.n	80149cc <prvIdleTask+0x8>
 80149ea:	bf00      	nop
 80149ec:	20004870 	.word	0x20004870
 80149f0:	e000ed04 	.word	0xe000ed04

080149f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80149fa:	2300      	movs	r3, #0
 80149fc:	607b      	str	r3, [r7, #4]
 80149fe:	e00c      	b.n	8014a1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	4613      	mov	r3, r2
 8014a04:	009b      	lsls	r3, r3, #2
 8014a06:	4413      	add	r3, r2
 8014a08:	009b      	lsls	r3, r3, #2
 8014a0a:	4a12      	ldr	r2, [pc, #72]	; (8014a54 <prvInitialiseTaskLists+0x60>)
 8014a0c:	4413      	add	r3, r2
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fe fca1 	bl	8013356 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	3301      	adds	r3, #1
 8014a18:	607b      	str	r3, [r7, #4]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2b06      	cmp	r3, #6
 8014a1e:	d9ef      	bls.n	8014a00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014a20:	480d      	ldr	r0, [pc, #52]	; (8014a58 <prvInitialiseTaskLists+0x64>)
 8014a22:	f7fe fc98 	bl	8013356 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014a26:	480d      	ldr	r0, [pc, #52]	; (8014a5c <prvInitialiseTaskLists+0x68>)
 8014a28:	f7fe fc95 	bl	8013356 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014a2c:	480c      	ldr	r0, [pc, #48]	; (8014a60 <prvInitialiseTaskLists+0x6c>)
 8014a2e:	f7fe fc92 	bl	8013356 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014a32:	480c      	ldr	r0, [pc, #48]	; (8014a64 <prvInitialiseTaskLists+0x70>)
 8014a34:	f7fe fc8f 	bl	8013356 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014a38:	480b      	ldr	r0, [pc, #44]	; (8014a68 <prvInitialiseTaskLists+0x74>)
 8014a3a:	f7fe fc8c 	bl	8013356 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014a3e:	4b0b      	ldr	r3, [pc, #44]	; (8014a6c <prvInitialiseTaskLists+0x78>)
 8014a40:	4a05      	ldr	r2, [pc, #20]	; (8014a58 <prvInitialiseTaskLists+0x64>)
 8014a42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014a44:	4b0a      	ldr	r3, [pc, #40]	; (8014a70 <prvInitialiseTaskLists+0x7c>)
 8014a46:	4a05      	ldr	r2, [pc, #20]	; (8014a5c <prvInitialiseTaskLists+0x68>)
 8014a48:	601a      	str	r2, [r3, #0]
}
 8014a4a:	bf00      	nop
 8014a4c:	3708      	adds	r7, #8
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}
 8014a52:	bf00      	nop
 8014a54:	20004870 	.word	0x20004870
 8014a58:	200048fc 	.word	0x200048fc
 8014a5c:	20004910 	.word	0x20004910
 8014a60:	2000492c 	.word	0x2000492c
 8014a64:	20004940 	.word	0x20004940
 8014a68:	20004958 	.word	0x20004958
 8014a6c:	20004924 	.word	0x20004924
 8014a70:	20004928 	.word	0x20004928

08014a74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b082      	sub	sp, #8
 8014a78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014a7a:	e019      	b.n	8014ab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014a7c:	f000 fc9a 	bl	80153b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a80:	4b10      	ldr	r3, [pc, #64]	; (8014ac4 <prvCheckTasksWaitingTermination+0x50>)
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	3304      	adds	r3, #4
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7fe fcec 	bl	801346a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014a92:	4b0d      	ldr	r3, [pc, #52]	; (8014ac8 <prvCheckTasksWaitingTermination+0x54>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	3b01      	subs	r3, #1
 8014a98:	4a0b      	ldr	r2, [pc, #44]	; (8014ac8 <prvCheckTasksWaitingTermination+0x54>)
 8014a9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014a9c:	4b0b      	ldr	r3, [pc, #44]	; (8014acc <prvCheckTasksWaitingTermination+0x58>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	3b01      	subs	r3, #1
 8014aa2:	4a0a      	ldr	r2, [pc, #40]	; (8014acc <prvCheckTasksWaitingTermination+0x58>)
 8014aa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014aa6:	f000 fcb5 	bl	8015414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f000 f810 	bl	8014ad0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ab0:	4b06      	ldr	r3, [pc, #24]	; (8014acc <prvCheckTasksWaitingTermination+0x58>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d1e1      	bne.n	8014a7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ab8:	bf00      	nop
 8014aba:	bf00      	nop
 8014abc:	3708      	adds	r7, #8
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	20004940 	.word	0x20004940
 8014ac8:	2000496c 	.word	0x2000496c
 8014acc:	20004954 	.word	0x20004954

08014ad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d108      	bne.n	8014af4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f000 fe4a 	bl	8015780 <vPortFree>
				vPortFree( pxTCB );
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 fe47 	bl	8015780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014af2:	e018      	b.n	8014b26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014afa:	2b01      	cmp	r3, #1
 8014afc:	d103      	bne.n	8014b06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f000 fe3e 	bl	8015780 <vPortFree>
	}
 8014b04:	e00f      	b.n	8014b26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014b0c:	2b02      	cmp	r3, #2
 8014b0e:	d00a      	beq.n	8014b26 <prvDeleteTCB+0x56>
	__asm volatile
 8014b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b14:	f383 8811 	msr	BASEPRI, r3
 8014b18:	f3bf 8f6f 	isb	sy
 8014b1c:	f3bf 8f4f 	dsb	sy
 8014b20:	60fb      	str	r3, [r7, #12]
}
 8014b22:	bf00      	nop
 8014b24:	e7fe      	b.n	8014b24 <prvDeleteTCB+0x54>
	}
 8014b26:	bf00      	nop
 8014b28:	3710      	adds	r7, #16
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}
	...

08014b30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014b30:	b480      	push	{r7}
 8014b32:	b083      	sub	sp, #12
 8014b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014b36:	4b0c      	ldr	r3, [pc, #48]	; (8014b68 <prvResetNextTaskUnblockTime+0x38>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d104      	bne.n	8014b4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014b40:	4b0a      	ldr	r3, [pc, #40]	; (8014b6c <prvResetNextTaskUnblockTime+0x3c>)
 8014b42:	f04f 32ff 	mov.w	r2, #4294967295
 8014b46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014b48:	e008      	b.n	8014b5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b4a:	4b07      	ldr	r3, [pc, #28]	; (8014b68 <prvResetNextTaskUnblockTime+0x38>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	685b      	ldr	r3, [r3, #4]
 8014b58:	4a04      	ldr	r2, [pc, #16]	; (8014b6c <prvResetNextTaskUnblockTime+0x3c>)
 8014b5a:	6013      	str	r3, [r2, #0]
}
 8014b5c:	bf00      	nop
 8014b5e:	370c      	adds	r7, #12
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr
 8014b68:	20004924 	.word	0x20004924
 8014b6c:	2000498c 	.word	0x2000498c

08014b70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014b70:	b480      	push	{r7}
 8014b72:	b083      	sub	sp, #12
 8014b74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014b76:	4b0b      	ldr	r3, [pc, #44]	; (8014ba4 <xTaskGetSchedulerState+0x34>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d102      	bne.n	8014b84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014b7e:	2301      	movs	r3, #1
 8014b80:	607b      	str	r3, [r7, #4]
 8014b82:	e008      	b.n	8014b96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b84:	4b08      	ldr	r3, [pc, #32]	; (8014ba8 <xTaskGetSchedulerState+0x38>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d102      	bne.n	8014b92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014b8c:	2302      	movs	r3, #2
 8014b8e:	607b      	str	r3, [r7, #4]
 8014b90:	e001      	b.n	8014b96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014b92:	2300      	movs	r3, #0
 8014b94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014b96:	687b      	ldr	r3, [r7, #4]
	}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	370c      	adds	r7, #12
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr
 8014ba4:	20004978 	.word	0x20004978
 8014ba8:	20004994 	.word	0x20004994

08014bac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b086      	sub	sp, #24
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d06e      	beq.n	8014ca0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014bc2:	4b3a      	ldr	r3, [pc, #232]	; (8014cac <xTaskPriorityDisinherit+0x100>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	693a      	ldr	r2, [r7, #16]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d00a      	beq.n	8014be2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd0:	f383 8811 	msr	BASEPRI, r3
 8014bd4:	f3bf 8f6f 	isb	sy
 8014bd8:	f3bf 8f4f 	dsb	sy
 8014bdc:	60fb      	str	r3, [r7, #12]
}
 8014bde:	bf00      	nop
 8014be0:	e7fe      	b.n	8014be0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d10a      	bne.n	8014c00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	f383 8811 	msr	BASEPRI, r3
 8014bf2:	f3bf 8f6f 	isb	sy
 8014bf6:	f3bf 8f4f 	dsb	sy
 8014bfa:	60bb      	str	r3, [r7, #8]
}
 8014bfc:	bf00      	nop
 8014bfe:	e7fe      	b.n	8014bfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c04:	1e5a      	subs	r2, r3, #1
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014c0a:	693b      	ldr	r3, [r7, #16]
 8014c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d044      	beq.n	8014ca0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d140      	bne.n	8014ca0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	3304      	adds	r3, #4
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7fe fc21 	bl	801346a <uxListRemove>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d115      	bne.n	8014c5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c32:	491f      	ldr	r1, [pc, #124]	; (8014cb0 <xTaskPriorityDisinherit+0x104>)
 8014c34:	4613      	mov	r3, r2
 8014c36:	009b      	lsls	r3, r3, #2
 8014c38:	4413      	add	r3, r2
 8014c3a:	009b      	lsls	r3, r3, #2
 8014c3c:	440b      	add	r3, r1
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d10a      	bne.n	8014c5a <xTaskPriorityDisinherit+0xae>
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c48:	2201      	movs	r2, #1
 8014c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8014c4e:	43da      	mvns	r2, r3
 8014c50:	4b18      	ldr	r3, [pc, #96]	; (8014cb4 <xTaskPriorityDisinherit+0x108>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	4013      	ands	r3, r2
 8014c56:	4a17      	ldr	r2, [pc, #92]	; (8014cb4 <xTaskPriorityDisinherit+0x108>)
 8014c58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c66:	f1c3 0207 	rsb	r2, r3, #7
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014c6e:	693b      	ldr	r3, [r7, #16]
 8014c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c72:	2201      	movs	r2, #1
 8014c74:	409a      	lsls	r2, r3
 8014c76:	4b0f      	ldr	r3, [pc, #60]	; (8014cb4 <xTaskPriorityDisinherit+0x108>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	4313      	orrs	r3, r2
 8014c7c:	4a0d      	ldr	r2, [pc, #52]	; (8014cb4 <xTaskPriorityDisinherit+0x108>)
 8014c7e:	6013      	str	r3, [r2, #0]
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c84:	4613      	mov	r3, r2
 8014c86:	009b      	lsls	r3, r3, #2
 8014c88:	4413      	add	r3, r2
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	4a08      	ldr	r2, [pc, #32]	; (8014cb0 <xTaskPriorityDisinherit+0x104>)
 8014c8e:	441a      	add	r2, r3
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	3304      	adds	r3, #4
 8014c94:	4619      	mov	r1, r3
 8014c96:	4610      	mov	r0, r2
 8014c98:	f7fe fb8a 	bl	80133b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ca0:	697b      	ldr	r3, [r7, #20]
	}
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	3718      	adds	r7, #24
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
 8014caa:	bf00      	nop
 8014cac:	2000486c 	.word	0x2000486c
 8014cb0:	20004870 	.word	0x20004870
 8014cb4:	20004974 	.word	0x20004974

08014cb8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b086      	sub	sp, #24
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	60f8      	str	r0, [r7, #12]
 8014cc0:	60b9      	str	r1, [r7, #8]
 8014cc2:	607a      	str	r2, [r7, #4]
 8014cc4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014cc6:	f000 fb75 	bl	80153b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014cca:	4b26      	ldr	r3, [pc, #152]	; (8014d64 <xTaskNotifyWait+0xac>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	2b02      	cmp	r3, #2
 8014cd6:	d01a      	beq.n	8014d0e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014cd8:	4b22      	ldr	r3, [pc, #136]	; (8014d64 <xTaskNotifyWait+0xac>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014cde:	68fa      	ldr	r2, [r7, #12]
 8014ce0:	43d2      	mvns	r2, r2
 8014ce2:	400a      	ands	r2, r1
 8014ce4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014ce6:	4b1f      	ldr	r3, [pc, #124]	; (8014d64 <xTaskNotifyWait+0xac>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2201      	movs	r2, #1
 8014cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d00b      	beq.n	8014d0e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014cf6:	2101      	movs	r1, #1
 8014cf8:	6838      	ldr	r0, [r7, #0]
 8014cfa:	f000 f9c7 	bl	801508c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014cfe:	4b1a      	ldr	r3, [pc, #104]	; (8014d68 <xTaskNotifyWait+0xb0>)
 8014d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d04:	601a      	str	r2, [r3, #0]
 8014d06:	f3bf 8f4f 	dsb	sy
 8014d0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014d0e:	f000 fb81 	bl	8015414 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014d12:	f000 fb4f 	bl	80153b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d004      	beq.n	8014d26 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014d1c:	4b11      	ldr	r3, [pc, #68]	; (8014d64 <xTaskNotifyWait+0xac>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014d26:	4b0f      	ldr	r3, [pc, #60]	; (8014d64 <xTaskNotifyWait+0xac>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014d2e:	b2db      	uxtb	r3, r3
 8014d30:	2b02      	cmp	r3, #2
 8014d32:	d002      	beq.n	8014d3a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014d34:	2300      	movs	r3, #0
 8014d36:	617b      	str	r3, [r7, #20]
 8014d38:	e008      	b.n	8014d4c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8014d3a:	4b0a      	ldr	r3, [pc, #40]	; (8014d64 <xTaskNotifyWait+0xac>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014d40:	68ba      	ldr	r2, [r7, #8]
 8014d42:	43d2      	mvns	r2, r2
 8014d44:	400a      	ands	r2, r1
 8014d46:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014d48:	2301      	movs	r3, #1
 8014d4a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014d4c:	4b05      	ldr	r3, [pc, #20]	; (8014d64 <xTaskNotifyWait+0xac>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	2200      	movs	r2, #0
 8014d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014d56:	f000 fb5d 	bl	8015414 <vPortExitCritical>

		return xReturn;
 8014d5a:	697b      	ldr	r3, [r7, #20]
	}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3718      	adds	r7, #24
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}
 8014d64:	2000486c 	.word	0x2000486c
 8014d68:	e000ed04 	.word	0xe000ed04

08014d6c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b08a      	sub	sp, #40	; 0x28
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	60f8      	str	r0, [r7, #12]
 8014d74:	60b9      	str	r1, [r7, #8]
 8014d76:	603b      	str	r3, [r7, #0]
 8014d78:	4613      	mov	r3, r2
 8014d7a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10a      	bne.n	8014d9c <xTaskGenericNotify+0x30>
	__asm volatile
 8014d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8a:	f383 8811 	msr	BASEPRI, r3
 8014d8e:	f3bf 8f6f 	isb	sy
 8014d92:	f3bf 8f4f 	dsb	sy
 8014d96:	61bb      	str	r3, [r7, #24]
}
 8014d98:	bf00      	nop
 8014d9a:	e7fe      	b.n	8014d9a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014da0:	f000 fb08 	bl	80153b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d003      	beq.n	8014db2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014daa:	6a3b      	ldr	r3, [r7, #32]
 8014dac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014db2:	6a3b      	ldr	r3, [r7, #32]
 8014db4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014db8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014dba:	6a3b      	ldr	r3, [r7, #32]
 8014dbc:	2202      	movs	r2, #2
 8014dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014dc2:	79fb      	ldrb	r3, [r7, #7]
 8014dc4:	2b04      	cmp	r3, #4
 8014dc6:	d828      	bhi.n	8014e1a <xTaskGenericNotify+0xae>
 8014dc8:	a201      	add	r2, pc, #4	; (adr r2, 8014dd0 <xTaskGenericNotify+0x64>)
 8014dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dce:	bf00      	nop
 8014dd0:	08014e3b 	.word	0x08014e3b
 8014dd4:	08014de5 	.word	0x08014de5
 8014dd8:	08014df3 	.word	0x08014df3
 8014ddc:	08014dff 	.word	0x08014dff
 8014de0:	08014e07 	.word	0x08014e07
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014de4:	6a3b      	ldr	r3, [r7, #32]
 8014de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	431a      	orrs	r2, r3
 8014dec:	6a3b      	ldr	r3, [r7, #32]
 8014dee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014df0:	e026      	b.n	8014e40 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014df2:	6a3b      	ldr	r3, [r7, #32]
 8014df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014df6:	1c5a      	adds	r2, r3, #1
 8014df8:	6a3b      	ldr	r3, [r7, #32]
 8014dfa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014dfc:	e020      	b.n	8014e40 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014dfe:	6a3b      	ldr	r3, [r7, #32]
 8014e00:	68ba      	ldr	r2, [r7, #8]
 8014e02:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014e04:	e01c      	b.n	8014e40 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014e06:	7ffb      	ldrb	r3, [r7, #31]
 8014e08:	2b02      	cmp	r3, #2
 8014e0a:	d003      	beq.n	8014e14 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014e0c:	6a3b      	ldr	r3, [r7, #32]
 8014e0e:	68ba      	ldr	r2, [r7, #8]
 8014e10:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014e12:	e015      	b.n	8014e40 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8014e14:	2300      	movs	r3, #0
 8014e16:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014e18:	e012      	b.n	8014e40 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014e1a:	6a3b      	ldr	r3, [r7, #32]
 8014e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e22:	d00c      	beq.n	8014e3e <xTaskGenericNotify+0xd2>
	__asm volatile
 8014e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e28:	f383 8811 	msr	BASEPRI, r3
 8014e2c:	f3bf 8f6f 	isb	sy
 8014e30:	f3bf 8f4f 	dsb	sy
 8014e34:	617b      	str	r3, [r7, #20]
}
 8014e36:	bf00      	nop
 8014e38:	e7fe      	b.n	8014e38 <xTaskGenericNotify+0xcc>
					break;
 8014e3a:	bf00      	nop
 8014e3c:	e000      	b.n	8014e40 <xTaskGenericNotify+0xd4>

					break;
 8014e3e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014e40:	7ffb      	ldrb	r3, [r7, #31]
 8014e42:	2b01      	cmp	r3, #1
 8014e44:	d139      	bne.n	8014eba <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e46:	6a3b      	ldr	r3, [r7, #32]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7fe fb0d 	bl	801346a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014e50:	6a3b      	ldr	r3, [r7, #32]
 8014e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e54:	2201      	movs	r2, #1
 8014e56:	409a      	lsls	r2, r3
 8014e58:	4b1b      	ldr	r3, [pc, #108]	; (8014ec8 <xTaskGenericNotify+0x15c>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	4313      	orrs	r3, r2
 8014e5e:	4a1a      	ldr	r2, [pc, #104]	; (8014ec8 <xTaskGenericNotify+0x15c>)
 8014e60:	6013      	str	r3, [r2, #0]
 8014e62:	6a3b      	ldr	r3, [r7, #32]
 8014e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e66:	4613      	mov	r3, r2
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	4413      	add	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	4a17      	ldr	r2, [pc, #92]	; (8014ecc <xTaskGenericNotify+0x160>)
 8014e70:	441a      	add	r2, r3
 8014e72:	6a3b      	ldr	r3, [r7, #32]
 8014e74:	3304      	adds	r3, #4
 8014e76:	4619      	mov	r1, r3
 8014e78:	4610      	mov	r0, r2
 8014e7a:	f7fe fa99 	bl	80133b0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014e7e:	6a3b      	ldr	r3, [r7, #32]
 8014e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d00a      	beq.n	8014e9c <xTaskGenericNotify+0x130>
	__asm volatile
 8014e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e8a:	f383 8811 	msr	BASEPRI, r3
 8014e8e:	f3bf 8f6f 	isb	sy
 8014e92:	f3bf 8f4f 	dsb	sy
 8014e96:	613b      	str	r3, [r7, #16]
}
 8014e98:	bf00      	nop
 8014e9a:	e7fe      	b.n	8014e9a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014e9c:	6a3b      	ldr	r3, [r7, #32]
 8014e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ea0:	4b0b      	ldr	r3, [pc, #44]	; (8014ed0 <xTaskGenericNotify+0x164>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d907      	bls.n	8014eba <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014eaa:	4b0a      	ldr	r3, [pc, #40]	; (8014ed4 <xTaskGenericNotify+0x168>)
 8014eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eb0:	601a      	str	r2, [r3, #0]
 8014eb2:	f3bf 8f4f 	dsb	sy
 8014eb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014eba:	f000 faab 	bl	8015414 <vPortExitCritical>

		return xReturn;
 8014ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3728      	adds	r7, #40	; 0x28
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	20004974 	.word	0x20004974
 8014ecc:	20004870 	.word	0x20004870
 8014ed0:	2000486c 	.word	0x2000486c
 8014ed4:	e000ed04 	.word	0xe000ed04

08014ed8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b08e      	sub	sp, #56	; 0x38
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	60f8      	str	r0, [r7, #12]
 8014ee0:	60b9      	str	r1, [r7, #8]
 8014ee2:	603b      	str	r3, [r7, #0]
 8014ee4:	4613      	mov	r3, r2
 8014ee6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014ee8:	2301      	movs	r3, #1
 8014eea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d10a      	bne.n	8014f08 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8014ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef6:	f383 8811 	msr	BASEPRI, r3
 8014efa:	f3bf 8f6f 	isb	sy
 8014efe:	f3bf 8f4f 	dsb	sy
 8014f02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014f04:	bf00      	nop
 8014f06:	e7fe      	b.n	8014f06 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014f08:	f000 fb36 	bl	8015578 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014f10:	f3ef 8211 	mrs	r2, BASEPRI
 8014f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f18:	f383 8811 	msr	BASEPRI, r3
 8014f1c:	f3bf 8f6f 	isb	sy
 8014f20:	f3bf 8f4f 	dsb	sy
 8014f24:	623a      	str	r2, [r7, #32]
 8014f26:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014f28:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d003      	beq.n	8014f3a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f46:	2202      	movs	r2, #2
 8014f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014f4c:	79fb      	ldrb	r3, [r7, #7]
 8014f4e:	2b04      	cmp	r3, #4
 8014f50:	d828      	bhi.n	8014fa4 <xTaskGenericNotifyFromISR+0xcc>
 8014f52:	a201      	add	r2, pc, #4	; (adr r2, 8014f58 <xTaskGenericNotifyFromISR+0x80>)
 8014f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f58:	08014fc5 	.word	0x08014fc5
 8014f5c:	08014f6d 	.word	0x08014f6d
 8014f60:	08014f7b 	.word	0x08014f7b
 8014f64:	08014f87 	.word	0x08014f87
 8014f68:	08014f8f 	.word	0x08014f8f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	431a      	orrs	r2, r3
 8014f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f76:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014f78:	e027      	b.n	8014fca <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f7e:	1c5a      	adds	r2, r3, #1
 8014f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f82:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014f84:	e021      	b.n	8014fca <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f88:	68ba      	ldr	r2, [r7, #8]
 8014f8a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014f8c:	e01d      	b.n	8014fca <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014f92:	2b02      	cmp	r3, #2
 8014f94:	d003      	beq.n	8014f9e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014f9c:	e015      	b.n	8014fca <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014fa2:	e012      	b.n	8014fca <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fac:	d00c      	beq.n	8014fc8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb2:	f383 8811 	msr	BASEPRI, r3
 8014fb6:	f3bf 8f6f 	isb	sy
 8014fba:	f3bf 8f4f 	dsb	sy
 8014fbe:	61bb      	str	r3, [r7, #24]
}
 8014fc0:	bf00      	nop
 8014fc2:	e7fe      	b.n	8014fc2 <xTaskGenericNotifyFromISR+0xea>
					break;
 8014fc4:	bf00      	nop
 8014fc6:	e000      	b.n	8014fca <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014fc8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014fce:	2b01      	cmp	r3, #1
 8014fd0:	d145      	bne.n	801505e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d00a      	beq.n	8014ff0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fde:	f383 8811 	msr	BASEPRI, r3
 8014fe2:	f3bf 8f6f 	isb	sy
 8014fe6:	f3bf 8f4f 	dsb	sy
 8014fea:	617b      	str	r3, [r7, #20]
}
 8014fec:	bf00      	nop
 8014fee:	e7fe      	b.n	8014fee <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ff0:	4b20      	ldr	r3, [pc, #128]	; (8015074 <xTaskGenericNotifyFromISR+0x19c>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d11c      	bne.n	8015032 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ffa:	3304      	adds	r3, #4
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7fe fa34 	bl	801346a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015006:	2201      	movs	r2, #1
 8015008:	409a      	lsls	r2, r3
 801500a:	4b1b      	ldr	r3, [pc, #108]	; (8015078 <xTaskGenericNotifyFromISR+0x1a0>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	4313      	orrs	r3, r2
 8015010:	4a19      	ldr	r2, [pc, #100]	; (8015078 <xTaskGenericNotifyFromISR+0x1a0>)
 8015012:	6013      	str	r3, [r2, #0]
 8015014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015018:	4613      	mov	r3, r2
 801501a:	009b      	lsls	r3, r3, #2
 801501c:	4413      	add	r3, r2
 801501e:	009b      	lsls	r3, r3, #2
 8015020:	4a16      	ldr	r2, [pc, #88]	; (801507c <xTaskGenericNotifyFromISR+0x1a4>)
 8015022:	441a      	add	r2, r3
 8015024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015026:	3304      	adds	r3, #4
 8015028:	4619      	mov	r1, r3
 801502a:	4610      	mov	r0, r2
 801502c:	f7fe f9c0 	bl	80133b0 <vListInsertEnd>
 8015030:	e005      	b.n	801503e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015034:	3318      	adds	r3, #24
 8015036:	4619      	mov	r1, r3
 8015038:	4811      	ldr	r0, [pc, #68]	; (8015080 <xTaskGenericNotifyFromISR+0x1a8>)
 801503a:	f7fe f9b9 	bl	80133b0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015042:	4b10      	ldr	r3, [pc, #64]	; (8015084 <xTaskGenericNotifyFromISR+0x1ac>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015048:	429a      	cmp	r2, r3
 801504a:	d908      	bls.n	801505e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801504c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801504e:	2b00      	cmp	r3, #0
 8015050:	d002      	beq.n	8015058 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015054:	2201      	movs	r2, #1
 8015056:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8015058:	4b0b      	ldr	r3, [pc, #44]	; (8015088 <xTaskGenericNotifyFromISR+0x1b0>)
 801505a:	2201      	movs	r2, #1
 801505c:	601a      	str	r2, [r3, #0]
 801505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015060:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	f383 8811 	msr	BASEPRI, r3
}
 8015068:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801506c:	4618      	mov	r0, r3
 801506e:	3738      	adds	r7, #56	; 0x38
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}
 8015074:	20004994 	.word	0x20004994
 8015078:	20004974 	.word	0x20004974
 801507c:	20004870 	.word	0x20004870
 8015080:	2000492c 	.word	0x2000492c
 8015084:	2000486c 	.word	0x2000486c
 8015088:	20004980 	.word	0x20004980

0801508c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b084      	sub	sp, #16
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015096:	4b29      	ldr	r3, [pc, #164]	; (801513c <prvAddCurrentTaskToDelayedList+0xb0>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801509c:	4b28      	ldr	r3, [pc, #160]	; (8015140 <prvAddCurrentTaskToDelayedList+0xb4>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	3304      	adds	r3, #4
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fe f9e1 	bl	801346a <uxListRemove>
 80150a8:	4603      	mov	r3, r0
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d10b      	bne.n	80150c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80150ae:	4b24      	ldr	r3, [pc, #144]	; (8015140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b4:	2201      	movs	r2, #1
 80150b6:	fa02 f303 	lsl.w	r3, r2, r3
 80150ba:	43da      	mvns	r2, r3
 80150bc:	4b21      	ldr	r3, [pc, #132]	; (8015144 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4013      	ands	r3, r2
 80150c2:	4a20      	ldr	r2, [pc, #128]	; (8015144 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150cc:	d10a      	bne.n	80150e4 <prvAddCurrentTaskToDelayedList+0x58>
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d007      	beq.n	80150e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150d4:	4b1a      	ldr	r3, [pc, #104]	; (8015140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	3304      	adds	r3, #4
 80150da:	4619      	mov	r1, r3
 80150dc:	481a      	ldr	r0, [pc, #104]	; (8015148 <prvAddCurrentTaskToDelayedList+0xbc>)
 80150de:	f7fe f967 	bl	80133b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80150e2:	e026      	b.n	8015132 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80150e4:	68fa      	ldr	r2, [r7, #12]
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	4413      	add	r3, r2
 80150ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80150ec:	4b14      	ldr	r3, [pc, #80]	; (8015140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	68ba      	ldr	r2, [r7, #8]
 80150f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80150f4:	68ba      	ldr	r2, [r7, #8]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d209      	bcs.n	8015110 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150fc:	4b13      	ldr	r3, [pc, #76]	; (801514c <prvAddCurrentTaskToDelayedList+0xc0>)
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	4b0f      	ldr	r3, [pc, #60]	; (8015140 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	3304      	adds	r3, #4
 8015106:	4619      	mov	r1, r3
 8015108:	4610      	mov	r0, r2
 801510a:	f7fe f975 	bl	80133f8 <vListInsert>
}
 801510e:	e010      	b.n	8015132 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015110:	4b0f      	ldr	r3, [pc, #60]	; (8015150 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	4b0a      	ldr	r3, [pc, #40]	; (8015140 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	3304      	adds	r3, #4
 801511a:	4619      	mov	r1, r3
 801511c:	4610      	mov	r0, r2
 801511e:	f7fe f96b 	bl	80133f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015122:	4b0c      	ldr	r3, [pc, #48]	; (8015154 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	68ba      	ldr	r2, [r7, #8]
 8015128:	429a      	cmp	r2, r3
 801512a:	d202      	bcs.n	8015132 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801512c:	4a09      	ldr	r2, [pc, #36]	; (8015154 <prvAddCurrentTaskToDelayedList+0xc8>)
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	6013      	str	r3, [r2, #0]
}
 8015132:	bf00      	nop
 8015134:	3710      	adds	r7, #16
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
 801513a:	bf00      	nop
 801513c:	20004970 	.word	0x20004970
 8015140:	2000486c 	.word	0x2000486c
 8015144:	20004974 	.word	0x20004974
 8015148:	20004958 	.word	0x20004958
 801514c:	20004928 	.word	0x20004928
 8015150:	20004924 	.word	0x20004924
 8015154:	2000498c 	.word	0x2000498c

08015158 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015158:	b480      	push	{r7}
 801515a:	b085      	sub	sp, #20
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	3b04      	subs	r3, #4
 8015168:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	3b04      	subs	r3, #4
 8015176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	f023 0201 	bic.w	r2, r3, #1
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	3b04      	subs	r3, #4
 8015186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015188:	4a0c      	ldr	r2, [pc, #48]	; (80151bc <pxPortInitialiseStack+0x64>)
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	3b14      	subs	r3, #20
 8015192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	3b04      	subs	r3, #4
 801519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	f06f 0202 	mvn.w	r2, #2
 80151a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	3b20      	subs	r3, #32
 80151ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80151ae:	68fb      	ldr	r3, [r7, #12]
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	3714      	adds	r7, #20
 80151b4:	46bd      	mov	sp, r7
 80151b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ba:	4770      	bx	lr
 80151bc:	080151c1 	.word	0x080151c1

080151c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80151c0:	b480      	push	{r7}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80151c6:	2300      	movs	r3, #0
 80151c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80151ca:	4b12      	ldr	r3, [pc, #72]	; (8015214 <prvTaskExitError+0x54>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d2:	d00a      	beq.n	80151ea <prvTaskExitError+0x2a>
	__asm volatile
 80151d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d8:	f383 8811 	msr	BASEPRI, r3
 80151dc:	f3bf 8f6f 	isb	sy
 80151e0:	f3bf 8f4f 	dsb	sy
 80151e4:	60fb      	str	r3, [r7, #12]
}
 80151e6:	bf00      	nop
 80151e8:	e7fe      	b.n	80151e8 <prvTaskExitError+0x28>
	__asm volatile
 80151ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ee:	f383 8811 	msr	BASEPRI, r3
 80151f2:	f3bf 8f6f 	isb	sy
 80151f6:	f3bf 8f4f 	dsb	sy
 80151fa:	60bb      	str	r3, [r7, #8]
}
 80151fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80151fe:	bf00      	nop
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d0fc      	beq.n	8015200 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015206:	bf00      	nop
 8015208:	bf00      	nop
 801520a:	3714      	adds	r7, #20
 801520c:	46bd      	mov	sp, r7
 801520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015212:	4770      	bx	lr
 8015214:	200041a8 	.word	0x200041a8
	...

08015220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015220:	4b07      	ldr	r3, [pc, #28]	; (8015240 <pxCurrentTCBConst2>)
 8015222:	6819      	ldr	r1, [r3, #0]
 8015224:	6808      	ldr	r0, [r1, #0]
 8015226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522a:	f380 8809 	msr	PSP, r0
 801522e:	f3bf 8f6f 	isb	sy
 8015232:	f04f 0000 	mov.w	r0, #0
 8015236:	f380 8811 	msr	BASEPRI, r0
 801523a:	4770      	bx	lr
 801523c:	f3af 8000 	nop.w

08015240 <pxCurrentTCBConst2>:
 8015240:	2000486c 	.word	0x2000486c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015244:	bf00      	nop
 8015246:	bf00      	nop

08015248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015248:	4808      	ldr	r0, [pc, #32]	; (801526c <prvPortStartFirstTask+0x24>)
 801524a:	6800      	ldr	r0, [r0, #0]
 801524c:	6800      	ldr	r0, [r0, #0]
 801524e:	f380 8808 	msr	MSP, r0
 8015252:	f04f 0000 	mov.w	r0, #0
 8015256:	f380 8814 	msr	CONTROL, r0
 801525a:	b662      	cpsie	i
 801525c:	b661      	cpsie	f
 801525e:	f3bf 8f4f 	dsb	sy
 8015262:	f3bf 8f6f 	isb	sy
 8015266:	df00      	svc	0
 8015268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801526a:	bf00      	nop
 801526c:	e000ed08 	.word	0xe000ed08

08015270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b086      	sub	sp, #24
 8015274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015276:	4b46      	ldr	r3, [pc, #280]	; (8015390 <xPortStartScheduler+0x120>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	4a46      	ldr	r2, [pc, #280]	; (8015394 <xPortStartScheduler+0x124>)
 801527c:	4293      	cmp	r3, r2
 801527e:	d10a      	bne.n	8015296 <xPortStartScheduler+0x26>
	__asm volatile
 8015280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015284:	f383 8811 	msr	BASEPRI, r3
 8015288:	f3bf 8f6f 	isb	sy
 801528c:	f3bf 8f4f 	dsb	sy
 8015290:	613b      	str	r3, [r7, #16]
}
 8015292:	bf00      	nop
 8015294:	e7fe      	b.n	8015294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015296:	4b3e      	ldr	r3, [pc, #248]	; (8015390 <xPortStartScheduler+0x120>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	4a3f      	ldr	r2, [pc, #252]	; (8015398 <xPortStartScheduler+0x128>)
 801529c:	4293      	cmp	r3, r2
 801529e:	d10a      	bne.n	80152b6 <xPortStartScheduler+0x46>
	__asm volatile
 80152a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a4:	f383 8811 	msr	BASEPRI, r3
 80152a8:	f3bf 8f6f 	isb	sy
 80152ac:	f3bf 8f4f 	dsb	sy
 80152b0:	60fb      	str	r3, [r7, #12]
}
 80152b2:	bf00      	nop
 80152b4:	e7fe      	b.n	80152b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80152b6:	4b39      	ldr	r3, [pc, #228]	; (801539c <xPortStartScheduler+0x12c>)
 80152b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	22ff      	movs	r2, #255	; 0xff
 80152c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	781b      	ldrb	r3, [r3, #0]
 80152cc:	b2db      	uxtb	r3, r3
 80152ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80152d0:	78fb      	ldrb	r3, [r7, #3]
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80152d8:	b2da      	uxtb	r2, r3
 80152da:	4b31      	ldr	r3, [pc, #196]	; (80153a0 <xPortStartScheduler+0x130>)
 80152dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80152de:	4b31      	ldr	r3, [pc, #196]	; (80153a4 <xPortStartScheduler+0x134>)
 80152e0:	2207      	movs	r2, #7
 80152e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152e4:	e009      	b.n	80152fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80152e6:	4b2f      	ldr	r3, [pc, #188]	; (80153a4 <xPortStartScheduler+0x134>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	3b01      	subs	r3, #1
 80152ec:	4a2d      	ldr	r2, [pc, #180]	; (80153a4 <xPortStartScheduler+0x134>)
 80152ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80152f0:	78fb      	ldrb	r3, [r7, #3]
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	005b      	lsls	r3, r3, #1
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152fa:	78fb      	ldrb	r3, [r7, #3]
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015302:	2b80      	cmp	r3, #128	; 0x80
 8015304:	d0ef      	beq.n	80152e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015306:	4b27      	ldr	r3, [pc, #156]	; (80153a4 <xPortStartScheduler+0x134>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f1c3 0307 	rsb	r3, r3, #7
 801530e:	2b04      	cmp	r3, #4
 8015310:	d00a      	beq.n	8015328 <xPortStartScheduler+0xb8>
	__asm volatile
 8015312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	60bb      	str	r3, [r7, #8]
}
 8015324:	bf00      	nop
 8015326:	e7fe      	b.n	8015326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015328:	4b1e      	ldr	r3, [pc, #120]	; (80153a4 <xPortStartScheduler+0x134>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	021b      	lsls	r3, r3, #8
 801532e:	4a1d      	ldr	r2, [pc, #116]	; (80153a4 <xPortStartScheduler+0x134>)
 8015330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015332:	4b1c      	ldr	r3, [pc, #112]	; (80153a4 <xPortStartScheduler+0x134>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801533a:	4a1a      	ldr	r2, [pc, #104]	; (80153a4 <xPortStartScheduler+0x134>)
 801533c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	b2da      	uxtb	r2, r3
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015346:	4b18      	ldr	r3, [pc, #96]	; (80153a8 <xPortStartScheduler+0x138>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	4a17      	ldr	r2, [pc, #92]	; (80153a8 <xPortStartScheduler+0x138>)
 801534c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015352:	4b15      	ldr	r3, [pc, #84]	; (80153a8 <xPortStartScheduler+0x138>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	4a14      	ldr	r2, [pc, #80]	; (80153a8 <xPortStartScheduler+0x138>)
 8015358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801535c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801535e:	f000 f8dd 	bl	801551c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015362:	4b12      	ldr	r3, [pc, #72]	; (80153ac <xPortStartScheduler+0x13c>)
 8015364:	2200      	movs	r2, #0
 8015366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015368:	f000 f8fc 	bl	8015564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801536c:	4b10      	ldr	r3, [pc, #64]	; (80153b0 <xPortStartScheduler+0x140>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	4a0f      	ldr	r2, [pc, #60]	; (80153b0 <xPortStartScheduler+0x140>)
 8015372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015378:	f7ff ff66 	bl	8015248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801537c:	f7ff f9bc 	bl	80146f8 <vTaskSwitchContext>
	prvTaskExitError();
 8015380:	f7ff ff1e 	bl	80151c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	3718      	adds	r7, #24
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	e000ed00 	.word	0xe000ed00
 8015394:	410fc271 	.word	0x410fc271
 8015398:	410fc270 	.word	0x410fc270
 801539c:	e000e400 	.word	0xe000e400
 80153a0:	20004998 	.word	0x20004998
 80153a4:	2000499c 	.word	0x2000499c
 80153a8:	e000ed20 	.word	0xe000ed20
 80153ac:	200041a8 	.word	0x200041a8
 80153b0:	e000ef34 	.word	0xe000ef34

080153b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80153b4:	b480      	push	{r7}
 80153b6:	b083      	sub	sp, #12
 80153b8:	af00      	add	r7, sp, #0
	__asm volatile
 80153ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153be:	f383 8811 	msr	BASEPRI, r3
 80153c2:	f3bf 8f6f 	isb	sy
 80153c6:	f3bf 8f4f 	dsb	sy
 80153ca:	607b      	str	r3, [r7, #4]
}
 80153cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80153ce:	4b0f      	ldr	r3, [pc, #60]	; (801540c <vPortEnterCritical+0x58>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	3301      	adds	r3, #1
 80153d4:	4a0d      	ldr	r2, [pc, #52]	; (801540c <vPortEnterCritical+0x58>)
 80153d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80153d8:	4b0c      	ldr	r3, [pc, #48]	; (801540c <vPortEnterCritical+0x58>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b01      	cmp	r3, #1
 80153de:	d10f      	bne.n	8015400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80153e0:	4b0b      	ldr	r3, [pc, #44]	; (8015410 <vPortEnterCritical+0x5c>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	b2db      	uxtb	r3, r3
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00a      	beq.n	8015400 <vPortEnterCritical+0x4c>
	__asm volatile
 80153ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ee:	f383 8811 	msr	BASEPRI, r3
 80153f2:	f3bf 8f6f 	isb	sy
 80153f6:	f3bf 8f4f 	dsb	sy
 80153fa:	603b      	str	r3, [r7, #0]
}
 80153fc:	bf00      	nop
 80153fe:	e7fe      	b.n	80153fe <vPortEnterCritical+0x4a>
	}
}
 8015400:	bf00      	nop
 8015402:	370c      	adds	r7, #12
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr
 801540c:	200041a8 	.word	0x200041a8
 8015410:	e000ed04 	.word	0xe000ed04

08015414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801541a:	4b12      	ldr	r3, [pc, #72]	; (8015464 <vPortExitCritical+0x50>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d10a      	bne.n	8015438 <vPortExitCritical+0x24>
	__asm volatile
 8015422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015426:	f383 8811 	msr	BASEPRI, r3
 801542a:	f3bf 8f6f 	isb	sy
 801542e:	f3bf 8f4f 	dsb	sy
 8015432:	607b      	str	r3, [r7, #4]
}
 8015434:	bf00      	nop
 8015436:	e7fe      	b.n	8015436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015438:	4b0a      	ldr	r3, [pc, #40]	; (8015464 <vPortExitCritical+0x50>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	3b01      	subs	r3, #1
 801543e:	4a09      	ldr	r2, [pc, #36]	; (8015464 <vPortExitCritical+0x50>)
 8015440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015442:	4b08      	ldr	r3, [pc, #32]	; (8015464 <vPortExitCritical+0x50>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d105      	bne.n	8015456 <vPortExitCritical+0x42>
 801544a:	2300      	movs	r3, #0
 801544c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	f383 8811 	msr	BASEPRI, r3
}
 8015454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015456:	bf00      	nop
 8015458:	370c      	adds	r7, #12
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
 8015462:	bf00      	nop
 8015464:	200041a8 	.word	0x200041a8
	...

08015470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015470:	f3ef 8009 	mrs	r0, PSP
 8015474:	f3bf 8f6f 	isb	sy
 8015478:	4b15      	ldr	r3, [pc, #84]	; (80154d0 <pxCurrentTCBConst>)
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	f01e 0f10 	tst.w	lr, #16
 8015480:	bf08      	it	eq
 8015482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801548a:	6010      	str	r0, [r2, #0]
 801548c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015494:	f380 8811 	msr	BASEPRI, r0
 8015498:	f3bf 8f4f 	dsb	sy
 801549c:	f3bf 8f6f 	isb	sy
 80154a0:	f7ff f92a 	bl	80146f8 <vTaskSwitchContext>
 80154a4:	f04f 0000 	mov.w	r0, #0
 80154a8:	f380 8811 	msr	BASEPRI, r0
 80154ac:	bc09      	pop	{r0, r3}
 80154ae:	6819      	ldr	r1, [r3, #0]
 80154b0:	6808      	ldr	r0, [r1, #0]
 80154b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b6:	f01e 0f10 	tst.w	lr, #16
 80154ba:	bf08      	it	eq
 80154bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80154c0:	f380 8809 	msr	PSP, r0
 80154c4:	f3bf 8f6f 	isb	sy
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	f3af 8000 	nop.w

080154d0 <pxCurrentTCBConst>:
 80154d0:	2000486c 	.word	0x2000486c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80154d4:	bf00      	nop
 80154d6:	bf00      	nop

080154d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
	__asm volatile
 80154de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154e2:	f383 8811 	msr	BASEPRI, r3
 80154e6:	f3bf 8f6f 	isb	sy
 80154ea:	f3bf 8f4f 	dsb	sy
 80154ee:	607b      	str	r3, [r7, #4]
}
 80154f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80154f2:	f7ff f849 	bl	8014588 <xTaskIncrementTick>
 80154f6:	4603      	mov	r3, r0
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d003      	beq.n	8015504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80154fc:	4b06      	ldr	r3, [pc, #24]	; (8015518 <SysTick_Handler+0x40>)
 80154fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015502:	601a      	str	r2, [r3, #0]
 8015504:	2300      	movs	r3, #0
 8015506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	f383 8811 	msr	BASEPRI, r3
}
 801550e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015510:	bf00      	nop
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}
 8015518:	e000ed04 	.word	0xe000ed04

0801551c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801551c:	b480      	push	{r7}
 801551e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015520:	4b0b      	ldr	r3, [pc, #44]	; (8015550 <vPortSetupTimerInterrupt+0x34>)
 8015522:	2200      	movs	r2, #0
 8015524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015526:	4b0b      	ldr	r3, [pc, #44]	; (8015554 <vPortSetupTimerInterrupt+0x38>)
 8015528:	2200      	movs	r2, #0
 801552a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801552c:	4b0a      	ldr	r3, [pc, #40]	; (8015558 <vPortSetupTimerInterrupt+0x3c>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	4a0a      	ldr	r2, [pc, #40]	; (801555c <vPortSetupTimerInterrupt+0x40>)
 8015532:	fba2 2303 	umull	r2, r3, r2, r3
 8015536:	099b      	lsrs	r3, r3, #6
 8015538:	4a09      	ldr	r2, [pc, #36]	; (8015560 <vPortSetupTimerInterrupt+0x44>)
 801553a:	3b01      	subs	r3, #1
 801553c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801553e:	4b04      	ldr	r3, [pc, #16]	; (8015550 <vPortSetupTimerInterrupt+0x34>)
 8015540:	2207      	movs	r2, #7
 8015542:	601a      	str	r2, [r3, #0]
}
 8015544:	bf00      	nop
 8015546:	46bd      	mov	sp, r7
 8015548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554c:	4770      	bx	lr
 801554e:	bf00      	nop
 8015550:	e000e010 	.word	0xe000e010
 8015554:	e000e018 	.word	0xe000e018
 8015558:	2000408c 	.word	0x2000408c
 801555c:	10624dd3 	.word	0x10624dd3
 8015560:	e000e014 	.word	0xe000e014

08015564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015574 <vPortEnableVFP+0x10>
 8015568:	6801      	ldr	r1, [r0, #0]
 801556a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801556e:	6001      	str	r1, [r0, #0]
 8015570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015572:	bf00      	nop
 8015574:	e000ed88 	.word	0xe000ed88

08015578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015578:	b480      	push	{r7}
 801557a:	b085      	sub	sp, #20
 801557c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801557e:	f3ef 8305 	mrs	r3, IPSR
 8015582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	2b0f      	cmp	r3, #15
 8015588:	d914      	bls.n	80155b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801558a:	4a17      	ldr	r2, [pc, #92]	; (80155e8 <vPortValidateInterruptPriority+0x70>)
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	4413      	add	r3, r2
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015594:	4b15      	ldr	r3, [pc, #84]	; (80155ec <vPortValidateInterruptPriority+0x74>)
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	7afa      	ldrb	r2, [r7, #11]
 801559a:	429a      	cmp	r2, r3
 801559c:	d20a      	bcs.n	80155b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a2:	f383 8811 	msr	BASEPRI, r3
 80155a6:	f3bf 8f6f 	isb	sy
 80155aa:	f3bf 8f4f 	dsb	sy
 80155ae:	607b      	str	r3, [r7, #4]
}
 80155b0:	bf00      	nop
 80155b2:	e7fe      	b.n	80155b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80155b4:	4b0e      	ldr	r3, [pc, #56]	; (80155f0 <vPortValidateInterruptPriority+0x78>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80155bc:	4b0d      	ldr	r3, [pc, #52]	; (80155f4 <vPortValidateInterruptPriority+0x7c>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d90a      	bls.n	80155da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80155c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155c8:	f383 8811 	msr	BASEPRI, r3
 80155cc:	f3bf 8f6f 	isb	sy
 80155d0:	f3bf 8f4f 	dsb	sy
 80155d4:	603b      	str	r3, [r7, #0]
}
 80155d6:	bf00      	nop
 80155d8:	e7fe      	b.n	80155d8 <vPortValidateInterruptPriority+0x60>
	}
 80155da:	bf00      	nop
 80155dc:	3714      	adds	r7, #20
 80155de:	46bd      	mov	sp, r7
 80155e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e4:	4770      	bx	lr
 80155e6:	bf00      	nop
 80155e8:	e000e3f0 	.word	0xe000e3f0
 80155ec:	20004998 	.word	0x20004998
 80155f0:	e000ed0c 	.word	0xe000ed0c
 80155f4:	2000499c 	.word	0x2000499c

080155f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b08a      	sub	sp, #40	; 0x28
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015600:	2300      	movs	r3, #0
 8015602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015604:	f7fe ff16 	bl	8014434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015608:	4b58      	ldr	r3, [pc, #352]	; (801576c <pvPortMalloc+0x174>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d101      	bne.n	8015614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015610:	f000 f910 	bl	8015834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015614:	4b56      	ldr	r3, [pc, #344]	; (8015770 <pvPortMalloc+0x178>)
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	4013      	ands	r3, r2
 801561c:	2b00      	cmp	r3, #0
 801561e:	f040 808e 	bne.w	801573e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d01d      	beq.n	8015664 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015628:	2208      	movs	r2, #8
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	4413      	add	r3, r2
 801562e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f003 0307 	and.w	r3, r3, #7
 8015636:	2b00      	cmp	r3, #0
 8015638:	d014      	beq.n	8015664 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f023 0307 	bic.w	r3, r3, #7
 8015640:	3308      	adds	r3, #8
 8015642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f003 0307 	and.w	r3, r3, #7
 801564a:	2b00      	cmp	r3, #0
 801564c:	d00a      	beq.n	8015664 <pvPortMalloc+0x6c>
	__asm volatile
 801564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015652:	f383 8811 	msr	BASEPRI, r3
 8015656:	f3bf 8f6f 	isb	sy
 801565a:	f3bf 8f4f 	dsb	sy
 801565e:	617b      	str	r3, [r7, #20]
}
 8015660:	bf00      	nop
 8015662:	e7fe      	b.n	8015662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d069      	beq.n	801573e <pvPortMalloc+0x146>
 801566a:	4b42      	ldr	r3, [pc, #264]	; (8015774 <pvPortMalloc+0x17c>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	429a      	cmp	r2, r3
 8015672:	d864      	bhi.n	801573e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015674:	4b40      	ldr	r3, [pc, #256]	; (8015778 <pvPortMalloc+0x180>)
 8015676:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015678:	4b3f      	ldr	r3, [pc, #252]	; (8015778 <pvPortMalloc+0x180>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801567e:	e004      	b.n	801568a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015682:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	687a      	ldr	r2, [r7, #4]
 8015690:	429a      	cmp	r2, r3
 8015692:	d903      	bls.n	801569c <pvPortMalloc+0xa4>
 8015694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d1f1      	bne.n	8015680 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801569c:	4b33      	ldr	r3, [pc, #204]	; (801576c <pvPortMalloc+0x174>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156a2:	429a      	cmp	r2, r3
 80156a4:	d04b      	beq.n	801573e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80156a6:	6a3b      	ldr	r3, [r7, #32]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	2208      	movs	r2, #8
 80156ac:	4413      	add	r3, r2
 80156ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80156b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	6a3b      	ldr	r3, [r7, #32]
 80156b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80156b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ba:	685a      	ldr	r2, [r3, #4]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	1ad2      	subs	r2, r2, r3
 80156c0:	2308      	movs	r3, #8
 80156c2:	005b      	lsls	r3, r3, #1
 80156c4:	429a      	cmp	r2, r3
 80156c6:	d91f      	bls.n	8015708 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80156c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	4413      	add	r3, r2
 80156ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80156d0:	69bb      	ldr	r3, [r7, #24]
 80156d2:	f003 0307 	and.w	r3, r3, #7
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d00a      	beq.n	80156f0 <pvPortMalloc+0xf8>
	__asm volatile
 80156da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156de:	f383 8811 	msr	BASEPRI, r3
 80156e2:	f3bf 8f6f 	isb	sy
 80156e6:	f3bf 8f4f 	dsb	sy
 80156ea:	613b      	str	r3, [r7, #16]
}
 80156ec:	bf00      	nop
 80156ee:	e7fe      	b.n	80156ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80156f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f2:	685a      	ldr	r2, [r3, #4]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	1ad2      	subs	r2, r2, r3
 80156f8:	69bb      	ldr	r3, [r7, #24]
 80156fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80156fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015702:	69b8      	ldr	r0, [r7, #24]
 8015704:	f000 f8f8 	bl	80158f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015708:	4b1a      	ldr	r3, [pc, #104]	; (8015774 <pvPortMalloc+0x17c>)
 801570a:	681a      	ldr	r2, [r3, #0]
 801570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	1ad3      	subs	r3, r2, r3
 8015712:	4a18      	ldr	r2, [pc, #96]	; (8015774 <pvPortMalloc+0x17c>)
 8015714:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015716:	4b17      	ldr	r3, [pc, #92]	; (8015774 <pvPortMalloc+0x17c>)
 8015718:	681a      	ldr	r2, [r3, #0]
 801571a:	4b18      	ldr	r3, [pc, #96]	; (801577c <pvPortMalloc+0x184>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	429a      	cmp	r2, r3
 8015720:	d203      	bcs.n	801572a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015722:	4b14      	ldr	r3, [pc, #80]	; (8015774 <pvPortMalloc+0x17c>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	4a15      	ldr	r2, [pc, #84]	; (801577c <pvPortMalloc+0x184>)
 8015728:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801572c:	685a      	ldr	r2, [r3, #4]
 801572e:	4b10      	ldr	r3, [pc, #64]	; (8015770 <pvPortMalloc+0x178>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	431a      	orrs	r2, r3
 8015734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015736:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801573a:	2200      	movs	r2, #0
 801573c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801573e:	f7fe fe87 	bl	8014450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	f003 0307 	and.w	r3, r3, #7
 8015748:	2b00      	cmp	r3, #0
 801574a:	d00a      	beq.n	8015762 <pvPortMalloc+0x16a>
	__asm volatile
 801574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015750:	f383 8811 	msr	BASEPRI, r3
 8015754:	f3bf 8f6f 	isb	sy
 8015758:	f3bf 8f4f 	dsb	sy
 801575c:	60fb      	str	r3, [r7, #12]
}
 801575e:	bf00      	nop
 8015760:	e7fe      	b.n	8015760 <pvPortMalloc+0x168>
	return pvReturn;
 8015762:	69fb      	ldr	r3, [r7, #28]
}
 8015764:	4618      	mov	r0, r3
 8015766:	3728      	adds	r7, #40	; 0x28
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	200085a8 	.word	0x200085a8
 8015770:	200085b4 	.word	0x200085b4
 8015774:	200085ac 	.word	0x200085ac
 8015778:	200085a0 	.word	0x200085a0
 801577c:	200085b0 	.word	0x200085b0

08015780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b086      	sub	sp, #24
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d048      	beq.n	8015824 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015792:	2308      	movs	r3, #8
 8015794:	425b      	negs	r3, r3
 8015796:	697a      	ldr	r2, [r7, #20]
 8015798:	4413      	add	r3, r2
 801579a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	685a      	ldr	r2, [r3, #4]
 80157a4:	4b21      	ldr	r3, [pc, #132]	; (801582c <vPortFree+0xac>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	4013      	ands	r3, r2
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d10a      	bne.n	80157c4 <vPortFree+0x44>
	__asm volatile
 80157ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157b2:	f383 8811 	msr	BASEPRI, r3
 80157b6:	f3bf 8f6f 	isb	sy
 80157ba:	f3bf 8f4f 	dsb	sy
 80157be:	60fb      	str	r3, [r7, #12]
}
 80157c0:	bf00      	nop
 80157c2:	e7fe      	b.n	80157c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d00a      	beq.n	80157e2 <vPortFree+0x62>
	__asm volatile
 80157cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d0:	f383 8811 	msr	BASEPRI, r3
 80157d4:	f3bf 8f6f 	isb	sy
 80157d8:	f3bf 8f4f 	dsb	sy
 80157dc:	60bb      	str	r3, [r7, #8]
}
 80157de:	bf00      	nop
 80157e0:	e7fe      	b.n	80157e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80157e2:	693b      	ldr	r3, [r7, #16]
 80157e4:	685a      	ldr	r2, [r3, #4]
 80157e6:	4b11      	ldr	r3, [pc, #68]	; (801582c <vPortFree+0xac>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	4013      	ands	r3, r2
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d019      	beq.n	8015824 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80157f0:	693b      	ldr	r3, [r7, #16]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d115      	bne.n	8015824 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	685a      	ldr	r2, [r3, #4]
 80157fc:	4b0b      	ldr	r3, [pc, #44]	; (801582c <vPortFree+0xac>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	43db      	mvns	r3, r3
 8015802:	401a      	ands	r2, r3
 8015804:	693b      	ldr	r3, [r7, #16]
 8015806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015808:	f7fe fe14 	bl	8014434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	685a      	ldr	r2, [r3, #4]
 8015810:	4b07      	ldr	r3, [pc, #28]	; (8015830 <vPortFree+0xb0>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	4413      	add	r3, r2
 8015816:	4a06      	ldr	r2, [pc, #24]	; (8015830 <vPortFree+0xb0>)
 8015818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801581a:	6938      	ldr	r0, [r7, #16]
 801581c:	f000 f86c 	bl	80158f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015820:	f7fe fe16 	bl	8014450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015824:	bf00      	nop
 8015826:	3718      	adds	r7, #24
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	200085b4 	.word	0x200085b4
 8015830:	200085ac 	.word	0x200085ac

08015834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015834:	b480      	push	{r7}
 8015836:	b085      	sub	sp, #20
 8015838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801583a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801583e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015840:	4b27      	ldr	r3, [pc, #156]	; (80158e0 <prvHeapInit+0xac>)
 8015842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	f003 0307 	and.w	r3, r3, #7
 801584a:	2b00      	cmp	r3, #0
 801584c:	d00c      	beq.n	8015868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	3307      	adds	r3, #7
 8015852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	f023 0307 	bic.w	r3, r3, #7
 801585a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801585c:	68ba      	ldr	r2, [r7, #8]
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	1ad3      	subs	r3, r2, r3
 8015862:	4a1f      	ldr	r2, [pc, #124]	; (80158e0 <prvHeapInit+0xac>)
 8015864:	4413      	add	r3, r2
 8015866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801586c:	4a1d      	ldr	r2, [pc, #116]	; (80158e4 <prvHeapInit+0xb0>)
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015872:	4b1c      	ldr	r3, [pc, #112]	; (80158e4 <prvHeapInit+0xb0>)
 8015874:	2200      	movs	r2, #0
 8015876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	68ba      	ldr	r2, [r7, #8]
 801587c:	4413      	add	r3, r2
 801587e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015880:	2208      	movs	r2, #8
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	1a9b      	subs	r3, r3, r2
 8015886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	f023 0307 	bic.w	r3, r3, #7
 801588e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	4a15      	ldr	r2, [pc, #84]	; (80158e8 <prvHeapInit+0xb4>)
 8015894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015896:	4b14      	ldr	r3, [pc, #80]	; (80158e8 <prvHeapInit+0xb4>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	2200      	movs	r2, #0
 801589c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801589e:	4b12      	ldr	r3, [pc, #72]	; (80158e8 <prvHeapInit+0xb4>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	2200      	movs	r2, #0
 80158a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	68fa      	ldr	r2, [r7, #12]
 80158ae:	1ad2      	subs	r2, r2, r3
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80158b4:	4b0c      	ldr	r3, [pc, #48]	; (80158e8 <prvHeapInit+0xb4>)
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	4a0a      	ldr	r2, [pc, #40]	; (80158ec <prvHeapInit+0xb8>)
 80158c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	4a09      	ldr	r2, [pc, #36]	; (80158f0 <prvHeapInit+0xbc>)
 80158ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80158cc:	4b09      	ldr	r3, [pc, #36]	; (80158f4 <prvHeapInit+0xc0>)
 80158ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80158d2:	601a      	str	r2, [r3, #0]
}
 80158d4:	bf00      	nop
 80158d6:	3714      	adds	r7, #20
 80158d8:	46bd      	mov	sp, r7
 80158da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158de:	4770      	bx	lr
 80158e0:	200049a0 	.word	0x200049a0
 80158e4:	200085a0 	.word	0x200085a0
 80158e8:	200085a8 	.word	0x200085a8
 80158ec:	200085b0 	.word	0x200085b0
 80158f0:	200085ac 	.word	0x200085ac
 80158f4:	200085b4 	.word	0x200085b4

080158f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80158f8:	b480      	push	{r7}
 80158fa:	b085      	sub	sp, #20
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015900:	4b28      	ldr	r3, [pc, #160]	; (80159a4 <prvInsertBlockIntoFreeList+0xac>)
 8015902:	60fb      	str	r3, [r7, #12]
 8015904:	e002      	b.n	801590c <prvInsertBlockIntoFreeList+0x14>
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	60fb      	str	r3, [r7, #12]
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	687a      	ldr	r2, [r7, #4]
 8015912:	429a      	cmp	r2, r3
 8015914:	d8f7      	bhi.n	8015906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	685b      	ldr	r3, [r3, #4]
 801591e:	68ba      	ldr	r2, [r7, #8]
 8015920:	4413      	add	r3, r2
 8015922:	687a      	ldr	r2, [r7, #4]
 8015924:	429a      	cmp	r2, r3
 8015926:	d108      	bne.n	801593a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	685a      	ldr	r2, [r3, #4]
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	441a      	add	r2, r3
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	685b      	ldr	r3, [r3, #4]
 8015942:	68ba      	ldr	r2, [r7, #8]
 8015944:	441a      	add	r2, r3
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	429a      	cmp	r2, r3
 801594c:	d118      	bne.n	8015980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	4b15      	ldr	r3, [pc, #84]	; (80159a8 <prvInsertBlockIntoFreeList+0xb0>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	429a      	cmp	r2, r3
 8015958:	d00d      	beq.n	8015976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	685a      	ldr	r2, [r3, #4]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	441a      	add	r2, r3
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	681a      	ldr	r2, [r3, #0]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	601a      	str	r2, [r3, #0]
 8015974:	e008      	b.n	8015988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015976:	4b0c      	ldr	r3, [pc, #48]	; (80159a8 <prvInsertBlockIntoFreeList+0xb0>)
 8015978:	681a      	ldr	r2, [r3, #0]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	601a      	str	r2, [r3, #0]
 801597e:	e003      	b.n	8015988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	681a      	ldr	r2, [r3, #0]
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015988:	68fa      	ldr	r2, [r7, #12]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	429a      	cmp	r2, r3
 801598e:	d002      	beq.n	8015996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015996:	bf00      	nop
 8015998:	3714      	adds	r7, #20
 801599a:	46bd      	mov	sp, r7
 801599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a0:	4770      	bx	lr
 80159a2:	bf00      	nop
 80159a4:	200085a0 	.word	0x200085a0
 80159a8:	200085a8 	.word	0x200085a8

080159ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80159b0:	2200      	movs	r2, #0
 80159b2:	4912      	ldr	r1, [pc, #72]	; (80159fc <MX_USB_DEVICE_Init+0x50>)
 80159b4:	4812      	ldr	r0, [pc, #72]	; (8015a00 <MX_USB_DEVICE_Init+0x54>)
 80159b6:	f7fc f84f 	bl	8011a58 <USBD_Init>
 80159ba:	4603      	mov	r3, r0
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d001      	beq.n	80159c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80159c0:	f7f0 f8f8 	bl	8005bb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80159c4:	490f      	ldr	r1, [pc, #60]	; (8015a04 <MX_USB_DEVICE_Init+0x58>)
 80159c6:	480e      	ldr	r0, [pc, #56]	; (8015a00 <MX_USB_DEVICE_Init+0x54>)
 80159c8:	f7fc f87c 	bl	8011ac4 <USBD_RegisterClass>
 80159cc:	4603      	mov	r3, r0
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d001      	beq.n	80159d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80159d2:	f7f0 f8ef 	bl	8005bb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80159d6:	490c      	ldr	r1, [pc, #48]	; (8015a08 <MX_USB_DEVICE_Init+0x5c>)
 80159d8:	4809      	ldr	r0, [pc, #36]	; (8015a00 <MX_USB_DEVICE_Init+0x54>)
 80159da:	f7fb ffa1 	bl	8011920 <USBD_CDC_RegisterInterface>
 80159de:	4603      	mov	r3, r0
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d001      	beq.n	80159e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80159e4:	f7f0 f8e6 	bl	8005bb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80159e8:	4805      	ldr	r0, [pc, #20]	; (8015a00 <MX_USB_DEVICE_Init+0x54>)
 80159ea:	f7fc f88c 	bl	8011b06 <USBD_Start>
 80159ee:	4603      	mov	r3, r0
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d001      	beq.n	80159f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80159f4:	f7f0 f8de 	bl	8005bb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80159f8:	bf00      	nop
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	200041c0 	.word	0x200041c0
 8015a00:	20010e94 	.word	0x20010e94
 8015a04:	200040a4 	.word	0x200040a4
 8015a08:	200041ac 	.word	0x200041ac

08015a0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015a10:	2200      	movs	r2, #0
 8015a12:	4905      	ldr	r1, [pc, #20]	; (8015a28 <CDC_Init_FS+0x1c>)
 8015a14:	4805      	ldr	r0, [pc, #20]	; (8015a2c <CDC_Init_FS+0x20>)
 8015a16:	f7fb ff98 	bl	801194a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015a1a:	4905      	ldr	r1, [pc, #20]	; (8015a30 <CDC_Init_FS+0x24>)
 8015a1c:	4803      	ldr	r0, [pc, #12]	; (8015a2c <CDC_Init_FS+0x20>)
 8015a1e:	f7fb ffad 	bl	801197c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015a22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	bd80      	pop	{r7, pc}
 8015a28:	20011364 	.word	0x20011364
 8015a2c:	20010e94 	.word	0x20010e94
 8015a30:	20011164 	.word	0x20011164

08015a34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015a34:	b480      	push	{r7}
 8015a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015a38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr

08015a44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	6039      	str	r1, [r7, #0]
 8015a4e:	71fb      	strb	r3, [r7, #7]
 8015a50:	4613      	mov	r3, r2
 8015a52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015a54:	79fb      	ldrb	r3, [r7, #7]
 8015a56:	2b23      	cmp	r3, #35	; 0x23
 8015a58:	f200 808c 	bhi.w	8015b74 <CDC_Control_FS+0x130>
 8015a5c:	a201      	add	r2, pc, #4	; (adr r2, 8015a64 <CDC_Control_FS+0x20>)
 8015a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a62:	bf00      	nop
 8015a64:	08015b75 	.word	0x08015b75
 8015a68:	08015b75 	.word	0x08015b75
 8015a6c:	08015b75 	.word	0x08015b75
 8015a70:	08015b75 	.word	0x08015b75
 8015a74:	08015b75 	.word	0x08015b75
 8015a78:	08015b75 	.word	0x08015b75
 8015a7c:	08015b75 	.word	0x08015b75
 8015a80:	08015b75 	.word	0x08015b75
 8015a84:	08015b75 	.word	0x08015b75
 8015a88:	08015b75 	.word	0x08015b75
 8015a8c:	08015b75 	.word	0x08015b75
 8015a90:	08015b75 	.word	0x08015b75
 8015a94:	08015b75 	.word	0x08015b75
 8015a98:	08015b75 	.word	0x08015b75
 8015a9c:	08015b75 	.word	0x08015b75
 8015aa0:	08015b75 	.word	0x08015b75
 8015aa4:	08015b75 	.word	0x08015b75
 8015aa8:	08015b75 	.word	0x08015b75
 8015aac:	08015b75 	.word	0x08015b75
 8015ab0:	08015b75 	.word	0x08015b75
 8015ab4:	08015b75 	.word	0x08015b75
 8015ab8:	08015b75 	.word	0x08015b75
 8015abc:	08015b75 	.word	0x08015b75
 8015ac0:	08015b75 	.word	0x08015b75
 8015ac4:	08015b75 	.word	0x08015b75
 8015ac8:	08015b75 	.word	0x08015b75
 8015acc:	08015b75 	.word	0x08015b75
 8015ad0:	08015b75 	.word	0x08015b75
 8015ad4:	08015b75 	.word	0x08015b75
 8015ad8:	08015b75 	.word	0x08015b75
 8015adc:	08015b75 	.word	0x08015b75
 8015ae0:	08015b75 	.word	0x08015b75
 8015ae4:	08015af5 	.word	0x08015af5
 8015ae8:	08015b2f 	.word	0x08015b2f
 8015aec:	08015b75 	.word	0x08015b75
 8015af0:	08015b75 	.word	0x08015b75
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	781a      	ldrb	r2, [r3, #0]
 8015af8:	4b22      	ldr	r3, [pc, #136]	; (8015b84 <CDC_Control_FS+0x140>)
 8015afa:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	785a      	ldrb	r2, [r3, #1]
 8015b00:	4b20      	ldr	r3, [pc, #128]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b02:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	789a      	ldrb	r2, [r3, #2]
 8015b08:	4b1e      	ldr	r3, [pc, #120]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b0a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	78da      	ldrb	r2, [r3, #3]
 8015b10:	4b1c      	ldr	r3, [pc, #112]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b12:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	791a      	ldrb	r2, [r3, #4]
 8015b18:	4b1a      	ldr	r3, [pc, #104]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b1a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	795a      	ldrb	r2, [r3, #5]
 8015b20:	4b18      	ldr	r3, [pc, #96]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b22:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	799a      	ldrb	r2, [r3, #6]
 8015b28:	4b16      	ldr	r3, [pc, #88]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b2a:	719a      	strb	r2, [r3, #6]
    	break;
 8015b2c:	e023      	b.n	8015b76 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 8015b2e:	4b15      	ldr	r3, [pc, #84]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b30:	781a      	ldrb	r2, [r3, #0]
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	4a12      	ldr	r2, [pc, #72]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b3c:	7852      	ldrb	r2, [r2, #1]
 8015b3e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	3302      	adds	r3, #2
 8015b44:	4a0f      	ldr	r2, [pc, #60]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b46:	7892      	ldrb	r2, [r2, #2]
 8015b48:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	3303      	adds	r3, #3
 8015b4e:	4a0d      	ldr	r2, [pc, #52]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b50:	78d2      	ldrb	r2, [r2, #3]
 8015b52:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015b54:	683b      	ldr	r3, [r7, #0]
 8015b56:	3304      	adds	r3, #4
 8015b58:	4a0a      	ldr	r2, [pc, #40]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b5a:	7912      	ldrb	r2, [r2, #4]
 8015b5c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	3305      	adds	r3, #5
 8015b62:	4a08      	ldr	r2, [pc, #32]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b64:	7952      	ldrb	r2, [r2, #5]
 8015b66:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	3306      	adds	r3, #6
 8015b6c:	4a05      	ldr	r2, [pc, #20]	; (8015b84 <CDC_Control_FS+0x140>)
 8015b6e:	7992      	ldrb	r2, [r2, #6]
 8015b70:	701a      	strb	r2, [r3, #0]
    break;
 8015b72:	e000      	b.n	8015b76 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015b74:	bf00      	nop
  }

  return (USBD_OK);
 8015b76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	370c      	adds	r7, #12
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b82:	4770      	bx	lr
 8015b84:	20011564 	.word	0x20011564

08015b88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b082      	sub	sp, #8
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015b92:	683b      	ldr	r3, [r7, #0]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	b29b      	uxth	r3, r3
 8015b98:	461a      	mov	r2, r3
 8015b9a:	6879      	ldr	r1, [r7, #4]
 8015b9c:	4807      	ldr	r0, [pc, #28]	; (8015bbc <CDC_Receive_FS+0x34>)
 8015b9e:	f7f0 f89b 	bl	8005cd8 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015ba2:	6879      	ldr	r1, [r7, #4]
 8015ba4:	4806      	ldr	r0, [pc, #24]	; (8015bc0 <CDC_Receive_FS+0x38>)
 8015ba6:	f7fb fee9 	bl	801197c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015baa:	4805      	ldr	r0, [pc, #20]	; (8015bc0 <CDC_Receive_FS+0x38>)
 8015bac:	f7fb ff2a 	bl	8011a04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015bb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3708      	adds	r7, #8
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd80      	pop	{r7, pc}
 8015bba:	bf00      	nop
 8015bbc:	20000068 	.word	0x20000068
 8015bc0:	20010e94 	.word	0x20010e94

08015bc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	460b      	mov	r3, r1
 8015bce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015bd4:	4b0d      	ldr	r3, [pc, #52]	; (8015c0c <CDC_Transmit_FS+0x48>)
 8015bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015bda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d001      	beq.n	8015bea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015be6:	2301      	movs	r3, #1
 8015be8:	e00b      	b.n	8015c02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015bea:	887b      	ldrh	r3, [r7, #2]
 8015bec:	461a      	mov	r2, r3
 8015bee:	6879      	ldr	r1, [r7, #4]
 8015bf0:	4806      	ldr	r0, [pc, #24]	; (8015c0c <CDC_Transmit_FS+0x48>)
 8015bf2:	f7fb feaa 	bl	801194a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015bf6:	4805      	ldr	r0, [pc, #20]	; (8015c0c <CDC_Transmit_FS+0x48>)
 8015bf8:	f7fb fed4 	bl	80119a4 <USBD_CDC_TransmitPacket>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c02:	4618      	mov	r0, r3
 8015c04:	3710      	adds	r7, #16
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	bf00      	nop
 8015c0c:	20010e94 	.word	0x20010e94

08015c10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b087      	sub	sp, #28
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	371c      	adds	r7, #28
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c30:	4770      	bx	lr
	...

08015c34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b083      	sub	sp, #12
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	6039      	str	r1, [r7, #0]
 8015c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	2212      	movs	r2, #18
 8015c44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015c46:	4b03      	ldr	r3, [pc, #12]	; (8015c54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	370c      	adds	r7, #12
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr
 8015c54:	200041dc 	.word	0x200041dc

08015c58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c58:	b480      	push	{r7}
 8015c5a:	b083      	sub	sp, #12
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	4603      	mov	r3, r0
 8015c60:	6039      	str	r1, [r7, #0]
 8015c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	2204      	movs	r2, #4
 8015c68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015c6a:	4b03      	ldr	r3, [pc, #12]	; (8015c78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	370c      	adds	r7, #12
 8015c70:	46bd      	mov	sp, r7
 8015c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c76:	4770      	bx	lr
 8015c78:	200041f0 	.word	0x200041f0

08015c7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b082      	sub	sp, #8
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	4603      	mov	r3, r0
 8015c84:	6039      	str	r1, [r7, #0]
 8015c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015c88:	79fb      	ldrb	r3, [r7, #7]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d105      	bne.n	8015c9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015c8e:	683a      	ldr	r2, [r7, #0]
 8015c90:	4907      	ldr	r1, [pc, #28]	; (8015cb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8015c92:	4808      	ldr	r0, [pc, #32]	; (8015cb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8015c94:	f7fc ff14 	bl	8012ac0 <USBD_GetString>
 8015c98:	e004      	b.n	8015ca4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015c9a:	683a      	ldr	r2, [r7, #0]
 8015c9c:	4904      	ldr	r1, [pc, #16]	; (8015cb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8015c9e:	4805      	ldr	r0, [pc, #20]	; (8015cb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8015ca0:	f7fc ff0e 	bl	8012ac0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015ca4:	4b02      	ldr	r3, [pc, #8]	; (8015cb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3708      	adds	r7, #8
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	2001156c 	.word	0x2001156c
 8015cb4:	0801c9f4 	.word	0x0801c9f4

08015cb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	6039      	str	r1, [r7, #0]
 8015cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015cc4:	683a      	ldr	r2, [r7, #0]
 8015cc6:	4904      	ldr	r1, [pc, #16]	; (8015cd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015cc8:	4804      	ldr	r0, [pc, #16]	; (8015cdc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015cca:	f7fc fef9 	bl	8012ac0 <USBD_GetString>
  return USBD_StrDesc;
 8015cce:	4b02      	ldr	r3, [pc, #8]	; (8015cd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	3708      	adds	r7, #8
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}
 8015cd8:	2001156c 	.word	0x2001156c
 8015cdc:	0801ca0c 	.word	0x0801ca0c

08015ce0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	6039      	str	r1, [r7, #0]
 8015cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	221a      	movs	r2, #26
 8015cf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015cf2:	f000 f843 	bl	8015d7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015cf6:	4b02      	ldr	r3, [pc, #8]	; (8015d00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3708      	adds	r7, #8
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	200041f4 	.word	0x200041f4

08015d04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	6039      	str	r1, [r7, #0]
 8015d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015d10:	79fb      	ldrb	r3, [r7, #7]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d105      	bne.n	8015d22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015d16:	683a      	ldr	r2, [r7, #0]
 8015d18:	4907      	ldr	r1, [pc, #28]	; (8015d38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015d1a:	4808      	ldr	r0, [pc, #32]	; (8015d3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015d1c:	f7fc fed0 	bl	8012ac0 <USBD_GetString>
 8015d20:	e004      	b.n	8015d2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015d22:	683a      	ldr	r2, [r7, #0]
 8015d24:	4904      	ldr	r1, [pc, #16]	; (8015d38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015d26:	4805      	ldr	r0, [pc, #20]	; (8015d3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015d28:	f7fc feca 	bl	8012ac0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d2c:	4b02      	ldr	r3, [pc, #8]	; (8015d38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3708      	adds	r7, #8
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	2001156c 	.word	0x2001156c
 8015d3c:	0801ca20 	.word	0x0801ca20

08015d40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b082      	sub	sp, #8
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	4603      	mov	r3, r0
 8015d48:	6039      	str	r1, [r7, #0]
 8015d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015d4c:	79fb      	ldrb	r3, [r7, #7]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d105      	bne.n	8015d5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015d52:	683a      	ldr	r2, [r7, #0]
 8015d54:	4907      	ldr	r1, [pc, #28]	; (8015d74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015d56:	4808      	ldr	r0, [pc, #32]	; (8015d78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015d58:	f7fc feb2 	bl	8012ac0 <USBD_GetString>
 8015d5c:	e004      	b.n	8015d68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015d5e:	683a      	ldr	r2, [r7, #0]
 8015d60:	4904      	ldr	r1, [pc, #16]	; (8015d74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015d62:	4805      	ldr	r0, [pc, #20]	; (8015d78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015d64:	f7fc feac 	bl	8012ac0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d68:	4b02      	ldr	r3, [pc, #8]	; (8015d74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3708      	adds	r7, #8
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	2001156c 	.word	0x2001156c
 8015d78:	0801ca2c 	.word	0x0801ca2c

08015d7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b084      	sub	sp, #16
 8015d80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015d82:	4b0f      	ldr	r3, [pc, #60]	; (8015dc0 <Get_SerialNum+0x44>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015d88:	4b0e      	ldr	r3, [pc, #56]	; (8015dc4 <Get_SerialNum+0x48>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015d8e:	4b0e      	ldr	r3, [pc, #56]	; (8015dc8 <Get_SerialNum+0x4c>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015d94:	68fa      	ldr	r2, [r7, #12]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	4413      	add	r3, r2
 8015d9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d009      	beq.n	8015db6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015da2:	2208      	movs	r2, #8
 8015da4:	4909      	ldr	r1, [pc, #36]	; (8015dcc <Get_SerialNum+0x50>)
 8015da6:	68f8      	ldr	r0, [r7, #12]
 8015da8:	f000 f814 	bl	8015dd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015dac:	2204      	movs	r2, #4
 8015dae:	4908      	ldr	r1, [pc, #32]	; (8015dd0 <Get_SerialNum+0x54>)
 8015db0:	68b8      	ldr	r0, [r7, #8]
 8015db2:	f000 f80f 	bl	8015dd4 <IntToUnicode>
  }
}
 8015db6:	bf00      	nop
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	1fff7a10 	.word	0x1fff7a10
 8015dc4:	1fff7a14 	.word	0x1fff7a14
 8015dc8:	1fff7a18 	.word	0x1fff7a18
 8015dcc:	200041f6 	.word	0x200041f6
 8015dd0:	20004206 	.word	0x20004206

08015dd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b087      	sub	sp, #28
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	60f8      	str	r0, [r7, #12]
 8015ddc:	60b9      	str	r1, [r7, #8]
 8015dde:	4613      	mov	r3, r2
 8015de0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015de2:	2300      	movs	r3, #0
 8015de4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015de6:	2300      	movs	r3, #0
 8015de8:	75fb      	strb	r3, [r7, #23]
 8015dea:	e027      	b.n	8015e3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	0f1b      	lsrs	r3, r3, #28
 8015df0:	2b09      	cmp	r3, #9
 8015df2:	d80b      	bhi.n	8015e0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	0f1b      	lsrs	r3, r3, #28
 8015df8:	b2da      	uxtb	r2, r3
 8015dfa:	7dfb      	ldrb	r3, [r7, #23]
 8015dfc:	005b      	lsls	r3, r3, #1
 8015dfe:	4619      	mov	r1, r3
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	440b      	add	r3, r1
 8015e04:	3230      	adds	r2, #48	; 0x30
 8015e06:	b2d2      	uxtb	r2, r2
 8015e08:	701a      	strb	r2, [r3, #0]
 8015e0a:	e00a      	b.n	8015e22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	0f1b      	lsrs	r3, r3, #28
 8015e10:	b2da      	uxtb	r2, r3
 8015e12:	7dfb      	ldrb	r3, [r7, #23]
 8015e14:	005b      	lsls	r3, r3, #1
 8015e16:	4619      	mov	r1, r3
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	440b      	add	r3, r1
 8015e1c:	3237      	adds	r2, #55	; 0x37
 8015e1e:	b2d2      	uxtb	r2, r2
 8015e20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	011b      	lsls	r3, r3, #4
 8015e26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015e28:	7dfb      	ldrb	r3, [r7, #23]
 8015e2a:	005b      	lsls	r3, r3, #1
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	68ba      	ldr	r2, [r7, #8]
 8015e30:	4413      	add	r3, r2
 8015e32:	2200      	movs	r2, #0
 8015e34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015e36:	7dfb      	ldrb	r3, [r7, #23]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	75fb      	strb	r3, [r7, #23]
 8015e3c:	7dfa      	ldrb	r2, [r7, #23]
 8015e3e:	79fb      	ldrb	r3, [r7, #7]
 8015e40:	429a      	cmp	r2, r3
 8015e42:	d3d3      	bcc.n	8015dec <IntToUnicode+0x18>
  }
}
 8015e44:	bf00      	nop
 8015e46:	bf00      	nop
 8015e48:	371c      	adds	r7, #28
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e50:	4770      	bx	lr
	...

08015e54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b08a      	sub	sp, #40	; 0x28
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e5c:	f107 0314 	add.w	r3, r7, #20
 8015e60:	2200      	movs	r2, #0
 8015e62:	601a      	str	r2, [r3, #0]
 8015e64:	605a      	str	r2, [r3, #4]
 8015e66:	609a      	str	r2, [r3, #8]
 8015e68:	60da      	str	r2, [r3, #12]
 8015e6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015e74:	d13a      	bne.n	8015eec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e76:	2300      	movs	r3, #0
 8015e78:	613b      	str	r3, [r7, #16]
 8015e7a:	4b1e      	ldr	r3, [pc, #120]	; (8015ef4 <HAL_PCD_MspInit+0xa0>)
 8015e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e7e:	4a1d      	ldr	r2, [pc, #116]	; (8015ef4 <HAL_PCD_MspInit+0xa0>)
 8015e80:	f043 0301 	orr.w	r3, r3, #1
 8015e84:	6313      	str	r3, [r2, #48]	; 0x30
 8015e86:	4b1b      	ldr	r3, [pc, #108]	; (8015ef4 <HAL_PCD_MspInit+0xa0>)
 8015e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e8a:	f003 0301 	and.w	r3, r3, #1
 8015e8e:	613b      	str	r3, [r7, #16]
 8015e90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015e92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e98:	2302      	movs	r3, #2
 8015e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ea0:	2303      	movs	r3, #3
 8015ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015ea4:	230a      	movs	r3, #10
 8015ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ea8:	f107 0314 	add.w	r3, r7, #20
 8015eac:	4619      	mov	r1, r3
 8015eae:	4812      	ldr	r0, [pc, #72]	; (8015ef8 <HAL_PCD_MspInit+0xa4>)
 8015eb0:	f7f6 fb4a 	bl	800c548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015eb4:	4b0f      	ldr	r3, [pc, #60]	; (8015ef4 <HAL_PCD_MspInit+0xa0>)
 8015eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eb8:	4a0e      	ldr	r2, [pc, #56]	; (8015ef4 <HAL_PCD_MspInit+0xa0>)
 8015eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ebe:	6353      	str	r3, [r2, #52]	; 0x34
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	60fb      	str	r3, [r7, #12]
 8015ec4:	4b0b      	ldr	r3, [pc, #44]	; (8015ef4 <HAL_PCD_MspInit+0xa0>)
 8015ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ec8:	4a0a      	ldr	r2, [pc, #40]	; (8015ef4 <HAL_PCD_MspInit+0xa0>)
 8015eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015ece:	6453      	str	r3, [r2, #68]	; 0x44
 8015ed0:	4b08      	ldr	r3, [pc, #32]	; (8015ef4 <HAL_PCD_MspInit+0xa0>)
 8015ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015ed8:	60fb      	str	r3, [r7, #12]
 8015eda:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015edc:	2200      	movs	r2, #0
 8015ede:	2105      	movs	r1, #5
 8015ee0:	2043      	movs	r0, #67	; 0x43
 8015ee2:	f7f5 ff67 	bl	800bdb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015ee6:	2043      	movs	r0, #67	; 0x43
 8015ee8:	f7f5 ff80 	bl	800bdec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015eec:	bf00      	nop
 8015eee:	3728      	adds	r7, #40	; 0x28
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	40023800 	.word	0x40023800
 8015ef8:	40020000 	.word	0x40020000

08015efc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b082      	sub	sp, #8
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015f10:	4619      	mov	r1, r3
 8015f12:	4610      	mov	r0, r2
 8015f14:	f7fb fe42 	bl	8011b9c <USBD_LL_SetupStage>
}
 8015f18:	bf00      	nop
 8015f1a:	3708      	adds	r7, #8
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}

08015f20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b082      	sub	sp, #8
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
 8015f28:	460b      	mov	r3, r1
 8015f2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015f32:	78fa      	ldrb	r2, [r7, #3]
 8015f34:	6879      	ldr	r1, [r7, #4]
 8015f36:	4613      	mov	r3, r2
 8015f38:	00db      	lsls	r3, r3, #3
 8015f3a:	1a9b      	subs	r3, r3, r2
 8015f3c:	009b      	lsls	r3, r3, #2
 8015f3e:	440b      	add	r3, r1
 8015f40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015f44:	681a      	ldr	r2, [r3, #0]
 8015f46:	78fb      	ldrb	r3, [r7, #3]
 8015f48:	4619      	mov	r1, r3
 8015f4a:	f7fb fe7c 	bl	8011c46 <USBD_LL_DataOutStage>
}
 8015f4e:	bf00      	nop
 8015f50:	3708      	adds	r7, #8
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}

08015f56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f56:	b580      	push	{r7, lr}
 8015f58:	b082      	sub	sp, #8
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	6078      	str	r0, [r7, #4]
 8015f5e:	460b      	mov	r3, r1
 8015f60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015f68:	78fa      	ldrb	r2, [r7, #3]
 8015f6a:	6879      	ldr	r1, [r7, #4]
 8015f6c:	4613      	mov	r3, r2
 8015f6e:	00db      	lsls	r3, r3, #3
 8015f70:	1a9b      	subs	r3, r3, r2
 8015f72:	009b      	lsls	r3, r3, #2
 8015f74:	440b      	add	r3, r1
 8015f76:	3348      	adds	r3, #72	; 0x48
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	78fb      	ldrb	r3, [r7, #3]
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	f7fb fec5 	bl	8011d0c <USBD_LL_DataInStage>
}
 8015f82:	bf00      	nop
 8015f84:	3708      	adds	r7, #8
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}

08015f8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f8a:	b580      	push	{r7, lr}
 8015f8c:	b082      	sub	sp, #8
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7fb ffc9 	bl	8011f30 <USBD_LL_SOF>
}
 8015f9e:	bf00      	nop
 8015fa0:	3708      	adds	r7, #8
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}

08015fa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fa6:	b580      	push	{r7, lr}
 8015fa8:	b084      	sub	sp, #16
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015fae:	2301      	movs	r3, #1
 8015fb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	68db      	ldr	r3, [r3, #12]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d102      	bne.n	8015fc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	73fb      	strb	r3, [r7, #15]
 8015fbe:	e008      	b.n	8015fd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	68db      	ldr	r3, [r3, #12]
 8015fc4:	2b02      	cmp	r3, #2
 8015fc6:	d102      	bne.n	8015fce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015fc8:	2301      	movs	r3, #1
 8015fca:	73fb      	strb	r3, [r7, #15]
 8015fcc:	e001      	b.n	8015fd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015fce:	f7ef fdf1 	bl	8005bb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fd8:	7bfa      	ldrb	r2, [r7, #15]
 8015fda:	4611      	mov	r1, r2
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7fb ff6c 	bl	8011eba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7fb ff25 	bl	8011e38 <USBD_LL_Reset>
}
 8015fee:	bf00      	nop
 8015ff0:	3710      	adds	r7, #16
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
	...

08015ff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016006:	4618      	mov	r0, r3
 8016008:	f7fb ff67 	bl	8011eda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	687a      	ldr	r2, [r7, #4]
 8016018:	6812      	ldr	r2, [r2, #0]
 801601a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801601e:	f043 0301 	orr.w	r3, r3, #1
 8016022:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6a1b      	ldr	r3, [r3, #32]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d005      	beq.n	8016038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801602c:	4b04      	ldr	r3, [pc, #16]	; (8016040 <HAL_PCD_SuspendCallback+0x48>)
 801602e:	691b      	ldr	r3, [r3, #16]
 8016030:	4a03      	ldr	r2, [pc, #12]	; (8016040 <HAL_PCD_SuspendCallback+0x48>)
 8016032:	f043 0306 	orr.w	r3, r3, #6
 8016036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016038:	bf00      	nop
 801603a:	3708      	adds	r7, #8
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}
 8016040:	e000ed00 	.word	0xe000ed00

08016044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b082      	sub	sp, #8
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016052:	4618      	mov	r0, r3
 8016054:	f7fb ff56 	bl	8011f04 <USBD_LL_Resume>
}
 8016058:	bf00      	nop
 801605a:	3708      	adds	r7, #8
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	460b      	mov	r3, r1
 801606a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016072:	78fa      	ldrb	r2, [r7, #3]
 8016074:	4611      	mov	r1, r2
 8016076:	4618      	mov	r0, r3
 8016078:	f7fb ff81 	bl	8011f7e <USBD_LL_IsoOUTIncomplete>
}
 801607c:	bf00      	nop
 801607e:	3708      	adds	r7, #8
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	460b      	mov	r3, r1
 801608e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016096:	78fa      	ldrb	r2, [r7, #3]
 8016098:	4611      	mov	r1, r2
 801609a:	4618      	mov	r0, r3
 801609c:	f7fb ff62 	bl	8011f64 <USBD_LL_IsoINIncomplete>
}
 80160a0:	bf00      	nop
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7fb ff6e 	bl	8011f98 <USBD_LL_DevConnected>
}
 80160bc:	bf00      	nop
 80160be:	3708      	adds	r7, #8
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7fb ff6b 	bl	8011fae <USBD_LL_DevDisconnected>
}
 80160d8:	bf00      	nop
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d13c      	bne.n	801616a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80160f0:	4a20      	ldr	r2, [pc, #128]	; (8016174 <USBD_LL_Init+0x94>)
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	4a1e      	ldr	r2, [pc, #120]	; (8016174 <USBD_LL_Init+0x94>)
 80160fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016100:	4b1c      	ldr	r3, [pc, #112]	; (8016174 <USBD_LL_Init+0x94>)
 8016102:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016108:	4b1a      	ldr	r3, [pc, #104]	; (8016174 <USBD_LL_Init+0x94>)
 801610a:	2204      	movs	r2, #4
 801610c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801610e:	4b19      	ldr	r3, [pc, #100]	; (8016174 <USBD_LL_Init+0x94>)
 8016110:	2202      	movs	r2, #2
 8016112:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016114:	4b17      	ldr	r3, [pc, #92]	; (8016174 <USBD_LL_Init+0x94>)
 8016116:	2200      	movs	r2, #0
 8016118:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801611a:	4b16      	ldr	r3, [pc, #88]	; (8016174 <USBD_LL_Init+0x94>)
 801611c:	2202      	movs	r2, #2
 801611e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016120:	4b14      	ldr	r3, [pc, #80]	; (8016174 <USBD_LL_Init+0x94>)
 8016122:	2200      	movs	r2, #0
 8016124:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016126:	4b13      	ldr	r3, [pc, #76]	; (8016174 <USBD_LL_Init+0x94>)
 8016128:	2200      	movs	r2, #0
 801612a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801612c:	4b11      	ldr	r3, [pc, #68]	; (8016174 <USBD_LL_Init+0x94>)
 801612e:	2200      	movs	r2, #0
 8016130:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016132:	4b10      	ldr	r3, [pc, #64]	; (8016174 <USBD_LL_Init+0x94>)
 8016134:	2200      	movs	r2, #0
 8016136:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016138:	4b0e      	ldr	r3, [pc, #56]	; (8016174 <USBD_LL_Init+0x94>)
 801613a:	2200      	movs	r2, #0
 801613c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801613e:	480d      	ldr	r0, [pc, #52]	; (8016174 <USBD_LL_Init+0x94>)
 8016140:	f7f6 fc0e 	bl	800c960 <HAL_PCD_Init>
 8016144:	4603      	mov	r3, r0
 8016146:	2b00      	cmp	r3, #0
 8016148:	d001      	beq.n	801614e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801614a:	f7ef fd33 	bl	8005bb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801614e:	2180      	movs	r1, #128	; 0x80
 8016150:	4808      	ldr	r0, [pc, #32]	; (8016174 <USBD_LL_Init+0x94>)
 8016152:	f7f7 fd6c 	bl	800dc2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016156:	2240      	movs	r2, #64	; 0x40
 8016158:	2100      	movs	r1, #0
 801615a:	4806      	ldr	r0, [pc, #24]	; (8016174 <USBD_LL_Init+0x94>)
 801615c:	f7f7 fd20 	bl	800dba0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016160:	2280      	movs	r2, #128	; 0x80
 8016162:	2101      	movs	r1, #1
 8016164:	4803      	ldr	r0, [pc, #12]	; (8016174 <USBD_LL_Init+0x94>)
 8016166:	f7f7 fd1b 	bl	800dba0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801616a:	2300      	movs	r3, #0
}
 801616c:	4618      	mov	r0, r3
 801616e:	3708      	adds	r7, #8
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	2001176c 	.word	0x2001176c

08016178 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b084      	sub	sp, #16
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016180:	2300      	movs	r3, #0
 8016182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016184:	2300      	movs	r3, #0
 8016186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801618e:	4618      	mov	r0, r3
 8016190:	f7f6 fd03 	bl	800cb9a <HAL_PCD_Start>
 8016194:	4603      	mov	r3, r0
 8016196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016198:	7bfb      	ldrb	r3, [r7, #15]
 801619a:	4618      	mov	r0, r3
 801619c:	f000 f92a 	bl	80163f4 <USBD_Get_USB_Status>
 80161a0:	4603      	mov	r3, r0
 80161a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}

080161ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80161ae:	b580      	push	{r7, lr}
 80161b0:	b084      	sub	sp, #16
 80161b2:	af00      	add	r7, sp, #0
 80161b4:	6078      	str	r0, [r7, #4]
 80161b6:	4608      	mov	r0, r1
 80161b8:	4611      	mov	r1, r2
 80161ba:	461a      	mov	r2, r3
 80161bc:	4603      	mov	r3, r0
 80161be:	70fb      	strb	r3, [r7, #3]
 80161c0:	460b      	mov	r3, r1
 80161c2:	70bb      	strb	r3, [r7, #2]
 80161c4:	4613      	mov	r3, r2
 80161c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161c8:	2300      	movs	r3, #0
 80161ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161cc:	2300      	movs	r3, #0
 80161ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80161d6:	78bb      	ldrb	r3, [r7, #2]
 80161d8:	883a      	ldrh	r2, [r7, #0]
 80161da:	78f9      	ldrb	r1, [r7, #3]
 80161dc:	f7f7 f8e7 	bl	800d3ae <HAL_PCD_EP_Open>
 80161e0:	4603      	mov	r3, r0
 80161e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161e4:	7bfb      	ldrb	r3, [r7, #15]
 80161e6:	4618      	mov	r0, r3
 80161e8:	f000 f904 	bl	80163f4 <USBD_Get_USB_Status>
 80161ec:	4603      	mov	r3, r0
 80161ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	3710      	adds	r7, #16
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}

080161fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80161fa:	b580      	push	{r7, lr}
 80161fc:	b084      	sub	sp, #16
 80161fe:	af00      	add	r7, sp, #0
 8016200:	6078      	str	r0, [r7, #4]
 8016202:	460b      	mov	r3, r1
 8016204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016206:	2300      	movs	r3, #0
 8016208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801620a:	2300      	movs	r3, #0
 801620c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016214:	78fa      	ldrb	r2, [r7, #3]
 8016216:	4611      	mov	r1, r2
 8016218:	4618      	mov	r0, r3
 801621a:	f7f7 f930 	bl	800d47e <HAL_PCD_EP_Close>
 801621e:	4603      	mov	r3, r0
 8016220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016222:	7bfb      	ldrb	r3, [r7, #15]
 8016224:	4618      	mov	r0, r3
 8016226:	f000 f8e5 	bl	80163f4 <USBD_Get_USB_Status>
 801622a:	4603      	mov	r3, r0
 801622c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801622e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016230:	4618      	mov	r0, r3
 8016232:	3710      	adds	r7, #16
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b084      	sub	sp, #16
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	460b      	mov	r3, r1
 8016242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016244:	2300      	movs	r3, #0
 8016246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016248:	2300      	movs	r3, #0
 801624a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016252:	78fa      	ldrb	r2, [r7, #3]
 8016254:	4611      	mov	r1, r2
 8016256:	4618      	mov	r0, r3
 8016258:	f7f7 fa08 	bl	800d66c <HAL_PCD_EP_SetStall>
 801625c:	4603      	mov	r3, r0
 801625e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016260:	7bfb      	ldrb	r3, [r7, #15]
 8016262:	4618      	mov	r0, r3
 8016264:	f000 f8c6 	bl	80163f4 <USBD_Get_USB_Status>
 8016268:	4603      	mov	r3, r0
 801626a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801626c:	7bbb      	ldrb	r3, [r7, #14]
}
 801626e:	4618      	mov	r0, r3
 8016270:	3710      	adds	r7, #16
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}

08016276 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016276:	b580      	push	{r7, lr}
 8016278:	b084      	sub	sp, #16
 801627a:	af00      	add	r7, sp, #0
 801627c:	6078      	str	r0, [r7, #4]
 801627e:	460b      	mov	r3, r1
 8016280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016282:	2300      	movs	r3, #0
 8016284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016286:	2300      	movs	r3, #0
 8016288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016290:	78fa      	ldrb	r2, [r7, #3]
 8016292:	4611      	mov	r1, r2
 8016294:	4618      	mov	r0, r3
 8016296:	f7f7 fa4d 	bl	800d734 <HAL_PCD_EP_ClrStall>
 801629a:	4603      	mov	r3, r0
 801629c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801629e:	7bfb      	ldrb	r3, [r7, #15]
 80162a0:	4618      	mov	r0, r3
 80162a2:	f000 f8a7 	bl	80163f4 <USBD_Get_USB_Status>
 80162a6:	4603      	mov	r3, r0
 80162a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80162aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3710      	adds	r7, #16
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}

080162b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80162b4:	b480      	push	{r7}
 80162b6:	b085      	sub	sp, #20
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
 80162bc:	460b      	mov	r3, r1
 80162be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80162c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	da0b      	bge.n	80162e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80162d0:	78fb      	ldrb	r3, [r7, #3]
 80162d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162d6:	68f9      	ldr	r1, [r7, #12]
 80162d8:	4613      	mov	r3, r2
 80162da:	00db      	lsls	r3, r3, #3
 80162dc:	1a9b      	subs	r3, r3, r2
 80162de:	009b      	lsls	r3, r3, #2
 80162e0:	440b      	add	r3, r1
 80162e2:	333e      	adds	r3, #62	; 0x3e
 80162e4:	781b      	ldrb	r3, [r3, #0]
 80162e6:	e00b      	b.n	8016300 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80162e8:	78fb      	ldrb	r3, [r7, #3]
 80162ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162ee:	68f9      	ldr	r1, [r7, #12]
 80162f0:	4613      	mov	r3, r2
 80162f2:	00db      	lsls	r3, r3, #3
 80162f4:	1a9b      	subs	r3, r3, r2
 80162f6:	009b      	lsls	r3, r3, #2
 80162f8:	440b      	add	r3, r1
 80162fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80162fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016300:	4618      	mov	r0, r3
 8016302:	3714      	adds	r7, #20
 8016304:	46bd      	mov	sp, r7
 8016306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630a:	4770      	bx	lr

0801630c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b084      	sub	sp, #16
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	460b      	mov	r3, r1
 8016316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016318:	2300      	movs	r3, #0
 801631a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801631c:	2300      	movs	r3, #0
 801631e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016326:	78fa      	ldrb	r2, [r7, #3]
 8016328:	4611      	mov	r1, r2
 801632a:	4618      	mov	r0, r3
 801632c:	f7f7 f81a 	bl	800d364 <HAL_PCD_SetAddress>
 8016330:	4603      	mov	r3, r0
 8016332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016334:	7bfb      	ldrb	r3, [r7, #15]
 8016336:	4618      	mov	r0, r3
 8016338:	f000 f85c 	bl	80163f4 <USBD_Get_USB_Status>
 801633c:	4603      	mov	r3, r0
 801633e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016340:	7bbb      	ldrb	r3, [r7, #14]
}
 8016342:	4618      	mov	r0, r3
 8016344:	3710      	adds	r7, #16
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}

0801634a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801634a:	b580      	push	{r7, lr}
 801634c:	b086      	sub	sp, #24
 801634e:	af00      	add	r7, sp, #0
 8016350:	60f8      	str	r0, [r7, #12]
 8016352:	607a      	str	r2, [r7, #4]
 8016354:	603b      	str	r3, [r7, #0]
 8016356:	460b      	mov	r3, r1
 8016358:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801635a:	2300      	movs	r3, #0
 801635c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801635e:	2300      	movs	r3, #0
 8016360:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016368:	7af9      	ldrb	r1, [r7, #11]
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	687a      	ldr	r2, [r7, #4]
 801636e:	f7f7 f933 	bl	800d5d8 <HAL_PCD_EP_Transmit>
 8016372:	4603      	mov	r3, r0
 8016374:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016376:	7dfb      	ldrb	r3, [r7, #23]
 8016378:	4618      	mov	r0, r3
 801637a:	f000 f83b 	bl	80163f4 <USBD_Get_USB_Status>
 801637e:	4603      	mov	r3, r0
 8016380:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016382:	7dbb      	ldrb	r3, [r7, #22]
}
 8016384:	4618      	mov	r0, r3
 8016386:	3718      	adds	r7, #24
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}

0801638c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b086      	sub	sp, #24
 8016390:	af00      	add	r7, sp, #0
 8016392:	60f8      	str	r0, [r7, #12]
 8016394:	607a      	str	r2, [r7, #4]
 8016396:	603b      	str	r3, [r7, #0]
 8016398:	460b      	mov	r3, r1
 801639a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801639c:	2300      	movs	r3, #0
 801639e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163a0:	2300      	movs	r3, #0
 80163a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80163aa:	7af9      	ldrb	r1, [r7, #11]
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	687a      	ldr	r2, [r7, #4]
 80163b0:	f7f7 f8af 	bl	800d512 <HAL_PCD_EP_Receive>
 80163b4:	4603      	mov	r3, r0
 80163b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80163b8:	7dfb      	ldrb	r3, [r7, #23]
 80163ba:	4618      	mov	r0, r3
 80163bc:	f000 f81a 	bl	80163f4 <USBD_Get_USB_Status>
 80163c0:	4603      	mov	r3, r0
 80163c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80163c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3718      	adds	r7, #24
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}

080163ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80163ce:	b580      	push	{r7, lr}
 80163d0:	b082      	sub	sp, #8
 80163d2:	af00      	add	r7, sp, #0
 80163d4:	6078      	str	r0, [r7, #4]
 80163d6:	460b      	mov	r3, r1
 80163d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80163e0:	78fa      	ldrb	r2, [r7, #3]
 80163e2:	4611      	mov	r1, r2
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7f7 f8df 	bl	800d5a8 <HAL_PCD_EP_GetRxCount>
 80163ea:	4603      	mov	r3, r0
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	3708      	adds	r7, #8
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}

080163f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b085      	sub	sp, #20
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	4603      	mov	r3, r0
 80163fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163fe:	2300      	movs	r3, #0
 8016400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016402:	79fb      	ldrb	r3, [r7, #7]
 8016404:	2b03      	cmp	r3, #3
 8016406:	d817      	bhi.n	8016438 <USBD_Get_USB_Status+0x44>
 8016408:	a201      	add	r2, pc, #4	; (adr r2, 8016410 <USBD_Get_USB_Status+0x1c>)
 801640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801640e:	bf00      	nop
 8016410:	08016421 	.word	0x08016421
 8016414:	08016427 	.word	0x08016427
 8016418:	0801642d 	.word	0x0801642d
 801641c:	08016433 	.word	0x08016433
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016420:	2300      	movs	r3, #0
 8016422:	73fb      	strb	r3, [r7, #15]
    break;
 8016424:	e00b      	b.n	801643e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016426:	2303      	movs	r3, #3
 8016428:	73fb      	strb	r3, [r7, #15]
    break;
 801642a:	e008      	b.n	801643e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801642c:	2301      	movs	r3, #1
 801642e:	73fb      	strb	r3, [r7, #15]
    break;
 8016430:	e005      	b.n	801643e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016432:	2303      	movs	r3, #3
 8016434:	73fb      	strb	r3, [r7, #15]
    break;
 8016436:	e002      	b.n	801643e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016438:	2303      	movs	r3, #3
 801643a:	73fb      	strb	r3, [r7, #15]
    break;
 801643c:	bf00      	nop
  }
  return usb_status;
 801643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016440:	4618      	mov	r0, r3
 8016442:	3714      	adds	r7, #20
 8016444:	46bd      	mov	sp, r7
 8016446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644a:	4770      	bx	lr

0801644c <__errno>:
 801644c:	4b01      	ldr	r3, [pc, #4]	; (8016454 <__errno+0x8>)
 801644e:	6818      	ldr	r0, [r3, #0]
 8016450:	4770      	bx	lr
 8016452:	bf00      	nop
 8016454:	20004210 	.word	0x20004210

08016458 <__libc_init_array>:
 8016458:	b570      	push	{r4, r5, r6, lr}
 801645a:	4d0d      	ldr	r5, [pc, #52]	; (8016490 <__libc_init_array+0x38>)
 801645c:	4c0d      	ldr	r4, [pc, #52]	; (8016494 <__libc_init_array+0x3c>)
 801645e:	1b64      	subs	r4, r4, r5
 8016460:	10a4      	asrs	r4, r4, #2
 8016462:	2600      	movs	r6, #0
 8016464:	42a6      	cmp	r6, r4
 8016466:	d109      	bne.n	801647c <__libc_init_array+0x24>
 8016468:	4d0b      	ldr	r5, [pc, #44]	; (8016498 <__libc_init_array+0x40>)
 801646a:	4c0c      	ldr	r4, [pc, #48]	; (801649c <__libc_init_array+0x44>)
 801646c:	f006 f972 	bl	801c754 <_init>
 8016470:	1b64      	subs	r4, r4, r5
 8016472:	10a4      	asrs	r4, r4, #2
 8016474:	2600      	movs	r6, #0
 8016476:	42a6      	cmp	r6, r4
 8016478:	d105      	bne.n	8016486 <__libc_init_array+0x2e>
 801647a:	bd70      	pop	{r4, r5, r6, pc}
 801647c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016480:	4798      	blx	r3
 8016482:	3601      	adds	r6, #1
 8016484:	e7ee      	b.n	8016464 <__libc_init_array+0xc>
 8016486:	f855 3b04 	ldr.w	r3, [r5], #4
 801648a:	4798      	blx	r3
 801648c:	3601      	adds	r6, #1
 801648e:	e7f2      	b.n	8016476 <__libc_init_array+0x1e>
 8016490:	0801d168 	.word	0x0801d168
 8016494:	0801d168 	.word	0x0801d168
 8016498:	0801d168 	.word	0x0801d168
 801649c:	0801d16c 	.word	0x0801d16c

080164a0 <malloc>:
 80164a0:	4b02      	ldr	r3, [pc, #8]	; (80164ac <malloc+0xc>)
 80164a2:	4601      	mov	r1, r0
 80164a4:	6818      	ldr	r0, [r3, #0]
 80164a6:	f000 b88b 	b.w	80165c0 <_malloc_r>
 80164aa:	bf00      	nop
 80164ac:	20004210 	.word	0x20004210

080164b0 <free>:
 80164b0:	4b02      	ldr	r3, [pc, #8]	; (80164bc <free+0xc>)
 80164b2:	4601      	mov	r1, r0
 80164b4:	6818      	ldr	r0, [r3, #0]
 80164b6:	f000 b833 	b.w	8016520 <_free_r>
 80164ba:	bf00      	nop
 80164bc:	20004210 	.word	0x20004210

080164c0 <memcpy>:
 80164c0:	440a      	add	r2, r1
 80164c2:	4291      	cmp	r1, r2
 80164c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80164c8:	d100      	bne.n	80164cc <memcpy+0xc>
 80164ca:	4770      	bx	lr
 80164cc:	b510      	push	{r4, lr}
 80164ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80164d6:	4291      	cmp	r1, r2
 80164d8:	d1f9      	bne.n	80164ce <memcpy+0xe>
 80164da:	bd10      	pop	{r4, pc}

080164dc <memmove>:
 80164dc:	4288      	cmp	r0, r1
 80164de:	b510      	push	{r4, lr}
 80164e0:	eb01 0402 	add.w	r4, r1, r2
 80164e4:	d902      	bls.n	80164ec <memmove+0x10>
 80164e6:	4284      	cmp	r4, r0
 80164e8:	4623      	mov	r3, r4
 80164ea:	d807      	bhi.n	80164fc <memmove+0x20>
 80164ec:	1e43      	subs	r3, r0, #1
 80164ee:	42a1      	cmp	r1, r4
 80164f0:	d008      	beq.n	8016504 <memmove+0x28>
 80164f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80164f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80164fa:	e7f8      	b.n	80164ee <memmove+0x12>
 80164fc:	4402      	add	r2, r0
 80164fe:	4601      	mov	r1, r0
 8016500:	428a      	cmp	r2, r1
 8016502:	d100      	bne.n	8016506 <memmove+0x2a>
 8016504:	bd10      	pop	{r4, pc}
 8016506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801650a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801650e:	e7f7      	b.n	8016500 <memmove+0x24>

08016510 <memset>:
 8016510:	4402      	add	r2, r0
 8016512:	4603      	mov	r3, r0
 8016514:	4293      	cmp	r3, r2
 8016516:	d100      	bne.n	801651a <memset+0xa>
 8016518:	4770      	bx	lr
 801651a:	f803 1b01 	strb.w	r1, [r3], #1
 801651e:	e7f9      	b.n	8016514 <memset+0x4>

08016520 <_free_r>:
 8016520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016522:	2900      	cmp	r1, #0
 8016524:	d048      	beq.n	80165b8 <_free_r+0x98>
 8016526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801652a:	9001      	str	r0, [sp, #4]
 801652c:	2b00      	cmp	r3, #0
 801652e:	f1a1 0404 	sub.w	r4, r1, #4
 8016532:	bfb8      	it	lt
 8016534:	18e4      	addlt	r4, r4, r3
 8016536:	f003 f835 	bl	80195a4 <__malloc_lock>
 801653a:	4a20      	ldr	r2, [pc, #128]	; (80165bc <_free_r+0x9c>)
 801653c:	9801      	ldr	r0, [sp, #4]
 801653e:	6813      	ldr	r3, [r2, #0]
 8016540:	4615      	mov	r5, r2
 8016542:	b933      	cbnz	r3, 8016552 <_free_r+0x32>
 8016544:	6063      	str	r3, [r4, #4]
 8016546:	6014      	str	r4, [r2, #0]
 8016548:	b003      	add	sp, #12
 801654a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801654e:	f003 b82f 	b.w	80195b0 <__malloc_unlock>
 8016552:	42a3      	cmp	r3, r4
 8016554:	d90b      	bls.n	801656e <_free_r+0x4e>
 8016556:	6821      	ldr	r1, [r4, #0]
 8016558:	1862      	adds	r2, r4, r1
 801655a:	4293      	cmp	r3, r2
 801655c:	bf04      	itt	eq
 801655e:	681a      	ldreq	r2, [r3, #0]
 8016560:	685b      	ldreq	r3, [r3, #4]
 8016562:	6063      	str	r3, [r4, #4]
 8016564:	bf04      	itt	eq
 8016566:	1852      	addeq	r2, r2, r1
 8016568:	6022      	streq	r2, [r4, #0]
 801656a:	602c      	str	r4, [r5, #0]
 801656c:	e7ec      	b.n	8016548 <_free_r+0x28>
 801656e:	461a      	mov	r2, r3
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	b10b      	cbz	r3, 8016578 <_free_r+0x58>
 8016574:	42a3      	cmp	r3, r4
 8016576:	d9fa      	bls.n	801656e <_free_r+0x4e>
 8016578:	6811      	ldr	r1, [r2, #0]
 801657a:	1855      	adds	r5, r2, r1
 801657c:	42a5      	cmp	r5, r4
 801657e:	d10b      	bne.n	8016598 <_free_r+0x78>
 8016580:	6824      	ldr	r4, [r4, #0]
 8016582:	4421      	add	r1, r4
 8016584:	1854      	adds	r4, r2, r1
 8016586:	42a3      	cmp	r3, r4
 8016588:	6011      	str	r1, [r2, #0]
 801658a:	d1dd      	bne.n	8016548 <_free_r+0x28>
 801658c:	681c      	ldr	r4, [r3, #0]
 801658e:	685b      	ldr	r3, [r3, #4]
 8016590:	6053      	str	r3, [r2, #4]
 8016592:	4421      	add	r1, r4
 8016594:	6011      	str	r1, [r2, #0]
 8016596:	e7d7      	b.n	8016548 <_free_r+0x28>
 8016598:	d902      	bls.n	80165a0 <_free_r+0x80>
 801659a:	230c      	movs	r3, #12
 801659c:	6003      	str	r3, [r0, #0]
 801659e:	e7d3      	b.n	8016548 <_free_r+0x28>
 80165a0:	6825      	ldr	r5, [r4, #0]
 80165a2:	1961      	adds	r1, r4, r5
 80165a4:	428b      	cmp	r3, r1
 80165a6:	bf04      	itt	eq
 80165a8:	6819      	ldreq	r1, [r3, #0]
 80165aa:	685b      	ldreq	r3, [r3, #4]
 80165ac:	6063      	str	r3, [r4, #4]
 80165ae:	bf04      	itt	eq
 80165b0:	1949      	addeq	r1, r1, r5
 80165b2:	6021      	streq	r1, [r4, #0]
 80165b4:	6054      	str	r4, [r2, #4]
 80165b6:	e7c7      	b.n	8016548 <_free_r+0x28>
 80165b8:	b003      	add	sp, #12
 80165ba:	bd30      	pop	{r4, r5, pc}
 80165bc:	200085b8 	.word	0x200085b8

080165c0 <_malloc_r>:
 80165c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165c2:	1ccd      	adds	r5, r1, #3
 80165c4:	f025 0503 	bic.w	r5, r5, #3
 80165c8:	3508      	adds	r5, #8
 80165ca:	2d0c      	cmp	r5, #12
 80165cc:	bf38      	it	cc
 80165ce:	250c      	movcc	r5, #12
 80165d0:	2d00      	cmp	r5, #0
 80165d2:	4606      	mov	r6, r0
 80165d4:	db01      	blt.n	80165da <_malloc_r+0x1a>
 80165d6:	42a9      	cmp	r1, r5
 80165d8:	d903      	bls.n	80165e2 <_malloc_r+0x22>
 80165da:	230c      	movs	r3, #12
 80165dc:	6033      	str	r3, [r6, #0]
 80165de:	2000      	movs	r0, #0
 80165e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165e2:	f002 ffdf 	bl	80195a4 <__malloc_lock>
 80165e6:	4921      	ldr	r1, [pc, #132]	; (801666c <_malloc_r+0xac>)
 80165e8:	680a      	ldr	r2, [r1, #0]
 80165ea:	4614      	mov	r4, r2
 80165ec:	b99c      	cbnz	r4, 8016616 <_malloc_r+0x56>
 80165ee:	4f20      	ldr	r7, [pc, #128]	; (8016670 <_malloc_r+0xb0>)
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	b923      	cbnz	r3, 80165fe <_malloc_r+0x3e>
 80165f4:	4621      	mov	r1, r4
 80165f6:	4630      	mov	r0, r6
 80165f8:	f000 feb6 	bl	8017368 <_sbrk_r>
 80165fc:	6038      	str	r0, [r7, #0]
 80165fe:	4629      	mov	r1, r5
 8016600:	4630      	mov	r0, r6
 8016602:	f000 feb1 	bl	8017368 <_sbrk_r>
 8016606:	1c43      	adds	r3, r0, #1
 8016608:	d123      	bne.n	8016652 <_malloc_r+0x92>
 801660a:	230c      	movs	r3, #12
 801660c:	6033      	str	r3, [r6, #0]
 801660e:	4630      	mov	r0, r6
 8016610:	f002 ffce 	bl	80195b0 <__malloc_unlock>
 8016614:	e7e3      	b.n	80165de <_malloc_r+0x1e>
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	1b5b      	subs	r3, r3, r5
 801661a:	d417      	bmi.n	801664c <_malloc_r+0x8c>
 801661c:	2b0b      	cmp	r3, #11
 801661e:	d903      	bls.n	8016628 <_malloc_r+0x68>
 8016620:	6023      	str	r3, [r4, #0]
 8016622:	441c      	add	r4, r3
 8016624:	6025      	str	r5, [r4, #0]
 8016626:	e004      	b.n	8016632 <_malloc_r+0x72>
 8016628:	6863      	ldr	r3, [r4, #4]
 801662a:	42a2      	cmp	r2, r4
 801662c:	bf0c      	ite	eq
 801662e:	600b      	streq	r3, [r1, #0]
 8016630:	6053      	strne	r3, [r2, #4]
 8016632:	4630      	mov	r0, r6
 8016634:	f002 ffbc 	bl	80195b0 <__malloc_unlock>
 8016638:	f104 000b 	add.w	r0, r4, #11
 801663c:	1d23      	adds	r3, r4, #4
 801663e:	f020 0007 	bic.w	r0, r0, #7
 8016642:	1ac2      	subs	r2, r0, r3
 8016644:	d0cc      	beq.n	80165e0 <_malloc_r+0x20>
 8016646:	1a1b      	subs	r3, r3, r0
 8016648:	50a3      	str	r3, [r4, r2]
 801664a:	e7c9      	b.n	80165e0 <_malloc_r+0x20>
 801664c:	4622      	mov	r2, r4
 801664e:	6864      	ldr	r4, [r4, #4]
 8016650:	e7cc      	b.n	80165ec <_malloc_r+0x2c>
 8016652:	1cc4      	adds	r4, r0, #3
 8016654:	f024 0403 	bic.w	r4, r4, #3
 8016658:	42a0      	cmp	r0, r4
 801665a:	d0e3      	beq.n	8016624 <_malloc_r+0x64>
 801665c:	1a21      	subs	r1, r4, r0
 801665e:	4630      	mov	r0, r6
 8016660:	f000 fe82 	bl	8017368 <_sbrk_r>
 8016664:	3001      	adds	r0, #1
 8016666:	d1dd      	bne.n	8016624 <_malloc_r+0x64>
 8016668:	e7cf      	b.n	801660a <_malloc_r+0x4a>
 801666a:	bf00      	nop
 801666c:	200085b8 	.word	0x200085b8
 8016670:	200085bc 	.word	0x200085bc

08016674 <__cvt>:
 8016674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016678:	ec55 4b10 	vmov	r4, r5, d0
 801667c:	2d00      	cmp	r5, #0
 801667e:	460e      	mov	r6, r1
 8016680:	4619      	mov	r1, r3
 8016682:	462b      	mov	r3, r5
 8016684:	bfbb      	ittet	lt
 8016686:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801668a:	461d      	movlt	r5, r3
 801668c:	2300      	movge	r3, #0
 801668e:	232d      	movlt	r3, #45	; 0x2d
 8016690:	700b      	strb	r3, [r1, #0]
 8016692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016694:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016698:	4691      	mov	r9, r2
 801669a:	f023 0820 	bic.w	r8, r3, #32
 801669e:	bfbc      	itt	lt
 80166a0:	4622      	movlt	r2, r4
 80166a2:	4614      	movlt	r4, r2
 80166a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80166a8:	d005      	beq.n	80166b6 <__cvt+0x42>
 80166aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80166ae:	d100      	bne.n	80166b2 <__cvt+0x3e>
 80166b0:	3601      	adds	r6, #1
 80166b2:	2102      	movs	r1, #2
 80166b4:	e000      	b.n	80166b8 <__cvt+0x44>
 80166b6:	2103      	movs	r1, #3
 80166b8:	ab03      	add	r3, sp, #12
 80166ba:	9301      	str	r3, [sp, #4]
 80166bc:	ab02      	add	r3, sp, #8
 80166be:	9300      	str	r3, [sp, #0]
 80166c0:	ec45 4b10 	vmov	d0, r4, r5
 80166c4:	4653      	mov	r3, sl
 80166c6:	4632      	mov	r2, r6
 80166c8:	f001 fdfa 	bl	80182c0 <_dtoa_r>
 80166cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80166d0:	4607      	mov	r7, r0
 80166d2:	d102      	bne.n	80166da <__cvt+0x66>
 80166d4:	f019 0f01 	tst.w	r9, #1
 80166d8:	d022      	beq.n	8016720 <__cvt+0xac>
 80166da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80166de:	eb07 0906 	add.w	r9, r7, r6
 80166e2:	d110      	bne.n	8016706 <__cvt+0x92>
 80166e4:	783b      	ldrb	r3, [r7, #0]
 80166e6:	2b30      	cmp	r3, #48	; 0x30
 80166e8:	d10a      	bne.n	8016700 <__cvt+0x8c>
 80166ea:	2200      	movs	r2, #0
 80166ec:	2300      	movs	r3, #0
 80166ee:	4620      	mov	r0, r4
 80166f0:	4629      	mov	r1, r5
 80166f2:	f7ea f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80166f6:	b918      	cbnz	r0, 8016700 <__cvt+0x8c>
 80166f8:	f1c6 0601 	rsb	r6, r6, #1
 80166fc:	f8ca 6000 	str.w	r6, [sl]
 8016700:	f8da 3000 	ldr.w	r3, [sl]
 8016704:	4499      	add	r9, r3
 8016706:	2200      	movs	r2, #0
 8016708:	2300      	movs	r3, #0
 801670a:	4620      	mov	r0, r4
 801670c:	4629      	mov	r1, r5
 801670e:	f7ea f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 8016712:	b108      	cbz	r0, 8016718 <__cvt+0xa4>
 8016714:	f8cd 900c 	str.w	r9, [sp, #12]
 8016718:	2230      	movs	r2, #48	; 0x30
 801671a:	9b03      	ldr	r3, [sp, #12]
 801671c:	454b      	cmp	r3, r9
 801671e:	d307      	bcc.n	8016730 <__cvt+0xbc>
 8016720:	9b03      	ldr	r3, [sp, #12]
 8016722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016724:	1bdb      	subs	r3, r3, r7
 8016726:	4638      	mov	r0, r7
 8016728:	6013      	str	r3, [r2, #0]
 801672a:	b004      	add	sp, #16
 801672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016730:	1c59      	adds	r1, r3, #1
 8016732:	9103      	str	r1, [sp, #12]
 8016734:	701a      	strb	r2, [r3, #0]
 8016736:	e7f0      	b.n	801671a <__cvt+0xa6>

08016738 <__exponent>:
 8016738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801673a:	4603      	mov	r3, r0
 801673c:	2900      	cmp	r1, #0
 801673e:	bfb8      	it	lt
 8016740:	4249      	neglt	r1, r1
 8016742:	f803 2b02 	strb.w	r2, [r3], #2
 8016746:	bfb4      	ite	lt
 8016748:	222d      	movlt	r2, #45	; 0x2d
 801674a:	222b      	movge	r2, #43	; 0x2b
 801674c:	2909      	cmp	r1, #9
 801674e:	7042      	strb	r2, [r0, #1]
 8016750:	dd2a      	ble.n	80167a8 <__exponent+0x70>
 8016752:	f10d 0407 	add.w	r4, sp, #7
 8016756:	46a4      	mov	ip, r4
 8016758:	270a      	movs	r7, #10
 801675a:	46a6      	mov	lr, r4
 801675c:	460a      	mov	r2, r1
 801675e:	fb91 f6f7 	sdiv	r6, r1, r7
 8016762:	fb07 1516 	mls	r5, r7, r6, r1
 8016766:	3530      	adds	r5, #48	; 0x30
 8016768:	2a63      	cmp	r2, #99	; 0x63
 801676a:	f104 34ff 	add.w	r4, r4, #4294967295
 801676e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016772:	4631      	mov	r1, r6
 8016774:	dcf1      	bgt.n	801675a <__exponent+0x22>
 8016776:	3130      	adds	r1, #48	; 0x30
 8016778:	f1ae 0502 	sub.w	r5, lr, #2
 801677c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016780:	1c44      	adds	r4, r0, #1
 8016782:	4629      	mov	r1, r5
 8016784:	4561      	cmp	r1, ip
 8016786:	d30a      	bcc.n	801679e <__exponent+0x66>
 8016788:	f10d 0209 	add.w	r2, sp, #9
 801678c:	eba2 020e 	sub.w	r2, r2, lr
 8016790:	4565      	cmp	r5, ip
 8016792:	bf88      	it	hi
 8016794:	2200      	movhi	r2, #0
 8016796:	4413      	add	r3, r2
 8016798:	1a18      	subs	r0, r3, r0
 801679a:	b003      	add	sp, #12
 801679c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801679e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80167a6:	e7ed      	b.n	8016784 <__exponent+0x4c>
 80167a8:	2330      	movs	r3, #48	; 0x30
 80167aa:	3130      	adds	r1, #48	; 0x30
 80167ac:	7083      	strb	r3, [r0, #2]
 80167ae:	70c1      	strb	r1, [r0, #3]
 80167b0:	1d03      	adds	r3, r0, #4
 80167b2:	e7f1      	b.n	8016798 <__exponent+0x60>

080167b4 <_printf_float>:
 80167b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b8:	ed2d 8b02 	vpush	{d8}
 80167bc:	b08d      	sub	sp, #52	; 0x34
 80167be:	460c      	mov	r4, r1
 80167c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80167c4:	4616      	mov	r6, r2
 80167c6:	461f      	mov	r7, r3
 80167c8:	4605      	mov	r5, r0
 80167ca:	f002 fed5 	bl	8019578 <_localeconv_r>
 80167ce:	f8d0 a000 	ldr.w	sl, [r0]
 80167d2:	4650      	mov	r0, sl
 80167d4:	f7e9 fcfc 	bl	80001d0 <strlen>
 80167d8:	2300      	movs	r3, #0
 80167da:	930a      	str	r3, [sp, #40]	; 0x28
 80167dc:	6823      	ldr	r3, [r4, #0]
 80167de:	9305      	str	r3, [sp, #20]
 80167e0:	f8d8 3000 	ldr.w	r3, [r8]
 80167e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80167e8:	3307      	adds	r3, #7
 80167ea:	f023 0307 	bic.w	r3, r3, #7
 80167ee:	f103 0208 	add.w	r2, r3, #8
 80167f2:	f8c8 2000 	str.w	r2, [r8]
 80167f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80167fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016806:	9307      	str	r3, [sp, #28]
 8016808:	f8cd 8018 	str.w	r8, [sp, #24]
 801680c:	ee08 0a10 	vmov	s16, r0
 8016810:	4b9f      	ldr	r3, [pc, #636]	; (8016a90 <_printf_float+0x2dc>)
 8016812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016816:	f04f 32ff 	mov.w	r2, #4294967295
 801681a:	f7ea f987 	bl	8000b2c <__aeabi_dcmpun>
 801681e:	bb88      	cbnz	r0, 8016884 <_printf_float+0xd0>
 8016820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016824:	4b9a      	ldr	r3, [pc, #616]	; (8016a90 <_printf_float+0x2dc>)
 8016826:	f04f 32ff 	mov.w	r2, #4294967295
 801682a:	f7ea f961 	bl	8000af0 <__aeabi_dcmple>
 801682e:	bb48      	cbnz	r0, 8016884 <_printf_float+0xd0>
 8016830:	2200      	movs	r2, #0
 8016832:	2300      	movs	r3, #0
 8016834:	4640      	mov	r0, r8
 8016836:	4649      	mov	r1, r9
 8016838:	f7ea f950 	bl	8000adc <__aeabi_dcmplt>
 801683c:	b110      	cbz	r0, 8016844 <_printf_float+0x90>
 801683e:	232d      	movs	r3, #45	; 0x2d
 8016840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016844:	4b93      	ldr	r3, [pc, #588]	; (8016a94 <_printf_float+0x2e0>)
 8016846:	4894      	ldr	r0, [pc, #592]	; (8016a98 <_printf_float+0x2e4>)
 8016848:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801684c:	bf94      	ite	ls
 801684e:	4698      	movls	r8, r3
 8016850:	4680      	movhi	r8, r0
 8016852:	2303      	movs	r3, #3
 8016854:	6123      	str	r3, [r4, #16]
 8016856:	9b05      	ldr	r3, [sp, #20]
 8016858:	f023 0204 	bic.w	r2, r3, #4
 801685c:	6022      	str	r2, [r4, #0]
 801685e:	f04f 0900 	mov.w	r9, #0
 8016862:	9700      	str	r7, [sp, #0]
 8016864:	4633      	mov	r3, r6
 8016866:	aa0b      	add	r2, sp, #44	; 0x2c
 8016868:	4621      	mov	r1, r4
 801686a:	4628      	mov	r0, r5
 801686c:	f000 f9d8 	bl	8016c20 <_printf_common>
 8016870:	3001      	adds	r0, #1
 8016872:	f040 8090 	bne.w	8016996 <_printf_float+0x1e2>
 8016876:	f04f 30ff 	mov.w	r0, #4294967295
 801687a:	b00d      	add	sp, #52	; 0x34
 801687c:	ecbd 8b02 	vpop	{d8}
 8016880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016884:	4642      	mov	r2, r8
 8016886:	464b      	mov	r3, r9
 8016888:	4640      	mov	r0, r8
 801688a:	4649      	mov	r1, r9
 801688c:	f7ea f94e 	bl	8000b2c <__aeabi_dcmpun>
 8016890:	b140      	cbz	r0, 80168a4 <_printf_float+0xf0>
 8016892:	464b      	mov	r3, r9
 8016894:	2b00      	cmp	r3, #0
 8016896:	bfbc      	itt	lt
 8016898:	232d      	movlt	r3, #45	; 0x2d
 801689a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801689e:	487f      	ldr	r0, [pc, #508]	; (8016a9c <_printf_float+0x2e8>)
 80168a0:	4b7f      	ldr	r3, [pc, #508]	; (8016aa0 <_printf_float+0x2ec>)
 80168a2:	e7d1      	b.n	8016848 <_printf_float+0x94>
 80168a4:	6863      	ldr	r3, [r4, #4]
 80168a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80168aa:	9206      	str	r2, [sp, #24]
 80168ac:	1c5a      	adds	r2, r3, #1
 80168ae:	d13f      	bne.n	8016930 <_printf_float+0x17c>
 80168b0:	2306      	movs	r3, #6
 80168b2:	6063      	str	r3, [r4, #4]
 80168b4:	9b05      	ldr	r3, [sp, #20]
 80168b6:	6861      	ldr	r1, [r4, #4]
 80168b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80168bc:	2300      	movs	r3, #0
 80168be:	9303      	str	r3, [sp, #12]
 80168c0:	ab0a      	add	r3, sp, #40	; 0x28
 80168c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80168c6:	ab09      	add	r3, sp, #36	; 0x24
 80168c8:	ec49 8b10 	vmov	d0, r8, r9
 80168cc:	9300      	str	r3, [sp, #0]
 80168ce:	6022      	str	r2, [r4, #0]
 80168d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80168d4:	4628      	mov	r0, r5
 80168d6:	f7ff fecd 	bl	8016674 <__cvt>
 80168da:	9b06      	ldr	r3, [sp, #24]
 80168dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168de:	2b47      	cmp	r3, #71	; 0x47
 80168e0:	4680      	mov	r8, r0
 80168e2:	d108      	bne.n	80168f6 <_printf_float+0x142>
 80168e4:	1cc8      	adds	r0, r1, #3
 80168e6:	db02      	blt.n	80168ee <_printf_float+0x13a>
 80168e8:	6863      	ldr	r3, [r4, #4]
 80168ea:	4299      	cmp	r1, r3
 80168ec:	dd41      	ble.n	8016972 <_printf_float+0x1be>
 80168ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80168f2:	fa5f fb8b 	uxtb.w	fp, fp
 80168f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80168fa:	d820      	bhi.n	801693e <_printf_float+0x18a>
 80168fc:	3901      	subs	r1, #1
 80168fe:	465a      	mov	r2, fp
 8016900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016904:	9109      	str	r1, [sp, #36]	; 0x24
 8016906:	f7ff ff17 	bl	8016738 <__exponent>
 801690a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801690c:	1813      	adds	r3, r2, r0
 801690e:	2a01      	cmp	r2, #1
 8016910:	4681      	mov	r9, r0
 8016912:	6123      	str	r3, [r4, #16]
 8016914:	dc02      	bgt.n	801691c <_printf_float+0x168>
 8016916:	6822      	ldr	r2, [r4, #0]
 8016918:	07d2      	lsls	r2, r2, #31
 801691a:	d501      	bpl.n	8016920 <_printf_float+0x16c>
 801691c:	3301      	adds	r3, #1
 801691e:	6123      	str	r3, [r4, #16]
 8016920:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016924:	2b00      	cmp	r3, #0
 8016926:	d09c      	beq.n	8016862 <_printf_float+0xae>
 8016928:	232d      	movs	r3, #45	; 0x2d
 801692a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801692e:	e798      	b.n	8016862 <_printf_float+0xae>
 8016930:	9a06      	ldr	r2, [sp, #24]
 8016932:	2a47      	cmp	r2, #71	; 0x47
 8016934:	d1be      	bne.n	80168b4 <_printf_float+0x100>
 8016936:	2b00      	cmp	r3, #0
 8016938:	d1bc      	bne.n	80168b4 <_printf_float+0x100>
 801693a:	2301      	movs	r3, #1
 801693c:	e7b9      	b.n	80168b2 <_printf_float+0xfe>
 801693e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016942:	d118      	bne.n	8016976 <_printf_float+0x1c2>
 8016944:	2900      	cmp	r1, #0
 8016946:	6863      	ldr	r3, [r4, #4]
 8016948:	dd0b      	ble.n	8016962 <_printf_float+0x1ae>
 801694a:	6121      	str	r1, [r4, #16]
 801694c:	b913      	cbnz	r3, 8016954 <_printf_float+0x1a0>
 801694e:	6822      	ldr	r2, [r4, #0]
 8016950:	07d0      	lsls	r0, r2, #31
 8016952:	d502      	bpl.n	801695a <_printf_float+0x1a6>
 8016954:	3301      	adds	r3, #1
 8016956:	440b      	add	r3, r1
 8016958:	6123      	str	r3, [r4, #16]
 801695a:	65a1      	str	r1, [r4, #88]	; 0x58
 801695c:	f04f 0900 	mov.w	r9, #0
 8016960:	e7de      	b.n	8016920 <_printf_float+0x16c>
 8016962:	b913      	cbnz	r3, 801696a <_printf_float+0x1b6>
 8016964:	6822      	ldr	r2, [r4, #0]
 8016966:	07d2      	lsls	r2, r2, #31
 8016968:	d501      	bpl.n	801696e <_printf_float+0x1ba>
 801696a:	3302      	adds	r3, #2
 801696c:	e7f4      	b.n	8016958 <_printf_float+0x1a4>
 801696e:	2301      	movs	r3, #1
 8016970:	e7f2      	b.n	8016958 <_printf_float+0x1a4>
 8016972:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016978:	4299      	cmp	r1, r3
 801697a:	db05      	blt.n	8016988 <_printf_float+0x1d4>
 801697c:	6823      	ldr	r3, [r4, #0]
 801697e:	6121      	str	r1, [r4, #16]
 8016980:	07d8      	lsls	r0, r3, #31
 8016982:	d5ea      	bpl.n	801695a <_printf_float+0x1a6>
 8016984:	1c4b      	adds	r3, r1, #1
 8016986:	e7e7      	b.n	8016958 <_printf_float+0x1a4>
 8016988:	2900      	cmp	r1, #0
 801698a:	bfd4      	ite	le
 801698c:	f1c1 0202 	rsble	r2, r1, #2
 8016990:	2201      	movgt	r2, #1
 8016992:	4413      	add	r3, r2
 8016994:	e7e0      	b.n	8016958 <_printf_float+0x1a4>
 8016996:	6823      	ldr	r3, [r4, #0]
 8016998:	055a      	lsls	r2, r3, #21
 801699a:	d407      	bmi.n	80169ac <_printf_float+0x1f8>
 801699c:	6923      	ldr	r3, [r4, #16]
 801699e:	4642      	mov	r2, r8
 80169a0:	4631      	mov	r1, r6
 80169a2:	4628      	mov	r0, r5
 80169a4:	47b8      	blx	r7
 80169a6:	3001      	adds	r0, #1
 80169a8:	d12c      	bne.n	8016a04 <_printf_float+0x250>
 80169aa:	e764      	b.n	8016876 <_printf_float+0xc2>
 80169ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80169b0:	f240 80e0 	bls.w	8016b74 <_printf_float+0x3c0>
 80169b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80169b8:	2200      	movs	r2, #0
 80169ba:	2300      	movs	r3, #0
 80169bc:	f7ea f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80169c0:	2800      	cmp	r0, #0
 80169c2:	d034      	beq.n	8016a2e <_printf_float+0x27a>
 80169c4:	4a37      	ldr	r2, [pc, #220]	; (8016aa4 <_printf_float+0x2f0>)
 80169c6:	2301      	movs	r3, #1
 80169c8:	4631      	mov	r1, r6
 80169ca:	4628      	mov	r0, r5
 80169cc:	47b8      	blx	r7
 80169ce:	3001      	adds	r0, #1
 80169d0:	f43f af51 	beq.w	8016876 <_printf_float+0xc2>
 80169d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80169d8:	429a      	cmp	r2, r3
 80169da:	db02      	blt.n	80169e2 <_printf_float+0x22e>
 80169dc:	6823      	ldr	r3, [r4, #0]
 80169de:	07d8      	lsls	r0, r3, #31
 80169e0:	d510      	bpl.n	8016a04 <_printf_float+0x250>
 80169e2:	ee18 3a10 	vmov	r3, s16
 80169e6:	4652      	mov	r2, sl
 80169e8:	4631      	mov	r1, r6
 80169ea:	4628      	mov	r0, r5
 80169ec:	47b8      	blx	r7
 80169ee:	3001      	adds	r0, #1
 80169f0:	f43f af41 	beq.w	8016876 <_printf_float+0xc2>
 80169f4:	f04f 0800 	mov.w	r8, #0
 80169f8:	f104 091a 	add.w	r9, r4, #26
 80169fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169fe:	3b01      	subs	r3, #1
 8016a00:	4543      	cmp	r3, r8
 8016a02:	dc09      	bgt.n	8016a18 <_printf_float+0x264>
 8016a04:	6823      	ldr	r3, [r4, #0]
 8016a06:	079b      	lsls	r3, r3, #30
 8016a08:	f100 8105 	bmi.w	8016c16 <_printf_float+0x462>
 8016a0c:	68e0      	ldr	r0, [r4, #12]
 8016a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a10:	4298      	cmp	r0, r3
 8016a12:	bfb8      	it	lt
 8016a14:	4618      	movlt	r0, r3
 8016a16:	e730      	b.n	801687a <_printf_float+0xc6>
 8016a18:	2301      	movs	r3, #1
 8016a1a:	464a      	mov	r2, r9
 8016a1c:	4631      	mov	r1, r6
 8016a1e:	4628      	mov	r0, r5
 8016a20:	47b8      	blx	r7
 8016a22:	3001      	adds	r0, #1
 8016a24:	f43f af27 	beq.w	8016876 <_printf_float+0xc2>
 8016a28:	f108 0801 	add.w	r8, r8, #1
 8016a2c:	e7e6      	b.n	80169fc <_printf_float+0x248>
 8016a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	dc39      	bgt.n	8016aa8 <_printf_float+0x2f4>
 8016a34:	4a1b      	ldr	r2, [pc, #108]	; (8016aa4 <_printf_float+0x2f0>)
 8016a36:	2301      	movs	r3, #1
 8016a38:	4631      	mov	r1, r6
 8016a3a:	4628      	mov	r0, r5
 8016a3c:	47b8      	blx	r7
 8016a3e:	3001      	adds	r0, #1
 8016a40:	f43f af19 	beq.w	8016876 <_printf_float+0xc2>
 8016a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	d102      	bne.n	8016a52 <_printf_float+0x29e>
 8016a4c:	6823      	ldr	r3, [r4, #0]
 8016a4e:	07d9      	lsls	r1, r3, #31
 8016a50:	d5d8      	bpl.n	8016a04 <_printf_float+0x250>
 8016a52:	ee18 3a10 	vmov	r3, s16
 8016a56:	4652      	mov	r2, sl
 8016a58:	4631      	mov	r1, r6
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	47b8      	blx	r7
 8016a5e:	3001      	adds	r0, #1
 8016a60:	f43f af09 	beq.w	8016876 <_printf_float+0xc2>
 8016a64:	f04f 0900 	mov.w	r9, #0
 8016a68:	f104 0a1a 	add.w	sl, r4, #26
 8016a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a6e:	425b      	negs	r3, r3
 8016a70:	454b      	cmp	r3, r9
 8016a72:	dc01      	bgt.n	8016a78 <_printf_float+0x2c4>
 8016a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a76:	e792      	b.n	801699e <_printf_float+0x1ea>
 8016a78:	2301      	movs	r3, #1
 8016a7a:	4652      	mov	r2, sl
 8016a7c:	4631      	mov	r1, r6
 8016a7e:	4628      	mov	r0, r5
 8016a80:	47b8      	blx	r7
 8016a82:	3001      	adds	r0, #1
 8016a84:	f43f aef7 	beq.w	8016876 <_printf_float+0xc2>
 8016a88:	f109 0901 	add.w	r9, r9, #1
 8016a8c:	e7ee      	b.n	8016a6c <_printf_float+0x2b8>
 8016a8e:	bf00      	nop
 8016a90:	7fefffff 	.word	0x7fefffff
 8016a94:	0801ca64 	.word	0x0801ca64
 8016a98:	0801ca68 	.word	0x0801ca68
 8016a9c:	0801ca70 	.word	0x0801ca70
 8016aa0:	0801ca6c 	.word	0x0801ca6c
 8016aa4:	0801ca74 	.word	0x0801ca74
 8016aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016aac:	429a      	cmp	r2, r3
 8016aae:	bfa8      	it	ge
 8016ab0:	461a      	movge	r2, r3
 8016ab2:	2a00      	cmp	r2, #0
 8016ab4:	4691      	mov	r9, r2
 8016ab6:	dc37      	bgt.n	8016b28 <_printf_float+0x374>
 8016ab8:	f04f 0b00 	mov.w	fp, #0
 8016abc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016ac0:	f104 021a 	add.w	r2, r4, #26
 8016ac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016ac6:	9305      	str	r3, [sp, #20]
 8016ac8:	eba3 0309 	sub.w	r3, r3, r9
 8016acc:	455b      	cmp	r3, fp
 8016ace:	dc33      	bgt.n	8016b38 <_printf_float+0x384>
 8016ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	db3b      	blt.n	8016b50 <_printf_float+0x39c>
 8016ad8:	6823      	ldr	r3, [r4, #0]
 8016ada:	07da      	lsls	r2, r3, #31
 8016adc:	d438      	bmi.n	8016b50 <_printf_float+0x39c>
 8016ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ae0:	9b05      	ldr	r3, [sp, #20]
 8016ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016ae4:	1ad3      	subs	r3, r2, r3
 8016ae6:	eba2 0901 	sub.w	r9, r2, r1
 8016aea:	4599      	cmp	r9, r3
 8016aec:	bfa8      	it	ge
 8016aee:	4699      	movge	r9, r3
 8016af0:	f1b9 0f00 	cmp.w	r9, #0
 8016af4:	dc35      	bgt.n	8016b62 <_printf_float+0x3ae>
 8016af6:	f04f 0800 	mov.w	r8, #0
 8016afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016afe:	f104 0a1a 	add.w	sl, r4, #26
 8016b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016b06:	1a9b      	subs	r3, r3, r2
 8016b08:	eba3 0309 	sub.w	r3, r3, r9
 8016b0c:	4543      	cmp	r3, r8
 8016b0e:	f77f af79 	ble.w	8016a04 <_printf_float+0x250>
 8016b12:	2301      	movs	r3, #1
 8016b14:	4652      	mov	r2, sl
 8016b16:	4631      	mov	r1, r6
 8016b18:	4628      	mov	r0, r5
 8016b1a:	47b8      	blx	r7
 8016b1c:	3001      	adds	r0, #1
 8016b1e:	f43f aeaa 	beq.w	8016876 <_printf_float+0xc2>
 8016b22:	f108 0801 	add.w	r8, r8, #1
 8016b26:	e7ec      	b.n	8016b02 <_printf_float+0x34e>
 8016b28:	4613      	mov	r3, r2
 8016b2a:	4631      	mov	r1, r6
 8016b2c:	4642      	mov	r2, r8
 8016b2e:	4628      	mov	r0, r5
 8016b30:	47b8      	blx	r7
 8016b32:	3001      	adds	r0, #1
 8016b34:	d1c0      	bne.n	8016ab8 <_printf_float+0x304>
 8016b36:	e69e      	b.n	8016876 <_printf_float+0xc2>
 8016b38:	2301      	movs	r3, #1
 8016b3a:	4631      	mov	r1, r6
 8016b3c:	4628      	mov	r0, r5
 8016b3e:	9205      	str	r2, [sp, #20]
 8016b40:	47b8      	blx	r7
 8016b42:	3001      	adds	r0, #1
 8016b44:	f43f ae97 	beq.w	8016876 <_printf_float+0xc2>
 8016b48:	9a05      	ldr	r2, [sp, #20]
 8016b4a:	f10b 0b01 	add.w	fp, fp, #1
 8016b4e:	e7b9      	b.n	8016ac4 <_printf_float+0x310>
 8016b50:	ee18 3a10 	vmov	r3, s16
 8016b54:	4652      	mov	r2, sl
 8016b56:	4631      	mov	r1, r6
 8016b58:	4628      	mov	r0, r5
 8016b5a:	47b8      	blx	r7
 8016b5c:	3001      	adds	r0, #1
 8016b5e:	d1be      	bne.n	8016ade <_printf_float+0x32a>
 8016b60:	e689      	b.n	8016876 <_printf_float+0xc2>
 8016b62:	9a05      	ldr	r2, [sp, #20]
 8016b64:	464b      	mov	r3, r9
 8016b66:	4442      	add	r2, r8
 8016b68:	4631      	mov	r1, r6
 8016b6a:	4628      	mov	r0, r5
 8016b6c:	47b8      	blx	r7
 8016b6e:	3001      	adds	r0, #1
 8016b70:	d1c1      	bne.n	8016af6 <_printf_float+0x342>
 8016b72:	e680      	b.n	8016876 <_printf_float+0xc2>
 8016b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b76:	2a01      	cmp	r2, #1
 8016b78:	dc01      	bgt.n	8016b7e <_printf_float+0x3ca>
 8016b7a:	07db      	lsls	r3, r3, #31
 8016b7c:	d538      	bpl.n	8016bf0 <_printf_float+0x43c>
 8016b7e:	2301      	movs	r3, #1
 8016b80:	4642      	mov	r2, r8
 8016b82:	4631      	mov	r1, r6
 8016b84:	4628      	mov	r0, r5
 8016b86:	47b8      	blx	r7
 8016b88:	3001      	adds	r0, #1
 8016b8a:	f43f ae74 	beq.w	8016876 <_printf_float+0xc2>
 8016b8e:	ee18 3a10 	vmov	r3, s16
 8016b92:	4652      	mov	r2, sl
 8016b94:	4631      	mov	r1, r6
 8016b96:	4628      	mov	r0, r5
 8016b98:	47b8      	blx	r7
 8016b9a:	3001      	adds	r0, #1
 8016b9c:	f43f ae6b 	beq.w	8016876 <_printf_float+0xc2>
 8016ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	f7e9 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8016bac:	b9d8      	cbnz	r0, 8016be6 <_printf_float+0x432>
 8016bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bb0:	f108 0201 	add.w	r2, r8, #1
 8016bb4:	3b01      	subs	r3, #1
 8016bb6:	4631      	mov	r1, r6
 8016bb8:	4628      	mov	r0, r5
 8016bba:	47b8      	blx	r7
 8016bbc:	3001      	adds	r0, #1
 8016bbe:	d10e      	bne.n	8016bde <_printf_float+0x42a>
 8016bc0:	e659      	b.n	8016876 <_printf_float+0xc2>
 8016bc2:	2301      	movs	r3, #1
 8016bc4:	4652      	mov	r2, sl
 8016bc6:	4631      	mov	r1, r6
 8016bc8:	4628      	mov	r0, r5
 8016bca:	47b8      	blx	r7
 8016bcc:	3001      	adds	r0, #1
 8016bce:	f43f ae52 	beq.w	8016876 <_printf_float+0xc2>
 8016bd2:	f108 0801 	add.w	r8, r8, #1
 8016bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bd8:	3b01      	subs	r3, #1
 8016bda:	4543      	cmp	r3, r8
 8016bdc:	dcf1      	bgt.n	8016bc2 <_printf_float+0x40e>
 8016bde:	464b      	mov	r3, r9
 8016be0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016be4:	e6dc      	b.n	80169a0 <_printf_float+0x1ec>
 8016be6:	f04f 0800 	mov.w	r8, #0
 8016bea:	f104 0a1a 	add.w	sl, r4, #26
 8016bee:	e7f2      	b.n	8016bd6 <_printf_float+0x422>
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	4642      	mov	r2, r8
 8016bf4:	e7df      	b.n	8016bb6 <_printf_float+0x402>
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	464a      	mov	r2, r9
 8016bfa:	4631      	mov	r1, r6
 8016bfc:	4628      	mov	r0, r5
 8016bfe:	47b8      	blx	r7
 8016c00:	3001      	adds	r0, #1
 8016c02:	f43f ae38 	beq.w	8016876 <_printf_float+0xc2>
 8016c06:	f108 0801 	add.w	r8, r8, #1
 8016c0a:	68e3      	ldr	r3, [r4, #12]
 8016c0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c0e:	1a5b      	subs	r3, r3, r1
 8016c10:	4543      	cmp	r3, r8
 8016c12:	dcf0      	bgt.n	8016bf6 <_printf_float+0x442>
 8016c14:	e6fa      	b.n	8016a0c <_printf_float+0x258>
 8016c16:	f04f 0800 	mov.w	r8, #0
 8016c1a:	f104 0919 	add.w	r9, r4, #25
 8016c1e:	e7f4      	b.n	8016c0a <_printf_float+0x456>

08016c20 <_printf_common>:
 8016c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c24:	4616      	mov	r6, r2
 8016c26:	4699      	mov	r9, r3
 8016c28:	688a      	ldr	r2, [r1, #8]
 8016c2a:	690b      	ldr	r3, [r1, #16]
 8016c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016c30:	4293      	cmp	r3, r2
 8016c32:	bfb8      	it	lt
 8016c34:	4613      	movlt	r3, r2
 8016c36:	6033      	str	r3, [r6, #0]
 8016c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016c3c:	4607      	mov	r7, r0
 8016c3e:	460c      	mov	r4, r1
 8016c40:	b10a      	cbz	r2, 8016c46 <_printf_common+0x26>
 8016c42:	3301      	adds	r3, #1
 8016c44:	6033      	str	r3, [r6, #0]
 8016c46:	6823      	ldr	r3, [r4, #0]
 8016c48:	0699      	lsls	r1, r3, #26
 8016c4a:	bf42      	ittt	mi
 8016c4c:	6833      	ldrmi	r3, [r6, #0]
 8016c4e:	3302      	addmi	r3, #2
 8016c50:	6033      	strmi	r3, [r6, #0]
 8016c52:	6825      	ldr	r5, [r4, #0]
 8016c54:	f015 0506 	ands.w	r5, r5, #6
 8016c58:	d106      	bne.n	8016c68 <_printf_common+0x48>
 8016c5a:	f104 0a19 	add.w	sl, r4, #25
 8016c5e:	68e3      	ldr	r3, [r4, #12]
 8016c60:	6832      	ldr	r2, [r6, #0]
 8016c62:	1a9b      	subs	r3, r3, r2
 8016c64:	42ab      	cmp	r3, r5
 8016c66:	dc26      	bgt.n	8016cb6 <_printf_common+0x96>
 8016c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016c6c:	1e13      	subs	r3, r2, #0
 8016c6e:	6822      	ldr	r2, [r4, #0]
 8016c70:	bf18      	it	ne
 8016c72:	2301      	movne	r3, #1
 8016c74:	0692      	lsls	r2, r2, #26
 8016c76:	d42b      	bmi.n	8016cd0 <_printf_common+0xb0>
 8016c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c7c:	4649      	mov	r1, r9
 8016c7e:	4638      	mov	r0, r7
 8016c80:	47c0      	blx	r8
 8016c82:	3001      	adds	r0, #1
 8016c84:	d01e      	beq.n	8016cc4 <_printf_common+0xa4>
 8016c86:	6823      	ldr	r3, [r4, #0]
 8016c88:	68e5      	ldr	r5, [r4, #12]
 8016c8a:	6832      	ldr	r2, [r6, #0]
 8016c8c:	f003 0306 	and.w	r3, r3, #6
 8016c90:	2b04      	cmp	r3, #4
 8016c92:	bf08      	it	eq
 8016c94:	1aad      	subeq	r5, r5, r2
 8016c96:	68a3      	ldr	r3, [r4, #8]
 8016c98:	6922      	ldr	r2, [r4, #16]
 8016c9a:	bf0c      	ite	eq
 8016c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016ca0:	2500      	movne	r5, #0
 8016ca2:	4293      	cmp	r3, r2
 8016ca4:	bfc4      	itt	gt
 8016ca6:	1a9b      	subgt	r3, r3, r2
 8016ca8:	18ed      	addgt	r5, r5, r3
 8016caa:	2600      	movs	r6, #0
 8016cac:	341a      	adds	r4, #26
 8016cae:	42b5      	cmp	r5, r6
 8016cb0:	d11a      	bne.n	8016ce8 <_printf_common+0xc8>
 8016cb2:	2000      	movs	r0, #0
 8016cb4:	e008      	b.n	8016cc8 <_printf_common+0xa8>
 8016cb6:	2301      	movs	r3, #1
 8016cb8:	4652      	mov	r2, sl
 8016cba:	4649      	mov	r1, r9
 8016cbc:	4638      	mov	r0, r7
 8016cbe:	47c0      	blx	r8
 8016cc0:	3001      	adds	r0, #1
 8016cc2:	d103      	bne.n	8016ccc <_printf_common+0xac>
 8016cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ccc:	3501      	adds	r5, #1
 8016cce:	e7c6      	b.n	8016c5e <_printf_common+0x3e>
 8016cd0:	18e1      	adds	r1, r4, r3
 8016cd2:	1c5a      	adds	r2, r3, #1
 8016cd4:	2030      	movs	r0, #48	; 0x30
 8016cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016cda:	4422      	add	r2, r4
 8016cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ce4:	3302      	adds	r3, #2
 8016ce6:	e7c7      	b.n	8016c78 <_printf_common+0x58>
 8016ce8:	2301      	movs	r3, #1
 8016cea:	4622      	mov	r2, r4
 8016cec:	4649      	mov	r1, r9
 8016cee:	4638      	mov	r0, r7
 8016cf0:	47c0      	blx	r8
 8016cf2:	3001      	adds	r0, #1
 8016cf4:	d0e6      	beq.n	8016cc4 <_printf_common+0xa4>
 8016cf6:	3601      	adds	r6, #1
 8016cf8:	e7d9      	b.n	8016cae <_printf_common+0x8e>
	...

08016cfc <_printf_i>:
 8016cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016d00:	460c      	mov	r4, r1
 8016d02:	4691      	mov	r9, r2
 8016d04:	7e27      	ldrb	r7, [r4, #24]
 8016d06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d08:	2f78      	cmp	r7, #120	; 0x78
 8016d0a:	4680      	mov	r8, r0
 8016d0c:	469a      	mov	sl, r3
 8016d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016d12:	d807      	bhi.n	8016d24 <_printf_i+0x28>
 8016d14:	2f62      	cmp	r7, #98	; 0x62
 8016d16:	d80a      	bhi.n	8016d2e <_printf_i+0x32>
 8016d18:	2f00      	cmp	r7, #0
 8016d1a:	f000 80d8 	beq.w	8016ece <_printf_i+0x1d2>
 8016d1e:	2f58      	cmp	r7, #88	; 0x58
 8016d20:	f000 80a3 	beq.w	8016e6a <_printf_i+0x16e>
 8016d24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016d2c:	e03a      	b.n	8016da4 <_printf_i+0xa8>
 8016d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016d32:	2b15      	cmp	r3, #21
 8016d34:	d8f6      	bhi.n	8016d24 <_printf_i+0x28>
 8016d36:	a001      	add	r0, pc, #4	; (adr r0, 8016d3c <_printf_i+0x40>)
 8016d38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016d3c:	08016d95 	.word	0x08016d95
 8016d40:	08016da9 	.word	0x08016da9
 8016d44:	08016d25 	.word	0x08016d25
 8016d48:	08016d25 	.word	0x08016d25
 8016d4c:	08016d25 	.word	0x08016d25
 8016d50:	08016d25 	.word	0x08016d25
 8016d54:	08016da9 	.word	0x08016da9
 8016d58:	08016d25 	.word	0x08016d25
 8016d5c:	08016d25 	.word	0x08016d25
 8016d60:	08016d25 	.word	0x08016d25
 8016d64:	08016d25 	.word	0x08016d25
 8016d68:	08016eb5 	.word	0x08016eb5
 8016d6c:	08016dd9 	.word	0x08016dd9
 8016d70:	08016e97 	.word	0x08016e97
 8016d74:	08016d25 	.word	0x08016d25
 8016d78:	08016d25 	.word	0x08016d25
 8016d7c:	08016ed7 	.word	0x08016ed7
 8016d80:	08016d25 	.word	0x08016d25
 8016d84:	08016dd9 	.word	0x08016dd9
 8016d88:	08016d25 	.word	0x08016d25
 8016d8c:	08016d25 	.word	0x08016d25
 8016d90:	08016e9f 	.word	0x08016e9f
 8016d94:	680b      	ldr	r3, [r1, #0]
 8016d96:	1d1a      	adds	r2, r3, #4
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	600a      	str	r2, [r1, #0]
 8016d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016da4:	2301      	movs	r3, #1
 8016da6:	e0a3      	b.n	8016ef0 <_printf_i+0x1f4>
 8016da8:	6825      	ldr	r5, [r4, #0]
 8016daa:	6808      	ldr	r0, [r1, #0]
 8016dac:	062e      	lsls	r6, r5, #24
 8016dae:	f100 0304 	add.w	r3, r0, #4
 8016db2:	d50a      	bpl.n	8016dca <_printf_i+0xce>
 8016db4:	6805      	ldr	r5, [r0, #0]
 8016db6:	600b      	str	r3, [r1, #0]
 8016db8:	2d00      	cmp	r5, #0
 8016dba:	da03      	bge.n	8016dc4 <_printf_i+0xc8>
 8016dbc:	232d      	movs	r3, #45	; 0x2d
 8016dbe:	426d      	negs	r5, r5
 8016dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016dc4:	485e      	ldr	r0, [pc, #376]	; (8016f40 <_printf_i+0x244>)
 8016dc6:	230a      	movs	r3, #10
 8016dc8:	e019      	b.n	8016dfe <_printf_i+0x102>
 8016dca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016dce:	6805      	ldr	r5, [r0, #0]
 8016dd0:	600b      	str	r3, [r1, #0]
 8016dd2:	bf18      	it	ne
 8016dd4:	b22d      	sxthne	r5, r5
 8016dd6:	e7ef      	b.n	8016db8 <_printf_i+0xbc>
 8016dd8:	680b      	ldr	r3, [r1, #0]
 8016dda:	6825      	ldr	r5, [r4, #0]
 8016ddc:	1d18      	adds	r0, r3, #4
 8016dde:	6008      	str	r0, [r1, #0]
 8016de0:	0628      	lsls	r0, r5, #24
 8016de2:	d501      	bpl.n	8016de8 <_printf_i+0xec>
 8016de4:	681d      	ldr	r5, [r3, #0]
 8016de6:	e002      	b.n	8016dee <_printf_i+0xf2>
 8016de8:	0669      	lsls	r1, r5, #25
 8016dea:	d5fb      	bpl.n	8016de4 <_printf_i+0xe8>
 8016dec:	881d      	ldrh	r5, [r3, #0]
 8016dee:	4854      	ldr	r0, [pc, #336]	; (8016f40 <_printf_i+0x244>)
 8016df0:	2f6f      	cmp	r7, #111	; 0x6f
 8016df2:	bf0c      	ite	eq
 8016df4:	2308      	moveq	r3, #8
 8016df6:	230a      	movne	r3, #10
 8016df8:	2100      	movs	r1, #0
 8016dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016dfe:	6866      	ldr	r6, [r4, #4]
 8016e00:	60a6      	str	r6, [r4, #8]
 8016e02:	2e00      	cmp	r6, #0
 8016e04:	bfa2      	ittt	ge
 8016e06:	6821      	ldrge	r1, [r4, #0]
 8016e08:	f021 0104 	bicge.w	r1, r1, #4
 8016e0c:	6021      	strge	r1, [r4, #0]
 8016e0e:	b90d      	cbnz	r5, 8016e14 <_printf_i+0x118>
 8016e10:	2e00      	cmp	r6, #0
 8016e12:	d04d      	beq.n	8016eb0 <_printf_i+0x1b4>
 8016e14:	4616      	mov	r6, r2
 8016e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8016e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8016e1e:	5dc7      	ldrb	r7, [r0, r7]
 8016e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016e24:	462f      	mov	r7, r5
 8016e26:	42bb      	cmp	r3, r7
 8016e28:	460d      	mov	r5, r1
 8016e2a:	d9f4      	bls.n	8016e16 <_printf_i+0x11a>
 8016e2c:	2b08      	cmp	r3, #8
 8016e2e:	d10b      	bne.n	8016e48 <_printf_i+0x14c>
 8016e30:	6823      	ldr	r3, [r4, #0]
 8016e32:	07df      	lsls	r7, r3, #31
 8016e34:	d508      	bpl.n	8016e48 <_printf_i+0x14c>
 8016e36:	6923      	ldr	r3, [r4, #16]
 8016e38:	6861      	ldr	r1, [r4, #4]
 8016e3a:	4299      	cmp	r1, r3
 8016e3c:	bfde      	ittt	le
 8016e3e:	2330      	movle	r3, #48	; 0x30
 8016e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016e48:	1b92      	subs	r2, r2, r6
 8016e4a:	6122      	str	r2, [r4, #16]
 8016e4c:	f8cd a000 	str.w	sl, [sp]
 8016e50:	464b      	mov	r3, r9
 8016e52:	aa03      	add	r2, sp, #12
 8016e54:	4621      	mov	r1, r4
 8016e56:	4640      	mov	r0, r8
 8016e58:	f7ff fee2 	bl	8016c20 <_printf_common>
 8016e5c:	3001      	adds	r0, #1
 8016e5e:	d14c      	bne.n	8016efa <_printf_i+0x1fe>
 8016e60:	f04f 30ff 	mov.w	r0, #4294967295
 8016e64:	b004      	add	sp, #16
 8016e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e6a:	4835      	ldr	r0, [pc, #212]	; (8016f40 <_printf_i+0x244>)
 8016e6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016e70:	6823      	ldr	r3, [r4, #0]
 8016e72:	680e      	ldr	r6, [r1, #0]
 8016e74:	061f      	lsls	r7, r3, #24
 8016e76:	f856 5b04 	ldr.w	r5, [r6], #4
 8016e7a:	600e      	str	r6, [r1, #0]
 8016e7c:	d514      	bpl.n	8016ea8 <_printf_i+0x1ac>
 8016e7e:	07d9      	lsls	r1, r3, #31
 8016e80:	bf44      	itt	mi
 8016e82:	f043 0320 	orrmi.w	r3, r3, #32
 8016e86:	6023      	strmi	r3, [r4, #0]
 8016e88:	b91d      	cbnz	r5, 8016e92 <_printf_i+0x196>
 8016e8a:	6823      	ldr	r3, [r4, #0]
 8016e8c:	f023 0320 	bic.w	r3, r3, #32
 8016e90:	6023      	str	r3, [r4, #0]
 8016e92:	2310      	movs	r3, #16
 8016e94:	e7b0      	b.n	8016df8 <_printf_i+0xfc>
 8016e96:	6823      	ldr	r3, [r4, #0]
 8016e98:	f043 0320 	orr.w	r3, r3, #32
 8016e9c:	6023      	str	r3, [r4, #0]
 8016e9e:	2378      	movs	r3, #120	; 0x78
 8016ea0:	4828      	ldr	r0, [pc, #160]	; (8016f44 <_printf_i+0x248>)
 8016ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016ea6:	e7e3      	b.n	8016e70 <_printf_i+0x174>
 8016ea8:	065e      	lsls	r6, r3, #25
 8016eaa:	bf48      	it	mi
 8016eac:	b2ad      	uxthmi	r5, r5
 8016eae:	e7e6      	b.n	8016e7e <_printf_i+0x182>
 8016eb0:	4616      	mov	r6, r2
 8016eb2:	e7bb      	b.n	8016e2c <_printf_i+0x130>
 8016eb4:	680b      	ldr	r3, [r1, #0]
 8016eb6:	6826      	ldr	r6, [r4, #0]
 8016eb8:	6960      	ldr	r0, [r4, #20]
 8016eba:	1d1d      	adds	r5, r3, #4
 8016ebc:	600d      	str	r5, [r1, #0]
 8016ebe:	0635      	lsls	r5, r6, #24
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	d501      	bpl.n	8016ec8 <_printf_i+0x1cc>
 8016ec4:	6018      	str	r0, [r3, #0]
 8016ec6:	e002      	b.n	8016ece <_printf_i+0x1d2>
 8016ec8:	0671      	lsls	r1, r6, #25
 8016eca:	d5fb      	bpl.n	8016ec4 <_printf_i+0x1c8>
 8016ecc:	8018      	strh	r0, [r3, #0]
 8016ece:	2300      	movs	r3, #0
 8016ed0:	6123      	str	r3, [r4, #16]
 8016ed2:	4616      	mov	r6, r2
 8016ed4:	e7ba      	b.n	8016e4c <_printf_i+0x150>
 8016ed6:	680b      	ldr	r3, [r1, #0]
 8016ed8:	1d1a      	adds	r2, r3, #4
 8016eda:	600a      	str	r2, [r1, #0]
 8016edc:	681e      	ldr	r6, [r3, #0]
 8016ede:	6862      	ldr	r2, [r4, #4]
 8016ee0:	2100      	movs	r1, #0
 8016ee2:	4630      	mov	r0, r6
 8016ee4:	f7e9 f97c 	bl	80001e0 <memchr>
 8016ee8:	b108      	cbz	r0, 8016eee <_printf_i+0x1f2>
 8016eea:	1b80      	subs	r0, r0, r6
 8016eec:	6060      	str	r0, [r4, #4]
 8016eee:	6863      	ldr	r3, [r4, #4]
 8016ef0:	6123      	str	r3, [r4, #16]
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ef8:	e7a8      	b.n	8016e4c <_printf_i+0x150>
 8016efa:	6923      	ldr	r3, [r4, #16]
 8016efc:	4632      	mov	r2, r6
 8016efe:	4649      	mov	r1, r9
 8016f00:	4640      	mov	r0, r8
 8016f02:	47d0      	blx	sl
 8016f04:	3001      	adds	r0, #1
 8016f06:	d0ab      	beq.n	8016e60 <_printf_i+0x164>
 8016f08:	6823      	ldr	r3, [r4, #0]
 8016f0a:	079b      	lsls	r3, r3, #30
 8016f0c:	d413      	bmi.n	8016f36 <_printf_i+0x23a>
 8016f0e:	68e0      	ldr	r0, [r4, #12]
 8016f10:	9b03      	ldr	r3, [sp, #12]
 8016f12:	4298      	cmp	r0, r3
 8016f14:	bfb8      	it	lt
 8016f16:	4618      	movlt	r0, r3
 8016f18:	e7a4      	b.n	8016e64 <_printf_i+0x168>
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	4632      	mov	r2, r6
 8016f1e:	4649      	mov	r1, r9
 8016f20:	4640      	mov	r0, r8
 8016f22:	47d0      	blx	sl
 8016f24:	3001      	adds	r0, #1
 8016f26:	d09b      	beq.n	8016e60 <_printf_i+0x164>
 8016f28:	3501      	adds	r5, #1
 8016f2a:	68e3      	ldr	r3, [r4, #12]
 8016f2c:	9903      	ldr	r1, [sp, #12]
 8016f2e:	1a5b      	subs	r3, r3, r1
 8016f30:	42ab      	cmp	r3, r5
 8016f32:	dcf2      	bgt.n	8016f1a <_printf_i+0x21e>
 8016f34:	e7eb      	b.n	8016f0e <_printf_i+0x212>
 8016f36:	2500      	movs	r5, #0
 8016f38:	f104 0619 	add.w	r6, r4, #25
 8016f3c:	e7f5      	b.n	8016f2a <_printf_i+0x22e>
 8016f3e:	bf00      	nop
 8016f40:	0801ca76 	.word	0x0801ca76
 8016f44:	0801ca87 	.word	0x0801ca87

08016f48 <_scanf_float>:
 8016f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f4c:	b087      	sub	sp, #28
 8016f4e:	4617      	mov	r7, r2
 8016f50:	9303      	str	r3, [sp, #12]
 8016f52:	688b      	ldr	r3, [r1, #8]
 8016f54:	1e5a      	subs	r2, r3, #1
 8016f56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016f5a:	bf83      	ittte	hi
 8016f5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016f60:	195b      	addhi	r3, r3, r5
 8016f62:	9302      	strhi	r3, [sp, #8]
 8016f64:	2300      	movls	r3, #0
 8016f66:	bf86      	itte	hi
 8016f68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016f6c:	608b      	strhi	r3, [r1, #8]
 8016f6e:	9302      	strls	r3, [sp, #8]
 8016f70:	680b      	ldr	r3, [r1, #0]
 8016f72:	468b      	mov	fp, r1
 8016f74:	2500      	movs	r5, #0
 8016f76:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016f7a:	f84b 3b1c 	str.w	r3, [fp], #28
 8016f7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016f82:	4680      	mov	r8, r0
 8016f84:	460c      	mov	r4, r1
 8016f86:	465e      	mov	r6, fp
 8016f88:	46aa      	mov	sl, r5
 8016f8a:	46a9      	mov	r9, r5
 8016f8c:	9501      	str	r5, [sp, #4]
 8016f8e:	68a2      	ldr	r2, [r4, #8]
 8016f90:	b152      	cbz	r2, 8016fa8 <_scanf_float+0x60>
 8016f92:	683b      	ldr	r3, [r7, #0]
 8016f94:	781b      	ldrb	r3, [r3, #0]
 8016f96:	2b4e      	cmp	r3, #78	; 0x4e
 8016f98:	d864      	bhi.n	8017064 <_scanf_float+0x11c>
 8016f9a:	2b40      	cmp	r3, #64	; 0x40
 8016f9c:	d83c      	bhi.n	8017018 <_scanf_float+0xd0>
 8016f9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016fa2:	b2c8      	uxtb	r0, r1
 8016fa4:	280e      	cmp	r0, #14
 8016fa6:	d93a      	bls.n	801701e <_scanf_float+0xd6>
 8016fa8:	f1b9 0f00 	cmp.w	r9, #0
 8016fac:	d003      	beq.n	8016fb6 <_scanf_float+0x6e>
 8016fae:	6823      	ldr	r3, [r4, #0]
 8016fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016fb4:	6023      	str	r3, [r4, #0]
 8016fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fba:	f1ba 0f01 	cmp.w	sl, #1
 8016fbe:	f200 8113 	bhi.w	80171e8 <_scanf_float+0x2a0>
 8016fc2:	455e      	cmp	r6, fp
 8016fc4:	f200 8105 	bhi.w	80171d2 <_scanf_float+0x28a>
 8016fc8:	2501      	movs	r5, #1
 8016fca:	4628      	mov	r0, r5
 8016fcc:	b007      	add	sp, #28
 8016fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fd2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016fd6:	2a0d      	cmp	r2, #13
 8016fd8:	d8e6      	bhi.n	8016fa8 <_scanf_float+0x60>
 8016fda:	a101      	add	r1, pc, #4	; (adr r1, 8016fe0 <_scanf_float+0x98>)
 8016fdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016fe0:	0801711f 	.word	0x0801711f
 8016fe4:	08016fa9 	.word	0x08016fa9
 8016fe8:	08016fa9 	.word	0x08016fa9
 8016fec:	08016fa9 	.word	0x08016fa9
 8016ff0:	0801717f 	.word	0x0801717f
 8016ff4:	08017157 	.word	0x08017157
 8016ff8:	08016fa9 	.word	0x08016fa9
 8016ffc:	08016fa9 	.word	0x08016fa9
 8017000:	0801712d 	.word	0x0801712d
 8017004:	08016fa9 	.word	0x08016fa9
 8017008:	08016fa9 	.word	0x08016fa9
 801700c:	08016fa9 	.word	0x08016fa9
 8017010:	08016fa9 	.word	0x08016fa9
 8017014:	080170e5 	.word	0x080170e5
 8017018:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801701c:	e7db      	b.n	8016fd6 <_scanf_float+0x8e>
 801701e:	290e      	cmp	r1, #14
 8017020:	d8c2      	bhi.n	8016fa8 <_scanf_float+0x60>
 8017022:	a001      	add	r0, pc, #4	; (adr r0, 8017028 <_scanf_float+0xe0>)
 8017024:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017028:	080170d7 	.word	0x080170d7
 801702c:	08016fa9 	.word	0x08016fa9
 8017030:	080170d7 	.word	0x080170d7
 8017034:	0801716b 	.word	0x0801716b
 8017038:	08016fa9 	.word	0x08016fa9
 801703c:	08017085 	.word	0x08017085
 8017040:	080170c1 	.word	0x080170c1
 8017044:	080170c1 	.word	0x080170c1
 8017048:	080170c1 	.word	0x080170c1
 801704c:	080170c1 	.word	0x080170c1
 8017050:	080170c1 	.word	0x080170c1
 8017054:	080170c1 	.word	0x080170c1
 8017058:	080170c1 	.word	0x080170c1
 801705c:	080170c1 	.word	0x080170c1
 8017060:	080170c1 	.word	0x080170c1
 8017064:	2b6e      	cmp	r3, #110	; 0x6e
 8017066:	d809      	bhi.n	801707c <_scanf_float+0x134>
 8017068:	2b60      	cmp	r3, #96	; 0x60
 801706a:	d8b2      	bhi.n	8016fd2 <_scanf_float+0x8a>
 801706c:	2b54      	cmp	r3, #84	; 0x54
 801706e:	d077      	beq.n	8017160 <_scanf_float+0x218>
 8017070:	2b59      	cmp	r3, #89	; 0x59
 8017072:	d199      	bne.n	8016fa8 <_scanf_float+0x60>
 8017074:	2d07      	cmp	r5, #7
 8017076:	d197      	bne.n	8016fa8 <_scanf_float+0x60>
 8017078:	2508      	movs	r5, #8
 801707a:	e029      	b.n	80170d0 <_scanf_float+0x188>
 801707c:	2b74      	cmp	r3, #116	; 0x74
 801707e:	d06f      	beq.n	8017160 <_scanf_float+0x218>
 8017080:	2b79      	cmp	r3, #121	; 0x79
 8017082:	e7f6      	b.n	8017072 <_scanf_float+0x12a>
 8017084:	6821      	ldr	r1, [r4, #0]
 8017086:	05c8      	lsls	r0, r1, #23
 8017088:	d51a      	bpl.n	80170c0 <_scanf_float+0x178>
 801708a:	9b02      	ldr	r3, [sp, #8]
 801708c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017090:	6021      	str	r1, [r4, #0]
 8017092:	f109 0901 	add.w	r9, r9, #1
 8017096:	b11b      	cbz	r3, 80170a0 <_scanf_float+0x158>
 8017098:	3b01      	subs	r3, #1
 801709a:	3201      	adds	r2, #1
 801709c:	9302      	str	r3, [sp, #8]
 801709e:	60a2      	str	r2, [r4, #8]
 80170a0:	68a3      	ldr	r3, [r4, #8]
 80170a2:	3b01      	subs	r3, #1
 80170a4:	60a3      	str	r3, [r4, #8]
 80170a6:	6923      	ldr	r3, [r4, #16]
 80170a8:	3301      	adds	r3, #1
 80170aa:	6123      	str	r3, [r4, #16]
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	3b01      	subs	r3, #1
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	607b      	str	r3, [r7, #4]
 80170b4:	f340 8084 	ble.w	80171c0 <_scanf_float+0x278>
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	3301      	adds	r3, #1
 80170bc:	603b      	str	r3, [r7, #0]
 80170be:	e766      	b.n	8016f8e <_scanf_float+0x46>
 80170c0:	eb1a 0f05 	cmn.w	sl, r5
 80170c4:	f47f af70 	bne.w	8016fa8 <_scanf_float+0x60>
 80170c8:	6822      	ldr	r2, [r4, #0]
 80170ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80170ce:	6022      	str	r2, [r4, #0]
 80170d0:	f806 3b01 	strb.w	r3, [r6], #1
 80170d4:	e7e4      	b.n	80170a0 <_scanf_float+0x158>
 80170d6:	6822      	ldr	r2, [r4, #0]
 80170d8:	0610      	lsls	r0, r2, #24
 80170da:	f57f af65 	bpl.w	8016fa8 <_scanf_float+0x60>
 80170de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80170e2:	e7f4      	b.n	80170ce <_scanf_float+0x186>
 80170e4:	f1ba 0f00 	cmp.w	sl, #0
 80170e8:	d10e      	bne.n	8017108 <_scanf_float+0x1c0>
 80170ea:	f1b9 0f00 	cmp.w	r9, #0
 80170ee:	d10e      	bne.n	801710e <_scanf_float+0x1c6>
 80170f0:	6822      	ldr	r2, [r4, #0]
 80170f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80170f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80170fa:	d108      	bne.n	801710e <_scanf_float+0x1c6>
 80170fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017100:	6022      	str	r2, [r4, #0]
 8017102:	f04f 0a01 	mov.w	sl, #1
 8017106:	e7e3      	b.n	80170d0 <_scanf_float+0x188>
 8017108:	f1ba 0f02 	cmp.w	sl, #2
 801710c:	d055      	beq.n	80171ba <_scanf_float+0x272>
 801710e:	2d01      	cmp	r5, #1
 8017110:	d002      	beq.n	8017118 <_scanf_float+0x1d0>
 8017112:	2d04      	cmp	r5, #4
 8017114:	f47f af48 	bne.w	8016fa8 <_scanf_float+0x60>
 8017118:	3501      	adds	r5, #1
 801711a:	b2ed      	uxtb	r5, r5
 801711c:	e7d8      	b.n	80170d0 <_scanf_float+0x188>
 801711e:	f1ba 0f01 	cmp.w	sl, #1
 8017122:	f47f af41 	bne.w	8016fa8 <_scanf_float+0x60>
 8017126:	f04f 0a02 	mov.w	sl, #2
 801712a:	e7d1      	b.n	80170d0 <_scanf_float+0x188>
 801712c:	b97d      	cbnz	r5, 801714e <_scanf_float+0x206>
 801712e:	f1b9 0f00 	cmp.w	r9, #0
 8017132:	f47f af3c 	bne.w	8016fae <_scanf_float+0x66>
 8017136:	6822      	ldr	r2, [r4, #0]
 8017138:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801713c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017140:	f47f af39 	bne.w	8016fb6 <_scanf_float+0x6e>
 8017144:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017148:	6022      	str	r2, [r4, #0]
 801714a:	2501      	movs	r5, #1
 801714c:	e7c0      	b.n	80170d0 <_scanf_float+0x188>
 801714e:	2d03      	cmp	r5, #3
 8017150:	d0e2      	beq.n	8017118 <_scanf_float+0x1d0>
 8017152:	2d05      	cmp	r5, #5
 8017154:	e7de      	b.n	8017114 <_scanf_float+0x1cc>
 8017156:	2d02      	cmp	r5, #2
 8017158:	f47f af26 	bne.w	8016fa8 <_scanf_float+0x60>
 801715c:	2503      	movs	r5, #3
 801715e:	e7b7      	b.n	80170d0 <_scanf_float+0x188>
 8017160:	2d06      	cmp	r5, #6
 8017162:	f47f af21 	bne.w	8016fa8 <_scanf_float+0x60>
 8017166:	2507      	movs	r5, #7
 8017168:	e7b2      	b.n	80170d0 <_scanf_float+0x188>
 801716a:	6822      	ldr	r2, [r4, #0]
 801716c:	0591      	lsls	r1, r2, #22
 801716e:	f57f af1b 	bpl.w	8016fa8 <_scanf_float+0x60>
 8017172:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017176:	6022      	str	r2, [r4, #0]
 8017178:	f8cd 9004 	str.w	r9, [sp, #4]
 801717c:	e7a8      	b.n	80170d0 <_scanf_float+0x188>
 801717e:	6822      	ldr	r2, [r4, #0]
 8017180:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017184:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017188:	d006      	beq.n	8017198 <_scanf_float+0x250>
 801718a:	0550      	lsls	r0, r2, #21
 801718c:	f57f af0c 	bpl.w	8016fa8 <_scanf_float+0x60>
 8017190:	f1b9 0f00 	cmp.w	r9, #0
 8017194:	f43f af0f 	beq.w	8016fb6 <_scanf_float+0x6e>
 8017198:	0591      	lsls	r1, r2, #22
 801719a:	bf58      	it	pl
 801719c:	9901      	ldrpl	r1, [sp, #4]
 801719e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80171a2:	bf58      	it	pl
 80171a4:	eba9 0101 	subpl.w	r1, r9, r1
 80171a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80171ac:	bf58      	it	pl
 80171ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80171b2:	6022      	str	r2, [r4, #0]
 80171b4:	f04f 0900 	mov.w	r9, #0
 80171b8:	e78a      	b.n	80170d0 <_scanf_float+0x188>
 80171ba:	f04f 0a03 	mov.w	sl, #3
 80171be:	e787      	b.n	80170d0 <_scanf_float+0x188>
 80171c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80171c4:	4639      	mov	r1, r7
 80171c6:	4640      	mov	r0, r8
 80171c8:	4798      	blx	r3
 80171ca:	2800      	cmp	r0, #0
 80171cc:	f43f aedf 	beq.w	8016f8e <_scanf_float+0x46>
 80171d0:	e6ea      	b.n	8016fa8 <_scanf_float+0x60>
 80171d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80171d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80171da:	463a      	mov	r2, r7
 80171dc:	4640      	mov	r0, r8
 80171de:	4798      	blx	r3
 80171e0:	6923      	ldr	r3, [r4, #16]
 80171e2:	3b01      	subs	r3, #1
 80171e4:	6123      	str	r3, [r4, #16]
 80171e6:	e6ec      	b.n	8016fc2 <_scanf_float+0x7a>
 80171e8:	1e6b      	subs	r3, r5, #1
 80171ea:	2b06      	cmp	r3, #6
 80171ec:	d825      	bhi.n	801723a <_scanf_float+0x2f2>
 80171ee:	2d02      	cmp	r5, #2
 80171f0:	d836      	bhi.n	8017260 <_scanf_float+0x318>
 80171f2:	455e      	cmp	r6, fp
 80171f4:	f67f aee8 	bls.w	8016fc8 <_scanf_float+0x80>
 80171f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80171fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017200:	463a      	mov	r2, r7
 8017202:	4640      	mov	r0, r8
 8017204:	4798      	blx	r3
 8017206:	6923      	ldr	r3, [r4, #16]
 8017208:	3b01      	subs	r3, #1
 801720a:	6123      	str	r3, [r4, #16]
 801720c:	e7f1      	b.n	80171f2 <_scanf_float+0x2aa>
 801720e:	9802      	ldr	r0, [sp, #8]
 8017210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017214:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017218:	9002      	str	r0, [sp, #8]
 801721a:	463a      	mov	r2, r7
 801721c:	4640      	mov	r0, r8
 801721e:	4798      	blx	r3
 8017220:	6923      	ldr	r3, [r4, #16]
 8017222:	3b01      	subs	r3, #1
 8017224:	6123      	str	r3, [r4, #16]
 8017226:	f10a 3aff 	add.w	sl, sl, #4294967295
 801722a:	fa5f fa8a 	uxtb.w	sl, sl
 801722e:	f1ba 0f02 	cmp.w	sl, #2
 8017232:	d1ec      	bne.n	801720e <_scanf_float+0x2c6>
 8017234:	3d03      	subs	r5, #3
 8017236:	b2ed      	uxtb	r5, r5
 8017238:	1b76      	subs	r6, r6, r5
 801723a:	6823      	ldr	r3, [r4, #0]
 801723c:	05da      	lsls	r2, r3, #23
 801723e:	d52f      	bpl.n	80172a0 <_scanf_float+0x358>
 8017240:	055b      	lsls	r3, r3, #21
 8017242:	d510      	bpl.n	8017266 <_scanf_float+0x31e>
 8017244:	455e      	cmp	r6, fp
 8017246:	f67f aebf 	bls.w	8016fc8 <_scanf_float+0x80>
 801724a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801724e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017252:	463a      	mov	r2, r7
 8017254:	4640      	mov	r0, r8
 8017256:	4798      	blx	r3
 8017258:	6923      	ldr	r3, [r4, #16]
 801725a:	3b01      	subs	r3, #1
 801725c:	6123      	str	r3, [r4, #16]
 801725e:	e7f1      	b.n	8017244 <_scanf_float+0x2fc>
 8017260:	46aa      	mov	sl, r5
 8017262:	9602      	str	r6, [sp, #8]
 8017264:	e7df      	b.n	8017226 <_scanf_float+0x2de>
 8017266:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801726a:	6923      	ldr	r3, [r4, #16]
 801726c:	2965      	cmp	r1, #101	; 0x65
 801726e:	f103 33ff 	add.w	r3, r3, #4294967295
 8017272:	f106 35ff 	add.w	r5, r6, #4294967295
 8017276:	6123      	str	r3, [r4, #16]
 8017278:	d00c      	beq.n	8017294 <_scanf_float+0x34c>
 801727a:	2945      	cmp	r1, #69	; 0x45
 801727c:	d00a      	beq.n	8017294 <_scanf_float+0x34c>
 801727e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017282:	463a      	mov	r2, r7
 8017284:	4640      	mov	r0, r8
 8017286:	4798      	blx	r3
 8017288:	6923      	ldr	r3, [r4, #16]
 801728a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801728e:	3b01      	subs	r3, #1
 8017290:	1eb5      	subs	r5, r6, #2
 8017292:	6123      	str	r3, [r4, #16]
 8017294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017298:	463a      	mov	r2, r7
 801729a:	4640      	mov	r0, r8
 801729c:	4798      	blx	r3
 801729e:	462e      	mov	r6, r5
 80172a0:	6825      	ldr	r5, [r4, #0]
 80172a2:	f015 0510 	ands.w	r5, r5, #16
 80172a6:	d158      	bne.n	801735a <_scanf_float+0x412>
 80172a8:	7035      	strb	r5, [r6, #0]
 80172aa:	6823      	ldr	r3, [r4, #0]
 80172ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80172b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80172b4:	d11c      	bne.n	80172f0 <_scanf_float+0x3a8>
 80172b6:	9b01      	ldr	r3, [sp, #4]
 80172b8:	454b      	cmp	r3, r9
 80172ba:	eba3 0209 	sub.w	r2, r3, r9
 80172be:	d124      	bne.n	801730a <_scanf_float+0x3c2>
 80172c0:	2200      	movs	r2, #0
 80172c2:	4659      	mov	r1, fp
 80172c4:	4640      	mov	r0, r8
 80172c6:	f000 fee1 	bl	801808c <_strtod_r>
 80172ca:	9b03      	ldr	r3, [sp, #12]
 80172cc:	6821      	ldr	r1, [r4, #0]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	f011 0f02 	tst.w	r1, #2
 80172d4:	ec57 6b10 	vmov	r6, r7, d0
 80172d8:	f103 0204 	add.w	r2, r3, #4
 80172dc:	d020      	beq.n	8017320 <_scanf_float+0x3d8>
 80172de:	9903      	ldr	r1, [sp, #12]
 80172e0:	600a      	str	r2, [r1, #0]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	e9c3 6700 	strd	r6, r7, [r3]
 80172e8:	68e3      	ldr	r3, [r4, #12]
 80172ea:	3301      	adds	r3, #1
 80172ec:	60e3      	str	r3, [r4, #12]
 80172ee:	e66c      	b.n	8016fca <_scanf_float+0x82>
 80172f0:	9b04      	ldr	r3, [sp, #16]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d0e4      	beq.n	80172c0 <_scanf_float+0x378>
 80172f6:	9905      	ldr	r1, [sp, #20]
 80172f8:	230a      	movs	r3, #10
 80172fa:	462a      	mov	r2, r5
 80172fc:	3101      	adds	r1, #1
 80172fe:	4640      	mov	r0, r8
 8017300:	f000 ff4e 	bl	80181a0 <_strtol_r>
 8017304:	9b04      	ldr	r3, [sp, #16]
 8017306:	9e05      	ldr	r6, [sp, #20]
 8017308:	1ac2      	subs	r2, r0, r3
 801730a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801730e:	429e      	cmp	r6, r3
 8017310:	bf28      	it	cs
 8017312:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017316:	4912      	ldr	r1, [pc, #72]	; (8017360 <_scanf_float+0x418>)
 8017318:	4630      	mov	r0, r6
 801731a:	f000 f86f 	bl	80173fc <siprintf>
 801731e:	e7cf      	b.n	80172c0 <_scanf_float+0x378>
 8017320:	f011 0f04 	tst.w	r1, #4
 8017324:	9903      	ldr	r1, [sp, #12]
 8017326:	600a      	str	r2, [r1, #0]
 8017328:	d1db      	bne.n	80172e2 <_scanf_float+0x39a>
 801732a:	f8d3 8000 	ldr.w	r8, [r3]
 801732e:	ee10 2a10 	vmov	r2, s0
 8017332:	ee10 0a10 	vmov	r0, s0
 8017336:	463b      	mov	r3, r7
 8017338:	4639      	mov	r1, r7
 801733a:	f7e9 fbf7 	bl	8000b2c <__aeabi_dcmpun>
 801733e:	b128      	cbz	r0, 801734c <_scanf_float+0x404>
 8017340:	4808      	ldr	r0, [pc, #32]	; (8017364 <_scanf_float+0x41c>)
 8017342:	f000 f821 	bl	8017388 <nanf>
 8017346:	ed88 0a00 	vstr	s0, [r8]
 801734a:	e7cd      	b.n	80172e8 <_scanf_float+0x3a0>
 801734c:	4630      	mov	r0, r6
 801734e:	4639      	mov	r1, r7
 8017350:	f7e9 fc4a 	bl	8000be8 <__aeabi_d2f>
 8017354:	f8c8 0000 	str.w	r0, [r8]
 8017358:	e7c6      	b.n	80172e8 <_scanf_float+0x3a0>
 801735a:	2500      	movs	r5, #0
 801735c:	e635      	b.n	8016fca <_scanf_float+0x82>
 801735e:	bf00      	nop
 8017360:	0801ca98 	.word	0x0801ca98
 8017364:	0801ceb0 	.word	0x0801ceb0

08017368 <_sbrk_r>:
 8017368:	b538      	push	{r3, r4, r5, lr}
 801736a:	4d06      	ldr	r5, [pc, #24]	; (8017384 <_sbrk_r+0x1c>)
 801736c:	2300      	movs	r3, #0
 801736e:	4604      	mov	r4, r0
 8017370:	4608      	mov	r0, r1
 8017372:	602b      	str	r3, [r5, #0]
 8017374:	f7f4 fa00 	bl	800b778 <_sbrk>
 8017378:	1c43      	adds	r3, r0, #1
 801737a:	d102      	bne.n	8017382 <_sbrk_r+0x1a>
 801737c:	682b      	ldr	r3, [r5, #0]
 801737e:	b103      	cbz	r3, 8017382 <_sbrk_r+0x1a>
 8017380:	6023      	str	r3, [r4, #0]
 8017382:	bd38      	pop	{r3, r4, r5, pc}
 8017384:	20011b74 	.word	0x20011b74

08017388 <nanf>:
 8017388:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017390 <nanf+0x8>
 801738c:	4770      	bx	lr
 801738e:	bf00      	nop
 8017390:	7fc00000 	.word	0x7fc00000

08017394 <sniprintf>:
 8017394:	b40c      	push	{r2, r3}
 8017396:	b530      	push	{r4, r5, lr}
 8017398:	4b17      	ldr	r3, [pc, #92]	; (80173f8 <sniprintf+0x64>)
 801739a:	1e0c      	subs	r4, r1, #0
 801739c:	681d      	ldr	r5, [r3, #0]
 801739e:	b09d      	sub	sp, #116	; 0x74
 80173a0:	da08      	bge.n	80173b4 <sniprintf+0x20>
 80173a2:	238b      	movs	r3, #139	; 0x8b
 80173a4:	602b      	str	r3, [r5, #0]
 80173a6:	f04f 30ff 	mov.w	r0, #4294967295
 80173aa:	b01d      	add	sp, #116	; 0x74
 80173ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173b0:	b002      	add	sp, #8
 80173b2:	4770      	bx	lr
 80173b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80173b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80173bc:	bf14      	ite	ne
 80173be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80173c2:	4623      	moveq	r3, r4
 80173c4:	9304      	str	r3, [sp, #16]
 80173c6:	9307      	str	r3, [sp, #28]
 80173c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173cc:	9002      	str	r0, [sp, #8]
 80173ce:	9006      	str	r0, [sp, #24]
 80173d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80173d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80173d6:	ab21      	add	r3, sp, #132	; 0x84
 80173d8:	a902      	add	r1, sp, #8
 80173da:	4628      	mov	r0, r5
 80173dc:	9301      	str	r3, [sp, #4]
 80173de:	f002 fe13 	bl	801a008 <_svfiprintf_r>
 80173e2:	1c43      	adds	r3, r0, #1
 80173e4:	bfbc      	itt	lt
 80173e6:	238b      	movlt	r3, #139	; 0x8b
 80173e8:	602b      	strlt	r3, [r5, #0]
 80173ea:	2c00      	cmp	r4, #0
 80173ec:	d0dd      	beq.n	80173aa <sniprintf+0x16>
 80173ee:	9b02      	ldr	r3, [sp, #8]
 80173f0:	2200      	movs	r2, #0
 80173f2:	701a      	strb	r2, [r3, #0]
 80173f4:	e7d9      	b.n	80173aa <sniprintf+0x16>
 80173f6:	bf00      	nop
 80173f8:	20004210 	.word	0x20004210

080173fc <siprintf>:
 80173fc:	b40e      	push	{r1, r2, r3}
 80173fe:	b500      	push	{lr}
 8017400:	b09c      	sub	sp, #112	; 0x70
 8017402:	ab1d      	add	r3, sp, #116	; 0x74
 8017404:	9002      	str	r0, [sp, #8]
 8017406:	9006      	str	r0, [sp, #24]
 8017408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801740c:	4809      	ldr	r0, [pc, #36]	; (8017434 <siprintf+0x38>)
 801740e:	9107      	str	r1, [sp, #28]
 8017410:	9104      	str	r1, [sp, #16]
 8017412:	4909      	ldr	r1, [pc, #36]	; (8017438 <siprintf+0x3c>)
 8017414:	f853 2b04 	ldr.w	r2, [r3], #4
 8017418:	9105      	str	r1, [sp, #20]
 801741a:	6800      	ldr	r0, [r0, #0]
 801741c:	9301      	str	r3, [sp, #4]
 801741e:	a902      	add	r1, sp, #8
 8017420:	f002 fdf2 	bl	801a008 <_svfiprintf_r>
 8017424:	9b02      	ldr	r3, [sp, #8]
 8017426:	2200      	movs	r2, #0
 8017428:	701a      	strb	r2, [r3, #0]
 801742a:	b01c      	add	sp, #112	; 0x70
 801742c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017430:	b003      	add	sp, #12
 8017432:	4770      	bx	lr
 8017434:	20004210 	.word	0x20004210
 8017438:	ffff0208 	.word	0xffff0208

0801743c <sulp>:
 801743c:	b570      	push	{r4, r5, r6, lr}
 801743e:	4604      	mov	r4, r0
 8017440:	460d      	mov	r5, r1
 8017442:	ec45 4b10 	vmov	d0, r4, r5
 8017446:	4616      	mov	r6, r2
 8017448:	f002 fc24 	bl	8019c94 <__ulp>
 801744c:	ec51 0b10 	vmov	r0, r1, d0
 8017450:	b17e      	cbz	r6, 8017472 <sulp+0x36>
 8017452:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017456:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801745a:	2b00      	cmp	r3, #0
 801745c:	dd09      	ble.n	8017472 <sulp+0x36>
 801745e:	051b      	lsls	r3, r3, #20
 8017460:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017464:	2400      	movs	r4, #0
 8017466:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801746a:	4622      	mov	r2, r4
 801746c:	462b      	mov	r3, r5
 801746e:	f7e9 f8c3 	bl	80005f8 <__aeabi_dmul>
 8017472:	bd70      	pop	{r4, r5, r6, pc}
 8017474:	0000      	movs	r0, r0
	...

08017478 <_strtod_l>:
 8017478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801747c:	b0a3      	sub	sp, #140	; 0x8c
 801747e:	461f      	mov	r7, r3
 8017480:	2300      	movs	r3, #0
 8017482:	931e      	str	r3, [sp, #120]	; 0x78
 8017484:	4ba4      	ldr	r3, [pc, #656]	; (8017718 <_strtod_l+0x2a0>)
 8017486:	9219      	str	r2, [sp, #100]	; 0x64
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	9307      	str	r3, [sp, #28]
 801748c:	4604      	mov	r4, r0
 801748e:	4618      	mov	r0, r3
 8017490:	4688      	mov	r8, r1
 8017492:	f7e8 fe9d 	bl	80001d0 <strlen>
 8017496:	f04f 0a00 	mov.w	sl, #0
 801749a:	4605      	mov	r5, r0
 801749c:	f04f 0b00 	mov.w	fp, #0
 80174a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80174a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80174a6:	781a      	ldrb	r2, [r3, #0]
 80174a8:	2a2b      	cmp	r2, #43	; 0x2b
 80174aa:	d04c      	beq.n	8017546 <_strtod_l+0xce>
 80174ac:	d839      	bhi.n	8017522 <_strtod_l+0xaa>
 80174ae:	2a0d      	cmp	r2, #13
 80174b0:	d832      	bhi.n	8017518 <_strtod_l+0xa0>
 80174b2:	2a08      	cmp	r2, #8
 80174b4:	d832      	bhi.n	801751c <_strtod_l+0xa4>
 80174b6:	2a00      	cmp	r2, #0
 80174b8:	d03c      	beq.n	8017534 <_strtod_l+0xbc>
 80174ba:	2300      	movs	r3, #0
 80174bc:	930e      	str	r3, [sp, #56]	; 0x38
 80174be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80174c0:	7833      	ldrb	r3, [r6, #0]
 80174c2:	2b30      	cmp	r3, #48	; 0x30
 80174c4:	f040 80b4 	bne.w	8017630 <_strtod_l+0x1b8>
 80174c8:	7873      	ldrb	r3, [r6, #1]
 80174ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80174ce:	2b58      	cmp	r3, #88	; 0x58
 80174d0:	d16c      	bne.n	80175ac <_strtod_l+0x134>
 80174d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174d4:	9301      	str	r3, [sp, #4]
 80174d6:	ab1e      	add	r3, sp, #120	; 0x78
 80174d8:	9702      	str	r7, [sp, #8]
 80174da:	9300      	str	r3, [sp, #0]
 80174dc:	4a8f      	ldr	r2, [pc, #572]	; (801771c <_strtod_l+0x2a4>)
 80174de:	ab1f      	add	r3, sp, #124	; 0x7c
 80174e0:	a91d      	add	r1, sp, #116	; 0x74
 80174e2:	4620      	mov	r0, r4
 80174e4:	f001 fd40 	bl	8018f68 <__gethex>
 80174e8:	f010 0707 	ands.w	r7, r0, #7
 80174ec:	4605      	mov	r5, r0
 80174ee:	d005      	beq.n	80174fc <_strtod_l+0x84>
 80174f0:	2f06      	cmp	r7, #6
 80174f2:	d12a      	bne.n	801754a <_strtod_l+0xd2>
 80174f4:	3601      	adds	r6, #1
 80174f6:	2300      	movs	r3, #0
 80174f8:	961d      	str	r6, [sp, #116]	; 0x74
 80174fa:	930e      	str	r3, [sp, #56]	; 0x38
 80174fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80174fe:	2b00      	cmp	r3, #0
 8017500:	f040 8596 	bne.w	8018030 <_strtod_l+0xbb8>
 8017504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017506:	b1db      	cbz	r3, 8017540 <_strtod_l+0xc8>
 8017508:	4652      	mov	r2, sl
 801750a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801750e:	ec43 2b10 	vmov	d0, r2, r3
 8017512:	b023      	add	sp, #140	; 0x8c
 8017514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017518:	2a20      	cmp	r2, #32
 801751a:	d1ce      	bne.n	80174ba <_strtod_l+0x42>
 801751c:	3301      	adds	r3, #1
 801751e:	931d      	str	r3, [sp, #116]	; 0x74
 8017520:	e7c0      	b.n	80174a4 <_strtod_l+0x2c>
 8017522:	2a2d      	cmp	r2, #45	; 0x2d
 8017524:	d1c9      	bne.n	80174ba <_strtod_l+0x42>
 8017526:	2201      	movs	r2, #1
 8017528:	920e      	str	r2, [sp, #56]	; 0x38
 801752a:	1c5a      	adds	r2, r3, #1
 801752c:	921d      	str	r2, [sp, #116]	; 0x74
 801752e:	785b      	ldrb	r3, [r3, #1]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d1c4      	bne.n	80174be <_strtod_l+0x46>
 8017534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017536:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801753a:	2b00      	cmp	r3, #0
 801753c:	f040 8576 	bne.w	801802c <_strtod_l+0xbb4>
 8017540:	4652      	mov	r2, sl
 8017542:	465b      	mov	r3, fp
 8017544:	e7e3      	b.n	801750e <_strtod_l+0x96>
 8017546:	2200      	movs	r2, #0
 8017548:	e7ee      	b.n	8017528 <_strtod_l+0xb0>
 801754a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801754c:	b13a      	cbz	r2, 801755e <_strtod_l+0xe6>
 801754e:	2135      	movs	r1, #53	; 0x35
 8017550:	a820      	add	r0, sp, #128	; 0x80
 8017552:	f002 fcaa 	bl	8019eaa <__copybits>
 8017556:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017558:	4620      	mov	r0, r4
 801755a:	f002 f86f 	bl	801963c <_Bfree>
 801755e:	3f01      	subs	r7, #1
 8017560:	2f05      	cmp	r7, #5
 8017562:	d807      	bhi.n	8017574 <_strtod_l+0xfc>
 8017564:	e8df f007 	tbb	[pc, r7]
 8017568:	1d180b0e 	.word	0x1d180b0e
 801756c:	030e      	.short	0x030e
 801756e:	f04f 0b00 	mov.w	fp, #0
 8017572:	46da      	mov	sl, fp
 8017574:	0728      	lsls	r0, r5, #28
 8017576:	d5c1      	bpl.n	80174fc <_strtod_l+0x84>
 8017578:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801757c:	e7be      	b.n	80174fc <_strtod_l+0x84>
 801757e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017582:	e7f7      	b.n	8017574 <_strtod_l+0xfc>
 8017584:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017588:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801758a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801758e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017592:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017596:	e7ed      	b.n	8017574 <_strtod_l+0xfc>
 8017598:	f8df b184 	ldr.w	fp, [pc, #388]	; 8017720 <_strtod_l+0x2a8>
 801759c:	f04f 0a00 	mov.w	sl, #0
 80175a0:	e7e8      	b.n	8017574 <_strtod_l+0xfc>
 80175a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80175a6:	f04f 3aff 	mov.w	sl, #4294967295
 80175aa:	e7e3      	b.n	8017574 <_strtod_l+0xfc>
 80175ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80175ae:	1c5a      	adds	r2, r3, #1
 80175b0:	921d      	str	r2, [sp, #116]	; 0x74
 80175b2:	785b      	ldrb	r3, [r3, #1]
 80175b4:	2b30      	cmp	r3, #48	; 0x30
 80175b6:	d0f9      	beq.n	80175ac <_strtod_l+0x134>
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d09f      	beq.n	80174fc <_strtod_l+0x84>
 80175bc:	2301      	movs	r3, #1
 80175be:	f04f 0900 	mov.w	r9, #0
 80175c2:	9304      	str	r3, [sp, #16]
 80175c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80175c6:	930a      	str	r3, [sp, #40]	; 0x28
 80175c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80175cc:	464f      	mov	r7, r9
 80175ce:	220a      	movs	r2, #10
 80175d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80175d2:	7806      	ldrb	r6, [r0, #0]
 80175d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80175d8:	b2d9      	uxtb	r1, r3
 80175da:	2909      	cmp	r1, #9
 80175dc:	d92a      	bls.n	8017634 <_strtod_l+0x1bc>
 80175de:	9907      	ldr	r1, [sp, #28]
 80175e0:	462a      	mov	r2, r5
 80175e2:	f002 fe19 	bl	801a218 <strncmp>
 80175e6:	b398      	cbz	r0, 8017650 <_strtod_l+0x1d8>
 80175e8:	2000      	movs	r0, #0
 80175ea:	4633      	mov	r3, r6
 80175ec:	463d      	mov	r5, r7
 80175ee:	9007      	str	r0, [sp, #28]
 80175f0:	4602      	mov	r2, r0
 80175f2:	2b65      	cmp	r3, #101	; 0x65
 80175f4:	d001      	beq.n	80175fa <_strtod_l+0x182>
 80175f6:	2b45      	cmp	r3, #69	; 0x45
 80175f8:	d118      	bne.n	801762c <_strtod_l+0x1b4>
 80175fa:	b91d      	cbnz	r5, 8017604 <_strtod_l+0x18c>
 80175fc:	9b04      	ldr	r3, [sp, #16]
 80175fe:	4303      	orrs	r3, r0
 8017600:	d098      	beq.n	8017534 <_strtod_l+0xbc>
 8017602:	2500      	movs	r5, #0
 8017604:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017608:	f108 0301 	add.w	r3, r8, #1
 801760c:	931d      	str	r3, [sp, #116]	; 0x74
 801760e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017612:	2b2b      	cmp	r3, #43	; 0x2b
 8017614:	d075      	beq.n	8017702 <_strtod_l+0x28a>
 8017616:	2b2d      	cmp	r3, #45	; 0x2d
 8017618:	d07b      	beq.n	8017712 <_strtod_l+0x29a>
 801761a:	f04f 0c00 	mov.w	ip, #0
 801761e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017622:	2909      	cmp	r1, #9
 8017624:	f240 8082 	bls.w	801772c <_strtod_l+0x2b4>
 8017628:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801762c:	2600      	movs	r6, #0
 801762e:	e09d      	b.n	801776c <_strtod_l+0x2f4>
 8017630:	2300      	movs	r3, #0
 8017632:	e7c4      	b.n	80175be <_strtod_l+0x146>
 8017634:	2f08      	cmp	r7, #8
 8017636:	bfd8      	it	le
 8017638:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801763a:	f100 0001 	add.w	r0, r0, #1
 801763e:	bfda      	itte	le
 8017640:	fb02 3301 	mlale	r3, r2, r1, r3
 8017644:	9309      	strle	r3, [sp, #36]	; 0x24
 8017646:	fb02 3909 	mlagt	r9, r2, r9, r3
 801764a:	3701      	adds	r7, #1
 801764c:	901d      	str	r0, [sp, #116]	; 0x74
 801764e:	e7bf      	b.n	80175d0 <_strtod_l+0x158>
 8017650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017652:	195a      	adds	r2, r3, r5
 8017654:	921d      	str	r2, [sp, #116]	; 0x74
 8017656:	5d5b      	ldrb	r3, [r3, r5]
 8017658:	2f00      	cmp	r7, #0
 801765a:	d037      	beq.n	80176cc <_strtod_l+0x254>
 801765c:	9007      	str	r0, [sp, #28]
 801765e:	463d      	mov	r5, r7
 8017660:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017664:	2a09      	cmp	r2, #9
 8017666:	d912      	bls.n	801768e <_strtod_l+0x216>
 8017668:	2201      	movs	r2, #1
 801766a:	e7c2      	b.n	80175f2 <_strtod_l+0x17a>
 801766c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801766e:	1c5a      	adds	r2, r3, #1
 8017670:	921d      	str	r2, [sp, #116]	; 0x74
 8017672:	785b      	ldrb	r3, [r3, #1]
 8017674:	3001      	adds	r0, #1
 8017676:	2b30      	cmp	r3, #48	; 0x30
 8017678:	d0f8      	beq.n	801766c <_strtod_l+0x1f4>
 801767a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801767e:	2a08      	cmp	r2, #8
 8017680:	f200 84db 	bhi.w	801803a <_strtod_l+0xbc2>
 8017684:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017686:	9007      	str	r0, [sp, #28]
 8017688:	2000      	movs	r0, #0
 801768a:	920a      	str	r2, [sp, #40]	; 0x28
 801768c:	4605      	mov	r5, r0
 801768e:	3b30      	subs	r3, #48	; 0x30
 8017690:	f100 0201 	add.w	r2, r0, #1
 8017694:	d014      	beq.n	80176c0 <_strtod_l+0x248>
 8017696:	9907      	ldr	r1, [sp, #28]
 8017698:	4411      	add	r1, r2
 801769a:	9107      	str	r1, [sp, #28]
 801769c:	462a      	mov	r2, r5
 801769e:	eb00 0e05 	add.w	lr, r0, r5
 80176a2:	210a      	movs	r1, #10
 80176a4:	4572      	cmp	r2, lr
 80176a6:	d113      	bne.n	80176d0 <_strtod_l+0x258>
 80176a8:	182a      	adds	r2, r5, r0
 80176aa:	2a08      	cmp	r2, #8
 80176ac:	f105 0501 	add.w	r5, r5, #1
 80176b0:	4405      	add	r5, r0
 80176b2:	dc1c      	bgt.n	80176ee <_strtod_l+0x276>
 80176b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80176b6:	220a      	movs	r2, #10
 80176b8:	fb02 3301 	mla	r3, r2, r1, r3
 80176bc:	9309      	str	r3, [sp, #36]	; 0x24
 80176be:	2200      	movs	r2, #0
 80176c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80176c2:	1c59      	adds	r1, r3, #1
 80176c4:	911d      	str	r1, [sp, #116]	; 0x74
 80176c6:	785b      	ldrb	r3, [r3, #1]
 80176c8:	4610      	mov	r0, r2
 80176ca:	e7c9      	b.n	8017660 <_strtod_l+0x1e8>
 80176cc:	4638      	mov	r0, r7
 80176ce:	e7d2      	b.n	8017676 <_strtod_l+0x1fe>
 80176d0:	2a08      	cmp	r2, #8
 80176d2:	dc04      	bgt.n	80176de <_strtod_l+0x266>
 80176d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80176d6:	434e      	muls	r6, r1
 80176d8:	9609      	str	r6, [sp, #36]	; 0x24
 80176da:	3201      	adds	r2, #1
 80176dc:	e7e2      	b.n	80176a4 <_strtod_l+0x22c>
 80176de:	f102 0c01 	add.w	ip, r2, #1
 80176e2:	f1bc 0f10 	cmp.w	ip, #16
 80176e6:	bfd8      	it	le
 80176e8:	fb01 f909 	mulle.w	r9, r1, r9
 80176ec:	e7f5      	b.n	80176da <_strtod_l+0x262>
 80176ee:	2d10      	cmp	r5, #16
 80176f0:	bfdc      	itt	le
 80176f2:	220a      	movle	r2, #10
 80176f4:	fb02 3909 	mlale	r9, r2, r9, r3
 80176f8:	e7e1      	b.n	80176be <_strtod_l+0x246>
 80176fa:	2300      	movs	r3, #0
 80176fc:	9307      	str	r3, [sp, #28]
 80176fe:	2201      	movs	r2, #1
 8017700:	e77c      	b.n	80175fc <_strtod_l+0x184>
 8017702:	f04f 0c00 	mov.w	ip, #0
 8017706:	f108 0302 	add.w	r3, r8, #2
 801770a:	931d      	str	r3, [sp, #116]	; 0x74
 801770c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017710:	e785      	b.n	801761e <_strtod_l+0x1a6>
 8017712:	f04f 0c01 	mov.w	ip, #1
 8017716:	e7f6      	b.n	8017706 <_strtod_l+0x28e>
 8017718:	0801ccf0 	.word	0x0801ccf0
 801771c:	0801caa0 	.word	0x0801caa0
 8017720:	7ff00000 	.word	0x7ff00000
 8017724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017726:	1c59      	adds	r1, r3, #1
 8017728:	911d      	str	r1, [sp, #116]	; 0x74
 801772a:	785b      	ldrb	r3, [r3, #1]
 801772c:	2b30      	cmp	r3, #48	; 0x30
 801772e:	d0f9      	beq.n	8017724 <_strtod_l+0x2ac>
 8017730:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8017734:	2908      	cmp	r1, #8
 8017736:	f63f af79 	bhi.w	801762c <_strtod_l+0x1b4>
 801773a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801773e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017740:	9308      	str	r3, [sp, #32]
 8017742:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017744:	1c59      	adds	r1, r3, #1
 8017746:	911d      	str	r1, [sp, #116]	; 0x74
 8017748:	785b      	ldrb	r3, [r3, #1]
 801774a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801774e:	2e09      	cmp	r6, #9
 8017750:	d937      	bls.n	80177c2 <_strtod_l+0x34a>
 8017752:	9e08      	ldr	r6, [sp, #32]
 8017754:	1b89      	subs	r1, r1, r6
 8017756:	2908      	cmp	r1, #8
 8017758:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801775c:	dc02      	bgt.n	8017764 <_strtod_l+0x2ec>
 801775e:	4576      	cmp	r6, lr
 8017760:	bfa8      	it	ge
 8017762:	4676      	movge	r6, lr
 8017764:	f1bc 0f00 	cmp.w	ip, #0
 8017768:	d000      	beq.n	801776c <_strtod_l+0x2f4>
 801776a:	4276      	negs	r6, r6
 801776c:	2d00      	cmp	r5, #0
 801776e:	d14f      	bne.n	8017810 <_strtod_l+0x398>
 8017770:	9904      	ldr	r1, [sp, #16]
 8017772:	4301      	orrs	r1, r0
 8017774:	f47f aec2 	bne.w	80174fc <_strtod_l+0x84>
 8017778:	2a00      	cmp	r2, #0
 801777a:	f47f aedb 	bne.w	8017534 <_strtod_l+0xbc>
 801777e:	2b69      	cmp	r3, #105	; 0x69
 8017780:	d027      	beq.n	80177d2 <_strtod_l+0x35a>
 8017782:	dc24      	bgt.n	80177ce <_strtod_l+0x356>
 8017784:	2b49      	cmp	r3, #73	; 0x49
 8017786:	d024      	beq.n	80177d2 <_strtod_l+0x35a>
 8017788:	2b4e      	cmp	r3, #78	; 0x4e
 801778a:	f47f aed3 	bne.w	8017534 <_strtod_l+0xbc>
 801778e:	499e      	ldr	r1, [pc, #632]	; (8017a08 <_strtod_l+0x590>)
 8017790:	a81d      	add	r0, sp, #116	; 0x74
 8017792:	f001 fe41 	bl	8019418 <__match>
 8017796:	2800      	cmp	r0, #0
 8017798:	f43f aecc 	beq.w	8017534 <_strtod_l+0xbc>
 801779c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801779e:	781b      	ldrb	r3, [r3, #0]
 80177a0:	2b28      	cmp	r3, #40	; 0x28
 80177a2:	d12d      	bne.n	8017800 <_strtod_l+0x388>
 80177a4:	4999      	ldr	r1, [pc, #612]	; (8017a0c <_strtod_l+0x594>)
 80177a6:	aa20      	add	r2, sp, #128	; 0x80
 80177a8:	a81d      	add	r0, sp, #116	; 0x74
 80177aa:	f001 fe49 	bl	8019440 <__hexnan>
 80177ae:	2805      	cmp	r0, #5
 80177b0:	d126      	bne.n	8017800 <_strtod_l+0x388>
 80177b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80177b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80177b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80177bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80177c0:	e69c      	b.n	80174fc <_strtod_l+0x84>
 80177c2:	210a      	movs	r1, #10
 80177c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80177c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80177cc:	e7b9      	b.n	8017742 <_strtod_l+0x2ca>
 80177ce:	2b6e      	cmp	r3, #110	; 0x6e
 80177d0:	e7db      	b.n	801778a <_strtod_l+0x312>
 80177d2:	498f      	ldr	r1, [pc, #572]	; (8017a10 <_strtod_l+0x598>)
 80177d4:	a81d      	add	r0, sp, #116	; 0x74
 80177d6:	f001 fe1f 	bl	8019418 <__match>
 80177da:	2800      	cmp	r0, #0
 80177dc:	f43f aeaa 	beq.w	8017534 <_strtod_l+0xbc>
 80177e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177e2:	498c      	ldr	r1, [pc, #560]	; (8017a14 <_strtod_l+0x59c>)
 80177e4:	3b01      	subs	r3, #1
 80177e6:	a81d      	add	r0, sp, #116	; 0x74
 80177e8:	931d      	str	r3, [sp, #116]	; 0x74
 80177ea:	f001 fe15 	bl	8019418 <__match>
 80177ee:	b910      	cbnz	r0, 80177f6 <_strtod_l+0x37e>
 80177f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177f2:	3301      	adds	r3, #1
 80177f4:	931d      	str	r3, [sp, #116]	; 0x74
 80177f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017a24 <_strtod_l+0x5ac>
 80177fa:	f04f 0a00 	mov.w	sl, #0
 80177fe:	e67d      	b.n	80174fc <_strtod_l+0x84>
 8017800:	4885      	ldr	r0, [pc, #532]	; (8017a18 <_strtod_l+0x5a0>)
 8017802:	f002 fd01 	bl	801a208 <nan>
 8017806:	ed8d 0b04 	vstr	d0, [sp, #16]
 801780a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801780e:	e675      	b.n	80174fc <_strtod_l+0x84>
 8017810:	9b07      	ldr	r3, [sp, #28]
 8017812:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017814:	1af3      	subs	r3, r6, r3
 8017816:	2f00      	cmp	r7, #0
 8017818:	bf08      	it	eq
 801781a:	462f      	moveq	r7, r5
 801781c:	2d10      	cmp	r5, #16
 801781e:	9308      	str	r3, [sp, #32]
 8017820:	46a8      	mov	r8, r5
 8017822:	bfa8      	it	ge
 8017824:	f04f 0810 	movge.w	r8, #16
 8017828:	f7e8 fe6c 	bl	8000504 <__aeabi_ui2d>
 801782c:	2d09      	cmp	r5, #9
 801782e:	4682      	mov	sl, r0
 8017830:	468b      	mov	fp, r1
 8017832:	dd13      	ble.n	801785c <_strtod_l+0x3e4>
 8017834:	4b79      	ldr	r3, [pc, #484]	; (8017a1c <_strtod_l+0x5a4>)
 8017836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801783a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801783e:	f7e8 fedb 	bl	80005f8 <__aeabi_dmul>
 8017842:	4682      	mov	sl, r0
 8017844:	4648      	mov	r0, r9
 8017846:	468b      	mov	fp, r1
 8017848:	f7e8 fe5c 	bl	8000504 <__aeabi_ui2d>
 801784c:	4602      	mov	r2, r0
 801784e:	460b      	mov	r3, r1
 8017850:	4650      	mov	r0, sl
 8017852:	4659      	mov	r1, fp
 8017854:	f7e8 fd1a 	bl	800028c <__adddf3>
 8017858:	4682      	mov	sl, r0
 801785a:	468b      	mov	fp, r1
 801785c:	2d0f      	cmp	r5, #15
 801785e:	dc38      	bgt.n	80178d2 <_strtod_l+0x45a>
 8017860:	9b08      	ldr	r3, [sp, #32]
 8017862:	2b00      	cmp	r3, #0
 8017864:	f43f ae4a 	beq.w	80174fc <_strtod_l+0x84>
 8017868:	dd24      	ble.n	80178b4 <_strtod_l+0x43c>
 801786a:	2b16      	cmp	r3, #22
 801786c:	dc0b      	bgt.n	8017886 <_strtod_l+0x40e>
 801786e:	4d6b      	ldr	r5, [pc, #428]	; (8017a1c <_strtod_l+0x5a4>)
 8017870:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017874:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017878:	4652      	mov	r2, sl
 801787a:	465b      	mov	r3, fp
 801787c:	f7e8 febc 	bl	80005f8 <__aeabi_dmul>
 8017880:	4682      	mov	sl, r0
 8017882:	468b      	mov	fp, r1
 8017884:	e63a      	b.n	80174fc <_strtod_l+0x84>
 8017886:	9a08      	ldr	r2, [sp, #32]
 8017888:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801788c:	4293      	cmp	r3, r2
 801788e:	db20      	blt.n	80178d2 <_strtod_l+0x45a>
 8017890:	4c62      	ldr	r4, [pc, #392]	; (8017a1c <_strtod_l+0x5a4>)
 8017892:	f1c5 050f 	rsb	r5, r5, #15
 8017896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801789a:	4652      	mov	r2, sl
 801789c:	465b      	mov	r3, fp
 801789e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80178a2:	f7e8 fea9 	bl	80005f8 <__aeabi_dmul>
 80178a6:	9b08      	ldr	r3, [sp, #32]
 80178a8:	1b5d      	subs	r5, r3, r5
 80178aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80178ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80178b2:	e7e3      	b.n	801787c <_strtod_l+0x404>
 80178b4:	9b08      	ldr	r3, [sp, #32]
 80178b6:	3316      	adds	r3, #22
 80178b8:	db0b      	blt.n	80178d2 <_strtod_l+0x45a>
 80178ba:	9b07      	ldr	r3, [sp, #28]
 80178bc:	4a57      	ldr	r2, [pc, #348]	; (8017a1c <_strtod_l+0x5a4>)
 80178be:	1b9e      	subs	r6, r3, r6
 80178c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80178c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80178c8:	4650      	mov	r0, sl
 80178ca:	4659      	mov	r1, fp
 80178cc:	f7e8 ffbe 	bl	800084c <__aeabi_ddiv>
 80178d0:	e7d6      	b.n	8017880 <_strtod_l+0x408>
 80178d2:	9b08      	ldr	r3, [sp, #32]
 80178d4:	eba5 0808 	sub.w	r8, r5, r8
 80178d8:	4498      	add	r8, r3
 80178da:	f1b8 0f00 	cmp.w	r8, #0
 80178de:	dd71      	ble.n	80179c4 <_strtod_l+0x54c>
 80178e0:	f018 030f 	ands.w	r3, r8, #15
 80178e4:	d00a      	beq.n	80178fc <_strtod_l+0x484>
 80178e6:	494d      	ldr	r1, [pc, #308]	; (8017a1c <_strtod_l+0x5a4>)
 80178e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80178ec:	4652      	mov	r2, sl
 80178ee:	465b      	mov	r3, fp
 80178f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80178f4:	f7e8 fe80 	bl	80005f8 <__aeabi_dmul>
 80178f8:	4682      	mov	sl, r0
 80178fa:	468b      	mov	fp, r1
 80178fc:	f038 080f 	bics.w	r8, r8, #15
 8017900:	d04d      	beq.n	801799e <_strtod_l+0x526>
 8017902:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017906:	dd22      	ble.n	801794e <_strtod_l+0x4d6>
 8017908:	2500      	movs	r5, #0
 801790a:	462e      	mov	r6, r5
 801790c:	9509      	str	r5, [sp, #36]	; 0x24
 801790e:	9507      	str	r5, [sp, #28]
 8017910:	2322      	movs	r3, #34	; 0x22
 8017912:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017a24 <_strtod_l+0x5ac>
 8017916:	6023      	str	r3, [r4, #0]
 8017918:	f04f 0a00 	mov.w	sl, #0
 801791c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801791e:	2b00      	cmp	r3, #0
 8017920:	f43f adec 	beq.w	80174fc <_strtod_l+0x84>
 8017924:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017926:	4620      	mov	r0, r4
 8017928:	f001 fe88 	bl	801963c <_Bfree>
 801792c:	9907      	ldr	r1, [sp, #28]
 801792e:	4620      	mov	r0, r4
 8017930:	f001 fe84 	bl	801963c <_Bfree>
 8017934:	4631      	mov	r1, r6
 8017936:	4620      	mov	r0, r4
 8017938:	f001 fe80 	bl	801963c <_Bfree>
 801793c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801793e:	4620      	mov	r0, r4
 8017940:	f001 fe7c 	bl	801963c <_Bfree>
 8017944:	4629      	mov	r1, r5
 8017946:	4620      	mov	r0, r4
 8017948:	f001 fe78 	bl	801963c <_Bfree>
 801794c:	e5d6      	b.n	80174fc <_strtod_l+0x84>
 801794e:	2300      	movs	r3, #0
 8017950:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017954:	4650      	mov	r0, sl
 8017956:	4659      	mov	r1, fp
 8017958:	4699      	mov	r9, r3
 801795a:	f1b8 0f01 	cmp.w	r8, #1
 801795e:	dc21      	bgt.n	80179a4 <_strtod_l+0x52c>
 8017960:	b10b      	cbz	r3, 8017966 <_strtod_l+0x4ee>
 8017962:	4682      	mov	sl, r0
 8017964:	468b      	mov	fp, r1
 8017966:	4b2e      	ldr	r3, [pc, #184]	; (8017a20 <_strtod_l+0x5a8>)
 8017968:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801796c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017970:	4652      	mov	r2, sl
 8017972:	465b      	mov	r3, fp
 8017974:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017978:	f7e8 fe3e 	bl	80005f8 <__aeabi_dmul>
 801797c:	4b29      	ldr	r3, [pc, #164]	; (8017a24 <_strtod_l+0x5ac>)
 801797e:	460a      	mov	r2, r1
 8017980:	400b      	ands	r3, r1
 8017982:	4929      	ldr	r1, [pc, #164]	; (8017a28 <_strtod_l+0x5b0>)
 8017984:	428b      	cmp	r3, r1
 8017986:	4682      	mov	sl, r0
 8017988:	d8be      	bhi.n	8017908 <_strtod_l+0x490>
 801798a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801798e:	428b      	cmp	r3, r1
 8017990:	bf86      	itte	hi
 8017992:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017a2c <_strtod_l+0x5b4>
 8017996:	f04f 3aff 	movhi.w	sl, #4294967295
 801799a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801799e:	2300      	movs	r3, #0
 80179a0:	9304      	str	r3, [sp, #16]
 80179a2:	e081      	b.n	8017aa8 <_strtod_l+0x630>
 80179a4:	f018 0f01 	tst.w	r8, #1
 80179a8:	d007      	beq.n	80179ba <_strtod_l+0x542>
 80179aa:	4b1d      	ldr	r3, [pc, #116]	; (8017a20 <_strtod_l+0x5a8>)
 80179ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80179b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179b4:	f7e8 fe20 	bl	80005f8 <__aeabi_dmul>
 80179b8:	2301      	movs	r3, #1
 80179ba:	f109 0901 	add.w	r9, r9, #1
 80179be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80179c2:	e7ca      	b.n	801795a <_strtod_l+0x4e2>
 80179c4:	d0eb      	beq.n	801799e <_strtod_l+0x526>
 80179c6:	f1c8 0800 	rsb	r8, r8, #0
 80179ca:	f018 020f 	ands.w	r2, r8, #15
 80179ce:	d00a      	beq.n	80179e6 <_strtod_l+0x56e>
 80179d0:	4b12      	ldr	r3, [pc, #72]	; (8017a1c <_strtod_l+0x5a4>)
 80179d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80179d6:	4650      	mov	r0, sl
 80179d8:	4659      	mov	r1, fp
 80179da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179de:	f7e8 ff35 	bl	800084c <__aeabi_ddiv>
 80179e2:	4682      	mov	sl, r0
 80179e4:	468b      	mov	fp, r1
 80179e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80179ea:	d0d8      	beq.n	801799e <_strtod_l+0x526>
 80179ec:	f1b8 0f1f 	cmp.w	r8, #31
 80179f0:	dd1e      	ble.n	8017a30 <_strtod_l+0x5b8>
 80179f2:	2500      	movs	r5, #0
 80179f4:	462e      	mov	r6, r5
 80179f6:	9509      	str	r5, [sp, #36]	; 0x24
 80179f8:	9507      	str	r5, [sp, #28]
 80179fa:	2322      	movs	r3, #34	; 0x22
 80179fc:	f04f 0a00 	mov.w	sl, #0
 8017a00:	f04f 0b00 	mov.w	fp, #0
 8017a04:	6023      	str	r3, [r4, #0]
 8017a06:	e789      	b.n	801791c <_strtod_l+0x4a4>
 8017a08:	0801ca71 	.word	0x0801ca71
 8017a0c:	0801cab4 	.word	0x0801cab4
 8017a10:	0801ca69 	.word	0x0801ca69
 8017a14:	0801cbf4 	.word	0x0801cbf4
 8017a18:	0801ceb0 	.word	0x0801ceb0
 8017a1c:	0801cd90 	.word	0x0801cd90
 8017a20:	0801cd68 	.word	0x0801cd68
 8017a24:	7ff00000 	.word	0x7ff00000
 8017a28:	7ca00000 	.word	0x7ca00000
 8017a2c:	7fefffff 	.word	0x7fefffff
 8017a30:	f018 0310 	ands.w	r3, r8, #16
 8017a34:	bf18      	it	ne
 8017a36:	236a      	movne	r3, #106	; 0x6a
 8017a38:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017df0 <_strtod_l+0x978>
 8017a3c:	9304      	str	r3, [sp, #16]
 8017a3e:	4650      	mov	r0, sl
 8017a40:	4659      	mov	r1, fp
 8017a42:	2300      	movs	r3, #0
 8017a44:	f018 0f01 	tst.w	r8, #1
 8017a48:	d004      	beq.n	8017a54 <_strtod_l+0x5dc>
 8017a4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017a4e:	f7e8 fdd3 	bl	80005f8 <__aeabi_dmul>
 8017a52:	2301      	movs	r3, #1
 8017a54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017a58:	f109 0908 	add.w	r9, r9, #8
 8017a5c:	d1f2      	bne.n	8017a44 <_strtod_l+0x5cc>
 8017a5e:	b10b      	cbz	r3, 8017a64 <_strtod_l+0x5ec>
 8017a60:	4682      	mov	sl, r0
 8017a62:	468b      	mov	fp, r1
 8017a64:	9b04      	ldr	r3, [sp, #16]
 8017a66:	b1bb      	cbz	r3, 8017a98 <_strtod_l+0x620>
 8017a68:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017a6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	4659      	mov	r1, fp
 8017a74:	dd10      	ble.n	8017a98 <_strtod_l+0x620>
 8017a76:	2b1f      	cmp	r3, #31
 8017a78:	f340 8128 	ble.w	8017ccc <_strtod_l+0x854>
 8017a7c:	2b34      	cmp	r3, #52	; 0x34
 8017a7e:	bfde      	ittt	le
 8017a80:	3b20      	suble	r3, #32
 8017a82:	f04f 32ff 	movle.w	r2, #4294967295
 8017a86:	fa02 f303 	lslle.w	r3, r2, r3
 8017a8a:	f04f 0a00 	mov.w	sl, #0
 8017a8e:	bfcc      	ite	gt
 8017a90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017a94:	ea03 0b01 	andle.w	fp, r3, r1
 8017a98:	2200      	movs	r2, #0
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	4650      	mov	r0, sl
 8017a9e:	4659      	mov	r1, fp
 8017aa0:	f7e9 f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8017aa4:	2800      	cmp	r0, #0
 8017aa6:	d1a4      	bne.n	80179f2 <_strtod_l+0x57a>
 8017aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017aaa:	9300      	str	r3, [sp, #0]
 8017aac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017aae:	462b      	mov	r3, r5
 8017ab0:	463a      	mov	r2, r7
 8017ab2:	4620      	mov	r0, r4
 8017ab4:	f001 fe2e 	bl	8019714 <__s2b>
 8017ab8:	9009      	str	r0, [sp, #36]	; 0x24
 8017aba:	2800      	cmp	r0, #0
 8017abc:	f43f af24 	beq.w	8017908 <_strtod_l+0x490>
 8017ac0:	9b07      	ldr	r3, [sp, #28]
 8017ac2:	1b9e      	subs	r6, r3, r6
 8017ac4:	9b08      	ldr	r3, [sp, #32]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	bfb4      	ite	lt
 8017aca:	4633      	movlt	r3, r6
 8017acc:	2300      	movge	r3, #0
 8017ace:	9310      	str	r3, [sp, #64]	; 0x40
 8017ad0:	9b08      	ldr	r3, [sp, #32]
 8017ad2:	2500      	movs	r5, #0
 8017ad4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ad8:	9318      	str	r3, [sp, #96]	; 0x60
 8017ada:	462e      	mov	r6, r5
 8017adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ade:	4620      	mov	r0, r4
 8017ae0:	6859      	ldr	r1, [r3, #4]
 8017ae2:	f001 fd6b 	bl	80195bc <_Balloc>
 8017ae6:	9007      	str	r0, [sp, #28]
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	f43f af11 	beq.w	8017910 <_strtod_l+0x498>
 8017aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017af0:	691a      	ldr	r2, [r3, #16]
 8017af2:	3202      	adds	r2, #2
 8017af4:	f103 010c 	add.w	r1, r3, #12
 8017af8:	0092      	lsls	r2, r2, #2
 8017afa:	300c      	adds	r0, #12
 8017afc:	f7fe fce0 	bl	80164c0 <memcpy>
 8017b00:	ec4b ab10 	vmov	d0, sl, fp
 8017b04:	aa20      	add	r2, sp, #128	; 0x80
 8017b06:	a91f      	add	r1, sp, #124	; 0x7c
 8017b08:	4620      	mov	r0, r4
 8017b0a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017b0e:	f002 f93d 	bl	8019d8c <__d2b>
 8017b12:	901e      	str	r0, [sp, #120]	; 0x78
 8017b14:	2800      	cmp	r0, #0
 8017b16:	f43f aefb 	beq.w	8017910 <_strtod_l+0x498>
 8017b1a:	2101      	movs	r1, #1
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	f001 fe93 	bl	8019848 <__i2b>
 8017b22:	4606      	mov	r6, r0
 8017b24:	2800      	cmp	r0, #0
 8017b26:	f43f aef3 	beq.w	8017910 <_strtod_l+0x498>
 8017b2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017b2c:	9904      	ldr	r1, [sp, #16]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	bfab      	itete	ge
 8017b32:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017b34:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017b36:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017b38:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8017b3c:	bfac      	ite	ge
 8017b3e:	eb03 0902 	addge.w	r9, r3, r2
 8017b42:	1ad7      	sublt	r7, r2, r3
 8017b44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017b46:	eba3 0801 	sub.w	r8, r3, r1
 8017b4a:	4490      	add	r8, r2
 8017b4c:	4ba3      	ldr	r3, [pc, #652]	; (8017ddc <_strtod_l+0x964>)
 8017b4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b52:	4598      	cmp	r8, r3
 8017b54:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017b58:	f280 80cc 	bge.w	8017cf4 <_strtod_l+0x87c>
 8017b5c:	eba3 0308 	sub.w	r3, r3, r8
 8017b60:	2b1f      	cmp	r3, #31
 8017b62:	eba2 0203 	sub.w	r2, r2, r3
 8017b66:	f04f 0101 	mov.w	r1, #1
 8017b6a:	f300 80b6 	bgt.w	8017cda <_strtod_l+0x862>
 8017b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8017b72:	9311      	str	r3, [sp, #68]	; 0x44
 8017b74:	2300      	movs	r3, #0
 8017b76:	930c      	str	r3, [sp, #48]	; 0x30
 8017b78:	eb09 0802 	add.w	r8, r9, r2
 8017b7c:	9b04      	ldr	r3, [sp, #16]
 8017b7e:	45c1      	cmp	r9, r8
 8017b80:	4417      	add	r7, r2
 8017b82:	441f      	add	r7, r3
 8017b84:	464b      	mov	r3, r9
 8017b86:	bfa8      	it	ge
 8017b88:	4643      	movge	r3, r8
 8017b8a:	42bb      	cmp	r3, r7
 8017b8c:	bfa8      	it	ge
 8017b8e:	463b      	movge	r3, r7
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	bfc2      	ittt	gt
 8017b94:	eba8 0803 	subgt.w	r8, r8, r3
 8017b98:	1aff      	subgt	r7, r7, r3
 8017b9a:	eba9 0903 	subgt.w	r9, r9, r3
 8017b9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	dd17      	ble.n	8017bd4 <_strtod_l+0x75c>
 8017ba4:	4631      	mov	r1, r6
 8017ba6:	461a      	mov	r2, r3
 8017ba8:	4620      	mov	r0, r4
 8017baa:	f001 ff09 	bl	80199c0 <__pow5mult>
 8017bae:	4606      	mov	r6, r0
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	f43f aead 	beq.w	8017910 <_strtod_l+0x498>
 8017bb6:	4601      	mov	r1, r0
 8017bb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017bba:	4620      	mov	r0, r4
 8017bbc:	f001 fe5a 	bl	8019874 <__multiply>
 8017bc0:	900f      	str	r0, [sp, #60]	; 0x3c
 8017bc2:	2800      	cmp	r0, #0
 8017bc4:	f43f aea4 	beq.w	8017910 <_strtod_l+0x498>
 8017bc8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f001 fd36 	bl	801963c <_Bfree>
 8017bd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bd2:	931e      	str	r3, [sp, #120]	; 0x78
 8017bd4:	f1b8 0f00 	cmp.w	r8, #0
 8017bd8:	f300 8091 	bgt.w	8017cfe <_strtod_l+0x886>
 8017bdc:	9b08      	ldr	r3, [sp, #32]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	dd08      	ble.n	8017bf4 <_strtod_l+0x77c>
 8017be2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017be4:	9907      	ldr	r1, [sp, #28]
 8017be6:	4620      	mov	r0, r4
 8017be8:	f001 feea 	bl	80199c0 <__pow5mult>
 8017bec:	9007      	str	r0, [sp, #28]
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	f43f ae8e 	beq.w	8017910 <_strtod_l+0x498>
 8017bf4:	2f00      	cmp	r7, #0
 8017bf6:	dd08      	ble.n	8017c0a <_strtod_l+0x792>
 8017bf8:	9907      	ldr	r1, [sp, #28]
 8017bfa:	463a      	mov	r2, r7
 8017bfc:	4620      	mov	r0, r4
 8017bfe:	f001 ff39 	bl	8019a74 <__lshift>
 8017c02:	9007      	str	r0, [sp, #28]
 8017c04:	2800      	cmp	r0, #0
 8017c06:	f43f ae83 	beq.w	8017910 <_strtod_l+0x498>
 8017c0a:	f1b9 0f00 	cmp.w	r9, #0
 8017c0e:	dd08      	ble.n	8017c22 <_strtod_l+0x7aa>
 8017c10:	4631      	mov	r1, r6
 8017c12:	464a      	mov	r2, r9
 8017c14:	4620      	mov	r0, r4
 8017c16:	f001 ff2d 	bl	8019a74 <__lshift>
 8017c1a:	4606      	mov	r6, r0
 8017c1c:	2800      	cmp	r0, #0
 8017c1e:	f43f ae77 	beq.w	8017910 <_strtod_l+0x498>
 8017c22:	9a07      	ldr	r2, [sp, #28]
 8017c24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017c26:	4620      	mov	r0, r4
 8017c28:	f001 ffac 	bl	8019b84 <__mdiff>
 8017c2c:	4605      	mov	r5, r0
 8017c2e:	2800      	cmp	r0, #0
 8017c30:	f43f ae6e 	beq.w	8017910 <_strtod_l+0x498>
 8017c34:	68c3      	ldr	r3, [r0, #12]
 8017c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c38:	2300      	movs	r3, #0
 8017c3a:	60c3      	str	r3, [r0, #12]
 8017c3c:	4631      	mov	r1, r6
 8017c3e:	f001 ff85 	bl	8019b4c <__mcmp>
 8017c42:	2800      	cmp	r0, #0
 8017c44:	da65      	bge.n	8017d12 <_strtod_l+0x89a>
 8017c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c48:	ea53 030a 	orrs.w	r3, r3, sl
 8017c4c:	f040 8087 	bne.w	8017d5e <_strtod_l+0x8e6>
 8017c50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	f040 8082 	bne.w	8017d5e <_strtod_l+0x8e6>
 8017c5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017c5e:	0d1b      	lsrs	r3, r3, #20
 8017c60:	051b      	lsls	r3, r3, #20
 8017c62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017c66:	d97a      	bls.n	8017d5e <_strtod_l+0x8e6>
 8017c68:	696b      	ldr	r3, [r5, #20]
 8017c6a:	b913      	cbnz	r3, 8017c72 <_strtod_l+0x7fa>
 8017c6c:	692b      	ldr	r3, [r5, #16]
 8017c6e:	2b01      	cmp	r3, #1
 8017c70:	dd75      	ble.n	8017d5e <_strtod_l+0x8e6>
 8017c72:	4629      	mov	r1, r5
 8017c74:	2201      	movs	r2, #1
 8017c76:	4620      	mov	r0, r4
 8017c78:	f001 fefc 	bl	8019a74 <__lshift>
 8017c7c:	4631      	mov	r1, r6
 8017c7e:	4605      	mov	r5, r0
 8017c80:	f001 ff64 	bl	8019b4c <__mcmp>
 8017c84:	2800      	cmp	r0, #0
 8017c86:	dd6a      	ble.n	8017d5e <_strtod_l+0x8e6>
 8017c88:	9904      	ldr	r1, [sp, #16]
 8017c8a:	4a55      	ldr	r2, [pc, #340]	; (8017de0 <_strtod_l+0x968>)
 8017c8c:	465b      	mov	r3, fp
 8017c8e:	2900      	cmp	r1, #0
 8017c90:	f000 8085 	beq.w	8017d9e <_strtod_l+0x926>
 8017c94:	ea02 010b 	and.w	r1, r2, fp
 8017c98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017c9c:	dc7f      	bgt.n	8017d9e <_strtod_l+0x926>
 8017c9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017ca2:	f77f aeaa 	ble.w	80179fa <_strtod_l+0x582>
 8017ca6:	4a4f      	ldr	r2, [pc, #316]	; (8017de4 <_strtod_l+0x96c>)
 8017ca8:	2300      	movs	r3, #0
 8017caa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8017cae:	4650      	mov	r0, sl
 8017cb0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017cb4:	4659      	mov	r1, fp
 8017cb6:	f7e8 fc9f 	bl	80005f8 <__aeabi_dmul>
 8017cba:	460b      	mov	r3, r1
 8017cbc:	4303      	orrs	r3, r0
 8017cbe:	bf08      	it	eq
 8017cc0:	2322      	moveq	r3, #34	; 0x22
 8017cc2:	4682      	mov	sl, r0
 8017cc4:	468b      	mov	fp, r1
 8017cc6:	bf08      	it	eq
 8017cc8:	6023      	streq	r3, [r4, #0]
 8017cca:	e62b      	b.n	8017924 <_strtod_l+0x4ac>
 8017ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8017cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8017cd4:	ea03 0a0a 	and.w	sl, r3, sl
 8017cd8:	e6de      	b.n	8017a98 <_strtod_l+0x620>
 8017cda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8017cde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017ce2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017ce6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8017cea:	fa01 f308 	lsl.w	r3, r1, r8
 8017cee:	930c      	str	r3, [sp, #48]	; 0x30
 8017cf0:	9111      	str	r1, [sp, #68]	; 0x44
 8017cf2:	e741      	b.n	8017b78 <_strtod_l+0x700>
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	9311      	str	r3, [sp, #68]	; 0x44
 8017cfc:	e73c      	b.n	8017b78 <_strtod_l+0x700>
 8017cfe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017d00:	4642      	mov	r2, r8
 8017d02:	4620      	mov	r0, r4
 8017d04:	f001 feb6 	bl	8019a74 <__lshift>
 8017d08:	901e      	str	r0, [sp, #120]	; 0x78
 8017d0a:	2800      	cmp	r0, #0
 8017d0c:	f47f af66 	bne.w	8017bdc <_strtod_l+0x764>
 8017d10:	e5fe      	b.n	8017910 <_strtod_l+0x498>
 8017d12:	465f      	mov	r7, fp
 8017d14:	d16e      	bne.n	8017df4 <_strtod_l+0x97c>
 8017d16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017d1c:	b342      	cbz	r2, 8017d70 <_strtod_l+0x8f8>
 8017d1e:	4a32      	ldr	r2, [pc, #200]	; (8017de8 <_strtod_l+0x970>)
 8017d20:	4293      	cmp	r3, r2
 8017d22:	d128      	bne.n	8017d76 <_strtod_l+0x8fe>
 8017d24:	9b04      	ldr	r3, [sp, #16]
 8017d26:	4650      	mov	r0, sl
 8017d28:	b1eb      	cbz	r3, 8017d66 <_strtod_l+0x8ee>
 8017d2a:	4a2d      	ldr	r2, [pc, #180]	; (8017de0 <_strtod_l+0x968>)
 8017d2c:	403a      	ands	r2, r7
 8017d2e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017d32:	f04f 31ff 	mov.w	r1, #4294967295
 8017d36:	d819      	bhi.n	8017d6c <_strtod_l+0x8f4>
 8017d38:	0d12      	lsrs	r2, r2, #20
 8017d3a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8017d42:	4298      	cmp	r0, r3
 8017d44:	d117      	bne.n	8017d76 <_strtod_l+0x8fe>
 8017d46:	4b29      	ldr	r3, [pc, #164]	; (8017dec <_strtod_l+0x974>)
 8017d48:	429f      	cmp	r7, r3
 8017d4a:	d102      	bne.n	8017d52 <_strtod_l+0x8da>
 8017d4c:	3001      	adds	r0, #1
 8017d4e:	f43f addf 	beq.w	8017910 <_strtod_l+0x498>
 8017d52:	4b23      	ldr	r3, [pc, #140]	; (8017de0 <_strtod_l+0x968>)
 8017d54:	403b      	ands	r3, r7
 8017d56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017d5a:	f04f 0a00 	mov.w	sl, #0
 8017d5e:	9b04      	ldr	r3, [sp, #16]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d1a0      	bne.n	8017ca6 <_strtod_l+0x82e>
 8017d64:	e5de      	b.n	8017924 <_strtod_l+0x4ac>
 8017d66:	f04f 33ff 	mov.w	r3, #4294967295
 8017d6a:	e7ea      	b.n	8017d42 <_strtod_l+0x8ca>
 8017d6c:	460b      	mov	r3, r1
 8017d6e:	e7e8      	b.n	8017d42 <_strtod_l+0x8ca>
 8017d70:	ea53 030a 	orrs.w	r3, r3, sl
 8017d74:	d088      	beq.n	8017c88 <_strtod_l+0x810>
 8017d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d78:	b1db      	cbz	r3, 8017db2 <_strtod_l+0x93a>
 8017d7a:	423b      	tst	r3, r7
 8017d7c:	d0ef      	beq.n	8017d5e <_strtod_l+0x8e6>
 8017d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d80:	9a04      	ldr	r2, [sp, #16]
 8017d82:	4650      	mov	r0, sl
 8017d84:	4659      	mov	r1, fp
 8017d86:	b1c3      	cbz	r3, 8017dba <_strtod_l+0x942>
 8017d88:	f7ff fb58 	bl	801743c <sulp>
 8017d8c:	4602      	mov	r2, r0
 8017d8e:	460b      	mov	r3, r1
 8017d90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017d94:	f7e8 fa7a 	bl	800028c <__adddf3>
 8017d98:	4682      	mov	sl, r0
 8017d9a:	468b      	mov	fp, r1
 8017d9c:	e7df      	b.n	8017d5e <_strtod_l+0x8e6>
 8017d9e:	4013      	ands	r3, r2
 8017da0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017da4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017da8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017dac:	f04f 3aff 	mov.w	sl, #4294967295
 8017db0:	e7d5      	b.n	8017d5e <_strtod_l+0x8e6>
 8017db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017db4:	ea13 0f0a 	tst.w	r3, sl
 8017db8:	e7e0      	b.n	8017d7c <_strtod_l+0x904>
 8017dba:	f7ff fb3f 	bl	801743c <sulp>
 8017dbe:	4602      	mov	r2, r0
 8017dc0:	460b      	mov	r3, r1
 8017dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017dc6:	f7e8 fa5f 	bl	8000288 <__aeabi_dsub>
 8017dca:	2200      	movs	r2, #0
 8017dcc:	2300      	movs	r3, #0
 8017dce:	4682      	mov	sl, r0
 8017dd0:	468b      	mov	fp, r1
 8017dd2:	f7e8 fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 8017dd6:	2800      	cmp	r0, #0
 8017dd8:	d0c1      	beq.n	8017d5e <_strtod_l+0x8e6>
 8017dda:	e60e      	b.n	80179fa <_strtod_l+0x582>
 8017ddc:	fffffc02 	.word	0xfffffc02
 8017de0:	7ff00000 	.word	0x7ff00000
 8017de4:	39500000 	.word	0x39500000
 8017de8:	000fffff 	.word	0x000fffff
 8017dec:	7fefffff 	.word	0x7fefffff
 8017df0:	0801cac8 	.word	0x0801cac8
 8017df4:	4631      	mov	r1, r6
 8017df6:	4628      	mov	r0, r5
 8017df8:	f002 f824 	bl	8019e44 <__ratio>
 8017dfc:	ec59 8b10 	vmov	r8, r9, d0
 8017e00:	ee10 0a10 	vmov	r0, s0
 8017e04:	2200      	movs	r2, #0
 8017e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017e0a:	4649      	mov	r1, r9
 8017e0c:	f7e8 fe70 	bl	8000af0 <__aeabi_dcmple>
 8017e10:	2800      	cmp	r0, #0
 8017e12:	d07c      	beq.n	8017f0e <_strtod_l+0xa96>
 8017e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d04c      	beq.n	8017eb4 <_strtod_l+0xa3c>
 8017e1a:	4b95      	ldr	r3, [pc, #596]	; (8018070 <_strtod_l+0xbf8>)
 8017e1c:	2200      	movs	r2, #0
 8017e1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017e22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018070 <_strtod_l+0xbf8>
 8017e26:	f04f 0800 	mov.w	r8, #0
 8017e2a:	4b92      	ldr	r3, [pc, #584]	; (8018074 <_strtod_l+0xbfc>)
 8017e2c:	403b      	ands	r3, r7
 8017e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8017e30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017e32:	4b91      	ldr	r3, [pc, #580]	; (8018078 <_strtod_l+0xc00>)
 8017e34:	429a      	cmp	r2, r3
 8017e36:	f040 80b2 	bne.w	8017f9e <_strtod_l+0xb26>
 8017e3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e42:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017e46:	ec4b ab10 	vmov	d0, sl, fp
 8017e4a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8017e4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017e52:	f001 ff1f 	bl	8019c94 <__ulp>
 8017e56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e5a:	ec53 2b10 	vmov	r2, r3, d0
 8017e5e:	f7e8 fbcb 	bl	80005f8 <__aeabi_dmul>
 8017e62:	4652      	mov	r2, sl
 8017e64:	465b      	mov	r3, fp
 8017e66:	f7e8 fa11 	bl	800028c <__adddf3>
 8017e6a:	460b      	mov	r3, r1
 8017e6c:	4981      	ldr	r1, [pc, #516]	; (8018074 <_strtod_l+0xbfc>)
 8017e6e:	4a83      	ldr	r2, [pc, #524]	; (801807c <_strtod_l+0xc04>)
 8017e70:	4019      	ands	r1, r3
 8017e72:	4291      	cmp	r1, r2
 8017e74:	4682      	mov	sl, r0
 8017e76:	d95e      	bls.n	8017f36 <_strtod_l+0xabe>
 8017e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017e7e:	4293      	cmp	r3, r2
 8017e80:	d103      	bne.n	8017e8a <_strtod_l+0xa12>
 8017e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e84:	3301      	adds	r3, #1
 8017e86:	f43f ad43 	beq.w	8017910 <_strtod_l+0x498>
 8017e8a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018088 <_strtod_l+0xc10>
 8017e8e:	f04f 3aff 	mov.w	sl, #4294967295
 8017e92:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017e94:	4620      	mov	r0, r4
 8017e96:	f001 fbd1 	bl	801963c <_Bfree>
 8017e9a:	9907      	ldr	r1, [sp, #28]
 8017e9c:	4620      	mov	r0, r4
 8017e9e:	f001 fbcd 	bl	801963c <_Bfree>
 8017ea2:	4631      	mov	r1, r6
 8017ea4:	4620      	mov	r0, r4
 8017ea6:	f001 fbc9 	bl	801963c <_Bfree>
 8017eaa:	4629      	mov	r1, r5
 8017eac:	4620      	mov	r0, r4
 8017eae:	f001 fbc5 	bl	801963c <_Bfree>
 8017eb2:	e613      	b.n	8017adc <_strtod_l+0x664>
 8017eb4:	f1ba 0f00 	cmp.w	sl, #0
 8017eb8:	d11b      	bne.n	8017ef2 <_strtod_l+0xa7a>
 8017eba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017ebe:	b9f3      	cbnz	r3, 8017efe <_strtod_l+0xa86>
 8017ec0:	4b6b      	ldr	r3, [pc, #428]	; (8018070 <_strtod_l+0xbf8>)
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	4640      	mov	r0, r8
 8017ec6:	4649      	mov	r1, r9
 8017ec8:	f7e8 fe08 	bl	8000adc <__aeabi_dcmplt>
 8017ecc:	b9d0      	cbnz	r0, 8017f04 <_strtod_l+0xa8c>
 8017ece:	4640      	mov	r0, r8
 8017ed0:	4649      	mov	r1, r9
 8017ed2:	4b6b      	ldr	r3, [pc, #428]	; (8018080 <_strtod_l+0xc08>)
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	f7e8 fb8f 	bl	80005f8 <__aeabi_dmul>
 8017eda:	4680      	mov	r8, r0
 8017edc:	4689      	mov	r9, r1
 8017ede:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017ee2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017ee6:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ee8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017eec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017ef0:	e79b      	b.n	8017e2a <_strtod_l+0x9b2>
 8017ef2:	f1ba 0f01 	cmp.w	sl, #1
 8017ef6:	d102      	bne.n	8017efe <_strtod_l+0xa86>
 8017ef8:	2f00      	cmp	r7, #0
 8017efa:	f43f ad7e 	beq.w	80179fa <_strtod_l+0x582>
 8017efe:	4b61      	ldr	r3, [pc, #388]	; (8018084 <_strtod_l+0xc0c>)
 8017f00:	2200      	movs	r2, #0
 8017f02:	e78c      	b.n	8017e1e <_strtod_l+0x9a6>
 8017f04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018080 <_strtod_l+0xc08>
 8017f08:	f04f 0800 	mov.w	r8, #0
 8017f0c:	e7e7      	b.n	8017ede <_strtod_l+0xa66>
 8017f0e:	4b5c      	ldr	r3, [pc, #368]	; (8018080 <_strtod_l+0xc08>)
 8017f10:	4640      	mov	r0, r8
 8017f12:	4649      	mov	r1, r9
 8017f14:	2200      	movs	r2, #0
 8017f16:	f7e8 fb6f 	bl	80005f8 <__aeabi_dmul>
 8017f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f1c:	4680      	mov	r8, r0
 8017f1e:	4689      	mov	r9, r1
 8017f20:	b933      	cbnz	r3, 8017f30 <_strtod_l+0xab8>
 8017f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017f26:	9012      	str	r0, [sp, #72]	; 0x48
 8017f28:	9313      	str	r3, [sp, #76]	; 0x4c
 8017f2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017f2e:	e7dd      	b.n	8017eec <_strtod_l+0xa74>
 8017f30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017f34:	e7f9      	b.n	8017f2a <_strtod_l+0xab2>
 8017f36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017f3a:	9b04      	ldr	r3, [sp, #16]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d1a8      	bne.n	8017e92 <_strtod_l+0xa1a>
 8017f40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017f44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017f46:	0d1b      	lsrs	r3, r3, #20
 8017f48:	051b      	lsls	r3, r3, #20
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d1a1      	bne.n	8017e92 <_strtod_l+0xa1a>
 8017f4e:	4640      	mov	r0, r8
 8017f50:	4649      	mov	r1, r9
 8017f52:	f7e8 feb1 	bl	8000cb8 <__aeabi_d2lz>
 8017f56:	f7e8 fb21 	bl	800059c <__aeabi_l2d>
 8017f5a:	4602      	mov	r2, r0
 8017f5c:	460b      	mov	r3, r1
 8017f5e:	4640      	mov	r0, r8
 8017f60:	4649      	mov	r1, r9
 8017f62:	f7e8 f991 	bl	8000288 <__aeabi_dsub>
 8017f66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017f6c:	ea43 030a 	orr.w	r3, r3, sl
 8017f70:	4313      	orrs	r3, r2
 8017f72:	4680      	mov	r8, r0
 8017f74:	4689      	mov	r9, r1
 8017f76:	d053      	beq.n	8018020 <_strtod_l+0xba8>
 8017f78:	a335      	add	r3, pc, #212	; (adr r3, 8018050 <_strtod_l+0xbd8>)
 8017f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f7e:	f7e8 fdad 	bl	8000adc <__aeabi_dcmplt>
 8017f82:	2800      	cmp	r0, #0
 8017f84:	f47f acce 	bne.w	8017924 <_strtod_l+0x4ac>
 8017f88:	a333      	add	r3, pc, #204	; (adr r3, 8018058 <_strtod_l+0xbe0>)
 8017f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f8e:	4640      	mov	r0, r8
 8017f90:	4649      	mov	r1, r9
 8017f92:	f7e8 fdc1 	bl	8000b18 <__aeabi_dcmpgt>
 8017f96:	2800      	cmp	r0, #0
 8017f98:	f43f af7b 	beq.w	8017e92 <_strtod_l+0xa1a>
 8017f9c:	e4c2      	b.n	8017924 <_strtod_l+0x4ac>
 8017f9e:	9b04      	ldr	r3, [sp, #16]
 8017fa0:	b333      	cbz	r3, 8017ff0 <_strtod_l+0xb78>
 8017fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017fa4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017fa8:	d822      	bhi.n	8017ff0 <_strtod_l+0xb78>
 8017faa:	a32d      	add	r3, pc, #180	; (adr r3, 8018060 <_strtod_l+0xbe8>)
 8017fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb0:	4640      	mov	r0, r8
 8017fb2:	4649      	mov	r1, r9
 8017fb4:	f7e8 fd9c 	bl	8000af0 <__aeabi_dcmple>
 8017fb8:	b1a0      	cbz	r0, 8017fe4 <_strtod_l+0xb6c>
 8017fba:	4649      	mov	r1, r9
 8017fbc:	4640      	mov	r0, r8
 8017fbe:	f7e8 fdf3 	bl	8000ba8 <__aeabi_d2uiz>
 8017fc2:	2801      	cmp	r0, #1
 8017fc4:	bf38      	it	cc
 8017fc6:	2001      	movcc	r0, #1
 8017fc8:	f7e8 fa9c 	bl	8000504 <__aeabi_ui2d>
 8017fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017fce:	4680      	mov	r8, r0
 8017fd0:	4689      	mov	r9, r1
 8017fd2:	bb13      	cbnz	r3, 801801a <_strtod_l+0xba2>
 8017fd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017fd8:	9014      	str	r0, [sp, #80]	; 0x50
 8017fda:	9315      	str	r3, [sp, #84]	; 0x54
 8017fdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017fe0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017fe8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017fec:	1a9b      	subs	r3, r3, r2
 8017fee:	930d      	str	r3, [sp, #52]	; 0x34
 8017ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ff4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017ff8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017ffc:	f001 fe4a 	bl	8019c94 <__ulp>
 8018000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018004:	ec53 2b10 	vmov	r2, r3, d0
 8018008:	f7e8 faf6 	bl	80005f8 <__aeabi_dmul>
 801800c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018010:	f7e8 f93c 	bl	800028c <__adddf3>
 8018014:	4682      	mov	sl, r0
 8018016:	468b      	mov	fp, r1
 8018018:	e78f      	b.n	8017f3a <_strtod_l+0xac2>
 801801a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801801e:	e7dd      	b.n	8017fdc <_strtod_l+0xb64>
 8018020:	a311      	add	r3, pc, #68	; (adr r3, 8018068 <_strtod_l+0xbf0>)
 8018022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018026:	f7e8 fd59 	bl	8000adc <__aeabi_dcmplt>
 801802a:	e7b4      	b.n	8017f96 <_strtod_l+0xb1e>
 801802c:	2300      	movs	r3, #0
 801802e:	930e      	str	r3, [sp, #56]	; 0x38
 8018030:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018032:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018034:	6013      	str	r3, [r2, #0]
 8018036:	f7ff ba65 	b.w	8017504 <_strtod_l+0x8c>
 801803a:	2b65      	cmp	r3, #101	; 0x65
 801803c:	f43f ab5d 	beq.w	80176fa <_strtod_l+0x282>
 8018040:	2b45      	cmp	r3, #69	; 0x45
 8018042:	f43f ab5a 	beq.w	80176fa <_strtod_l+0x282>
 8018046:	2201      	movs	r2, #1
 8018048:	f7ff bb92 	b.w	8017770 <_strtod_l+0x2f8>
 801804c:	f3af 8000 	nop.w
 8018050:	94a03595 	.word	0x94a03595
 8018054:	3fdfffff 	.word	0x3fdfffff
 8018058:	35afe535 	.word	0x35afe535
 801805c:	3fe00000 	.word	0x3fe00000
 8018060:	ffc00000 	.word	0xffc00000
 8018064:	41dfffff 	.word	0x41dfffff
 8018068:	94a03595 	.word	0x94a03595
 801806c:	3fcfffff 	.word	0x3fcfffff
 8018070:	3ff00000 	.word	0x3ff00000
 8018074:	7ff00000 	.word	0x7ff00000
 8018078:	7fe00000 	.word	0x7fe00000
 801807c:	7c9fffff 	.word	0x7c9fffff
 8018080:	3fe00000 	.word	0x3fe00000
 8018084:	bff00000 	.word	0xbff00000
 8018088:	7fefffff 	.word	0x7fefffff

0801808c <_strtod_r>:
 801808c:	4b01      	ldr	r3, [pc, #4]	; (8018094 <_strtod_r+0x8>)
 801808e:	f7ff b9f3 	b.w	8017478 <_strtod_l>
 8018092:	bf00      	nop
 8018094:	20004278 	.word	0x20004278

08018098 <_strtol_l.isra.0>:
 8018098:	2b01      	cmp	r3, #1
 801809a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801809e:	d001      	beq.n	80180a4 <_strtol_l.isra.0+0xc>
 80180a0:	2b24      	cmp	r3, #36	; 0x24
 80180a2:	d906      	bls.n	80180b2 <_strtol_l.isra.0+0x1a>
 80180a4:	f7fe f9d2 	bl	801644c <__errno>
 80180a8:	2316      	movs	r3, #22
 80180aa:	6003      	str	r3, [r0, #0]
 80180ac:	2000      	movs	r0, #0
 80180ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180b2:	4f3a      	ldr	r7, [pc, #232]	; (801819c <_strtol_l.isra.0+0x104>)
 80180b4:	468e      	mov	lr, r1
 80180b6:	4676      	mov	r6, lr
 80180b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80180bc:	5de5      	ldrb	r5, [r4, r7]
 80180be:	f015 0508 	ands.w	r5, r5, #8
 80180c2:	d1f8      	bne.n	80180b6 <_strtol_l.isra.0+0x1e>
 80180c4:	2c2d      	cmp	r4, #45	; 0x2d
 80180c6:	d134      	bne.n	8018132 <_strtol_l.isra.0+0x9a>
 80180c8:	f89e 4000 	ldrb.w	r4, [lr]
 80180cc:	f04f 0801 	mov.w	r8, #1
 80180d0:	f106 0e02 	add.w	lr, r6, #2
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d05c      	beq.n	8018192 <_strtol_l.isra.0+0xfa>
 80180d8:	2b10      	cmp	r3, #16
 80180da:	d10c      	bne.n	80180f6 <_strtol_l.isra.0+0x5e>
 80180dc:	2c30      	cmp	r4, #48	; 0x30
 80180de:	d10a      	bne.n	80180f6 <_strtol_l.isra.0+0x5e>
 80180e0:	f89e 4000 	ldrb.w	r4, [lr]
 80180e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80180e8:	2c58      	cmp	r4, #88	; 0x58
 80180ea:	d14d      	bne.n	8018188 <_strtol_l.isra.0+0xf0>
 80180ec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80180f0:	2310      	movs	r3, #16
 80180f2:	f10e 0e02 	add.w	lr, lr, #2
 80180f6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80180fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80180fe:	2600      	movs	r6, #0
 8018100:	fbbc f9f3 	udiv	r9, ip, r3
 8018104:	4635      	mov	r5, r6
 8018106:	fb03 ca19 	mls	sl, r3, r9, ip
 801810a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801810e:	2f09      	cmp	r7, #9
 8018110:	d818      	bhi.n	8018144 <_strtol_l.isra.0+0xac>
 8018112:	463c      	mov	r4, r7
 8018114:	42a3      	cmp	r3, r4
 8018116:	dd24      	ble.n	8018162 <_strtol_l.isra.0+0xca>
 8018118:	2e00      	cmp	r6, #0
 801811a:	db1f      	blt.n	801815c <_strtol_l.isra.0+0xc4>
 801811c:	45a9      	cmp	r9, r5
 801811e:	d31d      	bcc.n	801815c <_strtol_l.isra.0+0xc4>
 8018120:	d101      	bne.n	8018126 <_strtol_l.isra.0+0x8e>
 8018122:	45a2      	cmp	sl, r4
 8018124:	db1a      	blt.n	801815c <_strtol_l.isra.0+0xc4>
 8018126:	fb05 4503 	mla	r5, r5, r3, r4
 801812a:	2601      	movs	r6, #1
 801812c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018130:	e7eb      	b.n	801810a <_strtol_l.isra.0+0x72>
 8018132:	2c2b      	cmp	r4, #43	; 0x2b
 8018134:	bf08      	it	eq
 8018136:	f89e 4000 	ldrbeq.w	r4, [lr]
 801813a:	46a8      	mov	r8, r5
 801813c:	bf08      	it	eq
 801813e:	f106 0e02 	addeq.w	lr, r6, #2
 8018142:	e7c7      	b.n	80180d4 <_strtol_l.isra.0+0x3c>
 8018144:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018148:	2f19      	cmp	r7, #25
 801814a:	d801      	bhi.n	8018150 <_strtol_l.isra.0+0xb8>
 801814c:	3c37      	subs	r4, #55	; 0x37
 801814e:	e7e1      	b.n	8018114 <_strtol_l.isra.0+0x7c>
 8018150:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018154:	2f19      	cmp	r7, #25
 8018156:	d804      	bhi.n	8018162 <_strtol_l.isra.0+0xca>
 8018158:	3c57      	subs	r4, #87	; 0x57
 801815a:	e7db      	b.n	8018114 <_strtol_l.isra.0+0x7c>
 801815c:	f04f 36ff 	mov.w	r6, #4294967295
 8018160:	e7e4      	b.n	801812c <_strtol_l.isra.0+0x94>
 8018162:	2e00      	cmp	r6, #0
 8018164:	da05      	bge.n	8018172 <_strtol_l.isra.0+0xda>
 8018166:	2322      	movs	r3, #34	; 0x22
 8018168:	6003      	str	r3, [r0, #0]
 801816a:	4665      	mov	r5, ip
 801816c:	b942      	cbnz	r2, 8018180 <_strtol_l.isra.0+0xe8>
 801816e:	4628      	mov	r0, r5
 8018170:	e79d      	b.n	80180ae <_strtol_l.isra.0+0x16>
 8018172:	f1b8 0f00 	cmp.w	r8, #0
 8018176:	d000      	beq.n	801817a <_strtol_l.isra.0+0xe2>
 8018178:	426d      	negs	r5, r5
 801817a:	2a00      	cmp	r2, #0
 801817c:	d0f7      	beq.n	801816e <_strtol_l.isra.0+0xd6>
 801817e:	b10e      	cbz	r6, 8018184 <_strtol_l.isra.0+0xec>
 8018180:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018184:	6011      	str	r1, [r2, #0]
 8018186:	e7f2      	b.n	801816e <_strtol_l.isra.0+0xd6>
 8018188:	2430      	movs	r4, #48	; 0x30
 801818a:	2b00      	cmp	r3, #0
 801818c:	d1b3      	bne.n	80180f6 <_strtol_l.isra.0+0x5e>
 801818e:	2308      	movs	r3, #8
 8018190:	e7b1      	b.n	80180f6 <_strtol_l.isra.0+0x5e>
 8018192:	2c30      	cmp	r4, #48	; 0x30
 8018194:	d0a4      	beq.n	80180e0 <_strtol_l.isra.0+0x48>
 8018196:	230a      	movs	r3, #10
 8018198:	e7ad      	b.n	80180f6 <_strtol_l.isra.0+0x5e>
 801819a:	bf00      	nop
 801819c:	0801caf1 	.word	0x0801caf1

080181a0 <_strtol_r>:
 80181a0:	f7ff bf7a 	b.w	8018098 <_strtol_l.isra.0>

080181a4 <quorem>:
 80181a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a8:	6903      	ldr	r3, [r0, #16]
 80181aa:	690c      	ldr	r4, [r1, #16]
 80181ac:	42a3      	cmp	r3, r4
 80181ae:	4607      	mov	r7, r0
 80181b0:	f2c0 8081 	blt.w	80182b6 <quorem+0x112>
 80181b4:	3c01      	subs	r4, #1
 80181b6:	f101 0814 	add.w	r8, r1, #20
 80181ba:	f100 0514 	add.w	r5, r0, #20
 80181be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80181c2:	9301      	str	r3, [sp, #4]
 80181c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80181c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80181cc:	3301      	adds	r3, #1
 80181ce:	429a      	cmp	r2, r3
 80181d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80181d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80181d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80181dc:	d331      	bcc.n	8018242 <quorem+0x9e>
 80181de:	f04f 0e00 	mov.w	lr, #0
 80181e2:	4640      	mov	r0, r8
 80181e4:	46ac      	mov	ip, r5
 80181e6:	46f2      	mov	sl, lr
 80181e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80181ec:	b293      	uxth	r3, r2
 80181ee:	fb06 e303 	mla	r3, r6, r3, lr
 80181f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80181f6:	b29b      	uxth	r3, r3
 80181f8:	ebaa 0303 	sub.w	r3, sl, r3
 80181fc:	0c12      	lsrs	r2, r2, #16
 80181fe:	f8dc a000 	ldr.w	sl, [ip]
 8018202:	fb06 e202 	mla	r2, r6, r2, lr
 8018206:	fa13 f38a 	uxtah	r3, r3, sl
 801820a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801820e:	fa1f fa82 	uxth.w	sl, r2
 8018212:	f8dc 2000 	ldr.w	r2, [ip]
 8018216:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801821a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801821e:	b29b      	uxth	r3, r3
 8018220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018224:	4581      	cmp	r9, r0
 8018226:	f84c 3b04 	str.w	r3, [ip], #4
 801822a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801822e:	d2db      	bcs.n	80181e8 <quorem+0x44>
 8018230:	f855 300b 	ldr.w	r3, [r5, fp]
 8018234:	b92b      	cbnz	r3, 8018242 <quorem+0x9e>
 8018236:	9b01      	ldr	r3, [sp, #4]
 8018238:	3b04      	subs	r3, #4
 801823a:	429d      	cmp	r5, r3
 801823c:	461a      	mov	r2, r3
 801823e:	d32e      	bcc.n	801829e <quorem+0xfa>
 8018240:	613c      	str	r4, [r7, #16]
 8018242:	4638      	mov	r0, r7
 8018244:	f001 fc82 	bl	8019b4c <__mcmp>
 8018248:	2800      	cmp	r0, #0
 801824a:	db24      	blt.n	8018296 <quorem+0xf2>
 801824c:	3601      	adds	r6, #1
 801824e:	4628      	mov	r0, r5
 8018250:	f04f 0c00 	mov.w	ip, #0
 8018254:	f858 2b04 	ldr.w	r2, [r8], #4
 8018258:	f8d0 e000 	ldr.w	lr, [r0]
 801825c:	b293      	uxth	r3, r2
 801825e:	ebac 0303 	sub.w	r3, ip, r3
 8018262:	0c12      	lsrs	r2, r2, #16
 8018264:	fa13 f38e 	uxtah	r3, r3, lr
 8018268:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801826c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018270:	b29b      	uxth	r3, r3
 8018272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018276:	45c1      	cmp	r9, r8
 8018278:	f840 3b04 	str.w	r3, [r0], #4
 801827c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018280:	d2e8      	bcs.n	8018254 <quorem+0xb0>
 8018282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801828a:	b922      	cbnz	r2, 8018296 <quorem+0xf2>
 801828c:	3b04      	subs	r3, #4
 801828e:	429d      	cmp	r5, r3
 8018290:	461a      	mov	r2, r3
 8018292:	d30a      	bcc.n	80182aa <quorem+0x106>
 8018294:	613c      	str	r4, [r7, #16]
 8018296:	4630      	mov	r0, r6
 8018298:	b003      	add	sp, #12
 801829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829e:	6812      	ldr	r2, [r2, #0]
 80182a0:	3b04      	subs	r3, #4
 80182a2:	2a00      	cmp	r2, #0
 80182a4:	d1cc      	bne.n	8018240 <quorem+0x9c>
 80182a6:	3c01      	subs	r4, #1
 80182a8:	e7c7      	b.n	801823a <quorem+0x96>
 80182aa:	6812      	ldr	r2, [r2, #0]
 80182ac:	3b04      	subs	r3, #4
 80182ae:	2a00      	cmp	r2, #0
 80182b0:	d1f0      	bne.n	8018294 <quorem+0xf0>
 80182b2:	3c01      	subs	r4, #1
 80182b4:	e7eb      	b.n	801828e <quorem+0xea>
 80182b6:	2000      	movs	r0, #0
 80182b8:	e7ee      	b.n	8018298 <quorem+0xf4>
 80182ba:	0000      	movs	r0, r0
 80182bc:	0000      	movs	r0, r0
	...

080182c0 <_dtoa_r>:
 80182c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182c4:	ed2d 8b02 	vpush	{d8}
 80182c8:	ec57 6b10 	vmov	r6, r7, d0
 80182cc:	b095      	sub	sp, #84	; 0x54
 80182ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80182d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80182d4:	9105      	str	r1, [sp, #20]
 80182d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80182da:	4604      	mov	r4, r0
 80182dc:	9209      	str	r2, [sp, #36]	; 0x24
 80182de:	930f      	str	r3, [sp, #60]	; 0x3c
 80182e0:	b975      	cbnz	r5, 8018300 <_dtoa_r+0x40>
 80182e2:	2010      	movs	r0, #16
 80182e4:	f7fe f8dc 	bl	80164a0 <malloc>
 80182e8:	4602      	mov	r2, r0
 80182ea:	6260      	str	r0, [r4, #36]	; 0x24
 80182ec:	b920      	cbnz	r0, 80182f8 <_dtoa_r+0x38>
 80182ee:	4bb2      	ldr	r3, [pc, #712]	; (80185b8 <_dtoa_r+0x2f8>)
 80182f0:	21ea      	movs	r1, #234	; 0xea
 80182f2:	48b2      	ldr	r0, [pc, #712]	; (80185bc <_dtoa_r+0x2fc>)
 80182f4:	f001 ffb0 	bl	801a258 <__assert_func>
 80182f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80182fc:	6005      	str	r5, [r0, #0]
 80182fe:	60c5      	str	r5, [r0, #12]
 8018300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018302:	6819      	ldr	r1, [r3, #0]
 8018304:	b151      	cbz	r1, 801831c <_dtoa_r+0x5c>
 8018306:	685a      	ldr	r2, [r3, #4]
 8018308:	604a      	str	r2, [r1, #4]
 801830a:	2301      	movs	r3, #1
 801830c:	4093      	lsls	r3, r2
 801830e:	608b      	str	r3, [r1, #8]
 8018310:	4620      	mov	r0, r4
 8018312:	f001 f993 	bl	801963c <_Bfree>
 8018316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018318:	2200      	movs	r2, #0
 801831a:	601a      	str	r2, [r3, #0]
 801831c:	1e3b      	subs	r3, r7, #0
 801831e:	bfb9      	ittee	lt
 8018320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018324:	9303      	strlt	r3, [sp, #12]
 8018326:	2300      	movge	r3, #0
 8018328:	f8c8 3000 	strge.w	r3, [r8]
 801832c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018330:	4ba3      	ldr	r3, [pc, #652]	; (80185c0 <_dtoa_r+0x300>)
 8018332:	bfbc      	itt	lt
 8018334:	2201      	movlt	r2, #1
 8018336:	f8c8 2000 	strlt.w	r2, [r8]
 801833a:	ea33 0309 	bics.w	r3, r3, r9
 801833e:	d11b      	bne.n	8018378 <_dtoa_r+0xb8>
 8018340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018342:	f242 730f 	movw	r3, #9999	; 0x270f
 8018346:	6013      	str	r3, [r2, #0]
 8018348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801834c:	4333      	orrs	r3, r6
 801834e:	f000 857a 	beq.w	8018e46 <_dtoa_r+0xb86>
 8018352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018354:	b963      	cbnz	r3, 8018370 <_dtoa_r+0xb0>
 8018356:	4b9b      	ldr	r3, [pc, #620]	; (80185c4 <_dtoa_r+0x304>)
 8018358:	e024      	b.n	80183a4 <_dtoa_r+0xe4>
 801835a:	4b9b      	ldr	r3, [pc, #620]	; (80185c8 <_dtoa_r+0x308>)
 801835c:	9300      	str	r3, [sp, #0]
 801835e:	3308      	adds	r3, #8
 8018360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018362:	6013      	str	r3, [r2, #0]
 8018364:	9800      	ldr	r0, [sp, #0]
 8018366:	b015      	add	sp, #84	; 0x54
 8018368:	ecbd 8b02 	vpop	{d8}
 801836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018370:	4b94      	ldr	r3, [pc, #592]	; (80185c4 <_dtoa_r+0x304>)
 8018372:	9300      	str	r3, [sp, #0]
 8018374:	3303      	adds	r3, #3
 8018376:	e7f3      	b.n	8018360 <_dtoa_r+0xa0>
 8018378:	ed9d 7b02 	vldr	d7, [sp, #8]
 801837c:	2200      	movs	r2, #0
 801837e:	ec51 0b17 	vmov	r0, r1, d7
 8018382:	2300      	movs	r3, #0
 8018384:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018388:	f7e8 fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 801838c:	4680      	mov	r8, r0
 801838e:	b158      	cbz	r0, 80183a8 <_dtoa_r+0xe8>
 8018390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018392:	2301      	movs	r3, #1
 8018394:	6013      	str	r3, [r2, #0]
 8018396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018398:	2b00      	cmp	r3, #0
 801839a:	f000 8551 	beq.w	8018e40 <_dtoa_r+0xb80>
 801839e:	488b      	ldr	r0, [pc, #556]	; (80185cc <_dtoa_r+0x30c>)
 80183a0:	6018      	str	r0, [r3, #0]
 80183a2:	1e43      	subs	r3, r0, #1
 80183a4:	9300      	str	r3, [sp, #0]
 80183a6:	e7dd      	b.n	8018364 <_dtoa_r+0xa4>
 80183a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80183ac:	aa12      	add	r2, sp, #72	; 0x48
 80183ae:	a913      	add	r1, sp, #76	; 0x4c
 80183b0:	4620      	mov	r0, r4
 80183b2:	f001 fceb 	bl	8019d8c <__d2b>
 80183b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80183ba:	4683      	mov	fp, r0
 80183bc:	2d00      	cmp	r5, #0
 80183be:	d07c      	beq.n	80184ba <_dtoa_r+0x1fa>
 80183c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80183c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80183ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80183ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80183d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80183d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80183da:	4b7d      	ldr	r3, [pc, #500]	; (80185d0 <_dtoa_r+0x310>)
 80183dc:	2200      	movs	r2, #0
 80183de:	4630      	mov	r0, r6
 80183e0:	4639      	mov	r1, r7
 80183e2:	f7e7 ff51 	bl	8000288 <__aeabi_dsub>
 80183e6:	a36e      	add	r3, pc, #440	; (adr r3, 80185a0 <_dtoa_r+0x2e0>)
 80183e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ec:	f7e8 f904 	bl	80005f8 <__aeabi_dmul>
 80183f0:	a36d      	add	r3, pc, #436	; (adr r3, 80185a8 <_dtoa_r+0x2e8>)
 80183f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183f6:	f7e7 ff49 	bl	800028c <__adddf3>
 80183fa:	4606      	mov	r6, r0
 80183fc:	4628      	mov	r0, r5
 80183fe:	460f      	mov	r7, r1
 8018400:	f7e8 f890 	bl	8000524 <__aeabi_i2d>
 8018404:	a36a      	add	r3, pc, #424	; (adr r3, 80185b0 <_dtoa_r+0x2f0>)
 8018406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801840a:	f7e8 f8f5 	bl	80005f8 <__aeabi_dmul>
 801840e:	4602      	mov	r2, r0
 8018410:	460b      	mov	r3, r1
 8018412:	4630      	mov	r0, r6
 8018414:	4639      	mov	r1, r7
 8018416:	f7e7 ff39 	bl	800028c <__adddf3>
 801841a:	4606      	mov	r6, r0
 801841c:	460f      	mov	r7, r1
 801841e:	f7e8 fb9b 	bl	8000b58 <__aeabi_d2iz>
 8018422:	2200      	movs	r2, #0
 8018424:	4682      	mov	sl, r0
 8018426:	2300      	movs	r3, #0
 8018428:	4630      	mov	r0, r6
 801842a:	4639      	mov	r1, r7
 801842c:	f7e8 fb56 	bl	8000adc <__aeabi_dcmplt>
 8018430:	b148      	cbz	r0, 8018446 <_dtoa_r+0x186>
 8018432:	4650      	mov	r0, sl
 8018434:	f7e8 f876 	bl	8000524 <__aeabi_i2d>
 8018438:	4632      	mov	r2, r6
 801843a:	463b      	mov	r3, r7
 801843c:	f7e8 fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8018440:	b908      	cbnz	r0, 8018446 <_dtoa_r+0x186>
 8018442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018446:	f1ba 0f16 	cmp.w	sl, #22
 801844a:	d854      	bhi.n	80184f6 <_dtoa_r+0x236>
 801844c:	4b61      	ldr	r3, [pc, #388]	; (80185d4 <_dtoa_r+0x314>)
 801844e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801845a:	f7e8 fb3f 	bl	8000adc <__aeabi_dcmplt>
 801845e:	2800      	cmp	r0, #0
 8018460:	d04b      	beq.n	80184fa <_dtoa_r+0x23a>
 8018462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018466:	2300      	movs	r3, #0
 8018468:	930e      	str	r3, [sp, #56]	; 0x38
 801846a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801846c:	1b5d      	subs	r5, r3, r5
 801846e:	1e6b      	subs	r3, r5, #1
 8018470:	9304      	str	r3, [sp, #16]
 8018472:	bf43      	ittte	mi
 8018474:	2300      	movmi	r3, #0
 8018476:	f1c5 0801 	rsbmi	r8, r5, #1
 801847a:	9304      	strmi	r3, [sp, #16]
 801847c:	f04f 0800 	movpl.w	r8, #0
 8018480:	f1ba 0f00 	cmp.w	sl, #0
 8018484:	db3b      	blt.n	80184fe <_dtoa_r+0x23e>
 8018486:	9b04      	ldr	r3, [sp, #16]
 8018488:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801848c:	4453      	add	r3, sl
 801848e:	9304      	str	r3, [sp, #16]
 8018490:	2300      	movs	r3, #0
 8018492:	9306      	str	r3, [sp, #24]
 8018494:	9b05      	ldr	r3, [sp, #20]
 8018496:	2b09      	cmp	r3, #9
 8018498:	d869      	bhi.n	801856e <_dtoa_r+0x2ae>
 801849a:	2b05      	cmp	r3, #5
 801849c:	bfc4      	itt	gt
 801849e:	3b04      	subgt	r3, #4
 80184a0:	9305      	strgt	r3, [sp, #20]
 80184a2:	9b05      	ldr	r3, [sp, #20]
 80184a4:	f1a3 0302 	sub.w	r3, r3, #2
 80184a8:	bfcc      	ite	gt
 80184aa:	2500      	movgt	r5, #0
 80184ac:	2501      	movle	r5, #1
 80184ae:	2b03      	cmp	r3, #3
 80184b0:	d869      	bhi.n	8018586 <_dtoa_r+0x2c6>
 80184b2:	e8df f003 	tbb	[pc, r3]
 80184b6:	4e2c      	.short	0x4e2c
 80184b8:	5a4c      	.short	0x5a4c
 80184ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80184be:	441d      	add	r5, r3
 80184c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80184c4:	2b20      	cmp	r3, #32
 80184c6:	bfc1      	itttt	gt
 80184c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80184cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80184d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80184d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80184d8:	bfda      	itte	le
 80184da:	f1c3 0320 	rsble	r3, r3, #32
 80184de:	fa06 f003 	lslle.w	r0, r6, r3
 80184e2:	4318      	orrgt	r0, r3
 80184e4:	f7e8 f80e 	bl	8000504 <__aeabi_ui2d>
 80184e8:	2301      	movs	r3, #1
 80184ea:	4606      	mov	r6, r0
 80184ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80184f0:	3d01      	subs	r5, #1
 80184f2:	9310      	str	r3, [sp, #64]	; 0x40
 80184f4:	e771      	b.n	80183da <_dtoa_r+0x11a>
 80184f6:	2301      	movs	r3, #1
 80184f8:	e7b6      	b.n	8018468 <_dtoa_r+0x1a8>
 80184fa:	900e      	str	r0, [sp, #56]	; 0x38
 80184fc:	e7b5      	b.n	801846a <_dtoa_r+0x1aa>
 80184fe:	f1ca 0300 	rsb	r3, sl, #0
 8018502:	9306      	str	r3, [sp, #24]
 8018504:	2300      	movs	r3, #0
 8018506:	eba8 080a 	sub.w	r8, r8, sl
 801850a:	930d      	str	r3, [sp, #52]	; 0x34
 801850c:	e7c2      	b.n	8018494 <_dtoa_r+0x1d4>
 801850e:	2300      	movs	r3, #0
 8018510:	9308      	str	r3, [sp, #32]
 8018512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018514:	2b00      	cmp	r3, #0
 8018516:	dc39      	bgt.n	801858c <_dtoa_r+0x2cc>
 8018518:	f04f 0901 	mov.w	r9, #1
 801851c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018520:	464b      	mov	r3, r9
 8018522:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018526:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018528:	2200      	movs	r2, #0
 801852a:	6042      	str	r2, [r0, #4]
 801852c:	2204      	movs	r2, #4
 801852e:	f102 0614 	add.w	r6, r2, #20
 8018532:	429e      	cmp	r6, r3
 8018534:	6841      	ldr	r1, [r0, #4]
 8018536:	d92f      	bls.n	8018598 <_dtoa_r+0x2d8>
 8018538:	4620      	mov	r0, r4
 801853a:	f001 f83f 	bl	80195bc <_Balloc>
 801853e:	9000      	str	r0, [sp, #0]
 8018540:	2800      	cmp	r0, #0
 8018542:	d14b      	bne.n	80185dc <_dtoa_r+0x31c>
 8018544:	4b24      	ldr	r3, [pc, #144]	; (80185d8 <_dtoa_r+0x318>)
 8018546:	4602      	mov	r2, r0
 8018548:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801854c:	e6d1      	b.n	80182f2 <_dtoa_r+0x32>
 801854e:	2301      	movs	r3, #1
 8018550:	e7de      	b.n	8018510 <_dtoa_r+0x250>
 8018552:	2300      	movs	r3, #0
 8018554:	9308      	str	r3, [sp, #32]
 8018556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018558:	eb0a 0903 	add.w	r9, sl, r3
 801855c:	f109 0301 	add.w	r3, r9, #1
 8018560:	2b01      	cmp	r3, #1
 8018562:	9301      	str	r3, [sp, #4]
 8018564:	bfb8      	it	lt
 8018566:	2301      	movlt	r3, #1
 8018568:	e7dd      	b.n	8018526 <_dtoa_r+0x266>
 801856a:	2301      	movs	r3, #1
 801856c:	e7f2      	b.n	8018554 <_dtoa_r+0x294>
 801856e:	2501      	movs	r5, #1
 8018570:	2300      	movs	r3, #0
 8018572:	9305      	str	r3, [sp, #20]
 8018574:	9508      	str	r5, [sp, #32]
 8018576:	f04f 39ff 	mov.w	r9, #4294967295
 801857a:	2200      	movs	r2, #0
 801857c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018580:	2312      	movs	r3, #18
 8018582:	9209      	str	r2, [sp, #36]	; 0x24
 8018584:	e7cf      	b.n	8018526 <_dtoa_r+0x266>
 8018586:	2301      	movs	r3, #1
 8018588:	9308      	str	r3, [sp, #32]
 801858a:	e7f4      	b.n	8018576 <_dtoa_r+0x2b6>
 801858c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018590:	f8cd 9004 	str.w	r9, [sp, #4]
 8018594:	464b      	mov	r3, r9
 8018596:	e7c6      	b.n	8018526 <_dtoa_r+0x266>
 8018598:	3101      	adds	r1, #1
 801859a:	6041      	str	r1, [r0, #4]
 801859c:	0052      	lsls	r2, r2, #1
 801859e:	e7c6      	b.n	801852e <_dtoa_r+0x26e>
 80185a0:	636f4361 	.word	0x636f4361
 80185a4:	3fd287a7 	.word	0x3fd287a7
 80185a8:	8b60c8b3 	.word	0x8b60c8b3
 80185ac:	3fc68a28 	.word	0x3fc68a28
 80185b0:	509f79fb 	.word	0x509f79fb
 80185b4:	3fd34413 	.word	0x3fd34413
 80185b8:	0801cbfe 	.word	0x0801cbfe
 80185bc:	0801cc15 	.word	0x0801cc15
 80185c0:	7ff00000 	.word	0x7ff00000
 80185c4:	0801cbfa 	.word	0x0801cbfa
 80185c8:	0801cbf1 	.word	0x0801cbf1
 80185cc:	0801ca75 	.word	0x0801ca75
 80185d0:	3ff80000 	.word	0x3ff80000
 80185d4:	0801cd90 	.word	0x0801cd90
 80185d8:	0801cc74 	.word	0x0801cc74
 80185dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80185de:	9a00      	ldr	r2, [sp, #0]
 80185e0:	601a      	str	r2, [r3, #0]
 80185e2:	9b01      	ldr	r3, [sp, #4]
 80185e4:	2b0e      	cmp	r3, #14
 80185e6:	f200 80ad 	bhi.w	8018744 <_dtoa_r+0x484>
 80185ea:	2d00      	cmp	r5, #0
 80185ec:	f000 80aa 	beq.w	8018744 <_dtoa_r+0x484>
 80185f0:	f1ba 0f00 	cmp.w	sl, #0
 80185f4:	dd36      	ble.n	8018664 <_dtoa_r+0x3a4>
 80185f6:	4ac3      	ldr	r2, [pc, #780]	; (8018904 <_dtoa_r+0x644>)
 80185f8:	f00a 030f 	and.w	r3, sl, #15
 80185fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018600:	ed93 7b00 	vldr	d7, [r3]
 8018604:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018608:	ea4f 172a 	mov.w	r7, sl, asr #4
 801860c:	eeb0 8a47 	vmov.f32	s16, s14
 8018610:	eef0 8a67 	vmov.f32	s17, s15
 8018614:	d016      	beq.n	8018644 <_dtoa_r+0x384>
 8018616:	4bbc      	ldr	r3, [pc, #752]	; (8018908 <_dtoa_r+0x648>)
 8018618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801861c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018620:	f7e8 f914 	bl	800084c <__aeabi_ddiv>
 8018624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018628:	f007 070f 	and.w	r7, r7, #15
 801862c:	2503      	movs	r5, #3
 801862e:	4eb6      	ldr	r6, [pc, #728]	; (8018908 <_dtoa_r+0x648>)
 8018630:	b957      	cbnz	r7, 8018648 <_dtoa_r+0x388>
 8018632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018636:	ec53 2b18 	vmov	r2, r3, d8
 801863a:	f7e8 f907 	bl	800084c <__aeabi_ddiv>
 801863e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018642:	e029      	b.n	8018698 <_dtoa_r+0x3d8>
 8018644:	2502      	movs	r5, #2
 8018646:	e7f2      	b.n	801862e <_dtoa_r+0x36e>
 8018648:	07f9      	lsls	r1, r7, #31
 801864a:	d508      	bpl.n	801865e <_dtoa_r+0x39e>
 801864c:	ec51 0b18 	vmov	r0, r1, d8
 8018650:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018654:	f7e7 ffd0 	bl	80005f8 <__aeabi_dmul>
 8018658:	ec41 0b18 	vmov	d8, r0, r1
 801865c:	3501      	adds	r5, #1
 801865e:	107f      	asrs	r7, r7, #1
 8018660:	3608      	adds	r6, #8
 8018662:	e7e5      	b.n	8018630 <_dtoa_r+0x370>
 8018664:	f000 80a6 	beq.w	80187b4 <_dtoa_r+0x4f4>
 8018668:	f1ca 0600 	rsb	r6, sl, #0
 801866c:	4ba5      	ldr	r3, [pc, #660]	; (8018904 <_dtoa_r+0x644>)
 801866e:	4fa6      	ldr	r7, [pc, #664]	; (8018908 <_dtoa_r+0x648>)
 8018670:	f006 020f 	and.w	r2, r6, #15
 8018674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801867c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018680:	f7e7 ffba 	bl	80005f8 <__aeabi_dmul>
 8018684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018688:	1136      	asrs	r6, r6, #4
 801868a:	2300      	movs	r3, #0
 801868c:	2502      	movs	r5, #2
 801868e:	2e00      	cmp	r6, #0
 8018690:	f040 8085 	bne.w	801879e <_dtoa_r+0x4de>
 8018694:	2b00      	cmp	r3, #0
 8018696:	d1d2      	bne.n	801863e <_dtoa_r+0x37e>
 8018698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801869a:	2b00      	cmp	r3, #0
 801869c:	f000 808c 	beq.w	80187b8 <_dtoa_r+0x4f8>
 80186a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80186a4:	4b99      	ldr	r3, [pc, #612]	; (801890c <_dtoa_r+0x64c>)
 80186a6:	2200      	movs	r2, #0
 80186a8:	4630      	mov	r0, r6
 80186aa:	4639      	mov	r1, r7
 80186ac:	f7e8 fa16 	bl	8000adc <__aeabi_dcmplt>
 80186b0:	2800      	cmp	r0, #0
 80186b2:	f000 8081 	beq.w	80187b8 <_dtoa_r+0x4f8>
 80186b6:	9b01      	ldr	r3, [sp, #4]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d07d      	beq.n	80187b8 <_dtoa_r+0x4f8>
 80186bc:	f1b9 0f00 	cmp.w	r9, #0
 80186c0:	dd3c      	ble.n	801873c <_dtoa_r+0x47c>
 80186c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80186c6:	9307      	str	r3, [sp, #28]
 80186c8:	2200      	movs	r2, #0
 80186ca:	4b91      	ldr	r3, [pc, #580]	; (8018910 <_dtoa_r+0x650>)
 80186cc:	4630      	mov	r0, r6
 80186ce:	4639      	mov	r1, r7
 80186d0:	f7e7 ff92 	bl	80005f8 <__aeabi_dmul>
 80186d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186d8:	3501      	adds	r5, #1
 80186da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80186de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80186e2:	4628      	mov	r0, r5
 80186e4:	f7e7 ff1e 	bl	8000524 <__aeabi_i2d>
 80186e8:	4632      	mov	r2, r6
 80186ea:	463b      	mov	r3, r7
 80186ec:	f7e7 ff84 	bl	80005f8 <__aeabi_dmul>
 80186f0:	4b88      	ldr	r3, [pc, #544]	; (8018914 <_dtoa_r+0x654>)
 80186f2:	2200      	movs	r2, #0
 80186f4:	f7e7 fdca 	bl	800028c <__adddf3>
 80186f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80186fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018700:	9303      	str	r3, [sp, #12]
 8018702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018704:	2b00      	cmp	r3, #0
 8018706:	d15c      	bne.n	80187c2 <_dtoa_r+0x502>
 8018708:	4b83      	ldr	r3, [pc, #524]	; (8018918 <_dtoa_r+0x658>)
 801870a:	2200      	movs	r2, #0
 801870c:	4630      	mov	r0, r6
 801870e:	4639      	mov	r1, r7
 8018710:	f7e7 fdba 	bl	8000288 <__aeabi_dsub>
 8018714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018718:	4606      	mov	r6, r0
 801871a:	460f      	mov	r7, r1
 801871c:	f7e8 f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 8018720:	2800      	cmp	r0, #0
 8018722:	f040 8296 	bne.w	8018c52 <_dtoa_r+0x992>
 8018726:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801872a:	4630      	mov	r0, r6
 801872c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018730:	4639      	mov	r1, r7
 8018732:	f7e8 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8018736:	2800      	cmp	r0, #0
 8018738:	f040 8288 	bne.w	8018c4c <_dtoa_r+0x98c>
 801873c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018746:	2b00      	cmp	r3, #0
 8018748:	f2c0 8158 	blt.w	80189fc <_dtoa_r+0x73c>
 801874c:	f1ba 0f0e 	cmp.w	sl, #14
 8018750:	f300 8154 	bgt.w	80189fc <_dtoa_r+0x73c>
 8018754:	4b6b      	ldr	r3, [pc, #428]	; (8018904 <_dtoa_r+0x644>)
 8018756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801875a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801875e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018760:	2b00      	cmp	r3, #0
 8018762:	f280 80e3 	bge.w	801892c <_dtoa_r+0x66c>
 8018766:	9b01      	ldr	r3, [sp, #4]
 8018768:	2b00      	cmp	r3, #0
 801876a:	f300 80df 	bgt.w	801892c <_dtoa_r+0x66c>
 801876e:	f040 826d 	bne.w	8018c4c <_dtoa_r+0x98c>
 8018772:	4b69      	ldr	r3, [pc, #420]	; (8018918 <_dtoa_r+0x658>)
 8018774:	2200      	movs	r2, #0
 8018776:	4640      	mov	r0, r8
 8018778:	4649      	mov	r1, r9
 801877a:	f7e7 ff3d 	bl	80005f8 <__aeabi_dmul>
 801877e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018782:	f7e8 f9bf 	bl	8000b04 <__aeabi_dcmpge>
 8018786:	9e01      	ldr	r6, [sp, #4]
 8018788:	4637      	mov	r7, r6
 801878a:	2800      	cmp	r0, #0
 801878c:	f040 8243 	bne.w	8018c16 <_dtoa_r+0x956>
 8018790:	9d00      	ldr	r5, [sp, #0]
 8018792:	2331      	movs	r3, #49	; 0x31
 8018794:	f805 3b01 	strb.w	r3, [r5], #1
 8018798:	f10a 0a01 	add.w	sl, sl, #1
 801879c:	e23f      	b.n	8018c1e <_dtoa_r+0x95e>
 801879e:	07f2      	lsls	r2, r6, #31
 80187a0:	d505      	bpl.n	80187ae <_dtoa_r+0x4ee>
 80187a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80187a6:	f7e7 ff27 	bl	80005f8 <__aeabi_dmul>
 80187aa:	3501      	adds	r5, #1
 80187ac:	2301      	movs	r3, #1
 80187ae:	1076      	asrs	r6, r6, #1
 80187b0:	3708      	adds	r7, #8
 80187b2:	e76c      	b.n	801868e <_dtoa_r+0x3ce>
 80187b4:	2502      	movs	r5, #2
 80187b6:	e76f      	b.n	8018698 <_dtoa_r+0x3d8>
 80187b8:	9b01      	ldr	r3, [sp, #4]
 80187ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80187be:	930c      	str	r3, [sp, #48]	; 0x30
 80187c0:	e78d      	b.n	80186de <_dtoa_r+0x41e>
 80187c2:	9900      	ldr	r1, [sp, #0]
 80187c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80187c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80187c8:	4b4e      	ldr	r3, [pc, #312]	; (8018904 <_dtoa_r+0x644>)
 80187ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80187ce:	4401      	add	r1, r0
 80187d0:	9102      	str	r1, [sp, #8]
 80187d2:	9908      	ldr	r1, [sp, #32]
 80187d4:	eeb0 8a47 	vmov.f32	s16, s14
 80187d8:	eef0 8a67 	vmov.f32	s17, s15
 80187dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80187e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80187e4:	2900      	cmp	r1, #0
 80187e6:	d045      	beq.n	8018874 <_dtoa_r+0x5b4>
 80187e8:	494c      	ldr	r1, [pc, #304]	; (801891c <_dtoa_r+0x65c>)
 80187ea:	2000      	movs	r0, #0
 80187ec:	f7e8 f82e 	bl	800084c <__aeabi_ddiv>
 80187f0:	ec53 2b18 	vmov	r2, r3, d8
 80187f4:	f7e7 fd48 	bl	8000288 <__aeabi_dsub>
 80187f8:	9d00      	ldr	r5, [sp, #0]
 80187fa:	ec41 0b18 	vmov	d8, r0, r1
 80187fe:	4639      	mov	r1, r7
 8018800:	4630      	mov	r0, r6
 8018802:	f7e8 f9a9 	bl	8000b58 <__aeabi_d2iz>
 8018806:	900c      	str	r0, [sp, #48]	; 0x30
 8018808:	f7e7 fe8c 	bl	8000524 <__aeabi_i2d>
 801880c:	4602      	mov	r2, r0
 801880e:	460b      	mov	r3, r1
 8018810:	4630      	mov	r0, r6
 8018812:	4639      	mov	r1, r7
 8018814:	f7e7 fd38 	bl	8000288 <__aeabi_dsub>
 8018818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801881a:	3330      	adds	r3, #48	; 0x30
 801881c:	f805 3b01 	strb.w	r3, [r5], #1
 8018820:	ec53 2b18 	vmov	r2, r3, d8
 8018824:	4606      	mov	r6, r0
 8018826:	460f      	mov	r7, r1
 8018828:	f7e8 f958 	bl	8000adc <__aeabi_dcmplt>
 801882c:	2800      	cmp	r0, #0
 801882e:	d165      	bne.n	80188fc <_dtoa_r+0x63c>
 8018830:	4632      	mov	r2, r6
 8018832:	463b      	mov	r3, r7
 8018834:	4935      	ldr	r1, [pc, #212]	; (801890c <_dtoa_r+0x64c>)
 8018836:	2000      	movs	r0, #0
 8018838:	f7e7 fd26 	bl	8000288 <__aeabi_dsub>
 801883c:	ec53 2b18 	vmov	r2, r3, d8
 8018840:	f7e8 f94c 	bl	8000adc <__aeabi_dcmplt>
 8018844:	2800      	cmp	r0, #0
 8018846:	f040 80b9 	bne.w	80189bc <_dtoa_r+0x6fc>
 801884a:	9b02      	ldr	r3, [sp, #8]
 801884c:	429d      	cmp	r5, r3
 801884e:	f43f af75 	beq.w	801873c <_dtoa_r+0x47c>
 8018852:	4b2f      	ldr	r3, [pc, #188]	; (8018910 <_dtoa_r+0x650>)
 8018854:	ec51 0b18 	vmov	r0, r1, d8
 8018858:	2200      	movs	r2, #0
 801885a:	f7e7 fecd 	bl	80005f8 <__aeabi_dmul>
 801885e:	4b2c      	ldr	r3, [pc, #176]	; (8018910 <_dtoa_r+0x650>)
 8018860:	ec41 0b18 	vmov	d8, r0, r1
 8018864:	2200      	movs	r2, #0
 8018866:	4630      	mov	r0, r6
 8018868:	4639      	mov	r1, r7
 801886a:	f7e7 fec5 	bl	80005f8 <__aeabi_dmul>
 801886e:	4606      	mov	r6, r0
 8018870:	460f      	mov	r7, r1
 8018872:	e7c4      	b.n	80187fe <_dtoa_r+0x53e>
 8018874:	ec51 0b17 	vmov	r0, r1, d7
 8018878:	f7e7 febe 	bl	80005f8 <__aeabi_dmul>
 801887c:	9b02      	ldr	r3, [sp, #8]
 801887e:	9d00      	ldr	r5, [sp, #0]
 8018880:	930c      	str	r3, [sp, #48]	; 0x30
 8018882:	ec41 0b18 	vmov	d8, r0, r1
 8018886:	4639      	mov	r1, r7
 8018888:	4630      	mov	r0, r6
 801888a:	f7e8 f965 	bl	8000b58 <__aeabi_d2iz>
 801888e:	9011      	str	r0, [sp, #68]	; 0x44
 8018890:	f7e7 fe48 	bl	8000524 <__aeabi_i2d>
 8018894:	4602      	mov	r2, r0
 8018896:	460b      	mov	r3, r1
 8018898:	4630      	mov	r0, r6
 801889a:	4639      	mov	r1, r7
 801889c:	f7e7 fcf4 	bl	8000288 <__aeabi_dsub>
 80188a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80188a2:	3330      	adds	r3, #48	; 0x30
 80188a4:	f805 3b01 	strb.w	r3, [r5], #1
 80188a8:	9b02      	ldr	r3, [sp, #8]
 80188aa:	429d      	cmp	r5, r3
 80188ac:	4606      	mov	r6, r0
 80188ae:	460f      	mov	r7, r1
 80188b0:	f04f 0200 	mov.w	r2, #0
 80188b4:	d134      	bne.n	8018920 <_dtoa_r+0x660>
 80188b6:	4b19      	ldr	r3, [pc, #100]	; (801891c <_dtoa_r+0x65c>)
 80188b8:	ec51 0b18 	vmov	r0, r1, d8
 80188bc:	f7e7 fce6 	bl	800028c <__adddf3>
 80188c0:	4602      	mov	r2, r0
 80188c2:	460b      	mov	r3, r1
 80188c4:	4630      	mov	r0, r6
 80188c6:	4639      	mov	r1, r7
 80188c8:	f7e8 f926 	bl	8000b18 <__aeabi_dcmpgt>
 80188cc:	2800      	cmp	r0, #0
 80188ce:	d175      	bne.n	80189bc <_dtoa_r+0x6fc>
 80188d0:	ec53 2b18 	vmov	r2, r3, d8
 80188d4:	4911      	ldr	r1, [pc, #68]	; (801891c <_dtoa_r+0x65c>)
 80188d6:	2000      	movs	r0, #0
 80188d8:	f7e7 fcd6 	bl	8000288 <__aeabi_dsub>
 80188dc:	4602      	mov	r2, r0
 80188de:	460b      	mov	r3, r1
 80188e0:	4630      	mov	r0, r6
 80188e2:	4639      	mov	r1, r7
 80188e4:	f7e8 f8fa 	bl	8000adc <__aeabi_dcmplt>
 80188e8:	2800      	cmp	r0, #0
 80188ea:	f43f af27 	beq.w	801873c <_dtoa_r+0x47c>
 80188ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80188f0:	1e6b      	subs	r3, r5, #1
 80188f2:	930c      	str	r3, [sp, #48]	; 0x30
 80188f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80188f8:	2b30      	cmp	r3, #48	; 0x30
 80188fa:	d0f8      	beq.n	80188ee <_dtoa_r+0x62e>
 80188fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018900:	e04a      	b.n	8018998 <_dtoa_r+0x6d8>
 8018902:	bf00      	nop
 8018904:	0801cd90 	.word	0x0801cd90
 8018908:	0801cd68 	.word	0x0801cd68
 801890c:	3ff00000 	.word	0x3ff00000
 8018910:	40240000 	.word	0x40240000
 8018914:	401c0000 	.word	0x401c0000
 8018918:	40140000 	.word	0x40140000
 801891c:	3fe00000 	.word	0x3fe00000
 8018920:	4baf      	ldr	r3, [pc, #700]	; (8018be0 <_dtoa_r+0x920>)
 8018922:	f7e7 fe69 	bl	80005f8 <__aeabi_dmul>
 8018926:	4606      	mov	r6, r0
 8018928:	460f      	mov	r7, r1
 801892a:	e7ac      	b.n	8018886 <_dtoa_r+0x5c6>
 801892c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018930:	9d00      	ldr	r5, [sp, #0]
 8018932:	4642      	mov	r2, r8
 8018934:	464b      	mov	r3, r9
 8018936:	4630      	mov	r0, r6
 8018938:	4639      	mov	r1, r7
 801893a:	f7e7 ff87 	bl	800084c <__aeabi_ddiv>
 801893e:	f7e8 f90b 	bl	8000b58 <__aeabi_d2iz>
 8018942:	9002      	str	r0, [sp, #8]
 8018944:	f7e7 fdee 	bl	8000524 <__aeabi_i2d>
 8018948:	4642      	mov	r2, r8
 801894a:	464b      	mov	r3, r9
 801894c:	f7e7 fe54 	bl	80005f8 <__aeabi_dmul>
 8018950:	4602      	mov	r2, r0
 8018952:	460b      	mov	r3, r1
 8018954:	4630      	mov	r0, r6
 8018956:	4639      	mov	r1, r7
 8018958:	f7e7 fc96 	bl	8000288 <__aeabi_dsub>
 801895c:	9e02      	ldr	r6, [sp, #8]
 801895e:	9f01      	ldr	r7, [sp, #4]
 8018960:	3630      	adds	r6, #48	; 0x30
 8018962:	f805 6b01 	strb.w	r6, [r5], #1
 8018966:	9e00      	ldr	r6, [sp, #0]
 8018968:	1bae      	subs	r6, r5, r6
 801896a:	42b7      	cmp	r7, r6
 801896c:	4602      	mov	r2, r0
 801896e:	460b      	mov	r3, r1
 8018970:	d137      	bne.n	80189e2 <_dtoa_r+0x722>
 8018972:	f7e7 fc8b 	bl	800028c <__adddf3>
 8018976:	4642      	mov	r2, r8
 8018978:	464b      	mov	r3, r9
 801897a:	4606      	mov	r6, r0
 801897c:	460f      	mov	r7, r1
 801897e:	f7e8 f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 8018982:	b9c8      	cbnz	r0, 80189b8 <_dtoa_r+0x6f8>
 8018984:	4642      	mov	r2, r8
 8018986:	464b      	mov	r3, r9
 8018988:	4630      	mov	r0, r6
 801898a:	4639      	mov	r1, r7
 801898c:	f7e8 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018990:	b110      	cbz	r0, 8018998 <_dtoa_r+0x6d8>
 8018992:	9b02      	ldr	r3, [sp, #8]
 8018994:	07d9      	lsls	r1, r3, #31
 8018996:	d40f      	bmi.n	80189b8 <_dtoa_r+0x6f8>
 8018998:	4620      	mov	r0, r4
 801899a:	4659      	mov	r1, fp
 801899c:	f000 fe4e 	bl	801963c <_Bfree>
 80189a0:	2300      	movs	r3, #0
 80189a2:	702b      	strb	r3, [r5, #0]
 80189a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189a6:	f10a 0001 	add.w	r0, sl, #1
 80189aa:	6018      	str	r0, [r3, #0]
 80189ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	f43f acd8 	beq.w	8018364 <_dtoa_r+0xa4>
 80189b4:	601d      	str	r5, [r3, #0]
 80189b6:	e4d5      	b.n	8018364 <_dtoa_r+0xa4>
 80189b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80189bc:	462b      	mov	r3, r5
 80189be:	461d      	mov	r5, r3
 80189c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80189c4:	2a39      	cmp	r2, #57	; 0x39
 80189c6:	d108      	bne.n	80189da <_dtoa_r+0x71a>
 80189c8:	9a00      	ldr	r2, [sp, #0]
 80189ca:	429a      	cmp	r2, r3
 80189cc:	d1f7      	bne.n	80189be <_dtoa_r+0x6fe>
 80189ce:	9a07      	ldr	r2, [sp, #28]
 80189d0:	9900      	ldr	r1, [sp, #0]
 80189d2:	3201      	adds	r2, #1
 80189d4:	9207      	str	r2, [sp, #28]
 80189d6:	2230      	movs	r2, #48	; 0x30
 80189d8:	700a      	strb	r2, [r1, #0]
 80189da:	781a      	ldrb	r2, [r3, #0]
 80189dc:	3201      	adds	r2, #1
 80189de:	701a      	strb	r2, [r3, #0]
 80189e0:	e78c      	b.n	80188fc <_dtoa_r+0x63c>
 80189e2:	4b7f      	ldr	r3, [pc, #508]	; (8018be0 <_dtoa_r+0x920>)
 80189e4:	2200      	movs	r2, #0
 80189e6:	f7e7 fe07 	bl	80005f8 <__aeabi_dmul>
 80189ea:	2200      	movs	r2, #0
 80189ec:	2300      	movs	r3, #0
 80189ee:	4606      	mov	r6, r0
 80189f0:	460f      	mov	r7, r1
 80189f2:	f7e8 f869 	bl	8000ac8 <__aeabi_dcmpeq>
 80189f6:	2800      	cmp	r0, #0
 80189f8:	d09b      	beq.n	8018932 <_dtoa_r+0x672>
 80189fa:	e7cd      	b.n	8018998 <_dtoa_r+0x6d8>
 80189fc:	9a08      	ldr	r2, [sp, #32]
 80189fe:	2a00      	cmp	r2, #0
 8018a00:	f000 80c4 	beq.w	8018b8c <_dtoa_r+0x8cc>
 8018a04:	9a05      	ldr	r2, [sp, #20]
 8018a06:	2a01      	cmp	r2, #1
 8018a08:	f300 80a8 	bgt.w	8018b5c <_dtoa_r+0x89c>
 8018a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a0e:	2a00      	cmp	r2, #0
 8018a10:	f000 80a0 	beq.w	8018b54 <_dtoa_r+0x894>
 8018a14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018a18:	9e06      	ldr	r6, [sp, #24]
 8018a1a:	4645      	mov	r5, r8
 8018a1c:	9a04      	ldr	r2, [sp, #16]
 8018a1e:	2101      	movs	r1, #1
 8018a20:	441a      	add	r2, r3
 8018a22:	4620      	mov	r0, r4
 8018a24:	4498      	add	r8, r3
 8018a26:	9204      	str	r2, [sp, #16]
 8018a28:	f000 ff0e 	bl	8019848 <__i2b>
 8018a2c:	4607      	mov	r7, r0
 8018a2e:	2d00      	cmp	r5, #0
 8018a30:	dd0b      	ble.n	8018a4a <_dtoa_r+0x78a>
 8018a32:	9b04      	ldr	r3, [sp, #16]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	dd08      	ble.n	8018a4a <_dtoa_r+0x78a>
 8018a38:	42ab      	cmp	r3, r5
 8018a3a:	9a04      	ldr	r2, [sp, #16]
 8018a3c:	bfa8      	it	ge
 8018a3e:	462b      	movge	r3, r5
 8018a40:	eba8 0803 	sub.w	r8, r8, r3
 8018a44:	1aed      	subs	r5, r5, r3
 8018a46:	1ad3      	subs	r3, r2, r3
 8018a48:	9304      	str	r3, [sp, #16]
 8018a4a:	9b06      	ldr	r3, [sp, #24]
 8018a4c:	b1fb      	cbz	r3, 8018a8e <_dtoa_r+0x7ce>
 8018a4e:	9b08      	ldr	r3, [sp, #32]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	f000 809f 	beq.w	8018b94 <_dtoa_r+0x8d4>
 8018a56:	2e00      	cmp	r6, #0
 8018a58:	dd11      	ble.n	8018a7e <_dtoa_r+0x7be>
 8018a5a:	4639      	mov	r1, r7
 8018a5c:	4632      	mov	r2, r6
 8018a5e:	4620      	mov	r0, r4
 8018a60:	f000 ffae 	bl	80199c0 <__pow5mult>
 8018a64:	465a      	mov	r2, fp
 8018a66:	4601      	mov	r1, r0
 8018a68:	4607      	mov	r7, r0
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f000 ff02 	bl	8019874 <__multiply>
 8018a70:	4659      	mov	r1, fp
 8018a72:	9007      	str	r0, [sp, #28]
 8018a74:	4620      	mov	r0, r4
 8018a76:	f000 fde1 	bl	801963c <_Bfree>
 8018a7a:	9b07      	ldr	r3, [sp, #28]
 8018a7c:	469b      	mov	fp, r3
 8018a7e:	9b06      	ldr	r3, [sp, #24]
 8018a80:	1b9a      	subs	r2, r3, r6
 8018a82:	d004      	beq.n	8018a8e <_dtoa_r+0x7ce>
 8018a84:	4659      	mov	r1, fp
 8018a86:	4620      	mov	r0, r4
 8018a88:	f000 ff9a 	bl	80199c0 <__pow5mult>
 8018a8c:	4683      	mov	fp, r0
 8018a8e:	2101      	movs	r1, #1
 8018a90:	4620      	mov	r0, r4
 8018a92:	f000 fed9 	bl	8019848 <__i2b>
 8018a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	4606      	mov	r6, r0
 8018a9c:	dd7c      	ble.n	8018b98 <_dtoa_r+0x8d8>
 8018a9e:	461a      	mov	r2, r3
 8018aa0:	4601      	mov	r1, r0
 8018aa2:	4620      	mov	r0, r4
 8018aa4:	f000 ff8c 	bl	80199c0 <__pow5mult>
 8018aa8:	9b05      	ldr	r3, [sp, #20]
 8018aaa:	2b01      	cmp	r3, #1
 8018aac:	4606      	mov	r6, r0
 8018aae:	dd76      	ble.n	8018b9e <_dtoa_r+0x8de>
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	9306      	str	r3, [sp, #24]
 8018ab4:	6933      	ldr	r3, [r6, #16]
 8018ab6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018aba:	6918      	ldr	r0, [r3, #16]
 8018abc:	f000 fe74 	bl	80197a8 <__hi0bits>
 8018ac0:	f1c0 0020 	rsb	r0, r0, #32
 8018ac4:	9b04      	ldr	r3, [sp, #16]
 8018ac6:	4418      	add	r0, r3
 8018ac8:	f010 001f 	ands.w	r0, r0, #31
 8018acc:	f000 8086 	beq.w	8018bdc <_dtoa_r+0x91c>
 8018ad0:	f1c0 0320 	rsb	r3, r0, #32
 8018ad4:	2b04      	cmp	r3, #4
 8018ad6:	dd7f      	ble.n	8018bd8 <_dtoa_r+0x918>
 8018ad8:	f1c0 001c 	rsb	r0, r0, #28
 8018adc:	9b04      	ldr	r3, [sp, #16]
 8018ade:	4403      	add	r3, r0
 8018ae0:	4480      	add	r8, r0
 8018ae2:	4405      	add	r5, r0
 8018ae4:	9304      	str	r3, [sp, #16]
 8018ae6:	f1b8 0f00 	cmp.w	r8, #0
 8018aea:	dd05      	ble.n	8018af8 <_dtoa_r+0x838>
 8018aec:	4659      	mov	r1, fp
 8018aee:	4642      	mov	r2, r8
 8018af0:	4620      	mov	r0, r4
 8018af2:	f000 ffbf 	bl	8019a74 <__lshift>
 8018af6:	4683      	mov	fp, r0
 8018af8:	9b04      	ldr	r3, [sp, #16]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	dd05      	ble.n	8018b0a <_dtoa_r+0x84a>
 8018afe:	4631      	mov	r1, r6
 8018b00:	461a      	mov	r2, r3
 8018b02:	4620      	mov	r0, r4
 8018b04:	f000 ffb6 	bl	8019a74 <__lshift>
 8018b08:	4606      	mov	r6, r0
 8018b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d069      	beq.n	8018be4 <_dtoa_r+0x924>
 8018b10:	4631      	mov	r1, r6
 8018b12:	4658      	mov	r0, fp
 8018b14:	f001 f81a 	bl	8019b4c <__mcmp>
 8018b18:	2800      	cmp	r0, #0
 8018b1a:	da63      	bge.n	8018be4 <_dtoa_r+0x924>
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	4659      	mov	r1, fp
 8018b20:	220a      	movs	r2, #10
 8018b22:	4620      	mov	r0, r4
 8018b24:	f000 fdac 	bl	8019680 <__multadd>
 8018b28:	9b08      	ldr	r3, [sp, #32]
 8018b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018b2e:	4683      	mov	fp, r0
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	f000 818f 	beq.w	8018e54 <_dtoa_r+0xb94>
 8018b36:	4639      	mov	r1, r7
 8018b38:	2300      	movs	r3, #0
 8018b3a:	220a      	movs	r2, #10
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	f000 fd9f 	bl	8019680 <__multadd>
 8018b42:	f1b9 0f00 	cmp.w	r9, #0
 8018b46:	4607      	mov	r7, r0
 8018b48:	f300 808e 	bgt.w	8018c68 <_dtoa_r+0x9a8>
 8018b4c:	9b05      	ldr	r3, [sp, #20]
 8018b4e:	2b02      	cmp	r3, #2
 8018b50:	dc50      	bgt.n	8018bf4 <_dtoa_r+0x934>
 8018b52:	e089      	b.n	8018c68 <_dtoa_r+0x9a8>
 8018b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018b5a:	e75d      	b.n	8018a18 <_dtoa_r+0x758>
 8018b5c:	9b01      	ldr	r3, [sp, #4]
 8018b5e:	1e5e      	subs	r6, r3, #1
 8018b60:	9b06      	ldr	r3, [sp, #24]
 8018b62:	42b3      	cmp	r3, r6
 8018b64:	bfbf      	itttt	lt
 8018b66:	9b06      	ldrlt	r3, [sp, #24]
 8018b68:	9606      	strlt	r6, [sp, #24]
 8018b6a:	1af2      	sublt	r2, r6, r3
 8018b6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018b6e:	bfb6      	itet	lt
 8018b70:	189b      	addlt	r3, r3, r2
 8018b72:	1b9e      	subge	r6, r3, r6
 8018b74:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018b76:	9b01      	ldr	r3, [sp, #4]
 8018b78:	bfb8      	it	lt
 8018b7a:	2600      	movlt	r6, #0
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	bfb5      	itete	lt
 8018b80:	eba8 0503 	sublt.w	r5, r8, r3
 8018b84:	9b01      	ldrge	r3, [sp, #4]
 8018b86:	2300      	movlt	r3, #0
 8018b88:	4645      	movge	r5, r8
 8018b8a:	e747      	b.n	8018a1c <_dtoa_r+0x75c>
 8018b8c:	9e06      	ldr	r6, [sp, #24]
 8018b8e:	9f08      	ldr	r7, [sp, #32]
 8018b90:	4645      	mov	r5, r8
 8018b92:	e74c      	b.n	8018a2e <_dtoa_r+0x76e>
 8018b94:	9a06      	ldr	r2, [sp, #24]
 8018b96:	e775      	b.n	8018a84 <_dtoa_r+0x7c4>
 8018b98:	9b05      	ldr	r3, [sp, #20]
 8018b9a:	2b01      	cmp	r3, #1
 8018b9c:	dc18      	bgt.n	8018bd0 <_dtoa_r+0x910>
 8018b9e:	9b02      	ldr	r3, [sp, #8]
 8018ba0:	b9b3      	cbnz	r3, 8018bd0 <_dtoa_r+0x910>
 8018ba2:	9b03      	ldr	r3, [sp, #12]
 8018ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018ba8:	b9a3      	cbnz	r3, 8018bd4 <_dtoa_r+0x914>
 8018baa:	9b03      	ldr	r3, [sp, #12]
 8018bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018bb0:	0d1b      	lsrs	r3, r3, #20
 8018bb2:	051b      	lsls	r3, r3, #20
 8018bb4:	b12b      	cbz	r3, 8018bc2 <_dtoa_r+0x902>
 8018bb6:	9b04      	ldr	r3, [sp, #16]
 8018bb8:	3301      	adds	r3, #1
 8018bba:	9304      	str	r3, [sp, #16]
 8018bbc:	f108 0801 	add.w	r8, r8, #1
 8018bc0:	2301      	movs	r3, #1
 8018bc2:	9306      	str	r3, [sp, #24]
 8018bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	f47f af74 	bne.w	8018ab4 <_dtoa_r+0x7f4>
 8018bcc:	2001      	movs	r0, #1
 8018bce:	e779      	b.n	8018ac4 <_dtoa_r+0x804>
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	e7f6      	b.n	8018bc2 <_dtoa_r+0x902>
 8018bd4:	9b02      	ldr	r3, [sp, #8]
 8018bd6:	e7f4      	b.n	8018bc2 <_dtoa_r+0x902>
 8018bd8:	d085      	beq.n	8018ae6 <_dtoa_r+0x826>
 8018bda:	4618      	mov	r0, r3
 8018bdc:	301c      	adds	r0, #28
 8018bde:	e77d      	b.n	8018adc <_dtoa_r+0x81c>
 8018be0:	40240000 	.word	0x40240000
 8018be4:	9b01      	ldr	r3, [sp, #4]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	dc38      	bgt.n	8018c5c <_dtoa_r+0x99c>
 8018bea:	9b05      	ldr	r3, [sp, #20]
 8018bec:	2b02      	cmp	r3, #2
 8018bee:	dd35      	ble.n	8018c5c <_dtoa_r+0x99c>
 8018bf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018bf4:	f1b9 0f00 	cmp.w	r9, #0
 8018bf8:	d10d      	bne.n	8018c16 <_dtoa_r+0x956>
 8018bfa:	4631      	mov	r1, r6
 8018bfc:	464b      	mov	r3, r9
 8018bfe:	2205      	movs	r2, #5
 8018c00:	4620      	mov	r0, r4
 8018c02:	f000 fd3d 	bl	8019680 <__multadd>
 8018c06:	4601      	mov	r1, r0
 8018c08:	4606      	mov	r6, r0
 8018c0a:	4658      	mov	r0, fp
 8018c0c:	f000 ff9e 	bl	8019b4c <__mcmp>
 8018c10:	2800      	cmp	r0, #0
 8018c12:	f73f adbd 	bgt.w	8018790 <_dtoa_r+0x4d0>
 8018c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c18:	9d00      	ldr	r5, [sp, #0]
 8018c1a:	ea6f 0a03 	mvn.w	sl, r3
 8018c1e:	f04f 0800 	mov.w	r8, #0
 8018c22:	4631      	mov	r1, r6
 8018c24:	4620      	mov	r0, r4
 8018c26:	f000 fd09 	bl	801963c <_Bfree>
 8018c2a:	2f00      	cmp	r7, #0
 8018c2c:	f43f aeb4 	beq.w	8018998 <_dtoa_r+0x6d8>
 8018c30:	f1b8 0f00 	cmp.w	r8, #0
 8018c34:	d005      	beq.n	8018c42 <_dtoa_r+0x982>
 8018c36:	45b8      	cmp	r8, r7
 8018c38:	d003      	beq.n	8018c42 <_dtoa_r+0x982>
 8018c3a:	4641      	mov	r1, r8
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	f000 fcfd 	bl	801963c <_Bfree>
 8018c42:	4639      	mov	r1, r7
 8018c44:	4620      	mov	r0, r4
 8018c46:	f000 fcf9 	bl	801963c <_Bfree>
 8018c4a:	e6a5      	b.n	8018998 <_dtoa_r+0x6d8>
 8018c4c:	2600      	movs	r6, #0
 8018c4e:	4637      	mov	r7, r6
 8018c50:	e7e1      	b.n	8018c16 <_dtoa_r+0x956>
 8018c52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018c54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018c58:	4637      	mov	r7, r6
 8018c5a:	e599      	b.n	8018790 <_dtoa_r+0x4d0>
 8018c5c:	9b08      	ldr	r3, [sp, #32]
 8018c5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	f000 80fd 	beq.w	8018e62 <_dtoa_r+0xba2>
 8018c68:	2d00      	cmp	r5, #0
 8018c6a:	dd05      	ble.n	8018c78 <_dtoa_r+0x9b8>
 8018c6c:	4639      	mov	r1, r7
 8018c6e:	462a      	mov	r2, r5
 8018c70:	4620      	mov	r0, r4
 8018c72:	f000 feff 	bl	8019a74 <__lshift>
 8018c76:	4607      	mov	r7, r0
 8018c78:	9b06      	ldr	r3, [sp, #24]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d05c      	beq.n	8018d38 <_dtoa_r+0xa78>
 8018c7e:	6879      	ldr	r1, [r7, #4]
 8018c80:	4620      	mov	r0, r4
 8018c82:	f000 fc9b 	bl	80195bc <_Balloc>
 8018c86:	4605      	mov	r5, r0
 8018c88:	b928      	cbnz	r0, 8018c96 <_dtoa_r+0x9d6>
 8018c8a:	4b80      	ldr	r3, [pc, #512]	; (8018e8c <_dtoa_r+0xbcc>)
 8018c8c:	4602      	mov	r2, r0
 8018c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018c92:	f7ff bb2e 	b.w	80182f2 <_dtoa_r+0x32>
 8018c96:	693a      	ldr	r2, [r7, #16]
 8018c98:	3202      	adds	r2, #2
 8018c9a:	0092      	lsls	r2, r2, #2
 8018c9c:	f107 010c 	add.w	r1, r7, #12
 8018ca0:	300c      	adds	r0, #12
 8018ca2:	f7fd fc0d 	bl	80164c0 <memcpy>
 8018ca6:	2201      	movs	r2, #1
 8018ca8:	4629      	mov	r1, r5
 8018caa:	4620      	mov	r0, r4
 8018cac:	f000 fee2 	bl	8019a74 <__lshift>
 8018cb0:	9b00      	ldr	r3, [sp, #0]
 8018cb2:	3301      	adds	r3, #1
 8018cb4:	9301      	str	r3, [sp, #4]
 8018cb6:	9b00      	ldr	r3, [sp, #0]
 8018cb8:	444b      	add	r3, r9
 8018cba:	9307      	str	r3, [sp, #28]
 8018cbc:	9b02      	ldr	r3, [sp, #8]
 8018cbe:	f003 0301 	and.w	r3, r3, #1
 8018cc2:	46b8      	mov	r8, r7
 8018cc4:	9306      	str	r3, [sp, #24]
 8018cc6:	4607      	mov	r7, r0
 8018cc8:	9b01      	ldr	r3, [sp, #4]
 8018cca:	4631      	mov	r1, r6
 8018ccc:	3b01      	subs	r3, #1
 8018cce:	4658      	mov	r0, fp
 8018cd0:	9302      	str	r3, [sp, #8]
 8018cd2:	f7ff fa67 	bl	80181a4 <quorem>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	3330      	adds	r3, #48	; 0x30
 8018cda:	9004      	str	r0, [sp, #16]
 8018cdc:	4641      	mov	r1, r8
 8018cde:	4658      	mov	r0, fp
 8018ce0:	9308      	str	r3, [sp, #32]
 8018ce2:	f000 ff33 	bl	8019b4c <__mcmp>
 8018ce6:	463a      	mov	r2, r7
 8018ce8:	4681      	mov	r9, r0
 8018cea:	4631      	mov	r1, r6
 8018cec:	4620      	mov	r0, r4
 8018cee:	f000 ff49 	bl	8019b84 <__mdiff>
 8018cf2:	68c2      	ldr	r2, [r0, #12]
 8018cf4:	9b08      	ldr	r3, [sp, #32]
 8018cf6:	4605      	mov	r5, r0
 8018cf8:	bb02      	cbnz	r2, 8018d3c <_dtoa_r+0xa7c>
 8018cfa:	4601      	mov	r1, r0
 8018cfc:	4658      	mov	r0, fp
 8018cfe:	f000 ff25 	bl	8019b4c <__mcmp>
 8018d02:	9b08      	ldr	r3, [sp, #32]
 8018d04:	4602      	mov	r2, r0
 8018d06:	4629      	mov	r1, r5
 8018d08:	4620      	mov	r0, r4
 8018d0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018d0e:	f000 fc95 	bl	801963c <_Bfree>
 8018d12:	9b05      	ldr	r3, [sp, #20]
 8018d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d16:	9d01      	ldr	r5, [sp, #4]
 8018d18:	ea43 0102 	orr.w	r1, r3, r2
 8018d1c:	9b06      	ldr	r3, [sp, #24]
 8018d1e:	430b      	orrs	r3, r1
 8018d20:	9b08      	ldr	r3, [sp, #32]
 8018d22:	d10d      	bne.n	8018d40 <_dtoa_r+0xa80>
 8018d24:	2b39      	cmp	r3, #57	; 0x39
 8018d26:	d029      	beq.n	8018d7c <_dtoa_r+0xabc>
 8018d28:	f1b9 0f00 	cmp.w	r9, #0
 8018d2c:	dd01      	ble.n	8018d32 <_dtoa_r+0xa72>
 8018d2e:	9b04      	ldr	r3, [sp, #16]
 8018d30:	3331      	adds	r3, #49	; 0x31
 8018d32:	9a02      	ldr	r2, [sp, #8]
 8018d34:	7013      	strb	r3, [r2, #0]
 8018d36:	e774      	b.n	8018c22 <_dtoa_r+0x962>
 8018d38:	4638      	mov	r0, r7
 8018d3a:	e7b9      	b.n	8018cb0 <_dtoa_r+0x9f0>
 8018d3c:	2201      	movs	r2, #1
 8018d3e:	e7e2      	b.n	8018d06 <_dtoa_r+0xa46>
 8018d40:	f1b9 0f00 	cmp.w	r9, #0
 8018d44:	db06      	blt.n	8018d54 <_dtoa_r+0xa94>
 8018d46:	9905      	ldr	r1, [sp, #20]
 8018d48:	ea41 0909 	orr.w	r9, r1, r9
 8018d4c:	9906      	ldr	r1, [sp, #24]
 8018d4e:	ea59 0101 	orrs.w	r1, r9, r1
 8018d52:	d120      	bne.n	8018d96 <_dtoa_r+0xad6>
 8018d54:	2a00      	cmp	r2, #0
 8018d56:	ddec      	ble.n	8018d32 <_dtoa_r+0xa72>
 8018d58:	4659      	mov	r1, fp
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	4620      	mov	r0, r4
 8018d5e:	9301      	str	r3, [sp, #4]
 8018d60:	f000 fe88 	bl	8019a74 <__lshift>
 8018d64:	4631      	mov	r1, r6
 8018d66:	4683      	mov	fp, r0
 8018d68:	f000 fef0 	bl	8019b4c <__mcmp>
 8018d6c:	2800      	cmp	r0, #0
 8018d6e:	9b01      	ldr	r3, [sp, #4]
 8018d70:	dc02      	bgt.n	8018d78 <_dtoa_r+0xab8>
 8018d72:	d1de      	bne.n	8018d32 <_dtoa_r+0xa72>
 8018d74:	07da      	lsls	r2, r3, #31
 8018d76:	d5dc      	bpl.n	8018d32 <_dtoa_r+0xa72>
 8018d78:	2b39      	cmp	r3, #57	; 0x39
 8018d7a:	d1d8      	bne.n	8018d2e <_dtoa_r+0xa6e>
 8018d7c:	9a02      	ldr	r2, [sp, #8]
 8018d7e:	2339      	movs	r3, #57	; 0x39
 8018d80:	7013      	strb	r3, [r2, #0]
 8018d82:	462b      	mov	r3, r5
 8018d84:	461d      	mov	r5, r3
 8018d86:	3b01      	subs	r3, #1
 8018d88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018d8c:	2a39      	cmp	r2, #57	; 0x39
 8018d8e:	d050      	beq.n	8018e32 <_dtoa_r+0xb72>
 8018d90:	3201      	adds	r2, #1
 8018d92:	701a      	strb	r2, [r3, #0]
 8018d94:	e745      	b.n	8018c22 <_dtoa_r+0x962>
 8018d96:	2a00      	cmp	r2, #0
 8018d98:	dd03      	ble.n	8018da2 <_dtoa_r+0xae2>
 8018d9a:	2b39      	cmp	r3, #57	; 0x39
 8018d9c:	d0ee      	beq.n	8018d7c <_dtoa_r+0xabc>
 8018d9e:	3301      	adds	r3, #1
 8018da0:	e7c7      	b.n	8018d32 <_dtoa_r+0xa72>
 8018da2:	9a01      	ldr	r2, [sp, #4]
 8018da4:	9907      	ldr	r1, [sp, #28]
 8018da6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018daa:	428a      	cmp	r2, r1
 8018dac:	d02a      	beq.n	8018e04 <_dtoa_r+0xb44>
 8018dae:	4659      	mov	r1, fp
 8018db0:	2300      	movs	r3, #0
 8018db2:	220a      	movs	r2, #10
 8018db4:	4620      	mov	r0, r4
 8018db6:	f000 fc63 	bl	8019680 <__multadd>
 8018dba:	45b8      	cmp	r8, r7
 8018dbc:	4683      	mov	fp, r0
 8018dbe:	f04f 0300 	mov.w	r3, #0
 8018dc2:	f04f 020a 	mov.w	r2, #10
 8018dc6:	4641      	mov	r1, r8
 8018dc8:	4620      	mov	r0, r4
 8018dca:	d107      	bne.n	8018ddc <_dtoa_r+0xb1c>
 8018dcc:	f000 fc58 	bl	8019680 <__multadd>
 8018dd0:	4680      	mov	r8, r0
 8018dd2:	4607      	mov	r7, r0
 8018dd4:	9b01      	ldr	r3, [sp, #4]
 8018dd6:	3301      	adds	r3, #1
 8018dd8:	9301      	str	r3, [sp, #4]
 8018dda:	e775      	b.n	8018cc8 <_dtoa_r+0xa08>
 8018ddc:	f000 fc50 	bl	8019680 <__multadd>
 8018de0:	4639      	mov	r1, r7
 8018de2:	4680      	mov	r8, r0
 8018de4:	2300      	movs	r3, #0
 8018de6:	220a      	movs	r2, #10
 8018de8:	4620      	mov	r0, r4
 8018dea:	f000 fc49 	bl	8019680 <__multadd>
 8018dee:	4607      	mov	r7, r0
 8018df0:	e7f0      	b.n	8018dd4 <_dtoa_r+0xb14>
 8018df2:	f1b9 0f00 	cmp.w	r9, #0
 8018df6:	9a00      	ldr	r2, [sp, #0]
 8018df8:	bfcc      	ite	gt
 8018dfa:	464d      	movgt	r5, r9
 8018dfc:	2501      	movle	r5, #1
 8018dfe:	4415      	add	r5, r2
 8018e00:	f04f 0800 	mov.w	r8, #0
 8018e04:	4659      	mov	r1, fp
 8018e06:	2201      	movs	r2, #1
 8018e08:	4620      	mov	r0, r4
 8018e0a:	9301      	str	r3, [sp, #4]
 8018e0c:	f000 fe32 	bl	8019a74 <__lshift>
 8018e10:	4631      	mov	r1, r6
 8018e12:	4683      	mov	fp, r0
 8018e14:	f000 fe9a 	bl	8019b4c <__mcmp>
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	dcb2      	bgt.n	8018d82 <_dtoa_r+0xac2>
 8018e1c:	d102      	bne.n	8018e24 <_dtoa_r+0xb64>
 8018e1e:	9b01      	ldr	r3, [sp, #4]
 8018e20:	07db      	lsls	r3, r3, #31
 8018e22:	d4ae      	bmi.n	8018d82 <_dtoa_r+0xac2>
 8018e24:	462b      	mov	r3, r5
 8018e26:	461d      	mov	r5, r3
 8018e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018e2c:	2a30      	cmp	r2, #48	; 0x30
 8018e2e:	d0fa      	beq.n	8018e26 <_dtoa_r+0xb66>
 8018e30:	e6f7      	b.n	8018c22 <_dtoa_r+0x962>
 8018e32:	9a00      	ldr	r2, [sp, #0]
 8018e34:	429a      	cmp	r2, r3
 8018e36:	d1a5      	bne.n	8018d84 <_dtoa_r+0xac4>
 8018e38:	f10a 0a01 	add.w	sl, sl, #1
 8018e3c:	2331      	movs	r3, #49	; 0x31
 8018e3e:	e779      	b.n	8018d34 <_dtoa_r+0xa74>
 8018e40:	4b13      	ldr	r3, [pc, #76]	; (8018e90 <_dtoa_r+0xbd0>)
 8018e42:	f7ff baaf 	b.w	80183a4 <_dtoa_r+0xe4>
 8018e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	f47f aa86 	bne.w	801835a <_dtoa_r+0x9a>
 8018e4e:	4b11      	ldr	r3, [pc, #68]	; (8018e94 <_dtoa_r+0xbd4>)
 8018e50:	f7ff baa8 	b.w	80183a4 <_dtoa_r+0xe4>
 8018e54:	f1b9 0f00 	cmp.w	r9, #0
 8018e58:	dc03      	bgt.n	8018e62 <_dtoa_r+0xba2>
 8018e5a:	9b05      	ldr	r3, [sp, #20]
 8018e5c:	2b02      	cmp	r3, #2
 8018e5e:	f73f aec9 	bgt.w	8018bf4 <_dtoa_r+0x934>
 8018e62:	9d00      	ldr	r5, [sp, #0]
 8018e64:	4631      	mov	r1, r6
 8018e66:	4658      	mov	r0, fp
 8018e68:	f7ff f99c 	bl	80181a4 <quorem>
 8018e6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018e70:	f805 3b01 	strb.w	r3, [r5], #1
 8018e74:	9a00      	ldr	r2, [sp, #0]
 8018e76:	1aaa      	subs	r2, r5, r2
 8018e78:	4591      	cmp	r9, r2
 8018e7a:	ddba      	ble.n	8018df2 <_dtoa_r+0xb32>
 8018e7c:	4659      	mov	r1, fp
 8018e7e:	2300      	movs	r3, #0
 8018e80:	220a      	movs	r2, #10
 8018e82:	4620      	mov	r0, r4
 8018e84:	f000 fbfc 	bl	8019680 <__multadd>
 8018e88:	4683      	mov	fp, r0
 8018e8a:	e7eb      	b.n	8018e64 <_dtoa_r+0xba4>
 8018e8c:	0801cc74 	.word	0x0801cc74
 8018e90:	0801ca74 	.word	0x0801ca74
 8018e94:	0801cbf1 	.word	0x0801cbf1

08018e98 <rshift>:
 8018e98:	6903      	ldr	r3, [r0, #16]
 8018e9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018e9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ea2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018ea6:	f100 0414 	add.w	r4, r0, #20
 8018eaa:	dd45      	ble.n	8018f38 <rshift+0xa0>
 8018eac:	f011 011f 	ands.w	r1, r1, #31
 8018eb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018eb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018eb8:	d10c      	bne.n	8018ed4 <rshift+0x3c>
 8018eba:	f100 0710 	add.w	r7, r0, #16
 8018ebe:	4629      	mov	r1, r5
 8018ec0:	42b1      	cmp	r1, r6
 8018ec2:	d334      	bcc.n	8018f2e <rshift+0x96>
 8018ec4:	1a9b      	subs	r3, r3, r2
 8018ec6:	009b      	lsls	r3, r3, #2
 8018ec8:	1eea      	subs	r2, r5, #3
 8018eca:	4296      	cmp	r6, r2
 8018ecc:	bf38      	it	cc
 8018ece:	2300      	movcc	r3, #0
 8018ed0:	4423      	add	r3, r4
 8018ed2:	e015      	b.n	8018f00 <rshift+0x68>
 8018ed4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018ed8:	f1c1 0820 	rsb	r8, r1, #32
 8018edc:	40cf      	lsrs	r7, r1
 8018ede:	f105 0e04 	add.w	lr, r5, #4
 8018ee2:	46a1      	mov	r9, r4
 8018ee4:	4576      	cmp	r6, lr
 8018ee6:	46f4      	mov	ip, lr
 8018ee8:	d815      	bhi.n	8018f16 <rshift+0x7e>
 8018eea:	1a9b      	subs	r3, r3, r2
 8018eec:	009a      	lsls	r2, r3, #2
 8018eee:	3a04      	subs	r2, #4
 8018ef0:	3501      	adds	r5, #1
 8018ef2:	42ae      	cmp	r6, r5
 8018ef4:	bf38      	it	cc
 8018ef6:	2200      	movcc	r2, #0
 8018ef8:	18a3      	adds	r3, r4, r2
 8018efa:	50a7      	str	r7, [r4, r2]
 8018efc:	b107      	cbz	r7, 8018f00 <rshift+0x68>
 8018efe:	3304      	adds	r3, #4
 8018f00:	1b1a      	subs	r2, r3, r4
 8018f02:	42a3      	cmp	r3, r4
 8018f04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018f08:	bf08      	it	eq
 8018f0a:	2300      	moveq	r3, #0
 8018f0c:	6102      	str	r2, [r0, #16]
 8018f0e:	bf08      	it	eq
 8018f10:	6143      	streq	r3, [r0, #20]
 8018f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f16:	f8dc c000 	ldr.w	ip, [ip]
 8018f1a:	fa0c fc08 	lsl.w	ip, ip, r8
 8018f1e:	ea4c 0707 	orr.w	r7, ip, r7
 8018f22:	f849 7b04 	str.w	r7, [r9], #4
 8018f26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018f2a:	40cf      	lsrs	r7, r1
 8018f2c:	e7da      	b.n	8018ee4 <rshift+0x4c>
 8018f2e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018f32:	f847 cf04 	str.w	ip, [r7, #4]!
 8018f36:	e7c3      	b.n	8018ec0 <rshift+0x28>
 8018f38:	4623      	mov	r3, r4
 8018f3a:	e7e1      	b.n	8018f00 <rshift+0x68>

08018f3c <__hexdig_fun>:
 8018f3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018f40:	2b09      	cmp	r3, #9
 8018f42:	d802      	bhi.n	8018f4a <__hexdig_fun+0xe>
 8018f44:	3820      	subs	r0, #32
 8018f46:	b2c0      	uxtb	r0, r0
 8018f48:	4770      	bx	lr
 8018f4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018f4e:	2b05      	cmp	r3, #5
 8018f50:	d801      	bhi.n	8018f56 <__hexdig_fun+0x1a>
 8018f52:	3847      	subs	r0, #71	; 0x47
 8018f54:	e7f7      	b.n	8018f46 <__hexdig_fun+0xa>
 8018f56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018f5a:	2b05      	cmp	r3, #5
 8018f5c:	d801      	bhi.n	8018f62 <__hexdig_fun+0x26>
 8018f5e:	3827      	subs	r0, #39	; 0x27
 8018f60:	e7f1      	b.n	8018f46 <__hexdig_fun+0xa>
 8018f62:	2000      	movs	r0, #0
 8018f64:	4770      	bx	lr
	...

08018f68 <__gethex>:
 8018f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f6c:	ed2d 8b02 	vpush	{d8}
 8018f70:	b089      	sub	sp, #36	; 0x24
 8018f72:	ee08 0a10 	vmov	s16, r0
 8018f76:	9304      	str	r3, [sp, #16]
 8018f78:	4bbc      	ldr	r3, [pc, #752]	; (801926c <__gethex+0x304>)
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	9301      	str	r3, [sp, #4]
 8018f7e:	4618      	mov	r0, r3
 8018f80:	468b      	mov	fp, r1
 8018f82:	4690      	mov	r8, r2
 8018f84:	f7e7 f924 	bl	80001d0 <strlen>
 8018f88:	9b01      	ldr	r3, [sp, #4]
 8018f8a:	f8db 2000 	ldr.w	r2, [fp]
 8018f8e:	4403      	add	r3, r0
 8018f90:	4682      	mov	sl, r0
 8018f92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018f96:	9305      	str	r3, [sp, #20]
 8018f98:	1c93      	adds	r3, r2, #2
 8018f9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018f9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018fa2:	32fe      	adds	r2, #254	; 0xfe
 8018fa4:	18d1      	adds	r1, r2, r3
 8018fa6:	461f      	mov	r7, r3
 8018fa8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018fac:	9100      	str	r1, [sp, #0]
 8018fae:	2830      	cmp	r0, #48	; 0x30
 8018fb0:	d0f8      	beq.n	8018fa4 <__gethex+0x3c>
 8018fb2:	f7ff ffc3 	bl	8018f3c <__hexdig_fun>
 8018fb6:	4604      	mov	r4, r0
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	d13a      	bne.n	8019032 <__gethex+0xca>
 8018fbc:	9901      	ldr	r1, [sp, #4]
 8018fbe:	4652      	mov	r2, sl
 8018fc0:	4638      	mov	r0, r7
 8018fc2:	f001 f929 	bl	801a218 <strncmp>
 8018fc6:	4605      	mov	r5, r0
 8018fc8:	2800      	cmp	r0, #0
 8018fca:	d168      	bne.n	801909e <__gethex+0x136>
 8018fcc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018fd0:	eb07 060a 	add.w	r6, r7, sl
 8018fd4:	f7ff ffb2 	bl	8018f3c <__hexdig_fun>
 8018fd8:	2800      	cmp	r0, #0
 8018fda:	d062      	beq.n	80190a2 <__gethex+0x13a>
 8018fdc:	4633      	mov	r3, r6
 8018fde:	7818      	ldrb	r0, [r3, #0]
 8018fe0:	2830      	cmp	r0, #48	; 0x30
 8018fe2:	461f      	mov	r7, r3
 8018fe4:	f103 0301 	add.w	r3, r3, #1
 8018fe8:	d0f9      	beq.n	8018fde <__gethex+0x76>
 8018fea:	f7ff ffa7 	bl	8018f3c <__hexdig_fun>
 8018fee:	2301      	movs	r3, #1
 8018ff0:	fab0 f480 	clz	r4, r0
 8018ff4:	0964      	lsrs	r4, r4, #5
 8018ff6:	4635      	mov	r5, r6
 8018ff8:	9300      	str	r3, [sp, #0]
 8018ffa:	463a      	mov	r2, r7
 8018ffc:	4616      	mov	r6, r2
 8018ffe:	3201      	adds	r2, #1
 8019000:	7830      	ldrb	r0, [r6, #0]
 8019002:	f7ff ff9b 	bl	8018f3c <__hexdig_fun>
 8019006:	2800      	cmp	r0, #0
 8019008:	d1f8      	bne.n	8018ffc <__gethex+0x94>
 801900a:	9901      	ldr	r1, [sp, #4]
 801900c:	4652      	mov	r2, sl
 801900e:	4630      	mov	r0, r6
 8019010:	f001 f902 	bl	801a218 <strncmp>
 8019014:	b980      	cbnz	r0, 8019038 <__gethex+0xd0>
 8019016:	b94d      	cbnz	r5, 801902c <__gethex+0xc4>
 8019018:	eb06 050a 	add.w	r5, r6, sl
 801901c:	462a      	mov	r2, r5
 801901e:	4616      	mov	r6, r2
 8019020:	3201      	adds	r2, #1
 8019022:	7830      	ldrb	r0, [r6, #0]
 8019024:	f7ff ff8a 	bl	8018f3c <__hexdig_fun>
 8019028:	2800      	cmp	r0, #0
 801902a:	d1f8      	bne.n	801901e <__gethex+0xb6>
 801902c:	1bad      	subs	r5, r5, r6
 801902e:	00ad      	lsls	r5, r5, #2
 8019030:	e004      	b.n	801903c <__gethex+0xd4>
 8019032:	2400      	movs	r4, #0
 8019034:	4625      	mov	r5, r4
 8019036:	e7e0      	b.n	8018ffa <__gethex+0x92>
 8019038:	2d00      	cmp	r5, #0
 801903a:	d1f7      	bne.n	801902c <__gethex+0xc4>
 801903c:	7833      	ldrb	r3, [r6, #0]
 801903e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019042:	2b50      	cmp	r3, #80	; 0x50
 8019044:	d13b      	bne.n	80190be <__gethex+0x156>
 8019046:	7873      	ldrb	r3, [r6, #1]
 8019048:	2b2b      	cmp	r3, #43	; 0x2b
 801904a:	d02c      	beq.n	80190a6 <__gethex+0x13e>
 801904c:	2b2d      	cmp	r3, #45	; 0x2d
 801904e:	d02e      	beq.n	80190ae <__gethex+0x146>
 8019050:	1c71      	adds	r1, r6, #1
 8019052:	f04f 0900 	mov.w	r9, #0
 8019056:	7808      	ldrb	r0, [r1, #0]
 8019058:	f7ff ff70 	bl	8018f3c <__hexdig_fun>
 801905c:	1e43      	subs	r3, r0, #1
 801905e:	b2db      	uxtb	r3, r3
 8019060:	2b18      	cmp	r3, #24
 8019062:	d82c      	bhi.n	80190be <__gethex+0x156>
 8019064:	f1a0 0210 	sub.w	r2, r0, #16
 8019068:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801906c:	f7ff ff66 	bl	8018f3c <__hexdig_fun>
 8019070:	1e43      	subs	r3, r0, #1
 8019072:	b2db      	uxtb	r3, r3
 8019074:	2b18      	cmp	r3, #24
 8019076:	d91d      	bls.n	80190b4 <__gethex+0x14c>
 8019078:	f1b9 0f00 	cmp.w	r9, #0
 801907c:	d000      	beq.n	8019080 <__gethex+0x118>
 801907e:	4252      	negs	r2, r2
 8019080:	4415      	add	r5, r2
 8019082:	f8cb 1000 	str.w	r1, [fp]
 8019086:	b1e4      	cbz	r4, 80190c2 <__gethex+0x15a>
 8019088:	9b00      	ldr	r3, [sp, #0]
 801908a:	2b00      	cmp	r3, #0
 801908c:	bf14      	ite	ne
 801908e:	2700      	movne	r7, #0
 8019090:	2706      	moveq	r7, #6
 8019092:	4638      	mov	r0, r7
 8019094:	b009      	add	sp, #36	; 0x24
 8019096:	ecbd 8b02 	vpop	{d8}
 801909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801909e:	463e      	mov	r6, r7
 80190a0:	4625      	mov	r5, r4
 80190a2:	2401      	movs	r4, #1
 80190a4:	e7ca      	b.n	801903c <__gethex+0xd4>
 80190a6:	f04f 0900 	mov.w	r9, #0
 80190aa:	1cb1      	adds	r1, r6, #2
 80190ac:	e7d3      	b.n	8019056 <__gethex+0xee>
 80190ae:	f04f 0901 	mov.w	r9, #1
 80190b2:	e7fa      	b.n	80190aa <__gethex+0x142>
 80190b4:	230a      	movs	r3, #10
 80190b6:	fb03 0202 	mla	r2, r3, r2, r0
 80190ba:	3a10      	subs	r2, #16
 80190bc:	e7d4      	b.n	8019068 <__gethex+0x100>
 80190be:	4631      	mov	r1, r6
 80190c0:	e7df      	b.n	8019082 <__gethex+0x11a>
 80190c2:	1bf3      	subs	r3, r6, r7
 80190c4:	3b01      	subs	r3, #1
 80190c6:	4621      	mov	r1, r4
 80190c8:	2b07      	cmp	r3, #7
 80190ca:	dc0b      	bgt.n	80190e4 <__gethex+0x17c>
 80190cc:	ee18 0a10 	vmov	r0, s16
 80190d0:	f000 fa74 	bl	80195bc <_Balloc>
 80190d4:	4604      	mov	r4, r0
 80190d6:	b940      	cbnz	r0, 80190ea <__gethex+0x182>
 80190d8:	4b65      	ldr	r3, [pc, #404]	; (8019270 <__gethex+0x308>)
 80190da:	4602      	mov	r2, r0
 80190dc:	21de      	movs	r1, #222	; 0xde
 80190de:	4865      	ldr	r0, [pc, #404]	; (8019274 <__gethex+0x30c>)
 80190e0:	f001 f8ba 	bl	801a258 <__assert_func>
 80190e4:	3101      	adds	r1, #1
 80190e6:	105b      	asrs	r3, r3, #1
 80190e8:	e7ee      	b.n	80190c8 <__gethex+0x160>
 80190ea:	f100 0914 	add.w	r9, r0, #20
 80190ee:	f04f 0b00 	mov.w	fp, #0
 80190f2:	f1ca 0301 	rsb	r3, sl, #1
 80190f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80190fa:	f8cd b000 	str.w	fp, [sp]
 80190fe:	9306      	str	r3, [sp, #24]
 8019100:	42b7      	cmp	r7, r6
 8019102:	d340      	bcc.n	8019186 <__gethex+0x21e>
 8019104:	9802      	ldr	r0, [sp, #8]
 8019106:	9b00      	ldr	r3, [sp, #0]
 8019108:	f840 3b04 	str.w	r3, [r0], #4
 801910c:	eba0 0009 	sub.w	r0, r0, r9
 8019110:	1080      	asrs	r0, r0, #2
 8019112:	0146      	lsls	r6, r0, #5
 8019114:	6120      	str	r0, [r4, #16]
 8019116:	4618      	mov	r0, r3
 8019118:	f000 fb46 	bl	80197a8 <__hi0bits>
 801911c:	1a30      	subs	r0, r6, r0
 801911e:	f8d8 6000 	ldr.w	r6, [r8]
 8019122:	42b0      	cmp	r0, r6
 8019124:	dd63      	ble.n	80191ee <__gethex+0x286>
 8019126:	1b87      	subs	r7, r0, r6
 8019128:	4639      	mov	r1, r7
 801912a:	4620      	mov	r0, r4
 801912c:	f000 fee0 	bl	8019ef0 <__any_on>
 8019130:	4682      	mov	sl, r0
 8019132:	b1a8      	cbz	r0, 8019160 <__gethex+0x1f8>
 8019134:	1e7b      	subs	r3, r7, #1
 8019136:	1159      	asrs	r1, r3, #5
 8019138:	f003 021f 	and.w	r2, r3, #31
 801913c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019140:	f04f 0a01 	mov.w	sl, #1
 8019144:	fa0a f202 	lsl.w	r2, sl, r2
 8019148:	420a      	tst	r2, r1
 801914a:	d009      	beq.n	8019160 <__gethex+0x1f8>
 801914c:	4553      	cmp	r3, sl
 801914e:	dd05      	ble.n	801915c <__gethex+0x1f4>
 8019150:	1eb9      	subs	r1, r7, #2
 8019152:	4620      	mov	r0, r4
 8019154:	f000 fecc 	bl	8019ef0 <__any_on>
 8019158:	2800      	cmp	r0, #0
 801915a:	d145      	bne.n	80191e8 <__gethex+0x280>
 801915c:	f04f 0a02 	mov.w	sl, #2
 8019160:	4639      	mov	r1, r7
 8019162:	4620      	mov	r0, r4
 8019164:	f7ff fe98 	bl	8018e98 <rshift>
 8019168:	443d      	add	r5, r7
 801916a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801916e:	42ab      	cmp	r3, r5
 8019170:	da4c      	bge.n	801920c <__gethex+0x2a4>
 8019172:	ee18 0a10 	vmov	r0, s16
 8019176:	4621      	mov	r1, r4
 8019178:	f000 fa60 	bl	801963c <_Bfree>
 801917c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801917e:	2300      	movs	r3, #0
 8019180:	6013      	str	r3, [r2, #0]
 8019182:	27a3      	movs	r7, #163	; 0xa3
 8019184:	e785      	b.n	8019092 <__gethex+0x12a>
 8019186:	1e73      	subs	r3, r6, #1
 8019188:	9a05      	ldr	r2, [sp, #20]
 801918a:	9303      	str	r3, [sp, #12]
 801918c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019190:	4293      	cmp	r3, r2
 8019192:	d019      	beq.n	80191c8 <__gethex+0x260>
 8019194:	f1bb 0f20 	cmp.w	fp, #32
 8019198:	d107      	bne.n	80191aa <__gethex+0x242>
 801919a:	9b02      	ldr	r3, [sp, #8]
 801919c:	9a00      	ldr	r2, [sp, #0]
 801919e:	f843 2b04 	str.w	r2, [r3], #4
 80191a2:	9302      	str	r3, [sp, #8]
 80191a4:	2300      	movs	r3, #0
 80191a6:	9300      	str	r3, [sp, #0]
 80191a8:	469b      	mov	fp, r3
 80191aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80191ae:	f7ff fec5 	bl	8018f3c <__hexdig_fun>
 80191b2:	9b00      	ldr	r3, [sp, #0]
 80191b4:	f000 000f 	and.w	r0, r0, #15
 80191b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80191bc:	4303      	orrs	r3, r0
 80191be:	9300      	str	r3, [sp, #0]
 80191c0:	f10b 0b04 	add.w	fp, fp, #4
 80191c4:	9b03      	ldr	r3, [sp, #12]
 80191c6:	e00d      	b.n	80191e4 <__gethex+0x27c>
 80191c8:	9b03      	ldr	r3, [sp, #12]
 80191ca:	9a06      	ldr	r2, [sp, #24]
 80191cc:	4413      	add	r3, r2
 80191ce:	42bb      	cmp	r3, r7
 80191d0:	d3e0      	bcc.n	8019194 <__gethex+0x22c>
 80191d2:	4618      	mov	r0, r3
 80191d4:	9901      	ldr	r1, [sp, #4]
 80191d6:	9307      	str	r3, [sp, #28]
 80191d8:	4652      	mov	r2, sl
 80191da:	f001 f81d 	bl	801a218 <strncmp>
 80191de:	9b07      	ldr	r3, [sp, #28]
 80191e0:	2800      	cmp	r0, #0
 80191e2:	d1d7      	bne.n	8019194 <__gethex+0x22c>
 80191e4:	461e      	mov	r6, r3
 80191e6:	e78b      	b.n	8019100 <__gethex+0x198>
 80191e8:	f04f 0a03 	mov.w	sl, #3
 80191ec:	e7b8      	b.n	8019160 <__gethex+0x1f8>
 80191ee:	da0a      	bge.n	8019206 <__gethex+0x29e>
 80191f0:	1a37      	subs	r7, r6, r0
 80191f2:	4621      	mov	r1, r4
 80191f4:	ee18 0a10 	vmov	r0, s16
 80191f8:	463a      	mov	r2, r7
 80191fa:	f000 fc3b 	bl	8019a74 <__lshift>
 80191fe:	1bed      	subs	r5, r5, r7
 8019200:	4604      	mov	r4, r0
 8019202:	f100 0914 	add.w	r9, r0, #20
 8019206:	f04f 0a00 	mov.w	sl, #0
 801920a:	e7ae      	b.n	801916a <__gethex+0x202>
 801920c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019210:	42a8      	cmp	r0, r5
 8019212:	dd72      	ble.n	80192fa <__gethex+0x392>
 8019214:	1b45      	subs	r5, r0, r5
 8019216:	42ae      	cmp	r6, r5
 8019218:	dc36      	bgt.n	8019288 <__gethex+0x320>
 801921a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801921e:	2b02      	cmp	r3, #2
 8019220:	d02a      	beq.n	8019278 <__gethex+0x310>
 8019222:	2b03      	cmp	r3, #3
 8019224:	d02c      	beq.n	8019280 <__gethex+0x318>
 8019226:	2b01      	cmp	r3, #1
 8019228:	d115      	bne.n	8019256 <__gethex+0x2ee>
 801922a:	42ae      	cmp	r6, r5
 801922c:	d113      	bne.n	8019256 <__gethex+0x2ee>
 801922e:	2e01      	cmp	r6, #1
 8019230:	d10b      	bne.n	801924a <__gethex+0x2e2>
 8019232:	9a04      	ldr	r2, [sp, #16]
 8019234:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019238:	6013      	str	r3, [r2, #0]
 801923a:	2301      	movs	r3, #1
 801923c:	6123      	str	r3, [r4, #16]
 801923e:	f8c9 3000 	str.w	r3, [r9]
 8019242:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019244:	2762      	movs	r7, #98	; 0x62
 8019246:	601c      	str	r4, [r3, #0]
 8019248:	e723      	b.n	8019092 <__gethex+0x12a>
 801924a:	1e71      	subs	r1, r6, #1
 801924c:	4620      	mov	r0, r4
 801924e:	f000 fe4f 	bl	8019ef0 <__any_on>
 8019252:	2800      	cmp	r0, #0
 8019254:	d1ed      	bne.n	8019232 <__gethex+0x2ca>
 8019256:	ee18 0a10 	vmov	r0, s16
 801925a:	4621      	mov	r1, r4
 801925c:	f000 f9ee 	bl	801963c <_Bfree>
 8019260:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019262:	2300      	movs	r3, #0
 8019264:	6013      	str	r3, [r2, #0]
 8019266:	2750      	movs	r7, #80	; 0x50
 8019268:	e713      	b.n	8019092 <__gethex+0x12a>
 801926a:	bf00      	nop
 801926c:	0801ccf0 	.word	0x0801ccf0
 8019270:	0801cc74 	.word	0x0801cc74
 8019274:	0801cc85 	.word	0x0801cc85
 8019278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801927a:	2b00      	cmp	r3, #0
 801927c:	d1eb      	bne.n	8019256 <__gethex+0x2ee>
 801927e:	e7d8      	b.n	8019232 <__gethex+0x2ca>
 8019280:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019282:	2b00      	cmp	r3, #0
 8019284:	d1d5      	bne.n	8019232 <__gethex+0x2ca>
 8019286:	e7e6      	b.n	8019256 <__gethex+0x2ee>
 8019288:	1e6f      	subs	r7, r5, #1
 801928a:	f1ba 0f00 	cmp.w	sl, #0
 801928e:	d131      	bne.n	80192f4 <__gethex+0x38c>
 8019290:	b127      	cbz	r7, 801929c <__gethex+0x334>
 8019292:	4639      	mov	r1, r7
 8019294:	4620      	mov	r0, r4
 8019296:	f000 fe2b 	bl	8019ef0 <__any_on>
 801929a:	4682      	mov	sl, r0
 801929c:	117b      	asrs	r3, r7, #5
 801929e:	2101      	movs	r1, #1
 80192a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80192a4:	f007 071f 	and.w	r7, r7, #31
 80192a8:	fa01 f707 	lsl.w	r7, r1, r7
 80192ac:	421f      	tst	r7, r3
 80192ae:	4629      	mov	r1, r5
 80192b0:	4620      	mov	r0, r4
 80192b2:	bf18      	it	ne
 80192b4:	f04a 0a02 	orrne.w	sl, sl, #2
 80192b8:	1b76      	subs	r6, r6, r5
 80192ba:	f7ff fded 	bl	8018e98 <rshift>
 80192be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80192c2:	2702      	movs	r7, #2
 80192c4:	f1ba 0f00 	cmp.w	sl, #0
 80192c8:	d048      	beq.n	801935c <__gethex+0x3f4>
 80192ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80192ce:	2b02      	cmp	r3, #2
 80192d0:	d015      	beq.n	80192fe <__gethex+0x396>
 80192d2:	2b03      	cmp	r3, #3
 80192d4:	d017      	beq.n	8019306 <__gethex+0x39e>
 80192d6:	2b01      	cmp	r3, #1
 80192d8:	d109      	bne.n	80192ee <__gethex+0x386>
 80192da:	f01a 0f02 	tst.w	sl, #2
 80192de:	d006      	beq.n	80192ee <__gethex+0x386>
 80192e0:	f8d9 0000 	ldr.w	r0, [r9]
 80192e4:	ea4a 0a00 	orr.w	sl, sl, r0
 80192e8:	f01a 0f01 	tst.w	sl, #1
 80192ec:	d10e      	bne.n	801930c <__gethex+0x3a4>
 80192ee:	f047 0710 	orr.w	r7, r7, #16
 80192f2:	e033      	b.n	801935c <__gethex+0x3f4>
 80192f4:	f04f 0a01 	mov.w	sl, #1
 80192f8:	e7d0      	b.n	801929c <__gethex+0x334>
 80192fa:	2701      	movs	r7, #1
 80192fc:	e7e2      	b.n	80192c4 <__gethex+0x35c>
 80192fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019300:	f1c3 0301 	rsb	r3, r3, #1
 8019304:	9315      	str	r3, [sp, #84]	; 0x54
 8019306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019308:	2b00      	cmp	r3, #0
 801930a:	d0f0      	beq.n	80192ee <__gethex+0x386>
 801930c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019310:	f104 0314 	add.w	r3, r4, #20
 8019314:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019318:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801931c:	f04f 0c00 	mov.w	ip, #0
 8019320:	4618      	mov	r0, r3
 8019322:	f853 2b04 	ldr.w	r2, [r3], #4
 8019326:	f1b2 3fff 	cmp.w	r2, #4294967295
 801932a:	d01c      	beq.n	8019366 <__gethex+0x3fe>
 801932c:	3201      	adds	r2, #1
 801932e:	6002      	str	r2, [r0, #0]
 8019330:	2f02      	cmp	r7, #2
 8019332:	f104 0314 	add.w	r3, r4, #20
 8019336:	d13f      	bne.n	80193b8 <__gethex+0x450>
 8019338:	f8d8 2000 	ldr.w	r2, [r8]
 801933c:	3a01      	subs	r2, #1
 801933e:	42b2      	cmp	r2, r6
 8019340:	d10a      	bne.n	8019358 <__gethex+0x3f0>
 8019342:	1171      	asrs	r1, r6, #5
 8019344:	2201      	movs	r2, #1
 8019346:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801934a:	f006 061f 	and.w	r6, r6, #31
 801934e:	fa02 f606 	lsl.w	r6, r2, r6
 8019352:	421e      	tst	r6, r3
 8019354:	bf18      	it	ne
 8019356:	4617      	movne	r7, r2
 8019358:	f047 0720 	orr.w	r7, r7, #32
 801935c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801935e:	601c      	str	r4, [r3, #0]
 8019360:	9b04      	ldr	r3, [sp, #16]
 8019362:	601d      	str	r5, [r3, #0]
 8019364:	e695      	b.n	8019092 <__gethex+0x12a>
 8019366:	4299      	cmp	r1, r3
 8019368:	f843 cc04 	str.w	ip, [r3, #-4]
 801936c:	d8d8      	bhi.n	8019320 <__gethex+0x3b8>
 801936e:	68a3      	ldr	r3, [r4, #8]
 8019370:	459b      	cmp	fp, r3
 8019372:	db19      	blt.n	80193a8 <__gethex+0x440>
 8019374:	6861      	ldr	r1, [r4, #4]
 8019376:	ee18 0a10 	vmov	r0, s16
 801937a:	3101      	adds	r1, #1
 801937c:	f000 f91e 	bl	80195bc <_Balloc>
 8019380:	4681      	mov	r9, r0
 8019382:	b918      	cbnz	r0, 801938c <__gethex+0x424>
 8019384:	4b1a      	ldr	r3, [pc, #104]	; (80193f0 <__gethex+0x488>)
 8019386:	4602      	mov	r2, r0
 8019388:	2184      	movs	r1, #132	; 0x84
 801938a:	e6a8      	b.n	80190de <__gethex+0x176>
 801938c:	6922      	ldr	r2, [r4, #16]
 801938e:	3202      	adds	r2, #2
 8019390:	f104 010c 	add.w	r1, r4, #12
 8019394:	0092      	lsls	r2, r2, #2
 8019396:	300c      	adds	r0, #12
 8019398:	f7fd f892 	bl	80164c0 <memcpy>
 801939c:	4621      	mov	r1, r4
 801939e:	ee18 0a10 	vmov	r0, s16
 80193a2:	f000 f94b 	bl	801963c <_Bfree>
 80193a6:	464c      	mov	r4, r9
 80193a8:	6923      	ldr	r3, [r4, #16]
 80193aa:	1c5a      	adds	r2, r3, #1
 80193ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80193b0:	6122      	str	r2, [r4, #16]
 80193b2:	2201      	movs	r2, #1
 80193b4:	615a      	str	r2, [r3, #20]
 80193b6:	e7bb      	b.n	8019330 <__gethex+0x3c8>
 80193b8:	6922      	ldr	r2, [r4, #16]
 80193ba:	455a      	cmp	r2, fp
 80193bc:	dd0b      	ble.n	80193d6 <__gethex+0x46e>
 80193be:	2101      	movs	r1, #1
 80193c0:	4620      	mov	r0, r4
 80193c2:	f7ff fd69 	bl	8018e98 <rshift>
 80193c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80193ca:	3501      	adds	r5, #1
 80193cc:	42ab      	cmp	r3, r5
 80193ce:	f6ff aed0 	blt.w	8019172 <__gethex+0x20a>
 80193d2:	2701      	movs	r7, #1
 80193d4:	e7c0      	b.n	8019358 <__gethex+0x3f0>
 80193d6:	f016 061f 	ands.w	r6, r6, #31
 80193da:	d0fa      	beq.n	80193d2 <__gethex+0x46a>
 80193dc:	449a      	add	sl, r3
 80193de:	f1c6 0620 	rsb	r6, r6, #32
 80193e2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80193e6:	f000 f9df 	bl	80197a8 <__hi0bits>
 80193ea:	42b0      	cmp	r0, r6
 80193ec:	dbe7      	blt.n	80193be <__gethex+0x456>
 80193ee:	e7f0      	b.n	80193d2 <__gethex+0x46a>
 80193f0:	0801cc74 	.word	0x0801cc74

080193f4 <L_shift>:
 80193f4:	f1c2 0208 	rsb	r2, r2, #8
 80193f8:	0092      	lsls	r2, r2, #2
 80193fa:	b570      	push	{r4, r5, r6, lr}
 80193fc:	f1c2 0620 	rsb	r6, r2, #32
 8019400:	6843      	ldr	r3, [r0, #4]
 8019402:	6804      	ldr	r4, [r0, #0]
 8019404:	fa03 f506 	lsl.w	r5, r3, r6
 8019408:	432c      	orrs	r4, r5
 801940a:	40d3      	lsrs	r3, r2
 801940c:	6004      	str	r4, [r0, #0]
 801940e:	f840 3f04 	str.w	r3, [r0, #4]!
 8019412:	4288      	cmp	r0, r1
 8019414:	d3f4      	bcc.n	8019400 <L_shift+0xc>
 8019416:	bd70      	pop	{r4, r5, r6, pc}

08019418 <__match>:
 8019418:	b530      	push	{r4, r5, lr}
 801941a:	6803      	ldr	r3, [r0, #0]
 801941c:	3301      	adds	r3, #1
 801941e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019422:	b914      	cbnz	r4, 801942a <__match+0x12>
 8019424:	6003      	str	r3, [r0, #0]
 8019426:	2001      	movs	r0, #1
 8019428:	bd30      	pop	{r4, r5, pc}
 801942a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801942e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019432:	2d19      	cmp	r5, #25
 8019434:	bf98      	it	ls
 8019436:	3220      	addls	r2, #32
 8019438:	42a2      	cmp	r2, r4
 801943a:	d0f0      	beq.n	801941e <__match+0x6>
 801943c:	2000      	movs	r0, #0
 801943e:	e7f3      	b.n	8019428 <__match+0x10>

08019440 <__hexnan>:
 8019440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019444:	680b      	ldr	r3, [r1, #0]
 8019446:	6801      	ldr	r1, [r0, #0]
 8019448:	115e      	asrs	r6, r3, #5
 801944a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801944e:	f013 031f 	ands.w	r3, r3, #31
 8019452:	b087      	sub	sp, #28
 8019454:	bf18      	it	ne
 8019456:	3604      	addne	r6, #4
 8019458:	2500      	movs	r5, #0
 801945a:	1f37      	subs	r7, r6, #4
 801945c:	4682      	mov	sl, r0
 801945e:	4690      	mov	r8, r2
 8019460:	9301      	str	r3, [sp, #4]
 8019462:	f846 5c04 	str.w	r5, [r6, #-4]
 8019466:	46b9      	mov	r9, r7
 8019468:	463c      	mov	r4, r7
 801946a:	9502      	str	r5, [sp, #8]
 801946c:	46ab      	mov	fp, r5
 801946e:	784a      	ldrb	r2, [r1, #1]
 8019470:	1c4b      	adds	r3, r1, #1
 8019472:	9303      	str	r3, [sp, #12]
 8019474:	b342      	cbz	r2, 80194c8 <__hexnan+0x88>
 8019476:	4610      	mov	r0, r2
 8019478:	9105      	str	r1, [sp, #20]
 801947a:	9204      	str	r2, [sp, #16]
 801947c:	f7ff fd5e 	bl	8018f3c <__hexdig_fun>
 8019480:	2800      	cmp	r0, #0
 8019482:	d14f      	bne.n	8019524 <__hexnan+0xe4>
 8019484:	9a04      	ldr	r2, [sp, #16]
 8019486:	9905      	ldr	r1, [sp, #20]
 8019488:	2a20      	cmp	r2, #32
 801948a:	d818      	bhi.n	80194be <__hexnan+0x7e>
 801948c:	9b02      	ldr	r3, [sp, #8]
 801948e:	459b      	cmp	fp, r3
 8019490:	dd13      	ble.n	80194ba <__hexnan+0x7a>
 8019492:	454c      	cmp	r4, r9
 8019494:	d206      	bcs.n	80194a4 <__hexnan+0x64>
 8019496:	2d07      	cmp	r5, #7
 8019498:	dc04      	bgt.n	80194a4 <__hexnan+0x64>
 801949a:	462a      	mov	r2, r5
 801949c:	4649      	mov	r1, r9
 801949e:	4620      	mov	r0, r4
 80194a0:	f7ff ffa8 	bl	80193f4 <L_shift>
 80194a4:	4544      	cmp	r4, r8
 80194a6:	d950      	bls.n	801954a <__hexnan+0x10a>
 80194a8:	2300      	movs	r3, #0
 80194aa:	f1a4 0904 	sub.w	r9, r4, #4
 80194ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80194b2:	f8cd b008 	str.w	fp, [sp, #8]
 80194b6:	464c      	mov	r4, r9
 80194b8:	461d      	mov	r5, r3
 80194ba:	9903      	ldr	r1, [sp, #12]
 80194bc:	e7d7      	b.n	801946e <__hexnan+0x2e>
 80194be:	2a29      	cmp	r2, #41	; 0x29
 80194c0:	d156      	bne.n	8019570 <__hexnan+0x130>
 80194c2:	3102      	adds	r1, #2
 80194c4:	f8ca 1000 	str.w	r1, [sl]
 80194c8:	f1bb 0f00 	cmp.w	fp, #0
 80194cc:	d050      	beq.n	8019570 <__hexnan+0x130>
 80194ce:	454c      	cmp	r4, r9
 80194d0:	d206      	bcs.n	80194e0 <__hexnan+0xa0>
 80194d2:	2d07      	cmp	r5, #7
 80194d4:	dc04      	bgt.n	80194e0 <__hexnan+0xa0>
 80194d6:	462a      	mov	r2, r5
 80194d8:	4649      	mov	r1, r9
 80194da:	4620      	mov	r0, r4
 80194dc:	f7ff ff8a 	bl	80193f4 <L_shift>
 80194e0:	4544      	cmp	r4, r8
 80194e2:	d934      	bls.n	801954e <__hexnan+0x10e>
 80194e4:	f1a8 0204 	sub.w	r2, r8, #4
 80194e8:	4623      	mov	r3, r4
 80194ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80194ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80194f2:	429f      	cmp	r7, r3
 80194f4:	d2f9      	bcs.n	80194ea <__hexnan+0xaa>
 80194f6:	1b3b      	subs	r3, r7, r4
 80194f8:	f023 0303 	bic.w	r3, r3, #3
 80194fc:	3304      	adds	r3, #4
 80194fe:	3401      	adds	r4, #1
 8019500:	3e03      	subs	r6, #3
 8019502:	42b4      	cmp	r4, r6
 8019504:	bf88      	it	hi
 8019506:	2304      	movhi	r3, #4
 8019508:	4443      	add	r3, r8
 801950a:	2200      	movs	r2, #0
 801950c:	f843 2b04 	str.w	r2, [r3], #4
 8019510:	429f      	cmp	r7, r3
 8019512:	d2fb      	bcs.n	801950c <__hexnan+0xcc>
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	b91b      	cbnz	r3, 8019520 <__hexnan+0xe0>
 8019518:	4547      	cmp	r7, r8
 801951a:	d127      	bne.n	801956c <__hexnan+0x12c>
 801951c:	2301      	movs	r3, #1
 801951e:	603b      	str	r3, [r7, #0]
 8019520:	2005      	movs	r0, #5
 8019522:	e026      	b.n	8019572 <__hexnan+0x132>
 8019524:	3501      	adds	r5, #1
 8019526:	2d08      	cmp	r5, #8
 8019528:	f10b 0b01 	add.w	fp, fp, #1
 801952c:	dd06      	ble.n	801953c <__hexnan+0xfc>
 801952e:	4544      	cmp	r4, r8
 8019530:	d9c3      	bls.n	80194ba <__hexnan+0x7a>
 8019532:	2300      	movs	r3, #0
 8019534:	f844 3c04 	str.w	r3, [r4, #-4]
 8019538:	2501      	movs	r5, #1
 801953a:	3c04      	subs	r4, #4
 801953c:	6822      	ldr	r2, [r4, #0]
 801953e:	f000 000f 	and.w	r0, r0, #15
 8019542:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019546:	6022      	str	r2, [r4, #0]
 8019548:	e7b7      	b.n	80194ba <__hexnan+0x7a>
 801954a:	2508      	movs	r5, #8
 801954c:	e7b5      	b.n	80194ba <__hexnan+0x7a>
 801954e:	9b01      	ldr	r3, [sp, #4]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d0df      	beq.n	8019514 <__hexnan+0xd4>
 8019554:	f04f 32ff 	mov.w	r2, #4294967295
 8019558:	f1c3 0320 	rsb	r3, r3, #32
 801955c:	fa22 f303 	lsr.w	r3, r2, r3
 8019560:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019564:	401a      	ands	r2, r3
 8019566:	f846 2c04 	str.w	r2, [r6, #-4]
 801956a:	e7d3      	b.n	8019514 <__hexnan+0xd4>
 801956c:	3f04      	subs	r7, #4
 801956e:	e7d1      	b.n	8019514 <__hexnan+0xd4>
 8019570:	2004      	movs	r0, #4
 8019572:	b007      	add	sp, #28
 8019574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019578 <_localeconv_r>:
 8019578:	4800      	ldr	r0, [pc, #0]	; (801957c <_localeconv_r+0x4>)
 801957a:	4770      	bx	lr
 801957c:	20004368 	.word	0x20004368

08019580 <__ascii_mbtowc>:
 8019580:	b082      	sub	sp, #8
 8019582:	b901      	cbnz	r1, 8019586 <__ascii_mbtowc+0x6>
 8019584:	a901      	add	r1, sp, #4
 8019586:	b142      	cbz	r2, 801959a <__ascii_mbtowc+0x1a>
 8019588:	b14b      	cbz	r3, 801959e <__ascii_mbtowc+0x1e>
 801958a:	7813      	ldrb	r3, [r2, #0]
 801958c:	600b      	str	r3, [r1, #0]
 801958e:	7812      	ldrb	r2, [r2, #0]
 8019590:	1e10      	subs	r0, r2, #0
 8019592:	bf18      	it	ne
 8019594:	2001      	movne	r0, #1
 8019596:	b002      	add	sp, #8
 8019598:	4770      	bx	lr
 801959a:	4610      	mov	r0, r2
 801959c:	e7fb      	b.n	8019596 <__ascii_mbtowc+0x16>
 801959e:	f06f 0001 	mvn.w	r0, #1
 80195a2:	e7f8      	b.n	8019596 <__ascii_mbtowc+0x16>

080195a4 <__malloc_lock>:
 80195a4:	4801      	ldr	r0, [pc, #4]	; (80195ac <__malloc_lock+0x8>)
 80195a6:	f000 be88 	b.w	801a2ba <__retarget_lock_acquire_recursive>
 80195aa:	bf00      	nop
 80195ac:	20011b7c 	.word	0x20011b7c

080195b0 <__malloc_unlock>:
 80195b0:	4801      	ldr	r0, [pc, #4]	; (80195b8 <__malloc_unlock+0x8>)
 80195b2:	f000 be83 	b.w	801a2bc <__retarget_lock_release_recursive>
 80195b6:	bf00      	nop
 80195b8:	20011b7c 	.word	0x20011b7c

080195bc <_Balloc>:
 80195bc:	b570      	push	{r4, r5, r6, lr}
 80195be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80195c0:	4604      	mov	r4, r0
 80195c2:	460d      	mov	r5, r1
 80195c4:	b976      	cbnz	r6, 80195e4 <_Balloc+0x28>
 80195c6:	2010      	movs	r0, #16
 80195c8:	f7fc ff6a 	bl	80164a0 <malloc>
 80195cc:	4602      	mov	r2, r0
 80195ce:	6260      	str	r0, [r4, #36]	; 0x24
 80195d0:	b920      	cbnz	r0, 80195dc <_Balloc+0x20>
 80195d2:	4b18      	ldr	r3, [pc, #96]	; (8019634 <_Balloc+0x78>)
 80195d4:	4818      	ldr	r0, [pc, #96]	; (8019638 <_Balloc+0x7c>)
 80195d6:	2166      	movs	r1, #102	; 0x66
 80195d8:	f000 fe3e 	bl	801a258 <__assert_func>
 80195dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80195e0:	6006      	str	r6, [r0, #0]
 80195e2:	60c6      	str	r6, [r0, #12]
 80195e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80195e6:	68f3      	ldr	r3, [r6, #12]
 80195e8:	b183      	cbz	r3, 801960c <_Balloc+0x50>
 80195ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80195ec:	68db      	ldr	r3, [r3, #12]
 80195ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80195f2:	b9b8      	cbnz	r0, 8019624 <_Balloc+0x68>
 80195f4:	2101      	movs	r1, #1
 80195f6:	fa01 f605 	lsl.w	r6, r1, r5
 80195fa:	1d72      	adds	r2, r6, #5
 80195fc:	0092      	lsls	r2, r2, #2
 80195fe:	4620      	mov	r0, r4
 8019600:	f000 fc97 	bl	8019f32 <_calloc_r>
 8019604:	b160      	cbz	r0, 8019620 <_Balloc+0x64>
 8019606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801960a:	e00e      	b.n	801962a <_Balloc+0x6e>
 801960c:	2221      	movs	r2, #33	; 0x21
 801960e:	2104      	movs	r1, #4
 8019610:	4620      	mov	r0, r4
 8019612:	f000 fc8e 	bl	8019f32 <_calloc_r>
 8019616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019618:	60f0      	str	r0, [r6, #12]
 801961a:	68db      	ldr	r3, [r3, #12]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d1e4      	bne.n	80195ea <_Balloc+0x2e>
 8019620:	2000      	movs	r0, #0
 8019622:	bd70      	pop	{r4, r5, r6, pc}
 8019624:	6802      	ldr	r2, [r0, #0]
 8019626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801962a:	2300      	movs	r3, #0
 801962c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019630:	e7f7      	b.n	8019622 <_Balloc+0x66>
 8019632:	bf00      	nop
 8019634:	0801cbfe 	.word	0x0801cbfe
 8019638:	0801cd04 	.word	0x0801cd04

0801963c <_Bfree>:
 801963c:	b570      	push	{r4, r5, r6, lr}
 801963e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019640:	4605      	mov	r5, r0
 8019642:	460c      	mov	r4, r1
 8019644:	b976      	cbnz	r6, 8019664 <_Bfree+0x28>
 8019646:	2010      	movs	r0, #16
 8019648:	f7fc ff2a 	bl	80164a0 <malloc>
 801964c:	4602      	mov	r2, r0
 801964e:	6268      	str	r0, [r5, #36]	; 0x24
 8019650:	b920      	cbnz	r0, 801965c <_Bfree+0x20>
 8019652:	4b09      	ldr	r3, [pc, #36]	; (8019678 <_Bfree+0x3c>)
 8019654:	4809      	ldr	r0, [pc, #36]	; (801967c <_Bfree+0x40>)
 8019656:	218a      	movs	r1, #138	; 0x8a
 8019658:	f000 fdfe 	bl	801a258 <__assert_func>
 801965c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019660:	6006      	str	r6, [r0, #0]
 8019662:	60c6      	str	r6, [r0, #12]
 8019664:	b13c      	cbz	r4, 8019676 <_Bfree+0x3a>
 8019666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019668:	6862      	ldr	r2, [r4, #4]
 801966a:	68db      	ldr	r3, [r3, #12]
 801966c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019670:	6021      	str	r1, [r4, #0]
 8019672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019676:	bd70      	pop	{r4, r5, r6, pc}
 8019678:	0801cbfe 	.word	0x0801cbfe
 801967c:	0801cd04 	.word	0x0801cd04

08019680 <__multadd>:
 8019680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019684:	690e      	ldr	r6, [r1, #16]
 8019686:	4607      	mov	r7, r0
 8019688:	4698      	mov	r8, r3
 801968a:	460c      	mov	r4, r1
 801968c:	f101 0014 	add.w	r0, r1, #20
 8019690:	2300      	movs	r3, #0
 8019692:	6805      	ldr	r5, [r0, #0]
 8019694:	b2a9      	uxth	r1, r5
 8019696:	fb02 8101 	mla	r1, r2, r1, r8
 801969a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801969e:	0c2d      	lsrs	r5, r5, #16
 80196a0:	fb02 c505 	mla	r5, r2, r5, ip
 80196a4:	b289      	uxth	r1, r1
 80196a6:	3301      	adds	r3, #1
 80196a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80196ac:	429e      	cmp	r6, r3
 80196ae:	f840 1b04 	str.w	r1, [r0], #4
 80196b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80196b6:	dcec      	bgt.n	8019692 <__multadd+0x12>
 80196b8:	f1b8 0f00 	cmp.w	r8, #0
 80196bc:	d022      	beq.n	8019704 <__multadd+0x84>
 80196be:	68a3      	ldr	r3, [r4, #8]
 80196c0:	42b3      	cmp	r3, r6
 80196c2:	dc19      	bgt.n	80196f8 <__multadd+0x78>
 80196c4:	6861      	ldr	r1, [r4, #4]
 80196c6:	4638      	mov	r0, r7
 80196c8:	3101      	adds	r1, #1
 80196ca:	f7ff ff77 	bl	80195bc <_Balloc>
 80196ce:	4605      	mov	r5, r0
 80196d0:	b928      	cbnz	r0, 80196de <__multadd+0x5e>
 80196d2:	4602      	mov	r2, r0
 80196d4:	4b0d      	ldr	r3, [pc, #52]	; (801970c <__multadd+0x8c>)
 80196d6:	480e      	ldr	r0, [pc, #56]	; (8019710 <__multadd+0x90>)
 80196d8:	21b5      	movs	r1, #181	; 0xb5
 80196da:	f000 fdbd 	bl	801a258 <__assert_func>
 80196de:	6922      	ldr	r2, [r4, #16]
 80196e0:	3202      	adds	r2, #2
 80196e2:	f104 010c 	add.w	r1, r4, #12
 80196e6:	0092      	lsls	r2, r2, #2
 80196e8:	300c      	adds	r0, #12
 80196ea:	f7fc fee9 	bl	80164c0 <memcpy>
 80196ee:	4621      	mov	r1, r4
 80196f0:	4638      	mov	r0, r7
 80196f2:	f7ff ffa3 	bl	801963c <_Bfree>
 80196f6:	462c      	mov	r4, r5
 80196f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80196fc:	3601      	adds	r6, #1
 80196fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8019702:	6126      	str	r6, [r4, #16]
 8019704:	4620      	mov	r0, r4
 8019706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801970a:	bf00      	nop
 801970c:	0801cc74 	.word	0x0801cc74
 8019710:	0801cd04 	.word	0x0801cd04

08019714 <__s2b>:
 8019714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019718:	460c      	mov	r4, r1
 801971a:	4615      	mov	r5, r2
 801971c:	461f      	mov	r7, r3
 801971e:	2209      	movs	r2, #9
 8019720:	3308      	adds	r3, #8
 8019722:	4606      	mov	r6, r0
 8019724:	fb93 f3f2 	sdiv	r3, r3, r2
 8019728:	2100      	movs	r1, #0
 801972a:	2201      	movs	r2, #1
 801972c:	429a      	cmp	r2, r3
 801972e:	db09      	blt.n	8019744 <__s2b+0x30>
 8019730:	4630      	mov	r0, r6
 8019732:	f7ff ff43 	bl	80195bc <_Balloc>
 8019736:	b940      	cbnz	r0, 801974a <__s2b+0x36>
 8019738:	4602      	mov	r2, r0
 801973a:	4b19      	ldr	r3, [pc, #100]	; (80197a0 <__s2b+0x8c>)
 801973c:	4819      	ldr	r0, [pc, #100]	; (80197a4 <__s2b+0x90>)
 801973e:	21ce      	movs	r1, #206	; 0xce
 8019740:	f000 fd8a 	bl	801a258 <__assert_func>
 8019744:	0052      	lsls	r2, r2, #1
 8019746:	3101      	adds	r1, #1
 8019748:	e7f0      	b.n	801972c <__s2b+0x18>
 801974a:	9b08      	ldr	r3, [sp, #32]
 801974c:	6143      	str	r3, [r0, #20]
 801974e:	2d09      	cmp	r5, #9
 8019750:	f04f 0301 	mov.w	r3, #1
 8019754:	6103      	str	r3, [r0, #16]
 8019756:	dd16      	ble.n	8019786 <__s2b+0x72>
 8019758:	f104 0909 	add.w	r9, r4, #9
 801975c:	46c8      	mov	r8, r9
 801975e:	442c      	add	r4, r5
 8019760:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019764:	4601      	mov	r1, r0
 8019766:	3b30      	subs	r3, #48	; 0x30
 8019768:	220a      	movs	r2, #10
 801976a:	4630      	mov	r0, r6
 801976c:	f7ff ff88 	bl	8019680 <__multadd>
 8019770:	45a0      	cmp	r8, r4
 8019772:	d1f5      	bne.n	8019760 <__s2b+0x4c>
 8019774:	f1a5 0408 	sub.w	r4, r5, #8
 8019778:	444c      	add	r4, r9
 801977a:	1b2d      	subs	r5, r5, r4
 801977c:	1963      	adds	r3, r4, r5
 801977e:	42bb      	cmp	r3, r7
 8019780:	db04      	blt.n	801978c <__s2b+0x78>
 8019782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019786:	340a      	adds	r4, #10
 8019788:	2509      	movs	r5, #9
 801978a:	e7f6      	b.n	801977a <__s2b+0x66>
 801978c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019790:	4601      	mov	r1, r0
 8019792:	3b30      	subs	r3, #48	; 0x30
 8019794:	220a      	movs	r2, #10
 8019796:	4630      	mov	r0, r6
 8019798:	f7ff ff72 	bl	8019680 <__multadd>
 801979c:	e7ee      	b.n	801977c <__s2b+0x68>
 801979e:	bf00      	nop
 80197a0:	0801cc74 	.word	0x0801cc74
 80197a4:	0801cd04 	.word	0x0801cd04

080197a8 <__hi0bits>:
 80197a8:	0c03      	lsrs	r3, r0, #16
 80197aa:	041b      	lsls	r3, r3, #16
 80197ac:	b9d3      	cbnz	r3, 80197e4 <__hi0bits+0x3c>
 80197ae:	0400      	lsls	r0, r0, #16
 80197b0:	2310      	movs	r3, #16
 80197b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80197b6:	bf04      	itt	eq
 80197b8:	0200      	lsleq	r0, r0, #8
 80197ba:	3308      	addeq	r3, #8
 80197bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80197c0:	bf04      	itt	eq
 80197c2:	0100      	lsleq	r0, r0, #4
 80197c4:	3304      	addeq	r3, #4
 80197c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80197ca:	bf04      	itt	eq
 80197cc:	0080      	lsleq	r0, r0, #2
 80197ce:	3302      	addeq	r3, #2
 80197d0:	2800      	cmp	r0, #0
 80197d2:	db05      	blt.n	80197e0 <__hi0bits+0x38>
 80197d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80197d8:	f103 0301 	add.w	r3, r3, #1
 80197dc:	bf08      	it	eq
 80197de:	2320      	moveq	r3, #32
 80197e0:	4618      	mov	r0, r3
 80197e2:	4770      	bx	lr
 80197e4:	2300      	movs	r3, #0
 80197e6:	e7e4      	b.n	80197b2 <__hi0bits+0xa>

080197e8 <__lo0bits>:
 80197e8:	6803      	ldr	r3, [r0, #0]
 80197ea:	f013 0207 	ands.w	r2, r3, #7
 80197ee:	4601      	mov	r1, r0
 80197f0:	d00b      	beq.n	801980a <__lo0bits+0x22>
 80197f2:	07da      	lsls	r2, r3, #31
 80197f4:	d424      	bmi.n	8019840 <__lo0bits+0x58>
 80197f6:	0798      	lsls	r0, r3, #30
 80197f8:	bf49      	itett	mi
 80197fa:	085b      	lsrmi	r3, r3, #1
 80197fc:	089b      	lsrpl	r3, r3, #2
 80197fe:	2001      	movmi	r0, #1
 8019800:	600b      	strmi	r3, [r1, #0]
 8019802:	bf5c      	itt	pl
 8019804:	600b      	strpl	r3, [r1, #0]
 8019806:	2002      	movpl	r0, #2
 8019808:	4770      	bx	lr
 801980a:	b298      	uxth	r0, r3
 801980c:	b9b0      	cbnz	r0, 801983c <__lo0bits+0x54>
 801980e:	0c1b      	lsrs	r3, r3, #16
 8019810:	2010      	movs	r0, #16
 8019812:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019816:	bf04      	itt	eq
 8019818:	0a1b      	lsreq	r3, r3, #8
 801981a:	3008      	addeq	r0, #8
 801981c:	071a      	lsls	r2, r3, #28
 801981e:	bf04      	itt	eq
 8019820:	091b      	lsreq	r3, r3, #4
 8019822:	3004      	addeq	r0, #4
 8019824:	079a      	lsls	r2, r3, #30
 8019826:	bf04      	itt	eq
 8019828:	089b      	lsreq	r3, r3, #2
 801982a:	3002      	addeq	r0, #2
 801982c:	07da      	lsls	r2, r3, #31
 801982e:	d403      	bmi.n	8019838 <__lo0bits+0x50>
 8019830:	085b      	lsrs	r3, r3, #1
 8019832:	f100 0001 	add.w	r0, r0, #1
 8019836:	d005      	beq.n	8019844 <__lo0bits+0x5c>
 8019838:	600b      	str	r3, [r1, #0]
 801983a:	4770      	bx	lr
 801983c:	4610      	mov	r0, r2
 801983e:	e7e8      	b.n	8019812 <__lo0bits+0x2a>
 8019840:	2000      	movs	r0, #0
 8019842:	4770      	bx	lr
 8019844:	2020      	movs	r0, #32
 8019846:	4770      	bx	lr

08019848 <__i2b>:
 8019848:	b510      	push	{r4, lr}
 801984a:	460c      	mov	r4, r1
 801984c:	2101      	movs	r1, #1
 801984e:	f7ff feb5 	bl	80195bc <_Balloc>
 8019852:	4602      	mov	r2, r0
 8019854:	b928      	cbnz	r0, 8019862 <__i2b+0x1a>
 8019856:	4b05      	ldr	r3, [pc, #20]	; (801986c <__i2b+0x24>)
 8019858:	4805      	ldr	r0, [pc, #20]	; (8019870 <__i2b+0x28>)
 801985a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801985e:	f000 fcfb 	bl	801a258 <__assert_func>
 8019862:	2301      	movs	r3, #1
 8019864:	6144      	str	r4, [r0, #20]
 8019866:	6103      	str	r3, [r0, #16]
 8019868:	bd10      	pop	{r4, pc}
 801986a:	bf00      	nop
 801986c:	0801cc74 	.word	0x0801cc74
 8019870:	0801cd04 	.word	0x0801cd04

08019874 <__multiply>:
 8019874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019878:	4614      	mov	r4, r2
 801987a:	690a      	ldr	r2, [r1, #16]
 801987c:	6923      	ldr	r3, [r4, #16]
 801987e:	429a      	cmp	r2, r3
 8019880:	bfb8      	it	lt
 8019882:	460b      	movlt	r3, r1
 8019884:	460d      	mov	r5, r1
 8019886:	bfbc      	itt	lt
 8019888:	4625      	movlt	r5, r4
 801988a:	461c      	movlt	r4, r3
 801988c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019890:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019894:	68ab      	ldr	r3, [r5, #8]
 8019896:	6869      	ldr	r1, [r5, #4]
 8019898:	eb0a 0709 	add.w	r7, sl, r9
 801989c:	42bb      	cmp	r3, r7
 801989e:	b085      	sub	sp, #20
 80198a0:	bfb8      	it	lt
 80198a2:	3101      	addlt	r1, #1
 80198a4:	f7ff fe8a 	bl	80195bc <_Balloc>
 80198a8:	b930      	cbnz	r0, 80198b8 <__multiply+0x44>
 80198aa:	4602      	mov	r2, r0
 80198ac:	4b42      	ldr	r3, [pc, #264]	; (80199b8 <__multiply+0x144>)
 80198ae:	4843      	ldr	r0, [pc, #268]	; (80199bc <__multiply+0x148>)
 80198b0:	f240 115d 	movw	r1, #349	; 0x15d
 80198b4:	f000 fcd0 	bl	801a258 <__assert_func>
 80198b8:	f100 0614 	add.w	r6, r0, #20
 80198bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80198c0:	4633      	mov	r3, r6
 80198c2:	2200      	movs	r2, #0
 80198c4:	4543      	cmp	r3, r8
 80198c6:	d31e      	bcc.n	8019906 <__multiply+0x92>
 80198c8:	f105 0c14 	add.w	ip, r5, #20
 80198cc:	f104 0314 	add.w	r3, r4, #20
 80198d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80198d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80198d8:	9202      	str	r2, [sp, #8]
 80198da:	ebac 0205 	sub.w	r2, ip, r5
 80198de:	3a15      	subs	r2, #21
 80198e0:	f022 0203 	bic.w	r2, r2, #3
 80198e4:	3204      	adds	r2, #4
 80198e6:	f105 0115 	add.w	r1, r5, #21
 80198ea:	458c      	cmp	ip, r1
 80198ec:	bf38      	it	cc
 80198ee:	2204      	movcc	r2, #4
 80198f0:	9201      	str	r2, [sp, #4]
 80198f2:	9a02      	ldr	r2, [sp, #8]
 80198f4:	9303      	str	r3, [sp, #12]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d808      	bhi.n	801990c <__multiply+0x98>
 80198fa:	2f00      	cmp	r7, #0
 80198fc:	dc55      	bgt.n	80199aa <__multiply+0x136>
 80198fe:	6107      	str	r7, [r0, #16]
 8019900:	b005      	add	sp, #20
 8019902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019906:	f843 2b04 	str.w	r2, [r3], #4
 801990a:	e7db      	b.n	80198c4 <__multiply+0x50>
 801990c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019910:	f1ba 0f00 	cmp.w	sl, #0
 8019914:	d020      	beq.n	8019958 <__multiply+0xe4>
 8019916:	f105 0e14 	add.w	lr, r5, #20
 801991a:	46b1      	mov	r9, r6
 801991c:	2200      	movs	r2, #0
 801991e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019922:	f8d9 b000 	ldr.w	fp, [r9]
 8019926:	b2a1      	uxth	r1, r4
 8019928:	fa1f fb8b 	uxth.w	fp, fp
 801992c:	fb0a b101 	mla	r1, sl, r1, fp
 8019930:	4411      	add	r1, r2
 8019932:	f8d9 2000 	ldr.w	r2, [r9]
 8019936:	0c24      	lsrs	r4, r4, #16
 8019938:	0c12      	lsrs	r2, r2, #16
 801993a:	fb0a 2404 	mla	r4, sl, r4, r2
 801993e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019942:	b289      	uxth	r1, r1
 8019944:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019948:	45f4      	cmp	ip, lr
 801994a:	f849 1b04 	str.w	r1, [r9], #4
 801994e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019952:	d8e4      	bhi.n	801991e <__multiply+0xaa>
 8019954:	9901      	ldr	r1, [sp, #4]
 8019956:	5072      	str	r2, [r6, r1]
 8019958:	9a03      	ldr	r2, [sp, #12]
 801995a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801995e:	3304      	adds	r3, #4
 8019960:	f1b9 0f00 	cmp.w	r9, #0
 8019964:	d01f      	beq.n	80199a6 <__multiply+0x132>
 8019966:	6834      	ldr	r4, [r6, #0]
 8019968:	f105 0114 	add.w	r1, r5, #20
 801996c:	46b6      	mov	lr, r6
 801996e:	f04f 0a00 	mov.w	sl, #0
 8019972:	880a      	ldrh	r2, [r1, #0]
 8019974:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019978:	fb09 b202 	mla	r2, r9, r2, fp
 801997c:	4492      	add	sl, r2
 801997e:	b2a4      	uxth	r4, r4
 8019980:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019984:	f84e 4b04 	str.w	r4, [lr], #4
 8019988:	f851 4b04 	ldr.w	r4, [r1], #4
 801998c:	f8be 2000 	ldrh.w	r2, [lr]
 8019990:	0c24      	lsrs	r4, r4, #16
 8019992:	fb09 2404 	mla	r4, r9, r4, r2
 8019996:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801999a:	458c      	cmp	ip, r1
 801999c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80199a0:	d8e7      	bhi.n	8019972 <__multiply+0xfe>
 80199a2:	9a01      	ldr	r2, [sp, #4]
 80199a4:	50b4      	str	r4, [r6, r2]
 80199a6:	3604      	adds	r6, #4
 80199a8:	e7a3      	b.n	80198f2 <__multiply+0x7e>
 80199aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d1a5      	bne.n	80198fe <__multiply+0x8a>
 80199b2:	3f01      	subs	r7, #1
 80199b4:	e7a1      	b.n	80198fa <__multiply+0x86>
 80199b6:	bf00      	nop
 80199b8:	0801cc74 	.word	0x0801cc74
 80199bc:	0801cd04 	.word	0x0801cd04

080199c0 <__pow5mult>:
 80199c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199c4:	4615      	mov	r5, r2
 80199c6:	f012 0203 	ands.w	r2, r2, #3
 80199ca:	4606      	mov	r6, r0
 80199cc:	460f      	mov	r7, r1
 80199ce:	d007      	beq.n	80199e0 <__pow5mult+0x20>
 80199d0:	4c25      	ldr	r4, [pc, #148]	; (8019a68 <__pow5mult+0xa8>)
 80199d2:	3a01      	subs	r2, #1
 80199d4:	2300      	movs	r3, #0
 80199d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80199da:	f7ff fe51 	bl	8019680 <__multadd>
 80199de:	4607      	mov	r7, r0
 80199e0:	10ad      	asrs	r5, r5, #2
 80199e2:	d03d      	beq.n	8019a60 <__pow5mult+0xa0>
 80199e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80199e6:	b97c      	cbnz	r4, 8019a08 <__pow5mult+0x48>
 80199e8:	2010      	movs	r0, #16
 80199ea:	f7fc fd59 	bl	80164a0 <malloc>
 80199ee:	4602      	mov	r2, r0
 80199f0:	6270      	str	r0, [r6, #36]	; 0x24
 80199f2:	b928      	cbnz	r0, 8019a00 <__pow5mult+0x40>
 80199f4:	4b1d      	ldr	r3, [pc, #116]	; (8019a6c <__pow5mult+0xac>)
 80199f6:	481e      	ldr	r0, [pc, #120]	; (8019a70 <__pow5mult+0xb0>)
 80199f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80199fc:	f000 fc2c 	bl	801a258 <__assert_func>
 8019a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019a04:	6004      	str	r4, [r0, #0]
 8019a06:	60c4      	str	r4, [r0, #12]
 8019a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019a10:	b94c      	cbnz	r4, 8019a26 <__pow5mult+0x66>
 8019a12:	f240 2171 	movw	r1, #625	; 0x271
 8019a16:	4630      	mov	r0, r6
 8019a18:	f7ff ff16 	bl	8019848 <__i2b>
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019a22:	4604      	mov	r4, r0
 8019a24:	6003      	str	r3, [r0, #0]
 8019a26:	f04f 0900 	mov.w	r9, #0
 8019a2a:	07eb      	lsls	r3, r5, #31
 8019a2c:	d50a      	bpl.n	8019a44 <__pow5mult+0x84>
 8019a2e:	4639      	mov	r1, r7
 8019a30:	4622      	mov	r2, r4
 8019a32:	4630      	mov	r0, r6
 8019a34:	f7ff ff1e 	bl	8019874 <__multiply>
 8019a38:	4639      	mov	r1, r7
 8019a3a:	4680      	mov	r8, r0
 8019a3c:	4630      	mov	r0, r6
 8019a3e:	f7ff fdfd 	bl	801963c <_Bfree>
 8019a42:	4647      	mov	r7, r8
 8019a44:	106d      	asrs	r5, r5, #1
 8019a46:	d00b      	beq.n	8019a60 <__pow5mult+0xa0>
 8019a48:	6820      	ldr	r0, [r4, #0]
 8019a4a:	b938      	cbnz	r0, 8019a5c <__pow5mult+0x9c>
 8019a4c:	4622      	mov	r2, r4
 8019a4e:	4621      	mov	r1, r4
 8019a50:	4630      	mov	r0, r6
 8019a52:	f7ff ff0f 	bl	8019874 <__multiply>
 8019a56:	6020      	str	r0, [r4, #0]
 8019a58:	f8c0 9000 	str.w	r9, [r0]
 8019a5c:	4604      	mov	r4, r0
 8019a5e:	e7e4      	b.n	8019a2a <__pow5mult+0x6a>
 8019a60:	4638      	mov	r0, r7
 8019a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a66:	bf00      	nop
 8019a68:	0801ce58 	.word	0x0801ce58
 8019a6c:	0801cbfe 	.word	0x0801cbfe
 8019a70:	0801cd04 	.word	0x0801cd04

08019a74 <__lshift>:
 8019a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a78:	460c      	mov	r4, r1
 8019a7a:	6849      	ldr	r1, [r1, #4]
 8019a7c:	6923      	ldr	r3, [r4, #16]
 8019a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019a82:	68a3      	ldr	r3, [r4, #8]
 8019a84:	4607      	mov	r7, r0
 8019a86:	4691      	mov	r9, r2
 8019a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019a8c:	f108 0601 	add.w	r6, r8, #1
 8019a90:	42b3      	cmp	r3, r6
 8019a92:	db0b      	blt.n	8019aac <__lshift+0x38>
 8019a94:	4638      	mov	r0, r7
 8019a96:	f7ff fd91 	bl	80195bc <_Balloc>
 8019a9a:	4605      	mov	r5, r0
 8019a9c:	b948      	cbnz	r0, 8019ab2 <__lshift+0x3e>
 8019a9e:	4602      	mov	r2, r0
 8019aa0:	4b28      	ldr	r3, [pc, #160]	; (8019b44 <__lshift+0xd0>)
 8019aa2:	4829      	ldr	r0, [pc, #164]	; (8019b48 <__lshift+0xd4>)
 8019aa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019aa8:	f000 fbd6 	bl	801a258 <__assert_func>
 8019aac:	3101      	adds	r1, #1
 8019aae:	005b      	lsls	r3, r3, #1
 8019ab0:	e7ee      	b.n	8019a90 <__lshift+0x1c>
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	f100 0114 	add.w	r1, r0, #20
 8019ab8:	f100 0210 	add.w	r2, r0, #16
 8019abc:	4618      	mov	r0, r3
 8019abe:	4553      	cmp	r3, sl
 8019ac0:	db33      	blt.n	8019b2a <__lshift+0xb6>
 8019ac2:	6920      	ldr	r0, [r4, #16]
 8019ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019ac8:	f104 0314 	add.w	r3, r4, #20
 8019acc:	f019 091f 	ands.w	r9, r9, #31
 8019ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019ad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019ad8:	d02b      	beq.n	8019b32 <__lshift+0xbe>
 8019ada:	f1c9 0e20 	rsb	lr, r9, #32
 8019ade:	468a      	mov	sl, r1
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	6818      	ldr	r0, [r3, #0]
 8019ae4:	fa00 f009 	lsl.w	r0, r0, r9
 8019ae8:	4302      	orrs	r2, r0
 8019aea:	f84a 2b04 	str.w	r2, [sl], #4
 8019aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8019af2:	459c      	cmp	ip, r3
 8019af4:	fa22 f20e 	lsr.w	r2, r2, lr
 8019af8:	d8f3      	bhi.n	8019ae2 <__lshift+0x6e>
 8019afa:	ebac 0304 	sub.w	r3, ip, r4
 8019afe:	3b15      	subs	r3, #21
 8019b00:	f023 0303 	bic.w	r3, r3, #3
 8019b04:	3304      	adds	r3, #4
 8019b06:	f104 0015 	add.w	r0, r4, #21
 8019b0a:	4584      	cmp	ip, r0
 8019b0c:	bf38      	it	cc
 8019b0e:	2304      	movcc	r3, #4
 8019b10:	50ca      	str	r2, [r1, r3]
 8019b12:	b10a      	cbz	r2, 8019b18 <__lshift+0xa4>
 8019b14:	f108 0602 	add.w	r6, r8, #2
 8019b18:	3e01      	subs	r6, #1
 8019b1a:	4638      	mov	r0, r7
 8019b1c:	612e      	str	r6, [r5, #16]
 8019b1e:	4621      	mov	r1, r4
 8019b20:	f7ff fd8c 	bl	801963c <_Bfree>
 8019b24:	4628      	mov	r0, r5
 8019b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b2e:	3301      	adds	r3, #1
 8019b30:	e7c5      	b.n	8019abe <__lshift+0x4a>
 8019b32:	3904      	subs	r1, #4
 8019b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b38:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b3c:	459c      	cmp	ip, r3
 8019b3e:	d8f9      	bhi.n	8019b34 <__lshift+0xc0>
 8019b40:	e7ea      	b.n	8019b18 <__lshift+0xa4>
 8019b42:	bf00      	nop
 8019b44:	0801cc74 	.word	0x0801cc74
 8019b48:	0801cd04 	.word	0x0801cd04

08019b4c <__mcmp>:
 8019b4c:	b530      	push	{r4, r5, lr}
 8019b4e:	6902      	ldr	r2, [r0, #16]
 8019b50:	690c      	ldr	r4, [r1, #16]
 8019b52:	1b12      	subs	r2, r2, r4
 8019b54:	d10e      	bne.n	8019b74 <__mcmp+0x28>
 8019b56:	f100 0314 	add.w	r3, r0, #20
 8019b5a:	3114      	adds	r1, #20
 8019b5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019b60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019b64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019b68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019b6c:	42a5      	cmp	r5, r4
 8019b6e:	d003      	beq.n	8019b78 <__mcmp+0x2c>
 8019b70:	d305      	bcc.n	8019b7e <__mcmp+0x32>
 8019b72:	2201      	movs	r2, #1
 8019b74:	4610      	mov	r0, r2
 8019b76:	bd30      	pop	{r4, r5, pc}
 8019b78:	4283      	cmp	r3, r0
 8019b7a:	d3f3      	bcc.n	8019b64 <__mcmp+0x18>
 8019b7c:	e7fa      	b.n	8019b74 <__mcmp+0x28>
 8019b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8019b82:	e7f7      	b.n	8019b74 <__mcmp+0x28>

08019b84 <__mdiff>:
 8019b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b88:	460c      	mov	r4, r1
 8019b8a:	4606      	mov	r6, r0
 8019b8c:	4611      	mov	r1, r2
 8019b8e:	4620      	mov	r0, r4
 8019b90:	4617      	mov	r7, r2
 8019b92:	f7ff ffdb 	bl	8019b4c <__mcmp>
 8019b96:	1e05      	subs	r5, r0, #0
 8019b98:	d110      	bne.n	8019bbc <__mdiff+0x38>
 8019b9a:	4629      	mov	r1, r5
 8019b9c:	4630      	mov	r0, r6
 8019b9e:	f7ff fd0d 	bl	80195bc <_Balloc>
 8019ba2:	b930      	cbnz	r0, 8019bb2 <__mdiff+0x2e>
 8019ba4:	4b39      	ldr	r3, [pc, #228]	; (8019c8c <__mdiff+0x108>)
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	f240 2132 	movw	r1, #562	; 0x232
 8019bac:	4838      	ldr	r0, [pc, #224]	; (8019c90 <__mdiff+0x10c>)
 8019bae:	f000 fb53 	bl	801a258 <__assert_func>
 8019bb2:	2301      	movs	r3, #1
 8019bb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019bb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bbc:	bfa4      	itt	ge
 8019bbe:	463b      	movge	r3, r7
 8019bc0:	4627      	movge	r7, r4
 8019bc2:	4630      	mov	r0, r6
 8019bc4:	6879      	ldr	r1, [r7, #4]
 8019bc6:	bfa6      	itte	ge
 8019bc8:	461c      	movge	r4, r3
 8019bca:	2500      	movge	r5, #0
 8019bcc:	2501      	movlt	r5, #1
 8019bce:	f7ff fcf5 	bl	80195bc <_Balloc>
 8019bd2:	b920      	cbnz	r0, 8019bde <__mdiff+0x5a>
 8019bd4:	4b2d      	ldr	r3, [pc, #180]	; (8019c8c <__mdiff+0x108>)
 8019bd6:	4602      	mov	r2, r0
 8019bd8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019bdc:	e7e6      	b.n	8019bac <__mdiff+0x28>
 8019bde:	693e      	ldr	r6, [r7, #16]
 8019be0:	60c5      	str	r5, [r0, #12]
 8019be2:	6925      	ldr	r5, [r4, #16]
 8019be4:	f107 0114 	add.w	r1, r7, #20
 8019be8:	f104 0914 	add.w	r9, r4, #20
 8019bec:	f100 0e14 	add.w	lr, r0, #20
 8019bf0:	f107 0210 	add.w	r2, r7, #16
 8019bf4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019bf8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019bfc:	46f2      	mov	sl, lr
 8019bfe:	2700      	movs	r7, #0
 8019c00:	f859 3b04 	ldr.w	r3, [r9], #4
 8019c04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019c08:	fa1f f883 	uxth.w	r8, r3
 8019c0c:	fa17 f78b 	uxtah	r7, r7, fp
 8019c10:	0c1b      	lsrs	r3, r3, #16
 8019c12:	eba7 0808 	sub.w	r8, r7, r8
 8019c16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019c1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019c1e:	fa1f f888 	uxth.w	r8, r8
 8019c22:	141f      	asrs	r7, r3, #16
 8019c24:	454d      	cmp	r5, r9
 8019c26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019c2a:	f84a 3b04 	str.w	r3, [sl], #4
 8019c2e:	d8e7      	bhi.n	8019c00 <__mdiff+0x7c>
 8019c30:	1b2b      	subs	r3, r5, r4
 8019c32:	3b15      	subs	r3, #21
 8019c34:	f023 0303 	bic.w	r3, r3, #3
 8019c38:	3304      	adds	r3, #4
 8019c3a:	3415      	adds	r4, #21
 8019c3c:	42a5      	cmp	r5, r4
 8019c3e:	bf38      	it	cc
 8019c40:	2304      	movcc	r3, #4
 8019c42:	4419      	add	r1, r3
 8019c44:	4473      	add	r3, lr
 8019c46:	469e      	mov	lr, r3
 8019c48:	460d      	mov	r5, r1
 8019c4a:	4565      	cmp	r5, ip
 8019c4c:	d30e      	bcc.n	8019c6c <__mdiff+0xe8>
 8019c4e:	f10c 0203 	add.w	r2, ip, #3
 8019c52:	1a52      	subs	r2, r2, r1
 8019c54:	f022 0203 	bic.w	r2, r2, #3
 8019c58:	3903      	subs	r1, #3
 8019c5a:	458c      	cmp	ip, r1
 8019c5c:	bf38      	it	cc
 8019c5e:	2200      	movcc	r2, #0
 8019c60:	441a      	add	r2, r3
 8019c62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019c66:	b17b      	cbz	r3, 8019c88 <__mdiff+0x104>
 8019c68:	6106      	str	r6, [r0, #16]
 8019c6a:	e7a5      	b.n	8019bb8 <__mdiff+0x34>
 8019c6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019c70:	fa17 f488 	uxtah	r4, r7, r8
 8019c74:	1422      	asrs	r2, r4, #16
 8019c76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019c7a:	b2a4      	uxth	r4, r4
 8019c7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019c80:	f84e 4b04 	str.w	r4, [lr], #4
 8019c84:	1417      	asrs	r7, r2, #16
 8019c86:	e7e0      	b.n	8019c4a <__mdiff+0xc6>
 8019c88:	3e01      	subs	r6, #1
 8019c8a:	e7ea      	b.n	8019c62 <__mdiff+0xde>
 8019c8c:	0801cc74 	.word	0x0801cc74
 8019c90:	0801cd04 	.word	0x0801cd04

08019c94 <__ulp>:
 8019c94:	b082      	sub	sp, #8
 8019c96:	ed8d 0b00 	vstr	d0, [sp]
 8019c9a:	9b01      	ldr	r3, [sp, #4]
 8019c9c:	4912      	ldr	r1, [pc, #72]	; (8019ce8 <__ulp+0x54>)
 8019c9e:	4019      	ands	r1, r3
 8019ca0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019ca4:	2900      	cmp	r1, #0
 8019ca6:	dd05      	ble.n	8019cb4 <__ulp+0x20>
 8019ca8:	2200      	movs	r2, #0
 8019caa:	460b      	mov	r3, r1
 8019cac:	ec43 2b10 	vmov	d0, r2, r3
 8019cb0:	b002      	add	sp, #8
 8019cb2:	4770      	bx	lr
 8019cb4:	4249      	negs	r1, r1
 8019cb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019cba:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019cbe:	f04f 0200 	mov.w	r2, #0
 8019cc2:	f04f 0300 	mov.w	r3, #0
 8019cc6:	da04      	bge.n	8019cd2 <__ulp+0x3e>
 8019cc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019ccc:	fa41 f300 	asr.w	r3, r1, r0
 8019cd0:	e7ec      	b.n	8019cac <__ulp+0x18>
 8019cd2:	f1a0 0114 	sub.w	r1, r0, #20
 8019cd6:	291e      	cmp	r1, #30
 8019cd8:	bfda      	itte	le
 8019cda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019cde:	fa20 f101 	lsrle.w	r1, r0, r1
 8019ce2:	2101      	movgt	r1, #1
 8019ce4:	460a      	mov	r2, r1
 8019ce6:	e7e1      	b.n	8019cac <__ulp+0x18>
 8019ce8:	7ff00000 	.word	0x7ff00000

08019cec <__b2d>:
 8019cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cee:	6905      	ldr	r5, [r0, #16]
 8019cf0:	f100 0714 	add.w	r7, r0, #20
 8019cf4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019cf8:	1f2e      	subs	r6, r5, #4
 8019cfa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019cfe:	4620      	mov	r0, r4
 8019d00:	f7ff fd52 	bl	80197a8 <__hi0bits>
 8019d04:	f1c0 0320 	rsb	r3, r0, #32
 8019d08:	280a      	cmp	r0, #10
 8019d0a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019d88 <__b2d+0x9c>
 8019d0e:	600b      	str	r3, [r1, #0]
 8019d10:	dc14      	bgt.n	8019d3c <__b2d+0x50>
 8019d12:	f1c0 0e0b 	rsb	lr, r0, #11
 8019d16:	fa24 f10e 	lsr.w	r1, r4, lr
 8019d1a:	42b7      	cmp	r7, r6
 8019d1c:	ea41 030c 	orr.w	r3, r1, ip
 8019d20:	bf34      	ite	cc
 8019d22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019d26:	2100      	movcs	r1, #0
 8019d28:	3015      	adds	r0, #21
 8019d2a:	fa04 f000 	lsl.w	r0, r4, r0
 8019d2e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019d32:	ea40 0201 	orr.w	r2, r0, r1
 8019d36:	ec43 2b10 	vmov	d0, r2, r3
 8019d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d3c:	42b7      	cmp	r7, r6
 8019d3e:	bf3a      	itte	cc
 8019d40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019d44:	f1a5 0608 	subcc.w	r6, r5, #8
 8019d48:	2100      	movcs	r1, #0
 8019d4a:	380b      	subs	r0, #11
 8019d4c:	d017      	beq.n	8019d7e <__b2d+0x92>
 8019d4e:	f1c0 0c20 	rsb	ip, r0, #32
 8019d52:	fa04 f500 	lsl.w	r5, r4, r0
 8019d56:	42be      	cmp	r6, r7
 8019d58:	fa21 f40c 	lsr.w	r4, r1, ip
 8019d5c:	ea45 0504 	orr.w	r5, r5, r4
 8019d60:	bf8c      	ite	hi
 8019d62:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019d66:	2400      	movls	r4, #0
 8019d68:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019d6c:	fa01 f000 	lsl.w	r0, r1, r0
 8019d70:	fa24 f40c 	lsr.w	r4, r4, ip
 8019d74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019d78:	ea40 0204 	orr.w	r2, r0, r4
 8019d7c:	e7db      	b.n	8019d36 <__b2d+0x4a>
 8019d7e:	ea44 030c 	orr.w	r3, r4, ip
 8019d82:	460a      	mov	r2, r1
 8019d84:	e7d7      	b.n	8019d36 <__b2d+0x4a>
 8019d86:	bf00      	nop
 8019d88:	3ff00000 	.word	0x3ff00000

08019d8c <__d2b>:
 8019d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019d90:	4689      	mov	r9, r1
 8019d92:	2101      	movs	r1, #1
 8019d94:	ec57 6b10 	vmov	r6, r7, d0
 8019d98:	4690      	mov	r8, r2
 8019d9a:	f7ff fc0f 	bl	80195bc <_Balloc>
 8019d9e:	4604      	mov	r4, r0
 8019da0:	b930      	cbnz	r0, 8019db0 <__d2b+0x24>
 8019da2:	4602      	mov	r2, r0
 8019da4:	4b25      	ldr	r3, [pc, #148]	; (8019e3c <__d2b+0xb0>)
 8019da6:	4826      	ldr	r0, [pc, #152]	; (8019e40 <__d2b+0xb4>)
 8019da8:	f240 310a 	movw	r1, #778	; 0x30a
 8019dac:	f000 fa54 	bl	801a258 <__assert_func>
 8019db0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019db4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019db8:	bb35      	cbnz	r5, 8019e08 <__d2b+0x7c>
 8019dba:	2e00      	cmp	r6, #0
 8019dbc:	9301      	str	r3, [sp, #4]
 8019dbe:	d028      	beq.n	8019e12 <__d2b+0x86>
 8019dc0:	4668      	mov	r0, sp
 8019dc2:	9600      	str	r6, [sp, #0]
 8019dc4:	f7ff fd10 	bl	80197e8 <__lo0bits>
 8019dc8:	9900      	ldr	r1, [sp, #0]
 8019dca:	b300      	cbz	r0, 8019e0e <__d2b+0x82>
 8019dcc:	9a01      	ldr	r2, [sp, #4]
 8019dce:	f1c0 0320 	rsb	r3, r0, #32
 8019dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8019dd6:	430b      	orrs	r3, r1
 8019dd8:	40c2      	lsrs	r2, r0
 8019dda:	6163      	str	r3, [r4, #20]
 8019ddc:	9201      	str	r2, [sp, #4]
 8019dde:	9b01      	ldr	r3, [sp, #4]
 8019de0:	61a3      	str	r3, [r4, #24]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	bf14      	ite	ne
 8019de6:	2202      	movne	r2, #2
 8019de8:	2201      	moveq	r2, #1
 8019dea:	6122      	str	r2, [r4, #16]
 8019dec:	b1d5      	cbz	r5, 8019e24 <__d2b+0x98>
 8019dee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019df2:	4405      	add	r5, r0
 8019df4:	f8c9 5000 	str.w	r5, [r9]
 8019df8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019dfc:	f8c8 0000 	str.w	r0, [r8]
 8019e00:	4620      	mov	r0, r4
 8019e02:	b003      	add	sp, #12
 8019e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019e0c:	e7d5      	b.n	8019dba <__d2b+0x2e>
 8019e0e:	6161      	str	r1, [r4, #20]
 8019e10:	e7e5      	b.n	8019dde <__d2b+0x52>
 8019e12:	a801      	add	r0, sp, #4
 8019e14:	f7ff fce8 	bl	80197e8 <__lo0bits>
 8019e18:	9b01      	ldr	r3, [sp, #4]
 8019e1a:	6163      	str	r3, [r4, #20]
 8019e1c:	2201      	movs	r2, #1
 8019e1e:	6122      	str	r2, [r4, #16]
 8019e20:	3020      	adds	r0, #32
 8019e22:	e7e3      	b.n	8019dec <__d2b+0x60>
 8019e24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019e28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019e2c:	f8c9 0000 	str.w	r0, [r9]
 8019e30:	6918      	ldr	r0, [r3, #16]
 8019e32:	f7ff fcb9 	bl	80197a8 <__hi0bits>
 8019e36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019e3a:	e7df      	b.n	8019dfc <__d2b+0x70>
 8019e3c:	0801cc74 	.word	0x0801cc74
 8019e40:	0801cd04 	.word	0x0801cd04

08019e44 <__ratio>:
 8019e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e48:	4688      	mov	r8, r1
 8019e4a:	4669      	mov	r1, sp
 8019e4c:	4681      	mov	r9, r0
 8019e4e:	f7ff ff4d 	bl	8019cec <__b2d>
 8019e52:	a901      	add	r1, sp, #4
 8019e54:	4640      	mov	r0, r8
 8019e56:	ec55 4b10 	vmov	r4, r5, d0
 8019e5a:	f7ff ff47 	bl	8019cec <__b2d>
 8019e5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019e62:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019e66:	eba3 0c02 	sub.w	ip, r3, r2
 8019e6a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019e6e:	1a9b      	subs	r3, r3, r2
 8019e70:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019e74:	ec51 0b10 	vmov	r0, r1, d0
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	bfd6      	itet	le
 8019e7c:	460a      	movle	r2, r1
 8019e7e:	462a      	movgt	r2, r5
 8019e80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019e84:	468b      	mov	fp, r1
 8019e86:	462f      	mov	r7, r5
 8019e88:	bfd4      	ite	le
 8019e8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019e8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019e92:	4620      	mov	r0, r4
 8019e94:	ee10 2a10 	vmov	r2, s0
 8019e98:	465b      	mov	r3, fp
 8019e9a:	4639      	mov	r1, r7
 8019e9c:	f7e6 fcd6 	bl	800084c <__aeabi_ddiv>
 8019ea0:	ec41 0b10 	vmov	d0, r0, r1
 8019ea4:	b003      	add	sp, #12
 8019ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019eaa <__copybits>:
 8019eaa:	3901      	subs	r1, #1
 8019eac:	b570      	push	{r4, r5, r6, lr}
 8019eae:	1149      	asrs	r1, r1, #5
 8019eb0:	6914      	ldr	r4, [r2, #16]
 8019eb2:	3101      	adds	r1, #1
 8019eb4:	f102 0314 	add.w	r3, r2, #20
 8019eb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019ebc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019ec0:	1f05      	subs	r5, r0, #4
 8019ec2:	42a3      	cmp	r3, r4
 8019ec4:	d30c      	bcc.n	8019ee0 <__copybits+0x36>
 8019ec6:	1aa3      	subs	r3, r4, r2
 8019ec8:	3b11      	subs	r3, #17
 8019eca:	f023 0303 	bic.w	r3, r3, #3
 8019ece:	3211      	adds	r2, #17
 8019ed0:	42a2      	cmp	r2, r4
 8019ed2:	bf88      	it	hi
 8019ed4:	2300      	movhi	r3, #0
 8019ed6:	4418      	add	r0, r3
 8019ed8:	2300      	movs	r3, #0
 8019eda:	4288      	cmp	r0, r1
 8019edc:	d305      	bcc.n	8019eea <__copybits+0x40>
 8019ede:	bd70      	pop	{r4, r5, r6, pc}
 8019ee0:	f853 6b04 	ldr.w	r6, [r3], #4
 8019ee4:	f845 6f04 	str.w	r6, [r5, #4]!
 8019ee8:	e7eb      	b.n	8019ec2 <__copybits+0x18>
 8019eea:	f840 3b04 	str.w	r3, [r0], #4
 8019eee:	e7f4      	b.n	8019eda <__copybits+0x30>

08019ef0 <__any_on>:
 8019ef0:	f100 0214 	add.w	r2, r0, #20
 8019ef4:	6900      	ldr	r0, [r0, #16]
 8019ef6:	114b      	asrs	r3, r1, #5
 8019ef8:	4298      	cmp	r0, r3
 8019efa:	b510      	push	{r4, lr}
 8019efc:	db11      	blt.n	8019f22 <__any_on+0x32>
 8019efe:	dd0a      	ble.n	8019f16 <__any_on+0x26>
 8019f00:	f011 011f 	ands.w	r1, r1, #31
 8019f04:	d007      	beq.n	8019f16 <__any_on+0x26>
 8019f06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019f0a:	fa24 f001 	lsr.w	r0, r4, r1
 8019f0e:	fa00 f101 	lsl.w	r1, r0, r1
 8019f12:	428c      	cmp	r4, r1
 8019f14:	d10b      	bne.n	8019f2e <__any_on+0x3e>
 8019f16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f1a:	4293      	cmp	r3, r2
 8019f1c:	d803      	bhi.n	8019f26 <__any_on+0x36>
 8019f1e:	2000      	movs	r0, #0
 8019f20:	bd10      	pop	{r4, pc}
 8019f22:	4603      	mov	r3, r0
 8019f24:	e7f7      	b.n	8019f16 <__any_on+0x26>
 8019f26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019f2a:	2900      	cmp	r1, #0
 8019f2c:	d0f5      	beq.n	8019f1a <__any_on+0x2a>
 8019f2e:	2001      	movs	r0, #1
 8019f30:	e7f6      	b.n	8019f20 <__any_on+0x30>

08019f32 <_calloc_r>:
 8019f32:	b513      	push	{r0, r1, r4, lr}
 8019f34:	434a      	muls	r2, r1
 8019f36:	4611      	mov	r1, r2
 8019f38:	9201      	str	r2, [sp, #4]
 8019f3a:	f7fc fb41 	bl	80165c0 <_malloc_r>
 8019f3e:	4604      	mov	r4, r0
 8019f40:	b118      	cbz	r0, 8019f4a <_calloc_r+0x18>
 8019f42:	9a01      	ldr	r2, [sp, #4]
 8019f44:	2100      	movs	r1, #0
 8019f46:	f7fc fae3 	bl	8016510 <memset>
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	b002      	add	sp, #8
 8019f4e:	bd10      	pop	{r4, pc}

08019f50 <__ssputs_r>:
 8019f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f54:	688e      	ldr	r6, [r1, #8]
 8019f56:	429e      	cmp	r6, r3
 8019f58:	4682      	mov	sl, r0
 8019f5a:	460c      	mov	r4, r1
 8019f5c:	4690      	mov	r8, r2
 8019f5e:	461f      	mov	r7, r3
 8019f60:	d838      	bhi.n	8019fd4 <__ssputs_r+0x84>
 8019f62:	898a      	ldrh	r2, [r1, #12]
 8019f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019f68:	d032      	beq.n	8019fd0 <__ssputs_r+0x80>
 8019f6a:	6825      	ldr	r5, [r4, #0]
 8019f6c:	6909      	ldr	r1, [r1, #16]
 8019f6e:	eba5 0901 	sub.w	r9, r5, r1
 8019f72:	6965      	ldr	r5, [r4, #20]
 8019f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f7c:	3301      	adds	r3, #1
 8019f7e:	444b      	add	r3, r9
 8019f80:	106d      	asrs	r5, r5, #1
 8019f82:	429d      	cmp	r5, r3
 8019f84:	bf38      	it	cc
 8019f86:	461d      	movcc	r5, r3
 8019f88:	0553      	lsls	r3, r2, #21
 8019f8a:	d531      	bpl.n	8019ff0 <__ssputs_r+0xa0>
 8019f8c:	4629      	mov	r1, r5
 8019f8e:	f7fc fb17 	bl	80165c0 <_malloc_r>
 8019f92:	4606      	mov	r6, r0
 8019f94:	b950      	cbnz	r0, 8019fac <__ssputs_r+0x5c>
 8019f96:	230c      	movs	r3, #12
 8019f98:	f8ca 3000 	str.w	r3, [sl]
 8019f9c:	89a3      	ldrh	r3, [r4, #12]
 8019f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fa2:	81a3      	strh	r3, [r4, #12]
 8019fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8019fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fac:	6921      	ldr	r1, [r4, #16]
 8019fae:	464a      	mov	r2, r9
 8019fb0:	f7fc fa86 	bl	80164c0 <memcpy>
 8019fb4:	89a3      	ldrh	r3, [r4, #12]
 8019fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fbe:	81a3      	strh	r3, [r4, #12]
 8019fc0:	6126      	str	r6, [r4, #16]
 8019fc2:	6165      	str	r5, [r4, #20]
 8019fc4:	444e      	add	r6, r9
 8019fc6:	eba5 0509 	sub.w	r5, r5, r9
 8019fca:	6026      	str	r6, [r4, #0]
 8019fcc:	60a5      	str	r5, [r4, #8]
 8019fce:	463e      	mov	r6, r7
 8019fd0:	42be      	cmp	r6, r7
 8019fd2:	d900      	bls.n	8019fd6 <__ssputs_r+0x86>
 8019fd4:	463e      	mov	r6, r7
 8019fd6:	4632      	mov	r2, r6
 8019fd8:	6820      	ldr	r0, [r4, #0]
 8019fda:	4641      	mov	r1, r8
 8019fdc:	f7fc fa7e 	bl	80164dc <memmove>
 8019fe0:	68a3      	ldr	r3, [r4, #8]
 8019fe2:	6822      	ldr	r2, [r4, #0]
 8019fe4:	1b9b      	subs	r3, r3, r6
 8019fe6:	4432      	add	r2, r6
 8019fe8:	60a3      	str	r3, [r4, #8]
 8019fea:	6022      	str	r2, [r4, #0]
 8019fec:	2000      	movs	r0, #0
 8019fee:	e7db      	b.n	8019fa8 <__ssputs_r+0x58>
 8019ff0:	462a      	mov	r2, r5
 8019ff2:	f000 f964 	bl	801a2be <_realloc_r>
 8019ff6:	4606      	mov	r6, r0
 8019ff8:	2800      	cmp	r0, #0
 8019ffa:	d1e1      	bne.n	8019fc0 <__ssputs_r+0x70>
 8019ffc:	6921      	ldr	r1, [r4, #16]
 8019ffe:	4650      	mov	r0, sl
 801a000:	f7fc fa8e 	bl	8016520 <_free_r>
 801a004:	e7c7      	b.n	8019f96 <__ssputs_r+0x46>
	...

0801a008 <_svfiprintf_r>:
 801a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a00c:	4698      	mov	r8, r3
 801a00e:	898b      	ldrh	r3, [r1, #12]
 801a010:	061b      	lsls	r3, r3, #24
 801a012:	b09d      	sub	sp, #116	; 0x74
 801a014:	4607      	mov	r7, r0
 801a016:	460d      	mov	r5, r1
 801a018:	4614      	mov	r4, r2
 801a01a:	d50e      	bpl.n	801a03a <_svfiprintf_r+0x32>
 801a01c:	690b      	ldr	r3, [r1, #16]
 801a01e:	b963      	cbnz	r3, 801a03a <_svfiprintf_r+0x32>
 801a020:	2140      	movs	r1, #64	; 0x40
 801a022:	f7fc facd 	bl	80165c0 <_malloc_r>
 801a026:	6028      	str	r0, [r5, #0]
 801a028:	6128      	str	r0, [r5, #16]
 801a02a:	b920      	cbnz	r0, 801a036 <_svfiprintf_r+0x2e>
 801a02c:	230c      	movs	r3, #12
 801a02e:	603b      	str	r3, [r7, #0]
 801a030:	f04f 30ff 	mov.w	r0, #4294967295
 801a034:	e0d1      	b.n	801a1da <_svfiprintf_r+0x1d2>
 801a036:	2340      	movs	r3, #64	; 0x40
 801a038:	616b      	str	r3, [r5, #20]
 801a03a:	2300      	movs	r3, #0
 801a03c:	9309      	str	r3, [sp, #36]	; 0x24
 801a03e:	2320      	movs	r3, #32
 801a040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a044:	f8cd 800c 	str.w	r8, [sp, #12]
 801a048:	2330      	movs	r3, #48	; 0x30
 801a04a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a1f4 <_svfiprintf_r+0x1ec>
 801a04e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a052:	f04f 0901 	mov.w	r9, #1
 801a056:	4623      	mov	r3, r4
 801a058:	469a      	mov	sl, r3
 801a05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a05e:	b10a      	cbz	r2, 801a064 <_svfiprintf_r+0x5c>
 801a060:	2a25      	cmp	r2, #37	; 0x25
 801a062:	d1f9      	bne.n	801a058 <_svfiprintf_r+0x50>
 801a064:	ebba 0b04 	subs.w	fp, sl, r4
 801a068:	d00b      	beq.n	801a082 <_svfiprintf_r+0x7a>
 801a06a:	465b      	mov	r3, fp
 801a06c:	4622      	mov	r2, r4
 801a06e:	4629      	mov	r1, r5
 801a070:	4638      	mov	r0, r7
 801a072:	f7ff ff6d 	bl	8019f50 <__ssputs_r>
 801a076:	3001      	adds	r0, #1
 801a078:	f000 80aa 	beq.w	801a1d0 <_svfiprintf_r+0x1c8>
 801a07c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a07e:	445a      	add	r2, fp
 801a080:	9209      	str	r2, [sp, #36]	; 0x24
 801a082:	f89a 3000 	ldrb.w	r3, [sl]
 801a086:	2b00      	cmp	r3, #0
 801a088:	f000 80a2 	beq.w	801a1d0 <_svfiprintf_r+0x1c8>
 801a08c:	2300      	movs	r3, #0
 801a08e:	f04f 32ff 	mov.w	r2, #4294967295
 801a092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a096:	f10a 0a01 	add.w	sl, sl, #1
 801a09a:	9304      	str	r3, [sp, #16]
 801a09c:	9307      	str	r3, [sp, #28]
 801a09e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0a2:	931a      	str	r3, [sp, #104]	; 0x68
 801a0a4:	4654      	mov	r4, sl
 801a0a6:	2205      	movs	r2, #5
 801a0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0ac:	4851      	ldr	r0, [pc, #324]	; (801a1f4 <_svfiprintf_r+0x1ec>)
 801a0ae:	f7e6 f897 	bl	80001e0 <memchr>
 801a0b2:	9a04      	ldr	r2, [sp, #16]
 801a0b4:	b9d8      	cbnz	r0, 801a0ee <_svfiprintf_r+0xe6>
 801a0b6:	06d0      	lsls	r0, r2, #27
 801a0b8:	bf44      	itt	mi
 801a0ba:	2320      	movmi	r3, #32
 801a0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0c0:	0711      	lsls	r1, r2, #28
 801a0c2:	bf44      	itt	mi
 801a0c4:	232b      	movmi	r3, #43	; 0x2b
 801a0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0ca:	f89a 3000 	ldrb.w	r3, [sl]
 801a0ce:	2b2a      	cmp	r3, #42	; 0x2a
 801a0d0:	d015      	beq.n	801a0fe <_svfiprintf_r+0xf6>
 801a0d2:	9a07      	ldr	r2, [sp, #28]
 801a0d4:	4654      	mov	r4, sl
 801a0d6:	2000      	movs	r0, #0
 801a0d8:	f04f 0c0a 	mov.w	ip, #10
 801a0dc:	4621      	mov	r1, r4
 801a0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0e2:	3b30      	subs	r3, #48	; 0x30
 801a0e4:	2b09      	cmp	r3, #9
 801a0e6:	d94e      	bls.n	801a186 <_svfiprintf_r+0x17e>
 801a0e8:	b1b0      	cbz	r0, 801a118 <_svfiprintf_r+0x110>
 801a0ea:	9207      	str	r2, [sp, #28]
 801a0ec:	e014      	b.n	801a118 <_svfiprintf_r+0x110>
 801a0ee:	eba0 0308 	sub.w	r3, r0, r8
 801a0f2:	fa09 f303 	lsl.w	r3, r9, r3
 801a0f6:	4313      	orrs	r3, r2
 801a0f8:	9304      	str	r3, [sp, #16]
 801a0fa:	46a2      	mov	sl, r4
 801a0fc:	e7d2      	b.n	801a0a4 <_svfiprintf_r+0x9c>
 801a0fe:	9b03      	ldr	r3, [sp, #12]
 801a100:	1d19      	adds	r1, r3, #4
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	9103      	str	r1, [sp, #12]
 801a106:	2b00      	cmp	r3, #0
 801a108:	bfbb      	ittet	lt
 801a10a:	425b      	neglt	r3, r3
 801a10c:	f042 0202 	orrlt.w	r2, r2, #2
 801a110:	9307      	strge	r3, [sp, #28]
 801a112:	9307      	strlt	r3, [sp, #28]
 801a114:	bfb8      	it	lt
 801a116:	9204      	strlt	r2, [sp, #16]
 801a118:	7823      	ldrb	r3, [r4, #0]
 801a11a:	2b2e      	cmp	r3, #46	; 0x2e
 801a11c:	d10c      	bne.n	801a138 <_svfiprintf_r+0x130>
 801a11e:	7863      	ldrb	r3, [r4, #1]
 801a120:	2b2a      	cmp	r3, #42	; 0x2a
 801a122:	d135      	bne.n	801a190 <_svfiprintf_r+0x188>
 801a124:	9b03      	ldr	r3, [sp, #12]
 801a126:	1d1a      	adds	r2, r3, #4
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	9203      	str	r2, [sp, #12]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	bfb8      	it	lt
 801a130:	f04f 33ff 	movlt.w	r3, #4294967295
 801a134:	3402      	adds	r4, #2
 801a136:	9305      	str	r3, [sp, #20]
 801a138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a204 <_svfiprintf_r+0x1fc>
 801a13c:	7821      	ldrb	r1, [r4, #0]
 801a13e:	2203      	movs	r2, #3
 801a140:	4650      	mov	r0, sl
 801a142:	f7e6 f84d 	bl	80001e0 <memchr>
 801a146:	b140      	cbz	r0, 801a15a <_svfiprintf_r+0x152>
 801a148:	2340      	movs	r3, #64	; 0x40
 801a14a:	eba0 000a 	sub.w	r0, r0, sl
 801a14e:	fa03 f000 	lsl.w	r0, r3, r0
 801a152:	9b04      	ldr	r3, [sp, #16]
 801a154:	4303      	orrs	r3, r0
 801a156:	3401      	adds	r4, #1
 801a158:	9304      	str	r3, [sp, #16]
 801a15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a15e:	4826      	ldr	r0, [pc, #152]	; (801a1f8 <_svfiprintf_r+0x1f0>)
 801a160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a164:	2206      	movs	r2, #6
 801a166:	f7e6 f83b 	bl	80001e0 <memchr>
 801a16a:	2800      	cmp	r0, #0
 801a16c:	d038      	beq.n	801a1e0 <_svfiprintf_r+0x1d8>
 801a16e:	4b23      	ldr	r3, [pc, #140]	; (801a1fc <_svfiprintf_r+0x1f4>)
 801a170:	bb1b      	cbnz	r3, 801a1ba <_svfiprintf_r+0x1b2>
 801a172:	9b03      	ldr	r3, [sp, #12]
 801a174:	3307      	adds	r3, #7
 801a176:	f023 0307 	bic.w	r3, r3, #7
 801a17a:	3308      	adds	r3, #8
 801a17c:	9303      	str	r3, [sp, #12]
 801a17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a180:	4433      	add	r3, r6
 801a182:	9309      	str	r3, [sp, #36]	; 0x24
 801a184:	e767      	b.n	801a056 <_svfiprintf_r+0x4e>
 801a186:	fb0c 3202 	mla	r2, ip, r2, r3
 801a18a:	460c      	mov	r4, r1
 801a18c:	2001      	movs	r0, #1
 801a18e:	e7a5      	b.n	801a0dc <_svfiprintf_r+0xd4>
 801a190:	2300      	movs	r3, #0
 801a192:	3401      	adds	r4, #1
 801a194:	9305      	str	r3, [sp, #20]
 801a196:	4619      	mov	r1, r3
 801a198:	f04f 0c0a 	mov.w	ip, #10
 801a19c:	4620      	mov	r0, r4
 801a19e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1a2:	3a30      	subs	r2, #48	; 0x30
 801a1a4:	2a09      	cmp	r2, #9
 801a1a6:	d903      	bls.n	801a1b0 <_svfiprintf_r+0x1a8>
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d0c5      	beq.n	801a138 <_svfiprintf_r+0x130>
 801a1ac:	9105      	str	r1, [sp, #20]
 801a1ae:	e7c3      	b.n	801a138 <_svfiprintf_r+0x130>
 801a1b0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1b4:	4604      	mov	r4, r0
 801a1b6:	2301      	movs	r3, #1
 801a1b8:	e7f0      	b.n	801a19c <_svfiprintf_r+0x194>
 801a1ba:	ab03      	add	r3, sp, #12
 801a1bc:	9300      	str	r3, [sp, #0]
 801a1be:	462a      	mov	r2, r5
 801a1c0:	4b0f      	ldr	r3, [pc, #60]	; (801a200 <_svfiprintf_r+0x1f8>)
 801a1c2:	a904      	add	r1, sp, #16
 801a1c4:	4638      	mov	r0, r7
 801a1c6:	f7fc faf5 	bl	80167b4 <_printf_float>
 801a1ca:	1c42      	adds	r2, r0, #1
 801a1cc:	4606      	mov	r6, r0
 801a1ce:	d1d6      	bne.n	801a17e <_svfiprintf_r+0x176>
 801a1d0:	89ab      	ldrh	r3, [r5, #12]
 801a1d2:	065b      	lsls	r3, r3, #25
 801a1d4:	f53f af2c 	bmi.w	801a030 <_svfiprintf_r+0x28>
 801a1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1da:	b01d      	add	sp, #116	; 0x74
 801a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1e0:	ab03      	add	r3, sp, #12
 801a1e2:	9300      	str	r3, [sp, #0]
 801a1e4:	462a      	mov	r2, r5
 801a1e6:	4b06      	ldr	r3, [pc, #24]	; (801a200 <_svfiprintf_r+0x1f8>)
 801a1e8:	a904      	add	r1, sp, #16
 801a1ea:	4638      	mov	r0, r7
 801a1ec:	f7fc fd86 	bl	8016cfc <_printf_i>
 801a1f0:	e7eb      	b.n	801a1ca <_svfiprintf_r+0x1c2>
 801a1f2:	bf00      	nop
 801a1f4:	0801ce64 	.word	0x0801ce64
 801a1f8:	0801ce6e 	.word	0x0801ce6e
 801a1fc:	080167b5 	.word	0x080167b5
 801a200:	08019f51 	.word	0x08019f51
 801a204:	0801ce6a 	.word	0x0801ce6a

0801a208 <nan>:
 801a208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a210 <nan+0x8>
 801a20c:	4770      	bx	lr
 801a20e:	bf00      	nop
 801a210:	00000000 	.word	0x00000000
 801a214:	7ff80000 	.word	0x7ff80000

0801a218 <strncmp>:
 801a218:	b510      	push	{r4, lr}
 801a21a:	b16a      	cbz	r2, 801a238 <strncmp+0x20>
 801a21c:	3901      	subs	r1, #1
 801a21e:	1884      	adds	r4, r0, r2
 801a220:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a224:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a228:	4293      	cmp	r3, r2
 801a22a:	d103      	bne.n	801a234 <strncmp+0x1c>
 801a22c:	42a0      	cmp	r0, r4
 801a22e:	d001      	beq.n	801a234 <strncmp+0x1c>
 801a230:	2b00      	cmp	r3, #0
 801a232:	d1f5      	bne.n	801a220 <strncmp+0x8>
 801a234:	1a98      	subs	r0, r3, r2
 801a236:	bd10      	pop	{r4, pc}
 801a238:	4610      	mov	r0, r2
 801a23a:	e7fc      	b.n	801a236 <strncmp+0x1e>

0801a23c <__ascii_wctomb>:
 801a23c:	b149      	cbz	r1, 801a252 <__ascii_wctomb+0x16>
 801a23e:	2aff      	cmp	r2, #255	; 0xff
 801a240:	bf85      	ittet	hi
 801a242:	238a      	movhi	r3, #138	; 0x8a
 801a244:	6003      	strhi	r3, [r0, #0]
 801a246:	700a      	strbls	r2, [r1, #0]
 801a248:	f04f 30ff 	movhi.w	r0, #4294967295
 801a24c:	bf98      	it	ls
 801a24e:	2001      	movls	r0, #1
 801a250:	4770      	bx	lr
 801a252:	4608      	mov	r0, r1
 801a254:	4770      	bx	lr
	...

0801a258 <__assert_func>:
 801a258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a25a:	4614      	mov	r4, r2
 801a25c:	461a      	mov	r2, r3
 801a25e:	4b09      	ldr	r3, [pc, #36]	; (801a284 <__assert_func+0x2c>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	4605      	mov	r5, r0
 801a264:	68d8      	ldr	r0, [r3, #12]
 801a266:	b14c      	cbz	r4, 801a27c <__assert_func+0x24>
 801a268:	4b07      	ldr	r3, [pc, #28]	; (801a288 <__assert_func+0x30>)
 801a26a:	9100      	str	r1, [sp, #0]
 801a26c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a270:	4906      	ldr	r1, [pc, #24]	; (801a28c <__assert_func+0x34>)
 801a272:	462b      	mov	r3, r5
 801a274:	f000 f80e 	bl	801a294 <fiprintf>
 801a278:	f000 fa60 	bl	801a73c <abort>
 801a27c:	4b04      	ldr	r3, [pc, #16]	; (801a290 <__assert_func+0x38>)
 801a27e:	461c      	mov	r4, r3
 801a280:	e7f3      	b.n	801a26a <__assert_func+0x12>
 801a282:	bf00      	nop
 801a284:	20004210 	.word	0x20004210
 801a288:	0801ce75 	.word	0x0801ce75
 801a28c:	0801ce82 	.word	0x0801ce82
 801a290:	0801ceb0 	.word	0x0801ceb0

0801a294 <fiprintf>:
 801a294:	b40e      	push	{r1, r2, r3}
 801a296:	b503      	push	{r0, r1, lr}
 801a298:	4601      	mov	r1, r0
 801a29a:	ab03      	add	r3, sp, #12
 801a29c:	4805      	ldr	r0, [pc, #20]	; (801a2b4 <fiprintf+0x20>)
 801a29e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2a2:	6800      	ldr	r0, [r0, #0]
 801a2a4:	9301      	str	r3, [sp, #4]
 801a2a6:	f000 f859 	bl	801a35c <_vfiprintf_r>
 801a2aa:	b002      	add	sp, #8
 801a2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2b0:	b003      	add	sp, #12
 801a2b2:	4770      	bx	lr
 801a2b4:	20004210 	.word	0x20004210

0801a2b8 <__retarget_lock_init_recursive>:
 801a2b8:	4770      	bx	lr

0801a2ba <__retarget_lock_acquire_recursive>:
 801a2ba:	4770      	bx	lr

0801a2bc <__retarget_lock_release_recursive>:
 801a2bc:	4770      	bx	lr

0801a2be <_realloc_r>:
 801a2be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2c0:	4607      	mov	r7, r0
 801a2c2:	4614      	mov	r4, r2
 801a2c4:	460e      	mov	r6, r1
 801a2c6:	b921      	cbnz	r1, 801a2d2 <_realloc_r+0x14>
 801a2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a2cc:	4611      	mov	r1, r2
 801a2ce:	f7fc b977 	b.w	80165c0 <_malloc_r>
 801a2d2:	b922      	cbnz	r2, 801a2de <_realloc_r+0x20>
 801a2d4:	f7fc f924 	bl	8016520 <_free_r>
 801a2d8:	4625      	mov	r5, r4
 801a2da:	4628      	mov	r0, r5
 801a2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2de:	f000 fc51 	bl	801ab84 <_malloc_usable_size_r>
 801a2e2:	42a0      	cmp	r0, r4
 801a2e4:	d20f      	bcs.n	801a306 <_realloc_r+0x48>
 801a2e6:	4621      	mov	r1, r4
 801a2e8:	4638      	mov	r0, r7
 801a2ea:	f7fc f969 	bl	80165c0 <_malloc_r>
 801a2ee:	4605      	mov	r5, r0
 801a2f0:	2800      	cmp	r0, #0
 801a2f2:	d0f2      	beq.n	801a2da <_realloc_r+0x1c>
 801a2f4:	4631      	mov	r1, r6
 801a2f6:	4622      	mov	r2, r4
 801a2f8:	f7fc f8e2 	bl	80164c0 <memcpy>
 801a2fc:	4631      	mov	r1, r6
 801a2fe:	4638      	mov	r0, r7
 801a300:	f7fc f90e 	bl	8016520 <_free_r>
 801a304:	e7e9      	b.n	801a2da <_realloc_r+0x1c>
 801a306:	4635      	mov	r5, r6
 801a308:	e7e7      	b.n	801a2da <_realloc_r+0x1c>

0801a30a <__sfputc_r>:
 801a30a:	6893      	ldr	r3, [r2, #8]
 801a30c:	3b01      	subs	r3, #1
 801a30e:	2b00      	cmp	r3, #0
 801a310:	b410      	push	{r4}
 801a312:	6093      	str	r3, [r2, #8]
 801a314:	da08      	bge.n	801a328 <__sfputc_r+0x1e>
 801a316:	6994      	ldr	r4, [r2, #24]
 801a318:	42a3      	cmp	r3, r4
 801a31a:	db01      	blt.n	801a320 <__sfputc_r+0x16>
 801a31c:	290a      	cmp	r1, #10
 801a31e:	d103      	bne.n	801a328 <__sfputc_r+0x1e>
 801a320:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a324:	f000 b94a 	b.w	801a5bc <__swbuf_r>
 801a328:	6813      	ldr	r3, [r2, #0]
 801a32a:	1c58      	adds	r0, r3, #1
 801a32c:	6010      	str	r0, [r2, #0]
 801a32e:	7019      	strb	r1, [r3, #0]
 801a330:	4608      	mov	r0, r1
 801a332:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a336:	4770      	bx	lr

0801a338 <__sfputs_r>:
 801a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a33a:	4606      	mov	r6, r0
 801a33c:	460f      	mov	r7, r1
 801a33e:	4614      	mov	r4, r2
 801a340:	18d5      	adds	r5, r2, r3
 801a342:	42ac      	cmp	r4, r5
 801a344:	d101      	bne.n	801a34a <__sfputs_r+0x12>
 801a346:	2000      	movs	r0, #0
 801a348:	e007      	b.n	801a35a <__sfputs_r+0x22>
 801a34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a34e:	463a      	mov	r2, r7
 801a350:	4630      	mov	r0, r6
 801a352:	f7ff ffda 	bl	801a30a <__sfputc_r>
 801a356:	1c43      	adds	r3, r0, #1
 801a358:	d1f3      	bne.n	801a342 <__sfputs_r+0xa>
 801a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a35c <_vfiprintf_r>:
 801a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a360:	460d      	mov	r5, r1
 801a362:	b09d      	sub	sp, #116	; 0x74
 801a364:	4614      	mov	r4, r2
 801a366:	4698      	mov	r8, r3
 801a368:	4606      	mov	r6, r0
 801a36a:	b118      	cbz	r0, 801a374 <_vfiprintf_r+0x18>
 801a36c:	6983      	ldr	r3, [r0, #24]
 801a36e:	b90b      	cbnz	r3, 801a374 <_vfiprintf_r+0x18>
 801a370:	f000 fb06 	bl	801a980 <__sinit>
 801a374:	4b89      	ldr	r3, [pc, #548]	; (801a59c <_vfiprintf_r+0x240>)
 801a376:	429d      	cmp	r5, r3
 801a378:	d11b      	bne.n	801a3b2 <_vfiprintf_r+0x56>
 801a37a:	6875      	ldr	r5, [r6, #4]
 801a37c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a37e:	07d9      	lsls	r1, r3, #31
 801a380:	d405      	bmi.n	801a38e <_vfiprintf_r+0x32>
 801a382:	89ab      	ldrh	r3, [r5, #12]
 801a384:	059a      	lsls	r2, r3, #22
 801a386:	d402      	bmi.n	801a38e <_vfiprintf_r+0x32>
 801a388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a38a:	f7ff ff96 	bl	801a2ba <__retarget_lock_acquire_recursive>
 801a38e:	89ab      	ldrh	r3, [r5, #12]
 801a390:	071b      	lsls	r3, r3, #28
 801a392:	d501      	bpl.n	801a398 <_vfiprintf_r+0x3c>
 801a394:	692b      	ldr	r3, [r5, #16]
 801a396:	b9eb      	cbnz	r3, 801a3d4 <_vfiprintf_r+0x78>
 801a398:	4629      	mov	r1, r5
 801a39a:	4630      	mov	r0, r6
 801a39c:	f000 f960 	bl	801a660 <__swsetup_r>
 801a3a0:	b1c0      	cbz	r0, 801a3d4 <_vfiprintf_r+0x78>
 801a3a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a3a4:	07dc      	lsls	r4, r3, #31
 801a3a6:	d50e      	bpl.n	801a3c6 <_vfiprintf_r+0x6a>
 801a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3ac:	b01d      	add	sp, #116	; 0x74
 801a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3b2:	4b7b      	ldr	r3, [pc, #492]	; (801a5a0 <_vfiprintf_r+0x244>)
 801a3b4:	429d      	cmp	r5, r3
 801a3b6:	d101      	bne.n	801a3bc <_vfiprintf_r+0x60>
 801a3b8:	68b5      	ldr	r5, [r6, #8]
 801a3ba:	e7df      	b.n	801a37c <_vfiprintf_r+0x20>
 801a3bc:	4b79      	ldr	r3, [pc, #484]	; (801a5a4 <_vfiprintf_r+0x248>)
 801a3be:	429d      	cmp	r5, r3
 801a3c0:	bf08      	it	eq
 801a3c2:	68f5      	ldreq	r5, [r6, #12]
 801a3c4:	e7da      	b.n	801a37c <_vfiprintf_r+0x20>
 801a3c6:	89ab      	ldrh	r3, [r5, #12]
 801a3c8:	0598      	lsls	r0, r3, #22
 801a3ca:	d4ed      	bmi.n	801a3a8 <_vfiprintf_r+0x4c>
 801a3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3ce:	f7ff ff75 	bl	801a2bc <__retarget_lock_release_recursive>
 801a3d2:	e7e9      	b.n	801a3a8 <_vfiprintf_r+0x4c>
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	9309      	str	r3, [sp, #36]	; 0x24
 801a3d8:	2320      	movs	r3, #32
 801a3da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a3de:	f8cd 800c 	str.w	r8, [sp, #12]
 801a3e2:	2330      	movs	r3, #48	; 0x30
 801a3e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a5a8 <_vfiprintf_r+0x24c>
 801a3e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a3ec:	f04f 0901 	mov.w	r9, #1
 801a3f0:	4623      	mov	r3, r4
 801a3f2:	469a      	mov	sl, r3
 801a3f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a3f8:	b10a      	cbz	r2, 801a3fe <_vfiprintf_r+0xa2>
 801a3fa:	2a25      	cmp	r2, #37	; 0x25
 801a3fc:	d1f9      	bne.n	801a3f2 <_vfiprintf_r+0x96>
 801a3fe:	ebba 0b04 	subs.w	fp, sl, r4
 801a402:	d00b      	beq.n	801a41c <_vfiprintf_r+0xc0>
 801a404:	465b      	mov	r3, fp
 801a406:	4622      	mov	r2, r4
 801a408:	4629      	mov	r1, r5
 801a40a:	4630      	mov	r0, r6
 801a40c:	f7ff ff94 	bl	801a338 <__sfputs_r>
 801a410:	3001      	adds	r0, #1
 801a412:	f000 80aa 	beq.w	801a56a <_vfiprintf_r+0x20e>
 801a416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a418:	445a      	add	r2, fp
 801a41a:	9209      	str	r2, [sp, #36]	; 0x24
 801a41c:	f89a 3000 	ldrb.w	r3, [sl]
 801a420:	2b00      	cmp	r3, #0
 801a422:	f000 80a2 	beq.w	801a56a <_vfiprintf_r+0x20e>
 801a426:	2300      	movs	r3, #0
 801a428:	f04f 32ff 	mov.w	r2, #4294967295
 801a42c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a430:	f10a 0a01 	add.w	sl, sl, #1
 801a434:	9304      	str	r3, [sp, #16]
 801a436:	9307      	str	r3, [sp, #28]
 801a438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a43c:	931a      	str	r3, [sp, #104]	; 0x68
 801a43e:	4654      	mov	r4, sl
 801a440:	2205      	movs	r2, #5
 801a442:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a446:	4858      	ldr	r0, [pc, #352]	; (801a5a8 <_vfiprintf_r+0x24c>)
 801a448:	f7e5 feca 	bl	80001e0 <memchr>
 801a44c:	9a04      	ldr	r2, [sp, #16]
 801a44e:	b9d8      	cbnz	r0, 801a488 <_vfiprintf_r+0x12c>
 801a450:	06d1      	lsls	r1, r2, #27
 801a452:	bf44      	itt	mi
 801a454:	2320      	movmi	r3, #32
 801a456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a45a:	0713      	lsls	r3, r2, #28
 801a45c:	bf44      	itt	mi
 801a45e:	232b      	movmi	r3, #43	; 0x2b
 801a460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a464:	f89a 3000 	ldrb.w	r3, [sl]
 801a468:	2b2a      	cmp	r3, #42	; 0x2a
 801a46a:	d015      	beq.n	801a498 <_vfiprintf_r+0x13c>
 801a46c:	9a07      	ldr	r2, [sp, #28]
 801a46e:	4654      	mov	r4, sl
 801a470:	2000      	movs	r0, #0
 801a472:	f04f 0c0a 	mov.w	ip, #10
 801a476:	4621      	mov	r1, r4
 801a478:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a47c:	3b30      	subs	r3, #48	; 0x30
 801a47e:	2b09      	cmp	r3, #9
 801a480:	d94e      	bls.n	801a520 <_vfiprintf_r+0x1c4>
 801a482:	b1b0      	cbz	r0, 801a4b2 <_vfiprintf_r+0x156>
 801a484:	9207      	str	r2, [sp, #28]
 801a486:	e014      	b.n	801a4b2 <_vfiprintf_r+0x156>
 801a488:	eba0 0308 	sub.w	r3, r0, r8
 801a48c:	fa09 f303 	lsl.w	r3, r9, r3
 801a490:	4313      	orrs	r3, r2
 801a492:	9304      	str	r3, [sp, #16]
 801a494:	46a2      	mov	sl, r4
 801a496:	e7d2      	b.n	801a43e <_vfiprintf_r+0xe2>
 801a498:	9b03      	ldr	r3, [sp, #12]
 801a49a:	1d19      	adds	r1, r3, #4
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	9103      	str	r1, [sp, #12]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	bfbb      	ittet	lt
 801a4a4:	425b      	neglt	r3, r3
 801a4a6:	f042 0202 	orrlt.w	r2, r2, #2
 801a4aa:	9307      	strge	r3, [sp, #28]
 801a4ac:	9307      	strlt	r3, [sp, #28]
 801a4ae:	bfb8      	it	lt
 801a4b0:	9204      	strlt	r2, [sp, #16]
 801a4b2:	7823      	ldrb	r3, [r4, #0]
 801a4b4:	2b2e      	cmp	r3, #46	; 0x2e
 801a4b6:	d10c      	bne.n	801a4d2 <_vfiprintf_r+0x176>
 801a4b8:	7863      	ldrb	r3, [r4, #1]
 801a4ba:	2b2a      	cmp	r3, #42	; 0x2a
 801a4bc:	d135      	bne.n	801a52a <_vfiprintf_r+0x1ce>
 801a4be:	9b03      	ldr	r3, [sp, #12]
 801a4c0:	1d1a      	adds	r2, r3, #4
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	9203      	str	r2, [sp, #12]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	bfb8      	it	lt
 801a4ca:	f04f 33ff 	movlt.w	r3, #4294967295
 801a4ce:	3402      	adds	r4, #2
 801a4d0:	9305      	str	r3, [sp, #20]
 801a4d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a5b8 <_vfiprintf_r+0x25c>
 801a4d6:	7821      	ldrb	r1, [r4, #0]
 801a4d8:	2203      	movs	r2, #3
 801a4da:	4650      	mov	r0, sl
 801a4dc:	f7e5 fe80 	bl	80001e0 <memchr>
 801a4e0:	b140      	cbz	r0, 801a4f4 <_vfiprintf_r+0x198>
 801a4e2:	2340      	movs	r3, #64	; 0x40
 801a4e4:	eba0 000a 	sub.w	r0, r0, sl
 801a4e8:	fa03 f000 	lsl.w	r0, r3, r0
 801a4ec:	9b04      	ldr	r3, [sp, #16]
 801a4ee:	4303      	orrs	r3, r0
 801a4f0:	3401      	adds	r4, #1
 801a4f2:	9304      	str	r3, [sp, #16]
 801a4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4f8:	482c      	ldr	r0, [pc, #176]	; (801a5ac <_vfiprintf_r+0x250>)
 801a4fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a4fe:	2206      	movs	r2, #6
 801a500:	f7e5 fe6e 	bl	80001e0 <memchr>
 801a504:	2800      	cmp	r0, #0
 801a506:	d03f      	beq.n	801a588 <_vfiprintf_r+0x22c>
 801a508:	4b29      	ldr	r3, [pc, #164]	; (801a5b0 <_vfiprintf_r+0x254>)
 801a50a:	bb1b      	cbnz	r3, 801a554 <_vfiprintf_r+0x1f8>
 801a50c:	9b03      	ldr	r3, [sp, #12]
 801a50e:	3307      	adds	r3, #7
 801a510:	f023 0307 	bic.w	r3, r3, #7
 801a514:	3308      	adds	r3, #8
 801a516:	9303      	str	r3, [sp, #12]
 801a518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a51a:	443b      	add	r3, r7
 801a51c:	9309      	str	r3, [sp, #36]	; 0x24
 801a51e:	e767      	b.n	801a3f0 <_vfiprintf_r+0x94>
 801a520:	fb0c 3202 	mla	r2, ip, r2, r3
 801a524:	460c      	mov	r4, r1
 801a526:	2001      	movs	r0, #1
 801a528:	e7a5      	b.n	801a476 <_vfiprintf_r+0x11a>
 801a52a:	2300      	movs	r3, #0
 801a52c:	3401      	adds	r4, #1
 801a52e:	9305      	str	r3, [sp, #20]
 801a530:	4619      	mov	r1, r3
 801a532:	f04f 0c0a 	mov.w	ip, #10
 801a536:	4620      	mov	r0, r4
 801a538:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a53c:	3a30      	subs	r2, #48	; 0x30
 801a53e:	2a09      	cmp	r2, #9
 801a540:	d903      	bls.n	801a54a <_vfiprintf_r+0x1ee>
 801a542:	2b00      	cmp	r3, #0
 801a544:	d0c5      	beq.n	801a4d2 <_vfiprintf_r+0x176>
 801a546:	9105      	str	r1, [sp, #20]
 801a548:	e7c3      	b.n	801a4d2 <_vfiprintf_r+0x176>
 801a54a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a54e:	4604      	mov	r4, r0
 801a550:	2301      	movs	r3, #1
 801a552:	e7f0      	b.n	801a536 <_vfiprintf_r+0x1da>
 801a554:	ab03      	add	r3, sp, #12
 801a556:	9300      	str	r3, [sp, #0]
 801a558:	462a      	mov	r2, r5
 801a55a:	4b16      	ldr	r3, [pc, #88]	; (801a5b4 <_vfiprintf_r+0x258>)
 801a55c:	a904      	add	r1, sp, #16
 801a55e:	4630      	mov	r0, r6
 801a560:	f7fc f928 	bl	80167b4 <_printf_float>
 801a564:	4607      	mov	r7, r0
 801a566:	1c78      	adds	r0, r7, #1
 801a568:	d1d6      	bne.n	801a518 <_vfiprintf_r+0x1bc>
 801a56a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a56c:	07d9      	lsls	r1, r3, #31
 801a56e:	d405      	bmi.n	801a57c <_vfiprintf_r+0x220>
 801a570:	89ab      	ldrh	r3, [r5, #12]
 801a572:	059a      	lsls	r2, r3, #22
 801a574:	d402      	bmi.n	801a57c <_vfiprintf_r+0x220>
 801a576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a578:	f7ff fea0 	bl	801a2bc <__retarget_lock_release_recursive>
 801a57c:	89ab      	ldrh	r3, [r5, #12]
 801a57e:	065b      	lsls	r3, r3, #25
 801a580:	f53f af12 	bmi.w	801a3a8 <_vfiprintf_r+0x4c>
 801a584:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a586:	e711      	b.n	801a3ac <_vfiprintf_r+0x50>
 801a588:	ab03      	add	r3, sp, #12
 801a58a:	9300      	str	r3, [sp, #0]
 801a58c:	462a      	mov	r2, r5
 801a58e:	4b09      	ldr	r3, [pc, #36]	; (801a5b4 <_vfiprintf_r+0x258>)
 801a590:	a904      	add	r1, sp, #16
 801a592:	4630      	mov	r0, r6
 801a594:	f7fc fbb2 	bl	8016cfc <_printf_i>
 801a598:	e7e4      	b.n	801a564 <_vfiprintf_r+0x208>
 801a59a:	bf00      	nop
 801a59c:	0801ced4 	.word	0x0801ced4
 801a5a0:	0801cef4 	.word	0x0801cef4
 801a5a4:	0801ceb4 	.word	0x0801ceb4
 801a5a8:	0801ce64 	.word	0x0801ce64
 801a5ac:	0801ce6e 	.word	0x0801ce6e
 801a5b0:	080167b5 	.word	0x080167b5
 801a5b4:	0801a339 	.word	0x0801a339
 801a5b8:	0801ce6a 	.word	0x0801ce6a

0801a5bc <__swbuf_r>:
 801a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5be:	460e      	mov	r6, r1
 801a5c0:	4614      	mov	r4, r2
 801a5c2:	4605      	mov	r5, r0
 801a5c4:	b118      	cbz	r0, 801a5ce <__swbuf_r+0x12>
 801a5c6:	6983      	ldr	r3, [r0, #24]
 801a5c8:	b90b      	cbnz	r3, 801a5ce <__swbuf_r+0x12>
 801a5ca:	f000 f9d9 	bl	801a980 <__sinit>
 801a5ce:	4b21      	ldr	r3, [pc, #132]	; (801a654 <__swbuf_r+0x98>)
 801a5d0:	429c      	cmp	r4, r3
 801a5d2:	d12b      	bne.n	801a62c <__swbuf_r+0x70>
 801a5d4:	686c      	ldr	r4, [r5, #4]
 801a5d6:	69a3      	ldr	r3, [r4, #24]
 801a5d8:	60a3      	str	r3, [r4, #8]
 801a5da:	89a3      	ldrh	r3, [r4, #12]
 801a5dc:	071a      	lsls	r2, r3, #28
 801a5de:	d52f      	bpl.n	801a640 <__swbuf_r+0x84>
 801a5e0:	6923      	ldr	r3, [r4, #16]
 801a5e2:	b36b      	cbz	r3, 801a640 <__swbuf_r+0x84>
 801a5e4:	6923      	ldr	r3, [r4, #16]
 801a5e6:	6820      	ldr	r0, [r4, #0]
 801a5e8:	1ac0      	subs	r0, r0, r3
 801a5ea:	6963      	ldr	r3, [r4, #20]
 801a5ec:	b2f6      	uxtb	r6, r6
 801a5ee:	4283      	cmp	r3, r0
 801a5f0:	4637      	mov	r7, r6
 801a5f2:	dc04      	bgt.n	801a5fe <__swbuf_r+0x42>
 801a5f4:	4621      	mov	r1, r4
 801a5f6:	4628      	mov	r0, r5
 801a5f8:	f000 f92e 	bl	801a858 <_fflush_r>
 801a5fc:	bb30      	cbnz	r0, 801a64c <__swbuf_r+0x90>
 801a5fe:	68a3      	ldr	r3, [r4, #8]
 801a600:	3b01      	subs	r3, #1
 801a602:	60a3      	str	r3, [r4, #8]
 801a604:	6823      	ldr	r3, [r4, #0]
 801a606:	1c5a      	adds	r2, r3, #1
 801a608:	6022      	str	r2, [r4, #0]
 801a60a:	701e      	strb	r6, [r3, #0]
 801a60c:	6963      	ldr	r3, [r4, #20]
 801a60e:	3001      	adds	r0, #1
 801a610:	4283      	cmp	r3, r0
 801a612:	d004      	beq.n	801a61e <__swbuf_r+0x62>
 801a614:	89a3      	ldrh	r3, [r4, #12]
 801a616:	07db      	lsls	r3, r3, #31
 801a618:	d506      	bpl.n	801a628 <__swbuf_r+0x6c>
 801a61a:	2e0a      	cmp	r6, #10
 801a61c:	d104      	bne.n	801a628 <__swbuf_r+0x6c>
 801a61e:	4621      	mov	r1, r4
 801a620:	4628      	mov	r0, r5
 801a622:	f000 f919 	bl	801a858 <_fflush_r>
 801a626:	b988      	cbnz	r0, 801a64c <__swbuf_r+0x90>
 801a628:	4638      	mov	r0, r7
 801a62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a62c:	4b0a      	ldr	r3, [pc, #40]	; (801a658 <__swbuf_r+0x9c>)
 801a62e:	429c      	cmp	r4, r3
 801a630:	d101      	bne.n	801a636 <__swbuf_r+0x7a>
 801a632:	68ac      	ldr	r4, [r5, #8]
 801a634:	e7cf      	b.n	801a5d6 <__swbuf_r+0x1a>
 801a636:	4b09      	ldr	r3, [pc, #36]	; (801a65c <__swbuf_r+0xa0>)
 801a638:	429c      	cmp	r4, r3
 801a63a:	bf08      	it	eq
 801a63c:	68ec      	ldreq	r4, [r5, #12]
 801a63e:	e7ca      	b.n	801a5d6 <__swbuf_r+0x1a>
 801a640:	4621      	mov	r1, r4
 801a642:	4628      	mov	r0, r5
 801a644:	f000 f80c 	bl	801a660 <__swsetup_r>
 801a648:	2800      	cmp	r0, #0
 801a64a:	d0cb      	beq.n	801a5e4 <__swbuf_r+0x28>
 801a64c:	f04f 37ff 	mov.w	r7, #4294967295
 801a650:	e7ea      	b.n	801a628 <__swbuf_r+0x6c>
 801a652:	bf00      	nop
 801a654:	0801ced4 	.word	0x0801ced4
 801a658:	0801cef4 	.word	0x0801cef4
 801a65c:	0801ceb4 	.word	0x0801ceb4

0801a660 <__swsetup_r>:
 801a660:	4b32      	ldr	r3, [pc, #200]	; (801a72c <__swsetup_r+0xcc>)
 801a662:	b570      	push	{r4, r5, r6, lr}
 801a664:	681d      	ldr	r5, [r3, #0]
 801a666:	4606      	mov	r6, r0
 801a668:	460c      	mov	r4, r1
 801a66a:	b125      	cbz	r5, 801a676 <__swsetup_r+0x16>
 801a66c:	69ab      	ldr	r3, [r5, #24]
 801a66e:	b913      	cbnz	r3, 801a676 <__swsetup_r+0x16>
 801a670:	4628      	mov	r0, r5
 801a672:	f000 f985 	bl	801a980 <__sinit>
 801a676:	4b2e      	ldr	r3, [pc, #184]	; (801a730 <__swsetup_r+0xd0>)
 801a678:	429c      	cmp	r4, r3
 801a67a:	d10f      	bne.n	801a69c <__swsetup_r+0x3c>
 801a67c:	686c      	ldr	r4, [r5, #4]
 801a67e:	89a3      	ldrh	r3, [r4, #12]
 801a680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a684:	0719      	lsls	r1, r3, #28
 801a686:	d42c      	bmi.n	801a6e2 <__swsetup_r+0x82>
 801a688:	06dd      	lsls	r5, r3, #27
 801a68a:	d411      	bmi.n	801a6b0 <__swsetup_r+0x50>
 801a68c:	2309      	movs	r3, #9
 801a68e:	6033      	str	r3, [r6, #0]
 801a690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a694:	81a3      	strh	r3, [r4, #12]
 801a696:	f04f 30ff 	mov.w	r0, #4294967295
 801a69a:	e03e      	b.n	801a71a <__swsetup_r+0xba>
 801a69c:	4b25      	ldr	r3, [pc, #148]	; (801a734 <__swsetup_r+0xd4>)
 801a69e:	429c      	cmp	r4, r3
 801a6a0:	d101      	bne.n	801a6a6 <__swsetup_r+0x46>
 801a6a2:	68ac      	ldr	r4, [r5, #8]
 801a6a4:	e7eb      	b.n	801a67e <__swsetup_r+0x1e>
 801a6a6:	4b24      	ldr	r3, [pc, #144]	; (801a738 <__swsetup_r+0xd8>)
 801a6a8:	429c      	cmp	r4, r3
 801a6aa:	bf08      	it	eq
 801a6ac:	68ec      	ldreq	r4, [r5, #12]
 801a6ae:	e7e6      	b.n	801a67e <__swsetup_r+0x1e>
 801a6b0:	0758      	lsls	r0, r3, #29
 801a6b2:	d512      	bpl.n	801a6da <__swsetup_r+0x7a>
 801a6b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a6b6:	b141      	cbz	r1, 801a6ca <__swsetup_r+0x6a>
 801a6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a6bc:	4299      	cmp	r1, r3
 801a6be:	d002      	beq.n	801a6c6 <__swsetup_r+0x66>
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	f7fb ff2d 	bl	8016520 <_free_r>
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	6363      	str	r3, [r4, #52]	; 0x34
 801a6ca:	89a3      	ldrh	r3, [r4, #12]
 801a6cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a6d0:	81a3      	strh	r3, [r4, #12]
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	6063      	str	r3, [r4, #4]
 801a6d6:	6923      	ldr	r3, [r4, #16]
 801a6d8:	6023      	str	r3, [r4, #0]
 801a6da:	89a3      	ldrh	r3, [r4, #12]
 801a6dc:	f043 0308 	orr.w	r3, r3, #8
 801a6e0:	81a3      	strh	r3, [r4, #12]
 801a6e2:	6923      	ldr	r3, [r4, #16]
 801a6e4:	b94b      	cbnz	r3, 801a6fa <__swsetup_r+0x9a>
 801a6e6:	89a3      	ldrh	r3, [r4, #12]
 801a6e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a6f0:	d003      	beq.n	801a6fa <__swsetup_r+0x9a>
 801a6f2:	4621      	mov	r1, r4
 801a6f4:	4630      	mov	r0, r6
 801a6f6:	f000 fa05 	bl	801ab04 <__smakebuf_r>
 801a6fa:	89a0      	ldrh	r0, [r4, #12]
 801a6fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a700:	f010 0301 	ands.w	r3, r0, #1
 801a704:	d00a      	beq.n	801a71c <__swsetup_r+0xbc>
 801a706:	2300      	movs	r3, #0
 801a708:	60a3      	str	r3, [r4, #8]
 801a70a:	6963      	ldr	r3, [r4, #20]
 801a70c:	425b      	negs	r3, r3
 801a70e:	61a3      	str	r3, [r4, #24]
 801a710:	6923      	ldr	r3, [r4, #16]
 801a712:	b943      	cbnz	r3, 801a726 <__swsetup_r+0xc6>
 801a714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a718:	d1ba      	bne.n	801a690 <__swsetup_r+0x30>
 801a71a:	bd70      	pop	{r4, r5, r6, pc}
 801a71c:	0781      	lsls	r1, r0, #30
 801a71e:	bf58      	it	pl
 801a720:	6963      	ldrpl	r3, [r4, #20]
 801a722:	60a3      	str	r3, [r4, #8]
 801a724:	e7f4      	b.n	801a710 <__swsetup_r+0xb0>
 801a726:	2000      	movs	r0, #0
 801a728:	e7f7      	b.n	801a71a <__swsetup_r+0xba>
 801a72a:	bf00      	nop
 801a72c:	20004210 	.word	0x20004210
 801a730:	0801ced4 	.word	0x0801ced4
 801a734:	0801cef4 	.word	0x0801cef4
 801a738:	0801ceb4 	.word	0x0801ceb4

0801a73c <abort>:
 801a73c:	b508      	push	{r3, lr}
 801a73e:	2006      	movs	r0, #6
 801a740:	f000 fa50 	bl	801abe4 <raise>
 801a744:	2001      	movs	r0, #1
 801a746:	f7f0 ff9f 	bl	800b688 <_exit>
	...

0801a74c <__sflush_r>:
 801a74c:	898a      	ldrh	r2, [r1, #12]
 801a74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a752:	4605      	mov	r5, r0
 801a754:	0710      	lsls	r0, r2, #28
 801a756:	460c      	mov	r4, r1
 801a758:	d458      	bmi.n	801a80c <__sflush_r+0xc0>
 801a75a:	684b      	ldr	r3, [r1, #4]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	dc05      	bgt.n	801a76c <__sflush_r+0x20>
 801a760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a762:	2b00      	cmp	r3, #0
 801a764:	dc02      	bgt.n	801a76c <__sflush_r+0x20>
 801a766:	2000      	movs	r0, #0
 801a768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a76e:	2e00      	cmp	r6, #0
 801a770:	d0f9      	beq.n	801a766 <__sflush_r+0x1a>
 801a772:	2300      	movs	r3, #0
 801a774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a778:	682f      	ldr	r7, [r5, #0]
 801a77a:	602b      	str	r3, [r5, #0]
 801a77c:	d032      	beq.n	801a7e4 <__sflush_r+0x98>
 801a77e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a780:	89a3      	ldrh	r3, [r4, #12]
 801a782:	075a      	lsls	r2, r3, #29
 801a784:	d505      	bpl.n	801a792 <__sflush_r+0x46>
 801a786:	6863      	ldr	r3, [r4, #4]
 801a788:	1ac0      	subs	r0, r0, r3
 801a78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a78c:	b10b      	cbz	r3, 801a792 <__sflush_r+0x46>
 801a78e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a790:	1ac0      	subs	r0, r0, r3
 801a792:	2300      	movs	r3, #0
 801a794:	4602      	mov	r2, r0
 801a796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a798:	6a21      	ldr	r1, [r4, #32]
 801a79a:	4628      	mov	r0, r5
 801a79c:	47b0      	blx	r6
 801a79e:	1c43      	adds	r3, r0, #1
 801a7a0:	89a3      	ldrh	r3, [r4, #12]
 801a7a2:	d106      	bne.n	801a7b2 <__sflush_r+0x66>
 801a7a4:	6829      	ldr	r1, [r5, #0]
 801a7a6:	291d      	cmp	r1, #29
 801a7a8:	d82c      	bhi.n	801a804 <__sflush_r+0xb8>
 801a7aa:	4a2a      	ldr	r2, [pc, #168]	; (801a854 <__sflush_r+0x108>)
 801a7ac:	40ca      	lsrs	r2, r1
 801a7ae:	07d6      	lsls	r6, r2, #31
 801a7b0:	d528      	bpl.n	801a804 <__sflush_r+0xb8>
 801a7b2:	2200      	movs	r2, #0
 801a7b4:	6062      	str	r2, [r4, #4]
 801a7b6:	04d9      	lsls	r1, r3, #19
 801a7b8:	6922      	ldr	r2, [r4, #16]
 801a7ba:	6022      	str	r2, [r4, #0]
 801a7bc:	d504      	bpl.n	801a7c8 <__sflush_r+0x7c>
 801a7be:	1c42      	adds	r2, r0, #1
 801a7c0:	d101      	bne.n	801a7c6 <__sflush_r+0x7a>
 801a7c2:	682b      	ldr	r3, [r5, #0]
 801a7c4:	b903      	cbnz	r3, 801a7c8 <__sflush_r+0x7c>
 801a7c6:	6560      	str	r0, [r4, #84]	; 0x54
 801a7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a7ca:	602f      	str	r7, [r5, #0]
 801a7cc:	2900      	cmp	r1, #0
 801a7ce:	d0ca      	beq.n	801a766 <__sflush_r+0x1a>
 801a7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a7d4:	4299      	cmp	r1, r3
 801a7d6:	d002      	beq.n	801a7de <__sflush_r+0x92>
 801a7d8:	4628      	mov	r0, r5
 801a7da:	f7fb fea1 	bl	8016520 <_free_r>
 801a7de:	2000      	movs	r0, #0
 801a7e0:	6360      	str	r0, [r4, #52]	; 0x34
 801a7e2:	e7c1      	b.n	801a768 <__sflush_r+0x1c>
 801a7e4:	6a21      	ldr	r1, [r4, #32]
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	4628      	mov	r0, r5
 801a7ea:	47b0      	blx	r6
 801a7ec:	1c41      	adds	r1, r0, #1
 801a7ee:	d1c7      	bne.n	801a780 <__sflush_r+0x34>
 801a7f0:	682b      	ldr	r3, [r5, #0]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d0c4      	beq.n	801a780 <__sflush_r+0x34>
 801a7f6:	2b1d      	cmp	r3, #29
 801a7f8:	d001      	beq.n	801a7fe <__sflush_r+0xb2>
 801a7fa:	2b16      	cmp	r3, #22
 801a7fc:	d101      	bne.n	801a802 <__sflush_r+0xb6>
 801a7fe:	602f      	str	r7, [r5, #0]
 801a800:	e7b1      	b.n	801a766 <__sflush_r+0x1a>
 801a802:	89a3      	ldrh	r3, [r4, #12]
 801a804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a808:	81a3      	strh	r3, [r4, #12]
 801a80a:	e7ad      	b.n	801a768 <__sflush_r+0x1c>
 801a80c:	690f      	ldr	r7, [r1, #16]
 801a80e:	2f00      	cmp	r7, #0
 801a810:	d0a9      	beq.n	801a766 <__sflush_r+0x1a>
 801a812:	0793      	lsls	r3, r2, #30
 801a814:	680e      	ldr	r6, [r1, #0]
 801a816:	bf08      	it	eq
 801a818:	694b      	ldreq	r3, [r1, #20]
 801a81a:	600f      	str	r7, [r1, #0]
 801a81c:	bf18      	it	ne
 801a81e:	2300      	movne	r3, #0
 801a820:	eba6 0807 	sub.w	r8, r6, r7
 801a824:	608b      	str	r3, [r1, #8]
 801a826:	f1b8 0f00 	cmp.w	r8, #0
 801a82a:	dd9c      	ble.n	801a766 <__sflush_r+0x1a>
 801a82c:	6a21      	ldr	r1, [r4, #32]
 801a82e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a830:	4643      	mov	r3, r8
 801a832:	463a      	mov	r2, r7
 801a834:	4628      	mov	r0, r5
 801a836:	47b0      	blx	r6
 801a838:	2800      	cmp	r0, #0
 801a83a:	dc06      	bgt.n	801a84a <__sflush_r+0xfe>
 801a83c:	89a3      	ldrh	r3, [r4, #12]
 801a83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a842:	81a3      	strh	r3, [r4, #12]
 801a844:	f04f 30ff 	mov.w	r0, #4294967295
 801a848:	e78e      	b.n	801a768 <__sflush_r+0x1c>
 801a84a:	4407      	add	r7, r0
 801a84c:	eba8 0800 	sub.w	r8, r8, r0
 801a850:	e7e9      	b.n	801a826 <__sflush_r+0xda>
 801a852:	bf00      	nop
 801a854:	20400001 	.word	0x20400001

0801a858 <_fflush_r>:
 801a858:	b538      	push	{r3, r4, r5, lr}
 801a85a:	690b      	ldr	r3, [r1, #16]
 801a85c:	4605      	mov	r5, r0
 801a85e:	460c      	mov	r4, r1
 801a860:	b913      	cbnz	r3, 801a868 <_fflush_r+0x10>
 801a862:	2500      	movs	r5, #0
 801a864:	4628      	mov	r0, r5
 801a866:	bd38      	pop	{r3, r4, r5, pc}
 801a868:	b118      	cbz	r0, 801a872 <_fflush_r+0x1a>
 801a86a:	6983      	ldr	r3, [r0, #24]
 801a86c:	b90b      	cbnz	r3, 801a872 <_fflush_r+0x1a>
 801a86e:	f000 f887 	bl	801a980 <__sinit>
 801a872:	4b14      	ldr	r3, [pc, #80]	; (801a8c4 <_fflush_r+0x6c>)
 801a874:	429c      	cmp	r4, r3
 801a876:	d11b      	bne.n	801a8b0 <_fflush_r+0x58>
 801a878:	686c      	ldr	r4, [r5, #4]
 801a87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d0ef      	beq.n	801a862 <_fflush_r+0xa>
 801a882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a884:	07d0      	lsls	r0, r2, #31
 801a886:	d404      	bmi.n	801a892 <_fflush_r+0x3a>
 801a888:	0599      	lsls	r1, r3, #22
 801a88a:	d402      	bmi.n	801a892 <_fflush_r+0x3a>
 801a88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a88e:	f7ff fd14 	bl	801a2ba <__retarget_lock_acquire_recursive>
 801a892:	4628      	mov	r0, r5
 801a894:	4621      	mov	r1, r4
 801a896:	f7ff ff59 	bl	801a74c <__sflush_r>
 801a89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a89c:	07da      	lsls	r2, r3, #31
 801a89e:	4605      	mov	r5, r0
 801a8a0:	d4e0      	bmi.n	801a864 <_fflush_r+0xc>
 801a8a2:	89a3      	ldrh	r3, [r4, #12]
 801a8a4:	059b      	lsls	r3, r3, #22
 801a8a6:	d4dd      	bmi.n	801a864 <_fflush_r+0xc>
 801a8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a8aa:	f7ff fd07 	bl	801a2bc <__retarget_lock_release_recursive>
 801a8ae:	e7d9      	b.n	801a864 <_fflush_r+0xc>
 801a8b0:	4b05      	ldr	r3, [pc, #20]	; (801a8c8 <_fflush_r+0x70>)
 801a8b2:	429c      	cmp	r4, r3
 801a8b4:	d101      	bne.n	801a8ba <_fflush_r+0x62>
 801a8b6:	68ac      	ldr	r4, [r5, #8]
 801a8b8:	e7df      	b.n	801a87a <_fflush_r+0x22>
 801a8ba:	4b04      	ldr	r3, [pc, #16]	; (801a8cc <_fflush_r+0x74>)
 801a8bc:	429c      	cmp	r4, r3
 801a8be:	bf08      	it	eq
 801a8c0:	68ec      	ldreq	r4, [r5, #12]
 801a8c2:	e7da      	b.n	801a87a <_fflush_r+0x22>
 801a8c4:	0801ced4 	.word	0x0801ced4
 801a8c8:	0801cef4 	.word	0x0801cef4
 801a8cc:	0801ceb4 	.word	0x0801ceb4

0801a8d0 <std>:
 801a8d0:	2300      	movs	r3, #0
 801a8d2:	b510      	push	{r4, lr}
 801a8d4:	4604      	mov	r4, r0
 801a8d6:	e9c0 3300 	strd	r3, r3, [r0]
 801a8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a8de:	6083      	str	r3, [r0, #8]
 801a8e0:	8181      	strh	r1, [r0, #12]
 801a8e2:	6643      	str	r3, [r0, #100]	; 0x64
 801a8e4:	81c2      	strh	r2, [r0, #14]
 801a8e6:	6183      	str	r3, [r0, #24]
 801a8e8:	4619      	mov	r1, r3
 801a8ea:	2208      	movs	r2, #8
 801a8ec:	305c      	adds	r0, #92	; 0x5c
 801a8ee:	f7fb fe0f 	bl	8016510 <memset>
 801a8f2:	4b05      	ldr	r3, [pc, #20]	; (801a908 <std+0x38>)
 801a8f4:	6263      	str	r3, [r4, #36]	; 0x24
 801a8f6:	4b05      	ldr	r3, [pc, #20]	; (801a90c <std+0x3c>)
 801a8f8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a8fa:	4b05      	ldr	r3, [pc, #20]	; (801a910 <std+0x40>)
 801a8fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a8fe:	4b05      	ldr	r3, [pc, #20]	; (801a914 <std+0x44>)
 801a900:	6224      	str	r4, [r4, #32]
 801a902:	6323      	str	r3, [r4, #48]	; 0x30
 801a904:	bd10      	pop	{r4, pc}
 801a906:	bf00      	nop
 801a908:	0801ac1d 	.word	0x0801ac1d
 801a90c:	0801ac3f 	.word	0x0801ac3f
 801a910:	0801ac77 	.word	0x0801ac77
 801a914:	0801ac9b 	.word	0x0801ac9b

0801a918 <_cleanup_r>:
 801a918:	4901      	ldr	r1, [pc, #4]	; (801a920 <_cleanup_r+0x8>)
 801a91a:	f000 b8af 	b.w	801aa7c <_fwalk_reent>
 801a91e:	bf00      	nop
 801a920:	0801a859 	.word	0x0801a859

0801a924 <__sfmoreglue>:
 801a924:	b570      	push	{r4, r5, r6, lr}
 801a926:	1e4a      	subs	r2, r1, #1
 801a928:	2568      	movs	r5, #104	; 0x68
 801a92a:	4355      	muls	r5, r2
 801a92c:	460e      	mov	r6, r1
 801a92e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a932:	f7fb fe45 	bl	80165c0 <_malloc_r>
 801a936:	4604      	mov	r4, r0
 801a938:	b140      	cbz	r0, 801a94c <__sfmoreglue+0x28>
 801a93a:	2100      	movs	r1, #0
 801a93c:	e9c0 1600 	strd	r1, r6, [r0]
 801a940:	300c      	adds	r0, #12
 801a942:	60a0      	str	r0, [r4, #8]
 801a944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a948:	f7fb fde2 	bl	8016510 <memset>
 801a94c:	4620      	mov	r0, r4
 801a94e:	bd70      	pop	{r4, r5, r6, pc}

0801a950 <__sfp_lock_acquire>:
 801a950:	4801      	ldr	r0, [pc, #4]	; (801a958 <__sfp_lock_acquire+0x8>)
 801a952:	f7ff bcb2 	b.w	801a2ba <__retarget_lock_acquire_recursive>
 801a956:	bf00      	nop
 801a958:	20011b80 	.word	0x20011b80

0801a95c <__sfp_lock_release>:
 801a95c:	4801      	ldr	r0, [pc, #4]	; (801a964 <__sfp_lock_release+0x8>)
 801a95e:	f7ff bcad 	b.w	801a2bc <__retarget_lock_release_recursive>
 801a962:	bf00      	nop
 801a964:	20011b80 	.word	0x20011b80

0801a968 <__sinit_lock_acquire>:
 801a968:	4801      	ldr	r0, [pc, #4]	; (801a970 <__sinit_lock_acquire+0x8>)
 801a96a:	f7ff bca6 	b.w	801a2ba <__retarget_lock_acquire_recursive>
 801a96e:	bf00      	nop
 801a970:	20011b7b 	.word	0x20011b7b

0801a974 <__sinit_lock_release>:
 801a974:	4801      	ldr	r0, [pc, #4]	; (801a97c <__sinit_lock_release+0x8>)
 801a976:	f7ff bca1 	b.w	801a2bc <__retarget_lock_release_recursive>
 801a97a:	bf00      	nop
 801a97c:	20011b7b 	.word	0x20011b7b

0801a980 <__sinit>:
 801a980:	b510      	push	{r4, lr}
 801a982:	4604      	mov	r4, r0
 801a984:	f7ff fff0 	bl	801a968 <__sinit_lock_acquire>
 801a988:	69a3      	ldr	r3, [r4, #24]
 801a98a:	b11b      	cbz	r3, 801a994 <__sinit+0x14>
 801a98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a990:	f7ff bff0 	b.w	801a974 <__sinit_lock_release>
 801a994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a998:	6523      	str	r3, [r4, #80]	; 0x50
 801a99a:	4b13      	ldr	r3, [pc, #76]	; (801a9e8 <__sinit+0x68>)
 801a99c:	4a13      	ldr	r2, [pc, #76]	; (801a9ec <__sinit+0x6c>)
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a9a2:	42a3      	cmp	r3, r4
 801a9a4:	bf04      	itt	eq
 801a9a6:	2301      	moveq	r3, #1
 801a9a8:	61a3      	streq	r3, [r4, #24]
 801a9aa:	4620      	mov	r0, r4
 801a9ac:	f000 f820 	bl	801a9f0 <__sfp>
 801a9b0:	6060      	str	r0, [r4, #4]
 801a9b2:	4620      	mov	r0, r4
 801a9b4:	f000 f81c 	bl	801a9f0 <__sfp>
 801a9b8:	60a0      	str	r0, [r4, #8]
 801a9ba:	4620      	mov	r0, r4
 801a9bc:	f000 f818 	bl	801a9f0 <__sfp>
 801a9c0:	2200      	movs	r2, #0
 801a9c2:	60e0      	str	r0, [r4, #12]
 801a9c4:	2104      	movs	r1, #4
 801a9c6:	6860      	ldr	r0, [r4, #4]
 801a9c8:	f7ff ff82 	bl	801a8d0 <std>
 801a9cc:	68a0      	ldr	r0, [r4, #8]
 801a9ce:	2201      	movs	r2, #1
 801a9d0:	2109      	movs	r1, #9
 801a9d2:	f7ff ff7d 	bl	801a8d0 <std>
 801a9d6:	68e0      	ldr	r0, [r4, #12]
 801a9d8:	2202      	movs	r2, #2
 801a9da:	2112      	movs	r1, #18
 801a9dc:	f7ff ff78 	bl	801a8d0 <std>
 801a9e0:	2301      	movs	r3, #1
 801a9e2:	61a3      	str	r3, [r4, #24]
 801a9e4:	e7d2      	b.n	801a98c <__sinit+0xc>
 801a9e6:	bf00      	nop
 801a9e8:	0801ca60 	.word	0x0801ca60
 801a9ec:	0801a919 	.word	0x0801a919

0801a9f0 <__sfp>:
 801a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9f2:	4607      	mov	r7, r0
 801a9f4:	f7ff ffac 	bl	801a950 <__sfp_lock_acquire>
 801a9f8:	4b1e      	ldr	r3, [pc, #120]	; (801aa74 <__sfp+0x84>)
 801a9fa:	681e      	ldr	r6, [r3, #0]
 801a9fc:	69b3      	ldr	r3, [r6, #24]
 801a9fe:	b913      	cbnz	r3, 801aa06 <__sfp+0x16>
 801aa00:	4630      	mov	r0, r6
 801aa02:	f7ff ffbd 	bl	801a980 <__sinit>
 801aa06:	3648      	adds	r6, #72	; 0x48
 801aa08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aa0c:	3b01      	subs	r3, #1
 801aa0e:	d503      	bpl.n	801aa18 <__sfp+0x28>
 801aa10:	6833      	ldr	r3, [r6, #0]
 801aa12:	b30b      	cbz	r3, 801aa58 <__sfp+0x68>
 801aa14:	6836      	ldr	r6, [r6, #0]
 801aa16:	e7f7      	b.n	801aa08 <__sfp+0x18>
 801aa18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aa1c:	b9d5      	cbnz	r5, 801aa54 <__sfp+0x64>
 801aa1e:	4b16      	ldr	r3, [pc, #88]	; (801aa78 <__sfp+0x88>)
 801aa20:	60e3      	str	r3, [r4, #12]
 801aa22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aa26:	6665      	str	r5, [r4, #100]	; 0x64
 801aa28:	f7ff fc46 	bl	801a2b8 <__retarget_lock_init_recursive>
 801aa2c:	f7ff ff96 	bl	801a95c <__sfp_lock_release>
 801aa30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aa34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aa38:	6025      	str	r5, [r4, #0]
 801aa3a:	61a5      	str	r5, [r4, #24]
 801aa3c:	2208      	movs	r2, #8
 801aa3e:	4629      	mov	r1, r5
 801aa40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aa44:	f7fb fd64 	bl	8016510 <memset>
 801aa48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aa4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aa50:	4620      	mov	r0, r4
 801aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa54:	3468      	adds	r4, #104	; 0x68
 801aa56:	e7d9      	b.n	801aa0c <__sfp+0x1c>
 801aa58:	2104      	movs	r1, #4
 801aa5a:	4638      	mov	r0, r7
 801aa5c:	f7ff ff62 	bl	801a924 <__sfmoreglue>
 801aa60:	4604      	mov	r4, r0
 801aa62:	6030      	str	r0, [r6, #0]
 801aa64:	2800      	cmp	r0, #0
 801aa66:	d1d5      	bne.n	801aa14 <__sfp+0x24>
 801aa68:	f7ff ff78 	bl	801a95c <__sfp_lock_release>
 801aa6c:	230c      	movs	r3, #12
 801aa6e:	603b      	str	r3, [r7, #0]
 801aa70:	e7ee      	b.n	801aa50 <__sfp+0x60>
 801aa72:	bf00      	nop
 801aa74:	0801ca60 	.word	0x0801ca60
 801aa78:	ffff0001 	.word	0xffff0001

0801aa7c <_fwalk_reent>:
 801aa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa80:	4606      	mov	r6, r0
 801aa82:	4688      	mov	r8, r1
 801aa84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aa88:	2700      	movs	r7, #0
 801aa8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aa8e:	f1b9 0901 	subs.w	r9, r9, #1
 801aa92:	d505      	bpl.n	801aaa0 <_fwalk_reent+0x24>
 801aa94:	6824      	ldr	r4, [r4, #0]
 801aa96:	2c00      	cmp	r4, #0
 801aa98:	d1f7      	bne.n	801aa8a <_fwalk_reent+0xe>
 801aa9a:	4638      	mov	r0, r7
 801aa9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aaa0:	89ab      	ldrh	r3, [r5, #12]
 801aaa2:	2b01      	cmp	r3, #1
 801aaa4:	d907      	bls.n	801aab6 <_fwalk_reent+0x3a>
 801aaa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aaaa:	3301      	adds	r3, #1
 801aaac:	d003      	beq.n	801aab6 <_fwalk_reent+0x3a>
 801aaae:	4629      	mov	r1, r5
 801aab0:	4630      	mov	r0, r6
 801aab2:	47c0      	blx	r8
 801aab4:	4307      	orrs	r7, r0
 801aab6:	3568      	adds	r5, #104	; 0x68
 801aab8:	e7e9      	b.n	801aa8e <_fwalk_reent+0x12>

0801aaba <__swhatbuf_r>:
 801aaba:	b570      	push	{r4, r5, r6, lr}
 801aabc:	460e      	mov	r6, r1
 801aabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aac2:	2900      	cmp	r1, #0
 801aac4:	b096      	sub	sp, #88	; 0x58
 801aac6:	4614      	mov	r4, r2
 801aac8:	461d      	mov	r5, r3
 801aaca:	da07      	bge.n	801aadc <__swhatbuf_r+0x22>
 801aacc:	2300      	movs	r3, #0
 801aace:	602b      	str	r3, [r5, #0]
 801aad0:	89b3      	ldrh	r3, [r6, #12]
 801aad2:	061a      	lsls	r2, r3, #24
 801aad4:	d410      	bmi.n	801aaf8 <__swhatbuf_r+0x3e>
 801aad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aada:	e00e      	b.n	801aafa <__swhatbuf_r+0x40>
 801aadc:	466a      	mov	r2, sp
 801aade:	f000 f903 	bl	801ace8 <_fstat_r>
 801aae2:	2800      	cmp	r0, #0
 801aae4:	dbf2      	blt.n	801aacc <__swhatbuf_r+0x12>
 801aae6:	9a01      	ldr	r2, [sp, #4]
 801aae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aaec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aaf0:	425a      	negs	r2, r3
 801aaf2:	415a      	adcs	r2, r3
 801aaf4:	602a      	str	r2, [r5, #0]
 801aaf6:	e7ee      	b.n	801aad6 <__swhatbuf_r+0x1c>
 801aaf8:	2340      	movs	r3, #64	; 0x40
 801aafa:	2000      	movs	r0, #0
 801aafc:	6023      	str	r3, [r4, #0]
 801aafe:	b016      	add	sp, #88	; 0x58
 801ab00:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ab04 <__smakebuf_r>:
 801ab04:	898b      	ldrh	r3, [r1, #12]
 801ab06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab08:	079d      	lsls	r5, r3, #30
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	460c      	mov	r4, r1
 801ab0e:	d507      	bpl.n	801ab20 <__smakebuf_r+0x1c>
 801ab10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ab14:	6023      	str	r3, [r4, #0]
 801ab16:	6123      	str	r3, [r4, #16]
 801ab18:	2301      	movs	r3, #1
 801ab1a:	6163      	str	r3, [r4, #20]
 801ab1c:	b002      	add	sp, #8
 801ab1e:	bd70      	pop	{r4, r5, r6, pc}
 801ab20:	ab01      	add	r3, sp, #4
 801ab22:	466a      	mov	r2, sp
 801ab24:	f7ff ffc9 	bl	801aaba <__swhatbuf_r>
 801ab28:	9900      	ldr	r1, [sp, #0]
 801ab2a:	4605      	mov	r5, r0
 801ab2c:	4630      	mov	r0, r6
 801ab2e:	f7fb fd47 	bl	80165c0 <_malloc_r>
 801ab32:	b948      	cbnz	r0, 801ab48 <__smakebuf_r+0x44>
 801ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab38:	059a      	lsls	r2, r3, #22
 801ab3a:	d4ef      	bmi.n	801ab1c <__smakebuf_r+0x18>
 801ab3c:	f023 0303 	bic.w	r3, r3, #3
 801ab40:	f043 0302 	orr.w	r3, r3, #2
 801ab44:	81a3      	strh	r3, [r4, #12]
 801ab46:	e7e3      	b.n	801ab10 <__smakebuf_r+0xc>
 801ab48:	4b0d      	ldr	r3, [pc, #52]	; (801ab80 <__smakebuf_r+0x7c>)
 801ab4a:	62b3      	str	r3, [r6, #40]	; 0x28
 801ab4c:	89a3      	ldrh	r3, [r4, #12]
 801ab4e:	6020      	str	r0, [r4, #0]
 801ab50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab54:	81a3      	strh	r3, [r4, #12]
 801ab56:	9b00      	ldr	r3, [sp, #0]
 801ab58:	6163      	str	r3, [r4, #20]
 801ab5a:	9b01      	ldr	r3, [sp, #4]
 801ab5c:	6120      	str	r0, [r4, #16]
 801ab5e:	b15b      	cbz	r3, 801ab78 <__smakebuf_r+0x74>
 801ab60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab64:	4630      	mov	r0, r6
 801ab66:	f000 f8d1 	bl	801ad0c <_isatty_r>
 801ab6a:	b128      	cbz	r0, 801ab78 <__smakebuf_r+0x74>
 801ab6c:	89a3      	ldrh	r3, [r4, #12]
 801ab6e:	f023 0303 	bic.w	r3, r3, #3
 801ab72:	f043 0301 	orr.w	r3, r3, #1
 801ab76:	81a3      	strh	r3, [r4, #12]
 801ab78:	89a0      	ldrh	r0, [r4, #12]
 801ab7a:	4305      	orrs	r5, r0
 801ab7c:	81a5      	strh	r5, [r4, #12]
 801ab7e:	e7cd      	b.n	801ab1c <__smakebuf_r+0x18>
 801ab80:	0801a919 	.word	0x0801a919

0801ab84 <_malloc_usable_size_r>:
 801ab84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab88:	1f18      	subs	r0, r3, #4
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	bfbc      	itt	lt
 801ab8e:	580b      	ldrlt	r3, [r1, r0]
 801ab90:	18c0      	addlt	r0, r0, r3
 801ab92:	4770      	bx	lr

0801ab94 <_raise_r>:
 801ab94:	291f      	cmp	r1, #31
 801ab96:	b538      	push	{r3, r4, r5, lr}
 801ab98:	4604      	mov	r4, r0
 801ab9a:	460d      	mov	r5, r1
 801ab9c:	d904      	bls.n	801aba8 <_raise_r+0x14>
 801ab9e:	2316      	movs	r3, #22
 801aba0:	6003      	str	r3, [r0, #0]
 801aba2:	f04f 30ff 	mov.w	r0, #4294967295
 801aba6:	bd38      	pop	{r3, r4, r5, pc}
 801aba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801abaa:	b112      	cbz	r2, 801abb2 <_raise_r+0x1e>
 801abac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801abb0:	b94b      	cbnz	r3, 801abc6 <_raise_r+0x32>
 801abb2:	4620      	mov	r0, r4
 801abb4:	f000 f830 	bl	801ac18 <_getpid_r>
 801abb8:	462a      	mov	r2, r5
 801abba:	4601      	mov	r1, r0
 801abbc:	4620      	mov	r0, r4
 801abbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abc2:	f000 b817 	b.w	801abf4 <_kill_r>
 801abc6:	2b01      	cmp	r3, #1
 801abc8:	d00a      	beq.n	801abe0 <_raise_r+0x4c>
 801abca:	1c59      	adds	r1, r3, #1
 801abcc:	d103      	bne.n	801abd6 <_raise_r+0x42>
 801abce:	2316      	movs	r3, #22
 801abd0:	6003      	str	r3, [r0, #0]
 801abd2:	2001      	movs	r0, #1
 801abd4:	e7e7      	b.n	801aba6 <_raise_r+0x12>
 801abd6:	2400      	movs	r4, #0
 801abd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801abdc:	4628      	mov	r0, r5
 801abde:	4798      	blx	r3
 801abe0:	2000      	movs	r0, #0
 801abe2:	e7e0      	b.n	801aba6 <_raise_r+0x12>

0801abe4 <raise>:
 801abe4:	4b02      	ldr	r3, [pc, #8]	; (801abf0 <raise+0xc>)
 801abe6:	4601      	mov	r1, r0
 801abe8:	6818      	ldr	r0, [r3, #0]
 801abea:	f7ff bfd3 	b.w	801ab94 <_raise_r>
 801abee:	bf00      	nop
 801abf0:	20004210 	.word	0x20004210

0801abf4 <_kill_r>:
 801abf4:	b538      	push	{r3, r4, r5, lr}
 801abf6:	4d07      	ldr	r5, [pc, #28]	; (801ac14 <_kill_r+0x20>)
 801abf8:	2300      	movs	r3, #0
 801abfa:	4604      	mov	r4, r0
 801abfc:	4608      	mov	r0, r1
 801abfe:	4611      	mov	r1, r2
 801ac00:	602b      	str	r3, [r5, #0]
 801ac02:	f7f0 fd31 	bl	800b668 <_kill>
 801ac06:	1c43      	adds	r3, r0, #1
 801ac08:	d102      	bne.n	801ac10 <_kill_r+0x1c>
 801ac0a:	682b      	ldr	r3, [r5, #0]
 801ac0c:	b103      	cbz	r3, 801ac10 <_kill_r+0x1c>
 801ac0e:	6023      	str	r3, [r4, #0]
 801ac10:	bd38      	pop	{r3, r4, r5, pc}
 801ac12:	bf00      	nop
 801ac14:	20011b74 	.word	0x20011b74

0801ac18 <_getpid_r>:
 801ac18:	f7f0 bd1e 	b.w	800b658 <_getpid>

0801ac1c <__sread>:
 801ac1c:	b510      	push	{r4, lr}
 801ac1e:	460c      	mov	r4, r1
 801ac20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac24:	f000 f894 	bl	801ad50 <_read_r>
 801ac28:	2800      	cmp	r0, #0
 801ac2a:	bfab      	itete	ge
 801ac2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ac2e:	89a3      	ldrhlt	r3, [r4, #12]
 801ac30:	181b      	addge	r3, r3, r0
 801ac32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac36:	bfac      	ite	ge
 801ac38:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac3a:	81a3      	strhlt	r3, [r4, #12]
 801ac3c:	bd10      	pop	{r4, pc}

0801ac3e <__swrite>:
 801ac3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac42:	461f      	mov	r7, r3
 801ac44:	898b      	ldrh	r3, [r1, #12]
 801ac46:	05db      	lsls	r3, r3, #23
 801ac48:	4605      	mov	r5, r0
 801ac4a:	460c      	mov	r4, r1
 801ac4c:	4616      	mov	r6, r2
 801ac4e:	d505      	bpl.n	801ac5c <__swrite+0x1e>
 801ac50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac54:	2302      	movs	r3, #2
 801ac56:	2200      	movs	r2, #0
 801ac58:	f000 f868 	bl	801ad2c <_lseek_r>
 801ac5c:	89a3      	ldrh	r3, [r4, #12]
 801ac5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac66:	81a3      	strh	r3, [r4, #12]
 801ac68:	4632      	mov	r2, r6
 801ac6a:	463b      	mov	r3, r7
 801ac6c:	4628      	mov	r0, r5
 801ac6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac72:	f000 b817 	b.w	801aca4 <_write_r>

0801ac76 <__sseek>:
 801ac76:	b510      	push	{r4, lr}
 801ac78:	460c      	mov	r4, r1
 801ac7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac7e:	f000 f855 	bl	801ad2c <_lseek_r>
 801ac82:	1c43      	adds	r3, r0, #1
 801ac84:	89a3      	ldrh	r3, [r4, #12]
 801ac86:	bf15      	itete	ne
 801ac88:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac92:	81a3      	strheq	r3, [r4, #12]
 801ac94:	bf18      	it	ne
 801ac96:	81a3      	strhne	r3, [r4, #12]
 801ac98:	bd10      	pop	{r4, pc}

0801ac9a <__sclose>:
 801ac9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac9e:	f000 b813 	b.w	801acc8 <_close_r>
	...

0801aca4 <_write_r>:
 801aca4:	b538      	push	{r3, r4, r5, lr}
 801aca6:	4d07      	ldr	r5, [pc, #28]	; (801acc4 <_write_r+0x20>)
 801aca8:	4604      	mov	r4, r0
 801acaa:	4608      	mov	r0, r1
 801acac:	4611      	mov	r1, r2
 801acae:	2200      	movs	r2, #0
 801acb0:	602a      	str	r2, [r5, #0]
 801acb2:	461a      	mov	r2, r3
 801acb4:	f7f0 fd0f 	bl	800b6d6 <_write>
 801acb8:	1c43      	adds	r3, r0, #1
 801acba:	d102      	bne.n	801acc2 <_write_r+0x1e>
 801acbc:	682b      	ldr	r3, [r5, #0]
 801acbe:	b103      	cbz	r3, 801acc2 <_write_r+0x1e>
 801acc0:	6023      	str	r3, [r4, #0]
 801acc2:	bd38      	pop	{r3, r4, r5, pc}
 801acc4:	20011b74 	.word	0x20011b74

0801acc8 <_close_r>:
 801acc8:	b538      	push	{r3, r4, r5, lr}
 801acca:	4d06      	ldr	r5, [pc, #24]	; (801ace4 <_close_r+0x1c>)
 801accc:	2300      	movs	r3, #0
 801acce:	4604      	mov	r4, r0
 801acd0:	4608      	mov	r0, r1
 801acd2:	602b      	str	r3, [r5, #0]
 801acd4:	f7f0 fd1b 	bl	800b70e <_close>
 801acd8:	1c43      	adds	r3, r0, #1
 801acda:	d102      	bne.n	801ace2 <_close_r+0x1a>
 801acdc:	682b      	ldr	r3, [r5, #0]
 801acde:	b103      	cbz	r3, 801ace2 <_close_r+0x1a>
 801ace0:	6023      	str	r3, [r4, #0]
 801ace2:	bd38      	pop	{r3, r4, r5, pc}
 801ace4:	20011b74 	.word	0x20011b74

0801ace8 <_fstat_r>:
 801ace8:	b538      	push	{r3, r4, r5, lr}
 801acea:	4d07      	ldr	r5, [pc, #28]	; (801ad08 <_fstat_r+0x20>)
 801acec:	2300      	movs	r3, #0
 801acee:	4604      	mov	r4, r0
 801acf0:	4608      	mov	r0, r1
 801acf2:	4611      	mov	r1, r2
 801acf4:	602b      	str	r3, [r5, #0]
 801acf6:	f7f0 fd16 	bl	800b726 <_fstat>
 801acfa:	1c43      	adds	r3, r0, #1
 801acfc:	d102      	bne.n	801ad04 <_fstat_r+0x1c>
 801acfe:	682b      	ldr	r3, [r5, #0]
 801ad00:	b103      	cbz	r3, 801ad04 <_fstat_r+0x1c>
 801ad02:	6023      	str	r3, [r4, #0]
 801ad04:	bd38      	pop	{r3, r4, r5, pc}
 801ad06:	bf00      	nop
 801ad08:	20011b74 	.word	0x20011b74

0801ad0c <_isatty_r>:
 801ad0c:	b538      	push	{r3, r4, r5, lr}
 801ad0e:	4d06      	ldr	r5, [pc, #24]	; (801ad28 <_isatty_r+0x1c>)
 801ad10:	2300      	movs	r3, #0
 801ad12:	4604      	mov	r4, r0
 801ad14:	4608      	mov	r0, r1
 801ad16:	602b      	str	r3, [r5, #0]
 801ad18:	f7f0 fd15 	bl	800b746 <_isatty>
 801ad1c:	1c43      	adds	r3, r0, #1
 801ad1e:	d102      	bne.n	801ad26 <_isatty_r+0x1a>
 801ad20:	682b      	ldr	r3, [r5, #0]
 801ad22:	b103      	cbz	r3, 801ad26 <_isatty_r+0x1a>
 801ad24:	6023      	str	r3, [r4, #0]
 801ad26:	bd38      	pop	{r3, r4, r5, pc}
 801ad28:	20011b74 	.word	0x20011b74

0801ad2c <_lseek_r>:
 801ad2c:	b538      	push	{r3, r4, r5, lr}
 801ad2e:	4d07      	ldr	r5, [pc, #28]	; (801ad4c <_lseek_r+0x20>)
 801ad30:	4604      	mov	r4, r0
 801ad32:	4608      	mov	r0, r1
 801ad34:	4611      	mov	r1, r2
 801ad36:	2200      	movs	r2, #0
 801ad38:	602a      	str	r2, [r5, #0]
 801ad3a:	461a      	mov	r2, r3
 801ad3c:	f7f0 fd0e 	bl	800b75c <_lseek>
 801ad40:	1c43      	adds	r3, r0, #1
 801ad42:	d102      	bne.n	801ad4a <_lseek_r+0x1e>
 801ad44:	682b      	ldr	r3, [r5, #0]
 801ad46:	b103      	cbz	r3, 801ad4a <_lseek_r+0x1e>
 801ad48:	6023      	str	r3, [r4, #0]
 801ad4a:	bd38      	pop	{r3, r4, r5, pc}
 801ad4c:	20011b74 	.word	0x20011b74

0801ad50 <_read_r>:
 801ad50:	b538      	push	{r3, r4, r5, lr}
 801ad52:	4d07      	ldr	r5, [pc, #28]	; (801ad70 <_read_r+0x20>)
 801ad54:	4604      	mov	r4, r0
 801ad56:	4608      	mov	r0, r1
 801ad58:	4611      	mov	r1, r2
 801ad5a:	2200      	movs	r2, #0
 801ad5c:	602a      	str	r2, [r5, #0]
 801ad5e:	461a      	mov	r2, r3
 801ad60:	f7f0 fc9c 	bl	800b69c <_read>
 801ad64:	1c43      	adds	r3, r0, #1
 801ad66:	d102      	bne.n	801ad6e <_read_r+0x1e>
 801ad68:	682b      	ldr	r3, [r5, #0]
 801ad6a:	b103      	cbz	r3, 801ad6e <_read_r+0x1e>
 801ad6c:	6023      	str	r3, [r4, #0]
 801ad6e:	bd38      	pop	{r3, r4, r5, pc}
 801ad70:	20011b74 	.word	0x20011b74
 801ad74:	00000000 	.word	0x00000000

0801ad78 <ceil>:
 801ad78:	ec51 0b10 	vmov	r0, r1, d0
 801ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ad84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ad88:	2e13      	cmp	r6, #19
 801ad8a:	ee10 5a10 	vmov	r5, s0
 801ad8e:	ee10 8a10 	vmov	r8, s0
 801ad92:	460c      	mov	r4, r1
 801ad94:	dc30      	bgt.n	801adf8 <ceil+0x80>
 801ad96:	2e00      	cmp	r6, #0
 801ad98:	da12      	bge.n	801adc0 <ceil+0x48>
 801ad9a:	a335      	add	r3, pc, #212	; (adr r3, 801ae70 <ceil+0xf8>)
 801ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada0:	f7e5 fa74 	bl	800028c <__adddf3>
 801ada4:	2200      	movs	r2, #0
 801ada6:	2300      	movs	r3, #0
 801ada8:	f7e5 feb6 	bl	8000b18 <__aeabi_dcmpgt>
 801adac:	b128      	cbz	r0, 801adba <ceil+0x42>
 801adae:	2c00      	cmp	r4, #0
 801adb0:	db55      	blt.n	801ae5e <ceil+0xe6>
 801adb2:	432c      	orrs	r4, r5
 801adb4:	d057      	beq.n	801ae66 <ceil+0xee>
 801adb6:	4c30      	ldr	r4, [pc, #192]	; (801ae78 <ceil+0x100>)
 801adb8:	2500      	movs	r5, #0
 801adba:	4621      	mov	r1, r4
 801adbc:	4628      	mov	r0, r5
 801adbe:	e025      	b.n	801ae0c <ceil+0x94>
 801adc0:	4f2e      	ldr	r7, [pc, #184]	; (801ae7c <ceil+0x104>)
 801adc2:	4137      	asrs	r7, r6
 801adc4:	ea01 0307 	and.w	r3, r1, r7
 801adc8:	4303      	orrs	r3, r0
 801adca:	d01f      	beq.n	801ae0c <ceil+0x94>
 801adcc:	a328      	add	r3, pc, #160	; (adr r3, 801ae70 <ceil+0xf8>)
 801adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add2:	f7e5 fa5b 	bl	800028c <__adddf3>
 801add6:	2200      	movs	r2, #0
 801add8:	2300      	movs	r3, #0
 801adda:	f7e5 fe9d 	bl	8000b18 <__aeabi_dcmpgt>
 801adde:	2800      	cmp	r0, #0
 801ade0:	d0eb      	beq.n	801adba <ceil+0x42>
 801ade2:	2c00      	cmp	r4, #0
 801ade4:	bfc2      	ittt	gt
 801ade6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801adea:	fa43 f606 	asrgt.w	r6, r3, r6
 801adee:	19a4      	addgt	r4, r4, r6
 801adf0:	ea24 0407 	bic.w	r4, r4, r7
 801adf4:	2500      	movs	r5, #0
 801adf6:	e7e0      	b.n	801adba <ceil+0x42>
 801adf8:	2e33      	cmp	r6, #51	; 0x33
 801adfa:	dd0b      	ble.n	801ae14 <ceil+0x9c>
 801adfc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ae00:	d104      	bne.n	801ae0c <ceil+0x94>
 801ae02:	ee10 2a10 	vmov	r2, s0
 801ae06:	460b      	mov	r3, r1
 801ae08:	f7e5 fa40 	bl	800028c <__adddf3>
 801ae0c:	ec41 0b10 	vmov	d0, r0, r1
 801ae10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae14:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ae18:	f04f 33ff 	mov.w	r3, #4294967295
 801ae1c:	fa23 f707 	lsr.w	r7, r3, r7
 801ae20:	4207      	tst	r7, r0
 801ae22:	d0f3      	beq.n	801ae0c <ceil+0x94>
 801ae24:	a312      	add	r3, pc, #72	; (adr r3, 801ae70 <ceil+0xf8>)
 801ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae2a:	f7e5 fa2f 	bl	800028c <__adddf3>
 801ae2e:	2200      	movs	r2, #0
 801ae30:	2300      	movs	r3, #0
 801ae32:	f7e5 fe71 	bl	8000b18 <__aeabi_dcmpgt>
 801ae36:	2800      	cmp	r0, #0
 801ae38:	d0bf      	beq.n	801adba <ceil+0x42>
 801ae3a:	2c00      	cmp	r4, #0
 801ae3c:	dd02      	ble.n	801ae44 <ceil+0xcc>
 801ae3e:	2e14      	cmp	r6, #20
 801ae40:	d103      	bne.n	801ae4a <ceil+0xd2>
 801ae42:	3401      	adds	r4, #1
 801ae44:	ea25 0507 	bic.w	r5, r5, r7
 801ae48:	e7b7      	b.n	801adba <ceil+0x42>
 801ae4a:	2301      	movs	r3, #1
 801ae4c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ae50:	fa03 f606 	lsl.w	r6, r3, r6
 801ae54:	4435      	add	r5, r6
 801ae56:	4545      	cmp	r5, r8
 801ae58:	bf38      	it	cc
 801ae5a:	18e4      	addcc	r4, r4, r3
 801ae5c:	e7f2      	b.n	801ae44 <ceil+0xcc>
 801ae5e:	2500      	movs	r5, #0
 801ae60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ae64:	e7a9      	b.n	801adba <ceil+0x42>
 801ae66:	4625      	mov	r5, r4
 801ae68:	e7a7      	b.n	801adba <ceil+0x42>
 801ae6a:	bf00      	nop
 801ae6c:	f3af 8000 	nop.w
 801ae70:	8800759c 	.word	0x8800759c
 801ae74:	7e37e43c 	.word	0x7e37e43c
 801ae78:	3ff00000 	.word	0x3ff00000
 801ae7c:	000fffff 	.word	0x000fffff

0801ae80 <cos>:
 801ae80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae82:	ec53 2b10 	vmov	r2, r3, d0
 801ae86:	4824      	ldr	r0, [pc, #144]	; (801af18 <cos+0x98>)
 801ae88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ae8c:	4281      	cmp	r1, r0
 801ae8e:	dc06      	bgt.n	801ae9e <cos+0x1e>
 801ae90:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801af10 <cos+0x90>
 801ae94:	f000 fce4 	bl	801b860 <__kernel_cos>
 801ae98:	ec51 0b10 	vmov	r0, r1, d0
 801ae9c:	e007      	b.n	801aeae <cos+0x2e>
 801ae9e:	481f      	ldr	r0, [pc, #124]	; (801af1c <cos+0x9c>)
 801aea0:	4281      	cmp	r1, r0
 801aea2:	dd09      	ble.n	801aeb8 <cos+0x38>
 801aea4:	ee10 0a10 	vmov	r0, s0
 801aea8:	4619      	mov	r1, r3
 801aeaa:	f7e5 f9ed 	bl	8000288 <__aeabi_dsub>
 801aeae:	ec41 0b10 	vmov	d0, r0, r1
 801aeb2:	b005      	add	sp, #20
 801aeb4:	f85d fb04 	ldr.w	pc, [sp], #4
 801aeb8:	4668      	mov	r0, sp
 801aeba:	f000 fa11 	bl	801b2e0 <__ieee754_rem_pio2>
 801aebe:	f000 0003 	and.w	r0, r0, #3
 801aec2:	2801      	cmp	r0, #1
 801aec4:	d007      	beq.n	801aed6 <cos+0x56>
 801aec6:	2802      	cmp	r0, #2
 801aec8:	d012      	beq.n	801aef0 <cos+0x70>
 801aeca:	b9c0      	cbnz	r0, 801aefe <cos+0x7e>
 801aecc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aed0:	ed9d 0b00 	vldr	d0, [sp]
 801aed4:	e7de      	b.n	801ae94 <cos+0x14>
 801aed6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aeda:	ed9d 0b00 	vldr	d0, [sp]
 801aede:	f001 f8c7 	bl	801c070 <__kernel_sin>
 801aee2:	ec53 2b10 	vmov	r2, r3, d0
 801aee6:	ee10 0a10 	vmov	r0, s0
 801aeea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801aeee:	e7de      	b.n	801aeae <cos+0x2e>
 801aef0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aef4:	ed9d 0b00 	vldr	d0, [sp]
 801aef8:	f000 fcb2 	bl	801b860 <__kernel_cos>
 801aefc:	e7f1      	b.n	801aee2 <cos+0x62>
 801aefe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af02:	ed9d 0b00 	vldr	d0, [sp]
 801af06:	2001      	movs	r0, #1
 801af08:	f001 f8b2 	bl	801c070 <__kernel_sin>
 801af0c:	e7c4      	b.n	801ae98 <cos+0x18>
 801af0e:	bf00      	nop
	...
 801af18:	3fe921fb 	.word	0x3fe921fb
 801af1c:	7fefffff 	.word	0x7fefffff

0801af20 <round>:
 801af20:	ec51 0b10 	vmov	r0, r1, d0
 801af24:	b570      	push	{r4, r5, r6, lr}
 801af26:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801af2a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801af2e:	2c13      	cmp	r4, #19
 801af30:	ee10 2a10 	vmov	r2, s0
 801af34:	460b      	mov	r3, r1
 801af36:	dc19      	bgt.n	801af6c <round+0x4c>
 801af38:	2c00      	cmp	r4, #0
 801af3a:	da09      	bge.n	801af50 <round+0x30>
 801af3c:	3401      	adds	r4, #1
 801af3e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801af42:	d103      	bne.n	801af4c <round+0x2c>
 801af44:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801af48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801af4c:	2100      	movs	r1, #0
 801af4e:	e028      	b.n	801afa2 <round+0x82>
 801af50:	4d15      	ldr	r5, [pc, #84]	; (801afa8 <round+0x88>)
 801af52:	4125      	asrs	r5, r4
 801af54:	ea01 0605 	and.w	r6, r1, r5
 801af58:	4332      	orrs	r2, r6
 801af5a:	d00e      	beq.n	801af7a <round+0x5a>
 801af5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801af60:	fa42 f404 	asr.w	r4, r2, r4
 801af64:	4423      	add	r3, r4
 801af66:	ea23 0305 	bic.w	r3, r3, r5
 801af6a:	e7ef      	b.n	801af4c <round+0x2c>
 801af6c:	2c33      	cmp	r4, #51	; 0x33
 801af6e:	dd07      	ble.n	801af80 <round+0x60>
 801af70:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801af74:	d101      	bne.n	801af7a <round+0x5a>
 801af76:	f7e5 f989 	bl	800028c <__adddf3>
 801af7a:	ec41 0b10 	vmov	d0, r0, r1
 801af7e:	bd70      	pop	{r4, r5, r6, pc}
 801af80:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801af84:	f04f 35ff 	mov.w	r5, #4294967295
 801af88:	40f5      	lsrs	r5, r6
 801af8a:	4228      	tst	r0, r5
 801af8c:	d0f5      	beq.n	801af7a <round+0x5a>
 801af8e:	2101      	movs	r1, #1
 801af90:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801af94:	fa01 f404 	lsl.w	r4, r1, r4
 801af98:	1912      	adds	r2, r2, r4
 801af9a:	bf28      	it	cs
 801af9c:	185b      	addcs	r3, r3, r1
 801af9e:	ea22 0105 	bic.w	r1, r2, r5
 801afa2:	4608      	mov	r0, r1
 801afa4:	4619      	mov	r1, r3
 801afa6:	e7e8      	b.n	801af7a <round+0x5a>
 801afa8:	000fffff 	.word	0x000fffff
 801afac:	00000000 	.word	0x00000000

0801afb0 <sin>:
 801afb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801afb2:	ec53 2b10 	vmov	r2, r3, d0
 801afb6:	4826      	ldr	r0, [pc, #152]	; (801b050 <sin+0xa0>)
 801afb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801afbc:	4281      	cmp	r1, r0
 801afbe:	dc07      	bgt.n	801afd0 <sin+0x20>
 801afc0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801b048 <sin+0x98>
 801afc4:	2000      	movs	r0, #0
 801afc6:	f001 f853 	bl	801c070 <__kernel_sin>
 801afca:	ec51 0b10 	vmov	r0, r1, d0
 801afce:	e007      	b.n	801afe0 <sin+0x30>
 801afd0:	4820      	ldr	r0, [pc, #128]	; (801b054 <sin+0xa4>)
 801afd2:	4281      	cmp	r1, r0
 801afd4:	dd09      	ble.n	801afea <sin+0x3a>
 801afd6:	ee10 0a10 	vmov	r0, s0
 801afda:	4619      	mov	r1, r3
 801afdc:	f7e5 f954 	bl	8000288 <__aeabi_dsub>
 801afe0:	ec41 0b10 	vmov	d0, r0, r1
 801afe4:	b005      	add	sp, #20
 801afe6:	f85d fb04 	ldr.w	pc, [sp], #4
 801afea:	4668      	mov	r0, sp
 801afec:	f000 f978 	bl	801b2e0 <__ieee754_rem_pio2>
 801aff0:	f000 0003 	and.w	r0, r0, #3
 801aff4:	2801      	cmp	r0, #1
 801aff6:	d008      	beq.n	801b00a <sin+0x5a>
 801aff8:	2802      	cmp	r0, #2
 801affa:	d00d      	beq.n	801b018 <sin+0x68>
 801affc:	b9d0      	cbnz	r0, 801b034 <sin+0x84>
 801affe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b002:	ed9d 0b00 	vldr	d0, [sp]
 801b006:	2001      	movs	r0, #1
 801b008:	e7dd      	b.n	801afc6 <sin+0x16>
 801b00a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b00e:	ed9d 0b00 	vldr	d0, [sp]
 801b012:	f000 fc25 	bl	801b860 <__kernel_cos>
 801b016:	e7d8      	b.n	801afca <sin+0x1a>
 801b018:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b01c:	ed9d 0b00 	vldr	d0, [sp]
 801b020:	2001      	movs	r0, #1
 801b022:	f001 f825 	bl	801c070 <__kernel_sin>
 801b026:	ec53 2b10 	vmov	r2, r3, d0
 801b02a:	ee10 0a10 	vmov	r0, s0
 801b02e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b032:	e7d5      	b.n	801afe0 <sin+0x30>
 801b034:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b038:	ed9d 0b00 	vldr	d0, [sp]
 801b03c:	f000 fc10 	bl	801b860 <__kernel_cos>
 801b040:	e7f1      	b.n	801b026 <sin+0x76>
 801b042:	bf00      	nop
 801b044:	f3af 8000 	nop.w
	...
 801b050:	3fe921fb 	.word	0x3fe921fb
 801b054:	7fefffff 	.word	0x7fefffff

0801b058 <ceilf>:
 801b058:	ee10 3a10 	vmov	r3, s0
 801b05c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b060:	3a7f      	subs	r2, #127	; 0x7f
 801b062:	2a16      	cmp	r2, #22
 801b064:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b068:	dc2a      	bgt.n	801b0c0 <ceilf+0x68>
 801b06a:	2a00      	cmp	r2, #0
 801b06c:	da11      	bge.n	801b092 <ceilf+0x3a>
 801b06e:	eddf 7a19 	vldr	s15, [pc, #100]	; 801b0d4 <ceilf+0x7c>
 801b072:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b076:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b07e:	dd05      	ble.n	801b08c <ceilf+0x34>
 801b080:	2b00      	cmp	r3, #0
 801b082:	db23      	blt.n	801b0cc <ceilf+0x74>
 801b084:	2900      	cmp	r1, #0
 801b086:	bf18      	it	ne
 801b088:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801b08c:	ee00 3a10 	vmov	s0, r3
 801b090:	4770      	bx	lr
 801b092:	4911      	ldr	r1, [pc, #68]	; (801b0d8 <ceilf+0x80>)
 801b094:	4111      	asrs	r1, r2
 801b096:	420b      	tst	r3, r1
 801b098:	d0fa      	beq.n	801b090 <ceilf+0x38>
 801b09a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b0d4 <ceilf+0x7c>
 801b09e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b0a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0aa:	ddef      	ble.n	801b08c <ceilf+0x34>
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	bfc2      	ittt	gt
 801b0b0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801b0b4:	fa40 f202 	asrgt.w	r2, r0, r2
 801b0b8:	189b      	addgt	r3, r3, r2
 801b0ba:	ea23 0301 	bic.w	r3, r3, r1
 801b0be:	e7e5      	b.n	801b08c <ceilf+0x34>
 801b0c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b0c4:	d3e4      	bcc.n	801b090 <ceilf+0x38>
 801b0c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b0ca:	4770      	bx	lr
 801b0cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801b0d0:	e7dc      	b.n	801b08c <ceilf+0x34>
 801b0d2:	bf00      	nop
 801b0d4:	7149f2ca 	.word	0x7149f2ca
 801b0d8:	007fffff 	.word	0x007fffff

0801b0dc <atan2>:
 801b0dc:	f000 b834 	b.w	801b148 <__ieee754_atan2>

0801b0e0 <sqrt>:
 801b0e0:	b538      	push	{r3, r4, r5, lr}
 801b0e2:	ed2d 8b02 	vpush	{d8}
 801b0e6:	ec55 4b10 	vmov	r4, r5, d0
 801b0ea:	f000 fb03 	bl	801b6f4 <__ieee754_sqrt>
 801b0ee:	4b15      	ldr	r3, [pc, #84]	; (801b144 <sqrt+0x64>)
 801b0f0:	eeb0 8a40 	vmov.f32	s16, s0
 801b0f4:	eef0 8a60 	vmov.f32	s17, s1
 801b0f8:	f993 3000 	ldrsb.w	r3, [r3]
 801b0fc:	3301      	adds	r3, #1
 801b0fe:	d019      	beq.n	801b134 <sqrt+0x54>
 801b100:	4622      	mov	r2, r4
 801b102:	462b      	mov	r3, r5
 801b104:	4620      	mov	r0, r4
 801b106:	4629      	mov	r1, r5
 801b108:	f7e5 fd10 	bl	8000b2c <__aeabi_dcmpun>
 801b10c:	b990      	cbnz	r0, 801b134 <sqrt+0x54>
 801b10e:	2200      	movs	r2, #0
 801b110:	2300      	movs	r3, #0
 801b112:	4620      	mov	r0, r4
 801b114:	4629      	mov	r1, r5
 801b116:	f7e5 fce1 	bl	8000adc <__aeabi_dcmplt>
 801b11a:	b158      	cbz	r0, 801b134 <sqrt+0x54>
 801b11c:	f7fb f996 	bl	801644c <__errno>
 801b120:	2321      	movs	r3, #33	; 0x21
 801b122:	6003      	str	r3, [r0, #0]
 801b124:	2200      	movs	r2, #0
 801b126:	2300      	movs	r3, #0
 801b128:	4610      	mov	r0, r2
 801b12a:	4619      	mov	r1, r3
 801b12c:	f7e5 fb8e 	bl	800084c <__aeabi_ddiv>
 801b130:	ec41 0b18 	vmov	d8, r0, r1
 801b134:	eeb0 0a48 	vmov.f32	s0, s16
 801b138:	eef0 0a68 	vmov.f32	s1, s17
 801b13c:	ecbd 8b02 	vpop	{d8}
 801b140:	bd38      	pop	{r3, r4, r5, pc}
 801b142:	bf00      	nop
 801b144:	200043e4 	.word	0x200043e4

0801b148 <__ieee754_atan2>:
 801b148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b14c:	ec57 6b11 	vmov	r6, r7, d1
 801b150:	4273      	negs	r3, r6
 801b152:	f8df e184 	ldr.w	lr, [pc, #388]	; 801b2d8 <__ieee754_atan2+0x190>
 801b156:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801b15a:	4333      	orrs	r3, r6
 801b15c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b160:	4573      	cmp	r3, lr
 801b162:	ec51 0b10 	vmov	r0, r1, d0
 801b166:	ee11 8a10 	vmov	r8, s2
 801b16a:	d80a      	bhi.n	801b182 <__ieee754_atan2+0x3a>
 801b16c:	4244      	negs	r4, r0
 801b16e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b172:	4304      	orrs	r4, r0
 801b174:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b178:	4574      	cmp	r4, lr
 801b17a:	ee10 9a10 	vmov	r9, s0
 801b17e:	468c      	mov	ip, r1
 801b180:	d907      	bls.n	801b192 <__ieee754_atan2+0x4a>
 801b182:	4632      	mov	r2, r6
 801b184:	463b      	mov	r3, r7
 801b186:	f7e5 f881 	bl	800028c <__adddf3>
 801b18a:	ec41 0b10 	vmov	d0, r0, r1
 801b18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b192:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801b196:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b19a:	4334      	orrs	r4, r6
 801b19c:	d103      	bne.n	801b1a6 <__ieee754_atan2+0x5e>
 801b19e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1a2:	f001 b825 	b.w	801c1f0 <atan>
 801b1a6:	17bc      	asrs	r4, r7, #30
 801b1a8:	f004 0402 	and.w	r4, r4, #2
 801b1ac:	ea53 0909 	orrs.w	r9, r3, r9
 801b1b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b1b4:	d107      	bne.n	801b1c6 <__ieee754_atan2+0x7e>
 801b1b6:	2c02      	cmp	r4, #2
 801b1b8:	d060      	beq.n	801b27c <__ieee754_atan2+0x134>
 801b1ba:	2c03      	cmp	r4, #3
 801b1bc:	d1e5      	bne.n	801b18a <__ieee754_atan2+0x42>
 801b1be:	a142      	add	r1, pc, #264	; (adr r1, 801b2c8 <__ieee754_atan2+0x180>)
 801b1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1c4:	e7e1      	b.n	801b18a <__ieee754_atan2+0x42>
 801b1c6:	ea52 0808 	orrs.w	r8, r2, r8
 801b1ca:	d106      	bne.n	801b1da <__ieee754_atan2+0x92>
 801b1cc:	f1bc 0f00 	cmp.w	ip, #0
 801b1d0:	da5f      	bge.n	801b292 <__ieee754_atan2+0x14a>
 801b1d2:	a13f      	add	r1, pc, #252	; (adr r1, 801b2d0 <__ieee754_atan2+0x188>)
 801b1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1d8:	e7d7      	b.n	801b18a <__ieee754_atan2+0x42>
 801b1da:	4572      	cmp	r2, lr
 801b1dc:	d10f      	bne.n	801b1fe <__ieee754_atan2+0xb6>
 801b1de:	4293      	cmp	r3, r2
 801b1e0:	f104 34ff 	add.w	r4, r4, #4294967295
 801b1e4:	d107      	bne.n	801b1f6 <__ieee754_atan2+0xae>
 801b1e6:	2c02      	cmp	r4, #2
 801b1e8:	d84c      	bhi.n	801b284 <__ieee754_atan2+0x13c>
 801b1ea:	4b35      	ldr	r3, [pc, #212]	; (801b2c0 <__ieee754_atan2+0x178>)
 801b1ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801b1f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 801b1f4:	e7c9      	b.n	801b18a <__ieee754_atan2+0x42>
 801b1f6:	2c02      	cmp	r4, #2
 801b1f8:	d848      	bhi.n	801b28c <__ieee754_atan2+0x144>
 801b1fa:	4b32      	ldr	r3, [pc, #200]	; (801b2c4 <__ieee754_atan2+0x17c>)
 801b1fc:	e7f6      	b.n	801b1ec <__ieee754_atan2+0xa4>
 801b1fe:	4573      	cmp	r3, lr
 801b200:	d0e4      	beq.n	801b1cc <__ieee754_atan2+0x84>
 801b202:	1a9b      	subs	r3, r3, r2
 801b204:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801b208:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b20c:	da1e      	bge.n	801b24c <__ieee754_atan2+0x104>
 801b20e:	2f00      	cmp	r7, #0
 801b210:	da01      	bge.n	801b216 <__ieee754_atan2+0xce>
 801b212:	323c      	adds	r2, #60	; 0x3c
 801b214:	db1e      	blt.n	801b254 <__ieee754_atan2+0x10c>
 801b216:	4632      	mov	r2, r6
 801b218:	463b      	mov	r3, r7
 801b21a:	f7e5 fb17 	bl	800084c <__aeabi_ddiv>
 801b21e:	ec41 0b10 	vmov	d0, r0, r1
 801b222:	f001 f985 	bl	801c530 <fabs>
 801b226:	f000 ffe3 	bl	801c1f0 <atan>
 801b22a:	ec51 0b10 	vmov	r0, r1, d0
 801b22e:	2c01      	cmp	r4, #1
 801b230:	d013      	beq.n	801b25a <__ieee754_atan2+0x112>
 801b232:	2c02      	cmp	r4, #2
 801b234:	d015      	beq.n	801b262 <__ieee754_atan2+0x11a>
 801b236:	2c00      	cmp	r4, #0
 801b238:	d0a7      	beq.n	801b18a <__ieee754_atan2+0x42>
 801b23a:	a319      	add	r3, pc, #100	; (adr r3, 801b2a0 <__ieee754_atan2+0x158>)
 801b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b240:	f7e5 f822 	bl	8000288 <__aeabi_dsub>
 801b244:	a318      	add	r3, pc, #96	; (adr r3, 801b2a8 <__ieee754_atan2+0x160>)
 801b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b24a:	e014      	b.n	801b276 <__ieee754_atan2+0x12e>
 801b24c:	a118      	add	r1, pc, #96	; (adr r1, 801b2b0 <__ieee754_atan2+0x168>)
 801b24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b252:	e7ec      	b.n	801b22e <__ieee754_atan2+0xe6>
 801b254:	2000      	movs	r0, #0
 801b256:	2100      	movs	r1, #0
 801b258:	e7e9      	b.n	801b22e <__ieee754_atan2+0xe6>
 801b25a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b25e:	4619      	mov	r1, r3
 801b260:	e793      	b.n	801b18a <__ieee754_atan2+0x42>
 801b262:	a30f      	add	r3, pc, #60	; (adr r3, 801b2a0 <__ieee754_atan2+0x158>)
 801b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b268:	f7e5 f80e 	bl	8000288 <__aeabi_dsub>
 801b26c:	4602      	mov	r2, r0
 801b26e:	460b      	mov	r3, r1
 801b270:	a10d      	add	r1, pc, #52	; (adr r1, 801b2a8 <__ieee754_atan2+0x160>)
 801b272:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b276:	f7e5 f807 	bl	8000288 <__aeabi_dsub>
 801b27a:	e786      	b.n	801b18a <__ieee754_atan2+0x42>
 801b27c:	a10a      	add	r1, pc, #40	; (adr r1, 801b2a8 <__ieee754_atan2+0x160>)
 801b27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b282:	e782      	b.n	801b18a <__ieee754_atan2+0x42>
 801b284:	a10c      	add	r1, pc, #48	; (adr r1, 801b2b8 <__ieee754_atan2+0x170>)
 801b286:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b28a:	e77e      	b.n	801b18a <__ieee754_atan2+0x42>
 801b28c:	2000      	movs	r0, #0
 801b28e:	2100      	movs	r1, #0
 801b290:	e77b      	b.n	801b18a <__ieee754_atan2+0x42>
 801b292:	a107      	add	r1, pc, #28	; (adr r1, 801b2b0 <__ieee754_atan2+0x168>)
 801b294:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b298:	e777      	b.n	801b18a <__ieee754_atan2+0x42>
 801b29a:	bf00      	nop
 801b29c:	f3af 8000 	nop.w
 801b2a0:	33145c07 	.word	0x33145c07
 801b2a4:	3ca1a626 	.word	0x3ca1a626
 801b2a8:	54442d18 	.word	0x54442d18
 801b2ac:	400921fb 	.word	0x400921fb
 801b2b0:	54442d18 	.word	0x54442d18
 801b2b4:	3ff921fb 	.word	0x3ff921fb
 801b2b8:	54442d18 	.word	0x54442d18
 801b2bc:	3fe921fb 	.word	0x3fe921fb
 801b2c0:	0801cf18 	.word	0x0801cf18
 801b2c4:	0801cf30 	.word	0x0801cf30
 801b2c8:	54442d18 	.word	0x54442d18
 801b2cc:	c00921fb 	.word	0xc00921fb
 801b2d0:	54442d18 	.word	0x54442d18
 801b2d4:	bff921fb 	.word	0xbff921fb
 801b2d8:	7ff00000 	.word	0x7ff00000
 801b2dc:	00000000 	.word	0x00000000

0801b2e0 <__ieee754_rem_pio2>:
 801b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2e4:	ed2d 8b02 	vpush	{d8}
 801b2e8:	ec55 4b10 	vmov	r4, r5, d0
 801b2ec:	4bca      	ldr	r3, [pc, #808]	; (801b618 <__ieee754_rem_pio2+0x338>)
 801b2ee:	b08b      	sub	sp, #44	; 0x2c
 801b2f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b2f4:	4598      	cmp	r8, r3
 801b2f6:	4682      	mov	sl, r0
 801b2f8:	9502      	str	r5, [sp, #8]
 801b2fa:	dc08      	bgt.n	801b30e <__ieee754_rem_pio2+0x2e>
 801b2fc:	2200      	movs	r2, #0
 801b2fe:	2300      	movs	r3, #0
 801b300:	ed80 0b00 	vstr	d0, [r0]
 801b304:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b308:	f04f 0b00 	mov.w	fp, #0
 801b30c:	e028      	b.n	801b360 <__ieee754_rem_pio2+0x80>
 801b30e:	4bc3      	ldr	r3, [pc, #780]	; (801b61c <__ieee754_rem_pio2+0x33c>)
 801b310:	4598      	cmp	r8, r3
 801b312:	dc78      	bgt.n	801b406 <__ieee754_rem_pio2+0x126>
 801b314:	9b02      	ldr	r3, [sp, #8]
 801b316:	4ec2      	ldr	r6, [pc, #776]	; (801b620 <__ieee754_rem_pio2+0x340>)
 801b318:	2b00      	cmp	r3, #0
 801b31a:	ee10 0a10 	vmov	r0, s0
 801b31e:	a3b0      	add	r3, pc, #704	; (adr r3, 801b5e0 <__ieee754_rem_pio2+0x300>)
 801b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b324:	4629      	mov	r1, r5
 801b326:	dd39      	ble.n	801b39c <__ieee754_rem_pio2+0xbc>
 801b328:	f7e4 ffae 	bl	8000288 <__aeabi_dsub>
 801b32c:	45b0      	cmp	r8, r6
 801b32e:	4604      	mov	r4, r0
 801b330:	460d      	mov	r5, r1
 801b332:	d01b      	beq.n	801b36c <__ieee754_rem_pio2+0x8c>
 801b334:	a3ac      	add	r3, pc, #688	; (adr r3, 801b5e8 <__ieee754_rem_pio2+0x308>)
 801b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b33a:	f7e4 ffa5 	bl	8000288 <__aeabi_dsub>
 801b33e:	4602      	mov	r2, r0
 801b340:	460b      	mov	r3, r1
 801b342:	e9ca 2300 	strd	r2, r3, [sl]
 801b346:	4620      	mov	r0, r4
 801b348:	4629      	mov	r1, r5
 801b34a:	f7e4 ff9d 	bl	8000288 <__aeabi_dsub>
 801b34e:	a3a6      	add	r3, pc, #664	; (adr r3, 801b5e8 <__ieee754_rem_pio2+0x308>)
 801b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b354:	f7e4 ff98 	bl	8000288 <__aeabi_dsub>
 801b358:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b35c:	f04f 0b01 	mov.w	fp, #1
 801b360:	4658      	mov	r0, fp
 801b362:	b00b      	add	sp, #44	; 0x2c
 801b364:	ecbd 8b02 	vpop	{d8}
 801b368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b36c:	a3a0      	add	r3, pc, #640	; (adr r3, 801b5f0 <__ieee754_rem_pio2+0x310>)
 801b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b372:	f7e4 ff89 	bl	8000288 <__aeabi_dsub>
 801b376:	a3a0      	add	r3, pc, #640	; (adr r3, 801b5f8 <__ieee754_rem_pio2+0x318>)
 801b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b37c:	4604      	mov	r4, r0
 801b37e:	460d      	mov	r5, r1
 801b380:	f7e4 ff82 	bl	8000288 <__aeabi_dsub>
 801b384:	4602      	mov	r2, r0
 801b386:	460b      	mov	r3, r1
 801b388:	e9ca 2300 	strd	r2, r3, [sl]
 801b38c:	4620      	mov	r0, r4
 801b38e:	4629      	mov	r1, r5
 801b390:	f7e4 ff7a 	bl	8000288 <__aeabi_dsub>
 801b394:	a398      	add	r3, pc, #608	; (adr r3, 801b5f8 <__ieee754_rem_pio2+0x318>)
 801b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b39a:	e7db      	b.n	801b354 <__ieee754_rem_pio2+0x74>
 801b39c:	f7e4 ff76 	bl	800028c <__adddf3>
 801b3a0:	45b0      	cmp	r8, r6
 801b3a2:	4604      	mov	r4, r0
 801b3a4:	460d      	mov	r5, r1
 801b3a6:	d016      	beq.n	801b3d6 <__ieee754_rem_pio2+0xf6>
 801b3a8:	a38f      	add	r3, pc, #572	; (adr r3, 801b5e8 <__ieee754_rem_pio2+0x308>)
 801b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ae:	f7e4 ff6d 	bl	800028c <__adddf3>
 801b3b2:	4602      	mov	r2, r0
 801b3b4:	460b      	mov	r3, r1
 801b3b6:	e9ca 2300 	strd	r2, r3, [sl]
 801b3ba:	4620      	mov	r0, r4
 801b3bc:	4629      	mov	r1, r5
 801b3be:	f7e4 ff63 	bl	8000288 <__aeabi_dsub>
 801b3c2:	a389      	add	r3, pc, #548	; (adr r3, 801b5e8 <__ieee754_rem_pio2+0x308>)
 801b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c8:	f7e4 ff60 	bl	800028c <__adddf3>
 801b3cc:	f04f 3bff 	mov.w	fp, #4294967295
 801b3d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b3d4:	e7c4      	b.n	801b360 <__ieee754_rem_pio2+0x80>
 801b3d6:	a386      	add	r3, pc, #536	; (adr r3, 801b5f0 <__ieee754_rem_pio2+0x310>)
 801b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3dc:	f7e4 ff56 	bl	800028c <__adddf3>
 801b3e0:	a385      	add	r3, pc, #532	; (adr r3, 801b5f8 <__ieee754_rem_pio2+0x318>)
 801b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e6:	4604      	mov	r4, r0
 801b3e8:	460d      	mov	r5, r1
 801b3ea:	f7e4 ff4f 	bl	800028c <__adddf3>
 801b3ee:	4602      	mov	r2, r0
 801b3f0:	460b      	mov	r3, r1
 801b3f2:	e9ca 2300 	strd	r2, r3, [sl]
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	4629      	mov	r1, r5
 801b3fa:	f7e4 ff45 	bl	8000288 <__aeabi_dsub>
 801b3fe:	a37e      	add	r3, pc, #504	; (adr r3, 801b5f8 <__ieee754_rem_pio2+0x318>)
 801b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b404:	e7e0      	b.n	801b3c8 <__ieee754_rem_pio2+0xe8>
 801b406:	4b87      	ldr	r3, [pc, #540]	; (801b624 <__ieee754_rem_pio2+0x344>)
 801b408:	4598      	cmp	r8, r3
 801b40a:	f300 80d9 	bgt.w	801b5c0 <__ieee754_rem_pio2+0x2e0>
 801b40e:	f001 f88f 	bl	801c530 <fabs>
 801b412:	ec55 4b10 	vmov	r4, r5, d0
 801b416:	ee10 0a10 	vmov	r0, s0
 801b41a:	a379      	add	r3, pc, #484	; (adr r3, 801b600 <__ieee754_rem_pio2+0x320>)
 801b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b420:	4629      	mov	r1, r5
 801b422:	f7e5 f8e9 	bl	80005f8 <__aeabi_dmul>
 801b426:	4b80      	ldr	r3, [pc, #512]	; (801b628 <__ieee754_rem_pio2+0x348>)
 801b428:	2200      	movs	r2, #0
 801b42a:	f7e4 ff2f 	bl	800028c <__adddf3>
 801b42e:	f7e5 fb93 	bl	8000b58 <__aeabi_d2iz>
 801b432:	4683      	mov	fp, r0
 801b434:	f7e5 f876 	bl	8000524 <__aeabi_i2d>
 801b438:	4602      	mov	r2, r0
 801b43a:	460b      	mov	r3, r1
 801b43c:	ec43 2b18 	vmov	d8, r2, r3
 801b440:	a367      	add	r3, pc, #412	; (adr r3, 801b5e0 <__ieee754_rem_pio2+0x300>)
 801b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b446:	f7e5 f8d7 	bl	80005f8 <__aeabi_dmul>
 801b44a:	4602      	mov	r2, r0
 801b44c:	460b      	mov	r3, r1
 801b44e:	4620      	mov	r0, r4
 801b450:	4629      	mov	r1, r5
 801b452:	f7e4 ff19 	bl	8000288 <__aeabi_dsub>
 801b456:	a364      	add	r3, pc, #400	; (adr r3, 801b5e8 <__ieee754_rem_pio2+0x308>)
 801b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b45c:	4606      	mov	r6, r0
 801b45e:	460f      	mov	r7, r1
 801b460:	ec51 0b18 	vmov	r0, r1, d8
 801b464:	f7e5 f8c8 	bl	80005f8 <__aeabi_dmul>
 801b468:	f1bb 0f1f 	cmp.w	fp, #31
 801b46c:	4604      	mov	r4, r0
 801b46e:	460d      	mov	r5, r1
 801b470:	dc0d      	bgt.n	801b48e <__ieee754_rem_pio2+0x1ae>
 801b472:	4b6e      	ldr	r3, [pc, #440]	; (801b62c <__ieee754_rem_pio2+0x34c>)
 801b474:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b47c:	4543      	cmp	r3, r8
 801b47e:	d006      	beq.n	801b48e <__ieee754_rem_pio2+0x1ae>
 801b480:	4622      	mov	r2, r4
 801b482:	462b      	mov	r3, r5
 801b484:	4630      	mov	r0, r6
 801b486:	4639      	mov	r1, r7
 801b488:	f7e4 fefe 	bl	8000288 <__aeabi_dsub>
 801b48c:	e00f      	b.n	801b4ae <__ieee754_rem_pio2+0x1ce>
 801b48e:	462b      	mov	r3, r5
 801b490:	4622      	mov	r2, r4
 801b492:	4630      	mov	r0, r6
 801b494:	4639      	mov	r1, r7
 801b496:	f7e4 fef7 	bl	8000288 <__aeabi_dsub>
 801b49a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b49e:	9303      	str	r3, [sp, #12]
 801b4a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b4a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b4a8:	f1b8 0f10 	cmp.w	r8, #16
 801b4ac:	dc02      	bgt.n	801b4b4 <__ieee754_rem_pio2+0x1d4>
 801b4ae:	e9ca 0100 	strd	r0, r1, [sl]
 801b4b2:	e039      	b.n	801b528 <__ieee754_rem_pio2+0x248>
 801b4b4:	a34e      	add	r3, pc, #312	; (adr r3, 801b5f0 <__ieee754_rem_pio2+0x310>)
 801b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ba:	ec51 0b18 	vmov	r0, r1, d8
 801b4be:	f7e5 f89b 	bl	80005f8 <__aeabi_dmul>
 801b4c2:	4604      	mov	r4, r0
 801b4c4:	460d      	mov	r5, r1
 801b4c6:	4602      	mov	r2, r0
 801b4c8:	460b      	mov	r3, r1
 801b4ca:	4630      	mov	r0, r6
 801b4cc:	4639      	mov	r1, r7
 801b4ce:	f7e4 fedb 	bl	8000288 <__aeabi_dsub>
 801b4d2:	4602      	mov	r2, r0
 801b4d4:	460b      	mov	r3, r1
 801b4d6:	4680      	mov	r8, r0
 801b4d8:	4689      	mov	r9, r1
 801b4da:	4630      	mov	r0, r6
 801b4dc:	4639      	mov	r1, r7
 801b4de:	f7e4 fed3 	bl	8000288 <__aeabi_dsub>
 801b4e2:	4622      	mov	r2, r4
 801b4e4:	462b      	mov	r3, r5
 801b4e6:	f7e4 fecf 	bl	8000288 <__aeabi_dsub>
 801b4ea:	a343      	add	r3, pc, #268	; (adr r3, 801b5f8 <__ieee754_rem_pio2+0x318>)
 801b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4f0:	4604      	mov	r4, r0
 801b4f2:	460d      	mov	r5, r1
 801b4f4:	ec51 0b18 	vmov	r0, r1, d8
 801b4f8:	f7e5 f87e 	bl	80005f8 <__aeabi_dmul>
 801b4fc:	4622      	mov	r2, r4
 801b4fe:	462b      	mov	r3, r5
 801b500:	f7e4 fec2 	bl	8000288 <__aeabi_dsub>
 801b504:	4602      	mov	r2, r0
 801b506:	460b      	mov	r3, r1
 801b508:	4604      	mov	r4, r0
 801b50a:	460d      	mov	r5, r1
 801b50c:	4640      	mov	r0, r8
 801b50e:	4649      	mov	r1, r9
 801b510:	f7e4 feba 	bl	8000288 <__aeabi_dsub>
 801b514:	9a03      	ldr	r2, [sp, #12]
 801b516:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b51a:	1ad3      	subs	r3, r2, r3
 801b51c:	2b31      	cmp	r3, #49	; 0x31
 801b51e:	dc24      	bgt.n	801b56a <__ieee754_rem_pio2+0x28a>
 801b520:	e9ca 0100 	strd	r0, r1, [sl]
 801b524:	4646      	mov	r6, r8
 801b526:	464f      	mov	r7, r9
 801b528:	e9da 8900 	ldrd	r8, r9, [sl]
 801b52c:	4630      	mov	r0, r6
 801b52e:	4642      	mov	r2, r8
 801b530:	464b      	mov	r3, r9
 801b532:	4639      	mov	r1, r7
 801b534:	f7e4 fea8 	bl	8000288 <__aeabi_dsub>
 801b538:	462b      	mov	r3, r5
 801b53a:	4622      	mov	r2, r4
 801b53c:	f7e4 fea4 	bl	8000288 <__aeabi_dsub>
 801b540:	9b02      	ldr	r3, [sp, #8]
 801b542:	2b00      	cmp	r3, #0
 801b544:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b548:	f6bf af0a 	bge.w	801b360 <__ieee754_rem_pio2+0x80>
 801b54c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b550:	f8ca 3004 	str.w	r3, [sl, #4]
 801b554:	f8ca 8000 	str.w	r8, [sl]
 801b558:	f8ca 0008 	str.w	r0, [sl, #8]
 801b55c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b560:	f8ca 300c 	str.w	r3, [sl, #12]
 801b564:	f1cb 0b00 	rsb	fp, fp, #0
 801b568:	e6fa      	b.n	801b360 <__ieee754_rem_pio2+0x80>
 801b56a:	a327      	add	r3, pc, #156	; (adr r3, 801b608 <__ieee754_rem_pio2+0x328>)
 801b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b570:	ec51 0b18 	vmov	r0, r1, d8
 801b574:	f7e5 f840 	bl	80005f8 <__aeabi_dmul>
 801b578:	4604      	mov	r4, r0
 801b57a:	460d      	mov	r5, r1
 801b57c:	4602      	mov	r2, r0
 801b57e:	460b      	mov	r3, r1
 801b580:	4640      	mov	r0, r8
 801b582:	4649      	mov	r1, r9
 801b584:	f7e4 fe80 	bl	8000288 <__aeabi_dsub>
 801b588:	4602      	mov	r2, r0
 801b58a:	460b      	mov	r3, r1
 801b58c:	4606      	mov	r6, r0
 801b58e:	460f      	mov	r7, r1
 801b590:	4640      	mov	r0, r8
 801b592:	4649      	mov	r1, r9
 801b594:	f7e4 fe78 	bl	8000288 <__aeabi_dsub>
 801b598:	4622      	mov	r2, r4
 801b59a:	462b      	mov	r3, r5
 801b59c:	f7e4 fe74 	bl	8000288 <__aeabi_dsub>
 801b5a0:	a31b      	add	r3, pc, #108	; (adr r3, 801b610 <__ieee754_rem_pio2+0x330>)
 801b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a6:	4604      	mov	r4, r0
 801b5a8:	460d      	mov	r5, r1
 801b5aa:	ec51 0b18 	vmov	r0, r1, d8
 801b5ae:	f7e5 f823 	bl	80005f8 <__aeabi_dmul>
 801b5b2:	4622      	mov	r2, r4
 801b5b4:	462b      	mov	r3, r5
 801b5b6:	f7e4 fe67 	bl	8000288 <__aeabi_dsub>
 801b5ba:	4604      	mov	r4, r0
 801b5bc:	460d      	mov	r5, r1
 801b5be:	e75f      	b.n	801b480 <__ieee754_rem_pio2+0x1a0>
 801b5c0:	4b1b      	ldr	r3, [pc, #108]	; (801b630 <__ieee754_rem_pio2+0x350>)
 801b5c2:	4598      	cmp	r8, r3
 801b5c4:	dd36      	ble.n	801b634 <__ieee754_rem_pio2+0x354>
 801b5c6:	ee10 2a10 	vmov	r2, s0
 801b5ca:	462b      	mov	r3, r5
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	4629      	mov	r1, r5
 801b5d0:	f7e4 fe5a 	bl	8000288 <__aeabi_dsub>
 801b5d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b5d8:	e9ca 0100 	strd	r0, r1, [sl]
 801b5dc:	e694      	b.n	801b308 <__ieee754_rem_pio2+0x28>
 801b5de:	bf00      	nop
 801b5e0:	54400000 	.word	0x54400000
 801b5e4:	3ff921fb 	.word	0x3ff921fb
 801b5e8:	1a626331 	.word	0x1a626331
 801b5ec:	3dd0b461 	.word	0x3dd0b461
 801b5f0:	1a600000 	.word	0x1a600000
 801b5f4:	3dd0b461 	.word	0x3dd0b461
 801b5f8:	2e037073 	.word	0x2e037073
 801b5fc:	3ba3198a 	.word	0x3ba3198a
 801b600:	6dc9c883 	.word	0x6dc9c883
 801b604:	3fe45f30 	.word	0x3fe45f30
 801b608:	2e000000 	.word	0x2e000000
 801b60c:	3ba3198a 	.word	0x3ba3198a
 801b610:	252049c1 	.word	0x252049c1
 801b614:	397b839a 	.word	0x397b839a
 801b618:	3fe921fb 	.word	0x3fe921fb
 801b61c:	4002d97b 	.word	0x4002d97b
 801b620:	3ff921fb 	.word	0x3ff921fb
 801b624:	413921fb 	.word	0x413921fb
 801b628:	3fe00000 	.word	0x3fe00000
 801b62c:	0801cf48 	.word	0x0801cf48
 801b630:	7fefffff 	.word	0x7fefffff
 801b634:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b638:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b63c:	ee10 0a10 	vmov	r0, s0
 801b640:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b644:	ee10 6a10 	vmov	r6, s0
 801b648:	460f      	mov	r7, r1
 801b64a:	f7e5 fa85 	bl	8000b58 <__aeabi_d2iz>
 801b64e:	f7e4 ff69 	bl	8000524 <__aeabi_i2d>
 801b652:	4602      	mov	r2, r0
 801b654:	460b      	mov	r3, r1
 801b656:	4630      	mov	r0, r6
 801b658:	4639      	mov	r1, r7
 801b65a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b65e:	f7e4 fe13 	bl	8000288 <__aeabi_dsub>
 801b662:	4b22      	ldr	r3, [pc, #136]	; (801b6ec <__ieee754_rem_pio2+0x40c>)
 801b664:	2200      	movs	r2, #0
 801b666:	f7e4 ffc7 	bl	80005f8 <__aeabi_dmul>
 801b66a:	460f      	mov	r7, r1
 801b66c:	4606      	mov	r6, r0
 801b66e:	f7e5 fa73 	bl	8000b58 <__aeabi_d2iz>
 801b672:	f7e4 ff57 	bl	8000524 <__aeabi_i2d>
 801b676:	4602      	mov	r2, r0
 801b678:	460b      	mov	r3, r1
 801b67a:	4630      	mov	r0, r6
 801b67c:	4639      	mov	r1, r7
 801b67e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b682:	f7e4 fe01 	bl	8000288 <__aeabi_dsub>
 801b686:	4b19      	ldr	r3, [pc, #100]	; (801b6ec <__ieee754_rem_pio2+0x40c>)
 801b688:	2200      	movs	r2, #0
 801b68a:	f7e4 ffb5 	bl	80005f8 <__aeabi_dmul>
 801b68e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b692:	ad04      	add	r5, sp, #16
 801b694:	f04f 0803 	mov.w	r8, #3
 801b698:	46a9      	mov	r9, r5
 801b69a:	2600      	movs	r6, #0
 801b69c:	2700      	movs	r7, #0
 801b69e:	4632      	mov	r2, r6
 801b6a0:	463b      	mov	r3, r7
 801b6a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b6a6:	46c3      	mov	fp, r8
 801b6a8:	3d08      	subs	r5, #8
 801b6aa:	f108 38ff 	add.w	r8, r8, #4294967295
 801b6ae:	f7e5 fa0b 	bl	8000ac8 <__aeabi_dcmpeq>
 801b6b2:	2800      	cmp	r0, #0
 801b6b4:	d1f3      	bne.n	801b69e <__ieee754_rem_pio2+0x3be>
 801b6b6:	4b0e      	ldr	r3, [pc, #56]	; (801b6f0 <__ieee754_rem_pio2+0x410>)
 801b6b8:	9301      	str	r3, [sp, #4]
 801b6ba:	2302      	movs	r3, #2
 801b6bc:	9300      	str	r3, [sp, #0]
 801b6be:	4622      	mov	r2, r4
 801b6c0:	465b      	mov	r3, fp
 801b6c2:	4651      	mov	r1, sl
 801b6c4:	4648      	mov	r0, r9
 801b6c6:	f000 f993 	bl	801b9f0 <__kernel_rem_pio2>
 801b6ca:	9b02      	ldr	r3, [sp, #8]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	4683      	mov	fp, r0
 801b6d0:	f6bf ae46 	bge.w	801b360 <__ieee754_rem_pio2+0x80>
 801b6d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b6d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b6dc:	f8ca 3004 	str.w	r3, [sl, #4]
 801b6e0:	f8da 300c 	ldr.w	r3, [sl, #12]
 801b6e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b6e8:	e73a      	b.n	801b560 <__ieee754_rem_pio2+0x280>
 801b6ea:	bf00      	nop
 801b6ec:	41700000 	.word	0x41700000
 801b6f0:	0801cfc8 	.word	0x0801cfc8

0801b6f4 <__ieee754_sqrt>:
 801b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6f8:	ec55 4b10 	vmov	r4, r5, d0
 801b6fc:	4e56      	ldr	r6, [pc, #344]	; (801b858 <__ieee754_sqrt+0x164>)
 801b6fe:	43ae      	bics	r6, r5
 801b700:	ee10 0a10 	vmov	r0, s0
 801b704:	ee10 3a10 	vmov	r3, s0
 801b708:	4629      	mov	r1, r5
 801b70a:	462a      	mov	r2, r5
 801b70c:	d110      	bne.n	801b730 <__ieee754_sqrt+0x3c>
 801b70e:	ee10 2a10 	vmov	r2, s0
 801b712:	462b      	mov	r3, r5
 801b714:	f7e4 ff70 	bl	80005f8 <__aeabi_dmul>
 801b718:	4602      	mov	r2, r0
 801b71a:	460b      	mov	r3, r1
 801b71c:	4620      	mov	r0, r4
 801b71e:	4629      	mov	r1, r5
 801b720:	f7e4 fdb4 	bl	800028c <__adddf3>
 801b724:	4604      	mov	r4, r0
 801b726:	460d      	mov	r5, r1
 801b728:	ec45 4b10 	vmov	d0, r4, r5
 801b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b730:	2d00      	cmp	r5, #0
 801b732:	dc10      	bgt.n	801b756 <__ieee754_sqrt+0x62>
 801b734:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b738:	4330      	orrs	r0, r6
 801b73a:	d0f5      	beq.n	801b728 <__ieee754_sqrt+0x34>
 801b73c:	b15d      	cbz	r5, 801b756 <__ieee754_sqrt+0x62>
 801b73e:	ee10 2a10 	vmov	r2, s0
 801b742:	462b      	mov	r3, r5
 801b744:	ee10 0a10 	vmov	r0, s0
 801b748:	f7e4 fd9e 	bl	8000288 <__aeabi_dsub>
 801b74c:	4602      	mov	r2, r0
 801b74e:	460b      	mov	r3, r1
 801b750:	f7e5 f87c 	bl	800084c <__aeabi_ddiv>
 801b754:	e7e6      	b.n	801b724 <__ieee754_sqrt+0x30>
 801b756:	1509      	asrs	r1, r1, #20
 801b758:	d076      	beq.n	801b848 <__ieee754_sqrt+0x154>
 801b75a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b75e:	07ce      	lsls	r6, r1, #31
 801b760:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b764:	bf5e      	ittt	pl
 801b766:	0fda      	lsrpl	r2, r3, #31
 801b768:	005b      	lslpl	r3, r3, #1
 801b76a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b76e:	0fda      	lsrs	r2, r3, #31
 801b770:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b774:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b778:	2000      	movs	r0, #0
 801b77a:	106d      	asrs	r5, r5, #1
 801b77c:	005b      	lsls	r3, r3, #1
 801b77e:	f04f 0e16 	mov.w	lr, #22
 801b782:	4684      	mov	ip, r0
 801b784:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b788:	eb0c 0401 	add.w	r4, ip, r1
 801b78c:	4294      	cmp	r4, r2
 801b78e:	bfde      	ittt	le
 801b790:	1b12      	suble	r2, r2, r4
 801b792:	eb04 0c01 	addle.w	ip, r4, r1
 801b796:	1840      	addle	r0, r0, r1
 801b798:	0052      	lsls	r2, r2, #1
 801b79a:	f1be 0e01 	subs.w	lr, lr, #1
 801b79e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b7a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b7a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b7aa:	d1ed      	bne.n	801b788 <__ieee754_sqrt+0x94>
 801b7ac:	4671      	mov	r1, lr
 801b7ae:	2720      	movs	r7, #32
 801b7b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b7b4:	4562      	cmp	r2, ip
 801b7b6:	eb04 060e 	add.w	r6, r4, lr
 801b7ba:	dc02      	bgt.n	801b7c2 <__ieee754_sqrt+0xce>
 801b7bc:	d113      	bne.n	801b7e6 <__ieee754_sqrt+0xf2>
 801b7be:	429e      	cmp	r6, r3
 801b7c0:	d811      	bhi.n	801b7e6 <__ieee754_sqrt+0xf2>
 801b7c2:	2e00      	cmp	r6, #0
 801b7c4:	eb06 0e04 	add.w	lr, r6, r4
 801b7c8:	da43      	bge.n	801b852 <__ieee754_sqrt+0x15e>
 801b7ca:	f1be 0f00 	cmp.w	lr, #0
 801b7ce:	db40      	blt.n	801b852 <__ieee754_sqrt+0x15e>
 801b7d0:	f10c 0801 	add.w	r8, ip, #1
 801b7d4:	eba2 020c 	sub.w	r2, r2, ip
 801b7d8:	429e      	cmp	r6, r3
 801b7da:	bf88      	it	hi
 801b7dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b7e0:	1b9b      	subs	r3, r3, r6
 801b7e2:	4421      	add	r1, r4
 801b7e4:	46c4      	mov	ip, r8
 801b7e6:	0052      	lsls	r2, r2, #1
 801b7e8:	3f01      	subs	r7, #1
 801b7ea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b7ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b7f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b7f6:	d1dd      	bne.n	801b7b4 <__ieee754_sqrt+0xc0>
 801b7f8:	4313      	orrs	r3, r2
 801b7fa:	d006      	beq.n	801b80a <__ieee754_sqrt+0x116>
 801b7fc:	1c4c      	adds	r4, r1, #1
 801b7fe:	bf13      	iteet	ne
 801b800:	3101      	addne	r1, #1
 801b802:	3001      	addeq	r0, #1
 801b804:	4639      	moveq	r1, r7
 801b806:	f021 0101 	bicne.w	r1, r1, #1
 801b80a:	1043      	asrs	r3, r0, #1
 801b80c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b810:	0849      	lsrs	r1, r1, #1
 801b812:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b816:	07c2      	lsls	r2, r0, #31
 801b818:	bf48      	it	mi
 801b81a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b81e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b822:	460c      	mov	r4, r1
 801b824:	463d      	mov	r5, r7
 801b826:	e77f      	b.n	801b728 <__ieee754_sqrt+0x34>
 801b828:	0ada      	lsrs	r2, r3, #11
 801b82a:	3815      	subs	r0, #21
 801b82c:	055b      	lsls	r3, r3, #21
 801b82e:	2a00      	cmp	r2, #0
 801b830:	d0fa      	beq.n	801b828 <__ieee754_sqrt+0x134>
 801b832:	02d7      	lsls	r7, r2, #11
 801b834:	d50a      	bpl.n	801b84c <__ieee754_sqrt+0x158>
 801b836:	f1c1 0420 	rsb	r4, r1, #32
 801b83a:	fa23 f404 	lsr.w	r4, r3, r4
 801b83e:	1e4d      	subs	r5, r1, #1
 801b840:	408b      	lsls	r3, r1
 801b842:	4322      	orrs	r2, r4
 801b844:	1b41      	subs	r1, r0, r5
 801b846:	e788      	b.n	801b75a <__ieee754_sqrt+0x66>
 801b848:	4608      	mov	r0, r1
 801b84a:	e7f0      	b.n	801b82e <__ieee754_sqrt+0x13a>
 801b84c:	0052      	lsls	r2, r2, #1
 801b84e:	3101      	adds	r1, #1
 801b850:	e7ef      	b.n	801b832 <__ieee754_sqrt+0x13e>
 801b852:	46e0      	mov	r8, ip
 801b854:	e7be      	b.n	801b7d4 <__ieee754_sqrt+0xe0>
 801b856:	bf00      	nop
 801b858:	7ff00000 	.word	0x7ff00000
 801b85c:	00000000 	.word	0x00000000

0801b860 <__kernel_cos>:
 801b860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b864:	ec57 6b10 	vmov	r6, r7, d0
 801b868:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b86c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b870:	ed8d 1b00 	vstr	d1, [sp]
 801b874:	da07      	bge.n	801b886 <__kernel_cos+0x26>
 801b876:	ee10 0a10 	vmov	r0, s0
 801b87a:	4639      	mov	r1, r7
 801b87c:	f7e5 f96c 	bl	8000b58 <__aeabi_d2iz>
 801b880:	2800      	cmp	r0, #0
 801b882:	f000 8088 	beq.w	801b996 <__kernel_cos+0x136>
 801b886:	4632      	mov	r2, r6
 801b888:	463b      	mov	r3, r7
 801b88a:	4630      	mov	r0, r6
 801b88c:	4639      	mov	r1, r7
 801b88e:	f7e4 feb3 	bl	80005f8 <__aeabi_dmul>
 801b892:	4b51      	ldr	r3, [pc, #324]	; (801b9d8 <__kernel_cos+0x178>)
 801b894:	2200      	movs	r2, #0
 801b896:	4604      	mov	r4, r0
 801b898:	460d      	mov	r5, r1
 801b89a:	f7e4 fead 	bl	80005f8 <__aeabi_dmul>
 801b89e:	a340      	add	r3, pc, #256	; (adr r3, 801b9a0 <__kernel_cos+0x140>)
 801b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8a4:	4682      	mov	sl, r0
 801b8a6:	468b      	mov	fp, r1
 801b8a8:	4620      	mov	r0, r4
 801b8aa:	4629      	mov	r1, r5
 801b8ac:	f7e4 fea4 	bl	80005f8 <__aeabi_dmul>
 801b8b0:	a33d      	add	r3, pc, #244	; (adr r3, 801b9a8 <__kernel_cos+0x148>)
 801b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8b6:	f7e4 fce9 	bl	800028c <__adddf3>
 801b8ba:	4622      	mov	r2, r4
 801b8bc:	462b      	mov	r3, r5
 801b8be:	f7e4 fe9b 	bl	80005f8 <__aeabi_dmul>
 801b8c2:	a33b      	add	r3, pc, #236	; (adr r3, 801b9b0 <__kernel_cos+0x150>)
 801b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8c8:	f7e4 fcde 	bl	8000288 <__aeabi_dsub>
 801b8cc:	4622      	mov	r2, r4
 801b8ce:	462b      	mov	r3, r5
 801b8d0:	f7e4 fe92 	bl	80005f8 <__aeabi_dmul>
 801b8d4:	a338      	add	r3, pc, #224	; (adr r3, 801b9b8 <__kernel_cos+0x158>)
 801b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8da:	f7e4 fcd7 	bl	800028c <__adddf3>
 801b8de:	4622      	mov	r2, r4
 801b8e0:	462b      	mov	r3, r5
 801b8e2:	f7e4 fe89 	bl	80005f8 <__aeabi_dmul>
 801b8e6:	a336      	add	r3, pc, #216	; (adr r3, 801b9c0 <__kernel_cos+0x160>)
 801b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ec:	f7e4 fccc 	bl	8000288 <__aeabi_dsub>
 801b8f0:	4622      	mov	r2, r4
 801b8f2:	462b      	mov	r3, r5
 801b8f4:	f7e4 fe80 	bl	80005f8 <__aeabi_dmul>
 801b8f8:	a333      	add	r3, pc, #204	; (adr r3, 801b9c8 <__kernel_cos+0x168>)
 801b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8fe:	f7e4 fcc5 	bl	800028c <__adddf3>
 801b902:	4622      	mov	r2, r4
 801b904:	462b      	mov	r3, r5
 801b906:	f7e4 fe77 	bl	80005f8 <__aeabi_dmul>
 801b90a:	4622      	mov	r2, r4
 801b90c:	462b      	mov	r3, r5
 801b90e:	f7e4 fe73 	bl	80005f8 <__aeabi_dmul>
 801b912:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b916:	4604      	mov	r4, r0
 801b918:	460d      	mov	r5, r1
 801b91a:	4630      	mov	r0, r6
 801b91c:	4639      	mov	r1, r7
 801b91e:	f7e4 fe6b 	bl	80005f8 <__aeabi_dmul>
 801b922:	460b      	mov	r3, r1
 801b924:	4602      	mov	r2, r0
 801b926:	4629      	mov	r1, r5
 801b928:	4620      	mov	r0, r4
 801b92a:	f7e4 fcad 	bl	8000288 <__aeabi_dsub>
 801b92e:	4b2b      	ldr	r3, [pc, #172]	; (801b9dc <__kernel_cos+0x17c>)
 801b930:	4598      	cmp	r8, r3
 801b932:	4606      	mov	r6, r0
 801b934:	460f      	mov	r7, r1
 801b936:	dc10      	bgt.n	801b95a <__kernel_cos+0xfa>
 801b938:	4602      	mov	r2, r0
 801b93a:	460b      	mov	r3, r1
 801b93c:	4650      	mov	r0, sl
 801b93e:	4659      	mov	r1, fp
 801b940:	f7e4 fca2 	bl	8000288 <__aeabi_dsub>
 801b944:	460b      	mov	r3, r1
 801b946:	4926      	ldr	r1, [pc, #152]	; (801b9e0 <__kernel_cos+0x180>)
 801b948:	4602      	mov	r2, r0
 801b94a:	2000      	movs	r0, #0
 801b94c:	f7e4 fc9c 	bl	8000288 <__aeabi_dsub>
 801b950:	ec41 0b10 	vmov	d0, r0, r1
 801b954:	b003      	add	sp, #12
 801b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b95a:	4b22      	ldr	r3, [pc, #136]	; (801b9e4 <__kernel_cos+0x184>)
 801b95c:	4920      	ldr	r1, [pc, #128]	; (801b9e0 <__kernel_cos+0x180>)
 801b95e:	4598      	cmp	r8, r3
 801b960:	bfcc      	ite	gt
 801b962:	4d21      	ldrgt	r5, [pc, #132]	; (801b9e8 <__kernel_cos+0x188>)
 801b964:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b968:	2400      	movs	r4, #0
 801b96a:	4622      	mov	r2, r4
 801b96c:	462b      	mov	r3, r5
 801b96e:	2000      	movs	r0, #0
 801b970:	f7e4 fc8a 	bl	8000288 <__aeabi_dsub>
 801b974:	4622      	mov	r2, r4
 801b976:	4680      	mov	r8, r0
 801b978:	4689      	mov	r9, r1
 801b97a:	462b      	mov	r3, r5
 801b97c:	4650      	mov	r0, sl
 801b97e:	4659      	mov	r1, fp
 801b980:	f7e4 fc82 	bl	8000288 <__aeabi_dsub>
 801b984:	4632      	mov	r2, r6
 801b986:	463b      	mov	r3, r7
 801b988:	f7e4 fc7e 	bl	8000288 <__aeabi_dsub>
 801b98c:	4602      	mov	r2, r0
 801b98e:	460b      	mov	r3, r1
 801b990:	4640      	mov	r0, r8
 801b992:	4649      	mov	r1, r9
 801b994:	e7da      	b.n	801b94c <__kernel_cos+0xec>
 801b996:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b9d0 <__kernel_cos+0x170>
 801b99a:	e7db      	b.n	801b954 <__kernel_cos+0xf4>
 801b99c:	f3af 8000 	nop.w
 801b9a0:	be8838d4 	.word	0xbe8838d4
 801b9a4:	bda8fae9 	.word	0xbda8fae9
 801b9a8:	bdb4b1c4 	.word	0xbdb4b1c4
 801b9ac:	3e21ee9e 	.word	0x3e21ee9e
 801b9b0:	809c52ad 	.word	0x809c52ad
 801b9b4:	3e927e4f 	.word	0x3e927e4f
 801b9b8:	19cb1590 	.word	0x19cb1590
 801b9bc:	3efa01a0 	.word	0x3efa01a0
 801b9c0:	16c15177 	.word	0x16c15177
 801b9c4:	3f56c16c 	.word	0x3f56c16c
 801b9c8:	5555554c 	.word	0x5555554c
 801b9cc:	3fa55555 	.word	0x3fa55555
 801b9d0:	00000000 	.word	0x00000000
 801b9d4:	3ff00000 	.word	0x3ff00000
 801b9d8:	3fe00000 	.word	0x3fe00000
 801b9dc:	3fd33332 	.word	0x3fd33332
 801b9e0:	3ff00000 	.word	0x3ff00000
 801b9e4:	3fe90000 	.word	0x3fe90000
 801b9e8:	3fd20000 	.word	0x3fd20000
 801b9ec:	00000000 	.word	0x00000000

0801b9f0 <__kernel_rem_pio2>:
 801b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f4:	ed2d 8b02 	vpush	{d8}
 801b9f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b9fc:	f112 0f14 	cmn.w	r2, #20
 801ba00:	9308      	str	r3, [sp, #32]
 801ba02:	9101      	str	r1, [sp, #4]
 801ba04:	4bc6      	ldr	r3, [pc, #792]	; (801bd20 <__kernel_rem_pio2+0x330>)
 801ba06:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801ba08:	9009      	str	r0, [sp, #36]	; 0x24
 801ba0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ba0e:	9304      	str	r3, [sp, #16]
 801ba10:	9b08      	ldr	r3, [sp, #32]
 801ba12:	f103 33ff 	add.w	r3, r3, #4294967295
 801ba16:	bfa8      	it	ge
 801ba18:	1ed4      	subge	r4, r2, #3
 801ba1a:	9306      	str	r3, [sp, #24]
 801ba1c:	bfb2      	itee	lt
 801ba1e:	2400      	movlt	r4, #0
 801ba20:	2318      	movge	r3, #24
 801ba22:	fb94 f4f3 	sdivge	r4, r4, r3
 801ba26:	f06f 0317 	mvn.w	r3, #23
 801ba2a:	fb04 3303 	mla	r3, r4, r3, r3
 801ba2e:	eb03 0a02 	add.w	sl, r3, r2
 801ba32:	9b04      	ldr	r3, [sp, #16]
 801ba34:	9a06      	ldr	r2, [sp, #24]
 801ba36:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801bd10 <__kernel_rem_pio2+0x320>
 801ba3a:	eb03 0802 	add.w	r8, r3, r2
 801ba3e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801ba40:	1aa7      	subs	r7, r4, r2
 801ba42:	ae20      	add	r6, sp, #128	; 0x80
 801ba44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ba48:	2500      	movs	r5, #0
 801ba4a:	4545      	cmp	r5, r8
 801ba4c:	dd18      	ble.n	801ba80 <__kernel_rem_pio2+0x90>
 801ba4e:	9b08      	ldr	r3, [sp, #32]
 801ba50:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ba54:	aa20      	add	r2, sp, #128	; 0x80
 801ba56:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801bd10 <__kernel_rem_pio2+0x320>
 801ba5a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ba5e:	f1c3 0301 	rsb	r3, r3, #1
 801ba62:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801ba66:	9307      	str	r3, [sp, #28]
 801ba68:	9b07      	ldr	r3, [sp, #28]
 801ba6a:	9a04      	ldr	r2, [sp, #16]
 801ba6c:	4443      	add	r3, r8
 801ba6e:	429a      	cmp	r2, r3
 801ba70:	db2f      	blt.n	801bad2 <__kernel_rem_pio2+0xe2>
 801ba72:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ba76:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ba7a:	462f      	mov	r7, r5
 801ba7c:	2600      	movs	r6, #0
 801ba7e:	e01b      	b.n	801bab8 <__kernel_rem_pio2+0xc8>
 801ba80:	42ef      	cmn	r7, r5
 801ba82:	d407      	bmi.n	801ba94 <__kernel_rem_pio2+0xa4>
 801ba84:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ba88:	f7e4 fd4c 	bl	8000524 <__aeabi_i2d>
 801ba8c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ba90:	3501      	adds	r5, #1
 801ba92:	e7da      	b.n	801ba4a <__kernel_rem_pio2+0x5a>
 801ba94:	ec51 0b18 	vmov	r0, r1, d8
 801ba98:	e7f8      	b.n	801ba8c <__kernel_rem_pio2+0x9c>
 801ba9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ba9e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801baa2:	f7e4 fda9 	bl	80005f8 <__aeabi_dmul>
 801baa6:	4602      	mov	r2, r0
 801baa8:	460b      	mov	r3, r1
 801baaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801baae:	f7e4 fbed 	bl	800028c <__adddf3>
 801bab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bab6:	3601      	adds	r6, #1
 801bab8:	9b06      	ldr	r3, [sp, #24]
 801baba:	429e      	cmp	r6, r3
 801babc:	f1a7 0708 	sub.w	r7, r7, #8
 801bac0:	ddeb      	ble.n	801ba9a <__kernel_rem_pio2+0xaa>
 801bac2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bac6:	3508      	adds	r5, #8
 801bac8:	ecab 7b02 	vstmia	fp!, {d7}
 801bacc:	f108 0801 	add.w	r8, r8, #1
 801bad0:	e7ca      	b.n	801ba68 <__kernel_rem_pio2+0x78>
 801bad2:	9b04      	ldr	r3, [sp, #16]
 801bad4:	aa0c      	add	r2, sp, #48	; 0x30
 801bad6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bada:	930b      	str	r3, [sp, #44]	; 0x2c
 801badc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801bade:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801bae2:	9c04      	ldr	r4, [sp, #16]
 801bae4:	930a      	str	r3, [sp, #40]	; 0x28
 801bae6:	ab98      	add	r3, sp, #608	; 0x260
 801bae8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801baec:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801baf0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801baf4:	f8cd b008 	str.w	fp, [sp, #8]
 801baf8:	4625      	mov	r5, r4
 801bafa:	2d00      	cmp	r5, #0
 801bafc:	dc78      	bgt.n	801bbf0 <__kernel_rem_pio2+0x200>
 801bafe:	ec47 6b10 	vmov	d0, r6, r7
 801bb02:	4650      	mov	r0, sl
 801bb04:	f000 fda0 	bl	801c648 <scalbn>
 801bb08:	ec57 6b10 	vmov	r6, r7, d0
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801bb12:	ee10 0a10 	vmov	r0, s0
 801bb16:	4639      	mov	r1, r7
 801bb18:	f7e4 fd6e 	bl	80005f8 <__aeabi_dmul>
 801bb1c:	ec41 0b10 	vmov	d0, r0, r1
 801bb20:	f000 fd12 	bl	801c548 <floor>
 801bb24:	4b7f      	ldr	r3, [pc, #508]	; (801bd24 <__kernel_rem_pio2+0x334>)
 801bb26:	ec51 0b10 	vmov	r0, r1, d0
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	f7e4 fd64 	bl	80005f8 <__aeabi_dmul>
 801bb30:	4602      	mov	r2, r0
 801bb32:	460b      	mov	r3, r1
 801bb34:	4630      	mov	r0, r6
 801bb36:	4639      	mov	r1, r7
 801bb38:	f7e4 fba6 	bl	8000288 <__aeabi_dsub>
 801bb3c:	460f      	mov	r7, r1
 801bb3e:	4606      	mov	r6, r0
 801bb40:	f7e5 f80a 	bl	8000b58 <__aeabi_d2iz>
 801bb44:	9007      	str	r0, [sp, #28]
 801bb46:	f7e4 fced 	bl	8000524 <__aeabi_i2d>
 801bb4a:	4602      	mov	r2, r0
 801bb4c:	460b      	mov	r3, r1
 801bb4e:	4630      	mov	r0, r6
 801bb50:	4639      	mov	r1, r7
 801bb52:	f7e4 fb99 	bl	8000288 <__aeabi_dsub>
 801bb56:	f1ba 0f00 	cmp.w	sl, #0
 801bb5a:	4606      	mov	r6, r0
 801bb5c:	460f      	mov	r7, r1
 801bb5e:	dd70      	ble.n	801bc42 <__kernel_rem_pio2+0x252>
 801bb60:	1e62      	subs	r2, r4, #1
 801bb62:	ab0c      	add	r3, sp, #48	; 0x30
 801bb64:	9d07      	ldr	r5, [sp, #28]
 801bb66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bb6a:	f1ca 0118 	rsb	r1, sl, #24
 801bb6e:	fa40 f301 	asr.w	r3, r0, r1
 801bb72:	441d      	add	r5, r3
 801bb74:	408b      	lsls	r3, r1
 801bb76:	1ac0      	subs	r0, r0, r3
 801bb78:	ab0c      	add	r3, sp, #48	; 0x30
 801bb7a:	9507      	str	r5, [sp, #28]
 801bb7c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801bb80:	f1ca 0317 	rsb	r3, sl, #23
 801bb84:	fa40 f303 	asr.w	r3, r0, r3
 801bb88:	9302      	str	r3, [sp, #8]
 801bb8a:	9b02      	ldr	r3, [sp, #8]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	dd66      	ble.n	801bc5e <__kernel_rem_pio2+0x26e>
 801bb90:	9b07      	ldr	r3, [sp, #28]
 801bb92:	2200      	movs	r2, #0
 801bb94:	3301      	adds	r3, #1
 801bb96:	9307      	str	r3, [sp, #28]
 801bb98:	4615      	mov	r5, r2
 801bb9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801bb9e:	4294      	cmp	r4, r2
 801bba0:	f300 8099 	bgt.w	801bcd6 <__kernel_rem_pio2+0x2e6>
 801bba4:	f1ba 0f00 	cmp.w	sl, #0
 801bba8:	dd07      	ble.n	801bbba <__kernel_rem_pio2+0x1ca>
 801bbaa:	f1ba 0f01 	cmp.w	sl, #1
 801bbae:	f000 80a5 	beq.w	801bcfc <__kernel_rem_pio2+0x30c>
 801bbb2:	f1ba 0f02 	cmp.w	sl, #2
 801bbb6:	f000 80c1 	beq.w	801bd3c <__kernel_rem_pio2+0x34c>
 801bbba:	9b02      	ldr	r3, [sp, #8]
 801bbbc:	2b02      	cmp	r3, #2
 801bbbe:	d14e      	bne.n	801bc5e <__kernel_rem_pio2+0x26e>
 801bbc0:	4632      	mov	r2, r6
 801bbc2:	463b      	mov	r3, r7
 801bbc4:	4958      	ldr	r1, [pc, #352]	; (801bd28 <__kernel_rem_pio2+0x338>)
 801bbc6:	2000      	movs	r0, #0
 801bbc8:	f7e4 fb5e 	bl	8000288 <__aeabi_dsub>
 801bbcc:	4606      	mov	r6, r0
 801bbce:	460f      	mov	r7, r1
 801bbd0:	2d00      	cmp	r5, #0
 801bbd2:	d044      	beq.n	801bc5e <__kernel_rem_pio2+0x26e>
 801bbd4:	4650      	mov	r0, sl
 801bbd6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801bd18 <__kernel_rem_pio2+0x328>
 801bbda:	f000 fd35 	bl	801c648 <scalbn>
 801bbde:	4630      	mov	r0, r6
 801bbe0:	4639      	mov	r1, r7
 801bbe2:	ec53 2b10 	vmov	r2, r3, d0
 801bbe6:	f7e4 fb4f 	bl	8000288 <__aeabi_dsub>
 801bbea:	4606      	mov	r6, r0
 801bbec:	460f      	mov	r7, r1
 801bbee:	e036      	b.n	801bc5e <__kernel_rem_pio2+0x26e>
 801bbf0:	4b4e      	ldr	r3, [pc, #312]	; (801bd2c <__kernel_rem_pio2+0x33c>)
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	4630      	mov	r0, r6
 801bbf6:	4639      	mov	r1, r7
 801bbf8:	f7e4 fcfe 	bl	80005f8 <__aeabi_dmul>
 801bbfc:	f7e4 ffac 	bl	8000b58 <__aeabi_d2iz>
 801bc00:	f7e4 fc90 	bl	8000524 <__aeabi_i2d>
 801bc04:	4b4a      	ldr	r3, [pc, #296]	; (801bd30 <__kernel_rem_pio2+0x340>)
 801bc06:	2200      	movs	r2, #0
 801bc08:	4680      	mov	r8, r0
 801bc0a:	4689      	mov	r9, r1
 801bc0c:	f7e4 fcf4 	bl	80005f8 <__aeabi_dmul>
 801bc10:	4602      	mov	r2, r0
 801bc12:	460b      	mov	r3, r1
 801bc14:	4630      	mov	r0, r6
 801bc16:	4639      	mov	r1, r7
 801bc18:	f7e4 fb36 	bl	8000288 <__aeabi_dsub>
 801bc1c:	f7e4 ff9c 	bl	8000b58 <__aeabi_d2iz>
 801bc20:	9b02      	ldr	r3, [sp, #8]
 801bc22:	f843 0b04 	str.w	r0, [r3], #4
 801bc26:	3d01      	subs	r5, #1
 801bc28:	9302      	str	r3, [sp, #8]
 801bc2a:	ab70      	add	r3, sp, #448	; 0x1c0
 801bc2c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc34:	4640      	mov	r0, r8
 801bc36:	4649      	mov	r1, r9
 801bc38:	f7e4 fb28 	bl	800028c <__adddf3>
 801bc3c:	4606      	mov	r6, r0
 801bc3e:	460f      	mov	r7, r1
 801bc40:	e75b      	b.n	801bafa <__kernel_rem_pio2+0x10a>
 801bc42:	d105      	bne.n	801bc50 <__kernel_rem_pio2+0x260>
 801bc44:	1e63      	subs	r3, r4, #1
 801bc46:	aa0c      	add	r2, sp, #48	; 0x30
 801bc48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bc4c:	15c3      	asrs	r3, r0, #23
 801bc4e:	e79b      	b.n	801bb88 <__kernel_rem_pio2+0x198>
 801bc50:	4b38      	ldr	r3, [pc, #224]	; (801bd34 <__kernel_rem_pio2+0x344>)
 801bc52:	2200      	movs	r2, #0
 801bc54:	f7e4 ff56 	bl	8000b04 <__aeabi_dcmpge>
 801bc58:	2800      	cmp	r0, #0
 801bc5a:	d139      	bne.n	801bcd0 <__kernel_rem_pio2+0x2e0>
 801bc5c:	9002      	str	r0, [sp, #8]
 801bc5e:	2200      	movs	r2, #0
 801bc60:	2300      	movs	r3, #0
 801bc62:	4630      	mov	r0, r6
 801bc64:	4639      	mov	r1, r7
 801bc66:	f7e4 ff2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801bc6a:	2800      	cmp	r0, #0
 801bc6c:	f000 80b4 	beq.w	801bdd8 <__kernel_rem_pio2+0x3e8>
 801bc70:	f104 3bff 	add.w	fp, r4, #4294967295
 801bc74:	465b      	mov	r3, fp
 801bc76:	2200      	movs	r2, #0
 801bc78:	9904      	ldr	r1, [sp, #16]
 801bc7a:	428b      	cmp	r3, r1
 801bc7c:	da65      	bge.n	801bd4a <__kernel_rem_pio2+0x35a>
 801bc7e:	2a00      	cmp	r2, #0
 801bc80:	d07b      	beq.n	801bd7a <__kernel_rem_pio2+0x38a>
 801bc82:	ab0c      	add	r3, sp, #48	; 0x30
 801bc84:	f1aa 0a18 	sub.w	sl, sl, #24
 801bc88:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	f000 80a0 	beq.w	801bdd2 <__kernel_rem_pio2+0x3e2>
 801bc92:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801bd18 <__kernel_rem_pio2+0x328>
 801bc96:	4650      	mov	r0, sl
 801bc98:	f000 fcd6 	bl	801c648 <scalbn>
 801bc9c:	4f23      	ldr	r7, [pc, #140]	; (801bd2c <__kernel_rem_pio2+0x33c>)
 801bc9e:	ec55 4b10 	vmov	r4, r5, d0
 801bca2:	46d8      	mov	r8, fp
 801bca4:	2600      	movs	r6, #0
 801bca6:	f1b8 0f00 	cmp.w	r8, #0
 801bcaa:	f280 80cf 	bge.w	801be4c <__kernel_rem_pio2+0x45c>
 801bcae:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801bd10 <__kernel_rem_pio2+0x320>
 801bcb2:	465f      	mov	r7, fp
 801bcb4:	f04f 0800 	mov.w	r8, #0
 801bcb8:	2f00      	cmp	r7, #0
 801bcba:	f2c0 80fd 	blt.w	801beb8 <__kernel_rem_pio2+0x4c8>
 801bcbe:	ab70      	add	r3, sp, #448	; 0x1c0
 801bcc0:	f8df a074 	ldr.w	sl, [pc, #116]	; 801bd38 <__kernel_rem_pio2+0x348>
 801bcc4:	ec55 4b18 	vmov	r4, r5, d8
 801bcc8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801bccc:	2600      	movs	r6, #0
 801bcce:	e0e5      	b.n	801be9c <__kernel_rem_pio2+0x4ac>
 801bcd0:	2302      	movs	r3, #2
 801bcd2:	9302      	str	r3, [sp, #8]
 801bcd4:	e75c      	b.n	801bb90 <__kernel_rem_pio2+0x1a0>
 801bcd6:	f8db 3000 	ldr.w	r3, [fp]
 801bcda:	b955      	cbnz	r5, 801bcf2 <__kernel_rem_pio2+0x302>
 801bcdc:	b123      	cbz	r3, 801bce8 <__kernel_rem_pio2+0x2f8>
 801bcde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801bce2:	f8cb 3000 	str.w	r3, [fp]
 801bce6:	2301      	movs	r3, #1
 801bce8:	3201      	adds	r2, #1
 801bcea:	f10b 0b04 	add.w	fp, fp, #4
 801bcee:	461d      	mov	r5, r3
 801bcf0:	e755      	b.n	801bb9e <__kernel_rem_pio2+0x1ae>
 801bcf2:	1acb      	subs	r3, r1, r3
 801bcf4:	f8cb 3000 	str.w	r3, [fp]
 801bcf8:	462b      	mov	r3, r5
 801bcfa:	e7f5      	b.n	801bce8 <__kernel_rem_pio2+0x2f8>
 801bcfc:	1e62      	subs	r2, r4, #1
 801bcfe:	ab0c      	add	r3, sp, #48	; 0x30
 801bd00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801bd08:	a90c      	add	r1, sp, #48	; 0x30
 801bd0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801bd0e:	e754      	b.n	801bbba <__kernel_rem_pio2+0x1ca>
	...
 801bd1c:	3ff00000 	.word	0x3ff00000
 801bd20:	0801d110 	.word	0x0801d110
 801bd24:	40200000 	.word	0x40200000
 801bd28:	3ff00000 	.word	0x3ff00000
 801bd2c:	3e700000 	.word	0x3e700000
 801bd30:	41700000 	.word	0x41700000
 801bd34:	3fe00000 	.word	0x3fe00000
 801bd38:	0801d0d0 	.word	0x0801d0d0
 801bd3c:	1e62      	subs	r2, r4, #1
 801bd3e:	ab0c      	add	r3, sp, #48	; 0x30
 801bd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801bd48:	e7de      	b.n	801bd08 <__kernel_rem_pio2+0x318>
 801bd4a:	a90c      	add	r1, sp, #48	; 0x30
 801bd4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801bd50:	3b01      	subs	r3, #1
 801bd52:	430a      	orrs	r2, r1
 801bd54:	e790      	b.n	801bc78 <__kernel_rem_pio2+0x288>
 801bd56:	3301      	adds	r3, #1
 801bd58:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bd5c:	2900      	cmp	r1, #0
 801bd5e:	d0fa      	beq.n	801bd56 <__kernel_rem_pio2+0x366>
 801bd60:	9a08      	ldr	r2, [sp, #32]
 801bd62:	18e3      	adds	r3, r4, r3
 801bd64:	18a6      	adds	r6, r4, r2
 801bd66:	aa20      	add	r2, sp, #128	; 0x80
 801bd68:	1c65      	adds	r5, r4, #1
 801bd6a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801bd6e:	9302      	str	r3, [sp, #8]
 801bd70:	9b02      	ldr	r3, [sp, #8]
 801bd72:	42ab      	cmp	r3, r5
 801bd74:	da04      	bge.n	801bd80 <__kernel_rem_pio2+0x390>
 801bd76:	461c      	mov	r4, r3
 801bd78:	e6b5      	b.n	801bae6 <__kernel_rem_pio2+0xf6>
 801bd7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bd7c:	2301      	movs	r3, #1
 801bd7e:	e7eb      	b.n	801bd58 <__kernel_rem_pio2+0x368>
 801bd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bd86:	f7e4 fbcd 	bl	8000524 <__aeabi_i2d>
 801bd8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801bd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd90:	46b3      	mov	fp, r6
 801bd92:	461c      	mov	r4, r3
 801bd94:	2700      	movs	r7, #0
 801bd96:	f04f 0800 	mov.w	r8, #0
 801bd9a:	f04f 0900 	mov.w	r9, #0
 801bd9e:	9b06      	ldr	r3, [sp, #24]
 801bda0:	429f      	cmp	r7, r3
 801bda2:	dd06      	ble.n	801bdb2 <__kernel_rem_pio2+0x3c2>
 801bda4:	ab70      	add	r3, sp, #448	; 0x1c0
 801bda6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bdaa:	e9c3 8900 	strd	r8, r9, [r3]
 801bdae:	3501      	adds	r5, #1
 801bdb0:	e7de      	b.n	801bd70 <__kernel_rem_pio2+0x380>
 801bdb2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801bdb6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801bdba:	f7e4 fc1d 	bl	80005f8 <__aeabi_dmul>
 801bdbe:	4602      	mov	r2, r0
 801bdc0:	460b      	mov	r3, r1
 801bdc2:	4640      	mov	r0, r8
 801bdc4:	4649      	mov	r1, r9
 801bdc6:	f7e4 fa61 	bl	800028c <__adddf3>
 801bdca:	3701      	adds	r7, #1
 801bdcc:	4680      	mov	r8, r0
 801bdce:	4689      	mov	r9, r1
 801bdd0:	e7e5      	b.n	801bd9e <__kernel_rem_pio2+0x3ae>
 801bdd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bdd6:	e754      	b.n	801bc82 <__kernel_rem_pio2+0x292>
 801bdd8:	ec47 6b10 	vmov	d0, r6, r7
 801bddc:	f1ca 0000 	rsb	r0, sl, #0
 801bde0:	f000 fc32 	bl	801c648 <scalbn>
 801bde4:	ec57 6b10 	vmov	r6, r7, d0
 801bde8:	4b9f      	ldr	r3, [pc, #636]	; (801c068 <__kernel_rem_pio2+0x678>)
 801bdea:	ee10 0a10 	vmov	r0, s0
 801bdee:	2200      	movs	r2, #0
 801bdf0:	4639      	mov	r1, r7
 801bdf2:	f7e4 fe87 	bl	8000b04 <__aeabi_dcmpge>
 801bdf6:	b300      	cbz	r0, 801be3a <__kernel_rem_pio2+0x44a>
 801bdf8:	4b9c      	ldr	r3, [pc, #624]	; (801c06c <__kernel_rem_pio2+0x67c>)
 801bdfa:	2200      	movs	r2, #0
 801bdfc:	4630      	mov	r0, r6
 801bdfe:	4639      	mov	r1, r7
 801be00:	f7e4 fbfa 	bl	80005f8 <__aeabi_dmul>
 801be04:	f7e4 fea8 	bl	8000b58 <__aeabi_d2iz>
 801be08:	4605      	mov	r5, r0
 801be0a:	f7e4 fb8b 	bl	8000524 <__aeabi_i2d>
 801be0e:	4b96      	ldr	r3, [pc, #600]	; (801c068 <__kernel_rem_pio2+0x678>)
 801be10:	2200      	movs	r2, #0
 801be12:	f7e4 fbf1 	bl	80005f8 <__aeabi_dmul>
 801be16:	460b      	mov	r3, r1
 801be18:	4602      	mov	r2, r0
 801be1a:	4639      	mov	r1, r7
 801be1c:	4630      	mov	r0, r6
 801be1e:	f7e4 fa33 	bl	8000288 <__aeabi_dsub>
 801be22:	f7e4 fe99 	bl	8000b58 <__aeabi_d2iz>
 801be26:	f104 0b01 	add.w	fp, r4, #1
 801be2a:	ab0c      	add	r3, sp, #48	; 0x30
 801be2c:	f10a 0a18 	add.w	sl, sl, #24
 801be30:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801be34:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801be38:	e72b      	b.n	801bc92 <__kernel_rem_pio2+0x2a2>
 801be3a:	4630      	mov	r0, r6
 801be3c:	4639      	mov	r1, r7
 801be3e:	f7e4 fe8b 	bl	8000b58 <__aeabi_d2iz>
 801be42:	ab0c      	add	r3, sp, #48	; 0x30
 801be44:	46a3      	mov	fp, r4
 801be46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801be4a:	e722      	b.n	801bc92 <__kernel_rem_pio2+0x2a2>
 801be4c:	ab70      	add	r3, sp, #448	; 0x1c0
 801be4e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801be52:	ab0c      	add	r3, sp, #48	; 0x30
 801be54:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801be58:	f7e4 fb64 	bl	8000524 <__aeabi_i2d>
 801be5c:	4622      	mov	r2, r4
 801be5e:	462b      	mov	r3, r5
 801be60:	f7e4 fbca 	bl	80005f8 <__aeabi_dmul>
 801be64:	4632      	mov	r2, r6
 801be66:	e9c9 0100 	strd	r0, r1, [r9]
 801be6a:	463b      	mov	r3, r7
 801be6c:	4620      	mov	r0, r4
 801be6e:	4629      	mov	r1, r5
 801be70:	f7e4 fbc2 	bl	80005f8 <__aeabi_dmul>
 801be74:	f108 38ff 	add.w	r8, r8, #4294967295
 801be78:	4604      	mov	r4, r0
 801be7a:	460d      	mov	r5, r1
 801be7c:	e713      	b.n	801bca6 <__kernel_rem_pio2+0x2b6>
 801be7e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801be82:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801be86:	f7e4 fbb7 	bl	80005f8 <__aeabi_dmul>
 801be8a:	4602      	mov	r2, r0
 801be8c:	460b      	mov	r3, r1
 801be8e:	4620      	mov	r0, r4
 801be90:	4629      	mov	r1, r5
 801be92:	f7e4 f9fb 	bl	800028c <__adddf3>
 801be96:	3601      	adds	r6, #1
 801be98:	4604      	mov	r4, r0
 801be9a:	460d      	mov	r5, r1
 801be9c:	9b04      	ldr	r3, [sp, #16]
 801be9e:	429e      	cmp	r6, r3
 801bea0:	dc01      	bgt.n	801bea6 <__kernel_rem_pio2+0x4b6>
 801bea2:	45b0      	cmp	r8, r6
 801bea4:	daeb      	bge.n	801be7e <__kernel_rem_pio2+0x48e>
 801bea6:	ab48      	add	r3, sp, #288	; 0x120
 801bea8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801beac:	e9c3 4500 	strd	r4, r5, [r3]
 801beb0:	3f01      	subs	r7, #1
 801beb2:	f108 0801 	add.w	r8, r8, #1
 801beb6:	e6ff      	b.n	801bcb8 <__kernel_rem_pio2+0x2c8>
 801beb8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801beba:	2b02      	cmp	r3, #2
 801bebc:	dc0b      	bgt.n	801bed6 <__kernel_rem_pio2+0x4e6>
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	dc6e      	bgt.n	801bfa0 <__kernel_rem_pio2+0x5b0>
 801bec2:	d045      	beq.n	801bf50 <__kernel_rem_pio2+0x560>
 801bec4:	9b07      	ldr	r3, [sp, #28]
 801bec6:	f003 0007 	and.w	r0, r3, #7
 801beca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801bece:	ecbd 8b02 	vpop	{d8}
 801bed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bed6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bed8:	2b03      	cmp	r3, #3
 801beda:	d1f3      	bne.n	801bec4 <__kernel_rem_pio2+0x4d4>
 801bedc:	ab48      	add	r3, sp, #288	; 0x120
 801bede:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801bee2:	46d0      	mov	r8, sl
 801bee4:	46d9      	mov	r9, fp
 801bee6:	f1b9 0f00 	cmp.w	r9, #0
 801beea:	f1a8 0808 	sub.w	r8, r8, #8
 801beee:	dc64      	bgt.n	801bfba <__kernel_rem_pio2+0x5ca>
 801bef0:	465c      	mov	r4, fp
 801bef2:	2c01      	cmp	r4, #1
 801bef4:	f1aa 0a08 	sub.w	sl, sl, #8
 801bef8:	dc7e      	bgt.n	801bff8 <__kernel_rem_pio2+0x608>
 801befa:	2000      	movs	r0, #0
 801befc:	2100      	movs	r1, #0
 801befe:	f1bb 0f01 	cmp.w	fp, #1
 801bf02:	f300 8097 	bgt.w	801c034 <__kernel_rem_pio2+0x644>
 801bf06:	9b02      	ldr	r3, [sp, #8]
 801bf08:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801bf0c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	f040 8099 	bne.w	801c048 <__kernel_rem_pio2+0x658>
 801bf16:	9b01      	ldr	r3, [sp, #4]
 801bf18:	e9c3 5600 	strd	r5, r6, [r3]
 801bf1c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801bf20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bf24:	e7ce      	b.n	801bec4 <__kernel_rem_pio2+0x4d4>
 801bf26:	ab48      	add	r3, sp, #288	; 0x120
 801bf28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf30:	f7e4 f9ac 	bl	800028c <__adddf3>
 801bf34:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bf38:	f1bb 0f00 	cmp.w	fp, #0
 801bf3c:	daf3      	bge.n	801bf26 <__kernel_rem_pio2+0x536>
 801bf3e:	9b02      	ldr	r3, [sp, #8]
 801bf40:	b113      	cbz	r3, 801bf48 <__kernel_rem_pio2+0x558>
 801bf42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bf46:	4619      	mov	r1, r3
 801bf48:	9b01      	ldr	r3, [sp, #4]
 801bf4a:	e9c3 0100 	strd	r0, r1, [r3]
 801bf4e:	e7b9      	b.n	801bec4 <__kernel_rem_pio2+0x4d4>
 801bf50:	2000      	movs	r0, #0
 801bf52:	2100      	movs	r1, #0
 801bf54:	e7f0      	b.n	801bf38 <__kernel_rem_pio2+0x548>
 801bf56:	ab48      	add	r3, sp, #288	; 0x120
 801bf58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf60:	f7e4 f994 	bl	800028c <__adddf3>
 801bf64:	3c01      	subs	r4, #1
 801bf66:	2c00      	cmp	r4, #0
 801bf68:	daf5      	bge.n	801bf56 <__kernel_rem_pio2+0x566>
 801bf6a:	9b02      	ldr	r3, [sp, #8]
 801bf6c:	b1e3      	cbz	r3, 801bfa8 <__kernel_rem_pio2+0x5b8>
 801bf6e:	4602      	mov	r2, r0
 801bf70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bf74:	9c01      	ldr	r4, [sp, #4]
 801bf76:	e9c4 2300 	strd	r2, r3, [r4]
 801bf7a:	4602      	mov	r2, r0
 801bf7c:	460b      	mov	r3, r1
 801bf7e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801bf82:	f7e4 f981 	bl	8000288 <__aeabi_dsub>
 801bf86:	ad4a      	add	r5, sp, #296	; 0x128
 801bf88:	2401      	movs	r4, #1
 801bf8a:	45a3      	cmp	fp, r4
 801bf8c:	da0f      	bge.n	801bfae <__kernel_rem_pio2+0x5be>
 801bf8e:	9b02      	ldr	r3, [sp, #8]
 801bf90:	b113      	cbz	r3, 801bf98 <__kernel_rem_pio2+0x5a8>
 801bf92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bf96:	4619      	mov	r1, r3
 801bf98:	9b01      	ldr	r3, [sp, #4]
 801bf9a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801bf9e:	e791      	b.n	801bec4 <__kernel_rem_pio2+0x4d4>
 801bfa0:	465c      	mov	r4, fp
 801bfa2:	2000      	movs	r0, #0
 801bfa4:	2100      	movs	r1, #0
 801bfa6:	e7de      	b.n	801bf66 <__kernel_rem_pio2+0x576>
 801bfa8:	4602      	mov	r2, r0
 801bfaa:	460b      	mov	r3, r1
 801bfac:	e7e2      	b.n	801bf74 <__kernel_rem_pio2+0x584>
 801bfae:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801bfb2:	f7e4 f96b 	bl	800028c <__adddf3>
 801bfb6:	3401      	adds	r4, #1
 801bfb8:	e7e7      	b.n	801bf8a <__kernel_rem_pio2+0x59a>
 801bfba:	e9d8 4500 	ldrd	r4, r5, [r8]
 801bfbe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801bfc2:	4620      	mov	r0, r4
 801bfc4:	4632      	mov	r2, r6
 801bfc6:	463b      	mov	r3, r7
 801bfc8:	4629      	mov	r1, r5
 801bfca:	f7e4 f95f 	bl	800028c <__adddf3>
 801bfce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bfd2:	4602      	mov	r2, r0
 801bfd4:	460b      	mov	r3, r1
 801bfd6:	4620      	mov	r0, r4
 801bfd8:	4629      	mov	r1, r5
 801bfda:	f7e4 f955 	bl	8000288 <__aeabi_dsub>
 801bfde:	4632      	mov	r2, r6
 801bfe0:	463b      	mov	r3, r7
 801bfe2:	f7e4 f953 	bl	800028c <__adddf3>
 801bfe6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bfea:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801bfee:	ed88 7b00 	vstr	d7, [r8]
 801bff2:	f109 39ff 	add.w	r9, r9, #4294967295
 801bff6:	e776      	b.n	801bee6 <__kernel_rem_pio2+0x4f6>
 801bff8:	e9da 8900 	ldrd	r8, r9, [sl]
 801bffc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801c000:	4640      	mov	r0, r8
 801c002:	4632      	mov	r2, r6
 801c004:	463b      	mov	r3, r7
 801c006:	4649      	mov	r1, r9
 801c008:	f7e4 f940 	bl	800028c <__adddf3>
 801c00c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c010:	4602      	mov	r2, r0
 801c012:	460b      	mov	r3, r1
 801c014:	4640      	mov	r0, r8
 801c016:	4649      	mov	r1, r9
 801c018:	f7e4 f936 	bl	8000288 <__aeabi_dsub>
 801c01c:	4632      	mov	r2, r6
 801c01e:	463b      	mov	r3, r7
 801c020:	f7e4 f934 	bl	800028c <__adddf3>
 801c024:	ed9d 7b04 	vldr	d7, [sp, #16]
 801c028:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801c02c:	ed8a 7b00 	vstr	d7, [sl]
 801c030:	3c01      	subs	r4, #1
 801c032:	e75e      	b.n	801bef2 <__kernel_rem_pio2+0x502>
 801c034:	ab48      	add	r3, sp, #288	; 0x120
 801c036:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c03e:	f7e4 f925 	bl	800028c <__adddf3>
 801c042:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c046:	e75a      	b.n	801befe <__kernel_rem_pio2+0x50e>
 801c048:	9b01      	ldr	r3, [sp, #4]
 801c04a:	9a01      	ldr	r2, [sp, #4]
 801c04c:	601d      	str	r5, [r3, #0]
 801c04e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801c052:	605c      	str	r4, [r3, #4]
 801c054:	609f      	str	r7, [r3, #8]
 801c056:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801c05a:	60d3      	str	r3, [r2, #12]
 801c05c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c060:	6110      	str	r0, [r2, #16]
 801c062:	6153      	str	r3, [r2, #20]
 801c064:	e72e      	b.n	801bec4 <__kernel_rem_pio2+0x4d4>
 801c066:	bf00      	nop
 801c068:	41700000 	.word	0x41700000
 801c06c:	3e700000 	.word	0x3e700000

0801c070 <__kernel_sin>:
 801c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c074:	ed2d 8b04 	vpush	{d8-d9}
 801c078:	eeb0 8a41 	vmov.f32	s16, s2
 801c07c:	eef0 8a61 	vmov.f32	s17, s3
 801c080:	ec55 4b10 	vmov	r4, r5, d0
 801c084:	b083      	sub	sp, #12
 801c086:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c08a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801c08e:	9001      	str	r0, [sp, #4]
 801c090:	da06      	bge.n	801c0a0 <__kernel_sin+0x30>
 801c092:	ee10 0a10 	vmov	r0, s0
 801c096:	4629      	mov	r1, r5
 801c098:	f7e4 fd5e 	bl	8000b58 <__aeabi_d2iz>
 801c09c:	2800      	cmp	r0, #0
 801c09e:	d051      	beq.n	801c144 <__kernel_sin+0xd4>
 801c0a0:	4622      	mov	r2, r4
 801c0a2:	462b      	mov	r3, r5
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	4629      	mov	r1, r5
 801c0a8:	f7e4 faa6 	bl	80005f8 <__aeabi_dmul>
 801c0ac:	4682      	mov	sl, r0
 801c0ae:	468b      	mov	fp, r1
 801c0b0:	4602      	mov	r2, r0
 801c0b2:	460b      	mov	r3, r1
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	4629      	mov	r1, r5
 801c0b8:	f7e4 fa9e 	bl	80005f8 <__aeabi_dmul>
 801c0bc:	a341      	add	r3, pc, #260	; (adr r3, 801c1c4 <__kernel_sin+0x154>)
 801c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0c2:	4680      	mov	r8, r0
 801c0c4:	4689      	mov	r9, r1
 801c0c6:	4650      	mov	r0, sl
 801c0c8:	4659      	mov	r1, fp
 801c0ca:	f7e4 fa95 	bl	80005f8 <__aeabi_dmul>
 801c0ce:	a33f      	add	r3, pc, #252	; (adr r3, 801c1cc <__kernel_sin+0x15c>)
 801c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d4:	f7e4 f8d8 	bl	8000288 <__aeabi_dsub>
 801c0d8:	4652      	mov	r2, sl
 801c0da:	465b      	mov	r3, fp
 801c0dc:	f7e4 fa8c 	bl	80005f8 <__aeabi_dmul>
 801c0e0:	a33c      	add	r3, pc, #240	; (adr r3, 801c1d4 <__kernel_sin+0x164>)
 801c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e6:	f7e4 f8d1 	bl	800028c <__adddf3>
 801c0ea:	4652      	mov	r2, sl
 801c0ec:	465b      	mov	r3, fp
 801c0ee:	f7e4 fa83 	bl	80005f8 <__aeabi_dmul>
 801c0f2:	a33a      	add	r3, pc, #232	; (adr r3, 801c1dc <__kernel_sin+0x16c>)
 801c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f8:	f7e4 f8c6 	bl	8000288 <__aeabi_dsub>
 801c0fc:	4652      	mov	r2, sl
 801c0fe:	465b      	mov	r3, fp
 801c100:	f7e4 fa7a 	bl	80005f8 <__aeabi_dmul>
 801c104:	a337      	add	r3, pc, #220	; (adr r3, 801c1e4 <__kernel_sin+0x174>)
 801c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c10a:	f7e4 f8bf 	bl	800028c <__adddf3>
 801c10e:	9b01      	ldr	r3, [sp, #4]
 801c110:	4606      	mov	r6, r0
 801c112:	460f      	mov	r7, r1
 801c114:	b9eb      	cbnz	r3, 801c152 <__kernel_sin+0xe2>
 801c116:	4602      	mov	r2, r0
 801c118:	460b      	mov	r3, r1
 801c11a:	4650      	mov	r0, sl
 801c11c:	4659      	mov	r1, fp
 801c11e:	f7e4 fa6b 	bl	80005f8 <__aeabi_dmul>
 801c122:	a325      	add	r3, pc, #148	; (adr r3, 801c1b8 <__kernel_sin+0x148>)
 801c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c128:	f7e4 f8ae 	bl	8000288 <__aeabi_dsub>
 801c12c:	4642      	mov	r2, r8
 801c12e:	464b      	mov	r3, r9
 801c130:	f7e4 fa62 	bl	80005f8 <__aeabi_dmul>
 801c134:	4602      	mov	r2, r0
 801c136:	460b      	mov	r3, r1
 801c138:	4620      	mov	r0, r4
 801c13a:	4629      	mov	r1, r5
 801c13c:	f7e4 f8a6 	bl	800028c <__adddf3>
 801c140:	4604      	mov	r4, r0
 801c142:	460d      	mov	r5, r1
 801c144:	ec45 4b10 	vmov	d0, r4, r5
 801c148:	b003      	add	sp, #12
 801c14a:	ecbd 8b04 	vpop	{d8-d9}
 801c14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c152:	4b1b      	ldr	r3, [pc, #108]	; (801c1c0 <__kernel_sin+0x150>)
 801c154:	ec51 0b18 	vmov	r0, r1, d8
 801c158:	2200      	movs	r2, #0
 801c15a:	f7e4 fa4d 	bl	80005f8 <__aeabi_dmul>
 801c15e:	4632      	mov	r2, r6
 801c160:	ec41 0b19 	vmov	d9, r0, r1
 801c164:	463b      	mov	r3, r7
 801c166:	4640      	mov	r0, r8
 801c168:	4649      	mov	r1, r9
 801c16a:	f7e4 fa45 	bl	80005f8 <__aeabi_dmul>
 801c16e:	4602      	mov	r2, r0
 801c170:	460b      	mov	r3, r1
 801c172:	ec51 0b19 	vmov	r0, r1, d9
 801c176:	f7e4 f887 	bl	8000288 <__aeabi_dsub>
 801c17a:	4652      	mov	r2, sl
 801c17c:	465b      	mov	r3, fp
 801c17e:	f7e4 fa3b 	bl	80005f8 <__aeabi_dmul>
 801c182:	ec53 2b18 	vmov	r2, r3, d8
 801c186:	f7e4 f87f 	bl	8000288 <__aeabi_dsub>
 801c18a:	a30b      	add	r3, pc, #44	; (adr r3, 801c1b8 <__kernel_sin+0x148>)
 801c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c190:	4606      	mov	r6, r0
 801c192:	460f      	mov	r7, r1
 801c194:	4640      	mov	r0, r8
 801c196:	4649      	mov	r1, r9
 801c198:	f7e4 fa2e 	bl	80005f8 <__aeabi_dmul>
 801c19c:	4602      	mov	r2, r0
 801c19e:	460b      	mov	r3, r1
 801c1a0:	4630      	mov	r0, r6
 801c1a2:	4639      	mov	r1, r7
 801c1a4:	f7e4 f872 	bl	800028c <__adddf3>
 801c1a8:	4602      	mov	r2, r0
 801c1aa:	460b      	mov	r3, r1
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	4629      	mov	r1, r5
 801c1b0:	f7e4 f86a 	bl	8000288 <__aeabi_dsub>
 801c1b4:	e7c4      	b.n	801c140 <__kernel_sin+0xd0>
 801c1b6:	bf00      	nop
 801c1b8:	55555549 	.word	0x55555549
 801c1bc:	3fc55555 	.word	0x3fc55555
 801c1c0:	3fe00000 	.word	0x3fe00000
 801c1c4:	5acfd57c 	.word	0x5acfd57c
 801c1c8:	3de5d93a 	.word	0x3de5d93a
 801c1cc:	8a2b9ceb 	.word	0x8a2b9ceb
 801c1d0:	3e5ae5e6 	.word	0x3e5ae5e6
 801c1d4:	57b1fe7d 	.word	0x57b1fe7d
 801c1d8:	3ec71de3 	.word	0x3ec71de3
 801c1dc:	19c161d5 	.word	0x19c161d5
 801c1e0:	3f2a01a0 	.word	0x3f2a01a0
 801c1e4:	1110f8a6 	.word	0x1110f8a6
 801c1e8:	3f811111 	.word	0x3f811111
 801c1ec:	00000000 	.word	0x00000000

0801c1f0 <atan>:
 801c1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1f4:	ec55 4b10 	vmov	r4, r5, d0
 801c1f8:	4bc3      	ldr	r3, [pc, #780]	; (801c508 <atan+0x318>)
 801c1fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c1fe:	429e      	cmp	r6, r3
 801c200:	46ab      	mov	fp, r5
 801c202:	dd18      	ble.n	801c236 <atan+0x46>
 801c204:	4bc1      	ldr	r3, [pc, #772]	; (801c50c <atan+0x31c>)
 801c206:	429e      	cmp	r6, r3
 801c208:	dc01      	bgt.n	801c20e <atan+0x1e>
 801c20a:	d109      	bne.n	801c220 <atan+0x30>
 801c20c:	b144      	cbz	r4, 801c220 <atan+0x30>
 801c20e:	4622      	mov	r2, r4
 801c210:	462b      	mov	r3, r5
 801c212:	4620      	mov	r0, r4
 801c214:	4629      	mov	r1, r5
 801c216:	f7e4 f839 	bl	800028c <__adddf3>
 801c21a:	4604      	mov	r4, r0
 801c21c:	460d      	mov	r5, r1
 801c21e:	e006      	b.n	801c22e <atan+0x3e>
 801c220:	f1bb 0f00 	cmp.w	fp, #0
 801c224:	f300 8131 	bgt.w	801c48a <atan+0x29a>
 801c228:	a59b      	add	r5, pc, #620	; (adr r5, 801c498 <atan+0x2a8>)
 801c22a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c22e:	ec45 4b10 	vmov	d0, r4, r5
 801c232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c236:	4bb6      	ldr	r3, [pc, #728]	; (801c510 <atan+0x320>)
 801c238:	429e      	cmp	r6, r3
 801c23a:	dc14      	bgt.n	801c266 <atan+0x76>
 801c23c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801c240:	429e      	cmp	r6, r3
 801c242:	dc0d      	bgt.n	801c260 <atan+0x70>
 801c244:	a396      	add	r3, pc, #600	; (adr r3, 801c4a0 <atan+0x2b0>)
 801c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c24a:	ee10 0a10 	vmov	r0, s0
 801c24e:	4629      	mov	r1, r5
 801c250:	f7e4 f81c 	bl	800028c <__adddf3>
 801c254:	4baf      	ldr	r3, [pc, #700]	; (801c514 <atan+0x324>)
 801c256:	2200      	movs	r2, #0
 801c258:	f7e4 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 801c25c:	2800      	cmp	r0, #0
 801c25e:	d1e6      	bne.n	801c22e <atan+0x3e>
 801c260:	f04f 3aff 	mov.w	sl, #4294967295
 801c264:	e02b      	b.n	801c2be <atan+0xce>
 801c266:	f000 f963 	bl	801c530 <fabs>
 801c26a:	4bab      	ldr	r3, [pc, #684]	; (801c518 <atan+0x328>)
 801c26c:	429e      	cmp	r6, r3
 801c26e:	ec55 4b10 	vmov	r4, r5, d0
 801c272:	f300 80bf 	bgt.w	801c3f4 <atan+0x204>
 801c276:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801c27a:	429e      	cmp	r6, r3
 801c27c:	f300 80a0 	bgt.w	801c3c0 <atan+0x1d0>
 801c280:	ee10 2a10 	vmov	r2, s0
 801c284:	ee10 0a10 	vmov	r0, s0
 801c288:	462b      	mov	r3, r5
 801c28a:	4629      	mov	r1, r5
 801c28c:	f7e3 fffe 	bl	800028c <__adddf3>
 801c290:	4ba0      	ldr	r3, [pc, #640]	; (801c514 <atan+0x324>)
 801c292:	2200      	movs	r2, #0
 801c294:	f7e3 fff8 	bl	8000288 <__aeabi_dsub>
 801c298:	2200      	movs	r2, #0
 801c29a:	4606      	mov	r6, r0
 801c29c:	460f      	mov	r7, r1
 801c29e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c2a2:	4620      	mov	r0, r4
 801c2a4:	4629      	mov	r1, r5
 801c2a6:	f7e3 fff1 	bl	800028c <__adddf3>
 801c2aa:	4602      	mov	r2, r0
 801c2ac:	460b      	mov	r3, r1
 801c2ae:	4630      	mov	r0, r6
 801c2b0:	4639      	mov	r1, r7
 801c2b2:	f7e4 facb 	bl	800084c <__aeabi_ddiv>
 801c2b6:	f04f 0a00 	mov.w	sl, #0
 801c2ba:	4604      	mov	r4, r0
 801c2bc:	460d      	mov	r5, r1
 801c2be:	4622      	mov	r2, r4
 801c2c0:	462b      	mov	r3, r5
 801c2c2:	4620      	mov	r0, r4
 801c2c4:	4629      	mov	r1, r5
 801c2c6:	f7e4 f997 	bl	80005f8 <__aeabi_dmul>
 801c2ca:	4602      	mov	r2, r0
 801c2cc:	460b      	mov	r3, r1
 801c2ce:	4680      	mov	r8, r0
 801c2d0:	4689      	mov	r9, r1
 801c2d2:	f7e4 f991 	bl	80005f8 <__aeabi_dmul>
 801c2d6:	a374      	add	r3, pc, #464	; (adr r3, 801c4a8 <atan+0x2b8>)
 801c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2dc:	4606      	mov	r6, r0
 801c2de:	460f      	mov	r7, r1
 801c2e0:	f7e4 f98a 	bl	80005f8 <__aeabi_dmul>
 801c2e4:	a372      	add	r3, pc, #456	; (adr r3, 801c4b0 <atan+0x2c0>)
 801c2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2ea:	f7e3 ffcf 	bl	800028c <__adddf3>
 801c2ee:	4632      	mov	r2, r6
 801c2f0:	463b      	mov	r3, r7
 801c2f2:	f7e4 f981 	bl	80005f8 <__aeabi_dmul>
 801c2f6:	a370      	add	r3, pc, #448	; (adr r3, 801c4b8 <atan+0x2c8>)
 801c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2fc:	f7e3 ffc6 	bl	800028c <__adddf3>
 801c300:	4632      	mov	r2, r6
 801c302:	463b      	mov	r3, r7
 801c304:	f7e4 f978 	bl	80005f8 <__aeabi_dmul>
 801c308:	a36d      	add	r3, pc, #436	; (adr r3, 801c4c0 <atan+0x2d0>)
 801c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c30e:	f7e3 ffbd 	bl	800028c <__adddf3>
 801c312:	4632      	mov	r2, r6
 801c314:	463b      	mov	r3, r7
 801c316:	f7e4 f96f 	bl	80005f8 <__aeabi_dmul>
 801c31a:	a36b      	add	r3, pc, #428	; (adr r3, 801c4c8 <atan+0x2d8>)
 801c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c320:	f7e3 ffb4 	bl	800028c <__adddf3>
 801c324:	4632      	mov	r2, r6
 801c326:	463b      	mov	r3, r7
 801c328:	f7e4 f966 	bl	80005f8 <__aeabi_dmul>
 801c32c:	a368      	add	r3, pc, #416	; (adr r3, 801c4d0 <atan+0x2e0>)
 801c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c332:	f7e3 ffab 	bl	800028c <__adddf3>
 801c336:	4642      	mov	r2, r8
 801c338:	464b      	mov	r3, r9
 801c33a:	f7e4 f95d 	bl	80005f8 <__aeabi_dmul>
 801c33e:	a366      	add	r3, pc, #408	; (adr r3, 801c4d8 <atan+0x2e8>)
 801c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c344:	4680      	mov	r8, r0
 801c346:	4689      	mov	r9, r1
 801c348:	4630      	mov	r0, r6
 801c34a:	4639      	mov	r1, r7
 801c34c:	f7e4 f954 	bl	80005f8 <__aeabi_dmul>
 801c350:	a363      	add	r3, pc, #396	; (adr r3, 801c4e0 <atan+0x2f0>)
 801c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c356:	f7e3 ff97 	bl	8000288 <__aeabi_dsub>
 801c35a:	4632      	mov	r2, r6
 801c35c:	463b      	mov	r3, r7
 801c35e:	f7e4 f94b 	bl	80005f8 <__aeabi_dmul>
 801c362:	a361      	add	r3, pc, #388	; (adr r3, 801c4e8 <atan+0x2f8>)
 801c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c368:	f7e3 ff8e 	bl	8000288 <__aeabi_dsub>
 801c36c:	4632      	mov	r2, r6
 801c36e:	463b      	mov	r3, r7
 801c370:	f7e4 f942 	bl	80005f8 <__aeabi_dmul>
 801c374:	a35e      	add	r3, pc, #376	; (adr r3, 801c4f0 <atan+0x300>)
 801c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c37a:	f7e3 ff85 	bl	8000288 <__aeabi_dsub>
 801c37e:	4632      	mov	r2, r6
 801c380:	463b      	mov	r3, r7
 801c382:	f7e4 f939 	bl	80005f8 <__aeabi_dmul>
 801c386:	a35c      	add	r3, pc, #368	; (adr r3, 801c4f8 <atan+0x308>)
 801c388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c38c:	f7e3 ff7c 	bl	8000288 <__aeabi_dsub>
 801c390:	4632      	mov	r2, r6
 801c392:	463b      	mov	r3, r7
 801c394:	f7e4 f930 	bl	80005f8 <__aeabi_dmul>
 801c398:	4602      	mov	r2, r0
 801c39a:	460b      	mov	r3, r1
 801c39c:	4640      	mov	r0, r8
 801c39e:	4649      	mov	r1, r9
 801c3a0:	f7e3 ff74 	bl	800028c <__adddf3>
 801c3a4:	4622      	mov	r2, r4
 801c3a6:	462b      	mov	r3, r5
 801c3a8:	f7e4 f926 	bl	80005f8 <__aeabi_dmul>
 801c3ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 801c3b0:	4602      	mov	r2, r0
 801c3b2:	460b      	mov	r3, r1
 801c3b4:	d14b      	bne.n	801c44e <atan+0x25e>
 801c3b6:	4620      	mov	r0, r4
 801c3b8:	4629      	mov	r1, r5
 801c3ba:	f7e3 ff65 	bl	8000288 <__aeabi_dsub>
 801c3be:	e72c      	b.n	801c21a <atan+0x2a>
 801c3c0:	ee10 0a10 	vmov	r0, s0
 801c3c4:	4b53      	ldr	r3, [pc, #332]	; (801c514 <atan+0x324>)
 801c3c6:	2200      	movs	r2, #0
 801c3c8:	4629      	mov	r1, r5
 801c3ca:	f7e3 ff5d 	bl	8000288 <__aeabi_dsub>
 801c3ce:	4b51      	ldr	r3, [pc, #324]	; (801c514 <atan+0x324>)
 801c3d0:	4606      	mov	r6, r0
 801c3d2:	460f      	mov	r7, r1
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	4629      	mov	r1, r5
 801c3da:	f7e3 ff57 	bl	800028c <__adddf3>
 801c3de:	4602      	mov	r2, r0
 801c3e0:	460b      	mov	r3, r1
 801c3e2:	4630      	mov	r0, r6
 801c3e4:	4639      	mov	r1, r7
 801c3e6:	f7e4 fa31 	bl	800084c <__aeabi_ddiv>
 801c3ea:	f04f 0a01 	mov.w	sl, #1
 801c3ee:	4604      	mov	r4, r0
 801c3f0:	460d      	mov	r5, r1
 801c3f2:	e764      	b.n	801c2be <atan+0xce>
 801c3f4:	4b49      	ldr	r3, [pc, #292]	; (801c51c <atan+0x32c>)
 801c3f6:	429e      	cmp	r6, r3
 801c3f8:	da1d      	bge.n	801c436 <atan+0x246>
 801c3fa:	ee10 0a10 	vmov	r0, s0
 801c3fe:	4b48      	ldr	r3, [pc, #288]	; (801c520 <atan+0x330>)
 801c400:	2200      	movs	r2, #0
 801c402:	4629      	mov	r1, r5
 801c404:	f7e3 ff40 	bl	8000288 <__aeabi_dsub>
 801c408:	4b45      	ldr	r3, [pc, #276]	; (801c520 <atan+0x330>)
 801c40a:	4606      	mov	r6, r0
 801c40c:	460f      	mov	r7, r1
 801c40e:	2200      	movs	r2, #0
 801c410:	4620      	mov	r0, r4
 801c412:	4629      	mov	r1, r5
 801c414:	f7e4 f8f0 	bl	80005f8 <__aeabi_dmul>
 801c418:	4b3e      	ldr	r3, [pc, #248]	; (801c514 <atan+0x324>)
 801c41a:	2200      	movs	r2, #0
 801c41c:	f7e3 ff36 	bl	800028c <__adddf3>
 801c420:	4602      	mov	r2, r0
 801c422:	460b      	mov	r3, r1
 801c424:	4630      	mov	r0, r6
 801c426:	4639      	mov	r1, r7
 801c428:	f7e4 fa10 	bl	800084c <__aeabi_ddiv>
 801c42c:	f04f 0a02 	mov.w	sl, #2
 801c430:	4604      	mov	r4, r0
 801c432:	460d      	mov	r5, r1
 801c434:	e743      	b.n	801c2be <atan+0xce>
 801c436:	462b      	mov	r3, r5
 801c438:	ee10 2a10 	vmov	r2, s0
 801c43c:	4939      	ldr	r1, [pc, #228]	; (801c524 <atan+0x334>)
 801c43e:	2000      	movs	r0, #0
 801c440:	f7e4 fa04 	bl	800084c <__aeabi_ddiv>
 801c444:	f04f 0a03 	mov.w	sl, #3
 801c448:	4604      	mov	r4, r0
 801c44a:	460d      	mov	r5, r1
 801c44c:	e737      	b.n	801c2be <atan+0xce>
 801c44e:	4b36      	ldr	r3, [pc, #216]	; (801c528 <atan+0x338>)
 801c450:	4e36      	ldr	r6, [pc, #216]	; (801c52c <atan+0x33c>)
 801c452:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c456:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801c45a:	e9da 2300 	ldrd	r2, r3, [sl]
 801c45e:	f7e3 ff13 	bl	8000288 <__aeabi_dsub>
 801c462:	4622      	mov	r2, r4
 801c464:	462b      	mov	r3, r5
 801c466:	f7e3 ff0f 	bl	8000288 <__aeabi_dsub>
 801c46a:	4602      	mov	r2, r0
 801c46c:	460b      	mov	r3, r1
 801c46e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c472:	f7e3 ff09 	bl	8000288 <__aeabi_dsub>
 801c476:	f1bb 0f00 	cmp.w	fp, #0
 801c47a:	4604      	mov	r4, r0
 801c47c:	460d      	mov	r5, r1
 801c47e:	f6bf aed6 	bge.w	801c22e <atan+0x3e>
 801c482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c486:	461d      	mov	r5, r3
 801c488:	e6d1      	b.n	801c22e <atan+0x3e>
 801c48a:	a51d      	add	r5, pc, #116	; (adr r5, 801c500 <atan+0x310>)
 801c48c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c490:	e6cd      	b.n	801c22e <atan+0x3e>
 801c492:	bf00      	nop
 801c494:	f3af 8000 	nop.w
 801c498:	54442d18 	.word	0x54442d18
 801c49c:	bff921fb 	.word	0xbff921fb
 801c4a0:	8800759c 	.word	0x8800759c
 801c4a4:	7e37e43c 	.word	0x7e37e43c
 801c4a8:	e322da11 	.word	0xe322da11
 801c4ac:	3f90ad3a 	.word	0x3f90ad3a
 801c4b0:	24760deb 	.word	0x24760deb
 801c4b4:	3fa97b4b 	.word	0x3fa97b4b
 801c4b8:	a0d03d51 	.word	0xa0d03d51
 801c4bc:	3fb10d66 	.word	0x3fb10d66
 801c4c0:	c54c206e 	.word	0xc54c206e
 801c4c4:	3fb745cd 	.word	0x3fb745cd
 801c4c8:	920083ff 	.word	0x920083ff
 801c4cc:	3fc24924 	.word	0x3fc24924
 801c4d0:	5555550d 	.word	0x5555550d
 801c4d4:	3fd55555 	.word	0x3fd55555
 801c4d8:	2c6a6c2f 	.word	0x2c6a6c2f
 801c4dc:	bfa2b444 	.word	0xbfa2b444
 801c4e0:	52defd9a 	.word	0x52defd9a
 801c4e4:	3fadde2d 	.word	0x3fadde2d
 801c4e8:	af749a6d 	.word	0xaf749a6d
 801c4ec:	3fb3b0f2 	.word	0x3fb3b0f2
 801c4f0:	fe231671 	.word	0xfe231671
 801c4f4:	3fbc71c6 	.word	0x3fbc71c6
 801c4f8:	9998ebc4 	.word	0x9998ebc4
 801c4fc:	3fc99999 	.word	0x3fc99999
 801c500:	54442d18 	.word	0x54442d18
 801c504:	3ff921fb 	.word	0x3ff921fb
 801c508:	440fffff 	.word	0x440fffff
 801c50c:	7ff00000 	.word	0x7ff00000
 801c510:	3fdbffff 	.word	0x3fdbffff
 801c514:	3ff00000 	.word	0x3ff00000
 801c518:	3ff2ffff 	.word	0x3ff2ffff
 801c51c:	40038000 	.word	0x40038000
 801c520:	3ff80000 	.word	0x3ff80000
 801c524:	bff00000 	.word	0xbff00000
 801c528:	0801d140 	.word	0x0801d140
 801c52c:	0801d120 	.word	0x0801d120

0801c530 <fabs>:
 801c530:	ec51 0b10 	vmov	r0, r1, d0
 801c534:	ee10 2a10 	vmov	r2, s0
 801c538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c53c:	ec43 2b10 	vmov	d0, r2, r3
 801c540:	4770      	bx	lr
 801c542:	0000      	movs	r0, r0
 801c544:	0000      	movs	r0, r0
	...

0801c548 <floor>:
 801c548:	ec51 0b10 	vmov	r0, r1, d0
 801c54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c550:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c554:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c558:	2e13      	cmp	r6, #19
 801c55a:	ee10 5a10 	vmov	r5, s0
 801c55e:	ee10 8a10 	vmov	r8, s0
 801c562:	460c      	mov	r4, r1
 801c564:	dc32      	bgt.n	801c5cc <floor+0x84>
 801c566:	2e00      	cmp	r6, #0
 801c568:	da14      	bge.n	801c594 <floor+0x4c>
 801c56a:	a333      	add	r3, pc, #204	; (adr r3, 801c638 <floor+0xf0>)
 801c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c570:	f7e3 fe8c 	bl	800028c <__adddf3>
 801c574:	2200      	movs	r2, #0
 801c576:	2300      	movs	r3, #0
 801c578:	f7e4 face 	bl	8000b18 <__aeabi_dcmpgt>
 801c57c:	b138      	cbz	r0, 801c58e <floor+0x46>
 801c57e:	2c00      	cmp	r4, #0
 801c580:	da57      	bge.n	801c632 <floor+0xea>
 801c582:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c586:	431d      	orrs	r5, r3
 801c588:	d001      	beq.n	801c58e <floor+0x46>
 801c58a:	4c2d      	ldr	r4, [pc, #180]	; (801c640 <floor+0xf8>)
 801c58c:	2500      	movs	r5, #0
 801c58e:	4621      	mov	r1, r4
 801c590:	4628      	mov	r0, r5
 801c592:	e025      	b.n	801c5e0 <floor+0x98>
 801c594:	4f2b      	ldr	r7, [pc, #172]	; (801c644 <floor+0xfc>)
 801c596:	4137      	asrs	r7, r6
 801c598:	ea01 0307 	and.w	r3, r1, r7
 801c59c:	4303      	orrs	r3, r0
 801c59e:	d01f      	beq.n	801c5e0 <floor+0x98>
 801c5a0:	a325      	add	r3, pc, #148	; (adr r3, 801c638 <floor+0xf0>)
 801c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5a6:	f7e3 fe71 	bl	800028c <__adddf3>
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	f7e4 fab3 	bl	8000b18 <__aeabi_dcmpgt>
 801c5b2:	2800      	cmp	r0, #0
 801c5b4:	d0eb      	beq.n	801c58e <floor+0x46>
 801c5b6:	2c00      	cmp	r4, #0
 801c5b8:	bfbe      	ittt	lt
 801c5ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c5be:	fa43 f606 	asrlt.w	r6, r3, r6
 801c5c2:	19a4      	addlt	r4, r4, r6
 801c5c4:	ea24 0407 	bic.w	r4, r4, r7
 801c5c8:	2500      	movs	r5, #0
 801c5ca:	e7e0      	b.n	801c58e <floor+0x46>
 801c5cc:	2e33      	cmp	r6, #51	; 0x33
 801c5ce:	dd0b      	ble.n	801c5e8 <floor+0xa0>
 801c5d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c5d4:	d104      	bne.n	801c5e0 <floor+0x98>
 801c5d6:	ee10 2a10 	vmov	r2, s0
 801c5da:	460b      	mov	r3, r1
 801c5dc:	f7e3 fe56 	bl	800028c <__adddf3>
 801c5e0:	ec41 0b10 	vmov	d0, r0, r1
 801c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c5ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c5f0:	fa23 f707 	lsr.w	r7, r3, r7
 801c5f4:	4207      	tst	r7, r0
 801c5f6:	d0f3      	beq.n	801c5e0 <floor+0x98>
 801c5f8:	a30f      	add	r3, pc, #60	; (adr r3, 801c638 <floor+0xf0>)
 801c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5fe:	f7e3 fe45 	bl	800028c <__adddf3>
 801c602:	2200      	movs	r2, #0
 801c604:	2300      	movs	r3, #0
 801c606:	f7e4 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 801c60a:	2800      	cmp	r0, #0
 801c60c:	d0bf      	beq.n	801c58e <floor+0x46>
 801c60e:	2c00      	cmp	r4, #0
 801c610:	da02      	bge.n	801c618 <floor+0xd0>
 801c612:	2e14      	cmp	r6, #20
 801c614:	d103      	bne.n	801c61e <floor+0xd6>
 801c616:	3401      	adds	r4, #1
 801c618:	ea25 0507 	bic.w	r5, r5, r7
 801c61c:	e7b7      	b.n	801c58e <floor+0x46>
 801c61e:	2301      	movs	r3, #1
 801c620:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c624:	fa03 f606 	lsl.w	r6, r3, r6
 801c628:	4435      	add	r5, r6
 801c62a:	4545      	cmp	r5, r8
 801c62c:	bf38      	it	cc
 801c62e:	18e4      	addcc	r4, r4, r3
 801c630:	e7f2      	b.n	801c618 <floor+0xd0>
 801c632:	2500      	movs	r5, #0
 801c634:	462c      	mov	r4, r5
 801c636:	e7aa      	b.n	801c58e <floor+0x46>
 801c638:	8800759c 	.word	0x8800759c
 801c63c:	7e37e43c 	.word	0x7e37e43c
 801c640:	bff00000 	.word	0xbff00000
 801c644:	000fffff 	.word	0x000fffff

0801c648 <scalbn>:
 801c648:	b570      	push	{r4, r5, r6, lr}
 801c64a:	ec55 4b10 	vmov	r4, r5, d0
 801c64e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c652:	4606      	mov	r6, r0
 801c654:	462b      	mov	r3, r5
 801c656:	b99a      	cbnz	r2, 801c680 <scalbn+0x38>
 801c658:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c65c:	4323      	orrs	r3, r4
 801c65e:	d036      	beq.n	801c6ce <scalbn+0x86>
 801c660:	4b39      	ldr	r3, [pc, #228]	; (801c748 <scalbn+0x100>)
 801c662:	4629      	mov	r1, r5
 801c664:	ee10 0a10 	vmov	r0, s0
 801c668:	2200      	movs	r2, #0
 801c66a:	f7e3 ffc5 	bl	80005f8 <__aeabi_dmul>
 801c66e:	4b37      	ldr	r3, [pc, #220]	; (801c74c <scalbn+0x104>)
 801c670:	429e      	cmp	r6, r3
 801c672:	4604      	mov	r4, r0
 801c674:	460d      	mov	r5, r1
 801c676:	da10      	bge.n	801c69a <scalbn+0x52>
 801c678:	a32b      	add	r3, pc, #172	; (adr r3, 801c728 <scalbn+0xe0>)
 801c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c67e:	e03a      	b.n	801c6f6 <scalbn+0xae>
 801c680:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c684:	428a      	cmp	r2, r1
 801c686:	d10c      	bne.n	801c6a2 <scalbn+0x5a>
 801c688:	ee10 2a10 	vmov	r2, s0
 801c68c:	4620      	mov	r0, r4
 801c68e:	4629      	mov	r1, r5
 801c690:	f7e3 fdfc 	bl	800028c <__adddf3>
 801c694:	4604      	mov	r4, r0
 801c696:	460d      	mov	r5, r1
 801c698:	e019      	b.n	801c6ce <scalbn+0x86>
 801c69a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c69e:	460b      	mov	r3, r1
 801c6a0:	3a36      	subs	r2, #54	; 0x36
 801c6a2:	4432      	add	r2, r6
 801c6a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c6a8:	428a      	cmp	r2, r1
 801c6aa:	dd08      	ble.n	801c6be <scalbn+0x76>
 801c6ac:	2d00      	cmp	r5, #0
 801c6ae:	a120      	add	r1, pc, #128	; (adr r1, 801c730 <scalbn+0xe8>)
 801c6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6b4:	da1c      	bge.n	801c6f0 <scalbn+0xa8>
 801c6b6:	a120      	add	r1, pc, #128	; (adr r1, 801c738 <scalbn+0xf0>)
 801c6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6bc:	e018      	b.n	801c6f0 <scalbn+0xa8>
 801c6be:	2a00      	cmp	r2, #0
 801c6c0:	dd08      	ble.n	801c6d4 <scalbn+0x8c>
 801c6c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c6c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c6ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c6ce:	ec45 4b10 	vmov	d0, r4, r5
 801c6d2:	bd70      	pop	{r4, r5, r6, pc}
 801c6d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c6d8:	da19      	bge.n	801c70e <scalbn+0xc6>
 801c6da:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c6de:	429e      	cmp	r6, r3
 801c6e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c6e4:	dd0a      	ble.n	801c6fc <scalbn+0xb4>
 801c6e6:	a112      	add	r1, pc, #72	; (adr r1, 801c730 <scalbn+0xe8>)
 801c6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d1e2      	bne.n	801c6b6 <scalbn+0x6e>
 801c6f0:	a30f      	add	r3, pc, #60	; (adr r3, 801c730 <scalbn+0xe8>)
 801c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6f6:	f7e3 ff7f 	bl	80005f8 <__aeabi_dmul>
 801c6fa:	e7cb      	b.n	801c694 <scalbn+0x4c>
 801c6fc:	a10a      	add	r1, pc, #40	; (adr r1, 801c728 <scalbn+0xe0>)
 801c6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c702:	2b00      	cmp	r3, #0
 801c704:	d0b8      	beq.n	801c678 <scalbn+0x30>
 801c706:	a10e      	add	r1, pc, #56	; (adr r1, 801c740 <scalbn+0xf8>)
 801c708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c70c:	e7b4      	b.n	801c678 <scalbn+0x30>
 801c70e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c712:	3236      	adds	r2, #54	; 0x36
 801c714:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c718:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c71c:	4620      	mov	r0, r4
 801c71e:	4b0c      	ldr	r3, [pc, #48]	; (801c750 <scalbn+0x108>)
 801c720:	2200      	movs	r2, #0
 801c722:	e7e8      	b.n	801c6f6 <scalbn+0xae>
 801c724:	f3af 8000 	nop.w
 801c728:	c2f8f359 	.word	0xc2f8f359
 801c72c:	01a56e1f 	.word	0x01a56e1f
 801c730:	8800759c 	.word	0x8800759c
 801c734:	7e37e43c 	.word	0x7e37e43c
 801c738:	8800759c 	.word	0x8800759c
 801c73c:	fe37e43c 	.word	0xfe37e43c
 801c740:	c2f8f359 	.word	0xc2f8f359
 801c744:	81a56e1f 	.word	0x81a56e1f
 801c748:	43500000 	.word	0x43500000
 801c74c:	ffff3cb0 	.word	0xffff3cb0
 801c750:	3c900000 	.word	0x3c900000

0801c754 <_init>:
 801c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c756:	bf00      	nop
 801c758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c75a:	bc08      	pop	{r3}
 801c75c:	469e      	mov	lr, r3
 801c75e:	4770      	bx	lr

0801c760 <_fini>:
 801c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c762:	bf00      	nop
 801c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c766:	bc08      	pop	{r3}
 801c768:	469e      	mov	lr, r3
 801c76a:	4770      	bx	lr
